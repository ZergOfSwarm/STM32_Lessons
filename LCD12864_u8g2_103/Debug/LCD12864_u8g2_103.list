
LCD12864_u8g2_103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002efc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000590  08003008  08003008  00013008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003598  08003598  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08003598  08003598  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003598  08003598  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003598  08003598  00013598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800359c  0800359c  0001359c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080035a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000690  20000060  08003600  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006f0  08003600  000206f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000af85  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dea  00000000  00000000  0002b051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c18  00000000  00000000  0002ce40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000965  00000000  00000000  0002da58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017cf8  00000000  00000000  0002e3bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cdcb  00000000  00000000  000460b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089f4a  00000000  00000000  00052e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003748  00000000  00000000  000dcdcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000e0514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ff0 	.word	0x08002ff0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08002ff0 	.word	0x08002ff0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <GMG12864_Send_command>:
}
/*---------------Вывод стартового демонстрационного лого------------------------*/
/*================= Демонстрационное лого. Можно вырезать. =====================*/

/*----------------------Функция отправки команды на дисплей------------------------*/
static void GMG12864_Send_command(uint8_t Command) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	71fb      	strb	r3, [r7, #7]
/// Функция отправки команды на дисплей
/// \param Command - 8 бит данных.
	DC_set();
 8000166:	4b0c      	ldr	r3, [pc, #48]	; (8000198 <GMG12864_Send_command+0x3c>)
 8000168:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800016c:	611a      	str	r2, [r3, #16]
	HAL_SPI_Transmit(&hspi1, &Command, 1, HAL_MAX_DELAY);
 800016e:	1df9      	adds	r1, r7, #7
 8000170:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000174:	2201      	movs	r2, #1
 8000176:	4809      	ldr	r0, [pc, #36]	; (800019c <GMG12864_Send_command+0x40>)
 8000178:	f001 fe48 	bl	8001e0c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800017c:	bf00      	nop
 800017e:	4807      	ldr	r0, [pc, #28]	; (800019c <GMG12864_Send_command+0x40>)
 8000180:	f001 ff87 	bl	8002092 <HAL_SPI_GetState>
 8000184:	4603      	mov	r3, r0
 8000186:	2b01      	cmp	r3, #1
 8000188:	d1f9      	bne.n	800017e <GMG12864_Send_command+0x22>
	DC_reset();
 800018a:	4b03      	ldr	r3, [pc, #12]	; (8000198 <GMG12864_Send_command+0x3c>)
 800018c:	2204      	movs	r2, #4
 800018e:	611a      	str	r2, [r3, #16]
}
 8000190:	bf00      	nop
 8000192:	3708      	adds	r7, #8
 8000194:	46bd      	mov	sp, r7
 8000196:	bd80      	pop	{r7, pc}
 8000198:	40010800 	.word	0x40010800
 800019c:	20000500 	.word	0x20000500

080001a0 <GMG12864_Send_data>:
/*----------------------Функция отправки команды на дисплей------------------------*/

/*----------------------Функция отправки данных на дисплей------------------------*/
/// Функция отправки данных на дисплей
/// \param Data - 8 бит данных.
static void GMG12864_Send_data(uint8_t Dat) {
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	4603      	mov	r3, r0
 80001a8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &Dat, 1, HAL_MAX_DELAY);
 80001aa:	1df9      	adds	r1, r7, #7
 80001ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80001b0:	2201      	movs	r2, #1
 80001b2:	4807      	ldr	r0, [pc, #28]	; (80001d0 <GMG12864_Send_data+0x30>)
 80001b4:	f001 fe2a 	bl	8001e0c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80001b8:	bf00      	nop
 80001ba:	4805      	ldr	r0, [pc, #20]	; (80001d0 <GMG12864_Send_data+0x30>)
 80001bc:	f001 ff69 	bl	8002092 <HAL_SPI_GetState>
 80001c0:	4603      	mov	r3, r0
 80001c2:	2b01      	cmp	r3, #1
 80001c4:	d1f9      	bne.n	80001ba <GMG12864_Send_data+0x1a>
}
 80001c6:	bf00      	nop
 80001c8:	bf00      	nop
 80001ca:	3708      	adds	r7, #8
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bd80      	pop	{r7, pc}
 80001d0:	20000500 	.word	0x20000500

080001d4 <GMG12864_Clean_Frame_buffer>:
/*----------------------Функция отправки данных на дисплей------------------------*/

/*------------------------Функция очистки буфера кадра-------------------------*/
void GMG12864_Clean_Frame_buffer(void) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
/// Функция очистки буфера кадра
	memset(Frame_buffer, 0x00, sizeof(Frame_buffer));
 80001d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80001dc:	2100      	movs	r1, #0
 80001de:	4802      	ldr	r0, [pc, #8]	; (80001e8 <GMG12864_Clean_Frame_buffer+0x14>)
 80001e0:	f002 fa74 	bl	80026cc <memset>
}
 80001e4:	bf00      	nop
 80001e6:	bd80      	pop	{r7, pc}
 80001e8:	200000fc 	.word	0x200000fc

080001ec <GMG12864_Init>:
/*------------------------Функция очистки буфера кадра-------------------------*/

/*-------------------------Функция инициализации дисплея--------------------------*/
void GMG12864_Init(void) {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
/// Функция инициализации дисплея
	cs_set();
 80001f0:	4b24      	ldr	r3, [pc, #144]	; (8000284 <GMG12864_Init+0x98>)
 80001f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80001f6:	611a      	str	r2, [r3, #16]
	RST_set();
 80001f8:	4b22      	ldr	r3, [pc, #136]	; (8000284 <GMG12864_Init+0x98>)
 80001fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80001fe:	611a      	str	r2, [r3, #16]
	HAL_Delay(10);
 8000200:	200a      	movs	r0, #10
 8000202:	f000 feb3 	bl	8000f6c <HAL_Delay>
	RST_reset();
 8000206:	4b1f      	ldr	r3, [pc, #124]	; (8000284 <GMG12864_Init+0x98>)
 8000208:	2202      	movs	r2, #2
 800020a:	611a      	str	r2, [r3, #16]
	HAL_Delay(10);
 800020c:	200a      	movs	r0, #10
 800020e:	f000 fead 	bl	8000f6c <HAL_Delay>
	// Установите рабочий цикл ( 1/7 или 1/9 ) в зависимости от физического ЖК-дисплея
	GMG12864_Send_command(0xA2);
 8000212:	20a2      	movs	r0, #162	; 0xa2
 8000214:	f7ff ffa2 	bl	800015c <GMG12864_Send_command>
	HAL_Delay(1);
 8000218:	2001      	movs	r0, #1
 800021a:	f000 fea7 	bl	8000f6c <HAL_Delay>
	// Установите горизонтальную и вертикальную ориентацию в известное состояние
	GMG12864_Send_command(0xA0); //ADC selection(SEG0->SEG128)
 800021e:	20a0      	movs	r0, #160	; 0xa0
 8000220:	f7ff ff9c 	bl	800015c <GMG12864_Send_command>
	GMG12864_Send_command(0xC8); //SHL selection(COM0->COM64)
 8000224:	20c8      	movs	r0, #200	; 0xc8
 8000226:	f7ff ff99 	bl	800015c <GMG12864_Send_command>
	HAL_Delay(1);
 800022a:	2001      	movs	r0, #1
 800022c:	f000 fe9e 	bl	8000f6c <HAL_Delay>
	// делитель внутреннего резистора установлен на 7 (от 0..7)
	GMG12864_Send_command(0x20 | 0x7);    //Regulator Resistor Selection
 8000230:	2027      	movs	r0, #39	; 0x27
 8000232:	f7ff ff93 	bl	800015c <GMG12864_Send_command>
	HAL_Delay(1);
 8000236:	2001      	movs	r0, #1
 8000238:	f000 fe98 	bl	8000f6c <HAL_Delay>
	// управление питанием, все внутренние блоки включены	(от 0..7)
	GMG12864_Send_command(0x28 | 0x7);
 800023c:	202f      	movs	r0, #47	; 0x2f
 800023e:	f7ff ff8d 	bl	800015c <GMG12864_Send_command>
	HAL_Delay(1);
 8000242:	2001      	movs	r0, #1
 8000244:	f000 fe92 	bl	8000f6c <HAL_Delay>
	// войти в режим динамического контраста
	GMG12864_Send_command(0x81);    //Electronic Volume
 8000248:	2081      	movs	r0, #129	; 0x81
 800024a:	f7ff ff87 	bl	800015c <GMG12864_Send_command>
	GMG12864_Send_command(18);	// Настройка контраста. Отрегулируйте на своем дисплее. У меня на 15-19 норм. Максимум 63.
 800024e:	2012      	movs	r0, #18
 8000250:	f7ff ff84 	bl	800015c <GMG12864_Send_command>
	HAL_Delay(1);
 8000254:	2001      	movs	r0, #1
 8000256:	f000 fe89 	bl	8000f6c <HAL_Delay>
	GMG12864_Send_command(0x40);
 800025a:	2040      	movs	r0, #64	; 0x40
 800025c:	f7ff ff7e 	bl	800015c <GMG12864_Send_command>
	HAL_Delay(1);
 8000260:	2001      	movs	r0, #1
 8000262:	f000 fe83 	bl	8000f6c <HAL_Delay>
	// CMD_DISPLAY_ON  CMD_DISPLAY_OFF
	GMG12864_Send_command(0xAF);    		//Display on
 8000266:	20af      	movs	r0, #175	; 0xaf
 8000268:	f7ff ff78 	bl	800015c <GMG12864_Send_command>
	// Инвертирование экрана
	GMG12864_Send_command(0xA6); //0xA6 - nomal, 0xA7 - revers
 800026c:	20a6      	movs	r0, #166	; 0xa6
 800026e:	f7ff ff75 	bl	800015c <GMG12864_Send_command>
	HAL_Delay(1);
 8000272:	2001      	movs	r0, #1
 8000274:	f000 fe7a 	bl	8000f6c <HAL_Delay>
	cs_reset();
 8000278:	4b02      	ldr	r3, [pc, #8]	; (8000284 <GMG12864_Init+0x98>)
 800027a:	2201      	movs	r2, #1
 800027c:	611a      	str	r2, [r3, #16]
}
 800027e:	bf00      	nop
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	40010800 	.word	0x40010800

08000288 <GMG12864_Draw_pixel>:
	}
}
/*------------------------Функция вывода изображения с указаием его размера-------------------------*/

/*------------------------Функция рисования пикселя-------------------------*/
void GMG12864_Draw_pixel(int16_t x, int16_t y, uint8_t color) {
 8000288:	b480      	push	{r7}
 800028a:	b085      	sub	sp, #20
 800028c:	af00      	add	r7, sp, #0
 800028e:	4603      	mov	r3, r0
 8000290:	80fb      	strh	r3, [r7, #6]
 8000292:	460b      	mov	r3, r1
 8000294:	80bb      	strh	r3, [r7, #4]
 8000296:	4613      	mov	r3, r2
 8000298:	70fb      	strb	r3, [r7, #3]

	if (x >= GMG12864_width || x < 0 || y >= GMG12864_height || y < 0) {
 800029a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800029e:	4a2f      	ldr	r2, [pc, #188]	; (800035c <GMG12864_Draw_pixel+0xd4>)
 80002a0:	7812      	ldrb	r2, [r2, #0]
 80002a2:	4293      	cmp	r3, r2
 80002a4:	da55      	bge.n	8000352 <GMG12864_Draw_pixel+0xca>
 80002a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	db51      	blt.n	8000352 <GMG12864_Draw_pixel+0xca>
 80002ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80002b2:	4a2b      	ldr	r2, [pc, #172]	; (8000360 <GMG12864_Draw_pixel+0xd8>)
 80002b4:	7812      	ldrb	r2, [r2, #0]
 80002b6:	4293      	cmp	r3, r2
 80002b8:	da4b      	bge.n	8000352 <GMG12864_Draw_pixel+0xca>
 80002ba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	db47      	blt.n	8000352 <GMG12864_Draw_pixel+0xca>
		return;
	} else {
		uint16_t array_pos = x + ((y / 8) * GMG12864_width);
 80002c2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	da00      	bge.n	80002cc <GMG12864_Draw_pixel+0x44>
 80002ca:	3307      	adds	r3, #7
 80002cc:	10db      	asrs	r3, r3, #3
 80002ce:	b21b      	sxth	r3, r3
 80002d0:	b29b      	uxth	r3, r3
 80002d2:	4a22      	ldr	r2, [pc, #136]	; (800035c <GMG12864_Draw_pixel+0xd4>)
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	b292      	uxth	r2, r2
 80002d8:	fb02 f303 	mul.w	r3, r2, r3
 80002dc:	b29a      	uxth	r2, r3
 80002de:	88fb      	ldrh	r3, [r7, #6]
 80002e0:	4413      	add	r3, r2
 80002e2:	81fb      	strh	r3, [r7, #14]

		if (color) {
 80002e4:	78fb      	ldrb	r3, [r7, #3]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d018      	beq.n	800031c <GMG12864_Draw_pixel+0x94>
			Frame_buffer[array_pos] |= 1 << (y % 8);
 80002ea:	89fb      	ldrh	r3, [r7, #14]
 80002ec:	4a1d      	ldr	r2, [pc, #116]	; (8000364 <GMG12864_Draw_pixel+0xdc>)
 80002ee:	5cd3      	ldrb	r3, [r2, r3]
 80002f0:	b25a      	sxtb	r2, r3
 80002f2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80002f6:	4259      	negs	r1, r3
 80002f8:	f003 0307 	and.w	r3, r3, #7
 80002fc:	f001 0107 	and.w	r1, r1, #7
 8000300:	bf58      	it	pl
 8000302:	424b      	negpl	r3, r1
 8000304:	b21b      	sxth	r3, r3
 8000306:	4619      	mov	r1, r3
 8000308:	2301      	movs	r3, #1
 800030a:	408b      	lsls	r3, r1
 800030c:	b25b      	sxtb	r3, r3
 800030e:	4313      	orrs	r3, r2
 8000310:	b25a      	sxtb	r2, r3
 8000312:	89fb      	ldrh	r3, [r7, #14]
 8000314:	b2d1      	uxtb	r1, r2
 8000316:	4a13      	ldr	r2, [pc, #76]	; (8000364 <GMG12864_Draw_pixel+0xdc>)
 8000318:	54d1      	strb	r1, [r2, r3]
 800031a:	e01b      	b.n	8000354 <GMG12864_Draw_pixel+0xcc>
		} else {
			Frame_buffer[array_pos] &= 0xFF ^ 1 << (y % 8);
 800031c:	89fb      	ldrh	r3, [r7, #14]
 800031e:	4a11      	ldr	r2, [pc, #68]	; (8000364 <GMG12864_Draw_pixel+0xdc>)
 8000320:	5cd3      	ldrb	r3, [r2, r3]
 8000322:	b25a      	sxtb	r2, r3
 8000324:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000328:	4259      	negs	r1, r3
 800032a:	f003 0307 	and.w	r3, r3, #7
 800032e:	f001 0107 	and.w	r1, r1, #7
 8000332:	bf58      	it	pl
 8000334:	424b      	negpl	r3, r1
 8000336:	b21b      	sxth	r3, r3
 8000338:	4619      	mov	r1, r3
 800033a:	2301      	movs	r3, #1
 800033c:	408b      	lsls	r3, r1
 800033e:	b25b      	sxtb	r3, r3
 8000340:	43db      	mvns	r3, r3
 8000342:	b25b      	sxtb	r3, r3
 8000344:	4013      	ands	r3, r2
 8000346:	b25a      	sxtb	r2, r3
 8000348:	89fb      	ldrh	r3, [r7, #14]
 800034a:	b2d1      	uxtb	r1, r2
 800034c:	4a05      	ldr	r2, [pc, #20]	; (8000364 <GMG12864_Draw_pixel+0xdc>)
 800034e:	54d1      	strb	r1, [r2, r3]
 8000350:	e000      	b.n	8000354 <GMG12864_Draw_pixel+0xcc>
		return;
 8000352:	bf00      	nop
		}
	}

}
 8000354:	3714      	adds	r7, #20
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr
 800035c:	20000000 	.word	0x20000000
 8000360:	20000001 	.word	0x20000001
 8000364:	200000fc 	.word	0x200000fc

08000368 <GMG12864_Update>:
/*------------------------Функция рисования пикселя-------------------------*/

/*---------------------Функция вывода буфера кадра на дисплей------------------------*/
void GMG12864_Update(void) {
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
	cs_set();
 800036e:	4b1c      	ldr	r3, [pc, #112]	; (80003e0 <GMG12864_Update+0x78>)
 8000370:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000374:	611a      	str	r2, [r3, #16]
	for (uint8_t y = 0; y < 8; y++) {
 8000376:	2300      	movs	r3, #0
 8000378:	71fb      	strb	r3, [r7, #7]
 800037a:	e027      	b.n	80003cc <GMG12864_Update+0x64>
		ST7565_SetX(0);
 800037c:	2010      	movs	r0, #16
 800037e:	f7ff feed 	bl	800015c <GMG12864_Send_command>
 8000382:	2000      	movs	r0, #0
 8000384:	f7ff feea 	bl	800015c <GMG12864_Send_command>
		ST7565_SetY((int16_t )y);
 8000388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800038c:	f003 0307 	and.w	r3, r3, #7
 8000390:	b25b      	sxtb	r3, r3
 8000392:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8000396:	b25b      	sxtb	r3, r3
 8000398:	b2db      	uxtb	r3, r3
 800039a:	4618      	mov	r0, r3
 800039c:	f7ff fede 	bl	800015c <GMG12864_Send_command>
		for (uint8_t x = 0; x < 128; x++) {
 80003a0:	2300      	movs	r3, #0
 80003a2:	71bb      	strb	r3, [r7, #6]
 80003a4:	e00b      	b.n	80003be <GMG12864_Update+0x56>
			GMG12864_Send_data(Frame_buffer[x + 128 * y]);
 80003a6:	79ba      	ldrb	r2, [r7, #6]
 80003a8:	79fb      	ldrb	r3, [r7, #7]
 80003aa:	01db      	lsls	r3, r3, #7
 80003ac:	4413      	add	r3, r2
 80003ae:	4a0d      	ldr	r2, [pc, #52]	; (80003e4 <GMG12864_Update+0x7c>)
 80003b0:	5cd3      	ldrb	r3, [r2, r3]
 80003b2:	4618      	mov	r0, r3
 80003b4:	f7ff fef4 	bl	80001a0 <GMG12864_Send_data>
		for (uint8_t x = 0; x < 128; x++) {
 80003b8:	79bb      	ldrb	r3, [r7, #6]
 80003ba:	3301      	adds	r3, #1
 80003bc:	71bb      	strb	r3, [r7, #6]
 80003be:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	daef      	bge.n	80003a6 <GMG12864_Update+0x3e>
	for (uint8_t y = 0; y < 8; y++) {
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	3301      	adds	r3, #1
 80003ca:	71fb      	strb	r3, [r7, #7]
 80003cc:	79fb      	ldrb	r3, [r7, #7]
 80003ce:	2b07      	cmp	r3, #7
 80003d0:	d9d4      	bls.n	800037c <GMG12864_Update+0x14>
		}
	}
	cs_reset();
 80003d2:	4b03      	ldr	r3, [pc, #12]	; (80003e0 <GMG12864_Update+0x78>)
 80003d4:	2201      	movs	r2, #1
 80003d6:	611a      	str	r2, [r3, #16]
}
 80003d8:	bf00      	nop
 80003da:	3708      	adds	r7, #8
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	40010800 	.word	0x40010800
 80003e4:	200000fc 	.word	0x200000fc

080003e8 <GMG12864_Print_symbol_5x7>:
/*---------------------Функция вывода буфера кадра на дисплей------------------------*/

/*---------------------Функция вывода символа на дисплей-----------------------------*/
void GMG12864_Print_symbol_5x7(uint8_t x, uint8_t y, uint16_t symbol, uint8_t inversion) {
 80003e8:	b590      	push	{r4, r7, lr}
 80003ea:	b085      	sub	sp, #20
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	4604      	mov	r4, r0
 80003f0:	4608      	mov	r0, r1
 80003f2:	4611      	mov	r1, r2
 80003f4:	461a      	mov	r2, r3
 80003f6:	4623      	mov	r3, r4
 80003f8:	71fb      	strb	r3, [r7, #7]
 80003fa:	4603      	mov	r3, r0
 80003fc:	71bb      	strb	r3, [r7, #6]
 80003fe:	460b      	mov	r3, r1
 8000400:	80bb      	strh	r3, [r7, #4]
 8000402:	4613      	mov	r3, r2
 8000404:	70fb      	strb	r3, [r7, #3]
/// Функция вывода символа на дисплей
	uint8_t x_start = x; //начальное положение по x
 8000406:	79fb      	ldrb	r3, [r7, #7]
 8000408:	733b      	strb	r3, [r7, #12]
	uint8_t x_stop = x + 5; //конечное положение по x с учетом межсимвольного интервала
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	3305      	adds	r3, #5
 800040e:	72fb      	strb	r3, [r7, #11]
	for (uint8_t x = x_start; x <= x_stop; x++) {
 8000410:	7b3b      	ldrb	r3, [r7, #12]
 8000412:	73fb      	strb	r3, [r7, #15]
 8000414:	e086      	b.n	8000524 <GMG12864_Print_symbol_5x7+0x13c>
		if (x == x_stop) { //Заполняем межсимвольные интервалы
 8000416:	7bfa      	ldrb	r2, [r7, #15]
 8000418:	7afb      	ldrb	r3, [r7, #11]
 800041a:	429a      	cmp	r2, r3
 800041c:	d127      	bne.n	800046e <GMG12864_Print_symbol_5x7+0x86>
			for (uint8_t i = 0; i <= 6; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 800041e:	2300      	movs	r3, #0
 8000420:	73bb      	strb	r3, [r7, #14]
 8000422:	e020      	b.n	8000466 <GMG12864_Print_symbol_5x7+0x7e>
						GMG12864_Draw_pixel(x, y + i, 0); //Закрасить пиксель
					} else {
						GMG12864_Draw_pixel(x, y + i, 1); //Закрасить пиксель
					}
				} else {
					if (inversion) {
 8000424:	78fb      	ldrb	r3, [r7, #3]
 8000426:	2b00      	cmp	r3, #0
 8000428:	d00d      	beq.n	8000446 <GMG12864_Print_symbol_5x7+0x5e>
						GMG12864_Draw_pixel(x, y + i, 1); //Очистить пиксель
 800042a:	7bfb      	ldrb	r3, [r7, #15]
 800042c:	b218      	sxth	r0, r3
 800042e:	79bb      	ldrb	r3, [r7, #6]
 8000430:	b29a      	uxth	r2, r3
 8000432:	7bbb      	ldrb	r3, [r7, #14]
 8000434:	b29b      	uxth	r3, r3
 8000436:	4413      	add	r3, r2
 8000438:	b29b      	uxth	r3, r3
 800043a:	b21b      	sxth	r3, r3
 800043c:	2201      	movs	r2, #1
 800043e:	4619      	mov	r1, r3
 8000440:	f7ff ff22 	bl	8000288 <GMG12864_Draw_pixel>
 8000444:	e00c      	b.n	8000460 <GMG12864_Print_symbol_5x7+0x78>
					} else {
						GMG12864_Draw_pixel(x, y + i, 0); //Очистить пиксель
 8000446:	7bfb      	ldrb	r3, [r7, #15]
 8000448:	b218      	sxth	r0, r3
 800044a:	79bb      	ldrb	r3, [r7, #6]
 800044c:	b29a      	uxth	r2, r3
 800044e:	7bbb      	ldrb	r3, [r7, #14]
 8000450:	b29b      	uxth	r3, r3
 8000452:	4413      	add	r3, r2
 8000454:	b29b      	uxth	r3, r3
 8000456:	b21b      	sxth	r3, r3
 8000458:	2200      	movs	r2, #0
 800045a:	4619      	mov	r1, r3
 800045c:	f7ff ff14 	bl	8000288 <GMG12864_Draw_pixel>
			for (uint8_t i = 0; i <= 6; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8000460:	7bbb      	ldrb	r3, [r7, #14]
 8000462:	3301      	adds	r3, #1
 8000464:	73bb      	strb	r3, [r7, #14]
 8000466:	7bbb      	ldrb	r3, [r7, #14]
 8000468:	2b06      	cmp	r3, #6
 800046a:	d9db      	bls.n	8000424 <GMG12864_Print_symbol_5x7+0x3c>
 800046c:	e057      	b.n	800051e <GMG12864_Print_symbol_5x7+0x136>
					}
				}
			}
		} else { //Заполняем полезной информацией
			for (uint8_t i = 0; i <= 6; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 800046e:	2300      	movs	r3, #0
 8000470:	737b      	strb	r3, [r7, #13]
 8000472:	e051      	b.n	8000518 <GMG12864_Print_symbol_5x7+0x130>
				if (Font_5x7[(symbol * 5) + x - x_start] & (1 << i)) {
 8000474:	88ba      	ldrh	r2, [r7, #4]
 8000476:	4613      	mov	r3, r2
 8000478:	009b      	lsls	r3, r3, #2
 800047a:	441a      	add	r2, r3
 800047c:	7bfb      	ldrb	r3, [r7, #15]
 800047e:	441a      	add	r2, r3
 8000480:	7b3b      	ldrb	r3, [r7, #12]
 8000482:	1ad3      	subs	r3, r2, r3
 8000484:	4a2c      	ldr	r2, [pc, #176]	; (8000538 <GMG12864_Print_symbol_5x7+0x150>)
 8000486:	5cd3      	ldrb	r3, [r2, r3]
 8000488:	461a      	mov	r2, r3
 800048a:	7b7b      	ldrb	r3, [r7, #13]
 800048c:	fa42 f303 	asr.w	r3, r2, r3
 8000490:	f003 0301 	and.w	r3, r3, #1
 8000494:	2b00      	cmp	r3, #0
 8000496:	d01e      	beq.n	80004d6 <GMG12864_Print_symbol_5x7+0xee>
					if (inversion) {
 8000498:	78fb      	ldrb	r3, [r7, #3]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d00d      	beq.n	80004ba <GMG12864_Print_symbol_5x7+0xd2>
						GMG12864_Draw_pixel(x, y + i, 0); //Закрасить пиксель
 800049e:	7bfb      	ldrb	r3, [r7, #15]
 80004a0:	b218      	sxth	r0, r3
 80004a2:	79bb      	ldrb	r3, [r7, #6]
 80004a4:	b29a      	uxth	r2, r3
 80004a6:	7b7b      	ldrb	r3, [r7, #13]
 80004a8:	b29b      	uxth	r3, r3
 80004aa:	4413      	add	r3, r2
 80004ac:	b29b      	uxth	r3, r3
 80004ae:	b21b      	sxth	r3, r3
 80004b0:	2200      	movs	r2, #0
 80004b2:	4619      	mov	r1, r3
 80004b4:	f7ff fee8 	bl	8000288 <GMG12864_Draw_pixel>
 80004b8:	e02b      	b.n	8000512 <GMG12864_Print_symbol_5x7+0x12a>
					} else {
						GMG12864_Draw_pixel(x, y + i, 1); //Закрасить пиксель
 80004ba:	7bfb      	ldrb	r3, [r7, #15]
 80004bc:	b218      	sxth	r0, r3
 80004be:	79bb      	ldrb	r3, [r7, #6]
 80004c0:	b29a      	uxth	r2, r3
 80004c2:	7b7b      	ldrb	r3, [r7, #13]
 80004c4:	b29b      	uxth	r3, r3
 80004c6:	4413      	add	r3, r2
 80004c8:	b29b      	uxth	r3, r3
 80004ca:	b21b      	sxth	r3, r3
 80004cc:	2201      	movs	r2, #1
 80004ce:	4619      	mov	r1, r3
 80004d0:	f7ff feda 	bl	8000288 <GMG12864_Draw_pixel>
 80004d4:	e01d      	b.n	8000512 <GMG12864_Print_symbol_5x7+0x12a>
					}
				} else {
					if (inversion) {
 80004d6:	78fb      	ldrb	r3, [r7, #3]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d00d      	beq.n	80004f8 <GMG12864_Print_symbol_5x7+0x110>
						GMG12864_Draw_pixel(x, y + i, 1); //Очистить пиксель
 80004dc:	7bfb      	ldrb	r3, [r7, #15]
 80004de:	b218      	sxth	r0, r3
 80004e0:	79bb      	ldrb	r3, [r7, #6]
 80004e2:	b29a      	uxth	r2, r3
 80004e4:	7b7b      	ldrb	r3, [r7, #13]
 80004e6:	b29b      	uxth	r3, r3
 80004e8:	4413      	add	r3, r2
 80004ea:	b29b      	uxth	r3, r3
 80004ec:	b21b      	sxth	r3, r3
 80004ee:	2201      	movs	r2, #1
 80004f0:	4619      	mov	r1, r3
 80004f2:	f7ff fec9 	bl	8000288 <GMG12864_Draw_pixel>
 80004f6:	e00c      	b.n	8000512 <GMG12864_Print_symbol_5x7+0x12a>
					} else {
						GMG12864_Draw_pixel(x, y + i, 0); //Очистить пиксель
 80004f8:	7bfb      	ldrb	r3, [r7, #15]
 80004fa:	b218      	sxth	r0, r3
 80004fc:	79bb      	ldrb	r3, [r7, #6]
 80004fe:	b29a      	uxth	r2, r3
 8000500:	7b7b      	ldrb	r3, [r7, #13]
 8000502:	b29b      	uxth	r3, r3
 8000504:	4413      	add	r3, r2
 8000506:	b29b      	uxth	r3, r3
 8000508:	b21b      	sxth	r3, r3
 800050a:	2200      	movs	r2, #0
 800050c:	4619      	mov	r1, r3
 800050e:	f7ff febb 	bl	8000288 <GMG12864_Draw_pixel>
			for (uint8_t i = 0; i <= 6; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8000512:	7b7b      	ldrb	r3, [r7, #13]
 8000514:	3301      	adds	r3, #1
 8000516:	737b      	strb	r3, [r7, #13]
 8000518:	7b7b      	ldrb	r3, [r7, #13]
 800051a:	2b06      	cmp	r3, #6
 800051c:	d9aa      	bls.n	8000474 <GMG12864_Print_symbol_5x7+0x8c>
	for (uint8_t x = x_start; x <= x_stop; x++) {
 800051e:	7bfb      	ldrb	r3, [r7, #15]
 8000520:	3301      	adds	r3, #1
 8000522:	73fb      	strb	r3, [r7, #15]
 8000524:	7bfa      	ldrb	r2, [r7, #15]
 8000526:	7afb      	ldrb	r3, [r7, #11]
 8000528:	429a      	cmp	r2, r3
 800052a:	f67f af74 	bls.w	8000416 <GMG12864_Print_symbol_5x7+0x2e>
					}
				}
			}
		}
	}
}
 800052e:	bf00      	nop
 8000530:	bf00      	nop
 8000532:	3714      	adds	r7, #20
 8000534:	46bd      	mov	sp, r7
 8000536:	bd90      	pop	{r4, r7, pc}
 8000538:	0800320c 	.word	0x0800320c

0800053c <GMG12864_Print_symbol_3x5>:
/*---------------------Функция вывода символа на дисплей-----------------------------*/

/*---------------------Функция вывода символа на дисплей-----------------------------*/
void GMG12864_Print_symbol_3x5(uint8_t x, uint8_t y, uint16_t symbol, uint8_t inversion) {
 800053c:	b590      	push	{r4, r7, lr}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	4604      	mov	r4, r0
 8000544:	4608      	mov	r0, r1
 8000546:	4611      	mov	r1, r2
 8000548:	461a      	mov	r2, r3
 800054a:	4623      	mov	r3, r4
 800054c:	71fb      	strb	r3, [r7, #7]
 800054e:	4603      	mov	r3, r0
 8000550:	71bb      	strb	r3, [r7, #6]
 8000552:	460b      	mov	r3, r1
 8000554:	80bb      	strh	r3, [r7, #4]
 8000556:	4613      	mov	r3, r2
 8000558:	70fb      	strb	r3, [r7, #3]
/// Функция вывода символа на дисплей
	uint8_t x_start = x; //начальное положение по x
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	733b      	strb	r3, [r7, #12]
	uint8_t x_stop = x + 3; //конечное положение по x с учетом межсимвольного интервала
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	3303      	adds	r3, #3
 8000562:	72fb      	strb	r3, [r7, #11]
	for (uint8_t x = x_start; x <= x_stop; x++) {
 8000564:	7b3b      	ldrb	r3, [r7, #12]
 8000566:	73fb      	strb	r3, [r7, #15]
 8000568:	e086      	b.n	8000678 <GMG12864_Print_symbol_3x5+0x13c>
		if (x == x_stop) { //Заполняем межсимвольные интервалы
 800056a:	7bfa      	ldrb	r2, [r7, #15]
 800056c:	7afb      	ldrb	r3, [r7, #11]
 800056e:	429a      	cmp	r2, r3
 8000570:	d127      	bne.n	80005c2 <GMG12864_Print_symbol_3x5+0x86>
			for (uint8_t i = 0; i <= 4; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8000572:	2300      	movs	r3, #0
 8000574:	73bb      	strb	r3, [r7, #14]
 8000576:	e020      	b.n	80005ba <GMG12864_Print_symbol_3x5+0x7e>
						GMG12864_Draw_pixel(x, y + i, 0); //Закрасить пиксель
					} else {
						GMG12864_Draw_pixel(x, y + i, 1); //Закрасить пиксель
					}
				} else {
					if (inversion) {
 8000578:	78fb      	ldrb	r3, [r7, #3]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d00d      	beq.n	800059a <GMG12864_Print_symbol_3x5+0x5e>
						GMG12864_Draw_pixel(x, y + i, 1); //Очистить пиксель
 800057e:	7bfb      	ldrb	r3, [r7, #15]
 8000580:	b218      	sxth	r0, r3
 8000582:	79bb      	ldrb	r3, [r7, #6]
 8000584:	b29a      	uxth	r2, r3
 8000586:	7bbb      	ldrb	r3, [r7, #14]
 8000588:	b29b      	uxth	r3, r3
 800058a:	4413      	add	r3, r2
 800058c:	b29b      	uxth	r3, r3
 800058e:	b21b      	sxth	r3, r3
 8000590:	2201      	movs	r2, #1
 8000592:	4619      	mov	r1, r3
 8000594:	f7ff fe78 	bl	8000288 <GMG12864_Draw_pixel>
 8000598:	e00c      	b.n	80005b4 <GMG12864_Print_symbol_3x5+0x78>
					} else {
						GMG12864_Draw_pixel(x, y + i, 0); //Очистить пиксель
 800059a:	7bfb      	ldrb	r3, [r7, #15]
 800059c:	b218      	sxth	r0, r3
 800059e:	79bb      	ldrb	r3, [r7, #6]
 80005a0:	b29a      	uxth	r2, r3
 80005a2:	7bbb      	ldrb	r3, [r7, #14]
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	4413      	add	r3, r2
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	b21b      	sxth	r3, r3
 80005ac:	2200      	movs	r2, #0
 80005ae:	4619      	mov	r1, r3
 80005b0:	f7ff fe6a 	bl	8000288 <GMG12864_Draw_pixel>
			for (uint8_t i = 0; i <= 4; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 80005b4:	7bbb      	ldrb	r3, [r7, #14]
 80005b6:	3301      	adds	r3, #1
 80005b8:	73bb      	strb	r3, [r7, #14]
 80005ba:	7bbb      	ldrb	r3, [r7, #14]
 80005bc:	2b04      	cmp	r3, #4
 80005be:	d9db      	bls.n	8000578 <GMG12864_Print_symbol_3x5+0x3c>
 80005c0:	e057      	b.n	8000672 <GMG12864_Print_symbol_3x5+0x136>
					}
				}
			}
		} else { //Заполняем полезной информацией
			for (uint8_t i = 0; i <= 4; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 80005c2:	2300      	movs	r3, #0
 80005c4:	737b      	strb	r3, [r7, #13]
 80005c6:	e051      	b.n	800066c <GMG12864_Print_symbol_3x5+0x130>
				if (Font_3x5[(symbol * 3) + x - x_start] & (1 << i)) {
 80005c8:	88ba      	ldrh	r2, [r7, #4]
 80005ca:	4613      	mov	r3, r2
 80005cc:	005b      	lsls	r3, r3, #1
 80005ce:	441a      	add	r2, r3
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	441a      	add	r2, r3
 80005d4:	7b3b      	ldrb	r3, [r7, #12]
 80005d6:	1ad3      	subs	r3, r2, r3
 80005d8:	4a2c      	ldr	r2, [pc, #176]	; (800068c <GMG12864_Print_symbol_3x5+0x150>)
 80005da:	5cd3      	ldrb	r3, [r2, r3]
 80005dc:	461a      	mov	r2, r3
 80005de:	7b7b      	ldrb	r3, [r7, #13]
 80005e0:	fa42 f303 	asr.w	r3, r2, r3
 80005e4:	f003 0301 	and.w	r3, r3, #1
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d01e      	beq.n	800062a <GMG12864_Print_symbol_3x5+0xee>
					if (inversion) {
 80005ec:	78fb      	ldrb	r3, [r7, #3]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d00d      	beq.n	800060e <GMG12864_Print_symbol_3x5+0xd2>
						GMG12864_Draw_pixel(x, y + i, 0); //Закрасить пиксель
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	b218      	sxth	r0, r3
 80005f6:	79bb      	ldrb	r3, [r7, #6]
 80005f8:	b29a      	uxth	r2, r3
 80005fa:	7b7b      	ldrb	r3, [r7, #13]
 80005fc:	b29b      	uxth	r3, r3
 80005fe:	4413      	add	r3, r2
 8000600:	b29b      	uxth	r3, r3
 8000602:	b21b      	sxth	r3, r3
 8000604:	2200      	movs	r2, #0
 8000606:	4619      	mov	r1, r3
 8000608:	f7ff fe3e 	bl	8000288 <GMG12864_Draw_pixel>
 800060c:	e02b      	b.n	8000666 <GMG12864_Print_symbol_3x5+0x12a>
					} else {
						GMG12864_Draw_pixel(x, y + i, 1); //Закрасить пиксель
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	b218      	sxth	r0, r3
 8000612:	79bb      	ldrb	r3, [r7, #6]
 8000614:	b29a      	uxth	r2, r3
 8000616:	7b7b      	ldrb	r3, [r7, #13]
 8000618:	b29b      	uxth	r3, r3
 800061a:	4413      	add	r3, r2
 800061c:	b29b      	uxth	r3, r3
 800061e:	b21b      	sxth	r3, r3
 8000620:	2201      	movs	r2, #1
 8000622:	4619      	mov	r1, r3
 8000624:	f7ff fe30 	bl	8000288 <GMG12864_Draw_pixel>
 8000628:	e01d      	b.n	8000666 <GMG12864_Print_symbol_3x5+0x12a>
					}
				} else {
					if (inversion) {
 800062a:	78fb      	ldrb	r3, [r7, #3]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d00d      	beq.n	800064c <GMG12864_Print_symbol_3x5+0x110>
						GMG12864_Draw_pixel(x, y + i, 1); //Очистить пиксель
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	b218      	sxth	r0, r3
 8000634:	79bb      	ldrb	r3, [r7, #6]
 8000636:	b29a      	uxth	r2, r3
 8000638:	7b7b      	ldrb	r3, [r7, #13]
 800063a:	b29b      	uxth	r3, r3
 800063c:	4413      	add	r3, r2
 800063e:	b29b      	uxth	r3, r3
 8000640:	b21b      	sxth	r3, r3
 8000642:	2201      	movs	r2, #1
 8000644:	4619      	mov	r1, r3
 8000646:	f7ff fe1f 	bl	8000288 <GMG12864_Draw_pixel>
 800064a:	e00c      	b.n	8000666 <GMG12864_Print_symbol_3x5+0x12a>
					} else {
						GMG12864_Draw_pixel(x, y + i, 0); //Очистить пиксель
 800064c:	7bfb      	ldrb	r3, [r7, #15]
 800064e:	b218      	sxth	r0, r3
 8000650:	79bb      	ldrb	r3, [r7, #6]
 8000652:	b29a      	uxth	r2, r3
 8000654:	7b7b      	ldrb	r3, [r7, #13]
 8000656:	b29b      	uxth	r3, r3
 8000658:	4413      	add	r3, r2
 800065a:	b29b      	uxth	r3, r3
 800065c:	b21b      	sxth	r3, r3
 800065e:	2200      	movs	r2, #0
 8000660:	4619      	mov	r1, r3
 8000662:	f7ff fe11 	bl	8000288 <GMG12864_Draw_pixel>
			for (uint8_t i = 0; i <= 4; i++) { // от 0 до 6, т.к. шрифт высотой 7 пикселей
 8000666:	7b7b      	ldrb	r3, [r7, #13]
 8000668:	3301      	adds	r3, #1
 800066a:	737b      	strb	r3, [r7, #13]
 800066c:	7b7b      	ldrb	r3, [r7, #13]
 800066e:	2b04      	cmp	r3, #4
 8000670:	d9aa      	bls.n	80005c8 <GMG12864_Print_symbol_3x5+0x8c>
	for (uint8_t x = x_start; x <= x_stop; x++) {
 8000672:	7bfb      	ldrb	r3, [r7, #15]
 8000674:	3301      	adds	r3, #1
 8000676:	73fb      	strb	r3, [r7, #15]
 8000678:	7bfa      	ldrb	r2, [r7, #15]
 800067a:	7afb      	ldrb	r3, [r7, #11]
 800067c:	429a      	cmp	r2, r3
 800067e:	f67f af74 	bls.w	800056a <GMG12864_Print_symbol_3x5+0x2e>
					}
				}
			}
		}
	}
}
 8000682:	bf00      	nop
 8000684:	bf00      	nop
 8000686:	3714      	adds	r7, #20
 8000688:	46bd      	mov	sp, r7
 800068a:	bd90      	pop	{r4, r7, pc}
 800068c:	08003024 	.word	0x08003024

08000690 <GMG12864_Decode_UTF8>:
/*---------------------Функция вывода символа на дисплей-----------------------------*/

/*----------------Функция декодирования UTF-8 в набор символов-----------------*/
void GMG12864_Decode_UTF8(uint8_t x, uint8_t y, uint8_t font, bool inversion, char *tx_buffer) {
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b087      	sub	sp, #28
 8000694:	af00      	add	r7, sp, #0
 8000696:	4604      	mov	r4, r0
 8000698:	4608      	mov	r0, r1
 800069a:	4611      	mov	r1, r2
 800069c:	461a      	mov	r2, r3
 800069e:	4623      	mov	r3, r4
 80006a0:	71fb      	strb	r3, [r7, #7]
 80006a2:	4603      	mov	r3, r0
 80006a4:	71bb      	strb	r3, [r7, #6]
 80006a6:	460b      	mov	r3, r1
 80006a8:	717b      	strb	r3, [r7, #5]
 80006aa:	4613      	mov	r3, r2
 80006ac:	713b      	strb	r3, [r7, #4]
/// Функция декодирования UTF-8 в набор символов и последующее занесение в буфер кадра
/// \param x - координата по х. От 0 до 127
/// \param y - координата по y. от 0 до 7
/// \param font - шрифт. 0 - 3x5, 1 - 5x7
	uint16_t symbol = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	81fb      	strh	r3, [r7, #14]
	bool flag_block = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < strlen(tx_buffer); i++) {
 80006b6:	2300      	movs	r3, #0
 80006b8:	613b      	str	r3, [r7, #16]
 80006ba:	e17e      	b.n	80009ba <GMG12864_Decode_UTF8+0x32a>
		if (tx_buffer[i] < 0xC0) { //Английский текст и символы. Если до русского текста, то [i] <0xD0. Но в font добавлен знак "°"
 80006bc:	693b      	ldr	r3, [r7, #16]
 80006be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006c0:	4413      	add	r3, r2
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2bbf      	cmp	r3, #191	; 0xbf
 80006c6:	d841      	bhi.n	800074c <GMG12864_Decode_UTF8+0xbc>
			if (flag_block) {
 80006c8:	7dfb      	ldrb	r3, [r7, #23]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d002      	beq.n	80006d4 <GMG12864_Decode_UTF8+0x44>
				flag_block = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	75fb      	strb	r3, [r7, #23]
 80006d2:	e16f      	b.n	80009b4 <GMG12864_Decode_UTF8+0x324>
			} else {
				symbol = tx_buffer[i];
 80006d4:	693b      	ldr	r3, [r7, #16]
 80006d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006d8:	4413      	add	r3, r2
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	81fb      	strh	r3, [r7, #14]
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 80006de:	797b      	ldrb	r3, [r7, #5]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d117      	bne.n	8000714 <GMG12864_Decode_UTF8+0x84>
					if (inversion) {
 80006e4:	793b      	ldrb	r3, [r7, #4]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d008      	beq.n	80006fc <GMG12864_Decode_UTF8+0x6c>
						GMG12864_Print_symbol_3x5(x, y, symbol - 32, 1); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия вкл.
 80006ea:	89fb      	ldrh	r3, [r7, #14]
 80006ec:	3b20      	subs	r3, #32
 80006ee:	b29a      	uxth	r2, r3
 80006f0:	79b9      	ldrb	r1, [r7, #6]
 80006f2:	79f8      	ldrb	r0, [r7, #7]
 80006f4:	2301      	movs	r3, #1
 80006f6:	f7ff ff21 	bl	800053c <GMG12864_Print_symbol_3x5>
 80006fa:	e007      	b.n	800070c <GMG12864_Decode_UTF8+0x7c>
					} else {
						GMG12864_Print_symbol_3x5(x, y, symbol - 32, 0); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия выкл.
 80006fc:	89fb      	ldrh	r3, [r7, #14]
 80006fe:	3b20      	subs	r3, #32
 8000700:	b29a      	uxth	r2, r3
 8000702:	79b9      	ldrb	r1, [r7, #6]
 8000704:	79f8      	ldrb	r0, [r7, #7]
 8000706:	2300      	movs	r3, #0
 8000708:	f7ff ff18 	bl	800053c <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	3304      	adds	r3, #4
 8000710:	71fb      	strb	r3, [r7, #7]
 8000712:	e14f      	b.n	80009b4 <GMG12864_Decode_UTF8+0x324>
				} else if (font == font5x7) { //Если выбран шрифт размера 5x7
 8000714:	797b      	ldrb	r3, [r7, #5]
 8000716:	2b01      	cmp	r3, #1
 8000718:	f040 814c 	bne.w	80009b4 <GMG12864_Decode_UTF8+0x324>
					if (inversion) {
 800071c:	793b      	ldrb	r3, [r7, #4]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d008      	beq.n	8000734 <GMG12864_Decode_UTF8+0xa4>
						GMG12864_Print_symbol_5x7(x, y, symbol - 32, 1); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия вкл.
 8000722:	89fb      	ldrh	r3, [r7, #14]
 8000724:	3b20      	subs	r3, #32
 8000726:	b29a      	uxth	r2, r3
 8000728:	79b9      	ldrb	r1, [r7, #6]
 800072a:	79f8      	ldrb	r0, [r7, #7]
 800072c:	2301      	movs	r3, #1
 800072e:	f7ff fe5b 	bl	80003e8 <GMG12864_Print_symbol_5x7>
 8000732:	e007      	b.n	8000744 <GMG12864_Decode_UTF8+0xb4>
					} else {
						GMG12864_Print_symbol_5x7(x, y, symbol - 32, 0); //Таблица UTF-8. Basic Latin. С "пробел" до "z". Инверсия выкл.
 8000734:	89fb      	ldrh	r3, [r7, #14]
 8000736:	3b20      	subs	r3, #32
 8000738:	b29a      	uxth	r2, r3
 800073a:	79b9      	ldrb	r1, [r7, #6]
 800073c:	79f8      	ldrb	r0, [r7, #7]
 800073e:	2300      	movs	r3, #0
 8000740:	f7ff fe52 	bl	80003e8 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	3306      	adds	r3, #6
 8000748:	71fb      	strb	r3, [r7, #7]
 800074a:	e133      	b.n	80009b4 <GMG12864_Decode_UTF8+0x324>
				}
			}
		}

		else { //Русский текст
			symbol = tx_buffer[i] << 8 | tx_buffer[i + 1];
 800074c:	693b      	ldr	r3, [r7, #16]
 800074e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000750:	4413      	add	r3, r2
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	021b      	lsls	r3, r3, #8
 8000756:	b21a      	sxth	r2, r3
 8000758:	693b      	ldr	r3, [r7, #16]
 800075a:	3301      	adds	r3, #1
 800075c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800075e:	440b      	add	r3, r1
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	b21b      	sxth	r3, r3
 8000764:	4313      	orrs	r3, r2
 8000766:	b21b      	sxth	r3, r3
 8000768:	81fb      	strh	r3, [r7, #14]
			if (symbol < 0xD180 && symbol > 0xD081) {
 800076a:	89fb      	ldrh	r3, [r7, #14]
 800076c:	f24d 127f 	movw	r2, #53631	; 0xd17f
 8000770:	4293      	cmp	r3, r2
 8000772:	d843      	bhi.n	80007fc <GMG12864_Decode_UTF8+0x16c>
 8000774:	89fb      	ldrh	r3, [r7, #14]
 8000776:	f24d 0281 	movw	r2, #53377	; 0xd081
 800077a:	4293      	cmp	r3, r2
 800077c:	d93e      	bls.n	80007fc <GMG12864_Decode_UTF8+0x16c>
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 800077e:	797b      	ldrb	r3, [r7, #5]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d11b      	bne.n	80007bc <GMG12864_Decode_UTF8+0x12c>
					if (inversion) {
 8000784:	793b      	ldrb	r3, [r7, #4]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d00a      	beq.n	80007a0 <GMG12864_Decode_UTF8+0x110>
						GMG12864_Print_symbol_3x5(x, y, symbol - 53297, 1); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия вкл.
 800078a:	89fb      	ldrh	r3, [r7, #14]
 800078c:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8000790:	330f      	adds	r3, #15
 8000792:	b29a      	uxth	r2, r3
 8000794:	79b9      	ldrb	r1, [r7, #6]
 8000796:	79f8      	ldrb	r0, [r7, #7]
 8000798:	2301      	movs	r3, #1
 800079a:	f7ff fecf 	bl	800053c <GMG12864_Print_symbol_3x5>
 800079e:	e009      	b.n	80007b4 <GMG12864_Decode_UTF8+0x124>
					} else {
						GMG12864_Print_symbol_3x5(x, y, symbol - 53297, 0); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия выкл.
 80007a0:	89fb      	ldrh	r3, [r7, #14]
 80007a2:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 80007a6:	330f      	adds	r3, #15
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	79b9      	ldrb	r1, [r7, #6]
 80007ac:	79f8      	ldrb	r0, [r7, #7]
 80007ae:	2300      	movs	r3, #0
 80007b0:	f7ff fec4 	bl	800053c <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	3304      	adds	r3, #4
 80007b8:	71fb      	strb	r3, [r7, #7]
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 80007ba:	e0f8      	b.n	80009ae <GMG12864_Decode_UTF8+0x31e>
				} else if (font == font5x7) { //Если выбран шрифт размера 5x7
 80007bc:	797b      	ldrb	r3, [r7, #5]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	f040 80f5 	bne.w	80009ae <GMG12864_Decode_UTF8+0x31e>
					if (inversion) {
 80007c4:	793b      	ldrb	r3, [r7, #4]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d00a      	beq.n	80007e0 <GMG12864_Decode_UTF8+0x150>
						GMG12864_Print_symbol_5x7(x, y, symbol - 53297, 1); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия вкл.
 80007ca:	89fb      	ldrh	r3, [r7, #14]
 80007cc:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 80007d0:	330f      	adds	r3, #15
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	79b9      	ldrb	r1, [r7, #6]
 80007d6:	79f8      	ldrb	r0, [r7, #7]
 80007d8:	2301      	movs	r3, #1
 80007da:	f7ff fe05 	bl	80003e8 <GMG12864_Print_symbol_5x7>
 80007de:	e009      	b.n	80007f4 <GMG12864_Decode_UTF8+0x164>
					} else {
						GMG12864_Print_symbol_5x7(x, y, symbol - 53297, 0); //Таблица UTF-8. Кириллица. С буквы "А" до "п". Инверсия выкл.
 80007e0:	89fb      	ldrh	r3, [r7, #14]
 80007e2:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 80007e6:	330f      	adds	r3, #15
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	79b9      	ldrb	r1, [r7, #6]
 80007ec:	79f8      	ldrb	r0, [r7, #7]
 80007ee:	2300      	movs	r3, #0
 80007f0:	f7ff fdfa 	bl	80003e8 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	3306      	adds	r3, #6
 80007f8:	71fb      	strb	r3, [r7, #7]
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 80007fa:	e0d8      	b.n	80009ae <GMG12864_Decode_UTF8+0x31e>
				}
			} else if (symbol == 0xD081) {
 80007fc:	89fb      	ldrh	r3, [r7, #14]
 80007fe:	f24d 0281 	movw	r2, #53377	; 0xd081
 8000802:	4293      	cmp	r3, r2
 8000804:	d12e      	bne.n	8000864 <GMG12864_Decode_UTF8+0x1d4>
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 8000806:	797b      	ldrb	r3, [r7, #5]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d113      	bne.n	8000834 <GMG12864_Decode_UTF8+0x1a4>
					if (inversion) {
 800080c:	793b      	ldrb	r3, [r7, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d006      	beq.n	8000820 <GMG12864_Decode_UTF8+0x190>
						GMG12864_Print_symbol_3x5(x, y, 159, 1); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия вкл.
 8000812:	79b9      	ldrb	r1, [r7, #6]
 8000814:	79f8      	ldrb	r0, [r7, #7]
 8000816:	2301      	movs	r3, #1
 8000818:	229f      	movs	r2, #159	; 0x9f
 800081a:	f7ff fe8f 	bl	800053c <GMG12864_Print_symbol_3x5>
 800081e:	e005      	b.n	800082c <GMG12864_Decode_UTF8+0x19c>
					} else {
						GMG12864_Print_symbol_3x5(x, y, 159, 0); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия выкл.
 8000820:	79b9      	ldrb	r1, [r7, #6]
 8000822:	79f8      	ldrb	r0, [r7, #7]
 8000824:	2300      	movs	r3, #0
 8000826:	229f      	movs	r2, #159	; 0x9f
 8000828:	f7ff fe88 	bl	800053c <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	3304      	adds	r3, #4
 8000830:	71fb      	strb	r3, [r7, #7]
 8000832:	e0bd      	b.n	80009b0 <GMG12864_Decode_UTF8+0x320>
				} else if (font == font5x7) { //Если выбран шрифт размера 5x7
 8000834:	797b      	ldrb	r3, [r7, #5]
 8000836:	2b01      	cmp	r3, #1
 8000838:	f040 80ba 	bne.w	80009b0 <GMG12864_Decode_UTF8+0x320>
					if (inversion) {
 800083c:	793b      	ldrb	r3, [r7, #4]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d006      	beq.n	8000850 <GMG12864_Decode_UTF8+0x1c0>
						GMG12864_Print_symbol_5x7(x, y, 159, 1); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия вкл.
 8000842:	79b9      	ldrb	r1, [r7, #6]
 8000844:	79f8      	ldrb	r0, [r7, #7]
 8000846:	2301      	movs	r3, #1
 8000848:	229f      	movs	r2, #159	; 0x9f
 800084a:	f7ff fdcd 	bl	80003e8 <GMG12864_Print_symbol_5x7>
 800084e:	e005      	b.n	800085c <GMG12864_Decode_UTF8+0x1cc>
					} else {
						GMG12864_Print_symbol_5x7(x, y, 159, 0); ////Таблица UTF-8. Кириллица. Буква "Ё". Инверсия выкл.
 8000850:	79b9      	ldrb	r1, [r7, #6]
 8000852:	79f8      	ldrb	r0, [r7, #7]
 8000854:	2300      	movs	r3, #0
 8000856:	229f      	movs	r2, #159	; 0x9f
 8000858:	f7ff fdc6 	bl	80003e8 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	3306      	adds	r3, #6
 8000860:	71fb      	strb	r3, [r7, #7]
 8000862:	e0a5      	b.n	80009b0 <GMG12864_Decode_UTF8+0x320>
				}
			} else if (symbol == 0xD191) {
 8000864:	89fb      	ldrh	r3, [r7, #14]
 8000866:	f24d 1291 	movw	r2, #53649	; 0xd191
 800086a:	4293      	cmp	r3, r2
 800086c:	d12e      	bne.n	80008cc <GMG12864_Decode_UTF8+0x23c>
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 800086e:	797b      	ldrb	r3, [r7, #5]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d113      	bne.n	800089c <GMG12864_Decode_UTF8+0x20c>
					if (inversion) {
 8000874:	793b      	ldrb	r3, [r7, #4]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d006      	beq.n	8000888 <GMG12864_Decode_UTF8+0x1f8>
						GMG12864_Print_symbol_3x5(x, y, 160, 1); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия вкл.
 800087a:	79b9      	ldrb	r1, [r7, #6]
 800087c:	79f8      	ldrb	r0, [r7, #7]
 800087e:	2301      	movs	r3, #1
 8000880:	22a0      	movs	r2, #160	; 0xa0
 8000882:	f7ff fe5b 	bl	800053c <GMG12864_Print_symbol_3x5>
 8000886:	e005      	b.n	8000894 <GMG12864_Decode_UTF8+0x204>
					} else {
						GMG12864_Print_symbol_3x5(x, y, 160, 0); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия выкл.
 8000888:	79b9      	ldrb	r1, [r7, #6]
 800088a:	79f8      	ldrb	r0, [r7, #7]
 800088c:	2300      	movs	r3, #0
 800088e:	22a0      	movs	r2, #160	; 0xa0
 8000890:	f7ff fe54 	bl	800053c <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	3304      	adds	r3, #4
 8000898:	71fb      	strb	r3, [r7, #7]
 800089a:	e089      	b.n	80009b0 <GMG12864_Decode_UTF8+0x320>
				} else if (font == font5x7) { //Если выбран шрифт размера 5x7
 800089c:	797b      	ldrb	r3, [r7, #5]
 800089e:	2b01      	cmp	r3, #1
 80008a0:	f040 8086 	bne.w	80009b0 <GMG12864_Decode_UTF8+0x320>
					if (inversion) {
 80008a4:	793b      	ldrb	r3, [r7, #4]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d006      	beq.n	80008b8 <GMG12864_Decode_UTF8+0x228>
						GMG12864_Print_symbol_5x7(x, y, 160, 1); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия вкл.
 80008aa:	79b9      	ldrb	r1, [r7, #6]
 80008ac:	79f8      	ldrb	r0, [r7, #7]
 80008ae:	2301      	movs	r3, #1
 80008b0:	22a0      	movs	r2, #160	; 0xa0
 80008b2:	f7ff fd99 	bl	80003e8 <GMG12864_Print_symbol_5x7>
 80008b6:	e005      	b.n	80008c4 <GMG12864_Decode_UTF8+0x234>
					} else {
						GMG12864_Print_symbol_5x7(x, y, 160, 0); ////Таблица UTF-8. Кириллица. Буква "ё". Инверсия выкл.
 80008b8:	79b9      	ldrb	r1, [r7, #6]
 80008ba:	79f8      	ldrb	r0, [r7, #7]
 80008bc:	2300      	movs	r3, #0
 80008be:	22a0      	movs	r2, #160	; 0xa0
 80008c0:	f7ff fd92 	bl	80003e8 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	3306      	adds	r3, #6
 80008c8:	71fb      	strb	r3, [r7, #7]
 80008ca:	e071      	b.n	80009b0 <GMG12864_Decode_UTF8+0x320>
				}
			} else if (symbol == 0xC2B0) {
 80008cc:	89fb      	ldrh	r3, [r7, #14]
 80008ce:	f24c 22b0 	movw	r2, #49840	; 0xc2b0
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d12d      	bne.n	8000932 <GMG12864_Decode_UTF8+0x2a2>
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 80008d6:	797b      	ldrb	r3, [r7, #5]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d113      	bne.n	8000904 <GMG12864_Decode_UTF8+0x274>
					if (inversion) {
 80008dc:	793b      	ldrb	r3, [r7, #4]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d006      	beq.n	80008f0 <GMG12864_Decode_UTF8+0x260>
						GMG12864_Print_symbol_3x5(x, y, 161, 1); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия вкл.
 80008e2:	79b9      	ldrb	r1, [r7, #6]
 80008e4:	79f8      	ldrb	r0, [r7, #7]
 80008e6:	2301      	movs	r3, #1
 80008e8:	22a1      	movs	r2, #161	; 0xa1
 80008ea:	f7ff fe27 	bl	800053c <GMG12864_Print_symbol_3x5>
 80008ee:	e005      	b.n	80008fc <GMG12864_Decode_UTF8+0x26c>
					} else {
						GMG12864_Print_symbol_3x5(x, y, 161, 0); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия выкл.
 80008f0:	79b9      	ldrb	r1, [r7, #6]
 80008f2:	79f8      	ldrb	r0, [r7, #7]
 80008f4:	2300      	movs	r3, #0
 80008f6:	22a1      	movs	r2, #161	; 0xa1
 80008f8:	f7ff fe20 	bl	800053c <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	3304      	adds	r3, #4
 8000900:	71fb      	strb	r3, [r7, #7]
 8000902:	e055      	b.n	80009b0 <GMG12864_Decode_UTF8+0x320>
				} else if (font == font5x7) { //Если выбран шрифт размера 5x7
 8000904:	797b      	ldrb	r3, [r7, #5]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d152      	bne.n	80009b0 <GMG12864_Decode_UTF8+0x320>
					if (inversion) {
 800090a:	793b      	ldrb	r3, [r7, #4]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d006      	beq.n	800091e <GMG12864_Decode_UTF8+0x28e>
						GMG12864_Print_symbol_5x7(x, y, 161, 1); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия вкл.
 8000910:	79b9      	ldrb	r1, [r7, #6]
 8000912:	79f8      	ldrb	r0, [r7, #7]
 8000914:	2301      	movs	r3, #1
 8000916:	22a1      	movs	r2, #161	; 0xa1
 8000918:	f7ff fd66 	bl	80003e8 <GMG12864_Print_symbol_5x7>
 800091c:	e005      	b.n	800092a <GMG12864_Decode_UTF8+0x29a>
					} else {
						GMG12864_Print_symbol_5x7(x, y, 161, 0); ////Таблица UTF-8. Basic Latin. Символ "°". Инверсия выкл.
 800091e:	79b9      	ldrb	r1, [r7, #6]
 8000920:	79f8      	ldrb	r0, [r7, #7]
 8000922:	2300      	movs	r3, #0
 8000924:	22a1      	movs	r2, #161	; 0xa1
 8000926:	f7ff fd5f 	bl	80003e8 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	3306      	adds	r3, #6
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	e03e      	b.n	80009b0 <GMG12864_Decode_UTF8+0x320>
				}
			}

			else {
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 8000932:	797b      	ldrb	r3, [r7, #5]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d11b      	bne.n	8000970 <GMG12864_Decode_UTF8+0x2e0>
					if (inversion) {
 8000938:	793b      	ldrb	r3, [r7, #4]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d00a      	beq.n	8000954 <GMG12864_Decode_UTF8+0x2c4>
						GMG12864_Print_symbol_3x5(x, y, symbol - 53489, 1); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия вкл.
 800093e:	89fb      	ldrh	r3, [r7, #14]
 8000940:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8000944:	330f      	adds	r3, #15
 8000946:	b29a      	uxth	r2, r3
 8000948:	79b9      	ldrb	r1, [r7, #6]
 800094a:	79f8      	ldrb	r0, [r7, #7]
 800094c:	2301      	movs	r3, #1
 800094e:	f7ff fdf5 	bl	800053c <GMG12864_Print_symbol_3x5>
 8000952:	e009      	b.n	8000968 <GMG12864_Decode_UTF8+0x2d8>
					} else {
						GMG12864_Print_symbol_3x5(x, y, symbol - 53489, 0); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия выкл.
 8000954:	89fb      	ldrh	r3, [r7, #14]
 8000956:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800095a:	330f      	adds	r3, #15
 800095c:	b29a      	uxth	r2, r3
 800095e:	79b9      	ldrb	r1, [r7, #6]
 8000960:	79f8      	ldrb	r0, [r7, #7]
 8000962:	2300      	movs	r3, #0
 8000964:	f7ff fdea 	bl	800053c <GMG12864_Print_symbol_3x5>
					}
					x = x + 4;
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	3304      	adds	r3, #4
 800096c:	71fb      	strb	r3, [r7, #7]
 800096e:	e01f      	b.n	80009b0 <GMG12864_Decode_UTF8+0x320>
				} else if (font == font5x7) { //Если выбран шрифт размера 5x7
 8000970:	797b      	ldrb	r3, [r7, #5]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d11c      	bne.n	80009b0 <GMG12864_Decode_UTF8+0x320>
					if (inversion) {
 8000976:	793b      	ldrb	r3, [r7, #4]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d00a      	beq.n	8000992 <GMG12864_Decode_UTF8+0x302>
						GMG12864_Print_symbol_5x7(x, y, symbol - 53489, 1); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия вкл.
 800097c:	89fb      	ldrh	r3, [r7, #14]
 800097e:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8000982:	330f      	adds	r3, #15
 8000984:	b29a      	uxth	r2, r3
 8000986:	79b9      	ldrb	r1, [r7, #6]
 8000988:	79f8      	ldrb	r0, [r7, #7]
 800098a:	2301      	movs	r3, #1
 800098c:	f7ff fd2c 	bl	80003e8 <GMG12864_Print_symbol_5x7>
 8000990:	e009      	b.n	80009a6 <GMG12864_Decode_UTF8+0x316>
					} else {
						GMG12864_Print_symbol_5x7(x, y, symbol - 53489, 0); //Таблица UTF-8. Кириллица. С буквы "р", начинается сдвиг. Инверсия выкл.
 8000992:	89fb      	ldrh	r3, [r7, #14]
 8000994:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8000998:	330f      	adds	r3, #15
 800099a:	b29a      	uxth	r2, r3
 800099c:	79b9      	ldrb	r1, [r7, #6]
 800099e:	79f8      	ldrb	r0, [r7, #7]
 80009a0:	2300      	movs	r3, #0
 80009a2:	f7ff fd21 	bl	80003e8 <GMG12864_Print_symbol_5x7>
					}
					x = x + 6;
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	3306      	adds	r3, #6
 80009aa:	71fb      	strb	r3, [r7, #7]
 80009ac:	e000      	b.n	80009b0 <GMG12864_Decode_UTF8+0x320>
				if (font == font3x5) { //Если выбран шрифт размера 3x5
 80009ae:	bf00      	nop
				}
			}
			flag_block = 1;
 80009b0:	2301      	movs	r3, #1
 80009b2:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < strlen(tx_buffer); i++) {
 80009b4:	693b      	ldr	r3, [r7, #16]
 80009b6:	3301      	adds	r3, #1
 80009b8:	613b      	str	r3, [r7, #16]
 80009ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80009bc:	f7ff fbc6 	bl	800014c <strlen>
 80009c0:	4602      	mov	r2, r0
 80009c2:	693b      	ldr	r3, [r7, #16]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	f63f ae79 	bhi.w	80006bc <GMG12864_Decode_UTF8+0x2c>
		}
	}
}
 80009ca:	bf00      	nop
 80009cc:	bf00      	nop
 80009ce:	371c      	adds	r7, #28
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd90      	pop	{r4, r7, pc}

080009d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009da:	f000 fa95 	bl	8000f08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009de:	f000 f83f 	bl	8000a60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e2:	f000 f8b9 	bl	8000b58 <MX_GPIO_Init>
  MX_SPI1_Init();
 80009e6:	f000 f881 	bl	8000aec <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
GMG12864_Init();
 80009ea:	f7ff fbff 	bl	80001ec <GMG12864_Init>
HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);// Включить подсветку экрана.
 80009ee:	2201      	movs	r2, #1
 80009f0:	2108      	movs	r1, #8
 80009f2:	4814      	ldr	r0, [pc, #80]	; (8000a44 <main+0x70>)
 80009f4:	f000 fd42 	bl	800147c <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  counter++;
 80009f8:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <main+0x74>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	3301      	adds	r3, #1
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <main+0x74>)
 8000a02:	701a      	strb	r2, [r3, #0]
	  // Вывод кириллицы
	  sprintf(tx_buffer, "Zerg - cчетчик : %.3d", counter);
 8000a04:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <main+0x74>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	461a      	mov	r2, r3
 8000a0a:	4910      	ldr	r1, [pc, #64]	; (8000a4c <main+0x78>)
 8000a0c:	4810      	ldr	r0, [pc, #64]	; (8000a50 <main+0x7c>)
 8000a0e:	f001 fe3d 	bl	800268c <siprintf>
	  GMG12864_Decode_UTF8(x, y, 1, inversion, tx_buffer);
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <main+0x80>)
 8000a14:	7818      	ldrb	r0, [r3, #0]
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <main+0x84>)
 8000a18:	7819      	ldrb	r1, [r3, #0]
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <main+0x88>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	bf14      	ite	ne
 8000a22:	2301      	movne	r3, #1
 8000a24:	2300      	moveq	r3, #0
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	4a09      	ldr	r2, [pc, #36]	; (8000a50 <main+0x7c>)
 8000a2a:	9200      	str	r2, [sp, #0]
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	f7ff fe2f 	bl	8000690 <GMG12864_Decode_UTF8>
	  GMG12864_Update();
 8000a32:	f7ff fc99 	bl	8000368 <GMG12864_Update>
	  GMG12864_Clean_Frame_buffer();
 8000a36:	f7ff fbcd 	bl	80001d4 <GMG12864_Clean_Frame_buffer>
	  // Вывод графика
//	  value = GMG12864_Value_for_Plot(y_min, y_max, counter);
//	  GMG12864_Fill_the_array_Plot(&cnt, arr, size_array, value);
//	  GMG12864_Generate_a_Graph(&cnt, arr, size_array, y_min, y_max, 1, 0, grid);
//	  GMG12864_Update();
	  HAL_Delay(100);
 8000a3a:	2064      	movs	r0, #100	; 0x64
 8000a3c:	f000 fa96 	bl	8000f6c <HAL_Delay>
	  counter++;
 8000a40:	e7da      	b.n	80009f8 <main+0x24>
 8000a42:	bf00      	nop
 8000a44:	40010800 	.word	0x40010800
 8000a48:	200004fc 	.word	0x200004fc
 8000a4c:	08003008 	.word	0x08003008
 8000a50:	2000007c 	.word	0x2000007c
 8000a54:	200004fd 	.word	0x200004fd
 8000a58:	200004fe 	.word	0x200004fe
 8000a5c:	200004ff 	.word	0x200004ff

08000a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b090      	sub	sp, #64	; 0x40
 8000a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a66:	f107 0318 	add.w	r3, r7, #24
 8000a6a:	2228      	movs	r2, #40	; 0x28
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f001 fe2c 	bl	80026cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a82:	2301      	movs	r3, #1
 8000a84:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a8a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a90:	2301      	movs	r3, #1
 8000a92:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a94:	2302      	movs	r3, #2
 8000a96:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a9e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa4:	f107 0318 	add.w	r3, r7, #24
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f000 fcff 	bl	80014ac <HAL_RCC_OscConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ab4:	f000 f8a0 	bl	8000bf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab8:	230f      	movs	r3, #15
 8000aba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000abc:	2302      	movs	r3, #2
 8000abe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ac4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ac8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aca:	2300      	movs	r3, #0
 8000acc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2102      	movs	r1, #2
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 ff6c 	bl	80019b0 <HAL_RCC_ClockConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ade:	f000 f88b 	bl	8000bf8 <Error_Handler>
  }
}
 8000ae2:	bf00      	nop
 8000ae4:	3740      	adds	r7, #64	; 0x40
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
	...

08000aec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000af0:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <MX_SPI1_Init+0x64>)
 8000af2:	4a18      	ldr	r2, [pc, #96]	; (8000b54 <MX_SPI1_Init+0x68>)
 8000af4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000af6:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <MX_SPI1_Init+0x64>)
 8000af8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000afc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000afe:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <MX_SPI1_Init+0x64>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b04:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <MX_SPI1_Init+0x64>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <MX_SPI1_Init+0x64>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b10:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <MX_SPI1_Init+0x64>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <MX_SPI1_Init+0x64>)
 8000b18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b1c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <MX_SPI1_Init+0x64>)
 8000b20:	2208      	movs	r2, #8
 8000b22:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b24:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <MX_SPI1_Init+0x64>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <MX_SPI1_Init+0x64>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b30:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <MX_SPI1_Init+0x64>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <MX_SPI1_Init+0x64>)
 8000b38:	220a      	movs	r2, #10
 8000b3a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b3c:	4804      	ldr	r0, [pc, #16]	; (8000b50 <MX_SPI1_Init+0x64>)
 8000b3e:	f001 f8e1 	bl	8001d04 <HAL_SPI_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b48:	f000 f856 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000500 	.word	0x20000500
 8000b54:	40013000 	.word	0x40013000

08000b58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5e:	f107 0308 	add.w	r3, r7, #8
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b6c:	4b17      	ldr	r3, [pc, #92]	; (8000bcc <MX_GPIO_Init+0x74>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	4a16      	ldr	r2, [pc, #88]	; (8000bcc <MX_GPIO_Init+0x74>)
 8000b72:	f043 0320 	orr.w	r3, r3, #32
 8000b76:	6193      	str	r3, [r2, #24]
 8000b78:	4b14      	ldr	r3, [pc, #80]	; (8000bcc <MX_GPIO_Init+0x74>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	f003 0320 	and.w	r3, r3, #32
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b84:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <MX_GPIO_Init+0x74>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	4a10      	ldr	r2, [pc, #64]	; (8000bcc <MX_GPIO_Init+0x74>)
 8000b8a:	f043 0304 	orr.w	r3, r3, #4
 8000b8e:	6193      	str	r3, [r2, #24]
 8000b90:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <MX_GPIO_Init+0x74>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	f003 0304 	and.w	r3, r3, #4
 8000b98:	603b      	str	r3, [r7, #0]
 8000b9a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|RST_Pin|DC_Pin|LED_Pin, GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	210f      	movs	r1, #15
 8000ba0:	480b      	ldr	r0, [pc, #44]	; (8000bd0 <MX_GPIO_Init+0x78>)
 8000ba2:	f000 fc6b 	bl	800147c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_Pin RST_Pin DC_Pin LED_Pin */
  GPIO_InitStruct.Pin = CS_Pin|RST_Pin|DC_Pin|LED_Pin;
 8000ba6:	230f      	movs	r3, #15
 8000ba8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000baa:	2301      	movs	r3, #1
 8000bac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb6:	f107 0308 	add.w	r3, r7, #8
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4804      	ldr	r0, [pc, #16]	; (8000bd0 <MX_GPIO_Init+0x78>)
 8000bbe:	f000 fad9 	bl	8001174 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bc2:	bf00      	nop
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	40010800 	.word	0x40010800

08000bd4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d101      	bne.n	8000bea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000be6:	f000 f9a5 	bl	8000f34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40000800 	.word	0x40000800

08000bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfc:	b672      	cpsid	i
}
 8000bfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <Error_Handler+0x8>
	...

08000c04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <HAL_MspInit+0x5c>)
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	4a14      	ldr	r2, [pc, #80]	; (8000c60 <HAL_MspInit+0x5c>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6193      	str	r3, [r2, #24]
 8000c16:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <HAL_MspInit+0x5c>)
 8000c18:	699b      	ldr	r3, [r3, #24]
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c22:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <HAL_MspInit+0x5c>)
 8000c24:	69db      	ldr	r3, [r3, #28]
 8000c26:	4a0e      	ldr	r2, [pc, #56]	; (8000c60 <HAL_MspInit+0x5c>)
 8000c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c2c:	61d3      	str	r3, [r2, #28]
 8000c2e:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <HAL_MspInit+0x5c>)
 8000c30:	69db      	ldr	r3, [r3, #28]
 8000c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <HAL_MspInit+0x60>)
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	4a04      	ldr	r2, [pc, #16]	; (8000c64 <HAL_MspInit+0x60>)
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c56:	bf00      	nop
 8000c58:	3714      	adds	r7, #20
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr
 8000c60:	40021000 	.word	0x40021000
 8000c64:	40010000 	.word	0x40010000

08000c68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b088      	sub	sp, #32
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 0310 	add.w	r3, r7, #16
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a15      	ldr	r2, [pc, #84]	; (8000cd8 <HAL_SPI_MspInit+0x70>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d123      	bne.n	8000cd0 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c88:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <HAL_SPI_MspInit+0x74>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	4a13      	ldr	r2, [pc, #76]	; (8000cdc <HAL_SPI_MspInit+0x74>)
 8000c8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c92:	6193      	str	r3, [r2, #24]
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <HAL_SPI_MspInit+0x74>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca0:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <HAL_SPI_MspInit+0x74>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	4a0d      	ldr	r2, [pc, #52]	; (8000cdc <HAL_SPI_MspInit+0x74>)
 8000ca6:	f043 0304 	orr.w	r3, r3, #4
 8000caa:	6193      	str	r3, [r2, #24]
 8000cac:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <HAL_SPI_MspInit+0x74>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	f003 0304 	and.w	r3, r3, #4
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000cb8:	23a0      	movs	r3, #160	; 0xa0
 8000cba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc4:	f107 0310 	add.w	r3, r7, #16
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <HAL_SPI_MspInit+0x78>)
 8000ccc:	f000 fa52 	bl	8001174 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cd0:	bf00      	nop
 8000cd2:	3720      	adds	r7, #32
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40013000 	.word	0x40013000
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	40010800 	.word	0x40010800

08000ce4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08e      	sub	sp, #56	; 0x38
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000cfa:	4b34      	ldr	r3, [pc, #208]	; (8000dcc <HAL_InitTick+0xe8>)
 8000cfc:	69db      	ldr	r3, [r3, #28]
 8000cfe:	4a33      	ldr	r2, [pc, #204]	; (8000dcc <HAL_InitTick+0xe8>)
 8000d00:	f043 0304 	orr.w	r3, r3, #4
 8000d04:	61d3      	str	r3, [r2, #28]
 8000d06:	4b31      	ldr	r3, [pc, #196]	; (8000dcc <HAL_InitTick+0xe8>)
 8000d08:	69db      	ldr	r3, [r3, #28]
 8000d0a:	f003 0304 	and.w	r3, r3, #4
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d12:	f107 0210 	add.w	r2, r7, #16
 8000d16:	f107 0314 	add.w	r3, r7, #20
 8000d1a:	4611      	mov	r1, r2
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f000 ffa3 	bl	8001c68 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d22:	6a3b      	ldr	r3, [r7, #32]
 8000d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d103      	bne.n	8000d34 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d2c:	f000 ff88 	bl	8001c40 <HAL_RCC_GetPCLK1Freq>
 8000d30:	6378      	str	r0, [r7, #52]	; 0x34
 8000d32:	e004      	b.n	8000d3e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d34:	f000 ff84 	bl	8001c40 <HAL_RCC_GetPCLK1Freq>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d40:	4a23      	ldr	r2, [pc, #140]	; (8000dd0 <HAL_InitTick+0xec>)
 8000d42:	fba2 2303 	umull	r2, r3, r2, r3
 8000d46:	0c9b      	lsrs	r3, r3, #18
 8000d48:	3b01      	subs	r3, #1
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000d4c:	4b21      	ldr	r3, [pc, #132]	; (8000dd4 <HAL_InitTick+0xf0>)
 8000d4e:	4a22      	ldr	r2, [pc, #136]	; (8000dd8 <HAL_InitTick+0xf4>)
 8000d50:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000d52:	4b20      	ldr	r3, [pc, #128]	; (8000dd4 <HAL_InitTick+0xf0>)
 8000d54:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d58:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000d5a:	4a1e      	ldr	r2, [pc, #120]	; (8000dd4 <HAL_InitTick+0xf0>)
 8000d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d5e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000d60:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <HAL_InitTick+0xf0>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d66:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <HAL_InitTick+0xf0>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d6c:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <HAL_InitTick+0xf0>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000d72:	4818      	ldr	r0, [pc, #96]	; (8000dd4 <HAL_InitTick+0xf0>)
 8000d74:	f001 fa40 	bl	80021f8 <HAL_TIM_Base_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000d7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d11b      	bne.n	8000dbe <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000d86:	4813      	ldr	r0, [pc, #76]	; (8000dd4 <HAL_InitTick+0xf0>)
 8000d88:	f001 fa8e 	bl	80022a8 <HAL_TIM_Base_Start_IT>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d92:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d111      	bne.n	8000dbe <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d9a:	201e      	movs	r0, #30
 8000d9c:	f000 f9db 	bl	8001156 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b0f      	cmp	r3, #15
 8000da4:	d808      	bhi.n	8000db8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000da6:	2200      	movs	r2, #0
 8000da8:	6879      	ldr	r1, [r7, #4]
 8000daa:	201e      	movs	r0, #30
 8000dac:	f000 f9b7 	bl	800111e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000db0:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <HAL_InitTick+0xf8>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6013      	str	r3, [r2, #0]
 8000db6:	e002      	b.n	8000dbe <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000dbe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3738      	adds	r7, #56	; 0x38
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	431bde83 	.word	0x431bde83
 8000dd4:	20000558 	.word	0x20000558
 8000dd8:	40000800 	.word	0x40000800
 8000ddc:	20000008 	.word	0x20000008

08000de0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <NMI_Handler+0x4>

08000de6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dea:	e7fe      	b.n	8000dea <HardFault_Handler+0x4>

08000dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <MemManage_Handler+0x4>

08000df2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df6:	e7fe      	b.n	8000df6 <BusFault_Handler+0x4>

08000df8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <UsageFault_Handler+0x4>

08000dfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr

08000e0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr

08000e16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr

08000e22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr
	...

08000e30 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000e34:	4802      	ldr	r0, [pc, #8]	; (8000e40 <TIM4_IRQHandler+0x10>)
 8000e36:	f001 fa89 	bl	800234c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000558 	.word	0x20000558

08000e44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e4c:	4a14      	ldr	r2, [pc, #80]	; (8000ea0 <_sbrk+0x5c>)
 8000e4e:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <_sbrk+0x60>)
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e58:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <_sbrk+0x64>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d102      	bne.n	8000e66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e60:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <_sbrk+0x64>)
 8000e62:	4a12      	ldr	r2, [pc, #72]	; (8000eac <_sbrk+0x68>)
 8000e64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e66:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <_sbrk+0x64>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d207      	bcs.n	8000e84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e74:	f001 fc32 	bl	80026dc <__errno>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	220c      	movs	r2, #12
 8000e7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e82:	e009      	b.n	8000e98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e84:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <_sbrk+0x64>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e8a:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <_sbrk+0x64>)
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4413      	add	r3, r2
 8000e92:	4a05      	ldr	r2, [pc, #20]	; (8000ea8 <_sbrk+0x64>)
 8000e94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e96:	68fb      	ldr	r3, [r7, #12]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3718      	adds	r7, #24
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20005000 	.word	0x20005000
 8000ea4:	00000400 	.word	0x00000400
 8000ea8:	200005a0 	.word	0x200005a0
 8000eac:	200006f0 	.word	0x200006f0

08000eb0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr

08000ebc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ebc:	f7ff fff8 	bl	8000eb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ec0:	480b      	ldr	r0, [pc, #44]	; (8000ef0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ec2:	490c      	ldr	r1, [pc, #48]	; (8000ef4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ec4:	4a0c      	ldr	r2, [pc, #48]	; (8000ef8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ec6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec8:	e002      	b.n	8000ed0 <LoopCopyDataInit>

08000eca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ecc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ece:	3304      	adds	r3, #4

08000ed0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ed2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed4:	d3f9      	bcc.n	8000eca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed6:	4a09      	ldr	r2, [pc, #36]	; (8000efc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ed8:	4c09      	ldr	r4, [pc, #36]	; (8000f00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000edc:	e001      	b.n	8000ee2 <LoopFillZerobss>

08000ede <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ede:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee0:	3204      	adds	r2, #4

08000ee2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ee2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee4:	d3fb      	bcc.n	8000ede <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ee6:	f001 fbff 	bl	80026e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eea:	f7ff fd73 	bl	80009d4 <main>
  bx lr
 8000eee:	4770      	bx	lr
  ldr r0, =_sdata
 8000ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000ef8:	080035a0 	.word	0x080035a0
  ldr r2, =_sbss
 8000efc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000f00:	200006f0 	.word	0x200006f0

08000f04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f04:	e7fe      	b.n	8000f04 <ADC1_2_IRQHandler>
	...

08000f08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <HAL_Init+0x28>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a07      	ldr	r2, [pc, #28]	; (8000f30 <HAL_Init+0x28>)
 8000f12:	f043 0310 	orr.w	r3, r3, #16
 8000f16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f18:	2003      	movs	r0, #3
 8000f1a:	f000 f8f5 	bl	8001108 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f1e:	200f      	movs	r0, #15
 8000f20:	f7ff fee0 	bl	8000ce4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f24:	f7ff fe6e 	bl	8000c04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40022000 	.word	0x40022000

08000f34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f38:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <HAL_IncTick+0x1c>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <HAL_IncTick+0x20>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4413      	add	r3, r2
 8000f44:	4a03      	ldr	r2, [pc, #12]	; (8000f54 <HAL_IncTick+0x20>)
 8000f46:	6013      	str	r3, [r2, #0]
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc80      	pop	{r7}
 8000f4e:	4770      	bx	lr
 8000f50:	2000000c 	.word	0x2000000c
 8000f54:	200005a4 	.word	0x200005a4

08000f58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f5c:	4b02      	ldr	r3, [pc, #8]	; (8000f68 <HAL_GetTick+0x10>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr
 8000f68:	200005a4 	.word	0x200005a4

08000f6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f74:	f7ff fff0 	bl	8000f58 <HAL_GetTick>
 8000f78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f84:	d005      	beq.n	8000f92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f86:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <HAL_Delay+0x44>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	4413      	add	r3, r2
 8000f90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f92:	bf00      	nop
 8000f94:	f7ff ffe0 	bl	8000f58 <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d8f7      	bhi.n	8000f94 <HAL_Delay+0x28>
  {
  }
}
 8000fa4:	bf00      	nop
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	2000000c 	.word	0x2000000c

08000fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe6:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	60d3      	str	r3, [r2, #12]
}
 8000fec:	bf00      	nop
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001000:	4b04      	ldr	r3, [pc, #16]	; (8001014 <__NVIC_GetPriorityGrouping+0x18>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	0a1b      	lsrs	r3, r3, #8
 8001006:	f003 0307 	and.w	r3, r3, #7
}
 800100a:	4618      	mov	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	2b00      	cmp	r3, #0
 8001028:	db0b      	blt.n	8001042 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	f003 021f 	and.w	r2, r3, #31
 8001030:	4906      	ldr	r1, [pc, #24]	; (800104c <__NVIC_EnableIRQ+0x34>)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	095b      	lsrs	r3, r3, #5
 8001038:	2001      	movs	r0, #1
 800103a:	fa00 f202 	lsl.w	r2, r0, r2
 800103e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr
 800104c:	e000e100 	.word	0xe000e100

08001050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	6039      	str	r1, [r7, #0]
 800105a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001060:	2b00      	cmp	r3, #0
 8001062:	db0a      	blt.n	800107a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	b2da      	uxtb	r2, r3
 8001068:	490c      	ldr	r1, [pc, #48]	; (800109c <__NVIC_SetPriority+0x4c>)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	0112      	lsls	r2, r2, #4
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	440b      	add	r3, r1
 8001074:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001078:	e00a      	b.n	8001090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4908      	ldr	r1, [pc, #32]	; (80010a0 <__NVIC_SetPriority+0x50>)
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	f003 030f 	and.w	r3, r3, #15
 8001086:	3b04      	subs	r3, #4
 8001088:	0112      	lsls	r2, r2, #4
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	440b      	add	r3, r1
 800108e:	761a      	strb	r2, [r3, #24]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000e100 	.word	0xe000e100
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	; 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f1c3 0307 	rsb	r3, r3, #7
 80010be:	2b04      	cmp	r3, #4
 80010c0:	bf28      	it	cs
 80010c2:	2304      	movcs	r3, #4
 80010c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3304      	adds	r3, #4
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d902      	bls.n	80010d4 <NVIC_EncodePriority+0x30>
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3b03      	subs	r3, #3
 80010d2:	e000      	b.n	80010d6 <NVIC_EncodePriority+0x32>
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43da      	mvns	r2, r3
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	401a      	ands	r2, r3
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	fa01 f303 	lsl.w	r3, r1, r3
 80010f6:	43d9      	mvns	r1, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	4313      	orrs	r3, r2
         );
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3724      	adds	r7, #36	; 0x24
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr

08001108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff ff4f 	bl	8000fb4 <__NVIC_SetPriorityGrouping>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800111e:	b580      	push	{r7, lr}
 8001120:	b086      	sub	sp, #24
 8001122:	af00      	add	r7, sp, #0
 8001124:	4603      	mov	r3, r0
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
 800112a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001130:	f7ff ff64 	bl	8000ffc <__NVIC_GetPriorityGrouping>
 8001134:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	68b9      	ldr	r1, [r7, #8]
 800113a:	6978      	ldr	r0, [r7, #20]
 800113c:	f7ff ffb2 	bl	80010a4 <NVIC_EncodePriority>
 8001140:	4602      	mov	r2, r0
 8001142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff81 	bl	8001050 <__NVIC_SetPriority>
}
 800114e:	bf00      	nop
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	4603      	mov	r3, r0
 800115e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff57 	bl	8001018 <__NVIC_EnableIRQ>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001174:	b480      	push	{r7}
 8001176:	b08b      	sub	sp, #44	; 0x2c
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800117e:	2300      	movs	r3, #0
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001182:	2300      	movs	r3, #0
 8001184:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001186:	e169      	b.n	800145c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001188:	2201      	movs	r2, #1
 800118a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	69fa      	ldr	r2, [r7, #28]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	f040 8158 	bne.w	8001456 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	4a9a      	ldr	r2, [pc, #616]	; (8001414 <HAL_GPIO_Init+0x2a0>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d05e      	beq.n	800126e <HAL_GPIO_Init+0xfa>
 80011b0:	4a98      	ldr	r2, [pc, #608]	; (8001414 <HAL_GPIO_Init+0x2a0>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d875      	bhi.n	80012a2 <HAL_GPIO_Init+0x12e>
 80011b6:	4a98      	ldr	r2, [pc, #608]	; (8001418 <HAL_GPIO_Init+0x2a4>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d058      	beq.n	800126e <HAL_GPIO_Init+0xfa>
 80011bc:	4a96      	ldr	r2, [pc, #600]	; (8001418 <HAL_GPIO_Init+0x2a4>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d86f      	bhi.n	80012a2 <HAL_GPIO_Init+0x12e>
 80011c2:	4a96      	ldr	r2, [pc, #600]	; (800141c <HAL_GPIO_Init+0x2a8>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d052      	beq.n	800126e <HAL_GPIO_Init+0xfa>
 80011c8:	4a94      	ldr	r2, [pc, #592]	; (800141c <HAL_GPIO_Init+0x2a8>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d869      	bhi.n	80012a2 <HAL_GPIO_Init+0x12e>
 80011ce:	4a94      	ldr	r2, [pc, #592]	; (8001420 <HAL_GPIO_Init+0x2ac>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d04c      	beq.n	800126e <HAL_GPIO_Init+0xfa>
 80011d4:	4a92      	ldr	r2, [pc, #584]	; (8001420 <HAL_GPIO_Init+0x2ac>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d863      	bhi.n	80012a2 <HAL_GPIO_Init+0x12e>
 80011da:	4a92      	ldr	r2, [pc, #584]	; (8001424 <HAL_GPIO_Init+0x2b0>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d046      	beq.n	800126e <HAL_GPIO_Init+0xfa>
 80011e0:	4a90      	ldr	r2, [pc, #576]	; (8001424 <HAL_GPIO_Init+0x2b0>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d85d      	bhi.n	80012a2 <HAL_GPIO_Init+0x12e>
 80011e6:	2b12      	cmp	r3, #18
 80011e8:	d82a      	bhi.n	8001240 <HAL_GPIO_Init+0xcc>
 80011ea:	2b12      	cmp	r3, #18
 80011ec:	d859      	bhi.n	80012a2 <HAL_GPIO_Init+0x12e>
 80011ee:	a201      	add	r2, pc, #4	; (adr r2, 80011f4 <HAL_GPIO_Init+0x80>)
 80011f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f4:	0800126f 	.word	0x0800126f
 80011f8:	08001249 	.word	0x08001249
 80011fc:	0800125b 	.word	0x0800125b
 8001200:	0800129d 	.word	0x0800129d
 8001204:	080012a3 	.word	0x080012a3
 8001208:	080012a3 	.word	0x080012a3
 800120c:	080012a3 	.word	0x080012a3
 8001210:	080012a3 	.word	0x080012a3
 8001214:	080012a3 	.word	0x080012a3
 8001218:	080012a3 	.word	0x080012a3
 800121c:	080012a3 	.word	0x080012a3
 8001220:	080012a3 	.word	0x080012a3
 8001224:	080012a3 	.word	0x080012a3
 8001228:	080012a3 	.word	0x080012a3
 800122c:	080012a3 	.word	0x080012a3
 8001230:	080012a3 	.word	0x080012a3
 8001234:	080012a3 	.word	0x080012a3
 8001238:	08001251 	.word	0x08001251
 800123c:	08001265 	.word	0x08001265
 8001240:	4a79      	ldr	r2, [pc, #484]	; (8001428 <HAL_GPIO_Init+0x2b4>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d013      	beq.n	800126e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001246:	e02c      	b.n	80012a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	623b      	str	r3, [r7, #32]
          break;
 800124e:	e029      	b.n	80012a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	3304      	adds	r3, #4
 8001256:	623b      	str	r3, [r7, #32]
          break;
 8001258:	e024      	b.n	80012a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	3308      	adds	r3, #8
 8001260:	623b      	str	r3, [r7, #32]
          break;
 8001262:	e01f      	b.n	80012a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	330c      	adds	r3, #12
 800126a:	623b      	str	r3, [r7, #32]
          break;
 800126c:	e01a      	b.n	80012a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d102      	bne.n	800127c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001276:	2304      	movs	r3, #4
 8001278:	623b      	str	r3, [r7, #32]
          break;
 800127a:	e013      	b.n	80012a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d105      	bne.n	8001290 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001284:	2308      	movs	r3, #8
 8001286:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	69fa      	ldr	r2, [r7, #28]
 800128c:	611a      	str	r2, [r3, #16]
          break;
 800128e:	e009      	b.n	80012a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001290:	2308      	movs	r3, #8
 8001292:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	69fa      	ldr	r2, [r7, #28]
 8001298:	615a      	str	r2, [r3, #20]
          break;
 800129a:	e003      	b.n	80012a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800129c:	2300      	movs	r3, #0
 800129e:	623b      	str	r3, [r7, #32]
          break;
 80012a0:	e000      	b.n	80012a4 <HAL_GPIO_Init+0x130>
          break;
 80012a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	2bff      	cmp	r3, #255	; 0xff
 80012a8:	d801      	bhi.n	80012ae <HAL_GPIO_Init+0x13a>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	e001      	b.n	80012b2 <HAL_GPIO_Init+0x13e>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	3304      	adds	r3, #4
 80012b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	2bff      	cmp	r3, #255	; 0xff
 80012b8:	d802      	bhi.n	80012c0 <HAL_GPIO_Init+0x14c>
 80012ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	e002      	b.n	80012c6 <HAL_GPIO_Init+0x152>
 80012c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c2:	3b08      	subs	r3, #8
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	210f      	movs	r1, #15
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	fa01 f303 	lsl.w	r3, r1, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	401a      	ands	r2, r3
 80012d8:	6a39      	ldr	r1, [r7, #32]
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	fa01 f303 	lsl.w	r3, r1, r3
 80012e0:	431a      	orrs	r2, r3
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f000 80b1 	beq.w	8001456 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012f4:	4b4d      	ldr	r3, [pc, #308]	; (800142c <HAL_GPIO_Init+0x2b8>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	4a4c      	ldr	r2, [pc, #304]	; (800142c <HAL_GPIO_Init+0x2b8>)
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	6193      	str	r3, [r2, #24]
 8001300:	4b4a      	ldr	r3, [pc, #296]	; (800142c <HAL_GPIO_Init+0x2b8>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800130c:	4a48      	ldr	r2, [pc, #288]	; (8001430 <HAL_GPIO_Init+0x2bc>)
 800130e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001310:	089b      	lsrs	r3, r3, #2
 8001312:	3302      	adds	r3, #2
 8001314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001318:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131c:	f003 0303 	and.w	r3, r3, #3
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	220f      	movs	r2, #15
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	4013      	ands	r3, r2
 800132e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a40      	ldr	r2, [pc, #256]	; (8001434 <HAL_GPIO_Init+0x2c0>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d013      	beq.n	8001360 <HAL_GPIO_Init+0x1ec>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a3f      	ldr	r2, [pc, #252]	; (8001438 <HAL_GPIO_Init+0x2c4>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d00d      	beq.n	800135c <HAL_GPIO_Init+0x1e8>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a3e      	ldr	r2, [pc, #248]	; (800143c <HAL_GPIO_Init+0x2c8>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d007      	beq.n	8001358 <HAL_GPIO_Init+0x1e4>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a3d      	ldr	r2, [pc, #244]	; (8001440 <HAL_GPIO_Init+0x2cc>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d101      	bne.n	8001354 <HAL_GPIO_Init+0x1e0>
 8001350:	2303      	movs	r3, #3
 8001352:	e006      	b.n	8001362 <HAL_GPIO_Init+0x1ee>
 8001354:	2304      	movs	r3, #4
 8001356:	e004      	b.n	8001362 <HAL_GPIO_Init+0x1ee>
 8001358:	2302      	movs	r3, #2
 800135a:	e002      	b.n	8001362 <HAL_GPIO_Init+0x1ee>
 800135c:	2301      	movs	r3, #1
 800135e:	e000      	b.n	8001362 <HAL_GPIO_Init+0x1ee>
 8001360:	2300      	movs	r3, #0
 8001362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001364:	f002 0203 	and.w	r2, r2, #3
 8001368:	0092      	lsls	r2, r2, #2
 800136a:	4093      	lsls	r3, r2
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	4313      	orrs	r3, r2
 8001370:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001372:	492f      	ldr	r1, [pc, #188]	; (8001430 <HAL_GPIO_Init+0x2bc>)
 8001374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001376:	089b      	lsrs	r3, r3, #2
 8001378:	3302      	adds	r3, #2
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d006      	beq.n	800139a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800138c:	4b2d      	ldr	r3, [pc, #180]	; (8001444 <HAL_GPIO_Init+0x2d0>)
 800138e:	689a      	ldr	r2, [r3, #8]
 8001390:	492c      	ldr	r1, [pc, #176]	; (8001444 <HAL_GPIO_Init+0x2d0>)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	4313      	orrs	r3, r2
 8001396:	608b      	str	r3, [r1, #8]
 8001398:	e006      	b.n	80013a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800139a:	4b2a      	ldr	r3, [pc, #168]	; (8001444 <HAL_GPIO_Init+0x2d0>)
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	4928      	ldr	r1, [pc, #160]	; (8001444 <HAL_GPIO_Init+0x2d0>)
 80013a4:	4013      	ands	r3, r2
 80013a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d006      	beq.n	80013c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013b4:	4b23      	ldr	r3, [pc, #140]	; (8001444 <HAL_GPIO_Init+0x2d0>)
 80013b6:	68da      	ldr	r2, [r3, #12]
 80013b8:	4922      	ldr	r1, [pc, #136]	; (8001444 <HAL_GPIO_Init+0x2d0>)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	4313      	orrs	r3, r2
 80013be:	60cb      	str	r3, [r1, #12]
 80013c0:	e006      	b.n	80013d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013c2:	4b20      	ldr	r3, [pc, #128]	; (8001444 <HAL_GPIO_Init+0x2d0>)
 80013c4:	68da      	ldr	r2, [r3, #12]
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	491e      	ldr	r1, [pc, #120]	; (8001444 <HAL_GPIO_Init+0x2d0>)
 80013cc:	4013      	ands	r3, r2
 80013ce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d006      	beq.n	80013ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013dc:	4b19      	ldr	r3, [pc, #100]	; (8001444 <HAL_GPIO_Init+0x2d0>)
 80013de:	685a      	ldr	r2, [r3, #4]
 80013e0:	4918      	ldr	r1, [pc, #96]	; (8001444 <HAL_GPIO_Init+0x2d0>)
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	604b      	str	r3, [r1, #4]
 80013e8:	e006      	b.n	80013f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013ea:	4b16      	ldr	r3, [pc, #88]	; (8001444 <HAL_GPIO_Init+0x2d0>)
 80013ec:	685a      	ldr	r2, [r3, #4]
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	43db      	mvns	r3, r3
 80013f2:	4914      	ldr	r1, [pc, #80]	; (8001444 <HAL_GPIO_Init+0x2d0>)
 80013f4:	4013      	ands	r3, r2
 80013f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d021      	beq.n	8001448 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001404:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <HAL_GPIO_Init+0x2d0>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	490e      	ldr	r1, [pc, #56]	; (8001444 <HAL_GPIO_Init+0x2d0>)
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	4313      	orrs	r3, r2
 800140e:	600b      	str	r3, [r1, #0]
 8001410:	e021      	b.n	8001456 <HAL_GPIO_Init+0x2e2>
 8001412:	bf00      	nop
 8001414:	10320000 	.word	0x10320000
 8001418:	10310000 	.word	0x10310000
 800141c:	10220000 	.word	0x10220000
 8001420:	10210000 	.word	0x10210000
 8001424:	10120000 	.word	0x10120000
 8001428:	10110000 	.word	0x10110000
 800142c:	40021000 	.word	0x40021000
 8001430:	40010000 	.word	0x40010000
 8001434:	40010800 	.word	0x40010800
 8001438:	40010c00 	.word	0x40010c00
 800143c:	40011000 	.word	0x40011000
 8001440:	40011400 	.word	0x40011400
 8001444:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001448:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <HAL_GPIO_Init+0x304>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	43db      	mvns	r3, r3
 8001450:	4909      	ldr	r1, [pc, #36]	; (8001478 <HAL_GPIO_Init+0x304>)
 8001452:	4013      	ands	r3, r2
 8001454:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	3301      	adds	r3, #1
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001462:	fa22 f303 	lsr.w	r3, r2, r3
 8001466:	2b00      	cmp	r3, #0
 8001468:	f47f ae8e 	bne.w	8001188 <HAL_GPIO_Init+0x14>
  }
}
 800146c:	bf00      	nop
 800146e:	bf00      	nop
 8001470:	372c      	adds	r7, #44	; 0x2c
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	40010400 	.word	0x40010400

0800147c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	807b      	strh	r3, [r7, #2]
 8001488:	4613      	mov	r3, r2
 800148a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800148c:	787b      	ldrb	r3, [r7, #1]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001492:	887a      	ldrh	r2, [r7, #2]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001498:	e003      	b.n	80014a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800149a:	887b      	ldrh	r3, [r7, #2]
 800149c:	041a      	lsls	r2, r3, #16
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	611a      	str	r2, [r3, #16]
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr

080014ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d101      	bne.n	80014be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e272      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f000 8087 	beq.w	80015da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014cc:	4b92      	ldr	r3, [pc, #584]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 030c 	and.w	r3, r3, #12
 80014d4:	2b04      	cmp	r3, #4
 80014d6:	d00c      	beq.n	80014f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014d8:	4b8f      	ldr	r3, [pc, #572]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f003 030c 	and.w	r3, r3, #12
 80014e0:	2b08      	cmp	r3, #8
 80014e2:	d112      	bne.n	800150a <HAL_RCC_OscConfig+0x5e>
 80014e4:	4b8c      	ldr	r3, [pc, #560]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014f0:	d10b      	bne.n	800150a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f2:	4b89      	ldr	r3, [pc, #548]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d06c      	beq.n	80015d8 <HAL_RCC_OscConfig+0x12c>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d168      	bne.n	80015d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e24c      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001512:	d106      	bne.n	8001522 <HAL_RCC_OscConfig+0x76>
 8001514:	4b80      	ldr	r3, [pc, #512]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a7f      	ldr	r2, [pc, #508]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 800151a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800151e:	6013      	str	r3, [r2, #0]
 8001520:	e02e      	b.n	8001580 <HAL_RCC_OscConfig+0xd4>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d10c      	bne.n	8001544 <HAL_RCC_OscConfig+0x98>
 800152a:	4b7b      	ldr	r3, [pc, #492]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a7a      	ldr	r2, [pc, #488]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	4b78      	ldr	r3, [pc, #480]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a77      	ldr	r2, [pc, #476]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 800153c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	e01d      	b.n	8001580 <HAL_RCC_OscConfig+0xd4>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800154c:	d10c      	bne.n	8001568 <HAL_RCC_OscConfig+0xbc>
 800154e:	4b72      	ldr	r3, [pc, #456]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a71      	ldr	r2, [pc, #452]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001554:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	4b6f      	ldr	r3, [pc, #444]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a6e      	ldr	r2, [pc, #440]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	e00b      	b.n	8001580 <HAL_RCC_OscConfig+0xd4>
 8001568:	4b6b      	ldr	r3, [pc, #428]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a6a      	ldr	r2, [pc, #424]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 800156e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001572:	6013      	str	r3, [r2, #0]
 8001574:	4b68      	ldr	r3, [pc, #416]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a67      	ldr	r2, [pc, #412]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 800157a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800157e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d013      	beq.n	80015b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001588:	f7ff fce6 	bl	8000f58 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001590:	f7ff fce2 	bl	8000f58 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b64      	cmp	r3, #100	; 0x64
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e200      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015a2:	4b5d      	ldr	r3, [pc, #372]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0f0      	beq.n	8001590 <HAL_RCC_OscConfig+0xe4>
 80015ae:	e014      	b.n	80015da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b0:	f7ff fcd2 	bl	8000f58 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b8:	f7ff fcce 	bl	8000f58 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b64      	cmp	r3, #100	; 0x64
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e1ec      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ca:	4b53      	ldr	r3, [pc, #332]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1f0      	bne.n	80015b8 <HAL_RCC_OscConfig+0x10c>
 80015d6:	e000      	b.n	80015da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d063      	beq.n	80016ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015e6:	4b4c      	ldr	r3, [pc, #304]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f003 030c 	and.w	r3, r3, #12
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d00b      	beq.n	800160a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015f2:	4b49      	ldr	r3, [pc, #292]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f003 030c 	and.w	r3, r3, #12
 80015fa:	2b08      	cmp	r3, #8
 80015fc:	d11c      	bne.n	8001638 <HAL_RCC_OscConfig+0x18c>
 80015fe:	4b46      	ldr	r3, [pc, #280]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d116      	bne.n	8001638 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800160a:	4b43      	ldr	r3, [pc, #268]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d005      	beq.n	8001622 <HAL_RCC_OscConfig+0x176>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d001      	beq.n	8001622 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e1c0      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001622:	4b3d      	ldr	r3, [pc, #244]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	4939      	ldr	r1, [pc, #228]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001632:	4313      	orrs	r3, r2
 8001634:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001636:	e03a      	b.n	80016ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d020      	beq.n	8001682 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001640:	4b36      	ldr	r3, [pc, #216]	; (800171c <HAL_RCC_OscConfig+0x270>)
 8001642:	2201      	movs	r2, #1
 8001644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001646:	f7ff fc87 	bl	8000f58 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800164e:	f7ff fc83 	bl	8000f58 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e1a1      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001660:	4b2d      	ldr	r3, [pc, #180]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0f0      	beq.n	800164e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800166c:	4b2a      	ldr	r3, [pc, #168]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	695b      	ldr	r3, [r3, #20]
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	4927      	ldr	r1, [pc, #156]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 800167c:	4313      	orrs	r3, r2
 800167e:	600b      	str	r3, [r1, #0]
 8001680:	e015      	b.n	80016ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001682:	4b26      	ldr	r3, [pc, #152]	; (800171c <HAL_RCC_OscConfig+0x270>)
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001688:	f7ff fc66 	bl	8000f58 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001690:	f7ff fc62 	bl	8000f58 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e180      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016a2:	4b1d      	ldr	r3, [pc, #116]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d03a      	beq.n	8001730 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d019      	beq.n	80016f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016c2:	4b17      	ldr	r3, [pc, #92]	; (8001720 <HAL_RCC_OscConfig+0x274>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c8:	f7ff fc46 	bl	8000f58 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016d0:	f7ff fc42 	bl	8000f58 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e160      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016e2:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 80016e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0f0      	beq.n	80016d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016ee:	2001      	movs	r0, #1
 80016f0:	f000 faea 	bl	8001cc8 <RCC_Delay>
 80016f4:	e01c      	b.n	8001730 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016f6:	4b0a      	ldr	r3, [pc, #40]	; (8001720 <HAL_RCC_OscConfig+0x274>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fc:	f7ff fc2c 	bl	8000f58 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001702:	e00f      	b.n	8001724 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001704:	f7ff fc28 	bl	8000f58 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d908      	bls.n	8001724 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e146      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
 8001716:	bf00      	nop
 8001718:	40021000 	.word	0x40021000
 800171c:	42420000 	.word	0x42420000
 8001720:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001724:	4b92      	ldr	r3, [pc, #584]	; (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1e9      	bne.n	8001704 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0304 	and.w	r3, r3, #4
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 80a6 	beq.w	800188a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800173e:	2300      	movs	r3, #0
 8001740:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001742:	4b8b      	ldr	r3, [pc, #556]	; (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d10d      	bne.n	800176a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800174e:	4b88      	ldr	r3, [pc, #544]	; (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	4a87      	ldr	r2, [pc, #540]	; (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001758:	61d3      	str	r3, [r2, #28]
 800175a:	4b85      	ldr	r3, [pc, #532]	; (8001970 <HAL_RCC_OscConfig+0x4c4>)
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001766:	2301      	movs	r3, #1
 8001768:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800176a:	4b82      	ldr	r3, [pc, #520]	; (8001974 <HAL_RCC_OscConfig+0x4c8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001772:	2b00      	cmp	r3, #0
 8001774:	d118      	bne.n	80017a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001776:	4b7f      	ldr	r3, [pc, #508]	; (8001974 <HAL_RCC_OscConfig+0x4c8>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a7e      	ldr	r2, [pc, #504]	; (8001974 <HAL_RCC_OscConfig+0x4c8>)
 800177c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001780:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001782:	f7ff fbe9 	bl	8000f58 <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800178a:	f7ff fbe5 	bl	8000f58 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b64      	cmp	r3, #100	; 0x64
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e103      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800179c:	4b75      	ldr	r3, [pc, #468]	; (8001974 <HAL_RCC_OscConfig+0x4c8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0f0      	beq.n	800178a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d106      	bne.n	80017be <HAL_RCC_OscConfig+0x312>
 80017b0:	4b6f      	ldr	r3, [pc, #444]	; (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80017b2:	6a1b      	ldr	r3, [r3, #32]
 80017b4:	4a6e      	ldr	r2, [pc, #440]	; (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	6213      	str	r3, [r2, #32]
 80017bc:	e02d      	b.n	800181a <HAL_RCC_OscConfig+0x36e>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d10c      	bne.n	80017e0 <HAL_RCC_OscConfig+0x334>
 80017c6:	4b6a      	ldr	r3, [pc, #424]	; (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80017c8:	6a1b      	ldr	r3, [r3, #32]
 80017ca:	4a69      	ldr	r2, [pc, #420]	; (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80017cc:	f023 0301 	bic.w	r3, r3, #1
 80017d0:	6213      	str	r3, [r2, #32]
 80017d2:	4b67      	ldr	r3, [pc, #412]	; (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80017d4:	6a1b      	ldr	r3, [r3, #32]
 80017d6:	4a66      	ldr	r2, [pc, #408]	; (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80017d8:	f023 0304 	bic.w	r3, r3, #4
 80017dc:	6213      	str	r3, [r2, #32]
 80017de:	e01c      	b.n	800181a <HAL_RCC_OscConfig+0x36e>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	2b05      	cmp	r3, #5
 80017e6:	d10c      	bne.n	8001802 <HAL_RCC_OscConfig+0x356>
 80017e8:	4b61      	ldr	r3, [pc, #388]	; (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	4a60      	ldr	r2, [pc, #384]	; (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80017ee:	f043 0304 	orr.w	r3, r3, #4
 80017f2:	6213      	str	r3, [r2, #32]
 80017f4:	4b5e      	ldr	r3, [pc, #376]	; (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	4a5d      	ldr	r2, [pc, #372]	; (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	6213      	str	r3, [r2, #32]
 8001800:	e00b      	b.n	800181a <HAL_RCC_OscConfig+0x36e>
 8001802:	4b5b      	ldr	r3, [pc, #364]	; (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001804:	6a1b      	ldr	r3, [r3, #32]
 8001806:	4a5a      	ldr	r2, [pc, #360]	; (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001808:	f023 0301 	bic.w	r3, r3, #1
 800180c:	6213      	str	r3, [r2, #32]
 800180e:	4b58      	ldr	r3, [pc, #352]	; (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001810:	6a1b      	ldr	r3, [r3, #32]
 8001812:	4a57      	ldr	r2, [pc, #348]	; (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001814:	f023 0304 	bic.w	r3, r3, #4
 8001818:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d015      	beq.n	800184e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001822:	f7ff fb99 	bl	8000f58 <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001828:	e00a      	b.n	8001840 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800182a:	f7ff fb95 	bl	8000f58 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	f241 3288 	movw	r2, #5000	; 0x1388
 8001838:	4293      	cmp	r3, r2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e0b1      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001840:	4b4b      	ldr	r3, [pc, #300]	; (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0ee      	beq.n	800182a <HAL_RCC_OscConfig+0x37e>
 800184c:	e014      	b.n	8001878 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184e:	f7ff fb83 	bl	8000f58 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001854:	e00a      	b.n	800186c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001856:	f7ff fb7f 	bl	8000f58 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	f241 3288 	movw	r2, #5000	; 0x1388
 8001864:	4293      	cmp	r3, r2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e09b      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800186c:	4b40      	ldr	r3, [pc, #256]	; (8001970 <HAL_RCC_OscConfig+0x4c4>)
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1ee      	bne.n	8001856 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001878:	7dfb      	ldrb	r3, [r7, #23]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d105      	bne.n	800188a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800187e:	4b3c      	ldr	r3, [pc, #240]	; (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	4a3b      	ldr	r2, [pc, #236]	; (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001884:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001888:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	2b00      	cmp	r3, #0
 8001890:	f000 8087 	beq.w	80019a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001894:	4b36      	ldr	r3, [pc, #216]	; (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 030c 	and.w	r3, r3, #12
 800189c:	2b08      	cmp	r3, #8
 800189e:	d061      	beq.n	8001964 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	69db      	ldr	r3, [r3, #28]
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d146      	bne.n	8001936 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a8:	4b33      	ldr	r3, [pc, #204]	; (8001978 <HAL_RCC_OscConfig+0x4cc>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ae:	f7ff fb53 	bl	8000f58 <HAL_GetTick>
 80018b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b6:	f7ff fb4f 	bl	8000f58 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e06d      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018c8:	4b29      	ldr	r3, [pc, #164]	; (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1f0      	bne.n	80018b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018dc:	d108      	bne.n	80018f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018de:	4b24      	ldr	r3, [pc, #144]	; (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	4921      	ldr	r1, [pc, #132]	; (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018f0:	4b1f      	ldr	r3, [pc, #124]	; (8001970 <HAL_RCC_OscConfig+0x4c4>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a19      	ldr	r1, [r3, #32]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001900:	430b      	orrs	r3, r1
 8001902:	491b      	ldr	r1, [pc, #108]	; (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001904:	4313      	orrs	r3, r2
 8001906:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001908:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <HAL_RCC_OscConfig+0x4cc>)
 800190a:	2201      	movs	r2, #1
 800190c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190e:	f7ff fb23 	bl	8000f58 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001916:	f7ff fb1f 	bl	8000f58 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e03d      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001928:	4b11      	ldr	r3, [pc, #68]	; (8001970 <HAL_RCC_OscConfig+0x4c4>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0f0      	beq.n	8001916 <HAL_RCC_OscConfig+0x46a>
 8001934:	e035      	b.n	80019a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001936:	4b10      	ldr	r3, [pc, #64]	; (8001978 <HAL_RCC_OscConfig+0x4cc>)
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193c:	f7ff fb0c 	bl	8000f58 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001944:	f7ff fb08 	bl	8000f58 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e026      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001956:	4b06      	ldr	r3, [pc, #24]	; (8001970 <HAL_RCC_OscConfig+0x4c4>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1f0      	bne.n	8001944 <HAL_RCC_OscConfig+0x498>
 8001962:	e01e      	b.n	80019a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	69db      	ldr	r3, [r3, #28]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d107      	bne.n	800197c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e019      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
 8001970:	40021000 	.word	0x40021000
 8001974:	40007000 	.word	0x40007000
 8001978:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800197c:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <HAL_RCC_OscConfig+0x500>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	429a      	cmp	r2, r3
 800198e:	d106      	bne.n	800199e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800199a:	429a      	cmp	r2, r3
 800199c:	d001      	beq.n	80019a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e000      	b.n	80019a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40021000 	.word	0x40021000

080019b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e0d0      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019c4:	4b6a      	ldr	r3, [pc, #424]	; (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d910      	bls.n	80019f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d2:	4b67      	ldr	r3, [pc, #412]	; (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f023 0207 	bic.w	r2, r3, #7
 80019da:	4965      	ldr	r1, [pc, #404]	; (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	4313      	orrs	r3, r2
 80019e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e2:	4b63      	ldr	r3, [pc, #396]	; (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d001      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e0b8      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d020      	beq.n	8001a42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d005      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a0c:	4b59      	ldr	r3, [pc, #356]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	4a58      	ldr	r2, [pc, #352]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0308 	and.w	r3, r3, #8
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d005      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a24:	4b53      	ldr	r3, [pc, #332]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	4a52      	ldr	r2, [pc, #328]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a30:	4b50      	ldr	r3, [pc, #320]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	494d      	ldr	r1, [pc, #308]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d040      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d107      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a56:	4b47      	ldr	r3, [pc, #284]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d115      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e07f      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d107      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a6e:	4b41      	ldr	r3, [pc, #260]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d109      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e073      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a7e:	4b3d      	ldr	r3, [pc, #244]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e06b      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a8e:	4b39      	ldr	r3, [pc, #228]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f023 0203 	bic.w	r2, r3, #3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	4936      	ldr	r1, [pc, #216]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001aa0:	f7ff fa5a 	bl	8000f58 <HAL_GetTick>
 8001aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa6:	e00a      	b.n	8001abe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa8:	f7ff fa56 	bl	8000f58 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e053      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001abe:	4b2d      	ldr	r3, [pc, #180]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 020c 	and.w	r2, r3, #12
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d1eb      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ad0:	4b27      	ldr	r3, [pc, #156]	; (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d210      	bcs.n	8001b00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ade:	4b24      	ldr	r3, [pc, #144]	; (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f023 0207 	bic.w	r2, r3, #7
 8001ae6:	4922      	ldr	r1, [pc, #136]	; (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aee:	4b20      	ldr	r3, [pc, #128]	; (8001b70 <HAL_RCC_ClockConfig+0x1c0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d001      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e032      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d008      	beq.n	8001b1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b0c:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	4916      	ldr	r1, [pc, #88]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0308 	and.w	r3, r3, #8
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d009      	beq.n	8001b3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b2a:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	490e      	ldr	r1, [pc, #56]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b3e:	f000 f821 	bl	8001b84 <HAL_RCC_GetSysClockFreq>
 8001b42:	4602      	mov	r2, r0
 8001b44:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <HAL_RCC_ClockConfig+0x1c4>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	091b      	lsrs	r3, r3, #4
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	490a      	ldr	r1, [pc, #40]	; (8001b78 <HAL_RCC_ClockConfig+0x1c8>)
 8001b50:	5ccb      	ldrb	r3, [r1, r3]
 8001b52:	fa22 f303 	lsr.w	r3, r2, r3
 8001b56:	4a09      	ldr	r2, [pc, #36]	; (8001b7c <HAL_RCC_ClockConfig+0x1cc>)
 8001b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b5a:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <HAL_RCC_ClockConfig+0x1d0>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff f8c0 	bl	8000ce4 <HAL_InitTick>

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40022000 	.word	0x40022000
 8001b74:	40021000 	.word	0x40021000
 8001b78:	08003538 	.word	0x08003538
 8001b7c:	20000004 	.word	0x20000004
 8001b80:	20000008 	.word	0x20000008

08001b84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b087      	sub	sp, #28
 8001b88:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b9e:	4b1e      	ldr	r3, [pc, #120]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
 8001baa:	2b04      	cmp	r3, #4
 8001bac:	d002      	beq.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x30>
 8001bae:	2b08      	cmp	r3, #8
 8001bb0:	d003      	beq.n	8001bba <HAL_RCC_GetSysClockFreq+0x36>
 8001bb2:	e027      	b.n	8001c04 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bb4:	4b19      	ldr	r3, [pc, #100]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x98>)
 8001bb6:	613b      	str	r3, [r7, #16]
      break;
 8001bb8:	e027      	b.n	8001c0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	0c9b      	lsrs	r3, r3, #18
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	4a17      	ldr	r2, [pc, #92]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001bc4:	5cd3      	ldrb	r3, [r2, r3]
 8001bc6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d010      	beq.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001bd2:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x94>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	0c5b      	lsrs	r3, r3, #17
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	4a11      	ldr	r2, [pc, #68]	; (8001c24 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001bde:	5cd3      	ldrb	r3, [r2, r3]
 8001be0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a0d      	ldr	r2, [pc, #52]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x98>)
 8001be6:	fb03 f202 	mul.w	r2, r3, r2
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	e004      	b.n	8001bfe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a0c      	ldr	r2, [pc, #48]	; (8001c28 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001bf8:	fb02 f303 	mul.w	r3, r2, r3
 8001bfc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	613b      	str	r3, [r7, #16]
      break;
 8001c02:	e002      	b.n	8001c0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c04:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x98>)
 8001c06:	613b      	str	r3, [r7, #16]
      break;
 8001c08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c0a:	693b      	ldr	r3, [r7, #16]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	371c      	adds	r7, #28
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	007a1200 	.word	0x007a1200
 8001c20:	08003550 	.word	0x08003550
 8001c24:	08003560 	.word	0x08003560
 8001c28:	003d0900 	.word	0x003d0900

08001c2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c30:	4b02      	ldr	r3, [pc, #8]	; (8001c3c <HAL_RCC_GetHCLKFreq+0x10>)
 8001c32:	681b      	ldr	r3, [r3, #0]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr
 8001c3c:	20000004 	.word	0x20000004

08001c40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c44:	f7ff fff2 	bl	8001c2c <HAL_RCC_GetHCLKFreq>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	0a1b      	lsrs	r3, r3, #8
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	4903      	ldr	r1, [pc, #12]	; (8001c64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c56:	5ccb      	ldrb	r3, [r1, r3]
 8001c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40021000 	.word	0x40021000
 8001c64:	08003548 	.word	0x08003548

08001c68 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	220f      	movs	r2, #15
 8001c76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c78:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <HAL_RCC_GetClockConfig+0x58>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 0203 	and.w	r2, r3, #3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c84:	4b0e      	ldr	r3, [pc, #56]	; (8001cc0 <HAL_RCC_GetClockConfig+0x58>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c90:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <HAL_RCC_GetClockConfig+0x58>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001c9c:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <HAL_RCC_GetClockConfig+0x58>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	08db      	lsrs	r3, r3, #3
 8001ca2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001caa:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <HAL_RCC_GetClockConfig+0x5c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0207 	and.w	r2, r3, #7
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	40022000 	.word	0x40022000

08001cc8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001cd0:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <RCC_Delay+0x34>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a0a      	ldr	r2, [pc, #40]	; (8001d00 <RCC_Delay+0x38>)
 8001cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cda:	0a5b      	lsrs	r3, r3, #9
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	fb02 f303 	mul.w	r3, r2, r3
 8001ce2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ce4:	bf00      	nop
  }
  while (Delay --);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	1e5a      	subs	r2, r3, #1
 8001cea:	60fa      	str	r2, [r7, #12]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1f9      	bne.n	8001ce4 <RCC_Delay+0x1c>
}
 8001cf0:	bf00      	nop
 8001cf2:	bf00      	nop
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr
 8001cfc:	20000004 	.word	0x20000004
 8001d00:	10624dd3 	.word	0x10624dd3

08001d04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e076      	b.n	8001e04 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d108      	bne.n	8001d30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d26:	d009      	beq.n	8001d3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	61da      	str	r2, [r3, #28]
 8001d2e:	e005      	b.n	8001d3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d106      	bne.n	8001d5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7fe ff86 	bl	8000c68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2202      	movs	r2, #2
 8001d60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001d84:	431a      	orrs	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	431a      	orrs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dac:	431a      	orrs	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001db6:	431a      	orrs	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc0:	ea42 0103 	orr.w	r1, r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	0c1a      	lsrs	r2, r3, #16
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f002 0204 	and.w	r2, r2, #4
 8001de2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	69da      	ldr	r2, [r3, #28]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001df2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b088      	sub	sp, #32
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	603b      	str	r3, [r7, #0]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d101      	bne.n	8001e2e <HAL_SPI_Transmit+0x22>
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	e12d      	b.n	800208a <HAL_SPI_Transmit+0x27e>
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e36:	f7ff f88f 	bl	8000f58 <HAL_GetTick>
 8001e3a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001e3c:	88fb      	ldrh	r3, [r7, #6]
 8001e3e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d002      	beq.n	8001e52 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e50:	e116      	b.n	8002080 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d002      	beq.n	8001e5e <HAL_SPI_Transmit+0x52>
 8001e58:	88fb      	ldrh	r3, [r7, #6]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d102      	bne.n	8001e64 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e62:	e10d      	b.n	8002080 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2203      	movs	r2, #3
 8001e68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	68ba      	ldr	r2, [r7, #8]
 8001e76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	88fa      	ldrh	r2, [r7, #6]
 8001e7c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	88fa      	ldrh	r2, [r7, #6]
 8001e82:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2200      	movs	r2, #0
 8001e94:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001eaa:	d10f      	bne.n	8001ecc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001eba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001eca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed6:	2b40      	cmp	r3, #64	; 0x40
 8001ed8:	d007      	beq.n	8001eea <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ee8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ef2:	d14f      	bne.n	8001f94 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d002      	beq.n	8001f02 <HAL_SPI_Transmit+0xf6>
 8001efc:	8afb      	ldrh	r3, [r7, #22]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d142      	bne.n	8001f88 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	881a      	ldrh	r2, [r3, #0]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	1c9a      	adds	r2, r3, #2
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001f26:	e02f      	b.n	8001f88 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d112      	bne.n	8001f5c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	881a      	ldrh	r2, [r3, #0]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	1c9a      	adds	r2, r3, #2
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	3b01      	subs	r3, #1
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	86da      	strh	r2, [r3, #54]	; 0x36
 8001f5a:	e015      	b.n	8001f88 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f5c:	f7fe fffc 	bl	8000f58 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d803      	bhi.n	8001f74 <HAL_SPI_Transmit+0x168>
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f72:	d102      	bne.n	8001f7a <HAL_SPI_Transmit+0x16e>
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d106      	bne.n	8001f88 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001f86:	e07b      	b.n	8002080 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1ca      	bne.n	8001f28 <HAL_SPI_Transmit+0x11c>
 8001f92:	e050      	b.n	8002036 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d002      	beq.n	8001fa2 <HAL_SPI_Transmit+0x196>
 8001f9c:	8afb      	ldrh	r3, [r7, #22]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d144      	bne.n	800202c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	330c      	adds	r3, #12
 8001fac:	7812      	ldrb	r2, [r2, #0]
 8001fae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb4:	1c5a      	adds	r2, r3, #1
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001fc8:	e030      	b.n	800202c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d113      	bne.n	8002000 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	330c      	adds	r3, #12
 8001fe2:	7812      	ldrb	r2, [r2, #0]
 8001fe4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	1c5a      	adds	r2, r3, #1
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	86da      	strh	r2, [r3, #54]	; 0x36
 8001ffe:	e015      	b.n	800202c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002000:	f7fe ffaa 	bl	8000f58 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	429a      	cmp	r2, r3
 800200e:	d803      	bhi.n	8002018 <HAL_SPI_Transmit+0x20c>
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002016:	d102      	bne.n	800201e <HAL_SPI_Transmit+0x212>
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d106      	bne.n	800202c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800202a:	e029      	b.n	8002080 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002030:	b29b      	uxth	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1c9      	bne.n	8001fca <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	6839      	ldr	r1, [r7, #0]
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f000 f8be 	bl	80021bc <SPI_EndRxTxTransaction>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d002      	beq.n	800204c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2220      	movs	r2, #32
 800204a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d10a      	bne.n	800206a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002054:	2300      	movs	r3, #0
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206e:	2b00      	cmp	r3, #0
 8002070:	d002      	beq.n	8002078 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	77fb      	strb	r3, [r7, #31]
 8002076:	e003      	b.n	8002080 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002088:	7ffb      	ldrb	r3, [r7, #31]
}
 800208a:	4618      	mov	r0, r3
 800208c:	3720      	adds	r7, #32
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020a0:	b2db      	uxtb	r3, r3
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr

080020ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b088      	sub	sp, #32
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	603b      	str	r3, [r7, #0]
 80020b8:	4613      	mov	r3, r2
 80020ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80020bc:	f7fe ff4c 	bl	8000f58 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c4:	1a9b      	subs	r3, r3, r2
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	4413      	add	r3, r2
 80020ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80020cc:	f7fe ff44 	bl	8000f58 <HAL_GetTick>
 80020d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80020d2:	4b39      	ldr	r3, [pc, #228]	; (80021b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	015b      	lsls	r3, r3, #5
 80020d8:	0d1b      	lsrs	r3, r3, #20
 80020da:	69fa      	ldr	r2, [r7, #28]
 80020dc:	fb02 f303 	mul.w	r3, r2, r3
 80020e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020e2:	e054      	b.n	800218e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020ea:	d050      	beq.n	800218e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80020ec:	f7fe ff34 	bl	8000f58 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	69fa      	ldr	r2, [r7, #28]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d902      	bls.n	8002102 <SPI_WaitFlagStateUntilTimeout+0x56>
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d13d      	bne.n	800217e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002110:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800211a:	d111      	bne.n	8002140 <SPI_WaitFlagStateUntilTimeout+0x94>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002124:	d004      	beq.n	8002130 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800212e:	d107      	bne.n	8002140 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800213e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002144:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002148:	d10f      	bne.n	800216a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002168:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e017      	b.n	80021ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002184:	2300      	movs	r3, #0
 8002186:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	3b01      	subs	r3, #1
 800218c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	4013      	ands	r3, r2
 8002198:	68ba      	ldr	r2, [r7, #8]
 800219a:	429a      	cmp	r2, r3
 800219c:	bf0c      	ite	eq
 800219e:	2301      	moveq	r3, #1
 80021a0:	2300      	movne	r3, #0
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	461a      	mov	r2, r3
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d19b      	bne.n	80020e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3720      	adds	r7, #32
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20000004 	.word	0x20000004

080021bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af02      	add	r7, sp, #8
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	2200      	movs	r2, #0
 80021d0:	2180      	movs	r1, #128	; 0x80
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f7ff ff6a 	bl	80020ac <SPI_WaitFlagStateUntilTimeout>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d007      	beq.n	80021ee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e2:	f043 0220 	orr.w	r2, r3, #32
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e000      	b.n	80021f0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e041      	b.n	800228e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d106      	bne.n	8002224 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 f839 	bl	8002296 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2202      	movs	r2, #2
 8002228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3304      	adds	r3, #4
 8002234:	4619      	mov	r1, r3
 8002236:	4610      	mov	r0, r2
 8002238:	f000 f9b4 	bl	80025a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr

080022a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d001      	beq.n	80022c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e03a      	b.n	8002336 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2202      	movs	r2, #2
 80022c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68da      	ldr	r2, [r3, #12]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f042 0201 	orr.w	r2, r2, #1
 80022d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a18      	ldr	r2, [pc, #96]	; (8002340 <HAL_TIM_Base_Start_IT+0x98>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d00e      	beq.n	8002300 <HAL_TIM_Base_Start_IT+0x58>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ea:	d009      	beq.n	8002300 <HAL_TIM_Base_Start_IT+0x58>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a14      	ldr	r2, [pc, #80]	; (8002344 <HAL_TIM_Base_Start_IT+0x9c>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d004      	beq.n	8002300 <HAL_TIM_Base_Start_IT+0x58>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a13      	ldr	r2, [pc, #76]	; (8002348 <HAL_TIM_Base_Start_IT+0xa0>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d111      	bne.n	8002324 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2b06      	cmp	r3, #6
 8002310:	d010      	beq.n	8002334 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f042 0201 	orr.w	r2, r2, #1
 8002320:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002322:	e007      	b.n	8002334 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 0201 	orr.w	r2, r2, #1
 8002332:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr
 8002340:	40012c00 	.word	0x40012c00
 8002344:	40000400 	.word	0x40000400
 8002348:	40000800 	.word	0x40000800

0800234c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b02      	cmp	r3, #2
 8002360:	d122      	bne.n	80023a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b02      	cmp	r3, #2
 800236e:	d11b      	bne.n	80023a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f06f 0202 	mvn.w	r2, #2
 8002378:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f8ed 	bl	800256e <HAL_TIM_IC_CaptureCallback>
 8002394:	e005      	b.n	80023a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f8e0 	bl	800255c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 f8ef 	bl	8002580 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	f003 0304 	and.w	r3, r3, #4
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d122      	bne.n	80023fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b04      	cmp	r3, #4
 80023c2:	d11b      	bne.n	80023fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f06f 0204 	mvn.w	r2, #4
 80023cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2202      	movs	r2, #2
 80023d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f8c3 	bl	800256e <HAL_TIM_IC_CaptureCallback>
 80023e8:	e005      	b.n	80023f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 f8b6 	bl	800255c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 f8c5 	bl	8002580 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b08      	cmp	r3, #8
 8002408:	d122      	bne.n	8002450 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f003 0308 	and.w	r3, r3, #8
 8002414:	2b08      	cmp	r3, #8
 8002416:	d11b      	bne.n	8002450 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f06f 0208 	mvn.w	r2, #8
 8002420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2204      	movs	r2, #4
 8002426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 f899 	bl	800256e <HAL_TIM_IC_CaptureCallback>
 800243c:	e005      	b.n	800244a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f88c 	bl	800255c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 f89b 	bl	8002580 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	f003 0310 	and.w	r3, r3, #16
 800245a:	2b10      	cmp	r3, #16
 800245c:	d122      	bne.n	80024a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f003 0310 	and.w	r3, r3, #16
 8002468:	2b10      	cmp	r3, #16
 800246a:	d11b      	bne.n	80024a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f06f 0210 	mvn.w	r2, #16
 8002474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2208      	movs	r2, #8
 800247a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f86f 	bl	800256e <HAL_TIM_IC_CaptureCallback>
 8002490:	e005      	b.n	800249e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f862 	bl	800255c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 f871 	bl	8002580 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d10e      	bne.n	80024d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d107      	bne.n	80024d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f06f 0201 	mvn.w	r2, #1
 80024c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7fe fb82 	bl	8000bd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024da:	2b80      	cmp	r3, #128	; 0x80
 80024dc:	d10e      	bne.n	80024fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e8:	2b80      	cmp	r3, #128	; 0x80
 80024ea:	d107      	bne.n	80024fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 f8bf 	bl	800267a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002506:	2b40      	cmp	r3, #64	; 0x40
 8002508:	d10e      	bne.n	8002528 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002514:	2b40      	cmp	r3, #64	; 0x40
 8002516:	d107      	bne.n	8002528 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f835 	bl	8002592 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	f003 0320 	and.w	r3, r3, #32
 8002532:	2b20      	cmp	r3, #32
 8002534:	d10e      	bne.n	8002554 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	f003 0320 	and.w	r3, r3, #32
 8002540:	2b20      	cmp	r3, #32
 8002542:	d107      	bne.n	8002554 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f06f 0220 	mvn.w	r2, #32
 800254c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f88a 	bl	8002668 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002554:	bf00      	nop
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	bc80      	pop	{r7}
 800256c:	4770      	bx	lr

0800256e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800256e:	b480      	push	{r7}
 8002570:	b083      	sub	sp, #12
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr

08002580 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr

08002592 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr

080025a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a29      	ldr	r2, [pc, #164]	; (800265c <TIM_Base_SetConfig+0xb8>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d00b      	beq.n	80025d4 <TIM_Base_SetConfig+0x30>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c2:	d007      	beq.n	80025d4 <TIM_Base_SetConfig+0x30>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a26      	ldr	r2, [pc, #152]	; (8002660 <TIM_Base_SetConfig+0xbc>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d003      	beq.n	80025d4 <TIM_Base_SetConfig+0x30>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a25      	ldr	r2, [pc, #148]	; (8002664 <TIM_Base_SetConfig+0xc0>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d108      	bne.n	80025e6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a1c      	ldr	r2, [pc, #112]	; (800265c <TIM_Base_SetConfig+0xb8>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d00b      	beq.n	8002606 <TIM_Base_SetConfig+0x62>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025f4:	d007      	beq.n	8002606 <TIM_Base_SetConfig+0x62>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a19      	ldr	r2, [pc, #100]	; (8002660 <TIM_Base_SetConfig+0xbc>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d003      	beq.n	8002606 <TIM_Base_SetConfig+0x62>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a18      	ldr	r2, [pc, #96]	; (8002664 <TIM_Base_SetConfig+0xc0>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d108      	bne.n	8002618 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800260c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	4313      	orrs	r3, r2
 8002616:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	4313      	orrs	r3, r2
 8002624:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a07      	ldr	r2, [pc, #28]	; (800265c <TIM_Base_SetConfig+0xb8>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d103      	bne.n	800264c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	691a      	ldr	r2, [r3, #16]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	615a      	str	r2, [r3, #20]
}
 8002652:	bf00      	nop
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr
 800265c:	40012c00 	.word	0x40012c00
 8002660:	40000400 	.word	0x40000400
 8002664:	40000800 	.word	0x40000800

08002668 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	bc80      	pop	{r7}
 8002678:	4770      	bx	lr

0800267a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr

0800268c <siprintf>:
 800268c:	b40e      	push	{r1, r2, r3}
 800268e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002692:	b500      	push	{lr}
 8002694:	b09c      	sub	sp, #112	; 0x70
 8002696:	ab1d      	add	r3, sp, #116	; 0x74
 8002698:	9002      	str	r0, [sp, #8]
 800269a:	9006      	str	r0, [sp, #24]
 800269c:	9107      	str	r1, [sp, #28]
 800269e:	9104      	str	r1, [sp, #16]
 80026a0:	4808      	ldr	r0, [pc, #32]	; (80026c4 <siprintf+0x38>)
 80026a2:	4909      	ldr	r1, [pc, #36]	; (80026c8 <siprintf+0x3c>)
 80026a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80026a8:	9105      	str	r1, [sp, #20]
 80026aa:	6800      	ldr	r0, [r0, #0]
 80026ac:	a902      	add	r1, sp, #8
 80026ae:	9301      	str	r3, [sp, #4]
 80026b0:	f000 f98e 	bl	80029d0 <_svfiprintf_r>
 80026b4:	2200      	movs	r2, #0
 80026b6:	9b02      	ldr	r3, [sp, #8]
 80026b8:	701a      	strb	r2, [r3, #0]
 80026ba:	b01c      	add	sp, #112	; 0x70
 80026bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80026c0:	b003      	add	sp, #12
 80026c2:	4770      	bx	lr
 80026c4:	2000005c 	.word	0x2000005c
 80026c8:	ffff0208 	.word	0xffff0208

080026cc <memset>:
 80026cc:	4603      	mov	r3, r0
 80026ce:	4402      	add	r2, r0
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d100      	bne.n	80026d6 <memset+0xa>
 80026d4:	4770      	bx	lr
 80026d6:	f803 1b01 	strb.w	r1, [r3], #1
 80026da:	e7f9      	b.n	80026d0 <memset+0x4>

080026dc <__errno>:
 80026dc:	4b01      	ldr	r3, [pc, #4]	; (80026e4 <__errno+0x8>)
 80026de:	6818      	ldr	r0, [r3, #0]
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	2000005c 	.word	0x2000005c

080026e8 <__libc_init_array>:
 80026e8:	b570      	push	{r4, r5, r6, lr}
 80026ea:	2600      	movs	r6, #0
 80026ec:	4d0c      	ldr	r5, [pc, #48]	; (8002720 <__libc_init_array+0x38>)
 80026ee:	4c0d      	ldr	r4, [pc, #52]	; (8002724 <__libc_init_array+0x3c>)
 80026f0:	1b64      	subs	r4, r4, r5
 80026f2:	10a4      	asrs	r4, r4, #2
 80026f4:	42a6      	cmp	r6, r4
 80026f6:	d109      	bne.n	800270c <__libc_init_array+0x24>
 80026f8:	f000 fc7a 	bl	8002ff0 <_init>
 80026fc:	2600      	movs	r6, #0
 80026fe:	4d0a      	ldr	r5, [pc, #40]	; (8002728 <__libc_init_array+0x40>)
 8002700:	4c0a      	ldr	r4, [pc, #40]	; (800272c <__libc_init_array+0x44>)
 8002702:	1b64      	subs	r4, r4, r5
 8002704:	10a4      	asrs	r4, r4, #2
 8002706:	42a6      	cmp	r6, r4
 8002708:	d105      	bne.n	8002716 <__libc_init_array+0x2e>
 800270a:	bd70      	pop	{r4, r5, r6, pc}
 800270c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002710:	4798      	blx	r3
 8002712:	3601      	adds	r6, #1
 8002714:	e7ee      	b.n	80026f4 <__libc_init_array+0xc>
 8002716:	f855 3b04 	ldr.w	r3, [r5], #4
 800271a:	4798      	blx	r3
 800271c:	3601      	adds	r6, #1
 800271e:	e7f2      	b.n	8002706 <__libc_init_array+0x1e>
 8002720:	08003598 	.word	0x08003598
 8002724:	08003598 	.word	0x08003598
 8002728:	08003598 	.word	0x08003598
 800272c:	0800359c 	.word	0x0800359c

08002730 <__retarget_lock_acquire_recursive>:
 8002730:	4770      	bx	lr

08002732 <__retarget_lock_release_recursive>:
 8002732:	4770      	bx	lr

08002734 <_free_r>:
 8002734:	b538      	push	{r3, r4, r5, lr}
 8002736:	4605      	mov	r5, r0
 8002738:	2900      	cmp	r1, #0
 800273a:	d040      	beq.n	80027be <_free_r+0x8a>
 800273c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002740:	1f0c      	subs	r4, r1, #4
 8002742:	2b00      	cmp	r3, #0
 8002744:	bfb8      	it	lt
 8002746:	18e4      	addlt	r4, r4, r3
 8002748:	f000 f8dc 	bl	8002904 <__malloc_lock>
 800274c:	4a1c      	ldr	r2, [pc, #112]	; (80027c0 <_free_r+0x8c>)
 800274e:	6813      	ldr	r3, [r2, #0]
 8002750:	b933      	cbnz	r3, 8002760 <_free_r+0x2c>
 8002752:	6063      	str	r3, [r4, #4]
 8002754:	6014      	str	r4, [r2, #0]
 8002756:	4628      	mov	r0, r5
 8002758:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800275c:	f000 b8d8 	b.w	8002910 <__malloc_unlock>
 8002760:	42a3      	cmp	r3, r4
 8002762:	d908      	bls.n	8002776 <_free_r+0x42>
 8002764:	6820      	ldr	r0, [r4, #0]
 8002766:	1821      	adds	r1, r4, r0
 8002768:	428b      	cmp	r3, r1
 800276a:	bf01      	itttt	eq
 800276c:	6819      	ldreq	r1, [r3, #0]
 800276e:	685b      	ldreq	r3, [r3, #4]
 8002770:	1809      	addeq	r1, r1, r0
 8002772:	6021      	streq	r1, [r4, #0]
 8002774:	e7ed      	b.n	8002752 <_free_r+0x1e>
 8002776:	461a      	mov	r2, r3
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	b10b      	cbz	r3, 8002780 <_free_r+0x4c>
 800277c:	42a3      	cmp	r3, r4
 800277e:	d9fa      	bls.n	8002776 <_free_r+0x42>
 8002780:	6811      	ldr	r1, [r2, #0]
 8002782:	1850      	adds	r0, r2, r1
 8002784:	42a0      	cmp	r0, r4
 8002786:	d10b      	bne.n	80027a0 <_free_r+0x6c>
 8002788:	6820      	ldr	r0, [r4, #0]
 800278a:	4401      	add	r1, r0
 800278c:	1850      	adds	r0, r2, r1
 800278e:	4283      	cmp	r3, r0
 8002790:	6011      	str	r1, [r2, #0]
 8002792:	d1e0      	bne.n	8002756 <_free_r+0x22>
 8002794:	6818      	ldr	r0, [r3, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	4408      	add	r0, r1
 800279a:	6010      	str	r0, [r2, #0]
 800279c:	6053      	str	r3, [r2, #4]
 800279e:	e7da      	b.n	8002756 <_free_r+0x22>
 80027a0:	d902      	bls.n	80027a8 <_free_r+0x74>
 80027a2:	230c      	movs	r3, #12
 80027a4:	602b      	str	r3, [r5, #0]
 80027a6:	e7d6      	b.n	8002756 <_free_r+0x22>
 80027a8:	6820      	ldr	r0, [r4, #0]
 80027aa:	1821      	adds	r1, r4, r0
 80027ac:	428b      	cmp	r3, r1
 80027ae:	bf01      	itttt	eq
 80027b0:	6819      	ldreq	r1, [r3, #0]
 80027b2:	685b      	ldreq	r3, [r3, #4]
 80027b4:	1809      	addeq	r1, r1, r0
 80027b6:	6021      	streq	r1, [r4, #0]
 80027b8:	6063      	str	r3, [r4, #4]
 80027ba:	6054      	str	r4, [r2, #4]
 80027bc:	e7cb      	b.n	8002756 <_free_r+0x22>
 80027be:	bd38      	pop	{r3, r4, r5, pc}
 80027c0:	200006e8 	.word	0x200006e8

080027c4 <sbrk_aligned>:
 80027c4:	b570      	push	{r4, r5, r6, lr}
 80027c6:	4e0e      	ldr	r6, [pc, #56]	; (8002800 <sbrk_aligned+0x3c>)
 80027c8:	460c      	mov	r4, r1
 80027ca:	6831      	ldr	r1, [r6, #0]
 80027cc:	4605      	mov	r5, r0
 80027ce:	b911      	cbnz	r1, 80027d6 <sbrk_aligned+0x12>
 80027d0:	f000 fbaa 	bl	8002f28 <_sbrk_r>
 80027d4:	6030      	str	r0, [r6, #0]
 80027d6:	4621      	mov	r1, r4
 80027d8:	4628      	mov	r0, r5
 80027da:	f000 fba5 	bl	8002f28 <_sbrk_r>
 80027de:	1c43      	adds	r3, r0, #1
 80027e0:	d00a      	beq.n	80027f8 <sbrk_aligned+0x34>
 80027e2:	1cc4      	adds	r4, r0, #3
 80027e4:	f024 0403 	bic.w	r4, r4, #3
 80027e8:	42a0      	cmp	r0, r4
 80027ea:	d007      	beq.n	80027fc <sbrk_aligned+0x38>
 80027ec:	1a21      	subs	r1, r4, r0
 80027ee:	4628      	mov	r0, r5
 80027f0:	f000 fb9a 	bl	8002f28 <_sbrk_r>
 80027f4:	3001      	adds	r0, #1
 80027f6:	d101      	bne.n	80027fc <sbrk_aligned+0x38>
 80027f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80027fc:	4620      	mov	r0, r4
 80027fe:	bd70      	pop	{r4, r5, r6, pc}
 8002800:	200006ec 	.word	0x200006ec

08002804 <_malloc_r>:
 8002804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002808:	1ccd      	adds	r5, r1, #3
 800280a:	f025 0503 	bic.w	r5, r5, #3
 800280e:	3508      	adds	r5, #8
 8002810:	2d0c      	cmp	r5, #12
 8002812:	bf38      	it	cc
 8002814:	250c      	movcc	r5, #12
 8002816:	2d00      	cmp	r5, #0
 8002818:	4607      	mov	r7, r0
 800281a:	db01      	blt.n	8002820 <_malloc_r+0x1c>
 800281c:	42a9      	cmp	r1, r5
 800281e:	d905      	bls.n	800282c <_malloc_r+0x28>
 8002820:	230c      	movs	r3, #12
 8002822:	2600      	movs	r6, #0
 8002824:	603b      	str	r3, [r7, #0]
 8002826:	4630      	mov	r0, r6
 8002828:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800282c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002900 <_malloc_r+0xfc>
 8002830:	f000 f868 	bl	8002904 <__malloc_lock>
 8002834:	f8d8 3000 	ldr.w	r3, [r8]
 8002838:	461c      	mov	r4, r3
 800283a:	bb5c      	cbnz	r4, 8002894 <_malloc_r+0x90>
 800283c:	4629      	mov	r1, r5
 800283e:	4638      	mov	r0, r7
 8002840:	f7ff ffc0 	bl	80027c4 <sbrk_aligned>
 8002844:	1c43      	adds	r3, r0, #1
 8002846:	4604      	mov	r4, r0
 8002848:	d155      	bne.n	80028f6 <_malloc_r+0xf2>
 800284a:	f8d8 4000 	ldr.w	r4, [r8]
 800284e:	4626      	mov	r6, r4
 8002850:	2e00      	cmp	r6, #0
 8002852:	d145      	bne.n	80028e0 <_malloc_r+0xdc>
 8002854:	2c00      	cmp	r4, #0
 8002856:	d048      	beq.n	80028ea <_malloc_r+0xe6>
 8002858:	6823      	ldr	r3, [r4, #0]
 800285a:	4631      	mov	r1, r6
 800285c:	4638      	mov	r0, r7
 800285e:	eb04 0903 	add.w	r9, r4, r3
 8002862:	f000 fb61 	bl	8002f28 <_sbrk_r>
 8002866:	4581      	cmp	r9, r0
 8002868:	d13f      	bne.n	80028ea <_malloc_r+0xe6>
 800286a:	6821      	ldr	r1, [r4, #0]
 800286c:	4638      	mov	r0, r7
 800286e:	1a6d      	subs	r5, r5, r1
 8002870:	4629      	mov	r1, r5
 8002872:	f7ff ffa7 	bl	80027c4 <sbrk_aligned>
 8002876:	3001      	adds	r0, #1
 8002878:	d037      	beq.n	80028ea <_malloc_r+0xe6>
 800287a:	6823      	ldr	r3, [r4, #0]
 800287c:	442b      	add	r3, r5
 800287e:	6023      	str	r3, [r4, #0]
 8002880:	f8d8 3000 	ldr.w	r3, [r8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d038      	beq.n	80028fa <_malloc_r+0xf6>
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	42a2      	cmp	r2, r4
 800288c:	d12b      	bne.n	80028e6 <_malloc_r+0xe2>
 800288e:	2200      	movs	r2, #0
 8002890:	605a      	str	r2, [r3, #4]
 8002892:	e00f      	b.n	80028b4 <_malloc_r+0xb0>
 8002894:	6822      	ldr	r2, [r4, #0]
 8002896:	1b52      	subs	r2, r2, r5
 8002898:	d41f      	bmi.n	80028da <_malloc_r+0xd6>
 800289a:	2a0b      	cmp	r2, #11
 800289c:	d917      	bls.n	80028ce <_malloc_r+0xca>
 800289e:	1961      	adds	r1, r4, r5
 80028a0:	42a3      	cmp	r3, r4
 80028a2:	6025      	str	r5, [r4, #0]
 80028a4:	bf18      	it	ne
 80028a6:	6059      	strne	r1, [r3, #4]
 80028a8:	6863      	ldr	r3, [r4, #4]
 80028aa:	bf08      	it	eq
 80028ac:	f8c8 1000 	streq.w	r1, [r8]
 80028b0:	5162      	str	r2, [r4, r5]
 80028b2:	604b      	str	r3, [r1, #4]
 80028b4:	4638      	mov	r0, r7
 80028b6:	f104 060b 	add.w	r6, r4, #11
 80028ba:	f000 f829 	bl	8002910 <__malloc_unlock>
 80028be:	f026 0607 	bic.w	r6, r6, #7
 80028c2:	1d23      	adds	r3, r4, #4
 80028c4:	1af2      	subs	r2, r6, r3
 80028c6:	d0ae      	beq.n	8002826 <_malloc_r+0x22>
 80028c8:	1b9b      	subs	r3, r3, r6
 80028ca:	50a3      	str	r3, [r4, r2]
 80028cc:	e7ab      	b.n	8002826 <_malloc_r+0x22>
 80028ce:	42a3      	cmp	r3, r4
 80028d0:	6862      	ldr	r2, [r4, #4]
 80028d2:	d1dd      	bne.n	8002890 <_malloc_r+0x8c>
 80028d4:	f8c8 2000 	str.w	r2, [r8]
 80028d8:	e7ec      	b.n	80028b4 <_malloc_r+0xb0>
 80028da:	4623      	mov	r3, r4
 80028dc:	6864      	ldr	r4, [r4, #4]
 80028de:	e7ac      	b.n	800283a <_malloc_r+0x36>
 80028e0:	4634      	mov	r4, r6
 80028e2:	6876      	ldr	r6, [r6, #4]
 80028e4:	e7b4      	b.n	8002850 <_malloc_r+0x4c>
 80028e6:	4613      	mov	r3, r2
 80028e8:	e7cc      	b.n	8002884 <_malloc_r+0x80>
 80028ea:	230c      	movs	r3, #12
 80028ec:	4638      	mov	r0, r7
 80028ee:	603b      	str	r3, [r7, #0]
 80028f0:	f000 f80e 	bl	8002910 <__malloc_unlock>
 80028f4:	e797      	b.n	8002826 <_malloc_r+0x22>
 80028f6:	6025      	str	r5, [r4, #0]
 80028f8:	e7dc      	b.n	80028b4 <_malloc_r+0xb0>
 80028fa:	605b      	str	r3, [r3, #4]
 80028fc:	deff      	udf	#255	; 0xff
 80028fe:	bf00      	nop
 8002900:	200006e8 	.word	0x200006e8

08002904 <__malloc_lock>:
 8002904:	4801      	ldr	r0, [pc, #4]	; (800290c <__malloc_lock+0x8>)
 8002906:	f7ff bf13 	b.w	8002730 <__retarget_lock_acquire_recursive>
 800290a:	bf00      	nop
 800290c:	200006e4 	.word	0x200006e4

08002910 <__malloc_unlock>:
 8002910:	4801      	ldr	r0, [pc, #4]	; (8002918 <__malloc_unlock+0x8>)
 8002912:	f7ff bf0e 	b.w	8002732 <__retarget_lock_release_recursive>
 8002916:	bf00      	nop
 8002918:	200006e4 	.word	0x200006e4

0800291c <__ssputs_r>:
 800291c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002920:	461f      	mov	r7, r3
 8002922:	688e      	ldr	r6, [r1, #8]
 8002924:	4682      	mov	sl, r0
 8002926:	42be      	cmp	r6, r7
 8002928:	460c      	mov	r4, r1
 800292a:	4690      	mov	r8, r2
 800292c:	680b      	ldr	r3, [r1, #0]
 800292e:	d82c      	bhi.n	800298a <__ssputs_r+0x6e>
 8002930:	898a      	ldrh	r2, [r1, #12]
 8002932:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002936:	d026      	beq.n	8002986 <__ssputs_r+0x6a>
 8002938:	6965      	ldr	r5, [r4, #20]
 800293a:	6909      	ldr	r1, [r1, #16]
 800293c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002940:	eba3 0901 	sub.w	r9, r3, r1
 8002944:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002948:	1c7b      	adds	r3, r7, #1
 800294a:	444b      	add	r3, r9
 800294c:	106d      	asrs	r5, r5, #1
 800294e:	429d      	cmp	r5, r3
 8002950:	bf38      	it	cc
 8002952:	461d      	movcc	r5, r3
 8002954:	0553      	lsls	r3, r2, #21
 8002956:	d527      	bpl.n	80029a8 <__ssputs_r+0x8c>
 8002958:	4629      	mov	r1, r5
 800295a:	f7ff ff53 	bl	8002804 <_malloc_r>
 800295e:	4606      	mov	r6, r0
 8002960:	b360      	cbz	r0, 80029bc <__ssputs_r+0xa0>
 8002962:	464a      	mov	r2, r9
 8002964:	6921      	ldr	r1, [r4, #16]
 8002966:	f000 fafd 	bl	8002f64 <memcpy>
 800296a:	89a3      	ldrh	r3, [r4, #12]
 800296c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002974:	81a3      	strh	r3, [r4, #12]
 8002976:	6126      	str	r6, [r4, #16]
 8002978:	444e      	add	r6, r9
 800297a:	6026      	str	r6, [r4, #0]
 800297c:	463e      	mov	r6, r7
 800297e:	6165      	str	r5, [r4, #20]
 8002980:	eba5 0509 	sub.w	r5, r5, r9
 8002984:	60a5      	str	r5, [r4, #8]
 8002986:	42be      	cmp	r6, r7
 8002988:	d900      	bls.n	800298c <__ssputs_r+0x70>
 800298a:	463e      	mov	r6, r7
 800298c:	4632      	mov	r2, r6
 800298e:	4641      	mov	r1, r8
 8002990:	6820      	ldr	r0, [r4, #0]
 8002992:	f000 faaf 	bl	8002ef4 <memmove>
 8002996:	2000      	movs	r0, #0
 8002998:	68a3      	ldr	r3, [r4, #8]
 800299a:	1b9b      	subs	r3, r3, r6
 800299c:	60a3      	str	r3, [r4, #8]
 800299e:	6823      	ldr	r3, [r4, #0]
 80029a0:	4433      	add	r3, r6
 80029a2:	6023      	str	r3, [r4, #0]
 80029a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029a8:	462a      	mov	r2, r5
 80029aa:	f000 fae9 	bl	8002f80 <_realloc_r>
 80029ae:	4606      	mov	r6, r0
 80029b0:	2800      	cmp	r0, #0
 80029b2:	d1e0      	bne.n	8002976 <__ssputs_r+0x5a>
 80029b4:	4650      	mov	r0, sl
 80029b6:	6921      	ldr	r1, [r4, #16]
 80029b8:	f7ff febc 	bl	8002734 <_free_r>
 80029bc:	230c      	movs	r3, #12
 80029be:	f8ca 3000 	str.w	r3, [sl]
 80029c2:	89a3      	ldrh	r3, [r4, #12]
 80029c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029cc:	81a3      	strh	r3, [r4, #12]
 80029ce:	e7e9      	b.n	80029a4 <__ssputs_r+0x88>

080029d0 <_svfiprintf_r>:
 80029d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029d4:	4698      	mov	r8, r3
 80029d6:	898b      	ldrh	r3, [r1, #12]
 80029d8:	4607      	mov	r7, r0
 80029da:	061b      	lsls	r3, r3, #24
 80029dc:	460d      	mov	r5, r1
 80029de:	4614      	mov	r4, r2
 80029e0:	b09d      	sub	sp, #116	; 0x74
 80029e2:	d50e      	bpl.n	8002a02 <_svfiprintf_r+0x32>
 80029e4:	690b      	ldr	r3, [r1, #16]
 80029e6:	b963      	cbnz	r3, 8002a02 <_svfiprintf_r+0x32>
 80029e8:	2140      	movs	r1, #64	; 0x40
 80029ea:	f7ff ff0b 	bl	8002804 <_malloc_r>
 80029ee:	6028      	str	r0, [r5, #0]
 80029f0:	6128      	str	r0, [r5, #16]
 80029f2:	b920      	cbnz	r0, 80029fe <_svfiprintf_r+0x2e>
 80029f4:	230c      	movs	r3, #12
 80029f6:	603b      	str	r3, [r7, #0]
 80029f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029fc:	e0d0      	b.n	8002ba0 <_svfiprintf_r+0x1d0>
 80029fe:	2340      	movs	r3, #64	; 0x40
 8002a00:	616b      	str	r3, [r5, #20]
 8002a02:	2300      	movs	r3, #0
 8002a04:	9309      	str	r3, [sp, #36]	; 0x24
 8002a06:	2320      	movs	r3, #32
 8002a08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a0c:	2330      	movs	r3, #48	; 0x30
 8002a0e:	f04f 0901 	mov.w	r9, #1
 8002a12:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a16:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8002bb8 <_svfiprintf_r+0x1e8>
 8002a1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a1e:	4623      	mov	r3, r4
 8002a20:	469a      	mov	sl, r3
 8002a22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a26:	b10a      	cbz	r2, 8002a2c <_svfiprintf_r+0x5c>
 8002a28:	2a25      	cmp	r2, #37	; 0x25
 8002a2a:	d1f9      	bne.n	8002a20 <_svfiprintf_r+0x50>
 8002a2c:	ebba 0b04 	subs.w	fp, sl, r4
 8002a30:	d00b      	beq.n	8002a4a <_svfiprintf_r+0x7a>
 8002a32:	465b      	mov	r3, fp
 8002a34:	4622      	mov	r2, r4
 8002a36:	4629      	mov	r1, r5
 8002a38:	4638      	mov	r0, r7
 8002a3a:	f7ff ff6f 	bl	800291c <__ssputs_r>
 8002a3e:	3001      	adds	r0, #1
 8002a40:	f000 80a9 	beq.w	8002b96 <_svfiprintf_r+0x1c6>
 8002a44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002a46:	445a      	add	r2, fp
 8002a48:	9209      	str	r2, [sp, #36]	; 0x24
 8002a4a:	f89a 3000 	ldrb.w	r3, [sl]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f000 80a1 	beq.w	8002b96 <_svfiprintf_r+0x1c6>
 8002a54:	2300      	movs	r3, #0
 8002a56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a5e:	f10a 0a01 	add.w	sl, sl, #1
 8002a62:	9304      	str	r3, [sp, #16]
 8002a64:	9307      	str	r3, [sp, #28]
 8002a66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002a6a:	931a      	str	r3, [sp, #104]	; 0x68
 8002a6c:	4654      	mov	r4, sl
 8002a6e:	2205      	movs	r2, #5
 8002a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a74:	4850      	ldr	r0, [pc, #320]	; (8002bb8 <_svfiprintf_r+0x1e8>)
 8002a76:	f000 fa67 	bl	8002f48 <memchr>
 8002a7a:	9a04      	ldr	r2, [sp, #16]
 8002a7c:	b9d8      	cbnz	r0, 8002ab6 <_svfiprintf_r+0xe6>
 8002a7e:	06d0      	lsls	r0, r2, #27
 8002a80:	bf44      	itt	mi
 8002a82:	2320      	movmi	r3, #32
 8002a84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a88:	0711      	lsls	r1, r2, #28
 8002a8a:	bf44      	itt	mi
 8002a8c:	232b      	movmi	r3, #43	; 0x2b
 8002a8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a92:	f89a 3000 	ldrb.w	r3, [sl]
 8002a96:	2b2a      	cmp	r3, #42	; 0x2a
 8002a98:	d015      	beq.n	8002ac6 <_svfiprintf_r+0xf6>
 8002a9a:	4654      	mov	r4, sl
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	f04f 0c0a 	mov.w	ip, #10
 8002aa2:	9a07      	ldr	r2, [sp, #28]
 8002aa4:	4621      	mov	r1, r4
 8002aa6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002aaa:	3b30      	subs	r3, #48	; 0x30
 8002aac:	2b09      	cmp	r3, #9
 8002aae:	d94d      	bls.n	8002b4c <_svfiprintf_r+0x17c>
 8002ab0:	b1b0      	cbz	r0, 8002ae0 <_svfiprintf_r+0x110>
 8002ab2:	9207      	str	r2, [sp, #28]
 8002ab4:	e014      	b.n	8002ae0 <_svfiprintf_r+0x110>
 8002ab6:	eba0 0308 	sub.w	r3, r0, r8
 8002aba:	fa09 f303 	lsl.w	r3, r9, r3
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	46a2      	mov	sl, r4
 8002ac2:	9304      	str	r3, [sp, #16]
 8002ac4:	e7d2      	b.n	8002a6c <_svfiprintf_r+0x9c>
 8002ac6:	9b03      	ldr	r3, [sp, #12]
 8002ac8:	1d19      	adds	r1, r3, #4
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	9103      	str	r1, [sp, #12]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	bfbb      	ittet	lt
 8002ad2:	425b      	neglt	r3, r3
 8002ad4:	f042 0202 	orrlt.w	r2, r2, #2
 8002ad8:	9307      	strge	r3, [sp, #28]
 8002ada:	9307      	strlt	r3, [sp, #28]
 8002adc:	bfb8      	it	lt
 8002ade:	9204      	strlt	r2, [sp, #16]
 8002ae0:	7823      	ldrb	r3, [r4, #0]
 8002ae2:	2b2e      	cmp	r3, #46	; 0x2e
 8002ae4:	d10c      	bne.n	8002b00 <_svfiprintf_r+0x130>
 8002ae6:	7863      	ldrb	r3, [r4, #1]
 8002ae8:	2b2a      	cmp	r3, #42	; 0x2a
 8002aea:	d134      	bne.n	8002b56 <_svfiprintf_r+0x186>
 8002aec:	9b03      	ldr	r3, [sp, #12]
 8002aee:	3402      	adds	r4, #2
 8002af0:	1d1a      	adds	r2, r3, #4
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	9203      	str	r2, [sp, #12]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	bfb8      	it	lt
 8002afa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002afe:	9305      	str	r3, [sp, #20]
 8002b00:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8002bbc <_svfiprintf_r+0x1ec>
 8002b04:	2203      	movs	r2, #3
 8002b06:	4650      	mov	r0, sl
 8002b08:	7821      	ldrb	r1, [r4, #0]
 8002b0a:	f000 fa1d 	bl	8002f48 <memchr>
 8002b0e:	b138      	cbz	r0, 8002b20 <_svfiprintf_r+0x150>
 8002b10:	2240      	movs	r2, #64	; 0x40
 8002b12:	9b04      	ldr	r3, [sp, #16]
 8002b14:	eba0 000a 	sub.w	r0, r0, sl
 8002b18:	4082      	lsls	r2, r0
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	3401      	adds	r4, #1
 8002b1e:	9304      	str	r3, [sp, #16]
 8002b20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b24:	2206      	movs	r2, #6
 8002b26:	4826      	ldr	r0, [pc, #152]	; (8002bc0 <_svfiprintf_r+0x1f0>)
 8002b28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b2c:	f000 fa0c 	bl	8002f48 <memchr>
 8002b30:	2800      	cmp	r0, #0
 8002b32:	d038      	beq.n	8002ba6 <_svfiprintf_r+0x1d6>
 8002b34:	4b23      	ldr	r3, [pc, #140]	; (8002bc4 <_svfiprintf_r+0x1f4>)
 8002b36:	bb1b      	cbnz	r3, 8002b80 <_svfiprintf_r+0x1b0>
 8002b38:	9b03      	ldr	r3, [sp, #12]
 8002b3a:	3307      	adds	r3, #7
 8002b3c:	f023 0307 	bic.w	r3, r3, #7
 8002b40:	3308      	adds	r3, #8
 8002b42:	9303      	str	r3, [sp, #12]
 8002b44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b46:	4433      	add	r3, r6
 8002b48:	9309      	str	r3, [sp, #36]	; 0x24
 8002b4a:	e768      	b.n	8002a1e <_svfiprintf_r+0x4e>
 8002b4c:	460c      	mov	r4, r1
 8002b4e:	2001      	movs	r0, #1
 8002b50:	fb0c 3202 	mla	r2, ip, r2, r3
 8002b54:	e7a6      	b.n	8002aa4 <_svfiprintf_r+0xd4>
 8002b56:	2300      	movs	r3, #0
 8002b58:	f04f 0c0a 	mov.w	ip, #10
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	3401      	adds	r4, #1
 8002b60:	9305      	str	r3, [sp, #20]
 8002b62:	4620      	mov	r0, r4
 8002b64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b68:	3a30      	subs	r2, #48	; 0x30
 8002b6a:	2a09      	cmp	r2, #9
 8002b6c:	d903      	bls.n	8002b76 <_svfiprintf_r+0x1a6>
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0c6      	beq.n	8002b00 <_svfiprintf_r+0x130>
 8002b72:	9105      	str	r1, [sp, #20]
 8002b74:	e7c4      	b.n	8002b00 <_svfiprintf_r+0x130>
 8002b76:	4604      	mov	r4, r0
 8002b78:	2301      	movs	r3, #1
 8002b7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8002b7e:	e7f0      	b.n	8002b62 <_svfiprintf_r+0x192>
 8002b80:	ab03      	add	r3, sp, #12
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	462a      	mov	r2, r5
 8002b86:	4638      	mov	r0, r7
 8002b88:	4b0f      	ldr	r3, [pc, #60]	; (8002bc8 <_svfiprintf_r+0x1f8>)
 8002b8a:	a904      	add	r1, sp, #16
 8002b8c:	f3af 8000 	nop.w
 8002b90:	1c42      	adds	r2, r0, #1
 8002b92:	4606      	mov	r6, r0
 8002b94:	d1d6      	bne.n	8002b44 <_svfiprintf_r+0x174>
 8002b96:	89ab      	ldrh	r3, [r5, #12]
 8002b98:	065b      	lsls	r3, r3, #25
 8002b9a:	f53f af2d 	bmi.w	80029f8 <_svfiprintf_r+0x28>
 8002b9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ba0:	b01d      	add	sp, #116	; 0x74
 8002ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ba6:	ab03      	add	r3, sp, #12
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	462a      	mov	r2, r5
 8002bac:	4638      	mov	r0, r7
 8002bae:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <_svfiprintf_r+0x1f8>)
 8002bb0:	a904      	add	r1, sp, #16
 8002bb2:	f000 f87d 	bl	8002cb0 <_printf_i>
 8002bb6:	e7eb      	b.n	8002b90 <_svfiprintf_r+0x1c0>
 8002bb8:	08003562 	.word	0x08003562
 8002bbc:	08003568 	.word	0x08003568
 8002bc0:	0800356c 	.word	0x0800356c
 8002bc4:	00000000 	.word	0x00000000
 8002bc8:	0800291d 	.word	0x0800291d

08002bcc <_printf_common>:
 8002bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bd0:	4616      	mov	r6, r2
 8002bd2:	4699      	mov	r9, r3
 8002bd4:	688a      	ldr	r2, [r1, #8]
 8002bd6:	690b      	ldr	r3, [r1, #16]
 8002bd8:	4607      	mov	r7, r0
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	bfb8      	it	lt
 8002bde:	4613      	movlt	r3, r2
 8002be0:	6033      	str	r3, [r6, #0]
 8002be2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002be6:	460c      	mov	r4, r1
 8002be8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002bec:	b10a      	cbz	r2, 8002bf2 <_printf_common+0x26>
 8002bee:	3301      	adds	r3, #1
 8002bf0:	6033      	str	r3, [r6, #0]
 8002bf2:	6823      	ldr	r3, [r4, #0]
 8002bf4:	0699      	lsls	r1, r3, #26
 8002bf6:	bf42      	ittt	mi
 8002bf8:	6833      	ldrmi	r3, [r6, #0]
 8002bfa:	3302      	addmi	r3, #2
 8002bfc:	6033      	strmi	r3, [r6, #0]
 8002bfe:	6825      	ldr	r5, [r4, #0]
 8002c00:	f015 0506 	ands.w	r5, r5, #6
 8002c04:	d106      	bne.n	8002c14 <_printf_common+0x48>
 8002c06:	f104 0a19 	add.w	sl, r4, #25
 8002c0a:	68e3      	ldr	r3, [r4, #12]
 8002c0c:	6832      	ldr	r2, [r6, #0]
 8002c0e:	1a9b      	subs	r3, r3, r2
 8002c10:	42ab      	cmp	r3, r5
 8002c12:	dc2b      	bgt.n	8002c6c <_printf_common+0xa0>
 8002c14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002c18:	1e13      	subs	r3, r2, #0
 8002c1a:	6822      	ldr	r2, [r4, #0]
 8002c1c:	bf18      	it	ne
 8002c1e:	2301      	movne	r3, #1
 8002c20:	0692      	lsls	r2, r2, #26
 8002c22:	d430      	bmi.n	8002c86 <_printf_common+0xba>
 8002c24:	4649      	mov	r1, r9
 8002c26:	4638      	mov	r0, r7
 8002c28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c2c:	47c0      	blx	r8
 8002c2e:	3001      	adds	r0, #1
 8002c30:	d023      	beq.n	8002c7a <_printf_common+0xae>
 8002c32:	6823      	ldr	r3, [r4, #0]
 8002c34:	6922      	ldr	r2, [r4, #16]
 8002c36:	f003 0306 	and.w	r3, r3, #6
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	bf14      	ite	ne
 8002c3e:	2500      	movne	r5, #0
 8002c40:	6833      	ldreq	r3, [r6, #0]
 8002c42:	f04f 0600 	mov.w	r6, #0
 8002c46:	bf08      	it	eq
 8002c48:	68e5      	ldreq	r5, [r4, #12]
 8002c4a:	f104 041a 	add.w	r4, r4, #26
 8002c4e:	bf08      	it	eq
 8002c50:	1aed      	subeq	r5, r5, r3
 8002c52:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002c56:	bf08      	it	eq
 8002c58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	bfc4      	itt	gt
 8002c60:	1a9b      	subgt	r3, r3, r2
 8002c62:	18ed      	addgt	r5, r5, r3
 8002c64:	42b5      	cmp	r5, r6
 8002c66:	d11a      	bne.n	8002c9e <_printf_common+0xd2>
 8002c68:	2000      	movs	r0, #0
 8002c6a:	e008      	b.n	8002c7e <_printf_common+0xb2>
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	4652      	mov	r2, sl
 8002c70:	4649      	mov	r1, r9
 8002c72:	4638      	mov	r0, r7
 8002c74:	47c0      	blx	r8
 8002c76:	3001      	adds	r0, #1
 8002c78:	d103      	bne.n	8002c82 <_printf_common+0xb6>
 8002c7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c82:	3501      	adds	r5, #1
 8002c84:	e7c1      	b.n	8002c0a <_printf_common+0x3e>
 8002c86:	2030      	movs	r0, #48	; 0x30
 8002c88:	18e1      	adds	r1, r4, r3
 8002c8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002c8e:	1c5a      	adds	r2, r3, #1
 8002c90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002c94:	4422      	add	r2, r4
 8002c96:	3302      	adds	r3, #2
 8002c98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002c9c:	e7c2      	b.n	8002c24 <_printf_common+0x58>
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	4622      	mov	r2, r4
 8002ca2:	4649      	mov	r1, r9
 8002ca4:	4638      	mov	r0, r7
 8002ca6:	47c0      	blx	r8
 8002ca8:	3001      	adds	r0, #1
 8002caa:	d0e6      	beq.n	8002c7a <_printf_common+0xae>
 8002cac:	3601      	adds	r6, #1
 8002cae:	e7d9      	b.n	8002c64 <_printf_common+0x98>

08002cb0 <_printf_i>:
 8002cb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002cb4:	7e0f      	ldrb	r7, [r1, #24]
 8002cb6:	4691      	mov	r9, r2
 8002cb8:	2f78      	cmp	r7, #120	; 0x78
 8002cba:	4680      	mov	r8, r0
 8002cbc:	460c      	mov	r4, r1
 8002cbe:	469a      	mov	sl, r3
 8002cc0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002cc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002cc6:	d807      	bhi.n	8002cd8 <_printf_i+0x28>
 8002cc8:	2f62      	cmp	r7, #98	; 0x62
 8002cca:	d80a      	bhi.n	8002ce2 <_printf_i+0x32>
 8002ccc:	2f00      	cmp	r7, #0
 8002cce:	f000 80d5 	beq.w	8002e7c <_printf_i+0x1cc>
 8002cd2:	2f58      	cmp	r7, #88	; 0x58
 8002cd4:	f000 80c1 	beq.w	8002e5a <_printf_i+0x1aa>
 8002cd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002cdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002ce0:	e03a      	b.n	8002d58 <_printf_i+0xa8>
 8002ce2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002ce6:	2b15      	cmp	r3, #21
 8002ce8:	d8f6      	bhi.n	8002cd8 <_printf_i+0x28>
 8002cea:	a101      	add	r1, pc, #4	; (adr r1, 8002cf0 <_printf_i+0x40>)
 8002cec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002cf0:	08002d49 	.word	0x08002d49
 8002cf4:	08002d5d 	.word	0x08002d5d
 8002cf8:	08002cd9 	.word	0x08002cd9
 8002cfc:	08002cd9 	.word	0x08002cd9
 8002d00:	08002cd9 	.word	0x08002cd9
 8002d04:	08002cd9 	.word	0x08002cd9
 8002d08:	08002d5d 	.word	0x08002d5d
 8002d0c:	08002cd9 	.word	0x08002cd9
 8002d10:	08002cd9 	.word	0x08002cd9
 8002d14:	08002cd9 	.word	0x08002cd9
 8002d18:	08002cd9 	.word	0x08002cd9
 8002d1c:	08002e63 	.word	0x08002e63
 8002d20:	08002d89 	.word	0x08002d89
 8002d24:	08002e1d 	.word	0x08002e1d
 8002d28:	08002cd9 	.word	0x08002cd9
 8002d2c:	08002cd9 	.word	0x08002cd9
 8002d30:	08002e85 	.word	0x08002e85
 8002d34:	08002cd9 	.word	0x08002cd9
 8002d38:	08002d89 	.word	0x08002d89
 8002d3c:	08002cd9 	.word	0x08002cd9
 8002d40:	08002cd9 	.word	0x08002cd9
 8002d44:	08002e25 	.word	0x08002e25
 8002d48:	682b      	ldr	r3, [r5, #0]
 8002d4a:	1d1a      	adds	r2, r3, #4
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	602a      	str	r2, [r5, #0]
 8002d50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e0a0      	b.n	8002e9e <_printf_i+0x1ee>
 8002d5c:	6820      	ldr	r0, [r4, #0]
 8002d5e:	682b      	ldr	r3, [r5, #0]
 8002d60:	0607      	lsls	r7, r0, #24
 8002d62:	f103 0104 	add.w	r1, r3, #4
 8002d66:	6029      	str	r1, [r5, #0]
 8002d68:	d501      	bpl.n	8002d6e <_printf_i+0xbe>
 8002d6a:	681e      	ldr	r6, [r3, #0]
 8002d6c:	e003      	b.n	8002d76 <_printf_i+0xc6>
 8002d6e:	0646      	lsls	r6, r0, #25
 8002d70:	d5fb      	bpl.n	8002d6a <_printf_i+0xba>
 8002d72:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002d76:	2e00      	cmp	r6, #0
 8002d78:	da03      	bge.n	8002d82 <_printf_i+0xd2>
 8002d7a:	232d      	movs	r3, #45	; 0x2d
 8002d7c:	4276      	negs	r6, r6
 8002d7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d82:	230a      	movs	r3, #10
 8002d84:	4859      	ldr	r0, [pc, #356]	; (8002eec <_printf_i+0x23c>)
 8002d86:	e012      	b.n	8002dae <_printf_i+0xfe>
 8002d88:	682b      	ldr	r3, [r5, #0]
 8002d8a:	6820      	ldr	r0, [r4, #0]
 8002d8c:	1d19      	adds	r1, r3, #4
 8002d8e:	6029      	str	r1, [r5, #0]
 8002d90:	0605      	lsls	r5, r0, #24
 8002d92:	d501      	bpl.n	8002d98 <_printf_i+0xe8>
 8002d94:	681e      	ldr	r6, [r3, #0]
 8002d96:	e002      	b.n	8002d9e <_printf_i+0xee>
 8002d98:	0641      	lsls	r1, r0, #25
 8002d9a:	d5fb      	bpl.n	8002d94 <_printf_i+0xe4>
 8002d9c:	881e      	ldrh	r6, [r3, #0]
 8002d9e:	2f6f      	cmp	r7, #111	; 0x6f
 8002da0:	bf0c      	ite	eq
 8002da2:	2308      	moveq	r3, #8
 8002da4:	230a      	movne	r3, #10
 8002da6:	4851      	ldr	r0, [pc, #324]	; (8002eec <_printf_i+0x23c>)
 8002da8:	2100      	movs	r1, #0
 8002daa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002dae:	6865      	ldr	r5, [r4, #4]
 8002db0:	2d00      	cmp	r5, #0
 8002db2:	bfa8      	it	ge
 8002db4:	6821      	ldrge	r1, [r4, #0]
 8002db6:	60a5      	str	r5, [r4, #8]
 8002db8:	bfa4      	itt	ge
 8002dba:	f021 0104 	bicge.w	r1, r1, #4
 8002dbe:	6021      	strge	r1, [r4, #0]
 8002dc0:	b90e      	cbnz	r6, 8002dc6 <_printf_i+0x116>
 8002dc2:	2d00      	cmp	r5, #0
 8002dc4:	d04b      	beq.n	8002e5e <_printf_i+0x1ae>
 8002dc6:	4615      	mov	r5, r2
 8002dc8:	fbb6 f1f3 	udiv	r1, r6, r3
 8002dcc:	fb03 6711 	mls	r7, r3, r1, r6
 8002dd0:	5dc7      	ldrb	r7, [r0, r7]
 8002dd2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002dd6:	4637      	mov	r7, r6
 8002dd8:	42bb      	cmp	r3, r7
 8002dda:	460e      	mov	r6, r1
 8002ddc:	d9f4      	bls.n	8002dc8 <_printf_i+0x118>
 8002dde:	2b08      	cmp	r3, #8
 8002de0:	d10b      	bne.n	8002dfa <_printf_i+0x14a>
 8002de2:	6823      	ldr	r3, [r4, #0]
 8002de4:	07de      	lsls	r6, r3, #31
 8002de6:	d508      	bpl.n	8002dfa <_printf_i+0x14a>
 8002de8:	6923      	ldr	r3, [r4, #16]
 8002dea:	6861      	ldr	r1, [r4, #4]
 8002dec:	4299      	cmp	r1, r3
 8002dee:	bfde      	ittt	le
 8002df0:	2330      	movle	r3, #48	; 0x30
 8002df2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002df6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002dfa:	1b52      	subs	r2, r2, r5
 8002dfc:	6122      	str	r2, [r4, #16]
 8002dfe:	464b      	mov	r3, r9
 8002e00:	4621      	mov	r1, r4
 8002e02:	4640      	mov	r0, r8
 8002e04:	f8cd a000 	str.w	sl, [sp]
 8002e08:	aa03      	add	r2, sp, #12
 8002e0a:	f7ff fedf 	bl	8002bcc <_printf_common>
 8002e0e:	3001      	adds	r0, #1
 8002e10:	d14a      	bne.n	8002ea8 <_printf_i+0x1f8>
 8002e12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e16:	b004      	add	sp, #16
 8002e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e1c:	6823      	ldr	r3, [r4, #0]
 8002e1e:	f043 0320 	orr.w	r3, r3, #32
 8002e22:	6023      	str	r3, [r4, #0]
 8002e24:	2778      	movs	r7, #120	; 0x78
 8002e26:	4832      	ldr	r0, [pc, #200]	; (8002ef0 <_printf_i+0x240>)
 8002e28:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002e2c:	6823      	ldr	r3, [r4, #0]
 8002e2e:	6829      	ldr	r1, [r5, #0]
 8002e30:	061f      	lsls	r7, r3, #24
 8002e32:	f851 6b04 	ldr.w	r6, [r1], #4
 8002e36:	d402      	bmi.n	8002e3e <_printf_i+0x18e>
 8002e38:	065f      	lsls	r7, r3, #25
 8002e3a:	bf48      	it	mi
 8002e3c:	b2b6      	uxthmi	r6, r6
 8002e3e:	07df      	lsls	r7, r3, #31
 8002e40:	bf48      	it	mi
 8002e42:	f043 0320 	orrmi.w	r3, r3, #32
 8002e46:	6029      	str	r1, [r5, #0]
 8002e48:	bf48      	it	mi
 8002e4a:	6023      	strmi	r3, [r4, #0]
 8002e4c:	b91e      	cbnz	r6, 8002e56 <_printf_i+0x1a6>
 8002e4e:	6823      	ldr	r3, [r4, #0]
 8002e50:	f023 0320 	bic.w	r3, r3, #32
 8002e54:	6023      	str	r3, [r4, #0]
 8002e56:	2310      	movs	r3, #16
 8002e58:	e7a6      	b.n	8002da8 <_printf_i+0xf8>
 8002e5a:	4824      	ldr	r0, [pc, #144]	; (8002eec <_printf_i+0x23c>)
 8002e5c:	e7e4      	b.n	8002e28 <_printf_i+0x178>
 8002e5e:	4615      	mov	r5, r2
 8002e60:	e7bd      	b.n	8002dde <_printf_i+0x12e>
 8002e62:	682b      	ldr	r3, [r5, #0]
 8002e64:	6826      	ldr	r6, [r4, #0]
 8002e66:	1d18      	adds	r0, r3, #4
 8002e68:	6961      	ldr	r1, [r4, #20]
 8002e6a:	6028      	str	r0, [r5, #0]
 8002e6c:	0635      	lsls	r5, r6, #24
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	d501      	bpl.n	8002e76 <_printf_i+0x1c6>
 8002e72:	6019      	str	r1, [r3, #0]
 8002e74:	e002      	b.n	8002e7c <_printf_i+0x1cc>
 8002e76:	0670      	lsls	r0, r6, #25
 8002e78:	d5fb      	bpl.n	8002e72 <_printf_i+0x1c2>
 8002e7a:	8019      	strh	r1, [r3, #0]
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	4615      	mov	r5, r2
 8002e80:	6123      	str	r3, [r4, #16]
 8002e82:	e7bc      	b.n	8002dfe <_printf_i+0x14e>
 8002e84:	682b      	ldr	r3, [r5, #0]
 8002e86:	2100      	movs	r1, #0
 8002e88:	1d1a      	adds	r2, r3, #4
 8002e8a:	602a      	str	r2, [r5, #0]
 8002e8c:	681d      	ldr	r5, [r3, #0]
 8002e8e:	6862      	ldr	r2, [r4, #4]
 8002e90:	4628      	mov	r0, r5
 8002e92:	f000 f859 	bl	8002f48 <memchr>
 8002e96:	b108      	cbz	r0, 8002e9c <_printf_i+0x1ec>
 8002e98:	1b40      	subs	r0, r0, r5
 8002e9a:	6060      	str	r0, [r4, #4]
 8002e9c:	6863      	ldr	r3, [r4, #4]
 8002e9e:	6123      	str	r3, [r4, #16]
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ea6:	e7aa      	b.n	8002dfe <_printf_i+0x14e>
 8002ea8:	462a      	mov	r2, r5
 8002eaa:	4649      	mov	r1, r9
 8002eac:	4640      	mov	r0, r8
 8002eae:	6923      	ldr	r3, [r4, #16]
 8002eb0:	47d0      	blx	sl
 8002eb2:	3001      	adds	r0, #1
 8002eb4:	d0ad      	beq.n	8002e12 <_printf_i+0x162>
 8002eb6:	6823      	ldr	r3, [r4, #0]
 8002eb8:	079b      	lsls	r3, r3, #30
 8002eba:	d413      	bmi.n	8002ee4 <_printf_i+0x234>
 8002ebc:	68e0      	ldr	r0, [r4, #12]
 8002ebe:	9b03      	ldr	r3, [sp, #12]
 8002ec0:	4298      	cmp	r0, r3
 8002ec2:	bfb8      	it	lt
 8002ec4:	4618      	movlt	r0, r3
 8002ec6:	e7a6      	b.n	8002e16 <_printf_i+0x166>
 8002ec8:	2301      	movs	r3, #1
 8002eca:	4632      	mov	r2, r6
 8002ecc:	4649      	mov	r1, r9
 8002ece:	4640      	mov	r0, r8
 8002ed0:	47d0      	blx	sl
 8002ed2:	3001      	adds	r0, #1
 8002ed4:	d09d      	beq.n	8002e12 <_printf_i+0x162>
 8002ed6:	3501      	adds	r5, #1
 8002ed8:	68e3      	ldr	r3, [r4, #12]
 8002eda:	9903      	ldr	r1, [sp, #12]
 8002edc:	1a5b      	subs	r3, r3, r1
 8002ede:	42ab      	cmp	r3, r5
 8002ee0:	dcf2      	bgt.n	8002ec8 <_printf_i+0x218>
 8002ee2:	e7eb      	b.n	8002ebc <_printf_i+0x20c>
 8002ee4:	2500      	movs	r5, #0
 8002ee6:	f104 0619 	add.w	r6, r4, #25
 8002eea:	e7f5      	b.n	8002ed8 <_printf_i+0x228>
 8002eec:	08003573 	.word	0x08003573
 8002ef0:	08003584 	.word	0x08003584

08002ef4 <memmove>:
 8002ef4:	4288      	cmp	r0, r1
 8002ef6:	b510      	push	{r4, lr}
 8002ef8:	eb01 0402 	add.w	r4, r1, r2
 8002efc:	d902      	bls.n	8002f04 <memmove+0x10>
 8002efe:	4284      	cmp	r4, r0
 8002f00:	4623      	mov	r3, r4
 8002f02:	d807      	bhi.n	8002f14 <memmove+0x20>
 8002f04:	1e43      	subs	r3, r0, #1
 8002f06:	42a1      	cmp	r1, r4
 8002f08:	d008      	beq.n	8002f1c <memmove+0x28>
 8002f0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002f12:	e7f8      	b.n	8002f06 <memmove+0x12>
 8002f14:	4601      	mov	r1, r0
 8002f16:	4402      	add	r2, r0
 8002f18:	428a      	cmp	r2, r1
 8002f1a:	d100      	bne.n	8002f1e <memmove+0x2a>
 8002f1c:	bd10      	pop	{r4, pc}
 8002f1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002f22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002f26:	e7f7      	b.n	8002f18 <memmove+0x24>

08002f28 <_sbrk_r>:
 8002f28:	b538      	push	{r3, r4, r5, lr}
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	4d05      	ldr	r5, [pc, #20]	; (8002f44 <_sbrk_r+0x1c>)
 8002f2e:	4604      	mov	r4, r0
 8002f30:	4608      	mov	r0, r1
 8002f32:	602b      	str	r3, [r5, #0]
 8002f34:	f7fd ff86 	bl	8000e44 <_sbrk>
 8002f38:	1c43      	adds	r3, r0, #1
 8002f3a:	d102      	bne.n	8002f42 <_sbrk_r+0x1a>
 8002f3c:	682b      	ldr	r3, [r5, #0]
 8002f3e:	b103      	cbz	r3, 8002f42 <_sbrk_r+0x1a>
 8002f40:	6023      	str	r3, [r4, #0]
 8002f42:	bd38      	pop	{r3, r4, r5, pc}
 8002f44:	200006e0 	.word	0x200006e0

08002f48 <memchr>:
 8002f48:	4603      	mov	r3, r0
 8002f4a:	b510      	push	{r4, lr}
 8002f4c:	b2c9      	uxtb	r1, r1
 8002f4e:	4402      	add	r2, r0
 8002f50:	4293      	cmp	r3, r2
 8002f52:	4618      	mov	r0, r3
 8002f54:	d101      	bne.n	8002f5a <memchr+0x12>
 8002f56:	2000      	movs	r0, #0
 8002f58:	e003      	b.n	8002f62 <memchr+0x1a>
 8002f5a:	7804      	ldrb	r4, [r0, #0]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	428c      	cmp	r4, r1
 8002f60:	d1f6      	bne.n	8002f50 <memchr+0x8>
 8002f62:	bd10      	pop	{r4, pc}

08002f64 <memcpy>:
 8002f64:	440a      	add	r2, r1
 8002f66:	4291      	cmp	r1, r2
 8002f68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002f6c:	d100      	bne.n	8002f70 <memcpy+0xc>
 8002f6e:	4770      	bx	lr
 8002f70:	b510      	push	{r4, lr}
 8002f72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f76:	4291      	cmp	r1, r2
 8002f78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f7c:	d1f9      	bne.n	8002f72 <memcpy+0xe>
 8002f7e:	bd10      	pop	{r4, pc}

08002f80 <_realloc_r>:
 8002f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f84:	4680      	mov	r8, r0
 8002f86:	4614      	mov	r4, r2
 8002f88:	460e      	mov	r6, r1
 8002f8a:	b921      	cbnz	r1, 8002f96 <_realloc_r+0x16>
 8002f8c:	4611      	mov	r1, r2
 8002f8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f92:	f7ff bc37 	b.w	8002804 <_malloc_r>
 8002f96:	b92a      	cbnz	r2, 8002fa4 <_realloc_r+0x24>
 8002f98:	f7ff fbcc 	bl	8002734 <_free_r>
 8002f9c:	4625      	mov	r5, r4
 8002f9e:	4628      	mov	r0, r5
 8002fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fa4:	f000 f81b 	bl	8002fde <_malloc_usable_size_r>
 8002fa8:	4284      	cmp	r4, r0
 8002faa:	4607      	mov	r7, r0
 8002fac:	d802      	bhi.n	8002fb4 <_realloc_r+0x34>
 8002fae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002fb2:	d812      	bhi.n	8002fda <_realloc_r+0x5a>
 8002fb4:	4621      	mov	r1, r4
 8002fb6:	4640      	mov	r0, r8
 8002fb8:	f7ff fc24 	bl	8002804 <_malloc_r>
 8002fbc:	4605      	mov	r5, r0
 8002fbe:	2800      	cmp	r0, #0
 8002fc0:	d0ed      	beq.n	8002f9e <_realloc_r+0x1e>
 8002fc2:	42bc      	cmp	r4, r7
 8002fc4:	4622      	mov	r2, r4
 8002fc6:	4631      	mov	r1, r6
 8002fc8:	bf28      	it	cs
 8002fca:	463a      	movcs	r2, r7
 8002fcc:	f7ff ffca 	bl	8002f64 <memcpy>
 8002fd0:	4631      	mov	r1, r6
 8002fd2:	4640      	mov	r0, r8
 8002fd4:	f7ff fbae 	bl	8002734 <_free_r>
 8002fd8:	e7e1      	b.n	8002f9e <_realloc_r+0x1e>
 8002fda:	4635      	mov	r5, r6
 8002fdc:	e7df      	b.n	8002f9e <_realloc_r+0x1e>

08002fde <_malloc_usable_size_r>:
 8002fde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fe2:	1f18      	subs	r0, r3, #4
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	bfbc      	itt	lt
 8002fe8:	580b      	ldrlt	r3, [r1, r0]
 8002fea:	18c0      	addlt	r0, r0, r3
 8002fec:	4770      	bx	lr
	...

08002ff0 <_init>:
 8002ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ff2:	bf00      	nop
 8002ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ff6:	bc08      	pop	{r3}
 8002ff8:	469e      	mov	lr, r3
 8002ffa:	4770      	bx	lr

08002ffc <_fini>:
 8002ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ffe:	bf00      	nop
 8003000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003002:	bc08      	pop	{r3}
 8003004:	469e      	mov	lr, r3
 8003006:	4770      	bx	lr
