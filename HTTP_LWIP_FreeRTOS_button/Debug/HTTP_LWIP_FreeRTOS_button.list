
HTTP_LWIP_FreeRTOS_button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000162e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003c8c  08016478  08016478  00026478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a104  0801a104  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  0801a104  0801a104  0002a104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a10c  0801a10c  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a10c  0801a10c  0002a10c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a110  0801a110  0002a110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0801a114  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030080  2**0
                  CONTENTS
 10 .bss          0000b788  20000080  20000080  00030080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000b808  2000b808  00030080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00045b33  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000808d  00000000  00000000  00075be3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002138  00000000  00000000  0007dc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001fd8  00000000  00000000  0007fda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00011c89  00000000  00000000  00081d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00033624  00000000  00000000  00093a09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef848  00000000  00000000  000c702d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001b6875  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000912c  00000000  00000000  001b68c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08016460 	.word	0x08016460

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08016460 	.word	0x08016460

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <httpserver_send_html>:

 static bool led_on = false;

 /*Отправить данные веб-страницы*/
 void httpserver_send_html(struct netconn *conn, bool led_status)
 {
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af02      	add	r7, sp, #8
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	460b      	mov	r3, r1
 8000572:	70fb      	strb	r3, [r7, #3]
     //Отправить данные
     netconn_write(conn, http_html_hdr,
 8000574:	2300      	movs	r3, #0
 8000576:	9300      	str	r3, [sp, #0]
 8000578:	2300      	movs	r3, #0
 800057a:	222c      	movs	r2, #44	; 0x2c
 800057c:	4913      	ldr	r1, [pc, #76]	; (80005cc <httpserver_send_html+0x64>)
 800057e:	6878      	ldr	r0, [r7, #4]
 8000580:	f007 ffca 	bl	8008518 <netconn_write_partly>
                 sizeof(http_html_hdr)-1, NETCONN_NOCOPY);

     /* В зависимости от состояния LED, отправьте разные LED данные */
     if (led_status == true)
 8000584:	78fb      	ldrb	r3, [r7, #3]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d009      	beq.n	800059e <httpserver_send_html+0x36>
         netconn_write(conn, Led1On_Data,
 800058a:	2300      	movs	r3, #0
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2300      	movs	r3, #0
 8000590:	f44f 728b 	mov.w	r2, #278	; 0x116
 8000594:	490e      	ldr	r1, [pc, #56]	; (80005d0 <httpserver_send_html+0x68>)
 8000596:	6878      	ldr	r0, [r7, #4]
 8000598:	f007 ffbe 	bl	8008518 <netconn_write_partly>
 800059c:	e008      	b.n	80005b0 <httpserver_send_html+0x48>
                     sizeof(Led1On_Data)-1, NETCONN_NOCOPY);
     else
         netconn_write(conn, Led1Off_Data,
 800059e:	2300      	movs	r3, #0
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2300      	movs	r3, #0
 80005a4:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80005a8:	490a      	ldr	r1, [pc, #40]	; (80005d4 <httpserver_send_html+0x6c>)
 80005aa:	6878      	ldr	r0, [r7, #4]
 80005ac:	f007 ffb4 	bl	8008518 <netconn_write_partly>
                     sizeof(Led1Off_Data)-1, NETCONN_NOCOPY);

     netconn_write(conn, http_index_html,
 80005b0:	2300      	movs	r3, #0
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2300      	movs	r3, #0
 80005b6:	f240 12af 	movw	r2, #431	; 0x1af
 80005ba:	4907      	ldr	r1, [pc, #28]	; (80005d8 <httpserver_send_html+0x70>)
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	f007 ffab 	bl	8008518 <netconn_write_partly>
                 sizeof(http_index_html)-1, NETCONN_NOCOPY);

 }
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	08019a4c 	.word	0x08019a4c
 80005d0:	08019a7c 	.word	0x08019a7c
 80005d4:	08019b94 	.word	0x08019b94
 80005d8:	08019ca4 	.word	0x08019ca4

080005dc <httpserver_serve>:

 static void httpserver_serve(struct netconn *conn)
 {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
     char *buf;
     u16_t buflen;
     err_t err;

     /* В ожидании команд от клиента */
     err = netconn_recv(conn, &inbuf);
 80005e4:	f107 0310 	add.w	r3, r7, #16
 80005e8:	4619      	mov	r1, r3
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	f007 ff1a 	bl	8008424 <netconn_recv>
 80005f0:	4603      	mov	r3, r0
 80005f2:	75fb      	strb	r3, [r7, #23]

     if (err == ERR_OK)
 80005f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d173      	bne.n	80006e4 <httpserver_serve+0x108>
     {
         netbuf_data(inbuf, (void**)&buf, &buflen);
 80005fc:	693b      	ldr	r3, [r7, #16]
 80005fe:	f107 020a 	add.w	r2, r7, #10
 8000602:	f107 010c 	add.w	r1, r7, #12
 8000606:	4618      	mov	r0, r3
 8000608:	f009 fca2 	bl	8009f50 <netbuf_data>
         /* “GET”命令 */
         if (buflen>=5 &&
 800060c:	897b      	ldrh	r3, [r7, #10]
 800060e:	2b04      	cmp	r3, #4
 8000610:	d91e      	bls.n	8000650 <httpserver_serve+0x74>
                 buf[0]=='G' &&
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	781b      	ldrb	r3, [r3, #0]
         if (buflen>=5 &&
 8000616:	2b47      	cmp	r3, #71	; 0x47
 8000618:	d11a      	bne.n	8000650 <httpserver_serve+0x74>
                 buf[1]=='E' &&
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	3301      	adds	r3, #1
 800061e:	781b      	ldrb	r3, [r3, #0]
                 buf[0]=='G' &&
 8000620:	2b45      	cmp	r3, #69	; 0x45
 8000622:	d115      	bne.n	8000650 <httpserver_serve+0x74>
                 buf[2]=='T' &&
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	3302      	adds	r3, #2
 8000628:	781b      	ldrb	r3, [r3, #0]
                 buf[1]=='E' &&
 800062a:	2b54      	cmp	r3, #84	; 0x54
 800062c:	d110      	bne.n	8000650 <httpserver_serve+0x74>
                 buf[3]==' ' &&
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	3303      	adds	r3, #3
 8000632:	781b      	ldrb	r3, [r3, #0]
                 buf[2]=='T' &&
 8000634:	2b20      	cmp	r3, #32
 8000636:	d10b      	bne.n	8000650 <httpserver_serve+0x74>
                 buf[4]=='/' )
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	3304      	adds	r3, #4
 800063c:	781b      	ldrb	r3, [r3, #0]
                 buf[3]==' ' &&
 800063e:	2b2f      	cmp	r3, #47	; 0x2f
 8000640:	d106      	bne.n	8000650 <httpserver_serve+0x74>
         {

             /* Отправить данные */
             httpserver_send_html(conn, led_on);
 8000642:	4b2c      	ldr	r3, [pc, #176]	; (80006f4 <httpserver_serve+0x118>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	4619      	mov	r1, r3
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f7ff ff8d 	bl	8000568 <httpserver_send_html>
 800064e:	e045      	b.n	80006dc <httpserver_serve+0x100>
         }
         //“POST” запрос
         else if (buflen>=8&&buf[0]=='P'&&buf[1]=='O'
 8000650:	897b      	ldrh	r3, [r7, #10]
 8000652:	2b07      	cmp	r3, #7
 8000654:	d942      	bls.n	80006dc <httpserver_serve+0x100>
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b50      	cmp	r3, #80	; 0x50
 800065c:	d13e      	bne.n	80006dc <httpserver_serve+0x100>
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	3301      	adds	r3, #1
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b4f      	cmp	r3, #79	; 0x4f
 8000666:	d139      	bne.n	80006dc <httpserver_serve+0x100>
                 &&buf[2]=='S'&&buf[3]=='T')
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	3302      	adds	r3, #2
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b53      	cmp	r3, #83	; 0x53
 8000670:	d134      	bne.n	80006dc <httpserver_serve+0x100>
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	3303      	adds	r3, #3
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b54      	cmp	r3, #84	; 0x54
 800067a:	d12f      	bne.n	80006dc <httpserver_serve+0x100>
         {
             if (buf[6]=='o'&&buf[7]=='n')
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	3306      	adds	r3, #6
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b6f      	cmp	r3, #111	; 0x6f
 8000684:	d10d      	bne.n	80006a2 <httpserver_serve+0xc6>
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	3307      	adds	r3, #7
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b6e      	cmp	r3, #110	; 0x6e
 800068e:	d108      	bne.n	80006a2 <httpserver_serve+0xc6>
             {
                 //Запрос на включение LED
                 led_on = true;
 8000690:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <httpserver_serve+0x118>)
 8000692:	2201      	movs	r2, #1
 8000694:	701a      	strb	r2, [r3, #0]
                 //LED1_ON;
                 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);// ON
 8000696:	2201      	movs	r2, #1
 8000698:	2101      	movs	r1, #1
 800069a:	4817      	ldr	r0, [pc, #92]	; (80006f8 <httpserver_serve+0x11c>)
 800069c:	f001 ffe8 	bl	8002670 <HAL_GPIO_WritePin>
 80006a0:	e016      	b.n	80006d0 <httpserver_serve+0xf4>
             }
             else if (buf[6]=='o'&&buf[7]=='f'&&buf[8]=='f')
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	3306      	adds	r3, #6
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b6f      	cmp	r3, #111	; 0x6f
 80006aa:	d111      	bne.n	80006d0 <httpserver_serve+0xf4>
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	3307      	adds	r3, #7
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b66      	cmp	r3, #102	; 0x66
 80006b4:	d10c      	bne.n	80006d0 <httpserver_serve+0xf4>
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	3308      	adds	r3, #8
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b66      	cmp	r3, #102	; 0x66
 80006be:	d107      	bne.n	80006d0 <httpserver_serve+0xf4>
             {
                 //Запрос на отключени LED
                 led_on = false;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <httpserver_serve+0x118>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]
                 //LED1_OFF;
                 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);// OFF
 80006c6:	2200      	movs	r2, #0
 80006c8:	2101      	movs	r1, #1
 80006ca:	480b      	ldr	r0, [pc, #44]	; (80006f8 <httpserver_serve+0x11c>)
 80006cc:	f001 ffd0 	bl	8002670 <HAL_GPIO_WritePin>
             }
             //Отправить данные
             httpserver_send_html(conn, led_on);
 80006d0:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <httpserver_serve+0x118>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	4619      	mov	r1, r3
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f7ff ff46 	bl	8000568 <httpserver_send_html>
         }

         netbuf_delete(inbuf);
 80006dc:	693b      	ldr	r3, [r7, #16]
 80006de:	4618      	mov	r0, r3
 80006e0:	f009 fc16 	bl	8009f10 <netbuf_delete>
     }
     /* закрытие */
     netconn_close(conn);
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f008 f819 	bl	800871c <netconn_close>

 }
 80006ea:	bf00      	nop
 80006ec:	3718      	adds	r7, #24
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	2000009c 	.word	0x2000009c
 80006f8:	40020c00 	.word	0x40020c00

080006fc <httpserver_thread>:

 /** The main function, never returns! */
 static void
 httpserver_thread(void *arg)
 {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
     struct netconn *conn, *newconn;
     err_t err;
     LWIP_UNUSED_ARG(arg);

     /* Создать структуру соединения */
     conn = netconn_new(NETCONN_TCP);
 8000704:	2200      	movs	r2, #0
 8000706:	2100      	movs	r1, #0
 8000708:	2010      	movs	r0, #16
 800070a:	f007 fb65 	bl	8007dd8 <netconn_new_with_proto_and_callback>
 800070e:	6178      	str	r0, [r7, #20]
     LWIP_ERROR("http_server: invalid conn", (conn != NULL), return;);
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d106      	bne.n	8000724 <httpserver_thread+0x28>
 8000716:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <httpserver_thread+0x8c>)
 8000718:	228a      	movs	r2, #138	; 0x8a
 800071a:	491c      	ldr	r1, [pc, #112]	; (800078c <httpserver_thread+0x90>)
 800071c:	481c      	ldr	r0, [pc, #112]	; (8000790 <httpserver_thread+0x94>)
 800071e:	f014 ff6d 	bl	80155fc <iprintf>
 8000722:	e02e      	b.n	8000782 <httpserver_thread+0x86>

     led_on = true;
 8000724:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <httpserver_thread+0x98>)
 8000726:	2201      	movs	r2, #1
 8000728:	701a      	strb	r2, [r3, #0]
     //LED1_ON;
     HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);// ON
 800072a:	2201      	movs	r2, #1
 800072c:	2101      	movs	r1, #1
 800072e:	481a      	ldr	r0, [pc, #104]	; (8000798 <httpserver_thread+0x9c>)
 8000730:	f001 ff9e 	bl	8002670 <HAL_GPIO_WritePin>

     /* Связка IP-адрес и номер порта*/
     netconn_bind(conn, NULL, 80);
 8000734:	2250      	movs	r2, #80	; 0x50
 8000736:	2100      	movs	r1, #0
 8000738:	6978      	ldr	r0, [r7, #20]
 800073a:	f007 fc07 	bl	8007f4c <netconn_bind>

     /* мониторинг */
     netconn_listen(conn);
 800073e:	21ff      	movs	r1, #255	; 0xff
 8000740:	6978      	ldr	r0, [r7, #20]
 8000742:	f007 fc3b 	bl	8007fbc <netconn_listen_with_backlog>

     do
     {
         err = netconn_accept(conn, &newconn);
 8000746:	f107 030c 	add.w	r3, r7, #12
 800074a:	4619      	mov	r1, r3
 800074c:	6978      	ldr	r0, [r7, #20]
 800074e:	f007 fc61 	bl	8008014 <netconn_accept>
 8000752:	4603      	mov	r3, r0
 8000754:	74fb      	strb	r3, [r7, #19]
         if (err == ERR_OK)
 8000756:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d107      	bne.n	800076e <httpserver_thread+0x72>
         {
             httpserver_serve(newconn);
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff ff3b 	bl	80005dc <httpserver_serve>
             netconn_delete(newconn);
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	4618      	mov	r0, r3
 800076a:	f007 fbd3 	bl	8007f14 <netconn_delete>
         }
     }
     while (err == ERR_OK);
 800076e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d0e7      	beq.n	8000746 <httpserver_thread+0x4a>

     netconn_close(conn);
 8000776:	6978      	ldr	r0, [r7, #20]
 8000778:	f007 ffd0 	bl	800871c <netconn_close>

     netconn_delete(conn);
 800077c:	6978      	ldr	r0, [r7, #20]
 800077e:	f007 fbc9 	bl	8007f14 <netconn_delete>
 }
 8000782:	3718      	adds	r7, #24
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	08016478 	.word	0x08016478
 800078c:	0801649c 	.word	0x0801649c
 8000790:	080164b8 	.word	0x080164b8
 8000794:	2000009c 	.word	0x2000009c
 8000798:	40020c00 	.word	0x40020c00

0800079c <httpserver_init>:

 /** Initialize the HTTP server (start its thread) */
 void
 httpserver_init()
 {
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af02      	add	r7, sp, #8
 sys_thread_new("http_server_netconn",httpserver_thread, NULL, 1024, 4);
 80007a2:	2304      	movs	r3, #4
 80007a4:	9300      	str	r3, [sp, #0]
 80007a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007aa:	2200      	movs	r2, #0
 80007ac:	4903      	ldr	r1, [pc, #12]	; (80007bc <httpserver_init+0x20>)
 80007ae:	4804      	ldr	r0, [pc, #16]	; (80007c0 <httpserver_init+0x24>)
 80007b0:	f014 fd4a 	bl	8015248 <sys_thread_new>
 }
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	080006fd 	.word	0x080006fd
 80007c0:	080164e0 	.word	0x080164e0

080007c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c8:	f000 fac8 	bl	8000d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007cc:	f000 f816 	bl	80007fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d0:	f000 f87e 	bl	80008d0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007d4:	f003 fc58 	bl	8004088 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80007d8:	4a05      	ldr	r2, [pc, #20]	; (80007f0 <main+0x2c>)
 80007da:	2100      	movs	r1, #0
 80007dc:	4805      	ldr	r0, [pc, #20]	; (80007f4 <main+0x30>)
 80007de:	f003 fcb2 	bl	8004146 <osThreadNew>
 80007e2:	4603      	mov	r3, r0
 80007e4:	4a04      	ldr	r2, [pc, #16]	; (80007f8 <main+0x34>)
 80007e6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007e8:	f003 fc72 	bl	80040d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <main+0x28>
 80007ee:	bf00      	nop
 80007f0:	08019e54 	.word	0x08019e54
 80007f4:	080009a9 	.word	0x080009a9
 80007f8:	20004c14 	.word	0x20004c14

080007fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b094      	sub	sp, #80	; 0x50
 8000800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000802:	f107 0320 	add.w	r3, r7, #32
 8000806:	2230      	movs	r2, #48	; 0x30
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f014 fe93 	bl	8015536 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000820:	2300      	movs	r3, #0
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	4b28      	ldr	r3, [pc, #160]	; (80008c8 <SystemClock_Config+0xcc>)
 8000826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000828:	4a27      	ldr	r2, [pc, #156]	; (80008c8 <SystemClock_Config+0xcc>)
 800082a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800082e:	6413      	str	r3, [r2, #64]	; 0x40
 8000830:	4b25      	ldr	r3, [pc, #148]	; (80008c8 <SystemClock_Config+0xcc>)
 8000832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800083c:	2300      	movs	r3, #0
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	4b22      	ldr	r3, [pc, #136]	; (80008cc <SystemClock_Config+0xd0>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a21      	ldr	r2, [pc, #132]	; (80008cc <SystemClock_Config+0xd0>)
 8000846:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800084a:	6013      	str	r3, [r2, #0]
 800084c:	4b1f      	ldr	r3, [pc, #124]	; (80008cc <SystemClock_Config+0xd0>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000858:	2301      	movs	r3, #1
 800085a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800085c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000862:	2302      	movs	r3, #2
 8000864:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000866:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800086a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800086c:	2304      	movs	r3, #4
 800086e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000870:	23a8      	movs	r3, #168	; 0xa8
 8000872:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000874:	2302      	movs	r3, #2
 8000876:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000878:	2304      	movs	r3, #4
 800087a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800087c:	f107 0320 	add.w	r3, r7, #32
 8000880:	4618      	mov	r0, r3
 8000882:	f001 ff0f 	bl	80026a4 <HAL_RCC_OscConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800088c:	f000 f8aa 	bl	80009e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000890:	230f      	movs	r3, #15
 8000892:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000894:	2302      	movs	r3, #2
 8000896:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800089c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	2105      	movs	r1, #5
 80008ae:	4618      	mov	r0, r3
 80008b0:	f002 f970 	bl	8002b94 <HAL_RCC_ClockConfig>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008ba:	f000 f893 	bl	80009e4 <Error_Handler>
  }
}
 80008be:	bf00      	nop
 80008c0:	3750      	adds	r7, #80	; 0x50
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40007000 	.word	0x40007000

080008d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	; 0x28
 80008d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	4b2d      	ldr	r3, [pc, #180]	; (80009a0 <MX_GPIO_Init+0xd0>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a2c      	ldr	r2, [pc, #176]	; (80009a0 <MX_GPIO_Init+0xd0>)
 80008f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b2a      	ldr	r3, [pc, #168]	; (80009a0 <MX_GPIO_Init+0xd0>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	4b26      	ldr	r3, [pc, #152]	; (80009a0 <MX_GPIO_Init+0xd0>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a25      	ldr	r2, [pc, #148]	; (80009a0 <MX_GPIO_Init+0xd0>)
 800090c:	f043 0304 	orr.w	r3, r3, #4
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b23      	ldr	r3, [pc, #140]	; (80009a0 <MX_GPIO_Init+0xd0>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0304 	and.w	r3, r3, #4
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	4b1f      	ldr	r3, [pc, #124]	; (80009a0 <MX_GPIO_Init+0xd0>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a1e      	ldr	r2, [pc, #120]	; (80009a0 <MX_GPIO_Init+0xd0>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <MX_GPIO_Init+0xd0>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <MX_GPIO_Init+0xd0>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a17      	ldr	r2, [pc, #92]	; (80009a0 <MX_GPIO_Init+0xd0>)
 8000944:	f043 0302 	orr.w	r3, r3, #2
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <MX_GPIO_Init+0xd0>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0302 	and.w	r3, r3, #2
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	603b      	str	r3, [r7, #0]
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MX_GPIO_Init+0xd0>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a10      	ldr	r2, [pc, #64]	; (80009a0 <MX_GPIO_Init+0xd0>)
 8000960:	f043 0308 	orr.w	r3, r3, #8
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_GPIO_Init+0xd0>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0308 	and.w	r3, r3, #8
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	2101      	movs	r1, #1
 8000976:	480b      	ldr	r0, [pc, #44]	; (80009a4 <MX_GPIO_Init+0xd4>)
 8000978:	f001 fe7a 	bl	8002670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800097c:	2301      	movs	r3, #1
 800097e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000980:	2301      	movs	r3, #1
 8000982:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2300      	movs	r3, #0
 800098a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	4619      	mov	r1, r3
 8000992:	4804      	ldr	r0, [pc, #16]	; (80009a4 <MX_GPIO_Init+0xd4>)
 8000994:	f001 fcd0 	bl	8002338 <HAL_GPIO_Init>

}
 8000998:	bf00      	nop
 800099a:	3728      	adds	r7, #40	; 0x28
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40020c00 	.word	0x40020c00

080009a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80009b0:	f002 fdb8 	bl	8003524 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  httpserver_init();
 80009b4:	f7ff fef2 	bl	800079c <httpserver_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009b8:	2001      	movs	r0, #1
 80009ba:	f003 fc56 	bl	800426a <osDelay>
 80009be:	e7fb      	b.n	80009b8 <StartDefaultTask+0x10>

080009c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a04      	ldr	r2, [pc, #16]	; (80009e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d101      	bne.n	80009d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009d2:	f000 f9e5 	bl	8000da0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40002000 	.word	0x40002000

080009e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e8:	b672      	cpsid	i
}
 80009ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ec:	e7fe      	b.n	80009ec <Error_Handler+0x8>
	...

080009f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <HAL_MspInit+0x54>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	4a11      	ldr	r2, [pc, #68]	; (8000a44 <HAL_MspInit+0x54>)
 8000a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a04:	6453      	str	r3, [r2, #68]	; 0x44
 8000a06:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <HAL_MspInit+0x54>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	603b      	str	r3, [r7, #0]
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <HAL_MspInit+0x54>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <HAL_MspInit+0x54>)
 8000a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a20:	6413      	str	r3, [r2, #64]	; 0x40
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <HAL_MspInit+0x54>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	210f      	movs	r1, #15
 8000a32:	f06f 0001 	mvn.w	r0, #1
 8000a36:	f000 faaf 	bl	8000f98 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800

08000a48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08c      	sub	sp, #48	; 0x30
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	6879      	ldr	r1, [r7, #4]
 8000a5c:	202d      	movs	r0, #45	; 0x2d
 8000a5e:	f000 fa9b 	bl	8000f98 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000a62:	202d      	movs	r0, #45	; 0x2d
 8000a64:	f000 fab4 	bl	8000fd0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	4b1f      	ldr	r3, [pc, #124]	; (8000aec <HAL_InitTick+0xa4>)
 8000a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a70:	4a1e      	ldr	r2, [pc, #120]	; (8000aec <HAL_InitTick+0xa4>)
 8000a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a76:	6413      	str	r3, [r2, #64]	; 0x40
 8000a78:	4b1c      	ldr	r3, [pc, #112]	; (8000aec <HAL_InitTick+0xa4>)
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a84:	f107 0210 	add.w	r2, r7, #16
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4611      	mov	r1, r2
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f002 fa68 	bl	8002f64 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a94:	f002 fa52 	bl	8002f3c <HAL_RCC_GetPCLK1Freq>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aa0:	4a13      	ldr	r2, [pc, #76]	; (8000af0 <HAL_InitTick+0xa8>)
 8000aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa6:	0c9b      	lsrs	r3, r3, #18
 8000aa8:	3b01      	subs	r3, #1
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <HAL_InitTick+0xac>)
 8000aae:	4a12      	ldr	r2, [pc, #72]	; (8000af8 <HAL_InitTick+0xb0>)
 8000ab0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <HAL_InitTick+0xac>)
 8000ab4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ab8:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000aba:	4a0e      	ldr	r2, [pc, #56]	; (8000af4 <HAL_InitTick+0xac>)
 8000abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000abe:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <HAL_InitTick+0xac>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <HAL_InitTick+0xac>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8000acc:	4809      	ldr	r0, [pc, #36]	; (8000af4 <HAL_InitTick+0xac>)
 8000ace:	f002 fa7b 	bl	8002fc8 <HAL_TIM_Base_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d104      	bne.n	8000ae2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8000ad8:	4806      	ldr	r0, [pc, #24]	; (8000af4 <HAL_InitTick+0xac>)
 8000ada:	f002 facf 	bl	800307c <HAL_TIM_Base_Start_IT>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	e000      	b.n	8000ae4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3730      	adds	r7, #48	; 0x30
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40023800 	.word	0x40023800
 8000af0:	431bde83 	.word	0x431bde83
 8000af4:	20004ed4 	.word	0x20004ed4
 8000af8:	40002000 	.word	0x40002000

08000afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <NMI_Handler+0x4>

08000b02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <HardFault_Handler+0x4>

08000b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <MemManage_Handler+0x4>

08000b0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <BusFault_Handler+0x4>

08000b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <UsageFault_Handler+0x4>

08000b1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000b2c:	4802      	ldr	r0, [pc, #8]	; (8000b38 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000b2e:	f002 fb15 	bl	800315c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20004ed4 	.word	0x20004ed4

08000b3c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000b40:	4802      	ldr	r0, [pc, #8]	; (8000b4c <ETH_IRQHandler+0x10>)
 8000b42:	f000 fe37 	bl	80017b4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20006868 	.word	0x20006868

08000b50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
	return 1;
 8000b54:	2301      	movs	r3, #1
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <_kill>:

int _kill(int pid, int sig)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000b6a:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <_kill+0x20>)
 8000b6c:	2216      	movs	r2, #22
 8000b6e:	601a      	str	r2, [r3, #0]
	return -1;
 8000b70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	2000b7f4 	.word	0x2000b7f4

08000b84 <_exit>:

void _exit (int status)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000b8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f7ff ffe5 	bl	8000b60 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000b96:	e7fe      	b.n	8000b96 <_exit+0x12>

08000b98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	e00a      	b.n	8000bc0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000baa:	f3af 8000 	nop.w
 8000bae:	4601      	mov	r1, r0
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	1c5a      	adds	r2, r3, #1
 8000bb4:	60ba      	str	r2, [r7, #8]
 8000bb6:	b2ca      	uxtb	r2, r1
 8000bb8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	617b      	str	r3, [r7, #20]
 8000bc0:	697a      	ldr	r2, [r7, #20]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	dbf0      	blt.n	8000baa <_read+0x12>
	}

return len;
 8000bc8:	687b      	ldr	r3, [r7, #4]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3718      	adds	r7, #24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b086      	sub	sp, #24
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	60f8      	str	r0, [r7, #12]
 8000bda:	60b9      	str	r1, [r7, #8]
 8000bdc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bde:	2300      	movs	r3, #0
 8000be0:	617b      	str	r3, [r7, #20]
 8000be2:	e009      	b.n	8000bf8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	1c5a      	adds	r2, r3, #1
 8000be8:	60ba      	str	r2, [r7, #8]
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	617b      	str	r3, [r7, #20]
 8000bf8:	697a      	ldr	r2, [r7, #20]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	dbf1      	blt.n	8000be4 <_write+0x12>
	}
	return len;
 8000c00:	687b      	ldr	r3, [r7, #4]
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3718      	adds	r7, #24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <_close>:

int _close(int file)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	b083      	sub	sp, #12
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
	return -1;
 8000c12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c22:	b480      	push	{r7}
 8000c24:	b083      	sub	sp, #12
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
 8000c2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c32:	605a      	str	r2, [r3, #4]
	return 0;
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <_isatty>:

int _isatty(int file)
{
 8000c42:	b480      	push	{r7}
 8000c44:	b083      	sub	sp, #12
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
	return 1;
 8000c4a:	2301      	movs	r3, #1
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
	return 0;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3714      	adds	r7, #20
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
	...

08000c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b087      	sub	sp, #28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c7c:	4a14      	ldr	r2, [pc, #80]	; (8000cd0 <_sbrk+0x5c>)
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <_sbrk+0x60>)
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c88:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <_sbrk+0x64>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d102      	bne.n	8000c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c90:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <_sbrk+0x64>)
 8000c92:	4a12      	ldr	r2, [pc, #72]	; (8000cdc <_sbrk+0x68>)
 8000c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <_sbrk+0x64>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d205      	bcs.n	8000cb0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <_sbrk+0x6c>)
 8000ca6:	220c      	movs	r2, #12
 8000ca8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000caa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cae:	e009      	b.n	8000cc4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb0:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <_sbrk+0x64>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cb6:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <_sbrk+0x64>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	4a06      	ldr	r2, [pc, #24]	; (8000cd8 <_sbrk+0x64>)
 8000cc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	371c      	adds	r7, #28
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	20020000 	.word	0x20020000
 8000cd4:	00000400 	.word	0x00000400
 8000cd8:	200000a0 	.word	0x200000a0
 8000cdc:	2000b808 	.word	0x2000b808
 8000ce0:	2000b7f4 	.word	0x2000b7f4

08000ce4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <SystemInit+0x20>)
 8000cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cee:	4a05      	ldr	r2, [pc, #20]	; (8000d04 <SystemInit+0x20>)
 8000cf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d0c:	480d      	ldr	r0, [pc, #52]	; (8000d44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d0e:	490e      	ldr	r1, [pc, #56]	; (8000d48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d10:	4a0e      	ldr	r2, [pc, #56]	; (8000d4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d14:	e002      	b.n	8000d1c <LoopCopyDataInit>

08000d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1a:	3304      	adds	r3, #4

08000d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d20:	d3f9      	bcc.n	8000d16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d22:	4a0b      	ldr	r2, [pc, #44]	; (8000d50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d24:	4c0b      	ldr	r4, [pc, #44]	; (8000d54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d28:	e001      	b.n	8000d2e <LoopFillZerobss>

08000d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d2c:	3204      	adds	r2, #4

08000d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d30:	d3fb      	bcc.n	8000d2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d32:	f7ff ffd7 	bl	8000ce4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d36:	f014 fbbb 	bl	80154b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d3a:	f7ff fd43 	bl	80007c4 <main>
  bx  lr    
 8000d3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d48:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000d4c:	0801a114 	.word	0x0801a114
  ldr r2, =_sbss
 8000d50:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000d54:	2000b808 	.word	0x2000b808

08000d58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d58:	e7fe      	b.n	8000d58 <ADC_IRQHandler>
	...

08000d5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d60:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <HAL_Init+0x40>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0d      	ldr	r2, [pc, #52]	; (8000d9c <HAL_Init+0x40>)
 8000d66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d6c:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <HAL_Init+0x40>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <HAL_Init+0x40>)
 8000d72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d78:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <HAL_Init+0x40>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a07      	ldr	r2, [pc, #28]	; (8000d9c <HAL_Init+0x40>)
 8000d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d84:	2003      	movs	r0, #3
 8000d86:	f000 f8fc 	bl	8000f82 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d8a:	200f      	movs	r0, #15
 8000d8c:	f7ff fe5c 	bl	8000a48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d90:	f7ff fe2e 	bl	80009f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40023c00 	.word	0x40023c00

08000da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_IncTick+0x20>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	461a      	mov	r2, r3
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_IncTick+0x24>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4413      	add	r3, r2
 8000db0:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <HAL_IncTick+0x24>)
 8000db2:	6013      	str	r3, [r2, #0]
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	20000008 	.word	0x20000008
 8000dc4:	20004f1c 	.word	0x20004f1c

08000dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return uwTick;
 8000dcc:	4b03      	ldr	r3, [pc, #12]	; (8000ddc <HAL_GetTick+0x14>)
 8000dce:	681b      	ldr	r3, [r3, #0]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20004f1c 	.word	0x20004f1c

08000de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de8:	f7ff ffee 	bl	8000dc8 <HAL_GetTick>
 8000dec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000df8:	d005      	beq.n	8000e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <HAL_Delay+0x44>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4413      	add	r3, r2
 8000e04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e06:	bf00      	nop
 8000e08:	f7ff ffde 	bl	8000dc8 <HAL_GetTick>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d8f7      	bhi.n	8000e08 <HAL_Delay+0x28>
  {
  }
}
 8000e18:	bf00      	nop
 8000e1a:	bf00      	nop
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000008 	.word	0x20000008

08000e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e38:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <__NVIC_SetPriorityGrouping+0x44>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3e:	68ba      	ldr	r2, [r7, #8]
 8000e40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e44:	4013      	ands	r3, r2
 8000e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e5a:	4a04      	ldr	r2, [pc, #16]	; (8000e6c <__NVIC_SetPriorityGrouping+0x44>)
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	60d3      	str	r3, [r2, #12]
}
 8000e60:	bf00      	nop
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e74:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <__NVIC_GetPriorityGrouping+0x18>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	0a1b      	lsrs	r3, r3, #8
 8000e7a:	f003 0307 	and.w	r3, r3, #7
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	db0b      	blt.n	8000eb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	f003 021f 	and.w	r2, r3, #31
 8000ea4:	4907      	ldr	r1, [pc, #28]	; (8000ec4 <__NVIC_EnableIRQ+0x38>)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	095b      	lsrs	r3, r3, #5
 8000eac:	2001      	movs	r0, #1
 8000eae:	fa00 f202 	lsl.w	r2, r0, r2
 8000eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000e100 	.word	0xe000e100

08000ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	6039      	str	r1, [r7, #0]
 8000ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	db0a      	blt.n	8000ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	490c      	ldr	r1, [pc, #48]	; (8000f14 <__NVIC_SetPriority+0x4c>)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	0112      	lsls	r2, r2, #4
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	440b      	add	r3, r1
 8000eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef0:	e00a      	b.n	8000f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	4908      	ldr	r1, [pc, #32]	; (8000f18 <__NVIC_SetPriority+0x50>)
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	f003 030f 	and.w	r3, r3, #15
 8000efe:	3b04      	subs	r3, #4
 8000f00:	0112      	lsls	r2, r2, #4
 8000f02:	b2d2      	uxtb	r2, r2
 8000f04:	440b      	add	r3, r1
 8000f06:	761a      	strb	r2, [r3, #24]
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000e100 	.word	0xe000e100
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b089      	sub	sp, #36	; 0x24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	f1c3 0307 	rsb	r3, r3, #7
 8000f36:	2b04      	cmp	r3, #4
 8000f38:	bf28      	it	cs
 8000f3a:	2304      	movcs	r3, #4
 8000f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3304      	adds	r3, #4
 8000f42:	2b06      	cmp	r3, #6
 8000f44:	d902      	bls.n	8000f4c <NVIC_EncodePriority+0x30>
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3b03      	subs	r3, #3
 8000f4a:	e000      	b.n	8000f4e <NVIC_EncodePriority+0x32>
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43da      	mvns	r2, r3
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	401a      	ands	r2, r3
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6e:	43d9      	mvns	r1, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	4313      	orrs	r3, r2
         );
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3724      	adds	r7, #36	; 0x24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff ff4c 	bl	8000e28 <__NVIC_SetPriorityGrouping>
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
 8000fa4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000faa:	f7ff ff61 	bl	8000e70 <__NVIC_GetPriorityGrouping>
 8000fae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	68b9      	ldr	r1, [r7, #8]
 8000fb4:	6978      	ldr	r0, [r7, #20]
 8000fb6:	f7ff ffb1 	bl	8000f1c <NVIC_EncodePriority>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc0:	4611      	mov	r1, r2
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff ff80 	bl	8000ec8 <__NVIC_SetPriority>
}
 8000fc8:	bf00      	nop
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff ff54 	bl	8000e8c <__NVIC_EnableIRQ>
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61fb      	str	r3, [r7, #28]
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8000ffc:	4baa      	ldr	r3, [pc, #680]	; (80012a8 <HAL_ETH_Init+0x2bc>)
 8000ffe:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001004:	2300      	movs	r3, #0
 8001006:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d101      	bne.n	8001012 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e183      	b.n	800131a <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2b00      	cmp	r3, #0
 800101c:	d106      	bne.n	800102c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f002 fbde 	bl	80037e8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102c:	2300      	movs	r3, #0
 800102e:	60bb      	str	r3, [r7, #8]
 8001030:	4b9e      	ldr	r3, [pc, #632]	; (80012ac <HAL_ETH_Init+0x2c0>)
 8001032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001034:	4a9d      	ldr	r2, [pc, #628]	; (80012ac <HAL_ETH_Init+0x2c0>)
 8001036:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800103a:	6453      	str	r3, [r2, #68]	; 0x44
 800103c:	4b9b      	ldr	r3, [pc, #620]	; (80012ac <HAL_ETH_Init+0x2c0>)
 800103e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001040:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001048:	4b99      	ldr	r3, [pc, #612]	; (80012b0 <HAL_ETH_Init+0x2c4>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	4a98      	ldr	r2, [pc, #608]	; (80012b0 <HAL_ETH_Init+0x2c4>)
 800104e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001052:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001054:	4b96      	ldr	r3, [pc, #600]	; (80012b0 <HAL_ETH_Init+0x2c4>)
 8001056:	685a      	ldr	r2, [r3, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a1b      	ldr	r3, [r3, #32]
 800105c:	4994      	ldr	r1, [pc, #592]	; (80012b0 <HAL_ETH_Init+0x2c4>)
 800105e:	4313      	orrs	r3, r2
 8001060:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f042 0201 	orr.w	r2, r2, #1
 8001074:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001078:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800107a:	f7ff fea5 	bl	8000dc8 <HAL_GetTick>
 800107e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001080:	e011      	b.n	80010a6 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001082:	f7ff fea1 	bl	8000dc8 <HAL_GetTick>
 8001086:	4602      	mov	r2, r0
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001090:	d909      	bls.n	80010a6 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2203      	movs	r2, #3
 8001096:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	e139      	b.n	800131a <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1e4      	bne.n	8001082 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	691b      	ldr	r3, [r3, #16]
 80010be:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f023 031c 	bic.w	r3, r3, #28
 80010c6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80010c8:	f001 ff2c 	bl	8002f24 <HAL_RCC_GetHCLKFreq>
 80010cc:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	4a78      	ldr	r2, [pc, #480]	; (80012b4 <HAL_ETH_Init+0x2c8>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d908      	bls.n	80010e8 <HAL_ETH_Init+0xfc>
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	4a77      	ldr	r2, [pc, #476]	; (80012b8 <HAL_ETH_Init+0x2cc>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d804      	bhi.n	80010e8 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	f043 0308 	orr.w	r3, r3, #8
 80010e4:	61fb      	str	r3, [r7, #28]
 80010e6:	e027      	b.n	8001138 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	4a73      	ldr	r2, [pc, #460]	; (80012b8 <HAL_ETH_Init+0x2cc>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d908      	bls.n	8001102 <HAL_ETH_Init+0x116>
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	4a6d      	ldr	r2, [pc, #436]	; (80012a8 <HAL_ETH_Init+0x2bc>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d204      	bcs.n	8001102 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	f043 030c 	orr.w	r3, r3, #12
 80010fe:	61fb      	str	r3, [r7, #28]
 8001100:	e01a      	b.n	8001138 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	4a68      	ldr	r2, [pc, #416]	; (80012a8 <HAL_ETH_Init+0x2bc>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d303      	bcc.n	8001112 <HAL_ETH_Init+0x126>
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	4a6b      	ldr	r2, [pc, #428]	; (80012bc <HAL_ETH_Init+0x2d0>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d911      	bls.n	8001136 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	4a69      	ldr	r2, [pc, #420]	; (80012bc <HAL_ETH_Init+0x2d0>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d908      	bls.n	800112c <HAL_ETH_Init+0x140>
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	4a68      	ldr	r2, [pc, #416]	; (80012c0 <HAL_ETH_Init+0x2d4>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d804      	bhi.n	800112c <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	f043 0304 	orr.w	r3, r3, #4
 8001128:	61fb      	str	r3, [r7, #28]
 800112a:	e005      	b.n	8001138 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	f043 0310 	orr.w	r3, r3, #16
 8001132:	61fb      	str	r3, [r7, #28]
 8001134:	e000      	b.n	8001138 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001136:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	69fa      	ldr	r2, [r7, #28]
 800113e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001140:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001144:	2100      	movs	r1, #0
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f000 fc17 	bl	800197a <HAL_ETH_WritePHYRegister>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d00b      	beq.n	800116a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001156:	6939      	ldr	r1, [r7, #16]
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f000 fdcd 	bl	8001cf8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2201      	movs	r2, #1
 8001162:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e0d7      	b.n	800131a <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800116a:	20ff      	movs	r0, #255	; 0xff
 800116c:	f7ff fe38 	bl	8000de0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2b00      	cmp	r3, #0
 8001176:	f000 80a5 	beq.w	80012c4 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800117a:	f7ff fe25 	bl	8000dc8 <HAL_GetTick>
 800117e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001180:	f107 030c 	add.w	r3, r7, #12
 8001184:	461a      	mov	r2, r3
 8001186:	2101      	movs	r1, #1
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f000 fb8e 	bl	80018aa <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800118e:	f7ff fe1b 	bl	8000dc8 <HAL_GetTick>
 8001192:	4602      	mov	r2, r0
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	f241 3288 	movw	r2, #5000	; 0x1388
 800119c:	4293      	cmp	r3, r2
 800119e:	d90f      	bls.n	80011c0 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80011a4:	6939      	ldr	r1, [r7, #16]
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f000 fda6 	bl	8001cf8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2201      	movs	r2, #1
 80011b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e0ac      	b.n	800131a <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f003 0304 	and.w	r3, r3, #4
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d0da      	beq.n	8001180 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80011ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011ce:	2100      	movs	r1, #0
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f000 fbd2 	bl	800197a <HAL_ETH_WritePHYRegister>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d00b      	beq.n	80011f4 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80011e0:	6939      	ldr	r1, [r7, #16]
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f000 fd88 	bl	8001cf8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2201      	movs	r2, #1
 80011ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80011f0:	2301      	movs	r3, #1
 80011f2:	e092      	b.n	800131a <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80011f4:	f7ff fde8 	bl	8000dc8 <HAL_GetTick>
 80011f8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80011fa:	f107 030c 	add.w	r3, r7, #12
 80011fe:	461a      	mov	r2, r3
 8001200:	2101      	movs	r1, #1
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f000 fb51 	bl	80018aa <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001208:	f7ff fdde 	bl	8000dc8 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	f241 3288 	movw	r2, #5000	; 0x1388
 8001216:	4293      	cmp	r3, r2
 8001218:	d90f      	bls.n	800123a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800121e:	6939      	ldr	r1, [r7, #16]
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f000 fd69 	bl	8001cf8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2201      	movs	r2, #1
 800122a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e06f      	b.n	800131a <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	f003 0320 	and.w	r3, r3, #32
 8001240:	2b00      	cmp	r3, #0
 8001242:	d0da      	beq.n	80011fa <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001244:	f107 030c 	add.w	r3, r7, #12
 8001248:	461a      	mov	r2, r3
 800124a:	2110      	movs	r1, #16
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f000 fb2c 	bl	80018aa <HAL_ETH_ReadPHYRegister>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d00b      	beq.n	8001270 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800125c:	6939      	ldr	r1, [r7, #16]
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 fd4a 	bl	8001cf8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2201      	movs	r2, #1
 8001268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800126c:	2301      	movs	r3, #1
 800126e:	e054      	b.n	800131a <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f003 0304 	and.w	r3, r3, #4
 8001276:	2b00      	cmp	r3, #0
 8001278:	d004      	beq.n	8001284 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	e002      	b.n	800128a <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	e035      	b.n	8001308 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	e030      	b.n	8001308 <HAL_ETH_Init+0x31c>
 80012a6:	bf00      	nop
 80012a8:	03938700 	.word	0x03938700
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40013800 	.word	0x40013800
 80012b4:	01312cff 	.word	0x01312cff
 80012b8:	02160ebf 	.word	0x02160ebf
 80012bc:	05f5e0ff 	.word	0x05f5e0ff
 80012c0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	08db      	lsrs	r3, r3, #3
 80012ca:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	085b      	lsrs	r3, r3, #1
 80012d2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80012d4:	4313      	orrs	r3, r2
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	461a      	mov	r2, r3
 80012da:	2100      	movs	r1, #0
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f000 fb4c 	bl	800197a <HAL_ETH_WritePHYRegister>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d00b      	beq.n	8001300 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80012ec:	6939      	ldr	r1, [r7, #16]
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 fd02 	bl	8001cf8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2201      	movs	r2, #1
 80012f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e00c      	b.n	800131a <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001300:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001304:	f7ff fd6c 	bl	8000de0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001308:	6939      	ldr	r1, [r7, #16]
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f000 fcf4 	bl	8001cf8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2201      	movs	r2, #1
 8001314:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3720      	adds	r7, #32
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop

08001324 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001324:	b480      	push	{r7}
 8001326:	b087      	sub	sp, #28
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
 8001330:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800133c:	2b01      	cmp	r3, #1
 800133e:	d101      	bne.n	8001344 <HAL_ETH_DMATxDescListInit+0x20>
 8001340:	2302      	movs	r3, #2
 8001342:	e052      	b.n	80013ea <HAL_ETH_DMATxDescListInit+0xc6>
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2201      	movs	r2, #1
 8001348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2202      	movs	r2, #2
 8001350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
 800135e:	e030      	b.n	80013c2 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	015b      	lsls	r3, r3, #5
 8001364:	68ba      	ldr	r2, [r7, #8]
 8001366:	4413      	add	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001370:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001378:	fb02 f303 	mul.w	r3, r2, r3
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	4413      	add	r3, r2
 8001380:	461a      	mov	r2, r3
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d105      	bne.n	800139a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	3b01      	subs	r3, #1
 800139e:	697a      	ldr	r2, [r7, #20]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d208      	bcs.n	80013b6 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	3301      	adds	r3, #1
 80013a8:	015b      	lsls	r3, r3, #5
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	4413      	add	r3, r2
 80013ae:	461a      	mov	r2, r3
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	60da      	str	r2, [r3, #12]
 80013b4:	e002      	b.n	80013bc <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80013b6:	68ba      	ldr	r2, [r7, #8]
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	3301      	adds	r3, #1
 80013c0:	617b      	str	r3, [r7, #20]
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d3ca      	bcc.n	8001360 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	68ba      	ldr	r2, [r7, #8]
 80013d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013d4:	3310      	adds	r3, #16
 80013d6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2201      	movs	r2, #1
 80013dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	371c      	adds	r7, #28
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b087      	sub	sp, #28
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	60f8      	str	r0, [r7, #12]
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
 8001402:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800140e:	2b01      	cmp	r3, #1
 8001410:	d101      	bne.n	8001416 <HAL_ETH_DMARxDescListInit+0x20>
 8001412:	2302      	movs	r3, #2
 8001414:	e056      	b.n	80014c4 <HAL_ETH_DMARxDescListInit+0xce>
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2201      	movs	r2, #1
 800141a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2202      	movs	r2, #2
 8001422:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	68ba      	ldr	r2, [r7, #8]
 800142a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
 8001430:	e034      	b.n	800149c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	015b      	lsls	r3, r3, #5
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	4413      	add	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001442:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800144a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001452:	fb02 f303 	mul.w	r3, r2, r3
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	461a      	mov	r2, r3
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d105      	bne.n	8001474 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	3b01      	subs	r3, #1
 8001478:	697a      	ldr	r2, [r7, #20]
 800147a:	429a      	cmp	r2, r3
 800147c:	d208      	bcs.n	8001490 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	3301      	adds	r3, #1
 8001482:	015b      	lsls	r3, r3, #5
 8001484:	68ba      	ldr	r2, [r7, #8]
 8001486:	4413      	add	r3, r2
 8001488:	461a      	mov	r2, r3
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	e002      	b.n	8001496 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001490:	68ba      	ldr	r2, [r7, #8]
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	3301      	adds	r3, #1
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	697a      	ldr	r2, [r7, #20]
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d3c6      	bcc.n	8001432 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	68ba      	ldr	r2, [r7, #8]
 80014aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014ae:	330c      	adds	r3, #12
 80014b0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2201      	movs	r2, #1
 80014b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	371c      	adds	r7, #28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b087      	sub	sp, #28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d101      	bne.n	80014f4 <HAL_ETH_TransmitFrame+0x24>
 80014f0:	2302      	movs	r3, #2
 80014f2:	e0cd      	b.n	8001690 <HAL_ETH_TransmitFrame+0x1c0>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2201      	movs	r2, #1
 80014f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2202      	movs	r2, #2
 8001500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d109      	bne.n	800151e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2201      	movs	r2, #1
 800150e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800151a:	2301      	movs	r3, #1
 800151c:	e0b8      	b.n	8001690 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	da09      	bge.n	800153c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2212      	movs	r2, #18
 800152c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e0a9      	b.n	8001690 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001542:	4293      	cmp	r3, r2
 8001544:	d915      	bls.n	8001572 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	4a54      	ldr	r2, [pc, #336]	; (800169c <HAL_ETH_TransmitFrame+0x1cc>)
 800154a:	fba2 2303 	umull	r2, r3, r2, r3
 800154e:	0a9b      	lsrs	r3, r3, #10
 8001550:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	4b51      	ldr	r3, [pc, #324]	; (800169c <HAL_ETH_TransmitFrame+0x1cc>)
 8001556:	fba3 1302 	umull	r1, r3, r3, r2
 800155a:	0a9b      	lsrs	r3, r3, #10
 800155c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001560:	fb01 f303 	mul.w	r3, r1, r3
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	d005      	beq.n	8001576 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	3301      	adds	r3, #1
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	e001      	b.n	8001576 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001572:	2301      	movs	r3, #1
 8001574:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d11c      	bne.n	80015b6 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001586:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800158a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001596:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80015a6:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	461a      	mov	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80015b4:	e04b      	b.n	800164e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	e044      	b.n	8001646 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015ca:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d107      	bne.n	80015e2 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015dc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015e0:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80015ea:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d116      	bne.n	8001624 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001600:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001604:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	4a25      	ldr	r2, [pc, #148]	; (80016a0 <HAL_ETH_TransmitFrame+0x1d0>)
 800160a:	fb02 f203 	mul.w	r2, r2, r3
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	4413      	add	r3, r2
 8001612:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001616:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001622:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001632:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	461a      	mov	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	3301      	adds	r3, #1
 8001644:	613b      	str	r3, [r7, #16]
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	429a      	cmp	r2, r3
 800164c:	d3b6      	bcc.n	80015bc <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001656:	3314      	adds	r3, #20
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0304 	and.w	r3, r3, #4
 800165e:	2b00      	cmp	r3, #0
 8001660:	d00d      	beq.n	800167e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800166a:	3314      	adds	r3, #20
 800166c:	2204      	movs	r2, #4
 800166e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001678:	3304      	adds	r3, #4
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	371c      	adds	r7, #28
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	ac02b00b 	.word	0xac02b00b
 80016a0:	fffffa0c 	.word	0xfffffa0c

080016a4 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d101      	bne.n	80016be <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80016ba:	2302      	movs	r3, #2
 80016bc:	e074      	b.n	80017a8 <HAL_ETH_GetReceivedFrame_IT+0x104>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2201      	movs	r2, #1
 80016c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2202      	movs	r2, #2
 80016ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80016ce:	e05a      	b.n	8001786 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	3301      	adds	r3, #1
 80016d4:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016e4:	d10d      	bne.n	8001702 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2201      	movs	r2, #1
 80016f2:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	461a      	mov	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	629a      	str	r2, [r3, #40]	; 0x28
 8001700:	e041      	b.n	8001786 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800170c:	2b00      	cmp	r3, #0
 800170e:	d10b      	bne.n	8001728 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001714:	1c5a      	adds	r2, r3, #1
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	461a      	mov	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	629a      	str	r2, [r3, #40]	; 0x28
 8001726:	e02e      	b.n	8001786 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001734:	1c5a      	adds	r2, r3, #1
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800173e:	2b01      	cmp	r3, #1
 8001740:	d103      	bne.n	800174a <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	0c1b      	lsrs	r3, r3, #16
 8001752:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001756:	1f1a      	subs	r2, r3, #4
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001760:	689a      	ldr	r2, [r3, #8]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	461a      	mov	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2201      	movs	r2, #1
 8001776:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001782:	2300      	movs	r3, #0
 8001784:	e010      	b.n	80017a8 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	db02      	blt.n	8001796 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2b03      	cmp	r3, #3
 8001794:	d99c      	bls.n	80016d0 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2201      	movs	r2, #1
 800179a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017c4:	3314      	adds	r3, #20
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017cc:	2b40      	cmp	r3, #64	; 0x40
 80017ce:	d112      	bne.n	80017f6 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f002 f8b7 	bl	8003944 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017de:	3314      	adds	r3, #20
 80017e0:	2240      	movs	r2, #64	; 0x40
 80017e2:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80017f4:	e01b      	b.n	800182e <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017fe:	3314      	adds	r3, #20
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b01      	cmp	r3, #1
 8001808:	d111      	bne.n	800182e <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 f839 	bl	8001882 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001818:	3314      	adds	r3, #20
 800181a:	2201      	movs	r2, #1
 800181c:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2201      	movs	r2, #1
 8001822:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001836:	3314      	adds	r3, #20
 8001838:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800183c:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001846:	3314      	adds	r3, #20
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800184e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001852:	d112      	bne.n	800187a <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 f81e 	bl	8001896 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001862:	3314      	adds	r3, #20
 8001864:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001868:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2201      	movs	r2, #1
 800186e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b086      	sub	sp, #24
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	60f8      	str	r0, [r7, #12]
 80018b2:	460b      	mov	r3, r1
 80018b4:	607a      	str	r2, [r7, #4]
 80018b6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80018bc:	2300      	movs	r3, #0
 80018be:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	2b82      	cmp	r3, #130	; 0x82
 80018ca:	d101      	bne.n	80018d0 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80018cc:	2302      	movs	r3, #2
 80018ce:	e050      	b.n	8001972 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2282      	movs	r2, #130	; 0x82
 80018d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	f003 031c 	and.w	r3, r3, #28
 80018e6:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	8a1b      	ldrh	r3, [r3, #16]
 80018ec:	02db      	lsls	r3, r3, #11
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80018f6:	897b      	ldrh	r3, [r7, #10]
 80018f8:	019b      	lsls	r3, r3, #6
 80018fa:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80018fe:	697a      	ldr	r2, [r7, #20]
 8001900:	4313      	orrs	r3, r2
 8001902:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	f023 0302 	bic.w	r3, r3, #2
 800190a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800191c:	f7ff fa54 	bl	8000dc8 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001922:	e015      	b.n	8001950 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001924:	f7ff fa50 	bl	8000dc8 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001932:	d309      	bcc.n	8001948 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e014      	b.n	8001972 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1e4      	bne.n	8001924 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	695b      	ldr	r3, [r3, #20]
 8001960:	b29b      	uxth	r3, r3
 8001962:	461a      	mov	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b086      	sub	sp, #24
 800197e:	af00      	add	r7, sp, #0
 8001980:	60f8      	str	r0, [r7, #12]
 8001982:	460b      	mov	r3, r1
 8001984:	607a      	str	r2, [r7, #4]
 8001986:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001996:	b2db      	uxtb	r3, r3
 8001998:	2b42      	cmp	r3, #66	; 0x42
 800199a:	d101      	bne.n	80019a0 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800199c:	2302      	movs	r3, #2
 800199e:	e04e      	b.n	8001a3e <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2242      	movs	r2, #66	; 0x42
 80019a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	f003 031c 	and.w	r3, r3, #28
 80019b6:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	8a1b      	ldrh	r3, [r3, #16]
 80019bc:	02db      	lsls	r3, r3, #11
 80019be:	b29b      	uxth	r3, r3
 80019c0:	697a      	ldr	r2, [r7, #20]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80019c6:	897b      	ldrh	r3, [r7, #10]
 80019c8:	019b      	lsls	r3, r3, #6
 80019ca:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	f043 0302 	orr.w	r3, r3, #2
 80019da:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80019f6:	f7ff f9e7 	bl	8000dc8 <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019fc:	e015      	b.n	8001a2a <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80019fe:	f7ff f9e3 	bl	8000dc8 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a0c:	d309      	bcc.n	8001a22 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2201      	movs	r2, #1
 8001a12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e00d      	b.n	8001a3e <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1e4      	bne.n	80019fe <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d101      	bne.n	8001a5c <HAL_ETH_Start+0x16>
 8001a58:	2302      	movs	r3, #2
 8001a5a:	e01f      	b.n	8001a9c <HAL_ETH_Start+0x56>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2202      	movs	r2, #2
 8001a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 fb45 	bl	80020fc <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 fb7c 	bl	8002170 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 fc13 	bl	80022a4 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 fbb0 	bl	80021e4 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 fbdd 	bl	8002244 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d101      	bne.n	8001aba <HAL_ETH_Stop+0x16>
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	e01f      	b.n	8001afa <HAL_ETH_Stop+0x56>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2201      	movs	r2, #1
 8001abe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 fba2 	bl	8002214 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 fbcf 	bl	8002274 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 fb67 	bl	80021aa <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 fbe1 	bl	80022a4 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 fb27 	bl	8002136 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d101      	bne.n	8001b20 <HAL_ETH_ConfigMAC+0x1c>
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	e0e4      	b.n	8001cea <HAL_ETH_ConfigMAC+0x1e6>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f000 80b1 	beq.w	8001c9a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	4b6c      	ldr	r3, [pc, #432]	; (8001cf4 <HAL_ETH_ConfigMAC+0x1f0>)
 8001b44:	4013      	ands	r3, r2
 8001b46:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001b50:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001b56:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001b5c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001b62:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001b68:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001b6e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001b74:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001b7a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001b80:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001b86:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001b8c:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001b92:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001baa:	2001      	movs	r0, #1
 8001bac:	f7ff f918 	bl	8000de0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001bc0:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001bc6:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001bcc:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001bd2:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001bd8:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001bde:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001bea:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001bec:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bf6:	2001      	movs	r0, #1
 8001bf8:	f7ff f8f2 	bl	8000de0 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001c0c:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c16:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001c26:	4013      	ands	r3, r2
 8001c28:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c2e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001c34:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001c3a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001c40:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001c46:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001c4c:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68fa      	ldr	r2, [r7, #12]
 8001c5a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c64:	2001      	movs	r0, #1
 8001c66:	f7ff f8bb 	bl	8000de0 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	69db      	ldr	r3, [r3, #28]
 8001c88:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	f7ff f8a8 	bl	8000de0 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	61da      	str	r2, [r3, #28]
 8001c98:	e01e      	b.n	8001cd8 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001ca8:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cca:	2001      	movs	r0, #1
 8001ccc:	f7ff f888 	bl	8000de0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	ff20810f 	.word	0xff20810f

08001cf8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b0b0      	sub	sp, #192	; 0xc0
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d007      	beq.n	8001d1e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d14:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d1c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001d22:	2300      	movs	r3, #0
 8001d24:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001d26:	2300      	movs	r3, #0
 8001d28:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001d32:	2300      	movs	r3, #0
 8001d34:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d103      	bne.n	8001d46 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001d3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d42:	663b      	str	r3, [r7, #96]	; 0x60
 8001d44:	e001      	b.n	8001d4a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001d46:	2300      	movs	r3, #0
 8001d48:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001d4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d4e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001d50:	2300      	movs	r3, #0
 8001d52:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001d54:	2300      	movs	r3, #0
 8001d56:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001d60:	2300      	movs	r3, #0
 8001d62:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001d64:	2340      	movs	r3, #64	; 0x40
 8001d66:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001d74:	2300      	movs	r3, #0
 8001d76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001d80:	2300      	movs	r3, #0
 8001d82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001d92:	2300      	movs	r3, #0
 8001d94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001d98:	2380      	movs	r3, #128	; 0x80
 8001d9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001da4:	2300      	movs	r3, #0
 8001da6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001daa:	2300      	movs	r3, #0
 8001dac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001db0:	2300      	movs	r3, #0
 8001db2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001db6:	2300      	movs	r3, #0
 8001db8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001dcc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001dd0:	4bac      	ldr	r3, [pc, #688]	; (8002084 <ETH_MACDMAConfig+0x38c>)
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001dd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001ddc:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001dde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001de0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001de2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001de4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001dea:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001dec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001dee:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001df0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001df2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001df8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001dfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001dfc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001dfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001e00:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001e02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001e04:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001e08:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001e0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001e0c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001e0e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e12:	4313      	orrs	r3, r2
 8001e14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e20:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	f7fe ffd7 	bl	8000de0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e3a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001e3c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001e3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001e40:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001e42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001e44:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001e46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001e4a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001e4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001e50:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001e52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001e56:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001e58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001e5c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001e60:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001e68:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001e6a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e76:	2001      	movs	r0, #1
 8001e78:	f7fe ffb2 	bl	8000de0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e84:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001e8e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001e98:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001ea4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ea8:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001eac:	4013      	ands	r3, r2
 8001eae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001eb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001eb6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001eb8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001ebc:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001ebe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001ec2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001ec4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001ec8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001eca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001ece:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001ed0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001ed4:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001ed6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001eda:	4313      	orrs	r3, r2
 8001edc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ee8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ef4:	2001      	movs	r0, #1
 8001ef6:	f7fe ff73 	bl	8000de0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f02:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001f04:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001f08:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f1e:	2001      	movs	r0, #1
 8001f20:	f7fe ff5e 	bl	8000de0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f2c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001f32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f36:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001f3c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f40:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001f46:	2300      	movs	r3, #0
 8001f48:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001f52:	2304      	movs	r3, #4
 8001f54:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001f56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001f5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f60:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001f62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f66:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001f68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f6c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001f6e:	2380      	movs	r3, #128	; 0x80
 8001f70:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001f76:	2300      	movs	r3, #0
 8001f78:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f82:	3318      	adds	r3, #24
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001f8a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f8e:	4b3e      	ldr	r3, [pc, #248]	; (8002088 <ETH_MACDMAConfig+0x390>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001f96:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001f98:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001f9a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001f9c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001f9e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001fa0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001fa2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001fa4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001fa6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001fa8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001faa:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001fac:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001fae:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001fb2:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001fb6:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001fb8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fca:	3318      	adds	r3, #24
 8001fcc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fd0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fda:	3318      	adds	r3, #24
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fe2:	2001      	movs	r0, #1
 8001fe4:	f7fe fefc 	bl	8000de0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ff0:	3318      	adds	r3, #24
 8001ff2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ff6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001ff8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001ffc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002000:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002004:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002008:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800200a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800200c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800200e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002012:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800201c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002020:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002030:	2001      	movs	r0, #1
 8002032:	f7fe fed5 	bl	8000de0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800203e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002042:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d10f      	bne.n	800206c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002054:	331c      	adds	r3, #28
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002060:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002064:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002068:	331c      	adds	r3, #28
 800206a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	461a      	mov	r2, r3
 8002072:	2100      	movs	r1, #0
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 f809 	bl	800208c <ETH_MACAddressConfig>
}
 800207a:	bf00      	nop
 800207c:	37c0      	adds	r7, #192	; 0xc0
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	ff20810f 	.word	0xff20810f
 8002088:	f8de3f23 	.word	0xf8de3f23

0800208c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800208c:	b480      	push	{r7}
 800208e:	b087      	sub	sp, #28
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3305      	adds	r3, #5
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	021b      	lsls	r3, r3, #8
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	3204      	adds	r2, #4
 80020a4:	7812      	ldrb	r2, [r2, #0]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <ETH_MACAddressConfig+0x68>)
 80020ae:	4413      	add	r3, r2
 80020b0:	461a      	mov	r2, r3
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3303      	adds	r3, #3
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	061a      	lsls	r2, r3, #24
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	3302      	adds	r3, #2
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	041b      	lsls	r3, r3, #16
 80020c6:	431a      	orrs	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3301      	adds	r3, #1
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	021b      	lsls	r3, r3, #8
 80020d0:	4313      	orrs	r3, r2
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	7812      	ldrb	r2, [r2, #0]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <ETH_MACAddressConfig+0x6c>)
 80020de:	4413      	add	r3, r2
 80020e0:	461a      	mov	r2, r3
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	6013      	str	r3, [r2, #0]
}
 80020e6:	bf00      	nop
 80020e8:	371c      	adds	r7, #28
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	40028040 	.word	0x40028040
 80020f8:	40028044 	.word	0x40028044

080020fc <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002104:	2300      	movs	r3, #0
 8002106:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f042 0208 	orr.w	r2, r2, #8
 8002116:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002120:	2001      	movs	r0, #1
 8002122:	f000 f8e9 	bl	80022f8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	601a      	str	r2, [r3, #0]
}
 800212e:	bf00      	nop
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002136:	b580      	push	{r7, lr}
 8002138:	b084      	sub	sp, #16
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800213e:	2300      	movs	r3, #0
 8002140:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 0208 	bic.w	r2, r2, #8
 8002150:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800215a:	2001      	movs	r0, #1
 800215c:	f000 f8cc 	bl	80022f8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	601a      	str	r2, [r3, #0]
}
 8002168:	bf00      	nop
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002178:	2300      	movs	r3, #0
 800217a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f042 0204 	orr.w	r2, r2, #4
 800218a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002194:	2001      	movs	r0, #1
 8002196:	f000 f8af 	bl	80022f8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	601a      	str	r2, [r3, #0]
}
 80021a2:	bf00      	nop
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b084      	sub	sp, #16
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 0204 	bic.w	r2, r2, #4
 80021c4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80021ce:	2001      	movs	r0, #1
 80021d0:	f000 f892 	bl	80022f8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	601a      	str	r2, [r3, #0]
}
 80021dc:	bf00      	nop
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021f4:	3318      	adds	r3, #24
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002204:	3318      	adds	r3, #24
 8002206:	601a      	str	r2, [r3, #0]
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002224:	3318      	adds	r3, #24
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002234:	3318      	adds	r3, #24
 8002236:	601a      	str	r2, [r3, #0]
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002254:	3318      	adds	r3, #24
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f042 0202 	orr.w	r2, r2, #2
 8002260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002264:	3318      	adds	r3, #24
 8002266:	601a      	str	r2, [r3, #0]
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002284:	3318      	adds	r3, #24
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 0202 	bic.w	r2, r2, #2
 8002290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002294:	3318      	adds	r3, #24
 8002296:	601a      	str	r2, [r3, #0]
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80022ac:	2300      	movs	r3, #0
 80022ae:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022b8:	3318      	adds	r3, #24
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80022c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022c8:	3318      	adds	r3, #24
 80022ca:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022d4:	3318      	adds	r3, #24
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80022da:	2001      	movs	r0, #1
 80022dc:	f000 f80c 	bl	80022f8 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022ea:	3318      	adds	r3, #24
 80022ec:	601a      	str	r2, [r3, #0]
}
 80022ee:	bf00      	nop
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
	...

080022f8 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002300:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <ETH_Delay+0x38>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a0b      	ldr	r2, [pc, #44]	; (8002334 <ETH_Delay+0x3c>)
 8002306:	fba2 2303 	umull	r2, r3, r2, r3
 800230a:	0a5b      	lsrs	r3, r3, #9
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	fb02 f303 	mul.w	r3, r2, r3
 8002312:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002314:	bf00      	nop
  } 
  while (Delay --);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	1e5a      	subs	r2, r3, #1
 800231a:	60fa      	str	r2, [r7, #12]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1f9      	bne.n	8002314 <ETH_Delay+0x1c>
}
 8002320:	bf00      	nop
 8002322:	bf00      	nop
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	20000000 	.word	0x20000000
 8002334:	10624dd3 	.word	0x10624dd3

08002338 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002338:	b480      	push	{r7}
 800233a:	b089      	sub	sp, #36	; 0x24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002342:	2300      	movs	r3, #0
 8002344:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002346:	2300      	movs	r3, #0
 8002348:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800234a:	2300      	movs	r3, #0
 800234c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
 8002352:	e16b      	b.n	800262c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002354:	2201      	movs	r2, #1
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	4013      	ands	r3, r2
 8002366:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	429a      	cmp	r2, r3
 800236e:	f040 815a 	bne.w	8002626 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	2b01      	cmp	r3, #1
 800237c:	d005      	beq.n	800238a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002386:	2b02      	cmp	r3, #2
 8002388:	d130      	bne.n	80023ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	2203      	movs	r2, #3
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43db      	mvns	r3, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4013      	ands	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	68da      	ldr	r2, [r3, #12]
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023c0:	2201      	movs	r2, #1
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	091b      	lsrs	r3, r3, #4
 80023d6:	f003 0201 	and.w	r2, r3, #1
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 0303 	and.w	r3, r3, #3
 80023f4:	2b03      	cmp	r3, #3
 80023f6:	d017      	beq.n	8002428 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	2203      	movs	r2, #3
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	43db      	mvns	r3, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4013      	ands	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4313      	orrs	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f003 0303 	and.w	r3, r3, #3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d123      	bne.n	800247c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	08da      	lsrs	r2, r3, #3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3208      	adds	r2, #8
 800243c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002440:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	220f      	movs	r2, #15
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4013      	ands	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	691a      	ldr	r2, [r3, #16]
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	08da      	lsrs	r2, r3, #3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	3208      	adds	r2, #8
 8002476:	69b9      	ldr	r1, [r7, #24]
 8002478:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	2203      	movs	r2, #3
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 0203 	and.w	r2, r3, #3
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 80b4 	beq.w	8002626 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	4b60      	ldr	r3, [pc, #384]	; (8002644 <HAL_GPIO_Init+0x30c>)
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c6:	4a5f      	ldr	r2, [pc, #380]	; (8002644 <HAL_GPIO_Init+0x30c>)
 80024c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024cc:	6453      	str	r3, [r2, #68]	; 0x44
 80024ce:	4b5d      	ldr	r3, [pc, #372]	; (8002644 <HAL_GPIO_Init+0x30c>)
 80024d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024da:	4a5b      	ldr	r2, [pc, #364]	; (8002648 <HAL_GPIO_Init+0x310>)
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	089b      	lsrs	r3, r3, #2
 80024e0:	3302      	adds	r3, #2
 80024e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	220f      	movs	r2, #15
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	43db      	mvns	r3, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4013      	ands	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a52      	ldr	r2, [pc, #328]	; (800264c <HAL_GPIO_Init+0x314>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d02b      	beq.n	800255e <HAL_GPIO_Init+0x226>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a51      	ldr	r2, [pc, #324]	; (8002650 <HAL_GPIO_Init+0x318>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d025      	beq.n	800255a <HAL_GPIO_Init+0x222>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a50      	ldr	r2, [pc, #320]	; (8002654 <HAL_GPIO_Init+0x31c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d01f      	beq.n	8002556 <HAL_GPIO_Init+0x21e>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a4f      	ldr	r2, [pc, #316]	; (8002658 <HAL_GPIO_Init+0x320>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d019      	beq.n	8002552 <HAL_GPIO_Init+0x21a>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a4e      	ldr	r2, [pc, #312]	; (800265c <HAL_GPIO_Init+0x324>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d013      	beq.n	800254e <HAL_GPIO_Init+0x216>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a4d      	ldr	r2, [pc, #308]	; (8002660 <HAL_GPIO_Init+0x328>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d00d      	beq.n	800254a <HAL_GPIO_Init+0x212>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a4c      	ldr	r2, [pc, #304]	; (8002664 <HAL_GPIO_Init+0x32c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d007      	beq.n	8002546 <HAL_GPIO_Init+0x20e>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a4b      	ldr	r2, [pc, #300]	; (8002668 <HAL_GPIO_Init+0x330>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d101      	bne.n	8002542 <HAL_GPIO_Init+0x20a>
 800253e:	2307      	movs	r3, #7
 8002540:	e00e      	b.n	8002560 <HAL_GPIO_Init+0x228>
 8002542:	2308      	movs	r3, #8
 8002544:	e00c      	b.n	8002560 <HAL_GPIO_Init+0x228>
 8002546:	2306      	movs	r3, #6
 8002548:	e00a      	b.n	8002560 <HAL_GPIO_Init+0x228>
 800254a:	2305      	movs	r3, #5
 800254c:	e008      	b.n	8002560 <HAL_GPIO_Init+0x228>
 800254e:	2304      	movs	r3, #4
 8002550:	e006      	b.n	8002560 <HAL_GPIO_Init+0x228>
 8002552:	2303      	movs	r3, #3
 8002554:	e004      	b.n	8002560 <HAL_GPIO_Init+0x228>
 8002556:	2302      	movs	r3, #2
 8002558:	e002      	b.n	8002560 <HAL_GPIO_Init+0x228>
 800255a:	2301      	movs	r3, #1
 800255c:	e000      	b.n	8002560 <HAL_GPIO_Init+0x228>
 800255e:	2300      	movs	r3, #0
 8002560:	69fa      	ldr	r2, [r7, #28]
 8002562:	f002 0203 	and.w	r2, r2, #3
 8002566:	0092      	lsls	r2, r2, #2
 8002568:	4093      	lsls	r3, r2
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4313      	orrs	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002570:	4935      	ldr	r1, [pc, #212]	; (8002648 <HAL_GPIO_Init+0x310>)
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	089b      	lsrs	r3, r3, #2
 8002576:	3302      	adds	r3, #2
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800257e:	4b3b      	ldr	r3, [pc, #236]	; (800266c <HAL_GPIO_Init+0x334>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	43db      	mvns	r3, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4013      	ands	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	4313      	orrs	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025a2:	4a32      	ldr	r2, [pc, #200]	; (800266c <HAL_GPIO_Init+0x334>)
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025a8:	4b30      	ldr	r3, [pc, #192]	; (800266c <HAL_GPIO_Init+0x334>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	43db      	mvns	r3, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4013      	ands	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025cc:	4a27      	ldr	r2, [pc, #156]	; (800266c <HAL_GPIO_Init+0x334>)
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025d2:	4b26      	ldr	r3, [pc, #152]	; (800266c <HAL_GPIO_Init+0x334>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	43db      	mvns	r3, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4013      	ands	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025f6:	4a1d      	ldr	r2, [pc, #116]	; (800266c <HAL_GPIO_Init+0x334>)
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025fc:	4b1b      	ldr	r3, [pc, #108]	; (800266c <HAL_GPIO_Init+0x334>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	43db      	mvns	r3, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d003      	beq.n	8002620 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	4313      	orrs	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002620:	4a12      	ldr	r2, [pc, #72]	; (800266c <HAL_GPIO_Init+0x334>)
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	3301      	adds	r3, #1
 800262a:	61fb      	str	r3, [r7, #28]
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	2b0f      	cmp	r3, #15
 8002630:	f67f ae90 	bls.w	8002354 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002634:	bf00      	nop
 8002636:	bf00      	nop
 8002638:	3724      	adds	r7, #36	; 0x24
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40023800 	.word	0x40023800
 8002648:	40013800 	.word	0x40013800
 800264c:	40020000 	.word	0x40020000
 8002650:	40020400 	.word	0x40020400
 8002654:	40020800 	.word	0x40020800
 8002658:	40020c00 	.word	0x40020c00
 800265c:	40021000 	.word	0x40021000
 8002660:	40021400 	.word	0x40021400
 8002664:	40021800 	.word	0x40021800
 8002668:	40021c00 	.word	0x40021c00
 800266c:	40013c00 	.word	0x40013c00

08002670 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	460b      	mov	r3, r1
 800267a:	807b      	strh	r3, [r7, #2]
 800267c:	4613      	mov	r3, r2
 800267e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002680:	787b      	ldrb	r3, [r7, #1]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002686:	887a      	ldrh	r2, [r7, #2]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800268c:	e003      	b.n	8002696 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800268e:	887b      	ldrh	r3, [r7, #2]
 8002690:	041a      	lsls	r2, r3, #16
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	619a      	str	r2, [r3, #24]
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
	...

080026a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e264      	b.n	8002b80 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d075      	beq.n	80027ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026c2:	4ba3      	ldr	r3, [pc, #652]	; (8002950 <HAL_RCC_OscConfig+0x2ac>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 030c 	and.w	r3, r3, #12
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	d00c      	beq.n	80026e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ce:	4ba0      	ldr	r3, [pc, #640]	; (8002950 <HAL_RCC_OscConfig+0x2ac>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026d6:	2b08      	cmp	r3, #8
 80026d8:	d112      	bne.n	8002700 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026da:	4b9d      	ldr	r3, [pc, #628]	; (8002950 <HAL_RCC_OscConfig+0x2ac>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026e6:	d10b      	bne.n	8002700 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e8:	4b99      	ldr	r3, [pc, #612]	; (8002950 <HAL_RCC_OscConfig+0x2ac>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d05b      	beq.n	80027ac <HAL_RCC_OscConfig+0x108>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d157      	bne.n	80027ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e23f      	b.n	8002b80 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002708:	d106      	bne.n	8002718 <HAL_RCC_OscConfig+0x74>
 800270a:	4b91      	ldr	r3, [pc, #580]	; (8002950 <HAL_RCC_OscConfig+0x2ac>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a90      	ldr	r2, [pc, #576]	; (8002950 <HAL_RCC_OscConfig+0x2ac>)
 8002710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	e01d      	b.n	8002754 <HAL_RCC_OscConfig+0xb0>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002720:	d10c      	bne.n	800273c <HAL_RCC_OscConfig+0x98>
 8002722:	4b8b      	ldr	r3, [pc, #556]	; (8002950 <HAL_RCC_OscConfig+0x2ac>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a8a      	ldr	r2, [pc, #552]	; (8002950 <HAL_RCC_OscConfig+0x2ac>)
 8002728:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800272c:	6013      	str	r3, [r2, #0]
 800272e:	4b88      	ldr	r3, [pc, #544]	; (8002950 <HAL_RCC_OscConfig+0x2ac>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a87      	ldr	r2, [pc, #540]	; (8002950 <HAL_RCC_OscConfig+0x2ac>)
 8002734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002738:	6013      	str	r3, [r2, #0]
 800273a:	e00b      	b.n	8002754 <HAL_RCC_OscConfig+0xb0>
 800273c:	4b84      	ldr	r3, [pc, #528]	; (8002950 <HAL_RCC_OscConfig+0x2ac>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a83      	ldr	r2, [pc, #524]	; (8002950 <HAL_RCC_OscConfig+0x2ac>)
 8002742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002746:	6013      	str	r3, [r2, #0]
 8002748:	4b81      	ldr	r3, [pc, #516]	; (8002950 <HAL_RCC_OscConfig+0x2ac>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a80      	ldr	r2, [pc, #512]	; (8002950 <HAL_RCC_OscConfig+0x2ac>)
 800274e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002752:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d013      	beq.n	8002784 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275c:	f7fe fb34 	bl	8000dc8 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002764:	f7fe fb30 	bl	8000dc8 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b64      	cmp	r3, #100	; 0x64
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e204      	b.n	8002b80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002776:	4b76      	ldr	r3, [pc, #472]	; (8002950 <HAL_RCC_OscConfig+0x2ac>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0f0      	beq.n	8002764 <HAL_RCC_OscConfig+0xc0>
 8002782:	e014      	b.n	80027ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002784:	f7fe fb20 	bl	8000dc8 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800278c:	f7fe fb1c 	bl	8000dc8 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b64      	cmp	r3, #100	; 0x64
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e1f0      	b.n	8002b80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800279e:	4b6c      	ldr	r3, [pc, #432]	; (8002950 <HAL_RCC_OscConfig+0x2ac>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f0      	bne.n	800278c <HAL_RCC_OscConfig+0xe8>
 80027aa:	e000      	b.n	80027ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d063      	beq.n	8002882 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027ba:	4b65      	ldr	r3, [pc, #404]	; (8002950 <HAL_RCC_OscConfig+0x2ac>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 030c 	and.w	r3, r3, #12
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00b      	beq.n	80027de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027c6:	4b62      	ldr	r3, [pc, #392]	; (8002950 <HAL_RCC_OscConfig+0x2ac>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027ce:	2b08      	cmp	r3, #8
 80027d0:	d11c      	bne.n	800280c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027d2:	4b5f      	ldr	r3, [pc, #380]	; (8002950 <HAL_RCC_OscConfig+0x2ac>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d116      	bne.n	800280c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027de:	4b5c      	ldr	r3, [pc, #368]	; (8002950 <HAL_RCC_OscConfig+0x2ac>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d005      	beq.n	80027f6 <HAL_RCC_OscConfig+0x152>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d001      	beq.n	80027f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e1c4      	b.n	8002b80 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f6:	4b56      	ldr	r3, [pc, #344]	; (8002950 <HAL_RCC_OscConfig+0x2ac>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	4952      	ldr	r1, [pc, #328]	; (8002950 <HAL_RCC_OscConfig+0x2ac>)
 8002806:	4313      	orrs	r3, r2
 8002808:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800280a:	e03a      	b.n	8002882 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d020      	beq.n	8002856 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002814:	4b4f      	ldr	r3, [pc, #316]	; (8002954 <HAL_RCC_OscConfig+0x2b0>)
 8002816:	2201      	movs	r2, #1
 8002818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281a:	f7fe fad5 	bl	8000dc8 <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002822:	f7fe fad1 	bl	8000dc8 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e1a5      	b.n	8002b80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002834:	4b46      	ldr	r3, [pc, #280]	; (8002950 <HAL_RCC_OscConfig+0x2ac>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d0f0      	beq.n	8002822 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002840:	4b43      	ldr	r3, [pc, #268]	; (8002950 <HAL_RCC_OscConfig+0x2ac>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	4940      	ldr	r1, [pc, #256]	; (8002950 <HAL_RCC_OscConfig+0x2ac>)
 8002850:	4313      	orrs	r3, r2
 8002852:	600b      	str	r3, [r1, #0]
 8002854:	e015      	b.n	8002882 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002856:	4b3f      	ldr	r3, [pc, #252]	; (8002954 <HAL_RCC_OscConfig+0x2b0>)
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285c:	f7fe fab4 	bl	8000dc8 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002864:	f7fe fab0 	bl	8000dc8 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e184      	b.n	8002b80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002876:	4b36      	ldr	r3, [pc, #216]	; (8002950 <HAL_RCC_OscConfig+0x2ac>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1f0      	bne.n	8002864 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0308 	and.w	r3, r3, #8
 800288a:	2b00      	cmp	r3, #0
 800288c:	d030      	beq.n	80028f0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d016      	beq.n	80028c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002896:	4b30      	ldr	r3, [pc, #192]	; (8002958 <HAL_RCC_OscConfig+0x2b4>)
 8002898:	2201      	movs	r2, #1
 800289a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800289c:	f7fe fa94 	bl	8000dc8 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028a4:	f7fe fa90 	bl	8000dc8 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e164      	b.n	8002b80 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028b6:	4b26      	ldr	r3, [pc, #152]	; (8002950 <HAL_RCC_OscConfig+0x2ac>)
 80028b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d0f0      	beq.n	80028a4 <HAL_RCC_OscConfig+0x200>
 80028c2:	e015      	b.n	80028f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028c4:	4b24      	ldr	r3, [pc, #144]	; (8002958 <HAL_RCC_OscConfig+0x2b4>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ca:	f7fe fa7d 	bl	8000dc8 <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d0:	e008      	b.n	80028e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028d2:	f7fe fa79 	bl	8000dc8 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e14d      	b.n	8002b80 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028e4:	4b1a      	ldr	r3, [pc, #104]	; (8002950 <HAL_RCC_OscConfig+0x2ac>)
 80028e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1f0      	bne.n	80028d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 80a0 	beq.w	8002a3e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028fe:	2300      	movs	r3, #0
 8002900:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002902:	4b13      	ldr	r3, [pc, #76]	; (8002950 <HAL_RCC_OscConfig+0x2ac>)
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10f      	bne.n	800292e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800290e:	2300      	movs	r3, #0
 8002910:	60bb      	str	r3, [r7, #8]
 8002912:	4b0f      	ldr	r3, [pc, #60]	; (8002950 <HAL_RCC_OscConfig+0x2ac>)
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	4a0e      	ldr	r2, [pc, #56]	; (8002950 <HAL_RCC_OscConfig+0x2ac>)
 8002918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800291c:	6413      	str	r3, [r2, #64]	; 0x40
 800291e:	4b0c      	ldr	r3, [pc, #48]	; (8002950 <HAL_RCC_OscConfig+0x2ac>)
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002926:	60bb      	str	r3, [r7, #8]
 8002928:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800292a:	2301      	movs	r3, #1
 800292c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800292e:	4b0b      	ldr	r3, [pc, #44]	; (800295c <HAL_RCC_OscConfig+0x2b8>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002936:	2b00      	cmp	r3, #0
 8002938:	d121      	bne.n	800297e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800293a:	4b08      	ldr	r3, [pc, #32]	; (800295c <HAL_RCC_OscConfig+0x2b8>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a07      	ldr	r2, [pc, #28]	; (800295c <HAL_RCC_OscConfig+0x2b8>)
 8002940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002944:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002946:	f7fe fa3f 	bl	8000dc8 <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800294c:	e011      	b.n	8002972 <HAL_RCC_OscConfig+0x2ce>
 800294e:	bf00      	nop
 8002950:	40023800 	.word	0x40023800
 8002954:	42470000 	.word	0x42470000
 8002958:	42470e80 	.word	0x42470e80
 800295c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002960:	f7fe fa32 	bl	8000dc8 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e106      	b.n	8002b80 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002972:	4b85      	ldr	r3, [pc, #532]	; (8002b88 <HAL_RCC_OscConfig+0x4e4>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297a:	2b00      	cmp	r3, #0
 800297c:	d0f0      	beq.n	8002960 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d106      	bne.n	8002994 <HAL_RCC_OscConfig+0x2f0>
 8002986:	4b81      	ldr	r3, [pc, #516]	; (8002b8c <HAL_RCC_OscConfig+0x4e8>)
 8002988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800298a:	4a80      	ldr	r2, [pc, #512]	; (8002b8c <HAL_RCC_OscConfig+0x4e8>)
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	6713      	str	r3, [r2, #112]	; 0x70
 8002992:	e01c      	b.n	80029ce <HAL_RCC_OscConfig+0x32a>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	2b05      	cmp	r3, #5
 800299a:	d10c      	bne.n	80029b6 <HAL_RCC_OscConfig+0x312>
 800299c:	4b7b      	ldr	r3, [pc, #492]	; (8002b8c <HAL_RCC_OscConfig+0x4e8>)
 800299e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a0:	4a7a      	ldr	r2, [pc, #488]	; (8002b8c <HAL_RCC_OscConfig+0x4e8>)
 80029a2:	f043 0304 	orr.w	r3, r3, #4
 80029a6:	6713      	str	r3, [r2, #112]	; 0x70
 80029a8:	4b78      	ldr	r3, [pc, #480]	; (8002b8c <HAL_RCC_OscConfig+0x4e8>)
 80029aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ac:	4a77      	ldr	r2, [pc, #476]	; (8002b8c <HAL_RCC_OscConfig+0x4e8>)
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	6713      	str	r3, [r2, #112]	; 0x70
 80029b4:	e00b      	b.n	80029ce <HAL_RCC_OscConfig+0x32a>
 80029b6:	4b75      	ldr	r3, [pc, #468]	; (8002b8c <HAL_RCC_OscConfig+0x4e8>)
 80029b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ba:	4a74      	ldr	r2, [pc, #464]	; (8002b8c <HAL_RCC_OscConfig+0x4e8>)
 80029bc:	f023 0301 	bic.w	r3, r3, #1
 80029c0:	6713      	str	r3, [r2, #112]	; 0x70
 80029c2:	4b72      	ldr	r3, [pc, #456]	; (8002b8c <HAL_RCC_OscConfig+0x4e8>)
 80029c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c6:	4a71      	ldr	r2, [pc, #452]	; (8002b8c <HAL_RCC_OscConfig+0x4e8>)
 80029c8:	f023 0304 	bic.w	r3, r3, #4
 80029cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d015      	beq.n	8002a02 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d6:	f7fe f9f7 	bl	8000dc8 <HAL_GetTick>
 80029da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029dc:	e00a      	b.n	80029f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029de:	f7fe f9f3 	bl	8000dc8 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e0c5      	b.n	8002b80 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f4:	4b65      	ldr	r3, [pc, #404]	; (8002b8c <HAL_RCC_OscConfig+0x4e8>)
 80029f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0ee      	beq.n	80029de <HAL_RCC_OscConfig+0x33a>
 8002a00:	e014      	b.n	8002a2c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a02:	f7fe f9e1 	bl	8000dc8 <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a08:	e00a      	b.n	8002a20 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a0a:	f7fe f9dd 	bl	8000dc8 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e0af      	b.n	8002b80 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a20:	4b5a      	ldr	r3, [pc, #360]	; (8002b8c <HAL_RCC_OscConfig+0x4e8>)
 8002a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1ee      	bne.n	8002a0a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a2c:	7dfb      	ldrb	r3, [r7, #23]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d105      	bne.n	8002a3e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a32:	4b56      	ldr	r3, [pc, #344]	; (8002b8c <HAL_RCC_OscConfig+0x4e8>)
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	4a55      	ldr	r2, [pc, #340]	; (8002b8c <HAL_RCC_OscConfig+0x4e8>)
 8002a38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 809b 	beq.w	8002b7e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a48:	4b50      	ldr	r3, [pc, #320]	; (8002b8c <HAL_RCC_OscConfig+0x4e8>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 030c 	and.w	r3, r3, #12
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d05c      	beq.n	8002b0e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d141      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a5c:	4b4c      	ldr	r3, [pc, #304]	; (8002b90 <HAL_RCC_OscConfig+0x4ec>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a62:	f7fe f9b1 	bl	8000dc8 <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a6a:	f7fe f9ad 	bl	8000dc8 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e081      	b.n	8002b80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a7c:	4b43      	ldr	r3, [pc, #268]	; (8002b8c <HAL_RCC_OscConfig+0x4e8>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1f0      	bne.n	8002a6a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	69da      	ldr	r2, [r3, #28]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	431a      	orrs	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a96:	019b      	lsls	r3, r3, #6
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9e:	085b      	lsrs	r3, r3, #1
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	041b      	lsls	r3, r3, #16
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aaa:	061b      	lsls	r3, r3, #24
 8002aac:	4937      	ldr	r1, [pc, #220]	; (8002b8c <HAL_RCC_OscConfig+0x4e8>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ab2:	4b37      	ldr	r3, [pc, #220]	; (8002b90 <HAL_RCC_OscConfig+0x4ec>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab8:	f7fe f986 	bl	8000dc8 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ac0:	f7fe f982 	bl	8000dc8 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e056      	b.n	8002b80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad2:	4b2e      	ldr	r3, [pc, #184]	; (8002b8c <HAL_RCC_OscConfig+0x4e8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d0f0      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x41c>
 8002ade:	e04e      	b.n	8002b7e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae0:	4b2b      	ldr	r3, [pc, #172]	; (8002b90 <HAL_RCC_OscConfig+0x4ec>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae6:	f7fe f96f 	bl	8000dc8 <HAL_GetTick>
 8002aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aec:	e008      	b.n	8002b00 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aee:	f7fe f96b 	bl	8000dc8 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d901      	bls.n	8002b00 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e03f      	b.n	8002b80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b00:	4b22      	ldr	r3, [pc, #136]	; (8002b8c <HAL_RCC_OscConfig+0x4e8>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1f0      	bne.n	8002aee <HAL_RCC_OscConfig+0x44a>
 8002b0c:	e037      	b.n	8002b7e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d101      	bne.n	8002b1a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e032      	b.n	8002b80 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b1a:	4b1c      	ldr	r3, [pc, #112]	; (8002b8c <HAL_RCC_OscConfig+0x4e8>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d028      	beq.n	8002b7a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d121      	bne.n	8002b7a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d11a      	bne.n	8002b7a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b50:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d111      	bne.n	8002b7a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b60:	085b      	lsrs	r3, r3, #1
 8002b62:	3b01      	subs	r3, #1
 8002b64:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d107      	bne.n	8002b7a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b74:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d001      	beq.n	8002b7e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e000      	b.n	8002b80 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3718      	adds	r7, #24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40007000 	.word	0x40007000
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	42470060 	.word	0x42470060

08002b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e0cc      	b.n	8002d42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ba8:	4b68      	ldr	r3, [pc, #416]	; (8002d4c <HAL_RCC_ClockConfig+0x1b8>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0307 	and.w	r3, r3, #7
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d90c      	bls.n	8002bd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb6:	4b65      	ldr	r3, [pc, #404]	; (8002d4c <HAL_RCC_ClockConfig+0x1b8>)
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bbe:	4b63      	ldr	r3, [pc, #396]	; (8002d4c <HAL_RCC_ClockConfig+0x1b8>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d001      	beq.n	8002bd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e0b8      	b.n	8002d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d020      	beq.n	8002c1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d005      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002be8:	4b59      	ldr	r3, [pc, #356]	; (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	4a58      	ldr	r2, [pc, #352]	; (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002bee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bf2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0308 	and.w	r3, r3, #8
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d005      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c00:	4b53      	ldr	r3, [pc, #332]	; (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	4a52      	ldr	r2, [pc, #328]	; (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c0c:	4b50      	ldr	r3, [pc, #320]	; (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	494d      	ldr	r1, [pc, #308]	; (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d044      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d107      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c32:	4b47      	ldr	r3, [pc, #284]	; (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d119      	bne.n	8002c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e07f      	b.n	8002d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d003      	beq.n	8002c52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c4e:	2b03      	cmp	r3, #3
 8002c50:	d107      	bne.n	8002c62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c52:	4b3f      	ldr	r3, [pc, #252]	; (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d109      	bne.n	8002c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e06f      	b.n	8002d42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c62:	4b3b      	ldr	r3, [pc, #236]	; (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e067      	b.n	8002d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c72:	4b37      	ldr	r3, [pc, #220]	; (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f023 0203 	bic.w	r2, r3, #3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	4934      	ldr	r1, [pc, #208]	; (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c84:	f7fe f8a0 	bl	8000dc8 <HAL_GetTick>
 8002c88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c8a:	e00a      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c8c:	f7fe f89c 	bl	8000dc8 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e04f      	b.n	8002d42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca2:	4b2b      	ldr	r3, [pc, #172]	; (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 020c 	and.w	r2, r3, #12
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d1eb      	bne.n	8002c8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cb4:	4b25      	ldr	r3, [pc, #148]	; (8002d4c <HAL_RCC_ClockConfig+0x1b8>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d20c      	bcs.n	8002cdc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc2:	4b22      	ldr	r3, [pc, #136]	; (8002d4c <HAL_RCC_ClockConfig+0x1b8>)
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	b2d2      	uxtb	r2, r2
 8002cc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cca:	4b20      	ldr	r3, [pc, #128]	; (8002d4c <HAL_RCC_ClockConfig+0x1b8>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d001      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e032      	b.n	8002d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d008      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ce8:	4b19      	ldr	r3, [pc, #100]	; (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	4916      	ldr	r1, [pc, #88]	; (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0308 	and.w	r3, r3, #8
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d009      	beq.n	8002d1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d06:	4b12      	ldr	r3, [pc, #72]	; (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	490e      	ldr	r1, [pc, #56]	; (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d1a:	f000 f821 	bl	8002d60 <HAL_RCC_GetSysClockFreq>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <HAL_RCC_ClockConfig+0x1bc>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	091b      	lsrs	r3, r3, #4
 8002d26:	f003 030f 	and.w	r3, r3, #15
 8002d2a:	490a      	ldr	r1, [pc, #40]	; (8002d54 <HAL_RCC_ClockConfig+0x1c0>)
 8002d2c:	5ccb      	ldrb	r3, [r1, r3]
 8002d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d32:	4a09      	ldr	r2, [pc, #36]	; (8002d58 <HAL_RCC_ClockConfig+0x1c4>)
 8002d34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d36:	4b09      	ldr	r3, [pc, #36]	; (8002d5c <HAL_RCC_ClockConfig+0x1c8>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7fd fe84 	bl	8000a48 <HAL_InitTick>

  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	40023c00 	.word	0x40023c00
 8002d50:	40023800 	.word	0x40023800
 8002d54:	08019e78 	.word	0x08019e78
 8002d58:	20000000 	.word	0x20000000
 8002d5c:	20000004 	.word	0x20000004

08002d60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d64:	b084      	sub	sp, #16
 8002d66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	607b      	str	r3, [r7, #4]
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60fb      	str	r3, [r7, #12]
 8002d70:	2300      	movs	r3, #0
 8002d72:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002d74:	2300      	movs	r3, #0
 8002d76:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d78:	4b67      	ldr	r3, [pc, #412]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f003 030c 	and.w	r3, r3, #12
 8002d80:	2b08      	cmp	r3, #8
 8002d82:	d00d      	beq.n	8002da0 <HAL_RCC_GetSysClockFreq+0x40>
 8002d84:	2b08      	cmp	r3, #8
 8002d86:	f200 80bd 	bhi.w	8002f04 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d002      	beq.n	8002d94 <HAL_RCC_GetSysClockFreq+0x34>
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	d003      	beq.n	8002d9a <HAL_RCC_GetSysClockFreq+0x3a>
 8002d92:	e0b7      	b.n	8002f04 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d94:	4b61      	ldr	r3, [pc, #388]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002d96:	60bb      	str	r3, [r7, #8]
       break;
 8002d98:	e0b7      	b.n	8002f0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d9a:	4b61      	ldr	r3, [pc, #388]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002d9c:	60bb      	str	r3, [r7, #8]
      break;
 8002d9e:	e0b4      	b.n	8002f0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002da0:	4b5d      	ldr	r3, [pc, #372]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002da8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002daa:	4b5b      	ldr	r3, [pc, #364]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d04d      	beq.n	8002e52 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002db6:	4b58      	ldr	r3, [pc, #352]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	099b      	lsrs	r3, r3, #6
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	f04f 0300 	mov.w	r3, #0
 8002dc2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002dc6:	f04f 0100 	mov.w	r1, #0
 8002dca:	ea02 0800 	and.w	r8, r2, r0
 8002dce:	ea03 0901 	and.w	r9, r3, r1
 8002dd2:	4640      	mov	r0, r8
 8002dd4:	4649      	mov	r1, r9
 8002dd6:	f04f 0200 	mov.w	r2, #0
 8002dda:	f04f 0300 	mov.w	r3, #0
 8002dde:	014b      	lsls	r3, r1, #5
 8002de0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002de4:	0142      	lsls	r2, r0, #5
 8002de6:	4610      	mov	r0, r2
 8002de8:	4619      	mov	r1, r3
 8002dea:	ebb0 0008 	subs.w	r0, r0, r8
 8002dee:	eb61 0109 	sbc.w	r1, r1, r9
 8002df2:	f04f 0200 	mov.w	r2, #0
 8002df6:	f04f 0300 	mov.w	r3, #0
 8002dfa:	018b      	lsls	r3, r1, #6
 8002dfc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e00:	0182      	lsls	r2, r0, #6
 8002e02:	1a12      	subs	r2, r2, r0
 8002e04:	eb63 0301 	sbc.w	r3, r3, r1
 8002e08:	f04f 0000 	mov.w	r0, #0
 8002e0c:	f04f 0100 	mov.w	r1, #0
 8002e10:	00d9      	lsls	r1, r3, #3
 8002e12:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e16:	00d0      	lsls	r0, r2, #3
 8002e18:	4602      	mov	r2, r0
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	eb12 0208 	adds.w	r2, r2, r8
 8002e20:	eb43 0309 	adc.w	r3, r3, r9
 8002e24:	f04f 0000 	mov.w	r0, #0
 8002e28:	f04f 0100 	mov.w	r1, #0
 8002e2c:	0259      	lsls	r1, r3, #9
 8002e2e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002e32:	0250      	lsls	r0, r2, #9
 8002e34:	4602      	mov	r2, r0
 8002e36:	460b      	mov	r3, r1
 8002e38:	4610      	mov	r0, r2
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	f04f 0300 	mov.w	r3, #0
 8002e44:	f7fd fa14 	bl	8000270 <__aeabi_uldivmod>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	60fb      	str	r3, [r7, #12]
 8002e50:	e04a      	b.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e52:	4b31      	ldr	r3, [pc, #196]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	099b      	lsrs	r3, r3, #6
 8002e58:	461a      	mov	r2, r3
 8002e5a:	f04f 0300 	mov.w	r3, #0
 8002e5e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e62:	f04f 0100 	mov.w	r1, #0
 8002e66:	ea02 0400 	and.w	r4, r2, r0
 8002e6a:	ea03 0501 	and.w	r5, r3, r1
 8002e6e:	4620      	mov	r0, r4
 8002e70:	4629      	mov	r1, r5
 8002e72:	f04f 0200 	mov.w	r2, #0
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	014b      	lsls	r3, r1, #5
 8002e7c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e80:	0142      	lsls	r2, r0, #5
 8002e82:	4610      	mov	r0, r2
 8002e84:	4619      	mov	r1, r3
 8002e86:	1b00      	subs	r0, r0, r4
 8002e88:	eb61 0105 	sbc.w	r1, r1, r5
 8002e8c:	f04f 0200 	mov.w	r2, #0
 8002e90:	f04f 0300 	mov.w	r3, #0
 8002e94:	018b      	lsls	r3, r1, #6
 8002e96:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e9a:	0182      	lsls	r2, r0, #6
 8002e9c:	1a12      	subs	r2, r2, r0
 8002e9e:	eb63 0301 	sbc.w	r3, r3, r1
 8002ea2:	f04f 0000 	mov.w	r0, #0
 8002ea6:	f04f 0100 	mov.w	r1, #0
 8002eaa:	00d9      	lsls	r1, r3, #3
 8002eac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002eb0:	00d0      	lsls	r0, r2, #3
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	1912      	adds	r2, r2, r4
 8002eb8:	eb45 0303 	adc.w	r3, r5, r3
 8002ebc:	f04f 0000 	mov.w	r0, #0
 8002ec0:	f04f 0100 	mov.w	r1, #0
 8002ec4:	0299      	lsls	r1, r3, #10
 8002ec6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002eca:	0290      	lsls	r0, r2, #10
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4610      	mov	r0, r2
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	f04f 0300 	mov.w	r3, #0
 8002edc:	f7fd f9c8 	bl	8000270 <__aeabi_uldivmod>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ee8:	4b0b      	ldr	r3, [pc, #44]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	0c1b      	lsrs	r3, r3, #16
 8002eee:	f003 0303 	and.w	r3, r3, #3
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f00:	60bb      	str	r3, [r7, #8]
      break;
 8002f02:	e002      	b.n	8002f0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f04:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002f06:	60bb      	str	r3, [r7, #8]
      break;
 8002f08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f0a:	68bb      	ldr	r3, [r7, #8]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f16:	bf00      	nop
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	00f42400 	.word	0x00f42400
 8002f20:	007a1200 	.word	0x007a1200

08002f24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f28:	4b03      	ldr	r3, [pc, #12]	; (8002f38 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	20000000 	.word	0x20000000

08002f3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f40:	f7ff fff0 	bl	8002f24 <HAL_RCC_GetHCLKFreq>
 8002f44:	4602      	mov	r2, r0
 8002f46:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	0a9b      	lsrs	r3, r3, #10
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	4903      	ldr	r1, [pc, #12]	; (8002f60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f52:	5ccb      	ldrb	r3, [r1, r3]
 8002f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	08019e88 	.word	0x08019e88

08002f64 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	220f      	movs	r2, #15
 8002f72:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f74:	4b12      	ldr	r3, [pc, #72]	; (8002fc0 <HAL_RCC_GetClockConfig+0x5c>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f003 0203 	and.w	r2, r3, #3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f80:	4b0f      	ldr	r3, [pc, #60]	; (8002fc0 <HAL_RCC_GetClockConfig+0x5c>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f8c:	4b0c      	ldr	r3, [pc, #48]	; (8002fc0 <HAL_RCC_GetClockConfig+0x5c>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002f98:	4b09      	ldr	r3, [pc, #36]	; (8002fc0 <HAL_RCC_GetClockConfig+0x5c>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	08db      	lsrs	r3, r3, #3
 8002f9e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002fa6:	4b07      	ldr	r3, [pc, #28]	; (8002fc4 <HAL_RCC_GetClockConfig+0x60>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0207 	and.w	r2, r3, #7
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	601a      	str	r2, [r3, #0]
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	40023c00 	.word	0x40023c00

08002fc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e041      	b.n	800305e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d106      	bne.n	8002ff4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f839 	bl	8003066 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3304      	adds	r3, #4
 8003004:	4619      	mov	r1, r3
 8003006:	4610      	mov	r0, r2
 8003008:	f000 f9d8 	bl	80033bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003066:	b480      	push	{r7}
 8003068:	b083      	sub	sp, #12
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
	...

0800307c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b01      	cmp	r3, #1
 800308e:	d001      	beq.n	8003094 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e04e      	b.n	8003132 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2202      	movs	r2, #2
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68da      	ldr	r2, [r3, #12]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0201 	orr.w	r2, r2, #1
 80030aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a23      	ldr	r2, [pc, #140]	; (8003140 <HAL_TIM_Base_Start_IT+0xc4>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d022      	beq.n	80030fc <HAL_TIM_Base_Start_IT+0x80>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030be:	d01d      	beq.n	80030fc <HAL_TIM_Base_Start_IT+0x80>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a1f      	ldr	r2, [pc, #124]	; (8003144 <HAL_TIM_Base_Start_IT+0xc8>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d018      	beq.n	80030fc <HAL_TIM_Base_Start_IT+0x80>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a1e      	ldr	r2, [pc, #120]	; (8003148 <HAL_TIM_Base_Start_IT+0xcc>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d013      	beq.n	80030fc <HAL_TIM_Base_Start_IT+0x80>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a1c      	ldr	r2, [pc, #112]	; (800314c <HAL_TIM_Base_Start_IT+0xd0>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d00e      	beq.n	80030fc <HAL_TIM_Base_Start_IT+0x80>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a1b      	ldr	r2, [pc, #108]	; (8003150 <HAL_TIM_Base_Start_IT+0xd4>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d009      	beq.n	80030fc <HAL_TIM_Base_Start_IT+0x80>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a19      	ldr	r2, [pc, #100]	; (8003154 <HAL_TIM_Base_Start_IT+0xd8>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d004      	beq.n	80030fc <HAL_TIM_Base_Start_IT+0x80>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a18      	ldr	r2, [pc, #96]	; (8003158 <HAL_TIM_Base_Start_IT+0xdc>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d111      	bne.n	8003120 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2b06      	cmp	r3, #6
 800310c:	d010      	beq.n	8003130 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f042 0201 	orr.w	r2, r2, #1
 800311c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800311e:	e007      	b.n	8003130 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 0201 	orr.w	r2, r2, #1
 800312e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3714      	adds	r7, #20
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	40010000 	.word	0x40010000
 8003144:	40000400 	.word	0x40000400
 8003148:	40000800 	.word	0x40000800
 800314c:	40000c00 	.word	0x40000c00
 8003150:	40010400 	.word	0x40010400
 8003154:	40014000 	.word	0x40014000
 8003158:	40001800 	.word	0x40001800

0800315c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b02      	cmp	r3, #2
 8003170:	d122      	bne.n	80031b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b02      	cmp	r3, #2
 800317e:	d11b      	bne.n	80031b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f06f 0202 	mvn.w	r2, #2
 8003188:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f8ee 	bl	8003380 <HAL_TIM_IC_CaptureCallback>
 80031a4:	e005      	b.n	80031b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f8e0 	bl	800336c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f8f1 	bl	8003394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	f003 0304 	and.w	r3, r3, #4
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	d122      	bne.n	800320c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	d11b      	bne.n	800320c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f06f 0204 	mvn.w	r2, #4
 80031dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2202      	movs	r2, #2
 80031e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f8c4 	bl	8003380 <HAL_TIM_IC_CaptureCallback>
 80031f8:	e005      	b.n	8003206 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f8b6 	bl	800336c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 f8c7 	bl	8003394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	f003 0308 	and.w	r3, r3, #8
 8003216:	2b08      	cmp	r3, #8
 8003218:	d122      	bne.n	8003260 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	f003 0308 	and.w	r3, r3, #8
 8003224:	2b08      	cmp	r3, #8
 8003226:	d11b      	bne.n	8003260 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f06f 0208 	mvn.w	r2, #8
 8003230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2204      	movs	r2, #4
 8003236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	f003 0303 	and.w	r3, r3, #3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f89a 	bl	8003380 <HAL_TIM_IC_CaptureCallback>
 800324c:	e005      	b.n	800325a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f88c 	bl	800336c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 f89d 	bl	8003394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	f003 0310 	and.w	r3, r3, #16
 800326a:	2b10      	cmp	r3, #16
 800326c:	d122      	bne.n	80032b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	f003 0310 	and.w	r3, r3, #16
 8003278:	2b10      	cmp	r3, #16
 800327a:	d11b      	bne.n	80032b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f06f 0210 	mvn.w	r2, #16
 8003284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2208      	movs	r2, #8
 800328a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f870 	bl	8003380 <HAL_TIM_IC_CaptureCallback>
 80032a0:	e005      	b.n	80032ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f862 	bl	800336c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 f873 	bl	8003394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d10e      	bne.n	80032e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d107      	bne.n	80032e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f06f 0201 	mvn.w	r2, #1
 80032d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7fd fb70 	bl	80009c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ea:	2b80      	cmp	r3, #128	; 0x80
 80032ec:	d10e      	bne.n	800330c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f8:	2b80      	cmp	r3, #128	; 0x80
 80032fa:	d107      	bne.n	800330c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f902 	bl	8003510 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003316:	2b40      	cmp	r3, #64	; 0x40
 8003318:	d10e      	bne.n	8003338 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003324:	2b40      	cmp	r3, #64	; 0x40
 8003326:	d107      	bne.n	8003338 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f838 	bl	80033a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	f003 0320 	and.w	r3, r3, #32
 8003342:	2b20      	cmp	r3, #32
 8003344:	d10e      	bne.n	8003364 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	f003 0320 	and.w	r3, r3, #32
 8003350:	2b20      	cmp	r3, #32
 8003352:	d107      	bne.n	8003364 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f06f 0220 	mvn.w	r2, #32
 800335c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 f8cc 	bl	80034fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003364:	bf00      	nop
 8003366:	3708      	adds	r7, #8
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a40      	ldr	r2, [pc, #256]	; (80034d0 <TIM_Base_SetConfig+0x114>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d013      	beq.n	80033fc <TIM_Base_SetConfig+0x40>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033da:	d00f      	beq.n	80033fc <TIM_Base_SetConfig+0x40>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a3d      	ldr	r2, [pc, #244]	; (80034d4 <TIM_Base_SetConfig+0x118>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d00b      	beq.n	80033fc <TIM_Base_SetConfig+0x40>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a3c      	ldr	r2, [pc, #240]	; (80034d8 <TIM_Base_SetConfig+0x11c>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d007      	beq.n	80033fc <TIM_Base_SetConfig+0x40>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a3b      	ldr	r2, [pc, #236]	; (80034dc <TIM_Base_SetConfig+0x120>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d003      	beq.n	80033fc <TIM_Base_SetConfig+0x40>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a3a      	ldr	r2, [pc, #232]	; (80034e0 <TIM_Base_SetConfig+0x124>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d108      	bne.n	800340e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003402:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	4313      	orrs	r3, r2
 800340c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a2f      	ldr	r2, [pc, #188]	; (80034d0 <TIM_Base_SetConfig+0x114>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d02b      	beq.n	800346e <TIM_Base_SetConfig+0xb2>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800341c:	d027      	beq.n	800346e <TIM_Base_SetConfig+0xb2>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a2c      	ldr	r2, [pc, #176]	; (80034d4 <TIM_Base_SetConfig+0x118>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d023      	beq.n	800346e <TIM_Base_SetConfig+0xb2>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a2b      	ldr	r2, [pc, #172]	; (80034d8 <TIM_Base_SetConfig+0x11c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d01f      	beq.n	800346e <TIM_Base_SetConfig+0xb2>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a2a      	ldr	r2, [pc, #168]	; (80034dc <TIM_Base_SetConfig+0x120>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d01b      	beq.n	800346e <TIM_Base_SetConfig+0xb2>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a29      	ldr	r2, [pc, #164]	; (80034e0 <TIM_Base_SetConfig+0x124>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d017      	beq.n	800346e <TIM_Base_SetConfig+0xb2>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a28      	ldr	r2, [pc, #160]	; (80034e4 <TIM_Base_SetConfig+0x128>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d013      	beq.n	800346e <TIM_Base_SetConfig+0xb2>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a27      	ldr	r2, [pc, #156]	; (80034e8 <TIM_Base_SetConfig+0x12c>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d00f      	beq.n	800346e <TIM_Base_SetConfig+0xb2>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a26      	ldr	r2, [pc, #152]	; (80034ec <TIM_Base_SetConfig+0x130>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d00b      	beq.n	800346e <TIM_Base_SetConfig+0xb2>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a25      	ldr	r2, [pc, #148]	; (80034f0 <TIM_Base_SetConfig+0x134>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d007      	beq.n	800346e <TIM_Base_SetConfig+0xb2>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a24      	ldr	r2, [pc, #144]	; (80034f4 <TIM_Base_SetConfig+0x138>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d003      	beq.n	800346e <TIM_Base_SetConfig+0xb2>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a23      	ldr	r2, [pc, #140]	; (80034f8 <TIM_Base_SetConfig+0x13c>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d108      	bne.n	8003480 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003474:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	4313      	orrs	r3, r2
 800347e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	4313      	orrs	r3, r2
 800348c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	689a      	ldr	r2, [r3, #8]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a0a      	ldr	r2, [pc, #40]	; (80034d0 <TIM_Base_SetConfig+0x114>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d003      	beq.n	80034b4 <TIM_Base_SetConfig+0xf8>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a0c      	ldr	r2, [pc, #48]	; (80034e0 <TIM_Base_SetConfig+0x124>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d103      	bne.n	80034bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	691a      	ldr	r2, [r3, #16]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	615a      	str	r2, [r3, #20]
}
 80034c2:	bf00      	nop
 80034c4:	3714      	adds	r7, #20
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	40010000 	.word	0x40010000
 80034d4:	40000400 	.word	0x40000400
 80034d8:	40000800 	.word	0x40000800
 80034dc:	40000c00 	.word	0x40000c00
 80034e0:	40010400 	.word	0x40010400
 80034e4:	40014000 	.word	0x40014000
 80034e8:	40014400 	.word	0x40014400
 80034ec:	40014800 	.word	0x40014800
 80034f0:	40001800 	.word	0x40001800
 80034f4:	40001c00 	.word	0x40001c00
 80034f8:	40002000 	.word	0x40002000

080034fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800352a:	4ba0      	ldr	r3, [pc, #640]	; (80037ac <MX_LWIP_Init+0x288>)
 800352c:	22c0      	movs	r2, #192	; 0xc0
 800352e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003530:	4b9e      	ldr	r3, [pc, #632]	; (80037ac <MX_LWIP_Init+0x288>)
 8003532:	22a8      	movs	r2, #168	; 0xa8
 8003534:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 18;
 8003536:	4b9d      	ldr	r3, [pc, #628]	; (80037ac <MX_LWIP_Init+0x288>)
 8003538:	2212      	movs	r2, #18
 800353a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 125;
 800353c:	4b9b      	ldr	r3, [pc, #620]	; (80037ac <MX_LWIP_Init+0x288>)
 800353e:	227d      	movs	r2, #125	; 0x7d
 8003540:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003542:	4b9b      	ldr	r3, [pc, #620]	; (80037b0 <MX_LWIP_Init+0x28c>)
 8003544:	22ff      	movs	r2, #255	; 0xff
 8003546:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003548:	4b99      	ldr	r3, [pc, #612]	; (80037b0 <MX_LWIP_Init+0x28c>)
 800354a:	22ff      	movs	r2, #255	; 0xff
 800354c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800354e:	4b98      	ldr	r3, [pc, #608]	; (80037b0 <MX_LWIP_Init+0x28c>)
 8003550:	22ff      	movs	r2, #255	; 0xff
 8003552:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003554:	4b96      	ldr	r3, [pc, #600]	; (80037b0 <MX_LWIP_Init+0x28c>)
 8003556:	2200      	movs	r2, #0
 8003558:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800355a:	4b96      	ldr	r3, [pc, #600]	; (80037b4 <MX_LWIP_Init+0x290>)
 800355c:	22c0      	movs	r2, #192	; 0xc0
 800355e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8003560:	4b94      	ldr	r3, [pc, #592]	; (80037b4 <MX_LWIP_Init+0x290>)
 8003562:	22a8      	movs	r2, #168	; 0xa8
 8003564:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 18;
 8003566:	4b93      	ldr	r3, [pc, #588]	; (80037b4 <MX_LWIP_Init+0x290>)
 8003568:	2212      	movs	r2, #18
 800356a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800356c:	4b91      	ldr	r3, [pc, #580]	; (80037b4 <MX_LWIP_Init+0x290>)
 800356e:	2201      	movs	r2, #1
 8003570:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8003572:	2100      	movs	r1, #0
 8003574:	2000      	movs	r0, #0
 8003576:	f006 fea3 	bl	800a2c0 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800357a:	4b8c      	ldr	r3, [pc, #560]	; (80037ac <MX_LWIP_Init+0x288>)
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	061a      	lsls	r2, r3, #24
 8003580:	4b8a      	ldr	r3, [pc, #552]	; (80037ac <MX_LWIP_Init+0x288>)
 8003582:	785b      	ldrb	r3, [r3, #1]
 8003584:	041b      	lsls	r3, r3, #16
 8003586:	431a      	orrs	r2, r3
 8003588:	4b88      	ldr	r3, [pc, #544]	; (80037ac <MX_LWIP_Init+0x288>)
 800358a:	789b      	ldrb	r3, [r3, #2]
 800358c:	021b      	lsls	r3, r3, #8
 800358e:	4313      	orrs	r3, r2
 8003590:	4a86      	ldr	r2, [pc, #536]	; (80037ac <MX_LWIP_Init+0x288>)
 8003592:	78d2      	ldrb	r2, [r2, #3]
 8003594:	4313      	orrs	r3, r2
 8003596:	061a      	lsls	r2, r3, #24
 8003598:	4b84      	ldr	r3, [pc, #528]	; (80037ac <MX_LWIP_Init+0x288>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	0619      	lsls	r1, r3, #24
 800359e:	4b83      	ldr	r3, [pc, #524]	; (80037ac <MX_LWIP_Init+0x288>)
 80035a0:	785b      	ldrb	r3, [r3, #1]
 80035a2:	041b      	lsls	r3, r3, #16
 80035a4:	4319      	orrs	r1, r3
 80035a6:	4b81      	ldr	r3, [pc, #516]	; (80037ac <MX_LWIP_Init+0x288>)
 80035a8:	789b      	ldrb	r3, [r3, #2]
 80035aa:	021b      	lsls	r3, r3, #8
 80035ac:	430b      	orrs	r3, r1
 80035ae:	497f      	ldr	r1, [pc, #508]	; (80037ac <MX_LWIP_Init+0x288>)
 80035b0:	78c9      	ldrb	r1, [r1, #3]
 80035b2:	430b      	orrs	r3, r1
 80035b4:	021b      	lsls	r3, r3, #8
 80035b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80035ba:	431a      	orrs	r2, r3
 80035bc:	4b7b      	ldr	r3, [pc, #492]	; (80037ac <MX_LWIP_Init+0x288>)
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	0619      	lsls	r1, r3, #24
 80035c2:	4b7a      	ldr	r3, [pc, #488]	; (80037ac <MX_LWIP_Init+0x288>)
 80035c4:	785b      	ldrb	r3, [r3, #1]
 80035c6:	041b      	lsls	r3, r3, #16
 80035c8:	4319      	orrs	r1, r3
 80035ca:	4b78      	ldr	r3, [pc, #480]	; (80037ac <MX_LWIP_Init+0x288>)
 80035cc:	789b      	ldrb	r3, [r3, #2]
 80035ce:	021b      	lsls	r3, r3, #8
 80035d0:	430b      	orrs	r3, r1
 80035d2:	4976      	ldr	r1, [pc, #472]	; (80037ac <MX_LWIP_Init+0x288>)
 80035d4:	78c9      	ldrb	r1, [r1, #3]
 80035d6:	430b      	orrs	r3, r1
 80035d8:	0a1b      	lsrs	r3, r3, #8
 80035da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80035de:	431a      	orrs	r2, r3
 80035e0:	4b72      	ldr	r3, [pc, #456]	; (80037ac <MX_LWIP_Init+0x288>)
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	0619      	lsls	r1, r3, #24
 80035e6:	4b71      	ldr	r3, [pc, #452]	; (80037ac <MX_LWIP_Init+0x288>)
 80035e8:	785b      	ldrb	r3, [r3, #1]
 80035ea:	041b      	lsls	r3, r3, #16
 80035ec:	4319      	orrs	r1, r3
 80035ee:	4b6f      	ldr	r3, [pc, #444]	; (80037ac <MX_LWIP_Init+0x288>)
 80035f0:	789b      	ldrb	r3, [r3, #2]
 80035f2:	021b      	lsls	r3, r3, #8
 80035f4:	430b      	orrs	r3, r1
 80035f6:	496d      	ldr	r1, [pc, #436]	; (80037ac <MX_LWIP_Init+0x288>)
 80035f8:	78c9      	ldrb	r1, [r1, #3]
 80035fa:	430b      	orrs	r3, r1
 80035fc:	0e1b      	lsrs	r3, r3, #24
 80035fe:	4313      	orrs	r3, r2
 8003600:	4a6d      	ldr	r2, [pc, #436]	; (80037b8 <MX_LWIP_Init+0x294>)
 8003602:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003604:	4b6a      	ldr	r3, [pc, #424]	; (80037b0 <MX_LWIP_Init+0x28c>)
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	061a      	lsls	r2, r3, #24
 800360a:	4b69      	ldr	r3, [pc, #420]	; (80037b0 <MX_LWIP_Init+0x28c>)
 800360c:	785b      	ldrb	r3, [r3, #1]
 800360e:	041b      	lsls	r3, r3, #16
 8003610:	431a      	orrs	r2, r3
 8003612:	4b67      	ldr	r3, [pc, #412]	; (80037b0 <MX_LWIP_Init+0x28c>)
 8003614:	789b      	ldrb	r3, [r3, #2]
 8003616:	021b      	lsls	r3, r3, #8
 8003618:	4313      	orrs	r3, r2
 800361a:	4a65      	ldr	r2, [pc, #404]	; (80037b0 <MX_LWIP_Init+0x28c>)
 800361c:	78d2      	ldrb	r2, [r2, #3]
 800361e:	4313      	orrs	r3, r2
 8003620:	061a      	lsls	r2, r3, #24
 8003622:	4b63      	ldr	r3, [pc, #396]	; (80037b0 <MX_LWIP_Init+0x28c>)
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	0619      	lsls	r1, r3, #24
 8003628:	4b61      	ldr	r3, [pc, #388]	; (80037b0 <MX_LWIP_Init+0x28c>)
 800362a:	785b      	ldrb	r3, [r3, #1]
 800362c:	041b      	lsls	r3, r3, #16
 800362e:	4319      	orrs	r1, r3
 8003630:	4b5f      	ldr	r3, [pc, #380]	; (80037b0 <MX_LWIP_Init+0x28c>)
 8003632:	789b      	ldrb	r3, [r3, #2]
 8003634:	021b      	lsls	r3, r3, #8
 8003636:	430b      	orrs	r3, r1
 8003638:	495d      	ldr	r1, [pc, #372]	; (80037b0 <MX_LWIP_Init+0x28c>)
 800363a:	78c9      	ldrb	r1, [r1, #3]
 800363c:	430b      	orrs	r3, r1
 800363e:	021b      	lsls	r3, r3, #8
 8003640:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003644:	431a      	orrs	r2, r3
 8003646:	4b5a      	ldr	r3, [pc, #360]	; (80037b0 <MX_LWIP_Init+0x28c>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	0619      	lsls	r1, r3, #24
 800364c:	4b58      	ldr	r3, [pc, #352]	; (80037b0 <MX_LWIP_Init+0x28c>)
 800364e:	785b      	ldrb	r3, [r3, #1]
 8003650:	041b      	lsls	r3, r3, #16
 8003652:	4319      	orrs	r1, r3
 8003654:	4b56      	ldr	r3, [pc, #344]	; (80037b0 <MX_LWIP_Init+0x28c>)
 8003656:	789b      	ldrb	r3, [r3, #2]
 8003658:	021b      	lsls	r3, r3, #8
 800365a:	430b      	orrs	r3, r1
 800365c:	4954      	ldr	r1, [pc, #336]	; (80037b0 <MX_LWIP_Init+0x28c>)
 800365e:	78c9      	ldrb	r1, [r1, #3]
 8003660:	430b      	orrs	r3, r1
 8003662:	0a1b      	lsrs	r3, r3, #8
 8003664:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003668:	431a      	orrs	r2, r3
 800366a:	4b51      	ldr	r3, [pc, #324]	; (80037b0 <MX_LWIP_Init+0x28c>)
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	0619      	lsls	r1, r3, #24
 8003670:	4b4f      	ldr	r3, [pc, #316]	; (80037b0 <MX_LWIP_Init+0x28c>)
 8003672:	785b      	ldrb	r3, [r3, #1]
 8003674:	041b      	lsls	r3, r3, #16
 8003676:	4319      	orrs	r1, r3
 8003678:	4b4d      	ldr	r3, [pc, #308]	; (80037b0 <MX_LWIP_Init+0x28c>)
 800367a:	789b      	ldrb	r3, [r3, #2]
 800367c:	021b      	lsls	r3, r3, #8
 800367e:	430b      	orrs	r3, r1
 8003680:	494b      	ldr	r1, [pc, #300]	; (80037b0 <MX_LWIP_Init+0x28c>)
 8003682:	78c9      	ldrb	r1, [r1, #3]
 8003684:	430b      	orrs	r3, r1
 8003686:	0e1b      	lsrs	r3, r3, #24
 8003688:	4313      	orrs	r3, r2
 800368a:	4a4c      	ldr	r2, [pc, #304]	; (80037bc <MX_LWIP_Init+0x298>)
 800368c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800368e:	4b49      	ldr	r3, [pc, #292]	; (80037b4 <MX_LWIP_Init+0x290>)
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	061a      	lsls	r2, r3, #24
 8003694:	4b47      	ldr	r3, [pc, #284]	; (80037b4 <MX_LWIP_Init+0x290>)
 8003696:	785b      	ldrb	r3, [r3, #1]
 8003698:	041b      	lsls	r3, r3, #16
 800369a:	431a      	orrs	r2, r3
 800369c:	4b45      	ldr	r3, [pc, #276]	; (80037b4 <MX_LWIP_Init+0x290>)
 800369e:	789b      	ldrb	r3, [r3, #2]
 80036a0:	021b      	lsls	r3, r3, #8
 80036a2:	4313      	orrs	r3, r2
 80036a4:	4a43      	ldr	r2, [pc, #268]	; (80037b4 <MX_LWIP_Init+0x290>)
 80036a6:	78d2      	ldrb	r2, [r2, #3]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	061a      	lsls	r2, r3, #24
 80036ac:	4b41      	ldr	r3, [pc, #260]	; (80037b4 <MX_LWIP_Init+0x290>)
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	0619      	lsls	r1, r3, #24
 80036b2:	4b40      	ldr	r3, [pc, #256]	; (80037b4 <MX_LWIP_Init+0x290>)
 80036b4:	785b      	ldrb	r3, [r3, #1]
 80036b6:	041b      	lsls	r3, r3, #16
 80036b8:	4319      	orrs	r1, r3
 80036ba:	4b3e      	ldr	r3, [pc, #248]	; (80037b4 <MX_LWIP_Init+0x290>)
 80036bc:	789b      	ldrb	r3, [r3, #2]
 80036be:	021b      	lsls	r3, r3, #8
 80036c0:	430b      	orrs	r3, r1
 80036c2:	493c      	ldr	r1, [pc, #240]	; (80037b4 <MX_LWIP_Init+0x290>)
 80036c4:	78c9      	ldrb	r1, [r1, #3]
 80036c6:	430b      	orrs	r3, r1
 80036c8:	021b      	lsls	r3, r3, #8
 80036ca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80036ce:	431a      	orrs	r2, r3
 80036d0:	4b38      	ldr	r3, [pc, #224]	; (80037b4 <MX_LWIP_Init+0x290>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	0619      	lsls	r1, r3, #24
 80036d6:	4b37      	ldr	r3, [pc, #220]	; (80037b4 <MX_LWIP_Init+0x290>)
 80036d8:	785b      	ldrb	r3, [r3, #1]
 80036da:	041b      	lsls	r3, r3, #16
 80036dc:	4319      	orrs	r1, r3
 80036de:	4b35      	ldr	r3, [pc, #212]	; (80037b4 <MX_LWIP_Init+0x290>)
 80036e0:	789b      	ldrb	r3, [r3, #2]
 80036e2:	021b      	lsls	r3, r3, #8
 80036e4:	430b      	orrs	r3, r1
 80036e6:	4933      	ldr	r1, [pc, #204]	; (80037b4 <MX_LWIP_Init+0x290>)
 80036e8:	78c9      	ldrb	r1, [r1, #3]
 80036ea:	430b      	orrs	r3, r1
 80036ec:	0a1b      	lsrs	r3, r3, #8
 80036ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80036f2:	431a      	orrs	r2, r3
 80036f4:	4b2f      	ldr	r3, [pc, #188]	; (80037b4 <MX_LWIP_Init+0x290>)
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	0619      	lsls	r1, r3, #24
 80036fa:	4b2e      	ldr	r3, [pc, #184]	; (80037b4 <MX_LWIP_Init+0x290>)
 80036fc:	785b      	ldrb	r3, [r3, #1]
 80036fe:	041b      	lsls	r3, r3, #16
 8003700:	4319      	orrs	r1, r3
 8003702:	4b2c      	ldr	r3, [pc, #176]	; (80037b4 <MX_LWIP_Init+0x290>)
 8003704:	789b      	ldrb	r3, [r3, #2]
 8003706:	021b      	lsls	r3, r3, #8
 8003708:	430b      	orrs	r3, r1
 800370a:	492a      	ldr	r1, [pc, #168]	; (80037b4 <MX_LWIP_Init+0x290>)
 800370c:	78c9      	ldrb	r1, [r1, #3]
 800370e:	430b      	orrs	r3, r1
 8003710:	0e1b      	lsrs	r3, r3, #24
 8003712:	4313      	orrs	r3, r2
 8003714:	4a2a      	ldr	r2, [pc, #168]	; (80037c0 <MX_LWIP_Init+0x29c>)
 8003716:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8003718:	4b2a      	ldr	r3, [pc, #168]	; (80037c4 <MX_LWIP_Init+0x2a0>)
 800371a:	9302      	str	r3, [sp, #8]
 800371c:	4b2a      	ldr	r3, [pc, #168]	; (80037c8 <MX_LWIP_Init+0x2a4>)
 800371e:	9301      	str	r3, [sp, #4]
 8003720:	2300      	movs	r3, #0
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	4b26      	ldr	r3, [pc, #152]	; (80037c0 <MX_LWIP_Init+0x29c>)
 8003726:	4a25      	ldr	r2, [pc, #148]	; (80037bc <MX_LWIP_Init+0x298>)
 8003728:	4923      	ldr	r1, [pc, #140]	; (80037b8 <MX_LWIP_Init+0x294>)
 800372a:	4828      	ldr	r0, [pc, #160]	; (80037cc <MX_LWIP_Init+0x2a8>)
 800372c:	f007 fb4c 	bl	800adc8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003730:	4826      	ldr	r0, [pc, #152]	; (80037cc <MX_LWIP_Init+0x2a8>)
 8003732:	f007 fcfb 	bl	800b12c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003736:	4b25      	ldr	r3, [pc, #148]	; (80037cc <MX_LWIP_Init+0x2a8>)
 8003738:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800373c:	089b      	lsrs	r3, r3, #2
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003748:	4820      	ldr	r0, [pc, #128]	; (80037cc <MX_LWIP_Init+0x2a8>)
 800374a:	f007 fcff 	bl	800b14c <netif_set_up>
 800374e:	e002      	b.n	8003756 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003750:	481e      	ldr	r0, [pc, #120]	; (80037cc <MX_LWIP_Init+0x2a8>)
 8003752:	f007 fd67 	bl	800b224 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8003756:	491e      	ldr	r1, [pc, #120]	; (80037d0 <MX_LWIP_Init+0x2ac>)
 8003758:	481c      	ldr	r0, [pc, #112]	; (80037cc <MX_LWIP_Init+0x2a8>)
 800375a:	f007 fdf9 	bl	800b350 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 800375e:	2200      	movs	r2, #0
 8003760:	2101      	movs	r1, #1
 8003762:	2001      	movs	r0, #1
 8003764:	f000 feaa 	bl	80044bc <osSemaphoreNew>
 8003768:	4603      	mov	r3, r0
 800376a:	4a1a      	ldr	r2, [pc, #104]	; (80037d4 <MX_LWIP_Init+0x2b0>)
 800376c:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 800376e:	4b1a      	ldr	r3, [pc, #104]	; (80037d8 <MX_LWIP_Init+0x2b4>)
 8003770:	4a16      	ldr	r2, [pc, #88]	; (80037cc <MX_LWIP_Init+0x2a8>)
 8003772:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8003774:	4b17      	ldr	r3, [pc, #92]	; (80037d4 <MX_LWIP_Init+0x2b0>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a17      	ldr	r2, [pc, #92]	; (80037d8 <MX_LWIP_Init+0x2b4>)
 800377a:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800377c:	2224      	movs	r2, #36	; 0x24
 800377e:	2100      	movs	r1, #0
 8003780:	4816      	ldr	r0, [pc, #88]	; (80037dc <MX_LWIP_Init+0x2b8>)
 8003782:	f011 fed8 	bl	8015536 <memset>
  attributes.name = "LinkThr";
 8003786:	4b15      	ldr	r3, [pc, #84]	; (80037dc <MX_LWIP_Init+0x2b8>)
 8003788:	4a15      	ldr	r2, [pc, #84]	; (80037e0 <MX_LWIP_Init+0x2bc>)
 800378a:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800378c:	4b13      	ldr	r3, [pc, #76]	; (80037dc <MX_LWIP_Init+0x2b8>)
 800378e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003792:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8003794:	4b11      	ldr	r3, [pc, #68]	; (80037dc <MX_LWIP_Init+0x2b8>)
 8003796:	2210      	movs	r2, #16
 8003798:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 800379a:	4a10      	ldr	r2, [pc, #64]	; (80037dc <MX_LWIP_Init+0x2b8>)
 800379c:	490e      	ldr	r1, [pc, #56]	; (80037d8 <MX_LWIP_Init+0x2b4>)
 800379e:	4811      	ldr	r0, [pc, #68]	; (80037e4 <MX_LWIP_Init+0x2c0>)
 80037a0:	f000 fcd1 	bl	8004146 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80037a4:	bf00      	nop
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	20004f8c 	.word	0x20004f8c
 80037b0:	20004f88 	.word	0x20004f88
 80037b4:	20004f28 	.word	0x20004f28
 80037b8:	20004f84 	.word	0x20004f84
 80037bc:	20004f90 	.word	0x20004f90
 80037c0:	20004f94 	.word	0x20004f94
 80037c4:	0800a1d1 	.word	0x0800a1d1
 80037c8:	08003e11 	.word	0x08003e11
 80037cc:	20004f50 	.word	0x20004f50
 80037d0:	08003ef5 	.word	0x08003ef5
 80037d4:	200000a4 	.word	0x200000a4
 80037d8:	20004f20 	.word	0x20004f20
 80037dc:	20004f2c 	.word	0x20004f2c
 80037e0:	08016500 	.word	0x08016500
 80037e4:	08003e7d 	.word	0x08003e7d

080037e8 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b08e      	sub	sp, #56	; 0x38
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037f4:	2200      	movs	r2, #0
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	605a      	str	r2, [r3, #4]
 80037fa:	609a      	str	r2, [r3, #8]
 80037fc:	60da      	str	r2, [r3, #12]
 80037fe:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a4a      	ldr	r2, [pc, #296]	; (8003930 <HAL_ETH_MspInit+0x148>)
 8003806:	4293      	cmp	r3, r2
 8003808:	f040 808d 	bne.w	8003926 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800380c:	2300      	movs	r3, #0
 800380e:	623b      	str	r3, [r7, #32]
 8003810:	4b48      	ldr	r3, [pc, #288]	; (8003934 <HAL_ETH_MspInit+0x14c>)
 8003812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003814:	4a47      	ldr	r2, [pc, #284]	; (8003934 <HAL_ETH_MspInit+0x14c>)
 8003816:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800381a:	6313      	str	r3, [r2, #48]	; 0x30
 800381c:	4b45      	ldr	r3, [pc, #276]	; (8003934 <HAL_ETH_MspInit+0x14c>)
 800381e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003824:	623b      	str	r3, [r7, #32]
 8003826:	6a3b      	ldr	r3, [r7, #32]
 8003828:	2300      	movs	r3, #0
 800382a:	61fb      	str	r3, [r7, #28]
 800382c:	4b41      	ldr	r3, [pc, #260]	; (8003934 <HAL_ETH_MspInit+0x14c>)
 800382e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003830:	4a40      	ldr	r2, [pc, #256]	; (8003934 <HAL_ETH_MspInit+0x14c>)
 8003832:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003836:	6313      	str	r3, [r2, #48]	; 0x30
 8003838:	4b3e      	ldr	r3, [pc, #248]	; (8003934 <HAL_ETH_MspInit+0x14c>)
 800383a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003840:	61fb      	str	r3, [r7, #28]
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	2300      	movs	r3, #0
 8003846:	61bb      	str	r3, [r7, #24]
 8003848:	4b3a      	ldr	r3, [pc, #232]	; (8003934 <HAL_ETH_MspInit+0x14c>)
 800384a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384c:	4a39      	ldr	r2, [pc, #228]	; (8003934 <HAL_ETH_MspInit+0x14c>)
 800384e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003852:	6313      	str	r3, [r2, #48]	; 0x30
 8003854:	4b37      	ldr	r3, [pc, #220]	; (8003934 <HAL_ETH_MspInit+0x14c>)
 8003856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003858:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800385c:	61bb      	str	r3, [r7, #24]
 800385e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003860:	2300      	movs	r3, #0
 8003862:	617b      	str	r3, [r7, #20]
 8003864:	4b33      	ldr	r3, [pc, #204]	; (8003934 <HAL_ETH_MspInit+0x14c>)
 8003866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003868:	4a32      	ldr	r2, [pc, #200]	; (8003934 <HAL_ETH_MspInit+0x14c>)
 800386a:	f043 0304 	orr.w	r3, r3, #4
 800386e:	6313      	str	r3, [r2, #48]	; 0x30
 8003870:	4b30      	ldr	r3, [pc, #192]	; (8003934 <HAL_ETH_MspInit+0x14c>)
 8003872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003874:	f003 0304 	and.w	r3, r3, #4
 8003878:	617b      	str	r3, [r7, #20]
 800387a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800387c:	2300      	movs	r3, #0
 800387e:	613b      	str	r3, [r7, #16]
 8003880:	4b2c      	ldr	r3, [pc, #176]	; (8003934 <HAL_ETH_MspInit+0x14c>)
 8003882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003884:	4a2b      	ldr	r2, [pc, #172]	; (8003934 <HAL_ETH_MspInit+0x14c>)
 8003886:	f043 0301 	orr.w	r3, r3, #1
 800388a:	6313      	str	r3, [r2, #48]	; 0x30
 800388c:	4b29      	ldr	r3, [pc, #164]	; (8003934 <HAL_ETH_MspInit+0x14c>)
 800388e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	613b      	str	r3, [r7, #16]
 8003896:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003898:	2300      	movs	r3, #0
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	4b25      	ldr	r3, [pc, #148]	; (8003934 <HAL_ETH_MspInit+0x14c>)
 800389e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a0:	4a24      	ldr	r2, [pc, #144]	; (8003934 <HAL_ETH_MspInit+0x14c>)
 80038a2:	f043 0302 	orr.w	r3, r3, #2
 80038a6:	6313      	str	r3, [r2, #48]	; 0x30
 80038a8:	4b22      	ldr	r3, [pc, #136]	; (8003934 <HAL_ETH_MspInit+0x14c>)
 80038aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	60fb      	str	r3, [r7, #12]
 80038b2:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80038b4:	2332      	movs	r3, #50	; 0x32
 80038b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b8:	2302      	movs	r3, #2
 80038ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038bc:	2300      	movs	r3, #0
 80038be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038c0:	2303      	movs	r3, #3
 80038c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80038c4:	230b      	movs	r3, #11
 80038c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038cc:	4619      	mov	r1, r3
 80038ce:	481a      	ldr	r0, [pc, #104]	; (8003938 <HAL_ETH_MspInit+0x150>)
 80038d0:	f7fe fd32 	bl	8002338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80038d4:	2386      	movs	r3, #134	; 0x86
 80038d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d8:	2302      	movs	r3, #2
 80038da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038dc:	2300      	movs	r3, #0
 80038de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038e0:	2303      	movs	r3, #3
 80038e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80038e4:	230b      	movs	r3, #11
 80038e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038ec:	4619      	mov	r1, r3
 80038ee:	4813      	ldr	r0, [pc, #76]	; (800393c <HAL_ETH_MspInit+0x154>)
 80038f0:	f7fe fd22 	bl	8002338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80038f4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80038f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038fa:	2302      	movs	r3, #2
 80038fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038fe:	2300      	movs	r3, #0
 8003900:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003902:	2303      	movs	r3, #3
 8003904:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003906:	230b      	movs	r3, #11
 8003908:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800390a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800390e:	4619      	mov	r1, r3
 8003910:	480b      	ldr	r0, [pc, #44]	; (8003940 <HAL_ETH_MspInit+0x158>)
 8003912:	f7fe fd11 	bl	8002338 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8003916:	2200      	movs	r2, #0
 8003918:	2105      	movs	r1, #5
 800391a:	203d      	movs	r0, #61	; 0x3d
 800391c:	f7fd fb3c 	bl	8000f98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8003920:	203d      	movs	r0, #61	; 0x3d
 8003922:	f7fd fb55 	bl	8000fd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003926:	bf00      	nop
 8003928:	3738      	adds	r7, #56	; 0x38
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	40028000 	.word	0x40028000
 8003934:	40023800 	.word	0x40023800
 8003938:	40020800 	.word	0x40020800
 800393c:	40020000 	.word	0x40020000
 8003940:	40020400 	.word	0x40020400

08003944 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 800394c:	4b04      	ldr	r3, [pc, #16]	; (8003960 <HAL_ETH_RxCpltCallback+0x1c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4618      	mov	r0, r3
 8003952:	f000 fe8f 	bl	8004674 <osSemaphoreRelease>
}
 8003956:	bf00      	nop
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	200000a8 	.word	0x200000a8

08003964 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b090      	sub	sp, #64	; 0x40
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800396c:	2300      	movs	r3, #0
 800396e:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003970:	4b5d      	ldr	r3, [pc, #372]	; (8003ae8 <low_level_init+0x184>)
 8003972:	4a5e      	ldr	r2, [pc, #376]	; (8003aec <low_level_init+0x188>)
 8003974:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8003976:	4b5c      	ldr	r3, [pc, #368]	; (8003ae8 <low_level_init+0x184>)
 8003978:	2201      	movs	r2, #1
 800397a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800397c:	4b5a      	ldr	r3, [pc, #360]	; (8003ae8 <low_level_init+0x184>)
 800397e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003982:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003984:	4b58      	ldr	r3, [pc, #352]	; (8003ae8 <low_level_init+0x184>)
 8003986:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800398a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800398c:	4b56      	ldr	r3, [pc, #344]	; (8003ae8 <low_level_init+0x184>)
 800398e:	2201      	movs	r2, #1
 8003990:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8003992:	2300      	movs	r3, #0
 8003994:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 8003996:	2380      	movs	r3, #128	; 0x80
 8003998:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 800399a:	23e1      	movs	r3, #225	; 0xe1
 800399c:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 800399e:	2300      	movs	r3, #0
 80039a0:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 80039a2:	2300      	movs	r3, #0
 80039a4:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 80039a6:	2300      	movs	r3, #0
 80039a8:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 80039aa:	4a4f      	ldr	r2, [pc, #316]	; (8003ae8 <low_level_init+0x184>)
 80039ac:	f107 030c 	add.w	r3, r7, #12
 80039b0:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80039b2:	4b4d      	ldr	r3, [pc, #308]	; (8003ae8 <low_level_init+0x184>)
 80039b4:	2201      	movs	r2, #1
 80039b6:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80039b8:	4b4b      	ldr	r3, [pc, #300]	; (8003ae8 <low_level_init+0x184>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80039be:	4b4a      	ldr	r3, [pc, #296]	; (8003ae8 <low_level_init+0x184>)
 80039c0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80039c4:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80039c6:	4848      	ldr	r0, [pc, #288]	; (8003ae8 <low_level_init+0x184>)
 80039c8:	f7fd fb10 	bl	8000fec <HAL_ETH_Init>
 80039cc:	4603      	mov	r3, r0
 80039ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 80039d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d108      	bne.n	80039ec <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80039e0:	f043 0304 	orr.w	r3, r3, #4
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80039ec:	2304      	movs	r3, #4
 80039ee:	4a40      	ldr	r2, [pc, #256]	; (8003af0 <low_level_init+0x18c>)
 80039f0:	4940      	ldr	r1, [pc, #256]	; (8003af4 <low_level_init+0x190>)
 80039f2:	483d      	ldr	r0, [pc, #244]	; (8003ae8 <low_level_init+0x184>)
 80039f4:	f7fd fc96 	bl	8001324 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80039f8:	2304      	movs	r3, #4
 80039fa:	4a3f      	ldr	r2, [pc, #252]	; (8003af8 <low_level_init+0x194>)
 80039fc:	493f      	ldr	r1, [pc, #252]	; (8003afc <low_level_init+0x198>)
 80039fe:	483a      	ldr	r0, [pc, #232]	; (8003ae8 <low_level_init+0x184>)
 8003a00:	f7fd fcf9 	bl	80013f6 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2206      	movs	r2, #6
 8003a08:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003a0c:	4b36      	ldr	r3, [pc, #216]	; (8003ae8 <low_level_init+0x184>)
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	781a      	ldrb	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003a18:	4b33      	ldr	r3, [pc, #204]	; (8003ae8 <low_level_init+0x184>)
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	785a      	ldrb	r2, [r3, #1]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003a24:	4b30      	ldr	r3, [pc, #192]	; (8003ae8 <low_level_init+0x184>)
 8003a26:	695b      	ldr	r3, [r3, #20]
 8003a28:	789a      	ldrb	r2, [r3, #2]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003a30:	4b2d      	ldr	r3, [pc, #180]	; (8003ae8 <low_level_init+0x184>)
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	78da      	ldrb	r2, [r3, #3]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003a3c:	4b2a      	ldr	r3, [pc, #168]	; (8003ae8 <low_level_init+0x184>)
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	791a      	ldrb	r2, [r3, #4]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003a48:	4b27      	ldr	r3, [pc, #156]	; (8003ae8 <low_level_init+0x184>)
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	795a      	ldrb	r2, [r3, #5]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003a5a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003a62:	f043 030a 	orr.w	r3, r3, #10
 8003a66:	b2da      	uxtb	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 8003a6e:	2200      	movs	r2, #0
 8003a70:	2101      	movs	r1, #1
 8003a72:	2001      	movs	r0, #1
 8003a74:	f000 fd22 	bl	80044bc <osSemaphoreNew>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	4a21      	ldr	r2, [pc, #132]	; (8003b00 <low_level_init+0x19c>)
 8003a7c:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8003a7e:	f107 0314 	add.w	r3, r7, #20
 8003a82:	2224      	movs	r2, #36	; 0x24
 8003a84:	2100      	movs	r1, #0
 8003a86:	4618      	mov	r0, r3
 8003a88:	f011 fd55 	bl	8015536 <memset>
  attributes.name = "EthIf";
 8003a8c:	4b1d      	ldr	r3, [pc, #116]	; (8003b04 <low_level_init+0x1a0>)
 8003a8e:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8003a90:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8003a94:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 8003a96:	2330      	movs	r3, #48	; 0x30
 8003a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 8003a9a:	f107 0314 	add.w	r3, r7, #20
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	4819      	ldr	r0, [pc, #100]	; (8003b08 <low_level_init+0x1a4>)
 8003aa4:	f000 fb4f 	bl	8004146 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8003aa8:	480f      	ldr	r0, [pc, #60]	; (8003ae8 <low_level_init+0x184>)
 8003aaa:	f7fd ffcc 	bl	8001a46 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8003aae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	211d      	movs	r1, #29
 8003ab6:	480c      	ldr	r0, [pc, #48]	; (8003ae8 <low_level_init+0x184>)
 8003ab8:	f7fd fef7 	bl	80018aa <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8003abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003abe:	f043 030b 	orr.w	r3, r3, #11
 8003ac2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8003ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	211d      	movs	r1, #29
 8003aca:	4807      	ldr	r0, [pc, #28]	; (8003ae8 <low_level_init+0x184>)
 8003acc:	f7fd ff55 	bl	800197a <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8003ad0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	211d      	movs	r1, #29
 8003ad8:	4803      	ldr	r0, [pc, #12]	; (8003ae8 <low_level_init+0x184>)
 8003ada:	f7fd fee6 	bl	80018aa <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003ade:	bf00      	nop
 8003ae0:	3740      	adds	r7, #64	; 0x40
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	20006868 	.word	0x20006868
 8003aec:	40028000 	.word	0x40028000
 8003af0:	200068b0 	.word	0x200068b0
 8003af4:	20004f98 	.word	0x20004f98
 8003af8:	20005018 	.word	0x20005018
 8003afc:	200067e8 	.word	0x200067e8
 8003b00:	200000a8 	.word	0x200000a8
 8003b04:	08016508 	.word	0x08016508
 8003b08:	08003db1 	.word	0x08003db1

08003b0c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b08a      	sub	sp, #40	; 0x28
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8003b16:	4b4b      	ldr	r3, [pc, #300]	; (8003c44 <low_level_output+0x138>)
 8003b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8003b22:	2300      	movs	r3, #0
 8003b24:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8003b26:	2300      	movs	r3, #0
 8003b28:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8003b2e:	4b45      	ldr	r3, [pc, #276]	; (8003c44 <low_level_output+0x138>)
 8003b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b32:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8003b34:	2300      	movs	r3, #0
 8003b36:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	623b      	str	r3, [r7, #32]
 8003b3c:	e05a      	b.n	8003bf4 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	da03      	bge.n	8003b4e <low_level_output+0x42>
      {
        errval = ERR_USE;
 8003b46:	23f8      	movs	r3, #248	; 0xf8
 8003b48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8003b4c:	e05c      	b.n	8003c08 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	895b      	ldrh	r3, [r3, #10]
 8003b52:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8003b54:	2300      	movs	r3, #0
 8003b56:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003b58:	e02f      	b.n	8003bba <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8003b5a:	69fa      	ldr	r2, [r7, #28]
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	18d0      	adds	r0, r2, r3
 8003b60:	6a3b      	ldr	r3, [r7, #32]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	18d1      	adds	r1, r2, r3
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8003b6e:	3304      	adds	r3, #4
 8003b70:	461a      	mov	r2, r3
 8003b72:	f011 fcd2 	bl	801551a <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	da03      	bge.n	8003b8c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8003b84:	23f8      	movs	r3, #248	; 0xf8
 8003b86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8003b8a:	e03d      	b.n	8003c08 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	4413      	add	r3, r2
 8003b98:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003b9c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003ba8:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003bb4:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d8c8      	bhi.n	8003b5a <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8003bc8:	69fa      	ldr	r2, [r7, #28]
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	18d0      	adds	r0, r2, r3
 8003bce:	6a3b      	ldr	r3, [r7, #32]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	4619      	mov	r1, r3
 8003bda:	f011 fc9e 	bl	801551a <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4413      	add	r3, r2
 8003be4:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4413      	add	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8003bee:	6a3b      	ldr	r3, [r7, #32]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	623b      	str	r3, [r7, #32]
 8003bf4:	6a3b      	ldr	r3, [r7, #32]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1a1      	bne.n	8003b3e <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8003bfa:	6979      	ldr	r1, [r7, #20]
 8003bfc:	4811      	ldr	r0, [pc, #68]	; (8003c44 <low_level_output+0x138>)
 8003bfe:	f7fd fc67 	bl	80014d0 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8003c02:	2300      	movs	r3, #0
 8003c04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003c08:	4b0e      	ldr	r3, [pc, #56]	; (8003c44 <low_level_output+0x138>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c10:	3314      	adds	r3, #20
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0320 	and.w	r3, r3, #32
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00d      	beq.n	8003c38 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8003c1c:	4b09      	ldr	r3, [pc, #36]	; (8003c44 <low_level_output+0x138>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c24:	3314      	adds	r3, #20
 8003c26:	2220      	movs	r2, #32
 8003c28:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8003c2a:	4b06      	ldr	r3, [pc, #24]	; (8003c44 <low_level_output+0x138>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c32:	3304      	adds	r3, #4
 8003c34:	2200      	movs	r2, #0
 8003c36:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8003c38:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3728      	adds	r7, #40	; 0x28
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	20006868 	.word	0x20006868

08003c48 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b08c      	sub	sp, #48	; 0x30
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003c50:	2300      	movs	r3, #0
 8003c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8003c54:	2300      	movs	r3, #0
 8003c56:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8003c60:	2300      	movs	r3, #0
 8003c62:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8003c64:	2300      	movs	r3, #0
 8003c66:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8003c6c:	484f      	ldr	r0, [pc, #316]	; (8003dac <low_level_input+0x164>)
 8003c6e:	f7fd fd19 	bl	80016a4 <HAL_ETH_GetReceivedFrame_IT>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <low_level_input+0x34>

    return NULL;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	e092      	b.n	8003da2 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8003c7c:	4b4b      	ldr	r3, [pc, #300]	; (8003dac <low_level_input+0x164>)
 8003c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c80:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8003c82:	4b4a      	ldr	r3, [pc, #296]	; (8003dac <low_level_input+0x164>)
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8003c88:	89fb      	ldrh	r3, [r7, #14]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d007      	beq.n	8003c9e <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8003c8e:	89fb      	ldrh	r3, [r7, #14]
 8003c90:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8003c94:	4619      	mov	r1, r3
 8003c96:	2000      	movs	r0, #0
 8003c98:	f007 fc24 	bl	800b4e4 <pbuf_alloc>
 8003c9c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8003c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d04b      	beq.n	8003d3c <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003ca4:	4b41      	ldr	r3, [pc, #260]	; (8003dac <low_level_input+0x164>)
 8003ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca8:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8003caa:	2300      	movs	r3, #0
 8003cac:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cb2:	e040      	b.n	8003d36 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8003cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb6:	895b      	ldrh	r3, [r3, #10]
 8003cb8:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003cbe:	e021      	b.n	8003d04 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	18d0      	adds	r0, r2, r3
 8003cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	18d1      	adds	r1, r2, r3
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	f011 fc1f 	bl	801551a <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003cdc:	6a3b      	ldr	r3, [r7, #32]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8003ce2:	6a3b      	ldr	r3, [r7, #32]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8003ce8:	69fa      	ldr	r2, [r7, #28]
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	4413      	add	r3, r2
 8003cee:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003cf2:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003cfe:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8003d00:	2300      	movs	r3, #0
 8003d02:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	4413      	add	r3, r2
 8003d0a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d8d6      	bhi.n	8003cc0 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8003d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	18d0      	adds	r0, r2, r3
 8003d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	4413      	add	r3, r2
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	4619      	mov	r1, r3
 8003d24:	f011 fbf9 	bl	801551a <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003d28:	69fa      	ldr	r2, [r7, #28]
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1bb      	bne.n	8003cb4 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003d3c:	4b1b      	ldr	r3, [pc, #108]	; (8003dac <low_level_input+0x164>)
 8003d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d40:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003d42:	2300      	movs	r3, #0
 8003d44:	613b      	str	r3, [r7, #16]
 8003d46:	e00b      	b.n	8003d60 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003d48:	6a3b      	ldr	r3, [r7, #32]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003d50:	6a3b      	ldr	r3, [r7, #32]
 8003d52:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	613b      	str	r3, [r7, #16]
 8003d60:	4b12      	ldr	r3, [pc, #72]	; (8003dac <low_level_input+0x164>)
 8003d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d3ee      	bcc.n	8003d48 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8003d6a:	4b10      	ldr	r3, [pc, #64]	; (8003dac <low_level_input+0x164>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8003d70:	4b0e      	ldr	r3, [pc, #56]	; (8003dac <low_level_input+0x164>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d78:	3314      	adds	r3, #20
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00d      	beq.n	8003da0 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8003d84:	4b09      	ldr	r3, [pc, #36]	; (8003dac <low_level_input+0x164>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d8c:	3314      	adds	r3, #20
 8003d8e:	2280      	movs	r2, #128	; 0x80
 8003d90:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8003d92:	4b06      	ldr	r3, [pc, #24]	; (8003dac <low_level_input+0x164>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d9a:	3308      	adds	r3, #8
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	601a      	str	r2, [r3, #0]
  }
  return p;
 8003da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3730      	adds	r7, #48	; 0x30
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	20006868 	.word	0x20006868

08003db0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003dbc:	4b12      	ldr	r3, [pc, #72]	; (8003e08 <ethernetif_input+0x58>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f000 fc03 	bl	80045d0 <osSemaphoreAcquire>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1f5      	bne.n	8003dbc <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8003dd0:	480e      	ldr	r0, [pc, #56]	; (8003e0c <ethernetif_input+0x5c>)
 8003dd2:	f011 fa1d 	bl	8015210 <sys_mutex_lock>
        p = low_level_input( netif );
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f7ff ff36 	bl	8003c48 <low_level_input>
 8003ddc:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00a      	beq.n	8003dfa <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	68f9      	ldr	r1, [r7, #12]
 8003dea:	68b8      	ldr	r0, [r7, #8]
 8003dec:	4798      	blx	r3
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d002      	beq.n	8003dfa <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8003df4:	68b8      	ldr	r0, [r7, #8]
 8003df6:	f007 fe59 	bl	800baac <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8003dfa:	4804      	ldr	r0, [pc, #16]	; (8003e0c <ethernetif_input+0x5c>)
 8003dfc:	f011 fa17 	bl	801522e <sys_mutex_unlock>
      } while(p!=NULL);
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1e4      	bne.n	8003dd0 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003e06:	e7d9      	b.n	8003dbc <ethernetif_input+0xc>
 8003e08:	200000a8 	.word	0x200000a8
 8003e0c:	200080c0 	.word	0x200080c0

08003e10 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d106      	bne.n	8003e2c <ethernetif_init+0x1c>
 8003e1e:	4b0e      	ldr	r3, [pc, #56]	; (8003e58 <ethernetif_init+0x48>)
 8003e20:	f240 2231 	movw	r2, #561	; 0x231
 8003e24:	490d      	ldr	r1, [pc, #52]	; (8003e5c <ethernetif_init+0x4c>)
 8003e26:	480e      	ldr	r0, [pc, #56]	; (8003e60 <ethernetif_init+0x50>)
 8003e28:	f011 fbe8 	bl	80155fc <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2273      	movs	r2, #115	; 0x73
 8003e30:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2274      	movs	r2, #116	; 0x74
 8003e38:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a09      	ldr	r2, [pc, #36]	; (8003e64 <ethernetif_init+0x54>)
 8003e40:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a08      	ldr	r2, [pc, #32]	; (8003e68 <ethernetif_init+0x58>)
 8003e46:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f7ff fd8b 	bl	8003964 <low_level_init>

  return ERR_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3708      	adds	r7, #8
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	08016510 	.word	0x08016510
 8003e5c:	0801652c 	.word	0x0801652c
 8003e60:	0801653c 	.word	0x0801653c
 8003e64:	08013271 	.word	0x08013271
 8003e68:	08003b0d 	.word	0x08003b0d

08003e6c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003e70:	f7fc ffaa 	bl	8000dc8 <HAL_GetTick>
 8003e74:	4603      	mov	r3, r0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	bd80      	pop	{r7, pc}
	...

08003e7c <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003e84:	2300      	movs	r3, #0
 8003e86:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003e8c:	f107 0308 	add.w	r3, r7, #8
 8003e90:	461a      	mov	r2, r3
 8003e92:	2101      	movs	r1, #1
 8003e94:	4816      	ldr	r0, [pc, #88]	; (8003ef0 <ethernetif_set_link+0x74>)
 8003e96:	f7fd fd08 	bl	80018aa <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003eaa:	f003 0304 	and.w	r3, r3, #4
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d108      	bne.n	8003ec4 <ethernetif_set_link+0x48>
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d005      	beq.n	8003ec4 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f007 f9e3 	bl	800b288 <netif_set_link_up>
 8003ec2:	e011      	b.n	8003ee8 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003ecc:	089b      	lsrs	r3, r3, #2
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d007      	beq.n	8003ee8 <ethernetif_set_link+0x6c>
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d104      	bne.n	8003ee8 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f007 fa04 	bl	800b2f0 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8003ee8:	20c8      	movs	r0, #200	; 0xc8
 8003eea:	f000 f9be 	bl	800426a <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003eee:	e7cd      	b.n	8003e8c <ethernetif_set_link+0x10>
 8003ef0:	20006868 	.word	0x20006868

08003ef4 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8003efc:	2300      	movs	r3, #0
 8003efe:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8003f00:	2300      	movs	r3, #0
 8003f02:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003f0a:	089b      	lsrs	r3, r3, #2
 8003f0c:	f003 0301 	and.w	r3, r3, #1
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d05d      	beq.n	8003fd2 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003f16:	4b34      	ldr	r3, [pc, #208]	; (8003fe8 <ethernetif_update_config+0xf4>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d03f      	beq.n	8003f9e <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8003f1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003f22:	2100      	movs	r1, #0
 8003f24:	4830      	ldr	r0, [pc, #192]	; (8003fe8 <ethernetif_update_config+0xf4>)
 8003f26:	f7fd fd28 	bl	800197a <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8003f2a:	f7fc ff4d 	bl	8000dc8 <HAL_GetTick>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003f32:	f107 0308 	add.w	r3, r7, #8
 8003f36:	461a      	mov	r2, r3
 8003f38:	2101      	movs	r1, #1
 8003f3a:	482b      	ldr	r0, [pc, #172]	; (8003fe8 <ethernetif_update_config+0xf4>)
 8003f3c:	f7fd fcb5 	bl	80018aa <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8003f40:	f7fc ff42 	bl	8000dc8 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f4e:	d828      	bhi.n	8003fa2 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	f003 0320 	and.w	r3, r3, #32
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d0eb      	beq.n	8003f32 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8003f5a:	f107 0308 	add.w	r3, r7, #8
 8003f5e:	461a      	mov	r2, r3
 8003f60:	2110      	movs	r1, #16
 8003f62:	4821      	ldr	r0, [pc, #132]	; (8003fe8 <ethernetif_update_config+0xf4>)
 8003f64:	f7fd fca1 	bl	80018aa <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	f003 0304 	and.w	r3, r3, #4
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d004      	beq.n	8003f7c <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003f72:	4b1d      	ldr	r3, [pc, #116]	; (8003fe8 <ethernetif_update_config+0xf4>)
 8003f74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f78:	60da      	str	r2, [r3, #12]
 8003f7a:	e002      	b.n	8003f82 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8003f7c:	4b1a      	ldr	r3, [pc, #104]	; (8003fe8 <ethernetif_update_config+0xf4>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8003f8c:	4b16      	ldr	r3, [pc, #88]	; (8003fe8 <ethernetif_update_config+0xf4>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	609a      	str	r2, [r3, #8]
 8003f92:	e016      	b.n	8003fc2 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8003f94:	4b14      	ldr	r3, [pc, #80]	; (8003fe8 <ethernetif_update_config+0xf4>)
 8003f96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f9a:	609a      	str	r2, [r3, #8]
 8003f9c:	e011      	b.n	8003fc2 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8003f9e:	bf00      	nop
 8003fa0:	e000      	b.n	8003fa4 <ethernetif_update_config+0xb0>
          goto error;
 8003fa2:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003fa4:	4b10      	ldr	r3, [pc, #64]	; (8003fe8 <ethernetif_update_config+0xf4>)
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	08db      	lsrs	r3, r3, #3
 8003faa:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8003fac:	4b0e      	ldr	r3, [pc, #56]	; (8003fe8 <ethernetif_update_config+0xf4>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	085b      	lsrs	r3, r3, #1
 8003fb2:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	461a      	mov	r2, r3
 8003fba:	2100      	movs	r1, #0
 8003fbc:	480a      	ldr	r0, [pc, #40]	; (8003fe8 <ethernetif_update_config+0xf4>)
 8003fbe:	f7fd fcdc 	bl	800197a <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	4808      	ldr	r0, [pc, #32]	; (8003fe8 <ethernetif_update_config+0xf4>)
 8003fc6:	f7fd fd9d 	bl	8001b04 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8003fca:	4807      	ldr	r0, [pc, #28]	; (8003fe8 <ethernetif_update_config+0xf4>)
 8003fcc:	f7fd fd3b 	bl	8001a46 <HAL_ETH_Start>
 8003fd0:	e002      	b.n	8003fd8 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8003fd2:	4805      	ldr	r0, [pc, #20]	; (8003fe8 <ethernetif_update_config+0xf4>)
 8003fd4:	f7fd fd66 	bl	8001aa4 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f807 	bl	8003fec <ethernetif_notify_conn_changed>
}
 8003fde:	bf00      	nop
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	20006868 	.word	0x20006868

08003fec <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <__NVIC_SetPriority>:
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	4603      	mov	r3, r0
 8004008:	6039      	str	r1, [r7, #0]
 800400a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800400c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004010:	2b00      	cmp	r3, #0
 8004012:	db0a      	blt.n	800402a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	b2da      	uxtb	r2, r3
 8004018:	490c      	ldr	r1, [pc, #48]	; (800404c <__NVIC_SetPriority+0x4c>)
 800401a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800401e:	0112      	lsls	r2, r2, #4
 8004020:	b2d2      	uxtb	r2, r2
 8004022:	440b      	add	r3, r1
 8004024:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004028:	e00a      	b.n	8004040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	b2da      	uxtb	r2, r3
 800402e:	4908      	ldr	r1, [pc, #32]	; (8004050 <__NVIC_SetPriority+0x50>)
 8004030:	79fb      	ldrb	r3, [r7, #7]
 8004032:	f003 030f 	and.w	r3, r3, #15
 8004036:	3b04      	subs	r3, #4
 8004038:	0112      	lsls	r2, r2, #4
 800403a:	b2d2      	uxtb	r2, r2
 800403c:	440b      	add	r3, r1
 800403e:	761a      	strb	r2, [r3, #24]
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr
 800404c:	e000e100 	.word	0xe000e100
 8004050:	e000ed00 	.word	0xe000ed00

08004054 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004054:	b580      	push	{r7, lr}
 8004056:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004058:	4b05      	ldr	r3, [pc, #20]	; (8004070 <SysTick_Handler+0x1c>)
 800405a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800405c:	f002 fd3a 	bl	8006ad4 <xTaskGetSchedulerState>
 8004060:	4603      	mov	r3, r0
 8004062:	2b01      	cmp	r3, #1
 8004064:	d001      	beq.n	800406a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004066:	f003 fc1f 	bl	80078a8 <xPortSysTickHandler>
  }
}
 800406a:	bf00      	nop
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	e000e010 	.word	0xe000e010

08004074 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004074:	b580      	push	{r7, lr}
 8004076:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004078:	2100      	movs	r1, #0
 800407a:	f06f 0004 	mvn.w	r0, #4
 800407e:	f7ff ffbf 	bl	8004000 <__NVIC_SetPriority>
#endif
}
 8004082:	bf00      	nop
 8004084:	bd80      	pop	{r7, pc}
	...

08004088 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800408e:	f3ef 8305 	mrs	r3, IPSR
 8004092:	603b      	str	r3, [r7, #0]
  return(result);
 8004094:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004096:	2b00      	cmp	r3, #0
 8004098:	d003      	beq.n	80040a2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800409a:	f06f 0305 	mvn.w	r3, #5
 800409e:	607b      	str	r3, [r7, #4]
 80040a0:	e00c      	b.n	80040bc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80040a2:	4b0a      	ldr	r3, [pc, #40]	; (80040cc <osKernelInitialize+0x44>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d105      	bne.n	80040b6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80040aa:	4b08      	ldr	r3, [pc, #32]	; (80040cc <osKernelInitialize+0x44>)
 80040ac:	2201      	movs	r2, #1
 80040ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80040b0:	2300      	movs	r3, #0
 80040b2:	607b      	str	r3, [r7, #4]
 80040b4:	e002      	b.n	80040bc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80040b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80040bc:	687b      	ldr	r3, [r7, #4]
}
 80040be:	4618      	mov	r0, r3
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	200000ac 	.word	0x200000ac

080040d0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040d6:	f3ef 8305 	mrs	r3, IPSR
 80040da:	603b      	str	r3, [r7, #0]
  return(result);
 80040dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <osKernelStart+0x1a>
    stat = osErrorISR;
 80040e2:	f06f 0305 	mvn.w	r3, #5
 80040e6:	607b      	str	r3, [r7, #4]
 80040e8:	e010      	b.n	800410c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80040ea:	4b0b      	ldr	r3, [pc, #44]	; (8004118 <osKernelStart+0x48>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d109      	bne.n	8004106 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80040f2:	f7ff ffbf 	bl	8004074 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80040f6:	4b08      	ldr	r3, [pc, #32]	; (8004118 <osKernelStart+0x48>)
 80040f8:	2202      	movs	r2, #2
 80040fa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80040fc:	f002 f86c 	bl	80061d8 <vTaskStartScheduler>
      stat = osOK;
 8004100:	2300      	movs	r3, #0
 8004102:	607b      	str	r3, [r7, #4]
 8004104:	e002      	b.n	800410c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004106:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800410a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800410c:	687b      	ldr	r3, [r7, #4]
}
 800410e:	4618      	mov	r0, r3
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	200000ac 	.word	0x200000ac

0800411c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004122:	f3ef 8305 	mrs	r3, IPSR
 8004126:	603b      	str	r3, [r7, #0]
  return(result);
 8004128:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800412e:	f002 f97f 	bl	8006430 <xTaskGetTickCountFromISR>
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	e002      	b.n	800413c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8004136:	f002 f96b 	bl	8006410 <xTaskGetTickCount>
 800413a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800413c:	687b      	ldr	r3, [r7, #4]
}
 800413e:	4618      	mov	r0, r3
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004146:	b580      	push	{r7, lr}
 8004148:	b08e      	sub	sp, #56	; 0x38
 800414a:	af04      	add	r7, sp, #16
 800414c:	60f8      	str	r0, [r7, #12]
 800414e:	60b9      	str	r1, [r7, #8]
 8004150:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004152:	2300      	movs	r3, #0
 8004154:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004156:	f3ef 8305 	mrs	r3, IPSR
 800415a:	617b      	str	r3, [r7, #20]
  return(result);
 800415c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800415e:	2b00      	cmp	r3, #0
 8004160:	d17e      	bne.n	8004260 <osThreadNew+0x11a>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d07b      	beq.n	8004260 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004168:	2380      	movs	r3, #128	; 0x80
 800416a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800416c:	2318      	movs	r3, #24
 800416e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004170:	2300      	movs	r3, #0
 8004172:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004174:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004178:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d045      	beq.n	800420c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d002      	beq.n	800418e <osThreadNew+0x48>
        name = attr->name;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d002      	beq.n	800419c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d008      	beq.n	80041b4 <osThreadNew+0x6e>
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	2b38      	cmp	r3, #56	; 0x38
 80041a6:	d805      	bhi.n	80041b4 <osThreadNew+0x6e>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <osThreadNew+0x72>
        return (NULL);
 80041b4:	2300      	movs	r3, #0
 80041b6:	e054      	b.n	8004262 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d003      	beq.n	80041c8 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	089b      	lsrs	r3, r3, #2
 80041c6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00e      	beq.n	80041ee <osThreadNew+0xa8>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	2bbb      	cmp	r3, #187	; 0xbb
 80041d6:	d90a      	bls.n	80041ee <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d006      	beq.n	80041ee <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d002      	beq.n	80041ee <osThreadNew+0xa8>
        mem = 1;
 80041e8:	2301      	movs	r3, #1
 80041ea:	61bb      	str	r3, [r7, #24]
 80041ec:	e010      	b.n	8004210 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10c      	bne.n	8004210 <osThreadNew+0xca>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d108      	bne.n	8004210 <osThreadNew+0xca>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d104      	bne.n	8004210 <osThreadNew+0xca>
          mem = 0;
 8004206:	2300      	movs	r3, #0
 8004208:	61bb      	str	r3, [r7, #24]
 800420a:	e001      	b.n	8004210 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800420c:	2300      	movs	r3, #0
 800420e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d110      	bne.n	8004238 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800421e:	9202      	str	r2, [sp, #8]
 8004220:	9301      	str	r3, [sp, #4]
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	6a3a      	ldr	r2, [r7, #32]
 800422a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f001 fde7 	bl	8005e00 <xTaskCreateStatic>
 8004232:	4603      	mov	r3, r0
 8004234:	613b      	str	r3, [r7, #16]
 8004236:	e013      	b.n	8004260 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d110      	bne.n	8004260 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800423e:	6a3b      	ldr	r3, [r7, #32]
 8004240:	b29a      	uxth	r2, r3
 8004242:	f107 0310 	add.w	r3, r7, #16
 8004246:	9301      	str	r3, [sp, #4]
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f001 fe32 	bl	8005eba <xTaskCreate>
 8004256:	4603      	mov	r3, r0
 8004258:	2b01      	cmp	r3, #1
 800425a:	d001      	beq.n	8004260 <osThreadNew+0x11a>
            hTask = NULL;
 800425c:	2300      	movs	r3, #0
 800425e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004260:	693b      	ldr	r3, [r7, #16]
}
 8004262:	4618      	mov	r0, r3
 8004264:	3728      	adds	r7, #40	; 0x28
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800426a:	b580      	push	{r7, lr}
 800426c:	b084      	sub	sp, #16
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004272:	f3ef 8305 	mrs	r3, IPSR
 8004276:	60bb      	str	r3, [r7, #8]
  return(result);
 8004278:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <osDelay+0x1c>
    stat = osErrorISR;
 800427e:	f06f 0305 	mvn.w	r3, #5
 8004282:	60fb      	str	r3, [r7, #12]
 8004284:	e007      	b.n	8004296 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004286:	2300      	movs	r3, #0
 8004288:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d002      	beq.n	8004296 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f001 ff6d 	bl	8006170 <vTaskDelay>
    }
  }

  return (stat);
 8004296:	68fb      	ldr	r3, [r7, #12]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b088      	sub	sp, #32
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80042a8:	2300      	movs	r3, #0
 80042aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042ac:	f3ef 8305 	mrs	r3, IPSR
 80042b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80042b2:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d174      	bne.n	80043a2 <osMutexNew+0x102>
    if (attr != NULL) {
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d003      	beq.n	80042c6 <osMutexNew+0x26>
      type = attr->attr_bits;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	61bb      	str	r3, [r7, #24]
 80042c4:	e001      	b.n	80042ca <osMutexNew+0x2a>
    } else {
      type = 0U;
 80042c6:	2300      	movs	r3, #0
 80042c8:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d002      	beq.n	80042da <osMutexNew+0x3a>
      rmtx = 1U;
 80042d4:	2301      	movs	r3, #1
 80042d6:	617b      	str	r3, [r7, #20]
 80042d8:	e001      	b.n	80042de <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80042da:	2300      	movs	r3, #0
 80042dc:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	f003 0308 	and.w	r3, r3, #8
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d15c      	bne.n	80043a2 <osMutexNew+0x102>
      mem = -1;
 80042e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042ec:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d015      	beq.n	8004320 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d006      	beq.n	800430a <osMutexNew+0x6a>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	2b4f      	cmp	r3, #79	; 0x4f
 8004302:	d902      	bls.n	800430a <osMutexNew+0x6a>
          mem = 1;
 8004304:	2301      	movs	r3, #1
 8004306:	613b      	str	r3, [r7, #16]
 8004308:	e00c      	b.n	8004324 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d108      	bne.n	8004324 <osMutexNew+0x84>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d104      	bne.n	8004324 <osMutexNew+0x84>
            mem = 0;
 800431a:	2300      	movs	r3, #0
 800431c:	613b      	str	r3, [r7, #16]
 800431e:	e001      	b.n	8004324 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8004320:	2300      	movs	r3, #0
 8004322:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d112      	bne.n	8004350 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d007      	beq.n	8004340 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	4619      	mov	r1, r3
 8004336:	2004      	movs	r0, #4
 8004338:	f000 fdd1 	bl	8004ede <xQueueCreateMutexStatic>
 800433c:	61f8      	str	r0, [r7, #28]
 800433e:	e016      	b.n	800436e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	4619      	mov	r1, r3
 8004346:	2001      	movs	r0, #1
 8004348:	f000 fdc9 	bl	8004ede <xQueueCreateMutexStatic>
 800434c:	61f8      	str	r0, [r7, #28]
 800434e:	e00e      	b.n	800436e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10b      	bne.n	800436e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d004      	beq.n	8004366 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800435c:	2004      	movs	r0, #4
 800435e:	f000 fda6 	bl	8004eae <xQueueCreateMutex>
 8004362:	61f8      	str	r0, [r7, #28]
 8004364:	e003      	b.n	800436e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8004366:	2001      	movs	r0, #1
 8004368:	f000 fda1 	bl	8004eae <xQueueCreateMutex>
 800436c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00c      	beq.n	800438e <osMutexNew+0xee>
        if (attr != NULL) {
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <osMutexNew+0xe2>
          name = attr->name;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	e001      	b.n	8004386 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8004382:	2300      	movs	r3, #0
 8004384:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8004386:	68f9      	ldr	r1, [r7, #12]
 8004388:	69f8      	ldr	r0, [r7, #28]
 800438a:	f001 fcb1 	bl	8005cf0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d006      	beq.n	80043a2 <osMutexNew+0x102>
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	f043 0301 	orr.w	r3, r3, #1
 80043a0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80043a2:	69fb      	ldr	r3, [r7, #28]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3720      	adds	r7, #32
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f023 0301 	bic.w	r3, r3, #1
 80043bc:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80043c6:	2300      	movs	r3, #0
 80043c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043ca:	f3ef 8305 	mrs	r3, IPSR
 80043ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80043d0:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <osMutexAcquire+0x32>
    stat = osErrorISR;
 80043d6:	f06f 0305 	mvn.w	r3, #5
 80043da:	617b      	str	r3, [r7, #20]
 80043dc:	e02c      	b.n	8004438 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d103      	bne.n	80043ec <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80043e4:	f06f 0303 	mvn.w	r3, #3
 80043e8:	617b      	str	r3, [r7, #20]
 80043ea:	e025      	b.n	8004438 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d011      	beq.n	8004416 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80043f2:	6839      	ldr	r1, [r7, #0]
 80043f4:	6938      	ldr	r0, [r7, #16]
 80043f6:	f000 fdc1 	bl	8004f7c <xQueueTakeMutexRecursive>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d01b      	beq.n	8004438 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8004406:	f06f 0301 	mvn.w	r3, #1
 800440a:	617b      	str	r3, [r7, #20]
 800440c:	e014      	b.n	8004438 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800440e:	f06f 0302 	mvn.w	r3, #2
 8004412:	617b      	str	r3, [r7, #20]
 8004414:	e010      	b.n	8004438 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004416:	6839      	ldr	r1, [r7, #0]
 8004418:	6938      	ldr	r0, [r7, #16]
 800441a:	f001 f955 	bl	80056c8 <xQueueSemaphoreTake>
 800441e:	4603      	mov	r3, r0
 8004420:	2b01      	cmp	r3, #1
 8004422:	d009      	beq.n	8004438 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d003      	beq.n	8004432 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800442a:	f06f 0301 	mvn.w	r3, #1
 800442e:	617b      	str	r3, [r7, #20]
 8004430:	e002      	b.n	8004438 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004432:	f06f 0302 	mvn.w	r3, #2
 8004436:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8004438:	697b      	ldr	r3, [r7, #20]
}
 800443a:	4618      	mov	r0, r3
 800443c:	3718      	adds	r7, #24
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004442:	b580      	push	{r7, lr}
 8004444:	b086      	sub	sp, #24
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f023 0301 	bic.w	r3, r3, #1
 8004450:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800445a:	2300      	movs	r3, #0
 800445c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800445e:	f3ef 8305 	mrs	r3, IPSR
 8004462:	60bb      	str	r3, [r7, #8]
  return(result);
 8004464:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <osMutexRelease+0x30>
    stat = osErrorISR;
 800446a:	f06f 0305 	mvn.w	r3, #5
 800446e:	617b      	str	r3, [r7, #20]
 8004470:	e01f      	b.n	80044b2 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d103      	bne.n	8004480 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8004478:	f06f 0303 	mvn.w	r3, #3
 800447c:	617b      	str	r3, [r7, #20]
 800447e:	e018      	b.n	80044b2 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d009      	beq.n	800449a <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004486:	6938      	ldr	r0, [r7, #16]
 8004488:	f000 fd44 	bl	8004f14 <xQueueGiveMutexRecursive>
 800448c:	4603      	mov	r3, r0
 800448e:	2b01      	cmp	r3, #1
 8004490:	d00f      	beq.n	80044b2 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004492:	f06f 0302 	mvn.w	r3, #2
 8004496:	617b      	str	r3, [r7, #20]
 8004498:	e00b      	b.n	80044b2 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800449a:	2300      	movs	r3, #0
 800449c:	2200      	movs	r2, #0
 800449e:	2100      	movs	r1, #0
 80044a0:	6938      	ldr	r0, [r7, #16]
 80044a2:	f000 fe0b 	bl	80050bc <xQueueGenericSend>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d002      	beq.n	80044b2 <osMutexRelease+0x70>
        stat = osErrorResource;
 80044ac:	f06f 0302 	mvn.w	r3, #2
 80044b0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80044b2:	697b      	ldr	r3, [r7, #20]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3718      	adds	r7, #24
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80044bc:	b580      	push	{r7, lr}
 80044be:	b08a      	sub	sp, #40	; 0x28
 80044c0:	af02      	add	r7, sp, #8
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80044c8:	2300      	movs	r3, #0
 80044ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044cc:	f3ef 8305 	mrs	r3, IPSR
 80044d0:	613b      	str	r3, [r7, #16]
  return(result);
 80044d2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d175      	bne.n	80045c4 <osSemaphoreNew+0x108>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d072      	beq.n	80045c4 <osSemaphoreNew+0x108>
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d86e      	bhi.n	80045c4 <osSemaphoreNew+0x108>
    mem = -1;
 80044e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d015      	beq.n	800451e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d006      	beq.n	8004508 <osSemaphoreNew+0x4c>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	2b4f      	cmp	r3, #79	; 0x4f
 8004500:	d902      	bls.n	8004508 <osSemaphoreNew+0x4c>
        mem = 1;
 8004502:	2301      	movs	r3, #1
 8004504:	61bb      	str	r3, [r7, #24]
 8004506:	e00c      	b.n	8004522 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d108      	bne.n	8004522 <osSemaphoreNew+0x66>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d104      	bne.n	8004522 <osSemaphoreNew+0x66>
          mem = 0;
 8004518:	2300      	movs	r3, #0
 800451a:	61bb      	str	r3, [r7, #24]
 800451c:	e001      	b.n	8004522 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800451e:	2300      	movs	r3, #0
 8004520:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004528:	d04c      	beq.n	80045c4 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d128      	bne.n	8004582 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d10a      	bne.n	800454c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	2203      	movs	r2, #3
 800453c:	9200      	str	r2, [sp, #0]
 800453e:	2200      	movs	r2, #0
 8004540:	2100      	movs	r1, #0
 8004542:	2001      	movs	r0, #1
 8004544:	f000 fbc4 	bl	8004cd0 <xQueueGenericCreateStatic>
 8004548:	61f8      	str	r0, [r7, #28]
 800454a:	e005      	b.n	8004558 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800454c:	2203      	movs	r2, #3
 800454e:	2100      	movs	r1, #0
 8004550:	2001      	movs	r0, #1
 8004552:	f000 fc35 	bl	8004dc0 <xQueueGenericCreate>
 8004556:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d022      	beq.n	80045a4 <osSemaphoreNew+0xe8>
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d01f      	beq.n	80045a4 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004564:	2300      	movs	r3, #0
 8004566:	2200      	movs	r2, #0
 8004568:	2100      	movs	r1, #0
 800456a:	69f8      	ldr	r0, [r7, #28]
 800456c:	f000 fda6 	bl	80050bc <xQueueGenericSend>
 8004570:	4603      	mov	r3, r0
 8004572:	2b01      	cmp	r3, #1
 8004574:	d016      	beq.n	80045a4 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8004576:	69f8      	ldr	r0, [r7, #28]
 8004578:	f001 fa6e 	bl	8005a58 <vQueueDelete>
            hSemaphore = NULL;
 800457c:	2300      	movs	r3, #0
 800457e:	61fb      	str	r3, [r7, #28]
 8004580:	e010      	b.n	80045a4 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d108      	bne.n	800459a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	461a      	mov	r2, r3
 800458e:	68b9      	ldr	r1, [r7, #8]
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f000 fd29 	bl	8004fe8 <xQueueCreateCountingSemaphoreStatic>
 8004596:	61f8      	str	r0, [r7, #28]
 8004598:	e004      	b.n	80045a4 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800459a:	68b9      	ldr	r1, [r7, #8]
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 fd5a 	bl	8005056 <xQueueCreateCountingSemaphore>
 80045a2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00c      	beq.n	80045c4 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d003      	beq.n	80045b8 <osSemaphoreNew+0xfc>
          name = attr->name;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	617b      	str	r3, [r7, #20]
 80045b6:	e001      	b.n	80045bc <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80045b8:	2300      	movs	r3, #0
 80045ba:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80045bc:	6979      	ldr	r1, [r7, #20]
 80045be:	69f8      	ldr	r0, [r7, #28]
 80045c0:	f001 fb96 	bl	8005cf0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80045c4:	69fb      	ldr	r3, [r7, #28]
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3720      	adds	r7, #32
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
	...

080045d0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80045de:	2300      	movs	r3, #0
 80045e0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d103      	bne.n	80045f0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80045e8:	f06f 0303 	mvn.w	r3, #3
 80045ec:	617b      	str	r3, [r7, #20]
 80045ee:	e039      	b.n	8004664 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045f0:	f3ef 8305 	mrs	r3, IPSR
 80045f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80045f6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d022      	beq.n	8004642 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8004602:	f06f 0303 	mvn.w	r3, #3
 8004606:	617b      	str	r3, [r7, #20]
 8004608:	e02c      	b.n	8004664 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800460a:	2300      	movs	r3, #0
 800460c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800460e:	f107 0308 	add.w	r3, r7, #8
 8004612:	461a      	mov	r2, r3
 8004614:	2100      	movs	r1, #0
 8004616:	6938      	ldr	r0, [r7, #16]
 8004618:	f001 f962 	bl	80058e0 <xQueueReceiveFromISR>
 800461c:	4603      	mov	r3, r0
 800461e:	2b01      	cmp	r3, #1
 8004620:	d003      	beq.n	800462a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8004622:	f06f 0302 	mvn.w	r3, #2
 8004626:	617b      	str	r3, [r7, #20]
 8004628:	e01c      	b.n	8004664 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d019      	beq.n	8004664 <osSemaphoreAcquire+0x94>
 8004630:	4b0f      	ldr	r3, [pc, #60]	; (8004670 <osSemaphoreAcquire+0xa0>)
 8004632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004636:	601a      	str	r2, [r3, #0]
 8004638:	f3bf 8f4f 	dsb	sy
 800463c:	f3bf 8f6f 	isb	sy
 8004640:	e010      	b.n	8004664 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004642:	6839      	ldr	r1, [r7, #0]
 8004644:	6938      	ldr	r0, [r7, #16]
 8004646:	f001 f83f 	bl	80056c8 <xQueueSemaphoreTake>
 800464a:	4603      	mov	r3, r0
 800464c:	2b01      	cmp	r3, #1
 800464e:	d009      	beq.n	8004664 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8004656:	f06f 0301 	mvn.w	r3, #1
 800465a:	617b      	str	r3, [r7, #20]
 800465c:	e002      	b.n	8004664 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800465e:	f06f 0302 	mvn.w	r3, #2
 8004662:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004664:	697b      	ldr	r3, [r7, #20]
}
 8004666:	4618      	mov	r0, r3
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	e000ed04 	.word	0xe000ed04

08004674 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004680:	2300      	movs	r3, #0
 8004682:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d103      	bne.n	8004692 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800468a:	f06f 0303 	mvn.w	r3, #3
 800468e:	617b      	str	r3, [r7, #20]
 8004690:	e02c      	b.n	80046ec <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004692:	f3ef 8305 	mrs	r3, IPSR
 8004696:	60fb      	str	r3, [r7, #12]
  return(result);
 8004698:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800469a:	2b00      	cmp	r3, #0
 800469c:	d01a      	beq.n	80046d4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800469e:	2300      	movs	r3, #0
 80046a0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80046a2:	f107 0308 	add.w	r3, r7, #8
 80046a6:	4619      	mov	r1, r3
 80046a8:	6938      	ldr	r0, [r7, #16]
 80046aa:	f000 fea0 	bl	80053ee <xQueueGiveFromISR>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d003      	beq.n	80046bc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80046b4:	f06f 0302 	mvn.w	r3, #2
 80046b8:	617b      	str	r3, [r7, #20]
 80046ba:	e017      	b.n	80046ec <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d014      	beq.n	80046ec <osSemaphoreRelease+0x78>
 80046c2:	4b0d      	ldr	r3, [pc, #52]	; (80046f8 <osSemaphoreRelease+0x84>)
 80046c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046c8:	601a      	str	r2, [r3, #0]
 80046ca:	f3bf 8f4f 	dsb	sy
 80046ce:	f3bf 8f6f 	isb	sy
 80046d2:	e00b      	b.n	80046ec <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80046d4:	2300      	movs	r3, #0
 80046d6:	2200      	movs	r2, #0
 80046d8:	2100      	movs	r1, #0
 80046da:	6938      	ldr	r0, [r7, #16]
 80046dc:	f000 fcee 	bl	80050bc <xQueueGenericSend>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d002      	beq.n	80046ec <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80046e6:	f06f 0302 	mvn.w	r3, #2
 80046ea:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80046ec:	697b      	ldr	r3, [r7, #20]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3718      	adds	r7, #24
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	e000ed04 	.word	0xe000ed04

080046fc <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004708:	f3ef 8305 	mrs	r3, IPSR
 800470c:	60fb      	str	r3, [r7, #12]
  return(result);
 800470e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8004710:	2b00      	cmp	r3, #0
 8004712:	d003      	beq.n	800471c <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8004714:	f06f 0305 	mvn.w	r3, #5
 8004718:	617b      	str	r3, [r7, #20]
 800471a:	e00e      	b.n	800473a <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d103      	bne.n	800472a <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8004722:	f06f 0303 	mvn.w	r3, #3
 8004726:	617b      	str	r3, [r7, #20]
 8004728:	e007      	b.n	800473a <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800472a:	6938      	ldr	r0, [r7, #16]
 800472c:	f001 fb0a 	bl	8005d44 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8004730:	2300      	movs	r3, #0
 8004732:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8004734:	6938      	ldr	r0, [r7, #16]
 8004736:	f001 f98f 	bl	8005a58 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800473a:	697b      	ldr	r3, [r7, #20]
}
 800473c:	4618      	mov	r0, r3
 800473e:	3718      	adds	r7, #24
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004744:	b580      	push	{r7, lr}
 8004746:	b08a      	sub	sp, #40	; 0x28
 8004748:	af02      	add	r7, sp, #8
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004750:	2300      	movs	r3, #0
 8004752:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004754:	f3ef 8305 	mrs	r3, IPSR
 8004758:	613b      	str	r3, [r7, #16]
  return(result);
 800475a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800475c:	2b00      	cmp	r3, #0
 800475e:	d15f      	bne.n	8004820 <osMessageQueueNew+0xdc>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d05c      	beq.n	8004820 <osMessageQueueNew+0xdc>
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d059      	beq.n	8004820 <osMessageQueueNew+0xdc>
    mem = -1;
 800476c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004770:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d029      	beq.n	80047cc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d012      	beq.n	80047a6 <osMessageQueueNew+0x62>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	2b4f      	cmp	r3, #79	; 0x4f
 8004786:	d90e      	bls.n	80047a6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00a      	beq.n	80047a6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	695a      	ldr	r2, [r3, #20]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	68b9      	ldr	r1, [r7, #8]
 8004798:	fb01 f303 	mul.w	r3, r1, r3
 800479c:	429a      	cmp	r2, r3
 800479e:	d302      	bcc.n	80047a6 <osMessageQueueNew+0x62>
        mem = 1;
 80047a0:	2301      	movs	r3, #1
 80047a2:	61bb      	str	r3, [r7, #24]
 80047a4:	e014      	b.n	80047d0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d110      	bne.n	80047d0 <osMessageQueueNew+0x8c>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10c      	bne.n	80047d0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d108      	bne.n	80047d0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d104      	bne.n	80047d0 <osMessageQueueNew+0x8c>
          mem = 0;
 80047c6:	2300      	movs	r3, #0
 80047c8:	61bb      	str	r3, [r7, #24]
 80047ca:	e001      	b.n	80047d0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80047cc:	2300      	movs	r3, #0
 80047ce:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d10b      	bne.n	80047ee <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	691a      	ldr	r2, [r3, #16]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	2100      	movs	r1, #0
 80047e0:	9100      	str	r1, [sp, #0]
 80047e2:	68b9      	ldr	r1, [r7, #8]
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f000 fa73 	bl	8004cd0 <xQueueGenericCreateStatic>
 80047ea:	61f8      	str	r0, [r7, #28]
 80047ec:	e008      	b.n	8004800 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d105      	bne.n	8004800 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80047f4:	2200      	movs	r2, #0
 80047f6:	68b9      	ldr	r1, [r7, #8]
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f000 fae1 	bl	8004dc0 <xQueueGenericCreate>
 80047fe:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00c      	beq.n	8004820 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d003      	beq.n	8004814 <osMessageQueueNew+0xd0>
        name = attr->name;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	617b      	str	r3, [r7, #20]
 8004812:	e001      	b.n	8004818 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004814:	2300      	movs	r3, #0
 8004816:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004818:	6979      	ldr	r1, [r7, #20]
 800481a:	69f8      	ldr	r0, [r7, #28]
 800481c:	f001 fa68 	bl	8005cf0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004820:	69fb      	ldr	r3, [r7, #28]
}
 8004822:	4618      	mov	r0, r3
 8004824:	3720      	adds	r7, #32
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
	...

0800482c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800482c:	b580      	push	{r7, lr}
 800482e:	b088      	sub	sp, #32
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	603b      	str	r3, [r7, #0]
 8004838:	4613      	mov	r3, r2
 800483a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004840:	2300      	movs	r3, #0
 8004842:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004844:	f3ef 8305 	mrs	r3, IPSR
 8004848:	617b      	str	r3, [r7, #20]
  return(result);
 800484a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800484c:	2b00      	cmp	r3, #0
 800484e:	d028      	beq.n	80048a2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d005      	beq.n	8004862 <osMessageQueuePut+0x36>
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d002      	beq.n	8004862 <osMessageQueuePut+0x36>
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004862:	f06f 0303 	mvn.w	r3, #3
 8004866:	61fb      	str	r3, [r7, #28]
 8004868:	e038      	b.n	80048dc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800486a:	2300      	movs	r3, #0
 800486c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800486e:	f107 0210 	add.w	r2, r7, #16
 8004872:	2300      	movs	r3, #0
 8004874:	68b9      	ldr	r1, [r7, #8]
 8004876:	69b8      	ldr	r0, [r7, #24]
 8004878:	f000 fd1e 	bl	80052b8 <xQueueGenericSendFromISR>
 800487c:	4603      	mov	r3, r0
 800487e:	2b01      	cmp	r3, #1
 8004880:	d003      	beq.n	800488a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004882:	f06f 0302 	mvn.w	r3, #2
 8004886:	61fb      	str	r3, [r7, #28]
 8004888:	e028      	b.n	80048dc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d025      	beq.n	80048dc <osMessageQueuePut+0xb0>
 8004890:	4b15      	ldr	r3, [pc, #84]	; (80048e8 <osMessageQueuePut+0xbc>)
 8004892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004896:	601a      	str	r2, [r3, #0]
 8004898:	f3bf 8f4f 	dsb	sy
 800489c:	f3bf 8f6f 	isb	sy
 80048a0:	e01c      	b.n	80048dc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d002      	beq.n	80048ae <osMessageQueuePut+0x82>
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d103      	bne.n	80048b6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80048ae:	f06f 0303 	mvn.w	r3, #3
 80048b2:	61fb      	str	r3, [r7, #28]
 80048b4:	e012      	b.n	80048dc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80048b6:	2300      	movs	r3, #0
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	68b9      	ldr	r1, [r7, #8]
 80048bc:	69b8      	ldr	r0, [r7, #24]
 80048be:	f000 fbfd 	bl	80050bc <xQueueGenericSend>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d009      	beq.n	80048dc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d003      	beq.n	80048d6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80048ce:	f06f 0301 	mvn.w	r3, #1
 80048d2:	61fb      	str	r3, [r7, #28]
 80048d4:	e002      	b.n	80048dc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80048d6:	f06f 0302 	mvn.w	r3, #2
 80048da:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80048dc:	69fb      	ldr	r3, [r7, #28]
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3720      	adds	r7, #32
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	e000ed04 	.word	0xe000ed04

080048ec <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b088      	sub	sp, #32
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
 80048f8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80048fe:	2300      	movs	r3, #0
 8004900:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004902:	f3ef 8305 	mrs	r3, IPSR
 8004906:	617b      	str	r3, [r7, #20]
  return(result);
 8004908:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800490a:	2b00      	cmp	r3, #0
 800490c:	d028      	beq.n	8004960 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d005      	beq.n	8004920 <osMessageQueueGet+0x34>
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d002      	beq.n	8004920 <osMessageQueueGet+0x34>
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d003      	beq.n	8004928 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004920:	f06f 0303 	mvn.w	r3, #3
 8004924:	61fb      	str	r3, [r7, #28]
 8004926:	e037      	b.n	8004998 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8004928:	2300      	movs	r3, #0
 800492a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800492c:	f107 0310 	add.w	r3, r7, #16
 8004930:	461a      	mov	r2, r3
 8004932:	68b9      	ldr	r1, [r7, #8]
 8004934:	69b8      	ldr	r0, [r7, #24]
 8004936:	f000 ffd3 	bl	80058e0 <xQueueReceiveFromISR>
 800493a:	4603      	mov	r3, r0
 800493c:	2b01      	cmp	r3, #1
 800493e:	d003      	beq.n	8004948 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004940:	f06f 0302 	mvn.w	r3, #2
 8004944:	61fb      	str	r3, [r7, #28]
 8004946:	e027      	b.n	8004998 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d024      	beq.n	8004998 <osMessageQueueGet+0xac>
 800494e:	4b15      	ldr	r3, [pc, #84]	; (80049a4 <osMessageQueueGet+0xb8>)
 8004950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004954:	601a      	str	r2, [r3, #0]
 8004956:	f3bf 8f4f 	dsb	sy
 800495a:	f3bf 8f6f 	isb	sy
 800495e:	e01b      	b.n	8004998 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d002      	beq.n	800496c <osMessageQueueGet+0x80>
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d103      	bne.n	8004974 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800496c:	f06f 0303 	mvn.w	r3, #3
 8004970:	61fb      	str	r3, [r7, #28]
 8004972:	e011      	b.n	8004998 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	68b9      	ldr	r1, [r7, #8]
 8004978:	69b8      	ldr	r0, [r7, #24]
 800497a:	f000 fdc5 	bl	8005508 <xQueueReceive>
 800497e:	4603      	mov	r3, r0
 8004980:	2b01      	cmp	r3, #1
 8004982:	d009      	beq.n	8004998 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800498a:	f06f 0301 	mvn.w	r3, #1
 800498e:	61fb      	str	r3, [r7, #28]
 8004990:	e002      	b.n	8004998 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004992:	f06f 0302 	mvn.w	r3, #2
 8004996:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004998:	69fb      	ldr	r3, [r7, #28]
}
 800499a:	4618      	mov	r0, r3
 800499c:	3720      	adds	r7, #32
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	e000ed04 	.word	0xe000ed04

080049a8 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d102      	bne.n	80049c0 <osMessageQueueGetCount+0x18>
    count = 0U;
 80049ba:	2300      	movs	r3, #0
 80049bc:	617b      	str	r3, [r7, #20]
 80049be:	e00e      	b.n	80049de <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049c0:	f3ef 8305 	mrs	r3, IPSR
 80049c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80049c6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d004      	beq.n	80049d6 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80049cc:	6938      	ldr	r0, [r7, #16]
 80049ce:	f001 f825 	bl	8005a1c <uxQueueMessagesWaitingFromISR>
 80049d2:	6178      	str	r0, [r7, #20]
 80049d4:	e003      	b.n	80049de <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80049d6:	6938      	ldr	r0, [r7, #16]
 80049d8:	f001 f802 	bl	80059e0 <uxQueueMessagesWaiting>
 80049dc:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 80049de:	697b      	ldr	r3, [r7, #20]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3718      	adds	r7, #24
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049f4:	f3ef 8305 	mrs	r3, IPSR
 80049f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80049fa:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d003      	beq.n	8004a08 <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 8004a00:	f06f 0305 	mvn.w	r3, #5
 8004a04:	617b      	str	r3, [r7, #20]
 8004a06:	e00e      	b.n	8004a26 <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d103      	bne.n	8004a16 <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 8004a0e:	f06f 0303 	mvn.w	r3, #3
 8004a12:	617b      	str	r3, [r7, #20]
 8004a14:	e007      	b.n	8004a26 <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8004a16:	6938      	ldr	r0, [r7, #16]
 8004a18:	f001 f994 	bl	8005d44 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 8004a20:	6938      	ldr	r0, [r7, #16]
 8004a22:	f001 f819 	bl	8005a58 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8004a26:	697b      	ldr	r3, [r7, #20]
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3718      	adds	r7, #24
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	4a07      	ldr	r2, [pc, #28]	; (8004a5c <vApplicationGetIdleTaskMemory+0x2c>)
 8004a40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	4a06      	ldr	r2, [pc, #24]	; (8004a60 <vApplicationGetIdleTaskMemory+0x30>)
 8004a46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2280      	movs	r2, #128	; 0x80
 8004a4c:	601a      	str	r2, [r3, #0]
}
 8004a4e:	bf00      	nop
 8004a50:	3714      	adds	r7, #20
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	200000b0 	.word	0x200000b0
 8004a60:	2000016c 	.word	0x2000016c

08004a64 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4a07      	ldr	r2, [pc, #28]	; (8004a90 <vApplicationGetTimerTaskMemory+0x2c>)
 8004a74:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	4a06      	ldr	r2, [pc, #24]	; (8004a94 <vApplicationGetTimerTaskMemory+0x30>)
 8004a7a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a82:	601a      	str	r2, [r3, #0]
}
 8004a84:	bf00      	nop
 8004a86:	3714      	adds	r7, #20
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr
 8004a90:	2000036c 	.word	0x2000036c
 8004a94:	20000428 	.word	0x20000428

08004a98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f103 0208 	add.w	r2, r3, #8
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ab0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f103 0208 	add.w	r2, r3, #8
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f103 0208 	add.w	r2, r3, #8
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004ae6:	bf00      	nop
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004af2:	b480      	push	{r7}
 8004af4:	b085      	sub	sp, #20
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
 8004afa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	689a      	ldr	r2, [r3, #8]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	1c5a      	adds	r2, r3, #1
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	601a      	str	r2, [r3, #0]
}
 8004b2e:	bf00      	nop
 8004b30:	3714      	adds	r7, #20
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b085      	sub	sp, #20
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
 8004b42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b50:	d103      	bne.n	8004b5a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	60fb      	str	r3, [r7, #12]
 8004b58:	e00c      	b.n	8004b74 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	3308      	adds	r3, #8
 8004b5e:	60fb      	str	r3, [r7, #12]
 8004b60:	e002      	b.n	8004b68 <vListInsert+0x2e>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	60fb      	str	r3, [r7, #12]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d2f6      	bcs.n	8004b62 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	1c5a      	adds	r2, r3, #1
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	601a      	str	r2, [r3, #0]
}
 8004ba0:	bf00      	nop
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	6892      	ldr	r2, [r2, #8]
 8004bc2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	6852      	ldr	r2, [r2, #4]
 8004bcc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d103      	bne.n	8004be0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689a      	ldr	r2, [r3, #8]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	1e5a      	subs	r2, r3, #1
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3714      	adds	r7, #20
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10a      	bne.n	8004c2a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c18:	f383 8811 	msr	BASEPRI, r3
 8004c1c:	f3bf 8f6f 	isb	sy
 8004c20:	f3bf 8f4f 	dsb	sy
 8004c24:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004c26:	bf00      	nop
 8004c28:	e7fe      	b.n	8004c28 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004c2a:	f002 fdab 	bl	8007784 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c36:	68f9      	ldr	r1, [r7, #12]
 8004c38:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c3a:	fb01 f303 	mul.w	r3, r1, r3
 8004c3e:	441a      	add	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	68f9      	ldr	r1, [r7, #12]
 8004c5e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c60:	fb01 f303 	mul.w	r3, r1, r3
 8004c64:	441a      	add	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	22ff      	movs	r2, #255	; 0xff
 8004c6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	22ff      	movs	r2, #255	; 0xff
 8004c76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d114      	bne.n	8004caa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d01a      	beq.n	8004cbe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	3310      	adds	r3, #16
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f001 fd4f 	bl	8006730 <xTaskRemoveFromEventList>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d012      	beq.n	8004cbe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004c98:	4b0c      	ldr	r3, [pc, #48]	; (8004ccc <xQueueGenericReset+0xcc>)
 8004c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c9e:	601a      	str	r2, [r3, #0]
 8004ca0:	f3bf 8f4f 	dsb	sy
 8004ca4:	f3bf 8f6f 	isb	sy
 8004ca8:	e009      	b.n	8004cbe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	3310      	adds	r3, #16
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7ff fef2 	bl	8004a98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	3324      	adds	r3, #36	; 0x24
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7ff feed 	bl	8004a98 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004cbe:	f002 fd91 	bl	80077e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004cc2:	2301      	movs	r3, #1
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	e000ed04 	.word	0xe000ed04

08004cd0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b08e      	sub	sp, #56	; 0x38
 8004cd4:	af02      	add	r7, sp, #8
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]
 8004cdc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10a      	bne.n	8004cfa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce8:	f383 8811 	msr	BASEPRI, r3
 8004cec:	f3bf 8f6f 	isb	sy
 8004cf0:	f3bf 8f4f 	dsb	sy
 8004cf4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004cf6:	bf00      	nop
 8004cf8:	e7fe      	b.n	8004cf8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10a      	bne.n	8004d16 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d04:	f383 8811 	msr	BASEPRI, r3
 8004d08:	f3bf 8f6f 	isb	sy
 8004d0c:	f3bf 8f4f 	dsb	sy
 8004d10:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004d12:	bf00      	nop
 8004d14:	e7fe      	b.n	8004d14 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d002      	beq.n	8004d22 <xQueueGenericCreateStatic+0x52>
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <xQueueGenericCreateStatic+0x56>
 8004d22:	2301      	movs	r3, #1
 8004d24:	e000      	b.n	8004d28 <xQueueGenericCreateStatic+0x58>
 8004d26:	2300      	movs	r3, #0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d10a      	bne.n	8004d42 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d30:	f383 8811 	msr	BASEPRI, r3
 8004d34:	f3bf 8f6f 	isb	sy
 8004d38:	f3bf 8f4f 	dsb	sy
 8004d3c:	623b      	str	r3, [r7, #32]
}
 8004d3e:	bf00      	nop
 8004d40:	e7fe      	b.n	8004d40 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d102      	bne.n	8004d4e <xQueueGenericCreateStatic+0x7e>
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <xQueueGenericCreateStatic+0x82>
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e000      	b.n	8004d54 <xQueueGenericCreateStatic+0x84>
 8004d52:	2300      	movs	r3, #0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d10a      	bne.n	8004d6e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5c:	f383 8811 	msr	BASEPRI, r3
 8004d60:	f3bf 8f6f 	isb	sy
 8004d64:	f3bf 8f4f 	dsb	sy
 8004d68:	61fb      	str	r3, [r7, #28]
}
 8004d6a:	bf00      	nop
 8004d6c:	e7fe      	b.n	8004d6c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004d6e:	2350      	movs	r3, #80	; 0x50
 8004d70:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	2b50      	cmp	r3, #80	; 0x50
 8004d76:	d00a      	beq.n	8004d8e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7c:	f383 8811 	msr	BASEPRI, r3
 8004d80:	f3bf 8f6f 	isb	sy
 8004d84:	f3bf 8f4f 	dsb	sy
 8004d88:	61bb      	str	r3, [r7, #24]
}
 8004d8a:	bf00      	nop
 8004d8c:	e7fe      	b.n	8004d8c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004d8e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00d      	beq.n	8004db6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004da2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	4613      	mov	r3, r2
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	68b9      	ldr	r1, [r7, #8]
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f000 f83f 	bl	8004e34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3730      	adds	r7, #48	; 0x30
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b08a      	sub	sp, #40	; 0x28
 8004dc4:	af02      	add	r7, sp, #8
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10a      	bne.n	8004dea <xQueueGenericCreate+0x2a>
	__asm volatile
 8004dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd8:	f383 8811 	msr	BASEPRI, r3
 8004ddc:	f3bf 8f6f 	isb	sy
 8004de0:	f3bf 8f4f 	dsb	sy
 8004de4:	613b      	str	r3, [r7, #16]
}
 8004de6:	bf00      	nop
 8004de8:	e7fe      	b.n	8004de8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	fb02 f303 	mul.w	r3, r2, r3
 8004df2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	3350      	adds	r3, #80	; 0x50
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f002 fde5 	bl	80079c8 <pvPortMalloc>
 8004dfe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d011      	beq.n	8004e2a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	3350      	adds	r3, #80	; 0x50
 8004e0e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e18:	79fa      	ldrb	r2, [r7, #7]
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	68b9      	ldr	r1, [r7, #8]
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f000 f805 	bl	8004e34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004e2a:	69bb      	ldr	r3, [r7, #24]
	}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3720      	adds	r7, #32
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
 8004e40:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d103      	bne.n	8004e50 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	601a      	str	r2, [r3, #0]
 8004e4e:	e002      	b.n	8004e56 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004e62:	2101      	movs	r1, #1
 8004e64:	69b8      	ldr	r0, [r7, #24]
 8004e66:	f7ff fecb 	bl	8004c00 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	78fa      	ldrb	r2, [r7, #3]
 8004e6e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004e72:	bf00      	nop
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b082      	sub	sp, #8
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00e      	beq.n	8004ea6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 f90b 	bl	80050bc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004ea6:	bf00      	nop
 8004ea8:	3708      	adds	r7, #8
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b086      	sub	sp, #24
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	617b      	str	r3, [r7, #20]
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004ec0:	79fb      	ldrb	r3, [r7, #7]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	6939      	ldr	r1, [r7, #16]
 8004ec6:	6978      	ldr	r0, [r7, #20]
 8004ec8:	f7ff ff7a 	bl	8004dc0 <xQueueGenericCreate>
 8004ecc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f7ff ffd3 	bl	8004e7a <prvInitialiseMutex>

		return xNewQueue;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
	}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3718      	adds	r7, #24
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b088      	sub	sp, #32
 8004ee2:	af02      	add	r7, sp, #8
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	6039      	str	r1, [r7, #0]
 8004ee8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004eea:	2301      	movs	r3, #1
 8004eec:	617b      	str	r3, [r7, #20]
 8004eee:	2300      	movs	r3, #0
 8004ef0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004ef2:	79fb      	ldrb	r3, [r7, #7]
 8004ef4:	9300      	str	r3, [sp, #0]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	6939      	ldr	r1, [r7, #16]
 8004efc:	6978      	ldr	r0, [r7, #20]
 8004efe:	f7ff fee7 	bl	8004cd0 <xQueueGenericCreateStatic>
 8004f02:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f7ff ffb8 	bl	8004e7a <prvInitialiseMutex>

		return xNewQueue;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
	}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3718      	adds	r7, #24
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8004f14:	b590      	push	{r4, r7, lr}
 8004f16:	b087      	sub	sp, #28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10a      	bne.n	8004f3c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8004f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	60fb      	str	r3, [r7, #12]
}
 8004f38:	bf00      	nop
 8004f3a:	e7fe      	b.n	8004f3a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	689c      	ldr	r4, [r3, #8]
 8004f40:	f001 fdb8 	bl	8006ab4 <xTaskGetCurrentTaskHandle>
 8004f44:	4603      	mov	r3, r0
 8004f46:	429c      	cmp	r4, r3
 8004f48:	d111      	bne.n	8004f6e <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	1e5a      	subs	r2, r3, #1
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d105      	bne.n	8004f68 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	2200      	movs	r2, #0
 8004f60:	2100      	movs	r1, #0
 8004f62:	6938      	ldr	r0, [r7, #16]
 8004f64:	f000 f8aa 	bl	80050bc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	617b      	str	r3, [r7, #20]
 8004f6c:	e001      	b.n	8004f72 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8004f72:	697b      	ldr	r3, [r7, #20]
	}
 8004f74:	4618      	mov	r0, r3
 8004f76:	371c      	adds	r7, #28
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd90      	pop	{r4, r7, pc}

08004f7c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8004f7c:	b590      	push	{r4, r7, lr}
 8004f7e:	b087      	sub	sp, #28
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d10a      	bne.n	8004fa6 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8004f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f94:	f383 8811 	msr	BASEPRI, r3
 8004f98:	f3bf 8f6f 	isb	sy
 8004f9c:	f3bf 8f4f 	dsb	sy
 8004fa0:	60fb      	str	r3, [r7, #12]
}
 8004fa2:	bf00      	nop
 8004fa4:	e7fe      	b.n	8004fa4 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	689c      	ldr	r4, [r3, #8]
 8004faa:	f001 fd83 	bl	8006ab4 <xTaskGetCurrentTaskHandle>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	429c      	cmp	r4, r3
 8004fb2:	d107      	bne.n	8004fc4 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	1c5a      	adds	r2, r3, #1
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	617b      	str	r3, [r7, #20]
 8004fc2:	e00c      	b.n	8004fde <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8004fc4:	6839      	ldr	r1, [r7, #0]
 8004fc6:	6938      	ldr	r0, [r7, #16]
 8004fc8:	f000 fb7e 	bl	80056c8 <xQueueSemaphoreTake>
 8004fcc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d004      	beq.n	8004fde <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	1c5a      	adds	r2, r3, #1
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8004fde:	697b      	ldr	r3, [r7, #20]
	}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	371c      	adds	r7, #28
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd90      	pop	{r4, r7, pc}

08004fe8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b08a      	sub	sp, #40	; 0x28
 8004fec:	af02      	add	r7, sp, #8
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d10a      	bne.n	8005010 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8004ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffe:	f383 8811 	msr	BASEPRI, r3
 8005002:	f3bf 8f6f 	isb	sy
 8005006:	f3bf 8f4f 	dsb	sy
 800500a:	61bb      	str	r3, [r7, #24]
}
 800500c:	bf00      	nop
 800500e:	e7fe      	b.n	800500e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	429a      	cmp	r2, r3
 8005016:	d90a      	bls.n	800502e <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501c:	f383 8811 	msr	BASEPRI, r3
 8005020:	f3bf 8f6f 	isb	sy
 8005024:	f3bf 8f4f 	dsb	sy
 8005028:	617b      	str	r3, [r7, #20]
}
 800502a:	bf00      	nop
 800502c:	e7fe      	b.n	800502c <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800502e:	2302      	movs	r3, #2
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	2100      	movs	r1, #0
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f7ff fe49 	bl	8004cd0 <xQueueGenericCreateStatic>
 800503e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d002      	beq.n	800504c <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	68ba      	ldr	r2, [r7, #8]
 800504a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800504c:	69fb      	ldr	r3, [r7, #28]
	}
 800504e:	4618      	mov	r0, r3
 8005050:	3720      	adds	r7, #32
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005056:	b580      	push	{r7, lr}
 8005058:	b086      	sub	sp, #24
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
 800505e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10a      	bne.n	800507c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8005066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800506a:	f383 8811 	msr	BASEPRI, r3
 800506e:	f3bf 8f6f 	isb	sy
 8005072:	f3bf 8f4f 	dsb	sy
 8005076:	613b      	str	r3, [r7, #16]
}
 8005078:	bf00      	nop
 800507a:	e7fe      	b.n	800507a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800507c:	683a      	ldr	r2, [r7, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	429a      	cmp	r2, r3
 8005082:	d90a      	bls.n	800509a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8005084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005088:	f383 8811 	msr	BASEPRI, r3
 800508c:	f3bf 8f6f 	isb	sy
 8005090:	f3bf 8f4f 	dsb	sy
 8005094:	60fb      	str	r3, [r7, #12]
}
 8005096:	bf00      	nop
 8005098:	e7fe      	b.n	8005098 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800509a:	2202      	movs	r2, #2
 800509c:	2100      	movs	r1, #0
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f7ff fe8e 	bl	8004dc0 <xQueueGenericCreate>
 80050a4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d002      	beq.n	80050b2 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	683a      	ldr	r2, [r7, #0]
 80050b0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80050b2:	697b      	ldr	r3, [r7, #20]
	}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3718      	adds	r7, #24
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b08e      	sub	sp, #56	; 0x38
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]
 80050c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80050ca:	2300      	movs	r3, #0
 80050cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80050d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10a      	bne.n	80050ee <xQueueGenericSend+0x32>
	__asm volatile
 80050d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050dc:	f383 8811 	msr	BASEPRI, r3
 80050e0:	f3bf 8f6f 	isb	sy
 80050e4:	f3bf 8f4f 	dsb	sy
 80050e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80050ea:	bf00      	nop
 80050ec:	e7fe      	b.n	80050ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d103      	bne.n	80050fc <xQueueGenericSend+0x40>
 80050f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d101      	bne.n	8005100 <xQueueGenericSend+0x44>
 80050fc:	2301      	movs	r3, #1
 80050fe:	e000      	b.n	8005102 <xQueueGenericSend+0x46>
 8005100:	2300      	movs	r3, #0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10a      	bne.n	800511c <xQueueGenericSend+0x60>
	__asm volatile
 8005106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510a:	f383 8811 	msr	BASEPRI, r3
 800510e:	f3bf 8f6f 	isb	sy
 8005112:	f3bf 8f4f 	dsb	sy
 8005116:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005118:	bf00      	nop
 800511a:	e7fe      	b.n	800511a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	2b02      	cmp	r3, #2
 8005120:	d103      	bne.n	800512a <xQueueGenericSend+0x6e>
 8005122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005126:	2b01      	cmp	r3, #1
 8005128:	d101      	bne.n	800512e <xQueueGenericSend+0x72>
 800512a:	2301      	movs	r3, #1
 800512c:	e000      	b.n	8005130 <xQueueGenericSend+0x74>
 800512e:	2300      	movs	r3, #0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d10a      	bne.n	800514a <xQueueGenericSend+0x8e>
	__asm volatile
 8005134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005138:	f383 8811 	msr	BASEPRI, r3
 800513c:	f3bf 8f6f 	isb	sy
 8005140:	f3bf 8f4f 	dsb	sy
 8005144:	623b      	str	r3, [r7, #32]
}
 8005146:	bf00      	nop
 8005148:	e7fe      	b.n	8005148 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800514a:	f001 fcc3 	bl	8006ad4 <xTaskGetSchedulerState>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d102      	bne.n	800515a <xQueueGenericSend+0x9e>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <xQueueGenericSend+0xa2>
 800515a:	2301      	movs	r3, #1
 800515c:	e000      	b.n	8005160 <xQueueGenericSend+0xa4>
 800515e:	2300      	movs	r3, #0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10a      	bne.n	800517a <xQueueGenericSend+0xbe>
	__asm volatile
 8005164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005168:	f383 8811 	msr	BASEPRI, r3
 800516c:	f3bf 8f6f 	isb	sy
 8005170:	f3bf 8f4f 	dsb	sy
 8005174:	61fb      	str	r3, [r7, #28]
}
 8005176:	bf00      	nop
 8005178:	e7fe      	b.n	8005178 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800517a:	f002 fb03 	bl	8007784 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800517e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005180:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005186:	429a      	cmp	r2, r3
 8005188:	d302      	bcc.n	8005190 <xQueueGenericSend+0xd4>
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2b02      	cmp	r3, #2
 800518e:	d129      	bne.n	80051e4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005190:	683a      	ldr	r2, [r7, #0]
 8005192:	68b9      	ldr	r1, [r7, #8]
 8005194:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005196:	f000 fc9a 	bl	8005ace <prvCopyDataToQueue>
 800519a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800519c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d010      	beq.n	80051c6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a6:	3324      	adds	r3, #36	; 0x24
 80051a8:	4618      	mov	r0, r3
 80051aa:	f001 fac1 	bl	8006730 <xTaskRemoveFromEventList>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d013      	beq.n	80051dc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80051b4:	4b3f      	ldr	r3, [pc, #252]	; (80052b4 <xQueueGenericSend+0x1f8>)
 80051b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	f3bf 8f6f 	isb	sy
 80051c4:	e00a      	b.n	80051dc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80051c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d007      	beq.n	80051dc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80051cc:	4b39      	ldr	r3, [pc, #228]	; (80052b4 <xQueueGenericSend+0x1f8>)
 80051ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051d2:	601a      	str	r2, [r3, #0]
 80051d4:	f3bf 8f4f 	dsb	sy
 80051d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80051dc:	f002 fb02 	bl	80077e4 <vPortExitCritical>
				return pdPASS;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e063      	b.n	80052ac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d103      	bne.n	80051f2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80051ea:	f002 fafb 	bl	80077e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80051ee:	2300      	movs	r3, #0
 80051f0:	e05c      	b.n	80052ac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80051f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d106      	bne.n	8005206 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051f8:	f107 0314 	add.w	r3, r7, #20
 80051fc:	4618      	mov	r0, r3
 80051fe:	f001 fafb 	bl	80067f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005202:	2301      	movs	r3, #1
 8005204:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005206:	f002 faed 	bl	80077e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800520a:	f001 f855 	bl	80062b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800520e:	f002 fab9 	bl	8007784 <vPortEnterCritical>
 8005212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005214:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005218:	b25b      	sxtb	r3, r3
 800521a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800521e:	d103      	bne.n	8005228 <xQueueGenericSend+0x16c>
 8005220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005222:	2200      	movs	r2, #0
 8005224:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800522e:	b25b      	sxtb	r3, r3
 8005230:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005234:	d103      	bne.n	800523e <xQueueGenericSend+0x182>
 8005236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800523e:	f002 fad1 	bl	80077e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005242:	1d3a      	adds	r2, r7, #4
 8005244:	f107 0314 	add.w	r3, r7, #20
 8005248:	4611      	mov	r1, r2
 800524a:	4618      	mov	r0, r3
 800524c:	f001 faea 	bl	8006824 <xTaskCheckForTimeOut>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d124      	bne.n	80052a0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005256:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005258:	f000 fd31 	bl	8005cbe <prvIsQueueFull>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d018      	beq.n	8005294 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005264:	3310      	adds	r3, #16
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	4611      	mov	r1, r2
 800526a:	4618      	mov	r0, r3
 800526c:	f001 fa10 	bl	8006690 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005270:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005272:	f000 fcbc 	bl	8005bee <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005276:	f001 f82d 	bl	80062d4 <xTaskResumeAll>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	f47f af7c 	bne.w	800517a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005282:	4b0c      	ldr	r3, [pc, #48]	; (80052b4 <xQueueGenericSend+0x1f8>)
 8005284:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005288:	601a      	str	r2, [r3, #0]
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	f3bf 8f6f 	isb	sy
 8005292:	e772      	b.n	800517a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005294:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005296:	f000 fcaa 	bl	8005bee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800529a:	f001 f81b 	bl	80062d4 <xTaskResumeAll>
 800529e:	e76c      	b.n	800517a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80052a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052a2:	f000 fca4 	bl	8005bee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80052a6:	f001 f815 	bl	80062d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80052aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3738      	adds	r7, #56	; 0x38
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	e000ed04 	.word	0xe000ed04

080052b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b090      	sub	sp, #64	; 0x40
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]
 80052c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80052ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d10a      	bne.n	80052e6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80052d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d4:	f383 8811 	msr	BASEPRI, r3
 80052d8:	f3bf 8f6f 	isb	sy
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80052e2:	bf00      	nop
 80052e4:	e7fe      	b.n	80052e4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d103      	bne.n	80052f4 <xQueueGenericSendFromISR+0x3c>
 80052ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d101      	bne.n	80052f8 <xQueueGenericSendFromISR+0x40>
 80052f4:	2301      	movs	r3, #1
 80052f6:	e000      	b.n	80052fa <xQueueGenericSendFromISR+0x42>
 80052f8:	2300      	movs	r3, #0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d10a      	bne.n	8005314 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80052fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005302:	f383 8811 	msr	BASEPRI, r3
 8005306:	f3bf 8f6f 	isb	sy
 800530a:	f3bf 8f4f 	dsb	sy
 800530e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005310:	bf00      	nop
 8005312:	e7fe      	b.n	8005312 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	2b02      	cmp	r3, #2
 8005318:	d103      	bne.n	8005322 <xQueueGenericSendFromISR+0x6a>
 800531a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800531c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800531e:	2b01      	cmp	r3, #1
 8005320:	d101      	bne.n	8005326 <xQueueGenericSendFromISR+0x6e>
 8005322:	2301      	movs	r3, #1
 8005324:	e000      	b.n	8005328 <xQueueGenericSendFromISR+0x70>
 8005326:	2300      	movs	r3, #0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10a      	bne.n	8005342 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800532c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005330:	f383 8811 	msr	BASEPRI, r3
 8005334:	f3bf 8f6f 	isb	sy
 8005338:	f3bf 8f4f 	dsb	sy
 800533c:	623b      	str	r3, [r7, #32]
}
 800533e:	bf00      	nop
 8005340:	e7fe      	b.n	8005340 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005342:	f002 fb01 	bl	8007948 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005346:	f3ef 8211 	mrs	r2, BASEPRI
 800534a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534e:	f383 8811 	msr	BASEPRI, r3
 8005352:	f3bf 8f6f 	isb	sy
 8005356:	f3bf 8f4f 	dsb	sy
 800535a:	61fa      	str	r2, [r7, #28]
 800535c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800535e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005360:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005364:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800536a:	429a      	cmp	r2, r3
 800536c:	d302      	bcc.n	8005374 <xQueueGenericSendFromISR+0xbc>
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	2b02      	cmp	r3, #2
 8005372:	d12f      	bne.n	80053d4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005376:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800537a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800537e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005382:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	68b9      	ldr	r1, [r7, #8]
 8005388:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800538a:	f000 fba0 	bl	8005ace <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800538e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005392:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005396:	d112      	bne.n	80053be <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800539a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539c:	2b00      	cmp	r3, #0
 800539e:	d016      	beq.n	80053ce <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a2:	3324      	adds	r3, #36	; 0x24
 80053a4:	4618      	mov	r0, r3
 80053a6:	f001 f9c3 	bl	8006730 <xTaskRemoveFromEventList>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00e      	beq.n	80053ce <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00b      	beq.n	80053ce <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	601a      	str	r2, [r3, #0]
 80053bc:	e007      	b.n	80053ce <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80053be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80053c2:	3301      	adds	r3, #1
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	b25a      	sxtb	r2, r3
 80053c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80053ce:	2301      	movs	r3, #1
 80053d0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80053d2:	e001      	b.n	80053d8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80053d4:	2300      	movs	r3, #0
 80053d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053da:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80053e2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80053e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3740      	adds	r7, #64	; 0x40
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b08e      	sub	sp, #56	; 0x38
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
 80053f6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80053fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10a      	bne.n	8005418 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005406:	f383 8811 	msr	BASEPRI, r3
 800540a:	f3bf 8f6f 	isb	sy
 800540e:	f3bf 8f4f 	dsb	sy
 8005412:	623b      	str	r3, [r7, #32]
}
 8005414:	bf00      	nop
 8005416:	e7fe      	b.n	8005416 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00a      	beq.n	8005436 <xQueueGiveFromISR+0x48>
	__asm volatile
 8005420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005424:	f383 8811 	msr	BASEPRI, r3
 8005428:	f3bf 8f6f 	isb	sy
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	61fb      	str	r3, [r7, #28]
}
 8005432:	bf00      	nop
 8005434:	e7fe      	b.n	8005434 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d103      	bne.n	8005446 <xQueueGiveFromISR+0x58>
 800543e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <xQueueGiveFromISR+0x5c>
 8005446:	2301      	movs	r3, #1
 8005448:	e000      	b.n	800544c <xQueueGiveFromISR+0x5e>
 800544a:	2300      	movs	r3, #0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d10a      	bne.n	8005466 <xQueueGiveFromISR+0x78>
	__asm volatile
 8005450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005454:	f383 8811 	msr	BASEPRI, r3
 8005458:	f3bf 8f6f 	isb	sy
 800545c:	f3bf 8f4f 	dsb	sy
 8005460:	61bb      	str	r3, [r7, #24]
}
 8005462:	bf00      	nop
 8005464:	e7fe      	b.n	8005464 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005466:	f002 fa6f 	bl	8007948 <vPortValidateInterruptPriority>
	__asm volatile
 800546a:	f3ef 8211 	mrs	r2, BASEPRI
 800546e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005472:	f383 8811 	msr	BASEPRI, r3
 8005476:	f3bf 8f6f 	isb	sy
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	617a      	str	r2, [r7, #20]
 8005480:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005482:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005484:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800548c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005490:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005492:	429a      	cmp	r2, r3
 8005494:	d22b      	bcs.n	80054ee <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005498:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800549c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80054a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a2:	1c5a      	adds	r2, r3, #1
 80054a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80054a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80054ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054b0:	d112      	bne.n	80054d8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d016      	beq.n	80054e8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054bc:	3324      	adds	r3, #36	; 0x24
 80054be:	4618      	mov	r0, r3
 80054c0:	f001 f936 	bl	8006730 <xTaskRemoveFromEventList>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00e      	beq.n	80054e8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00b      	beq.n	80054e8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	2201      	movs	r2, #1
 80054d4:	601a      	str	r2, [r3, #0]
 80054d6:	e007      	b.n	80054e8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80054d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054dc:	3301      	adds	r3, #1
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	b25a      	sxtb	r2, r3
 80054e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80054e8:	2301      	movs	r3, #1
 80054ea:	637b      	str	r3, [r7, #52]	; 0x34
 80054ec:	e001      	b.n	80054f2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80054ee:	2300      	movs	r3, #0
 80054f0:	637b      	str	r3, [r7, #52]	; 0x34
 80054f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f383 8811 	msr	BASEPRI, r3
}
 80054fc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80054fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005500:	4618      	mov	r0, r3
 8005502:	3738      	adds	r7, #56	; 0x38
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b08c      	sub	sp, #48	; 0x30
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005514:	2300      	movs	r3, #0
 8005516:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800551c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10a      	bne.n	8005538 <xQueueReceive+0x30>
	__asm volatile
 8005522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005526:	f383 8811 	msr	BASEPRI, r3
 800552a:	f3bf 8f6f 	isb	sy
 800552e:	f3bf 8f4f 	dsb	sy
 8005532:	623b      	str	r3, [r7, #32]
}
 8005534:	bf00      	nop
 8005536:	e7fe      	b.n	8005536 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d103      	bne.n	8005546 <xQueueReceive+0x3e>
 800553e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005542:	2b00      	cmp	r3, #0
 8005544:	d101      	bne.n	800554a <xQueueReceive+0x42>
 8005546:	2301      	movs	r3, #1
 8005548:	e000      	b.n	800554c <xQueueReceive+0x44>
 800554a:	2300      	movs	r3, #0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10a      	bne.n	8005566 <xQueueReceive+0x5e>
	__asm volatile
 8005550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005554:	f383 8811 	msr	BASEPRI, r3
 8005558:	f3bf 8f6f 	isb	sy
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	61fb      	str	r3, [r7, #28]
}
 8005562:	bf00      	nop
 8005564:	e7fe      	b.n	8005564 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005566:	f001 fab5 	bl	8006ad4 <xTaskGetSchedulerState>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d102      	bne.n	8005576 <xQueueReceive+0x6e>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <xQueueReceive+0x72>
 8005576:	2301      	movs	r3, #1
 8005578:	e000      	b.n	800557c <xQueueReceive+0x74>
 800557a:	2300      	movs	r3, #0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d10a      	bne.n	8005596 <xQueueReceive+0x8e>
	__asm volatile
 8005580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005584:	f383 8811 	msr	BASEPRI, r3
 8005588:	f3bf 8f6f 	isb	sy
 800558c:	f3bf 8f4f 	dsb	sy
 8005590:	61bb      	str	r3, [r7, #24]
}
 8005592:	bf00      	nop
 8005594:	e7fe      	b.n	8005594 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005596:	f002 f8f5 	bl	8007784 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800559a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d01f      	beq.n	80055e6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80055a6:	68b9      	ldr	r1, [r7, #8]
 80055a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055aa:	f000 fafa 	bl	8005ba2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	1e5a      	subs	r2, r3, #1
 80055b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00f      	beq.n	80055de <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c0:	3310      	adds	r3, #16
 80055c2:	4618      	mov	r0, r3
 80055c4:	f001 f8b4 	bl	8006730 <xTaskRemoveFromEventList>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d007      	beq.n	80055de <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80055ce:	4b3d      	ldr	r3, [pc, #244]	; (80056c4 <xQueueReceive+0x1bc>)
 80055d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055d4:	601a      	str	r2, [r3, #0]
 80055d6:	f3bf 8f4f 	dsb	sy
 80055da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80055de:	f002 f901 	bl	80077e4 <vPortExitCritical>
				return pdPASS;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e069      	b.n	80056ba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d103      	bne.n	80055f4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80055ec:	f002 f8fa 	bl	80077e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80055f0:	2300      	movs	r3, #0
 80055f2:	e062      	b.n	80056ba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d106      	bne.n	8005608 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055fa:	f107 0310 	add.w	r3, r7, #16
 80055fe:	4618      	mov	r0, r3
 8005600:	f001 f8fa 	bl	80067f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005604:	2301      	movs	r3, #1
 8005606:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005608:	f002 f8ec 	bl	80077e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800560c:	f000 fe54 	bl	80062b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005610:	f002 f8b8 	bl	8007784 <vPortEnterCritical>
 8005614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005616:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800561a:	b25b      	sxtb	r3, r3
 800561c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005620:	d103      	bne.n	800562a <xQueueReceive+0x122>
 8005622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005624:	2200      	movs	r2, #0
 8005626:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800562a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005630:	b25b      	sxtb	r3, r3
 8005632:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005636:	d103      	bne.n	8005640 <xQueueReceive+0x138>
 8005638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563a:	2200      	movs	r2, #0
 800563c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005640:	f002 f8d0 	bl	80077e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005644:	1d3a      	adds	r2, r7, #4
 8005646:	f107 0310 	add.w	r3, r7, #16
 800564a:	4611      	mov	r1, r2
 800564c:	4618      	mov	r0, r3
 800564e:	f001 f8e9 	bl	8006824 <xTaskCheckForTimeOut>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d123      	bne.n	80056a0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005658:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800565a:	f000 fb1a 	bl	8005c92 <prvIsQueueEmpty>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d017      	beq.n	8005694 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005666:	3324      	adds	r3, #36	; 0x24
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	4611      	mov	r1, r2
 800566c:	4618      	mov	r0, r3
 800566e:	f001 f80f 	bl	8006690 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005672:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005674:	f000 fabb 	bl	8005bee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005678:	f000 fe2c 	bl	80062d4 <xTaskResumeAll>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d189      	bne.n	8005596 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005682:	4b10      	ldr	r3, [pc, #64]	; (80056c4 <xQueueReceive+0x1bc>)
 8005684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005688:	601a      	str	r2, [r3, #0]
 800568a:	f3bf 8f4f 	dsb	sy
 800568e:	f3bf 8f6f 	isb	sy
 8005692:	e780      	b.n	8005596 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005694:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005696:	f000 faaa 	bl	8005bee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800569a:	f000 fe1b 	bl	80062d4 <xTaskResumeAll>
 800569e:	e77a      	b.n	8005596 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80056a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056a2:	f000 faa4 	bl	8005bee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80056a6:	f000 fe15 	bl	80062d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056ac:	f000 faf1 	bl	8005c92 <prvIsQueueEmpty>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f43f af6f 	beq.w	8005596 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80056b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3730      	adds	r7, #48	; 0x30
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	e000ed04 	.word	0xe000ed04

080056c8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b08e      	sub	sp, #56	; 0x38
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80056d2:	2300      	movs	r3, #0
 80056d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80056da:	2300      	movs	r3, #0
 80056dc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80056de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10a      	bne.n	80056fa <xQueueSemaphoreTake+0x32>
	__asm volatile
 80056e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e8:	f383 8811 	msr	BASEPRI, r3
 80056ec:	f3bf 8f6f 	isb	sy
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	623b      	str	r3, [r7, #32]
}
 80056f6:	bf00      	nop
 80056f8:	e7fe      	b.n	80056f8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80056fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00a      	beq.n	8005718 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005706:	f383 8811 	msr	BASEPRI, r3
 800570a:	f3bf 8f6f 	isb	sy
 800570e:	f3bf 8f4f 	dsb	sy
 8005712:	61fb      	str	r3, [r7, #28]
}
 8005714:	bf00      	nop
 8005716:	e7fe      	b.n	8005716 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005718:	f001 f9dc 	bl	8006ad4 <xTaskGetSchedulerState>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d102      	bne.n	8005728 <xQueueSemaphoreTake+0x60>
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d101      	bne.n	800572c <xQueueSemaphoreTake+0x64>
 8005728:	2301      	movs	r3, #1
 800572a:	e000      	b.n	800572e <xQueueSemaphoreTake+0x66>
 800572c:	2300      	movs	r3, #0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d10a      	bne.n	8005748 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005736:	f383 8811 	msr	BASEPRI, r3
 800573a:	f3bf 8f6f 	isb	sy
 800573e:	f3bf 8f4f 	dsb	sy
 8005742:	61bb      	str	r3, [r7, #24]
}
 8005744:	bf00      	nop
 8005746:	e7fe      	b.n	8005746 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005748:	f002 f81c 	bl	8007784 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800574c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005750:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005754:	2b00      	cmp	r3, #0
 8005756:	d024      	beq.n	80057a2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575a:	1e5a      	subs	r2, r3, #1
 800575c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800575e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d104      	bne.n	8005772 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005768:	f001 fb2a 	bl	8006dc0 <pvTaskIncrementMutexHeldCount>
 800576c:	4602      	mov	r2, r0
 800576e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005770:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00f      	beq.n	800579a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800577a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800577c:	3310      	adds	r3, #16
 800577e:	4618      	mov	r0, r3
 8005780:	f000 ffd6 	bl	8006730 <xTaskRemoveFromEventList>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d007      	beq.n	800579a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800578a:	4b54      	ldr	r3, [pc, #336]	; (80058dc <xQueueSemaphoreTake+0x214>)
 800578c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005790:	601a      	str	r2, [r3, #0]
 8005792:	f3bf 8f4f 	dsb	sy
 8005796:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800579a:	f002 f823 	bl	80077e4 <vPortExitCritical>
				return pdPASS;
 800579e:	2301      	movs	r3, #1
 80057a0:	e097      	b.n	80058d2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d111      	bne.n	80057cc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80057a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00a      	beq.n	80057c4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80057ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b2:	f383 8811 	msr	BASEPRI, r3
 80057b6:	f3bf 8f6f 	isb	sy
 80057ba:	f3bf 8f4f 	dsb	sy
 80057be:	617b      	str	r3, [r7, #20]
}
 80057c0:	bf00      	nop
 80057c2:	e7fe      	b.n	80057c2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80057c4:	f002 f80e 	bl	80077e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80057c8:	2300      	movs	r3, #0
 80057ca:	e082      	b.n	80058d2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d106      	bne.n	80057e0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057d2:	f107 030c 	add.w	r3, r7, #12
 80057d6:	4618      	mov	r0, r3
 80057d8:	f001 f80e 	bl	80067f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057dc:	2301      	movs	r3, #1
 80057de:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057e0:	f002 f800 	bl	80077e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057e4:	f000 fd68 	bl	80062b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057e8:	f001 ffcc 	bl	8007784 <vPortEnterCritical>
 80057ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057f2:	b25b      	sxtb	r3, r3
 80057f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057f8:	d103      	bne.n	8005802 <xQueueSemaphoreTake+0x13a>
 80057fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005804:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005808:	b25b      	sxtb	r3, r3
 800580a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800580e:	d103      	bne.n	8005818 <xQueueSemaphoreTake+0x150>
 8005810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005812:	2200      	movs	r2, #0
 8005814:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005818:	f001 ffe4 	bl	80077e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800581c:	463a      	mov	r2, r7
 800581e:	f107 030c 	add.w	r3, r7, #12
 8005822:	4611      	mov	r1, r2
 8005824:	4618      	mov	r0, r3
 8005826:	f000 fffd 	bl	8006824 <xTaskCheckForTimeOut>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d132      	bne.n	8005896 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005830:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005832:	f000 fa2e 	bl	8005c92 <prvIsQueueEmpty>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d026      	beq.n	800588a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800583c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d109      	bne.n	8005858 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005844:	f001 ff9e 	bl	8007784 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	4618      	mov	r0, r3
 800584e:	f001 f95f 	bl	8006b10 <xTaskPriorityInherit>
 8005852:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005854:	f001 ffc6 	bl	80077e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800585a:	3324      	adds	r3, #36	; 0x24
 800585c:	683a      	ldr	r2, [r7, #0]
 800585e:	4611      	mov	r1, r2
 8005860:	4618      	mov	r0, r3
 8005862:	f000 ff15 	bl	8006690 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005866:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005868:	f000 f9c1 	bl	8005bee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800586c:	f000 fd32 	bl	80062d4 <xTaskResumeAll>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	f47f af68 	bne.w	8005748 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005878:	4b18      	ldr	r3, [pc, #96]	; (80058dc <xQueueSemaphoreTake+0x214>)
 800587a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800587e:	601a      	str	r2, [r3, #0]
 8005880:	f3bf 8f4f 	dsb	sy
 8005884:	f3bf 8f6f 	isb	sy
 8005888:	e75e      	b.n	8005748 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800588a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800588c:	f000 f9af 	bl	8005bee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005890:	f000 fd20 	bl	80062d4 <xTaskResumeAll>
 8005894:	e758      	b.n	8005748 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005896:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005898:	f000 f9a9 	bl	8005bee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800589c:	f000 fd1a 	bl	80062d4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80058a2:	f000 f9f6 	bl	8005c92 <prvIsQueueEmpty>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f43f af4d 	beq.w	8005748 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80058ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00d      	beq.n	80058d0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80058b4:	f001 ff66 	bl	8007784 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80058b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80058ba:	f000 f8f0 	bl	8005a9e <prvGetDisinheritPriorityAfterTimeout>
 80058be:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80058c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058c6:	4618      	mov	r0, r3
 80058c8:	f001 f9f8 	bl	8006cbc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80058cc:	f001 ff8a 	bl	80077e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80058d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3738      	adds	r7, #56	; 0x38
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	e000ed04 	.word	0xe000ed04

080058e0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b08e      	sub	sp, #56	; 0x38
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80058f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d10a      	bne.n	800590c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80058f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fa:	f383 8811 	msr	BASEPRI, r3
 80058fe:	f3bf 8f6f 	isb	sy
 8005902:	f3bf 8f4f 	dsb	sy
 8005906:	623b      	str	r3, [r7, #32]
}
 8005908:	bf00      	nop
 800590a:	e7fe      	b.n	800590a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d103      	bne.n	800591a <xQueueReceiveFromISR+0x3a>
 8005912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005916:	2b00      	cmp	r3, #0
 8005918:	d101      	bne.n	800591e <xQueueReceiveFromISR+0x3e>
 800591a:	2301      	movs	r3, #1
 800591c:	e000      	b.n	8005920 <xQueueReceiveFromISR+0x40>
 800591e:	2300      	movs	r3, #0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d10a      	bne.n	800593a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005928:	f383 8811 	msr	BASEPRI, r3
 800592c:	f3bf 8f6f 	isb	sy
 8005930:	f3bf 8f4f 	dsb	sy
 8005934:	61fb      	str	r3, [r7, #28]
}
 8005936:	bf00      	nop
 8005938:	e7fe      	b.n	8005938 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800593a:	f002 f805 	bl	8007948 <vPortValidateInterruptPriority>
	__asm volatile
 800593e:	f3ef 8211 	mrs	r2, BASEPRI
 8005942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005946:	f383 8811 	msr	BASEPRI, r3
 800594a:	f3bf 8f6f 	isb	sy
 800594e:	f3bf 8f4f 	dsb	sy
 8005952:	61ba      	str	r2, [r7, #24]
 8005954:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005956:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005958:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800595a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005962:	2b00      	cmp	r3, #0
 8005964:	d02f      	beq.n	80059c6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005968:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800596c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005970:	68b9      	ldr	r1, [r7, #8]
 8005972:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005974:	f000 f915 	bl	8005ba2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597a:	1e5a      	subs	r2, r3, #1
 800597c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005980:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005984:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005988:	d112      	bne.n	80059b0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800598a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d016      	beq.n	80059c0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005994:	3310      	adds	r3, #16
 8005996:	4618      	mov	r0, r3
 8005998:	f000 feca 	bl	8006730 <xTaskRemoveFromEventList>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00e      	beq.n	80059c0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00b      	beq.n	80059c0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	601a      	str	r2, [r3, #0]
 80059ae:	e007      	b.n	80059c0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80059b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059b4:	3301      	adds	r3, #1
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	b25a      	sxtb	r2, r3
 80059ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80059c0:	2301      	movs	r3, #1
 80059c2:	637b      	str	r3, [r7, #52]	; 0x34
 80059c4:	e001      	b.n	80059ca <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80059c6:	2300      	movs	r3, #0
 80059c8:	637b      	str	r3, [r7, #52]	; 0x34
 80059ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059cc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	f383 8811 	msr	BASEPRI, r3
}
 80059d4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80059d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3738      	adds	r7, #56	; 0x38
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d10a      	bne.n	8005a04 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80059ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f2:	f383 8811 	msr	BASEPRI, r3
 80059f6:	f3bf 8f6f 	isb	sy
 80059fa:	f3bf 8f4f 	dsb	sy
 80059fe:	60bb      	str	r3, [r7, #8]
}
 8005a00:	bf00      	nop
 8005a02:	e7fe      	b.n	8005a02 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8005a04:	f001 febe 	bl	8007784 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005a0e:	f001 fee9 	bl	80077e4 <vPortExitCritical>

	return uxReturn;
 8005a12:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005a14:	4618      	mov	r0, r3
 8005a16:	3710      	adds	r7, #16
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b087      	sub	sp, #28
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10a      	bne.n	8005a44 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8005a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a32:	f383 8811 	msr	BASEPRI, r3
 8005a36:	f3bf 8f6f 	isb	sy
 8005a3a:	f3bf 8f4f 	dsb	sy
 8005a3e:	60fb      	str	r3, [r7, #12]
}
 8005a40:	bf00      	nop
 8005a42:	e7fe      	b.n	8005a42 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a48:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8005a4a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	371c      	adds	r7, #28
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d10a      	bne.n	8005a80 <vQueueDelete+0x28>
	__asm volatile
 8005a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6e:	f383 8811 	msr	BASEPRI, r3
 8005a72:	f3bf 8f6f 	isb	sy
 8005a76:	f3bf 8f4f 	dsb	sy
 8005a7a:	60bb      	str	r3, [r7, #8]
}
 8005a7c:	bf00      	nop
 8005a7e:	e7fe      	b.n	8005a7e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f000 f95f 	bl	8005d44 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d102      	bne.n	8005a96 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f002 f865 	bl	8007b60 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005a96:	bf00      	nop
 8005a98:	3710      	adds	r7, #16
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b085      	sub	sp, #20
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d006      	beq.n	8005abc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005ab8:	60fb      	str	r3, [r7, #12]
 8005aba:	e001      	b.n	8005ac0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005abc:	2300      	movs	r3, #0
 8005abe:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
	}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3714      	adds	r7, #20
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b086      	sub	sp, #24
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	60f8      	str	r0, [r7, #12]
 8005ad6:	60b9      	str	r1, [r7, #8]
 8005ad8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005ada:	2300      	movs	r3, #0
 8005adc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d10d      	bne.n	8005b08 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d14d      	bne.n	8005b90 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	4618      	mov	r0, r3
 8005afa:	f001 f871 	bl	8006be0 <xTaskPriorityDisinherit>
 8005afe:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	609a      	str	r2, [r3, #8]
 8005b06:	e043      	b.n	8005b90 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d119      	bne.n	8005b42 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6858      	ldr	r0, [r3, #4]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b16:	461a      	mov	r2, r3
 8005b18:	68b9      	ldr	r1, [r7, #8]
 8005b1a:	f00f fcfe 	bl	801551a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	685a      	ldr	r2, [r3, #4]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b26:	441a      	add	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d32b      	bcc.n	8005b90 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	605a      	str	r2, [r3, #4]
 8005b40:	e026      	b.n	8005b90 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	68d8      	ldr	r0, [r3, #12]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	68b9      	ldr	r1, [r7, #8]
 8005b4e:	f00f fce4 	bl	801551a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	68da      	ldr	r2, [r3, #12]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5a:	425b      	negs	r3, r3
 8005b5c:	441a      	add	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	68da      	ldr	r2, [r3, #12]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d207      	bcs.n	8005b7e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	689a      	ldr	r2, [r3, #8]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b76:	425b      	negs	r3, r3
 8005b78:	441a      	add	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d105      	bne.n	8005b90 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d002      	beq.n	8005b90 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	1c5a      	adds	r2, r3, #1
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005b98:	697b      	ldr	r3, [r7, #20]
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3718      	adds	r7, #24
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b082      	sub	sp, #8
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
 8005baa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d018      	beq.n	8005be6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	68da      	ldr	r2, [r3, #12]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbc:	441a      	add	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	68da      	ldr	r2, [r3, #12]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d303      	bcc.n	8005bd6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68d9      	ldr	r1, [r3, #12]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bde:	461a      	mov	r2, r3
 8005be0:	6838      	ldr	r0, [r7, #0]
 8005be2:	f00f fc9a 	bl	801551a <memcpy>
	}
}
 8005be6:	bf00      	nop
 8005be8:	3708      	adds	r7, #8
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b084      	sub	sp, #16
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005bf6:	f001 fdc5 	bl	8007784 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c00:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c02:	e011      	b.n	8005c28 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d012      	beq.n	8005c32 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	3324      	adds	r3, #36	; 0x24
 8005c10:	4618      	mov	r0, r3
 8005c12:	f000 fd8d 	bl	8006730 <xTaskRemoveFromEventList>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d001      	beq.n	8005c20 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005c1c:	f000 fe64 	bl	80068e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005c20:	7bfb      	ldrb	r3, [r7, #15]
 8005c22:	3b01      	subs	r3, #1
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	dce9      	bgt.n	8005c04 <prvUnlockQueue+0x16>
 8005c30:	e000      	b.n	8005c34 <prvUnlockQueue+0x46>
					break;
 8005c32:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	22ff      	movs	r2, #255	; 0xff
 8005c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005c3c:	f001 fdd2 	bl	80077e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005c40:	f001 fda0 	bl	8007784 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c4a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c4c:	e011      	b.n	8005c72 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d012      	beq.n	8005c7c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	3310      	adds	r3, #16
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 fd68 	bl	8006730 <xTaskRemoveFromEventList>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d001      	beq.n	8005c6a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005c66:	f000 fe3f 	bl	80068e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005c6a:	7bbb      	ldrb	r3, [r7, #14]
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	dce9      	bgt.n	8005c4e <prvUnlockQueue+0x60>
 8005c7a:	e000      	b.n	8005c7e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005c7c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	22ff      	movs	r2, #255	; 0xff
 8005c82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005c86:	f001 fdad 	bl	80077e4 <vPortExitCritical>
}
 8005c8a:	bf00      	nop
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b084      	sub	sp, #16
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c9a:	f001 fd73 	bl	8007784 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d102      	bne.n	8005cac <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	60fb      	str	r3, [r7, #12]
 8005caa:	e001      	b.n	8005cb0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005cac:	2300      	movs	r3, #0
 8005cae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005cb0:	f001 fd98 	bl	80077e4 <vPortExitCritical>

	return xReturn;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b084      	sub	sp, #16
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005cc6:	f001 fd5d 	bl	8007784 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d102      	bne.n	8005cdc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	60fb      	str	r3, [r7, #12]
 8005cda:	e001      	b.n	8005ce0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ce0:	f001 fd80 	bl	80077e4 <vPortExitCritical>

	return xReturn;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
	...

08005cf0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	60fb      	str	r3, [r7, #12]
 8005cfe:	e014      	b.n	8005d2a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005d00:	4a0f      	ldr	r2, [pc, #60]	; (8005d40 <vQueueAddToRegistry+0x50>)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d10b      	bne.n	8005d24 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005d0c:	490c      	ldr	r1, [pc, #48]	; (8005d40 <vQueueAddToRegistry+0x50>)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	683a      	ldr	r2, [r7, #0]
 8005d12:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005d16:	4a0a      	ldr	r2, [pc, #40]	; (8005d40 <vQueueAddToRegistry+0x50>)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	00db      	lsls	r3, r3, #3
 8005d1c:	4413      	add	r3, r2
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005d22:	e006      	b.n	8005d32 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	3301      	adds	r3, #1
 8005d28:	60fb      	str	r3, [r7, #12]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2b07      	cmp	r3, #7
 8005d2e:	d9e7      	bls.n	8005d00 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005d30:	bf00      	nop
 8005d32:	bf00      	nop
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	20008080 	.word	0x20008080

08005d44 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	60fb      	str	r3, [r7, #12]
 8005d50:	e016      	b.n	8005d80 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005d52:	4a10      	ldr	r2, [pc, #64]	; (8005d94 <vQueueUnregisterQueue+0x50>)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	00db      	lsls	r3, r3, #3
 8005d58:	4413      	add	r3, r2
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d10b      	bne.n	8005d7a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005d62:	4a0c      	ldr	r2, [pc, #48]	; (8005d94 <vQueueUnregisterQueue+0x50>)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2100      	movs	r1, #0
 8005d68:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005d6c:	4a09      	ldr	r2, [pc, #36]	; (8005d94 <vQueueUnregisterQueue+0x50>)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	00db      	lsls	r3, r3, #3
 8005d72:	4413      	add	r3, r2
 8005d74:	2200      	movs	r2, #0
 8005d76:	605a      	str	r2, [r3, #4]
				break;
 8005d78:	e006      	b.n	8005d88 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	60fb      	str	r3, [r7, #12]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2b07      	cmp	r3, #7
 8005d84:	d9e5      	bls.n	8005d52 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005d86:	bf00      	nop
 8005d88:	bf00      	nop
 8005d8a:	3714      	adds	r7, #20
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr
 8005d94:	20008080 	.word	0x20008080

08005d98 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005da8:	f001 fcec 	bl	8007784 <vPortEnterCritical>
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005db2:	b25b      	sxtb	r3, r3
 8005db4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005db8:	d103      	bne.n	8005dc2 <vQueueWaitForMessageRestricted+0x2a>
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005dc8:	b25b      	sxtb	r3, r3
 8005dca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dce:	d103      	bne.n	8005dd8 <vQueueWaitForMessageRestricted+0x40>
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dd8:	f001 fd04 	bl	80077e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d106      	bne.n	8005df2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	3324      	adds	r3, #36	; 0x24
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	68b9      	ldr	r1, [r7, #8]
 8005dec:	4618      	mov	r0, r3
 8005dee:	f000 fc73 	bl	80066d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005df2:	6978      	ldr	r0, [r7, #20]
 8005df4:	f7ff fefb 	bl	8005bee <prvUnlockQueue>
	}
 8005df8:	bf00      	nop
 8005dfa:	3718      	adds	r7, #24
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b08e      	sub	sp, #56	; 0x38
 8005e04:	af04      	add	r7, sp, #16
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	607a      	str	r2, [r7, #4]
 8005e0c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10a      	bne.n	8005e2a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e18:	f383 8811 	msr	BASEPRI, r3
 8005e1c:	f3bf 8f6f 	isb	sy
 8005e20:	f3bf 8f4f 	dsb	sy
 8005e24:	623b      	str	r3, [r7, #32]
}
 8005e26:	bf00      	nop
 8005e28:	e7fe      	b.n	8005e28 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10a      	bne.n	8005e46 <xTaskCreateStatic+0x46>
	__asm volatile
 8005e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e34:	f383 8811 	msr	BASEPRI, r3
 8005e38:	f3bf 8f6f 	isb	sy
 8005e3c:	f3bf 8f4f 	dsb	sy
 8005e40:	61fb      	str	r3, [r7, #28]
}
 8005e42:	bf00      	nop
 8005e44:	e7fe      	b.n	8005e44 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e46:	23bc      	movs	r3, #188	; 0xbc
 8005e48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	2bbc      	cmp	r3, #188	; 0xbc
 8005e4e:	d00a      	beq.n	8005e66 <xTaskCreateStatic+0x66>
	__asm volatile
 8005e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e54:	f383 8811 	msr	BASEPRI, r3
 8005e58:	f3bf 8f6f 	isb	sy
 8005e5c:	f3bf 8f4f 	dsb	sy
 8005e60:	61bb      	str	r3, [r7, #24]
}
 8005e62:	bf00      	nop
 8005e64:	e7fe      	b.n	8005e64 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005e66:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d01e      	beq.n	8005eac <xTaskCreateStatic+0xac>
 8005e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d01b      	beq.n	8005eac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e76:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e7c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e80:	2202      	movs	r2, #2
 8005e82:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e86:	2300      	movs	r3, #0
 8005e88:	9303      	str	r3, [sp, #12]
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8c:	9302      	str	r3, [sp, #8]
 8005e8e:	f107 0314 	add.w	r3, r7, #20
 8005e92:	9301      	str	r3, [sp, #4]
 8005e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e96:	9300      	str	r3, [sp, #0]
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	68b9      	ldr	r1, [r7, #8]
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f000 f850 	bl	8005f44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ea4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ea6:	f000 f8f3 	bl	8006090 <prvAddNewTaskToReadyList>
 8005eaa:	e001      	b.n	8005eb0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005eac:	2300      	movs	r3, #0
 8005eae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005eb0:	697b      	ldr	r3, [r7, #20]
	}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3728      	adds	r7, #40	; 0x28
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b08c      	sub	sp, #48	; 0x30
 8005ebe:	af04      	add	r7, sp, #16
 8005ec0:	60f8      	str	r0, [r7, #12]
 8005ec2:	60b9      	str	r1, [r7, #8]
 8005ec4:	603b      	str	r3, [r7, #0]
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005eca:	88fb      	ldrh	r3, [r7, #6]
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f001 fd7a 	bl	80079c8 <pvPortMalloc>
 8005ed4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00e      	beq.n	8005efa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005edc:	20bc      	movs	r0, #188	; 0xbc
 8005ede:	f001 fd73 	bl	80079c8 <pvPortMalloc>
 8005ee2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d003      	beq.n	8005ef2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	631a      	str	r2, [r3, #48]	; 0x30
 8005ef0:	e005      	b.n	8005efe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ef2:	6978      	ldr	r0, [r7, #20]
 8005ef4:	f001 fe34 	bl	8007b60 <vPortFree>
 8005ef8:	e001      	b.n	8005efe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005efa:	2300      	movs	r3, #0
 8005efc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d017      	beq.n	8005f34 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f0c:	88fa      	ldrh	r2, [r7, #6]
 8005f0e:	2300      	movs	r3, #0
 8005f10:	9303      	str	r3, [sp, #12]
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	9302      	str	r3, [sp, #8]
 8005f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f18:	9301      	str	r3, [sp, #4]
 8005f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	68b9      	ldr	r1, [r7, #8]
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f000 f80e 	bl	8005f44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f28:	69f8      	ldr	r0, [r7, #28]
 8005f2a:	f000 f8b1 	bl	8006090 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	61bb      	str	r3, [r7, #24]
 8005f32:	e002      	b.n	8005f3a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f38:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f3a:	69bb      	ldr	r3, [r7, #24]
	}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3720      	adds	r7, #32
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b088      	sub	sp, #32
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]
 8005f50:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f54:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	21a5      	movs	r1, #165	; 0xa5
 8005f5e:	f00f faea 	bl	8015536 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	4413      	add	r3, r2
 8005f72:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	f023 0307 	bic.w	r3, r3, #7
 8005f7a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	f003 0307 	and.w	r3, r3, #7
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00a      	beq.n	8005f9c <prvInitialiseNewTask+0x58>
	__asm volatile
 8005f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f8a:	f383 8811 	msr	BASEPRI, r3
 8005f8e:	f3bf 8f6f 	isb	sy
 8005f92:	f3bf 8f4f 	dsb	sy
 8005f96:	617b      	str	r3, [r7, #20]
}
 8005f98:	bf00      	nop
 8005f9a:	e7fe      	b.n	8005f9a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d01f      	beq.n	8005fe2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	61fb      	str	r3, [r7, #28]
 8005fa6:	e012      	b.n	8005fce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	4413      	add	r3, r2
 8005fae:	7819      	ldrb	r1, [r3, #0]
 8005fb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	3334      	adds	r3, #52	; 0x34
 8005fb8:	460a      	mov	r2, r1
 8005fba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d006      	beq.n	8005fd6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	61fb      	str	r3, [r7, #28]
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	2b0f      	cmp	r3, #15
 8005fd2:	d9e9      	bls.n	8005fa8 <prvInitialiseNewTask+0x64>
 8005fd4:	e000      	b.n	8005fd8 <prvInitialiseNewTask+0x94>
			{
				break;
 8005fd6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fe0:	e003      	b.n	8005fea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fec:	2b37      	cmp	r3, #55	; 0x37
 8005fee:	d901      	bls.n	8005ff4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ff0:	2337      	movs	r3, #55	; 0x37
 8005ff2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ff8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ffe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006002:	2200      	movs	r2, #0
 8006004:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006008:	3304      	adds	r3, #4
 800600a:	4618      	mov	r0, r3
 800600c:	f7fe fd64 	bl	8004ad8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006012:	3318      	adds	r3, #24
 8006014:	4618      	mov	r0, r3
 8006016:	f7fe fd5f 	bl	8004ad8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800601a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800601e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006022:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006028:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800602a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800602e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006032:	2200      	movs	r2, #0
 8006034:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603a:	2200      	movs	r2, #0
 800603c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006042:	3354      	adds	r3, #84	; 0x54
 8006044:	2260      	movs	r2, #96	; 0x60
 8006046:	2100      	movs	r1, #0
 8006048:	4618      	mov	r0, r3
 800604a:	f00f fa74 	bl	8015536 <memset>
 800604e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006050:	4a0c      	ldr	r2, [pc, #48]	; (8006084 <prvInitialiseNewTask+0x140>)
 8006052:	659a      	str	r2, [r3, #88]	; 0x58
 8006054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006056:	4a0c      	ldr	r2, [pc, #48]	; (8006088 <prvInitialiseNewTask+0x144>)
 8006058:	65da      	str	r2, [r3, #92]	; 0x5c
 800605a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605c:	4a0b      	ldr	r2, [pc, #44]	; (800608c <prvInitialiseNewTask+0x148>)
 800605e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006060:	683a      	ldr	r2, [r7, #0]
 8006062:	68f9      	ldr	r1, [r7, #12]
 8006064:	69b8      	ldr	r0, [r7, #24]
 8006066:	f001 fa61 	bl	800752c <pxPortInitialiseStack>
 800606a:	4602      	mov	r2, r0
 800606c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006072:	2b00      	cmp	r3, #0
 8006074:	d002      	beq.n	800607c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800607a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800607c:	bf00      	nop
 800607e:	3720      	adds	r7, #32
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	08019fd8 	.word	0x08019fd8
 8006088:	08019ff8 	.word	0x08019ff8
 800608c:	08019fb8 	.word	0x08019fb8

08006090 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006098:	f001 fb74 	bl	8007784 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800609c:	4b2d      	ldr	r3, [pc, #180]	; (8006154 <prvAddNewTaskToReadyList+0xc4>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	3301      	adds	r3, #1
 80060a2:	4a2c      	ldr	r2, [pc, #176]	; (8006154 <prvAddNewTaskToReadyList+0xc4>)
 80060a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80060a6:	4b2c      	ldr	r3, [pc, #176]	; (8006158 <prvAddNewTaskToReadyList+0xc8>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d109      	bne.n	80060c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80060ae:	4a2a      	ldr	r2, [pc, #168]	; (8006158 <prvAddNewTaskToReadyList+0xc8>)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80060b4:	4b27      	ldr	r3, [pc, #156]	; (8006154 <prvAddNewTaskToReadyList+0xc4>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d110      	bne.n	80060de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80060bc:	f000 fc38 	bl	8006930 <prvInitialiseTaskLists>
 80060c0:	e00d      	b.n	80060de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80060c2:	4b26      	ldr	r3, [pc, #152]	; (800615c <prvAddNewTaskToReadyList+0xcc>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d109      	bne.n	80060de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80060ca:	4b23      	ldr	r3, [pc, #140]	; (8006158 <prvAddNewTaskToReadyList+0xc8>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d802      	bhi.n	80060de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80060d8:	4a1f      	ldr	r2, [pc, #124]	; (8006158 <prvAddNewTaskToReadyList+0xc8>)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80060de:	4b20      	ldr	r3, [pc, #128]	; (8006160 <prvAddNewTaskToReadyList+0xd0>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	3301      	adds	r3, #1
 80060e4:	4a1e      	ldr	r2, [pc, #120]	; (8006160 <prvAddNewTaskToReadyList+0xd0>)
 80060e6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80060e8:	4b1d      	ldr	r3, [pc, #116]	; (8006160 <prvAddNewTaskToReadyList+0xd0>)
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f4:	4b1b      	ldr	r3, [pc, #108]	; (8006164 <prvAddNewTaskToReadyList+0xd4>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d903      	bls.n	8006104 <prvAddNewTaskToReadyList+0x74>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006100:	4a18      	ldr	r2, [pc, #96]	; (8006164 <prvAddNewTaskToReadyList+0xd4>)
 8006102:	6013      	str	r3, [r2, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006108:	4613      	mov	r3, r2
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	4413      	add	r3, r2
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	4a15      	ldr	r2, [pc, #84]	; (8006168 <prvAddNewTaskToReadyList+0xd8>)
 8006112:	441a      	add	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	3304      	adds	r3, #4
 8006118:	4619      	mov	r1, r3
 800611a:	4610      	mov	r0, r2
 800611c:	f7fe fce9 	bl	8004af2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006120:	f001 fb60 	bl	80077e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006124:	4b0d      	ldr	r3, [pc, #52]	; (800615c <prvAddNewTaskToReadyList+0xcc>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00e      	beq.n	800614a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800612c:	4b0a      	ldr	r3, [pc, #40]	; (8006158 <prvAddNewTaskToReadyList+0xc8>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006136:	429a      	cmp	r2, r3
 8006138:	d207      	bcs.n	800614a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800613a:	4b0c      	ldr	r3, [pc, #48]	; (800616c <prvAddNewTaskToReadyList+0xdc>)
 800613c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006140:	601a      	str	r2, [r3, #0]
 8006142:	f3bf 8f4f 	dsb	sy
 8006146:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800614a:	bf00      	nop
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	20000cfc 	.word	0x20000cfc
 8006158:	20000828 	.word	0x20000828
 800615c:	20000d08 	.word	0x20000d08
 8006160:	20000d18 	.word	0x20000d18
 8006164:	20000d04 	.word	0x20000d04
 8006168:	2000082c 	.word	0x2000082c
 800616c:	e000ed04 	.word	0xe000ed04

08006170 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006178:	2300      	movs	r3, #0
 800617a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d017      	beq.n	80061b2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006182:	4b13      	ldr	r3, [pc, #76]	; (80061d0 <vTaskDelay+0x60>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00a      	beq.n	80061a0 <vTaskDelay+0x30>
	__asm volatile
 800618a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618e:	f383 8811 	msr	BASEPRI, r3
 8006192:	f3bf 8f6f 	isb	sy
 8006196:	f3bf 8f4f 	dsb	sy
 800619a:	60bb      	str	r3, [r7, #8]
}
 800619c:	bf00      	nop
 800619e:	e7fe      	b.n	800619e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80061a0:	f000 f88a 	bl	80062b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80061a4:	2100      	movs	r1, #0
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 fe1e 	bl	8006de8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80061ac:	f000 f892 	bl	80062d4 <xTaskResumeAll>
 80061b0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d107      	bne.n	80061c8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80061b8:	4b06      	ldr	r3, [pc, #24]	; (80061d4 <vTaskDelay+0x64>)
 80061ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061be:	601a      	str	r2, [r3, #0]
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80061c8:	bf00      	nop
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	20000d24 	.word	0x20000d24
 80061d4:	e000ed04 	.word	0xe000ed04

080061d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b08a      	sub	sp, #40	; 0x28
 80061dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80061de:	2300      	movs	r3, #0
 80061e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80061e2:	2300      	movs	r3, #0
 80061e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80061e6:	463a      	mov	r2, r7
 80061e8:	1d39      	adds	r1, r7, #4
 80061ea:	f107 0308 	add.w	r3, r7, #8
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7fe fc1e 	bl	8004a30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80061f4:	6839      	ldr	r1, [r7, #0]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	9202      	str	r2, [sp, #8]
 80061fc:	9301      	str	r3, [sp, #4]
 80061fe:	2300      	movs	r3, #0
 8006200:	9300      	str	r3, [sp, #0]
 8006202:	2300      	movs	r3, #0
 8006204:	460a      	mov	r2, r1
 8006206:	4924      	ldr	r1, [pc, #144]	; (8006298 <vTaskStartScheduler+0xc0>)
 8006208:	4824      	ldr	r0, [pc, #144]	; (800629c <vTaskStartScheduler+0xc4>)
 800620a:	f7ff fdf9 	bl	8005e00 <xTaskCreateStatic>
 800620e:	4603      	mov	r3, r0
 8006210:	4a23      	ldr	r2, [pc, #140]	; (80062a0 <vTaskStartScheduler+0xc8>)
 8006212:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006214:	4b22      	ldr	r3, [pc, #136]	; (80062a0 <vTaskStartScheduler+0xc8>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d002      	beq.n	8006222 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800621c:	2301      	movs	r3, #1
 800621e:	617b      	str	r3, [r7, #20]
 8006220:	e001      	b.n	8006226 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006222:	2300      	movs	r3, #0
 8006224:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d102      	bne.n	8006232 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800622c:	f000 fe30 	bl	8006e90 <xTimerCreateTimerTask>
 8006230:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d11b      	bne.n	8006270 <vTaskStartScheduler+0x98>
	__asm volatile
 8006238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623c:	f383 8811 	msr	BASEPRI, r3
 8006240:	f3bf 8f6f 	isb	sy
 8006244:	f3bf 8f4f 	dsb	sy
 8006248:	613b      	str	r3, [r7, #16]
}
 800624a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800624c:	4b15      	ldr	r3, [pc, #84]	; (80062a4 <vTaskStartScheduler+0xcc>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	3354      	adds	r3, #84	; 0x54
 8006252:	4a15      	ldr	r2, [pc, #84]	; (80062a8 <vTaskStartScheduler+0xd0>)
 8006254:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006256:	4b15      	ldr	r3, [pc, #84]	; (80062ac <vTaskStartScheduler+0xd4>)
 8006258:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800625c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800625e:	4b14      	ldr	r3, [pc, #80]	; (80062b0 <vTaskStartScheduler+0xd8>)
 8006260:	2201      	movs	r2, #1
 8006262:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006264:	4b13      	ldr	r3, [pc, #76]	; (80062b4 <vTaskStartScheduler+0xdc>)
 8006266:	2200      	movs	r2, #0
 8006268:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800626a:	f001 f9e9 	bl	8007640 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800626e:	e00e      	b.n	800628e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006276:	d10a      	bne.n	800628e <vTaskStartScheduler+0xb6>
	__asm volatile
 8006278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627c:	f383 8811 	msr	BASEPRI, r3
 8006280:	f3bf 8f6f 	isb	sy
 8006284:	f3bf 8f4f 	dsb	sy
 8006288:	60fb      	str	r3, [r7, #12]
}
 800628a:	bf00      	nop
 800628c:	e7fe      	b.n	800628c <vTaskStartScheduler+0xb4>
}
 800628e:	bf00      	nop
 8006290:	3718      	adds	r7, #24
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	08016564 	.word	0x08016564
 800629c:	08006901 	.word	0x08006901
 80062a0:	20000d20 	.word	0x20000d20
 80062a4:	20000828 	.word	0x20000828
 80062a8:	2000001c 	.word	0x2000001c
 80062ac:	20000d1c 	.word	0x20000d1c
 80062b0:	20000d08 	.word	0x20000d08
 80062b4:	20000d00 	.word	0x20000d00

080062b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80062b8:	b480      	push	{r7}
 80062ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80062bc:	4b04      	ldr	r3, [pc, #16]	; (80062d0 <vTaskSuspendAll+0x18>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	3301      	adds	r3, #1
 80062c2:	4a03      	ldr	r2, [pc, #12]	; (80062d0 <vTaskSuspendAll+0x18>)
 80062c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80062c6:	bf00      	nop
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr
 80062d0:	20000d24 	.word	0x20000d24

080062d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80062da:	2300      	movs	r3, #0
 80062dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80062de:	2300      	movs	r3, #0
 80062e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80062e2:	4b42      	ldr	r3, [pc, #264]	; (80063ec <xTaskResumeAll+0x118>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10a      	bne.n	8006300 <xTaskResumeAll+0x2c>
	__asm volatile
 80062ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ee:	f383 8811 	msr	BASEPRI, r3
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	f3bf 8f4f 	dsb	sy
 80062fa:	603b      	str	r3, [r7, #0]
}
 80062fc:	bf00      	nop
 80062fe:	e7fe      	b.n	80062fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006300:	f001 fa40 	bl	8007784 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006304:	4b39      	ldr	r3, [pc, #228]	; (80063ec <xTaskResumeAll+0x118>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	3b01      	subs	r3, #1
 800630a:	4a38      	ldr	r2, [pc, #224]	; (80063ec <xTaskResumeAll+0x118>)
 800630c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800630e:	4b37      	ldr	r3, [pc, #220]	; (80063ec <xTaskResumeAll+0x118>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d162      	bne.n	80063dc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006316:	4b36      	ldr	r3, [pc, #216]	; (80063f0 <xTaskResumeAll+0x11c>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d05e      	beq.n	80063dc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800631e:	e02f      	b.n	8006380 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006320:	4b34      	ldr	r3, [pc, #208]	; (80063f4 <xTaskResumeAll+0x120>)
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	3318      	adds	r3, #24
 800632c:	4618      	mov	r0, r3
 800632e:	f7fe fc3d 	bl	8004bac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	3304      	adds	r3, #4
 8006336:	4618      	mov	r0, r3
 8006338:	f7fe fc38 	bl	8004bac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006340:	4b2d      	ldr	r3, [pc, #180]	; (80063f8 <xTaskResumeAll+0x124>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	429a      	cmp	r2, r3
 8006346:	d903      	bls.n	8006350 <xTaskResumeAll+0x7c>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634c:	4a2a      	ldr	r2, [pc, #168]	; (80063f8 <xTaskResumeAll+0x124>)
 800634e:	6013      	str	r3, [r2, #0]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006354:	4613      	mov	r3, r2
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	4a27      	ldr	r2, [pc, #156]	; (80063fc <xTaskResumeAll+0x128>)
 800635e:	441a      	add	r2, r3
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	3304      	adds	r3, #4
 8006364:	4619      	mov	r1, r3
 8006366:	4610      	mov	r0, r2
 8006368:	f7fe fbc3 	bl	8004af2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006370:	4b23      	ldr	r3, [pc, #140]	; (8006400 <xTaskResumeAll+0x12c>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006376:	429a      	cmp	r2, r3
 8006378:	d302      	bcc.n	8006380 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800637a:	4b22      	ldr	r3, [pc, #136]	; (8006404 <xTaskResumeAll+0x130>)
 800637c:	2201      	movs	r2, #1
 800637e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006380:	4b1c      	ldr	r3, [pc, #112]	; (80063f4 <xTaskResumeAll+0x120>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1cb      	bne.n	8006320 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800638e:	f000 fb71 	bl	8006a74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006392:	4b1d      	ldr	r3, [pc, #116]	; (8006408 <xTaskResumeAll+0x134>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d010      	beq.n	80063c0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800639e:	f000 f859 	bl	8006454 <xTaskIncrementTick>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d002      	beq.n	80063ae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80063a8:	4b16      	ldr	r3, [pc, #88]	; (8006404 <xTaskResumeAll+0x130>)
 80063aa:	2201      	movs	r2, #1
 80063ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	3b01      	subs	r3, #1
 80063b2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d1f1      	bne.n	800639e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80063ba:	4b13      	ldr	r3, [pc, #76]	; (8006408 <xTaskResumeAll+0x134>)
 80063bc:	2200      	movs	r2, #0
 80063be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80063c0:	4b10      	ldr	r3, [pc, #64]	; (8006404 <xTaskResumeAll+0x130>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d009      	beq.n	80063dc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80063c8:	2301      	movs	r3, #1
 80063ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80063cc:	4b0f      	ldr	r3, [pc, #60]	; (800640c <xTaskResumeAll+0x138>)
 80063ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063d2:	601a      	str	r2, [r3, #0]
 80063d4:	f3bf 8f4f 	dsb	sy
 80063d8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063dc:	f001 fa02 	bl	80077e4 <vPortExitCritical>

	return xAlreadyYielded;
 80063e0:	68bb      	ldr	r3, [r7, #8]
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	20000d24 	.word	0x20000d24
 80063f0:	20000cfc 	.word	0x20000cfc
 80063f4:	20000cbc 	.word	0x20000cbc
 80063f8:	20000d04 	.word	0x20000d04
 80063fc:	2000082c 	.word	0x2000082c
 8006400:	20000828 	.word	0x20000828
 8006404:	20000d10 	.word	0x20000d10
 8006408:	20000d0c 	.word	0x20000d0c
 800640c:	e000ed04 	.word	0xe000ed04

08006410 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006416:	4b05      	ldr	r3, [pc, #20]	; (800642c <xTaskGetTickCount+0x1c>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800641c:	687b      	ldr	r3, [r7, #4]
}
 800641e:	4618      	mov	r0, r3
 8006420:	370c      	adds	r7, #12
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	20000d00 	.word	0x20000d00

08006430 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006436:	f001 fa87 	bl	8007948 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800643a:	2300      	movs	r3, #0
 800643c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800643e:	4b04      	ldr	r3, [pc, #16]	; (8006450 <xTaskGetTickCountFromISR+0x20>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006444:	683b      	ldr	r3, [r7, #0]
}
 8006446:	4618      	mov	r0, r3
 8006448:	3708      	adds	r7, #8
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	20000d00 	.word	0x20000d00

08006454 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b086      	sub	sp, #24
 8006458:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800645a:	2300      	movs	r3, #0
 800645c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800645e:	4b4f      	ldr	r3, [pc, #316]	; (800659c <xTaskIncrementTick+0x148>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	f040 808f 	bne.w	8006586 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006468:	4b4d      	ldr	r3, [pc, #308]	; (80065a0 <xTaskIncrementTick+0x14c>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	3301      	adds	r3, #1
 800646e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006470:	4a4b      	ldr	r2, [pc, #300]	; (80065a0 <xTaskIncrementTick+0x14c>)
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d120      	bne.n	80064be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800647c:	4b49      	ldr	r3, [pc, #292]	; (80065a4 <xTaskIncrementTick+0x150>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00a      	beq.n	800649c <xTaskIncrementTick+0x48>
	__asm volatile
 8006486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648a:	f383 8811 	msr	BASEPRI, r3
 800648e:	f3bf 8f6f 	isb	sy
 8006492:	f3bf 8f4f 	dsb	sy
 8006496:	603b      	str	r3, [r7, #0]
}
 8006498:	bf00      	nop
 800649a:	e7fe      	b.n	800649a <xTaskIncrementTick+0x46>
 800649c:	4b41      	ldr	r3, [pc, #260]	; (80065a4 <xTaskIncrementTick+0x150>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	60fb      	str	r3, [r7, #12]
 80064a2:	4b41      	ldr	r3, [pc, #260]	; (80065a8 <xTaskIncrementTick+0x154>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a3f      	ldr	r2, [pc, #252]	; (80065a4 <xTaskIncrementTick+0x150>)
 80064a8:	6013      	str	r3, [r2, #0]
 80064aa:	4a3f      	ldr	r2, [pc, #252]	; (80065a8 <xTaskIncrementTick+0x154>)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6013      	str	r3, [r2, #0]
 80064b0:	4b3e      	ldr	r3, [pc, #248]	; (80065ac <xTaskIncrementTick+0x158>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	3301      	adds	r3, #1
 80064b6:	4a3d      	ldr	r2, [pc, #244]	; (80065ac <xTaskIncrementTick+0x158>)
 80064b8:	6013      	str	r3, [r2, #0]
 80064ba:	f000 fadb 	bl	8006a74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80064be:	4b3c      	ldr	r3, [pc, #240]	; (80065b0 <xTaskIncrementTick+0x15c>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	693a      	ldr	r2, [r7, #16]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d349      	bcc.n	800655c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064c8:	4b36      	ldr	r3, [pc, #216]	; (80065a4 <xTaskIncrementTick+0x150>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d104      	bne.n	80064dc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064d2:	4b37      	ldr	r3, [pc, #220]	; (80065b0 <xTaskIncrementTick+0x15c>)
 80064d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064d8:	601a      	str	r2, [r3, #0]
					break;
 80064da:	e03f      	b.n	800655c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064dc:	4b31      	ldr	r3, [pc, #196]	; (80065a4 <xTaskIncrementTick+0x150>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80064ec:	693a      	ldr	r2, [r7, #16]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d203      	bcs.n	80064fc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80064f4:	4a2e      	ldr	r2, [pc, #184]	; (80065b0 <xTaskIncrementTick+0x15c>)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80064fa:	e02f      	b.n	800655c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	3304      	adds	r3, #4
 8006500:	4618      	mov	r0, r3
 8006502:	f7fe fb53 	bl	8004bac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650a:	2b00      	cmp	r3, #0
 800650c:	d004      	beq.n	8006518 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	3318      	adds	r3, #24
 8006512:	4618      	mov	r0, r3
 8006514:	f7fe fb4a 	bl	8004bac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800651c:	4b25      	ldr	r3, [pc, #148]	; (80065b4 <xTaskIncrementTick+0x160>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	429a      	cmp	r2, r3
 8006522:	d903      	bls.n	800652c <xTaskIncrementTick+0xd8>
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006528:	4a22      	ldr	r2, [pc, #136]	; (80065b4 <xTaskIncrementTick+0x160>)
 800652a:	6013      	str	r3, [r2, #0]
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006530:	4613      	mov	r3, r2
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	4413      	add	r3, r2
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	4a1f      	ldr	r2, [pc, #124]	; (80065b8 <xTaskIncrementTick+0x164>)
 800653a:	441a      	add	r2, r3
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	3304      	adds	r3, #4
 8006540:	4619      	mov	r1, r3
 8006542:	4610      	mov	r0, r2
 8006544:	f7fe fad5 	bl	8004af2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800654c:	4b1b      	ldr	r3, [pc, #108]	; (80065bc <xTaskIncrementTick+0x168>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006552:	429a      	cmp	r2, r3
 8006554:	d3b8      	bcc.n	80064c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006556:	2301      	movs	r3, #1
 8006558:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800655a:	e7b5      	b.n	80064c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800655c:	4b17      	ldr	r3, [pc, #92]	; (80065bc <xTaskIncrementTick+0x168>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006562:	4915      	ldr	r1, [pc, #84]	; (80065b8 <xTaskIncrementTick+0x164>)
 8006564:	4613      	mov	r3, r2
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	4413      	add	r3, r2
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	440b      	add	r3, r1
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2b01      	cmp	r3, #1
 8006572:	d901      	bls.n	8006578 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006574:	2301      	movs	r3, #1
 8006576:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006578:	4b11      	ldr	r3, [pc, #68]	; (80065c0 <xTaskIncrementTick+0x16c>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d007      	beq.n	8006590 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006580:	2301      	movs	r3, #1
 8006582:	617b      	str	r3, [r7, #20]
 8006584:	e004      	b.n	8006590 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006586:	4b0f      	ldr	r3, [pc, #60]	; (80065c4 <xTaskIncrementTick+0x170>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	3301      	adds	r3, #1
 800658c:	4a0d      	ldr	r2, [pc, #52]	; (80065c4 <xTaskIncrementTick+0x170>)
 800658e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006590:	697b      	ldr	r3, [r7, #20]
}
 8006592:	4618      	mov	r0, r3
 8006594:	3718      	adds	r7, #24
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	20000d24 	.word	0x20000d24
 80065a0:	20000d00 	.word	0x20000d00
 80065a4:	20000cb4 	.word	0x20000cb4
 80065a8:	20000cb8 	.word	0x20000cb8
 80065ac:	20000d14 	.word	0x20000d14
 80065b0:	20000d1c 	.word	0x20000d1c
 80065b4:	20000d04 	.word	0x20000d04
 80065b8:	2000082c 	.word	0x2000082c
 80065bc:	20000828 	.word	0x20000828
 80065c0:	20000d10 	.word	0x20000d10
 80065c4:	20000d0c 	.word	0x20000d0c

080065c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80065ce:	4b2a      	ldr	r3, [pc, #168]	; (8006678 <vTaskSwitchContext+0xb0>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d003      	beq.n	80065de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80065d6:	4b29      	ldr	r3, [pc, #164]	; (800667c <vTaskSwitchContext+0xb4>)
 80065d8:	2201      	movs	r2, #1
 80065da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80065dc:	e046      	b.n	800666c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80065de:	4b27      	ldr	r3, [pc, #156]	; (800667c <vTaskSwitchContext+0xb4>)
 80065e0:	2200      	movs	r2, #0
 80065e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065e4:	4b26      	ldr	r3, [pc, #152]	; (8006680 <vTaskSwitchContext+0xb8>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	60fb      	str	r3, [r7, #12]
 80065ea:	e010      	b.n	800660e <vTaskSwitchContext+0x46>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d10a      	bne.n	8006608 <vTaskSwitchContext+0x40>
	__asm volatile
 80065f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f6:	f383 8811 	msr	BASEPRI, r3
 80065fa:	f3bf 8f6f 	isb	sy
 80065fe:	f3bf 8f4f 	dsb	sy
 8006602:	607b      	str	r3, [r7, #4]
}
 8006604:	bf00      	nop
 8006606:	e7fe      	b.n	8006606 <vTaskSwitchContext+0x3e>
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	3b01      	subs	r3, #1
 800660c:	60fb      	str	r3, [r7, #12]
 800660e:	491d      	ldr	r1, [pc, #116]	; (8006684 <vTaskSwitchContext+0xbc>)
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	4613      	mov	r3, r2
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	4413      	add	r3, r2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	440b      	add	r3, r1
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d0e4      	beq.n	80065ec <vTaskSwitchContext+0x24>
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	4613      	mov	r3, r2
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	4413      	add	r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4a15      	ldr	r2, [pc, #84]	; (8006684 <vTaskSwitchContext+0xbc>)
 800662e:	4413      	add	r3, r2
 8006630:	60bb      	str	r3, [r7, #8]
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	685a      	ldr	r2, [r3, #4]
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	605a      	str	r2, [r3, #4]
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	685a      	ldr	r2, [r3, #4]
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	3308      	adds	r3, #8
 8006644:	429a      	cmp	r2, r3
 8006646:	d104      	bne.n	8006652 <vTaskSwitchContext+0x8a>
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	685a      	ldr	r2, [r3, #4]
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	605a      	str	r2, [r3, #4]
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	4a0b      	ldr	r2, [pc, #44]	; (8006688 <vTaskSwitchContext+0xc0>)
 800665a:	6013      	str	r3, [r2, #0]
 800665c:	4a08      	ldr	r2, [pc, #32]	; (8006680 <vTaskSwitchContext+0xb8>)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006662:	4b09      	ldr	r3, [pc, #36]	; (8006688 <vTaskSwitchContext+0xc0>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	3354      	adds	r3, #84	; 0x54
 8006668:	4a08      	ldr	r2, [pc, #32]	; (800668c <vTaskSwitchContext+0xc4>)
 800666a:	6013      	str	r3, [r2, #0]
}
 800666c:	bf00      	nop
 800666e:	3714      	adds	r7, #20
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr
 8006678:	20000d24 	.word	0x20000d24
 800667c:	20000d10 	.word	0x20000d10
 8006680:	20000d04 	.word	0x20000d04
 8006684:	2000082c 	.word	0x2000082c
 8006688:	20000828 	.word	0x20000828
 800668c:	2000001c 	.word	0x2000001c

08006690 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d10a      	bne.n	80066b6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80066a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a4:	f383 8811 	msr	BASEPRI, r3
 80066a8:	f3bf 8f6f 	isb	sy
 80066ac:	f3bf 8f4f 	dsb	sy
 80066b0:	60fb      	str	r3, [r7, #12]
}
 80066b2:	bf00      	nop
 80066b4:	e7fe      	b.n	80066b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066b6:	4b07      	ldr	r3, [pc, #28]	; (80066d4 <vTaskPlaceOnEventList+0x44>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	3318      	adds	r3, #24
 80066bc:	4619      	mov	r1, r3
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f7fe fa3b 	bl	8004b3a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80066c4:	2101      	movs	r1, #1
 80066c6:	6838      	ldr	r0, [r7, #0]
 80066c8:	f000 fb8e 	bl	8006de8 <prvAddCurrentTaskToDelayedList>
}
 80066cc:	bf00      	nop
 80066ce:	3710      	adds	r7, #16
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	20000828 	.word	0x20000828

080066d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b086      	sub	sp, #24
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d10a      	bne.n	8006700 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80066ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ee:	f383 8811 	msr	BASEPRI, r3
 80066f2:	f3bf 8f6f 	isb	sy
 80066f6:	f3bf 8f4f 	dsb	sy
 80066fa:	617b      	str	r3, [r7, #20]
}
 80066fc:	bf00      	nop
 80066fe:	e7fe      	b.n	80066fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006700:	4b0a      	ldr	r3, [pc, #40]	; (800672c <vTaskPlaceOnEventListRestricted+0x54>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	3318      	adds	r3, #24
 8006706:	4619      	mov	r1, r3
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	f7fe f9f2 	bl	8004af2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d002      	beq.n	800671a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006714:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006718:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800671a:	6879      	ldr	r1, [r7, #4]
 800671c:	68b8      	ldr	r0, [r7, #8]
 800671e:	f000 fb63 	bl	8006de8 <prvAddCurrentTaskToDelayedList>
	}
 8006722:	bf00      	nop
 8006724:	3718      	adds	r7, #24
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	20000828 	.word	0x20000828

08006730 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b086      	sub	sp, #24
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10a      	bne.n	800675c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674a:	f383 8811 	msr	BASEPRI, r3
 800674e:	f3bf 8f6f 	isb	sy
 8006752:	f3bf 8f4f 	dsb	sy
 8006756:	60fb      	str	r3, [r7, #12]
}
 8006758:	bf00      	nop
 800675a:	e7fe      	b.n	800675a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	3318      	adds	r3, #24
 8006760:	4618      	mov	r0, r3
 8006762:	f7fe fa23 	bl	8004bac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006766:	4b1e      	ldr	r3, [pc, #120]	; (80067e0 <xTaskRemoveFromEventList+0xb0>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d11d      	bne.n	80067aa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	3304      	adds	r3, #4
 8006772:	4618      	mov	r0, r3
 8006774:	f7fe fa1a 	bl	8004bac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800677c:	4b19      	ldr	r3, [pc, #100]	; (80067e4 <xTaskRemoveFromEventList+0xb4>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	429a      	cmp	r2, r3
 8006782:	d903      	bls.n	800678c <xTaskRemoveFromEventList+0x5c>
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006788:	4a16      	ldr	r2, [pc, #88]	; (80067e4 <xTaskRemoveFromEventList+0xb4>)
 800678a:	6013      	str	r3, [r2, #0]
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006790:	4613      	mov	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4413      	add	r3, r2
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	4a13      	ldr	r2, [pc, #76]	; (80067e8 <xTaskRemoveFromEventList+0xb8>)
 800679a:	441a      	add	r2, r3
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	3304      	adds	r3, #4
 80067a0:	4619      	mov	r1, r3
 80067a2:	4610      	mov	r0, r2
 80067a4:	f7fe f9a5 	bl	8004af2 <vListInsertEnd>
 80067a8:	e005      	b.n	80067b6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	3318      	adds	r3, #24
 80067ae:	4619      	mov	r1, r3
 80067b0:	480e      	ldr	r0, [pc, #56]	; (80067ec <xTaskRemoveFromEventList+0xbc>)
 80067b2:	f7fe f99e 	bl	8004af2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ba:	4b0d      	ldr	r3, [pc, #52]	; (80067f0 <xTaskRemoveFromEventList+0xc0>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d905      	bls.n	80067d0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80067c4:	2301      	movs	r3, #1
 80067c6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80067c8:	4b0a      	ldr	r3, [pc, #40]	; (80067f4 <xTaskRemoveFromEventList+0xc4>)
 80067ca:	2201      	movs	r2, #1
 80067cc:	601a      	str	r2, [r3, #0]
 80067ce:	e001      	b.n	80067d4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80067d0:	2300      	movs	r3, #0
 80067d2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80067d4:	697b      	ldr	r3, [r7, #20]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3718      	adds	r7, #24
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	20000d24 	.word	0x20000d24
 80067e4:	20000d04 	.word	0x20000d04
 80067e8:	2000082c 	.word	0x2000082c
 80067ec:	20000cbc 	.word	0x20000cbc
 80067f0:	20000828 	.word	0x20000828
 80067f4:	20000d10 	.word	0x20000d10

080067f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006800:	4b06      	ldr	r3, [pc, #24]	; (800681c <vTaskInternalSetTimeOutState+0x24>)
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006808:	4b05      	ldr	r3, [pc, #20]	; (8006820 <vTaskInternalSetTimeOutState+0x28>)
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	605a      	str	r2, [r3, #4]
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr
 800681c:	20000d14 	.word	0x20000d14
 8006820:	20000d00 	.word	0x20000d00

08006824 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b088      	sub	sp, #32
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d10a      	bne.n	800684a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006838:	f383 8811 	msr	BASEPRI, r3
 800683c:	f3bf 8f6f 	isb	sy
 8006840:	f3bf 8f4f 	dsb	sy
 8006844:	613b      	str	r3, [r7, #16]
}
 8006846:	bf00      	nop
 8006848:	e7fe      	b.n	8006848 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d10a      	bne.n	8006866 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006854:	f383 8811 	msr	BASEPRI, r3
 8006858:	f3bf 8f6f 	isb	sy
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	60fb      	str	r3, [r7, #12]
}
 8006862:	bf00      	nop
 8006864:	e7fe      	b.n	8006864 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006866:	f000 ff8d 	bl	8007784 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800686a:	4b1d      	ldr	r3, [pc, #116]	; (80068e0 <xTaskCheckForTimeOut+0xbc>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	69ba      	ldr	r2, [r7, #24]
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006882:	d102      	bne.n	800688a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006884:	2300      	movs	r3, #0
 8006886:	61fb      	str	r3, [r7, #28]
 8006888:	e023      	b.n	80068d2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	4b15      	ldr	r3, [pc, #84]	; (80068e4 <xTaskCheckForTimeOut+0xc0>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	429a      	cmp	r2, r3
 8006894:	d007      	beq.n	80068a6 <xTaskCheckForTimeOut+0x82>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	69ba      	ldr	r2, [r7, #24]
 800689c:	429a      	cmp	r2, r3
 800689e:	d302      	bcc.n	80068a6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80068a0:	2301      	movs	r3, #1
 80068a2:	61fb      	str	r3, [r7, #28]
 80068a4:	e015      	b.n	80068d2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d20b      	bcs.n	80068c8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	1ad2      	subs	r2, r2, r3
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f7ff ff9b 	bl	80067f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80068c2:	2300      	movs	r3, #0
 80068c4:	61fb      	str	r3, [r7, #28]
 80068c6:	e004      	b.n	80068d2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	2200      	movs	r2, #0
 80068cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80068ce:	2301      	movs	r3, #1
 80068d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80068d2:	f000 ff87 	bl	80077e4 <vPortExitCritical>

	return xReturn;
 80068d6:	69fb      	ldr	r3, [r7, #28]
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3720      	adds	r7, #32
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}
 80068e0:	20000d00 	.word	0x20000d00
 80068e4:	20000d14 	.word	0x20000d14

080068e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80068e8:	b480      	push	{r7}
 80068ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80068ec:	4b03      	ldr	r3, [pc, #12]	; (80068fc <vTaskMissedYield+0x14>)
 80068ee:	2201      	movs	r2, #1
 80068f0:	601a      	str	r2, [r3, #0]
}
 80068f2:	bf00      	nop
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr
 80068fc:	20000d10 	.word	0x20000d10

08006900 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006908:	f000 f852 	bl	80069b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800690c:	4b06      	ldr	r3, [pc, #24]	; (8006928 <prvIdleTask+0x28>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2b01      	cmp	r3, #1
 8006912:	d9f9      	bls.n	8006908 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006914:	4b05      	ldr	r3, [pc, #20]	; (800692c <prvIdleTask+0x2c>)
 8006916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800691a:	601a      	str	r2, [r3, #0]
 800691c:	f3bf 8f4f 	dsb	sy
 8006920:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006924:	e7f0      	b.n	8006908 <prvIdleTask+0x8>
 8006926:	bf00      	nop
 8006928:	2000082c 	.word	0x2000082c
 800692c:	e000ed04 	.word	0xe000ed04

08006930 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006936:	2300      	movs	r3, #0
 8006938:	607b      	str	r3, [r7, #4]
 800693a:	e00c      	b.n	8006956 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	4613      	mov	r3, r2
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	4413      	add	r3, r2
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	4a12      	ldr	r2, [pc, #72]	; (8006990 <prvInitialiseTaskLists+0x60>)
 8006948:	4413      	add	r3, r2
 800694a:	4618      	mov	r0, r3
 800694c:	f7fe f8a4 	bl	8004a98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	3301      	adds	r3, #1
 8006954:	607b      	str	r3, [r7, #4]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2b37      	cmp	r3, #55	; 0x37
 800695a:	d9ef      	bls.n	800693c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800695c:	480d      	ldr	r0, [pc, #52]	; (8006994 <prvInitialiseTaskLists+0x64>)
 800695e:	f7fe f89b 	bl	8004a98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006962:	480d      	ldr	r0, [pc, #52]	; (8006998 <prvInitialiseTaskLists+0x68>)
 8006964:	f7fe f898 	bl	8004a98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006968:	480c      	ldr	r0, [pc, #48]	; (800699c <prvInitialiseTaskLists+0x6c>)
 800696a:	f7fe f895 	bl	8004a98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800696e:	480c      	ldr	r0, [pc, #48]	; (80069a0 <prvInitialiseTaskLists+0x70>)
 8006970:	f7fe f892 	bl	8004a98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006974:	480b      	ldr	r0, [pc, #44]	; (80069a4 <prvInitialiseTaskLists+0x74>)
 8006976:	f7fe f88f 	bl	8004a98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800697a:	4b0b      	ldr	r3, [pc, #44]	; (80069a8 <prvInitialiseTaskLists+0x78>)
 800697c:	4a05      	ldr	r2, [pc, #20]	; (8006994 <prvInitialiseTaskLists+0x64>)
 800697e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006980:	4b0a      	ldr	r3, [pc, #40]	; (80069ac <prvInitialiseTaskLists+0x7c>)
 8006982:	4a05      	ldr	r2, [pc, #20]	; (8006998 <prvInitialiseTaskLists+0x68>)
 8006984:	601a      	str	r2, [r3, #0]
}
 8006986:	bf00      	nop
 8006988:	3708      	adds	r7, #8
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	2000082c 	.word	0x2000082c
 8006994:	20000c8c 	.word	0x20000c8c
 8006998:	20000ca0 	.word	0x20000ca0
 800699c:	20000cbc 	.word	0x20000cbc
 80069a0:	20000cd0 	.word	0x20000cd0
 80069a4:	20000ce8 	.word	0x20000ce8
 80069a8:	20000cb4 	.word	0x20000cb4
 80069ac:	20000cb8 	.word	0x20000cb8

080069b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069b6:	e019      	b.n	80069ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80069b8:	f000 fee4 	bl	8007784 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069bc:	4b10      	ldr	r3, [pc, #64]	; (8006a00 <prvCheckTasksWaitingTermination+0x50>)
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	3304      	adds	r3, #4
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7fe f8ef 	bl	8004bac <uxListRemove>
				--uxCurrentNumberOfTasks;
 80069ce:	4b0d      	ldr	r3, [pc, #52]	; (8006a04 <prvCheckTasksWaitingTermination+0x54>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	3b01      	subs	r3, #1
 80069d4:	4a0b      	ldr	r2, [pc, #44]	; (8006a04 <prvCheckTasksWaitingTermination+0x54>)
 80069d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80069d8:	4b0b      	ldr	r3, [pc, #44]	; (8006a08 <prvCheckTasksWaitingTermination+0x58>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	3b01      	subs	r3, #1
 80069de:	4a0a      	ldr	r2, [pc, #40]	; (8006a08 <prvCheckTasksWaitingTermination+0x58>)
 80069e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80069e2:	f000 feff 	bl	80077e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 f810 	bl	8006a0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069ec:	4b06      	ldr	r3, [pc, #24]	; (8006a08 <prvCheckTasksWaitingTermination+0x58>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d1e1      	bne.n	80069b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80069f4:	bf00      	nop
 80069f6:	bf00      	nop
 80069f8:	3708      	adds	r7, #8
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	20000cd0 	.word	0x20000cd0
 8006a04:	20000cfc 	.word	0x20000cfc
 8006a08:	20000ce4 	.word	0x20000ce4

08006a0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	3354      	adds	r3, #84	; 0x54
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f00e fe55 	bl	80156c8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d108      	bne.n	8006a3a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f001 f897 	bl	8007b60 <vPortFree>
				vPortFree( pxTCB );
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f001 f894 	bl	8007b60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006a38:	e018      	b.n	8006a6c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d103      	bne.n	8006a4c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f001 f88b 	bl	8007b60 <vPortFree>
	}
 8006a4a:	e00f      	b.n	8006a6c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d00a      	beq.n	8006a6c <prvDeleteTCB+0x60>
	__asm volatile
 8006a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5a:	f383 8811 	msr	BASEPRI, r3
 8006a5e:	f3bf 8f6f 	isb	sy
 8006a62:	f3bf 8f4f 	dsb	sy
 8006a66:	60fb      	str	r3, [r7, #12]
}
 8006a68:	bf00      	nop
 8006a6a:	e7fe      	b.n	8006a6a <prvDeleteTCB+0x5e>
	}
 8006a6c:	bf00      	nop
 8006a6e:	3710      	adds	r7, #16
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a7a:	4b0c      	ldr	r3, [pc, #48]	; (8006aac <prvResetNextTaskUnblockTime+0x38>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d104      	bne.n	8006a8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a84:	4b0a      	ldr	r3, [pc, #40]	; (8006ab0 <prvResetNextTaskUnblockTime+0x3c>)
 8006a86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006a8c:	e008      	b.n	8006aa0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a8e:	4b07      	ldr	r3, [pc, #28]	; (8006aac <prvResetNextTaskUnblockTime+0x38>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	4a04      	ldr	r2, [pc, #16]	; (8006ab0 <prvResetNextTaskUnblockTime+0x3c>)
 8006a9e:	6013      	str	r3, [r2, #0]
}
 8006aa0:	bf00      	nop
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr
 8006aac:	20000cb4 	.word	0x20000cb4
 8006ab0:	20000d1c 	.word	0x20000d1c

08006ab4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006aba:	4b05      	ldr	r3, [pc, #20]	; (8006ad0 <xTaskGetCurrentTaskHandle+0x1c>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006ac0:	687b      	ldr	r3, [r7, #4]
	}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	370c      	adds	r7, #12
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	20000828 	.word	0x20000828

08006ad4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006ada:	4b0b      	ldr	r3, [pc, #44]	; (8006b08 <xTaskGetSchedulerState+0x34>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d102      	bne.n	8006ae8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	607b      	str	r3, [r7, #4]
 8006ae6:	e008      	b.n	8006afa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ae8:	4b08      	ldr	r3, [pc, #32]	; (8006b0c <xTaskGetSchedulerState+0x38>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d102      	bne.n	8006af6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006af0:	2302      	movs	r3, #2
 8006af2:	607b      	str	r3, [r7, #4]
 8006af4:	e001      	b.n	8006afa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006af6:	2300      	movs	r3, #0
 8006af8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006afa:	687b      	ldr	r3, [r7, #4]
	}
 8006afc:	4618      	mov	r0, r3
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr
 8006b08:	20000d08 	.word	0x20000d08
 8006b0c:	20000d24 	.word	0x20000d24

08006b10 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d051      	beq.n	8006bca <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b2a:	4b2a      	ldr	r3, [pc, #168]	; (8006bd4 <xTaskPriorityInherit+0xc4>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d241      	bcs.n	8006bb8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	699b      	ldr	r3, [r3, #24]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	db06      	blt.n	8006b4a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b3c:	4b25      	ldr	r3, [pc, #148]	; (8006bd4 <xTaskPriorityInherit+0xc4>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b42:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	6959      	ldr	r1, [r3, #20]
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b52:	4613      	mov	r3, r2
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	4413      	add	r3, r2
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	4a1f      	ldr	r2, [pc, #124]	; (8006bd8 <xTaskPriorityInherit+0xc8>)
 8006b5c:	4413      	add	r3, r2
 8006b5e:	4299      	cmp	r1, r3
 8006b60:	d122      	bne.n	8006ba8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	3304      	adds	r3, #4
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7fe f820 	bl	8004bac <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006b6c:	4b19      	ldr	r3, [pc, #100]	; (8006bd4 <xTaskPriorityInherit+0xc4>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b7a:	4b18      	ldr	r3, [pc, #96]	; (8006bdc <xTaskPriorityInherit+0xcc>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d903      	bls.n	8006b8a <xTaskPriorityInherit+0x7a>
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b86:	4a15      	ldr	r2, [pc, #84]	; (8006bdc <xTaskPriorityInherit+0xcc>)
 8006b88:	6013      	str	r3, [r2, #0]
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b8e:	4613      	mov	r3, r2
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	4413      	add	r3, r2
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	4a10      	ldr	r2, [pc, #64]	; (8006bd8 <xTaskPriorityInherit+0xc8>)
 8006b98:	441a      	add	r2, r3
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	3304      	adds	r3, #4
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	4610      	mov	r0, r2
 8006ba2:	f7fd ffa6 	bl	8004af2 <vListInsertEnd>
 8006ba6:	e004      	b.n	8006bb2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006ba8:	4b0a      	ldr	r3, [pc, #40]	; (8006bd4 <xTaskPriorityInherit+0xc4>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	60fb      	str	r3, [r7, #12]
 8006bb6:	e008      	b.n	8006bca <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bbc:	4b05      	ldr	r3, [pc, #20]	; (8006bd4 <xTaskPriorityInherit+0xc4>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d201      	bcs.n	8006bca <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006bca:	68fb      	ldr	r3, [r7, #12]
	}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3710      	adds	r7, #16
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	20000828 	.word	0x20000828
 8006bd8:	2000082c 	.word	0x2000082c
 8006bdc:	20000d04 	.word	0x20000d04

08006be0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b086      	sub	sp, #24
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006bec:	2300      	movs	r3, #0
 8006bee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d056      	beq.n	8006ca4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006bf6:	4b2e      	ldr	r3, [pc, #184]	; (8006cb0 <xTaskPriorityDisinherit+0xd0>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	693a      	ldr	r2, [r7, #16]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d00a      	beq.n	8006c16 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c04:	f383 8811 	msr	BASEPRI, r3
 8006c08:	f3bf 8f6f 	isb	sy
 8006c0c:	f3bf 8f4f 	dsb	sy
 8006c10:	60fb      	str	r3, [r7, #12]
}
 8006c12:	bf00      	nop
 8006c14:	e7fe      	b.n	8006c14 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10a      	bne.n	8006c34 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c22:	f383 8811 	msr	BASEPRI, r3
 8006c26:	f3bf 8f6f 	isb	sy
 8006c2a:	f3bf 8f4f 	dsb	sy
 8006c2e:	60bb      	str	r3, [r7, #8]
}
 8006c30:	bf00      	nop
 8006c32:	e7fe      	b.n	8006c32 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c38:	1e5a      	subs	r2, r3, #1
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d02c      	beq.n	8006ca4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d128      	bne.n	8006ca4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	3304      	adds	r3, #4
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7fd ffa8 	bl	8004bac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c68:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c74:	4b0f      	ldr	r3, [pc, #60]	; (8006cb4 <xTaskPriorityDisinherit+0xd4>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d903      	bls.n	8006c84 <xTaskPriorityDisinherit+0xa4>
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c80:	4a0c      	ldr	r2, [pc, #48]	; (8006cb4 <xTaskPriorityDisinherit+0xd4>)
 8006c82:	6013      	str	r3, [r2, #0]
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c88:	4613      	mov	r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4413      	add	r3, r2
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	4a09      	ldr	r2, [pc, #36]	; (8006cb8 <xTaskPriorityDisinherit+0xd8>)
 8006c92:	441a      	add	r2, r3
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	3304      	adds	r3, #4
 8006c98:	4619      	mov	r1, r3
 8006c9a:	4610      	mov	r0, r2
 8006c9c:	f7fd ff29 	bl	8004af2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ca4:	697b      	ldr	r3, [r7, #20]
	}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3718      	adds	r7, #24
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	20000828 	.word	0x20000828
 8006cb4:	20000d04 	.word	0x20000d04
 8006cb8:	2000082c 	.word	0x2000082c

08006cbc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b088      	sub	sp, #32
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d06a      	beq.n	8006daa <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d10a      	bne.n	8006cf2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce0:	f383 8811 	msr	BASEPRI, r3
 8006ce4:	f3bf 8f6f 	isb	sy
 8006ce8:	f3bf 8f4f 	dsb	sy
 8006cec:	60fb      	str	r3, [r7, #12]
}
 8006cee:	bf00      	nop
 8006cf0:	e7fe      	b.n	8006cf0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cf6:	683a      	ldr	r2, [r7, #0]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d902      	bls.n	8006d02 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	61fb      	str	r3, [r7, #28]
 8006d00:	e002      	b.n	8006d08 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006d02:	69bb      	ldr	r3, [r7, #24]
 8006d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d06:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0c:	69fa      	ldr	r2, [r7, #28]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d04b      	beq.n	8006daa <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d146      	bne.n	8006daa <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006d1c:	4b25      	ldr	r3, [pc, #148]	; (8006db4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	69ba      	ldr	r2, [r7, #24]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d10a      	bne.n	8006d3c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2a:	f383 8811 	msr	BASEPRI, r3
 8006d2e:	f3bf 8f6f 	isb	sy
 8006d32:	f3bf 8f4f 	dsb	sy
 8006d36:	60bb      	str	r3, [r7, #8]
}
 8006d38:	bf00      	nop
 8006d3a:	e7fe      	b.n	8006d3a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d40:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	69fa      	ldr	r2, [r7, #28]
 8006d46:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	699b      	ldr	r3, [r3, #24]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	db04      	blt.n	8006d5a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	6959      	ldr	r1, [r3, #20]
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	4613      	mov	r3, r2
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	4413      	add	r3, r2
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	4a13      	ldr	r2, [pc, #76]	; (8006db8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006d6a:	4413      	add	r3, r2
 8006d6c:	4299      	cmp	r1, r3
 8006d6e:	d11c      	bne.n	8006daa <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	3304      	adds	r3, #4
 8006d74:	4618      	mov	r0, r3
 8006d76:	f7fd ff19 	bl	8004bac <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d7e:	4b0f      	ldr	r3, [pc, #60]	; (8006dbc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d903      	bls.n	8006d8e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8a:	4a0c      	ldr	r2, [pc, #48]	; (8006dbc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006d8c:	6013      	str	r3, [r2, #0]
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d92:	4613      	mov	r3, r2
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	4413      	add	r3, r2
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	4a07      	ldr	r2, [pc, #28]	; (8006db8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006d9c:	441a      	add	r2, r3
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	3304      	adds	r3, #4
 8006da2:	4619      	mov	r1, r3
 8006da4:	4610      	mov	r0, r2
 8006da6:	f7fd fea4 	bl	8004af2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006daa:	bf00      	nop
 8006dac:	3720      	adds	r7, #32
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	20000828 	.word	0x20000828
 8006db8:	2000082c 	.word	0x2000082c
 8006dbc:	20000d04 	.word	0x20000d04

08006dc0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006dc0:	b480      	push	{r7}
 8006dc2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006dc4:	4b07      	ldr	r3, [pc, #28]	; (8006de4 <pvTaskIncrementMutexHeldCount+0x24>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d004      	beq.n	8006dd6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006dcc:	4b05      	ldr	r3, [pc, #20]	; (8006de4 <pvTaskIncrementMutexHeldCount+0x24>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006dd2:	3201      	adds	r2, #1
 8006dd4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006dd6:	4b03      	ldr	r3, [pc, #12]	; (8006de4 <pvTaskIncrementMutexHeldCount+0x24>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
	}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr
 8006de4:	20000828 	.word	0x20000828

08006de8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006df2:	4b21      	ldr	r3, [pc, #132]	; (8006e78 <prvAddCurrentTaskToDelayedList+0x90>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006df8:	4b20      	ldr	r3, [pc, #128]	; (8006e7c <prvAddCurrentTaskToDelayedList+0x94>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	3304      	adds	r3, #4
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f7fd fed4 	bl	8004bac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e0a:	d10a      	bne.n	8006e22 <prvAddCurrentTaskToDelayedList+0x3a>
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d007      	beq.n	8006e22 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e12:	4b1a      	ldr	r3, [pc, #104]	; (8006e7c <prvAddCurrentTaskToDelayedList+0x94>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	3304      	adds	r3, #4
 8006e18:	4619      	mov	r1, r3
 8006e1a:	4819      	ldr	r0, [pc, #100]	; (8006e80 <prvAddCurrentTaskToDelayedList+0x98>)
 8006e1c:	f7fd fe69 	bl	8004af2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006e20:	e026      	b.n	8006e70 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006e22:	68fa      	ldr	r2, [r7, #12]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4413      	add	r3, r2
 8006e28:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006e2a:	4b14      	ldr	r3, [pc, #80]	; (8006e7c <prvAddCurrentTaskToDelayedList+0x94>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68ba      	ldr	r2, [r7, #8]
 8006e30:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006e32:	68ba      	ldr	r2, [r7, #8]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d209      	bcs.n	8006e4e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e3a:	4b12      	ldr	r3, [pc, #72]	; (8006e84 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	4b0f      	ldr	r3, [pc, #60]	; (8006e7c <prvAddCurrentTaskToDelayedList+0x94>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	3304      	adds	r3, #4
 8006e44:	4619      	mov	r1, r3
 8006e46:	4610      	mov	r0, r2
 8006e48:	f7fd fe77 	bl	8004b3a <vListInsert>
}
 8006e4c:	e010      	b.n	8006e70 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e4e:	4b0e      	ldr	r3, [pc, #56]	; (8006e88 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	4b0a      	ldr	r3, [pc, #40]	; (8006e7c <prvAddCurrentTaskToDelayedList+0x94>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	3304      	adds	r3, #4
 8006e58:	4619      	mov	r1, r3
 8006e5a:	4610      	mov	r0, r2
 8006e5c:	f7fd fe6d 	bl	8004b3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006e60:	4b0a      	ldr	r3, [pc, #40]	; (8006e8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68ba      	ldr	r2, [r7, #8]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d202      	bcs.n	8006e70 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006e6a:	4a08      	ldr	r2, [pc, #32]	; (8006e8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	6013      	str	r3, [r2, #0]
}
 8006e70:	bf00      	nop
 8006e72:	3710      	adds	r7, #16
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	20000d00 	.word	0x20000d00
 8006e7c:	20000828 	.word	0x20000828
 8006e80:	20000ce8 	.word	0x20000ce8
 8006e84:	20000cb8 	.word	0x20000cb8
 8006e88:	20000cb4 	.word	0x20000cb4
 8006e8c:	20000d1c 	.word	0x20000d1c

08006e90 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b08a      	sub	sp, #40	; 0x28
 8006e94:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006e96:	2300      	movs	r3, #0
 8006e98:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006e9a:	f000 fb07 	bl	80074ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006e9e:	4b1c      	ldr	r3, [pc, #112]	; (8006f10 <xTimerCreateTimerTask+0x80>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d021      	beq.n	8006eea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006eae:	1d3a      	adds	r2, r7, #4
 8006eb0:	f107 0108 	add.w	r1, r7, #8
 8006eb4:	f107 030c 	add.w	r3, r7, #12
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7fd fdd3 	bl	8004a64 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006ebe:	6879      	ldr	r1, [r7, #4]
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	9202      	str	r2, [sp, #8]
 8006ec6:	9301      	str	r3, [sp, #4]
 8006ec8:	2302      	movs	r3, #2
 8006eca:	9300      	str	r3, [sp, #0]
 8006ecc:	2300      	movs	r3, #0
 8006ece:	460a      	mov	r2, r1
 8006ed0:	4910      	ldr	r1, [pc, #64]	; (8006f14 <xTimerCreateTimerTask+0x84>)
 8006ed2:	4811      	ldr	r0, [pc, #68]	; (8006f18 <xTimerCreateTimerTask+0x88>)
 8006ed4:	f7fe ff94 	bl	8005e00 <xTaskCreateStatic>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	4a10      	ldr	r2, [pc, #64]	; (8006f1c <xTimerCreateTimerTask+0x8c>)
 8006edc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006ede:	4b0f      	ldr	r3, [pc, #60]	; (8006f1c <xTimerCreateTimerTask+0x8c>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d001      	beq.n	8006eea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d10a      	bne.n	8006f06 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef4:	f383 8811 	msr	BASEPRI, r3
 8006ef8:	f3bf 8f6f 	isb	sy
 8006efc:	f3bf 8f4f 	dsb	sy
 8006f00:	613b      	str	r3, [r7, #16]
}
 8006f02:	bf00      	nop
 8006f04:	e7fe      	b.n	8006f04 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006f06:	697b      	ldr	r3, [r7, #20]
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3718      	adds	r7, #24
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	20000d58 	.word	0x20000d58
 8006f14:	0801656c 	.word	0x0801656c
 8006f18:	08007055 	.word	0x08007055
 8006f1c:	20000d5c 	.word	0x20000d5c

08006f20 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b08a      	sub	sp, #40	; 0x28
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]
 8006f2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10a      	bne.n	8006f4e <xTimerGenericCommand+0x2e>
	__asm volatile
 8006f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3c:	f383 8811 	msr	BASEPRI, r3
 8006f40:	f3bf 8f6f 	isb	sy
 8006f44:	f3bf 8f4f 	dsb	sy
 8006f48:	623b      	str	r3, [r7, #32]
}
 8006f4a:	bf00      	nop
 8006f4c:	e7fe      	b.n	8006f4c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006f4e:	4b1a      	ldr	r3, [pc, #104]	; (8006fb8 <xTimerGenericCommand+0x98>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d02a      	beq.n	8006fac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	2b05      	cmp	r3, #5
 8006f66:	dc18      	bgt.n	8006f9a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006f68:	f7ff fdb4 	bl	8006ad4 <xTaskGetSchedulerState>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d109      	bne.n	8006f86 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006f72:	4b11      	ldr	r3, [pc, #68]	; (8006fb8 <xTimerGenericCommand+0x98>)
 8006f74:	6818      	ldr	r0, [r3, #0]
 8006f76:	f107 0110 	add.w	r1, r7, #16
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f7e:	f7fe f89d 	bl	80050bc <xQueueGenericSend>
 8006f82:	6278      	str	r0, [r7, #36]	; 0x24
 8006f84:	e012      	b.n	8006fac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006f86:	4b0c      	ldr	r3, [pc, #48]	; (8006fb8 <xTimerGenericCommand+0x98>)
 8006f88:	6818      	ldr	r0, [r3, #0]
 8006f8a:	f107 0110 	add.w	r1, r7, #16
 8006f8e:	2300      	movs	r3, #0
 8006f90:	2200      	movs	r2, #0
 8006f92:	f7fe f893 	bl	80050bc <xQueueGenericSend>
 8006f96:	6278      	str	r0, [r7, #36]	; 0x24
 8006f98:	e008      	b.n	8006fac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006f9a:	4b07      	ldr	r3, [pc, #28]	; (8006fb8 <xTimerGenericCommand+0x98>)
 8006f9c:	6818      	ldr	r0, [r3, #0]
 8006f9e:	f107 0110 	add.w	r1, r7, #16
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	683a      	ldr	r2, [r7, #0]
 8006fa6:	f7fe f987 	bl	80052b8 <xQueueGenericSendFromISR>
 8006faa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3728      	adds	r7, #40	; 0x28
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	20000d58 	.word	0x20000d58

08006fbc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b088      	sub	sp, #32
 8006fc0:	af02      	add	r7, sp, #8
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fc6:	4b22      	ldr	r3, [pc, #136]	; (8007050 <prvProcessExpiredTimer+0x94>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	3304      	adds	r3, #4
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f7fd fde9 	bl	8004bac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fe0:	f003 0304 	and.w	r3, r3, #4
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d022      	beq.n	800702e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	699a      	ldr	r2, [r3, #24]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	18d1      	adds	r1, r2, r3
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	683a      	ldr	r2, [r7, #0]
 8006ff4:	6978      	ldr	r0, [r7, #20]
 8006ff6:	f000 f8d1 	bl	800719c <prvInsertTimerInActiveList>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d01f      	beq.n	8007040 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007000:	2300      	movs	r3, #0
 8007002:	9300      	str	r3, [sp, #0]
 8007004:	2300      	movs	r3, #0
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	2100      	movs	r1, #0
 800700a:	6978      	ldr	r0, [r7, #20]
 800700c:	f7ff ff88 	bl	8006f20 <xTimerGenericCommand>
 8007010:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d113      	bne.n	8007040 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701c:	f383 8811 	msr	BASEPRI, r3
 8007020:	f3bf 8f6f 	isb	sy
 8007024:	f3bf 8f4f 	dsb	sy
 8007028:	60fb      	str	r3, [r7, #12]
}
 800702a:	bf00      	nop
 800702c:	e7fe      	b.n	800702c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007034:	f023 0301 	bic.w	r3, r3, #1
 8007038:	b2da      	uxtb	r2, r3
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	6a1b      	ldr	r3, [r3, #32]
 8007044:	6978      	ldr	r0, [r7, #20]
 8007046:	4798      	blx	r3
}
 8007048:	bf00      	nop
 800704a:	3718      	adds	r7, #24
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}
 8007050:	20000d50 	.word	0x20000d50

08007054 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800705c:	f107 0308 	add.w	r3, r7, #8
 8007060:	4618      	mov	r0, r3
 8007062:	f000 f857 	bl	8007114 <prvGetNextExpireTime>
 8007066:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	4619      	mov	r1, r3
 800706c:	68f8      	ldr	r0, [r7, #12]
 800706e:	f000 f803 	bl	8007078 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007072:	f000 f8d5 	bl	8007220 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007076:	e7f1      	b.n	800705c <prvTimerTask+0x8>

08007078 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007082:	f7ff f919 	bl	80062b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007086:	f107 0308 	add.w	r3, r7, #8
 800708a:	4618      	mov	r0, r3
 800708c:	f000 f866 	bl	800715c <prvSampleTimeNow>
 8007090:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d130      	bne.n	80070fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d10a      	bne.n	80070b4 <prvProcessTimerOrBlockTask+0x3c>
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d806      	bhi.n	80070b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80070a6:	f7ff f915 	bl	80062d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80070aa:	68f9      	ldr	r1, [r7, #12]
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f7ff ff85 	bl	8006fbc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80070b2:	e024      	b.n	80070fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d008      	beq.n	80070cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80070ba:	4b13      	ldr	r3, [pc, #76]	; (8007108 <prvProcessTimerOrBlockTask+0x90>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d101      	bne.n	80070c8 <prvProcessTimerOrBlockTask+0x50>
 80070c4:	2301      	movs	r3, #1
 80070c6:	e000      	b.n	80070ca <prvProcessTimerOrBlockTask+0x52>
 80070c8:	2300      	movs	r3, #0
 80070ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80070cc:	4b0f      	ldr	r3, [pc, #60]	; (800710c <prvProcessTimerOrBlockTask+0x94>)
 80070ce:	6818      	ldr	r0, [r3, #0]
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	4619      	mov	r1, r3
 80070da:	f7fe fe5d 	bl	8005d98 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80070de:	f7ff f8f9 	bl	80062d4 <xTaskResumeAll>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d10a      	bne.n	80070fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80070e8:	4b09      	ldr	r3, [pc, #36]	; (8007110 <prvProcessTimerOrBlockTask+0x98>)
 80070ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070ee:	601a      	str	r2, [r3, #0]
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	f3bf 8f6f 	isb	sy
}
 80070f8:	e001      	b.n	80070fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80070fa:	f7ff f8eb 	bl	80062d4 <xTaskResumeAll>
}
 80070fe:	bf00      	nop
 8007100:	3710      	adds	r7, #16
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	20000d54 	.word	0x20000d54
 800710c:	20000d58 	.word	0x20000d58
 8007110:	e000ed04 	.word	0xe000ed04

08007114 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007114:	b480      	push	{r7}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800711c:	4b0e      	ldr	r3, [pc, #56]	; (8007158 <prvGetNextExpireTime+0x44>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d101      	bne.n	800712a <prvGetNextExpireTime+0x16>
 8007126:	2201      	movs	r2, #1
 8007128:	e000      	b.n	800712c <prvGetNextExpireTime+0x18>
 800712a:	2200      	movs	r2, #0
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d105      	bne.n	8007144 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007138:	4b07      	ldr	r3, [pc, #28]	; (8007158 <prvGetNextExpireTime+0x44>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	60fb      	str	r3, [r7, #12]
 8007142:	e001      	b.n	8007148 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007144:	2300      	movs	r3, #0
 8007146:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007148:	68fb      	ldr	r3, [r7, #12]
}
 800714a:	4618      	mov	r0, r3
 800714c:	3714      	adds	r7, #20
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	20000d50 	.word	0x20000d50

0800715c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007164:	f7ff f954 	bl	8006410 <xTaskGetTickCount>
 8007168:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800716a:	4b0b      	ldr	r3, [pc, #44]	; (8007198 <prvSampleTimeNow+0x3c>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	429a      	cmp	r2, r3
 8007172:	d205      	bcs.n	8007180 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007174:	f000 f936 	bl	80073e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	601a      	str	r2, [r3, #0]
 800717e:	e002      	b.n	8007186 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007186:	4a04      	ldr	r2, [pc, #16]	; (8007198 <prvSampleTimeNow+0x3c>)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800718c:	68fb      	ldr	r3, [r7, #12]
}
 800718e:	4618      	mov	r0, r3
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	20000d60 	.word	0x20000d60

0800719c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	607a      	str	r2, [r7, #4]
 80071a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80071aa:	2300      	movs	r3, #0
 80071ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	68ba      	ldr	r2, [r7, #8]
 80071b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80071ba:	68ba      	ldr	r2, [r7, #8]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d812      	bhi.n	80071e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	1ad2      	subs	r2, r2, r3
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	699b      	ldr	r3, [r3, #24]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d302      	bcc.n	80071d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80071d0:	2301      	movs	r3, #1
 80071d2:	617b      	str	r3, [r7, #20]
 80071d4:	e01b      	b.n	800720e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80071d6:	4b10      	ldr	r3, [pc, #64]	; (8007218 <prvInsertTimerInActiveList+0x7c>)
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	3304      	adds	r3, #4
 80071de:	4619      	mov	r1, r3
 80071e0:	4610      	mov	r0, r2
 80071e2:	f7fd fcaa 	bl	8004b3a <vListInsert>
 80071e6:	e012      	b.n	800720e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d206      	bcs.n	80071fe <prvInsertTimerInActiveList+0x62>
 80071f0:	68ba      	ldr	r2, [r7, #8]
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d302      	bcc.n	80071fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80071f8:	2301      	movs	r3, #1
 80071fa:	617b      	str	r3, [r7, #20]
 80071fc:	e007      	b.n	800720e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80071fe:	4b07      	ldr	r3, [pc, #28]	; (800721c <prvInsertTimerInActiveList+0x80>)
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	3304      	adds	r3, #4
 8007206:	4619      	mov	r1, r3
 8007208:	4610      	mov	r0, r2
 800720a:	f7fd fc96 	bl	8004b3a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800720e:	697b      	ldr	r3, [r7, #20]
}
 8007210:	4618      	mov	r0, r3
 8007212:	3718      	adds	r7, #24
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}
 8007218:	20000d54 	.word	0x20000d54
 800721c:	20000d50 	.word	0x20000d50

08007220 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b08e      	sub	sp, #56	; 0x38
 8007224:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007226:	e0ca      	b.n	80073be <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2b00      	cmp	r3, #0
 800722c:	da18      	bge.n	8007260 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800722e:	1d3b      	adds	r3, r7, #4
 8007230:	3304      	adds	r3, #4
 8007232:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007236:	2b00      	cmp	r3, #0
 8007238:	d10a      	bne.n	8007250 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800723a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723e:	f383 8811 	msr	BASEPRI, r3
 8007242:	f3bf 8f6f 	isb	sy
 8007246:	f3bf 8f4f 	dsb	sy
 800724a:	61fb      	str	r3, [r7, #28]
}
 800724c:	bf00      	nop
 800724e:	e7fe      	b.n	800724e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007256:	6850      	ldr	r0, [r2, #4]
 8007258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800725a:	6892      	ldr	r2, [r2, #8]
 800725c:	4611      	mov	r1, r2
 800725e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2b00      	cmp	r3, #0
 8007264:	f2c0 80aa 	blt.w	80073bc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800726c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800726e:	695b      	ldr	r3, [r3, #20]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d004      	beq.n	800727e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007276:	3304      	adds	r3, #4
 8007278:	4618      	mov	r0, r3
 800727a:	f7fd fc97 	bl	8004bac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800727e:	463b      	mov	r3, r7
 8007280:	4618      	mov	r0, r3
 8007282:	f7ff ff6b 	bl	800715c <prvSampleTimeNow>
 8007286:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2b09      	cmp	r3, #9
 800728c:	f200 8097 	bhi.w	80073be <prvProcessReceivedCommands+0x19e>
 8007290:	a201      	add	r2, pc, #4	; (adr r2, 8007298 <prvProcessReceivedCommands+0x78>)
 8007292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007296:	bf00      	nop
 8007298:	080072c1 	.word	0x080072c1
 800729c:	080072c1 	.word	0x080072c1
 80072a0:	080072c1 	.word	0x080072c1
 80072a4:	08007335 	.word	0x08007335
 80072a8:	08007349 	.word	0x08007349
 80072ac:	08007393 	.word	0x08007393
 80072b0:	080072c1 	.word	0x080072c1
 80072b4:	080072c1 	.word	0x080072c1
 80072b8:	08007335 	.word	0x08007335
 80072bc:	08007349 	.word	0x08007349
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80072c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072c6:	f043 0301 	orr.w	r3, r3, #1
 80072ca:	b2da      	uxtb	r2, r3
 80072cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80072d2:	68ba      	ldr	r2, [r7, #8]
 80072d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d6:	699b      	ldr	r3, [r3, #24]
 80072d8:	18d1      	adds	r1, r2, r3
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072e0:	f7ff ff5c 	bl	800719c <prvInsertTimerInActiveList>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d069      	beq.n	80073be <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ec:	6a1b      	ldr	r3, [r3, #32]
 80072ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80072f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072f8:	f003 0304 	and.w	r3, r3, #4
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d05e      	beq.n	80073be <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007300:	68ba      	ldr	r2, [r7, #8]
 8007302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	441a      	add	r2, r3
 8007308:	2300      	movs	r3, #0
 800730a:	9300      	str	r3, [sp, #0]
 800730c:	2300      	movs	r3, #0
 800730e:	2100      	movs	r1, #0
 8007310:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007312:	f7ff fe05 	bl	8006f20 <xTimerGenericCommand>
 8007316:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007318:	6a3b      	ldr	r3, [r7, #32]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d14f      	bne.n	80073be <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800731e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007322:	f383 8811 	msr	BASEPRI, r3
 8007326:	f3bf 8f6f 	isb	sy
 800732a:	f3bf 8f4f 	dsb	sy
 800732e:	61bb      	str	r3, [r7, #24]
}
 8007330:	bf00      	nop
 8007332:	e7fe      	b.n	8007332 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007336:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800733a:	f023 0301 	bic.w	r3, r3, #1
 800733e:	b2da      	uxtb	r2, r3
 8007340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007342:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007346:	e03a      	b.n	80073be <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800734e:	f043 0301 	orr.w	r3, r3, #1
 8007352:	b2da      	uxtb	r2, r3
 8007354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007356:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007362:	699b      	ldr	r3, [r3, #24]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d10a      	bne.n	800737e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736c:	f383 8811 	msr	BASEPRI, r3
 8007370:	f3bf 8f6f 	isb	sy
 8007374:	f3bf 8f4f 	dsb	sy
 8007378:	617b      	str	r3, [r7, #20]
}
 800737a:	bf00      	nop
 800737c:	e7fe      	b.n	800737c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800737e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007380:	699a      	ldr	r2, [r3, #24]
 8007382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007384:	18d1      	adds	r1, r2, r3
 8007386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800738a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800738c:	f7ff ff06 	bl	800719c <prvInsertTimerInActiveList>
					break;
 8007390:	e015      	b.n	80073be <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007394:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007398:	f003 0302 	and.w	r3, r3, #2
 800739c:	2b00      	cmp	r3, #0
 800739e:	d103      	bne.n	80073a8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80073a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073a2:	f000 fbdd 	bl	8007b60 <vPortFree>
 80073a6:	e00a      	b.n	80073be <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80073a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073ae:	f023 0301 	bic.w	r3, r3, #1
 80073b2:	b2da      	uxtb	r2, r3
 80073b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80073ba:	e000      	b.n	80073be <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80073bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80073be:	4b08      	ldr	r3, [pc, #32]	; (80073e0 <prvProcessReceivedCommands+0x1c0>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	1d39      	adds	r1, r7, #4
 80073c4:	2200      	movs	r2, #0
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7fe f89e 	bl	8005508 <xQueueReceive>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f47f af2a 	bne.w	8007228 <prvProcessReceivedCommands+0x8>
	}
}
 80073d4:	bf00      	nop
 80073d6:	bf00      	nop
 80073d8:	3730      	adds	r7, #48	; 0x30
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	20000d58 	.word	0x20000d58

080073e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b088      	sub	sp, #32
 80073e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80073ea:	e048      	b.n	800747e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80073ec:	4b2d      	ldr	r3, [pc, #180]	; (80074a4 <prvSwitchTimerLists+0xc0>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073f6:	4b2b      	ldr	r3, [pc, #172]	; (80074a4 <prvSwitchTimerLists+0xc0>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	3304      	adds	r3, #4
 8007404:	4618      	mov	r0, r3
 8007406:	f7fd fbd1 	bl	8004bac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6a1b      	ldr	r3, [r3, #32]
 800740e:	68f8      	ldr	r0, [r7, #12]
 8007410:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007418:	f003 0304 	and.w	r3, r3, #4
 800741c:	2b00      	cmp	r3, #0
 800741e:	d02e      	beq.n	800747e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	699b      	ldr	r3, [r3, #24]
 8007424:	693a      	ldr	r2, [r7, #16]
 8007426:	4413      	add	r3, r2
 8007428:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800742a:	68ba      	ldr	r2, [r7, #8]
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	429a      	cmp	r2, r3
 8007430:	d90e      	bls.n	8007450 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	68ba      	ldr	r2, [r7, #8]
 8007436:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800743e:	4b19      	ldr	r3, [pc, #100]	; (80074a4 <prvSwitchTimerLists+0xc0>)
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	3304      	adds	r3, #4
 8007446:	4619      	mov	r1, r3
 8007448:	4610      	mov	r0, r2
 800744a:	f7fd fb76 	bl	8004b3a <vListInsert>
 800744e:	e016      	b.n	800747e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007450:	2300      	movs	r3, #0
 8007452:	9300      	str	r3, [sp, #0]
 8007454:	2300      	movs	r3, #0
 8007456:	693a      	ldr	r2, [r7, #16]
 8007458:	2100      	movs	r1, #0
 800745a:	68f8      	ldr	r0, [r7, #12]
 800745c:	f7ff fd60 	bl	8006f20 <xTimerGenericCommand>
 8007460:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d10a      	bne.n	800747e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800746c:	f383 8811 	msr	BASEPRI, r3
 8007470:	f3bf 8f6f 	isb	sy
 8007474:	f3bf 8f4f 	dsb	sy
 8007478:	603b      	str	r3, [r7, #0]
}
 800747a:	bf00      	nop
 800747c:	e7fe      	b.n	800747c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800747e:	4b09      	ldr	r3, [pc, #36]	; (80074a4 <prvSwitchTimerLists+0xc0>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d1b1      	bne.n	80073ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007488:	4b06      	ldr	r3, [pc, #24]	; (80074a4 <prvSwitchTimerLists+0xc0>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800748e:	4b06      	ldr	r3, [pc, #24]	; (80074a8 <prvSwitchTimerLists+0xc4>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a04      	ldr	r2, [pc, #16]	; (80074a4 <prvSwitchTimerLists+0xc0>)
 8007494:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007496:	4a04      	ldr	r2, [pc, #16]	; (80074a8 <prvSwitchTimerLists+0xc4>)
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	6013      	str	r3, [r2, #0]
}
 800749c:	bf00      	nop
 800749e:	3718      	adds	r7, #24
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	20000d50 	.word	0x20000d50
 80074a8:	20000d54 	.word	0x20000d54

080074ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80074b2:	f000 f967 	bl	8007784 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80074b6:	4b15      	ldr	r3, [pc, #84]	; (800750c <prvCheckForValidListAndQueue+0x60>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d120      	bne.n	8007500 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80074be:	4814      	ldr	r0, [pc, #80]	; (8007510 <prvCheckForValidListAndQueue+0x64>)
 80074c0:	f7fd faea 	bl	8004a98 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80074c4:	4813      	ldr	r0, [pc, #76]	; (8007514 <prvCheckForValidListAndQueue+0x68>)
 80074c6:	f7fd fae7 	bl	8004a98 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80074ca:	4b13      	ldr	r3, [pc, #76]	; (8007518 <prvCheckForValidListAndQueue+0x6c>)
 80074cc:	4a10      	ldr	r2, [pc, #64]	; (8007510 <prvCheckForValidListAndQueue+0x64>)
 80074ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80074d0:	4b12      	ldr	r3, [pc, #72]	; (800751c <prvCheckForValidListAndQueue+0x70>)
 80074d2:	4a10      	ldr	r2, [pc, #64]	; (8007514 <prvCheckForValidListAndQueue+0x68>)
 80074d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80074d6:	2300      	movs	r3, #0
 80074d8:	9300      	str	r3, [sp, #0]
 80074da:	4b11      	ldr	r3, [pc, #68]	; (8007520 <prvCheckForValidListAndQueue+0x74>)
 80074dc:	4a11      	ldr	r2, [pc, #68]	; (8007524 <prvCheckForValidListAndQueue+0x78>)
 80074de:	2110      	movs	r1, #16
 80074e0:	200a      	movs	r0, #10
 80074e2:	f7fd fbf5 	bl	8004cd0 <xQueueGenericCreateStatic>
 80074e6:	4603      	mov	r3, r0
 80074e8:	4a08      	ldr	r2, [pc, #32]	; (800750c <prvCheckForValidListAndQueue+0x60>)
 80074ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80074ec:	4b07      	ldr	r3, [pc, #28]	; (800750c <prvCheckForValidListAndQueue+0x60>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d005      	beq.n	8007500 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80074f4:	4b05      	ldr	r3, [pc, #20]	; (800750c <prvCheckForValidListAndQueue+0x60>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	490b      	ldr	r1, [pc, #44]	; (8007528 <prvCheckForValidListAndQueue+0x7c>)
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7fe fbf8 	bl	8005cf0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007500:	f000 f970 	bl	80077e4 <vPortExitCritical>
}
 8007504:	bf00      	nop
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	20000d58 	.word	0x20000d58
 8007510:	20000d28 	.word	0x20000d28
 8007514:	20000d3c 	.word	0x20000d3c
 8007518:	20000d50 	.word	0x20000d50
 800751c:	20000d54 	.word	0x20000d54
 8007520:	20000e04 	.word	0x20000e04
 8007524:	20000d64 	.word	0x20000d64
 8007528:	08016574 	.word	0x08016574

0800752c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800752c:	b480      	push	{r7}
 800752e:	b085      	sub	sp, #20
 8007530:	af00      	add	r7, sp, #0
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	3b04      	subs	r3, #4
 800753c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007544:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	3b04      	subs	r3, #4
 800754a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	f023 0201 	bic.w	r2, r3, #1
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	3b04      	subs	r3, #4
 800755a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800755c:	4a0c      	ldr	r2, [pc, #48]	; (8007590 <pxPortInitialiseStack+0x64>)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	3b14      	subs	r3, #20
 8007566:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	3b04      	subs	r3, #4
 8007572:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f06f 0202 	mvn.w	r2, #2
 800757a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	3b20      	subs	r3, #32
 8007580:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007582:	68fb      	ldr	r3, [r7, #12]
}
 8007584:	4618      	mov	r0, r3
 8007586:	3714      	adds	r7, #20
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr
 8007590:	08007595 	.word	0x08007595

08007594 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007594:	b480      	push	{r7}
 8007596:	b085      	sub	sp, #20
 8007598:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800759a:	2300      	movs	r3, #0
 800759c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800759e:	4b12      	ldr	r3, [pc, #72]	; (80075e8 <prvTaskExitError+0x54>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075a6:	d00a      	beq.n	80075be <prvTaskExitError+0x2a>
	__asm volatile
 80075a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ac:	f383 8811 	msr	BASEPRI, r3
 80075b0:	f3bf 8f6f 	isb	sy
 80075b4:	f3bf 8f4f 	dsb	sy
 80075b8:	60fb      	str	r3, [r7, #12]
}
 80075ba:	bf00      	nop
 80075bc:	e7fe      	b.n	80075bc <prvTaskExitError+0x28>
	__asm volatile
 80075be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c2:	f383 8811 	msr	BASEPRI, r3
 80075c6:	f3bf 8f6f 	isb	sy
 80075ca:	f3bf 8f4f 	dsb	sy
 80075ce:	60bb      	str	r3, [r7, #8]
}
 80075d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80075d2:	bf00      	nop
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d0fc      	beq.n	80075d4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80075da:	bf00      	nop
 80075dc:	bf00      	nop
 80075de:	3714      	adds	r7, #20
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr
 80075e8:	2000000c 	.word	0x2000000c
 80075ec:	00000000 	.word	0x00000000

080075f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80075f0:	4b07      	ldr	r3, [pc, #28]	; (8007610 <pxCurrentTCBConst2>)
 80075f2:	6819      	ldr	r1, [r3, #0]
 80075f4:	6808      	ldr	r0, [r1, #0]
 80075f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075fa:	f380 8809 	msr	PSP, r0
 80075fe:	f3bf 8f6f 	isb	sy
 8007602:	f04f 0000 	mov.w	r0, #0
 8007606:	f380 8811 	msr	BASEPRI, r0
 800760a:	4770      	bx	lr
 800760c:	f3af 8000 	nop.w

08007610 <pxCurrentTCBConst2>:
 8007610:	20000828 	.word	0x20000828
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007614:	bf00      	nop
 8007616:	bf00      	nop

08007618 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007618:	4808      	ldr	r0, [pc, #32]	; (800763c <prvPortStartFirstTask+0x24>)
 800761a:	6800      	ldr	r0, [r0, #0]
 800761c:	6800      	ldr	r0, [r0, #0]
 800761e:	f380 8808 	msr	MSP, r0
 8007622:	f04f 0000 	mov.w	r0, #0
 8007626:	f380 8814 	msr	CONTROL, r0
 800762a:	b662      	cpsie	i
 800762c:	b661      	cpsie	f
 800762e:	f3bf 8f4f 	dsb	sy
 8007632:	f3bf 8f6f 	isb	sy
 8007636:	df00      	svc	0
 8007638:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800763a:	bf00      	nop
 800763c:	e000ed08 	.word	0xe000ed08

08007640 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b086      	sub	sp, #24
 8007644:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007646:	4b46      	ldr	r3, [pc, #280]	; (8007760 <xPortStartScheduler+0x120>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a46      	ldr	r2, [pc, #280]	; (8007764 <xPortStartScheduler+0x124>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d10a      	bne.n	8007666 <xPortStartScheduler+0x26>
	__asm volatile
 8007650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007654:	f383 8811 	msr	BASEPRI, r3
 8007658:	f3bf 8f6f 	isb	sy
 800765c:	f3bf 8f4f 	dsb	sy
 8007660:	613b      	str	r3, [r7, #16]
}
 8007662:	bf00      	nop
 8007664:	e7fe      	b.n	8007664 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007666:	4b3e      	ldr	r3, [pc, #248]	; (8007760 <xPortStartScheduler+0x120>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a3f      	ldr	r2, [pc, #252]	; (8007768 <xPortStartScheduler+0x128>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d10a      	bne.n	8007686 <xPortStartScheduler+0x46>
	__asm volatile
 8007670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007674:	f383 8811 	msr	BASEPRI, r3
 8007678:	f3bf 8f6f 	isb	sy
 800767c:	f3bf 8f4f 	dsb	sy
 8007680:	60fb      	str	r3, [r7, #12]
}
 8007682:	bf00      	nop
 8007684:	e7fe      	b.n	8007684 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007686:	4b39      	ldr	r3, [pc, #228]	; (800776c <xPortStartScheduler+0x12c>)
 8007688:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	b2db      	uxtb	r3, r3
 8007690:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	22ff      	movs	r2, #255	; 0xff
 8007696:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	b2db      	uxtb	r3, r3
 800769e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80076a0:	78fb      	ldrb	r3, [r7, #3]
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80076a8:	b2da      	uxtb	r2, r3
 80076aa:	4b31      	ldr	r3, [pc, #196]	; (8007770 <xPortStartScheduler+0x130>)
 80076ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80076ae:	4b31      	ldr	r3, [pc, #196]	; (8007774 <xPortStartScheduler+0x134>)
 80076b0:	2207      	movs	r2, #7
 80076b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80076b4:	e009      	b.n	80076ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80076b6:	4b2f      	ldr	r3, [pc, #188]	; (8007774 <xPortStartScheduler+0x134>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	3b01      	subs	r3, #1
 80076bc:	4a2d      	ldr	r2, [pc, #180]	; (8007774 <xPortStartScheduler+0x134>)
 80076be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80076c0:	78fb      	ldrb	r3, [r7, #3]
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	005b      	lsls	r3, r3, #1
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80076ca:	78fb      	ldrb	r3, [r7, #3]
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076d2:	2b80      	cmp	r3, #128	; 0x80
 80076d4:	d0ef      	beq.n	80076b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80076d6:	4b27      	ldr	r3, [pc, #156]	; (8007774 <xPortStartScheduler+0x134>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f1c3 0307 	rsb	r3, r3, #7
 80076de:	2b04      	cmp	r3, #4
 80076e0:	d00a      	beq.n	80076f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80076e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e6:	f383 8811 	msr	BASEPRI, r3
 80076ea:	f3bf 8f6f 	isb	sy
 80076ee:	f3bf 8f4f 	dsb	sy
 80076f2:	60bb      	str	r3, [r7, #8]
}
 80076f4:	bf00      	nop
 80076f6:	e7fe      	b.n	80076f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80076f8:	4b1e      	ldr	r3, [pc, #120]	; (8007774 <xPortStartScheduler+0x134>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	021b      	lsls	r3, r3, #8
 80076fe:	4a1d      	ldr	r2, [pc, #116]	; (8007774 <xPortStartScheduler+0x134>)
 8007700:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007702:	4b1c      	ldr	r3, [pc, #112]	; (8007774 <xPortStartScheduler+0x134>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800770a:	4a1a      	ldr	r2, [pc, #104]	; (8007774 <xPortStartScheduler+0x134>)
 800770c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	b2da      	uxtb	r2, r3
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007716:	4b18      	ldr	r3, [pc, #96]	; (8007778 <xPortStartScheduler+0x138>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a17      	ldr	r2, [pc, #92]	; (8007778 <xPortStartScheduler+0x138>)
 800771c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007720:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007722:	4b15      	ldr	r3, [pc, #84]	; (8007778 <xPortStartScheduler+0x138>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a14      	ldr	r2, [pc, #80]	; (8007778 <xPortStartScheduler+0x138>)
 8007728:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800772c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800772e:	f000 f8dd 	bl	80078ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007732:	4b12      	ldr	r3, [pc, #72]	; (800777c <xPortStartScheduler+0x13c>)
 8007734:	2200      	movs	r2, #0
 8007736:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007738:	f000 f8fc 	bl	8007934 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800773c:	4b10      	ldr	r3, [pc, #64]	; (8007780 <xPortStartScheduler+0x140>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a0f      	ldr	r2, [pc, #60]	; (8007780 <xPortStartScheduler+0x140>)
 8007742:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007746:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007748:	f7ff ff66 	bl	8007618 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800774c:	f7fe ff3c 	bl	80065c8 <vTaskSwitchContext>
	prvTaskExitError();
 8007750:	f7ff ff20 	bl	8007594 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3718      	adds	r7, #24
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	e000ed00 	.word	0xe000ed00
 8007764:	410fc271 	.word	0x410fc271
 8007768:	410fc270 	.word	0x410fc270
 800776c:	e000e400 	.word	0xe000e400
 8007770:	20000e54 	.word	0x20000e54
 8007774:	20000e58 	.word	0x20000e58
 8007778:	e000ed20 	.word	0xe000ed20
 800777c:	2000000c 	.word	0x2000000c
 8007780:	e000ef34 	.word	0xe000ef34

08007784 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
	__asm volatile
 800778a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778e:	f383 8811 	msr	BASEPRI, r3
 8007792:	f3bf 8f6f 	isb	sy
 8007796:	f3bf 8f4f 	dsb	sy
 800779a:	607b      	str	r3, [r7, #4]
}
 800779c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800779e:	4b0f      	ldr	r3, [pc, #60]	; (80077dc <vPortEnterCritical+0x58>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	3301      	adds	r3, #1
 80077a4:	4a0d      	ldr	r2, [pc, #52]	; (80077dc <vPortEnterCritical+0x58>)
 80077a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80077a8:	4b0c      	ldr	r3, [pc, #48]	; (80077dc <vPortEnterCritical+0x58>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d10f      	bne.n	80077d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80077b0:	4b0b      	ldr	r3, [pc, #44]	; (80077e0 <vPortEnterCritical+0x5c>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00a      	beq.n	80077d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80077ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077be:	f383 8811 	msr	BASEPRI, r3
 80077c2:	f3bf 8f6f 	isb	sy
 80077c6:	f3bf 8f4f 	dsb	sy
 80077ca:	603b      	str	r3, [r7, #0]
}
 80077cc:	bf00      	nop
 80077ce:	e7fe      	b.n	80077ce <vPortEnterCritical+0x4a>
	}
}
 80077d0:	bf00      	nop
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr
 80077dc:	2000000c 	.word	0x2000000c
 80077e0:	e000ed04 	.word	0xe000ed04

080077e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80077ea:	4b12      	ldr	r3, [pc, #72]	; (8007834 <vPortExitCritical+0x50>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d10a      	bne.n	8007808 <vPortExitCritical+0x24>
	__asm volatile
 80077f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f6:	f383 8811 	msr	BASEPRI, r3
 80077fa:	f3bf 8f6f 	isb	sy
 80077fe:	f3bf 8f4f 	dsb	sy
 8007802:	607b      	str	r3, [r7, #4]
}
 8007804:	bf00      	nop
 8007806:	e7fe      	b.n	8007806 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007808:	4b0a      	ldr	r3, [pc, #40]	; (8007834 <vPortExitCritical+0x50>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	3b01      	subs	r3, #1
 800780e:	4a09      	ldr	r2, [pc, #36]	; (8007834 <vPortExitCritical+0x50>)
 8007810:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007812:	4b08      	ldr	r3, [pc, #32]	; (8007834 <vPortExitCritical+0x50>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d105      	bne.n	8007826 <vPortExitCritical+0x42>
 800781a:	2300      	movs	r3, #0
 800781c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	f383 8811 	msr	BASEPRI, r3
}
 8007824:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007826:	bf00      	nop
 8007828:	370c      	adds	r7, #12
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr
 8007832:	bf00      	nop
 8007834:	2000000c 	.word	0x2000000c
	...

08007840 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007840:	f3ef 8009 	mrs	r0, PSP
 8007844:	f3bf 8f6f 	isb	sy
 8007848:	4b15      	ldr	r3, [pc, #84]	; (80078a0 <pxCurrentTCBConst>)
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	f01e 0f10 	tst.w	lr, #16
 8007850:	bf08      	it	eq
 8007852:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007856:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800785a:	6010      	str	r0, [r2, #0]
 800785c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007860:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007864:	f380 8811 	msr	BASEPRI, r0
 8007868:	f3bf 8f4f 	dsb	sy
 800786c:	f3bf 8f6f 	isb	sy
 8007870:	f7fe feaa 	bl	80065c8 <vTaskSwitchContext>
 8007874:	f04f 0000 	mov.w	r0, #0
 8007878:	f380 8811 	msr	BASEPRI, r0
 800787c:	bc09      	pop	{r0, r3}
 800787e:	6819      	ldr	r1, [r3, #0]
 8007880:	6808      	ldr	r0, [r1, #0]
 8007882:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007886:	f01e 0f10 	tst.w	lr, #16
 800788a:	bf08      	it	eq
 800788c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007890:	f380 8809 	msr	PSP, r0
 8007894:	f3bf 8f6f 	isb	sy
 8007898:	4770      	bx	lr
 800789a:	bf00      	nop
 800789c:	f3af 8000 	nop.w

080078a0 <pxCurrentTCBConst>:
 80078a0:	20000828 	.word	0x20000828
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80078a4:	bf00      	nop
 80078a6:	bf00      	nop

080078a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
	__asm volatile
 80078ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b2:	f383 8811 	msr	BASEPRI, r3
 80078b6:	f3bf 8f6f 	isb	sy
 80078ba:	f3bf 8f4f 	dsb	sy
 80078be:	607b      	str	r3, [r7, #4]
}
 80078c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80078c2:	f7fe fdc7 	bl	8006454 <xTaskIncrementTick>
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d003      	beq.n	80078d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80078cc:	4b06      	ldr	r3, [pc, #24]	; (80078e8 <xPortSysTickHandler+0x40>)
 80078ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078d2:	601a      	str	r2, [r3, #0]
 80078d4:	2300      	movs	r3, #0
 80078d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	f383 8811 	msr	BASEPRI, r3
}
 80078de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80078e0:	bf00      	nop
 80078e2:	3708      	adds	r7, #8
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	e000ed04 	.word	0xe000ed04

080078ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80078ec:	b480      	push	{r7}
 80078ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80078f0:	4b0b      	ldr	r3, [pc, #44]	; (8007920 <vPortSetupTimerInterrupt+0x34>)
 80078f2:	2200      	movs	r2, #0
 80078f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80078f6:	4b0b      	ldr	r3, [pc, #44]	; (8007924 <vPortSetupTimerInterrupt+0x38>)
 80078f8:	2200      	movs	r2, #0
 80078fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80078fc:	4b0a      	ldr	r3, [pc, #40]	; (8007928 <vPortSetupTimerInterrupt+0x3c>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a0a      	ldr	r2, [pc, #40]	; (800792c <vPortSetupTimerInterrupt+0x40>)
 8007902:	fba2 2303 	umull	r2, r3, r2, r3
 8007906:	099b      	lsrs	r3, r3, #6
 8007908:	4a09      	ldr	r2, [pc, #36]	; (8007930 <vPortSetupTimerInterrupt+0x44>)
 800790a:	3b01      	subs	r3, #1
 800790c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800790e:	4b04      	ldr	r3, [pc, #16]	; (8007920 <vPortSetupTimerInterrupt+0x34>)
 8007910:	2207      	movs	r2, #7
 8007912:	601a      	str	r2, [r3, #0]
}
 8007914:	bf00      	nop
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	e000e010 	.word	0xe000e010
 8007924:	e000e018 	.word	0xe000e018
 8007928:	20000000 	.word	0x20000000
 800792c:	10624dd3 	.word	0x10624dd3
 8007930:	e000e014 	.word	0xe000e014

08007934 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007934:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007944 <vPortEnableVFP+0x10>
 8007938:	6801      	ldr	r1, [r0, #0]
 800793a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800793e:	6001      	str	r1, [r0, #0]
 8007940:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007942:	bf00      	nop
 8007944:	e000ed88 	.word	0xe000ed88

08007948 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007948:	b480      	push	{r7}
 800794a:	b085      	sub	sp, #20
 800794c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800794e:	f3ef 8305 	mrs	r3, IPSR
 8007952:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2b0f      	cmp	r3, #15
 8007958:	d914      	bls.n	8007984 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800795a:	4a17      	ldr	r2, [pc, #92]	; (80079b8 <vPortValidateInterruptPriority+0x70>)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	4413      	add	r3, r2
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007964:	4b15      	ldr	r3, [pc, #84]	; (80079bc <vPortValidateInterruptPriority+0x74>)
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	7afa      	ldrb	r2, [r7, #11]
 800796a:	429a      	cmp	r2, r3
 800796c:	d20a      	bcs.n	8007984 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800796e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007972:	f383 8811 	msr	BASEPRI, r3
 8007976:	f3bf 8f6f 	isb	sy
 800797a:	f3bf 8f4f 	dsb	sy
 800797e:	607b      	str	r3, [r7, #4]
}
 8007980:	bf00      	nop
 8007982:	e7fe      	b.n	8007982 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007984:	4b0e      	ldr	r3, [pc, #56]	; (80079c0 <vPortValidateInterruptPriority+0x78>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800798c:	4b0d      	ldr	r3, [pc, #52]	; (80079c4 <vPortValidateInterruptPriority+0x7c>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	429a      	cmp	r2, r3
 8007992:	d90a      	bls.n	80079aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007998:	f383 8811 	msr	BASEPRI, r3
 800799c:	f3bf 8f6f 	isb	sy
 80079a0:	f3bf 8f4f 	dsb	sy
 80079a4:	603b      	str	r3, [r7, #0]
}
 80079a6:	bf00      	nop
 80079a8:	e7fe      	b.n	80079a8 <vPortValidateInterruptPriority+0x60>
	}
 80079aa:	bf00      	nop
 80079ac:	3714      	adds	r7, #20
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr
 80079b6:	bf00      	nop
 80079b8:	e000e3f0 	.word	0xe000e3f0
 80079bc:	20000e54 	.word	0x20000e54
 80079c0:	e000ed0c 	.word	0xe000ed0c
 80079c4:	20000e58 	.word	0x20000e58

080079c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b08a      	sub	sp, #40	; 0x28
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80079d0:	2300      	movs	r3, #0
 80079d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80079d4:	f7fe fc70 	bl	80062b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80079d8:	4b5b      	ldr	r3, [pc, #364]	; (8007b48 <pvPortMalloc+0x180>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d101      	bne.n	80079e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80079e0:	f000 f920 	bl	8007c24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80079e4:	4b59      	ldr	r3, [pc, #356]	; (8007b4c <pvPortMalloc+0x184>)
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	4013      	ands	r3, r2
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	f040 8093 	bne.w	8007b18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d01d      	beq.n	8007a34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80079f8:	2208      	movs	r2, #8
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4413      	add	r3, r2
 80079fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f003 0307 	and.w	r3, r3, #7
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d014      	beq.n	8007a34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f023 0307 	bic.w	r3, r3, #7
 8007a10:	3308      	adds	r3, #8
 8007a12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f003 0307 	and.w	r3, r3, #7
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00a      	beq.n	8007a34 <pvPortMalloc+0x6c>
	__asm volatile
 8007a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a22:	f383 8811 	msr	BASEPRI, r3
 8007a26:	f3bf 8f6f 	isb	sy
 8007a2a:	f3bf 8f4f 	dsb	sy
 8007a2e:	617b      	str	r3, [r7, #20]
}
 8007a30:	bf00      	nop
 8007a32:	e7fe      	b.n	8007a32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d06e      	beq.n	8007b18 <pvPortMalloc+0x150>
 8007a3a:	4b45      	ldr	r3, [pc, #276]	; (8007b50 <pvPortMalloc+0x188>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d869      	bhi.n	8007b18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007a44:	4b43      	ldr	r3, [pc, #268]	; (8007b54 <pvPortMalloc+0x18c>)
 8007a46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007a48:	4b42      	ldr	r3, [pc, #264]	; (8007b54 <pvPortMalloc+0x18c>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a4e:	e004      	b.n	8007a5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d903      	bls.n	8007a6c <pvPortMalloc+0xa4>
 8007a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d1f1      	bne.n	8007a50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007a6c:	4b36      	ldr	r3, [pc, #216]	; (8007b48 <pvPortMalloc+0x180>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d050      	beq.n	8007b18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007a76:	6a3b      	ldr	r3, [r7, #32]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2208      	movs	r2, #8
 8007a7c:	4413      	add	r3, r2
 8007a7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	6a3b      	ldr	r3, [r7, #32]
 8007a86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8a:	685a      	ldr	r2, [r3, #4]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	1ad2      	subs	r2, r2, r3
 8007a90:	2308      	movs	r3, #8
 8007a92:	005b      	lsls	r3, r3, #1
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d91f      	bls.n	8007ad8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007aa0:	69bb      	ldr	r3, [r7, #24]
 8007aa2:	f003 0307 	and.w	r3, r3, #7
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d00a      	beq.n	8007ac0 <pvPortMalloc+0xf8>
	__asm volatile
 8007aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aae:	f383 8811 	msr	BASEPRI, r3
 8007ab2:	f3bf 8f6f 	isb	sy
 8007ab6:	f3bf 8f4f 	dsb	sy
 8007aba:	613b      	str	r3, [r7, #16]
}
 8007abc:	bf00      	nop
 8007abe:	e7fe      	b.n	8007abe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac2:	685a      	ldr	r2, [r3, #4]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	1ad2      	subs	r2, r2, r3
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007ad2:	69b8      	ldr	r0, [r7, #24]
 8007ad4:	f000 f908 	bl	8007ce8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ad8:	4b1d      	ldr	r3, [pc, #116]	; (8007b50 <pvPortMalloc+0x188>)
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	4a1b      	ldr	r2, [pc, #108]	; (8007b50 <pvPortMalloc+0x188>)
 8007ae4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ae6:	4b1a      	ldr	r3, [pc, #104]	; (8007b50 <pvPortMalloc+0x188>)
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	4b1b      	ldr	r3, [pc, #108]	; (8007b58 <pvPortMalloc+0x190>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d203      	bcs.n	8007afa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007af2:	4b17      	ldr	r3, [pc, #92]	; (8007b50 <pvPortMalloc+0x188>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a18      	ldr	r2, [pc, #96]	; (8007b58 <pvPortMalloc+0x190>)
 8007af8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afc:	685a      	ldr	r2, [r3, #4]
 8007afe:	4b13      	ldr	r3, [pc, #76]	; (8007b4c <pvPortMalloc+0x184>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	431a      	orrs	r2, r3
 8007b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007b0e:	4b13      	ldr	r3, [pc, #76]	; (8007b5c <pvPortMalloc+0x194>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	3301      	adds	r3, #1
 8007b14:	4a11      	ldr	r2, [pc, #68]	; (8007b5c <pvPortMalloc+0x194>)
 8007b16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007b18:	f7fe fbdc 	bl	80062d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	f003 0307 	and.w	r3, r3, #7
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d00a      	beq.n	8007b3c <pvPortMalloc+0x174>
	__asm volatile
 8007b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2a:	f383 8811 	msr	BASEPRI, r3
 8007b2e:	f3bf 8f6f 	isb	sy
 8007b32:	f3bf 8f4f 	dsb	sy
 8007b36:	60fb      	str	r3, [r7, #12]
}
 8007b38:	bf00      	nop
 8007b3a:	e7fe      	b.n	8007b3a <pvPortMalloc+0x172>
	return pvReturn;
 8007b3c:	69fb      	ldr	r3, [r7, #28]
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3728      	adds	r7, #40	; 0x28
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	20004a64 	.word	0x20004a64
 8007b4c:	20004a78 	.word	0x20004a78
 8007b50:	20004a68 	.word	0x20004a68
 8007b54:	20004a5c 	.word	0x20004a5c
 8007b58:	20004a6c 	.word	0x20004a6c
 8007b5c:	20004a70 	.word	0x20004a70

08007b60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d04d      	beq.n	8007c0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007b72:	2308      	movs	r3, #8
 8007b74:	425b      	negs	r3, r3
 8007b76:	697a      	ldr	r2, [r7, #20]
 8007b78:	4413      	add	r3, r2
 8007b7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	685a      	ldr	r2, [r3, #4]
 8007b84:	4b24      	ldr	r3, [pc, #144]	; (8007c18 <vPortFree+0xb8>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4013      	ands	r3, r2
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d10a      	bne.n	8007ba4 <vPortFree+0x44>
	__asm volatile
 8007b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	60fb      	str	r3, [r7, #12]
}
 8007ba0:	bf00      	nop
 8007ba2:	e7fe      	b.n	8007ba2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00a      	beq.n	8007bc2 <vPortFree+0x62>
	__asm volatile
 8007bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb0:	f383 8811 	msr	BASEPRI, r3
 8007bb4:	f3bf 8f6f 	isb	sy
 8007bb8:	f3bf 8f4f 	dsb	sy
 8007bbc:	60bb      	str	r3, [r7, #8]
}
 8007bbe:	bf00      	nop
 8007bc0:	e7fe      	b.n	8007bc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	685a      	ldr	r2, [r3, #4]
 8007bc6:	4b14      	ldr	r3, [pc, #80]	; (8007c18 <vPortFree+0xb8>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4013      	ands	r3, r2
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d01e      	beq.n	8007c0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d11a      	bne.n	8007c0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	685a      	ldr	r2, [r3, #4]
 8007bdc:	4b0e      	ldr	r3, [pc, #56]	; (8007c18 <vPortFree+0xb8>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	43db      	mvns	r3, r3
 8007be2:	401a      	ands	r2, r3
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007be8:	f7fe fb66 	bl	80062b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	685a      	ldr	r2, [r3, #4]
 8007bf0:	4b0a      	ldr	r3, [pc, #40]	; (8007c1c <vPortFree+0xbc>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4413      	add	r3, r2
 8007bf6:	4a09      	ldr	r2, [pc, #36]	; (8007c1c <vPortFree+0xbc>)
 8007bf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007bfa:	6938      	ldr	r0, [r7, #16]
 8007bfc:	f000 f874 	bl	8007ce8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007c00:	4b07      	ldr	r3, [pc, #28]	; (8007c20 <vPortFree+0xc0>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	3301      	adds	r3, #1
 8007c06:	4a06      	ldr	r2, [pc, #24]	; (8007c20 <vPortFree+0xc0>)
 8007c08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007c0a:	f7fe fb63 	bl	80062d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007c0e:	bf00      	nop
 8007c10:	3718      	adds	r7, #24
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	20004a78 	.word	0x20004a78
 8007c1c:	20004a68 	.word	0x20004a68
 8007c20:	20004a74 	.word	0x20004a74

08007c24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007c2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007c2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007c30:	4b27      	ldr	r3, [pc, #156]	; (8007cd0 <prvHeapInit+0xac>)
 8007c32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f003 0307 	and.w	r3, r3, #7
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00c      	beq.n	8007c58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	3307      	adds	r3, #7
 8007c42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f023 0307 	bic.w	r3, r3, #7
 8007c4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007c4c:	68ba      	ldr	r2, [r7, #8]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	1ad3      	subs	r3, r2, r3
 8007c52:	4a1f      	ldr	r2, [pc, #124]	; (8007cd0 <prvHeapInit+0xac>)
 8007c54:	4413      	add	r3, r2
 8007c56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007c5c:	4a1d      	ldr	r2, [pc, #116]	; (8007cd4 <prvHeapInit+0xb0>)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007c62:	4b1c      	ldr	r3, [pc, #112]	; (8007cd4 <prvHeapInit+0xb0>)
 8007c64:	2200      	movs	r2, #0
 8007c66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	68ba      	ldr	r2, [r7, #8]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007c70:	2208      	movs	r2, #8
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	1a9b      	subs	r3, r3, r2
 8007c76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f023 0307 	bic.w	r3, r3, #7
 8007c7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	4a15      	ldr	r2, [pc, #84]	; (8007cd8 <prvHeapInit+0xb4>)
 8007c84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007c86:	4b14      	ldr	r3, [pc, #80]	; (8007cd8 <prvHeapInit+0xb4>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007c8e:	4b12      	ldr	r3, [pc, #72]	; (8007cd8 <prvHeapInit+0xb4>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2200      	movs	r2, #0
 8007c94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	68fa      	ldr	r2, [r7, #12]
 8007c9e:	1ad2      	subs	r2, r2, r3
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ca4:	4b0c      	ldr	r3, [pc, #48]	; (8007cd8 <prvHeapInit+0xb4>)
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	4a0a      	ldr	r2, [pc, #40]	; (8007cdc <prvHeapInit+0xb8>)
 8007cb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	4a09      	ldr	r2, [pc, #36]	; (8007ce0 <prvHeapInit+0xbc>)
 8007cba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007cbc:	4b09      	ldr	r3, [pc, #36]	; (8007ce4 <prvHeapInit+0xc0>)
 8007cbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007cc2:	601a      	str	r2, [r3, #0]
}
 8007cc4:	bf00      	nop
 8007cc6:	3714      	adds	r7, #20
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr
 8007cd0:	20000e5c 	.word	0x20000e5c
 8007cd4:	20004a5c 	.word	0x20004a5c
 8007cd8:	20004a64 	.word	0x20004a64
 8007cdc:	20004a6c 	.word	0x20004a6c
 8007ce0:	20004a68 	.word	0x20004a68
 8007ce4:	20004a78 	.word	0x20004a78

08007ce8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007cf0:	4b28      	ldr	r3, [pc, #160]	; (8007d94 <prvInsertBlockIntoFreeList+0xac>)
 8007cf2:	60fb      	str	r3, [r7, #12]
 8007cf4:	e002      	b.n	8007cfc <prvInsertBlockIntoFreeList+0x14>
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	60fb      	str	r3, [r7, #12]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d8f7      	bhi.n	8007cf6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	68ba      	ldr	r2, [r7, #8]
 8007d10:	4413      	add	r3, r2
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d108      	bne.n	8007d2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	685a      	ldr	r2, [r3, #4]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	441a      	add	r2, r3
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	68ba      	ldr	r2, [r7, #8]
 8007d34:	441a      	add	r2, r3
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d118      	bne.n	8007d70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	4b15      	ldr	r3, [pc, #84]	; (8007d98 <prvInsertBlockIntoFreeList+0xb0>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d00d      	beq.n	8007d66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	685a      	ldr	r2, [r3, #4]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	441a      	add	r2, r3
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	601a      	str	r2, [r3, #0]
 8007d64:	e008      	b.n	8007d78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007d66:	4b0c      	ldr	r3, [pc, #48]	; (8007d98 <prvInsertBlockIntoFreeList+0xb0>)
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	601a      	str	r2, [r3, #0]
 8007d6e:	e003      	b.n	8007d78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007d78:	68fa      	ldr	r2, [r7, #12]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d002      	beq.n	8007d86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d86:	bf00      	nop
 8007d88:	3714      	adds	r7, #20
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop
 8007d94:	20004a5c 	.word	0x20004a5c
 8007d98:	20004a64 	.word	0x20004a64

08007d9c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	330c      	adds	r3, #12
 8007dac:	461a      	mov	r2, r3
 8007dae:	6839      	ldr	r1, [r7, #0]
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f002 fa6f 	bl	800a294 <tcpip_send_msg_wait_sem>
 8007db6:	4603      	mov	r3, r0
 8007db8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8007dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d103      	bne.n	8007dca <netconn_apimsg+0x2e>
    return apimsg->err;
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8007dc8:	e001      	b.n	8007dce <netconn_apimsg+0x32>
  }
  return err;
 8007dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
	...

08007dd8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b08c      	sub	sp, #48	; 0x30
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	4603      	mov	r3, r0
 8007de0:	603a      	str	r2, [r7, #0]
 8007de2:	71fb      	strb	r3, [r7, #7]
 8007de4:	460b      	mov	r3, r1
 8007de6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8007de8:	79fb      	ldrb	r3, [r7, #7]
 8007dea:	6839      	ldr	r1, [r7, #0]
 8007dec:	4618      	mov	r0, r3
 8007dee:	f001 f923 	bl	8009038 <netconn_alloc>
 8007df2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8007df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d054      	beq.n	8007ea4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8007dfa:	79bb      	ldrb	r3, [r7, #6]
 8007dfc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8007dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e00:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8007e02:	f107 0308 	add.w	r3, r7, #8
 8007e06:	4619      	mov	r1, r3
 8007e08:	4829      	ldr	r0, [pc, #164]	; (8007eb0 <netconn_new_with_proto_and_callback+0xd8>)
 8007e0a:	f7ff ffc7 	bl	8007d9c <netconn_apimsg>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8007e14:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d043      	beq.n	8007ea4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8007e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d005      	beq.n	8007e30 <netconn_new_with_proto_and_callback+0x58>
 8007e24:	4b23      	ldr	r3, [pc, #140]	; (8007eb4 <netconn_new_with_proto_and_callback+0xdc>)
 8007e26:	22a3      	movs	r2, #163	; 0xa3
 8007e28:	4923      	ldr	r1, [pc, #140]	; (8007eb8 <netconn_new_with_proto_and_callback+0xe0>)
 8007e2a:	4824      	ldr	r0, [pc, #144]	; (8007ebc <netconn_new_with_proto_and_callback+0xe4>)
 8007e2c:	f00d fbe6 	bl	80155fc <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8007e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e32:	3310      	adds	r3, #16
 8007e34:	4618      	mov	r0, r3
 8007e36:	f00d f91d 	bl	8015074 <sys_mbox_valid>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d105      	bne.n	8007e4c <netconn_new_with_proto_and_callback+0x74>
 8007e40:	4b1c      	ldr	r3, [pc, #112]	; (8007eb4 <netconn_new_with_proto_and_callback+0xdc>)
 8007e42:	22a4      	movs	r2, #164	; 0xa4
 8007e44:	491e      	ldr	r1, [pc, #120]	; (8007ec0 <netconn_new_with_proto_and_callback+0xe8>)
 8007e46:	481d      	ldr	r0, [pc, #116]	; (8007ebc <netconn_new_with_proto_and_callback+0xe4>)
 8007e48:	f00d fbd8 	bl	80155fc <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8007e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e4e:	3314      	adds	r3, #20
 8007e50:	4618      	mov	r0, r3
 8007e52:	f00d f90f 	bl	8015074 <sys_mbox_valid>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d005      	beq.n	8007e68 <netconn_new_with_proto_and_callback+0x90>
 8007e5c:	4b15      	ldr	r3, [pc, #84]	; (8007eb4 <netconn_new_with_proto_and_callback+0xdc>)
 8007e5e:	22a6      	movs	r2, #166	; 0xa6
 8007e60:	4918      	ldr	r1, [pc, #96]	; (8007ec4 <netconn_new_with_proto_and_callback+0xec>)
 8007e62:	4816      	ldr	r0, [pc, #88]	; (8007ebc <netconn_new_with_proto_and_callback+0xe4>)
 8007e64:	f00d fbca 	bl	80155fc <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8007e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6a:	330c      	adds	r3, #12
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f00d f98f 	bl	8015190 <sys_sem_valid>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d105      	bne.n	8007e84 <netconn_new_with_proto_and_callback+0xac>
 8007e78:	4b0e      	ldr	r3, [pc, #56]	; (8007eb4 <netconn_new_with_proto_and_callback+0xdc>)
 8007e7a:	22a9      	movs	r2, #169	; 0xa9
 8007e7c:	4912      	ldr	r1, [pc, #72]	; (8007ec8 <netconn_new_with_proto_and_callback+0xf0>)
 8007e7e:	480f      	ldr	r0, [pc, #60]	; (8007ebc <netconn_new_with_proto_and_callback+0xe4>)
 8007e80:	f00d fbbc 	bl	80155fc <iprintf>
      sys_sem_free(&conn->op_completed);
 8007e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e86:	330c      	adds	r3, #12
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f00d f974 	bl	8015176 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8007e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e90:	3310      	adds	r3, #16
 8007e92:	4618      	mov	r0, r3
 8007e94:	f00d f87a 	bl	8014f8c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8007e98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e9a:	2007      	movs	r0, #7
 8007e9c:	f002 ff62 	bl	800ad64 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	e000      	b.n	8007ea6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8007ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3730      	adds	r7, #48	; 0x30
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	0800900d 	.word	0x0800900d
 8007eb4:	0801657c 	.word	0x0801657c
 8007eb8:	080165b0 	.word	0x080165b0
 8007ebc:	080165d4 	.word	0x080165d4
 8007ec0:	080165fc 	.word	0x080165fc
 8007ec4:	08016614 	.word	0x08016614
 8007ec8:	08016638 	.word	0x08016638

08007ecc <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b08c      	sub	sp, #48	; 0x30
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d101      	bne.n	8007ede <netconn_prepare_delete+0x12>
    return ERR_OK;
 8007eda:	2300      	movs	r3, #0
 8007edc:	e014      	b.n	8007f08 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8007ee2:	2329      	movs	r3, #41	; 0x29
 8007ee4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8007ee6:	f107 030c 	add.w	r3, r7, #12
 8007eea:	4619      	mov	r1, r3
 8007eec:	4808      	ldr	r0, [pc, #32]	; (8007f10 <netconn_prepare_delete+0x44>)
 8007eee:	f7ff ff55 	bl	8007d9c <netconn_apimsg>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8007ef8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d002      	beq.n	8007f06 <netconn_prepare_delete+0x3a>
    return err;
 8007f00:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007f04:	e000      	b.n	8007f08 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8007f06:	2300      	movs	r3, #0
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3730      	adds	r7, #48	; 0x30
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	08009571 	.word	0x08009571

08007f14 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d101      	bne.n	8007f26 <netconn_delete+0x12>
    return ERR_OK;
 8007f22:	2300      	movs	r3, #0
 8007f24:	e00d      	b.n	8007f42 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f7ff ffd0 	bl	8007ecc <netconn_prepare_delete>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8007f30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d102      	bne.n	8007f3e <netconn_delete+0x2a>
    netconn_free(conn);
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f001 f8eb 	bl	8009114 <netconn_free>
  }
  return err;
 8007f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3710      	adds	r7, #16
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
	...

08007f4c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b08e      	sub	sp, #56	; 0x38
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	4613      	mov	r3, r2
 8007f58:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d109      	bne.n	8007f74 <netconn_bind+0x28>
 8007f60:	4b11      	ldr	r3, [pc, #68]	; (8007fa8 <netconn_bind+0x5c>)
 8007f62:	f44f 729c 	mov.w	r2, #312	; 0x138
 8007f66:	4911      	ldr	r1, [pc, #68]	; (8007fac <netconn_bind+0x60>)
 8007f68:	4811      	ldr	r0, [pc, #68]	; (8007fb0 <netconn_bind+0x64>)
 8007f6a:	f00d fb47 	bl	80155fc <iprintf>
 8007f6e:	f06f 030f 	mvn.w	r3, #15
 8007f72:	e015      	b.n	8007fa0 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d101      	bne.n	8007f7e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8007f7a:	4b0e      	ldr	r3, [pc, #56]	; (8007fb4 <netconn_bind+0x68>)
 8007f7c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8007f86:	88fb      	ldrh	r3, [r7, #6]
 8007f88:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8007f8a:	f107 0314 	add.w	r3, r7, #20
 8007f8e:	4619      	mov	r1, r3
 8007f90:	4809      	ldr	r0, [pc, #36]	; (8007fb8 <netconn_bind+0x6c>)
 8007f92:	f7ff ff03 	bl	8007d9c <netconn_apimsg>
 8007f96:	4603      	mov	r3, r0
 8007f98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8007f9c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3738      	adds	r7, #56	; 0x38
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	0801657c 	.word	0x0801657c
 8007fac:	080166b4 	.word	0x080166b4
 8007fb0:	080165d4 	.word	0x080165d4
 8007fb4:	08019fa4 	.word	0x08019fa4
 8007fb8:	08009739 	.word	0x08009739

08007fbc <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b08c      	sub	sp, #48	; 0x30
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d109      	bne.n	8007fe2 <netconn_listen_with_backlog+0x26>
 8007fce:	4b0d      	ldr	r3, [pc, #52]	; (8008004 <netconn_listen_with_backlog+0x48>)
 8007fd0:	f240 12bb 	movw	r2, #443	; 0x1bb
 8007fd4:	490c      	ldr	r1, [pc, #48]	; (8008008 <netconn_listen_with_backlog+0x4c>)
 8007fd6:	480d      	ldr	r0, [pc, #52]	; (800800c <netconn_listen_with_backlog+0x50>)
 8007fd8:	f00d fb10 	bl	80155fc <iprintf>
 8007fdc:	f06f 030f 	mvn.w	r3, #15
 8007fe0:	e00c      	b.n	8007ffc <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8007fe6:	f107 030c 	add.w	r3, r7, #12
 8007fea:	4619      	mov	r1, r3
 8007fec:	4808      	ldr	r0, [pc, #32]	; (8008010 <netconn_listen_with_backlog+0x54>)
 8007fee:	f7ff fed5 	bl	8007d9c <netconn_apimsg>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8007ff8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3730      	adds	r7, #48	; 0x30
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}
 8008004:	0801657c 	.word	0x0801657c
 8008008:	08016734 	.word	0x08016734
 800800c:	080165d4 	.word	0x080165d4
 8008010:	080097ad 	.word	0x080097ad

08008014 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b086      	sub	sp, #24
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d109      	bne.n	8008038 <netconn_accept+0x24>
 8008024:	4b3d      	ldr	r3, [pc, #244]	; (800811c <netconn_accept+0x108>)
 8008026:	f240 12e1 	movw	r2, #481	; 0x1e1
 800802a:	493d      	ldr	r1, [pc, #244]	; (8008120 <netconn_accept+0x10c>)
 800802c:	483d      	ldr	r0, [pc, #244]	; (8008124 <netconn_accept+0x110>)
 800802e:	f00d fae5 	bl	80155fc <iprintf>
 8008032:	f06f 030f 	mvn.w	r3, #15
 8008036:	e06c      	b.n	8008112 <netconn_accept+0xfe>
  *new_conn = NULL;
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	2200      	movs	r2, #0
 800803c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d109      	bne.n	8008058 <netconn_accept+0x44>
 8008044:	4b35      	ldr	r3, [pc, #212]	; (800811c <netconn_accept+0x108>)
 8008046:	f240 12e3 	movw	r2, #483	; 0x1e3
 800804a:	4937      	ldr	r1, [pc, #220]	; (8008128 <netconn_accept+0x114>)
 800804c:	4835      	ldr	r0, [pc, #212]	; (8008124 <netconn_accept+0x110>)
 800804e:	f00d fad5 	bl	80155fc <iprintf>
 8008052:	f06f 030f 	mvn.w	r3, #15
 8008056:	e05c      	b.n	8008112 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 fb6c 	bl	8008736 <netconn_err>
 800805e:	4603      	mov	r3, r0
 8008060:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8008062:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d002      	beq.n	8008070 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800806a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800806e:	e050      	b.n	8008112 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	3314      	adds	r3, #20
 8008074:	4618      	mov	r0, r3
 8008076:	f00c fffd 	bl	8015074 <sys_mbox_valid>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d005      	beq.n	800808c <netconn_accept+0x78>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	7f1b      	ldrb	r3, [r3, #28]
 8008084:	f003 0301 	and.w	r3, r3, #1
 8008088:	2b00      	cmp	r3, #0
 800808a:	d002      	beq.n	8008092 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800808c:	f06f 030e 	mvn.w	r3, #14
 8008090:	e03f      	b.n	8008112 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	7f1b      	ldrb	r3, [r3, #28]
 8008096:	f003 0302 	and.w	r3, r3, #2
 800809a:	2b00      	cmp	r3, #0
 800809c:	d00e      	beq.n	80080bc <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	3314      	adds	r3, #20
 80080a2:	f107 020c 	add.w	r2, r7, #12
 80080a6:	4611      	mov	r1, r2
 80080a8:	4618      	mov	r0, r3
 80080aa:	f00c ffcc 	bl	8015046 <sys_arch_mbox_tryfetch>
 80080ae:	4603      	mov	r3, r0
 80080b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080b4:	d10a      	bne.n	80080cc <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 80080b6:	f06f 0306 	mvn.w	r3, #6
 80080ba:	e02a      	b.n	8008112 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	3314      	adds	r3, #20
 80080c0:	f107 010c 	add.w	r1, r7, #12
 80080c4:	2200      	movs	r2, #0
 80080c6:	4618      	mov	r0, r3
 80080c8:	f00c ff8c 	bl	8014fe4 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d005      	beq.n	80080e0 <netconn_accept+0xcc>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d8:	2200      	movs	r2, #0
 80080da:	2101      	movs	r1, #1
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f107 0213 	add.w	r2, r7, #19
 80080e6:	4611      	mov	r1, r2
 80080e8:	4618      	mov	r0, r3
 80080ea:	f000 fb75 	bl	80087d8 <lwip_netconn_is_err_msg>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d002      	beq.n	80080fa <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 80080f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80080f8:	e00b      	b.n	8008112 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d102      	bne.n	8008106 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8008100:	f06f 030e 	mvn.w	r3, #14
 8008104:	e005      	b.n	8008112 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	697a      	ldr	r2, [r7, #20]
 800810e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008110:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008112:	4618      	mov	r0, r3
 8008114:	3718      	adds	r7, #24
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	0801657c 	.word	0x0801657c
 8008120:	08016754 	.word	0x08016754
 8008124:	080165d4 	.word	0x080165d4
 8008128:	08016774 	.word	0x08016774

0800812c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b088      	sub	sp, #32
 8008130:	af00      	add	r7, sp, #0
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	4613      	mov	r3, r2
 8008138:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800813a:	2300      	movs	r3, #0
 800813c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d109      	bne.n	8008158 <netconn_recv_data+0x2c>
 8008144:	4b58      	ldr	r3, [pc, #352]	; (80082a8 <netconn_recv_data+0x17c>)
 8008146:	f44f 7212 	mov.w	r2, #584	; 0x248
 800814a:	4958      	ldr	r1, [pc, #352]	; (80082ac <netconn_recv_data+0x180>)
 800814c:	4858      	ldr	r0, [pc, #352]	; (80082b0 <netconn_recv_data+0x184>)
 800814e:	f00d fa55 	bl	80155fc <iprintf>
 8008152:	f06f 030f 	mvn.w	r3, #15
 8008156:	e0a2      	b.n	800829e <netconn_recv_data+0x172>
  *new_buf = NULL;
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	2200      	movs	r2, #0
 800815c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d109      	bne.n	8008178 <netconn_recv_data+0x4c>
 8008164:	4b50      	ldr	r3, [pc, #320]	; (80082a8 <netconn_recv_data+0x17c>)
 8008166:	f240 224a 	movw	r2, #586	; 0x24a
 800816a:	4952      	ldr	r1, [pc, #328]	; (80082b4 <netconn_recv_data+0x188>)
 800816c:	4850      	ldr	r0, [pc, #320]	; (80082b0 <netconn_recv_data+0x184>)
 800816e:	f00d fa45 	bl	80155fc <iprintf>
 8008172:	f06f 030f 	mvn.w	r3, #15
 8008176:	e092      	b.n	800829e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	3310      	adds	r3, #16
 800817c:	4618      	mov	r0, r3
 800817e:	f00c ff79 	bl	8015074 <sys_mbox_valid>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	d10e      	bne.n	80081a6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8008188:	68f8      	ldr	r0, [r7, #12]
 800818a:	f000 fad4 	bl	8008736 <netconn_err>
 800818e:	4603      	mov	r3, r0
 8008190:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8008192:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d002      	beq.n	80081a0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800819a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800819e:	e07e      	b.n	800829e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 80081a0:	f06f 030a 	mvn.w	r3, #10
 80081a4:	e07b      	b.n	800829e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	7f1b      	ldrb	r3, [r3, #28]
 80081aa:	f003 0302 	and.w	r3, r3, #2
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d10f      	bne.n	80081d2 <netconn_recv_data+0xa6>
 80081b2:	79fb      	ldrb	r3, [r7, #7]
 80081b4:	f003 0304 	and.w	r3, r3, #4
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d10a      	bne.n	80081d2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	7f1b      	ldrb	r3, [r3, #28]
 80081c0:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d104      	bne.n	80081d2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d023      	beq.n	800821a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	3310      	adds	r3, #16
 80081d6:	f107 0218 	add.w	r2, r7, #24
 80081da:	4611      	mov	r1, r2
 80081dc:	4618      	mov	r0, r3
 80081de:	f00c ff32 	bl	8015046 <sys_arch_mbox_tryfetch>
 80081e2:	4603      	mov	r3, r0
 80081e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081e8:	d11f      	bne.n	800822a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	f000 faa3 	bl	8008736 <netconn_err>
 80081f0:	4603      	mov	r3, r0
 80081f2:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 80081f4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d002      	beq.n	8008202 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 80081fc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008200:	e04d      	b.n	800829e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	7f1b      	ldrb	r3, [r3, #28]
 8008206:	f003 0301 	and.w	r3, r3, #1
 800820a:	2b00      	cmp	r3, #0
 800820c:	d002      	beq.n	8008214 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800820e:	f06f 030a 	mvn.w	r3, #10
 8008212:	e044      	b.n	800829e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8008214:	f06f 0306 	mvn.w	r3, #6
 8008218:	e041      	b.n	800829e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	3310      	adds	r3, #16
 800821e:	f107 0118 	add.w	r1, r7, #24
 8008222:	2200      	movs	r2, #0
 8008224:	4618      	mov	r0, r3
 8008226:	f00c fedd 	bl	8014fe4 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008232:	2b10      	cmp	r3, #16
 8008234:	d117      	bne.n	8008266 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8008236:	69bb      	ldr	r3, [r7, #24]
 8008238:	f107 0217 	add.w	r2, r7, #23
 800823c:	4611      	mov	r1, r2
 800823e:	4618      	mov	r0, r3
 8008240:	f000 faca 	bl	80087d8 <lwip_netconn_is_err_msg>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d009      	beq.n	800825e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800824a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800824e:	f113 0f0f 	cmn.w	r3, #15
 8008252:	d101      	bne.n	8008258 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8008254:	2300      	movs	r3, #0
 8008256:	e022      	b.n	800829e <netconn_recv_data+0x172>
      }
      return err;
 8008258:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800825c:	e01f      	b.n	800829e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800825e:	69bb      	ldr	r3, [r7, #24]
 8008260:	891b      	ldrh	r3, [r3, #8]
 8008262:	83fb      	strh	r3, [r7, #30]
 8008264:	e00d      	b.n	8008282 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d106      	bne.n	800827a <netconn_recv_data+0x14e>
 800826c:	4b0e      	ldr	r3, [pc, #56]	; (80082a8 <netconn_recv_data+0x17c>)
 800826e:	f240 2291 	movw	r2, #657	; 0x291
 8008272:	4911      	ldr	r1, [pc, #68]	; (80082b8 <netconn_recv_data+0x18c>)
 8008274:	480e      	ldr	r0, [pc, #56]	; (80082b0 <netconn_recv_data+0x184>)
 8008276:	f00d f9c1 	bl	80155fc <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	891b      	ldrh	r3, [r3, #8]
 8008280:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008286:	2b00      	cmp	r3, #0
 8008288:	d005      	beq.n	8008296 <netconn_recv_data+0x16a>
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828e:	8bfa      	ldrh	r2, [r7, #30]
 8008290:	2101      	movs	r1, #1
 8008292:	68f8      	ldr	r0, [r7, #12]
 8008294:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8008296:	69ba      	ldr	r2, [r7, #24]
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800829c:	2300      	movs	r3, #0
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3720      	adds	r7, #32
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	0801657c 	.word	0x0801657c
 80082ac:	08016794 	.word	0x08016794
 80082b0:	080165d4 	.word	0x080165d4
 80082b4:	080167b4 	.word	0x080167b4
 80082b8:	080167d0 	.word	0x080167d0

080082bc <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d005      	beq.n	80082da <netconn_tcp_recvd_msg+0x1e>
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80082d6:	2b10      	cmp	r3, #16
 80082d8:	d009      	beq.n	80082ee <netconn_tcp_recvd_msg+0x32>
 80082da:	4b0c      	ldr	r3, [pc, #48]	; (800830c <netconn_tcp_recvd_msg+0x50>)
 80082dc:	f240 22a7 	movw	r2, #679	; 0x2a7
 80082e0:	490b      	ldr	r1, [pc, #44]	; (8008310 <netconn_tcp_recvd_msg+0x54>)
 80082e2:	480c      	ldr	r0, [pc, #48]	; (8008314 <netconn_tcp_recvd_msg+0x58>)
 80082e4:	f00d f98a 	bl	80155fc <iprintf>
 80082e8:	f06f 030f 	mvn.w	r3, #15
 80082ec:	e00a      	b.n	8008304 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	68ba      	ldr	r2, [r7, #8]
 80082f8:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80082fa:	6879      	ldr	r1, [r7, #4]
 80082fc:	4806      	ldr	r0, [pc, #24]	; (8008318 <netconn_tcp_recvd_msg+0x5c>)
 80082fe:	f7ff fd4d 	bl	8007d9c <netconn_apimsg>
 8008302:	4603      	mov	r3, r0
}
 8008304:	4618      	mov	r0, r3
 8008306:	3710      	adds	r7, #16
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}
 800830c:	0801657c 	.word	0x0801657c
 8008310:	080167dc 	.word	0x080167dc
 8008314:	080165d4 	.word	0x080165d4
 8008318:	080098dd 	.word	0x080098dd

0800831c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b090      	sub	sp, #64	; 0x40
 8008320:	af00      	add	r7, sp, #0
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	60b9      	str	r1, [r7, #8]
 8008326:	4613      	mov	r3, r2
 8008328:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	3310      	adds	r3, #16
 800832e:	4618      	mov	r0, r3
 8008330:	f00c fea0 	bl	8015074 <sys_mbox_valid>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d102      	bne.n	8008340 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800833a:	f06f 030a 	mvn.w	r3, #10
 800833e:	e06d      	b.n	800841c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	7f1b      	ldrb	r3, [r3, #28]
 8008344:	b25b      	sxtb	r3, r3
 8008346:	2b00      	cmp	r3, #0
 8008348:	da07      	bge.n	800835a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	7f1b      	ldrb	r3, [r3, #28]
 800834e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008352:	b2da      	uxtb	r2, r3
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8008358:	e039      	b.n	80083ce <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800835a:	79fb      	ldrb	r3, [r7, #7]
 800835c:	461a      	mov	r2, r3
 800835e:	68b9      	ldr	r1, [r7, #8]
 8008360:	68f8      	ldr	r0, [r7, #12]
 8008362:	f7ff fee3 	bl	800812c <netconn_recv_data>
 8008366:	4603      	mov	r3, r0
 8008368:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800836c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008370:	2b00      	cmp	r3, #0
 8008372:	d002      	beq.n	800837a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8008374:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008378:	e050      	b.n	800841c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8008380:	79fb      	ldrb	r3, [r7, #7]
 8008382:	f003 0308 	and.w	r3, r3, #8
 8008386:	2b00      	cmp	r3, #0
 8008388:	d10e      	bne.n	80083a8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800838a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800838c:	2b00      	cmp	r3, #0
 800838e:	d002      	beq.n	8008396 <netconn_recv_data_tcp+0x7a>
 8008390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008392:	891b      	ldrh	r3, [r3, #8]
 8008394:	e000      	b.n	8008398 <netconn_recv_data_tcp+0x7c>
 8008396:	2301      	movs	r3, #1
 8008398:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800839a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800839c:	f107 0214 	add.w	r2, r7, #20
 80083a0:	4619      	mov	r1, r3
 80083a2:	68f8      	ldr	r0, [r7, #12]
 80083a4:	f7ff ff8a 	bl	80082bc <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 80083a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d134      	bne.n	8008418 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 80083ae:	79fb      	ldrb	r3, [r7, #7]
 80083b0:	f003 0310 	and.w	r3, r3, #16
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d009      	beq.n	80083cc <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	7f1b      	ldrb	r3, [r3, #28]
 80083bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80083c0:	b2da      	uxtb	r2, r3
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 80083c6:	f06f 0306 	mvn.w	r3, #6
 80083ca:	e027      	b.n	800841c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 80083cc:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d005      	beq.n	80083e2 <netconn_recv_data_tcp+0xc6>
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083da:	2200      	movs	r2, #0
 80083dc:	2101      	movs	r1, #1
 80083de:	68f8      	ldr	r0, [r7, #12]
 80083e0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d10f      	bne.n	800840a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f000 f9a3 	bl	8008736 <netconn_err>
 80083f0:	4603      	mov	r3, r0
 80083f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 80083f6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d002      	beq.n	8008404 <netconn_recv_data_tcp+0xe8>
          return err;
 80083fe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008402:	e00b      	b.n	800841c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8008404:	f06f 030d 	mvn.w	r3, #13
 8008408:	e008      	b.n	800841c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800840a:	2101      	movs	r1, #1
 800840c:	68f8      	ldr	r0, [r7, #12]
 800840e:	f000 f955 	bl	80086bc <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8008412:	f06f 030e 	mvn.w	r3, #14
 8008416:	e001      	b.n	800841c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8008418:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800841c:	4618      	mov	r0, r3
 800841e:	3740      	adds	r7, #64	; 0x40
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b086      	sub	sp, #24
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800842e:	2300      	movs	r3, #0
 8008430:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d109      	bne.n	800844c <netconn_recv+0x28>
 8008438:	4b32      	ldr	r3, [pc, #200]	; (8008504 <netconn_recv+0xe0>)
 800843a:	f240 3263 	movw	r2, #867	; 0x363
 800843e:	4932      	ldr	r1, [pc, #200]	; (8008508 <netconn_recv+0xe4>)
 8008440:	4832      	ldr	r0, [pc, #200]	; (800850c <netconn_recv+0xe8>)
 8008442:	f00d f8db 	bl	80155fc <iprintf>
 8008446:	f06f 030f 	mvn.w	r3, #15
 800844a:	e056      	b.n	80084fa <netconn_recv+0xd6>
  *new_buf = NULL;
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	2200      	movs	r2, #0
 8008450:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d109      	bne.n	800846c <netconn_recv+0x48>
 8008458:	4b2a      	ldr	r3, [pc, #168]	; (8008504 <netconn_recv+0xe0>)
 800845a:	f240 3265 	movw	r2, #869	; 0x365
 800845e:	492c      	ldr	r1, [pc, #176]	; (8008510 <netconn_recv+0xec>)
 8008460:	482a      	ldr	r0, [pc, #168]	; (800850c <netconn_recv+0xe8>)
 8008462:	f00d f8cb 	bl	80155fc <iprintf>
 8008466:	f06f 030f 	mvn.w	r3, #15
 800846a:	e046      	b.n	80084fa <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008474:	2b10      	cmp	r3, #16
 8008476:	d13a      	bne.n	80084ee <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8008478:	2300      	movs	r3, #0
 800847a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800847c:	2006      	movs	r0, #6
 800847e:	f002 fc1f 	bl	800acc0 <memp_malloc>
 8008482:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d102      	bne.n	8008490 <netconn_recv+0x6c>
      return ERR_MEM;
 800848a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800848e:	e034      	b.n	80084fa <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8008490:	f107 030c 	add.w	r3, r7, #12
 8008494:	2200      	movs	r2, #0
 8008496:	4619      	mov	r1, r3
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f7ff ff3f 	bl	800831c <netconn_recv_data_tcp>
 800849e:	4603      	mov	r3, r0
 80084a0:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80084a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d006      	beq.n	80084b8 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 80084aa:	6979      	ldr	r1, [r7, #20]
 80084ac:	2006      	movs	r0, #6
 80084ae:	f002 fc59 	bl	800ad64 <memp_free>
      return err;
 80084b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80084b6:	e020      	b.n	80084fa <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d106      	bne.n	80084cc <netconn_recv+0xa8>
 80084be:	4b11      	ldr	r3, [pc, #68]	; (8008504 <netconn_recv+0xe0>)
 80084c0:	f240 3279 	movw	r2, #889	; 0x379
 80084c4:	4913      	ldr	r1, [pc, #76]	; (8008514 <netconn_recv+0xf0>)
 80084c6:	4811      	ldr	r0, [pc, #68]	; (800850c <netconn_recv+0xe8>)
 80084c8:	f00d f898 	bl	80155fc <iprintf>

    buf->p = p;
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80084d2:	68fa      	ldr	r2, [r7, #12]
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	2200      	movs	r2, #0
 80084dc:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	2200      	movs	r2, #0
 80084e2:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	697a      	ldr	r2, [r7, #20]
 80084e8:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 80084ea:	2300      	movs	r3, #0
 80084ec:	e005      	b.n	80084fa <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 80084ee:	2200      	movs	r2, #0
 80084f0:	6839      	ldr	r1, [r7, #0]
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f7ff fe1a 	bl	800812c <netconn_recv_data>
 80084f8:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3718      	adds	r7, #24
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	0801657c 	.word	0x0801657c
 8008508:	08016794 	.word	0x08016794
 800850c:	080165d4 	.word	0x080165d4
 8008510:	080167b4 	.word	0x080167b4
 8008514:	0801682c 	.word	0x0801682c

08008518 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b088      	sub	sp, #32
 800851c:	af02      	add	r7, sp, #8
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	60b9      	str	r1, [r7, #8]
 8008522:	607a      	str	r2, [r7, #4]
 8008524:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800852e:	78fa      	ldrb	r2, [r7, #3]
 8008530:	f107 0110 	add.w	r1, r7, #16
 8008534:	6a3b      	ldr	r3, [r7, #32]
 8008536:	9300      	str	r3, [sp, #0]
 8008538:	4613      	mov	r3, r2
 800853a:	2201      	movs	r2, #1
 800853c:	68f8      	ldr	r0, [r7, #12]
 800853e:	f000 f805 	bl	800854c <netconn_write_vectors_partly>
 8008542:	4603      	mov	r3, r0
}
 8008544:	4618      	mov	r0, r3
 8008546:	3718      	adds	r7, #24
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b092      	sub	sp, #72	; 0x48
 8008550:	af00      	add	r7, sp, #0
 8008552:	60f8      	str	r0, [r7, #12]
 8008554:	60b9      	str	r1, [r7, #8]
 8008556:	4611      	mov	r1, r2
 8008558:	461a      	mov	r2, r3
 800855a:	460b      	mov	r3, r1
 800855c:	80fb      	strh	r3, [r7, #6]
 800855e:	4613      	mov	r3, r2
 8008560:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d109      	bne.n	800857c <netconn_write_vectors_partly+0x30>
 8008568:	4b4e      	ldr	r3, [pc, #312]	; (80086a4 <netconn_write_vectors_partly+0x158>)
 800856a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800856e:	494e      	ldr	r1, [pc, #312]	; (80086a8 <netconn_write_vectors_partly+0x15c>)
 8008570:	484e      	ldr	r0, [pc, #312]	; (80086ac <netconn_write_vectors_partly+0x160>)
 8008572:	f00d f843 	bl	80155fc <iprintf>
 8008576:	f06f 030f 	mvn.w	r3, #15
 800857a:	e08e      	b.n	800869a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008584:	2b10      	cmp	r3, #16
 8008586:	d009      	beq.n	800859c <netconn_write_vectors_partly+0x50>
 8008588:	4b46      	ldr	r3, [pc, #280]	; (80086a4 <netconn_write_vectors_partly+0x158>)
 800858a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800858e:	4948      	ldr	r1, [pc, #288]	; (80086b0 <netconn_write_vectors_partly+0x164>)
 8008590:	4846      	ldr	r0, [pc, #280]	; (80086ac <netconn_write_vectors_partly+0x160>)
 8008592:	f00d f833 	bl	80155fc <iprintf>
 8008596:	f06f 0305 	mvn.w	r3, #5
 800859a:	e07e      	b.n	800869a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	7f1b      	ldrb	r3, [r3, #28]
 80085a0:	f003 0302 	and.w	r3, r3, #2
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d104      	bne.n	80085b2 <netconn_write_vectors_partly+0x66>
 80085a8:	797b      	ldrb	r3, [r7, #5]
 80085aa:	f003 0304 	and.w	r3, r3, #4
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d001      	beq.n	80085b6 <netconn_write_vectors_partly+0x6a>
 80085b2:	2301      	movs	r3, #1
 80085b4:	e000      	b.n	80085b8 <netconn_write_vectors_partly+0x6c>
 80085b6:	2300      	movs	r3, #0
 80085b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 80085bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d005      	beq.n	80085d0 <netconn_write_vectors_partly+0x84>
 80085c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d102      	bne.n	80085d0 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 80085ca:	f06f 0305 	mvn.w	r3, #5
 80085ce:	e064      	b.n	800869a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 80085d0:	2300      	movs	r3, #0
 80085d2:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 80085d4:	2300      	movs	r3, #0
 80085d6:	643b      	str	r3, [r7, #64]	; 0x40
 80085d8:	e015      	b.n	8008606 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 80085da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085dc:	00db      	lsls	r3, r3, #3
 80085de:	68ba      	ldr	r2, [r7, #8]
 80085e0:	4413      	add	r3, r2
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085e6:	4413      	add	r3, r2
 80085e8:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 80085ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085ec:	00db      	lsls	r3, r3, #3
 80085ee:	68ba      	ldr	r2, [r7, #8]
 80085f0:	4413      	add	r3, r2
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d202      	bcs.n	8008600 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 80085fa:	f06f 0305 	mvn.w	r3, #5
 80085fe:	e04c      	b.n	800869a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8008600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008602:	3301      	adds	r3, #1
 8008604:	643b      	str	r3, [r7, #64]	; 0x40
 8008606:	88fb      	ldrh	r3, [r7, #6]
 8008608:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800860a:	429a      	cmp	r2, r3
 800860c:	dbe5      	blt.n	80085da <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800860e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008610:	2b00      	cmp	r3, #0
 8008612:	d101      	bne.n	8008618 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8008614:	2300      	movs	r3, #0
 8008616:	e040      	b.n	800869a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8008618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800861a:	2b00      	cmp	r3, #0
 800861c:	da0a      	bge.n	8008634 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800861e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008620:	2b00      	cmp	r3, #0
 8008622:	d102      	bne.n	800862a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8008624:	f06f 0305 	mvn.w	r3, #5
 8008628:	e037      	b.n	800869a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800862a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800862e:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8008630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008632:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800863c:	88fb      	ldrh	r3, [r7, #6]
 800863e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8008640:	2300      	movs	r3, #0
 8008642:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8008644:	797b      	ldrb	r3, [r7, #5]
 8008646:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800864a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800864c:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800864e:	2300      	movs	r3, #0
 8008650:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8008652:	f107 0314 	add.w	r3, r7, #20
 8008656:	4619      	mov	r1, r3
 8008658:	4816      	ldr	r0, [pc, #88]	; (80086b4 <netconn_write_vectors_partly+0x168>)
 800865a:	f7ff fb9f 	bl	8007d9c <netconn_apimsg>
 800865e:	4603      	mov	r3, r0
 8008660:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8008664:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008668:	2b00      	cmp	r3, #0
 800866a:	d114      	bne.n	8008696 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800866c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800866e:	2b00      	cmp	r3, #0
 8008670:	d002      	beq.n	8008678 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8008672:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008676:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8008678:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800867c:	2b00      	cmp	r3, #0
 800867e:	d10a      	bne.n	8008696 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8008680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008682:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008684:	429a      	cmp	r2, r3
 8008686:	d006      	beq.n	8008696 <netconn_write_vectors_partly+0x14a>
 8008688:	4b06      	ldr	r3, [pc, #24]	; (80086a4 <netconn_write_vectors_partly+0x158>)
 800868a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800868e:	490a      	ldr	r1, [pc, #40]	; (80086b8 <netconn_write_vectors_partly+0x16c>)
 8008690:	4806      	ldr	r0, [pc, #24]	; (80086ac <netconn_write_vectors_partly+0x160>)
 8008692:	f00c ffb3 	bl	80155fc <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8008696:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800869a:	4618      	mov	r0, r3
 800869c:	3748      	adds	r7, #72	; 0x48
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	0801657c 	.word	0x0801657c
 80086a8:	08016854 	.word	0x08016854
 80086ac:	080165d4 	.word	0x080165d4
 80086b0:	08016870 	.word	0x08016870
 80086b4:	08009ce1 	.word	0x08009ce1
 80086b8:	08016894 	.word	0x08016894

080086bc <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b08c      	sub	sp, #48	; 0x30
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	460b      	mov	r3, r1
 80086c6:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d109      	bne.n	80086e2 <netconn_close_shutdown+0x26>
 80086ce:	4b0f      	ldr	r3, [pc, #60]	; (800870c <netconn_close_shutdown+0x50>)
 80086d0:	f240 4247 	movw	r2, #1095	; 0x447
 80086d4:	490e      	ldr	r1, [pc, #56]	; (8008710 <netconn_close_shutdown+0x54>)
 80086d6:	480f      	ldr	r0, [pc, #60]	; (8008714 <netconn_close_shutdown+0x58>)
 80086d8:	f00c ff90 	bl	80155fc <iprintf>
 80086dc:	f06f 030f 	mvn.w	r3, #15
 80086e0:	e010      	b.n	8008704 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80086e6:	78fb      	ldrb	r3, [r7, #3]
 80086e8:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80086ea:	2329      	movs	r3, #41	; 0x29
 80086ec:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 80086ee:	f107 030c 	add.w	r3, r7, #12
 80086f2:	4619      	mov	r1, r3
 80086f4:	4808      	ldr	r0, [pc, #32]	; (8008718 <netconn_close_shutdown+0x5c>)
 80086f6:	f7ff fb51 	bl	8007d9c <netconn_apimsg>
 80086fa:	4603      	mov	r3, r0
 80086fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008700:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008704:	4618      	mov	r0, r3
 8008706:	3730      	adds	r7, #48	; 0x30
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}
 800870c:	0801657c 	.word	0x0801657c
 8008710:	080168b8 	.word	0x080168b8
 8008714:	080165d4 	.word	0x080165d4
 8008718:	08009df9 	.word	0x08009df9

0800871c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8008724:	2103      	movs	r1, #3
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f7ff ffc8 	bl	80086bc <netconn_close_shutdown>
 800872c:	4603      	mov	r3, r0
}
 800872e:	4618      	mov	r0, r3
 8008730:	3708      	adds	r7, #8
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8008736:	b580      	push	{r7, lr}
 8008738:	b084      	sub	sp, #16
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d101      	bne.n	8008748 <netconn_err+0x12>
    return ERR_OK;
 8008744:	2300      	movs	r3, #0
 8008746:	e00d      	b.n	8008764 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8008748:	f00c fd9e 	bl	8015288 <sys_arch_protect>
 800874c:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	7a1b      	ldrb	r3, [r3, #8]
 8008752:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800875a:	68f8      	ldr	r0, [r7, #12]
 800875c:	f00c fda2 	bl	80152a4 <sys_arch_unprotect>
  return err;
 8008760:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008764:	4618      	mov	r0, r3
 8008766:	3710      	adds	r7, #16
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	4603      	mov	r3, r0
 8008774:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8008776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800877a:	f113 0f0d 	cmn.w	r3, #13
 800877e:	d009      	beq.n	8008794 <lwip_netconn_err_to_msg+0x28>
 8008780:	f113 0f0d 	cmn.w	r3, #13
 8008784:	dc0c      	bgt.n	80087a0 <lwip_netconn_err_to_msg+0x34>
 8008786:	f113 0f0f 	cmn.w	r3, #15
 800878a:	d007      	beq.n	800879c <lwip_netconn_err_to_msg+0x30>
 800878c:	f113 0f0e 	cmn.w	r3, #14
 8008790:	d002      	beq.n	8008798 <lwip_netconn_err_to_msg+0x2c>
 8008792:	e005      	b.n	80087a0 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8008794:	4b0a      	ldr	r3, [pc, #40]	; (80087c0 <lwip_netconn_err_to_msg+0x54>)
 8008796:	e00e      	b.n	80087b6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8008798:	4b0a      	ldr	r3, [pc, #40]	; (80087c4 <lwip_netconn_err_to_msg+0x58>)
 800879a:	e00c      	b.n	80087b6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800879c:	4b0a      	ldr	r3, [pc, #40]	; (80087c8 <lwip_netconn_err_to_msg+0x5c>)
 800879e:	e00a      	b.n	80087b6 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 80087a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d005      	beq.n	80087b4 <lwip_netconn_err_to_msg+0x48>
 80087a8:	4b08      	ldr	r3, [pc, #32]	; (80087cc <lwip_netconn_err_to_msg+0x60>)
 80087aa:	227d      	movs	r2, #125	; 0x7d
 80087ac:	4908      	ldr	r1, [pc, #32]	; (80087d0 <lwip_netconn_err_to_msg+0x64>)
 80087ae:	4809      	ldr	r0, [pc, #36]	; (80087d4 <lwip_netconn_err_to_msg+0x68>)
 80087b0:	f00c ff24 	bl	80155fc <iprintf>
      return NULL;
 80087b4:	2300      	movs	r3, #0
  }
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3708      	adds	r7, #8
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	08019e90 	.word	0x08019e90
 80087c4:	08019e91 	.word	0x08019e91
 80087c8:	08019e92 	.word	0x08019e92
 80087cc:	080168d4 	.word	0x080168d4
 80087d0:	08016908 	.word	0x08016908
 80087d4:	08016918 	.word	0x08016918

080087d8 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d105      	bne.n	80087f4 <lwip_netconn_is_err_msg+0x1c>
 80087e8:	4b12      	ldr	r3, [pc, #72]	; (8008834 <lwip_netconn_is_err_msg+0x5c>)
 80087ea:	2285      	movs	r2, #133	; 0x85
 80087ec:	4912      	ldr	r1, [pc, #72]	; (8008838 <lwip_netconn_is_err_msg+0x60>)
 80087ee:	4813      	ldr	r0, [pc, #76]	; (800883c <lwip_netconn_is_err_msg+0x64>)
 80087f0:	f00c ff04 	bl	80155fc <iprintf>

  if (msg == &netconn_aborted) {
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	4a12      	ldr	r2, [pc, #72]	; (8008840 <lwip_netconn_is_err_msg+0x68>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d104      	bne.n	8008806 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	22f3      	movs	r2, #243	; 0xf3
 8008800:	701a      	strb	r2, [r3, #0]
    return 1;
 8008802:	2301      	movs	r3, #1
 8008804:	e012      	b.n	800882c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	4a0e      	ldr	r2, [pc, #56]	; (8008844 <lwip_netconn_is_err_msg+0x6c>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d104      	bne.n	8008818 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	22f2      	movs	r2, #242	; 0xf2
 8008812:	701a      	strb	r2, [r3, #0]
    return 1;
 8008814:	2301      	movs	r3, #1
 8008816:	e009      	b.n	800882c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	4a0b      	ldr	r2, [pc, #44]	; (8008848 <lwip_netconn_is_err_msg+0x70>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d104      	bne.n	800882a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	22f1      	movs	r2, #241	; 0xf1
 8008824:	701a      	strb	r2, [r3, #0]
    return 1;
 8008826:	2301      	movs	r3, #1
 8008828:	e000      	b.n	800882c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800882a:	2300      	movs	r3, #0
}
 800882c:	4618      	mov	r0, r3
 800882e:	3708      	adds	r7, #8
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}
 8008834:	080168d4 	.word	0x080168d4
 8008838:	08016940 	.word	0x08016940
 800883c:	08016918 	.word	0x08016918
 8008840:	08019e90 	.word	0x08019e90
 8008844:	08019e91 	.word	0x08019e91
 8008848:	08019e92 	.word	0x08019e92

0800884c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b088      	sub	sp, #32
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	607a      	str	r2, [r7, #4]
 8008858:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d105      	bne.n	800886c <recv_udp+0x20>
 8008860:	4b34      	ldr	r3, [pc, #208]	; (8008934 <recv_udp+0xe8>)
 8008862:	22e5      	movs	r2, #229	; 0xe5
 8008864:	4934      	ldr	r1, [pc, #208]	; (8008938 <recv_udp+0xec>)
 8008866:	4835      	ldr	r0, [pc, #212]	; (800893c <recv_udp+0xf0>)
 8008868:	f00c fec8 	bl	80155fc <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d105      	bne.n	800887e <recv_udp+0x32>
 8008872:	4b30      	ldr	r3, [pc, #192]	; (8008934 <recv_udp+0xe8>)
 8008874:	22e6      	movs	r2, #230	; 0xe6
 8008876:	4932      	ldr	r1, [pc, #200]	; (8008940 <recv_udp+0xf4>)
 8008878:	4830      	ldr	r0, [pc, #192]	; (800893c <recv_udp+0xf0>)
 800887a:	f00c febf 	bl	80155fc <iprintf>
  conn = (struct netconn *)arg;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d103      	bne.n	8008890 <recv_udp+0x44>
    pbuf_free(p);
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f003 f90f 	bl	800baac <pbuf_free>
    return;
 800888e:	e04d      	b.n	800892c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	68ba      	ldr	r2, [r7, #8]
 8008896:	429a      	cmp	r2, r3
 8008898:	d005      	beq.n	80088a6 <recv_udp+0x5a>
 800889a:	4b26      	ldr	r3, [pc, #152]	; (8008934 <recv_udp+0xe8>)
 800889c:	22ee      	movs	r2, #238	; 0xee
 800889e:	4929      	ldr	r1, [pc, #164]	; (8008944 <recv_udp+0xf8>)
 80088a0:	4826      	ldr	r0, [pc, #152]	; (800893c <recv_udp+0xf0>)
 80088a2:	f00c feab 	bl	80155fc <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80088a6:	69fb      	ldr	r3, [r7, #28]
 80088a8:	3310      	adds	r3, #16
 80088aa:	4618      	mov	r0, r3
 80088ac:	f00c fbe2 	bl	8015074 <sys_mbox_valid>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d103      	bne.n	80088be <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f003 f8f8 	bl	800baac <pbuf_free>
    return;
 80088bc:	e036      	b.n	800892c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80088be:	2006      	movs	r0, #6
 80088c0:	f002 f9fe 	bl	800acc0 <memp_malloc>
 80088c4:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 80088c6:	69bb      	ldr	r3, [r7, #24]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d103      	bne.n	80088d4 <recv_udp+0x88>
    pbuf_free(p);
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f003 f8ed 	bl	800baac <pbuf_free>
    return;
 80088d2:	e02b      	b.n	800892c <recv_udp+0xe0>
  } else {
    buf->p = p;
 80088d4:	69bb      	ldr	r3, [r7, #24]
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80088da:	69bb      	ldr	r3, [r7, #24]
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d002      	beq.n	80088ec <recv_udp+0xa0>
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	e000      	b.n	80088ee <recv_udp+0xa2>
 80088ec:	2300      	movs	r3, #0
 80088ee:	69ba      	ldr	r2, [r7, #24]
 80088f0:	6093      	str	r3, [r2, #8]
    buf->port = port;
 80088f2:	69bb      	ldr	r3, [r7, #24]
 80088f4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80088f6:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	891b      	ldrh	r3, [r3, #8]
 80088fc:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80088fe:	69fb      	ldr	r3, [r7, #28]
 8008900:	3310      	adds	r3, #16
 8008902:	69b9      	ldr	r1, [r7, #24]
 8008904:	4618      	mov	r0, r3
 8008906:	f00c fb53 	bl	8014fb0 <sys_mbox_trypost>
 800890a:	4603      	mov	r3, r0
 800890c:	2b00      	cmp	r3, #0
 800890e:	d003      	beq.n	8008918 <recv_udp+0xcc>
    netbuf_delete(buf);
 8008910:	69b8      	ldr	r0, [r7, #24]
 8008912:	f001 fafd 	bl	8009f10 <netbuf_delete>
    return;
 8008916:	e009      	b.n	800892c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800891c:	2b00      	cmp	r3, #0
 800891e:	d005      	beq.n	800892c <recv_udp+0xe0>
 8008920:	69fb      	ldr	r3, [r7, #28]
 8008922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008924:	8afa      	ldrh	r2, [r7, #22]
 8008926:	2100      	movs	r1, #0
 8008928:	69f8      	ldr	r0, [r7, #28]
 800892a:	4798      	blx	r3
  }
}
 800892c:	3720      	adds	r7, #32
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	080168d4 	.word	0x080168d4
 8008938:	0801694c 	.word	0x0801694c
 800893c:	08016918 	.word	0x08016918
 8008940:	08016970 	.word	0x08016970
 8008944:	08016990 	.word	0x08016990

08008948 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b088      	sub	sp, #32
 800894c:	af00      	add	r7, sp, #0
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	60b9      	str	r1, [r7, #8]
 8008952:	607a      	str	r2, [r7, #4]
 8008954:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d106      	bne.n	800896a <recv_tcp+0x22>
 800895c:	4b36      	ldr	r3, [pc, #216]	; (8008a38 <recv_tcp+0xf0>)
 800895e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008962:	4936      	ldr	r1, [pc, #216]	; (8008a3c <recv_tcp+0xf4>)
 8008964:	4836      	ldr	r0, [pc, #216]	; (8008a40 <recv_tcp+0xf8>)
 8008966:	f00c fe49 	bl	80155fc <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d106      	bne.n	800897e <recv_tcp+0x36>
 8008970:	4b31      	ldr	r3, [pc, #196]	; (8008a38 <recv_tcp+0xf0>)
 8008972:	f240 122d 	movw	r2, #301	; 0x12d
 8008976:	4933      	ldr	r1, [pc, #204]	; (8008a44 <recv_tcp+0xfc>)
 8008978:	4831      	ldr	r0, [pc, #196]	; (8008a40 <recv_tcp+0xf8>)
 800897a:	f00c fe3f 	bl	80155fc <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800897e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d006      	beq.n	8008994 <recv_tcp+0x4c>
 8008986:	4b2c      	ldr	r3, [pc, #176]	; (8008a38 <recv_tcp+0xf0>)
 8008988:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800898c:	492e      	ldr	r1, [pc, #184]	; (8008a48 <recv_tcp+0x100>)
 800898e:	482c      	ldr	r0, [pc, #176]	; (8008a40 <recv_tcp+0xf8>)
 8008990:	f00c fe34 	bl	80155fc <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d102      	bne.n	80089a4 <recv_tcp+0x5c>
    return ERR_VAL;
 800899e:	f06f 0305 	mvn.w	r3, #5
 80089a2:	e045      	b.n	8008a30 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	68ba      	ldr	r2, [r7, #8]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d006      	beq.n	80089bc <recv_tcp+0x74>
 80089ae:	4b22      	ldr	r3, [pc, #136]	; (8008a38 <recv_tcp+0xf0>)
 80089b0:	f240 1235 	movw	r2, #309	; 0x135
 80089b4:	4925      	ldr	r1, [pc, #148]	; (8008a4c <recv_tcp+0x104>)
 80089b6:	4822      	ldr	r0, [pc, #136]	; (8008a40 <recv_tcp+0xf8>)
 80089b8:	f00c fe20 	bl	80155fc <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	3310      	adds	r3, #16
 80089c0:	4618      	mov	r0, r3
 80089c2:	f00c fb57 	bl	8015074 <sys_mbox_valid>
 80089c6:	4603      	mov	r3, r0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d10d      	bne.n	80089e8 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d008      	beq.n	80089e4 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	891b      	ldrh	r3, [r3, #8]
 80089d6:	4619      	mov	r1, r3
 80089d8:	68b8      	ldr	r0, [r7, #8]
 80089da:	f004 f81f 	bl	800ca1c <tcp_recved>
      pbuf_free(p);
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f003 f864 	bl	800baac <pbuf_free>
    }
    return ERR_OK;
 80089e4:	2300      	movs	r3, #0
 80089e6:	e023      	b.n	8008a30 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d005      	beq.n	80089fa <recv_tcp+0xb2>
    msg = p;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	891b      	ldrh	r3, [r3, #8]
 80089f6:	83fb      	strh	r3, [r7, #30]
 80089f8:	e003      	b.n	8008a02 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 80089fa:	4b15      	ldr	r3, [pc, #84]	; (8008a50 <recv_tcp+0x108>)
 80089fc:	61bb      	str	r3, [r7, #24]
    len = 0;
 80089fe:	2300      	movs	r3, #0
 8008a00:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	3310      	adds	r3, #16
 8008a06:	69b9      	ldr	r1, [r7, #24]
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f00c fad1 	bl	8014fb0 <sys_mbox_trypost>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d002      	beq.n	8008a1a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8008a14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a18:	e00a      	b.n	8008a30 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d005      	beq.n	8008a2e <recv_tcp+0xe6>
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a26:	8bfa      	ldrh	r2, [r7, #30]
 8008a28:	2100      	movs	r1, #0
 8008a2a:	6978      	ldr	r0, [r7, #20]
 8008a2c:	4798      	blx	r3
  }

  return ERR_OK;
 8008a2e:	2300      	movs	r3, #0
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3720      	adds	r7, #32
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}
 8008a38:	080168d4 	.word	0x080168d4
 8008a3c:	080169b0 	.word	0x080169b0
 8008a40:	08016918 	.word	0x08016918
 8008a44:	080169d4 	.word	0x080169d4
 8008a48:	080169f4 	.word	0x080169f4
 8008a4c:	08016a0c 	.word	0x08016a0c
 8008a50:	08019e92 	.word	0x08019e92

08008a54 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b084      	sub	sp, #16
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d106      	bne.n	8008a76 <poll_tcp+0x22>
 8008a68:	4b29      	ldr	r3, [pc, #164]	; (8008b10 <poll_tcp+0xbc>)
 8008a6a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8008a6e:	4929      	ldr	r1, [pc, #164]	; (8008b14 <poll_tcp+0xc0>)
 8008a70:	4829      	ldr	r0, [pc, #164]	; (8008b18 <poll_tcp+0xc4>)
 8008a72:	f00c fdc3 	bl	80155fc <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	785b      	ldrb	r3, [r3, #1]
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d104      	bne.n	8008a88 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008a7e:	2101      	movs	r1, #1
 8008a80:	68f8      	ldr	r0, [r7, #12]
 8008a82:	f000 ff61 	bl	8009948 <lwip_netconn_do_writemore>
 8008a86:	e016      	b.n	8008ab6 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	785b      	ldrb	r3, [r3, #1]
 8008a8c:	2b04      	cmp	r3, #4
 8008a8e:	d112      	bne.n	8008ab6 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	6a1b      	ldr	r3, [r3, #32]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d00a      	beq.n	8008aae <poll_tcp+0x5a>
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6a1b      	ldr	r3, [r3, #32]
 8008a9c:	7a5b      	ldrb	r3, [r3, #9]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d005      	beq.n	8008aae <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	6a1b      	ldr	r3, [r3, #32]
 8008aa6:	7a5a      	ldrb	r2, [r3, #9]
 8008aa8:	3a01      	subs	r2, #1
 8008aaa:	b2d2      	uxtb	r2, r2
 8008aac:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008aae:	2101      	movs	r1, #1
 8008ab0:	68f8      	ldr	r0, [r7, #12]
 8008ab2:	f000 fbf7 	bl	80092a4 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	7f1b      	ldrb	r3, [r3, #28]
 8008aba:	f003 0310 	and.w	r3, r3, #16
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d021      	beq.n	8008b06 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d01d      	beq.n	8008b06 <poll_tcp+0xb2>
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008ad2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008ad6:	d316      	bcc.n	8008b06 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008ae0:	2b04      	cmp	r3, #4
 8008ae2:	d810      	bhi.n	8008b06 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	7f1b      	ldrb	r3, [r3, #28]
 8008ae8:	f023 0310 	bic.w	r3, r3, #16
 8008aec:	b2da      	uxtb	r2, r3
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d005      	beq.n	8008b06 <poll_tcp+0xb2>
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afe:	2200      	movs	r2, #0
 8008b00:	2102      	movs	r1, #2
 8008b02:	68f8      	ldr	r0, [r7, #12]
 8008b04:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008b06:	2300      	movs	r3, #0
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3710      	adds	r7, #16
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	080168d4 	.word	0x080168d4
 8008b14:	08016a2c 	.word	0x08016a2c
 8008b18:	08016918 	.word	0x08016918

08008b1c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b086      	sub	sp, #24
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	60b9      	str	r1, [r7, #8]
 8008b26:	4613      	mov	r3, r2
 8008b28:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d106      	bne.n	8008b42 <sent_tcp+0x26>
 8008b34:	4b20      	ldr	r3, [pc, #128]	; (8008bb8 <sent_tcp+0x9c>)
 8008b36:	f240 1293 	movw	r2, #403	; 0x193
 8008b3a:	4920      	ldr	r1, [pc, #128]	; (8008bbc <sent_tcp+0xa0>)
 8008b3c:	4820      	ldr	r0, [pc, #128]	; (8008bc0 <sent_tcp+0xa4>)
 8008b3e:	f00c fd5d 	bl	80155fc <iprintf>

  if (conn) {
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d032      	beq.n	8008bae <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	785b      	ldrb	r3, [r3, #1]
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d104      	bne.n	8008b5a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008b50:	2101      	movs	r1, #1
 8008b52:	6978      	ldr	r0, [r7, #20]
 8008b54:	f000 fef8 	bl	8009948 <lwip_netconn_do_writemore>
 8008b58:	e007      	b.n	8008b6a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	785b      	ldrb	r3, [r3, #1]
 8008b5e:	2b04      	cmp	r3, #4
 8008b60:	d103      	bne.n	8008b6a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008b62:	2101      	movs	r1, #1
 8008b64:	6978      	ldr	r0, [r7, #20]
 8008b66:	f000 fb9d 	bl	80092a4 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d01d      	beq.n	8008bae <sent_tcp+0x92>
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008b7a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008b7e:	d316      	bcc.n	8008bae <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008b88:	2b04      	cmp	r3, #4
 8008b8a:	d810      	bhi.n	8008bae <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	7f1b      	ldrb	r3, [r3, #28]
 8008b90:	f023 0310 	bic.w	r3, r3, #16
 8008b94:	b2da      	uxtb	r2, r3
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d005      	beq.n	8008bae <sent_tcp+0x92>
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba6:	88fa      	ldrh	r2, [r7, #6]
 8008ba8:	2102      	movs	r1, #2
 8008baa:	6978      	ldr	r0, [r7, #20]
 8008bac:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008bae:	2300      	movs	r3, #0
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3718      	adds	r7, #24
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}
 8008bb8:	080168d4 	.word	0x080168d4
 8008bbc:	08016a2c 	.word	0x08016a2c
 8008bc0:	08016918 	.word	0x08016918

08008bc4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b088      	sub	sp, #32
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	460b      	mov	r3, r1
 8008bce:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d106      	bne.n	8008be8 <err_tcp+0x24>
 8008bda:	4b5f      	ldr	r3, [pc, #380]	; (8008d58 <err_tcp+0x194>)
 8008bdc:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8008be0:	495e      	ldr	r1, [pc, #376]	; (8008d5c <err_tcp+0x198>)
 8008be2:	485f      	ldr	r0, [pc, #380]	; (8008d60 <err_tcp+0x19c>)
 8008be4:	f00c fd0a 	bl	80155fc <iprintf>

  SYS_ARCH_PROTECT(lev);
 8008be8:	f00c fb4e 	bl	8015288 <sys_arch_protect>
 8008bec:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8008bee:	69fb      	ldr	r3, [r7, #28]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8008bf4:	69fb      	ldr	r3, [r7, #28]
 8008bf6:	78fa      	ldrb	r2, [r7, #3]
 8008bf8:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8008bfa:	69fb      	ldr	r3, [r7, #28]
 8008bfc:	7f1b      	ldrb	r3, [r3, #28]
 8008bfe:	f043 0301 	orr.w	r3, r3, #1
 8008c02:	b2da      	uxtb	r2, r3
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	785b      	ldrb	r3, [r3, #1]
 8008c0c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8008c0e:	69fb      	ldr	r3, [r7, #28]
 8008c10:	2200      	movs	r2, #0
 8008c12:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8008c14:	69b8      	ldr	r0, [r7, #24]
 8008c16:	f00c fb45 	bl	80152a4 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d005      	beq.n	8008c2e <err_tcp+0x6a>
 8008c22:	69fb      	ldr	r3, [r7, #28]
 8008c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c26:	2200      	movs	r2, #0
 8008c28:	2104      	movs	r1, #4
 8008c2a:	69f8      	ldr	r0, [r7, #28]
 8008c2c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d005      	beq.n	8008c42 <err_tcp+0x7e>
 8008c36:	69fb      	ldr	r3, [r7, #28]
 8008c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	2100      	movs	r1, #0
 8008c3e:	69f8      	ldr	r0, [r7, #28]
 8008c40:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008c42:	69fb      	ldr	r3, [r7, #28]
 8008c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d005      	beq.n	8008c56 <err_tcp+0x92>
 8008c4a:	69fb      	ldr	r3, [r7, #28]
 8008c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4e:	2200      	movs	r2, #0
 8008c50:	2102      	movs	r1, #2
 8008c52:	69f8      	ldr	r0, [r7, #28]
 8008c54:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8008c56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f7ff fd86 	bl	800876c <lwip_netconn_err_to_msg>
 8008c60:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008c62:	69fb      	ldr	r3, [r7, #28]
 8008c64:	3310      	adds	r3, #16
 8008c66:	4618      	mov	r0, r3
 8008c68:	f00c fa04 	bl	8015074 <sys_mbox_valid>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d005      	beq.n	8008c7e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8008c72:	69fb      	ldr	r3, [r7, #28]
 8008c74:	3310      	adds	r3, #16
 8008c76:	6939      	ldr	r1, [r7, #16]
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f00c f999 	bl	8014fb0 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8008c7e:	69fb      	ldr	r3, [r7, #28]
 8008c80:	3314      	adds	r3, #20
 8008c82:	4618      	mov	r0, r3
 8008c84:	f00c f9f6 	bl	8015074 <sys_mbox_valid>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d005      	beq.n	8008c9a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8008c8e:	69fb      	ldr	r3, [r7, #28]
 8008c90:	3314      	adds	r3, #20
 8008c92:	6939      	ldr	r1, [r7, #16]
 8008c94:	4618      	mov	r0, r3
 8008c96:	f00c f98b 	bl	8014fb0 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8008c9a:	7dfb      	ldrb	r3, [r7, #23]
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d005      	beq.n	8008cac <err_tcp+0xe8>
 8008ca0:	7dfb      	ldrb	r3, [r7, #23]
 8008ca2:	2b04      	cmp	r3, #4
 8008ca4:	d002      	beq.n	8008cac <err_tcp+0xe8>
 8008ca6:	7dfb      	ldrb	r3, [r7, #23]
 8008ca8:	2b03      	cmp	r3, #3
 8008caa:	d143      	bne.n	8008d34 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8008cac:	69fb      	ldr	r3, [r7, #28]
 8008cae:	7f1b      	ldrb	r3, [r3, #28]
 8008cb0:	f003 0304 	and.w	r3, r3, #4
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	bf14      	ite	ne
 8008cb8:	2301      	movne	r3, #1
 8008cba:	2300      	moveq	r3, #0
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	7f1b      	ldrb	r3, [r3, #28]
 8008cc4:	f023 0304 	bic.w	r3, r3, #4
 8008cc8:	b2da      	uxtb	r2, r3
 8008cca:	69fb      	ldr	r3, [r7, #28]
 8008ccc:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d13b      	bne.n	8008d4c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	6a1b      	ldr	r3, [r3, #32]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d106      	bne.n	8008cea <err_tcp+0x126>
 8008cdc:	4b1e      	ldr	r3, [pc, #120]	; (8008d58 <err_tcp+0x194>)
 8008cde:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008ce2:	4920      	ldr	r1, [pc, #128]	; (8008d64 <err_tcp+0x1a0>)
 8008ce4:	481e      	ldr	r0, [pc, #120]	; (8008d60 <err_tcp+0x19c>)
 8008ce6:	f00c fc89 	bl	80155fc <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8008cea:	7dfb      	ldrb	r3, [r7, #23]
 8008cec:	2b04      	cmp	r3, #4
 8008cee:	d104      	bne.n	8008cfa <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8008cf0:	69fb      	ldr	r3, [r7, #28]
 8008cf2:	6a1b      	ldr	r3, [r3, #32]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	711a      	strb	r2, [r3, #4]
 8008cf8:	e003      	b.n	8008d02 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8008cfa:	69fb      	ldr	r3, [r7, #28]
 8008cfc:	6a1b      	ldr	r3, [r3, #32]
 8008cfe:	78fa      	ldrb	r2, [r7, #3]
 8008d00:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	6a1b      	ldr	r3, [r3, #32]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	330c      	adds	r3, #12
 8008d0a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8008d0c:	68b8      	ldr	r0, [r7, #8]
 8008d0e:	f00c fa3f 	bl	8015190 <sys_sem_valid>
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d106      	bne.n	8008d26 <err_tcp+0x162>
 8008d18:	4b0f      	ldr	r3, [pc, #60]	; (8008d58 <err_tcp+0x194>)
 8008d1a:	f240 12ef 	movw	r2, #495	; 0x1ef
 8008d1e:	4912      	ldr	r1, [pc, #72]	; (8008d68 <err_tcp+0x1a4>)
 8008d20:	480f      	ldr	r0, [pc, #60]	; (8008d60 <err_tcp+0x19c>)
 8008d22:	f00c fc6b 	bl	80155fc <iprintf>
      conn->current_msg = NULL;
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8008d2c:	68b8      	ldr	r0, [r7, #8]
 8008d2e:	f00c fa15 	bl	801515c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8008d32:	e00b      	b.n	8008d4c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	6a1b      	ldr	r3, [r3, #32]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d008      	beq.n	8008d4e <err_tcp+0x18a>
 8008d3c:	4b06      	ldr	r3, [pc, #24]	; (8008d58 <err_tcp+0x194>)
 8008d3e:	f240 12f7 	movw	r2, #503	; 0x1f7
 8008d42:	490a      	ldr	r1, [pc, #40]	; (8008d6c <err_tcp+0x1a8>)
 8008d44:	4806      	ldr	r0, [pc, #24]	; (8008d60 <err_tcp+0x19c>)
 8008d46:	f00c fc59 	bl	80155fc <iprintf>
  }
}
 8008d4a:	e000      	b.n	8008d4e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8008d4c:	bf00      	nop
}
 8008d4e:	bf00      	nop
 8008d50:	3720      	adds	r7, #32
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	080168d4 	.word	0x080168d4
 8008d5c:	08016a2c 	.word	0x08016a2c
 8008d60:	08016918 	.word	0x08016918
 8008d64:	08016a3c 	.word	0x08016a3c
 8008d68:	08016a58 	.word	0x08016a58
 8008d6c:	08016a74 	.word	0x08016a74

08008d70 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b084      	sub	sp, #16
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8008d7e:	6879      	ldr	r1, [r7, #4]
 8008d80:	68f8      	ldr	r0, [r7, #12]
 8008d82:	f004 fd11 	bl	800d7a8 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8008d86:	490a      	ldr	r1, [pc, #40]	; (8008db0 <setup_tcp+0x40>)
 8008d88:	68f8      	ldr	r0, [r7, #12]
 8008d8a:	f004 fd1f 	bl	800d7cc <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8008d8e:	4909      	ldr	r1, [pc, #36]	; (8008db4 <setup_tcp+0x44>)
 8008d90:	68f8      	ldr	r0, [r7, #12]
 8008d92:	f004 fd3d 	bl	800d810 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8008d96:	2202      	movs	r2, #2
 8008d98:	4907      	ldr	r1, [pc, #28]	; (8008db8 <setup_tcp+0x48>)
 8008d9a:	68f8      	ldr	r0, [r7, #12]
 8008d9c:	f004 fd94 	bl	800d8c8 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8008da0:	4906      	ldr	r1, [pc, #24]	; (8008dbc <setup_tcp+0x4c>)
 8008da2:	68f8      	ldr	r0, [r7, #12]
 8008da4:	f004 fd56 	bl	800d854 <tcp_err>
}
 8008da8:	bf00      	nop
 8008daa:	3710      	adds	r7, #16
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	08008949 	.word	0x08008949
 8008db4:	08008b1d 	.word	0x08008b1d
 8008db8:	08008a55 	.word	0x08008a55
 8008dbc:	08008bc5 	.word	0x08008bc5

08008dc0 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8008dc0:	b590      	push	{r4, r7, lr}
 8008dc2:	b089      	sub	sp, #36	; 0x24
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	60f8      	str	r0, [r7, #12]
 8008dc8:	60b9      	str	r1, [r7, #8]
 8008dca:	4613      	mov	r3, r2
 8008dcc:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008dd2:	69fb      	ldr	r3, [r7, #28]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d102      	bne.n	8008dde <accept_function+0x1e>
    return ERR_VAL;
 8008dd8:	f06f 0305 	mvn.w	r3, #5
 8008ddc:	e0a1      	b.n	8008f22 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8008dde:	69fb      	ldr	r3, [r7, #28]
 8008de0:	3314      	adds	r3, #20
 8008de2:	4618      	mov	r0, r3
 8008de4:	f00c f946 	bl	8015074 <sys_mbox_valid>
 8008de8:	4603      	mov	r3, r0
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d102      	bne.n	8008df4 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8008dee:	f06f 0305 	mvn.w	r3, #5
 8008df2:	e096      	b.n	8008f22 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d11b      	bne.n	8008e32 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8008dfa:	69fb      	ldr	r3, [r7, #28]
 8008dfc:	f103 0414 	add.w	r4, r3, #20
 8008e00:	f06f 000c 	mvn.w	r0, #12
 8008e04:	f7ff fcb2 	bl	800876c <lwip_netconn_err_to_msg>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	4620      	mov	r0, r4
 8008e0e:	f00c f8cf 	bl	8014fb0 <sys_mbox_trypost>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d109      	bne.n	8008e2c <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008e18:	69fb      	ldr	r3, [r7, #28]
 8008e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d005      	beq.n	8008e2c <accept_function+0x6c>
 8008e20:	69fb      	ldr	r3, [r7, #28]
 8008e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e24:	2200      	movs	r2, #0
 8008e26:	2100      	movs	r1, #0
 8008e28:	69f8      	ldr	r0, [r7, #28]
 8008e2a:	4798      	blx	r3
    }
    return ERR_VAL;
 8008e2c:	f06f 0305 	mvn.w	r3, #5
 8008e30:	e077      	b.n	8008f22 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8008e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d006      	beq.n	8008e48 <accept_function+0x88>
 8008e3a:	4b3c      	ldr	r3, [pc, #240]	; (8008f2c <accept_function+0x16c>)
 8008e3c:	f240 222a 	movw	r2, #554	; 0x22a
 8008e40:	493b      	ldr	r1, [pc, #236]	; (8008f30 <accept_function+0x170>)
 8008e42:	483c      	ldr	r0, [pc, #240]	; (8008f34 <accept_function+0x174>)
 8008e44:	f00c fbda 	bl	80155fc <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	781a      	ldrb	r2, [r3, #0]
 8008e4c:	69fb      	ldr	r3, [r7, #28]
 8008e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e50:	4619      	mov	r1, r3
 8008e52:	4610      	mov	r0, r2
 8008e54:	f000 f8f0 	bl	8009038 <netconn_alloc>
 8008e58:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d11b      	bne.n	8008e98 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	f103 0414 	add.w	r4, r3, #20
 8008e66:	f06f 000c 	mvn.w	r0, #12
 8008e6a:	f7ff fc7f 	bl	800876c <lwip_netconn_err_to_msg>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	4619      	mov	r1, r3
 8008e72:	4620      	mov	r0, r4
 8008e74:	f00c f89c 	bl	8014fb0 <sys_mbox_trypost>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d109      	bne.n	8008e92 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008e7e:	69fb      	ldr	r3, [r7, #28]
 8008e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d005      	beq.n	8008e92 <accept_function+0xd2>
 8008e86:	69fb      	ldr	r3, [r7, #28]
 8008e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	2100      	movs	r1, #0
 8008e8e:	69f8      	ldr	r0, [r7, #28]
 8008e90:	4798      	blx	r3
    }
    return ERR_MEM;
 8008e92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e96:	e044      	b.n	8008f22 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8008e98:	69bb      	ldr	r3, [r7, #24]
 8008e9a:	68ba      	ldr	r2, [r7, #8]
 8008e9c:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8008e9e:	69b8      	ldr	r0, [r7, #24]
 8008ea0:	f7ff ff66 	bl	8008d70 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8008ea4:	69fb      	ldr	r3, [r7, #28]
 8008ea6:	3314      	adds	r3, #20
 8008ea8:	69b9      	ldr	r1, [r7, #24]
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f00c f880 	bl	8014fb0 <sys_mbox_trypost>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d02a      	beq.n	8008f0c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8008eb6:	69bb      	ldr	r3, [r7, #24]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8008ebc:	2100      	movs	r1, #0
 8008ebe:	6978      	ldr	r0, [r7, #20]
 8008ec0:	f004 fc72 	bl	800d7a8 <tcp_arg>
    tcp_recv(pcb, NULL);
 8008ec4:	2100      	movs	r1, #0
 8008ec6:	6978      	ldr	r0, [r7, #20]
 8008ec8:	f004 fc80 	bl	800d7cc <tcp_recv>
    tcp_sent(pcb, NULL);
 8008ecc:	2100      	movs	r1, #0
 8008ece:	6978      	ldr	r0, [r7, #20]
 8008ed0:	f004 fc9e 	bl	800d810 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	2100      	movs	r1, #0
 8008ed8:	6978      	ldr	r0, [r7, #20]
 8008eda:	f004 fcf5 	bl	800d8c8 <tcp_poll>
    tcp_err(pcb, NULL);
 8008ede:	2100      	movs	r1, #0
 8008ee0:	6978      	ldr	r0, [r7, #20]
 8008ee2:	f004 fcb7 	bl	800d854 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8008ee6:	69bb      	ldr	r3, [r7, #24]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8008eec:	69bb      	ldr	r3, [r7, #24]
 8008eee:	3310      	adds	r3, #16
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f00c f84b 	bl	8014f8c <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8008ef6:	69bb      	ldr	r3, [r7, #24]
 8008ef8:	3310      	adds	r3, #16
 8008efa:	4618      	mov	r0, r3
 8008efc:	f00c f8cb 	bl	8015096 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8008f00:	69b8      	ldr	r0, [r7, #24]
 8008f02:	f000 f907 	bl	8009114 <netconn_free>
    return ERR_MEM;
 8008f06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f0a:	e00a      	b.n	8008f22 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d005      	beq.n	8008f20 <accept_function+0x160>
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f18:	2200      	movs	r2, #0
 8008f1a:	2100      	movs	r1, #0
 8008f1c:	69f8      	ldr	r0, [r7, #28]
 8008f1e:	4798      	blx	r3
  }

  return ERR_OK;
 8008f20:	2300      	movs	r3, #0
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3724      	adds	r7, #36	; 0x24
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd90      	pop	{r4, r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	080168d4 	.word	0x080168d4
 8008f30:	08016a90 	.word	0x08016a90
 8008f34:	08016918 	.word	0x08016918

08008f38 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8008f38:	b590      	push	{r4, r7, lr}
 8008f3a:	b085      	sub	sp, #20
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8008f40:	2300      	movs	r3, #0
 8008f42:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d006      	beq.n	8008f5c <pcb_new+0x24>
 8008f4e:	4b2b      	ldr	r3, [pc, #172]	; (8008ffc <pcb_new+0xc4>)
 8008f50:	f240 2265 	movw	r2, #613	; 0x265
 8008f54:	492a      	ldr	r1, [pc, #168]	; (8009000 <pcb_new+0xc8>)
 8008f56:	482b      	ldr	r0, [pc, #172]	; (8009004 <pcb_new+0xcc>)
 8008f58:	f00c fb50 	bl	80155fc <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f66:	2b10      	cmp	r3, #16
 8008f68:	d022      	beq.n	8008fb0 <pcb_new+0x78>
 8008f6a:	2b20      	cmp	r3, #32
 8008f6c:	d133      	bne.n	8008fd6 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681c      	ldr	r4, [r3, #0]
 8008f72:	7bfb      	ldrb	r3, [r7, #15]
 8008f74:	4618      	mov	r0, r3
 8008f76:	f009 fcf2 	bl	801295e <udp_new_ip_type>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d02a      	beq.n	8008fde <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	2b22      	cmp	r3, #34	; 0x22
 8008f90:	d104      	bne.n	8008f9c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	6858      	ldr	r0, [r3, #4]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	4917      	ldr	r1, [pc, #92]	; (8009008 <pcb_new+0xd0>)
 8008faa:	f009 fc5f 	bl	801286c <udp_recv>
      }
      break;
 8008fae:	e016      	b.n	8008fde <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681c      	ldr	r4, [r3, #0]
 8008fb4:	7bfb      	ldrb	r3, [r7, #15]
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f004 fbe8 	bl	800d78c <tcp_new_ip_type>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d00b      	beq.n	8008fe2 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7ff fece 	bl	8008d70 <setup_tcp>
      }
      break;
 8008fd4:	e005      	b.n	8008fe2 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	22fa      	movs	r2, #250	; 0xfa
 8008fda:	711a      	strb	r2, [r3, #4]
      return;
 8008fdc:	e00a      	b.n	8008ff4 <pcb_new+0xbc>
      break;
 8008fde:	bf00      	nop
 8008fe0:	e000      	b.n	8008fe4 <pcb_new+0xac>
      break;
 8008fe2:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d102      	bne.n	8008ff4 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	22ff      	movs	r2, #255	; 0xff
 8008ff2:	711a      	strb	r2, [r3, #4]
  }
}
 8008ff4:	3714      	adds	r7, #20
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd90      	pop	{r4, r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	080168d4 	.word	0x080168d4
 8009000:	08016ab8 	.word	0x08016ab8
 8009004:	08016918 	.word	0x08016918
 8009008:	0800884d 	.word	0x0800884d

0800900c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2200      	movs	r2, #0
 800901c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d102      	bne.n	800902e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8009028:	68f8      	ldr	r0, [r7, #12]
 800902a:	f7ff ff85 	bl	8008f38 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800902e:	bf00      	nop
 8009030:	3710      	adds	r7, #16
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
	...

08009038 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b086      	sub	sp, #24
 800903c:	af00      	add	r7, sp, #0
 800903e:	4603      	mov	r3, r0
 8009040:	6039      	str	r1, [r7, #0]
 8009042:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8009044:	2300      	movs	r3, #0
 8009046:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8009048:	2007      	movs	r0, #7
 800904a:	f001 fe39 	bl	800acc0 <memp_malloc>
 800904e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d101      	bne.n	800905a <netconn_alloc+0x22>
    return NULL;
 8009056:	2300      	movs	r3, #0
 8009058:	e052      	b.n	8009100 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2200      	movs	r2, #0
 800905e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	79fa      	ldrb	r2, [r7, #7]
 8009064:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2200      	movs	r2, #0
 800906a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800906c:	79fb      	ldrb	r3, [r7, #7]
 800906e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009072:	2b10      	cmp	r3, #16
 8009074:	d004      	beq.n	8009080 <netconn_alloc+0x48>
 8009076:	2b20      	cmp	r3, #32
 8009078:	d105      	bne.n	8009086 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800907a:	2306      	movs	r3, #6
 800907c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800907e:	e00a      	b.n	8009096 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8009080:	2306      	movs	r3, #6
 8009082:	617b      	str	r3, [r7, #20]
      break;
 8009084:	e007      	b.n	8009096 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8009086:	4b20      	ldr	r3, [pc, #128]	; (8009108 <netconn_alloc+0xd0>)
 8009088:	f240 22e5 	movw	r2, #741	; 0x2e5
 800908c:	491f      	ldr	r1, [pc, #124]	; (800910c <netconn_alloc+0xd4>)
 800908e:	4820      	ldr	r0, [pc, #128]	; (8009110 <netconn_alloc+0xd8>)
 8009090:	f00c fab4 	bl	80155fc <iprintf>
      goto free_and_return;
 8009094:	e02f      	b.n	80090f6 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	3310      	adds	r3, #16
 800909a:	6979      	ldr	r1, [r7, #20]
 800909c:	4618      	mov	r0, r3
 800909e:	f00b ff5b 	bl	8014f58 <sys_mbox_new>
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d125      	bne.n	80090f4 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	330c      	adds	r3, #12
 80090ac:	2100      	movs	r1, #0
 80090ae:	4618      	mov	r0, r3
 80090b0:	f00b fffe 	bl	80150b0 <sys_sem_new>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d005      	beq.n	80090c6 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	3310      	adds	r3, #16
 80090be:	4618      	mov	r0, r3
 80090c0:	f00b ff64 	bl	8014f8c <sys_mbox_free>
    goto free_and_return;
 80090c4:	e017      	b.n	80090f6 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	3314      	adds	r3, #20
 80090ca:	4618      	mov	r0, r3
 80090cc:	f00b ffe3 	bl	8015096 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2200      	movs	r2, #0
 80090d4:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80090dc:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	683a      	ldr	r2, [r7, #0]
 80090e2:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2200      	movs	r2, #0
 80090e8:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	7cfa      	ldrb	r2, [r7, #19]
 80090ee:	771a      	strb	r2, [r3, #28]
  return conn;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	e005      	b.n	8009100 <netconn_alloc+0xc8>
    goto free_and_return;
 80090f4:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 80090f6:	68f9      	ldr	r1, [r7, #12]
 80090f8:	2007      	movs	r0, #7
 80090fa:	f001 fe33 	bl	800ad64 <memp_free>
  return NULL;
 80090fe:	2300      	movs	r3, #0
}
 8009100:	4618      	mov	r0, r3
 8009102:	3718      	adds	r7, #24
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}
 8009108:	080168d4 	.word	0x080168d4
 800910c:	08016ad8 	.word	0x08016ad8
 8009110:	08016918 	.word	0x08016918

08009114 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d006      	beq.n	8009132 <netconn_free+0x1e>
 8009124:	4b1b      	ldr	r3, [pc, #108]	; (8009194 <netconn_free+0x80>)
 8009126:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800912a:	491b      	ldr	r1, [pc, #108]	; (8009198 <netconn_free+0x84>)
 800912c:	481b      	ldr	r0, [pc, #108]	; (800919c <netconn_free+0x88>)
 800912e:	f00c fa65 	bl	80155fc <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	3310      	adds	r3, #16
 8009136:	4618      	mov	r0, r3
 8009138:	f00b ff9c 	bl	8015074 <sys_mbox_valid>
 800913c:	4603      	mov	r3, r0
 800913e:	2b00      	cmp	r3, #0
 8009140:	d006      	beq.n	8009150 <netconn_free+0x3c>
 8009142:	4b14      	ldr	r3, [pc, #80]	; (8009194 <netconn_free+0x80>)
 8009144:	f240 3223 	movw	r2, #803	; 0x323
 8009148:	4915      	ldr	r1, [pc, #84]	; (80091a0 <netconn_free+0x8c>)
 800914a:	4814      	ldr	r0, [pc, #80]	; (800919c <netconn_free+0x88>)
 800914c:	f00c fa56 	bl	80155fc <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	3314      	adds	r3, #20
 8009154:	4618      	mov	r0, r3
 8009156:	f00b ff8d 	bl	8015074 <sys_mbox_valid>
 800915a:	4603      	mov	r3, r0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d006      	beq.n	800916e <netconn_free+0x5a>
 8009160:	4b0c      	ldr	r3, [pc, #48]	; (8009194 <netconn_free+0x80>)
 8009162:	f240 3226 	movw	r2, #806	; 0x326
 8009166:	490f      	ldr	r1, [pc, #60]	; (80091a4 <netconn_free+0x90>)
 8009168:	480c      	ldr	r0, [pc, #48]	; (800919c <netconn_free+0x88>)
 800916a:	f00c fa47 	bl	80155fc <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	330c      	adds	r3, #12
 8009172:	4618      	mov	r0, r3
 8009174:	f00b ffff 	bl	8015176 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	330c      	adds	r3, #12
 800917c:	4618      	mov	r0, r3
 800917e:	f00c f818 	bl	80151b2 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8009182:	6879      	ldr	r1, [r7, #4]
 8009184:	2007      	movs	r0, #7
 8009186:	f001 fded 	bl	800ad64 <memp_free>
}
 800918a:	bf00      	nop
 800918c:	3708      	adds	r7, #8
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
 8009192:	bf00      	nop
 8009194:	080168d4 	.word	0x080168d4
 8009198:	08016b00 	.word	0x08016b00
 800919c:	08016918 	.word	0x08016918
 80091a0:	08016b30 	.word	0x08016b30
 80091a4:	08016b6c 	.word	0x08016b6c

080091a8 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b086      	sub	sp, #24
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	3310      	adds	r3, #16
 80091b4:	4618      	mov	r0, r3
 80091b6:	f00b ff5d 	bl	8015074 <sys_mbox_valid>
 80091ba:	4603      	mov	r3, r0
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d02f      	beq.n	8009220 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80091c0:	e018      	b.n	80091f4 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	781b      	ldrb	r3, [r3, #0]
 80091c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80091ca:	2b10      	cmp	r3, #16
 80091cc:	d10e      	bne.n	80091ec <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	f107 020f 	add.w	r2, r7, #15
 80091d4:	4611      	mov	r1, r2
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7ff fafe 	bl	80087d8 <lwip_netconn_is_err_msg>
 80091dc:	4603      	mov	r3, r0
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d108      	bne.n	80091f4 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	4618      	mov	r0, r3
 80091e6:	f002 fc61 	bl	800baac <pbuf_free>
 80091ea:	e003      	b.n	80091f4 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	4618      	mov	r0, r3
 80091f0:	f000 fe8e 	bl	8009f10 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	3310      	adds	r3, #16
 80091f8:	f107 0210 	add.w	r2, r7, #16
 80091fc:	4611      	mov	r1, r2
 80091fe:	4618      	mov	r0, r3
 8009200:	f00b ff21 	bl	8015046 <sys_arch_mbox_tryfetch>
 8009204:	4603      	mov	r3, r0
 8009206:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800920a:	d1da      	bne.n	80091c2 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	3310      	adds	r3, #16
 8009210:	4618      	mov	r0, r3
 8009212:	f00b febb 	bl	8014f8c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	3310      	adds	r3, #16
 800921a:	4618      	mov	r0, r3
 800921c:	f00b ff3b 	bl	8015096 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	3314      	adds	r3, #20
 8009224:	4618      	mov	r0, r3
 8009226:	f00b ff25 	bl	8015074 <sys_mbox_valid>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d034      	beq.n	800929a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009230:	e01d      	b.n	800926e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	f107 020e 	add.w	r2, r7, #14
 8009238:	4611      	mov	r1, r2
 800923a:	4618      	mov	r0, r3
 800923c:	f7ff facc 	bl	80087d8 <lwip_netconn_is_err_msg>
 8009240:	4603      	mov	r3, r0
 8009242:	2b00      	cmp	r3, #0
 8009244:	d113      	bne.n	800926e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800924a:	6978      	ldr	r0, [r7, #20]
 800924c:	f7ff ffac 	bl	80091a8 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d007      	beq.n	8009268 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	4618      	mov	r0, r3
 800925e:	f003 fa15 	bl	800c68c <tcp_abort>
            newconn->pcb.tcp = NULL;
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	2200      	movs	r2, #0
 8009266:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8009268:	6978      	ldr	r0, [r7, #20]
 800926a:	f7ff ff53 	bl	8009114 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	3314      	adds	r3, #20
 8009272:	f107 0210 	add.w	r2, r7, #16
 8009276:	4611      	mov	r1, r2
 8009278:	4618      	mov	r0, r3
 800927a:	f00b fee4 	bl	8015046 <sys_arch_mbox_tryfetch>
 800927e:	4603      	mov	r3, r0
 8009280:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009284:	d1d5      	bne.n	8009232 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	3314      	adds	r3, #20
 800928a:	4618      	mov	r0, r3
 800928c:	f00b fe7e 	bl	8014f8c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	3314      	adds	r3, #20
 8009294:	4618      	mov	r0, r3
 8009296:	f00b fefe 	bl	8015096 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800929a:	bf00      	nop
 800929c:	3718      	adds	r7, #24
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
	...

080092a4 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b086      	sub	sp, #24
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	460b      	mov	r3, r1
 80092ae:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 80092b0:	2300      	movs	r3, #0
 80092b2:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d106      	bne.n	80092c8 <lwip_netconn_do_close_internal+0x24>
 80092ba:	4ba1      	ldr	r3, [pc, #644]	; (8009540 <lwip_netconn_do_close_internal+0x29c>)
 80092bc:	f240 32a2 	movw	r2, #930	; 0x3a2
 80092c0:	49a0      	ldr	r1, [pc, #640]	; (8009544 <lwip_netconn_do_close_internal+0x2a0>)
 80092c2:	48a1      	ldr	r0, [pc, #644]	; (8009548 <lwip_netconn_do_close_internal+0x2a4>)
 80092c4:	f00c f99a 	bl	80155fc <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80092d0:	2b10      	cmp	r3, #16
 80092d2:	d006      	beq.n	80092e2 <lwip_netconn_do_close_internal+0x3e>
 80092d4:	4b9a      	ldr	r3, [pc, #616]	; (8009540 <lwip_netconn_do_close_internal+0x29c>)
 80092d6:	f240 32a3 	movw	r2, #931	; 0x3a3
 80092da:	499c      	ldr	r1, [pc, #624]	; (800954c <lwip_netconn_do_close_internal+0x2a8>)
 80092dc:	489a      	ldr	r0, [pc, #616]	; (8009548 <lwip_netconn_do_close_internal+0x2a4>)
 80092de:	f00c f98d 	bl	80155fc <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	785b      	ldrb	r3, [r3, #1]
 80092e6:	2b04      	cmp	r3, #4
 80092e8:	d006      	beq.n	80092f8 <lwip_netconn_do_close_internal+0x54>
 80092ea:	4b95      	ldr	r3, [pc, #596]	; (8009540 <lwip_netconn_do_close_internal+0x29c>)
 80092ec:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 80092f0:	4997      	ldr	r1, [pc, #604]	; (8009550 <lwip_netconn_do_close_internal+0x2ac>)
 80092f2:	4895      	ldr	r0, [pc, #596]	; (8009548 <lwip_netconn_do_close_internal+0x2a4>)
 80092f4:	f00c f982 	bl	80155fc <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d106      	bne.n	800930e <lwip_netconn_do_close_internal+0x6a>
 8009300:	4b8f      	ldr	r3, [pc, #572]	; (8009540 <lwip_netconn_do_close_internal+0x29c>)
 8009302:	f240 32a5 	movw	r2, #933	; 0x3a5
 8009306:	4993      	ldr	r1, [pc, #588]	; (8009554 <lwip_netconn_do_close_internal+0x2b0>)
 8009308:	488f      	ldr	r0, [pc, #572]	; (8009548 <lwip_netconn_do_close_internal+0x2a4>)
 800930a:	f00c f977 	bl	80155fc <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6a1b      	ldr	r3, [r3, #32]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d106      	bne.n	8009324 <lwip_netconn_do_close_internal+0x80>
 8009316:	4b8a      	ldr	r3, [pc, #552]	; (8009540 <lwip_netconn_do_close_internal+0x29c>)
 8009318:	f240 32a6 	movw	r2, #934	; 0x3a6
 800931c:	498e      	ldr	r1, [pc, #568]	; (8009558 <lwip_netconn_do_close_internal+0x2b4>)
 800931e:	488a      	ldr	r0, [pc, #552]	; (8009548 <lwip_netconn_do_close_internal+0x2a4>)
 8009320:	f00c f96c 	bl	80155fc <iprintf>

  tpcb = conn->pcb.tcp;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6a1b      	ldr	r3, [r3, #32]
 800932e:	7a1b      	ldrb	r3, [r3, #8]
 8009330:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8009332:	7bfb      	ldrb	r3, [r7, #15]
 8009334:	f003 0301 	and.w	r3, r3, #1
 8009338:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800933a:	7bfb      	ldrb	r3, [r7, #15]
 800933c:	f003 0302 	and.w	r3, r3, #2
 8009340:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8009342:	7bfb      	ldrb	r3, [r7, #15]
 8009344:	2b03      	cmp	r3, #3
 8009346:	d102      	bne.n	800934e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8009348:	2301      	movs	r3, #1
 800934a:	75bb      	strb	r3, [r7, #22]
 800934c:	e01f      	b.n	800938e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800934e:	7bbb      	ldrb	r3, [r7, #14]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d00e      	beq.n	8009372 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8009358:	2b05      	cmp	r3, #5
 800935a:	d007      	beq.n	800936c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8009360:	2b06      	cmp	r3, #6
 8009362:	d003      	beq.n	800936c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8009368:	2b08      	cmp	r3, #8
 800936a:	d102      	bne.n	8009372 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800936c:	2301      	movs	r3, #1
 800936e:	75bb      	strb	r3, [r7, #22]
 8009370:	e00d      	b.n	800938e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8009372:	7b7b      	ldrb	r3, [r7, #13]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d008      	beq.n	800938a <lwip_netconn_do_close_internal+0xe6>
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	8b5b      	ldrh	r3, [r3, #26]
 800937c:	f003 0310 	and.w	r3, r3, #16
 8009380:	2b00      	cmp	r3, #0
 8009382:	d002      	beq.n	800938a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8009384:	2301      	movs	r3, #1
 8009386:	75bb      	strb	r3, [r7, #22]
 8009388:	e001      	b.n	800938e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800938a:	2300      	movs	r3, #0
 800938c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800938e:	7dbb      	ldrb	r3, [r7, #22]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d003      	beq.n	800939c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8009394:	2100      	movs	r1, #0
 8009396:	6938      	ldr	r0, [r7, #16]
 8009398:	f004 fa06 	bl	800d7a8 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	7d1b      	ldrb	r3, [r3, #20]
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d104      	bne.n	80093ae <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 80093a4:	2100      	movs	r1, #0
 80093a6:	6938      	ldr	r0, [r7, #16]
 80093a8:	f004 fa76 	bl	800d898 <tcp_accept>
 80093ac:	e01d      	b.n	80093ea <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 80093ae:	7bbb      	ldrb	r3, [r7, #14]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d007      	beq.n	80093c4 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 80093b4:	2100      	movs	r1, #0
 80093b6:	6938      	ldr	r0, [r7, #16]
 80093b8:	f004 fa08 	bl	800d7cc <tcp_recv>
      tcp_accept(tpcb, NULL);
 80093bc:	2100      	movs	r1, #0
 80093be:	6938      	ldr	r0, [r7, #16]
 80093c0:	f004 fa6a 	bl	800d898 <tcp_accept>
    }
    if (shut_tx) {
 80093c4:	7b7b      	ldrb	r3, [r7, #13]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d003      	beq.n	80093d2 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 80093ca:	2100      	movs	r1, #0
 80093cc:	6938      	ldr	r0, [r7, #16]
 80093ce:	f004 fa1f 	bl	800d810 <tcp_sent>
    }
    if (shut_close) {
 80093d2:	7dbb      	ldrb	r3, [r7, #22]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d008      	beq.n	80093ea <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 80093d8:	2200      	movs	r2, #0
 80093da:	2100      	movs	r1, #0
 80093dc:	6938      	ldr	r0, [r7, #16]
 80093de:	f004 fa73 	bl	800d8c8 <tcp_poll>
      tcp_err(tpcb, NULL);
 80093e2:	2100      	movs	r1, #0
 80093e4:	6938      	ldr	r0, [r7, #16]
 80093e6:	f004 fa35 	bl	800d854 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 80093ea:	7dbb      	ldrb	r3, [r7, #22]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d005      	beq.n	80093fc <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 80093f0:	6938      	ldr	r0, [r7, #16]
 80093f2:	f003 f805 	bl	800c400 <tcp_close>
 80093f6:	4603      	mov	r3, r0
 80093f8:	75fb      	strb	r3, [r7, #23]
 80093fa:	e007      	b.n	800940c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80093fc:	7bbb      	ldrb	r3, [r7, #14]
 80093fe:	7b7a      	ldrb	r2, [r7, #13]
 8009400:	4619      	mov	r1, r3
 8009402:	6938      	ldr	r0, [r7, #16]
 8009404:	f003 f828 	bl	800c458 <tcp_shutdown>
 8009408:	4603      	mov	r3, r0
 800940a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800940c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d102      	bne.n	800941a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8009414:	2301      	movs	r3, #1
 8009416:	757b      	strb	r3, [r7, #21]
 8009418:	e016      	b.n	8009448 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800941a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800941e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009422:	d10f      	bne.n	8009444 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6a1b      	ldr	r3, [r3, #32]
 8009428:	7a5b      	ldrb	r3, [r3, #9]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d10c      	bne.n	8009448 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800942e:	2301      	movs	r3, #1
 8009430:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8009432:	7dbb      	ldrb	r3, [r7, #22]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d007      	beq.n	8009448 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8009438:	6938      	ldr	r0, [r7, #16]
 800943a:	f003 f927 	bl	800c68c <tcp_abort>
          err = ERR_OK;
 800943e:	2300      	movs	r3, #0
 8009440:	75fb      	strb	r3, [r7, #23]
 8009442:	e001      	b.n	8009448 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8009444:	2301      	movs	r3, #1
 8009446:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8009448:	7d7b      	ldrb	r3, [r7, #21]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d044      	beq.n	80094d8 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6a1b      	ldr	r3, [r3, #32]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	330c      	adds	r3, #12
 8009456:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6a1b      	ldr	r3, [r3, #32]
 800945c:	7dfa      	ldrb	r2, [r7, #23]
 800945e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2200      	movs	r2, #0
 8009464:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800946c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d129      	bne.n	80094c8 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8009474:	7dbb      	ldrb	r3, [r7, #22]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d00c      	beq.n	8009494 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2200      	movs	r2, #0
 800947e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009484:	2b00      	cmp	r3, #0
 8009486:	d005      	beq.n	8009494 <lwip_netconn_do_close_internal+0x1f0>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800948c:	2200      	movs	r2, #0
 800948e:	2104      	movs	r1, #4
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	4798      	blx	r3
      }
      if (shut_rx) {
 8009494:	7bbb      	ldrb	r3, [r7, #14]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d009      	beq.n	80094ae <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d005      	beq.n	80094ae <lwip_netconn_do_close_internal+0x20a>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a6:	2200      	movs	r2, #0
 80094a8:	2100      	movs	r1, #0
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	4798      	blx	r3
      }
      if (shut_tx) {
 80094ae:	7b7b      	ldrb	r3, [r7, #13]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d009      	beq.n	80094c8 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d005      	beq.n	80094c8 <lwip_netconn_do_close_internal+0x224>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c0:	2200      	movs	r2, #0
 80094c2:	2102      	movs	r1, #2
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80094c8:	78fb      	ldrb	r3, [r7, #3]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d002      	beq.n	80094d4 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 80094ce:	68b8      	ldr	r0, [r7, #8]
 80094d0:	f00b fe44 	bl	801515c <sys_sem_signal>
    }
    return ERR_OK;
 80094d4:	2300      	movs	r3, #0
 80094d6:	e02e      	b.n	8009536 <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 80094d8:	7d7b      	ldrb	r3, [r7, #21]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d11e      	bne.n	800951c <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	7d1b      	ldrb	r3, [r3, #20]
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	d106      	bne.n	80094f4 <lwip_netconn_do_close_internal+0x250>
 80094e6:	4b16      	ldr	r3, [pc, #88]	; (8009540 <lwip_netconn_do_close_internal+0x29c>)
 80094e8:	f240 4241 	movw	r2, #1089	; 0x441
 80094ec:	491b      	ldr	r1, [pc, #108]	; (800955c <lwip_netconn_do_close_internal+0x2b8>)
 80094ee:	4816      	ldr	r0, [pc, #88]	; (8009548 <lwip_netconn_do_close_internal+0x2a4>)
 80094f0:	f00c f884 	bl	80155fc <iprintf>
    if (shut_tx) {
 80094f4:	7b7b      	ldrb	r3, [r7, #13]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d003      	beq.n	8009502 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 80094fa:	4919      	ldr	r1, [pc, #100]	; (8009560 <lwip_netconn_do_close_internal+0x2bc>)
 80094fc:	6938      	ldr	r0, [r7, #16]
 80094fe:	f004 f987 	bl	800d810 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8009502:	2201      	movs	r2, #1
 8009504:	4917      	ldr	r1, [pc, #92]	; (8009564 <lwip_netconn_do_close_internal+0x2c0>)
 8009506:	6938      	ldr	r0, [r7, #16]
 8009508:	f004 f9de 	bl	800d8c8 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800950c:	4916      	ldr	r1, [pc, #88]	; (8009568 <lwip_netconn_do_close_internal+0x2c4>)
 800950e:	6938      	ldr	r0, [r7, #16]
 8009510:	f004 f9a0 	bl	800d854 <tcp_err>
    tcp_arg(tpcb, conn);
 8009514:	6879      	ldr	r1, [r7, #4]
 8009516:	6938      	ldr	r0, [r7, #16]
 8009518:	f004 f946 	bl	800d7a8 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800951c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d106      	bne.n	8009532 <lwip_netconn_do_close_internal+0x28e>
 8009524:	4b06      	ldr	r3, [pc, #24]	; (8009540 <lwip_netconn_do_close_internal+0x29c>)
 8009526:	f240 424d 	movw	r2, #1101	; 0x44d
 800952a:	4910      	ldr	r1, [pc, #64]	; (800956c <lwip_netconn_do_close_internal+0x2c8>)
 800952c:	4806      	ldr	r0, [pc, #24]	; (8009548 <lwip_netconn_do_close_internal+0x2a4>)
 800952e:	f00c f865 	bl	80155fc <iprintf>
  return err;
 8009532:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009536:	4618      	mov	r0, r3
 8009538:	3718      	adds	r7, #24
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop
 8009540:	080168d4 	.word	0x080168d4
 8009544:	08016ba8 	.word	0x08016ba8
 8009548:	08016918 	.word	0x08016918
 800954c:	08016bb8 	.word	0x08016bb8
 8009550:	08016bd8 	.word	0x08016bd8
 8009554:	08016bfc 	.word	0x08016bfc
 8009558:	08016a3c 	.word	0x08016a3c
 800955c:	08016c10 	.word	0x08016c10
 8009560:	08008b1d 	.word	0x08008b1d
 8009564:	08008a55 	.word	0x08008a55
 8009568:	08008bc5 	.word	0x08008bc5
 800956c:	08016c34 	.word	0x08016c34

08009570 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b084      	sub	sp, #16
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	785b      	ldrb	r3, [r3, #1]
 8009582:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8009584:	7afb      	ldrb	r3, [r7, #11]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d00d      	beq.n	80095a6 <lwip_netconn_do_delconn+0x36>
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	781b      	ldrb	r3, [r3, #0]
 8009590:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009594:	2b10      	cmp	r3, #16
 8009596:	d006      	beq.n	80095a6 <lwip_netconn_do_delconn+0x36>
 8009598:	4b60      	ldr	r3, [pc, #384]	; (800971c <lwip_netconn_do_delconn+0x1ac>)
 800959a:	f240 425e 	movw	r2, #1118	; 0x45e
 800959e:	4960      	ldr	r1, [pc, #384]	; (8009720 <lwip_netconn_do_delconn+0x1b0>)
 80095a0:	4860      	ldr	r0, [pc, #384]	; (8009724 <lwip_netconn_do_delconn+0x1b4>)
 80095a2:	f00c f82b 	bl	80155fc <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 80095a6:	7afb      	ldrb	r3, [r7, #11]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d005      	beq.n	80095b8 <lwip_netconn_do_delconn+0x48>
 80095ac:	7afb      	ldrb	r3, [r7, #11]
 80095ae:	2b02      	cmp	r3, #2
 80095b0:	d002      	beq.n	80095b8 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 80095b2:	7afb      	ldrb	r3, [r7, #11]
 80095b4:	2b03      	cmp	r3, #3
 80095b6:	d109      	bne.n	80095cc <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 80095b8:	7afb      	ldrb	r3, [r7, #11]
 80095ba:	2b03      	cmp	r3, #3
 80095bc:	d10a      	bne.n	80095d4 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	7f1b      	ldrb	r3, [r3, #28]
 80095c4:	f003 0304 	and.w	r3, r3, #4
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d103      	bne.n	80095d4 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	22fb      	movs	r2, #251	; 0xfb
 80095d0:	711a      	strb	r2, [r3, #4]
 80095d2:	e097      	b.n	8009704 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 80095d4:	7afb      	ldrb	r3, [r7, #11]
 80095d6:	2b03      	cmp	r3, #3
 80095d8:	d10d      	bne.n	80095f6 <lwip_netconn_do_delconn+0x86>
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	7f1b      	ldrb	r3, [r3, #28]
 80095e0:	f003 0304 	and.w	r3, r3, #4
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d106      	bne.n	80095f6 <lwip_netconn_do_delconn+0x86>
 80095e8:	4b4c      	ldr	r3, [pc, #304]	; (800971c <lwip_netconn_do_delconn+0x1ac>)
 80095ea:	f240 427a 	movw	r2, #1146	; 0x47a
 80095ee:	494e      	ldr	r1, [pc, #312]	; (8009728 <lwip_netconn_do_delconn+0x1b8>)
 80095f0:	484c      	ldr	r0, [pc, #304]	; (8009724 <lwip_netconn_do_delconn+0x1b4>)
 80095f2:	f00c f803 	bl	80155fc <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2200      	movs	r2, #0
 80095fa:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4618      	mov	r0, r3
 8009602:	f7ff fdd1 	bl	80091a8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d05f      	beq.n	80096d0 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800961a:	2b10      	cmp	r3, #16
 800961c:	d00d      	beq.n	800963a <lwip_netconn_do_delconn+0xca>
 800961e:	2b20      	cmp	r3, #32
 8009620:	d151      	bne.n	80096c6 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	2200      	movs	r2, #0
 800962a:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	4618      	mov	r0, r3
 8009634:	f009 f93a 	bl	80128ac <udp_remove>
          break;
 8009638:	e046      	b.n	80096c8 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	6a1b      	ldr	r3, [r3, #32]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d006      	beq.n	8009652 <lwip_netconn_do_delconn+0xe2>
 8009644:	4b35      	ldr	r3, [pc, #212]	; (800971c <lwip_netconn_do_delconn+0x1ac>)
 8009646:	f240 4294 	movw	r2, #1172	; 0x494
 800964a:	4938      	ldr	r1, [pc, #224]	; (800972c <lwip_netconn_do_delconn+0x1bc>)
 800964c:	4835      	ldr	r0, [pc, #212]	; (8009724 <lwip_netconn_do_delconn+0x1b4>)
 800964e:	f00b ffd5 	bl	80155fc <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	2204      	movs	r2, #4
 8009658:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2203      	movs	r2, #3
 800965e:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	68fa      	ldr	r2, [r7, #12]
 8009666:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	2100      	movs	r1, #0
 800966e:	4618      	mov	r0, r3
 8009670:	f7ff fe18 	bl	80092a4 <lwip_netconn_do_close_internal>
 8009674:	4603      	mov	r3, r0
 8009676:	2b00      	cmp	r3, #0
 8009678:	d04b      	beq.n	8009712 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	785b      	ldrb	r3, [r3, #1]
 8009680:	2b04      	cmp	r3, #4
 8009682:	d006      	beq.n	8009692 <lwip_netconn_do_delconn+0x122>
 8009684:	4b25      	ldr	r3, [pc, #148]	; (800971c <lwip_netconn_do_delconn+0x1ac>)
 8009686:	f240 429a 	movw	r2, #1178	; 0x49a
 800968a:	4929      	ldr	r1, [pc, #164]	; (8009730 <lwip_netconn_do_delconn+0x1c0>)
 800968c:	4825      	ldr	r0, [pc, #148]	; (8009724 <lwip_netconn_do_delconn+0x1b4>)
 800968e:	f00b ffb5 	bl	80155fc <iprintf>
            UNLOCK_TCPIP_CORE();
 8009692:	4828      	ldr	r0, [pc, #160]	; (8009734 <lwip_netconn_do_delconn+0x1c4>)
 8009694:	f00b fdcb 	bl	801522e <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	330c      	adds	r3, #12
 800969e:	2100      	movs	r1, #0
 80096a0:	4618      	mov	r0, r3
 80096a2:	f00b fd2a 	bl	80150fa <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 80096a6:	4823      	ldr	r0, [pc, #140]	; (8009734 <lwip_netconn_do_delconn+0x1c4>)
 80096a8:	f00b fdb2 	bl	8015210 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	785b      	ldrb	r3, [r3, #1]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d02d      	beq.n	8009712 <lwip_netconn_do_delconn+0x1a2>
 80096b6:	4b19      	ldr	r3, [pc, #100]	; (800971c <lwip_netconn_do_delconn+0x1ac>)
 80096b8:	f240 429e 	movw	r2, #1182	; 0x49e
 80096bc:	491c      	ldr	r1, [pc, #112]	; (8009730 <lwip_netconn_do_delconn+0x1c0>)
 80096be:	4819      	ldr	r0, [pc, #100]	; (8009724 <lwip_netconn_do_delconn+0x1b4>)
 80096c0:	f00b ff9c 	bl	80155fc <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 80096c4:	e025      	b.n	8009712 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 80096c6:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	2200      	movs	r2, #0
 80096ce:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d007      	beq.n	80096ea <lwip_netconn_do_delconn+0x17a>
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e0:	68fa      	ldr	r2, [r7, #12]
 80096e2:	6810      	ldr	r0, [r2, #0]
 80096e4:	2200      	movs	r2, #0
 80096e6:	2100      	movs	r1, #0
 80096e8:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d007      	beq.n	8009704 <lwip_netconn_do_delconn+0x194>
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096fa:	68fa      	ldr	r2, [r7, #12]
 80096fc:	6810      	ldr	r0, [r2, #0]
 80096fe:	2200      	movs	r2, #0
 8009700:	2102      	movs	r1, #2
 8009702:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	330c      	adds	r3, #12
 800970a:	4618      	mov	r0, r3
 800970c:	f00b fd40 	bl	8015190 <sys_sem_valid>
 8009710:	e000      	b.n	8009714 <lwip_netconn_do_delconn+0x1a4>
          return;
 8009712:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8009714:	3710      	adds	r7, #16
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}
 800971a:	bf00      	nop
 800971c:	080168d4 	.word	0x080168d4
 8009720:	08016c44 	.word	0x08016c44
 8009724:	08016918 	.word	0x08016918
 8009728:	08016c58 	.word	0x08016c58
 800972c:	08016c78 	.word	0x08016c78
 8009730:	08016c94 	.word	0x08016c94
 8009734:	200080c0 	.word	0x200080c0

08009738 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b084      	sub	sp, #16
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d025      	beq.n	800979a <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009758:	2b10      	cmp	r3, #16
 800975a:	d00e      	beq.n	800977a <lwip_netconn_do_bind+0x42>
 800975c:	2b20      	cmp	r3, #32
 800975e:	d119      	bne.n	8009794 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	6858      	ldr	r0, [r3, #4]
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	6899      	ldr	r1, [r3, #8]
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	899b      	ldrh	r3, [r3, #12]
 800976e:	461a      	mov	r2, r3
 8009770:	f008 fff4 	bl	801275c <udp_bind>
 8009774:	4603      	mov	r3, r0
 8009776:	73fb      	strb	r3, [r7, #15]
        break;
 8009778:	e011      	b.n	800979e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	6858      	ldr	r0, [r3, #4]
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	6899      	ldr	r1, [r3, #8]
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	899b      	ldrh	r3, [r3, #12]
 8009788:	461a      	mov	r2, r3
 800978a:	f002 ff8b 	bl	800c6a4 <tcp_bind>
 800978e:	4603      	mov	r3, r0
 8009790:	73fb      	strb	r3, [r7, #15]
        break;
 8009792:	e004      	b.n	800979e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8009794:	23fa      	movs	r3, #250	; 0xfa
 8009796:	73fb      	strb	r3, [r7, #15]
        break;
 8009798:	e001      	b.n	800979e <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800979a:	23fa      	movs	r3, #250	; 0xfa
 800979c:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	7bfa      	ldrb	r2, [r7, #15]
 80097a2:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80097a4:	bf00      	nop
 80097a6:	3710      	adds	r7, #16
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b086      	sub	sp, #24
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d07f      	beq.n	80098c2 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80097cc:	2b10      	cmp	r3, #16
 80097ce:	d175      	bne.n	80098bc <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	785b      	ldrb	r3, [r3, #1]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d165      	bne.n	80098a6 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	7d1b      	ldrb	r3, [r3, #20]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d002      	beq.n	80097ec <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 80097e6:	23fa      	movs	r3, #250	; 0xfa
 80097e8:	72fb      	strb	r3, [r7, #11]
 80097ea:	e06c      	b.n	80098c6 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 80097ec:	23ff      	movs	r3, #255	; 0xff
 80097ee:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	f107 020b 	add.w	r2, r7, #11
 80097fa:	7cf9      	ldrb	r1, [r7, #19]
 80097fc:	4618      	mov	r0, r3
 80097fe:	f003 f809 	bl	800c814 <tcp_listen_with_backlog_and_err>
 8009802:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d05d      	beq.n	80098c6 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	3310      	adds	r3, #16
 8009810:	4618      	mov	r0, r3
 8009812:	f00b fc2f 	bl	8015074 <sys_mbox_valid>
 8009816:	4603      	mov	r3, r0
 8009818:	2b00      	cmp	r3, #0
 800981a:	d00b      	beq.n	8009834 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	3310      	adds	r3, #16
 8009822:	4618      	mov	r0, r3
 8009824:	f00b fbb2 	bl	8014f8c <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	3310      	adds	r3, #16
 800982e:	4618      	mov	r0, r3
 8009830:	f00b fc31 	bl	8015096 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 8009834:	2300      	movs	r3, #0
 8009836:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	3314      	adds	r3, #20
 800983e:	4618      	mov	r0, r3
 8009840:	f00b fc18 	bl	8015074 <sys_mbox_valid>
 8009844:	4603      	mov	r3, r0
 8009846:	2b00      	cmp	r3, #0
 8009848:	d108      	bne.n	800985c <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	3314      	adds	r3, #20
 8009850:	2106      	movs	r1, #6
 8009852:	4618      	mov	r0, r3
 8009854:	f00b fb80 	bl	8014f58 <sys_mbox_new>
 8009858:	4603      	mov	r3, r0
 800985a:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800985c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d118      	bne.n	8009896 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	2202      	movs	r2, #2
 800986a:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	68fa      	ldr	r2, [r7, #12]
 8009872:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	685a      	ldr	r2, [r3, #4]
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4619      	mov	r1, r3
 8009880:	4610      	mov	r0, r2
 8009882:	f003 ff91 	bl	800d7a8 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	4912      	ldr	r1, [pc, #72]	; (80098d8 <lwip_netconn_do_listen+0x12c>)
 800988e:	4618      	mov	r0, r3
 8009890:	f004 f802 	bl	800d898 <tcp_accept>
 8009894:	e017      	b.n	80098c6 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 8009896:	68f8      	ldr	r0, [r7, #12]
 8009898:	f002 fdb2 	bl	800c400 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	2200      	movs	r2, #0
 80098a2:	605a      	str	r2, [r3, #4]
 80098a4:	e00f      	b.n	80098c6 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	785b      	ldrb	r3, [r3, #1]
 80098ac:	2b02      	cmp	r3, #2
 80098ae:	d102      	bne.n	80098b6 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 80098b0:	2300      	movs	r3, #0
 80098b2:	72fb      	strb	r3, [r7, #11]
 80098b4:	e007      	b.n	80098c6 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 80098b6:	23f5      	movs	r3, #245	; 0xf5
 80098b8:	72fb      	strb	r3, [r7, #11]
 80098ba:	e004      	b.n	80098c6 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 80098bc:	23f0      	movs	r3, #240	; 0xf0
 80098be:	72fb      	strb	r3, [r7, #11]
 80098c0:	e001      	b.n	80098c6 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 80098c2:	23f5      	movs	r3, #245	; 0xf5
 80098c4:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 80098c6:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80098ce:	bf00      	nop
 80098d0:	3718      	adds	r7, #24
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	bf00      	nop
 80098d8:	08008dc1 	.word	0x08008dc1

080098dc <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b086      	sub	sp, #24
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	2200      	movs	r2, #0
 80098ec:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d022      	beq.n	800993e <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009902:	2b10      	cmp	r3, #16
 8009904:	d11b      	bne.n	800993e <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009912:	d202      	bcs.n	800991a <lwip_netconn_do_recv+0x3e>
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	b29b      	uxth	r3, r3
 8009918:	e001      	b.n	800991e <lwip_netconn_do_recv+0x42>
 800991a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800991e:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	89fa      	ldrh	r2, [r7, #14]
 8009928:	4611      	mov	r1, r2
 800992a:	4618      	mov	r0, r3
 800992c:	f003 f876 	bl	800ca1c <tcp_recved>
        remaining -= recved;
 8009930:	89fb      	ldrh	r3, [r7, #14]
 8009932:	697a      	ldr	r2, [r7, #20]
 8009934:	1ad3      	subs	r3, r2, r3
 8009936:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d1e6      	bne.n	800990c <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800993e:	bf00      	nop
 8009940:	3718      	adds	r7, #24
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
	...

08009948 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b088      	sub	sp, #32
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	460b      	mov	r3, r1
 8009952:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8009954:	2300      	movs	r3, #0
 8009956:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d106      	bne.n	800996c <lwip_netconn_do_writemore+0x24>
 800995e:	4b96      	ldr	r3, [pc, #600]	; (8009bb8 <lwip_netconn_do_writemore+0x270>)
 8009960:	f240 6273 	movw	r2, #1651	; 0x673
 8009964:	4995      	ldr	r1, [pc, #596]	; (8009bbc <lwip_netconn_do_writemore+0x274>)
 8009966:	4896      	ldr	r0, [pc, #600]	; (8009bc0 <lwip_netconn_do_writemore+0x278>)
 8009968:	f00b fe48 	bl	80155fc <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	785b      	ldrb	r3, [r3, #1]
 8009970:	2b01      	cmp	r3, #1
 8009972:	d006      	beq.n	8009982 <lwip_netconn_do_writemore+0x3a>
 8009974:	4b90      	ldr	r3, [pc, #576]	; (8009bb8 <lwip_netconn_do_writemore+0x270>)
 8009976:	f240 6274 	movw	r2, #1652	; 0x674
 800997a:	4992      	ldr	r1, [pc, #584]	; (8009bc4 <lwip_netconn_do_writemore+0x27c>)
 800997c:	4890      	ldr	r0, [pc, #576]	; (8009bc0 <lwip_netconn_do_writemore+0x278>)
 800997e:	f00b fe3d 	bl	80155fc <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6a1b      	ldr	r3, [r3, #32]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d106      	bne.n	8009998 <lwip_netconn_do_writemore+0x50>
 800998a:	4b8b      	ldr	r3, [pc, #556]	; (8009bb8 <lwip_netconn_do_writemore+0x270>)
 800998c:	f240 6275 	movw	r2, #1653	; 0x675
 8009990:	498d      	ldr	r1, [pc, #564]	; (8009bc8 <lwip_netconn_do_writemore+0x280>)
 8009992:	488b      	ldr	r0, [pc, #556]	; (8009bc0 <lwip_netconn_do_writemore+0x278>)
 8009994:	f00b fe32 	bl	80155fc <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d106      	bne.n	80099ae <lwip_netconn_do_writemore+0x66>
 80099a0:	4b85      	ldr	r3, [pc, #532]	; (8009bb8 <lwip_netconn_do_writemore+0x270>)
 80099a2:	f240 6276 	movw	r2, #1654	; 0x676
 80099a6:	4989      	ldr	r1, [pc, #548]	; (8009bcc <lwip_netconn_do_writemore+0x284>)
 80099a8:	4885      	ldr	r0, [pc, #532]	; (8009bc0 <lwip_netconn_do_writemore+0x278>)
 80099aa:	f00b fe27 	bl	80155fc <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6a1b      	ldr	r3, [r3, #32]
 80099b2:	699a      	ldr	r2, [r3, #24]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6a1b      	ldr	r3, [r3, #32]
 80099b8:	695b      	ldr	r3, [r3, #20]
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d306      	bcc.n	80099cc <lwip_netconn_do_writemore+0x84>
 80099be:	4b7e      	ldr	r3, [pc, #504]	; (8009bb8 <lwip_netconn_do_writemore+0x270>)
 80099c0:	f240 6277 	movw	r2, #1655	; 0x677
 80099c4:	4982      	ldr	r1, [pc, #520]	; (8009bd0 <lwip_netconn_do_writemore+0x288>)
 80099c6:	487e      	ldr	r0, [pc, #504]	; (8009bc0 <lwip_netconn_do_writemore+0x278>)
 80099c8:	f00b fe18 	bl	80155fc <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6a1b      	ldr	r3, [r3, #32]
 80099d0:	899b      	ldrh	r3, [r3, #12]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d106      	bne.n	80099e4 <lwip_netconn_do_writemore+0x9c>
 80099d6:	4b78      	ldr	r3, [pc, #480]	; (8009bb8 <lwip_netconn_do_writemore+0x270>)
 80099d8:	f240 6279 	movw	r2, #1657	; 0x679
 80099dc:	497d      	ldr	r1, [pc, #500]	; (8009bd4 <lwip_netconn_do_writemore+0x28c>)
 80099de:	4878      	ldr	r0, [pc, #480]	; (8009bc0 <lwip_netconn_do_writemore+0x278>)
 80099e0:	f00b fe0c 	bl	80155fc <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6a1b      	ldr	r3, [r3, #32]
 80099e8:	7f1b      	ldrb	r3, [r3, #28]
 80099ea:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	7f1b      	ldrb	r3, [r3, #28]
 80099f0:	f003 0302 	and.w	r3, r3, #2
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d104      	bne.n	8009a02 <lwip_netconn_do_writemore+0xba>
 80099f8:	7ebb      	ldrb	r3, [r7, #26]
 80099fa:	f003 0304 	and.w	r3, r3, #4
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d001      	beq.n	8009a06 <lwip_netconn_do_writemore+0xbe>
 8009a02:	2301      	movs	r3, #1
 8009a04:	e000      	b.n	8009a08 <lwip_netconn_do_writemore+0xc0>
 8009a06:	2300      	movs	r3, #0
 8009a08:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6a1b      	ldr	r3, [r3, #32]
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	681a      	ldr	r2, [r3, #0]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6a1b      	ldr	r3, [r3, #32]
 8009a16:	691b      	ldr	r3, [r3, #16]
 8009a18:	4413      	add	r3, r2
 8009a1a:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6a1b      	ldr	r3, [r3, #32]
 8009a20:	689b      	ldr	r3, [r3, #8]
 8009a22:	685a      	ldr	r2, [r3, #4]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6a1b      	ldr	r3, [r3, #32]
 8009a28:	691b      	ldr	r3, [r3, #16]
 8009a2a:	1ad3      	subs	r3, r2, r3
 8009a2c:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a34:	d307      	bcc.n	8009a46 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8009a36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009a3a:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009a3c:	7ebb      	ldrb	r3, [r7, #26]
 8009a3e:	f043 0302 	orr.w	r3, r3, #2
 8009a42:	76bb      	strb	r3, [r7, #26]
 8009a44:	e001      	b.n	8009a4a <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009a52:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8009a54:	89fa      	ldrh	r2, [r7, #14]
 8009a56:	8bbb      	ldrh	r3, [r7, #28]
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d216      	bcs.n	8009a8a <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8009a5c:	89fb      	ldrh	r3, [r7, #14]
 8009a5e:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8009a60:	7e3b      	ldrb	r3, [r7, #24]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d00d      	beq.n	8009a82 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8009a66:	8bbb      	ldrh	r3, [r7, #28]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d10e      	bne.n	8009a8a <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6a1b      	ldr	r3, [r3, #32]
 8009a70:	699b      	ldr	r3, [r3, #24]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d102      	bne.n	8009a7c <lwip_netconn_do_writemore+0x134>
 8009a76:	f06f 0306 	mvn.w	r3, #6
 8009a7a:	e000      	b.n	8009a7e <lwip_netconn_do_writemore+0x136>
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8009a80:	e07d      	b.n	8009b7e <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8009a82:	7ebb      	ldrb	r3, [r7, #26]
 8009a84:	f043 0302 	orr.w	r3, r3, #2
 8009a88:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6a1b      	ldr	r3, [r3, #32]
 8009a8e:	691a      	ldr	r2, [r3, #16]
 8009a90:	8bbb      	ldrh	r3, [r7, #28]
 8009a92:	441a      	add	r2, r3
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6a1b      	ldr	r3, [r3, #32]
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	685b      	ldr	r3, [r3, #4]
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d906      	bls.n	8009aae <lwip_netconn_do_writemore+0x166>
 8009aa0:	4b45      	ldr	r3, [pc, #276]	; (8009bb8 <lwip_netconn_do_writemore+0x270>)
 8009aa2:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8009aa6:	494c      	ldr	r1, [pc, #304]	; (8009bd8 <lwip_netconn_do_writemore+0x290>)
 8009aa8:	4845      	ldr	r0, [pc, #276]	; (8009bc0 <lwip_netconn_do_writemore+0x278>)
 8009aaa:	f00b fda7 	bl	80155fc <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8009aae:	8bbb      	ldrh	r3, [r7, #28]
 8009ab0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d103      	bne.n	8009ac0 <lwip_netconn_do_writemore+0x178>
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009abe:	d209      	bcs.n	8009ad4 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8009ac4:	8bba      	ldrh	r2, [r7, #28]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d10b      	bne.n	8009ae2 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6a1b      	ldr	r3, [r3, #32]
 8009ace:	899b      	ldrh	r3, [r3, #12]
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d906      	bls.n	8009ae2 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009ad8:	7ebb      	ldrb	r3, [r7, #26]
 8009ada:	f043 0302 	orr.w	r3, r3, #2
 8009ade:	76bb      	strb	r3, [r7, #26]
 8009ae0:	e001      	b.n	8009ae6 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6858      	ldr	r0, [r3, #4]
 8009aea:	7ebb      	ldrb	r3, [r7, #26]
 8009aec:	8bba      	ldrh	r2, [r7, #28]
 8009aee:	6979      	ldr	r1, [r7, #20]
 8009af0:	f006 fd98 	bl	8010624 <tcp_write>
 8009af4:	4603      	mov	r3, r0
 8009af6:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8009af8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d12c      	bne.n	8009b5a <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6a1b      	ldr	r3, [r3, #32]
 8009b04:	6999      	ldr	r1, [r3, #24]
 8009b06:	8bba      	ldrh	r2, [r7, #28]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6a1b      	ldr	r3, [r3, #32]
 8009b0c:	440a      	add	r2, r1
 8009b0e:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6a1b      	ldr	r3, [r3, #32]
 8009b14:	6919      	ldr	r1, [r3, #16]
 8009b16:	8bba      	ldrh	r2, [r7, #28]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6a1b      	ldr	r3, [r3, #32]
 8009b1c:	440a      	add	r2, r1
 8009b1e:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6a1b      	ldr	r3, [r3, #32]
 8009b24:	691a      	ldr	r2, [r3, #16]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6a1b      	ldr	r3, [r3, #32]
 8009b2a:	689b      	ldr	r3, [r3, #8]
 8009b2c:	685b      	ldr	r3, [r3, #4]
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d113      	bne.n	8009b5a <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6a1b      	ldr	r3, [r3, #32]
 8009b36:	899a      	ldrh	r2, [r3, #12]
 8009b38:	3a01      	subs	r2, #1
 8009b3a:	b292      	uxth	r2, r2
 8009b3c:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6a1b      	ldr	r3, [r3, #32]
 8009b42:	899b      	ldrh	r3, [r3, #12]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d008      	beq.n	8009b5a <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6a1b      	ldr	r3, [r3, #32]
 8009b4c:	689a      	ldr	r2, [r3, #8]
 8009b4e:	3208      	adds	r2, #8
 8009b50:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6a1b      	ldr	r3, [r3, #32]
 8009b56:	2200      	movs	r2, #0
 8009b58:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8009b5a:	7e7b      	ldrb	r3, [r7, #25]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d004      	beq.n	8009b6a <lwip_netconn_do_writemore+0x222>
 8009b60:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	f43f af50 	beq.w	8009a0a <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8009b6a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d004      	beq.n	8009b7c <lwip_netconn_do_writemore+0x234>
 8009b72:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009b76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b7a:	d146      	bne.n	8009c0a <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8009b7c:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8009b7e:	7e3b      	ldrb	r3, [r7, #24]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d02b      	beq.n	8009bdc <lwip_netconn_do_writemore+0x294>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6a1b      	ldr	r3, [r3, #32]
 8009b88:	699a      	ldr	r2, [r3, #24]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6a1b      	ldr	r3, [r3, #32]
 8009b8e:	695b      	ldr	r3, [r3, #20]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d223      	bcs.n	8009bdc <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d005      	beq.n	8009ba8 <lwip_netconn_do_writemore+0x260>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	2103      	movs	r1, #3
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	7f1b      	ldrb	r3, [r3, #28]
 8009bac:	f043 0310 	orr.w	r3, r3, #16
 8009bb0:	b2da      	uxtb	r2, r3
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	771a      	strb	r2, [r3, #28]
 8009bb6:	e028      	b.n	8009c0a <lwip_netconn_do_writemore+0x2c2>
 8009bb8:	080168d4 	.word	0x080168d4
 8009bbc:	08016a2c 	.word	0x08016a2c
 8009bc0:	08016918 	.word	0x08016918
 8009bc4:	08016d34 	.word	0x08016d34
 8009bc8:	08016a3c 	.word	0x08016a3c
 8009bcc:	08016d54 	.word	0x08016d54
 8009bd0:	08016d6c 	.word	0x08016d6c
 8009bd4:	08016dac 	.word	0x08016dac
 8009bd8:	08016dd4 	.word	0x08016dd4
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009be4:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009be8:	d305      	bcc.n	8009bf6 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009bf2:	2b04      	cmp	r3, #4
 8009bf4:	d909      	bls.n	8009c0a <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d005      	beq.n	8009c0a <lwip_netconn_do_writemore+0x2c2>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c02:	2200      	movs	r2, #0
 8009c04:	2103      	movs	r1, #3
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8009c0a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d11d      	bne.n	8009c4e <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6a1b      	ldr	r3, [r3, #32]
 8009c16:	699a      	ldr	r2, [r3, #24]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6a1b      	ldr	r3, [r3, #32]
 8009c1c:	695b      	ldr	r3, [r3, #20]
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d002      	beq.n	8009c28 <lwip_netconn_do_writemore+0x2e0>
 8009c22:	7e3b      	ldrb	r3, [r7, #24]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d001      	beq.n	8009c2c <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	4618      	mov	r0, r3
 8009c32:	f007 fae1 	bl	80111f8 <tcp_output>
 8009c36:	4603      	mov	r3, r0
 8009c38:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8009c3a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8009c3e:	f113 0f04 	cmn.w	r3, #4
 8009c42:	d12c      	bne.n	8009c9e <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009c44:	7b3b      	ldrb	r3, [r7, #12]
 8009c46:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	76fb      	strb	r3, [r7, #27]
 8009c4c:	e027      	b.n	8009c9e <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8009c4e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009c52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c56:	d120      	bne.n	8009c9a <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f007 facb 	bl	80111f8 <tcp_output>
 8009c62:	4603      	mov	r3, r0
 8009c64:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8009c66:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009c6a:	f113 0f04 	cmn.w	r3, #4
 8009c6e:	d104      	bne.n	8009c7a <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009c70:	7b7b      	ldrb	r3, [r7, #13]
 8009c72:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009c74:	2301      	movs	r3, #1
 8009c76:	76fb      	strb	r3, [r7, #27]
 8009c78:	e011      	b.n	8009c9e <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8009c7a:	7e3b      	ldrb	r3, [r7, #24]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d00e      	beq.n	8009c9e <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6a1b      	ldr	r3, [r3, #32]
 8009c84:	699b      	ldr	r3, [r3, #24]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d102      	bne.n	8009c90 <lwip_netconn_do_writemore+0x348>
 8009c8a:	f06f 0306 	mvn.w	r3, #6
 8009c8e:	e000      	b.n	8009c92 <lwip_netconn_do_writemore+0x34a>
 8009c90:	2300      	movs	r3, #0
 8009c92:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009c94:	2301      	movs	r3, #1
 8009c96:	76fb      	strb	r3, [r7, #27]
 8009c98:	e001      	b.n	8009c9e <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8009c9e:	7efb      	ldrb	r3, [r7, #27]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d015      	beq.n	8009cd0 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6a1b      	ldr	r3, [r3, #32]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	330c      	adds	r3, #12
 8009cac:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6a1b      	ldr	r3, [r3, #32]
 8009cb2:	7ffa      	ldrb	r2, [r7, #31]
 8009cb4:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009cc2:	78fb      	ldrb	r3, [r7, #3]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d006      	beq.n	8009cd6 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8009cc8:	68b8      	ldr	r0, [r7, #8]
 8009cca:	f00b fa47 	bl	801515c <sys_sem_signal>
 8009cce:	e002      	b.n	8009cd6 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8009cd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009cd4:	e000      	b.n	8009cd8 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8009cd6:	2300      	movs	r3, #0
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3720      	adds	r7, #32
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b084      	sub	sp, #16
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f7fe fd20 	bl	8008736 <netconn_err>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8009cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d166      	bne.n	8009dd0 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d0c:	2b10      	cmp	r3, #16
 8009d0e:	d15d      	bne.n	8009dcc <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	785b      	ldrb	r3, [r3, #1]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d002      	beq.n	8009d20 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8009d1a:	23fb      	movs	r3, #251	; 0xfb
 8009d1c:	73fb      	strb	r3, [r7, #15]
 8009d1e:	e057      	b.n	8009dd0 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d04d      	beq.n	8009dc6 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	2201      	movs	r2, #1
 8009d30:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	6a1b      	ldr	r3, [r3, #32]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d006      	beq.n	8009d4a <lwip_netconn_do_write+0x6a>
 8009d3c:	4b28      	ldr	r3, [pc, #160]	; (8009de0 <lwip_netconn_do_write+0x100>)
 8009d3e:	f240 7223 	movw	r2, #1827	; 0x723
 8009d42:	4928      	ldr	r1, [pc, #160]	; (8009de4 <lwip_netconn_do_write+0x104>)
 8009d44:	4828      	ldr	r0, [pc, #160]	; (8009de8 <lwip_netconn_do_write+0x108>)
 8009d46:	f00b fc59 	bl	80155fc <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	695b      	ldr	r3, [r3, #20]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d106      	bne.n	8009d60 <lwip_netconn_do_write+0x80>
 8009d52:	4b23      	ldr	r3, [pc, #140]	; (8009de0 <lwip_netconn_do_write+0x100>)
 8009d54:	f240 7224 	movw	r2, #1828	; 0x724
 8009d58:	4924      	ldr	r1, [pc, #144]	; (8009dec <lwip_netconn_do_write+0x10c>)
 8009d5a:	4823      	ldr	r0, [pc, #140]	; (8009de8 <lwip_netconn_do_write+0x108>)
 8009d5c:	f00b fc4e 	bl	80155fc <iprintf>
        msg->conn->current_msg = msg;
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	68ba      	ldr	r2, [r7, #8]
 8009d66:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	2100      	movs	r1, #0
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f7ff fdea 	bl	8009948 <lwip_netconn_do_writemore>
 8009d74:	4603      	mov	r3, r0
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d02e      	beq.n	8009dd8 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	785b      	ldrb	r3, [r3, #1]
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d006      	beq.n	8009d92 <lwip_netconn_do_write+0xb2>
 8009d84:	4b16      	ldr	r3, [pc, #88]	; (8009de0 <lwip_netconn_do_write+0x100>)
 8009d86:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8009d8a:	4919      	ldr	r1, [pc, #100]	; (8009df0 <lwip_netconn_do_write+0x110>)
 8009d8c:	4816      	ldr	r0, [pc, #88]	; (8009de8 <lwip_netconn_do_write+0x108>)
 8009d8e:	f00b fc35 	bl	80155fc <iprintf>
          UNLOCK_TCPIP_CORE();
 8009d92:	4818      	ldr	r0, [pc, #96]	; (8009df4 <lwip_netconn_do_write+0x114>)
 8009d94:	f00b fa4b 	bl	801522e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	330c      	adds	r3, #12
 8009d9e:	2100      	movs	r1, #0
 8009da0:	4618      	mov	r0, r3
 8009da2:	f00b f9aa 	bl	80150fa <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8009da6:	4813      	ldr	r0, [pc, #76]	; (8009df4 <lwip_netconn_do_write+0x114>)
 8009da8:	f00b fa32 	bl	8015210 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	785b      	ldrb	r3, [r3, #1]
 8009db2:	2b01      	cmp	r3, #1
 8009db4:	d110      	bne.n	8009dd8 <lwip_netconn_do_write+0xf8>
 8009db6:	4b0a      	ldr	r3, [pc, #40]	; (8009de0 <lwip_netconn_do_write+0x100>)
 8009db8:	f240 722c 	movw	r2, #1836	; 0x72c
 8009dbc:	490c      	ldr	r1, [pc, #48]	; (8009df0 <lwip_netconn_do_write+0x110>)
 8009dbe:	480a      	ldr	r0, [pc, #40]	; (8009de8 <lwip_netconn_do_write+0x108>)
 8009dc0:	f00b fc1c 	bl	80155fc <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8009dc4:	e008      	b.n	8009dd8 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8009dc6:	23f5      	movs	r3, #245	; 0xf5
 8009dc8:	73fb      	strb	r3, [r7, #15]
 8009dca:	e001      	b.n	8009dd0 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8009dcc:	23fa      	movs	r3, #250	; 0xfa
 8009dce:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	7bfa      	ldrb	r2, [r7, #15]
 8009dd4:	711a      	strb	r2, [r3, #4]
 8009dd6:	e000      	b.n	8009dda <lwip_netconn_do_write+0xfa>
        return;
 8009dd8:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8009dda:	3710      	adds	r7, #16
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}
 8009de0:	080168d4 	.word	0x080168d4
 8009de4:	08016c78 	.word	0x08016c78
 8009de8:	08016918 	.word	0x08016918
 8009dec:	08016e00 	.word	0x08016e00
 8009df0:	08016c94 	.word	0x08016c94
 8009df4:	200080c0 	.word	0x200080c0

08009df8 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b084      	sub	sp, #16
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	785b      	ldrb	r3, [r3, #1]
 8009e0a:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d069      	beq.n	8009eea <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	781b      	ldrb	r3, [r3, #0]
 8009e1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8009e20:	2b10      	cmp	r3, #16
 8009e22:	d162      	bne.n	8009eea <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009e28:	2b03      	cmp	r3, #3
 8009e2a:	d002      	beq.n	8009e32 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009e2c:	7afb      	ldrb	r3, [r7, #11]
 8009e2e:	2b02      	cmp	r3, #2
 8009e30:	d05b      	beq.n	8009eea <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8009e32:	7afb      	ldrb	r3, [r7, #11]
 8009e34:	2b03      	cmp	r3, #3
 8009e36:	d103      	bne.n	8009e40 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	22f5      	movs	r2, #245	; 0xf5
 8009e3c:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8009e3e:	e059      	b.n	8009ef4 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8009e40:	7afb      	ldrb	r3, [r7, #11]
 8009e42:	2b01      	cmp	r3, #1
 8009e44:	d103      	bne.n	8009e4e <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	22fb      	movs	r2, #251	; 0xfb
 8009e4a:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8009e4c:	e052      	b.n	8009ef4 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	7a1b      	ldrb	r3, [r3, #8]
 8009e52:	f003 0301 	and.w	r3, r3, #1
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d004      	beq.n	8009e64 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f7ff f9a2 	bl	80091a8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	6a1b      	ldr	r3, [r3, #32]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d006      	beq.n	8009e7c <lwip_netconn_do_close+0x84>
 8009e6e:	4b23      	ldr	r3, [pc, #140]	; (8009efc <lwip_netconn_do_close+0x104>)
 8009e70:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8009e74:	4922      	ldr	r1, [pc, #136]	; (8009f00 <lwip_netconn_do_close+0x108>)
 8009e76:	4823      	ldr	r0, [pc, #140]	; (8009f04 <lwip_netconn_do_close+0x10c>)
 8009e78:	f00b fbc0 	bl	80155fc <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	2204      	movs	r2, #4
 8009e82:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	68fa      	ldr	r2, [r7, #12]
 8009e8a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	2100      	movs	r1, #0
 8009e92:	4618      	mov	r0, r3
 8009e94:	f7ff fa06 	bl	80092a4 <lwip_netconn_do_close_internal>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d029      	beq.n	8009ef2 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	785b      	ldrb	r3, [r3, #1]
 8009ea4:	2b04      	cmp	r3, #4
 8009ea6:	d006      	beq.n	8009eb6 <lwip_netconn_do_close+0xbe>
 8009ea8:	4b14      	ldr	r3, [pc, #80]	; (8009efc <lwip_netconn_do_close+0x104>)
 8009eaa:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8009eae:	4916      	ldr	r1, [pc, #88]	; (8009f08 <lwip_netconn_do_close+0x110>)
 8009eb0:	4814      	ldr	r0, [pc, #80]	; (8009f04 <lwip_netconn_do_close+0x10c>)
 8009eb2:	f00b fba3 	bl	80155fc <iprintf>
        UNLOCK_TCPIP_CORE();
 8009eb6:	4815      	ldr	r0, [pc, #84]	; (8009f0c <lwip_netconn_do_close+0x114>)
 8009eb8:	f00b f9b9 	bl	801522e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	330c      	adds	r3, #12
 8009ec2:	2100      	movs	r1, #0
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f00b f918 	bl	80150fa <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8009eca:	4810      	ldr	r0, [pc, #64]	; (8009f0c <lwip_netconn_do_close+0x114>)
 8009ecc:	f00b f9a0 	bl	8015210 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	785b      	ldrb	r3, [r3, #1]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d00b      	beq.n	8009ef2 <lwip_netconn_do_close+0xfa>
 8009eda:	4b08      	ldr	r3, [pc, #32]	; (8009efc <lwip_netconn_do_close+0x104>)
 8009edc:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8009ee0:	4909      	ldr	r1, [pc, #36]	; (8009f08 <lwip_netconn_do_close+0x110>)
 8009ee2:	4808      	ldr	r0, [pc, #32]	; (8009f04 <lwip_netconn_do_close+0x10c>)
 8009ee4:	f00b fb8a 	bl	80155fc <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8009ee8:	e003      	b.n	8009ef2 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	22f5      	movs	r2, #245	; 0xf5
 8009eee:	711a      	strb	r2, [r3, #4]
 8009ef0:	e000      	b.n	8009ef4 <lwip_netconn_do_close+0xfc>
      return;
 8009ef2:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009ef4:	3710      	adds	r7, #16
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	bf00      	nop
 8009efc:	080168d4 	.word	0x080168d4
 8009f00:	08016c78 	.word	0x08016c78
 8009f04:	08016918 	.word	0x08016918
 8009f08:	08016c94 	.word	0x08016c94
 8009f0c:	200080c0 	.word	0x200080c0

08009f10 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b082      	sub	sp, #8
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d013      	beq.n	8009f46 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d00b      	beq.n	8009f3e <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f001 fdbe 	bl	800baac <pbuf_free>
      buf->p = buf->ptr = NULL;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	605a      	str	r2, [r3, #4]
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	685a      	ldr	r2, [r3, #4]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8009f3e:	6879      	ldr	r1, [r7, #4]
 8009f40:	2006      	movs	r0, #6
 8009f42:	f000 ff0f 	bl	800ad64 <memp_free>
  }
}
 8009f46:	bf00      	nop
 8009f48:	3708      	adds	r7, #8
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
	...

08009f50 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b084      	sub	sp, #16
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	60f8      	str	r0, [r7, #12]
 8009f58:	60b9      	str	r1, [r7, #8]
 8009f5a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d108      	bne.n	8009f74 <netbuf_data+0x24>
 8009f62:	4b1b      	ldr	r3, [pc, #108]	; (8009fd0 <netbuf_data+0x80>)
 8009f64:	22c6      	movs	r2, #198	; 0xc6
 8009f66:	491b      	ldr	r1, [pc, #108]	; (8009fd4 <netbuf_data+0x84>)
 8009f68:	481b      	ldr	r0, [pc, #108]	; (8009fd8 <netbuf_data+0x88>)
 8009f6a:	f00b fb47 	bl	80155fc <iprintf>
 8009f6e:	f06f 030f 	mvn.w	r3, #15
 8009f72:	e029      	b.n	8009fc8 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d108      	bne.n	8009f8c <netbuf_data+0x3c>
 8009f7a:	4b15      	ldr	r3, [pc, #84]	; (8009fd0 <netbuf_data+0x80>)
 8009f7c:	22c7      	movs	r2, #199	; 0xc7
 8009f7e:	4917      	ldr	r1, [pc, #92]	; (8009fdc <netbuf_data+0x8c>)
 8009f80:	4815      	ldr	r0, [pc, #84]	; (8009fd8 <netbuf_data+0x88>)
 8009f82:	f00b fb3b 	bl	80155fc <iprintf>
 8009f86:	f06f 030f 	mvn.w	r3, #15
 8009f8a:	e01d      	b.n	8009fc8 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d108      	bne.n	8009fa4 <netbuf_data+0x54>
 8009f92:	4b0f      	ldr	r3, [pc, #60]	; (8009fd0 <netbuf_data+0x80>)
 8009f94:	22c8      	movs	r2, #200	; 0xc8
 8009f96:	4912      	ldr	r1, [pc, #72]	; (8009fe0 <netbuf_data+0x90>)
 8009f98:	480f      	ldr	r0, [pc, #60]	; (8009fd8 <netbuf_data+0x88>)
 8009f9a:	f00b fb2f 	bl	80155fc <iprintf>
 8009f9e:	f06f 030f 	mvn.w	r3, #15
 8009fa2:	e011      	b.n	8009fc8 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d102      	bne.n	8009fb2 <netbuf_data+0x62>
    return ERR_BUF;
 8009fac:	f06f 0301 	mvn.w	r3, #1
 8009fb0:	e00a      	b.n	8009fc8 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	685a      	ldr	r2, [r3, #4]
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	895a      	ldrh	r2, [r3, #10]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8009fc6:	2300      	movs	r3, #0
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3710      	adds	r7, #16
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}
 8009fd0:	08016e2c 	.word	0x08016e2c
 8009fd4:	08016f34 	.word	0x08016f34
 8009fd8:	08016e7c 	.word	0x08016e7c
 8009fdc:	08016f50 	.word	0x08016f50
 8009fe0:	08016f70 	.word	0x08016f70

08009fe4 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8009fee:	f008 f9bb 	bl	8012368 <sys_timeouts_sleeptime>
 8009ff2:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ffa:	d10b      	bne.n	800a014 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8009ffc:	4813      	ldr	r0, [pc, #76]	; (800a04c <tcpip_timeouts_mbox_fetch+0x68>)
 8009ffe:	f00b f916 	bl	801522e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a002:	2200      	movs	r2, #0
 800a004:	6839      	ldr	r1, [r7, #0]
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f00a ffec 	bl	8014fe4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800a00c:	480f      	ldr	r0, [pc, #60]	; (800a04c <tcpip_timeouts_mbox_fetch+0x68>)
 800a00e:	f00b f8ff 	bl	8015210 <sys_mutex_lock>
    return;
 800a012:	e018      	b.n	800a046 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d102      	bne.n	800a020 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800a01a:	f008 f96b 	bl	80122f4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a01e:	e7e6      	b.n	8009fee <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800a020:	480a      	ldr	r0, [pc, #40]	; (800a04c <tcpip_timeouts_mbox_fetch+0x68>)
 800a022:	f00b f904 	bl	801522e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	6839      	ldr	r1, [r7, #0]
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f00a ffda 	bl	8014fe4 <sys_arch_mbox_fetch>
 800a030:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800a032:	4806      	ldr	r0, [pc, #24]	; (800a04c <tcpip_timeouts_mbox_fetch+0x68>)
 800a034:	f00b f8ec 	bl	8015210 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a03e:	d102      	bne.n	800a046 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800a040:	f008 f958 	bl	80122f4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a044:	e7d3      	b.n	8009fee <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800a046:	3710      	adds	r7, #16
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}
 800a04c:	200080c0 	.word	0x200080c0

0800a050 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b084      	sub	sp, #16
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800a058:	4810      	ldr	r0, [pc, #64]	; (800a09c <tcpip_thread+0x4c>)
 800a05a:	f00b f8d9 	bl	8015210 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800a05e:	4b10      	ldr	r3, [pc, #64]	; (800a0a0 <tcpip_thread+0x50>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d005      	beq.n	800a072 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800a066:	4b0e      	ldr	r3, [pc, #56]	; (800a0a0 <tcpip_thread+0x50>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4a0e      	ldr	r2, [pc, #56]	; (800a0a4 <tcpip_thread+0x54>)
 800a06c:	6812      	ldr	r2, [r2, #0]
 800a06e:	4610      	mov	r0, r2
 800a070:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a072:	f107 030c 	add.w	r3, r7, #12
 800a076:	4619      	mov	r1, r3
 800a078:	480b      	ldr	r0, [pc, #44]	; (800a0a8 <tcpip_thread+0x58>)
 800a07a:	f7ff ffb3 	bl	8009fe4 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d106      	bne.n	800a092 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a084:	4b09      	ldr	r3, [pc, #36]	; (800a0ac <tcpip_thread+0x5c>)
 800a086:	2291      	movs	r2, #145	; 0x91
 800a088:	4909      	ldr	r1, [pc, #36]	; (800a0b0 <tcpip_thread+0x60>)
 800a08a:	480a      	ldr	r0, [pc, #40]	; (800a0b4 <tcpip_thread+0x64>)
 800a08c:	f00b fab6 	bl	80155fc <iprintf>
      continue;
 800a090:	e003      	b.n	800a09a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	4618      	mov	r0, r3
 800a096:	f000 f80f 	bl	800a0b8 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a09a:	e7ea      	b.n	800a072 <tcpip_thread+0x22>
 800a09c:	200080c0 	.word	0x200080c0
 800a0a0:	20004a7c 	.word	0x20004a7c
 800a0a4:	20004a80 	.word	0x20004a80
 800a0a8:	20004a84 	.word	0x20004a84
 800a0ac:	08016fc4 	.word	0x08016fc4
 800a0b0:	08016ff4 	.word	0x08016ff4
 800a0b4:	08017014 	.word	0x08017014

0800a0b8 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b082      	sub	sp, #8
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	781b      	ldrb	r3, [r3, #0]
 800a0c4:	2b02      	cmp	r3, #2
 800a0c6:	d026      	beq.n	800a116 <tcpip_thread_handle_msg+0x5e>
 800a0c8:	2b02      	cmp	r3, #2
 800a0ca:	dc2b      	bgt.n	800a124 <tcpip_thread_handle_msg+0x6c>
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d002      	beq.n	800a0d6 <tcpip_thread_handle_msg+0x1e>
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d015      	beq.n	800a100 <tcpip_thread_handle_msg+0x48>
 800a0d4:	e026      	b.n	800a124 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	68db      	ldr	r3, [r3, #12]
 800a0da:	687a      	ldr	r2, [r7, #4]
 800a0dc:	6850      	ldr	r0, [r2, #4]
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	6892      	ldr	r2, [r2, #8]
 800a0e2:	4611      	mov	r1, r2
 800a0e4:	4798      	blx	r3
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d004      	beq.n	800a0f6 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f001 fcdb 	bl	800baac <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a0f6:	6879      	ldr	r1, [r7, #4]
 800a0f8:	2009      	movs	r0, #9
 800a0fa:	f000 fe33 	bl	800ad64 <memp_free>
      break;
 800a0fe:	e018      	b.n	800a132 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	6892      	ldr	r2, [r2, #8]
 800a108:	4610      	mov	r0, r2
 800a10a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800a10c:	6879      	ldr	r1, [r7, #4]
 800a10e:	2008      	movs	r0, #8
 800a110:	f000 fe28 	bl	800ad64 <memp_free>
      break;
 800a114:	e00d      	b.n	800a132 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	687a      	ldr	r2, [r7, #4]
 800a11c:	6892      	ldr	r2, [r2, #8]
 800a11e:	4610      	mov	r0, r2
 800a120:	4798      	blx	r3
      break;
 800a122:	e006      	b.n	800a132 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a124:	4b05      	ldr	r3, [pc, #20]	; (800a13c <tcpip_thread_handle_msg+0x84>)
 800a126:	22cf      	movs	r2, #207	; 0xcf
 800a128:	4905      	ldr	r1, [pc, #20]	; (800a140 <tcpip_thread_handle_msg+0x88>)
 800a12a:	4806      	ldr	r0, [pc, #24]	; (800a144 <tcpip_thread_handle_msg+0x8c>)
 800a12c:	f00b fa66 	bl	80155fc <iprintf>
      break;
 800a130:	bf00      	nop
  }
}
 800a132:	bf00      	nop
 800a134:	3708      	adds	r7, #8
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	08016fc4 	.word	0x08016fc4
 800a140:	08016ff4 	.word	0x08016ff4
 800a144:	08017014 	.word	0x08017014

0800a148 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b086      	sub	sp, #24
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	60f8      	str	r0, [r7, #12]
 800a150:	60b9      	str	r1, [r7, #8]
 800a152:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a154:	481a      	ldr	r0, [pc, #104]	; (800a1c0 <tcpip_inpkt+0x78>)
 800a156:	f00a ff8d 	bl	8015074 <sys_mbox_valid>
 800a15a:	4603      	mov	r3, r0
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d105      	bne.n	800a16c <tcpip_inpkt+0x24>
 800a160:	4b18      	ldr	r3, [pc, #96]	; (800a1c4 <tcpip_inpkt+0x7c>)
 800a162:	22fc      	movs	r2, #252	; 0xfc
 800a164:	4918      	ldr	r1, [pc, #96]	; (800a1c8 <tcpip_inpkt+0x80>)
 800a166:	4819      	ldr	r0, [pc, #100]	; (800a1cc <tcpip_inpkt+0x84>)
 800a168:	f00b fa48 	bl	80155fc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800a16c:	2009      	movs	r0, #9
 800a16e:	f000 fda7 	bl	800acc0 <memp_malloc>
 800a172:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d102      	bne.n	800a180 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800a17a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a17e:	e01a      	b.n	800a1b6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	2200      	movs	r2, #0
 800a184:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	68fa      	ldr	r2, [r7, #12]
 800a18a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	68ba      	ldr	r2, [r7, #8]
 800a190:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	687a      	ldr	r2, [r7, #4]
 800a196:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a198:	6979      	ldr	r1, [r7, #20]
 800a19a:	4809      	ldr	r0, [pc, #36]	; (800a1c0 <tcpip_inpkt+0x78>)
 800a19c:	f00a ff08 	bl	8014fb0 <sys_mbox_trypost>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d006      	beq.n	800a1b4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a1a6:	6979      	ldr	r1, [r7, #20]
 800a1a8:	2009      	movs	r0, #9
 800a1aa:	f000 fddb 	bl	800ad64 <memp_free>
    return ERR_MEM;
 800a1ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a1b2:	e000      	b.n	800a1b6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800a1b4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3718      	adds	r7, #24
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	20004a84 	.word	0x20004a84
 800a1c4:	08016fc4 	.word	0x08016fc4
 800a1c8:	0801703c 	.word	0x0801703c
 800a1cc:	08017014 	.word	0x08017014

0800a1d0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b082      	sub	sp, #8
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a1e0:	f003 0318 	and.w	r3, r3, #24
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d006      	beq.n	800a1f6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800a1e8:	4a08      	ldr	r2, [pc, #32]	; (800a20c <tcpip_input+0x3c>)
 800a1ea:	6839      	ldr	r1, [r7, #0]
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f7ff ffab 	bl	800a148 <tcpip_inpkt>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	e005      	b.n	800a202 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800a1f6:	4a06      	ldr	r2, [pc, #24]	; (800a210 <tcpip_input+0x40>)
 800a1f8:	6839      	ldr	r1, [r7, #0]
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f7ff ffa4 	bl	800a148 <tcpip_inpkt>
 800a200:	4603      	mov	r3, r0
}
 800a202:	4618      	mov	r0, r3
 800a204:	3708      	adds	r7, #8
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
 800a20a:	bf00      	nop
 800a20c:	08014dad 	.word	0x08014dad
 800a210:	08013cc1 	.word	0x08013cc1

0800a214 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b084      	sub	sp, #16
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a21e:	4819      	ldr	r0, [pc, #100]	; (800a284 <tcpip_try_callback+0x70>)
 800a220:	f00a ff28 	bl	8015074 <sys_mbox_valid>
 800a224:	4603      	mov	r3, r0
 800a226:	2b00      	cmp	r3, #0
 800a228:	d106      	bne.n	800a238 <tcpip_try_callback+0x24>
 800a22a:	4b17      	ldr	r3, [pc, #92]	; (800a288 <tcpip_try_callback+0x74>)
 800a22c:	f240 125d 	movw	r2, #349	; 0x15d
 800a230:	4916      	ldr	r1, [pc, #88]	; (800a28c <tcpip_try_callback+0x78>)
 800a232:	4817      	ldr	r0, [pc, #92]	; (800a290 <tcpip_try_callback+0x7c>)
 800a234:	f00b f9e2 	bl	80155fc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800a238:	2008      	movs	r0, #8
 800a23a:	f000 fd41 	bl	800acc0 <memp_malloc>
 800a23e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d102      	bne.n	800a24c <tcpip_try_callback+0x38>
    return ERR_MEM;
 800a246:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a24a:	e017      	b.n	800a27c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2201      	movs	r2, #1
 800a250:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	687a      	ldr	r2, [r7, #4]
 800a256:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	683a      	ldr	r2, [r7, #0]
 800a25c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a25e:	68f9      	ldr	r1, [r7, #12]
 800a260:	4808      	ldr	r0, [pc, #32]	; (800a284 <tcpip_try_callback+0x70>)
 800a262:	f00a fea5 	bl	8014fb0 <sys_mbox_trypost>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d006      	beq.n	800a27a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800a26c:	68f9      	ldr	r1, [r7, #12]
 800a26e:	2008      	movs	r0, #8
 800a270:	f000 fd78 	bl	800ad64 <memp_free>
    return ERR_MEM;
 800a274:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a278:	e000      	b.n	800a27c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800a27a:	2300      	movs	r3, #0
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3710      	adds	r7, #16
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}
 800a284:	20004a84 	.word	0x20004a84
 800a288:	08016fc4 	.word	0x08016fc4
 800a28c:	0801703c 	.word	0x0801703c
 800a290:	08017014 	.word	0x08017014

0800a294 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b084      	sub	sp, #16
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800a2a0:	4806      	ldr	r0, [pc, #24]	; (800a2bc <tcpip_send_msg_wait_sem+0x28>)
 800a2a2:	f00a ffb5 	bl	8015210 <sys_mutex_lock>
  fn(apimsg);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	68b8      	ldr	r0, [r7, #8]
 800a2aa:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800a2ac:	4803      	ldr	r0, [pc, #12]	; (800a2bc <tcpip_send_msg_wait_sem+0x28>)
 800a2ae:	f00a ffbe 	bl	801522e <sys_mutex_unlock>
  return ERR_OK;
 800a2b2:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3710      	adds	r7, #16
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}
 800a2bc:	200080c0 	.word	0x200080c0

0800a2c0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b084      	sub	sp, #16
 800a2c4:	af02      	add	r7, sp, #8
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a2ca:	f000 f871 	bl	800a3b0 <lwip_init>

  tcpip_init_done = initfunc;
 800a2ce:	4a17      	ldr	r2, [pc, #92]	; (800a32c <tcpip_init+0x6c>)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800a2d4:	4a16      	ldr	r2, [pc, #88]	; (800a330 <tcpip_init+0x70>)
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800a2da:	2106      	movs	r1, #6
 800a2dc:	4815      	ldr	r0, [pc, #84]	; (800a334 <tcpip_init+0x74>)
 800a2de:	f00a fe3b 	bl	8014f58 <sys_mbox_new>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d006      	beq.n	800a2f6 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800a2e8:	4b13      	ldr	r3, [pc, #76]	; (800a338 <tcpip_init+0x78>)
 800a2ea:	f240 2261 	movw	r2, #609	; 0x261
 800a2ee:	4913      	ldr	r1, [pc, #76]	; (800a33c <tcpip_init+0x7c>)
 800a2f0:	4813      	ldr	r0, [pc, #76]	; (800a340 <tcpip_init+0x80>)
 800a2f2:	f00b f983 	bl	80155fc <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800a2f6:	4813      	ldr	r0, [pc, #76]	; (800a344 <tcpip_init+0x84>)
 800a2f8:	f00a ff74 	bl	80151e4 <sys_mutex_new>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d006      	beq.n	800a310 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800a302:	4b0d      	ldr	r3, [pc, #52]	; (800a338 <tcpip_init+0x78>)
 800a304:	f240 2265 	movw	r2, #613	; 0x265
 800a308:	490f      	ldr	r1, [pc, #60]	; (800a348 <tcpip_init+0x88>)
 800a30a:	480d      	ldr	r0, [pc, #52]	; (800a340 <tcpip_init+0x80>)
 800a30c:	f00b f976 	bl	80155fc <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800a310:	2318      	movs	r3, #24
 800a312:	9300      	str	r3, [sp, #0]
 800a314:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a318:	2200      	movs	r2, #0
 800a31a:	490c      	ldr	r1, [pc, #48]	; (800a34c <tcpip_init+0x8c>)
 800a31c:	480c      	ldr	r0, [pc, #48]	; (800a350 <tcpip_init+0x90>)
 800a31e:	f00a ff93 	bl	8015248 <sys_thread_new>
}
 800a322:	bf00      	nop
 800a324:	3708      	adds	r7, #8
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
 800a32a:	bf00      	nop
 800a32c:	20004a7c 	.word	0x20004a7c
 800a330:	20004a80 	.word	0x20004a80
 800a334:	20004a84 	.word	0x20004a84
 800a338:	08016fc4 	.word	0x08016fc4
 800a33c:	0801704c 	.word	0x0801704c
 800a340:	08017014 	.word	0x08017014
 800a344:	200080c0 	.word	0x200080c0
 800a348:	08017070 	.word	0x08017070
 800a34c:	0800a051 	.word	0x0800a051
 800a350:	08017094 	.word	0x08017094

0800a354 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a354:	b480      	push	{r7}
 800a356:	b083      	sub	sp, #12
 800a358:	af00      	add	r7, sp, #0
 800a35a:	4603      	mov	r3, r0
 800a35c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a35e:	88fb      	ldrh	r3, [r7, #6]
 800a360:	021b      	lsls	r3, r3, #8
 800a362:	b21a      	sxth	r2, r3
 800a364:	88fb      	ldrh	r3, [r7, #6]
 800a366:	0a1b      	lsrs	r3, r3, #8
 800a368:	b29b      	uxth	r3, r3
 800a36a:	b21b      	sxth	r3, r3
 800a36c:	4313      	orrs	r3, r2
 800a36e:	b21b      	sxth	r3, r3
 800a370:	b29b      	uxth	r3, r3
}
 800a372:	4618      	mov	r0, r3
 800a374:	370c      	adds	r7, #12
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr

0800a37e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a37e:	b480      	push	{r7}
 800a380:	b083      	sub	sp, #12
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	061a      	lsls	r2, r3, #24
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	021b      	lsls	r3, r3, #8
 800a38e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a392:	431a      	orrs	r2, r3
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	0a1b      	lsrs	r3, r3, #8
 800a398:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a39c:	431a      	orrs	r2, r3
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	0e1b      	lsrs	r3, r3, #24
 800a3a2:	4313      	orrs	r3, r2
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	370c      	adds	r7, #12
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr

0800a3b0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b082      	sub	sp, #8
 800a3b4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800a3ba:	f00a ff07 	bl	80151cc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800a3be:	f000 f8d5 	bl	800a56c <mem_init>
  memp_init();
 800a3c2:	f000 fc31 	bl	800ac28 <memp_init>
  pbuf_init();
  netif_init();
 800a3c6:	f000 fcf7 	bl	800adb8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a3ca:	f008 f805 	bl	80123d8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a3ce:	f001 fe07 	bl	800bfe0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a3d2:	f007 ff47 	bl	8012264 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a3d6:	bf00      	nop
 800a3d8:	3708      	adds	r7, #8
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
	...

0800a3e0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b083      	sub	sp, #12
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a3ea:	4b05      	ldr	r3, [pc, #20]	; (800a400 <ptr_to_mem+0x20>)
 800a3ec:	681a      	ldr	r2, [r3, #0]
 800a3ee:	88fb      	ldrh	r3, [r7, #6]
 800a3f0:	4413      	add	r3, r2
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	370c      	adds	r7, #12
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr
 800a3fe:	bf00      	nop
 800a400:	20004a88 	.word	0x20004a88

0800a404 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a404:	b480      	push	{r7}
 800a406:	b083      	sub	sp, #12
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a40c:	4b05      	ldr	r3, [pc, #20]	; (800a424 <mem_to_ptr+0x20>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	687a      	ldr	r2, [r7, #4]
 800a412:	1ad3      	subs	r3, r2, r3
 800a414:	b29b      	uxth	r3, r3
}
 800a416:	4618      	mov	r0, r3
 800a418:	370c      	adds	r7, #12
 800a41a:	46bd      	mov	sp, r7
 800a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a420:	4770      	bx	lr
 800a422:	bf00      	nop
 800a424:	20004a88 	.word	0x20004a88

0800a428 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a428:	b590      	push	{r4, r7, lr}
 800a42a:	b085      	sub	sp, #20
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a430:	4b45      	ldr	r3, [pc, #276]	; (800a548 <plug_holes+0x120>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	687a      	ldr	r2, [r7, #4]
 800a436:	429a      	cmp	r2, r3
 800a438:	d206      	bcs.n	800a448 <plug_holes+0x20>
 800a43a:	4b44      	ldr	r3, [pc, #272]	; (800a54c <plug_holes+0x124>)
 800a43c:	f240 12df 	movw	r2, #479	; 0x1df
 800a440:	4943      	ldr	r1, [pc, #268]	; (800a550 <plug_holes+0x128>)
 800a442:	4844      	ldr	r0, [pc, #272]	; (800a554 <plug_holes+0x12c>)
 800a444:	f00b f8da 	bl	80155fc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a448:	4b43      	ldr	r3, [pc, #268]	; (800a558 <plug_holes+0x130>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	687a      	ldr	r2, [r7, #4]
 800a44e:	429a      	cmp	r2, r3
 800a450:	d306      	bcc.n	800a460 <plug_holes+0x38>
 800a452:	4b3e      	ldr	r3, [pc, #248]	; (800a54c <plug_holes+0x124>)
 800a454:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a458:	4940      	ldr	r1, [pc, #256]	; (800a55c <plug_holes+0x134>)
 800a45a:	483e      	ldr	r0, [pc, #248]	; (800a554 <plug_holes+0x12c>)
 800a45c:	f00b f8ce 	bl	80155fc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	791b      	ldrb	r3, [r3, #4]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d006      	beq.n	800a476 <plug_holes+0x4e>
 800a468:	4b38      	ldr	r3, [pc, #224]	; (800a54c <plug_holes+0x124>)
 800a46a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a46e:	493c      	ldr	r1, [pc, #240]	; (800a560 <plug_holes+0x138>)
 800a470:	4838      	ldr	r0, [pc, #224]	; (800a554 <plug_holes+0x12c>)
 800a472:	f00b f8c3 	bl	80155fc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	881b      	ldrh	r3, [r3, #0]
 800a47a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a47e:	d906      	bls.n	800a48e <plug_holes+0x66>
 800a480:	4b32      	ldr	r3, [pc, #200]	; (800a54c <plug_holes+0x124>)
 800a482:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a486:	4937      	ldr	r1, [pc, #220]	; (800a564 <plug_holes+0x13c>)
 800a488:	4832      	ldr	r0, [pc, #200]	; (800a554 <plug_holes+0x12c>)
 800a48a:	f00b f8b7 	bl	80155fc <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	881b      	ldrh	r3, [r3, #0]
 800a492:	4618      	mov	r0, r3
 800a494:	f7ff ffa4 	bl	800a3e0 <ptr_to_mem>
 800a498:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a49a:	687a      	ldr	r2, [r7, #4]
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	429a      	cmp	r2, r3
 800a4a0:	d024      	beq.n	800a4ec <plug_holes+0xc4>
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	791b      	ldrb	r3, [r3, #4]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d120      	bne.n	800a4ec <plug_holes+0xc4>
 800a4aa:	4b2b      	ldr	r3, [pc, #172]	; (800a558 <plug_holes+0x130>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	68fa      	ldr	r2, [r7, #12]
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d01b      	beq.n	800a4ec <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a4b4:	4b2c      	ldr	r3, [pc, #176]	; (800a568 <plug_holes+0x140>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	68fa      	ldr	r2, [r7, #12]
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d102      	bne.n	800a4c4 <plug_holes+0x9c>
      lfree = mem;
 800a4be:	4a2a      	ldr	r2, [pc, #168]	; (800a568 <plug_holes+0x140>)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	881a      	ldrh	r2, [r3, #0]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	881b      	ldrh	r3, [r3, #0]
 800a4d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a4d4:	d00a      	beq.n	800a4ec <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	881b      	ldrh	r3, [r3, #0]
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f7ff ff80 	bl	800a3e0 <ptr_to_mem>
 800a4e0:	4604      	mov	r4, r0
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f7ff ff8e 	bl	800a404 <mem_to_ptr>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	885b      	ldrh	r3, [r3, #2]
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f7ff ff75 	bl	800a3e0 <ptr_to_mem>
 800a4f6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a4f8:	68ba      	ldr	r2, [r7, #8]
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d01f      	beq.n	800a540 <plug_holes+0x118>
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	791b      	ldrb	r3, [r3, #4]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d11b      	bne.n	800a540 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a508:	4b17      	ldr	r3, [pc, #92]	; (800a568 <plug_holes+0x140>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	687a      	ldr	r2, [r7, #4]
 800a50e:	429a      	cmp	r2, r3
 800a510:	d102      	bne.n	800a518 <plug_holes+0xf0>
      lfree = pmem;
 800a512:	4a15      	ldr	r2, [pc, #84]	; (800a568 <plug_holes+0x140>)
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	881a      	ldrh	r2, [r3, #0]
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	881b      	ldrh	r3, [r3, #0]
 800a524:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a528:	d00a      	beq.n	800a540 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	881b      	ldrh	r3, [r3, #0]
 800a52e:	4618      	mov	r0, r3
 800a530:	f7ff ff56 	bl	800a3e0 <ptr_to_mem>
 800a534:	4604      	mov	r4, r0
 800a536:	68b8      	ldr	r0, [r7, #8]
 800a538:	f7ff ff64 	bl	800a404 <mem_to_ptr>
 800a53c:	4603      	mov	r3, r0
 800a53e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a540:	bf00      	nop
 800a542:	3714      	adds	r7, #20
 800a544:	46bd      	mov	sp, r7
 800a546:	bd90      	pop	{r4, r7, pc}
 800a548:	20004a88 	.word	0x20004a88
 800a54c:	080170a4 	.word	0x080170a4
 800a550:	080170d4 	.word	0x080170d4
 800a554:	080170ec 	.word	0x080170ec
 800a558:	20004a8c 	.word	0x20004a8c
 800a55c:	08017114 	.word	0x08017114
 800a560:	08017130 	.word	0x08017130
 800a564:	0801714c 	.word	0x0801714c
 800a568:	20004a94 	.word	0x20004a94

0800a56c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b082      	sub	sp, #8
 800a570:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a572:	4b1f      	ldr	r3, [pc, #124]	; (800a5f0 <mem_init+0x84>)
 800a574:	3303      	adds	r3, #3
 800a576:	f023 0303 	bic.w	r3, r3, #3
 800a57a:	461a      	mov	r2, r3
 800a57c:	4b1d      	ldr	r3, [pc, #116]	; (800a5f4 <mem_init+0x88>)
 800a57e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a580:	4b1c      	ldr	r3, [pc, #112]	; (800a5f4 <mem_init+0x88>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a58c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2200      	movs	r2, #0
 800a592:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2200      	movs	r2, #0
 800a598:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a59a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800a59e:	f7ff ff1f 	bl	800a3e0 <ptr_to_mem>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	4a14      	ldr	r2, [pc, #80]	; (800a5f8 <mem_init+0x8c>)
 800a5a6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a5a8:	4b13      	ldr	r3, [pc, #76]	; (800a5f8 <mem_init+0x8c>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a5b0:	4b11      	ldr	r3, [pc, #68]	; (800a5f8 <mem_init+0x8c>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a5b8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a5ba:	4b0f      	ldr	r3, [pc, #60]	; (800a5f8 <mem_init+0x8c>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a5c2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a5c4:	4b0b      	ldr	r3, [pc, #44]	; (800a5f4 <mem_init+0x88>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	4a0c      	ldr	r2, [pc, #48]	; (800a5fc <mem_init+0x90>)
 800a5ca:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a5cc:	480c      	ldr	r0, [pc, #48]	; (800a600 <mem_init+0x94>)
 800a5ce:	f00a fe09 	bl	80151e4 <sys_mutex_new>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d006      	beq.n	800a5e6 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a5d8:	4b0a      	ldr	r3, [pc, #40]	; (800a604 <mem_init+0x98>)
 800a5da:	f240 221f 	movw	r2, #543	; 0x21f
 800a5de:	490a      	ldr	r1, [pc, #40]	; (800a608 <mem_init+0x9c>)
 800a5e0:	480a      	ldr	r0, [pc, #40]	; (800a60c <mem_init+0xa0>)
 800a5e2:	f00b f80b 	bl	80155fc <iprintf>
  }
}
 800a5e6:	bf00      	nop
 800a5e8:	3708      	adds	r7, #8
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	200080dc 	.word	0x200080dc
 800a5f4:	20004a88 	.word	0x20004a88
 800a5f8:	20004a8c 	.word	0x20004a8c
 800a5fc:	20004a94 	.word	0x20004a94
 800a600:	20004a90 	.word	0x20004a90
 800a604:	080170a4 	.word	0x080170a4
 800a608:	08017178 	.word	0x08017178
 800a60c:	080170ec 	.word	0x080170ec

0800a610 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b086      	sub	sp, #24
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f7ff fef3 	bl	800a404 <mem_to_ptr>
 800a61e:	4603      	mov	r3, r0
 800a620:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	881b      	ldrh	r3, [r3, #0]
 800a626:	4618      	mov	r0, r3
 800a628:	f7ff feda 	bl	800a3e0 <ptr_to_mem>
 800a62c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	885b      	ldrh	r3, [r3, #2]
 800a632:	4618      	mov	r0, r3
 800a634:	f7ff fed4 	bl	800a3e0 <ptr_to_mem>
 800a638:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	881b      	ldrh	r3, [r3, #0]
 800a63e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a642:	d818      	bhi.n	800a676 <mem_link_valid+0x66>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	885b      	ldrh	r3, [r3, #2]
 800a648:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a64c:	d813      	bhi.n	800a676 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a652:	8afa      	ldrh	r2, [r7, #22]
 800a654:	429a      	cmp	r2, r3
 800a656:	d004      	beq.n	800a662 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	881b      	ldrh	r3, [r3, #0]
 800a65c:	8afa      	ldrh	r2, [r7, #22]
 800a65e:	429a      	cmp	r2, r3
 800a660:	d109      	bne.n	800a676 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a662:	4b08      	ldr	r3, [pc, #32]	; (800a684 <mem_link_valid+0x74>)
 800a664:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a666:	693a      	ldr	r2, [r7, #16]
 800a668:	429a      	cmp	r2, r3
 800a66a:	d006      	beq.n	800a67a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	885b      	ldrh	r3, [r3, #2]
 800a670:	8afa      	ldrh	r2, [r7, #22]
 800a672:	429a      	cmp	r2, r3
 800a674:	d001      	beq.n	800a67a <mem_link_valid+0x6a>
    return 0;
 800a676:	2300      	movs	r3, #0
 800a678:	e000      	b.n	800a67c <mem_link_valid+0x6c>
  }
  return 1;
 800a67a:	2301      	movs	r3, #1
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3718      	adds	r7, #24
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}
 800a684:	20004a8c 	.word	0x20004a8c

0800a688 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b088      	sub	sp, #32
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d070      	beq.n	800a778 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f003 0303 	and.w	r3, r3, #3
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d00d      	beq.n	800a6bc <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a6a0:	4b37      	ldr	r3, [pc, #220]	; (800a780 <mem_free+0xf8>)
 800a6a2:	f240 2273 	movw	r2, #627	; 0x273
 800a6a6:	4937      	ldr	r1, [pc, #220]	; (800a784 <mem_free+0xfc>)
 800a6a8:	4837      	ldr	r0, [pc, #220]	; (800a788 <mem_free+0x100>)
 800a6aa:	f00a ffa7 	bl	80155fc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a6ae:	f00a fdeb 	bl	8015288 <sys_arch_protect>
 800a6b2:	60f8      	str	r0, [r7, #12]
 800a6b4:	68f8      	ldr	r0, [r7, #12]
 800a6b6:	f00a fdf5 	bl	80152a4 <sys_arch_unprotect>
    return;
 800a6ba:	e05e      	b.n	800a77a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	3b08      	subs	r3, #8
 800a6c0:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a6c2:	4b32      	ldr	r3, [pc, #200]	; (800a78c <mem_free+0x104>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	69fa      	ldr	r2, [r7, #28]
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	d306      	bcc.n	800a6da <mem_free+0x52>
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f103 020c 	add.w	r2, r3, #12
 800a6d2:	4b2f      	ldr	r3, [pc, #188]	; (800a790 <mem_free+0x108>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d90d      	bls.n	800a6f6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a6da:	4b29      	ldr	r3, [pc, #164]	; (800a780 <mem_free+0xf8>)
 800a6dc:	f240 227f 	movw	r2, #639	; 0x27f
 800a6e0:	492c      	ldr	r1, [pc, #176]	; (800a794 <mem_free+0x10c>)
 800a6e2:	4829      	ldr	r0, [pc, #164]	; (800a788 <mem_free+0x100>)
 800a6e4:	f00a ff8a 	bl	80155fc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a6e8:	f00a fdce 	bl	8015288 <sys_arch_protect>
 800a6ec:	6138      	str	r0, [r7, #16]
 800a6ee:	6938      	ldr	r0, [r7, #16]
 800a6f0:	f00a fdd8 	bl	80152a4 <sys_arch_unprotect>
    return;
 800a6f4:	e041      	b.n	800a77a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a6f6:	4828      	ldr	r0, [pc, #160]	; (800a798 <mem_free+0x110>)
 800a6f8:	f00a fd8a 	bl	8015210 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800a6fc:	69fb      	ldr	r3, [r7, #28]
 800a6fe:	791b      	ldrb	r3, [r3, #4]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d110      	bne.n	800a726 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a704:	4b1e      	ldr	r3, [pc, #120]	; (800a780 <mem_free+0xf8>)
 800a706:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a70a:	4924      	ldr	r1, [pc, #144]	; (800a79c <mem_free+0x114>)
 800a70c:	481e      	ldr	r0, [pc, #120]	; (800a788 <mem_free+0x100>)
 800a70e:	f00a ff75 	bl	80155fc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a712:	4821      	ldr	r0, [pc, #132]	; (800a798 <mem_free+0x110>)
 800a714:	f00a fd8b 	bl	801522e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a718:	f00a fdb6 	bl	8015288 <sys_arch_protect>
 800a71c:	6178      	str	r0, [r7, #20]
 800a71e:	6978      	ldr	r0, [r7, #20]
 800a720:	f00a fdc0 	bl	80152a4 <sys_arch_unprotect>
    return;
 800a724:	e029      	b.n	800a77a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800a726:	69f8      	ldr	r0, [r7, #28]
 800a728:	f7ff ff72 	bl	800a610 <mem_link_valid>
 800a72c:	4603      	mov	r3, r0
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d110      	bne.n	800a754 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a732:	4b13      	ldr	r3, [pc, #76]	; (800a780 <mem_free+0xf8>)
 800a734:	f240 2295 	movw	r2, #661	; 0x295
 800a738:	4919      	ldr	r1, [pc, #100]	; (800a7a0 <mem_free+0x118>)
 800a73a:	4813      	ldr	r0, [pc, #76]	; (800a788 <mem_free+0x100>)
 800a73c:	f00a ff5e 	bl	80155fc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a740:	4815      	ldr	r0, [pc, #84]	; (800a798 <mem_free+0x110>)
 800a742:	f00a fd74 	bl	801522e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a746:	f00a fd9f 	bl	8015288 <sys_arch_protect>
 800a74a:	61b8      	str	r0, [r7, #24]
 800a74c:	69b8      	ldr	r0, [r7, #24]
 800a74e:	f00a fda9 	bl	80152a4 <sys_arch_unprotect>
    return;
 800a752:	e012      	b.n	800a77a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a754:	69fb      	ldr	r3, [r7, #28]
 800a756:	2200      	movs	r2, #0
 800a758:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a75a:	4b12      	ldr	r3, [pc, #72]	; (800a7a4 <mem_free+0x11c>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	69fa      	ldr	r2, [r7, #28]
 800a760:	429a      	cmp	r2, r3
 800a762:	d202      	bcs.n	800a76a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a764:	4a0f      	ldr	r2, [pc, #60]	; (800a7a4 <mem_free+0x11c>)
 800a766:	69fb      	ldr	r3, [r7, #28]
 800a768:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a76a:	69f8      	ldr	r0, [r7, #28]
 800a76c:	f7ff fe5c 	bl	800a428 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a770:	4809      	ldr	r0, [pc, #36]	; (800a798 <mem_free+0x110>)
 800a772:	f00a fd5c 	bl	801522e <sys_mutex_unlock>
 800a776:	e000      	b.n	800a77a <mem_free+0xf2>
    return;
 800a778:	bf00      	nop
}
 800a77a:	3720      	adds	r7, #32
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}
 800a780:	080170a4 	.word	0x080170a4
 800a784:	08017194 	.word	0x08017194
 800a788:	080170ec 	.word	0x080170ec
 800a78c:	20004a88 	.word	0x20004a88
 800a790:	20004a8c 	.word	0x20004a8c
 800a794:	080171b8 	.word	0x080171b8
 800a798:	20004a90 	.word	0x20004a90
 800a79c:	080171d4 	.word	0x080171d4
 800a7a0:	080171fc 	.word	0x080171fc
 800a7a4:	20004a94 	.word	0x20004a94

0800a7a8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b088      	sub	sp, #32
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a7b4:	887b      	ldrh	r3, [r7, #2]
 800a7b6:	3303      	adds	r3, #3
 800a7b8:	b29b      	uxth	r3, r3
 800a7ba:	f023 0303 	bic.w	r3, r3, #3
 800a7be:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a7c0:	8bfb      	ldrh	r3, [r7, #30]
 800a7c2:	2b0b      	cmp	r3, #11
 800a7c4:	d801      	bhi.n	800a7ca <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a7c6:	230c      	movs	r3, #12
 800a7c8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a7ca:	8bfb      	ldrh	r3, [r7, #30]
 800a7cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a7d0:	d803      	bhi.n	800a7da <mem_trim+0x32>
 800a7d2:	8bfa      	ldrh	r2, [r7, #30]
 800a7d4:	887b      	ldrh	r3, [r7, #2]
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d201      	bcs.n	800a7de <mem_trim+0x36>
    return NULL;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	e0d8      	b.n	800a990 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a7de:	4b6e      	ldr	r3, [pc, #440]	; (800a998 <mem_trim+0x1f0>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	687a      	ldr	r2, [r7, #4]
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d304      	bcc.n	800a7f2 <mem_trim+0x4a>
 800a7e8:	4b6c      	ldr	r3, [pc, #432]	; (800a99c <mem_trim+0x1f4>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	687a      	ldr	r2, [r7, #4]
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	d306      	bcc.n	800a800 <mem_trim+0x58>
 800a7f2:	4b6b      	ldr	r3, [pc, #428]	; (800a9a0 <mem_trim+0x1f8>)
 800a7f4:	f240 22d1 	movw	r2, #721	; 0x2d1
 800a7f8:	496a      	ldr	r1, [pc, #424]	; (800a9a4 <mem_trim+0x1fc>)
 800a7fa:	486b      	ldr	r0, [pc, #428]	; (800a9a8 <mem_trim+0x200>)
 800a7fc:	f00a fefe 	bl	80155fc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a800:	4b65      	ldr	r3, [pc, #404]	; (800a998 <mem_trim+0x1f0>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	429a      	cmp	r2, r3
 800a808:	d304      	bcc.n	800a814 <mem_trim+0x6c>
 800a80a:	4b64      	ldr	r3, [pc, #400]	; (800a99c <mem_trim+0x1f4>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	429a      	cmp	r2, r3
 800a812:	d307      	bcc.n	800a824 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a814:	f00a fd38 	bl	8015288 <sys_arch_protect>
 800a818:	60b8      	str	r0, [r7, #8]
 800a81a:	68b8      	ldr	r0, [r7, #8]
 800a81c:	f00a fd42 	bl	80152a4 <sys_arch_unprotect>
    return rmem;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	e0b5      	b.n	800a990 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	3b08      	subs	r3, #8
 800a828:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a82a:	69b8      	ldr	r0, [r7, #24]
 800a82c:	f7ff fdea 	bl	800a404 <mem_to_ptr>
 800a830:	4603      	mov	r3, r0
 800a832:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a834:	69bb      	ldr	r3, [r7, #24]
 800a836:	881a      	ldrh	r2, [r3, #0]
 800a838:	8afb      	ldrh	r3, [r7, #22]
 800a83a:	1ad3      	subs	r3, r2, r3
 800a83c:	b29b      	uxth	r3, r3
 800a83e:	3b08      	subs	r3, #8
 800a840:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a842:	8bfa      	ldrh	r2, [r7, #30]
 800a844:	8abb      	ldrh	r3, [r7, #20]
 800a846:	429a      	cmp	r2, r3
 800a848:	d906      	bls.n	800a858 <mem_trim+0xb0>
 800a84a:	4b55      	ldr	r3, [pc, #340]	; (800a9a0 <mem_trim+0x1f8>)
 800a84c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a850:	4956      	ldr	r1, [pc, #344]	; (800a9ac <mem_trim+0x204>)
 800a852:	4855      	ldr	r0, [pc, #340]	; (800a9a8 <mem_trim+0x200>)
 800a854:	f00a fed2 	bl	80155fc <iprintf>
  if (newsize > size) {
 800a858:	8bfa      	ldrh	r2, [r7, #30]
 800a85a:	8abb      	ldrh	r3, [r7, #20]
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d901      	bls.n	800a864 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800a860:	2300      	movs	r3, #0
 800a862:	e095      	b.n	800a990 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800a864:	8bfa      	ldrh	r2, [r7, #30]
 800a866:	8abb      	ldrh	r3, [r7, #20]
 800a868:	429a      	cmp	r2, r3
 800a86a:	d101      	bne.n	800a870 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	e08f      	b.n	800a990 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a870:	484f      	ldr	r0, [pc, #316]	; (800a9b0 <mem_trim+0x208>)
 800a872:	f00a fccd 	bl	8015210 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800a876:	69bb      	ldr	r3, [r7, #24]
 800a878:	881b      	ldrh	r3, [r3, #0]
 800a87a:	4618      	mov	r0, r3
 800a87c:	f7ff fdb0 	bl	800a3e0 <ptr_to_mem>
 800a880:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	791b      	ldrb	r3, [r3, #4]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d13f      	bne.n	800a90a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a88a:	69bb      	ldr	r3, [r7, #24]
 800a88c:	881b      	ldrh	r3, [r3, #0]
 800a88e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a892:	d106      	bne.n	800a8a2 <mem_trim+0xfa>
 800a894:	4b42      	ldr	r3, [pc, #264]	; (800a9a0 <mem_trim+0x1f8>)
 800a896:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a89a:	4946      	ldr	r1, [pc, #280]	; (800a9b4 <mem_trim+0x20c>)
 800a89c:	4842      	ldr	r0, [pc, #264]	; (800a9a8 <mem_trim+0x200>)
 800a89e:	f00a fead 	bl	80155fc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	881b      	ldrh	r3, [r3, #0]
 800a8a6:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a8a8:	8afa      	ldrh	r2, [r7, #22]
 800a8aa:	8bfb      	ldrh	r3, [r7, #30]
 800a8ac:	4413      	add	r3, r2
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	3308      	adds	r3, #8
 800a8b2:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a8b4:	4b40      	ldr	r3, [pc, #256]	; (800a9b8 <mem_trim+0x210>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	693a      	ldr	r2, [r7, #16]
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d106      	bne.n	800a8cc <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800a8be:	89fb      	ldrh	r3, [r7, #14]
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f7ff fd8d 	bl	800a3e0 <ptr_to_mem>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	4a3b      	ldr	r2, [pc, #236]	; (800a9b8 <mem_trim+0x210>)
 800a8ca:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a8cc:	89fb      	ldrh	r3, [r7, #14]
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f7ff fd86 	bl	800a3e0 <ptr_to_mem>
 800a8d4:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	89ba      	ldrh	r2, [r7, #12]
 800a8e0:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	8afa      	ldrh	r2, [r7, #22]
 800a8e6:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a8e8:	69bb      	ldr	r3, [r7, #24]
 800a8ea:	89fa      	ldrh	r2, [r7, #14]
 800a8ec:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	881b      	ldrh	r3, [r3, #0]
 800a8f2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a8f6:	d047      	beq.n	800a988 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a8f8:	693b      	ldr	r3, [r7, #16]
 800a8fa:	881b      	ldrh	r3, [r3, #0]
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f7ff fd6f 	bl	800a3e0 <ptr_to_mem>
 800a902:	4602      	mov	r2, r0
 800a904:	89fb      	ldrh	r3, [r7, #14]
 800a906:	8053      	strh	r3, [r2, #2]
 800a908:	e03e      	b.n	800a988 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a90a:	8bfb      	ldrh	r3, [r7, #30]
 800a90c:	f103 0214 	add.w	r2, r3, #20
 800a910:	8abb      	ldrh	r3, [r7, #20]
 800a912:	429a      	cmp	r2, r3
 800a914:	d838      	bhi.n	800a988 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a916:	8afa      	ldrh	r2, [r7, #22]
 800a918:	8bfb      	ldrh	r3, [r7, #30]
 800a91a:	4413      	add	r3, r2
 800a91c:	b29b      	uxth	r3, r3
 800a91e:	3308      	adds	r3, #8
 800a920:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a922:	69bb      	ldr	r3, [r7, #24]
 800a924:	881b      	ldrh	r3, [r3, #0]
 800a926:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a92a:	d106      	bne.n	800a93a <mem_trim+0x192>
 800a92c:	4b1c      	ldr	r3, [pc, #112]	; (800a9a0 <mem_trim+0x1f8>)
 800a92e:	f240 3216 	movw	r2, #790	; 0x316
 800a932:	4920      	ldr	r1, [pc, #128]	; (800a9b4 <mem_trim+0x20c>)
 800a934:	481c      	ldr	r0, [pc, #112]	; (800a9a8 <mem_trim+0x200>)
 800a936:	f00a fe61 	bl	80155fc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a93a:	89fb      	ldrh	r3, [r7, #14]
 800a93c:	4618      	mov	r0, r3
 800a93e:	f7ff fd4f 	bl	800a3e0 <ptr_to_mem>
 800a942:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a944:	4b1c      	ldr	r3, [pc, #112]	; (800a9b8 <mem_trim+0x210>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	693a      	ldr	r2, [r7, #16]
 800a94a:	429a      	cmp	r2, r3
 800a94c:	d202      	bcs.n	800a954 <mem_trim+0x1ac>
      lfree = mem2;
 800a94e:	4a1a      	ldr	r2, [pc, #104]	; (800a9b8 <mem_trim+0x210>)
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	2200      	movs	r2, #0
 800a958:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a95a:	69bb      	ldr	r3, [r7, #24]
 800a95c:	881a      	ldrh	r2, [r3, #0]
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	8afa      	ldrh	r2, [r7, #22]
 800a966:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a968:	69bb      	ldr	r3, [r7, #24]
 800a96a:	89fa      	ldrh	r2, [r7, #14]
 800a96c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	881b      	ldrh	r3, [r3, #0]
 800a972:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a976:	d007      	beq.n	800a988 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a978:	693b      	ldr	r3, [r7, #16]
 800a97a:	881b      	ldrh	r3, [r3, #0]
 800a97c:	4618      	mov	r0, r3
 800a97e:	f7ff fd2f 	bl	800a3e0 <ptr_to_mem>
 800a982:	4602      	mov	r2, r0
 800a984:	89fb      	ldrh	r3, [r7, #14]
 800a986:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a988:	4809      	ldr	r0, [pc, #36]	; (800a9b0 <mem_trim+0x208>)
 800a98a:	f00a fc50 	bl	801522e <sys_mutex_unlock>
  return rmem;
 800a98e:	687b      	ldr	r3, [r7, #4]
}
 800a990:	4618      	mov	r0, r3
 800a992:	3720      	adds	r7, #32
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}
 800a998:	20004a88 	.word	0x20004a88
 800a99c:	20004a8c 	.word	0x20004a8c
 800a9a0:	080170a4 	.word	0x080170a4
 800a9a4:	08017230 	.word	0x08017230
 800a9a8:	080170ec 	.word	0x080170ec
 800a9ac:	08017248 	.word	0x08017248
 800a9b0:	20004a90 	.word	0x20004a90
 800a9b4:	08017268 	.word	0x08017268
 800a9b8:	20004a94 	.word	0x20004a94

0800a9bc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b088      	sub	sp, #32
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a9c6:	88fb      	ldrh	r3, [r7, #6]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d101      	bne.n	800a9d0 <mem_malloc+0x14>
    return NULL;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	e0e2      	b.n	800ab96 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a9d0:	88fb      	ldrh	r3, [r7, #6]
 800a9d2:	3303      	adds	r3, #3
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	f023 0303 	bic.w	r3, r3, #3
 800a9da:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a9dc:	8bbb      	ldrh	r3, [r7, #28]
 800a9de:	2b0b      	cmp	r3, #11
 800a9e0:	d801      	bhi.n	800a9e6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a9e2:	230c      	movs	r3, #12
 800a9e4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a9e6:	8bbb      	ldrh	r3, [r7, #28]
 800a9e8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a9ec:	d803      	bhi.n	800a9f6 <mem_malloc+0x3a>
 800a9ee:	8bba      	ldrh	r2, [r7, #28]
 800a9f0:	88fb      	ldrh	r3, [r7, #6]
 800a9f2:	429a      	cmp	r2, r3
 800a9f4:	d201      	bcs.n	800a9fa <mem_malloc+0x3e>
    return NULL;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	e0cd      	b.n	800ab96 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800a9fa:	4869      	ldr	r0, [pc, #420]	; (800aba0 <mem_malloc+0x1e4>)
 800a9fc:	f00a fc08 	bl	8015210 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800aa00:	4b68      	ldr	r3, [pc, #416]	; (800aba4 <mem_malloc+0x1e8>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	4618      	mov	r0, r3
 800aa06:	f7ff fcfd 	bl	800a404 <mem_to_ptr>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	83fb      	strh	r3, [r7, #30]
 800aa0e:	e0b7      	b.n	800ab80 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800aa10:	8bfb      	ldrh	r3, [r7, #30]
 800aa12:	4618      	mov	r0, r3
 800aa14:	f7ff fce4 	bl	800a3e0 <ptr_to_mem>
 800aa18:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	791b      	ldrb	r3, [r3, #4]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	f040 80a7 	bne.w	800ab72 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	881b      	ldrh	r3, [r3, #0]
 800aa28:	461a      	mov	r2, r3
 800aa2a:	8bfb      	ldrh	r3, [r7, #30]
 800aa2c:	1ad3      	subs	r3, r2, r3
 800aa2e:	f1a3 0208 	sub.w	r2, r3, #8
 800aa32:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800aa34:	429a      	cmp	r2, r3
 800aa36:	f0c0 809c 	bcc.w	800ab72 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	881b      	ldrh	r3, [r3, #0]
 800aa3e:	461a      	mov	r2, r3
 800aa40:	8bfb      	ldrh	r3, [r7, #30]
 800aa42:	1ad3      	subs	r3, r2, r3
 800aa44:	f1a3 0208 	sub.w	r2, r3, #8
 800aa48:	8bbb      	ldrh	r3, [r7, #28]
 800aa4a:	3314      	adds	r3, #20
 800aa4c:	429a      	cmp	r2, r3
 800aa4e:	d333      	bcc.n	800aab8 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800aa50:	8bfa      	ldrh	r2, [r7, #30]
 800aa52:	8bbb      	ldrh	r3, [r7, #28]
 800aa54:	4413      	add	r3, r2
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	3308      	adds	r3, #8
 800aa5a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800aa5c:	8a7b      	ldrh	r3, [r7, #18]
 800aa5e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aa62:	d106      	bne.n	800aa72 <mem_malloc+0xb6>
 800aa64:	4b50      	ldr	r3, [pc, #320]	; (800aba8 <mem_malloc+0x1ec>)
 800aa66:	f240 3287 	movw	r2, #903	; 0x387
 800aa6a:	4950      	ldr	r1, [pc, #320]	; (800abac <mem_malloc+0x1f0>)
 800aa6c:	4850      	ldr	r0, [pc, #320]	; (800abb0 <mem_malloc+0x1f4>)
 800aa6e:	f00a fdc5 	bl	80155fc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800aa72:	8a7b      	ldrh	r3, [r7, #18]
 800aa74:	4618      	mov	r0, r3
 800aa76:	f7ff fcb3 	bl	800a3e0 <ptr_to_mem>
 800aa7a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	881a      	ldrh	r2, [r3, #0]
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	8bfa      	ldrh	r2, [r7, #30]
 800aa8e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	8a7a      	ldrh	r2, [r7, #18]
 800aa94:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	2201      	movs	r2, #1
 800aa9a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	881b      	ldrh	r3, [r3, #0]
 800aaa0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aaa4:	d00b      	beq.n	800aabe <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	881b      	ldrh	r3, [r3, #0]
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f7ff fc98 	bl	800a3e0 <ptr_to_mem>
 800aab0:	4602      	mov	r2, r0
 800aab2:	8a7b      	ldrh	r3, [r7, #18]
 800aab4:	8053      	strh	r3, [r2, #2]
 800aab6:	e002      	b.n	800aabe <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	2201      	movs	r2, #1
 800aabc:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800aabe:	4b39      	ldr	r3, [pc, #228]	; (800aba4 <mem_malloc+0x1e8>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	697a      	ldr	r2, [r7, #20]
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d127      	bne.n	800ab18 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800aac8:	4b36      	ldr	r3, [pc, #216]	; (800aba4 <mem_malloc+0x1e8>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800aace:	e005      	b.n	800aadc <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800aad0:	69bb      	ldr	r3, [r7, #24]
 800aad2:	881b      	ldrh	r3, [r3, #0]
 800aad4:	4618      	mov	r0, r3
 800aad6:	f7ff fc83 	bl	800a3e0 <ptr_to_mem>
 800aada:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800aadc:	69bb      	ldr	r3, [r7, #24]
 800aade:	791b      	ldrb	r3, [r3, #4]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d004      	beq.n	800aaee <mem_malloc+0x132>
 800aae4:	4b33      	ldr	r3, [pc, #204]	; (800abb4 <mem_malloc+0x1f8>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	69ba      	ldr	r2, [r7, #24]
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d1f0      	bne.n	800aad0 <mem_malloc+0x114>
          }
          lfree = cur;
 800aaee:	4a2d      	ldr	r2, [pc, #180]	; (800aba4 <mem_malloc+0x1e8>)
 800aaf0:	69bb      	ldr	r3, [r7, #24]
 800aaf2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800aaf4:	4b2b      	ldr	r3, [pc, #172]	; (800aba4 <mem_malloc+0x1e8>)
 800aaf6:	681a      	ldr	r2, [r3, #0]
 800aaf8:	4b2e      	ldr	r3, [pc, #184]	; (800abb4 <mem_malloc+0x1f8>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	429a      	cmp	r2, r3
 800aafe:	d00b      	beq.n	800ab18 <mem_malloc+0x15c>
 800ab00:	4b28      	ldr	r3, [pc, #160]	; (800aba4 <mem_malloc+0x1e8>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	791b      	ldrb	r3, [r3, #4]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d006      	beq.n	800ab18 <mem_malloc+0x15c>
 800ab0a:	4b27      	ldr	r3, [pc, #156]	; (800aba8 <mem_malloc+0x1ec>)
 800ab0c:	f240 32b5 	movw	r2, #949	; 0x3b5
 800ab10:	4929      	ldr	r1, [pc, #164]	; (800abb8 <mem_malloc+0x1fc>)
 800ab12:	4827      	ldr	r0, [pc, #156]	; (800abb0 <mem_malloc+0x1f4>)
 800ab14:	f00a fd72 	bl	80155fc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800ab18:	4821      	ldr	r0, [pc, #132]	; (800aba0 <mem_malloc+0x1e4>)
 800ab1a:	f00a fb88 	bl	801522e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800ab1e:	8bba      	ldrh	r2, [r7, #28]
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	4413      	add	r3, r2
 800ab24:	3308      	adds	r3, #8
 800ab26:	4a23      	ldr	r2, [pc, #140]	; (800abb4 <mem_malloc+0x1f8>)
 800ab28:	6812      	ldr	r2, [r2, #0]
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d906      	bls.n	800ab3c <mem_malloc+0x180>
 800ab2e:	4b1e      	ldr	r3, [pc, #120]	; (800aba8 <mem_malloc+0x1ec>)
 800ab30:	f240 32b9 	movw	r2, #953	; 0x3b9
 800ab34:	4921      	ldr	r1, [pc, #132]	; (800abbc <mem_malloc+0x200>)
 800ab36:	481e      	ldr	r0, [pc, #120]	; (800abb0 <mem_malloc+0x1f4>)
 800ab38:	f00a fd60 	bl	80155fc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	f003 0303 	and.w	r3, r3, #3
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d006      	beq.n	800ab54 <mem_malloc+0x198>
 800ab46:	4b18      	ldr	r3, [pc, #96]	; (800aba8 <mem_malloc+0x1ec>)
 800ab48:	f240 32bb 	movw	r2, #955	; 0x3bb
 800ab4c:	491c      	ldr	r1, [pc, #112]	; (800abc0 <mem_malloc+0x204>)
 800ab4e:	4818      	ldr	r0, [pc, #96]	; (800abb0 <mem_malloc+0x1f4>)
 800ab50:	f00a fd54 	bl	80155fc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	f003 0303 	and.w	r3, r3, #3
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d006      	beq.n	800ab6c <mem_malloc+0x1b0>
 800ab5e:	4b12      	ldr	r3, [pc, #72]	; (800aba8 <mem_malloc+0x1ec>)
 800ab60:	f240 32bd 	movw	r2, #957	; 0x3bd
 800ab64:	4917      	ldr	r1, [pc, #92]	; (800abc4 <mem_malloc+0x208>)
 800ab66:	4812      	ldr	r0, [pc, #72]	; (800abb0 <mem_malloc+0x1f4>)
 800ab68:	f00a fd48 	bl	80155fc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	3308      	adds	r3, #8
 800ab70:	e011      	b.n	800ab96 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800ab72:	8bfb      	ldrh	r3, [r7, #30]
 800ab74:	4618      	mov	r0, r3
 800ab76:	f7ff fc33 	bl	800a3e0 <ptr_to_mem>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	881b      	ldrh	r3, [r3, #0]
 800ab7e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ab80:	8bfa      	ldrh	r2, [r7, #30]
 800ab82:	8bbb      	ldrh	r3, [r7, #28]
 800ab84:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	f4ff af41 	bcc.w	800aa10 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800ab8e:	4804      	ldr	r0, [pc, #16]	; (800aba0 <mem_malloc+0x1e4>)
 800ab90:	f00a fb4d 	bl	801522e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800ab94:	2300      	movs	r3, #0
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3720      	adds	r7, #32
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}
 800ab9e:	bf00      	nop
 800aba0:	20004a90 	.word	0x20004a90
 800aba4:	20004a94 	.word	0x20004a94
 800aba8:	080170a4 	.word	0x080170a4
 800abac:	08017268 	.word	0x08017268
 800abb0:	080170ec 	.word	0x080170ec
 800abb4:	20004a8c 	.word	0x20004a8c
 800abb8:	0801727c 	.word	0x0801727c
 800abbc:	08017298 	.word	0x08017298
 800abc0:	080172c8 	.word	0x080172c8
 800abc4:	080172f8 	.word	0x080172f8

0800abc8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800abc8:	b480      	push	{r7}
 800abca:	b085      	sub	sp, #20
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	689b      	ldr	r3, [r3, #8]
 800abd4:	2200      	movs	r2, #0
 800abd6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	685b      	ldr	r3, [r3, #4]
 800abdc:	3303      	adds	r3, #3
 800abde:	f023 0303 	bic.w	r3, r3, #3
 800abe2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800abe4:	2300      	movs	r3, #0
 800abe6:	60fb      	str	r3, [r7, #12]
 800abe8:	e011      	b.n	800ac0e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	689b      	ldr	r3, [r3, #8]
 800abee:	681a      	ldr	r2, [r3, #0]
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	689b      	ldr	r3, [r3, #8]
 800abf8:	68ba      	ldr	r2, [r7, #8]
 800abfa:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	881b      	ldrh	r3, [r3, #0]
 800ac00:	461a      	mov	r2, r3
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	4413      	add	r3, r2
 800ac06:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	60fb      	str	r3, [r7, #12]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	885b      	ldrh	r3, [r3, #2]
 800ac12:	461a      	mov	r2, r3
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	4293      	cmp	r3, r2
 800ac18:	dbe7      	blt.n	800abea <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800ac1a:	bf00      	nop
 800ac1c:	bf00      	nop
 800ac1e:	3714      	adds	r7, #20
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr

0800ac28 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b082      	sub	sp, #8
 800ac2c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ac2e:	2300      	movs	r3, #0
 800ac30:	80fb      	strh	r3, [r7, #6]
 800ac32:	e009      	b.n	800ac48 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800ac34:	88fb      	ldrh	r3, [r7, #6]
 800ac36:	4a08      	ldr	r2, [pc, #32]	; (800ac58 <memp_init+0x30>)
 800ac38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f7ff ffc3 	bl	800abc8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ac42:	88fb      	ldrh	r3, [r7, #6]
 800ac44:	3301      	adds	r3, #1
 800ac46:	80fb      	strh	r3, [r7, #6]
 800ac48:	88fb      	ldrh	r3, [r7, #6]
 800ac4a:	2b0c      	cmp	r3, #12
 800ac4c:	d9f2      	bls.n	800ac34 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800ac4e:	bf00      	nop
 800ac50:	bf00      	nop
 800ac52:	3708      	adds	r7, #8
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}
 800ac58:	08019f30 	.word	0x08019f30

0800ac5c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b084      	sub	sp, #16
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800ac64:	f00a fb10 	bl	8015288 <sys_arch_protect>
 800ac68:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	689b      	ldr	r3, [r3, #8]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d015      	beq.n	800aca4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	689b      	ldr	r3, [r3, #8]
 800ac7c:	68ba      	ldr	r2, [r7, #8]
 800ac7e:	6812      	ldr	r2, [r2, #0]
 800ac80:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	f003 0303 	and.w	r3, r3, #3
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d006      	beq.n	800ac9a <do_memp_malloc_pool+0x3e>
 800ac8c:	4b09      	ldr	r3, [pc, #36]	; (800acb4 <do_memp_malloc_pool+0x58>)
 800ac8e:	f44f 728c 	mov.w	r2, #280	; 0x118
 800ac92:	4909      	ldr	r1, [pc, #36]	; (800acb8 <do_memp_malloc_pool+0x5c>)
 800ac94:	4809      	ldr	r0, [pc, #36]	; (800acbc <do_memp_malloc_pool+0x60>)
 800ac96:	f00a fcb1 	bl	80155fc <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ac9a:	68f8      	ldr	r0, [r7, #12]
 800ac9c:	f00a fb02 	bl	80152a4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	e003      	b.n	800acac <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800aca4:	68f8      	ldr	r0, [r7, #12]
 800aca6:	f00a fafd 	bl	80152a4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800acaa:	2300      	movs	r3, #0
}
 800acac:	4618      	mov	r0, r3
 800acae:	3710      	adds	r7, #16
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}
 800acb4:	0801731c 	.word	0x0801731c
 800acb8:	0801734c 	.word	0x0801734c
 800acbc:	08017370 	.word	0x08017370

0800acc0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b084      	sub	sp, #16
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	4603      	mov	r3, r0
 800acc8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800acca:	79fb      	ldrb	r3, [r7, #7]
 800accc:	2b0c      	cmp	r3, #12
 800acce:	d908      	bls.n	800ace2 <memp_malloc+0x22>
 800acd0:	4b0a      	ldr	r3, [pc, #40]	; (800acfc <memp_malloc+0x3c>)
 800acd2:	f240 1257 	movw	r2, #343	; 0x157
 800acd6:	490a      	ldr	r1, [pc, #40]	; (800ad00 <memp_malloc+0x40>)
 800acd8:	480a      	ldr	r0, [pc, #40]	; (800ad04 <memp_malloc+0x44>)
 800acda:	f00a fc8f 	bl	80155fc <iprintf>
 800acde:	2300      	movs	r3, #0
 800ace0:	e008      	b.n	800acf4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ace2:	79fb      	ldrb	r3, [r7, #7]
 800ace4:	4a08      	ldr	r2, [pc, #32]	; (800ad08 <memp_malloc+0x48>)
 800ace6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acea:	4618      	mov	r0, r3
 800acec:	f7ff ffb6 	bl	800ac5c <do_memp_malloc_pool>
 800acf0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800acf2:	68fb      	ldr	r3, [r7, #12]
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3710      	adds	r7, #16
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}
 800acfc:	0801731c 	.word	0x0801731c
 800ad00:	080173ac 	.word	0x080173ac
 800ad04:	08017370 	.word	0x08017370
 800ad08:	08019f30 	.word	0x08019f30

0800ad0c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b084      	sub	sp, #16
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
 800ad14:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	f003 0303 	and.w	r3, r3, #3
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d006      	beq.n	800ad2e <do_memp_free_pool+0x22>
 800ad20:	4b0d      	ldr	r3, [pc, #52]	; (800ad58 <do_memp_free_pool+0x4c>)
 800ad22:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800ad26:	490d      	ldr	r1, [pc, #52]	; (800ad5c <do_memp_free_pool+0x50>)
 800ad28:	480d      	ldr	r0, [pc, #52]	; (800ad60 <do_memp_free_pool+0x54>)
 800ad2a:	f00a fc67 	bl	80155fc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800ad32:	f00a faa9 	bl	8015288 <sys_arch_protect>
 800ad36:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	689b      	ldr	r3, [r3, #8]
 800ad3c:	681a      	ldr	r2, [r3, #0]
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	689b      	ldr	r3, [r3, #8]
 800ad46:	68fa      	ldr	r2, [r7, #12]
 800ad48:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800ad4a:	68b8      	ldr	r0, [r7, #8]
 800ad4c:	f00a faaa 	bl	80152a4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800ad50:	bf00      	nop
 800ad52:	3710      	adds	r7, #16
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}
 800ad58:	0801731c 	.word	0x0801731c
 800ad5c:	080173cc 	.word	0x080173cc
 800ad60:	08017370 	.word	0x08017370

0800ad64 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b082      	sub	sp, #8
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	6039      	str	r1, [r7, #0]
 800ad6e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800ad70:	79fb      	ldrb	r3, [r7, #7]
 800ad72:	2b0c      	cmp	r3, #12
 800ad74:	d907      	bls.n	800ad86 <memp_free+0x22>
 800ad76:	4b0c      	ldr	r3, [pc, #48]	; (800ada8 <memp_free+0x44>)
 800ad78:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800ad7c:	490b      	ldr	r1, [pc, #44]	; (800adac <memp_free+0x48>)
 800ad7e:	480c      	ldr	r0, [pc, #48]	; (800adb0 <memp_free+0x4c>)
 800ad80:	f00a fc3c 	bl	80155fc <iprintf>
 800ad84:	e00c      	b.n	800ada0 <memp_free+0x3c>

  if (mem == NULL) {
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d008      	beq.n	800ad9e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ad8c:	79fb      	ldrb	r3, [r7, #7]
 800ad8e:	4a09      	ldr	r2, [pc, #36]	; (800adb4 <memp_free+0x50>)
 800ad90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad94:	6839      	ldr	r1, [r7, #0]
 800ad96:	4618      	mov	r0, r3
 800ad98:	f7ff ffb8 	bl	800ad0c <do_memp_free_pool>
 800ad9c:	e000      	b.n	800ada0 <memp_free+0x3c>
    return;
 800ad9e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800ada0:	3708      	adds	r7, #8
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
 800ada6:	bf00      	nop
 800ada8:	0801731c 	.word	0x0801731c
 800adac:	080173ec 	.word	0x080173ec
 800adb0:	08017370 	.word	0x08017370
 800adb4:	08019f30 	.word	0x08019f30

0800adb8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800adb8:	b480      	push	{r7}
 800adba:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800adbc:	bf00      	nop
 800adbe:	46bd      	mov	sp, r7
 800adc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc4:	4770      	bx	lr
	...

0800adc8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b086      	sub	sp, #24
 800adcc:	af00      	add	r7, sp, #0
 800adce:	60f8      	str	r0, [r7, #12]
 800add0:	60b9      	str	r1, [r7, #8]
 800add2:	607a      	str	r2, [r7, #4]
 800add4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d108      	bne.n	800adee <netif_add+0x26>
 800addc:	4b57      	ldr	r3, [pc, #348]	; (800af3c <netif_add+0x174>)
 800adde:	f240 1227 	movw	r2, #295	; 0x127
 800ade2:	4957      	ldr	r1, [pc, #348]	; (800af40 <netif_add+0x178>)
 800ade4:	4857      	ldr	r0, [pc, #348]	; (800af44 <netif_add+0x17c>)
 800ade6:	f00a fc09 	bl	80155fc <iprintf>
 800adea:	2300      	movs	r3, #0
 800adec:	e0a2      	b.n	800af34 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800adee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d108      	bne.n	800ae06 <netif_add+0x3e>
 800adf4:	4b51      	ldr	r3, [pc, #324]	; (800af3c <netif_add+0x174>)
 800adf6:	f44f 7294 	mov.w	r2, #296	; 0x128
 800adfa:	4953      	ldr	r1, [pc, #332]	; (800af48 <netif_add+0x180>)
 800adfc:	4851      	ldr	r0, [pc, #324]	; (800af44 <netif_add+0x17c>)
 800adfe:	f00a fbfd 	bl	80155fc <iprintf>
 800ae02:	2300      	movs	r3, #0
 800ae04:	e096      	b.n	800af34 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d101      	bne.n	800ae10 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800ae0c:	4b4f      	ldr	r3, [pc, #316]	; (800af4c <netif_add+0x184>)
 800ae0e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d101      	bne.n	800ae1a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800ae16:	4b4d      	ldr	r3, [pc, #308]	; (800af4c <netif_add+0x184>)
 800ae18:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d101      	bne.n	800ae24 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800ae20:	4b4a      	ldr	r3, [pc, #296]	; (800af4c <netif_add+0x184>)
 800ae22:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	2200      	movs	r2, #0
 800ae28:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2200      	movs	r2, #0
 800ae34:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	4a45      	ldr	r2, [pc, #276]	; (800af50 <netif_add+0x188>)
 800ae3a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	2200      	movs	r2, #0
 800ae46:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	6a3a      	ldr	r2, [r7, #32]
 800ae54:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800ae56:	4b3f      	ldr	r3, [pc, #252]	; (800af54 <netif_add+0x18c>)
 800ae58:	781a      	ldrb	r2, [r3, #0]
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae64:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	687a      	ldr	r2, [r7, #4]
 800ae6a:	68b9      	ldr	r1, [r7, #8]
 800ae6c:	68f8      	ldr	r0, [r7, #12]
 800ae6e:	f000 f913 	bl	800b098 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800ae72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae74:	68f8      	ldr	r0, [r7, #12]
 800ae76:	4798      	blx	r3
 800ae78:	4603      	mov	r3, r0
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d001      	beq.n	800ae82 <netif_add+0xba>
    return NULL;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	e058      	b.n	800af34 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ae88:	2bff      	cmp	r3, #255	; 0xff
 800ae8a:	d103      	bne.n	800ae94 <netif_add+0xcc>
        netif->num = 0;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800ae94:	2300      	movs	r3, #0
 800ae96:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ae98:	4b2f      	ldr	r3, [pc, #188]	; (800af58 <netif_add+0x190>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	617b      	str	r3, [r7, #20]
 800ae9e:	e02b      	b.n	800aef8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800aea0:	697a      	ldr	r2, [r7, #20]
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d106      	bne.n	800aeb6 <netif_add+0xee>
 800aea8:	4b24      	ldr	r3, [pc, #144]	; (800af3c <netif_add+0x174>)
 800aeaa:	f240 128b 	movw	r2, #395	; 0x18b
 800aeae:	492b      	ldr	r1, [pc, #172]	; (800af5c <netif_add+0x194>)
 800aeb0:	4824      	ldr	r0, [pc, #144]	; (800af44 <netif_add+0x17c>)
 800aeb2:	f00a fba3 	bl	80155fc <iprintf>
        num_netifs++;
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	3301      	adds	r3, #1
 800aeba:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	2bff      	cmp	r3, #255	; 0xff
 800aec0:	dd06      	ble.n	800aed0 <netif_add+0x108>
 800aec2:	4b1e      	ldr	r3, [pc, #120]	; (800af3c <netif_add+0x174>)
 800aec4:	f240 128d 	movw	r2, #397	; 0x18d
 800aec8:	4925      	ldr	r1, [pc, #148]	; (800af60 <netif_add+0x198>)
 800aeca:	481e      	ldr	r0, [pc, #120]	; (800af44 <netif_add+0x17c>)
 800aecc:	f00a fb96 	bl	80155fc <iprintf>
        if (netif2->num == netif->num) {
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aedc:	429a      	cmp	r2, r3
 800aede:	d108      	bne.n	800aef2 <netif_add+0x12a>
          netif->num++;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aee6:	3301      	adds	r3, #1
 800aee8:	b2da      	uxtb	r2, r3
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800aef0:	e005      	b.n	800aefe <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	617b      	str	r3, [r7, #20]
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d1d0      	bne.n	800aea0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d1be      	bne.n	800ae82 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800af0a:	2bfe      	cmp	r3, #254	; 0xfe
 800af0c:	d103      	bne.n	800af16 <netif_add+0x14e>
    netif_num = 0;
 800af0e:	4b11      	ldr	r3, [pc, #68]	; (800af54 <netif_add+0x18c>)
 800af10:	2200      	movs	r2, #0
 800af12:	701a      	strb	r2, [r3, #0]
 800af14:	e006      	b.n	800af24 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800af1c:	3301      	adds	r3, #1
 800af1e:	b2da      	uxtb	r2, r3
 800af20:	4b0c      	ldr	r3, [pc, #48]	; (800af54 <netif_add+0x18c>)
 800af22:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800af24:	4b0c      	ldr	r3, [pc, #48]	; (800af58 <netif_add+0x190>)
 800af26:	681a      	ldr	r2, [r3, #0]
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800af2c:	4a0a      	ldr	r2, [pc, #40]	; (800af58 <netif_add+0x190>)
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800af32:	68fb      	ldr	r3, [r7, #12]
}
 800af34:	4618      	mov	r0, r3
 800af36:	3718      	adds	r7, #24
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}
 800af3c:	08017408 	.word	0x08017408
 800af40:	0801749c 	.word	0x0801749c
 800af44:	08017458 	.word	0x08017458
 800af48:	080174b8 	.word	0x080174b8
 800af4c:	08019fa4 	.word	0x08019fa4
 800af50:	0800b373 	.word	0x0800b373
 800af54:	20004acc 	.word	0x20004acc
 800af58:	2000b7c8 	.word	0x2000b7c8
 800af5c:	080174dc 	.word	0x080174dc
 800af60:	080174f0 	.word	0x080174f0

0800af64 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b082      	sub	sp, #8
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800af6e:	6839      	ldr	r1, [r7, #0]
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f002 fe4f 	bl	800dc14 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800af76:	6839      	ldr	r1, [r7, #0]
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f007 fcfd 	bl	8012978 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800af7e:	bf00      	nop
 800af80:	3708      	adds	r7, #8
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}
	...

0800af88 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b086      	sub	sp, #24
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	60f8      	str	r0, [r7, #12]
 800af90:	60b9      	str	r1, [r7, #8]
 800af92:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d106      	bne.n	800afa8 <netif_do_set_ipaddr+0x20>
 800af9a:	4b1d      	ldr	r3, [pc, #116]	; (800b010 <netif_do_set_ipaddr+0x88>)
 800af9c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800afa0:	491c      	ldr	r1, [pc, #112]	; (800b014 <netif_do_set_ipaddr+0x8c>)
 800afa2:	481d      	ldr	r0, [pc, #116]	; (800b018 <netif_do_set_ipaddr+0x90>)
 800afa4:	f00a fb2a 	bl	80155fc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d106      	bne.n	800afbc <netif_do_set_ipaddr+0x34>
 800afae:	4b18      	ldr	r3, [pc, #96]	; (800b010 <netif_do_set_ipaddr+0x88>)
 800afb0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800afb4:	4917      	ldr	r1, [pc, #92]	; (800b014 <netif_do_set_ipaddr+0x8c>)
 800afb6:	4818      	ldr	r0, [pc, #96]	; (800b018 <netif_do_set_ipaddr+0x90>)
 800afb8:	f00a fb20 	bl	80155fc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	681a      	ldr	r2, [r3, #0]
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	3304      	adds	r3, #4
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d01c      	beq.n	800b004 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	3304      	adds	r3, #4
 800afd4:	681a      	ldr	r2, [r3, #0]
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800afda:	f107 0314 	add.w	r3, r7, #20
 800afde:	4619      	mov	r1, r3
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f7ff ffbf 	bl	800af64 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d002      	beq.n	800aff2 <netif_do_set_ipaddr+0x6a>
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	e000      	b.n	800aff4 <netif_do_set_ipaddr+0x6c>
 800aff2:	2300      	movs	r3, #0
 800aff4:	68fa      	ldr	r2, [r7, #12]
 800aff6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800aff8:	2101      	movs	r1, #1
 800affa:	68f8      	ldr	r0, [r7, #12]
 800affc:	f000 f8d2 	bl	800b1a4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b000:	2301      	movs	r3, #1
 800b002:	e000      	b.n	800b006 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b004:	2300      	movs	r3, #0
}
 800b006:	4618      	mov	r0, r3
 800b008:	3718      	adds	r7, #24
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}
 800b00e:	bf00      	nop
 800b010:	08017408 	.word	0x08017408
 800b014:	08017520 	.word	0x08017520
 800b018:	08017458 	.word	0x08017458

0800b01c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b01c:	b480      	push	{r7}
 800b01e:	b085      	sub	sp, #20
 800b020:	af00      	add	r7, sp, #0
 800b022:	60f8      	str	r0, [r7, #12]
 800b024:	60b9      	str	r1, [r7, #8]
 800b026:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	681a      	ldr	r2, [r3, #0]
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	3308      	adds	r3, #8
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	429a      	cmp	r2, r3
 800b034:	d00a      	beq.n	800b04c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d002      	beq.n	800b042 <netif_do_set_netmask+0x26>
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	e000      	b.n	800b044 <netif_do_set_netmask+0x28>
 800b042:	2300      	movs	r3, #0
 800b044:	68fa      	ldr	r2, [r7, #12]
 800b046:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b048:	2301      	movs	r3, #1
 800b04a:	e000      	b.n	800b04e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b04c:	2300      	movs	r3, #0
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3714      	adds	r7, #20
 800b052:	46bd      	mov	sp, r7
 800b054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b058:	4770      	bx	lr

0800b05a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b05a:	b480      	push	{r7}
 800b05c:	b085      	sub	sp, #20
 800b05e:	af00      	add	r7, sp, #0
 800b060:	60f8      	str	r0, [r7, #12]
 800b062:	60b9      	str	r1, [r7, #8]
 800b064:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	681a      	ldr	r2, [r3, #0]
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	330c      	adds	r3, #12
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	429a      	cmp	r2, r3
 800b072:	d00a      	beq.n	800b08a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d002      	beq.n	800b080 <netif_do_set_gw+0x26>
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	e000      	b.n	800b082 <netif_do_set_gw+0x28>
 800b080:	2300      	movs	r3, #0
 800b082:	68fa      	ldr	r2, [r7, #12]
 800b084:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b086:	2301      	movs	r3, #1
 800b088:	e000      	b.n	800b08c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b08a:	2300      	movs	r3, #0
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3714      	adds	r7, #20
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr

0800b098 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b088      	sub	sp, #32
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	60f8      	str	r0, [r7, #12]
 800b0a0:	60b9      	str	r1, [r7, #8]
 800b0a2:	607a      	str	r2, [r7, #4]
 800b0a4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d101      	bne.n	800b0b8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b0b4:	4b1c      	ldr	r3, [pc, #112]	; (800b128 <netif_set_addr+0x90>)
 800b0b6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d101      	bne.n	800b0c2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b0be:	4b1a      	ldr	r3, [pc, #104]	; (800b128 <netif_set_addr+0x90>)
 800b0c0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d101      	bne.n	800b0cc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b0c8:	4b17      	ldr	r3, [pc, #92]	; (800b128 <netif_set_addr+0x90>)
 800b0ca:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d003      	beq.n	800b0da <netif_set_addr+0x42>
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d101      	bne.n	800b0de <netif_set_addr+0x46>
 800b0da:	2301      	movs	r3, #1
 800b0dc:	e000      	b.n	800b0e0 <netif_set_addr+0x48>
 800b0de:	2300      	movs	r3, #0
 800b0e0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d006      	beq.n	800b0f6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b0e8:	f107 0310 	add.w	r3, r7, #16
 800b0ec:	461a      	mov	r2, r3
 800b0ee:	68b9      	ldr	r1, [r7, #8]
 800b0f0:	68f8      	ldr	r0, [r7, #12]
 800b0f2:	f7ff ff49 	bl	800af88 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b0f6:	69fa      	ldr	r2, [r7, #28]
 800b0f8:	6879      	ldr	r1, [r7, #4]
 800b0fa:	68f8      	ldr	r0, [r7, #12]
 800b0fc:	f7ff ff8e 	bl	800b01c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b100:	69ba      	ldr	r2, [r7, #24]
 800b102:	6839      	ldr	r1, [r7, #0]
 800b104:	68f8      	ldr	r0, [r7, #12]
 800b106:	f7ff ffa8 	bl	800b05a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d106      	bne.n	800b11e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b110:	f107 0310 	add.w	r3, r7, #16
 800b114:	461a      	mov	r2, r3
 800b116:	68b9      	ldr	r1, [r7, #8]
 800b118:	68f8      	ldr	r0, [r7, #12]
 800b11a:	f7ff ff35 	bl	800af88 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b11e:	bf00      	nop
 800b120:	3720      	adds	r7, #32
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}
 800b126:	bf00      	nop
 800b128:	08019fa4 	.word	0x08019fa4

0800b12c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b083      	sub	sp, #12
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b134:	4a04      	ldr	r2, [pc, #16]	; (800b148 <netif_set_default+0x1c>)
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b13a:	bf00      	nop
 800b13c:	370c      	adds	r7, #12
 800b13e:	46bd      	mov	sp, r7
 800b140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b144:	4770      	bx	lr
 800b146:	bf00      	nop
 800b148:	2000b7cc 	.word	0x2000b7cc

0800b14c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b082      	sub	sp, #8
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d107      	bne.n	800b16a <netif_set_up+0x1e>
 800b15a:	4b0f      	ldr	r3, [pc, #60]	; (800b198 <netif_set_up+0x4c>)
 800b15c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800b160:	490e      	ldr	r1, [pc, #56]	; (800b19c <netif_set_up+0x50>)
 800b162:	480f      	ldr	r0, [pc, #60]	; (800b1a0 <netif_set_up+0x54>)
 800b164:	f00a fa4a 	bl	80155fc <iprintf>
 800b168:	e013      	b.n	800b192 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b170:	f003 0301 	and.w	r3, r3, #1
 800b174:	2b00      	cmp	r3, #0
 800b176:	d10c      	bne.n	800b192 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b17e:	f043 0301 	orr.w	r3, r3, #1
 800b182:	b2da      	uxtb	r2, r3
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b18a:	2103      	movs	r1, #3
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f000 f809 	bl	800b1a4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b192:	3708      	adds	r7, #8
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}
 800b198:	08017408 	.word	0x08017408
 800b19c:	08017590 	.word	0x08017590
 800b1a0:	08017458 	.word	0x08017458

0800b1a4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b082      	sub	sp, #8
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d106      	bne.n	800b1c4 <netif_issue_reports+0x20>
 800b1b6:	4b18      	ldr	r3, [pc, #96]	; (800b218 <netif_issue_reports+0x74>)
 800b1b8:	f240 326d 	movw	r2, #877	; 0x36d
 800b1bc:	4917      	ldr	r1, [pc, #92]	; (800b21c <netif_issue_reports+0x78>)
 800b1be:	4818      	ldr	r0, [pc, #96]	; (800b220 <netif_issue_reports+0x7c>)
 800b1c0:	f00a fa1c 	bl	80155fc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b1ca:	f003 0304 	and.w	r3, r3, #4
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d01e      	beq.n	800b210 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b1d8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d017      	beq.n	800b210 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b1e0:	78fb      	ldrb	r3, [r7, #3]
 800b1e2:	f003 0301 	and.w	r3, r3, #1
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d013      	beq.n	800b212 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	3304      	adds	r3, #4
 800b1ee:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d00e      	beq.n	800b212 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b1fa:	f003 0308 	and.w	r3, r3, #8
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d007      	beq.n	800b212 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	3304      	adds	r3, #4
 800b206:	4619      	mov	r1, r3
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f008 fb1f 	bl	801384c <etharp_request>
 800b20e:	e000      	b.n	800b212 <netif_issue_reports+0x6e>
    return;
 800b210:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b212:	3708      	adds	r7, #8
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}
 800b218:	08017408 	.word	0x08017408
 800b21c:	080175ac 	.word	0x080175ac
 800b220:	08017458 	.word	0x08017458

0800b224 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b082      	sub	sp, #8
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d107      	bne.n	800b242 <netif_set_down+0x1e>
 800b232:	4b12      	ldr	r3, [pc, #72]	; (800b27c <netif_set_down+0x58>)
 800b234:	f240 329b 	movw	r2, #923	; 0x39b
 800b238:	4911      	ldr	r1, [pc, #68]	; (800b280 <netif_set_down+0x5c>)
 800b23a:	4812      	ldr	r0, [pc, #72]	; (800b284 <netif_set_down+0x60>)
 800b23c:	f00a f9de 	bl	80155fc <iprintf>
 800b240:	e019      	b.n	800b276 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b248:	f003 0301 	and.w	r3, r3, #1
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d012      	beq.n	800b276 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b256:	f023 0301 	bic.w	r3, r3, #1
 800b25a:	b2da      	uxtb	r2, r3
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b268:	f003 0308 	and.w	r3, r3, #8
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d002      	beq.n	800b276 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f007 fea9 	bl	8012fc8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b276:	3708      	adds	r7, #8
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}
 800b27c:	08017408 	.word	0x08017408
 800b280:	080175d0 	.word	0x080175d0
 800b284:	08017458 	.word	0x08017458

0800b288 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b082      	sub	sp, #8
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d107      	bne.n	800b2a6 <netif_set_link_up+0x1e>
 800b296:	4b13      	ldr	r3, [pc, #76]	; (800b2e4 <netif_set_link_up+0x5c>)
 800b298:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800b29c:	4912      	ldr	r1, [pc, #72]	; (800b2e8 <netif_set_link_up+0x60>)
 800b29e:	4813      	ldr	r0, [pc, #76]	; (800b2ec <netif_set_link_up+0x64>)
 800b2a0:	f00a f9ac 	bl	80155fc <iprintf>
 800b2a4:	e01b      	b.n	800b2de <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b2ac:	f003 0304 	and.w	r3, r3, #4
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d114      	bne.n	800b2de <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b2ba:	f043 0304 	orr.w	r3, r3, #4
 800b2be:	b2da      	uxtb	r2, r3
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b2c6:	2103      	movs	r1, #3
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f7ff ff6b 	bl	800b1a4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	69db      	ldr	r3, [r3, #28]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d003      	beq.n	800b2de <netif_set_link_up+0x56>
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	69db      	ldr	r3, [r3, #28]
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b2de:	3708      	adds	r7, #8
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}
 800b2e4:	08017408 	.word	0x08017408
 800b2e8:	080175f0 	.word	0x080175f0
 800b2ec:	08017458 	.word	0x08017458

0800b2f0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b082      	sub	sp, #8
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d107      	bne.n	800b30e <netif_set_link_down+0x1e>
 800b2fe:	4b11      	ldr	r3, [pc, #68]	; (800b344 <netif_set_link_down+0x54>)
 800b300:	f240 4206 	movw	r2, #1030	; 0x406
 800b304:	4910      	ldr	r1, [pc, #64]	; (800b348 <netif_set_link_down+0x58>)
 800b306:	4811      	ldr	r0, [pc, #68]	; (800b34c <netif_set_link_down+0x5c>)
 800b308:	f00a f978 	bl	80155fc <iprintf>
 800b30c:	e017      	b.n	800b33e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b314:	f003 0304 	and.w	r3, r3, #4
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d010      	beq.n	800b33e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b322:	f023 0304 	bic.w	r3, r3, #4
 800b326:	b2da      	uxtb	r2, r3
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	69db      	ldr	r3, [r3, #28]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d003      	beq.n	800b33e <netif_set_link_down+0x4e>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	69db      	ldr	r3, [r3, #28]
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b33e:	3708      	adds	r7, #8
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}
 800b344:	08017408 	.word	0x08017408
 800b348:	08017614 	.word	0x08017614
 800b34c:	08017458 	.word	0x08017458

0800b350 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b350:	b480      	push	{r7}
 800b352:	b083      	sub	sp, #12
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d002      	beq.n	800b366 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	683a      	ldr	r2, [r7, #0]
 800b364:	61da      	str	r2, [r3, #28]
  }
}
 800b366:	bf00      	nop
 800b368:	370c      	adds	r7, #12
 800b36a:	46bd      	mov	sp, r7
 800b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b370:	4770      	bx	lr

0800b372 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b372:	b480      	push	{r7}
 800b374:	b085      	sub	sp, #20
 800b376:	af00      	add	r7, sp, #0
 800b378:	60f8      	str	r0, [r7, #12]
 800b37a:	60b9      	str	r1, [r7, #8]
 800b37c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b37e:	f06f 030b 	mvn.w	r3, #11
}
 800b382:	4618      	mov	r0, r3
 800b384:	3714      	adds	r7, #20
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr
	...

0800b390 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b390:	b480      	push	{r7}
 800b392:	b085      	sub	sp, #20
 800b394:	af00      	add	r7, sp, #0
 800b396:	4603      	mov	r3, r0
 800b398:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b39a:	79fb      	ldrb	r3, [r7, #7]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d013      	beq.n	800b3c8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b3a0:	4b0d      	ldr	r3, [pc, #52]	; (800b3d8 <netif_get_by_index+0x48>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	60fb      	str	r3, [r7, #12]
 800b3a6:	e00c      	b.n	800b3c2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	b2db      	uxtb	r3, r3
 800b3b2:	79fa      	ldrb	r2, [r7, #7]
 800b3b4:	429a      	cmp	r2, r3
 800b3b6:	d101      	bne.n	800b3bc <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	e006      	b.n	800b3ca <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	60fb      	str	r3, [r7, #12]
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d1ef      	bne.n	800b3a8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b3c8:	2300      	movs	r3, #0
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3714      	adds	r7, #20
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d4:	4770      	bx	lr
 800b3d6:	bf00      	nop
 800b3d8:	2000b7c8 	.word	0x2000b7c8

0800b3dc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b082      	sub	sp, #8
 800b3e0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b3e2:	f009 ff51 	bl	8015288 <sys_arch_protect>
 800b3e6:	6038      	str	r0, [r7, #0]
 800b3e8:	4b0d      	ldr	r3, [pc, #52]	; (800b420 <pbuf_free_ooseq+0x44>)
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	701a      	strb	r2, [r3, #0]
 800b3ee:	6838      	ldr	r0, [r7, #0]
 800b3f0:	f009 ff58 	bl	80152a4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b3f4:	4b0b      	ldr	r3, [pc, #44]	; (800b424 <pbuf_free_ooseq+0x48>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	607b      	str	r3, [r7, #4]
 800b3fa:	e00a      	b.n	800b412 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b400:	2b00      	cmp	r3, #0
 800b402:	d003      	beq.n	800b40c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f002 fc43 	bl	800dc90 <tcp_free_ooseq>
      return;
 800b40a:	e005      	b.n	800b418 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	68db      	ldr	r3, [r3, #12]
 800b410:	607b      	str	r3, [r7, #4]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d1f1      	bne.n	800b3fc <pbuf_free_ooseq+0x20>
    }
  }
}
 800b418:	3708      	adds	r7, #8
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}
 800b41e:	bf00      	nop
 800b420:	2000b7d0 	.word	0x2000b7d0
 800b424:	2000b7d8 	.word	0x2000b7d8

0800b428 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b082      	sub	sp, #8
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800b430:	f7ff ffd4 	bl	800b3dc <pbuf_free_ooseq>
}
 800b434:	bf00      	nop
 800b436:	3708      	adds	r7, #8
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}

0800b43c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b082      	sub	sp, #8
 800b440:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800b442:	f009 ff21 	bl	8015288 <sys_arch_protect>
 800b446:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800b448:	4b0f      	ldr	r3, [pc, #60]	; (800b488 <pbuf_pool_is_empty+0x4c>)
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800b44e:	4b0e      	ldr	r3, [pc, #56]	; (800b488 <pbuf_pool_is_empty+0x4c>)
 800b450:	2201      	movs	r2, #1
 800b452:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f009 ff25 	bl	80152a4 <sys_arch_unprotect>

  if (!queued) {
 800b45a:	78fb      	ldrb	r3, [r7, #3]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d10f      	bne.n	800b480 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800b460:	2100      	movs	r1, #0
 800b462:	480a      	ldr	r0, [pc, #40]	; (800b48c <pbuf_pool_is_empty+0x50>)
 800b464:	f7fe fed6 	bl	800a214 <tcpip_try_callback>
 800b468:	4603      	mov	r3, r0
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d008      	beq.n	800b480 <pbuf_pool_is_empty+0x44>
 800b46e:	f009 ff0b 	bl	8015288 <sys_arch_protect>
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	4b04      	ldr	r3, [pc, #16]	; (800b488 <pbuf_pool_is_empty+0x4c>)
 800b476:	2200      	movs	r2, #0
 800b478:	701a      	strb	r2, [r3, #0]
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f009 ff12 	bl	80152a4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b480:	bf00      	nop
 800b482:	3708      	adds	r7, #8
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}
 800b488:	2000b7d0 	.word	0x2000b7d0
 800b48c:	0800b429 	.word	0x0800b429

0800b490 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b490:	b480      	push	{r7}
 800b492:	b085      	sub	sp, #20
 800b494:	af00      	add	r7, sp, #0
 800b496:	60f8      	str	r0, [r7, #12]
 800b498:	60b9      	str	r1, [r7, #8]
 800b49a:	4611      	mov	r1, r2
 800b49c:	461a      	mov	r2, r3
 800b49e:	460b      	mov	r3, r1
 800b4a0:	80fb      	strh	r3, [r7, #6]
 800b4a2:	4613      	mov	r3, r2
 800b4a4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	68ba      	ldr	r2, [r7, #8]
 800b4b0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	88fa      	ldrh	r2, [r7, #6]
 800b4b6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	88ba      	ldrh	r2, [r7, #4]
 800b4bc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b4be:	8b3b      	ldrh	r3, [r7, #24]
 800b4c0:	b2da      	uxtb	r2, r3
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	7f3a      	ldrb	r2, [r7, #28]
 800b4ca:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	73da      	strb	r2, [r3, #15]
}
 800b4d8:	bf00      	nop
 800b4da:	3714      	adds	r7, #20
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e2:	4770      	bx	lr

0800b4e4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b08c      	sub	sp, #48	; 0x30
 800b4e8:	af02      	add	r7, sp, #8
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	71fb      	strb	r3, [r7, #7]
 800b4ee:	460b      	mov	r3, r1
 800b4f0:	80bb      	strh	r3, [r7, #4]
 800b4f2:	4613      	mov	r3, r2
 800b4f4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b4f6:	79fb      	ldrb	r3, [r7, #7]
 800b4f8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b4fa:	887b      	ldrh	r3, [r7, #2]
 800b4fc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b500:	d07f      	beq.n	800b602 <pbuf_alloc+0x11e>
 800b502:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b506:	f300 80c8 	bgt.w	800b69a <pbuf_alloc+0x1b6>
 800b50a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b50e:	d010      	beq.n	800b532 <pbuf_alloc+0x4e>
 800b510:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b514:	f300 80c1 	bgt.w	800b69a <pbuf_alloc+0x1b6>
 800b518:	2b01      	cmp	r3, #1
 800b51a:	d002      	beq.n	800b522 <pbuf_alloc+0x3e>
 800b51c:	2b41      	cmp	r3, #65	; 0x41
 800b51e:	f040 80bc 	bne.w	800b69a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b522:	887a      	ldrh	r2, [r7, #2]
 800b524:	88bb      	ldrh	r3, [r7, #4]
 800b526:	4619      	mov	r1, r3
 800b528:	2000      	movs	r0, #0
 800b52a:	f000 f8d1 	bl	800b6d0 <pbuf_alloc_reference>
 800b52e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800b530:	e0bd      	b.n	800b6ae <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b532:	2300      	movs	r3, #0
 800b534:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800b536:	2300      	movs	r3, #0
 800b538:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b53a:	88bb      	ldrh	r3, [r7, #4]
 800b53c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b53e:	200c      	movs	r0, #12
 800b540:	f7ff fbbe 	bl	800acc0 <memp_malloc>
 800b544:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b546:	693b      	ldr	r3, [r7, #16]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d109      	bne.n	800b560 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800b54c:	f7ff ff76 	bl	800b43c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b552:	2b00      	cmp	r3, #0
 800b554:	d002      	beq.n	800b55c <pbuf_alloc+0x78>
            pbuf_free(p);
 800b556:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b558:	f000 faa8 	bl	800baac <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b55c:	2300      	movs	r3, #0
 800b55e:	e0a7      	b.n	800b6b0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b560:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b562:	3303      	adds	r3, #3
 800b564:	b29b      	uxth	r3, r3
 800b566:	f023 0303 	bic.w	r3, r3, #3
 800b56a:	b29b      	uxth	r3, r3
 800b56c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800b570:	b29b      	uxth	r3, r3
 800b572:	8b7a      	ldrh	r2, [r7, #26]
 800b574:	4293      	cmp	r3, r2
 800b576:	bf28      	it	cs
 800b578:	4613      	movcs	r3, r2
 800b57a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b57c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b57e:	3310      	adds	r3, #16
 800b580:	693a      	ldr	r2, [r7, #16]
 800b582:	4413      	add	r3, r2
 800b584:	3303      	adds	r3, #3
 800b586:	f023 0303 	bic.w	r3, r3, #3
 800b58a:	4618      	mov	r0, r3
 800b58c:	89f9      	ldrh	r1, [r7, #14]
 800b58e:	8b7a      	ldrh	r2, [r7, #26]
 800b590:	2300      	movs	r3, #0
 800b592:	9301      	str	r3, [sp, #4]
 800b594:	887b      	ldrh	r3, [r7, #2]
 800b596:	9300      	str	r3, [sp, #0]
 800b598:	460b      	mov	r3, r1
 800b59a:	4601      	mov	r1, r0
 800b59c:	6938      	ldr	r0, [r7, #16]
 800b59e:	f7ff ff77 	bl	800b490 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	f003 0303 	and.w	r3, r3, #3
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d006      	beq.n	800b5bc <pbuf_alloc+0xd8>
 800b5ae:	4b42      	ldr	r3, [pc, #264]	; (800b6b8 <pbuf_alloc+0x1d4>)
 800b5b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b5b4:	4941      	ldr	r1, [pc, #260]	; (800b6bc <pbuf_alloc+0x1d8>)
 800b5b6:	4842      	ldr	r0, [pc, #264]	; (800b6c0 <pbuf_alloc+0x1dc>)
 800b5b8:	f00a f820 	bl	80155fc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b5bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b5be:	3303      	adds	r3, #3
 800b5c0:	f023 0303 	bic.w	r3, r3, #3
 800b5c4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b5c8:	d106      	bne.n	800b5d8 <pbuf_alloc+0xf4>
 800b5ca:	4b3b      	ldr	r3, [pc, #236]	; (800b6b8 <pbuf_alloc+0x1d4>)
 800b5cc:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b5d0:	493c      	ldr	r1, [pc, #240]	; (800b6c4 <pbuf_alloc+0x1e0>)
 800b5d2:	483b      	ldr	r0, [pc, #236]	; (800b6c0 <pbuf_alloc+0x1dc>)
 800b5d4:	f00a f812 	bl	80155fc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d102      	bne.n	800b5e4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	627b      	str	r3, [r7, #36]	; 0x24
 800b5e2:	e002      	b.n	800b5ea <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b5e4:	69fb      	ldr	r3, [r7, #28]
 800b5e6:	693a      	ldr	r2, [r7, #16]
 800b5e8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b5ea:	693b      	ldr	r3, [r7, #16]
 800b5ec:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b5ee:	8b7a      	ldrh	r2, [r7, #26]
 800b5f0:	89fb      	ldrh	r3, [r7, #14]
 800b5f2:	1ad3      	subs	r3, r2, r3
 800b5f4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800b5fa:	8b7b      	ldrh	r3, [r7, #26]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d19e      	bne.n	800b53e <pbuf_alloc+0x5a>
      break;
 800b600:	e055      	b.n	800b6ae <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b602:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b604:	3303      	adds	r3, #3
 800b606:	b29b      	uxth	r3, r3
 800b608:	f023 0303 	bic.w	r3, r3, #3
 800b60c:	b29a      	uxth	r2, r3
 800b60e:	88bb      	ldrh	r3, [r7, #4]
 800b610:	3303      	adds	r3, #3
 800b612:	b29b      	uxth	r3, r3
 800b614:	f023 0303 	bic.w	r3, r3, #3
 800b618:	b29b      	uxth	r3, r3
 800b61a:	4413      	add	r3, r2
 800b61c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b61e:	8b3b      	ldrh	r3, [r7, #24]
 800b620:	3310      	adds	r3, #16
 800b622:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b624:	8b3a      	ldrh	r2, [r7, #24]
 800b626:	88bb      	ldrh	r3, [r7, #4]
 800b628:	3303      	adds	r3, #3
 800b62a:	f023 0303 	bic.w	r3, r3, #3
 800b62e:	429a      	cmp	r2, r3
 800b630:	d306      	bcc.n	800b640 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b632:	8afa      	ldrh	r2, [r7, #22]
 800b634:	88bb      	ldrh	r3, [r7, #4]
 800b636:	3303      	adds	r3, #3
 800b638:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b63c:	429a      	cmp	r2, r3
 800b63e:	d201      	bcs.n	800b644 <pbuf_alloc+0x160>
        return NULL;
 800b640:	2300      	movs	r3, #0
 800b642:	e035      	b.n	800b6b0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b644:	8afb      	ldrh	r3, [r7, #22]
 800b646:	4618      	mov	r0, r3
 800b648:	f7ff f9b8 	bl	800a9bc <mem_malloc>
 800b64c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800b64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b650:	2b00      	cmp	r3, #0
 800b652:	d101      	bne.n	800b658 <pbuf_alloc+0x174>
        return NULL;
 800b654:	2300      	movs	r3, #0
 800b656:	e02b      	b.n	800b6b0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b658:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b65a:	3310      	adds	r3, #16
 800b65c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b65e:	4413      	add	r3, r2
 800b660:	3303      	adds	r3, #3
 800b662:	f023 0303 	bic.w	r3, r3, #3
 800b666:	4618      	mov	r0, r3
 800b668:	88b9      	ldrh	r1, [r7, #4]
 800b66a:	88ba      	ldrh	r2, [r7, #4]
 800b66c:	2300      	movs	r3, #0
 800b66e:	9301      	str	r3, [sp, #4]
 800b670:	887b      	ldrh	r3, [r7, #2]
 800b672:	9300      	str	r3, [sp, #0]
 800b674:	460b      	mov	r3, r1
 800b676:	4601      	mov	r1, r0
 800b678:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b67a:	f7ff ff09 	bl	800b490 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b680:	685b      	ldr	r3, [r3, #4]
 800b682:	f003 0303 	and.w	r3, r3, #3
 800b686:	2b00      	cmp	r3, #0
 800b688:	d010      	beq.n	800b6ac <pbuf_alloc+0x1c8>
 800b68a:	4b0b      	ldr	r3, [pc, #44]	; (800b6b8 <pbuf_alloc+0x1d4>)
 800b68c:	f44f 7291 	mov.w	r2, #290	; 0x122
 800b690:	490d      	ldr	r1, [pc, #52]	; (800b6c8 <pbuf_alloc+0x1e4>)
 800b692:	480b      	ldr	r0, [pc, #44]	; (800b6c0 <pbuf_alloc+0x1dc>)
 800b694:	f009 ffb2 	bl	80155fc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b698:	e008      	b.n	800b6ac <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b69a:	4b07      	ldr	r3, [pc, #28]	; (800b6b8 <pbuf_alloc+0x1d4>)
 800b69c:	f240 1227 	movw	r2, #295	; 0x127
 800b6a0:	490a      	ldr	r1, [pc, #40]	; (800b6cc <pbuf_alloc+0x1e8>)
 800b6a2:	4807      	ldr	r0, [pc, #28]	; (800b6c0 <pbuf_alloc+0x1dc>)
 800b6a4:	f009 ffaa 	bl	80155fc <iprintf>
      return NULL;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	e001      	b.n	800b6b0 <pbuf_alloc+0x1cc>
      break;
 800b6ac:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	3728      	adds	r7, #40	; 0x28
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}
 800b6b8:	08017638 	.word	0x08017638
 800b6bc:	08017668 	.word	0x08017668
 800b6c0:	08017698 	.word	0x08017698
 800b6c4:	080176c0 	.word	0x080176c0
 800b6c8:	080176f4 	.word	0x080176f4
 800b6cc:	08017720 	.word	0x08017720

0800b6d0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b086      	sub	sp, #24
 800b6d4:	af02      	add	r7, sp, #8
 800b6d6:	6078      	str	r0, [r7, #4]
 800b6d8:	460b      	mov	r3, r1
 800b6da:	807b      	strh	r3, [r7, #2]
 800b6dc:	4613      	mov	r3, r2
 800b6de:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b6e0:	883b      	ldrh	r3, [r7, #0]
 800b6e2:	2b41      	cmp	r3, #65	; 0x41
 800b6e4:	d009      	beq.n	800b6fa <pbuf_alloc_reference+0x2a>
 800b6e6:	883b      	ldrh	r3, [r7, #0]
 800b6e8:	2b01      	cmp	r3, #1
 800b6ea:	d006      	beq.n	800b6fa <pbuf_alloc_reference+0x2a>
 800b6ec:	4b0f      	ldr	r3, [pc, #60]	; (800b72c <pbuf_alloc_reference+0x5c>)
 800b6ee:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b6f2:	490f      	ldr	r1, [pc, #60]	; (800b730 <pbuf_alloc_reference+0x60>)
 800b6f4:	480f      	ldr	r0, [pc, #60]	; (800b734 <pbuf_alloc_reference+0x64>)
 800b6f6:	f009 ff81 	bl	80155fc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b6fa:	200b      	movs	r0, #11
 800b6fc:	f7ff fae0 	bl	800acc0 <memp_malloc>
 800b700:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d101      	bne.n	800b70c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b708:	2300      	movs	r3, #0
 800b70a:	e00b      	b.n	800b724 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b70c:	8879      	ldrh	r1, [r7, #2]
 800b70e:	887a      	ldrh	r2, [r7, #2]
 800b710:	2300      	movs	r3, #0
 800b712:	9301      	str	r3, [sp, #4]
 800b714:	883b      	ldrh	r3, [r7, #0]
 800b716:	9300      	str	r3, [sp, #0]
 800b718:	460b      	mov	r3, r1
 800b71a:	6879      	ldr	r1, [r7, #4]
 800b71c:	68f8      	ldr	r0, [r7, #12]
 800b71e:	f7ff feb7 	bl	800b490 <pbuf_init_alloced_pbuf>
  return p;
 800b722:	68fb      	ldr	r3, [r7, #12]
}
 800b724:	4618      	mov	r0, r3
 800b726:	3710      	adds	r7, #16
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}
 800b72c:	08017638 	.word	0x08017638
 800b730:	0801773c 	.word	0x0801773c
 800b734:	08017698 	.word	0x08017698

0800b738 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b088      	sub	sp, #32
 800b73c:	af02      	add	r7, sp, #8
 800b73e:	607b      	str	r3, [r7, #4]
 800b740:	4603      	mov	r3, r0
 800b742:	73fb      	strb	r3, [r7, #15]
 800b744:	460b      	mov	r3, r1
 800b746:	81bb      	strh	r3, [r7, #12]
 800b748:	4613      	mov	r3, r2
 800b74a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b74c:	7bfb      	ldrb	r3, [r7, #15]
 800b74e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b750:	8a7b      	ldrh	r3, [r7, #18]
 800b752:	3303      	adds	r3, #3
 800b754:	f023 0203 	bic.w	r2, r3, #3
 800b758:	89bb      	ldrh	r3, [r7, #12]
 800b75a:	441a      	add	r2, r3
 800b75c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b75e:	429a      	cmp	r2, r3
 800b760:	d901      	bls.n	800b766 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b762:	2300      	movs	r3, #0
 800b764:	e018      	b.n	800b798 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b766:	6a3b      	ldr	r3, [r7, #32]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d007      	beq.n	800b77c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b76c:	8a7b      	ldrh	r3, [r7, #18]
 800b76e:	3303      	adds	r3, #3
 800b770:	f023 0303 	bic.w	r3, r3, #3
 800b774:	6a3a      	ldr	r2, [r7, #32]
 800b776:	4413      	add	r3, r2
 800b778:	617b      	str	r3, [r7, #20]
 800b77a:	e001      	b.n	800b780 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b77c:	2300      	movs	r3, #0
 800b77e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	89b9      	ldrh	r1, [r7, #12]
 800b784:	89ba      	ldrh	r2, [r7, #12]
 800b786:	2302      	movs	r3, #2
 800b788:	9301      	str	r3, [sp, #4]
 800b78a:	897b      	ldrh	r3, [r7, #10]
 800b78c:	9300      	str	r3, [sp, #0]
 800b78e:	460b      	mov	r3, r1
 800b790:	6979      	ldr	r1, [r7, #20]
 800b792:	f7ff fe7d 	bl	800b490 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b796:	687b      	ldr	r3, [r7, #4]
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3718      	adds	r7, #24
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b084      	sub	sp, #16
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	460b      	mov	r3, r1
 800b7aa:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d106      	bne.n	800b7c0 <pbuf_realloc+0x20>
 800b7b2:	4b3a      	ldr	r3, [pc, #232]	; (800b89c <pbuf_realloc+0xfc>)
 800b7b4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b7b8:	4939      	ldr	r1, [pc, #228]	; (800b8a0 <pbuf_realloc+0x100>)
 800b7ba:	483a      	ldr	r0, [pc, #232]	; (800b8a4 <pbuf_realloc+0x104>)
 800b7bc:	f009 ff1e 	bl	80155fc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	891b      	ldrh	r3, [r3, #8]
 800b7c4:	887a      	ldrh	r2, [r7, #2]
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	d263      	bcs.n	800b892 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	891a      	ldrh	r2, [r3, #8]
 800b7ce:	887b      	ldrh	r3, [r7, #2]
 800b7d0:	1ad3      	subs	r3, r2, r3
 800b7d2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b7d4:	887b      	ldrh	r3, [r7, #2]
 800b7d6:	817b      	strh	r3, [r7, #10]
  q = p;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b7dc:	e018      	b.n	800b810 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	895b      	ldrh	r3, [r3, #10]
 800b7e2:	897a      	ldrh	r2, [r7, #10]
 800b7e4:	1ad3      	subs	r3, r2, r3
 800b7e6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	891a      	ldrh	r2, [r3, #8]
 800b7ec:	893b      	ldrh	r3, [r7, #8]
 800b7ee:	1ad3      	subs	r3, r2, r3
 800b7f0:	b29a      	uxth	r2, r3
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d106      	bne.n	800b810 <pbuf_realloc+0x70>
 800b802:	4b26      	ldr	r3, [pc, #152]	; (800b89c <pbuf_realloc+0xfc>)
 800b804:	f240 12af 	movw	r2, #431	; 0x1af
 800b808:	4927      	ldr	r1, [pc, #156]	; (800b8a8 <pbuf_realloc+0x108>)
 800b80a:	4826      	ldr	r0, [pc, #152]	; (800b8a4 <pbuf_realloc+0x104>)
 800b80c:	f009 fef6 	bl	80155fc <iprintf>
  while (rem_len > q->len) {
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	895b      	ldrh	r3, [r3, #10]
 800b814:	897a      	ldrh	r2, [r7, #10]
 800b816:	429a      	cmp	r2, r3
 800b818:	d8e1      	bhi.n	800b7de <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	7b1b      	ldrb	r3, [r3, #12]
 800b81e:	f003 030f 	and.w	r3, r3, #15
 800b822:	2b00      	cmp	r3, #0
 800b824:	d121      	bne.n	800b86a <pbuf_realloc+0xca>
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	895b      	ldrh	r3, [r3, #10]
 800b82a:	897a      	ldrh	r2, [r7, #10]
 800b82c:	429a      	cmp	r2, r3
 800b82e:	d01c      	beq.n	800b86a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	7b5b      	ldrb	r3, [r3, #13]
 800b834:	f003 0302 	and.w	r3, r3, #2
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d116      	bne.n	800b86a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	685a      	ldr	r2, [r3, #4]
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	1ad3      	subs	r3, r2, r3
 800b844:	b29a      	uxth	r2, r3
 800b846:	897b      	ldrh	r3, [r7, #10]
 800b848:	4413      	add	r3, r2
 800b84a:	b29b      	uxth	r3, r3
 800b84c:	4619      	mov	r1, r3
 800b84e:	68f8      	ldr	r0, [r7, #12]
 800b850:	f7fe ffaa 	bl	800a7a8 <mem_trim>
 800b854:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d106      	bne.n	800b86a <pbuf_realloc+0xca>
 800b85c:	4b0f      	ldr	r3, [pc, #60]	; (800b89c <pbuf_realloc+0xfc>)
 800b85e:	f240 12bd 	movw	r2, #445	; 0x1bd
 800b862:	4912      	ldr	r1, [pc, #72]	; (800b8ac <pbuf_realloc+0x10c>)
 800b864:	480f      	ldr	r0, [pc, #60]	; (800b8a4 <pbuf_realloc+0x104>)
 800b866:	f009 fec9 	bl	80155fc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	897a      	ldrh	r2, [r7, #10]
 800b86e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	895a      	ldrh	r2, [r3, #10]
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d004      	beq.n	800b88a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	4618      	mov	r0, r3
 800b886:	f000 f911 	bl	800baac <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	2200      	movs	r2, #0
 800b88e:	601a      	str	r2, [r3, #0]
 800b890:	e000      	b.n	800b894 <pbuf_realloc+0xf4>
    return;
 800b892:	bf00      	nop

}
 800b894:	3710      	adds	r7, #16
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}
 800b89a:	bf00      	nop
 800b89c:	08017638 	.word	0x08017638
 800b8a0:	08017750 	.word	0x08017750
 800b8a4:	08017698 	.word	0x08017698
 800b8a8:	08017768 	.word	0x08017768
 800b8ac:	08017780 	.word	0x08017780

0800b8b0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b086      	sub	sp, #24
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	60f8      	str	r0, [r7, #12]
 800b8b8:	60b9      	str	r1, [r7, #8]
 800b8ba:	4613      	mov	r3, r2
 800b8bc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d106      	bne.n	800b8d2 <pbuf_add_header_impl+0x22>
 800b8c4:	4b2b      	ldr	r3, [pc, #172]	; (800b974 <pbuf_add_header_impl+0xc4>)
 800b8c6:	f240 12df 	movw	r2, #479	; 0x1df
 800b8ca:	492b      	ldr	r1, [pc, #172]	; (800b978 <pbuf_add_header_impl+0xc8>)
 800b8cc:	482b      	ldr	r0, [pc, #172]	; (800b97c <pbuf_add_header_impl+0xcc>)
 800b8ce:	f009 fe95 	bl	80155fc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d003      	beq.n	800b8e0 <pbuf_add_header_impl+0x30>
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8de:	d301      	bcc.n	800b8e4 <pbuf_add_header_impl+0x34>
    return 1;
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	e043      	b.n	800b96c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d101      	bne.n	800b8ee <pbuf_add_header_impl+0x3e>
    return 0;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	e03e      	b.n	800b96c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	891a      	ldrh	r2, [r3, #8]
 800b8f6:	8a7b      	ldrh	r3, [r7, #18]
 800b8f8:	4413      	add	r3, r2
 800b8fa:	b29b      	uxth	r3, r3
 800b8fc:	8a7a      	ldrh	r2, [r7, #18]
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d901      	bls.n	800b906 <pbuf_add_header_impl+0x56>
    return 1;
 800b902:	2301      	movs	r3, #1
 800b904:	e032      	b.n	800b96c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	7b1b      	ldrb	r3, [r3, #12]
 800b90a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b90c:	8a3b      	ldrh	r3, [r7, #16]
 800b90e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b912:	2b00      	cmp	r3, #0
 800b914:	d00c      	beq.n	800b930 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	685a      	ldr	r2, [r3, #4]
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	425b      	negs	r3, r3
 800b91e:	4413      	add	r3, r2
 800b920:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	3310      	adds	r3, #16
 800b926:	697a      	ldr	r2, [r7, #20]
 800b928:	429a      	cmp	r2, r3
 800b92a:	d20d      	bcs.n	800b948 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b92c:	2301      	movs	r3, #1
 800b92e:	e01d      	b.n	800b96c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b930:	79fb      	ldrb	r3, [r7, #7]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d006      	beq.n	800b944 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	685a      	ldr	r2, [r3, #4]
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	425b      	negs	r3, r3
 800b93e:	4413      	add	r3, r2
 800b940:	617b      	str	r3, [r7, #20]
 800b942:	e001      	b.n	800b948 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b944:	2301      	movs	r3, #1
 800b946:	e011      	b.n	800b96c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	697a      	ldr	r2, [r7, #20]
 800b94c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	895a      	ldrh	r2, [r3, #10]
 800b952:	8a7b      	ldrh	r3, [r7, #18]
 800b954:	4413      	add	r3, r2
 800b956:	b29a      	uxth	r2, r3
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	891a      	ldrh	r2, [r3, #8]
 800b960:	8a7b      	ldrh	r3, [r7, #18]
 800b962:	4413      	add	r3, r2
 800b964:	b29a      	uxth	r2, r3
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	811a      	strh	r2, [r3, #8]


  return 0;
 800b96a:	2300      	movs	r3, #0
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3718      	adds	r7, #24
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}
 800b974:	08017638 	.word	0x08017638
 800b978:	0801779c 	.word	0x0801779c
 800b97c:	08017698 	.word	0x08017698

0800b980 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b082      	sub	sp, #8
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b98a:	2200      	movs	r2, #0
 800b98c:	6839      	ldr	r1, [r7, #0]
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f7ff ff8e 	bl	800b8b0 <pbuf_add_header_impl>
 800b994:	4603      	mov	r3, r0
}
 800b996:	4618      	mov	r0, r3
 800b998:	3708      	adds	r7, #8
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}
	...

0800b9a0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b084      	sub	sp, #16
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d106      	bne.n	800b9be <pbuf_remove_header+0x1e>
 800b9b0:	4b20      	ldr	r3, [pc, #128]	; (800ba34 <pbuf_remove_header+0x94>)
 800b9b2:	f240 224b 	movw	r2, #587	; 0x24b
 800b9b6:	4920      	ldr	r1, [pc, #128]	; (800ba38 <pbuf_remove_header+0x98>)
 800b9b8:	4820      	ldr	r0, [pc, #128]	; (800ba3c <pbuf_remove_header+0x9c>)
 800b9ba:	f009 fe1f 	bl	80155fc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d003      	beq.n	800b9cc <pbuf_remove_header+0x2c>
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9ca:	d301      	bcc.n	800b9d0 <pbuf_remove_header+0x30>
    return 1;
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	e02c      	b.n	800ba2a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d101      	bne.n	800b9da <pbuf_remove_header+0x3a>
    return 0;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	e027      	b.n	800ba2a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	895b      	ldrh	r3, [r3, #10]
 800b9e2:	89fa      	ldrh	r2, [r7, #14]
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d908      	bls.n	800b9fa <pbuf_remove_header+0x5a>
 800b9e8:	4b12      	ldr	r3, [pc, #72]	; (800ba34 <pbuf_remove_header+0x94>)
 800b9ea:	f240 2255 	movw	r2, #597	; 0x255
 800b9ee:	4914      	ldr	r1, [pc, #80]	; (800ba40 <pbuf_remove_header+0xa0>)
 800b9f0:	4812      	ldr	r0, [pc, #72]	; (800ba3c <pbuf_remove_header+0x9c>)
 800b9f2:	f009 fe03 	bl	80155fc <iprintf>
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	e017      	b.n	800ba2a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	685b      	ldr	r3, [r3, #4]
 800b9fe:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	685a      	ldr	r2, [r3, #4]
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	441a      	add	r2, r3
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	895a      	ldrh	r2, [r3, #10]
 800ba10:	89fb      	ldrh	r3, [r7, #14]
 800ba12:	1ad3      	subs	r3, r2, r3
 800ba14:	b29a      	uxth	r2, r3
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	891a      	ldrh	r2, [r3, #8]
 800ba1e:	89fb      	ldrh	r3, [r7, #14]
 800ba20:	1ad3      	subs	r3, r2, r3
 800ba22:	b29a      	uxth	r2, r3
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800ba28:	2300      	movs	r3, #0
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3710      	adds	r7, #16
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
 800ba32:	bf00      	nop
 800ba34:	08017638 	.word	0x08017638
 800ba38:	0801779c 	.word	0x0801779c
 800ba3c:	08017698 	.word	0x08017698
 800ba40:	080177a8 	.word	0x080177a8

0800ba44 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b082      	sub	sp, #8
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
 800ba4c:	460b      	mov	r3, r1
 800ba4e:	807b      	strh	r3, [r7, #2]
 800ba50:	4613      	mov	r3, r2
 800ba52:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800ba54:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	da08      	bge.n	800ba6e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800ba5c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ba60:	425b      	negs	r3, r3
 800ba62:	4619      	mov	r1, r3
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f7ff ff9b 	bl	800b9a0 <pbuf_remove_header>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	e007      	b.n	800ba7e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800ba6e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ba72:	787a      	ldrb	r2, [r7, #1]
 800ba74:	4619      	mov	r1, r3
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f7ff ff1a 	bl	800b8b0 <pbuf_add_header_impl>
 800ba7c:	4603      	mov	r3, r0
  }
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3708      	adds	r7, #8
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}

0800ba86 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ba86:	b580      	push	{r7, lr}
 800ba88:	b082      	sub	sp, #8
 800ba8a:	af00      	add	r7, sp, #0
 800ba8c:	6078      	str	r0, [r7, #4]
 800ba8e:	460b      	mov	r3, r1
 800ba90:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800ba92:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ba96:	2201      	movs	r2, #1
 800ba98:	4619      	mov	r1, r3
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f7ff ffd2 	bl	800ba44 <pbuf_header_impl>
 800baa0:	4603      	mov	r3, r0
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3708      	adds	r7, #8
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}
	...

0800baac <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b088      	sub	sp, #32
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d10b      	bne.n	800bad2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d106      	bne.n	800bace <pbuf_free+0x22>
 800bac0:	4b3b      	ldr	r3, [pc, #236]	; (800bbb0 <pbuf_free+0x104>)
 800bac2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800bac6:	493b      	ldr	r1, [pc, #236]	; (800bbb4 <pbuf_free+0x108>)
 800bac8:	483b      	ldr	r0, [pc, #236]	; (800bbb8 <pbuf_free+0x10c>)
 800baca:	f009 fd97 	bl	80155fc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800bace:	2300      	movs	r3, #0
 800bad0:	e069      	b.n	800bba6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800bad2:	2300      	movs	r3, #0
 800bad4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800bad6:	e062      	b.n	800bb9e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800bad8:	f009 fbd6 	bl	8015288 <sys_arch_protect>
 800badc:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	7b9b      	ldrb	r3, [r3, #14]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d106      	bne.n	800baf4 <pbuf_free+0x48>
 800bae6:	4b32      	ldr	r3, [pc, #200]	; (800bbb0 <pbuf_free+0x104>)
 800bae8:	f240 22f1 	movw	r2, #753	; 0x2f1
 800baec:	4933      	ldr	r1, [pc, #204]	; (800bbbc <pbuf_free+0x110>)
 800baee:	4832      	ldr	r0, [pc, #200]	; (800bbb8 <pbuf_free+0x10c>)
 800baf0:	f009 fd84 	bl	80155fc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	7b9b      	ldrb	r3, [r3, #14]
 800baf8:	3b01      	subs	r3, #1
 800bafa:	b2da      	uxtb	r2, r3
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	739a      	strb	r2, [r3, #14]
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	7b9b      	ldrb	r3, [r3, #14]
 800bb04:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800bb06:	69b8      	ldr	r0, [r7, #24]
 800bb08:	f009 fbcc 	bl	80152a4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800bb0c:	7dfb      	ldrb	r3, [r7, #23]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d143      	bne.n	800bb9a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	7b1b      	ldrb	r3, [r3, #12]
 800bb1c:	f003 030f 	and.w	r3, r3, #15
 800bb20:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	7b5b      	ldrb	r3, [r3, #13]
 800bb26:	f003 0302 	and.w	r3, r3, #2
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d011      	beq.n	800bb52 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	691b      	ldr	r3, [r3, #16]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d106      	bne.n	800bb48 <pbuf_free+0x9c>
 800bb3a:	4b1d      	ldr	r3, [pc, #116]	; (800bbb0 <pbuf_free+0x104>)
 800bb3c:	f240 22ff 	movw	r2, #767	; 0x2ff
 800bb40:	491f      	ldr	r1, [pc, #124]	; (800bbc0 <pbuf_free+0x114>)
 800bb42:	481d      	ldr	r0, [pc, #116]	; (800bbb8 <pbuf_free+0x10c>)
 800bb44:	f009 fd5a 	bl	80155fc <iprintf>
        pc->custom_free_function(p);
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	691b      	ldr	r3, [r3, #16]
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	4798      	blx	r3
 800bb50:	e01d      	b.n	800bb8e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800bb52:	7bfb      	ldrb	r3, [r7, #15]
 800bb54:	2b02      	cmp	r3, #2
 800bb56:	d104      	bne.n	800bb62 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800bb58:	6879      	ldr	r1, [r7, #4]
 800bb5a:	200c      	movs	r0, #12
 800bb5c:	f7ff f902 	bl	800ad64 <memp_free>
 800bb60:	e015      	b.n	800bb8e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800bb62:	7bfb      	ldrb	r3, [r7, #15]
 800bb64:	2b01      	cmp	r3, #1
 800bb66:	d104      	bne.n	800bb72 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800bb68:	6879      	ldr	r1, [r7, #4]
 800bb6a:	200b      	movs	r0, #11
 800bb6c:	f7ff f8fa 	bl	800ad64 <memp_free>
 800bb70:	e00d      	b.n	800bb8e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800bb72:	7bfb      	ldrb	r3, [r7, #15]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d103      	bne.n	800bb80 <pbuf_free+0xd4>
          mem_free(p);
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f7fe fd85 	bl	800a688 <mem_free>
 800bb7e:	e006      	b.n	800bb8e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800bb80:	4b0b      	ldr	r3, [pc, #44]	; (800bbb0 <pbuf_free+0x104>)
 800bb82:	f240 320f 	movw	r2, #783	; 0x30f
 800bb86:	490f      	ldr	r1, [pc, #60]	; (800bbc4 <pbuf_free+0x118>)
 800bb88:	480b      	ldr	r0, [pc, #44]	; (800bbb8 <pbuf_free+0x10c>)
 800bb8a:	f009 fd37 	bl	80155fc <iprintf>
        }
      }
      count++;
 800bb8e:	7ffb      	ldrb	r3, [r7, #31]
 800bb90:	3301      	adds	r3, #1
 800bb92:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800bb94:	693b      	ldr	r3, [r7, #16]
 800bb96:	607b      	str	r3, [r7, #4]
 800bb98:	e001      	b.n	800bb9e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d199      	bne.n	800bad8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800bba4:	7ffb      	ldrb	r3, [r7, #31]
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	3720      	adds	r7, #32
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}
 800bbae:	bf00      	nop
 800bbb0:	08017638 	.word	0x08017638
 800bbb4:	0801779c 	.word	0x0801779c
 800bbb8:	08017698 	.word	0x08017698
 800bbbc:	080177c8 	.word	0x080177c8
 800bbc0:	080177e0 	.word	0x080177e0
 800bbc4:	08017804 	.word	0x08017804

0800bbc8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b085      	sub	sp, #20
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800bbd4:	e005      	b.n	800bbe2 <pbuf_clen+0x1a>
    ++len;
 800bbd6:	89fb      	ldrh	r3, [r7, #14]
 800bbd8:	3301      	adds	r3, #1
 800bbda:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d1f6      	bne.n	800bbd6 <pbuf_clen+0xe>
  }
  return len;
 800bbe8:	89fb      	ldrh	r3, [r7, #14]
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	3714      	adds	r7, #20
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf4:	4770      	bx	lr
	...

0800bbf8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b084      	sub	sp, #16
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d016      	beq.n	800bc34 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800bc06:	f009 fb3f 	bl	8015288 <sys_arch_protect>
 800bc0a:	60f8      	str	r0, [r7, #12]
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	7b9b      	ldrb	r3, [r3, #14]
 800bc10:	3301      	adds	r3, #1
 800bc12:	b2da      	uxtb	r2, r3
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	739a      	strb	r2, [r3, #14]
 800bc18:	68f8      	ldr	r0, [r7, #12]
 800bc1a:	f009 fb43 	bl	80152a4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	7b9b      	ldrb	r3, [r3, #14]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d106      	bne.n	800bc34 <pbuf_ref+0x3c>
 800bc26:	4b05      	ldr	r3, [pc, #20]	; (800bc3c <pbuf_ref+0x44>)
 800bc28:	f240 3242 	movw	r2, #834	; 0x342
 800bc2c:	4904      	ldr	r1, [pc, #16]	; (800bc40 <pbuf_ref+0x48>)
 800bc2e:	4805      	ldr	r0, [pc, #20]	; (800bc44 <pbuf_ref+0x4c>)
 800bc30:	f009 fce4 	bl	80155fc <iprintf>
  }
}
 800bc34:	bf00      	nop
 800bc36:	3710      	adds	r7, #16
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}
 800bc3c:	08017638 	.word	0x08017638
 800bc40:	08017818 	.word	0x08017818
 800bc44:	08017698 	.word	0x08017698

0800bc48 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b084      	sub	sp, #16
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d002      	beq.n	800bc5e <pbuf_cat+0x16>
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d107      	bne.n	800bc6e <pbuf_cat+0x26>
 800bc5e:	4b20      	ldr	r3, [pc, #128]	; (800bce0 <pbuf_cat+0x98>)
 800bc60:	f240 3259 	movw	r2, #857	; 0x359
 800bc64:	491f      	ldr	r1, [pc, #124]	; (800bce4 <pbuf_cat+0x9c>)
 800bc66:	4820      	ldr	r0, [pc, #128]	; (800bce8 <pbuf_cat+0xa0>)
 800bc68:	f009 fcc8 	bl	80155fc <iprintf>
 800bc6c:	e034      	b.n	800bcd8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	60fb      	str	r3, [r7, #12]
 800bc72:	e00a      	b.n	800bc8a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	891a      	ldrh	r2, [r3, #8]
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	891b      	ldrh	r3, [r3, #8]
 800bc7c:	4413      	add	r3, r2
 800bc7e:	b29a      	uxth	r2, r3
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	60fb      	str	r3, [r7, #12]
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d1f0      	bne.n	800bc74 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	891a      	ldrh	r2, [r3, #8]
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	895b      	ldrh	r3, [r3, #10]
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d006      	beq.n	800bcac <pbuf_cat+0x64>
 800bc9e:	4b10      	ldr	r3, [pc, #64]	; (800bce0 <pbuf_cat+0x98>)
 800bca0:	f240 3262 	movw	r2, #866	; 0x362
 800bca4:	4911      	ldr	r1, [pc, #68]	; (800bcec <pbuf_cat+0xa4>)
 800bca6:	4810      	ldr	r0, [pc, #64]	; (800bce8 <pbuf_cat+0xa0>)
 800bca8:	f009 fca8 	bl	80155fc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d006      	beq.n	800bcc2 <pbuf_cat+0x7a>
 800bcb4:	4b0a      	ldr	r3, [pc, #40]	; (800bce0 <pbuf_cat+0x98>)
 800bcb6:	f240 3263 	movw	r2, #867	; 0x363
 800bcba:	490d      	ldr	r1, [pc, #52]	; (800bcf0 <pbuf_cat+0xa8>)
 800bcbc:	480a      	ldr	r0, [pc, #40]	; (800bce8 <pbuf_cat+0xa0>)
 800bcbe:	f009 fc9d 	bl	80155fc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	891a      	ldrh	r2, [r3, #8]
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	891b      	ldrh	r3, [r3, #8]
 800bcca:	4413      	add	r3, r2
 800bccc:	b29a      	uxth	r2, r3
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	683a      	ldr	r2, [r7, #0]
 800bcd6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800bcd8:	3710      	adds	r7, #16
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}
 800bcde:	bf00      	nop
 800bce0:	08017638 	.word	0x08017638
 800bce4:	0801782c 	.word	0x0801782c
 800bce8:	08017698 	.word	0x08017698
 800bcec:	08017864 	.word	0x08017864
 800bcf0:	08017894 	.word	0x08017894

0800bcf4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b086      	sub	sp, #24
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
 800bcfc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	617b      	str	r3, [r7, #20]
 800bd02:	2300      	movs	r3, #0
 800bd04:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d008      	beq.n	800bd1e <pbuf_copy+0x2a>
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d005      	beq.n	800bd1e <pbuf_copy+0x2a>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	891a      	ldrh	r2, [r3, #8]
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	891b      	ldrh	r3, [r3, #8]
 800bd1a:	429a      	cmp	r2, r3
 800bd1c:	d209      	bcs.n	800bd32 <pbuf_copy+0x3e>
 800bd1e:	4b57      	ldr	r3, [pc, #348]	; (800be7c <pbuf_copy+0x188>)
 800bd20:	f240 32c9 	movw	r2, #969	; 0x3c9
 800bd24:	4956      	ldr	r1, [pc, #344]	; (800be80 <pbuf_copy+0x18c>)
 800bd26:	4857      	ldr	r0, [pc, #348]	; (800be84 <pbuf_copy+0x190>)
 800bd28:	f009 fc68 	bl	80155fc <iprintf>
 800bd2c:	f06f 030f 	mvn.w	r3, #15
 800bd30:	e09f      	b.n	800be72 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	895b      	ldrh	r3, [r3, #10]
 800bd36:	461a      	mov	r2, r3
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	1ad2      	subs	r2, r2, r3
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	895b      	ldrh	r3, [r3, #10]
 800bd40:	4619      	mov	r1, r3
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	1acb      	subs	r3, r1, r3
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d306      	bcc.n	800bd58 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	895b      	ldrh	r3, [r3, #10]
 800bd4e:	461a      	mov	r2, r3
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	1ad3      	subs	r3, r2, r3
 800bd54:	60fb      	str	r3, [r7, #12]
 800bd56:	e005      	b.n	800bd64 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	895b      	ldrh	r3, [r3, #10]
 800bd5c:	461a      	mov	r2, r3
 800bd5e:	697b      	ldr	r3, [r7, #20]
 800bd60:	1ad3      	subs	r3, r2, r3
 800bd62:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	685a      	ldr	r2, [r3, #4]
 800bd68:	697b      	ldr	r3, [r7, #20]
 800bd6a:	18d0      	adds	r0, r2, r3
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	685a      	ldr	r2, [r3, #4]
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	4413      	add	r3, r2
 800bd74:	68fa      	ldr	r2, [r7, #12]
 800bd76:	4619      	mov	r1, r3
 800bd78:	f009 fbcf 	bl	801551a <memcpy>
    offset_to += len;
 800bd7c:	697a      	ldr	r2, [r7, #20]
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	4413      	add	r3, r2
 800bd82:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800bd84:	693a      	ldr	r2, [r7, #16]
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	4413      	add	r3, r2
 800bd8a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	895b      	ldrh	r3, [r3, #10]
 800bd90:	461a      	mov	r2, r3
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	4293      	cmp	r3, r2
 800bd96:	d906      	bls.n	800bda6 <pbuf_copy+0xb2>
 800bd98:	4b38      	ldr	r3, [pc, #224]	; (800be7c <pbuf_copy+0x188>)
 800bd9a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800bd9e:	493a      	ldr	r1, [pc, #232]	; (800be88 <pbuf_copy+0x194>)
 800bda0:	4838      	ldr	r0, [pc, #224]	; (800be84 <pbuf_copy+0x190>)
 800bda2:	f009 fc2b 	bl	80155fc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	895b      	ldrh	r3, [r3, #10]
 800bdaa:	461a      	mov	r2, r3
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	d906      	bls.n	800bdc0 <pbuf_copy+0xcc>
 800bdb2:	4b32      	ldr	r3, [pc, #200]	; (800be7c <pbuf_copy+0x188>)
 800bdb4:	f240 32da 	movw	r2, #986	; 0x3da
 800bdb8:	4934      	ldr	r1, [pc, #208]	; (800be8c <pbuf_copy+0x198>)
 800bdba:	4832      	ldr	r0, [pc, #200]	; (800be84 <pbuf_copy+0x190>)
 800bdbc:	f009 fc1e 	bl	80155fc <iprintf>
    if (offset_from >= p_from->len) {
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	895b      	ldrh	r3, [r3, #10]
 800bdc4:	461a      	mov	r2, r3
 800bdc6:	693b      	ldr	r3, [r7, #16]
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	d304      	bcc.n	800bdd6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	895b      	ldrh	r3, [r3, #10]
 800bdda:	461a      	mov	r2, r3
 800bddc:	697b      	ldr	r3, [r7, #20]
 800bdde:	4293      	cmp	r3, r2
 800bde0:	d114      	bne.n	800be0c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800bde2:	2300      	movs	r3, #0
 800bde4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d10c      	bne.n	800be0c <pbuf_copy+0x118>
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d009      	beq.n	800be0c <pbuf_copy+0x118>
 800bdf8:	4b20      	ldr	r3, [pc, #128]	; (800be7c <pbuf_copy+0x188>)
 800bdfa:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800bdfe:	4924      	ldr	r1, [pc, #144]	; (800be90 <pbuf_copy+0x19c>)
 800be00:	4820      	ldr	r0, [pc, #128]	; (800be84 <pbuf_copy+0x190>)
 800be02:	f009 fbfb 	bl	80155fc <iprintf>
 800be06:	f06f 030f 	mvn.w	r3, #15
 800be0a:	e032      	b.n	800be72 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d013      	beq.n	800be3a <pbuf_copy+0x146>
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	895a      	ldrh	r2, [r3, #10]
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	891b      	ldrh	r3, [r3, #8]
 800be1a:	429a      	cmp	r2, r3
 800be1c:	d10d      	bne.n	800be3a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d009      	beq.n	800be3a <pbuf_copy+0x146>
 800be26:	4b15      	ldr	r3, [pc, #84]	; (800be7c <pbuf_copy+0x188>)
 800be28:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800be2c:	4919      	ldr	r1, [pc, #100]	; (800be94 <pbuf_copy+0x1a0>)
 800be2e:	4815      	ldr	r0, [pc, #84]	; (800be84 <pbuf_copy+0x190>)
 800be30:	f009 fbe4 	bl	80155fc <iprintf>
 800be34:	f06f 0305 	mvn.w	r3, #5
 800be38:	e01b      	b.n	800be72 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d013      	beq.n	800be68 <pbuf_copy+0x174>
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	895a      	ldrh	r2, [r3, #10]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	891b      	ldrh	r3, [r3, #8]
 800be48:	429a      	cmp	r2, r3
 800be4a:	d10d      	bne.n	800be68 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d009      	beq.n	800be68 <pbuf_copy+0x174>
 800be54:	4b09      	ldr	r3, [pc, #36]	; (800be7c <pbuf_copy+0x188>)
 800be56:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800be5a:	490e      	ldr	r1, [pc, #56]	; (800be94 <pbuf_copy+0x1a0>)
 800be5c:	4809      	ldr	r0, [pc, #36]	; (800be84 <pbuf_copy+0x190>)
 800be5e:	f009 fbcd 	bl	80155fc <iprintf>
 800be62:	f06f 0305 	mvn.w	r3, #5
 800be66:	e004      	b.n	800be72 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	f47f af61 	bne.w	800bd32 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800be70:	2300      	movs	r3, #0
}
 800be72:	4618      	mov	r0, r3
 800be74:	3718      	adds	r7, #24
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}
 800be7a:	bf00      	nop
 800be7c:	08017638 	.word	0x08017638
 800be80:	080178e0 	.word	0x080178e0
 800be84:	08017698 	.word	0x08017698
 800be88:	08017910 	.word	0x08017910
 800be8c:	08017928 	.word	0x08017928
 800be90:	08017944 	.word	0x08017944
 800be94:	08017954 	.word	0x08017954

0800be98 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b088      	sub	sp, #32
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	60f8      	str	r0, [r7, #12]
 800bea0:	60b9      	str	r1, [r7, #8]
 800bea2:	4611      	mov	r1, r2
 800bea4:	461a      	mov	r2, r3
 800bea6:	460b      	mov	r3, r1
 800bea8:	80fb      	strh	r3, [r7, #6]
 800beaa:	4613      	mov	r3, r2
 800beac:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800beae:	2300      	movs	r3, #0
 800beb0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800beb2:	2300      	movs	r3, #0
 800beb4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d108      	bne.n	800bece <pbuf_copy_partial+0x36>
 800bebc:	4b2b      	ldr	r3, [pc, #172]	; (800bf6c <pbuf_copy_partial+0xd4>)
 800bebe:	f240 420a 	movw	r2, #1034	; 0x40a
 800bec2:	492b      	ldr	r1, [pc, #172]	; (800bf70 <pbuf_copy_partial+0xd8>)
 800bec4:	482b      	ldr	r0, [pc, #172]	; (800bf74 <pbuf_copy_partial+0xdc>)
 800bec6:	f009 fb99 	bl	80155fc <iprintf>
 800beca:	2300      	movs	r3, #0
 800becc:	e04a      	b.n	800bf64 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d108      	bne.n	800bee6 <pbuf_copy_partial+0x4e>
 800bed4:	4b25      	ldr	r3, [pc, #148]	; (800bf6c <pbuf_copy_partial+0xd4>)
 800bed6:	f240 420b 	movw	r2, #1035	; 0x40b
 800beda:	4927      	ldr	r1, [pc, #156]	; (800bf78 <pbuf_copy_partial+0xe0>)
 800bedc:	4825      	ldr	r0, [pc, #148]	; (800bf74 <pbuf_copy_partial+0xdc>)
 800bede:	f009 fb8d 	bl	80155fc <iprintf>
 800bee2:	2300      	movs	r3, #0
 800bee4:	e03e      	b.n	800bf64 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	61fb      	str	r3, [r7, #28]
 800beea:	e034      	b.n	800bf56 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800beec:	88bb      	ldrh	r3, [r7, #4]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d00a      	beq.n	800bf08 <pbuf_copy_partial+0x70>
 800bef2:	69fb      	ldr	r3, [r7, #28]
 800bef4:	895b      	ldrh	r3, [r3, #10]
 800bef6:	88ba      	ldrh	r2, [r7, #4]
 800bef8:	429a      	cmp	r2, r3
 800befa:	d305      	bcc.n	800bf08 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800befc:	69fb      	ldr	r3, [r7, #28]
 800befe:	895b      	ldrh	r3, [r3, #10]
 800bf00:	88ba      	ldrh	r2, [r7, #4]
 800bf02:	1ad3      	subs	r3, r2, r3
 800bf04:	80bb      	strh	r3, [r7, #4]
 800bf06:	e023      	b.n	800bf50 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800bf08:	69fb      	ldr	r3, [r7, #28]
 800bf0a:	895a      	ldrh	r2, [r3, #10]
 800bf0c:	88bb      	ldrh	r3, [r7, #4]
 800bf0e:	1ad3      	subs	r3, r2, r3
 800bf10:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800bf12:	8b3a      	ldrh	r2, [r7, #24]
 800bf14:	88fb      	ldrh	r3, [r7, #6]
 800bf16:	429a      	cmp	r2, r3
 800bf18:	d901      	bls.n	800bf1e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800bf1a:	88fb      	ldrh	r3, [r7, #6]
 800bf1c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800bf1e:	8b7b      	ldrh	r3, [r7, #26]
 800bf20:	68ba      	ldr	r2, [r7, #8]
 800bf22:	18d0      	adds	r0, r2, r3
 800bf24:	69fb      	ldr	r3, [r7, #28]
 800bf26:	685a      	ldr	r2, [r3, #4]
 800bf28:	88bb      	ldrh	r3, [r7, #4]
 800bf2a:	4413      	add	r3, r2
 800bf2c:	8b3a      	ldrh	r2, [r7, #24]
 800bf2e:	4619      	mov	r1, r3
 800bf30:	f009 faf3 	bl	801551a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800bf34:	8afa      	ldrh	r2, [r7, #22]
 800bf36:	8b3b      	ldrh	r3, [r7, #24]
 800bf38:	4413      	add	r3, r2
 800bf3a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800bf3c:	8b7a      	ldrh	r2, [r7, #26]
 800bf3e:	8b3b      	ldrh	r3, [r7, #24]
 800bf40:	4413      	add	r3, r2
 800bf42:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800bf44:	88fa      	ldrh	r2, [r7, #6]
 800bf46:	8b3b      	ldrh	r3, [r7, #24]
 800bf48:	1ad3      	subs	r3, r2, r3
 800bf4a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bf50:	69fb      	ldr	r3, [r7, #28]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	61fb      	str	r3, [r7, #28]
 800bf56:	88fb      	ldrh	r3, [r7, #6]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d002      	beq.n	800bf62 <pbuf_copy_partial+0xca>
 800bf5c:	69fb      	ldr	r3, [r7, #28]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d1c4      	bne.n	800beec <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800bf62:	8afb      	ldrh	r3, [r7, #22]
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3720      	adds	r7, #32
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}
 800bf6c:	08017638 	.word	0x08017638
 800bf70:	08017980 	.word	0x08017980
 800bf74:	08017698 	.word	0x08017698
 800bf78:	080179a0 	.word	0x080179a0

0800bf7c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b084      	sub	sp, #16
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	4603      	mov	r3, r0
 800bf84:	603a      	str	r2, [r7, #0]
 800bf86:	71fb      	strb	r3, [r7, #7]
 800bf88:	460b      	mov	r3, r1
 800bf8a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	8919      	ldrh	r1, [r3, #8]
 800bf90:	88ba      	ldrh	r2, [r7, #4]
 800bf92:	79fb      	ldrb	r3, [r7, #7]
 800bf94:	4618      	mov	r0, r3
 800bf96:	f7ff faa5 	bl	800b4e4 <pbuf_alloc>
 800bf9a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d101      	bne.n	800bfa6 <pbuf_clone+0x2a>
    return NULL;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	e011      	b.n	800bfca <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800bfa6:	6839      	ldr	r1, [r7, #0]
 800bfa8:	68f8      	ldr	r0, [r7, #12]
 800bfaa:	f7ff fea3 	bl	800bcf4 <pbuf_copy>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800bfb2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d006      	beq.n	800bfc8 <pbuf_clone+0x4c>
 800bfba:	4b06      	ldr	r3, [pc, #24]	; (800bfd4 <pbuf_clone+0x58>)
 800bfbc:	f240 5224 	movw	r2, #1316	; 0x524
 800bfc0:	4905      	ldr	r1, [pc, #20]	; (800bfd8 <pbuf_clone+0x5c>)
 800bfc2:	4806      	ldr	r0, [pc, #24]	; (800bfdc <pbuf_clone+0x60>)
 800bfc4:	f009 fb1a 	bl	80155fc <iprintf>
  return q;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3710      	adds	r7, #16
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}
 800bfd2:	bf00      	nop
 800bfd4:	08017638 	.word	0x08017638
 800bfd8:	08017aac 	.word	0x08017aac
 800bfdc:	08017698 	.word	0x08017698

0800bfe0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bfe4:	f009 fb22 	bl	801562c <rand>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	b29b      	uxth	r3, r3
 800bfec:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bff0:	b29b      	uxth	r3, r3
 800bff2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800bff6:	b29a      	uxth	r2, r3
 800bff8:	4b01      	ldr	r3, [pc, #4]	; (800c000 <tcp_init+0x20>)
 800bffa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bffc:	bf00      	nop
 800bffe:	bd80      	pop	{r7, pc}
 800c000:	20000010 	.word	0x20000010

0800c004 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b082      	sub	sp, #8
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	7d1b      	ldrb	r3, [r3, #20]
 800c010:	2b01      	cmp	r3, #1
 800c012:	d105      	bne.n	800c020 <tcp_free+0x1c>
 800c014:	4b06      	ldr	r3, [pc, #24]	; (800c030 <tcp_free+0x2c>)
 800c016:	22d4      	movs	r2, #212	; 0xd4
 800c018:	4906      	ldr	r1, [pc, #24]	; (800c034 <tcp_free+0x30>)
 800c01a:	4807      	ldr	r0, [pc, #28]	; (800c038 <tcp_free+0x34>)
 800c01c:	f009 faee 	bl	80155fc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c020:	6879      	ldr	r1, [r7, #4]
 800c022:	2001      	movs	r0, #1
 800c024:	f7fe fe9e 	bl	800ad64 <memp_free>
}
 800c028:	bf00      	nop
 800c02a:	3708      	adds	r7, #8
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}
 800c030:	08017b38 	.word	0x08017b38
 800c034:	08017b68 	.word	0x08017b68
 800c038:	08017b7c 	.word	0x08017b7c

0800c03c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b082      	sub	sp, #8
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	7d1b      	ldrb	r3, [r3, #20]
 800c048:	2b01      	cmp	r3, #1
 800c04a:	d105      	bne.n	800c058 <tcp_free_listen+0x1c>
 800c04c:	4b06      	ldr	r3, [pc, #24]	; (800c068 <tcp_free_listen+0x2c>)
 800c04e:	22df      	movs	r2, #223	; 0xdf
 800c050:	4906      	ldr	r1, [pc, #24]	; (800c06c <tcp_free_listen+0x30>)
 800c052:	4807      	ldr	r0, [pc, #28]	; (800c070 <tcp_free_listen+0x34>)
 800c054:	f009 fad2 	bl	80155fc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c058:	6879      	ldr	r1, [r7, #4]
 800c05a:	2002      	movs	r0, #2
 800c05c:	f7fe fe82 	bl	800ad64 <memp_free>
}
 800c060:	bf00      	nop
 800c062:	3708      	adds	r7, #8
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}
 800c068:	08017b38 	.word	0x08017b38
 800c06c:	08017ba4 	.word	0x08017ba4
 800c070:	08017b7c 	.word	0x08017b7c

0800c074 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c078:	f001 f8a6 	bl	800d1c8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c07c:	4b07      	ldr	r3, [pc, #28]	; (800c09c <tcp_tmr+0x28>)
 800c07e:	781b      	ldrb	r3, [r3, #0]
 800c080:	3301      	adds	r3, #1
 800c082:	b2da      	uxtb	r2, r3
 800c084:	4b05      	ldr	r3, [pc, #20]	; (800c09c <tcp_tmr+0x28>)
 800c086:	701a      	strb	r2, [r3, #0]
 800c088:	4b04      	ldr	r3, [pc, #16]	; (800c09c <tcp_tmr+0x28>)
 800c08a:	781b      	ldrb	r3, [r3, #0]
 800c08c:	f003 0301 	and.w	r3, r3, #1
 800c090:	2b00      	cmp	r3, #0
 800c092:	d001      	beq.n	800c098 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c094:	f000 fd58 	bl	800cb48 <tcp_slowtmr>
  }
}
 800c098:	bf00      	nop
 800c09a:	bd80      	pop	{r7, pc}
 800c09c:	20004acd 	.word	0x20004acd

0800c0a0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b084      	sub	sp, #16
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d105      	bne.n	800c0bc <tcp_remove_listener+0x1c>
 800c0b0:	4b0d      	ldr	r3, [pc, #52]	; (800c0e8 <tcp_remove_listener+0x48>)
 800c0b2:	22ff      	movs	r2, #255	; 0xff
 800c0b4:	490d      	ldr	r1, [pc, #52]	; (800c0ec <tcp_remove_listener+0x4c>)
 800c0b6:	480e      	ldr	r0, [pc, #56]	; (800c0f0 <tcp_remove_listener+0x50>)
 800c0b8:	f009 faa0 	bl	80155fc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	60fb      	str	r3, [r7, #12]
 800c0c0:	e00a      	b.n	800c0d8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0c6:	683a      	ldr	r2, [r7, #0]
 800c0c8:	429a      	cmp	r2, r3
 800c0ca:	d102      	bne.n	800c0d2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	68db      	ldr	r3, [r3, #12]
 800c0d6:	60fb      	str	r3, [r7, #12]
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d1f1      	bne.n	800c0c2 <tcp_remove_listener+0x22>
    }
  }
}
 800c0de:	bf00      	nop
 800c0e0:	bf00      	nop
 800c0e2:	3710      	adds	r7, #16
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}
 800c0e8:	08017b38 	.word	0x08017b38
 800c0ec:	08017bc0 	.word	0x08017bc0
 800c0f0:	08017b7c 	.word	0x08017b7c

0800c0f4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b084      	sub	sp, #16
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d106      	bne.n	800c110 <tcp_listen_closed+0x1c>
 800c102:	4b14      	ldr	r3, [pc, #80]	; (800c154 <tcp_listen_closed+0x60>)
 800c104:	f240 1211 	movw	r2, #273	; 0x111
 800c108:	4913      	ldr	r1, [pc, #76]	; (800c158 <tcp_listen_closed+0x64>)
 800c10a:	4814      	ldr	r0, [pc, #80]	; (800c15c <tcp_listen_closed+0x68>)
 800c10c:	f009 fa76 	bl	80155fc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	7d1b      	ldrb	r3, [r3, #20]
 800c114:	2b01      	cmp	r3, #1
 800c116:	d006      	beq.n	800c126 <tcp_listen_closed+0x32>
 800c118:	4b0e      	ldr	r3, [pc, #56]	; (800c154 <tcp_listen_closed+0x60>)
 800c11a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800c11e:	4910      	ldr	r1, [pc, #64]	; (800c160 <tcp_listen_closed+0x6c>)
 800c120:	480e      	ldr	r0, [pc, #56]	; (800c15c <tcp_listen_closed+0x68>)
 800c122:	f009 fa6b 	bl	80155fc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c126:	2301      	movs	r3, #1
 800c128:	60fb      	str	r3, [r7, #12]
 800c12a:	e00b      	b.n	800c144 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c12c:	4a0d      	ldr	r2, [pc, #52]	; (800c164 <tcp_listen_closed+0x70>)
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	6879      	ldr	r1, [r7, #4]
 800c138:	4618      	mov	r0, r3
 800c13a:	f7ff ffb1 	bl	800c0a0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	3301      	adds	r3, #1
 800c142:	60fb      	str	r3, [r7, #12]
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	2b03      	cmp	r3, #3
 800c148:	d9f0      	bls.n	800c12c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c14a:	bf00      	nop
 800c14c:	bf00      	nop
 800c14e:	3710      	adds	r7, #16
 800c150:	46bd      	mov	sp, r7
 800c152:	bd80      	pop	{r7, pc}
 800c154:	08017b38 	.word	0x08017b38
 800c158:	08017be8 	.word	0x08017be8
 800c15c:	08017b7c 	.word	0x08017b7c
 800c160:	08017bf4 	.word	0x08017bf4
 800c164:	08019f7c 	.word	0x08019f7c

0800c168 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c168:	b5b0      	push	{r4, r5, r7, lr}
 800c16a:	b088      	sub	sp, #32
 800c16c:	af04      	add	r7, sp, #16
 800c16e:	6078      	str	r0, [r7, #4]
 800c170:	460b      	mov	r3, r1
 800c172:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d106      	bne.n	800c188 <tcp_close_shutdown+0x20>
 800c17a:	4b63      	ldr	r3, [pc, #396]	; (800c308 <tcp_close_shutdown+0x1a0>)
 800c17c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c180:	4962      	ldr	r1, [pc, #392]	; (800c30c <tcp_close_shutdown+0x1a4>)
 800c182:	4863      	ldr	r0, [pc, #396]	; (800c310 <tcp_close_shutdown+0x1a8>)
 800c184:	f009 fa3a 	bl	80155fc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c188:	78fb      	ldrb	r3, [r7, #3]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d066      	beq.n	800c25c <tcp_close_shutdown+0xf4>
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	7d1b      	ldrb	r3, [r3, #20]
 800c192:	2b04      	cmp	r3, #4
 800c194:	d003      	beq.n	800c19e <tcp_close_shutdown+0x36>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	7d1b      	ldrb	r3, [r3, #20]
 800c19a:	2b07      	cmp	r3, #7
 800c19c:	d15e      	bne.n	800c25c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d104      	bne.n	800c1b0 <tcp_close_shutdown+0x48>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1aa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c1ae:	d055      	beq.n	800c25c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	8b5b      	ldrh	r3, [r3, #26]
 800c1b4:	f003 0310 	and.w	r3, r3, #16
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d106      	bne.n	800c1ca <tcp_close_shutdown+0x62>
 800c1bc:	4b52      	ldr	r3, [pc, #328]	; (800c308 <tcp_close_shutdown+0x1a0>)
 800c1be:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800c1c2:	4954      	ldr	r1, [pc, #336]	; (800c314 <tcp_close_shutdown+0x1ac>)
 800c1c4:	4852      	ldr	r0, [pc, #328]	; (800c310 <tcp_close_shutdown+0x1a8>)
 800c1c6:	f009 fa19 	bl	80155fc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c1d2:	687d      	ldr	r5, [r7, #4]
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	3304      	adds	r3, #4
 800c1d8:	687a      	ldr	r2, [r7, #4]
 800c1da:	8ad2      	ldrh	r2, [r2, #22]
 800c1dc:	6879      	ldr	r1, [r7, #4]
 800c1de:	8b09      	ldrh	r1, [r1, #24]
 800c1e0:	9102      	str	r1, [sp, #8]
 800c1e2:	9201      	str	r2, [sp, #4]
 800c1e4:	9300      	str	r3, [sp, #0]
 800c1e6:	462b      	mov	r3, r5
 800c1e8:	4622      	mov	r2, r4
 800c1ea:	4601      	mov	r1, r0
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f005 fdb7 	bl	8011d60 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f001 fb98 	bl	800d928 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c1f8:	4b47      	ldr	r3, [pc, #284]	; (800c318 <tcp_close_shutdown+0x1b0>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	687a      	ldr	r2, [r7, #4]
 800c1fe:	429a      	cmp	r2, r3
 800c200:	d105      	bne.n	800c20e <tcp_close_shutdown+0xa6>
 800c202:	4b45      	ldr	r3, [pc, #276]	; (800c318 <tcp_close_shutdown+0x1b0>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	68db      	ldr	r3, [r3, #12]
 800c208:	4a43      	ldr	r2, [pc, #268]	; (800c318 <tcp_close_shutdown+0x1b0>)
 800c20a:	6013      	str	r3, [r2, #0]
 800c20c:	e013      	b.n	800c236 <tcp_close_shutdown+0xce>
 800c20e:	4b42      	ldr	r3, [pc, #264]	; (800c318 <tcp_close_shutdown+0x1b0>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	60fb      	str	r3, [r7, #12]
 800c214:	e00c      	b.n	800c230 <tcp_close_shutdown+0xc8>
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	68db      	ldr	r3, [r3, #12]
 800c21a:	687a      	ldr	r2, [r7, #4]
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d104      	bne.n	800c22a <tcp_close_shutdown+0xc2>
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	68da      	ldr	r2, [r3, #12]
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	60da      	str	r2, [r3, #12]
 800c228:	e005      	b.n	800c236 <tcp_close_shutdown+0xce>
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	68db      	ldr	r3, [r3, #12]
 800c22e:	60fb      	str	r3, [r7, #12]
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d1ef      	bne.n	800c216 <tcp_close_shutdown+0xae>
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2200      	movs	r2, #0
 800c23a:	60da      	str	r2, [r3, #12]
 800c23c:	4b37      	ldr	r3, [pc, #220]	; (800c31c <tcp_close_shutdown+0x1b4>)
 800c23e:	2201      	movs	r2, #1
 800c240:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c242:	4b37      	ldr	r3, [pc, #220]	; (800c320 <tcp_close_shutdown+0x1b8>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	687a      	ldr	r2, [r7, #4]
 800c248:	429a      	cmp	r2, r3
 800c24a:	d102      	bne.n	800c252 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c24c:	f004 f82c 	bl	80102a8 <tcp_trigger_input_pcb_close>
 800c250:	e002      	b.n	800c258 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f7ff fed6 	bl	800c004 <tcp_free>
      }
      return ERR_OK;
 800c258:	2300      	movs	r3, #0
 800c25a:	e050      	b.n	800c2fe <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	7d1b      	ldrb	r3, [r3, #20]
 800c260:	2b02      	cmp	r3, #2
 800c262:	d03b      	beq.n	800c2dc <tcp_close_shutdown+0x174>
 800c264:	2b02      	cmp	r3, #2
 800c266:	dc44      	bgt.n	800c2f2 <tcp_close_shutdown+0x18a>
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d002      	beq.n	800c272 <tcp_close_shutdown+0x10a>
 800c26c:	2b01      	cmp	r3, #1
 800c26e:	d02a      	beq.n	800c2c6 <tcp_close_shutdown+0x15e>
 800c270:	e03f      	b.n	800c2f2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	8adb      	ldrh	r3, [r3, #22]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d021      	beq.n	800c2be <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c27a:	4b2a      	ldr	r3, [pc, #168]	; (800c324 <tcp_close_shutdown+0x1bc>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	687a      	ldr	r2, [r7, #4]
 800c280:	429a      	cmp	r2, r3
 800c282:	d105      	bne.n	800c290 <tcp_close_shutdown+0x128>
 800c284:	4b27      	ldr	r3, [pc, #156]	; (800c324 <tcp_close_shutdown+0x1bc>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	68db      	ldr	r3, [r3, #12]
 800c28a:	4a26      	ldr	r2, [pc, #152]	; (800c324 <tcp_close_shutdown+0x1bc>)
 800c28c:	6013      	str	r3, [r2, #0]
 800c28e:	e013      	b.n	800c2b8 <tcp_close_shutdown+0x150>
 800c290:	4b24      	ldr	r3, [pc, #144]	; (800c324 <tcp_close_shutdown+0x1bc>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	60bb      	str	r3, [r7, #8]
 800c296:	e00c      	b.n	800c2b2 <tcp_close_shutdown+0x14a>
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	68db      	ldr	r3, [r3, #12]
 800c29c:	687a      	ldr	r2, [r7, #4]
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	d104      	bne.n	800c2ac <tcp_close_shutdown+0x144>
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	68da      	ldr	r2, [r3, #12]
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	60da      	str	r2, [r3, #12]
 800c2aa:	e005      	b.n	800c2b8 <tcp_close_shutdown+0x150>
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	68db      	ldr	r3, [r3, #12]
 800c2b0:	60bb      	str	r3, [r7, #8]
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d1ef      	bne.n	800c298 <tcp_close_shutdown+0x130>
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f7ff fea0 	bl	800c004 <tcp_free>
      break;
 800c2c4:	e01a      	b.n	800c2fc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f7ff ff14 	bl	800c0f4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c2cc:	6879      	ldr	r1, [r7, #4]
 800c2ce:	4816      	ldr	r0, [pc, #88]	; (800c328 <tcp_close_shutdown+0x1c0>)
 800c2d0:	f001 fb7a 	bl	800d9c8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f7ff feb1 	bl	800c03c <tcp_free_listen>
      break;
 800c2da:	e00f      	b.n	800c2fc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c2dc:	6879      	ldr	r1, [r7, #4]
 800c2de:	480e      	ldr	r0, [pc, #56]	; (800c318 <tcp_close_shutdown+0x1b0>)
 800c2e0:	f001 fb72 	bl	800d9c8 <tcp_pcb_remove>
 800c2e4:	4b0d      	ldr	r3, [pc, #52]	; (800c31c <tcp_close_shutdown+0x1b4>)
 800c2e6:	2201      	movs	r2, #1
 800c2e8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f7ff fe8a 	bl	800c004 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c2f0:	e004      	b.n	800c2fc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f000 f81a 	bl	800c32c <tcp_close_shutdown_fin>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	e000      	b.n	800c2fe <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800c2fc:	2300      	movs	r3, #0
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3710      	adds	r7, #16
 800c302:	46bd      	mov	sp, r7
 800c304:	bdb0      	pop	{r4, r5, r7, pc}
 800c306:	bf00      	nop
 800c308:	08017b38 	.word	0x08017b38
 800c30c:	08017c0c 	.word	0x08017c0c
 800c310:	08017b7c 	.word	0x08017b7c
 800c314:	08017c2c 	.word	0x08017c2c
 800c318:	2000b7d8 	.word	0x2000b7d8
 800c31c:	2000b7d4 	.word	0x2000b7d4
 800c320:	2000b7ec 	.word	0x2000b7ec
 800c324:	2000b7e4 	.word	0x2000b7e4
 800c328:	2000b7e0 	.word	0x2000b7e0

0800c32c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b084      	sub	sp, #16
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d106      	bne.n	800c348 <tcp_close_shutdown_fin+0x1c>
 800c33a:	4b2e      	ldr	r3, [pc, #184]	; (800c3f4 <tcp_close_shutdown_fin+0xc8>)
 800c33c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800c340:	492d      	ldr	r1, [pc, #180]	; (800c3f8 <tcp_close_shutdown_fin+0xcc>)
 800c342:	482e      	ldr	r0, [pc, #184]	; (800c3fc <tcp_close_shutdown_fin+0xd0>)
 800c344:	f009 f95a 	bl	80155fc <iprintf>

  switch (pcb->state) {
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	7d1b      	ldrb	r3, [r3, #20]
 800c34c:	2b07      	cmp	r3, #7
 800c34e:	d020      	beq.n	800c392 <tcp_close_shutdown_fin+0x66>
 800c350:	2b07      	cmp	r3, #7
 800c352:	dc2b      	bgt.n	800c3ac <tcp_close_shutdown_fin+0x80>
 800c354:	2b03      	cmp	r3, #3
 800c356:	d002      	beq.n	800c35e <tcp_close_shutdown_fin+0x32>
 800c358:	2b04      	cmp	r3, #4
 800c35a:	d00d      	beq.n	800c378 <tcp_close_shutdown_fin+0x4c>
 800c35c:	e026      	b.n	800c3ac <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	f004 fe0c 	bl	8010f7c <tcp_send_fin>
 800c364:	4603      	mov	r3, r0
 800c366:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c368:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d11f      	bne.n	800c3b0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2205      	movs	r2, #5
 800c374:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c376:	e01b      	b.n	800c3b0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f004 fdff 	bl	8010f7c <tcp_send_fin>
 800c37e:	4603      	mov	r3, r0
 800c380:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d114      	bne.n	800c3b4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2205      	movs	r2, #5
 800c38e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c390:	e010      	b.n	800c3b4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f004 fdf2 	bl	8010f7c <tcp_send_fin>
 800c398:	4603      	mov	r3, r0
 800c39a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c39c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d109      	bne.n	800c3b8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2209      	movs	r2, #9
 800c3a8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c3aa:	e005      	b.n	800c3b8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	e01c      	b.n	800c3ea <tcp_close_shutdown_fin+0xbe>
      break;
 800c3b0:	bf00      	nop
 800c3b2:	e002      	b.n	800c3ba <tcp_close_shutdown_fin+0x8e>
      break;
 800c3b4:	bf00      	nop
 800c3b6:	e000      	b.n	800c3ba <tcp_close_shutdown_fin+0x8e>
      break;
 800c3b8:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c3ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d103      	bne.n	800c3ca <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	f004 ff18 	bl	80111f8 <tcp_output>
 800c3c8:	e00d      	b.n	800c3e6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800c3ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c3d2:	d108      	bne.n	800c3e6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	8b5b      	ldrh	r3, [r3, #26]
 800c3d8:	f043 0308 	orr.w	r3, r3, #8
 800c3dc:	b29a      	uxth	r2, r3
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	e001      	b.n	800c3ea <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800c3e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3710      	adds	r7, #16
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}
 800c3f2:	bf00      	nop
 800c3f4:	08017b38 	.word	0x08017b38
 800c3f8:	08017be8 	.word	0x08017be8
 800c3fc:	08017b7c 	.word	0x08017b7c

0800c400 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b082      	sub	sp, #8
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d109      	bne.n	800c422 <tcp_close+0x22>
 800c40e:	4b0f      	ldr	r3, [pc, #60]	; (800c44c <tcp_close+0x4c>)
 800c410:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800c414:	490e      	ldr	r1, [pc, #56]	; (800c450 <tcp_close+0x50>)
 800c416:	480f      	ldr	r0, [pc, #60]	; (800c454 <tcp_close+0x54>)
 800c418:	f009 f8f0 	bl	80155fc <iprintf>
 800c41c:	f06f 030f 	mvn.w	r3, #15
 800c420:	e00f      	b.n	800c442 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	7d1b      	ldrb	r3, [r3, #20]
 800c426:	2b01      	cmp	r3, #1
 800c428:	d006      	beq.n	800c438 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	8b5b      	ldrh	r3, [r3, #26]
 800c42e:	f043 0310 	orr.w	r3, r3, #16
 800c432:	b29a      	uxth	r2, r3
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c438:	2101      	movs	r1, #1
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f7ff fe94 	bl	800c168 <tcp_close_shutdown>
 800c440:	4603      	mov	r3, r0
}
 800c442:	4618      	mov	r0, r3
 800c444:	3708      	adds	r7, #8
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}
 800c44a:	bf00      	nop
 800c44c:	08017b38 	.word	0x08017b38
 800c450:	08017c48 	.word	0x08017c48
 800c454:	08017b7c 	.word	0x08017b7c

0800c458 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b084      	sub	sp, #16
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	60f8      	str	r0, [r7, #12]
 800c460:	60b9      	str	r1, [r7, #8]
 800c462:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d109      	bne.n	800c47e <tcp_shutdown+0x26>
 800c46a:	4b26      	ldr	r3, [pc, #152]	; (800c504 <tcp_shutdown+0xac>)
 800c46c:	f240 2207 	movw	r2, #519	; 0x207
 800c470:	4925      	ldr	r1, [pc, #148]	; (800c508 <tcp_shutdown+0xb0>)
 800c472:	4826      	ldr	r0, [pc, #152]	; (800c50c <tcp_shutdown+0xb4>)
 800c474:	f009 f8c2 	bl	80155fc <iprintf>
 800c478:	f06f 030f 	mvn.w	r3, #15
 800c47c:	e03d      	b.n	800c4fa <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	7d1b      	ldrb	r3, [r3, #20]
 800c482:	2b01      	cmp	r3, #1
 800c484:	d102      	bne.n	800c48c <tcp_shutdown+0x34>
    return ERR_CONN;
 800c486:	f06f 030a 	mvn.w	r3, #10
 800c48a:	e036      	b.n	800c4fa <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d01b      	beq.n	800c4ca <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	8b5b      	ldrh	r3, [r3, #26]
 800c496:	f043 0310 	orr.w	r3, r3, #16
 800c49a:	b29a      	uxth	r2, r3
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d005      	beq.n	800c4b2 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800c4a6:	2101      	movs	r1, #1
 800c4a8:	68f8      	ldr	r0, [r7, #12]
 800c4aa:	f7ff fe5d 	bl	800c168 <tcp_close_shutdown>
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	e023      	b.n	800c4fa <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d007      	beq.n	800c4ca <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f7ff faf4 	bl	800baac <pbuf_free>
      pcb->refused_data = NULL;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d013      	beq.n	800c4f8 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	7d1b      	ldrb	r3, [r3, #20]
 800c4d4:	2b04      	cmp	r3, #4
 800c4d6:	dc02      	bgt.n	800c4de <tcp_shutdown+0x86>
 800c4d8:	2b03      	cmp	r3, #3
 800c4da:	da02      	bge.n	800c4e2 <tcp_shutdown+0x8a>
 800c4dc:	e009      	b.n	800c4f2 <tcp_shutdown+0x9a>
 800c4de:	2b07      	cmp	r3, #7
 800c4e0:	d107      	bne.n	800c4f2 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	b2db      	uxtb	r3, r3
 800c4e6:	4619      	mov	r1, r3
 800c4e8:	68f8      	ldr	r0, [r7, #12]
 800c4ea:	f7ff fe3d 	bl	800c168 <tcp_close_shutdown>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	e003      	b.n	800c4fa <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800c4f2:	f06f 030a 	mvn.w	r3, #10
 800c4f6:	e000      	b.n	800c4fa <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800c4f8:	2300      	movs	r3, #0
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3710      	adds	r7, #16
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}
 800c502:	bf00      	nop
 800c504:	08017b38 	.word	0x08017b38
 800c508:	08017c60 	.word	0x08017c60
 800c50c:	08017b7c 	.word	0x08017b7c

0800c510 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b08e      	sub	sp, #56	; 0x38
 800c514:	af04      	add	r7, sp, #16
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d107      	bne.n	800c530 <tcp_abandon+0x20>
 800c520:	4b52      	ldr	r3, [pc, #328]	; (800c66c <tcp_abandon+0x15c>)
 800c522:	f240 223d 	movw	r2, #573	; 0x23d
 800c526:	4952      	ldr	r1, [pc, #328]	; (800c670 <tcp_abandon+0x160>)
 800c528:	4852      	ldr	r0, [pc, #328]	; (800c674 <tcp_abandon+0x164>)
 800c52a:	f009 f867 	bl	80155fc <iprintf>
 800c52e:	e099      	b.n	800c664 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	7d1b      	ldrb	r3, [r3, #20]
 800c534:	2b01      	cmp	r3, #1
 800c536:	d106      	bne.n	800c546 <tcp_abandon+0x36>
 800c538:	4b4c      	ldr	r3, [pc, #304]	; (800c66c <tcp_abandon+0x15c>)
 800c53a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800c53e:	494e      	ldr	r1, [pc, #312]	; (800c678 <tcp_abandon+0x168>)
 800c540:	484c      	ldr	r0, [pc, #304]	; (800c674 <tcp_abandon+0x164>)
 800c542:	f009 f85b 	bl	80155fc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	7d1b      	ldrb	r3, [r3, #20]
 800c54a:	2b0a      	cmp	r3, #10
 800c54c:	d107      	bne.n	800c55e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c54e:	6879      	ldr	r1, [r7, #4]
 800c550:	484a      	ldr	r0, [pc, #296]	; (800c67c <tcp_abandon+0x16c>)
 800c552:	f001 fa39 	bl	800d9c8 <tcp_pcb_remove>
    tcp_free(pcb);
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f7ff fd54 	bl	800c004 <tcp_free>
 800c55c:	e082      	b.n	800c664 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c55e:	2300      	movs	r3, #0
 800c560:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800c562:	2300      	movs	r3, #0
 800c564:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c56a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c570:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c578:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	691b      	ldr	r3, [r3, #16]
 800c57e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	7d1b      	ldrb	r3, [r3, #20]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d126      	bne.n	800c5d6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	8adb      	ldrh	r3, [r3, #22]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d02e      	beq.n	800c5ee <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c590:	4b3b      	ldr	r3, [pc, #236]	; (800c680 <tcp_abandon+0x170>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	687a      	ldr	r2, [r7, #4]
 800c596:	429a      	cmp	r2, r3
 800c598:	d105      	bne.n	800c5a6 <tcp_abandon+0x96>
 800c59a:	4b39      	ldr	r3, [pc, #228]	; (800c680 <tcp_abandon+0x170>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	68db      	ldr	r3, [r3, #12]
 800c5a0:	4a37      	ldr	r2, [pc, #220]	; (800c680 <tcp_abandon+0x170>)
 800c5a2:	6013      	str	r3, [r2, #0]
 800c5a4:	e013      	b.n	800c5ce <tcp_abandon+0xbe>
 800c5a6:	4b36      	ldr	r3, [pc, #216]	; (800c680 <tcp_abandon+0x170>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	61fb      	str	r3, [r7, #28]
 800c5ac:	e00c      	b.n	800c5c8 <tcp_abandon+0xb8>
 800c5ae:	69fb      	ldr	r3, [r7, #28]
 800c5b0:	68db      	ldr	r3, [r3, #12]
 800c5b2:	687a      	ldr	r2, [r7, #4]
 800c5b4:	429a      	cmp	r2, r3
 800c5b6:	d104      	bne.n	800c5c2 <tcp_abandon+0xb2>
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	68da      	ldr	r2, [r3, #12]
 800c5bc:	69fb      	ldr	r3, [r7, #28]
 800c5be:	60da      	str	r2, [r3, #12]
 800c5c0:	e005      	b.n	800c5ce <tcp_abandon+0xbe>
 800c5c2:	69fb      	ldr	r3, [r7, #28]
 800c5c4:	68db      	ldr	r3, [r3, #12]
 800c5c6:	61fb      	str	r3, [r7, #28]
 800c5c8:	69fb      	ldr	r3, [r7, #28]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d1ef      	bne.n	800c5ae <tcp_abandon+0x9e>
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	60da      	str	r2, [r3, #12]
 800c5d4:	e00b      	b.n	800c5ee <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	8adb      	ldrh	r3, [r3, #22]
 800c5de:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c5e0:	6879      	ldr	r1, [r7, #4]
 800c5e2:	4828      	ldr	r0, [pc, #160]	; (800c684 <tcp_abandon+0x174>)
 800c5e4:	f001 f9f0 	bl	800d9c8 <tcp_pcb_remove>
 800c5e8:	4b27      	ldr	r3, [pc, #156]	; (800c688 <tcp_abandon+0x178>)
 800c5ea:	2201      	movs	r2, #1
 800c5ec:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d004      	beq.n	800c600 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f000 fec4 	bl	800d388 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c604:	2b00      	cmp	r3, #0
 800c606:	d004      	beq.n	800c612 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c60c:	4618      	mov	r0, r3
 800c60e:	f000 febb 	bl	800d388 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c616:	2b00      	cmp	r3, #0
 800c618:	d004      	beq.n	800c624 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c61e:	4618      	mov	r0, r3
 800c620:	f000 feb2 	bl	800d388 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c626:	2b00      	cmp	r3, #0
 800c628:	d00e      	beq.n	800c648 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c62a:	6879      	ldr	r1, [r7, #4]
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	3304      	adds	r3, #4
 800c630:	687a      	ldr	r2, [r7, #4]
 800c632:	8b12      	ldrh	r2, [r2, #24]
 800c634:	9202      	str	r2, [sp, #8]
 800c636:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c638:	9201      	str	r2, [sp, #4]
 800c63a:	9300      	str	r3, [sp, #0]
 800c63c:	460b      	mov	r3, r1
 800c63e:	697a      	ldr	r2, [r7, #20]
 800c640:	69b9      	ldr	r1, [r7, #24]
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f005 fb8c 	bl	8011d60 <tcp_rst>
    }
    last_state = pcb->state;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	7d1b      	ldrb	r3, [r3, #20]
 800c64c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c64e:	6878      	ldr	r0, [r7, #4]
 800c650:	f7ff fcd8 	bl	800c004 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d004      	beq.n	800c664 <tcp_abandon+0x154>
 800c65a:	693b      	ldr	r3, [r7, #16]
 800c65c:	f06f 010c 	mvn.w	r1, #12
 800c660:	68f8      	ldr	r0, [r7, #12]
 800c662:	4798      	blx	r3
  }
}
 800c664:	3728      	adds	r7, #40	; 0x28
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}
 800c66a:	bf00      	nop
 800c66c:	08017b38 	.word	0x08017b38
 800c670:	08017c7c 	.word	0x08017c7c
 800c674:	08017b7c 	.word	0x08017b7c
 800c678:	08017c98 	.word	0x08017c98
 800c67c:	2000b7e8 	.word	0x2000b7e8
 800c680:	2000b7e4 	.word	0x2000b7e4
 800c684:	2000b7d8 	.word	0x2000b7d8
 800c688:	2000b7d4 	.word	0x2000b7d4

0800c68c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b082      	sub	sp, #8
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c694:	2101      	movs	r1, #1
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f7ff ff3a 	bl	800c510 <tcp_abandon>
}
 800c69c:	bf00      	nop
 800c69e:	3708      	adds	r7, #8
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}

0800c6a4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b088      	sub	sp, #32
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	60f8      	str	r0, [r7, #12]
 800c6ac:	60b9      	str	r1, [r7, #8]
 800c6ae:	4613      	mov	r3, r2
 800c6b0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800c6b2:	2304      	movs	r3, #4
 800c6b4:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d101      	bne.n	800c6c0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800c6bc:	4b3e      	ldr	r3, [pc, #248]	; (800c7b8 <tcp_bind+0x114>)
 800c6be:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d109      	bne.n	800c6da <tcp_bind+0x36>
 800c6c6:	4b3d      	ldr	r3, [pc, #244]	; (800c7bc <tcp_bind+0x118>)
 800c6c8:	f240 22a9 	movw	r2, #681	; 0x2a9
 800c6cc:	493c      	ldr	r1, [pc, #240]	; (800c7c0 <tcp_bind+0x11c>)
 800c6ce:	483d      	ldr	r0, [pc, #244]	; (800c7c4 <tcp_bind+0x120>)
 800c6d0:	f008 ff94 	bl	80155fc <iprintf>
 800c6d4:	f06f 030f 	mvn.w	r3, #15
 800c6d8:	e06a      	b.n	800c7b0 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	7d1b      	ldrb	r3, [r3, #20]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d009      	beq.n	800c6f6 <tcp_bind+0x52>
 800c6e2:	4b36      	ldr	r3, [pc, #216]	; (800c7bc <tcp_bind+0x118>)
 800c6e4:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c6e8:	4937      	ldr	r1, [pc, #220]	; (800c7c8 <tcp_bind+0x124>)
 800c6ea:	4836      	ldr	r0, [pc, #216]	; (800c7c4 <tcp_bind+0x120>)
 800c6ec:	f008 ff86 	bl	80155fc <iprintf>
 800c6f0:	f06f 0305 	mvn.w	r3, #5
 800c6f4:	e05c      	b.n	800c7b0 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800c6f6:	88fb      	ldrh	r3, [r7, #6]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d109      	bne.n	800c710 <tcp_bind+0x6c>
    port = tcp_new_port();
 800c6fc:	f000 f9de 	bl	800cabc <tcp_new_port>
 800c700:	4603      	mov	r3, r0
 800c702:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c704:	88fb      	ldrh	r3, [r7, #6]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d135      	bne.n	800c776 <tcp_bind+0xd2>
      return ERR_BUF;
 800c70a:	f06f 0301 	mvn.w	r3, #1
 800c70e:	e04f      	b.n	800c7b0 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800c710:	2300      	movs	r3, #0
 800c712:	61fb      	str	r3, [r7, #28]
 800c714:	e02b      	b.n	800c76e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c716:	4a2d      	ldr	r2, [pc, #180]	; (800c7cc <tcp_bind+0x128>)
 800c718:	69fb      	ldr	r3, [r7, #28]
 800c71a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	61bb      	str	r3, [r7, #24]
 800c722:	e01e      	b.n	800c762 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800c724:	69bb      	ldr	r3, [r7, #24]
 800c726:	8adb      	ldrh	r3, [r3, #22]
 800c728:	88fa      	ldrh	r2, [r7, #6]
 800c72a:	429a      	cmp	r2, r3
 800c72c:	d116      	bne.n	800c75c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800c72e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c730:	2b00      	cmp	r3, #0
 800c732:	d010      	beq.n	800c756 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800c734:	69bb      	ldr	r3, [r7, #24]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d00c      	beq.n	800c756 <tcp_bind+0xb2>
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d009      	beq.n	800c756 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d005      	beq.n	800c756 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800c74a:	69bb      	ldr	r3, [r7, #24]
 800c74c:	681a      	ldr	r2, [r3, #0]
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c752:	429a      	cmp	r2, r3
 800c754:	d102      	bne.n	800c75c <tcp_bind+0xb8>
              return ERR_USE;
 800c756:	f06f 0307 	mvn.w	r3, #7
 800c75a:	e029      	b.n	800c7b0 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c75c:	69bb      	ldr	r3, [r7, #24]
 800c75e:	68db      	ldr	r3, [r3, #12]
 800c760:	61bb      	str	r3, [r7, #24]
 800c762:	69bb      	ldr	r3, [r7, #24]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d1dd      	bne.n	800c724 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800c768:	69fb      	ldr	r3, [r7, #28]
 800c76a:	3301      	adds	r3, #1
 800c76c:	61fb      	str	r3, [r7, #28]
 800c76e:	69fa      	ldr	r2, [r7, #28]
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	429a      	cmp	r2, r3
 800c774:	dbcf      	blt.n	800c716 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d00c      	beq.n	800c796 <tcp_bind+0xf2>
 800c77c:	68bb      	ldr	r3, [r7, #8]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d008      	beq.n	800c796 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d002      	beq.n	800c790 <tcp_bind+0xec>
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	e000      	b.n	800c792 <tcp_bind+0xee>
 800c790:	2300      	movs	r3, #0
 800c792:	68fa      	ldr	r2, [r7, #12]
 800c794:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	88fa      	ldrh	r2, [r7, #6]
 800c79a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800c79c:	4b0c      	ldr	r3, [pc, #48]	; (800c7d0 <tcp_bind+0x12c>)
 800c79e:	681a      	ldr	r2, [r3, #0]
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	60da      	str	r2, [r3, #12]
 800c7a4:	4a0a      	ldr	r2, [pc, #40]	; (800c7d0 <tcp_bind+0x12c>)
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	6013      	str	r3, [r2, #0]
 800c7aa:	f005 fc9b 	bl	80120e4 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800c7ae:	2300      	movs	r3, #0
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3720      	adds	r7, #32
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}
 800c7b8:	08019fa4 	.word	0x08019fa4
 800c7bc:	08017b38 	.word	0x08017b38
 800c7c0:	08017ccc 	.word	0x08017ccc
 800c7c4:	08017b7c 	.word	0x08017b7c
 800c7c8:	08017ce4 	.word	0x08017ce4
 800c7cc:	08019f7c 	.word	0x08019f7c
 800c7d0:	2000b7e4 	.word	0x2000b7e4

0800c7d4 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b084      	sub	sp, #16
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	60f8      	str	r0, [r7, #12]
 800c7dc:	60b9      	str	r1, [r7, #8]
 800c7de:	4613      	mov	r3, r2
 800c7e0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d106      	bne.n	800c7f6 <tcp_accept_null+0x22>
 800c7e8:	4b07      	ldr	r3, [pc, #28]	; (800c808 <tcp_accept_null+0x34>)
 800c7ea:	f240 320f 	movw	r2, #783	; 0x30f
 800c7ee:	4907      	ldr	r1, [pc, #28]	; (800c80c <tcp_accept_null+0x38>)
 800c7f0:	4807      	ldr	r0, [pc, #28]	; (800c810 <tcp_accept_null+0x3c>)
 800c7f2:	f008 ff03 	bl	80155fc <iprintf>

  tcp_abort(pcb);
 800c7f6:	68b8      	ldr	r0, [r7, #8]
 800c7f8:	f7ff ff48 	bl	800c68c <tcp_abort>

  return ERR_ABRT;
 800c7fc:	f06f 030c 	mvn.w	r3, #12
}
 800c800:	4618      	mov	r0, r3
 800c802:	3710      	adds	r7, #16
 800c804:	46bd      	mov	sp, r7
 800c806:	bd80      	pop	{r7, pc}
 800c808:	08017b38 	.word	0x08017b38
 800c80c:	08017d0c 	.word	0x08017d0c
 800c810:	08017b7c 	.word	0x08017b7c

0800c814 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b088      	sub	sp, #32
 800c818:	af00      	add	r7, sp, #0
 800c81a:	60f8      	str	r0, [r7, #12]
 800c81c:	460b      	mov	r3, r1
 800c81e:	607a      	str	r2, [r7, #4]
 800c820:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800c822:	2300      	movs	r3, #0
 800c824:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d109      	bne.n	800c840 <tcp_listen_with_backlog_and_err+0x2c>
 800c82c:	4b47      	ldr	r3, [pc, #284]	; (800c94c <tcp_listen_with_backlog_and_err+0x138>)
 800c82e:	f240 3259 	movw	r2, #857	; 0x359
 800c832:	4947      	ldr	r1, [pc, #284]	; (800c950 <tcp_listen_with_backlog_and_err+0x13c>)
 800c834:	4847      	ldr	r0, [pc, #284]	; (800c954 <tcp_listen_with_backlog_and_err+0x140>)
 800c836:	f008 fee1 	bl	80155fc <iprintf>
 800c83a:	23f0      	movs	r3, #240	; 0xf0
 800c83c:	76fb      	strb	r3, [r7, #27]
 800c83e:	e079      	b.n	800c934 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	7d1b      	ldrb	r3, [r3, #20]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d009      	beq.n	800c85c <tcp_listen_with_backlog_and_err+0x48>
 800c848:	4b40      	ldr	r3, [pc, #256]	; (800c94c <tcp_listen_with_backlog_and_err+0x138>)
 800c84a:	f240 325a 	movw	r2, #858	; 0x35a
 800c84e:	4942      	ldr	r1, [pc, #264]	; (800c958 <tcp_listen_with_backlog_and_err+0x144>)
 800c850:	4840      	ldr	r0, [pc, #256]	; (800c954 <tcp_listen_with_backlog_and_err+0x140>)
 800c852:	f008 fed3 	bl	80155fc <iprintf>
 800c856:	23f1      	movs	r3, #241	; 0xf1
 800c858:	76fb      	strb	r3, [r7, #27]
 800c85a:	e06b      	b.n	800c934 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	7d1b      	ldrb	r3, [r3, #20]
 800c860:	2b01      	cmp	r3, #1
 800c862:	d104      	bne.n	800c86e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800c868:	23f7      	movs	r3, #247	; 0xf7
 800c86a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c86c:	e062      	b.n	800c934 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800c86e:	2002      	movs	r0, #2
 800c870:	f7fe fa26 	bl	800acc0 <memp_malloc>
 800c874:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800c876:	69fb      	ldr	r3, [r7, #28]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d102      	bne.n	800c882 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800c87c:	23ff      	movs	r3, #255	; 0xff
 800c87e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c880:	e058      	b.n	800c934 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	691a      	ldr	r2, [r3, #16]
 800c886:	69fb      	ldr	r3, [r7, #28]
 800c888:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	8ada      	ldrh	r2, [r3, #22]
 800c88e:	69fb      	ldr	r3, [r7, #28]
 800c890:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800c892:	69fb      	ldr	r3, [r7, #28]
 800c894:	2201      	movs	r2, #1
 800c896:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	7d5a      	ldrb	r2, [r3, #21]
 800c89c:	69fb      	ldr	r3, [r7, #28]
 800c89e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	7a5a      	ldrb	r2, [r3, #9]
 800c8a4:	69fb      	ldr	r3, [r7, #28]
 800c8a6:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800c8a8:	69fb      	ldr	r3, [r7, #28]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	7ada      	ldrb	r2, [r3, #11]
 800c8b2:	69fb      	ldr	r3, [r7, #28]
 800c8b4:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	7a9a      	ldrb	r2, [r3, #10]
 800c8ba:	69fb      	ldr	r3, [r7, #28]
 800c8bc:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	681a      	ldr	r2, [r3, #0]
 800c8c2:	69fb      	ldr	r3, [r7, #28]
 800c8c4:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	8adb      	ldrh	r3, [r3, #22]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d021      	beq.n	800c912 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800c8ce:	4b23      	ldr	r3, [pc, #140]	; (800c95c <tcp_listen_with_backlog_and_err+0x148>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	68fa      	ldr	r2, [r7, #12]
 800c8d4:	429a      	cmp	r2, r3
 800c8d6:	d105      	bne.n	800c8e4 <tcp_listen_with_backlog_and_err+0xd0>
 800c8d8:	4b20      	ldr	r3, [pc, #128]	; (800c95c <tcp_listen_with_backlog_and_err+0x148>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	68db      	ldr	r3, [r3, #12]
 800c8de:	4a1f      	ldr	r2, [pc, #124]	; (800c95c <tcp_listen_with_backlog_and_err+0x148>)
 800c8e0:	6013      	str	r3, [r2, #0]
 800c8e2:	e013      	b.n	800c90c <tcp_listen_with_backlog_and_err+0xf8>
 800c8e4:	4b1d      	ldr	r3, [pc, #116]	; (800c95c <tcp_listen_with_backlog_and_err+0x148>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	617b      	str	r3, [r7, #20]
 800c8ea:	e00c      	b.n	800c906 <tcp_listen_with_backlog_and_err+0xf2>
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	68db      	ldr	r3, [r3, #12]
 800c8f0:	68fa      	ldr	r2, [r7, #12]
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	d104      	bne.n	800c900 <tcp_listen_with_backlog_and_err+0xec>
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	68da      	ldr	r2, [r3, #12]
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	60da      	str	r2, [r3, #12]
 800c8fe:	e005      	b.n	800c90c <tcp_listen_with_backlog_and_err+0xf8>
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	68db      	ldr	r3, [r3, #12]
 800c904:	617b      	str	r3, [r7, #20]
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d1ef      	bne.n	800c8ec <tcp_listen_with_backlog_and_err+0xd8>
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	2200      	movs	r2, #0
 800c910:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800c912:	68f8      	ldr	r0, [r7, #12]
 800c914:	f7ff fb76 	bl	800c004 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800c918:	69fb      	ldr	r3, [r7, #28]
 800c91a:	4a11      	ldr	r2, [pc, #68]	; (800c960 <tcp_listen_with_backlog_and_err+0x14c>)
 800c91c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800c91e:	4b11      	ldr	r3, [pc, #68]	; (800c964 <tcp_listen_with_backlog_and_err+0x150>)
 800c920:	681a      	ldr	r2, [r3, #0]
 800c922:	69fb      	ldr	r3, [r7, #28]
 800c924:	60da      	str	r2, [r3, #12]
 800c926:	4a0f      	ldr	r2, [pc, #60]	; (800c964 <tcp_listen_with_backlog_and_err+0x150>)
 800c928:	69fb      	ldr	r3, [r7, #28]
 800c92a:	6013      	str	r3, [r2, #0]
 800c92c:	f005 fbda 	bl	80120e4 <tcp_timer_needed>
  res = ERR_OK;
 800c930:	2300      	movs	r3, #0
 800c932:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d002      	beq.n	800c940 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	7efa      	ldrb	r2, [r7, #27]
 800c93e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800c940:	69fb      	ldr	r3, [r7, #28]
}
 800c942:	4618      	mov	r0, r3
 800c944:	3720      	adds	r7, #32
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}
 800c94a:	bf00      	nop
 800c94c:	08017b38 	.word	0x08017b38
 800c950:	08017d2c 	.word	0x08017d2c
 800c954:	08017b7c 	.word	0x08017b7c
 800c958:	08017d5c 	.word	0x08017d5c
 800c95c:	2000b7e4 	.word	0x2000b7e4
 800c960:	0800c7d5 	.word	0x0800c7d5
 800c964:	2000b7e0 	.word	0x2000b7e0

0800c968 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b084      	sub	sp, #16
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d106      	bne.n	800c984 <tcp_update_rcv_ann_wnd+0x1c>
 800c976:	4b25      	ldr	r3, [pc, #148]	; (800ca0c <tcp_update_rcv_ann_wnd+0xa4>)
 800c978:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c97c:	4924      	ldr	r1, [pc, #144]	; (800ca10 <tcp_update_rcv_ann_wnd+0xa8>)
 800c97e:	4825      	ldr	r0, [pc, #148]	; (800ca14 <tcp_update_rcv_ann_wnd+0xac>)
 800c980:	f008 fe3c 	bl	80155fc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c988:	687a      	ldr	r2, [r7, #4]
 800c98a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c98c:	4413      	add	r3, r2
 800c98e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c994:	687a      	ldr	r2, [r7, #4]
 800c996:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800c998:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800c99c:	bf28      	it	cs
 800c99e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800c9a2:	b292      	uxth	r2, r2
 800c9a4:	4413      	add	r3, r2
 800c9a6:	68fa      	ldr	r2, [r7, #12]
 800c9a8:	1ad3      	subs	r3, r2, r3
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	db08      	blt.n	800c9c0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ba:	68fa      	ldr	r2, [r7, #12]
 800c9bc:	1ad3      	subs	r3, r2, r3
 800c9be:	e020      	b.n	800ca02 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9c8:	1ad3      	subs	r3, r2, r3
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	dd03      	ble.n	800c9d6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c9d4:	e014      	b.n	800ca00 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9de:	1ad3      	subs	r3, r2, r3
 800c9e0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c9e2:	68bb      	ldr	r3, [r7, #8]
 800c9e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9e8:	d306      	bcc.n	800c9f8 <tcp_update_rcv_ann_wnd+0x90>
 800c9ea:	4b08      	ldr	r3, [pc, #32]	; (800ca0c <tcp_update_rcv_ann_wnd+0xa4>)
 800c9ec:	f240 32b6 	movw	r2, #950	; 0x3b6
 800c9f0:	4909      	ldr	r1, [pc, #36]	; (800ca18 <tcp_update_rcv_ann_wnd+0xb0>)
 800c9f2:	4808      	ldr	r0, [pc, #32]	; (800ca14 <tcp_update_rcv_ann_wnd+0xac>)
 800c9f4:	f008 fe02 	bl	80155fc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	b29a      	uxth	r2, r3
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800ca00:	2300      	movs	r3, #0
  }
}
 800ca02:	4618      	mov	r0, r3
 800ca04:	3710      	adds	r7, #16
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}
 800ca0a:	bf00      	nop
 800ca0c:	08017b38 	.word	0x08017b38
 800ca10:	08017d94 	.word	0x08017d94
 800ca14:	08017b7c 	.word	0x08017b7c
 800ca18:	08017db8 	.word	0x08017db8

0800ca1c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b084      	sub	sp, #16
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
 800ca24:	460b      	mov	r3, r1
 800ca26:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d107      	bne.n	800ca3e <tcp_recved+0x22>
 800ca2e:	4b1f      	ldr	r3, [pc, #124]	; (800caac <tcp_recved+0x90>)
 800ca30:	f240 32cf 	movw	r2, #975	; 0x3cf
 800ca34:	491e      	ldr	r1, [pc, #120]	; (800cab0 <tcp_recved+0x94>)
 800ca36:	481f      	ldr	r0, [pc, #124]	; (800cab4 <tcp_recved+0x98>)
 800ca38:	f008 fde0 	bl	80155fc <iprintf>
 800ca3c:	e032      	b.n	800caa4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	7d1b      	ldrb	r3, [r3, #20]
 800ca42:	2b01      	cmp	r3, #1
 800ca44:	d106      	bne.n	800ca54 <tcp_recved+0x38>
 800ca46:	4b19      	ldr	r3, [pc, #100]	; (800caac <tcp_recved+0x90>)
 800ca48:	f240 32d2 	movw	r2, #978	; 0x3d2
 800ca4c:	491a      	ldr	r1, [pc, #104]	; (800cab8 <tcp_recved+0x9c>)
 800ca4e:	4819      	ldr	r0, [pc, #100]	; (800cab4 <tcp_recved+0x98>)
 800ca50:	f008 fdd4 	bl	80155fc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ca58:	887b      	ldrh	r3, [r7, #2]
 800ca5a:	4413      	add	r3, r2
 800ca5c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ca5e:	89fb      	ldrh	r3, [r7, #14]
 800ca60:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ca64:	d804      	bhi.n	800ca70 <tcp_recved+0x54>
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca6a:	89fa      	ldrh	r2, [r7, #14]
 800ca6c:	429a      	cmp	r2, r3
 800ca6e:	d204      	bcs.n	800ca7a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ca76:	851a      	strh	r2, [r3, #40]	; 0x28
 800ca78:	e002      	b.n	800ca80 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	89fa      	ldrh	r2, [r7, #14]
 800ca7e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f7ff ff71 	bl	800c968 <tcp_update_rcv_ann_wnd>
 800ca86:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ca8e:	d309      	bcc.n	800caa4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	8b5b      	ldrh	r3, [r3, #26]
 800ca94:	f043 0302 	orr.w	r3, r3, #2
 800ca98:	b29a      	uxth	r2, r3
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f004 fbaa 	bl	80111f8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800caa4:	3710      	adds	r7, #16
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}
 800caaa:	bf00      	nop
 800caac:	08017b38 	.word	0x08017b38
 800cab0:	08017dd4 	.word	0x08017dd4
 800cab4:	08017b7c 	.word	0x08017b7c
 800cab8:	08017dec 	.word	0x08017dec

0800cabc <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800cabc:	b480      	push	{r7}
 800cabe:	b083      	sub	sp, #12
 800cac0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800cac2:	2300      	movs	r3, #0
 800cac4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800cac6:	4b1e      	ldr	r3, [pc, #120]	; (800cb40 <tcp_new_port+0x84>)
 800cac8:	881b      	ldrh	r3, [r3, #0]
 800caca:	3301      	adds	r3, #1
 800cacc:	b29a      	uxth	r2, r3
 800cace:	4b1c      	ldr	r3, [pc, #112]	; (800cb40 <tcp_new_port+0x84>)
 800cad0:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800cad2:	4b1b      	ldr	r3, [pc, #108]	; (800cb40 <tcp_new_port+0x84>)
 800cad4:	881b      	ldrh	r3, [r3, #0]
 800cad6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cada:	4293      	cmp	r3, r2
 800cadc:	d103      	bne.n	800cae6 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800cade:	4b18      	ldr	r3, [pc, #96]	; (800cb40 <tcp_new_port+0x84>)
 800cae0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800cae4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800cae6:	2300      	movs	r3, #0
 800cae8:	71fb      	strb	r3, [r7, #7]
 800caea:	e01e      	b.n	800cb2a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800caec:	79fb      	ldrb	r3, [r7, #7]
 800caee:	4a15      	ldr	r2, [pc, #84]	; (800cb44 <tcp_new_port+0x88>)
 800caf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	603b      	str	r3, [r7, #0]
 800caf8:	e011      	b.n	800cb1e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	8ada      	ldrh	r2, [r3, #22]
 800cafe:	4b10      	ldr	r3, [pc, #64]	; (800cb40 <tcp_new_port+0x84>)
 800cb00:	881b      	ldrh	r3, [r3, #0]
 800cb02:	429a      	cmp	r2, r3
 800cb04:	d108      	bne.n	800cb18 <tcp_new_port+0x5c>
        n++;
 800cb06:	88bb      	ldrh	r3, [r7, #4]
 800cb08:	3301      	adds	r3, #1
 800cb0a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800cb0c:	88bb      	ldrh	r3, [r7, #4]
 800cb0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cb12:	d3d8      	bcc.n	800cac6 <tcp_new_port+0xa>
          return 0;
 800cb14:	2300      	movs	r3, #0
 800cb16:	e00d      	b.n	800cb34 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	68db      	ldr	r3, [r3, #12]
 800cb1c:	603b      	str	r3, [r7, #0]
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d1ea      	bne.n	800cafa <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800cb24:	79fb      	ldrb	r3, [r7, #7]
 800cb26:	3301      	adds	r3, #1
 800cb28:	71fb      	strb	r3, [r7, #7]
 800cb2a:	79fb      	ldrb	r3, [r7, #7]
 800cb2c:	2b03      	cmp	r3, #3
 800cb2e:	d9dd      	bls.n	800caec <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800cb30:	4b03      	ldr	r3, [pc, #12]	; (800cb40 <tcp_new_port+0x84>)
 800cb32:	881b      	ldrh	r3, [r3, #0]
}
 800cb34:	4618      	mov	r0, r3
 800cb36:	370c      	adds	r7, #12
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3e:	4770      	bx	lr
 800cb40:	20000010 	.word	0x20000010
 800cb44:	08019f7c 	.word	0x08019f7c

0800cb48 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800cb48:	b5b0      	push	{r4, r5, r7, lr}
 800cb4a:	b090      	sub	sp, #64	; 0x40
 800cb4c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800cb54:	4b94      	ldr	r3, [pc, #592]	; (800cda8 <tcp_slowtmr+0x260>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	3301      	adds	r3, #1
 800cb5a:	4a93      	ldr	r2, [pc, #588]	; (800cda8 <tcp_slowtmr+0x260>)
 800cb5c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800cb5e:	4b93      	ldr	r3, [pc, #588]	; (800cdac <tcp_slowtmr+0x264>)
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	3301      	adds	r3, #1
 800cb64:	b2da      	uxtb	r2, r3
 800cb66:	4b91      	ldr	r3, [pc, #580]	; (800cdac <tcp_slowtmr+0x264>)
 800cb68:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800cb6e:	4b90      	ldr	r3, [pc, #576]	; (800cdb0 <tcp_slowtmr+0x268>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800cb74:	e29f      	b.n	800d0b6 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800cb76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb78:	7d1b      	ldrb	r3, [r3, #20]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d106      	bne.n	800cb8c <tcp_slowtmr+0x44>
 800cb7e:	4b8d      	ldr	r3, [pc, #564]	; (800cdb4 <tcp_slowtmr+0x26c>)
 800cb80:	f240 42be 	movw	r2, #1214	; 0x4be
 800cb84:	498c      	ldr	r1, [pc, #560]	; (800cdb8 <tcp_slowtmr+0x270>)
 800cb86:	488d      	ldr	r0, [pc, #564]	; (800cdbc <tcp_slowtmr+0x274>)
 800cb88:	f008 fd38 	bl	80155fc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800cb8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb8e:	7d1b      	ldrb	r3, [r3, #20]
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	d106      	bne.n	800cba2 <tcp_slowtmr+0x5a>
 800cb94:	4b87      	ldr	r3, [pc, #540]	; (800cdb4 <tcp_slowtmr+0x26c>)
 800cb96:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800cb9a:	4989      	ldr	r1, [pc, #548]	; (800cdc0 <tcp_slowtmr+0x278>)
 800cb9c:	4887      	ldr	r0, [pc, #540]	; (800cdbc <tcp_slowtmr+0x274>)
 800cb9e:	f008 fd2d 	bl	80155fc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800cba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba4:	7d1b      	ldrb	r3, [r3, #20]
 800cba6:	2b0a      	cmp	r3, #10
 800cba8:	d106      	bne.n	800cbb8 <tcp_slowtmr+0x70>
 800cbaa:	4b82      	ldr	r3, [pc, #520]	; (800cdb4 <tcp_slowtmr+0x26c>)
 800cbac:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800cbb0:	4984      	ldr	r1, [pc, #528]	; (800cdc4 <tcp_slowtmr+0x27c>)
 800cbb2:	4882      	ldr	r0, [pc, #520]	; (800cdbc <tcp_slowtmr+0x274>)
 800cbb4:	f008 fd22 	bl	80155fc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800cbb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbba:	7f9a      	ldrb	r2, [r3, #30]
 800cbbc:	4b7b      	ldr	r3, [pc, #492]	; (800cdac <tcp_slowtmr+0x264>)
 800cbbe:	781b      	ldrb	r3, [r3, #0]
 800cbc0:	429a      	cmp	r2, r3
 800cbc2:	d105      	bne.n	800cbd0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800cbc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbc6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbca:	68db      	ldr	r3, [r3, #12]
 800cbcc:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800cbce:	e272      	b.n	800d0b6 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800cbd0:	4b76      	ldr	r3, [pc, #472]	; (800cdac <tcp_slowtmr+0x264>)
 800cbd2:	781a      	ldrb	r2, [r3, #0]
 800cbd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbd6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800cbe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbe6:	7d1b      	ldrb	r3, [r3, #20]
 800cbe8:	2b02      	cmp	r3, #2
 800cbea:	d10a      	bne.n	800cc02 <tcp_slowtmr+0xba>
 800cbec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cbf2:	2b05      	cmp	r3, #5
 800cbf4:	d905      	bls.n	800cc02 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800cbf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbfa:	3301      	adds	r3, #1
 800cbfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cc00:	e11e      	b.n	800ce40 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800cc02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc04:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cc08:	2b0b      	cmp	r3, #11
 800cc0a:	d905      	bls.n	800cc18 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800cc0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc10:	3301      	adds	r3, #1
 800cc12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cc16:	e113      	b.n	800ce40 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800cc18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc1a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d075      	beq.n	800cd0e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800cc22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d006      	beq.n	800cc38 <tcp_slowtmr+0xf0>
 800cc2a:	4b62      	ldr	r3, [pc, #392]	; (800cdb4 <tcp_slowtmr+0x26c>)
 800cc2c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800cc30:	4965      	ldr	r1, [pc, #404]	; (800cdc8 <tcp_slowtmr+0x280>)
 800cc32:	4862      	ldr	r0, [pc, #392]	; (800cdbc <tcp_slowtmr+0x274>)
 800cc34:	f008 fce2 	bl	80155fc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800cc38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d106      	bne.n	800cc4e <tcp_slowtmr+0x106>
 800cc40:	4b5c      	ldr	r3, [pc, #368]	; (800cdb4 <tcp_slowtmr+0x26c>)
 800cc42:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800cc46:	4961      	ldr	r1, [pc, #388]	; (800cdcc <tcp_slowtmr+0x284>)
 800cc48:	485c      	ldr	r0, [pc, #368]	; (800cdbc <tcp_slowtmr+0x274>)
 800cc4a:	f008 fcd7 	bl	80155fc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800cc4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc50:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800cc54:	2b0b      	cmp	r3, #11
 800cc56:	d905      	bls.n	800cc64 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800cc58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc5c:	3301      	adds	r3, #1
 800cc5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cc62:	e0ed      	b.n	800ce40 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800cc64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc66:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cc6a:	3b01      	subs	r3, #1
 800cc6c:	4a58      	ldr	r2, [pc, #352]	; (800cdd0 <tcp_slowtmr+0x288>)
 800cc6e:	5cd3      	ldrb	r3, [r2, r3]
 800cc70:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800cc72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc74:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cc78:	7c7a      	ldrb	r2, [r7, #17]
 800cc7a:	429a      	cmp	r2, r3
 800cc7c:	d907      	bls.n	800cc8e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800cc7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc80:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cc84:	3301      	adds	r3, #1
 800cc86:	b2da      	uxtb	r2, r3
 800cc88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc8a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800cc8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc90:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cc94:	7c7a      	ldrb	r2, [r7, #17]
 800cc96:	429a      	cmp	r2, r3
 800cc98:	f200 80d2 	bhi.w	800ce40 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800cc9c:	2301      	movs	r3, #1
 800cc9e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800cca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cca2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d108      	bne.n	800ccbc <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800ccaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccac:	f005 f94c 	bl	8011f48 <tcp_zero_window_probe>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d014      	beq.n	800cce0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	623b      	str	r3, [r7, #32]
 800ccba:	e011      	b.n	800cce0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800ccbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccbe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ccc2:	4619      	mov	r1, r3
 800ccc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccc6:	f004 f811 	bl	8010cec <tcp_split_unsent_seg>
 800ccca:	4603      	mov	r3, r0
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d107      	bne.n	800cce0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800ccd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccd2:	f004 fa91 	bl	80111f8 <tcp_output>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d101      	bne.n	800cce0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800cce0:	6a3b      	ldr	r3, [r7, #32]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	f000 80ac 	beq.w	800ce40 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800cce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccea:	2200      	movs	r2, #0
 800ccec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ccf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccf2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ccf6:	2b06      	cmp	r3, #6
 800ccf8:	f200 80a2 	bhi.w	800ce40 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800ccfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccfe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cd02:	3301      	adds	r3, #1
 800cd04:	b2da      	uxtb	r2, r3
 800cd06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd08:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800cd0c:	e098      	b.n	800ce40 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800cd0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd10:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	db0f      	blt.n	800cd38 <tcp_slowtmr+0x1f0>
 800cd18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd1a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cd1e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cd22:	4293      	cmp	r3, r2
 800cd24:	d008      	beq.n	800cd38 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800cd26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd28:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cd2c:	b29b      	uxth	r3, r3
 800cd2e:	3301      	adds	r3, #1
 800cd30:	b29b      	uxth	r3, r3
 800cd32:	b21a      	sxth	r2, r3
 800cd34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd36:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800cd38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd3a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800cd3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd40:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800cd44:	429a      	cmp	r2, r3
 800cd46:	db7b      	blt.n	800ce40 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800cd48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd4a:	f004 fd47 	bl	80117dc <tcp_rexmit_rto_prepare>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d007      	beq.n	800cd64 <tcp_slowtmr+0x21c>
 800cd54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d171      	bne.n	800ce40 <tcp_slowtmr+0x2f8>
 800cd5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d06d      	beq.n	800ce40 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800cd64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd66:	7d1b      	ldrb	r3, [r3, #20]
 800cd68:	2b02      	cmp	r3, #2
 800cd6a:	d03a      	beq.n	800cde2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800cd6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cd72:	2b0c      	cmp	r3, #12
 800cd74:	bf28      	it	cs
 800cd76:	230c      	movcs	r3, #12
 800cd78:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800cd7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd7c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cd80:	10db      	asrs	r3, r3, #3
 800cd82:	b21b      	sxth	r3, r3
 800cd84:	461a      	mov	r2, r3
 800cd86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd88:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cd8c:	4413      	add	r3, r2
 800cd8e:	7efa      	ldrb	r2, [r7, #27]
 800cd90:	4910      	ldr	r1, [pc, #64]	; (800cdd4 <tcp_slowtmr+0x28c>)
 800cd92:	5c8a      	ldrb	r2, [r1, r2]
 800cd94:	4093      	lsls	r3, r2
 800cd96:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800cd98:	697b      	ldr	r3, [r7, #20]
 800cd9a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	dc1a      	bgt.n	800cdd8 <tcp_slowtmr+0x290>
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	b21a      	sxth	r2, r3
 800cda6:	e019      	b.n	800cddc <tcp_slowtmr+0x294>
 800cda8:	2000b7dc 	.word	0x2000b7dc
 800cdac:	20004ace 	.word	0x20004ace
 800cdb0:	2000b7d8 	.word	0x2000b7d8
 800cdb4:	08017b38 	.word	0x08017b38
 800cdb8:	08017e7c 	.word	0x08017e7c
 800cdbc:	08017b7c 	.word	0x08017b7c
 800cdc0:	08017ea8 	.word	0x08017ea8
 800cdc4:	08017ed4 	.word	0x08017ed4
 800cdc8:	08017f04 	.word	0x08017f04
 800cdcc:	08017f38 	.word	0x08017f38
 800cdd0:	08019f74 	.word	0x08019f74
 800cdd4:	08019f64 	.word	0x08019f64
 800cdd8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdde:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800cde2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cde4:	2200      	movs	r2, #0
 800cde6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800cde8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cdee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdf0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cdf4:	4293      	cmp	r3, r2
 800cdf6:	bf28      	it	cs
 800cdf8:	4613      	movcs	r3, r2
 800cdfa:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800cdfc:	8a7b      	ldrh	r3, [r7, #18]
 800cdfe:	085b      	lsrs	r3, r3, #1
 800ce00:	b29a      	uxth	r2, r3
 800ce02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce04:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ce08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce0a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ce0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ce12:	005b      	lsls	r3, r3, #1
 800ce14:	b29b      	uxth	r3, r3
 800ce16:	429a      	cmp	r2, r3
 800ce18:	d206      	bcs.n	800ce28 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800ce1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ce1e:	005b      	lsls	r3, r3, #1
 800ce20:	b29a      	uxth	r2, r3
 800ce22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce24:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800ce28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce2a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ce2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce2e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800ce32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce34:	2200      	movs	r2, #0
 800ce36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800ce3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce3c:	f004 fd3e 	bl	80118bc <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800ce40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce42:	7d1b      	ldrb	r3, [r3, #20]
 800ce44:	2b06      	cmp	r3, #6
 800ce46:	d111      	bne.n	800ce6c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800ce48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce4a:	8b5b      	ldrh	r3, [r3, #26]
 800ce4c:	f003 0310 	and.w	r3, r3, #16
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d00b      	beq.n	800ce6c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ce54:	4b9d      	ldr	r3, [pc, #628]	; (800d0cc <tcp_slowtmr+0x584>)
 800ce56:	681a      	ldr	r2, [r3, #0]
 800ce58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce5a:	6a1b      	ldr	r3, [r3, #32]
 800ce5c:	1ad3      	subs	r3, r2, r3
 800ce5e:	2b28      	cmp	r3, #40	; 0x28
 800ce60:	d904      	bls.n	800ce6c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800ce62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce66:	3301      	adds	r3, #1
 800ce68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ce6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce6e:	7a5b      	ldrb	r3, [r3, #9]
 800ce70:	f003 0308 	and.w	r3, r3, #8
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d04c      	beq.n	800cf12 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800ce78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce7a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ce7c:	2b04      	cmp	r3, #4
 800ce7e:	d003      	beq.n	800ce88 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800ce80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce82:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800ce84:	2b07      	cmp	r3, #7
 800ce86:	d144      	bne.n	800cf12 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ce88:	4b90      	ldr	r3, [pc, #576]	; (800d0cc <tcp_slowtmr+0x584>)
 800ce8a:	681a      	ldr	r2, [r3, #0]
 800ce8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce8e:	6a1b      	ldr	r3, [r3, #32]
 800ce90:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ce92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ce98:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800ce9c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800cea0:	498b      	ldr	r1, [pc, #556]	; (800d0d0 <tcp_slowtmr+0x588>)
 800cea2:	fba1 1303 	umull	r1, r3, r1, r3
 800cea6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cea8:	429a      	cmp	r2, r3
 800ceaa:	d90a      	bls.n	800cec2 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800ceac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ceb0:	3301      	adds	r3, #1
 800ceb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800ceb6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ceba:	3301      	adds	r3, #1
 800cebc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cec0:	e027      	b.n	800cf12 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cec2:	4b82      	ldr	r3, [pc, #520]	; (800d0cc <tcp_slowtmr+0x584>)
 800cec4:	681a      	ldr	r2, [r3, #0]
 800cec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cec8:	6a1b      	ldr	r3, [r3, #32]
 800ceca:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800cecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cece:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ced2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ced8:	4618      	mov	r0, r3
 800ceda:	4b7e      	ldr	r3, [pc, #504]	; (800d0d4 <tcp_slowtmr+0x58c>)
 800cedc:	fb03 f300 	mul.w	r3, r3, r0
 800cee0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800cee2:	497b      	ldr	r1, [pc, #492]	; (800d0d0 <tcp_slowtmr+0x588>)
 800cee4:	fba1 1303 	umull	r1, r3, r1, r3
 800cee8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ceea:	429a      	cmp	r2, r3
 800ceec:	d911      	bls.n	800cf12 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800ceee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cef0:	f004 ffea 	bl	8011ec8 <tcp_keepalive>
 800cef4:	4603      	mov	r3, r0
 800cef6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800cefa:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d107      	bne.n	800cf12 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800cf02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf04:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800cf08:	3301      	adds	r3, #1
 800cf0a:	b2da      	uxtb	r2, r3
 800cf0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf0e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800cf12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d011      	beq.n	800cf3e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800cf1a:	4b6c      	ldr	r3, [pc, #432]	; (800d0cc <tcp_slowtmr+0x584>)
 800cf1c:	681a      	ldr	r2, [r3, #0]
 800cf1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf20:	6a1b      	ldr	r3, [r3, #32]
 800cf22:	1ad2      	subs	r2, r2, r3
 800cf24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf26:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800cf2a:	4619      	mov	r1, r3
 800cf2c:	460b      	mov	r3, r1
 800cf2e:	005b      	lsls	r3, r3, #1
 800cf30:	440b      	add	r3, r1
 800cf32:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800cf34:	429a      	cmp	r2, r3
 800cf36:	d302      	bcc.n	800cf3e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800cf38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf3a:	f000 fea9 	bl	800dc90 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800cf3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf40:	7d1b      	ldrb	r3, [r3, #20]
 800cf42:	2b03      	cmp	r3, #3
 800cf44:	d10b      	bne.n	800cf5e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cf46:	4b61      	ldr	r3, [pc, #388]	; (800d0cc <tcp_slowtmr+0x584>)
 800cf48:	681a      	ldr	r2, [r3, #0]
 800cf4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf4c:	6a1b      	ldr	r3, [r3, #32]
 800cf4e:	1ad3      	subs	r3, r2, r3
 800cf50:	2b28      	cmp	r3, #40	; 0x28
 800cf52:	d904      	bls.n	800cf5e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800cf54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf58:	3301      	adds	r3, #1
 800cf5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800cf5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf60:	7d1b      	ldrb	r3, [r3, #20]
 800cf62:	2b09      	cmp	r3, #9
 800cf64:	d10b      	bne.n	800cf7e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cf66:	4b59      	ldr	r3, [pc, #356]	; (800d0cc <tcp_slowtmr+0x584>)
 800cf68:	681a      	ldr	r2, [r3, #0]
 800cf6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf6c:	6a1b      	ldr	r3, [r3, #32]
 800cf6e:	1ad3      	subs	r3, r2, r3
 800cf70:	2bf0      	cmp	r3, #240	; 0xf0
 800cf72:	d904      	bls.n	800cf7e <tcp_slowtmr+0x436>
        ++pcb_remove;
 800cf74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf78:	3301      	adds	r3, #1
 800cf7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cf7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d060      	beq.n	800d048 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800cf86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf8c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800cf8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf90:	f000 fcca 	bl	800d928 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800cf94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d010      	beq.n	800cfbc <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800cf9a:	4b4f      	ldr	r3, [pc, #316]	; (800d0d8 <tcp_slowtmr+0x590>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cfa0:	429a      	cmp	r2, r3
 800cfa2:	d106      	bne.n	800cfb2 <tcp_slowtmr+0x46a>
 800cfa4:	4b4d      	ldr	r3, [pc, #308]	; (800d0dc <tcp_slowtmr+0x594>)
 800cfa6:	f240 526d 	movw	r2, #1389	; 0x56d
 800cfaa:	494d      	ldr	r1, [pc, #308]	; (800d0e0 <tcp_slowtmr+0x598>)
 800cfac:	484d      	ldr	r0, [pc, #308]	; (800d0e4 <tcp_slowtmr+0x59c>)
 800cfae:	f008 fb25 	bl	80155fc <iprintf>
        prev->next = pcb->next;
 800cfb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb4:	68da      	ldr	r2, [r3, #12]
 800cfb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb8:	60da      	str	r2, [r3, #12]
 800cfba:	e00f      	b.n	800cfdc <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800cfbc:	4b46      	ldr	r3, [pc, #280]	; (800d0d8 <tcp_slowtmr+0x590>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cfc2:	429a      	cmp	r2, r3
 800cfc4:	d006      	beq.n	800cfd4 <tcp_slowtmr+0x48c>
 800cfc6:	4b45      	ldr	r3, [pc, #276]	; (800d0dc <tcp_slowtmr+0x594>)
 800cfc8:	f240 5271 	movw	r2, #1393	; 0x571
 800cfcc:	4946      	ldr	r1, [pc, #280]	; (800d0e8 <tcp_slowtmr+0x5a0>)
 800cfce:	4845      	ldr	r0, [pc, #276]	; (800d0e4 <tcp_slowtmr+0x59c>)
 800cfd0:	f008 fb14 	bl	80155fc <iprintf>
        tcp_active_pcbs = pcb->next;
 800cfd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfd6:	68db      	ldr	r3, [r3, #12]
 800cfd8:	4a3f      	ldr	r2, [pc, #252]	; (800d0d8 <tcp_slowtmr+0x590>)
 800cfda:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800cfdc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d013      	beq.n	800d00c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cfe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfe6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800cfe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfea:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800cfec:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800cfee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cff0:	3304      	adds	r3, #4
 800cff2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cff4:	8ad2      	ldrh	r2, [r2, #22]
 800cff6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cff8:	8b09      	ldrh	r1, [r1, #24]
 800cffa:	9102      	str	r1, [sp, #8]
 800cffc:	9201      	str	r2, [sp, #4]
 800cffe:	9300      	str	r3, [sp, #0]
 800d000:	462b      	mov	r3, r5
 800d002:	4622      	mov	r2, r4
 800d004:	4601      	mov	r1, r0
 800d006:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d008:	f004 feaa 	bl	8011d60 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800d00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d00e:	691b      	ldr	r3, [r3, #16]
 800d010:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d014:	7d1b      	ldrb	r3, [r3, #20]
 800d016:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d01a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d01e:	68db      	ldr	r3, [r3, #12]
 800d020:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d022:	6838      	ldr	r0, [r7, #0]
 800d024:	f7fe ffee 	bl	800c004 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800d028:	4b30      	ldr	r3, [pc, #192]	; (800d0ec <tcp_slowtmr+0x5a4>)
 800d02a:	2200      	movs	r2, #0
 800d02c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d004      	beq.n	800d03e <tcp_slowtmr+0x4f6>
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	f06f 010c 	mvn.w	r1, #12
 800d03a:	68b8      	ldr	r0, [r7, #8]
 800d03c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d03e:	4b2b      	ldr	r3, [pc, #172]	; (800d0ec <tcp_slowtmr+0x5a4>)
 800d040:	781b      	ldrb	r3, [r3, #0]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d037      	beq.n	800d0b6 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800d046:	e590      	b.n	800cb6a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800d048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d04a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d04c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d04e:	68db      	ldr	r3, [r3, #12]
 800d050:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800d052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d054:	7f1b      	ldrb	r3, [r3, #28]
 800d056:	3301      	adds	r3, #1
 800d058:	b2da      	uxtb	r2, r3
 800d05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d05c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d060:	7f1a      	ldrb	r2, [r3, #28]
 800d062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d064:	7f5b      	ldrb	r3, [r3, #29]
 800d066:	429a      	cmp	r2, r3
 800d068:	d325      	bcc.n	800d0b6 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800d06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d06c:	2200      	movs	r2, #0
 800d06e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800d070:	4b1e      	ldr	r3, [pc, #120]	; (800d0ec <tcp_slowtmr+0x5a4>)
 800d072:	2200      	movs	r2, #0
 800d074:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d078:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d00b      	beq.n	800d098 <tcp_slowtmr+0x550>
 800d080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d082:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d086:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d088:	6912      	ldr	r2, [r2, #16]
 800d08a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d08c:	4610      	mov	r0, r2
 800d08e:	4798      	blx	r3
 800d090:	4603      	mov	r3, r0
 800d092:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800d096:	e002      	b.n	800d09e <tcp_slowtmr+0x556>
 800d098:	2300      	movs	r3, #0
 800d09a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800d09e:	4b13      	ldr	r3, [pc, #76]	; (800d0ec <tcp_slowtmr+0x5a4>)
 800d0a0:	781b      	ldrb	r3, [r3, #0]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d000      	beq.n	800d0a8 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800d0a6:	e560      	b.n	800cb6a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d0a8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d102      	bne.n	800d0b6 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800d0b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0b2:	f004 f8a1 	bl	80111f8 <tcp_output>
  while (pcb != NULL) {
 800d0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	f47f ad5c 	bne.w	800cb76 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800d0c2:	4b0b      	ldr	r3, [pc, #44]	; (800d0f0 <tcp_slowtmr+0x5a8>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d0c8:	e067      	b.n	800d19a <tcp_slowtmr+0x652>
 800d0ca:	bf00      	nop
 800d0cc:	2000b7dc 	.word	0x2000b7dc
 800d0d0:	10624dd3 	.word	0x10624dd3
 800d0d4:	000124f8 	.word	0x000124f8
 800d0d8:	2000b7d8 	.word	0x2000b7d8
 800d0dc:	08017b38 	.word	0x08017b38
 800d0e0:	08017f70 	.word	0x08017f70
 800d0e4:	08017b7c 	.word	0x08017b7c
 800d0e8:	08017f9c 	.word	0x08017f9c
 800d0ec:	2000b7d4 	.word	0x2000b7d4
 800d0f0:	2000b7e8 	.word	0x2000b7e8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f6:	7d1b      	ldrb	r3, [r3, #20]
 800d0f8:	2b0a      	cmp	r3, #10
 800d0fa:	d006      	beq.n	800d10a <tcp_slowtmr+0x5c2>
 800d0fc:	4b2b      	ldr	r3, [pc, #172]	; (800d1ac <tcp_slowtmr+0x664>)
 800d0fe:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800d102:	492b      	ldr	r1, [pc, #172]	; (800d1b0 <tcp_slowtmr+0x668>)
 800d104:	482b      	ldr	r0, [pc, #172]	; (800d1b4 <tcp_slowtmr+0x66c>)
 800d106:	f008 fa79 	bl	80155fc <iprintf>
    pcb_remove = 0;
 800d10a:	2300      	movs	r3, #0
 800d10c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d110:	4b29      	ldr	r3, [pc, #164]	; (800d1b8 <tcp_slowtmr+0x670>)
 800d112:	681a      	ldr	r2, [r3, #0]
 800d114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d116:	6a1b      	ldr	r3, [r3, #32]
 800d118:	1ad3      	subs	r3, r2, r3
 800d11a:	2bf0      	cmp	r3, #240	; 0xf0
 800d11c:	d904      	bls.n	800d128 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800d11e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d122:	3301      	adds	r3, #1
 800d124:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d128:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d02f      	beq.n	800d190 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d130:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d132:	f000 fbf9 	bl	800d928 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d010      	beq.n	800d15e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d13c:	4b1f      	ldr	r3, [pc, #124]	; (800d1bc <tcp_slowtmr+0x674>)
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d142:	429a      	cmp	r2, r3
 800d144:	d106      	bne.n	800d154 <tcp_slowtmr+0x60c>
 800d146:	4b19      	ldr	r3, [pc, #100]	; (800d1ac <tcp_slowtmr+0x664>)
 800d148:	f240 52af 	movw	r2, #1455	; 0x5af
 800d14c:	491c      	ldr	r1, [pc, #112]	; (800d1c0 <tcp_slowtmr+0x678>)
 800d14e:	4819      	ldr	r0, [pc, #100]	; (800d1b4 <tcp_slowtmr+0x66c>)
 800d150:	f008 fa54 	bl	80155fc <iprintf>
        prev->next = pcb->next;
 800d154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d156:	68da      	ldr	r2, [r3, #12]
 800d158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d15a:	60da      	str	r2, [r3, #12]
 800d15c:	e00f      	b.n	800d17e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d15e:	4b17      	ldr	r3, [pc, #92]	; (800d1bc <tcp_slowtmr+0x674>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d164:	429a      	cmp	r2, r3
 800d166:	d006      	beq.n	800d176 <tcp_slowtmr+0x62e>
 800d168:	4b10      	ldr	r3, [pc, #64]	; (800d1ac <tcp_slowtmr+0x664>)
 800d16a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800d16e:	4915      	ldr	r1, [pc, #84]	; (800d1c4 <tcp_slowtmr+0x67c>)
 800d170:	4810      	ldr	r0, [pc, #64]	; (800d1b4 <tcp_slowtmr+0x66c>)
 800d172:	f008 fa43 	bl	80155fc <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d178:	68db      	ldr	r3, [r3, #12]
 800d17a:	4a10      	ldr	r2, [pc, #64]	; (800d1bc <tcp_slowtmr+0x674>)
 800d17c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d180:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d184:	68db      	ldr	r3, [r3, #12]
 800d186:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d188:	69f8      	ldr	r0, [r7, #28]
 800d18a:	f7fe ff3b 	bl	800c004 <tcp_free>
 800d18e:	e004      	b.n	800d19a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800d190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d192:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d196:	68db      	ldr	r3, [r3, #12]
 800d198:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d1a9      	bne.n	800d0f4 <tcp_slowtmr+0x5ac>
    }
  }
}
 800d1a0:	bf00      	nop
 800d1a2:	bf00      	nop
 800d1a4:	3730      	adds	r7, #48	; 0x30
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bdb0      	pop	{r4, r5, r7, pc}
 800d1aa:	bf00      	nop
 800d1ac:	08017b38 	.word	0x08017b38
 800d1b0:	08017fc8 	.word	0x08017fc8
 800d1b4:	08017b7c 	.word	0x08017b7c
 800d1b8:	2000b7dc 	.word	0x2000b7dc
 800d1bc:	2000b7e8 	.word	0x2000b7e8
 800d1c0:	08017ff8 	.word	0x08017ff8
 800d1c4:	08018020 	.word	0x08018020

0800d1c8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b082      	sub	sp, #8
 800d1cc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d1ce:	4b2d      	ldr	r3, [pc, #180]	; (800d284 <tcp_fasttmr+0xbc>)
 800d1d0:	781b      	ldrb	r3, [r3, #0]
 800d1d2:	3301      	adds	r3, #1
 800d1d4:	b2da      	uxtb	r2, r3
 800d1d6:	4b2b      	ldr	r3, [pc, #172]	; (800d284 <tcp_fasttmr+0xbc>)
 800d1d8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d1da:	4b2b      	ldr	r3, [pc, #172]	; (800d288 <tcp_fasttmr+0xc0>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d1e0:	e048      	b.n	800d274 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	7f9a      	ldrb	r2, [r3, #30]
 800d1e6:	4b27      	ldr	r3, [pc, #156]	; (800d284 <tcp_fasttmr+0xbc>)
 800d1e8:	781b      	ldrb	r3, [r3, #0]
 800d1ea:	429a      	cmp	r2, r3
 800d1ec:	d03f      	beq.n	800d26e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d1ee:	4b25      	ldr	r3, [pc, #148]	; (800d284 <tcp_fasttmr+0xbc>)
 800d1f0:	781a      	ldrb	r2, [r3, #0]
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	8b5b      	ldrh	r3, [r3, #26]
 800d1fa:	f003 0301 	and.w	r3, r3, #1
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d010      	beq.n	800d224 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	8b5b      	ldrh	r3, [r3, #26]
 800d206:	f043 0302 	orr.w	r3, r3, #2
 800d20a:	b29a      	uxth	r2, r3
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d210:	6878      	ldr	r0, [r7, #4]
 800d212:	f003 fff1 	bl	80111f8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	8b5b      	ldrh	r3, [r3, #26]
 800d21a:	f023 0303 	bic.w	r3, r3, #3
 800d21e:	b29a      	uxth	r2, r3
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	8b5b      	ldrh	r3, [r3, #26]
 800d228:	f003 0308 	and.w	r3, r3, #8
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d009      	beq.n	800d244 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	8b5b      	ldrh	r3, [r3, #26]
 800d234:	f023 0308 	bic.w	r3, r3, #8
 800d238:	b29a      	uxth	r2, r3
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f7ff f874 	bl	800c32c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	68db      	ldr	r3, [r3, #12]
 800d248:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d00a      	beq.n	800d268 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d252:	4b0e      	ldr	r3, [pc, #56]	; (800d28c <tcp_fasttmr+0xc4>)
 800d254:	2200      	movs	r2, #0
 800d256:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f000 f819 	bl	800d290 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d25e:	4b0b      	ldr	r3, [pc, #44]	; (800d28c <tcp_fasttmr+0xc4>)
 800d260:	781b      	ldrb	r3, [r3, #0]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d000      	beq.n	800d268 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d266:	e7b8      	b.n	800d1da <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	607b      	str	r3, [r7, #4]
 800d26c:	e002      	b.n	800d274 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	68db      	ldr	r3, [r3, #12]
 800d272:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d1b3      	bne.n	800d1e2 <tcp_fasttmr+0x1a>
    }
  }
}
 800d27a:	bf00      	nop
 800d27c:	bf00      	nop
 800d27e:	3708      	adds	r7, #8
 800d280:	46bd      	mov	sp, r7
 800d282:	bd80      	pop	{r7, pc}
 800d284:	20004ace 	.word	0x20004ace
 800d288:	2000b7d8 	.word	0x2000b7d8
 800d28c:	2000b7d4 	.word	0x2000b7d4

0800d290 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d290:	b590      	push	{r4, r7, lr}
 800d292:	b085      	sub	sp, #20
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d109      	bne.n	800d2b2 <tcp_process_refused_data+0x22>
 800d29e:	4b37      	ldr	r3, [pc, #220]	; (800d37c <tcp_process_refused_data+0xec>)
 800d2a0:	f240 6209 	movw	r2, #1545	; 0x609
 800d2a4:	4936      	ldr	r1, [pc, #216]	; (800d380 <tcp_process_refused_data+0xf0>)
 800d2a6:	4837      	ldr	r0, [pc, #220]	; (800d384 <tcp_process_refused_data+0xf4>)
 800d2a8:	f008 f9a8 	bl	80155fc <iprintf>
 800d2ac:	f06f 030f 	mvn.w	r3, #15
 800d2b0:	e060      	b.n	800d374 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d2b6:	7b5b      	ldrb	r3, [r3, #13]
 800d2b8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d2be:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d00b      	beq.n	800d2e8 <tcp_process_refused_data+0x58>
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	6918      	ldr	r0, [r3, #16]
 800d2da:	2300      	movs	r3, #0
 800d2dc:	68ba      	ldr	r2, [r7, #8]
 800d2de:	6879      	ldr	r1, [r7, #4]
 800d2e0:	47a0      	blx	r4
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	73fb      	strb	r3, [r7, #15]
 800d2e6:	e007      	b.n	800d2f8 <tcp_process_refused_data+0x68>
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	68ba      	ldr	r2, [r7, #8]
 800d2ec:	6879      	ldr	r1, [r7, #4]
 800d2ee:	2000      	movs	r0, #0
 800d2f0:	f000 f8a4 	bl	800d43c <tcp_recv_null>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d2f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d12a      	bne.n	800d356 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d300:	7bbb      	ldrb	r3, [r7, #14]
 800d302:	f003 0320 	and.w	r3, r3, #32
 800d306:	2b00      	cmp	r3, #0
 800d308:	d033      	beq.n	800d372 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d30e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d312:	d005      	beq.n	800d320 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d318:	3301      	adds	r3, #1
 800d31a:	b29a      	uxth	r2, r3
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d326:	2b00      	cmp	r3, #0
 800d328:	d00b      	beq.n	800d342 <tcp_process_refused_data+0xb2>
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	6918      	ldr	r0, [r3, #16]
 800d334:	2300      	movs	r3, #0
 800d336:	2200      	movs	r2, #0
 800d338:	6879      	ldr	r1, [r7, #4]
 800d33a:	47a0      	blx	r4
 800d33c:	4603      	mov	r3, r0
 800d33e:	73fb      	strb	r3, [r7, #15]
 800d340:	e001      	b.n	800d346 <tcp_process_refused_data+0xb6>
 800d342:	2300      	movs	r3, #0
 800d344:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d34a:	f113 0f0d 	cmn.w	r3, #13
 800d34e:	d110      	bne.n	800d372 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d350:	f06f 030c 	mvn.w	r3, #12
 800d354:	e00e      	b.n	800d374 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d35a:	f113 0f0d 	cmn.w	r3, #13
 800d35e:	d102      	bne.n	800d366 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d360:	f06f 030c 	mvn.w	r3, #12
 800d364:	e006      	b.n	800d374 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	68ba      	ldr	r2, [r7, #8]
 800d36a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800d36c:	f06f 0304 	mvn.w	r3, #4
 800d370:	e000      	b.n	800d374 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d372:	2300      	movs	r3, #0
}
 800d374:	4618      	mov	r0, r3
 800d376:	3714      	adds	r7, #20
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd90      	pop	{r4, r7, pc}
 800d37c:	08017b38 	.word	0x08017b38
 800d380:	08018048 	.word	0x08018048
 800d384:	08017b7c 	.word	0x08017b7c

0800d388 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b084      	sub	sp, #16
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d390:	e007      	b.n	800d3a2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	f000 f80a 	bl	800d3b2 <tcp_seg_free>
    seg = next;
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d1f4      	bne.n	800d392 <tcp_segs_free+0xa>
  }
}
 800d3a8:	bf00      	nop
 800d3aa:	bf00      	nop
 800d3ac:	3710      	adds	r7, #16
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd80      	pop	{r7, pc}

0800d3b2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d3b2:	b580      	push	{r7, lr}
 800d3b4:	b082      	sub	sp, #8
 800d3b6:	af00      	add	r7, sp, #0
 800d3b8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d00c      	beq.n	800d3da <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	685b      	ldr	r3, [r3, #4]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d004      	beq.n	800d3d2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	685b      	ldr	r3, [r3, #4]
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	f7fe fb6d 	bl	800baac <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d3d2:	6879      	ldr	r1, [r7, #4]
 800d3d4:	2003      	movs	r0, #3
 800d3d6:	f7fd fcc5 	bl	800ad64 <memp_free>
  }
}
 800d3da:	bf00      	nop
 800d3dc:	3708      	adds	r7, #8
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}
	...

0800d3e4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b084      	sub	sp, #16
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d106      	bne.n	800d400 <tcp_seg_copy+0x1c>
 800d3f2:	4b0f      	ldr	r3, [pc, #60]	; (800d430 <tcp_seg_copy+0x4c>)
 800d3f4:	f240 6282 	movw	r2, #1666	; 0x682
 800d3f8:	490e      	ldr	r1, [pc, #56]	; (800d434 <tcp_seg_copy+0x50>)
 800d3fa:	480f      	ldr	r0, [pc, #60]	; (800d438 <tcp_seg_copy+0x54>)
 800d3fc:	f008 f8fe 	bl	80155fc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d400:	2003      	movs	r0, #3
 800d402:	f7fd fc5d 	bl	800acc0 <memp_malloc>
 800d406:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d101      	bne.n	800d412 <tcp_seg_copy+0x2e>
    return NULL;
 800d40e:	2300      	movs	r3, #0
 800d410:	e00a      	b.n	800d428 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d412:	2210      	movs	r2, #16
 800d414:	6879      	ldr	r1, [r7, #4]
 800d416:	68f8      	ldr	r0, [r7, #12]
 800d418:	f008 f87f 	bl	801551a <memcpy>
  pbuf_ref(cseg->p);
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	685b      	ldr	r3, [r3, #4]
 800d420:	4618      	mov	r0, r3
 800d422:	f7fe fbe9 	bl	800bbf8 <pbuf_ref>
  return cseg;
 800d426:	68fb      	ldr	r3, [r7, #12]
}
 800d428:	4618      	mov	r0, r3
 800d42a:	3710      	adds	r7, #16
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}
 800d430:	08017b38 	.word	0x08017b38
 800d434:	0801808c 	.word	0x0801808c
 800d438:	08017b7c 	.word	0x08017b7c

0800d43c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b084      	sub	sp, #16
 800d440:	af00      	add	r7, sp, #0
 800d442:	60f8      	str	r0, [r7, #12]
 800d444:	60b9      	str	r1, [r7, #8]
 800d446:	607a      	str	r2, [r7, #4]
 800d448:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d44a:	68bb      	ldr	r3, [r7, #8]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d109      	bne.n	800d464 <tcp_recv_null+0x28>
 800d450:	4b12      	ldr	r3, [pc, #72]	; (800d49c <tcp_recv_null+0x60>)
 800d452:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d456:	4912      	ldr	r1, [pc, #72]	; (800d4a0 <tcp_recv_null+0x64>)
 800d458:	4812      	ldr	r0, [pc, #72]	; (800d4a4 <tcp_recv_null+0x68>)
 800d45a:	f008 f8cf 	bl	80155fc <iprintf>
 800d45e:	f06f 030f 	mvn.w	r3, #15
 800d462:	e016      	b.n	800d492 <tcp_recv_null+0x56>

  if (p != NULL) {
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d009      	beq.n	800d47e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	891b      	ldrh	r3, [r3, #8]
 800d46e:	4619      	mov	r1, r3
 800d470:	68b8      	ldr	r0, [r7, #8]
 800d472:	f7ff fad3 	bl	800ca1c <tcp_recved>
    pbuf_free(p);
 800d476:	6878      	ldr	r0, [r7, #4]
 800d478:	f7fe fb18 	bl	800baac <pbuf_free>
 800d47c:	e008      	b.n	800d490 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d47e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d104      	bne.n	800d490 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d486:	68b8      	ldr	r0, [r7, #8]
 800d488:	f7fe ffba 	bl	800c400 <tcp_close>
 800d48c:	4603      	mov	r3, r0
 800d48e:	e000      	b.n	800d492 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d490:	2300      	movs	r3, #0
}
 800d492:	4618      	mov	r0, r3
 800d494:	3710      	adds	r7, #16
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}
 800d49a:	bf00      	nop
 800d49c:	08017b38 	.word	0x08017b38
 800d4a0:	080180a8 	.word	0x080180a8
 800d4a4:	08017b7c 	.word	0x08017b7c

0800d4a8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b086      	sub	sp, #24
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d4b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	db01      	blt.n	800d4be <tcp_kill_prio+0x16>
 800d4ba:	79fb      	ldrb	r3, [r7, #7]
 800d4bc:	e000      	b.n	800d4c0 <tcp_kill_prio+0x18>
 800d4be:	237f      	movs	r3, #127	; 0x7f
 800d4c0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d4c2:	7afb      	ldrb	r3, [r7, #11]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d034      	beq.n	800d532 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d4c8:	7afb      	ldrb	r3, [r7, #11]
 800d4ca:	3b01      	subs	r3, #1
 800d4cc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d4d6:	4b19      	ldr	r3, [pc, #100]	; (800d53c <tcp_kill_prio+0x94>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	617b      	str	r3, [r7, #20]
 800d4dc:	e01f      	b.n	800d51e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d4de:	697b      	ldr	r3, [r7, #20]
 800d4e0:	7d5b      	ldrb	r3, [r3, #21]
 800d4e2:	7afa      	ldrb	r2, [r7, #11]
 800d4e4:	429a      	cmp	r2, r3
 800d4e6:	d80c      	bhi.n	800d502 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d4e8:	697b      	ldr	r3, [r7, #20]
 800d4ea:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d4ec:	7afa      	ldrb	r2, [r7, #11]
 800d4ee:	429a      	cmp	r2, r3
 800d4f0:	d112      	bne.n	800d518 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d4f2:	4b13      	ldr	r3, [pc, #76]	; (800d540 <tcp_kill_prio+0x98>)
 800d4f4:	681a      	ldr	r2, [r3, #0]
 800d4f6:	697b      	ldr	r3, [r7, #20]
 800d4f8:	6a1b      	ldr	r3, [r3, #32]
 800d4fa:	1ad3      	subs	r3, r2, r3
 800d4fc:	68fa      	ldr	r2, [r7, #12]
 800d4fe:	429a      	cmp	r2, r3
 800d500:	d80a      	bhi.n	800d518 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d502:	4b0f      	ldr	r3, [pc, #60]	; (800d540 <tcp_kill_prio+0x98>)
 800d504:	681a      	ldr	r2, [r3, #0]
 800d506:	697b      	ldr	r3, [r7, #20]
 800d508:	6a1b      	ldr	r3, [r3, #32]
 800d50a:	1ad3      	subs	r3, r2, r3
 800d50c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d50e:	697b      	ldr	r3, [r7, #20]
 800d510:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	7d5b      	ldrb	r3, [r3, #21]
 800d516:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d518:	697b      	ldr	r3, [r7, #20]
 800d51a:	68db      	ldr	r3, [r3, #12]
 800d51c:	617b      	str	r3, [r7, #20]
 800d51e:	697b      	ldr	r3, [r7, #20]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d1dc      	bne.n	800d4de <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d524:	693b      	ldr	r3, [r7, #16]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d004      	beq.n	800d534 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d52a:	6938      	ldr	r0, [r7, #16]
 800d52c:	f7ff f8ae 	bl	800c68c <tcp_abort>
 800d530:	e000      	b.n	800d534 <tcp_kill_prio+0x8c>
    return;
 800d532:	bf00      	nop
  }
}
 800d534:	3718      	adds	r7, #24
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}
 800d53a:	bf00      	nop
 800d53c:	2000b7d8 	.word	0x2000b7d8
 800d540:	2000b7dc 	.word	0x2000b7dc

0800d544 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b086      	sub	sp, #24
 800d548:	af00      	add	r7, sp, #0
 800d54a:	4603      	mov	r3, r0
 800d54c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d54e:	79fb      	ldrb	r3, [r7, #7]
 800d550:	2b08      	cmp	r3, #8
 800d552:	d009      	beq.n	800d568 <tcp_kill_state+0x24>
 800d554:	79fb      	ldrb	r3, [r7, #7]
 800d556:	2b09      	cmp	r3, #9
 800d558:	d006      	beq.n	800d568 <tcp_kill_state+0x24>
 800d55a:	4b1a      	ldr	r3, [pc, #104]	; (800d5c4 <tcp_kill_state+0x80>)
 800d55c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800d560:	4919      	ldr	r1, [pc, #100]	; (800d5c8 <tcp_kill_state+0x84>)
 800d562:	481a      	ldr	r0, [pc, #104]	; (800d5cc <tcp_kill_state+0x88>)
 800d564:	f008 f84a 	bl	80155fc <iprintf>

  inactivity = 0;
 800d568:	2300      	movs	r3, #0
 800d56a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d56c:	2300      	movs	r3, #0
 800d56e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d570:	4b17      	ldr	r3, [pc, #92]	; (800d5d0 <tcp_kill_state+0x8c>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	617b      	str	r3, [r7, #20]
 800d576:	e017      	b.n	800d5a8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	7d1b      	ldrb	r3, [r3, #20]
 800d57c:	79fa      	ldrb	r2, [r7, #7]
 800d57e:	429a      	cmp	r2, r3
 800d580:	d10f      	bne.n	800d5a2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d582:	4b14      	ldr	r3, [pc, #80]	; (800d5d4 <tcp_kill_state+0x90>)
 800d584:	681a      	ldr	r2, [r3, #0]
 800d586:	697b      	ldr	r3, [r7, #20]
 800d588:	6a1b      	ldr	r3, [r3, #32]
 800d58a:	1ad3      	subs	r3, r2, r3
 800d58c:	68fa      	ldr	r2, [r7, #12]
 800d58e:	429a      	cmp	r2, r3
 800d590:	d807      	bhi.n	800d5a2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d592:	4b10      	ldr	r3, [pc, #64]	; (800d5d4 <tcp_kill_state+0x90>)
 800d594:	681a      	ldr	r2, [r3, #0]
 800d596:	697b      	ldr	r3, [r7, #20]
 800d598:	6a1b      	ldr	r3, [r3, #32]
 800d59a:	1ad3      	subs	r3, r2, r3
 800d59c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	68db      	ldr	r3, [r3, #12]
 800d5a6:	617b      	str	r3, [r7, #20]
 800d5a8:	697b      	ldr	r3, [r7, #20]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d1e4      	bne.n	800d578 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d5ae:	693b      	ldr	r3, [r7, #16]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d003      	beq.n	800d5bc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d5b4:	2100      	movs	r1, #0
 800d5b6:	6938      	ldr	r0, [r7, #16]
 800d5b8:	f7fe ffaa 	bl	800c510 <tcp_abandon>
  }
}
 800d5bc:	bf00      	nop
 800d5be:	3718      	adds	r7, #24
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}
 800d5c4:	08017b38 	.word	0x08017b38
 800d5c8:	080180c4 	.word	0x080180c4
 800d5cc:	08017b7c 	.word	0x08017b7c
 800d5d0:	2000b7d8 	.word	0x2000b7d8
 800d5d4:	2000b7dc 	.word	0x2000b7dc

0800d5d8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b084      	sub	sp, #16
 800d5dc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d5de:	2300      	movs	r3, #0
 800d5e0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d5e6:	4b12      	ldr	r3, [pc, #72]	; (800d630 <tcp_kill_timewait+0x58>)
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	60fb      	str	r3, [r7, #12]
 800d5ec:	e012      	b.n	800d614 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d5ee:	4b11      	ldr	r3, [pc, #68]	; (800d634 <tcp_kill_timewait+0x5c>)
 800d5f0:	681a      	ldr	r2, [r3, #0]
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	6a1b      	ldr	r3, [r3, #32]
 800d5f6:	1ad3      	subs	r3, r2, r3
 800d5f8:	687a      	ldr	r2, [r7, #4]
 800d5fa:	429a      	cmp	r2, r3
 800d5fc:	d807      	bhi.n	800d60e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d5fe:	4b0d      	ldr	r3, [pc, #52]	; (800d634 <tcp_kill_timewait+0x5c>)
 800d600:	681a      	ldr	r2, [r3, #0]
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	6a1b      	ldr	r3, [r3, #32]
 800d606:	1ad3      	subs	r3, r2, r3
 800d608:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	68db      	ldr	r3, [r3, #12]
 800d612:	60fb      	str	r3, [r7, #12]
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d1e9      	bne.n	800d5ee <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d002      	beq.n	800d626 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d620:	68b8      	ldr	r0, [r7, #8]
 800d622:	f7ff f833 	bl	800c68c <tcp_abort>
  }
}
 800d626:	bf00      	nop
 800d628:	3710      	adds	r7, #16
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bd80      	pop	{r7, pc}
 800d62e:	bf00      	nop
 800d630:	2000b7e8 	.word	0x2000b7e8
 800d634:	2000b7dc 	.word	0x2000b7dc

0800d638 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b082      	sub	sp, #8
 800d63c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d63e:	4b10      	ldr	r3, [pc, #64]	; (800d680 <tcp_handle_closepend+0x48>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d644:	e014      	b.n	800d670 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	68db      	ldr	r3, [r3, #12]
 800d64a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	8b5b      	ldrh	r3, [r3, #26]
 800d650:	f003 0308 	and.w	r3, r3, #8
 800d654:	2b00      	cmp	r3, #0
 800d656:	d009      	beq.n	800d66c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	8b5b      	ldrh	r3, [r3, #26]
 800d65c:	f023 0308 	bic.w	r3, r3, #8
 800d660:	b29a      	uxth	r2, r3
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f7fe fe60 	bl	800c32c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d1e7      	bne.n	800d646 <tcp_handle_closepend+0xe>
  }
}
 800d676:	bf00      	nop
 800d678:	bf00      	nop
 800d67a:	3708      	adds	r7, #8
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}
 800d680:	2000b7d8 	.word	0x2000b7d8

0800d684 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b084      	sub	sp, #16
 800d688:	af00      	add	r7, sp, #0
 800d68a:	4603      	mov	r3, r0
 800d68c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d68e:	2001      	movs	r0, #1
 800d690:	f7fd fb16 	bl	800acc0 <memp_malloc>
 800d694:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d126      	bne.n	800d6ea <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d69c:	f7ff ffcc 	bl	800d638 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d6a0:	f7ff ff9a 	bl	800d5d8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d6a4:	2001      	movs	r0, #1
 800d6a6:	f7fd fb0b 	bl	800acc0 <memp_malloc>
 800d6aa:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d11b      	bne.n	800d6ea <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d6b2:	2009      	movs	r0, #9
 800d6b4:	f7ff ff46 	bl	800d544 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d6b8:	2001      	movs	r0, #1
 800d6ba:	f7fd fb01 	bl	800acc0 <memp_malloc>
 800d6be:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d111      	bne.n	800d6ea <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d6c6:	2008      	movs	r0, #8
 800d6c8:	f7ff ff3c 	bl	800d544 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d6cc:	2001      	movs	r0, #1
 800d6ce:	f7fd faf7 	bl	800acc0 <memp_malloc>
 800d6d2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d107      	bne.n	800d6ea <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d6da:	79fb      	ldrb	r3, [r7, #7]
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f7ff fee3 	bl	800d4a8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d6e2:	2001      	movs	r0, #1
 800d6e4:	f7fd faec 	bl	800acc0 <memp_malloc>
 800d6e8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d03f      	beq.n	800d770 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d6f0:	229c      	movs	r2, #156	; 0x9c
 800d6f2:	2100      	movs	r1, #0
 800d6f4:	68f8      	ldr	r0, [r7, #12]
 800d6f6:	f007 ff1e 	bl	8015536 <memset>
    pcb->prio = prio;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	79fa      	ldrb	r2, [r7, #7]
 800d6fe:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d706:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d710:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	22ff      	movs	r2, #255	; 0xff
 800d71e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d726:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	2206      	movs	r2, #6
 800d72c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	2206      	movs	r2, #6
 800d734:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d73c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	2201      	movs	r2, #1
 800d742:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800d746:	4b0d      	ldr	r3, [pc, #52]	; (800d77c <tcp_alloc+0xf8>)
 800d748:	681a      	ldr	r2, [r3, #0]
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d74e:	4b0c      	ldr	r3, [pc, #48]	; (800d780 <tcp_alloc+0xfc>)
 800d750:	781a      	ldrb	r2, [r3, #0]
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d75c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	4a08      	ldr	r2, [pc, #32]	; (800d784 <tcp_alloc+0x100>)
 800d764:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	4a07      	ldr	r2, [pc, #28]	; (800d788 <tcp_alloc+0x104>)
 800d76c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d770:	68fb      	ldr	r3, [r7, #12]
}
 800d772:	4618      	mov	r0, r3
 800d774:	3710      	adds	r7, #16
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}
 800d77a:	bf00      	nop
 800d77c:	2000b7dc 	.word	0x2000b7dc
 800d780:	20004ace 	.word	0x20004ace
 800d784:	0800d43d 	.word	0x0800d43d
 800d788:	006ddd00 	.word	0x006ddd00

0800d78c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b084      	sub	sp, #16
 800d790:	af00      	add	r7, sp, #0
 800d792:	4603      	mov	r3, r0
 800d794:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800d796:	2040      	movs	r0, #64	; 0x40
 800d798:	f7ff ff74 	bl	800d684 <tcp_alloc>
 800d79c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800d79e:	68fb      	ldr	r3, [r7, #12]
}
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3710      	adds	r7, #16
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}

0800d7a8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800d7a8:	b480      	push	{r7}
 800d7aa:	b083      	sub	sp, #12
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
 800d7b0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d002      	beq.n	800d7be <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	683a      	ldr	r2, [r7, #0]
 800d7bc:	611a      	str	r2, [r3, #16]
  }
}
 800d7be:	bf00      	nop
 800d7c0:	370c      	adds	r7, #12
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c8:	4770      	bx	lr
	...

0800d7cc <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b082      	sub	sp, #8
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
 800d7d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d00e      	beq.n	800d7fa <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	7d1b      	ldrb	r3, [r3, #20]
 800d7e0:	2b01      	cmp	r3, #1
 800d7e2:	d106      	bne.n	800d7f2 <tcp_recv+0x26>
 800d7e4:	4b07      	ldr	r3, [pc, #28]	; (800d804 <tcp_recv+0x38>)
 800d7e6:	f240 72df 	movw	r2, #2015	; 0x7df
 800d7ea:	4907      	ldr	r1, [pc, #28]	; (800d808 <tcp_recv+0x3c>)
 800d7ec:	4807      	ldr	r0, [pc, #28]	; (800d80c <tcp_recv+0x40>)
 800d7ee:	f007 ff05 	bl	80155fc <iprintf>
    pcb->recv = recv;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	683a      	ldr	r2, [r7, #0]
 800d7f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800d7fa:	bf00      	nop
 800d7fc:	3708      	adds	r7, #8
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}
 800d802:	bf00      	nop
 800d804:	08017b38 	.word	0x08017b38
 800d808:	080180d4 	.word	0x080180d4
 800d80c:	08017b7c 	.word	0x08017b7c

0800d810 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b082      	sub	sp, #8
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
 800d818:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d00e      	beq.n	800d83e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	7d1b      	ldrb	r3, [r3, #20]
 800d824:	2b01      	cmp	r3, #1
 800d826:	d106      	bne.n	800d836 <tcp_sent+0x26>
 800d828:	4b07      	ldr	r3, [pc, #28]	; (800d848 <tcp_sent+0x38>)
 800d82a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800d82e:	4907      	ldr	r1, [pc, #28]	; (800d84c <tcp_sent+0x3c>)
 800d830:	4807      	ldr	r0, [pc, #28]	; (800d850 <tcp_sent+0x40>)
 800d832:	f007 fee3 	bl	80155fc <iprintf>
    pcb->sent = sent;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	683a      	ldr	r2, [r7, #0]
 800d83a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800d83e:	bf00      	nop
 800d840:	3708      	adds	r7, #8
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}
 800d846:	bf00      	nop
 800d848:	08017b38 	.word	0x08017b38
 800d84c:	080180fc 	.word	0x080180fc
 800d850:	08017b7c 	.word	0x08017b7c

0800d854 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b082      	sub	sp, #8
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
 800d85c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d00e      	beq.n	800d882 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	7d1b      	ldrb	r3, [r3, #20]
 800d868:	2b01      	cmp	r3, #1
 800d86a:	d106      	bne.n	800d87a <tcp_err+0x26>
 800d86c:	4b07      	ldr	r3, [pc, #28]	; (800d88c <tcp_err+0x38>)
 800d86e:	f640 020d 	movw	r2, #2061	; 0x80d
 800d872:	4907      	ldr	r1, [pc, #28]	; (800d890 <tcp_err+0x3c>)
 800d874:	4807      	ldr	r0, [pc, #28]	; (800d894 <tcp_err+0x40>)
 800d876:	f007 fec1 	bl	80155fc <iprintf>
    pcb->errf = err;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	683a      	ldr	r2, [r7, #0]
 800d87e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800d882:	bf00      	nop
 800d884:	3708      	adds	r7, #8
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}
 800d88a:	bf00      	nop
 800d88c:	08017b38 	.word	0x08017b38
 800d890:	08018124 	.word	0x08018124
 800d894:	08017b7c 	.word	0x08017b7c

0800d898 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800d898:	b480      	push	{r7}
 800d89a:	b085      	sub	sp, #20
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
 800d8a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d008      	beq.n	800d8ba <tcp_accept+0x22>
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	7d1b      	ldrb	r3, [r3, #20]
 800d8ac:	2b01      	cmp	r3, #1
 800d8ae:	d104      	bne.n	800d8ba <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	683a      	ldr	r2, [r7, #0]
 800d8b8:	619a      	str	r2, [r3, #24]
  }
}
 800d8ba:	bf00      	nop
 800d8bc:	3714      	adds	r7, #20
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c4:	4770      	bx	lr
	...

0800d8c8 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b084      	sub	sp, #16
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	60f8      	str	r0, [r7, #12]
 800d8d0:	60b9      	str	r1, [r7, #8]
 800d8d2:	4613      	mov	r3, r2
 800d8d4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d107      	bne.n	800d8ec <tcp_poll+0x24>
 800d8dc:	4b0e      	ldr	r3, [pc, #56]	; (800d918 <tcp_poll+0x50>)
 800d8de:	f640 023d 	movw	r2, #2109	; 0x83d
 800d8e2:	490e      	ldr	r1, [pc, #56]	; (800d91c <tcp_poll+0x54>)
 800d8e4:	480e      	ldr	r0, [pc, #56]	; (800d920 <tcp_poll+0x58>)
 800d8e6:	f007 fe89 	bl	80155fc <iprintf>
 800d8ea:	e011      	b.n	800d910 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	7d1b      	ldrb	r3, [r3, #20]
 800d8f0:	2b01      	cmp	r3, #1
 800d8f2:	d106      	bne.n	800d902 <tcp_poll+0x3a>
 800d8f4:	4b08      	ldr	r3, [pc, #32]	; (800d918 <tcp_poll+0x50>)
 800d8f6:	f640 023e 	movw	r2, #2110	; 0x83e
 800d8fa:	490a      	ldr	r1, [pc, #40]	; (800d924 <tcp_poll+0x5c>)
 800d8fc:	4808      	ldr	r0, [pc, #32]	; (800d920 <tcp_poll+0x58>)
 800d8fe:	f007 fe7d 	bl	80155fc <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	68ba      	ldr	r2, [r7, #8]
 800d906:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	79fa      	ldrb	r2, [r7, #7]
 800d90e:	775a      	strb	r2, [r3, #29]
}
 800d910:	3710      	adds	r7, #16
 800d912:	46bd      	mov	sp, r7
 800d914:	bd80      	pop	{r7, pc}
 800d916:	bf00      	nop
 800d918:	08017b38 	.word	0x08017b38
 800d91c:	0801814c 	.word	0x0801814c
 800d920:	08017b7c 	.word	0x08017b7c
 800d924:	08018164 	.word	0x08018164

0800d928 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b082      	sub	sp, #8
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d107      	bne.n	800d946 <tcp_pcb_purge+0x1e>
 800d936:	4b21      	ldr	r3, [pc, #132]	; (800d9bc <tcp_pcb_purge+0x94>)
 800d938:	f640 0251 	movw	r2, #2129	; 0x851
 800d93c:	4920      	ldr	r1, [pc, #128]	; (800d9c0 <tcp_pcb_purge+0x98>)
 800d93e:	4821      	ldr	r0, [pc, #132]	; (800d9c4 <tcp_pcb_purge+0x9c>)
 800d940:	f007 fe5c 	bl	80155fc <iprintf>
 800d944:	e037      	b.n	800d9b6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	7d1b      	ldrb	r3, [r3, #20]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d033      	beq.n	800d9b6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d952:	2b0a      	cmp	r3, #10
 800d954:	d02f      	beq.n	800d9b6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d95a:	2b01      	cmp	r3, #1
 800d95c:	d02b      	beq.n	800d9b6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d962:	2b00      	cmp	r3, #0
 800d964:	d007      	beq.n	800d976 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d96a:	4618      	mov	r0, r3
 800d96c:	f7fe f89e 	bl	800baac <pbuf_free>
      pcb->refused_data = NULL;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	2200      	movs	r2, #0
 800d974:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d002      	beq.n	800d984 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d97e:	6878      	ldr	r0, [r7, #4]
 800d980:	f000 f986 	bl	800dc90 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d98a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d990:	4618      	mov	r0, r3
 800d992:	f7ff fcf9 	bl	800d388 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d99a:	4618      	mov	r0, r3
 800d99c:	f7ff fcf4 	bl	800d388 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	66da      	str	r2, [r3, #108]	; 0x6c
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d9b6:	3708      	adds	r7, #8
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bd80      	pop	{r7, pc}
 800d9bc:	08017b38 	.word	0x08017b38
 800d9c0:	08018184 	.word	0x08018184
 800d9c4:	08017b7c 	.word	0x08017b7c

0800d9c8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b084      	sub	sp, #16
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
 800d9d0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d9d2:	683b      	ldr	r3, [r7, #0]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d106      	bne.n	800d9e6 <tcp_pcb_remove+0x1e>
 800d9d8:	4b3e      	ldr	r3, [pc, #248]	; (800dad4 <tcp_pcb_remove+0x10c>)
 800d9da:	f640 0283 	movw	r2, #2179	; 0x883
 800d9de:	493e      	ldr	r1, [pc, #248]	; (800dad8 <tcp_pcb_remove+0x110>)
 800d9e0:	483e      	ldr	r0, [pc, #248]	; (800dadc <tcp_pcb_remove+0x114>)
 800d9e2:	f007 fe0b 	bl	80155fc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d106      	bne.n	800d9fa <tcp_pcb_remove+0x32>
 800d9ec:	4b39      	ldr	r3, [pc, #228]	; (800dad4 <tcp_pcb_remove+0x10c>)
 800d9ee:	f640 0284 	movw	r2, #2180	; 0x884
 800d9f2:	493b      	ldr	r1, [pc, #236]	; (800dae0 <tcp_pcb_remove+0x118>)
 800d9f4:	4839      	ldr	r0, [pc, #228]	; (800dadc <tcp_pcb_remove+0x114>)
 800d9f6:	f007 fe01 	bl	80155fc <iprintf>

  TCP_RMV(pcblist, pcb);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	683a      	ldr	r2, [r7, #0]
 800da00:	429a      	cmp	r2, r3
 800da02:	d105      	bne.n	800da10 <tcp_pcb_remove+0x48>
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	68da      	ldr	r2, [r3, #12]
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	601a      	str	r2, [r3, #0]
 800da0e:	e013      	b.n	800da38 <tcp_pcb_remove+0x70>
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	60fb      	str	r3, [r7, #12]
 800da16:	e00c      	b.n	800da32 <tcp_pcb_remove+0x6a>
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	68db      	ldr	r3, [r3, #12]
 800da1c:	683a      	ldr	r2, [r7, #0]
 800da1e:	429a      	cmp	r2, r3
 800da20:	d104      	bne.n	800da2c <tcp_pcb_remove+0x64>
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	68da      	ldr	r2, [r3, #12]
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	60da      	str	r2, [r3, #12]
 800da2a:	e005      	b.n	800da38 <tcp_pcb_remove+0x70>
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	68db      	ldr	r3, [r3, #12]
 800da30:	60fb      	str	r3, [r7, #12]
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d1ef      	bne.n	800da18 <tcp_pcb_remove+0x50>
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	2200      	movs	r2, #0
 800da3c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800da3e:	6838      	ldr	r0, [r7, #0]
 800da40:	f7ff ff72 	bl	800d928 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	7d1b      	ldrb	r3, [r3, #20]
 800da48:	2b0a      	cmp	r3, #10
 800da4a:	d013      	beq.n	800da74 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800da50:	2b01      	cmp	r3, #1
 800da52:	d00f      	beq.n	800da74 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	8b5b      	ldrh	r3, [r3, #26]
 800da58:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d009      	beq.n	800da74 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800da60:	683b      	ldr	r3, [r7, #0]
 800da62:	8b5b      	ldrh	r3, [r3, #26]
 800da64:	f043 0302 	orr.w	r3, r3, #2
 800da68:	b29a      	uxth	r2, r3
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800da6e:	6838      	ldr	r0, [r7, #0]
 800da70:	f003 fbc2 	bl	80111f8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	7d1b      	ldrb	r3, [r3, #20]
 800da78:	2b01      	cmp	r3, #1
 800da7a:	d020      	beq.n	800dabe <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da80:	2b00      	cmp	r3, #0
 800da82:	d006      	beq.n	800da92 <tcp_pcb_remove+0xca>
 800da84:	4b13      	ldr	r3, [pc, #76]	; (800dad4 <tcp_pcb_remove+0x10c>)
 800da86:	f640 0293 	movw	r2, #2195	; 0x893
 800da8a:	4916      	ldr	r1, [pc, #88]	; (800dae4 <tcp_pcb_remove+0x11c>)
 800da8c:	4813      	ldr	r0, [pc, #76]	; (800dadc <tcp_pcb_remove+0x114>)
 800da8e:	f007 fdb5 	bl	80155fc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da96:	2b00      	cmp	r3, #0
 800da98:	d006      	beq.n	800daa8 <tcp_pcb_remove+0xe0>
 800da9a:	4b0e      	ldr	r3, [pc, #56]	; (800dad4 <tcp_pcb_remove+0x10c>)
 800da9c:	f640 0294 	movw	r2, #2196	; 0x894
 800daa0:	4911      	ldr	r1, [pc, #68]	; (800dae8 <tcp_pcb_remove+0x120>)
 800daa2:	480e      	ldr	r0, [pc, #56]	; (800dadc <tcp_pcb_remove+0x114>)
 800daa4:	f007 fdaa 	bl	80155fc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800daac:	2b00      	cmp	r3, #0
 800daae:	d006      	beq.n	800dabe <tcp_pcb_remove+0xf6>
 800dab0:	4b08      	ldr	r3, [pc, #32]	; (800dad4 <tcp_pcb_remove+0x10c>)
 800dab2:	f640 0296 	movw	r2, #2198	; 0x896
 800dab6:	490d      	ldr	r1, [pc, #52]	; (800daec <tcp_pcb_remove+0x124>)
 800dab8:	4808      	ldr	r0, [pc, #32]	; (800dadc <tcp_pcb_remove+0x114>)
 800daba:	f007 fd9f 	bl	80155fc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	2200      	movs	r2, #0
 800dac2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	2200      	movs	r2, #0
 800dac8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800daca:	bf00      	nop
 800dacc:	3710      	adds	r7, #16
 800dace:	46bd      	mov	sp, r7
 800dad0:	bd80      	pop	{r7, pc}
 800dad2:	bf00      	nop
 800dad4:	08017b38 	.word	0x08017b38
 800dad8:	080181a0 	.word	0x080181a0
 800dadc:	08017b7c 	.word	0x08017b7c
 800dae0:	080181bc 	.word	0x080181bc
 800dae4:	080181dc 	.word	0x080181dc
 800dae8:	080181f4 	.word	0x080181f4
 800daec:	08018210 	.word	0x08018210

0800daf0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b082      	sub	sp, #8
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d106      	bne.n	800db0c <tcp_next_iss+0x1c>
 800dafe:	4b0a      	ldr	r3, [pc, #40]	; (800db28 <tcp_next_iss+0x38>)
 800db00:	f640 02af 	movw	r2, #2223	; 0x8af
 800db04:	4909      	ldr	r1, [pc, #36]	; (800db2c <tcp_next_iss+0x3c>)
 800db06:	480a      	ldr	r0, [pc, #40]	; (800db30 <tcp_next_iss+0x40>)
 800db08:	f007 fd78 	bl	80155fc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800db0c:	4b09      	ldr	r3, [pc, #36]	; (800db34 <tcp_next_iss+0x44>)
 800db0e:	681a      	ldr	r2, [r3, #0]
 800db10:	4b09      	ldr	r3, [pc, #36]	; (800db38 <tcp_next_iss+0x48>)
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	4413      	add	r3, r2
 800db16:	4a07      	ldr	r2, [pc, #28]	; (800db34 <tcp_next_iss+0x44>)
 800db18:	6013      	str	r3, [r2, #0]
  return iss;
 800db1a:	4b06      	ldr	r3, [pc, #24]	; (800db34 <tcp_next_iss+0x44>)
 800db1c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800db1e:	4618      	mov	r0, r3
 800db20:	3708      	adds	r7, #8
 800db22:	46bd      	mov	sp, r7
 800db24:	bd80      	pop	{r7, pc}
 800db26:	bf00      	nop
 800db28:	08017b38 	.word	0x08017b38
 800db2c:	08018228 	.word	0x08018228
 800db30:	08017b7c 	.word	0x08017b7c
 800db34:	20000014 	.word	0x20000014
 800db38:	2000b7dc 	.word	0x2000b7dc

0800db3c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b086      	sub	sp, #24
 800db40:	af00      	add	r7, sp, #0
 800db42:	4603      	mov	r3, r0
 800db44:	60b9      	str	r1, [r7, #8]
 800db46:	607a      	str	r2, [r7, #4]
 800db48:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d106      	bne.n	800db5e <tcp_eff_send_mss_netif+0x22>
 800db50:	4b14      	ldr	r3, [pc, #80]	; (800dba4 <tcp_eff_send_mss_netif+0x68>)
 800db52:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800db56:	4914      	ldr	r1, [pc, #80]	; (800dba8 <tcp_eff_send_mss_netif+0x6c>)
 800db58:	4814      	ldr	r0, [pc, #80]	; (800dbac <tcp_eff_send_mss_netif+0x70>)
 800db5a:	f007 fd4f 	bl	80155fc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800db5e:	68bb      	ldr	r3, [r7, #8]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d101      	bne.n	800db68 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800db64:	89fb      	ldrh	r3, [r7, #14]
 800db66:	e019      	b.n	800db9c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800db6c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800db6e:	8afb      	ldrh	r3, [r7, #22]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d012      	beq.n	800db9a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800db74:	2328      	movs	r3, #40	; 0x28
 800db76:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800db78:	8afa      	ldrh	r2, [r7, #22]
 800db7a:	8abb      	ldrh	r3, [r7, #20]
 800db7c:	429a      	cmp	r2, r3
 800db7e:	d904      	bls.n	800db8a <tcp_eff_send_mss_netif+0x4e>
 800db80:	8afa      	ldrh	r2, [r7, #22]
 800db82:	8abb      	ldrh	r3, [r7, #20]
 800db84:	1ad3      	subs	r3, r2, r3
 800db86:	b29b      	uxth	r3, r3
 800db88:	e000      	b.n	800db8c <tcp_eff_send_mss_netif+0x50>
 800db8a:	2300      	movs	r3, #0
 800db8c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800db8e:	8a7a      	ldrh	r2, [r7, #18]
 800db90:	89fb      	ldrh	r3, [r7, #14]
 800db92:	4293      	cmp	r3, r2
 800db94:	bf28      	it	cs
 800db96:	4613      	movcs	r3, r2
 800db98:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800db9a:	89fb      	ldrh	r3, [r7, #14]
}
 800db9c:	4618      	mov	r0, r3
 800db9e:	3718      	adds	r7, #24
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}
 800dba4:	08017b38 	.word	0x08017b38
 800dba8:	08018244 	.word	0x08018244
 800dbac:	08017b7c 	.word	0x08017b7c

0800dbb0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b084      	sub	sp, #16
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
 800dbb8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d119      	bne.n	800dbf8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800dbc4:	4b10      	ldr	r3, [pc, #64]	; (800dc08 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800dbc6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800dbca:	4910      	ldr	r1, [pc, #64]	; (800dc0c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800dbcc:	4810      	ldr	r0, [pc, #64]	; (800dc10 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800dbce:	f007 fd15 	bl	80155fc <iprintf>

  while (pcb != NULL) {
 800dbd2:	e011      	b.n	800dbf8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	681a      	ldr	r2, [r3, #0]
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	429a      	cmp	r2, r3
 800dbde:	d108      	bne.n	800dbf2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	68db      	ldr	r3, [r3, #12]
 800dbe4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800dbe6:	68f8      	ldr	r0, [r7, #12]
 800dbe8:	f7fe fd50 	bl	800c68c <tcp_abort>
      pcb = next;
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	60fb      	str	r3, [r7, #12]
 800dbf0:	e002      	b.n	800dbf8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	68db      	ldr	r3, [r3, #12]
 800dbf6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d1ea      	bne.n	800dbd4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800dbfe:	bf00      	nop
 800dc00:	bf00      	nop
 800dc02:	3710      	adds	r7, #16
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}
 800dc08:	08017b38 	.word	0x08017b38
 800dc0c:	0801826c 	.word	0x0801826c
 800dc10:	08017b7c 	.word	0x08017b7c

0800dc14 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b084      	sub	sp, #16
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
 800dc1c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d02a      	beq.n	800dc7a <tcp_netif_ip_addr_changed+0x66>
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d026      	beq.n	800dc7a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800dc2c:	4b15      	ldr	r3, [pc, #84]	; (800dc84 <tcp_netif_ip_addr_changed+0x70>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	4619      	mov	r1, r3
 800dc32:	6878      	ldr	r0, [r7, #4]
 800dc34:	f7ff ffbc 	bl	800dbb0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800dc38:	4b13      	ldr	r3, [pc, #76]	; (800dc88 <tcp_netif_ip_addr_changed+0x74>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	4619      	mov	r1, r3
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	f7ff ffb6 	bl	800dbb0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800dc44:	683b      	ldr	r3, [r7, #0]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d017      	beq.n	800dc7a <tcp_netif_ip_addr_changed+0x66>
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d013      	beq.n	800dc7a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dc52:	4b0e      	ldr	r3, [pc, #56]	; (800dc8c <tcp_netif_ip_addr_changed+0x78>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	60fb      	str	r3, [r7, #12]
 800dc58:	e00c      	b.n	800dc74 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	681a      	ldr	r2, [r3, #0]
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	429a      	cmp	r2, r3
 800dc64:	d103      	bne.n	800dc6e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	681a      	ldr	r2, [r3, #0]
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	68db      	ldr	r3, [r3, #12]
 800dc72:	60fb      	str	r3, [r7, #12]
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d1ef      	bne.n	800dc5a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800dc7a:	bf00      	nop
 800dc7c:	3710      	adds	r7, #16
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}
 800dc82:	bf00      	nop
 800dc84:	2000b7d8 	.word	0x2000b7d8
 800dc88:	2000b7e4 	.word	0x2000b7e4
 800dc8c:	2000b7e0 	.word	0x2000b7e0

0800dc90 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b082      	sub	sp, #8
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d007      	beq.n	800dcb0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dca4:	4618      	mov	r0, r3
 800dca6:	f7ff fb6f 	bl	800d388 <tcp_segs_free>
    pcb->ooseq = NULL;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2200      	movs	r2, #0
 800dcae:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800dcb0:	bf00      	nop
 800dcb2:	3708      	adds	r7, #8
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}

0800dcb8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800dcb8:	b590      	push	{r4, r7, lr}
 800dcba:	b08d      	sub	sp, #52	; 0x34
 800dcbc:	af04      	add	r7, sp, #16
 800dcbe:	6078      	str	r0, [r7, #4]
 800dcc0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d105      	bne.n	800dcd4 <tcp_input+0x1c>
 800dcc8:	4b9b      	ldr	r3, [pc, #620]	; (800df38 <tcp_input+0x280>)
 800dcca:	2283      	movs	r2, #131	; 0x83
 800dccc:	499b      	ldr	r1, [pc, #620]	; (800df3c <tcp_input+0x284>)
 800dcce:	489c      	ldr	r0, [pc, #624]	; (800df40 <tcp_input+0x288>)
 800dcd0:	f007 fc94 	bl	80155fc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	685b      	ldr	r3, [r3, #4]
 800dcd8:	4a9a      	ldr	r2, [pc, #616]	; (800df44 <tcp_input+0x28c>)
 800dcda:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	895b      	ldrh	r3, [r3, #10]
 800dce0:	2b13      	cmp	r3, #19
 800dce2:	f240 83c4 	bls.w	800e46e <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800dce6:	4b98      	ldr	r3, [pc, #608]	; (800df48 <tcp_input+0x290>)
 800dce8:	695b      	ldr	r3, [r3, #20]
 800dcea:	4a97      	ldr	r2, [pc, #604]	; (800df48 <tcp_input+0x290>)
 800dcec:	6812      	ldr	r2, [r2, #0]
 800dcee:	4611      	mov	r1, r2
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f006 f9e1 	bl	80140b8 <ip4_addr_isbroadcast_u32>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	f040 83ba 	bne.w	800e472 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800dcfe:	4b92      	ldr	r3, [pc, #584]	; (800df48 <tcp_input+0x290>)
 800dd00:	695b      	ldr	r3, [r3, #20]
 800dd02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800dd06:	2be0      	cmp	r3, #224	; 0xe0
 800dd08:	f000 83b3 	beq.w	800e472 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800dd0c:	4b8d      	ldr	r3, [pc, #564]	; (800df44 <tcp_input+0x28c>)
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	899b      	ldrh	r3, [r3, #12]
 800dd12:	b29b      	uxth	r3, r3
 800dd14:	4618      	mov	r0, r3
 800dd16:	f7fc fb1d 	bl	800a354 <lwip_htons>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	0b1b      	lsrs	r3, r3, #12
 800dd1e:	b29b      	uxth	r3, r3
 800dd20:	b2db      	uxtb	r3, r3
 800dd22:	009b      	lsls	r3, r3, #2
 800dd24:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800dd26:	7cbb      	ldrb	r3, [r7, #18]
 800dd28:	2b13      	cmp	r3, #19
 800dd2a:	f240 83a4 	bls.w	800e476 <tcp_input+0x7be>
 800dd2e:	7cbb      	ldrb	r3, [r7, #18]
 800dd30:	b29a      	uxth	r2, r3
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	891b      	ldrh	r3, [r3, #8]
 800dd36:	429a      	cmp	r2, r3
 800dd38:	f200 839d 	bhi.w	800e476 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800dd3c:	7cbb      	ldrb	r3, [r7, #18]
 800dd3e:	b29b      	uxth	r3, r3
 800dd40:	3b14      	subs	r3, #20
 800dd42:	b29a      	uxth	r2, r3
 800dd44:	4b81      	ldr	r3, [pc, #516]	; (800df4c <tcp_input+0x294>)
 800dd46:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800dd48:	4b81      	ldr	r3, [pc, #516]	; (800df50 <tcp_input+0x298>)
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	895a      	ldrh	r2, [r3, #10]
 800dd52:	7cbb      	ldrb	r3, [r7, #18]
 800dd54:	b29b      	uxth	r3, r3
 800dd56:	429a      	cmp	r2, r3
 800dd58:	d309      	bcc.n	800dd6e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800dd5a:	4b7c      	ldr	r3, [pc, #496]	; (800df4c <tcp_input+0x294>)
 800dd5c:	881a      	ldrh	r2, [r3, #0]
 800dd5e:	4b7d      	ldr	r3, [pc, #500]	; (800df54 <tcp_input+0x29c>)
 800dd60:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800dd62:	7cbb      	ldrb	r3, [r7, #18]
 800dd64:	4619      	mov	r1, r3
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f7fd fe1a 	bl	800b9a0 <pbuf_remove_header>
 800dd6c:	e04e      	b.n	800de0c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d105      	bne.n	800dd82 <tcp_input+0xca>
 800dd76:	4b70      	ldr	r3, [pc, #448]	; (800df38 <tcp_input+0x280>)
 800dd78:	22c2      	movs	r2, #194	; 0xc2
 800dd7a:	4977      	ldr	r1, [pc, #476]	; (800df58 <tcp_input+0x2a0>)
 800dd7c:	4870      	ldr	r0, [pc, #448]	; (800df40 <tcp_input+0x288>)
 800dd7e:	f007 fc3d 	bl	80155fc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800dd82:	2114      	movs	r1, #20
 800dd84:	6878      	ldr	r0, [r7, #4]
 800dd86:	f7fd fe0b 	bl	800b9a0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	895a      	ldrh	r2, [r3, #10]
 800dd8e:	4b71      	ldr	r3, [pc, #452]	; (800df54 <tcp_input+0x29c>)
 800dd90:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800dd92:	4b6e      	ldr	r3, [pc, #440]	; (800df4c <tcp_input+0x294>)
 800dd94:	881a      	ldrh	r2, [r3, #0]
 800dd96:	4b6f      	ldr	r3, [pc, #444]	; (800df54 <tcp_input+0x29c>)
 800dd98:	881b      	ldrh	r3, [r3, #0]
 800dd9a:	1ad3      	subs	r3, r2, r3
 800dd9c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800dd9e:	4b6d      	ldr	r3, [pc, #436]	; (800df54 <tcp_input+0x29c>)
 800dda0:	881b      	ldrh	r3, [r3, #0]
 800dda2:	4619      	mov	r1, r3
 800dda4:	6878      	ldr	r0, [r7, #4]
 800dda6:	f7fd fdfb 	bl	800b9a0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	895b      	ldrh	r3, [r3, #10]
 800ddb0:	8a3a      	ldrh	r2, [r7, #16]
 800ddb2:	429a      	cmp	r2, r3
 800ddb4:	f200 8361 	bhi.w	800e47a <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	685b      	ldr	r3, [r3, #4]
 800ddbe:	4a64      	ldr	r2, [pc, #400]	; (800df50 <tcp_input+0x298>)
 800ddc0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	8a3a      	ldrh	r2, [r7, #16]
 800ddc8:	4611      	mov	r1, r2
 800ddca:	4618      	mov	r0, r3
 800ddcc:	f7fd fde8 	bl	800b9a0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	891a      	ldrh	r2, [r3, #8]
 800ddd4:	8a3b      	ldrh	r3, [r7, #16]
 800ddd6:	1ad3      	subs	r3, r2, r3
 800ddd8:	b29a      	uxth	r2, r3
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	895b      	ldrh	r3, [r3, #10]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d005      	beq.n	800ddf2 <tcp_input+0x13a>
 800dde6:	4b54      	ldr	r3, [pc, #336]	; (800df38 <tcp_input+0x280>)
 800dde8:	22df      	movs	r2, #223	; 0xdf
 800ddea:	495c      	ldr	r1, [pc, #368]	; (800df5c <tcp_input+0x2a4>)
 800ddec:	4854      	ldr	r0, [pc, #336]	; (800df40 <tcp_input+0x288>)
 800ddee:	f007 fc05 	bl	80155fc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	891a      	ldrh	r2, [r3, #8]
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	891b      	ldrh	r3, [r3, #8]
 800ddfc:	429a      	cmp	r2, r3
 800ddfe:	d005      	beq.n	800de0c <tcp_input+0x154>
 800de00:	4b4d      	ldr	r3, [pc, #308]	; (800df38 <tcp_input+0x280>)
 800de02:	22e0      	movs	r2, #224	; 0xe0
 800de04:	4956      	ldr	r1, [pc, #344]	; (800df60 <tcp_input+0x2a8>)
 800de06:	484e      	ldr	r0, [pc, #312]	; (800df40 <tcp_input+0x288>)
 800de08:	f007 fbf8 	bl	80155fc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800de0c:	4b4d      	ldr	r3, [pc, #308]	; (800df44 <tcp_input+0x28c>)
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	881b      	ldrh	r3, [r3, #0]
 800de12:	b29b      	uxth	r3, r3
 800de14:	4a4b      	ldr	r2, [pc, #300]	; (800df44 <tcp_input+0x28c>)
 800de16:	6814      	ldr	r4, [r2, #0]
 800de18:	4618      	mov	r0, r3
 800de1a:	f7fc fa9b 	bl	800a354 <lwip_htons>
 800de1e:	4603      	mov	r3, r0
 800de20:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800de22:	4b48      	ldr	r3, [pc, #288]	; (800df44 <tcp_input+0x28c>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	885b      	ldrh	r3, [r3, #2]
 800de28:	b29b      	uxth	r3, r3
 800de2a:	4a46      	ldr	r2, [pc, #280]	; (800df44 <tcp_input+0x28c>)
 800de2c:	6814      	ldr	r4, [r2, #0]
 800de2e:	4618      	mov	r0, r3
 800de30:	f7fc fa90 	bl	800a354 <lwip_htons>
 800de34:	4603      	mov	r3, r0
 800de36:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800de38:	4b42      	ldr	r3, [pc, #264]	; (800df44 <tcp_input+0x28c>)
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	685b      	ldr	r3, [r3, #4]
 800de3e:	4a41      	ldr	r2, [pc, #260]	; (800df44 <tcp_input+0x28c>)
 800de40:	6814      	ldr	r4, [r2, #0]
 800de42:	4618      	mov	r0, r3
 800de44:	f7fc fa9b 	bl	800a37e <lwip_htonl>
 800de48:	4603      	mov	r3, r0
 800de4a:	6063      	str	r3, [r4, #4]
 800de4c:	6863      	ldr	r3, [r4, #4]
 800de4e:	4a45      	ldr	r2, [pc, #276]	; (800df64 <tcp_input+0x2ac>)
 800de50:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800de52:	4b3c      	ldr	r3, [pc, #240]	; (800df44 <tcp_input+0x28c>)
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	689b      	ldr	r3, [r3, #8]
 800de58:	4a3a      	ldr	r2, [pc, #232]	; (800df44 <tcp_input+0x28c>)
 800de5a:	6814      	ldr	r4, [r2, #0]
 800de5c:	4618      	mov	r0, r3
 800de5e:	f7fc fa8e 	bl	800a37e <lwip_htonl>
 800de62:	4603      	mov	r3, r0
 800de64:	60a3      	str	r3, [r4, #8]
 800de66:	68a3      	ldr	r3, [r4, #8]
 800de68:	4a3f      	ldr	r2, [pc, #252]	; (800df68 <tcp_input+0x2b0>)
 800de6a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800de6c:	4b35      	ldr	r3, [pc, #212]	; (800df44 <tcp_input+0x28c>)
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	89db      	ldrh	r3, [r3, #14]
 800de72:	b29b      	uxth	r3, r3
 800de74:	4a33      	ldr	r2, [pc, #204]	; (800df44 <tcp_input+0x28c>)
 800de76:	6814      	ldr	r4, [r2, #0]
 800de78:	4618      	mov	r0, r3
 800de7a:	f7fc fa6b 	bl	800a354 <lwip_htons>
 800de7e:	4603      	mov	r3, r0
 800de80:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800de82:	4b30      	ldr	r3, [pc, #192]	; (800df44 <tcp_input+0x28c>)
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	899b      	ldrh	r3, [r3, #12]
 800de88:	b29b      	uxth	r3, r3
 800de8a:	4618      	mov	r0, r3
 800de8c:	f7fc fa62 	bl	800a354 <lwip_htons>
 800de90:	4603      	mov	r3, r0
 800de92:	b2db      	uxtb	r3, r3
 800de94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800de98:	b2da      	uxtb	r2, r3
 800de9a:	4b34      	ldr	r3, [pc, #208]	; (800df6c <tcp_input+0x2b4>)
 800de9c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	891a      	ldrh	r2, [r3, #8]
 800dea2:	4b33      	ldr	r3, [pc, #204]	; (800df70 <tcp_input+0x2b8>)
 800dea4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800dea6:	4b31      	ldr	r3, [pc, #196]	; (800df6c <tcp_input+0x2b4>)
 800dea8:	781b      	ldrb	r3, [r3, #0]
 800deaa:	f003 0303 	and.w	r3, r3, #3
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d00c      	beq.n	800decc <tcp_input+0x214>
    tcplen++;
 800deb2:	4b2f      	ldr	r3, [pc, #188]	; (800df70 <tcp_input+0x2b8>)
 800deb4:	881b      	ldrh	r3, [r3, #0]
 800deb6:	3301      	adds	r3, #1
 800deb8:	b29a      	uxth	r2, r3
 800deba:	4b2d      	ldr	r3, [pc, #180]	; (800df70 <tcp_input+0x2b8>)
 800debc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	891a      	ldrh	r2, [r3, #8]
 800dec2:	4b2b      	ldr	r3, [pc, #172]	; (800df70 <tcp_input+0x2b8>)
 800dec4:	881b      	ldrh	r3, [r3, #0]
 800dec6:	429a      	cmp	r2, r3
 800dec8:	f200 82d9 	bhi.w	800e47e <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800decc:	2300      	movs	r3, #0
 800dece:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ded0:	4b28      	ldr	r3, [pc, #160]	; (800df74 <tcp_input+0x2bc>)
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	61fb      	str	r3, [r7, #28]
 800ded6:	e09d      	b.n	800e014 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ded8:	69fb      	ldr	r3, [r7, #28]
 800deda:	7d1b      	ldrb	r3, [r3, #20]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d105      	bne.n	800deec <tcp_input+0x234>
 800dee0:	4b15      	ldr	r3, [pc, #84]	; (800df38 <tcp_input+0x280>)
 800dee2:	22fb      	movs	r2, #251	; 0xfb
 800dee4:	4924      	ldr	r1, [pc, #144]	; (800df78 <tcp_input+0x2c0>)
 800dee6:	4816      	ldr	r0, [pc, #88]	; (800df40 <tcp_input+0x288>)
 800dee8:	f007 fb88 	bl	80155fc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800deec:	69fb      	ldr	r3, [r7, #28]
 800deee:	7d1b      	ldrb	r3, [r3, #20]
 800def0:	2b0a      	cmp	r3, #10
 800def2:	d105      	bne.n	800df00 <tcp_input+0x248>
 800def4:	4b10      	ldr	r3, [pc, #64]	; (800df38 <tcp_input+0x280>)
 800def6:	22fc      	movs	r2, #252	; 0xfc
 800def8:	4920      	ldr	r1, [pc, #128]	; (800df7c <tcp_input+0x2c4>)
 800defa:	4811      	ldr	r0, [pc, #68]	; (800df40 <tcp_input+0x288>)
 800defc:	f007 fb7e 	bl	80155fc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800df00:	69fb      	ldr	r3, [r7, #28]
 800df02:	7d1b      	ldrb	r3, [r3, #20]
 800df04:	2b01      	cmp	r3, #1
 800df06:	d105      	bne.n	800df14 <tcp_input+0x25c>
 800df08:	4b0b      	ldr	r3, [pc, #44]	; (800df38 <tcp_input+0x280>)
 800df0a:	22fd      	movs	r2, #253	; 0xfd
 800df0c:	491c      	ldr	r1, [pc, #112]	; (800df80 <tcp_input+0x2c8>)
 800df0e:	480c      	ldr	r0, [pc, #48]	; (800df40 <tcp_input+0x288>)
 800df10:	f007 fb74 	bl	80155fc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800df14:	69fb      	ldr	r3, [r7, #28]
 800df16:	7a1b      	ldrb	r3, [r3, #8]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d033      	beq.n	800df84 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800df1c:	69fb      	ldr	r3, [r7, #28]
 800df1e:	7a1a      	ldrb	r2, [r3, #8]
 800df20:	4b09      	ldr	r3, [pc, #36]	; (800df48 <tcp_input+0x290>)
 800df22:	685b      	ldr	r3, [r3, #4]
 800df24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800df28:	3301      	adds	r3, #1
 800df2a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800df2c:	429a      	cmp	r2, r3
 800df2e:	d029      	beq.n	800df84 <tcp_input+0x2cc>
      prev = pcb;
 800df30:	69fb      	ldr	r3, [r7, #28]
 800df32:	61bb      	str	r3, [r7, #24]
      continue;
 800df34:	e06b      	b.n	800e00e <tcp_input+0x356>
 800df36:	bf00      	nop
 800df38:	080182a0 	.word	0x080182a0
 800df3c:	080182d4 	.word	0x080182d4
 800df40:	080182ec 	.word	0x080182ec
 800df44:	20004ae0 	.word	0x20004ae0
 800df48:	200080c4 	.word	0x200080c4
 800df4c:	20004ae4 	.word	0x20004ae4
 800df50:	20004ae8 	.word	0x20004ae8
 800df54:	20004ae6 	.word	0x20004ae6
 800df58:	08018314 	.word	0x08018314
 800df5c:	08018324 	.word	0x08018324
 800df60:	08018330 	.word	0x08018330
 800df64:	20004af0 	.word	0x20004af0
 800df68:	20004af4 	.word	0x20004af4
 800df6c:	20004afc 	.word	0x20004afc
 800df70:	20004afa 	.word	0x20004afa
 800df74:	2000b7d8 	.word	0x2000b7d8
 800df78:	08018350 	.word	0x08018350
 800df7c:	08018378 	.word	0x08018378
 800df80:	080183a4 	.word	0x080183a4
    }

    if (pcb->remote_port == tcphdr->src &&
 800df84:	69fb      	ldr	r3, [r7, #28]
 800df86:	8b1a      	ldrh	r2, [r3, #24]
 800df88:	4b94      	ldr	r3, [pc, #592]	; (800e1dc <tcp_input+0x524>)
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	881b      	ldrh	r3, [r3, #0]
 800df8e:	b29b      	uxth	r3, r3
 800df90:	429a      	cmp	r2, r3
 800df92:	d13a      	bne.n	800e00a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800df94:	69fb      	ldr	r3, [r7, #28]
 800df96:	8ada      	ldrh	r2, [r3, #22]
 800df98:	4b90      	ldr	r3, [pc, #576]	; (800e1dc <tcp_input+0x524>)
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	885b      	ldrh	r3, [r3, #2]
 800df9e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800dfa0:	429a      	cmp	r2, r3
 800dfa2:	d132      	bne.n	800e00a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dfa4:	69fb      	ldr	r3, [r7, #28]
 800dfa6:	685a      	ldr	r2, [r3, #4]
 800dfa8:	4b8d      	ldr	r3, [pc, #564]	; (800e1e0 <tcp_input+0x528>)
 800dfaa:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800dfac:	429a      	cmp	r2, r3
 800dfae:	d12c      	bne.n	800e00a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dfb0:	69fb      	ldr	r3, [r7, #28]
 800dfb2:	681a      	ldr	r2, [r3, #0]
 800dfb4:	4b8a      	ldr	r3, [pc, #552]	; (800e1e0 <tcp_input+0x528>)
 800dfb6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dfb8:	429a      	cmp	r2, r3
 800dfba:	d126      	bne.n	800e00a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800dfbc:	69fb      	ldr	r3, [r7, #28]
 800dfbe:	68db      	ldr	r3, [r3, #12]
 800dfc0:	69fa      	ldr	r2, [r7, #28]
 800dfc2:	429a      	cmp	r2, r3
 800dfc4:	d106      	bne.n	800dfd4 <tcp_input+0x31c>
 800dfc6:	4b87      	ldr	r3, [pc, #540]	; (800e1e4 <tcp_input+0x52c>)
 800dfc8:	f240 120d 	movw	r2, #269	; 0x10d
 800dfcc:	4986      	ldr	r1, [pc, #536]	; (800e1e8 <tcp_input+0x530>)
 800dfce:	4887      	ldr	r0, [pc, #540]	; (800e1ec <tcp_input+0x534>)
 800dfd0:	f007 fb14 	bl	80155fc <iprintf>
      if (prev != NULL) {
 800dfd4:	69bb      	ldr	r3, [r7, #24]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d00a      	beq.n	800dff0 <tcp_input+0x338>
        prev->next = pcb->next;
 800dfda:	69fb      	ldr	r3, [r7, #28]
 800dfdc:	68da      	ldr	r2, [r3, #12]
 800dfde:	69bb      	ldr	r3, [r7, #24]
 800dfe0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800dfe2:	4b83      	ldr	r3, [pc, #524]	; (800e1f0 <tcp_input+0x538>)
 800dfe4:	681a      	ldr	r2, [r3, #0]
 800dfe6:	69fb      	ldr	r3, [r7, #28]
 800dfe8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800dfea:	4a81      	ldr	r2, [pc, #516]	; (800e1f0 <tcp_input+0x538>)
 800dfec:	69fb      	ldr	r3, [r7, #28]
 800dfee:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800dff0:	69fb      	ldr	r3, [r7, #28]
 800dff2:	68db      	ldr	r3, [r3, #12]
 800dff4:	69fa      	ldr	r2, [r7, #28]
 800dff6:	429a      	cmp	r2, r3
 800dff8:	d111      	bne.n	800e01e <tcp_input+0x366>
 800dffa:	4b7a      	ldr	r3, [pc, #488]	; (800e1e4 <tcp_input+0x52c>)
 800dffc:	f240 1215 	movw	r2, #277	; 0x115
 800e000:	497c      	ldr	r1, [pc, #496]	; (800e1f4 <tcp_input+0x53c>)
 800e002:	487a      	ldr	r0, [pc, #488]	; (800e1ec <tcp_input+0x534>)
 800e004:	f007 fafa 	bl	80155fc <iprintf>
      break;
 800e008:	e009      	b.n	800e01e <tcp_input+0x366>
    }
    prev = pcb;
 800e00a:	69fb      	ldr	r3, [r7, #28]
 800e00c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e00e:	69fb      	ldr	r3, [r7, #28]
 800e010:	68db      	ldr	r3, [r3, #12]
 800e012:	61fb      	str	r3, [r7, #28]
 800e014:	69fb      	ldr	r3, [r7, #28]
 800e016:	2b00      	cmp	r3, #0
 800e018:	f47f af5e 	bne.w	800ded8 <tcp_input+0x220>
 800e01c:	e000      	b.n	800e020 <tcp_input+0x368>
      break;
 800e01e:	bf00      	nop
  }

  if (pcb == NULL) {
 800e020:	69fb      	ldr	r3, [r7, #28]
 800e022:	2b00      	cmp	r3, #0
 800e024:	f040 8095 	bne.w	800e152 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e028:	4b73      	ldr	r3, [pc, #460]	; (800e1f8 <tcp_input+0x540>)
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	61fb      	str	r3, [r7, #28]
 800e02e:	e03f      	b.n	800e0b0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e030:	69fb      	ldr	r3, [r7, #28]
 800e032:	7d1b      	ldrb	r3, [r3, #20]
 800e034:	2b0a      	cmp	r3, #10
 800e036:	d006      	beq.n	800e046 <tcp_input+0x38e>
 800e038:	4b6a      	ldr	r3, [pc, #424]	; (800e1e4 <tcp_input+0x52c>)
 800e03a:	f240 121f 	movw	r2, #287	; 0x11f
 800e03e:	496f      	ldr	r1, [pc, #444]	; (800e1fc <tcp_input+0x544>)
 800e040:	486a      	ldr	r0, [pc, #424]	; (800e1ec <tcp_input+0x534>)
 800e042:	f007 fadb 	bl	80155fc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e046:	69fb      	ldr	r3, [r7, #28]
 800e048:	7a1b      	ldrb	r3, [r3, #8]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d009      	beq.n	800e062 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e04e:	69fb      	ldr	r3, [r7, #28]
 800e050:	7a1a      	ldrb	r2, [r3, #8]
 800e052:	4b63      	ldr	r3, [pc, #396]	; (800e1e0 <tcp_input+0x528>)
 800e054:	685b      	ldr	r3, [r3, #4]
 800e056:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e05a:	3301      	adds	r3, #1
 800e05c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e05e:	429a      	cmp	r2, r3
 800e060:	d122      	bne.n	800e0a8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e062:	69fb      	ldr	r3, [r7, #28]
 800e064:	8b1a      	ldrh	r2, [r3, #24]
 800e066:	4b5d      	ldr	r3, [pc, #372]	; (800e1dc <tcp_input+0x524>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	881b      	ldrh	r3, [r3, #0]
 800e06c:	b29b      	uxth	r3, r3
 800e06e:	429a      	cmp	r2, r3
 800e070:	d11b      	bne.n	800e0aa <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e072:	69fb      	ldr	r3, [r7, #28]
 800e074:	8ada      	ldrh	r2, [r3, #22]
 800e076:	4b59      	ldr	r3, [pc, #356]	; (800e1dc <tcp_input+0x524>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	885b      	ldrh	r3, [r3, #2]
 800e07c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e07e:	429a      	cmp	r2, r3
 800e080:	d113      	bne.n	800e0aa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e082:	69fb      	ldr	r3, [r7, #28]
 800e084:	685a      	ldr	r2, [r3, #4]
 800e086:	4b56      	ldr	r3, [pc, #344]	; (800e1e0 <tcp_input+0x528>)
 800e088:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e08a:	429a      	cmp	r2, r3
 800e08c:	d10d      	bne.n	800e0aa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e08e:	69fb      	ldr	r3, [r7, #28]
 800e090:	681a      	ldr	r2, [r3, #0]
 800e092:	4b53      	ldr	r3, [pc, #332]	; (800e1e0 <tcp_input+0x528>)
 800e094:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e096:	429a      	cmp	r2, r3
 800e098:	d107      	bne.n	800e0aa <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e09a:	69f8      	ldr	r0, [r7, #28]
 800e09c:	f000 fb54 	bl	800e748 <tcp_timewait_input>
        }
        pbuf_free(p);
 800e0a0:	6878      	ldr	r0, [r7, #4]
 800e0a2:	f7fd fd03 	bl	800baac <pbuf_free>
        return;
 800e0a6:	e1f0      	b.n	800e48a <tcp_input+0x7d2>
        continue;
 800e0a8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e0aa:	69fb      	ldr	r3, [r7, #28]
 800e0ac:	68db      	ldr	r3, [r3, #12]
 800e0ae:	61fb      	str	r3, [r7, #28]
 800e0b0:	69fb      	ldr	r3, [r7, #28]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d1bc      	bne.n	800e030 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e0ba:	4b51      	ldr	r3, [pc, #324]	; (800e200 <tcp_input+0x548>)
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	617b      	str	r3, [r7, #20]
 800e0c0:	e02a      	b.n	800e118 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e0c2:	697b      	ldr	r3, [r7, #20]
 800e0c4:	7a1b      	ldrb	r3, [r3, #8]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d00c      	beq.n	800e0e4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e0ca:	697b      	ldr	r3, [r7, #20]
 800e0cc:	7a1a      	ldrb	r2, [r3, #8]
 800e0ce:	4b44      	ldr	r3, [pc, #272]	; (800e1e0 <tcp_input+0x528>)
 800e0d0:	685b      	ldr	r3, [r3, #4]
 800e0d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e0d6:	3301      	adds	r3, #1
 800e0d8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e0da:	429a      	cmp	r2, r3
 800e0dc:	d002      	beq.n	800e0e4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e0de:	697b      	ldr	r3, [r7, #20]
 800e0e0:	61bb      	str	r3, [r7, #24]
        continue;
 800e0e2:	e016      	b.n	800e112 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e0e4:	697b      	ldr	r3, [r7, #20]
 800e0e6:	8ada      	ldrh	r2, [r3, #22]
 800e0e8:	4b3c      	ldr	r3, [pc, #240]	; (800e1dc <tcp_input+0x524>)
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	885b      	ldrh	r3, [r3, #2]
 800e0ee:	b29b      	uxth	r3, r3
 800e0f0:	429a      	cmp	r2, r3
 800e0f2:	d10c      	bne.n	800e10e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e0f4:	697b      	ldr	r3, [r7, #20]
 800e0f6:	681a      	ldr	r2, [r3, #0]
 800e0f8:	4b39      	ldr	r3, [pc, #228]	; (800e1e0 <tcp_input+0x528>)
 800e0fa:	695b      	ldr	r3, [r3, #20]
 800e0fc:	429a      	cmp	r2, r3
 800e0fe:	d00f      	beq.n	800e120 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e100:	697b      	ldr	r3, [r7, #20]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d00d      	beq.n	800e122 <tcp_input+0x46a>
 800e106:	697b      	ldr	r3, [r7, #20]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d009      	beq.n	800e122 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e10e:	697b      	ldr	r3, [r7, #20]
 800e110:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	68db      	ldr	r3, [r3, #12]
 800e116:	617b      	str	r3, [r7, #20]
 800e118:	697b      	ldr	r3, [r7, #20]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d1d1      	bne.n	800e0c2 <tcp_input+0x40a>
 800e11e:	e000      	b.n	800e122 <tcp_input+0x46a>
            break;
 800e120:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e122:	697b      	ldr	r3, [r7, #20]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d014      	beq.n	800e152 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e128:	69bb      	ldr	r3, [r7, #24]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d00a      	beq.n	800e144 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e12e:	697b      	ldr	r3, [r7, #20]
 800e130:	68da      	ldr	r2, [r3, #12]
 800e132:	69bb      	ldr	r3, [r7, #24]
 800e134:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e136:	4b32      	ldr	r3, [pc, #200]	; (800e200 <tcp_input+0x548>)
 800e138:	681a      	ldr	r2, [r3, #0]
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e13e:	4a30      	ldr	r2, [pc, #192]	; (800e200 <tcp_input+0x548>)
 800e140:	697b      	ldr	r3, [r7, #20]
 800e142:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e144:	6978      	ldr	r0, [r7, #20]
 800e146:	f000 fa01 	bl	800e54c <tcp_listen_input>
      }
      pbuf_free(p);
 800e14a:	6878      	ldr	r0, [r7, #4]
 800e14c:	f7fd fcae 	bl	800baac <pbuf_free>
      return;
 800e150:	e19b      	b.n	800e48a <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e152:	69fb      	ldr	r3, [r7, #28]
 800e154:	2b00      	cmp	r3, #0
 800e156:	f000 8160 	beq.w	800e41a <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e15a:	4b2a      	ldr	r3, [pc, #168]	; (800e204 <tcp_input+0x54c>)
 800e15c:	2200      	movs	r2, #0
 800e15e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	891a      	ldrh	r2, [r3, #8]
 800e164:	4b27      	ldr	r3, [pc, #156]	; (800e204 <tcp_input+0x54c>)
 800e166:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e168:	4a26      	ldr	r2, [pc, #152]	; (800e204 <tcp_input+0x54c>)
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e16e:	4b1b      	ldr	r3, [pc, #108]	; (800e1dc <tcp_input+0x524>)
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	4a24      	ldr	r2, [pc, #144]	; (800e204 <tcp_input+0x54c>)
 800e174:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e176:	4b24      	ldr	r3, [pc, #144]	; (800e208 <tcp_input+0x550>)
 800e178:	2200      	movs	r2, #0
 800e17a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e17c:	4b23      	ldr	r3, [pc, #140]	; (800e20c <tcp_input+0x554>)
 800e17e:	2200      	movs	r2, #0
 800e180:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e182:	4b23      	ldr	r3, [pc, #140]	; (800e210 <tcp_input+0x558>)
 800e184:	2200      	movs	r2, #0
 800e186:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e188:	4b22      	ldr	r3, [pc, #136]	; (800e214 <tcp_input+0x55c>)
 800e18a:	781b      	ldrb	r3, [r3, #0]
 800e18c:	f003 0308 	and.w	r3, r3, #8
 800e190:	2b00      	cmp	r3, #0
 800e192:	d006      	beq.n	800e1a2 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	7b5b      	ldrb	r3, [r3, #13]
 800e198:	f043 0301 	orr.w	r3, r3, #1
 800e19c:	b2da      	uxtb	r2, r3
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e1a2:	69fb      	ldr	r3, [r7, #28]
 800e1a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d038      	beq.n	800e21c <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e1aa:	69f8      	ldr	r0, [r7, #28]
 800e1ac:	f7ff f870 	bl	800d290 <tcp_process_refused_data>
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	f113 0f0d 	cmn.w	r3, #13
 800e1b6:	d007      	beq.n	800e1c8 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e1b8:	69fb      	ldr	r3, [r7, #28]
 800e1ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d02d      	beq.n	800e21c <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e1c0:	4b15      	ldr	r3, [pc, #84]	; (800e218 <tcp_input+0x560>)
 800e1c2:	881b      	ldrh	r3, [r3, #0]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d029      	beq.n	800e21c <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e1c8:	69fb      	ldr	r3, [r7, #28]
 800e1ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	f040 8104 	bne.w	800e3da <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e1d2:	69f8      	ldr	r0, [r7, #28]
 800e1d4:	f003 fe16 	bl	8011e04 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e1d8:	e0ff      	b.n	800e3da <tcp_input+0x722>
 800e1da:	bf00      	nop
 800e1dc:	20004ae0 	.word	0x20004ae0
 800e1e0:	200080c4 	.word	0x200080c4
 800e1e4:	080182a0 	.word	0x080182a0
 800e1e8:	080183cc 	.word	0x080183cc
 800e1ec:	080182ec 	.word	0x080182ec
 800e1f0:	2000b7d8 	.word	0x2000b7d8
 800e1f4:	080183f8 	.word	0x080183f8
 800e1f8:	2000b7e8 	.word	0x2000b7e8
 800e1fc:	08018424 	.word	0x08018424
 800e200:	2000b7e0 	.word	0x2000b7e0
 800e204:	20004ad0 	.word	0x20004ad0
 800e208:	20004b00 	.word	0x20004b00
 800e20c:	20004afd 	.word	0x20004afd
 800e210:	20004af8 	.word	0x20004af8
 800e214:	20004afc 	.word	0x20004afc
 800e218:	20004afa 	.word	0x20004afa
      }
    }
    tcp_input_pcb = pcb;
 800e21c:	4a9c      	ldr	r2, [pc, #624]	; (800e490 <tcp_input+0x7d8>)
 800e21e:	69fb      	ldr	r3, [r7, #28]
 800e220:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e222:	69f8      	ldr	r0, [r7, #28]
 800e224:	f000 fb0a 	bl	800e83c <tcp_process>
 800e228:	4603      	mov	r3, r0
 800e22a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e22c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e230:	f113 0f0d 	cmn.w	r3, #13
 800e234:	f000 80d3 	beq.w	800e3de <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800e238:	4b96      	ldr	r3, [pc, #600]	; (800e494 <tcp_input+0x7dc>)
 800e23a:	781b      	ldrb	r3, [r3, #0]
 800e23c:	f003 0308 	and.w	r3, r3, #8
 800e240:	2b00      	cmp	r3, #0
 800e242:	d015      	beq.n	800e270 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e244:	69fb      	ldr	r3, [r7, #28]
 800e246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d008      	beq.n	800e260 <tcp_input+0x5a8>
 800e24e:	69fb      	ldr	r3, [r7, #28]
 800e250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e254:	69fa      	ldr	r2, [r7, #28]
 800e256:	6912      	ldr	r2, [r2, #16]
 800e258:	f06f 010d 	mvn.w	r1, #13
 800e25c:	4610      	mov	r0, r2
 800e25e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e260:	69f9      	ldr	r1, [r7, #28]
 800e262:	488d      	ldr	r0, [pc, #564]	; (800e498 <tcp_input+0x7e0>)
 800e264:	f7ff fbb0 	bl	800d9c8 <tcp_pcb_remove>
        tcp_free(pcb);
 800e268:	69f8      	ldr	r0, [r7, #28]
 800e26a:	f7fd fecb 	bl	800c004 <tcp_free>
 800e26e:	e0c1      	b.n	800e3f4 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800e270:	2300      	movs	r3, #0
 800e272:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e274:	4b89      	ldr	r3, [pc, #548]	; (800e49c <tcp_input+0x7e4>)
 800e276:	881b      	ldrh	r3, [r3, #0]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d01d      	beq.n	800e2b8 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e27c:	4b87      	ldr	r3, [pc, #540]	; (800e49c <tcp_input+0x7e4>)
 800e27e:	881b      	ldrh	r3, [r3, #0]
 800e280:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e282:	69fb      	ldr	r3, [r7, #28]
 800e284:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d00a      	beq.n	800e2a2 <tcp_input+0x5ea>
 800e28c:	69fb      	ldr	r3, [r7, #28]
 800e28e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e292:	69fa      	ldr	r2, [r7, #28]
 800e294:	6910      	ldr	r0, [r2, #16]
 800e296:	89fa      	ldrh	r2, [r7, #14]
 800e298:	69f9      	ldr	r1, [r7, #28]
 800e29a:	4798      	blx	r3
 800e29c:	4603      	mov	r3, r0
 800e29e:	74fb      	strb	r3, [r7, #19]
 800e2a0:	e001      	b.n	800e2a6 <tcp_input+0x5ee>
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e2a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e2aa:	f113 0f0d 	cmn.w	r3, #13
 800e2ae:	f000 8098 	beq.w	800e3e2 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e2b2:	4b7a      	ldr	r3, [pc, #488]	; (800e49c <tcp_input+0x7e4>)
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e2b8:	69f8      	ldr	r0, [r7, #28]
 800e2ba:	f000 f907 	bl	800e4cc <tcp_input_delayed_close>
 800e2be:	4603      	mov	r3, r0
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	f040 8090 	bne.w	800e3e6 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e2c6:	4b76      	ldr	r3, [pc, #472]	; (800e4a0 <tcp_input+0x7e8>)
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d041      	beq.n	800e352 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e2ce:	69fb      	ldr	r3, [r7, #28]
 800e2d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d006      	beq.n	800e2e4 <tcp_input+0x62c>
 800e2d6:	4b73      	ldr	r3, [pc, #460]	; (800e4a4 <tcp_input+0x7ec>)
 800e2d8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e2dc:	4972      	ldr	r1, [pc, #456]	; (800e4a8 <tcp_input+0x7f0>)
 800e2de:	4873      	ldr	r0, [pc, #460]	; (800e4ac <tcp_input+0x7f4>)
 800e2e0:	f007 f98c 	bl	80155fc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e2e4:	69fb      	ldr	r3, [r7, #28]
 800e2e6:	8b5b      	ldrh	r3, [r3, #26]
 800e2e8:	f003 0310 	and.w	r3, r3, #16
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d008      	beq.n	800e302 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e2f0:	4b6b      	ldr	r3, [pc, #428]	; (800e4a0 <tcp_input+0x7e8>)
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f7fd fbd9 	bl	800baac <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e2fa:	69f8      	ldr	r0, [r7, #28]
 800e2fc:	f7fe f9c6 	bl	800c68c <tcp_abort>
            goto aborted;
 800e300:	e078      	b.n	800e3f4 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e302:	69fb      	ldr	r3, [r7, #28]
 800e304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d00c      	beq.n	800e326 <tcp_input+0x66e>
 800e30c:	69fb      	ldr	r3, [r7, #28]
 800e30e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e312:	69fb      	ldr	r3, [r7, #28]
 800e314:	6918      	ldr	r0, [r3, #16]
 800e316:	4b62      	ldr	r3, [pc, #392]	; (800e4a0 <tcp_input+0x7e8>)
 800e318:	681a      	ldr	r2, [r3, #0]
 800e31a:	2300      	movs	r3, #0
 800e31c:	69f9      	ldr	r1, [r7, #28]
 800e31e:	47a0      	blx	r4
 800e320:	4603      	mov	r3, r0
 800e322:	74fb      	strb	r3, [r7, #19]
 800e324:	e008      	b.n	800e338 <tcp_input+0x680>
 800e326:	4b5e      	ldr	r3, [pc, #376]	; (800e4a0 <tcp_input+0x7e8>)
 800e328:	681a      	ldr	r2, [r3, #0]
 800e32a:	2300      	movs	r3, #0
 800e32c:	69f9      	ldr	r1, [r7, #28]
 800e32e:	2000      	movs	r0, #0
 800e330:	f7ff f884 	bl	800d43c <tcp_recv_null>
 800e334:	4603      	mov	r3, r0
 800e336:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e338:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e33c:	f113 0f0d 	cmn.w	r3, #13
 800e340:	d053      	beq.n	800e3ea <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e342:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d003      	beq.n	800e352 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e34a:	4b55      	ldr	r3, [pc, #340]	; (800e4a0 <tcp_input+0x7e8>)
 800e34c:	681a      	ldr	r2, [r3, #0]
 800e34e:	69fb      	ldr	r3, [r7, #28]
 800e350:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e352:	4b50      	ldr	r3, [pc, #320]	; (800e494 <tcp_input+0x7dc>)
 800e354:	781b      	ldrb	r3, [r3, #0]
 800e356:	f003 0320 	and.w	r3, r3, #32
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d030      	beq.n	800e3c0 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800e35e:	69fb      	ldr	r3, [r7, #28]
 800e360:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e362:	2b00      	cmp	r3, #0
 800e364:	d009      	beq.n	800e37a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e366:	69fb      	ldr	r3, [r7, #28]
 800e368:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e36a:	7b5a      	ldrb	r2, [r3, #13]
 800e36c:	69fb      	ldr	r3, [r7, #28]
 800e36e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e370:	f042 0220 	orr.w	r2, r2, #32
 800e374:	b2d2      	uxtb	r2, r2
 800e376:	735a      	strb	r2, [r3, #13]
 800e378:	e022      	b.n	800e3c0 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e37a:	69fb      	ldr	r3, [r7, #28]
 800e37c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e37e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e382:	d005      	beq.n	800e390 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800e384:	69fb      	ldr	r3, [r7, #28]
 800e386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e388:	3301      	adds	r3, #1
 800e38a:	b29a      	uxth	r2, r3
 800e38c:	69fb      	ldr	r3, [r7, #28]
 800e38e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e390:	69fb      	ldr	r3, [r7, #28]
 800e392:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e396:	2b00      	cmp	r3, #0
 800e398:	d00b      	beq.n	800e3b2 <tcp_input+0x6fa>
 800e39a:	69fb      	ldr	r3, [r7, #28]
 800e39c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e3a0:	69fb      	ldr	r3, [r7, #28]
 800e3a2:	6918      	ldr	r0, [r3, #16]
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	69f9      	ldr	r1, [r7, #28]
 800e3aa:	47a0      	blx	r4
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	74fb      	strb	r3, [r7, #19]
 800e3b0:	e001      	b.n	800e3b6 <tcp_input+0x6fe>
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e3b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e3ba:	f113 0f0d 	cmn.w	r3, #13
 800e3be:	d016      	beq.n	800e3ee <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e3c0:	4b33      	ldr	r3, [pc, #204]	; (800e490 <tcp_input+0x7d8>)
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e3c6:	69f8      	ldr	r0, [r7, #28]
 800e3c8:	f000 f880 	bl	800e4cc <tcp_input_delayed_close>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d10f      	bne.n	800e3f2 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e3d2:	69f8      	ldr	r0, [r7, #28]
 800e3d4:	f002 ff10 	bl	80111f8 <tcp_output>
 800e3d8:	e00c      	b.n	800e3f4 <tcp_input+0x73c>
        goto aborted;
 800e3da:	bf00      	nop
 800e3dc:	e00a      	b.n	800e3f4 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e3de:	bf00      	nop
 800e3e0:	e008      	b.n	800e3f4 <tcp_input+0x73c>
              goto aborted;
 800e3e2:	bf00      	nop
 800e3e4:	e006      	b.n	800e3f4 <tcp_input+0x73c>
          goto aborted;
 800e3e6:	bf00      	nop
 800e3e8:	e004      	b.n	800e3f4 <tcp_input+0x73c>
            goto aborted;
 800e3ea:	bf00      	nop
 800e3ec:	e002      	b.n	800e3f4 <tcp_input+0x73c>
              goto aborted;
 800e3ee:	bf00      	nop
 800e3f0:	e000      	b.n	800e3f4 <tcp_input+0x73c>
          goto aborted;
 800e3f2:	bf00      	nop
    tcp_input_pcb = NULL;
 800e3f4:	4b26      	ldr	r3, [pc, #152]	; (800e490 <tcp_input+0x7d8>)
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e3fa:	4b29      	ldr	r3, [pc, #164]	; (800e4a0 <tcp_input+0x7e8>)
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e400:	4b2b      	ldr	r3, [pc, #172]	; (800e4b0 <tcp_input+0x7f8>)
 800e402:	685b      	ldr	r3, [r3, #4]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d03f      	beq.n	800e488 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800e408:	4b29      	ldr	r3, [pc, #164]	; (800e4b0 <tcp_input+0x7f8>)
 800e40a:	685b      	ldr	r3, [r3, #4]
 800e40c:	4618      	mov	r0, r3
 800e40e:	f7fd fb4d 	bl	800baac <pbuf_free>
      inseg.p = NULL;
 800e412:	4b27      	ldr	r3, [pc, #156]	; (800e4b0 <tcp_input+0x7f8>)
 800e414:	2200      	movs	r2, #0
 800e416:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e418:	e036      	b.n	800e488 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e41a:	4b26      	ldr	r3, [pc, #152]	; (800e4b4 <tcp_input+0x7fc>)
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	899b      	ldrh	r3, [r3, #12]
 800e420:	b29b      	uxth	r3, r3
 800e422:	4618      	mov	r0, r3
 800e424:	f7fb ff96 	bl	800a354 <lwip_htons>
 800e428:	4603      	mov	r3, r0
 800e42a:	b2db      	uxtb	r3, r3
 800e42c:	f003 0304 	and.w	r3, r3, #4
 800e430:	2b00      	cmp	r3, #0
 800e432:	d118      	bne.n	800e466 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e434:	4b20      	ldr	r3, [pc, #128]	; (800e4b8 <tcp_input+0x800>)
 800e436:	6819      	ldr	r1, [r3, #0]
 800e438:	4b20      	ldr	r3, [pc, #128]	; (800e4bc <tcp_input+0x804>)
 800e43a:	881b      	ldrh	r3, [r3, #0]
 800e43c:	461a      	mov	r2, r3
 800e43e:	4b20      	ldr	r3, [pc, #128]	; (800e4c0 <tcp_input+0x808>)
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e444:	4b1b      	ldr	r3, [pc, #108]	; (800e4b4 <tcp_input+0x7fc>)
 800e446:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e448:	885b      	ldrh	r3, [r3, #2]
 800e44a:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e44c:	4a19      	ldr	r2, [pc, #100]	; (800e4b4 <tcp_input+0x7fc>)
 800e44e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e450:	8812      	ldrh	r2, [r2, #0]
 800e452:	b292      	uxth	r2, r2
 800e454:	9202      	str	r2, [sp, #8]
 800e456:	9301      	str	r3, [sp, #4]
 800e458:	4b1a      	ldr	r3, [pc, #104]	; (800e4c4 <tcp_input+0x80c>)
 800e45a:	9300      	str	r3, [sp, #0]
 800e45c:	4b1a      	ldr	r3, [pc, #104]	; (800e4c8 <tcp_input+0x810>)
 800e45e:	4602      	mov	r2, r0
 800e460:	2000      	movs	r0, #0
 800e462:	f003 fc7d 	bl	8011d60 <tcp_rst>
    pbuf_free(p);
 800e466:	6878      	ldr	r0, [r7, #4]
 800e468:	f7fd fb20 	bl	800baac <pbuf_free>
  return;
 800e46c:	e00c      	b.n	800e488 <tcp_input+0x7d0>
    goto dropped;
 800e46e:	bf00      	nop
 800e470:	e006      	b.n	800e480 <tcp_input+0x7c8>
    goto dropped;
 800e472:	bf00      	nop
 800e474:	e004      	b.n	800e480 <tcp_input+0x7c8>
    goto dropped;
 800e476:	bf00      	nop
 800e478:	e002      	b.n	800e480 <tcp_input+0x7c8>
      goto dropped;
 800e47a:	bf00      	nop
 800e47c:	e000      	b.n	800e480 <tcp_input+0x7c8>
      goto dropped;
 800e47e:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e480:	6878      	ldr	r0, [r7, #4]
 800e482:	f7fd fb13 	bl	800baac <pbuf_free>
 800e486:	e000      	b.n	800e48a <tcp_input+0x7d2>
  return;
 800e488:	bf00      	nop
}
 800e48a:	3724      	adds	r7, #36	; 0x24
 800e48c:	46bd      	mov	sp, r7
 800e48e:	bd90      	pop	{r4, r7, pc}
 800e490:	2000b7ec 	.word	0x2000b7ec
 800e494:	20004afd 	.word	0x20004afd
 800e498:	2000b7d8 	.word	0x2000b7d8
 800e49c:	20004af8 	.word	0x20004af8
 800e4a0:	20004b00 	.word	0x20004b00
 800e4a4:	080182a0 	.word	0x080182a0
 800e4a8:	08018454 	.word	0x08018454
 800e4ac:	080182ec 	.word	0x080182ec
 800e4b0:	20004ad0 	.word	0x20004ad0
 800e4b4:	20004ae0 	.word	0x20004ae0
 800e4b8:	20004af4 	.word	0x20004af4
 800e4bc:	20004afa 	.word	0x20004afa
 800e4c0:	20004af0 	.word	0x20004af0
 800e4c4:	200080d4 	.word	0x200080d4
 800e4c8:	200080d8 	.word	0x200080d8

0800e4cc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b082      	sub	sp, #8
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d106      	bne.n	800e4e8 <tcp_input_delayed_close+0x1c>
 800e4da:	4b17      	ldr	r3, [pc, #92]	; (800e538 <tcp_input_delayed_close+0x6c>)
 800e4dc:	f240 225a 	movw	r2, #602	; 0x25a
 800e4e0:	4916      	ldr	r1, [pc, #88]	; (800e53c <tcp_input_delayed_close+0x70>)
 800e4e2:	4817      	ldr	r0, [pc, #92]	; (800e540 <tcp_input_delayed_close+0x74>)
 800e4e4:	f007 f88a 	bl	80155fc <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e4e8:	4b16      	ldr	r3, [pc, #88]	; (800e544 <tcp_input_delayed_close+0x78>)
 800e4ea:	781b      	ldrb	r3, [r3, #0]
 800e4ec:	f003 0310 	and.w	r3, r3, #16
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d01c      	beq.n	800e52e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	8b5b      	ldrh	r3, [r3, #26]
 800e4f8:	f003 0310 	and.w	r3, r3, #16
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d10d      	bne.n	800e51c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e506:	2b00      	cmp	r3, #0
 800e508:	d008      	beq.n	800e51c <tcp_input_delayed_close+0x50>
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e510:	687a      	ldr	r2, [r7, #4]
 800e512:	6912      	ldr	r2, [r2, #16]
 800e514:	f06f 010e 	mvn.w	r1, #14
 800e518:	4610      	mov	r0, r2
 800e51a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e51c:	6879      	ldr	r1, [r7, #4]
 800e51e:	480a      	ldr	r0, [pc, #40]	; (800e548 <tcp_input_delayed_close+0x7c>)
 800e520:	f7ff fa52 	bl	800d9c8 <tcp_pcb_remove>
    tcp_free(pcb);
 800e524:	6878      	ldr	r0, [r7, #4]
 800e526:	f7fd fd6d 	bl	800c004 <tcp_free>
    return 1;
 800e52a:	2301      	movs	r3, #1
 800e52c:	e000      	b.n	800e530 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e52e:	2300      	movs	r3, #0
}
 800e530:	4618      	mov	r0, r3
 800e532:	3708      	adds	r7, #8
 800e534:	46bd      	mov	sp, r7
 800e536:	bd80      	pop	{r7, pc}
 800e538:	080182a0 	.word	0x080182a0
 800e53c:	08018470 	.word	0x08018470
 800e540:	080182ec 	.word	0x080182ec
 800e544:	20004afd 	.word	0x20004afd
 800e548:	2000b7d8 	.word	0x2000b7d8

0800e54c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e54c:	b590      	push	{r4, r7, lr}
 800e54e:	b08b      	sub	sp, #44	; 0x2c
 800e550:	af04      	add	r7, sp, #16
 800e552:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e554:	4b6f      	ldr	r3, [pc, #444]	; (800e714 <tcp_listen_input+0x1c8>)
 800e556:	781b      	ldrb	r3, [r3, #0]
 800e558:	f003 0304 	and.w	r3, r3, #4
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	f040 80d2 	bne.w	800e706 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d106      	bne.n	800e576 <tcp_listen_input+0x2a>
 800e568:	4b6b      	ldr	r3, [pc, #428]	; (800e718 <tcp_listen_input+0x1cc>)
 800e56a:	f240 2281 	movw	r2, #641	; 0x281
 800e56e:	496b      	ldr	r1, [pc, #428]	; (800e71c <tcp_listen_input+0x1d0>)
 800e570:	486b      	ldr	r0, [pc, #428]	; (800e720 <tcp_listen_input+0x1d4>)
 800e572:	f007 f843 	bl	80155fc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e576:	4b67      	ldr	r3, [pc, #412]	; (800e714 <tcp_listen_input+0x1c8>)
 800e578:	781b      	ldrb	r3, [r3, #0]
 800e57a:	f003 0310 	and.w	r3, r3, #16
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d019      	beq.n	800e5b6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e582:	4b68      	ldr	r3, [pc, #416]	; (800e724 <tcp_listen_input+0x1d8>)
 800e584:	6819      	ldr	r1, [r3, #0]
 800e586:	4b68      	ldr	r3, [pc, #416]	; (800e728 <tcp_listen_input+0x1dc>)
 800e588:	881b      	ldrh	r3, [r3, #0]
 800e58a:	461a      	mov	r2, r3
 800e58c:	4b67      	ldr	r3, [pc, #412]	; (800e72c <tcp_listen_input+0x1e0>)
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e592:	4b67      	ldr	r3, [pc, #412]	; (800e730 <tcp_listen_input+0x1e4>)
 800e594:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e596:	885b      	ldrh	r3, [r3, #2]
 800e598:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e59a:	4a65      	ldr	r2, [pc, #404]	; (800e730 <tcp_listen_input+0x1e4>)
 800e59c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e59e:	8812      	ldrh	r2, [r2, #0]
 800e5a0:	b292      	uxth	r2, r2
 800e5a2:	9202      	str	r2, [sp, #8]
 800e5a4:	9301      	str	r3, [sp, #4]
 800e5a6:	4b63      	ldr	r3, [pc, #396]	; (800e734 <tcp_listen_input+0x1e8>)
 800e5a8:	9300      	str	r3, [sp, #0]
 800e5aa:	4b63      	ldr	r3, [pc, #396]	; (800e738 <tcp_listen_input+0x1ec>)
 800e5ac:	4602      	mov	r2, r0
 800e5ae:	6878      	ldr	r0, [r7, #4]
 800e5b0:	f003 fbd6 	bl	8011d60 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e5b4:	e0a9      	b.n	800e70a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e5b6:	4b57      	ldr	r3, [pc, #348]	; (800e714 <tcp_listen_input+0x1c8>)
 800e5b8:	781b      	ldrb	r3, [r3, #0]
 800e5ba:	f003 0302 	and.w	r3, r3, #2
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	f000 80a3 	beq.w	800e70a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	7d5b      	ldrb	r3, [r3, #21]
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	f7ff f85b 	bl	800d684 <tcp_alloc>
 800e5ce:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e5d0:	697b      	ldr	r3, [r7, #20]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d111      	bne.n	800e5fa <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	699b      	ldr	r3, [r3, #24]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d00a      	beq.n	800e5f4 <tcp_listen_input+0xa8>
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	699b      	ldr	r3, [r3, #24]
 800e5e2:	687a      	ldr	r2, [r7, #4]
 800e5e4:	6910      	ldr	r0, [r2, #16]
 800e5e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e5ea:	2100      	movs	r1, #0
 800e5ec:	4798      	blx	r3
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	73bb      	strb	r3, [r7, #14]
      return;
 800e5f2:	e08b      	b.n	800e70c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e5f4:	23f0      	movs	r3, #240	; 0xf0
 800e5f6:	73bb      	strb	r3, [r7, #14]
      return;
 800e5f8:	e088      	b.n	800e70c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e5fa:	4b50      	ldr	r3, [pc, #320]	; (800e73c <tcp_listen_input+0x1f0>)
 800e5fc:	695a      	ldr	r2, [r3, #20]
 800e5fe:	697b      	ldr	r3, [r7, #20]
 800e600:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e602:	4b4e      	ldr	r3, [pc, #312]	; (800e73c <tcp_listen_input+0x1f0>)
 800e604:	691a      	ldr	r2, [r3, #16]
 800e606:	697b      	ldr	r3, [r7, #20]
 800e608:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	8ada      	ldrh	r2, [r3, #22]
 800e60e:	697b      	ldr	r3, [r7, #20]
 800e610:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e612:	4b47      	ldr	r3, [pc, #284]	; (800e730 <tcp_listen_input+0x1e4>)
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	881b      	ldrh	r3, [r3, #0]
 800e618:	b29a      	uxth	r2, r3
 800e61a:	697b      	ldr	r3, [r7, #20]
 800e61c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e61e:	697b      	ldr	r3, [r7, #20]
 800e620:	2203      	movs	r2, #3
 800e622:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e624:	4b41      	ldr	r3, [pc, #260]	; (800e72c <tcp_listen_input+0x1e0>)
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	1c5a      	adds	r2, r3, #1
 800e62a:	697b      	ldr	r3, [r7, #20]
 800e62c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e62e:	697b      	ldr	r3, [r7, #20]
 800e630:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e632:	697b      	ldr	r3, [r7, #20]
 800e634:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e636:	6978      	ldr	r0, [r7, #20]
 800e638:	f7ff fa5a 	bl	800daf0 <tcp_next_iss>
 800e63c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e63e:	697b      	ldr	r3, [r7, #20]
 800e640:	693a      	ldr	r2, [r7, #16]
 800e642:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800e644:	697b      	ldr	r3, [r7, #20]
 800e646:	693a      	ldr	r2, [r7, #16]
 800e648:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800e64a:	697b      	ldr	r3, [r7, #20]
 800e64c:	693a      	ldr	r2, [r7, #16]
 800e64e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e650:	697b      	ldr	r3, [r7, #20]
 800e652:	693a      	ldr	r2, [r7, #16]
 800e654:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e656:	4b35      	ldr	r3, [pc, #212]	; (800e72c <tcp_listen_input+0x1e0>)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	1e5a      	subs	r2, r3, #1
 800e65c:	697b      	ldr	r3, [r7, #20]
 800e65e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	691a      	ldr	r2, [r3, #16]
 800e664:	697b      	ldr	r3, [r7, #20]
 800e666:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e668:	697b      	ldr	r3, [r7, #20]
 800e66a:	687a      	ldr	r2, [r7, #4]
 800e66c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	7a5b      	ldrb	r3, [r3, #9]
 800e672:	f003 030c 	and.w	r3, r3, #12
 800e676:	b2da      	uxtb	r2, r3
 800e678:	697b      	ldr	r3, [r7, #20]
 800e67a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	7a1a      	ldrb	r2, [r3, #8]
 800e680:	697b      	ldr	r3, [r7, #20]
 800e682:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e684:	4b2e      	ldr	r3, [pc, #184]	; (800e740 <tcp_listen_input+0x1f4>)
 800e686:	681a      	ldr	r2, [r3, #0]
 800e688:	697b      	ldr	r3, [r7, #20]
 800e68a:	60da      	str	r2, [r3, #12]
 800e68c:	4a2c      	ldr	r2, [pc, #176]	; (800e740 <tcp_listen_input+0x1f4>)
 800e68e:	697b      	ldr	r3, [r7, #20]
 800e690:	6013      	str	r3, [r2, #0]
 800e692:	f003 fd27 	bl	80120e4 <tcp_timer_needed>
 800e696:	4b2b      	ldr	r3, [pc, #172]	; (800e744 <tcp_listen_input+0x1f8>)
 800e698:	2201      	movs	r2, #1
 800e69a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e69c:	6978      	ldr	r0, [r7, #20]
 800e69e:	f001 fd8d 	bl	80101bc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e6a2:	4b23      	ldr	r3, [pc, #140]	; (800e730 <tcp_listen_input+0x1e4>)
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	89db      	ldrh	r3, [r3, #14]
 800e6a8:	b29a      	uxth	r2, r3
 800e6aa:	697b      	ldr	r3, [r7, #20]
 800e6ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e6b0:	697b      	ldr	r3, [r7, #20]
 800e6b2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e6b6:	697b      	ldr	r3, [r7, #20]
 800e6b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e6bc:	697b      	ldr	r3, [r7, #20]
 800e6be:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e6c0:	697b      	ldr	r3, [r7, #20]
 800e6c2:	3304      	adds	r3, #4
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	f005 fa61 	bl	8013b8c <ip4_route>
 800e6ca:	4601      	mov	r1, r0
 800e6cc:	697b      	ldr	r3, [r7, #20]
 800e6ce:	3304      	adds	r3, #4
 800e6d0:	461a      	mov	r2, r3
 800e6d2:	4620      	mov	r0, r4
 800e6d4:	f7ff fa32 	bl	800db3c <tcp_eff_send_mss_netif>
 800e6d8:	4603      	mov	r3, r0
 800e6da:	461a      	mov	r2, r3
 800e6dc:	697b      	ldr	r3, [r7, #20]
 800e6de:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e6e0:	2112      	movs	r1, #18
 800e6e2:	6978      	ldr	r0, [r7, #20]
 800e6e4:	f002 fc9a 	bl	801101c <tcp_enqueue_flags>
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e6ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d004      	beq.n	800e6fe <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e6f4:	2100      	movs	r1, #0
 800e6f6:	6978      	ldr	r0, [r7, #20]
 800e6f8:	f7fd ff0a 	bl	800c510 <tcp_abandon>
      return;
 800e6fc:	e006      	b.n	800e70c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e6fe:	6978      	ldr	r0, [r7, #20]
 800e700:	f002 fd7a 	bl	80111f8 <tcp_output>
  return;
 800e704:	e001      	b.n	800e70a <tcp_listen_input+0x1be>
    return;
 800e706:	bf00      	nop
 800e708:	e000      	b.n	800e70c <tcp_listen_input+0x1c0>
  return;
 800e70a:	bf00      	nop
}
 800e70c:	371c      	adds	r7, #28
 800e70e:	46bd      	mov	sp, r7
 800e710:	bd90      	pop	{r4, r7, pc}
 800e712:	bf00      	nop
 800e714:	20004afc 	.word	0x20004afc
 800e718:	080182a0 	.word	0x080182a0
 800e71c:	08018498 	.word	0x08018498
 800e720:	080182ec 	.word	0x080182ec
 800e724:	20004af4 	.word	0x20004af4
 800e728:	20004afa 	.word	0x20004afa
 800e72c:	20004af0 	.word	0x20004af0
 800e730:	20004ae0 	.word	0x20004ae0
 800e734:	200080d4 	.word	0x200080d4
 800e738:	200080d8 	.word	0x200080d8
 800e73c:	200080c4 	.word	0x200080c4
 800e740:	2000b7d8 	.word	0x2000b7d8
 800e744:	2000b7d4 	.word	0x2000b7d4

0800e748 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b086      	sub	sp, #24
 800e74c:	af04      	add	r7, sp, #16
 800e74e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e750:	4b2f      	ldr	r3, [pc, #188]	; (800e810 <tcp_timewait_input+0xc8>)
 800e752:	781b      	ldrb	r3, [r3, #0]
 800e754:	f003 0304 	and.w	r3, r3, #4
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d153      	bne.n	800e804 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d106      	bne.n	800e770 <tcp_timewait_input+0x28>
 800e762:	4b2c      	ldr	r3, [pc, #176]	; (800e814 <tcp_timewait_input+0xcc>)
 800e764:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e768:	492b      	ldr	r1, [pc, #172]	; (800e818 <tcp_timewait_input+0xd0>)
 800e76a:	482c      	ldr	r0, [pc, #176]	; (800e81c <tcp_timewait_input+0xd4>)
 800e76c:	f006 ff46 	bl	80155fc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e770:	4b27      	ldr	r3, [pc, #156]	; (800e810 <tcp_timewait_input+0xc8>)
 800e772:	781b      	ldrb	r3, [r3, #0]
 800e774:	f003 0302 	and.w	r3, r3, #2
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d02a      	beq.n	800e7d2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e77c:	4b28      	ldr	r3, [pc, #160]	; (800e820 <tcp_timewait_input+0xd8>)
 800e77e:	681a      	ldr	r2, [r3, #0]
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e784:	1ad3      	subs	r3, r2, r3
 800e786:	2b00      	cmp	r3, #0
 800e788:	db2d      	blt.n	800e7e6 <tcp_timewait_input+0x9e>
 800e78a:	4b25      	ldr	r3, [pc, #148]	; (800e820 <tcp_timewait_input+0xd8>)
 800e78c:	681a      	ldr	r2, [r3, #0]
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e792:	6879      	ldr	r1, [r7, #4]
 800e794:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e796:	440b      	add	r3, r1
 800e798:	1ad3      	subs	r3, r2, r3
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	dc23      	bgt.n	800e7e6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e79e:	4b21      	ldr	r3, [pc, #132]	; (800e824 <tcp_timewait_input+0xdc>)
 800e7a0:	6819      	ldr	r1, [r3, #0]
 800e7a2:	4b21      	ldr	r3, [pc, #132]	; (800e828 <tcp_timewait_input+0xe0>)
 800e7a4:	881b      	ldrh	r3, [r3, #0]
 800e7a6:	461a      	mov	r2, r3
 800e7a8:	4b1d      	ldr	r3, [pc, #116]	; (800e820 <tcp_timewait_input+0xd8>)
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e7ae:	4b1f      	ldr	r3, [pc, #124]	; (800e82c <tcp_timewait_input+0xe4>)
 800e7b0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7b2:	885b      	ldrh	r3, [r3, #2]
 800e7b4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e7b6:	4a1d      	ldr	r2, [pc, #116]	; (800e82c <tcp_timewait_input+0xe4>)
 800e7b8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7ba:	8812      	ldrh	r2, [r2, #0]
 800e7bc:	b292      	uxth	r2, r2
 800e7be:	9202      	str	r2, [sp, #8]
 800e7c0:	9301      	str	r3, [sp, #4]
 800e7c2:	4b1b      	ldr	r3, [pc, #108]	; (800e830 <tcp_timewait_input+0xe8>)
 800e7c4:	9300      	str	r3, [sp, #0]
 800e7c6:	4b1b      	ldr	r3, [pc, #108]	; (800e834 <tcp_timewait_input+0xec>)
 800e7c8:	4602      	mov	r2, r0
 800e7ca:	6878      	ldr	r0, [r7, #4]
 800e7cc:	f003 fac8 	bl	8011d60 <tcp_rst>
      return;
 800e7d0:	e01b      	b.n	800e80a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e7d2:	4b0f      	ldr	r3, [pc, #60]	; (800e810 <tcp_timewait_input+0xc8>)
 800e7d4:	781b      	ldrb	r3, [r3, #0]
 800e7d6:	f003 0301 	and.w	r3, r3, #1
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d003      	beq.n	800e7e6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e7de:	4b16      	ldr	r3, [pc, #88]	; (800e838 <tcp_timewait_input+0xf0>)
 800e7e0:	681a      	ldr	r2, [r3, #0]
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e7e6:	4b10      	ldr	r3, [pc, #64]	; (800e828 <tcp_timewait_input+0xe0>)
 800e7e8:	881b      	ldrh	r3, [r3, #0]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d00c      	beq.n	800e808 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	8b5b      	ldrh	r3, [r3, #26]
 800e7f2:	f043 0302 	orr.w	r3, r3, #2
 800e7f6:	b29a      	uxth	r2, r3
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e7fc:	6878      	ldr	r0, [r7, #4]
 800e7fe:	f002 fcfb 	bl	80111f8 <tcp_output>
  }
  return;
 800e802:	e001      	b.n	800e808 <tcp_timewait_input+0xc0>
    return;
 800e804:	bf00      	nop
 800e806:	e000      	b.n	800e80a <tcp_timewait_input+0xc2>
  return;
 800e808:	bf00      	nop
}
 800e80a:	3708      	adds	r7, #8
 800e80c:	46bd      	mov	sp, r7
 800e80e:	bd80      	pop	{r7, pc}
 800e810:	20004afc 	.word	0x20004afc
 800e814:	080182a0 	.word	0x080182a0
 800e818:	080184b8 	.word	0x080184b8
 800e81c:	080182ec 	.word	0x080182ec
 800e820:	20004af0 	.word	0x20004af0
 800e824:	20004af4 	.word	0x20004af4
 800e828:	20004afa 	.word	0x20004afa
 800e82c:	20004ae0 	.word	0x20004ae0
 800e830:	200080d4 	.word	0x200080d4
 800e834:	200080d8 	.word	0x200080d8
 800e838:	2000b7dc 	.word	0x2000b7dc

0800e83c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e83c:	b590      	push	{r4, r7, lr}
 800e83e:	b08d      	sub	sp, #52	; 0x34
 800e840:	af04      	add	r7, sp, #16
 800e842:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e844:	2300      	movs	r3, #0
 800e846:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e848:	2300      	movs	r3, #0
 800e84a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d106      	bne.n	800e860 <tcp_process+0x24>
 800e852:	4ba5      	ldr	r3, [pc, #660]	; (800eae8 <tcp_process+0x2ac>)
 800e854:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e858:	49a4      	ldr	r1, [pc, #656]	; (800eaec <tcp_process+0x2b0>)
 800e85a:	48a5      	ldr	r0, [pc, #660]	; (800eaf0 <tcp_process+0x2b4>)
 800e85c:	f006 fece 	bl	80155fc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e860:	4ba4      	ldr	r3, [pc, #656]	; (800eaf4 <tcp_process+0x2b8>)
 800e862:	781b      	ldrb	r3, [r3, #0]
 800e864:	f003 0304 	and.w	r3, r3, #4
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d04e      	beq.n	800e90a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	7d1b      	ldrb	r3, [r3, #20]
 800e870:	2b02      	cmp	r3, #2
 800e872:	d108      	bne.n	800e886 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e878:	4b9f      	ldr	r3, [pc, #636]	; (800eaf8 <tcp_process+0x2bc>)
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	429a      	cmp	r2, r3
 800e87e:	d123      	bne.n	800e8c8 <tcp_process+0x8c>
        acceptable = 1;
 800e880:	2301      	movs	r3, #1
 800e882:	76fb      	strb	r3, [r7, #27]
 800e884:	e020      	b.n	800e8c8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e88a:	4b9c      	ldr	r3, [pc, #624]	; (800eafc <tcp_process+0x2c0>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	429a      	cmp	r2, r3
 800e890:	d102      	bne.n	800e898 <tcp_process+0x5c>
        acceptable = 1;
 800e892:	2301      	movs	r3, #1
 800e894:	76fb      	strb	r3, [r7, #27]
 800e896:	e017      	b.n	800e8c8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e898:	4b98      	ldr	r3, [pc, #608]	; (800eafc <tcp_process+0x2c0>)
 800e89a:	681a      	ldr	r2, [r3, #0]
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8a0:	1ad3      	subs	r3, r2, r3
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	db10      	blt.n	800e8c8 <tcp_process+0x8c>
 800e8a6:	4b95      	ldr	r3, [pc, #596]	; (800eafc <tcp_process+0x2c0>)
 800e8a8:	681a      	ldr	r2, [r3, #0]
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8ae:	6879      	ldr	r1, [r7, #4]
 800e8b0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e8b2:	440b      	add	r3, r1
 800e8b4:	1ad3      	subs	r3, r2, r3
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	dc06      	bgt.n	800e8c8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	8b5b      	ldrh	r3, [r3, #26]
 800e8be:	f043 0302 	orr.w	r3, r3, #2
 800e8c2:	b29a      	uxth	r2, r3
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e8c8:	7efb      	ldrb	r3, [r7, #27]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d01b      	beq.n	800e906 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	7d1b      	ldrb	r3, [r3, #20]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d106      	bne.n	800e8e4 <tcp_process+0xa8>
 800e8d6:	4b84      	ldr	r3, [pc, #528]	; (800eae8 <tcp_process+0x2ac>)
 800e8d8:	f44f 724e 	mov.w	r2, #824	; 0x338
 800e8dc:	4988      	ldr	r1, [pc, #544]	; (800eb00 <tcp_process+0x2c4>)
 800e8de:	4884      	ldr	r0, [pc, #528]	; (800eaf0 <tcp_process+0x2b4>)
 800e8e0:	f006 fe8c 	bl	80155fc <iprintf>
      recv_flags |= TF_RESET;
 800e8e4:	4b87      	ldr	r3, [pc, #540]	; (800eb04 <tcp_process+0x2c8>)
 800e8e6:	781b      	ldrb	r3, [r3, #0]
 800e8e8:	f043 0308 	orr.w	r3, r3, #8
 800e8ec:	b2da      	uxtb	r2, r3
 800e8ee:	4b85      	ldr	r3, [pc, #532]	; (800eb04 <tcp_process+0x2c8>)
 800e8f0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	8b5b      	ldrh	r3, [r3, #26]
 800e8f6:	f023 0301 	bic.w	r3, r3, #1
 800e8fa:	b29a      	uxth	r2, r3
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e900:	f06f 030d 	mvn.w	r3, #13
 800e904:	e37a      	b.n	800effc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e906:	2300      	movs	r3, #0
 800e908:	e378      	b.n	800effc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e90a:	4b7a      	ldr	r3, [pc, #488]	; (800eaf4 <tcp_process+0x2b8>)
 800e90c:	781b      	ldrb	r3, [r3, #0]
 800e90e:	f003 0302 	and.w	r3, r3, #2
 800e912:	2b00      	cmp	r3, #0
 800e914:	d010      	beq.n	800e938 <tcp_process+0xfc>
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	7d1b      	ldrb	r3, [r3, #20]
 800e91a:	2b02      	cmp	r3, #2
 800e91c:	d00c      	beq.n	800e938 <tcp_process+0xfc>
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	7d1b      	ldrb	r3, [r3, #20]
 800e922:	2b03      	cmp	r3, #3
 800e924:	d008      	beq.n	800e938 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	8b5b      	ldrh	r3, [r3, #26]
 800e92a:	f043 0302 	orr.w	r3, r3, #2
 800e92e:	b29a      	uxth	r2, r3
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e934:	2300      	movs	r3, #0
 800e936:	e361      	b.n	800effc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	8b5b      	ldrh	r3, [r3, #26]
 800e93c:	f003 0310 	and.w	r3, r3, #16
 800e940:	2b00      	cmp	r3, #0
 800e942:	d103      	bne.n	800e94c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e944:	4b70      	ldr	r3, [pc, #448]	; (800eb08 <tcp_process+0x2cc>)
 800e946:	681a      	ldr	r2, [r3, #0]
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2200      	movs	r2, #0
 800e950:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2200      	movs	r2, #0
 800e958:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800e95c:	6878      	ldr	r0, [r7, #4]
 800e95e:	f001 fc2d 	bl	80101bc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	7d1b      	ldrb	r3, [r3, #20]
 800e966:	3b02      	subs	r3, #2
 800e968:	2b07      	cmp	r3, #7
 800e96a:	f200 8337 	bhi.w	800efdc <tcp_process+0x7a0>
 800e96e:	a201      	add	r2, pc, #4	; (adr r2, 800e974 <tcp_process+0x138>)
 800e970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e974:	0800e995 	.word	0x0800e995
 800e978:	0800ebc5 	.word	0x0800ebc5
 800e97c:	0800ed3d 	.word	0x0800ed3d
 800e980:	0800ed67 	.word	0x0800ed67
 800e984:	0800ee8b 	.word	0x0800ee8b
 800e988:	0800ed3d 	.word	0x0800ed3d
 800e98c:	0800ef17 	.word	0x0800ef17
 800e990:	0800efa7 	.word	0x0800efa7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e994:	4b57      	ldr	r3, [pc, #348]	; (800eaf4 <tcp_process+0x2b8>)
 800e996:	781b      	ldrb	r3, [r3, #0]
 800e998:	f003 0310 	and.w	r3, r3, #16
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	f000 80e4 	beq.w	800eb6a <tcp_process+0x32e>
 800e9a2:	4b54      	ldr	r3, [pc, #336]	; (800eaf4 <tcp_process+0x2b8>)
 800e9a4:	781b      	ldrb	r3, [r3, #0]
 800e9a6:	f003 0302 	and.w	r3, r3, #2
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	f000 80dd 	beq.w	800eb6a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9b4:	1c5a      	adds	r2, r3, #1
 800e9b6:	4b50      	ldr	r3, [pc, #320]	; (800eaf8 <tcp_process+0x2bc>)
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	429a      	cmp	r2, r3
 800e9bc:	f040 80d5 	bne.w	800eb6a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e9c0:	4b4e      	ldr	r3, [pc, #312]	; (800eafc <tcp_process+0x2c0>)
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	1c5a      	adds	r2, r3, #1
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800e9d2:	4b49      	ldr	r3, [pc, #292]	; (800eaf8 <tcp_process+0x2bc>)
 800e9d4:	681a      	ldr	r2, [r3, #0]
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e9da:	4b4c      	ldr	r3, [pc, #304]	; (800eb0c <tcp_process+0x2d0>)
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	89db      	ldrh	r3, [r3, #14]
 800e9e0:	b29a      	uxth	r2, r3
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e9f4:	4b41      	ldr	r3, [pc, #260]	; (800eafc <tcp_process+0x2c0>)
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	1e5a      	subs	r2, r3, #1
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	2204      	movs	r2, #4
 800ea02:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	3304      	adds	r3, #4
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	f005 f8bd 	bl	8013b8c <ip4_route>
 800ea12:	4601      	mov	r1, r0
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	3304      	adds	r3, #4
 800ea18:	461a      	mov	r2, r3
 800ea1a:	4620      	mov	r0, r4
 800ea1c:	f7ff f88e 	bl	800db3c <tcp_eff_send_mss_netif>
 800ea20:	4603      	mov	r3, r0
 800ea22:	461a      	mov	r2, r3
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea2c:	009a      	lsls	r2, r3, #2
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea32:	005b      	lsls	r3, r3, #1
 800ea34:	f241 111c 	movw	r1, #4380	; 0x111c
 800ea38:	428b      	cmp	r3, r1
 800ea3a:	bf38      	it	cc
 800ea3c:	460b      	movcc	r3, r1
 800ea3e:	429a      	cmp	r2, r3
 800ea40:	d204      	bcs.n	800ea4c <tcp_process+0x210>
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea46:	009b      	lsls	r3, r3, #2
 800ea48:	b29b      	uxth	r3, r3
 800ea4a:	e00d      	b.n	800ea68 <tcp_process+0x22c>
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea50:	005b      	lsls	r3, r3, #1
 800ea52:	f241 121c 	movw	r2, #4380	; 0x111c
 800ea56:	4293      	cmp	r3, r2
 800ea58:	d904      	bls.n	800ea64 <tcp_process+0x228>
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea5e:	005b      	lsls	r3, r3, #1
 800ea60:	b29b      	uxth	r3, r3
 800ea62:	e001      	b.n	800ea68 <tcp_process+0x22c>
 800ea64:	f241 131c 	movw	r3, #4380	; 0x111c
 800ea68:	687a      	ldr	r2, [r7, #4]
 800ea6a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d106      	bne.n	800ea86 <tcp_process+0x24a>
 800ea78:	4b1b      	ldr	r3, [pc, #108]	; (800eae8 <tcp_process+0x2ac>)
 800ea7a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800ea7e:	4924      	ldr	r1, [pc, #144]	; (800eb10 <tcp_process+0x2d4>)
 800ea80:	481b      	ldr	r0, [pc, #108]	; (800eaf0 <tcp_process+0x2b4>)
 800ea82:	f006 fdbb 	bl	80155fc <iprintf>
        --pcb->snd_queuelen;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ea8c:	3b01      	subs	r3, #1
 800ea8e:	b29a      	uxth	r2, r3
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea9a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800ea9c:	69fb      	ldr	r3, [r7, #28]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d111      	bne.n	800eac6 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eaa6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800eaa8:	69fb      	ldr	r3, [r7, #28]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d106      	bne.n	800eabc <tcp_process+0x280>
 800eaae:	4b0e      	ldr	r3, [pc, #56]	; (800eae8 <tcp_process+0x2ac>)
 800eab0:	f44f 725d 	mov.w	r2, #884	; 0x374
 800eab4:	4917      	ldr	r1, [pc, #92]	; (800eb14 <tcp_process+0x2d8>)
 800eab6:	480e      	ldr	r0, [pc, #56]	; (800eaf0 <tcp_process+0x2b4>)
 800eab8:	f006 fda0 	bl	80155fc <iprintf>
          pcb->unsent = rseg->next;
 800eabc:	69fb      	ldr	r3, [r7, #28]
 800eabe:	681a      	ldr	r2, [r3, #0]
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	66da      	str	r2, [r3, #108]	; 0x6c
 800eac4:	e003      	b.n	800eace <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800eac6:	69fb      	ldr	r3, [r7, #28]
 800eac8:	681a      	ldr	r2, [r3, #0]
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800eace:	69f8      	ldr	r0, [r7, #28]
 800ead0:	f7fe fc6f 	bl	800d3b2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d11d      	bne.n	800eb18 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eae2:	861a      	strh	r2, [r3, #48]	; 0x30
 800eae4:	e01f      	b.n	800eb26 <tcp_process+0x2ea>
 800eae6:	bf00      	nop
 800eae8:	080182a0 	.word	0x080182a0
 800eaec:	080184d8 	.word	0x080184d8
 800eaf0:	080182ec 	.word	0x080182ec
 800eaf4:	20004afc 	.word	0x20004afc
 800eaf8:	20004af4 	.word	0x20004af4
 800eafc:	20004af0 	.word	0x20004af0
 800eb00:	080184f4 	.word	0x080184f4
 800eb04:	20004afd 	.word	0x20004afd
 800eb08:	2000b7dc 	.word	0x2000b7dc
 800eb0c:	20004ae0 	.word	0x20004ae0
 800eb10:	08018514 	.word	0x08018514
 800eb14:	0801852c 	.word	0x0801852c
        } else {
          pcb->rtime = 0;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	2200      	movs	r2, #0
 800eb22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d00a      	beq.n	800eb46 <tcp_process+0x30a>
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb36:	687a      	ldr	r2, [r7, #4]
 800eb38:	6910      	ldr	r0, [r2, #16]
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	6879      	ldr	r1, [r7, #4]
 800eb3e:	4798      	blx	r3
 800eb40:	4603      	mov	r3, r0
 800eb42:	76bb      	strb	r3, [r7, #26]
 800eb44:	e001      	b.n	800eb4a <tcp_process+0x30e>
 800eb46:	2300      	movs	r3, #0
 800eb48:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800eb4a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800eb4e:	f113 0f0d 	cmn.w	r3, #13
 800eb52:	d102      	bne.n	800eb5a <tcp_process+0x31e>
          return ERR_ABRT;
 800eb54:	f06f 030c 	mvn.w	r3, #12
 800eb58:	e250      	b.n	800effc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	8b5b      	ldrh	r3, [r3, #26]
 800eb5e:	f043 0302 	orr.w	r3, r3, #2
 800eb62:	b29a      	uxth	r2, r3
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800eb68:	e23a      	b.n	800efe0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800eb6a:	4b9d      	ldr	r3, [pc, #628]	; (800ede0 <tcp_process+0x5a4>)
 800eb6c:	781b      	ldrb	r3, [r3, #0]
 800eb6e:	f003 0310 	and.w	r3, r3, #16
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	f000 8234 	beq.w	800efe0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb78:	4b9a      	ldr	r3, [pc, #616]	; (800ede4 <tcp_process+0x5a8>)
 800eb7a:	6819      	ldr	r1, [r3, #0]
 800eb7c:	4b9a      	ldr	r3, [pc, #616]	; (800ede8 <tcp_process+0x5ac>)
 800eb7e:	881b      	ldrh	r3, [r3, #0]
 800eb80:	461a      	mov	r2, r3
 800eb82:	4b9a      	ldr	r3, [pc, #616]	; (800edec <tcp_process+0x5b0>)
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eb88:	4b99      	ldr	r3, [pc, #612]	; (800edf0 <tcp_process+0x5b4>)
 800eb8a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb8c:	885b      	ldrh	r3, [r3, #2]
 800eb8e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eb90:	4a97      	ldr	r2, [pc, #604]	; (800edf0 <tcp_process+0x5b4>)
 800eb92:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb94:	8812      	ldrh	r2, [r2, #0]
 800eb96:	b292      	uxth	r2, r2
 800eb98:	9202      	str	r2, [sp, #8]
 800eb9a:	9301      	str	r3, [sp, #4]
 800eb9c:	4b95      	ldr	r3, [pc, #596]	; (800edf4 <tcp_process+0x5b8>)
 800eb9e:	9300      	str	r3, [sp, #0]
 800eba0:	4b95      	ldr	r3, [pc, #596]	; (800edf8 <tcp_process+0x5bc>)
 800eba2:	4602      	mov	r2, r0
 800eba4:	6878      	ldr	r0, [r7, #4]
 800eba6:	f003 f8db 	bl	8011d60 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ebb0:	2b05      	cmp	r3, #5
 800ebb2:	f200 8215 	bhi.w	800efe0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	2200      	movs	r2, #0
 800ebba:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800ebbc:	6878      	ldr	r0, [r7, #4]
 800ebbe:	f002 fea5 	bl	801190c <tcp_rexmit_rto>
      break;
 800ebc2:	e20d      	b.n	800efe0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800ebc4:	4b86      	ldr	r3, [pc, #536]	; (800ede0 <tcp_process+0x5a4>)
 800ebc6:	781b      	ldrb	r3, [r3, #0]
 800ebc8:	f003 0310 	and.w	r3, r3, #16
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	f000 80a1 	beq.w	800ed14 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ebd2:	4b84      	ldr	r3, [pc, #528]	; (800ede4 <tcp_process+0x5a8>)
 800ebd4:	681a      	ldr	r2, [r3, #0]
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebda:	1ad3      	subs	r3, r2, r3
 800ebdc:	3b01      	subs	r3, #1
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	db7e      	blt.n	800ece0 <tcp_process+0x4a4>
 800ebe2:	4b80      	ldr	r3, [pc, #512]	; (800ede4 <tcp_process+0x5a8>)
 800ebe4:	681a      	ldr	r2, [r3, #0]
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ebea:	1ad3      	subs	r3, r2, r3
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	dc77      	bgt.n	800ece0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2204      	movs	r2, #4
 800ebf4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d102      	bne.n	800ec04 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ebfe:	23fa      	movs	r3, #250	; 0xfa
 800ec00:	76bb      	strb	r3, [r7, #26]
 800ec02:	e01d      	b.n	800ec40 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec08:	699b      	ldr	r3, [r3, #24]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d106      	bne.n	800ec1c <tcp_process+0x3e0>
 800ec0e:	4b7b      	ldr	r3, [pc, #492]	; (800edfc <tcp_process+0x5c0>)
 800ec10:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800ec14:	497a      	ldr	r1, [pc, #488]	; (800ee00 <tcp_process+0x5c4>)
 800ec16:	487b      	ldr	r0, [pc, #492]	; (800ee04 <tcp_process+0x5c8>)
 800ec18:	f006 fcf0 	bl	80155fc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec20:	699b      	ldr	r3, [r3, #24]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d00a      	beq.n	800ec3c <tcp_process+0x400>
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec2a:	699b      	ldr	r3, [r3, #24]
 800ec2c:	687a      	ldr	r2, [r7, #4]
 800ec2e:	6910      	ldr	r0, [r2, #16]
 800ec30:	2200      	movs	r2, #0
 800ec32:	6879      	ldr	r1, [r7, #4]
 800ec34:	4798      	blx	r3
 800ec36:	4603      	mov	r3, r0
 800ec38:	76bb      	strb	r3, [r7, #26]
 800ec3a:	e001      	b.n	800ec40 <tcp_process+0x404>
 800ec3c:	23f0      	movs	r3, #240	; 0xf0
 800ec3e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800ec40:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d00a      	beq.n	800ec5e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800ec48:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ec4c:	f113 0f0d 	cmn.w	r3, #13
 800ec50:	d002      	beq.n	800ec58 <tcp_process+0x41c>
              tcp_abort(pcb);
 800ec52:	6878      	ldr	r0, [r7, #4]
 800ec54:	f7fd fd1a 	bl	800c68c <tcp_abort>
            }
            return ERR_ABRT;
 800ec58:	f06f 030c 	mvn.w	r3, #12
 800ec5c:	e1ce      	b.n	800effc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800ec5e:	6878      	ldr	r0, [r7, #4]
 800ec60:	f000 fae0 	bl	800f224 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800ec64:	4b68      	ldr	r3, [pc, #416]	; (800ee08 <tcp_process+0x5cc>)
 800ec66:	881b      	ldrh	r3, [r3, #0]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d005      	beq.n	800ec78 <tcp_process+0x43c>
            recv_acked--;
 800ec6c:	4b66      	ldr	r3, [pc, #408]	; (800ee08 <tcp_process+0x5cc>)
 800ec6e:	881b      	ldrh	r3, [r3, #0]
 800ec70:	3b01      	subs	r3, #1
 800ec72:	b29a      	uxth	r2, r3
 800ec74:	4b64      	ldr	r3, [pc, #400]	; (800ee08 <tcp_process+0x5cc>)
 800ec76:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ec7c:	009a      	lsls	r2, r3, #2
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ec82:	005b      	lsls	r3, r3, #1
 800ec84:	f241 111c 	movw	r1, #4380	; 0x111c
 800ec88:	428b      	cmp	r3, r1
 800ec8a:	bf38      	it	cc
 800ec8c:	460b      	movcc	r3, r1
 800ec8e:	429a      	cmp	r2, r3
 800ec90:	d204      	bcs.n	800ec9c <tcp_process+0x460>
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ec96:	009b      	lsls	r3, r3, #2
 800ec98:	b29b      	uxth	r3, r3
 800ec9a:	e00d      	b.n	800ecb8 <tcp_process+0x47c>
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eca0:	005b      	lsls	r3, r3, #1
 800eca2:	f241 121c 	movw	r2, #4380	; 0x111c
 800eca6:	4293      	cmp	r3, r2
 800eca8:	d904      	bls.n	800ecb4 <tcp_process+0x478>
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ecae:	005b      	lsls	r3, r3, #1
 800ecb0:	b29b      	uxth	r3, r3
 800ecb2:	e001      	b.n	800ecb8 <tcp_process+0x47c>
 800ecb4:	f241 131c 	movw	r3, #4380	; 0x111c
 800ecb8:	687a      	ldr	r2, [r7, #4]
 800ecba:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800ecbe:	4b53      	ldr	r3, [pc, #332]	; (800ee0c <tcp_process+0x5d0>)
 800ecc0:	781b      	ldrb	r3, [r3, #0]
 800ecc2:	f003 0320 	and.w	r3, r3, #32
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d037      	beq.n	800ed3a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	8b5b      	ldrh	r3, [r3, #26]
 800ecce:	f043 0302 	orr.w	r3, r3, #2
 800ecd2:	b29a      	uxth	r2, r3
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	2207      	movs	r2, #7
 800ecdc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800ecde:	e02c      	b.n	800ed3a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ece0:	4b40      	ldr	r3, [pc, #256]	; (800ede4 <tcp_process+0x5a8>)
 800ece2:	6819      	ldr	r1, [r3, #0]
 800ece4:	4b40      	ldr	r3, [pc, #256]	; (800ede8 <tcp_process+0x5ac>)
 800ece6:	881b      	ldrh	r3, [r3, #0]
 800ece8:	461a      	mov	r2, r3
 800ecea:	4b40      	ldr	r3, [pc, #256]	; (800edec <tcp_process+0x5b0>)
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ecf0:	4b3f      	ldr	r3, [pc, #252]	; (800edf0 <tcp_process+0x5b4>)
 800ecf2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ecf4:	885b      	ldrh	r3, [r3, #2]
 800ecf6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ecf8:	4a3d      	ldr	r2, [pc, #244]	; (800edf0 <tcp_process+0x5b4>)
 800ecfa:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ecfc:	8812      	ldrh	r2, [r2, #0]
 800ecfe:	b292      	uxth	r2, r2
 800ed00:	9202      	str	r2, [sp, #8]
 800ed02:	9301      	str	r3, [sp, #4]
 800ed04:	4b3b      	ldr	r3, [pc, #236]	; (800edf4 <tcp_process+0x5b8>)
 800ed06:	9300      	str	r3, [sp, #0]
 800ed08:	4b3b      	ldr	r3, [pc, #236]	; (800edf8 <tcp_process+0x5bc>)
 800ed0a:	4602      	mov	r2, r0
 800ed0c:	6878      	ldr	r0, [r7, #4]
 800ed0e:	f003 f827 	bl	8011d60 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800ed12:	e167      	b.n	800efe4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ed14:	4b32      	ldr	r3, [pc, #200]	; (800ede0 <tcp_process+0x5a4>)
 800ed16:	781b      	ldrb	r3, [r3, #0]
 800ed18:	f003 0302 	and.w	r3, r3, #2
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	f000 8161 	beq.w	800efe4 <tcp_process+0x7a8>
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed26:	1e5a      	subs	r2, r3, #1
 800ed28:	4b30      	ldr	r3, [pc, #192]	; (800edec <tcp_process+0x5b0>)
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	429a      	cmp	r2, r3
 800ed2e:	f040 8159 	bne.w	800efe4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800ed32:	6878      	ldr	r0, [r7, #4]
 800ed34:	f002 fe0c 	bl	8011950 <tcp_rexmit>
      break;
 800ed38:	e154      	b.n	800efe4 <tcp_process+0x7a8>
 800ed3a:	e153      	b.n	800efe4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800ed3c:	6878      	ldr	r0, [r7, #4]
 800ed3e:	f000 fa71 	bl	800f224 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ed42:	4b32      	ldr	r3, [pc, #200]	; (800ee0c <tcp_process+0x5d0>)
 800ed44:	781b      	ldrb	r3, [r3, #0]
 800ed46:	f003 0320 	and.w	r3, r3, #32
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	f000 814c 	beq.w	800efe8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	8b5b      	ldrh	r3, [r3, #26]
 800ed54:	f043 0302 	orr.w	r3, r3, #2
 800ed58:	b29a      	uxth	r2, r3
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	2207      	movs	r2, #7
 800ed62:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ed64:	e140      	b.n	800efe8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800ed66:	6878      	ldr	r0, [r7, #4]
 800ed68:	f000 fa5c 	bl	800f224 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ed6c:	4b27      	ldr	r3, [pc, #156]	; (800ee0c <tcp_process+0x5d0>)
 800ed6e:	781b      	ldrb	r3, [r3, #0]
 800ed70:	f003 0320 	and.w	r3, r3, #32
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d071      	beq.n	800ee5c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ed78:	4b19      	ldr	r3, [pc, #100]	; (800ede0 <tcp_process+0x5a4>)
 800ed7a:	781b      	ldrb	r3, [r3, #0]
 800ed7c:	f003 0310 	and.w	r3, r3, #16
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d060      	beq.n	800ee46 <tcp_process+0x60a>
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ed88:	4b16      	ldr	r3, [pc, #88]	; (800ede4 <tcp_process+0x5a8>)
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	429a      	cmp	r2, r3
 800ed8e:	d15a      	bne.n	800ee46 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d156      	bne.n	800ee46 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	8b5b      	ldrh	r3, [r3, #26]
 800ed9c:	f043 0302 	orr.w	r3, r3, #2
 800eda0:	b29a      	uxth	r2, r3
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800eda6:	6878      	ldr	r0, [r7, #4]
 800eda8:	f7fe fdbe 	bl	800d928 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800edac:	4b18      	ldr	r3, [pc, #96]	; (800ee10 <tcp_process+0x5d4>)
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	687a      	ldr	r2, [r7, #4]
 800edb2:	429a      	cmp	r2, r3
 800edb4:	d105      	bne.n	800edc2 <tcp_process+0x586>
 800edb6:	4b16      	ldr	r3, [pc, #88]	; (800ee10 <tcp_process+0x5d4>)
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	68db      	ldr	r3, [r3, #12]
 800edbc:	4a14      	ldr	r2, [pc, #80]	; (800ee10 <tcp_process+0x5d4>)
 800edbe:	6013      	str	r3, [r2, #0]
 800edc0:	e02e      	b.n	800ee20 <tcp_process+0x5e4>
 800edc2:	4b13      	ldr	r3, [pc, #76]	; (800ee10 <tcp_process+0x5d4>)
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	617b      	str	r3, [r7, #20]
 800edc8:	e027      	b.n	800ee1a <tcp_process+0x5de>
 800edca:	697b      	ldr	r3, [r7, #20]
 800edcc:	68db      	ldr	r3, [r3, #12]
 800edce:	687a      	ldr	r2, [r7, #4]
 800edd0:	429a      	cmp	r2, r3
 800edd2:	d11f      	bne.n	800ee14 <tcp_process+0x5d8>
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	68da      	ldr	r2, [r3, #12]
 800edd8:	697b      	ldr	r3, [r7, #20]
 800edda:	60da      	str	r2, [r3, #12]
 800eddc:	e020      	b.n	800ee20 <tcp_process+0x5e4>
 800edde:	bf00      	nop
 800ede0:	20004afc 	.word	0x20004afc
 800ede4:	20004af4 	.word	0x20004af4
 800ede8:	20004afa 	.word	0x20004afa
 800edec:	20004af0 	.word	0x20004af0
 800edf0:	20004ae0 	.word	0x20004ae0
 800edf4:	200080d4 	.word	0x200080d4
 800edf8:	200080d8 	.word	0x200080d8
 800edfc:	080182a0 	.word	0x080182a0
 800ee00:	08018540 	.word	0x08018540
 800ee04:	080182ec 	.word	0x080182ec
 800ee08:	20004af8 	.word	0x20004af8
 800ee0c:	20004afd 	.word	0x20004afd
 800ee10:	2000b7d8 	.word	0x2000b7d8
 800ee14:	697b      	ldr	r3, [r7, #20]
 800ee16:	68db      	ldr	r3, [r3, #12]
 800ee18:	617b      	str	r3, [r7, #20]
 800ee1a:	697b      	ldr	r3, [r7, #20]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d1d4      	bne.n	800edca <tcp_process+0x58e>
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	2200      	movs	r2, #0
 800ee24:	60da      	str	r2, [r3, #12]
 800ee26:	4b77      	ldr	r3, [pc, #476]	; (800f004 <tcp_process+0x7c8>)
 800ee28:	2201      	movs	r2, #1
 800ee2a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	220a      	movs	r2, #10
 800ee30:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ee32:	4b75      	ldr	r3, [pc, #468]	; (800f008 <tcp_process+0x7cc>)
 800ee34:	681a      	ldr	r2, [r3, #0]
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	60da      	str	r2, [r3, #12]
 800ee3a:	4a73      	ldr	r2, [pc, #460]	; (800f008 <tcp_process+0x7cc>)
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	6013      	str	r3, [r2, #0]
 800ee40:	f003 f950 	bl	80120e4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ee44:	e0d2      	b.n	800efec <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	8b5b      	ldrh	r3, [r3, #26]
 800ee4a:	f043 0302 	orr.w	r3, r3, #2
 800ee4e:	b29a      	uxth	r2, r3
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	2208      	movs	r2, #8
 800ee58:	751a      	strb	r2, [r3, #20]
      break;
 800ee5a:	e0c7      	b.n	800efec <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ee5c:	4b6b      	ldr	r3, [pc, #428]	; (800f00c <tcp_process+0x7d0>)
 800ee5e:	781b      	ldrb	r3, [r3, #0]
 800ee60:	f003 0310 	and.w	r3, r3, #16
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	f000 80c1 	beq.w	800efec <tcp_process+0x7b0>
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ee6e:	4b68      	ldr	r3, [pc, #416]	; (800f010 <tcp_process+0x7d4>)
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	429a      	cmp	r2, r3
 800ee74:	f040 80ba 	bne.w	800efec <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	f040 80b5 	bne.w	800efec <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	2206      	movs	r2, #6
 800ee86:	751a      	strb	r2, [r3, #20]
      break;
 800ee88:	e0b0      	b.n	800efec <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	f000 f9ca 	bl	800f224 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ee90:	4b60      	ldr	r3, [pc, #384]	; (800f014 <tcp_process+0x7d8>)
 800ee92:	781b      	ldrb	r3, [r3, #0]
 800ee94:	f003 0320 	and.w	r3, r3, #32
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	f000 80a9 	beq.w	800eff0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	8b5b      	ldrh	r3, [r3, #26]
 800eea2:	f043 0302 	orr.w	r3, r3, #2
 800eea6:	b29a      	uxth	r2, r3
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800eeac:	6878      	ldr	r0, [r7, #4]
 800eeae:	f7fe fd3b 	bl	800d928 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800eeb2:	4b59      	ldr	r3, [pc, #356]	; (800f018 <tcp_process+0x7dc>)
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	687a      	ldr	r2, [r7, #4]
 800eeb8:	429a      	cmp	r2, r3
 800eeba:	d105      	bne.n	800eec8 <tcp_process+0x68c>
 800eebc:	4b56      	ldr	r3, [pc, #344]	; (800f018 <tcp_process+0x7dc>)
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	68db      	ldr	r3, [r3, #12]
 800eec2:	4a55      	ldr	r2, [pc, #340]	; (800f018 <tcp_process+0x7dc>)
 800eec4:	6013      	str	r3, [r2, #0]
 800eec6:	e013      	b.n	800eef0 <tcp_process+0x6b4>
 800eec8:	4b53      	ldr	r3, [pc, #332]	; (800f018 <tcp_process+0x7dc>)
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	613b      	str	r3, [r7, #16]
 800eece:	e00c      	b.n	800eeea <tcp_process+0x6ae>
 800eed0:	693b      	ldr	r3, [r7, #16]
 800eed2:	68db      	ldr	r3, [r3, #12]
 800eed4:	687a      	ldr	r2, [r7, #4]
 800eed6:	429a      	cmp	r2, r3
 800eed8:	d104      	bne.n	800eee4 <tcp_process+0x6a8>
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	68da      	ldr	r2, [r3, #12]
 800eede:	693b      	ldr	r3, [r7, #16]
 800eee0:	60da      	str	r2, [r3, #12]
 800eee2:	e005      	b.n	800eef0 <tcp_process+0x6b4>
 800eee4:	693b      	ldr	r3, [r7, #16]
 800eee6:	68db      	ldr	r3, [r3, #12]
 800eee8:	613b      	str	r3, [r7, #16]
 800eeea:	693b      	ldr	r3, [r7, #16]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d1ef      	bne.n	800eed0 <tcp_process+0x694>
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	2200      	movs	r2, #0
 800eef4:	60da      	str	r2, [r3, #12]
 800eef6:	4b43      	ldr	r3, [pc, #268]	; (800f004 <tcp_process+0x7c8>)
 800eef8:	2201      	movs	r2, #1
 800eefa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	220a      	movs	r2, #10
 800ef00:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ef02:	4b41      	ldr	r3, [pc, #260]	; (800f008 <tcp_process+0x7cc>)
 800ef04:	681a      	ldr	r2, [r3, #0]
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	60da      	str	r2, [r3, #12]
 800ef0a:	4a3f      	ldr	r2, [pc, #252]	; (800f008 <tcp_process+0x7cc>)
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	6013      	str	r3, [r2, #0]
 800ef10:	f003 f8e8 	bl	80120e4 <tcp_timer_needed>
      }
      break;
 800ef14:	e06c      	b.n	800eff0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800ef16:	6878      	ldr	r0, [r7, #4]
 800ef18:	f000 f984 	bl	800f224 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ef1c:	4b3b      	ldr	r3, [pc, #236]	; (800f00c <tcp_process+0x7d0>)
 800ef1e:	781b      	ldrb	r3, [r3, #0]
 800ef20:	f003 0310 	and.w	r3, r3, #16
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d065      	beq.n	800eff4 <tcp_process+0x7b8>
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ef2c:	4b38      	ldr	r3, [pc, #224]	; (800f010 <tcp_process+0x7d4>)
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	429a      	cmp	r2, r3
 800ef32:	d15f      	bne.n	800eff4 <tcp_process+0x7b8>
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d15b      	bne.n	800eff4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800ef3c:	6878      	ldr	r0, [r7, #4]
 800ef3e:	f7fe fcf3 	bl	800d928 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ef42:	4b35      	ldr	r3, [pc, #212]	; (800f018 <tcp_process+0x7dc>)
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	687a      	ldr	r2, [r7, #4]
 800ef48:	429a      	cmp	r2, r3
 800ef4a:	d105      	bne.n	800ef58 <tcp_process+0x71c>
 800ef4c:	4b32      	ldr	r3, [pc, #200]	; (800f018 <tcp_process+0x7dc>)
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	68db      	ldr	r3, [r3, #12]
 800ef52:	4a31      	ldr	r2, [pc, #196]	; (800f018 <tcp_process+0x7dc>)
 800ef54:	6013      	str	r3, [r2, #0]
 800ef56:	e013      	b.n	800ef80 <tcp_process+0x744>
 800ef58:	4b2f      	ldr	r3, [pc, #188]	; (800f018 <tcp_process+0x7dc>)
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	60fb      	str	r3, [r7, #12]
 800ef5e:	e00c      	b.n	800ef7a <tcp_process+0x73e>
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	68db      	ldr	r3, [r3, #12]
 800ef64:	687a      	ldr	r2, [r7, #4]
 800ef66:	429a      	cmp	r2, r3
 800ef68:	d104      	bne.n	800ef74 <tcp_process+0x738>
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	68da      	ldr	r2, [r3, #12]
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	60da      	str	r2, [r3, #12]
 800ef72:	e005      	b.n	800ef80 <tcp_process+0x744>
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	68db      	ldr	r3, [r3, #12]
 800ef78:	60fb      	str	r3, [r7, #12]
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d1ef      	bne.n	800ef60 <tcp_process+0x724>
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	2200      	movs	r2, #0
 800ef84:	60da      	str	r2, [r3, #12]
 800ef86:	4b1f      	ldr	r3, [pc, #124]	; (800f004 <tcp_process+0x7c8>)
 800ef88:	2201      	movs	r2, #1
 800ef8a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	220a      	movs	r2, #10
 800ef90:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ef92:	4b1d      	ldr	r3, [pc, #116]	; (800f008 <tcp_process+0x7cc>)
 800ef94:	681a      	ldr	r2, [r3, #0]
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	60da      	str	r2, [r3, #12]
 800ef9a:	4a1b      	ldr	r2, [pc, #108]	; (800f008 <tcp_process+0x7cc>)
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	6013      	str	r3, [r2, #0]
 800efa0:	f003 f8a0 	bl	80120e4 <tcp_timer_needed>
      }
      break;
 800efa4:	e026      	b.n	800eff4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800efa6:	6878      	ldr	r0, [r7, #4]
 800efa8:	f000 f93c 	bl	800f224 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800efac:	4b17      	ldr	r3, [pc, #92]	; (800f00c <tcp_process+0x7d0>)
 800efae:	781b      	ldrb	r3, [r3, #0]
 800efb0:	f003 0310 	and.w	r3, r3, #16
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d01f      	beq.n	800eff8 <tcp_process+0x7bc>
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800efbc:	4b14      	ldr	r3, [pc, #80]	; (800f010 <tcp_process+0x7d4>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	429a      	cmp	r2, r3
 800efc2:	d119      	bne.n	800eff8 <tcp_process+0x7bc>
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d115      	bne.n	800eff8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800efcc:	4b11      	ldr	r3, [pc, #68]	; (800f014 <tcp_process+0x7d8>)
 800efce:	781b      	ldrb	r3, [r3, #0]
 800efd0:	f043 0310 	orr.w	r3, r3, #16
 800efd4:	b2da      	uxtb	r2, r3
 800efd6:	4b0f      	ldr	r3, [pc, #60]	; (800f014 <tcp_process+0x7d8>)
 800efd8:	701a      	strb	r2, [r3, #0]
      }
      break;
 800efda:	e00d      	b.n	800eff8 <tcp_process+0x7bc>
    default:
      break;
 800efdc:	bf00      	nop
 800efde:	e00c      	b.n	800effa <tcp_process+0x7be>
      break;
 800efe0:	bf00      	nop
 800efe2:	e00a      	b.n	800effa <tcp_process+0x7be>
      break;
 800efe4:	bf00      	nop
 800efe6:	e008      	b.n	800effa <tcp_process+0x7be>
      break;
 800efe8:	bf00      	nop
 800efea:	e006      	b.n	800effa <tcp_process+0x7be>
      break;
 800efec:	bf00      	nop
 800efee:	e004      	b.n	800effa <tcp_process+0x7be>
      break;
 800eff0:	bf00      	nop
 800eff2:	e002      	b.n	800effa <tcp_process+0x7be>
      break;
 800eff4:	bf00      	nop
 800eff6:	e000      	b.n	800effa <tcp_process+0x7be>
      break;
 800eff8:	bf00      	nop
  }
  return ERR_OK;
 800effa:	2300      	movs	r3, #0
}
 800effc:	4618      	mov	r0, r3
 800effe:	3724      	adds	r7, #36	; 0x24
 800f000:	46bd      	mov	sp, r7
 800f002:	bd90      	pop	{r4, r7, pc}
 800f004:	2000b7d4 	.word	0x2000b7d4
 800f008:	2000b7e8 	.word	0x2000b7e8
 800f00c:	20004afc 	.word	0x20004afc
 800f010:	20004af4 	.word	0x20004af4
 800f014:	20004afd 	.word	0x20004afd
 800f018:	2000b7d8 	.word	0x2000b7d8

0800f01c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f01c:	b590      	push	{r4, r7, lr}
 800f01e:	b085      	sub	sp, #20
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
 800f024:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d106      	bne.n	800f03a <tcp_oos_insert_segment+0x1e>
 800f02c:	4b3b      	ldr	r3, [pc, #236]	; (800f11c <tcp_oos_insert_segment+0x100>)
 800f02e:	f240 421f 	movw	r2, #1055	; 0x41f
 800f032:	493b      	ldr	r1, [pc, #236]	; (800f120 <tcp_oos_insert_segment+0x104>)
 800f034:	483b      	ldr	r0, [pc, #236]	; (800f124 <tcp_oos_insert_segment+0x108>)
 800f036:	f006 fae1 	bl	80155fc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	68db      	ldr	r3, [r3, #12]
 800f03e:	899b      	ldrh	r3, [r3, #12]
 800f040:	b29b      	uxth	r3, r3
 800f042:	4618      	mov	r0, r3
 800f044:	f7fb f986 	bl	800a354 <lwip_htons>
 800f048:	4603      	mov	r3, r0
 800f04a:	b2db      	uxtb	r3, r3
 800f04c:	f003 0301 	and.w	r3, r3, #1
 800f050:	2b00      	cmp	r3, #0
 800f052:	d028      	beq.n	800f0a6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f054:	6838      	ldr	r0, [r7, #0]
 800f056:	f7fe f997 	bl	800d388 <tcp_segs_free>
    next = NULL;
 800f05a:	2300      	movs	r3, #0
 800f05c:	603b      	str	r3, [r7, #0]
 800f05e:	e056      	b.n	800f10e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	68db      	ldr	r3, [r3, #12]
 800f064:	899b      	ldrh	r3, [r3, #12]
 800f066:	b29b      	uxth	r3, r3
 800f068:	4618      	mov	r0, r3
 800f06a:	f7fb f973 	bl	800a354 <lwip_htons>
 800f06e:	4603      	mov	r3, r0
 800f070:	b2db      	uxtb	r3, r3
 800f072:	f003 0301 	and.w	r3, r3, #1
 800f076:	2b00      	cmp	r3, #0
 800f078:	d00d      	beq.n	800f096 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	68db      	ldr	r3, [r3, #12]
 800f07e:	899b      	ldrh	r3, [r3, #12]
 800f080:	b29c      	uxth	r4, r3
 800f082:	2001      	movs	r0, #1
 800f084:	f7fb f966 	bl	800a354 <lwip_htons>
 800f088:	4603      	mov	r3, r0
 800f08a:	461a      	mov	r2, r3
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	68db      	ldr	r3, [r3, #12]
 800f090:	4322      	orrs	r2, r4
 800f092:	b292      	uxth	r2, r2
 800f094:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f096:	683b      	ldr	r3, [r7, #0]
 800f098:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f09a:	683b      	ldr	r3, [r7, #0]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f0a0:	68f8      	ldr	r0, [r7, #12]
 800f0a2:	f7fe f986 	bl	800d3b2 <tcp_seg_free>
    while (next &&
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d00e      	beq.n	800f0ca <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	891b      	ldrh	r3, [r3, #8]
 800f0b0:	461a      	mov	r2, r3
 800f0b2:	4b1d      	ldr	r3, [pc, #116]	; (800f128 <tcp_oos_insert_segment+0x10c>)
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	441a      	add	r2, r3
 800f0b8:	683b      	ldr	r3, [r7, #0]
 800f0ba:	68db      	ldr	r3, [r3, #12]
 800f0bc:	685b      	ldr	r3, [r3, #4]
 800f0be:	6839      	ldr	r1, [r7, #0]
 800f0c0:	8909      	ldrh	r1, [r1, #8]
 800f0c2:	440b      	add	r3, r1
 800f0c4:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	daca      	bge.n	800f060 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f0ca:	683b      	ldr	r3, [r7, #0]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d01e      	beq.n	800f10e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	891b      	ldrh	r3, [r3, #8]
 800f0d4:	461a      	mov	r2, r3
 800f0d6:	4b14      	ldr	r3, [pc, #80]	; (800f128 <tcp_oos_insert_segment+0x10c>)
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	441a      	add	r2, r3
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	68db      	ldr	r3, [r3, #12]
 800f0e0:	685b      	ldr	r3, [r3, #4]
 800f0e2:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	dd12      	ble.n	800f10e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f0e8:	683b      	ldr	r3, [r7, #0]
 800f0ea:	68db      	ldr	r3, [r3, #12]
 800f0ec:	685b      	ldr	r3, [r3, #4]
 800f0ee:	b29a      	uxth	r2, r3
 800f0f0:	4b0d      	ldr	r3, [pc, #52]	; (800f128 <tcp_oos_insert_segment+0x10c>)
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	b29b      	uxth	r3, r3
 800f0f6:	1ad3      	subs	r3, r2, r3
 800f0f8:	b29a      	uxth	r2, r3
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	685a      	ldr	r2, [r3, #4]
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	891b      	ldrh	r3, [r3, #8]
 800f106:	4619      	mov	r1, r3
 800f108:	4610      	mov	r0, r2
 800f10a:	f7fc fb49 	bl	800b7a0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	683a      	ldr	r2, [r7, #0]
 800f112:	601a      	str	r2, [r3, #0]
}
 800f114:	bf00      	nop
 800f116:	3714      	adds	r7, #20
 800f118:	46bd      	mov	sp, r7
 800f11a:	bd90      	pop	{r4, r7, pc}
 800f11c:	080182a0 	.word	0x080182a0
 800f120:	08018560 	.word	0x08018560
 800f124:	080182ec 	.word	0x080182ec
 800f128:	20004af0 	.word	0x20004af0

0800f12c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f12c:	b5b0      	push	{r4, r5, r7, lr}
 800f12e:	b086      	sub	sp, #24
 800f130:	af00      	add	r7, sp, #0
 800f132:	60f8      	str	r0, [r7, #12]
 800f134:	60b9      	str	r1, [r7, #8]
 800f136:	607a      	str	r2, [r7, #4]
 800f138:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f13a:	e03e      	b.n	800f1ba <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f13c:	68bb      	ldr	r3, [r7, #8]
 800f13e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f140:	68bb      	ldr	r3, [r7, #8]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f146:	697b      	ldr	r3, [r7, #20]
 800f148:	685b      	ldr	r3, [r3, #4]
 800f14a:	4618      	mov	r0, r3
 800f14c:	f7fc fd3c 	bl	800bbc8 <pbuf_clen>
 800f150:	4603      	mov	r3, r0
 800f152:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f15a:	8a7a      	ldrh	r2, [r7, #18]
 800f15c:	429a      	cmp	r2, r3
 800f15e:	d906      	bls.n	800f16e <tcp_free_acked_segments+0x42>
 800f160:	4b2a      	ldr	r3, [pc, #168]	; (800f20c <tcp_free_acked_segments+0xe0>)
 800f162:	f240 4257 	movw	r2, #1111	; 0x457
 800f166:	492a      	ldr	r1, [pc, #168]	; (800f210 <tcp_free_acked_segments+0xe4>)
 800f168:	482a      	ldr	r0, [pc, #168]	; (800f214 <tcp_free_acked_segments+0xe8>)
 800f16a:	f006 fa47 	bl	80155fc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800f174:	8a7b      	ldrh	r3, [r7, #18]
 800f176:	1ad3      	subs	r3, r2, r3
 800f178:	b29a      	uxth	r2, r3
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f180:	697b      	ldr	r3, [r7, #20]
 800f182:	891a      	ldrh	r2, [r3, #8]
 800f184:	4b24      	ldr	r3, [pc, #144]	; (800f218 <tcp_free_acked_segments+0xec>)
 800f186:	881b      	ldrh	r3, [r3, #0]
 800f188:	4413      	add	r3, r2
 800f18a:	b29a      	uxth	r2, r3
 800f18c:	4b22      	ldr	r3, [pc, #136]	; (800f218 <tcp_free_acked_segments+0xec>)
 800f18e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f190:	6978      	ldr	r0, [r7, #20]
 800f192:	f7fe f90e 	bl	800d3b2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d00c      	beq.n	800f1ba <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f1a0:	68bb      	ldr	r3, [r7, #8]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d109      	bne.n	800f1ba <tcp_free_acked_segments+0x8e>
 800f1a6:	683b      	ldr	r3, [r7, #0]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d106      	bne.n	800f1ba <tcp_free_acked_segments+0x8e>
 800f1ac:	4b17      	ldr	r3, [pc, #92]	; (800f20c <tcp_free_acked_segments+0xe0>)
 800f1ae:	f240 4261 	movw	r2, #1121	; 0x461
 800f1b2:	491a      	ldr	r1, [pc, #104]	; (800f21c <tcp_free_acked_segments+0xf0>)
 800f1b4:	4817      	ldr	r0, [pc, #92]	; (800f214 <tcp_free_acked_segments+0xe8>)
 800f1b6:	f006 fa21 	bl	80155fc <iprintf>
  while (seg_list != NULL &&
 800f1ba:	68bb      	ldr	r3, [r7, #8]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d020      	beq.n	800f202 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f1c0:	68bb      	ldr	r3, [r7, #8]
 800f1c2:	68db      	ldr	r3, [r3, #12]
 800f1c4:	685b      	ldr	r3, [r3, #4]
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	f7fb f8d9 	bl	800a37e <lwip_htonl>
 800f1cc:	4604      	mov	r4, r0
 800f1ce:	68bb      	ldr	r3, [r7, #8]
 800f1d0:	891b      	ldrh	r3, [r3, #8]
 800f1d2:	461d      	mov	r5, r3
 800f1d4:	68bb      	ldr	r3, [r7, #8]
 800f1d6:	68db      	ldr	r3, [r3, #12]
 800f1d8:	899b      	ldrh	r3, [r3, #12]
 800f1da:	b29b      	uxth	r3, r3
 800f1dc:	4618      	mov	r0, r3
 800f1de:	f7fb f8b9 	bl	800a354 <lwip_htons>
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	b2db      	uxtb	r3, r3
 800f1e6:	f003 0303 	and.w	r3, r3, #3
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d001      	beq.n	800f1f2 <tcp_free_acked_segments+0xc6>
 800f1ee:	2301      	movs	r3, #1
 800f1f0:	e000      	b.n	800f1f4 <tcp_free_acked_segments+0xc8>
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	442b      	add	r3, r5
 800f1f6:	18e2      	adds	r2, r4, r3
 800f1f8:	4b09      	ldr	r3, [pc, #36]	; (800f220 <tcp_free_acked_segments+0xf4>)
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	dd9c      	ble.n	800f13c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f202:	68bb      	ldr	r3, [r7, #8]
}
 800f204:	4618      	mov	r0, r3
 800f206:	3718      	adds	r7, #24
 800f208:	46bd      	mov	sp, r7
 800f20a:	bdb0      	pop	{r4, r5, r7, pc}
 800f20c:	080182a0 	.word	0x080182a0
 800f210:	08018588 	.word	0x08018588
 800f214:	080182ec 	.word	0x080182ec
 800f218:	20004af8 	.word	0x20004af8
 800f21c:	080185b0 	.word	0x080185b0
 800f220:	20004af4 	.word	0x20004af4

0800f224 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f224:	b5b0      	push	{r4, r5, r7, lr}
 800f226:	b094      	sub	sp, #80	; 0x50
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f22c:	2300      	movs	r3, #0
 800f22e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d106      	bne.n	800f244 <tcp_receive+0x20>
 800f236:	4ba6      	ldr	r3, [pc, #664]	; (800f4d0 <tcp_receive+0x2ac>)
 800f238:	f240 427b 	movw	r2, #1147	; 0x47b
 800f23c:	49a5      	ldr	r1, [pc, #660]	; (800f4d4 <tcp_receive+0x2b0>)
 800f23e:	48a6      	ldr	r0, [pc, #664]	; (800f4d8 <tcp_receive+0x2b4>)
 800f240:	f006 f9dc 	bl	80155fc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	7d1b      	ldrb	r3, [r3, #20]
 800f248:	2b03      	cmp	r3, #3
 800f24a:	d806      	bhi.n	800f25a <tcp_receive+0x36>
 800f24c:	4ba0      	ldr	r3, [pc, #640]	; (800f4d0 <tcp_receive+0x2ac>)
 800f24e:	f240 427c 	movw	r2, #1148	; 0x47c
 800f252:	49a2      	ldr	r1, [pc, #648]	; (800f4dc <tcp_receive+0x2b8>)
 800f254:	48a0      	ldr	r0, [pc, #640]	; (800f4d8 <tcp_receive+0x2b4>)
 800f256:	f006 f9d1 	bl	80155fc <iprintf>

  if (flags & TCP_ACK) {
 800f25a:	4ba1      	ldr	r3, [pc, #644]	; (800f4e0 <tcp_receive+0x2bc>)
 800f25c:	781b      	ldrb	r3, [r3, #0]
 800f25e:	f003 0310 	and.w	r3, r3, #16
 800f262:	2b00      	cmp	r3, #0
 800f264:	f000 8263 	beq.w	800f72e <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f26e:	461a      	mov	r2, r3
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f274:	4413      	add	r3, r2
 800f276:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f27c:	4b99      	ldr	r3, [pc, #612]	; (800f4e4 <tcp_receive+0x2c0>)
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	1ad3      	subs	r3, r2, r3
 800f282:	2b00      	cmp	r3, #0
 800f284:	db1b      	blt.n	800f2be <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f28a:	4b96      	ldr	r3, [pc, #600]	; (800f4e4 <tcp_receive+0x2c0>)
 800f28c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f28e:	429a      	cmp	r2, r3
 800f290:	d106      	bne.n	800f2a0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f296:	4b94      	ldr	r3, [pc, #592]	; (800f4e8 <tcp_receive+0x2c4>)
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	1ad3      	subs	r3, r2, r3
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	db0e      	blt.n	800f2be <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f2a4:	4b90      	ldr	r3, [pc, #576]	; (800f4e8 <tcp_receive+0x2c4>)
 800f2a6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f2a8:	429a      	cmp	r2, r3
 800f2aa:	d125      	bne.n	800f2f8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f2ac:	4b8f      	ldr	r3, [pc, #572]	; (800f4ec <tcp_receive+0x2c8>)
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	89db      	ldrh	r3, [r3, #14]
 800f2b2:	b29a      	uxth	r2, r3
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f2ba:	429a      	cmp	r2, r3
 800f2bc:	d91c      	bls.n	800f2f8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f2be:	4b8b      	ldr	r3, [pc, #556]	; (800f4ec <tcp_receive+0x2c8>)
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	89db      	ldrh	r3, [r3, #14]
 800f2c4:	b29a      	uxth	r2, r3
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f2d8:	429a      	cmp	r2, r3
 800f2da:	d205      	bcs.n	800f2e8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800f2e8:	4b7e      	ldr	r3, [pc, #504]	; (800f4e4 <tcp_receive+0x2c0>)
 800f2ea:	681a      	ldr	r2, [r3, #0]
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800f2f0:	4b7d      	ldr	r3, [pc, #500]	; (800f4e8 <tcp_receive+0x2c4>)
 800f2f2:	681a      	ldr	r2, [r3, #0]
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f2f8:	4b7b      	ldr	r3, [pc, #492]	; (800f4e8 <tcp_receive+0x2c4>)
 800f2fa:	681a      	ldr	r2, [r3, #0]
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f300:	1ad3      	subs	r3, r2, r3
 800f302:	2b00      	cmp	r3, #0
 800f304:	dc58      	bgt.n	800f3b8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f306:	4b7a      	ldr	r3, [pc, #488]	; (800f4f0 <tcp_receive+0x2cc>)
 800f308:	881b      	ldrh	r3, [r3, #0]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d14b      	bne.n	800f3a6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f312:	687a      	ldr	r2, [r7, #4]
 800f314:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800f318:	4413      	add	r3, r2
 800f31a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f31c:	429a      	cmp	r2, r3
 800f31e:	d142      	bne.n	800f3a6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f326:	2b00      	cmp	r3, #0
 800f328:	db3d      	blt.n	800f3a6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f32e:	4b6e      	ldr	r3, [pc, #440]	; (800f4e8 <tcp_receive+0x2c4>)
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	429a      	cmp	r2, r3
 800f334:	d137      	bne.n	800f3a6 <tcp_receive+0x182>
              found_dupack = 1;
 800f336:	2301      	movs	r3, #1
 800f338:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f340:	2bff      	cmp	r3, #255	; 0xff
 800f342:	d007      	beq.n	800f354 <tcp_receive+0x130>
                ++pcb->dupacks;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f34a:	3301      	adds	r3, #1
 800f34c:	b2da      	uxtb	r2, r3
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f35a:	2b03      	cmp	r3, #3
 800f35c:	d91b      	bls.n	800f396 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f368:	4413      	add	r3, r2
 800f36a:	b29a      	uxth	r2, r3
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f372:	429a      	cmp	r2, r3
 800f374:	d30a      	bcc.n	800f38c <tcp_receive+0x168>
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f380:	4413      	add	r3, r2
 800f382:	b29a      	uxth	r2, r3
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f38a:	e004      	b.n	800f396 <tcp_receive+0x172>
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f392:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f39c:	2b02      	cmp	r3, #2
 800f39e:	d902      	bls.n	800f3a6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f3a0:	6878      	ldr	r0, [r7, #4]
 800f3a2:	f002 fb41 	bl	8011a28 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f3a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	f040 8160 	bne.w	800f66e <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f3b6:	e15a      	b.n	800f66e <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f3b8:	4b4b      	ldr	r3, [pc, #300]	; (800f4e8 <tcp_receive+0x2c4>)
 800f3ba:	681a      	ldr	r2, [r3, #0]
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3c0:	1ad3      	subs	r3, r2, r3
 800f3c2:	3b01      	subs	r3, #1
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	f2c0 814d 	blt.w	800f664 <tcp_receive+0x440>
 800f3ca:	4b47      	ldr	r3, [pc, #284]	; (800f4e8 <tcp_receive+0x2c4>)
 800f3cc:	681a      	ldr	r2, [r3, #0]
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f3d2:	1ad3      	subs	r3, r2, r3
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	f300 8145 	bgt.w	800f664 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	8b5b      	ldrh	r3, [r3, #26]
 800f3de:	f003 0304 	and.w	r3, r3, #4
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d010      	beq.n	800f408 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	8b5b      	ldrh	r3, [r3, #26]
 800f3ea:	f023 0304 	bic.w	r3, r3, #4
 800f3ee:	b29a      	uxth	r2, r3
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	2200      	movs	r2, #0
 800f404:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	2200      	movs	r2, #0
 800f40c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f416:	10db      	asrs	r3, r3, #3
 800f418:	b21b      	sxth	r3, r3
 800f41a:	b29a      	uxth	r2, r3
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f422:	b29b      	uxth	r3, r3
 800f424:	4413      	add	r3, r2
 800f426:	b29b      	uxth	r3, r3
 800f428:	b21a      	sxth	r2, r3
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f430:	4b2d      	ldr	r3, [pc, #180]	; (800f4e8 <tcp_receive+0x2c4>)
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	b29a      	uxth	r2, r3
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f43a:	b29b      	uxth	r3, r3
 800f43c:	1ad3      	subs	r3, r2, r3
 800f43e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	2200      	movs	r2, #0
 800f444:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800f448:	4b27      	ldr	r3, [pc, #156]	; (800f4e8 <tcp_receive+0x2c4>)
 800f44a:	681a      	ldr	r2, [r3, #0]
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	7d1b      	ldrb	r3, [r3, #20]
 800f454:	2b03      	cmp	r3, #3
 800f456:	f240 8096 	bls.w	800f586 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f466:	429a      	cmp	r2, r3
 800f468:	d244      	bcs.n	800f4f4 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	8b5b      	ldrh	r3, [r3, #26]
 800f46e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f472:	2b00      	cmp	r3, #0
 800f474:	d001      	beq.n	800f47a <tcp_receive+0x256>
 800f476:	2301      	movs	r3, #1
 800f478:	e000      	b.n	800f47c <tcp_receive+0x258>
 800f47a:	2302      	movs	r3, #2
 800f47c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f480:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f484:	b29a      	uxth	r2, r3
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f48a:	fb12 f303 	smulbb	r3, r2, r3
 800f48e:	b29b      	uxth	r3, r3
 800f490:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f492:	4293      	cmp	r3, r2
 800f494:	bf28      	it	cs
 800f496:	4613      	movcs	r3, r2
 800f498:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f4a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f4a2:	4413      	add	r3, r2
 800f4a4:	b29a      	uxth	r2, r3
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f4ac:	429a      	cmp	r2, r3
 800f4ae:	d309      	bcc.n	800f4c4 <tcp_receive+0x2a0>
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f4b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f4b8:	4413      	add	r3, r2
 800f4ba:	b29a      	uxth	r2, r3
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f4c2:	e060      	b.n	800f586 <tcp_receive+0x362>
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f4ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f4ce:	e05a      	b.n	800f586 <tcp_receive+0x362>
 800f4d0:	080182a0 	.word	0x080182a0
 800f4d4:	080185d0 	.word	0x080185d0
 800f4d8:	080182ec 	.word	0x080182ec
 800f4dc:	080185ec 	.word	0x080185ec
 800f4e0:	20004afc 	.word	0x20004afc
 800f4e4:	20004af0 	.word	0x20004af0
 800f4e8:	20004af4 	.word	0x20004af4
 800f4ec:	20004ae0 	.word	0x20004ae0
 800f4f0:	20004afa 	.word	0x20004afa
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f4fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f4fc:	4413      	add	r3, r2
 800f4fe:	b29a      	uxth	r2, r3
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f506:	429a      	cmp	r2, r3
 800f508:	d309      	bcc.n	800f51e <tcp_receive+0x2fa>
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f510:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f512:	4413      	add	r3, r2
 800f514:	b29a      	uxth	r2, r3
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f51c:	e004      	b.n	800f528 <tcp_receive+0x304>
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f524:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f534:	429a      	cmp	r2, r3
 800f536:	d326      	bcc.n	800f586 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f544:	1ad3      	subs	r3, r2, r3
 800f546:	b29a      	uxth	r2, r3
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f558:	4413      	add	r3, r2
 800f55a:	b29a      	uxth	r2, r3
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f562:	429a      	cmp	r2, r3
 800f564:	d30a      	bcc.n	800f57c <tcp_receive+0x358>
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f570:	4413      	add	r3, r2
 800f572:	b29a      	uxth	r2, r3
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f57a:	e004      	b.n	800f586 <tcp_receive+0x362>
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f582:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f58e:	4a98      	ldr	r2, [pc, #608]	; (800f7f0 <tcp_receive+0x5cc>)
 800f590:	6878      	ldr	r0, [r7, #4]
 800f592:	f7ff fdcb 	bl	800f12c <tcp_free_acked_segments>
 800f596:	4602      	mov	r2, r0
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5a4:	4a93      	ldr	r2, [pc, #588]	; (800f7f4 <tcp_receive+0x5d0>)
 800f5a6:	6878      	ldr	r0, [r7, #4]
 800f5a8:	f7ff fdc0 	bl	800f12c <tcp_free_acked_segments>
 800f5ac:	4602      	mov	r2, r0
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d104      	bne.n	800f5c4 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f5c0:	861a      	strh	r2, [r3, #48]	; 0x30
 800f5c2:	e002      	b.n	800f5ca <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d103      	bne.n	800f5e0 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	2200      	movs	r2, #0
 800f5dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f5e6:	4b84      	ldr	r3, [pc, #528]	; (800f7f8 <tcp_receive+0x5d4>)
 800f5e8:	881b      	ldrh	r3, [r3, #0]
 800f5ea:	4413      	add	r3, r2
 800f5ec:	b29a      	uxth	r2, r3
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	8b5b      	ldrh	r3, [r3, #26]
 800f5f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d035      	beq.n	800f66c <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f604:	2b00      	cmp	r3, #0
 800f606:	d118      	bne.n	800f63a <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d00c      	beq.n	800f62a <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f618:	68db      	ldr	r3, [r3, #12]
 800f61a:	685b      	ldr	r3, [r3, #4]
 800f61c:	4618      	mov	r0, r3
 800f61e:	f7fa feae 	bl	800a37e <lwip_htonl>
 800f622:	4603      	mov	r3, r0
 800f624:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f626:	2b00      	cmp	r3, #0
 800f628:	dc20      	bgt.n	800f66c <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	8b5b      	ldrh	r3, [r3, #26]
 800f62e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f632:	b29a      	uxth	r2, r3
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f638:	e018      	b.n	800f66c <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f642:	68db      	ldr	r3, [r3, #12]
 800f644:	685b      	ldr	r3, [r3, #4]
 800f646:	4618      	mov	r0, r3
 800f648:	f7fa fe99 	bl	800a37e <lwip_htonl>
 800f64c:	4603      	mov	r3, r0
 800f64e:	1ae3      	subs	r3, r4, r3
 800f650:	2b00      	cmp	r3, #0
 800f652:	dc0b      	bgt.n	800f66c <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	8b5b      	ldrh	r3, [r3, #26]
 800f658:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f65c:	b29a      	uxth	r2, r3
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f662:	e003      	b.n	800f66c <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f664:	6878      	ldr	r0, [r7, #4]
 800f666:	f002 fbcd 	bl	8011e04 <tcp_send_empty_ack>
 800f66a:	e000      	b.n	800f66e <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f66c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f672:	2b00      	cmp	r3, #0
 800f674:	d05b      	beq.n	800f72e <tcp_receive+0x50a>
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f67a:	4b60      	ldr	r3, [pc, #384]	; (800f7fc <tcp_receive+0x5d8>)
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	1ad3      	subs	r3, r2, r3
 800f680:	2b00      	cmp	r3, #0
 800f682:	da54      	bge.n	800f72e <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f684:	4b5e      	ldr	r3, [pc, #376]	; (800f800 <tcp_receive+0x5dc>)
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	b29a      	uxth	r2, r3
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f68e:	b29b      	uxth	r3, r3
 800f690:	1ad3      	subs	r3, r2, r3
 800f692:	b29b      	uxth	r3, r3
 800f694:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f698:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f6a2:	10db      	asrs	r3, r3, #3
 800f6a4:	b21b      	sxth	r3, r3
 800f6a6:	b29b      	uxth	r3, r3
 800f6a8:	1ad3      	subs	r3, r2, r3
 800f6aa:	b29b      	uxth	r3, r3
 800f6ac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f6b6:	b29a      	uxth	r2, r3
 800f6b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f6bc:	4413      	add	r3, r2
 800f6be:	b29b      	uxth	r3, r3
 800f6c0:	b21a      	sxth	r2, r3
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f6c6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	da05      	bge.n	800f6da <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800f6ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f6d2:	425b      	negs	r3, r3
 800f6d4:	b29b      	uxth	r3, r3
 800f6d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f6da:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f6e4:	109b      	asrs	r3, r3, #2
 800f6e6:	b21b      	sxth	r3, r3
 800f6e8:	b29b      	uxth	r3, r3
 800f6ea:	1ad3      	subs	r3, r2, r3
 800f6ec:	b29b      	uxth	r3, r3
 800f6ee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f6f8:	b29a      	uxth	r2, r3
 800f6fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f6fe:	4413      	add	r3, r2
 800f700:	b29b      	uxth	r3, r3
 800f702:	b21a      	sxth	r2, r3
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f70e:	10db      	asrs	r3, r3, #3
 800f710:	b21b      	sxth	r3, r3
 800f712:	b29a      	uxth	r2, r3
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f71a:	b29b      	uxth	r3, r3
 800f71c:	4413      	add	r3, r2
 800f71e:	b29b      	uxth	r3, r3
 800f720:	b21a      	sxth	r2, r3
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	2200      	movs	r2, #0
 800f72c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f72e:	4b35      	ldr	r3, [pc, #212]	; (800f804 <tcp_receive+0x5e0>)
 800f730:	881b      	ldrh	r3, [r3, #0]
 800f732:	2b00      	cmp	r3, #0
 800f734:	f000 84e1 	beq.w	80100fa <tcp_receive+0xed6>
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	7d1b      	ldrb	r3, [r3, #20]
 800f73c:	2b06      	cmp	r3, #6
 800f73e:	f200 84dc 	bhi.w	80100fa <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f746:	4b30      	ldr	r3, [pc, #192]	; (800f808 <tcp_receive+0x5e4>)
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	1ad3      	subs	r3, r2, r3
 800f74c:	3b01      	subs	r3, #1
 800f74e:	2b00      	cmp	r3, #0
 800f750:	f2c0 808e 	blt.w	800f870 <tcp_receive+0x64c>
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f758:	4b2a      	ldr	r3, [pc, #168]	; (800f804 <tcp_receive+0x5e0>)
 800f75a:	881b      	ldrh	r3, [r3, #0]
 800f75c:	4619      	mov	r1, r3
 800f75e:	4b2a      	ldr	r3, [pc, #168]	; (800f808 <tcp_receive+0x5e4>)
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	440b      	add	r3, r1
 800f764:	1ad3      	subs	r3, r2, r3
 800f766:	3301      	adds	r3, #1
 800f768:	2b00      	cmp	r3, #0
 800f76a:	f300 8081 	bgt.w	800f870 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f76e:	4b27      	ldr	r3, [pc, #156]	; (800f80c <tcp_receive+0x5e8>)
 800f770:	685b      	ldr	r3, [r3, #4]
 800f772:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f778:	4b23      	ldr	r3, [pc, #140]	; (800f808 <tcp_receive+0x5e4>)
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	1ad3      	subs	r3, r2, r3
 800f77e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f780:	4b22      	ldr	r3, [pc, #136]	; (800f80c <tcp_receive+0x5e8>)
 800f782:	685b      	ldr	r3, [r3, #4]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d106      	bne.n	800f796 <tcp_receive+0x572>
 800f788:	4b21      	ldr	r3, [pc, #132]	; (800f810 <tcp_receive+0x5ec>)
 800f78a:	f240 5294 	movw	r2, #1428	; 0x594
 800f78e:	4921      	ldr	r1, [pc, #132]	; (800f814 <tcp_receive+0x5f0>)
 800f790:	4821      	ldr	r0, [pc, #132]	; (800f818 <tcp_receive+0x5f4>)
 800f792:	f005 ff33 	bl	80155fc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f798:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f79c:	4293      	cmp	r3, r2
 800f79e:	d906      	bls.n	800f7ae <tcp_receive+0x58a>
 800f7a0:	4b1b      	ldr	r3, [pc, #108]	; (800f810 <tcp_receive+0x5ec>)
 800f7a2:	f240 5295 	movw	r2, #1429	; 0x595
 800f7a6:	491d      	ldr	r1, [pc, #116]	; (800f81c <tcp_receive+0x5f8>)
 800f7a8:	481b      	ldr	r0, [pc, #108]	; (800f818 <tcp_receive+0x5f4>)
 800f7aa:	f005 ff27 	bl	80155fc <iprintf>
      off = (u16_t)off32;
 800f7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7b0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f7b4:	4b15      	ldr	r3, [pc, #84]	; (800f80c <tcp_receive+0x5e8>)
 800f7b6:	685b      	ldr	r3, [r3, #4]
 800f7b8:	891b      	ldrh	r3, [r3, #8]
 800f7ba:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f7be:	429a      	cmp	r2, r3
 800f7c0:	d906      	bls.n	800f7d0 <tcp_receive+0x5ac>
 800f7c2:	4b13      	ldr	r3, [pc, #76]	; (800f810 <tcp_receive+0x5ec>)
 800f7c4:	f240 5297 	movw	r2, #1431	; 0x597
 800f7c8:	4915      	ldr	r1, [pc, #84]	; (800f820 <tcp_receive+0x5fc>)
 800f7ca:	4813      	ldr	r0, [pc, #76]	; (800f818 <tcp_receive+0x5f4>)
 800f7cc:	f005 ff16 	bl	80155fc <iprintf>
      inseg.len -= off;
 800f7d0:	4b0e      	ldr	r3, [pc, #56]	; (800f80c <tcp_receive+0x5e8>)
 800f7d2:	891a      	ldrh	r2, [r3, #8]
 800f7d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f7d8:	1ad3      	subs	r3, r2, r3
 800f7da:	b29a      	uxth	r2, r3
 800f7dc:	4b0b      	ldr	r3, [pc, #44]	; (800f80c <tcp_receive+0x5e8>)
 800f7de:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f7e0:	4b0a      	ldr	r3, [pc, #40]	; (800f80c <tcp_receive+0x5e8>)
 800f7e2:	685b      	ldr	r3, [r3, #4]
 800f7e4:	891a      	ldrh	r2, [r3, #8]
 800f7e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f7ea:	1ad3      	subs	r3, r2, r3
 800f7ec:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800f7ee:	e029      	b.n	800f844 <tcp_receive+0x620>
 800f7f0:	08018608 	.word	0x08018608
 800f7f4:	08018610 	.word	0x08018610
 800f7f8:	20004af8 	.word	0x20004af8
 800f7fc:	20004af4 	.word	0x20004af4
 800f800:	2000b7dc 	.word	0x2000b7dc
 800f804:	20004afa 	.word	0x20004afa
 800f808:	20004af0 	.word	0x20004af0
 800f80c:	20004ad0 	.word	0x20004ad0
 800f810:	080182a0 	.word	0x080182a0
 800f814:	08018618 	.word	0x08018618
 800f818:	080182ec 	.word	0x080182ec
 800f81c:	08018628 	.word	0x08018628
 800f820:	08018638 	.word	0x08018638
        off -= p->len;
 800f824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f826:	895b      	ldrh	r3, [r3, #10]
 800f828:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f82c:	1ad3      	subs	r3, r2, r3
 800f82e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f832:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f834:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f836:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f83a:	2200      	movs	r2, #0
 800f83c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f83e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800f844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f846:	895b      	ldrh	r3, [r3, #10]
 800f848:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f84c:	429a      	cmp	r2, r3
 800f84e:	d8e9      	bhi.n	800f824 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f850:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f854:	4619      	mov	r1, r3
 800f856:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f858:	f7fc f8a2 	bl	800b9a0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f860:	4a91      	ldr	r2, [pc, #580]	; (800faa8 <tcp_receive+0x884>)
 800f862:	6013      	str	r3, [r2, #0]
 800f864:	4b91      	ldr	r3, [pc, #580]	; (800faac <tcp_receive+0x888>)
 800f866:	68db      	ldr	r3, [r3, #12]
 800f868:	4a8f      	ldr	r2, [pc, #572]	; (800faa8 <tcp_receive+0x884>)
 800f86a:	6812      	ldr	r2, [r2, #0]
 800f86c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f86e:	e00d      	b.n	800f88c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f870:	4b8d      	ldr	r3, [pc, #564]	; (800faa8 <tcp_receive+0x884>)
 800f872:	681a      	ldr	r2, [r3, #0]
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f878:	1ad3      	subs	r3, r2, r3
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	da06      	bge.n	800f88c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	8b5b      	ldrh	r3, [r3, #26]
 800f882:	f043 0302 	orr.w	r3, r3, #2
 800f886:	b29a      	uxth	r2, r3
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f88c:	4b86      	ldr	r3, [pc, #536]	; (800faa8 <tcp_receive+0x884>)
 800f88e:	681a      	ldr	r2, [r3, #0]
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f894:	1ad3      	subs	r3, r2, r3
 800f896:	2b00      	cmp	r3, #0
 800f898:	f2c0 842a 	blt.w	80100f0 <tcp_receive+0xecc>
 800f89c:	4b82      	ldr	r3, [pc, #520]	; (800faa8 <tcp_receive+0x884>)
 800f89e:	681a      	ldr	r2, [r3, #0]
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8a4:	6879      	ldr	r1, [r7, #4]
 800f8a6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f8a8:	440b      	add	r3, r1
 800f8aa:	1ad3      	subs	r3, r2, r3
 800f8ac:	3301      	adds	r3, #1
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	f300 841e 	bgt.w	80100f0 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f8b8:	4b7b      	ldr	r3, [pc, #492]	; (800faa8 <tcp_receive+0x884>)
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	429a      	cmp	r2, r3
 800f8be:	f040 829a 	bne.w	800fdf6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f8c2:	4b7a      	ldr	r3, [pc, #488]	; (800faac <tcp_receive+0x888>)
 800f8c4:	891c      	ldrh	r4, [r3, #8]
 800f8c6:	4b79      	ldr	r3, [pc, #484]	; (800faac <tcp_receive+0x888>)
 800f8c8:	68db      	ldr	r3, [r3, #12]
 800f8ca:	899b      	ldrh	r3, [r3, #12]
 800f8cc:	b29b      	uxth	r3, r3
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	f7fa fd40 	bl	800a354 <lwip_htons>
 800f8d4:	4603      	mov	r3, r0
 800f8d6:	b2db      	uxtb	r3, r3
 800f8d8:	f003 0303 	and.w	r3, r3, #3
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d001      	beq.n	800f8e4 <tcp_receive+0x6c0>
 800f8e0:	2301      	movs	r3, #1
 800f8e2:	e000      	b.n	800f8e6 <tcp_receive+0x6c2>
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	4423      	add	r3, r4
 800f8e8:	b29a      	uxth	r2, r3
 800f8ea:	4b71      	ldr	r3, [pc, #452]	; (800fab0 <tcp_receive+0x88c>)
 800f8ec:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f8f2:	4b6f      	ldr	r3, [pc, #444]	; (800fab0 <tcp_receive+0x88c>)
 800f8f4:	881b      	ldrh	r3, [r3, #0]
 800f8f6:	429a      	cmp	r2, r3
 800f8f8:	d275      	bcs.n	800f9e6 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f8fa:	4b6c      	ldr	r3, [pc, #432]	; (800faac <tcp_receive+0x888>)
 800f8fc:	68db      	ldr	r3, [r3, #12]
 800f8fe:	899b      	ldrh	r3, [r3, #12]
 800f900:	b29b      	uxth	r3, r3
 800f902:	4618      	mov	r0, r3
 800f904:	f7fa fd26 	bl	800a354 <lwip_htons>
 800f908:	4603      	mov	r3, r0
 800f90a:	b2db      	uxtb	r3, r3
 800f90c:	f003 0301 	and.w	r3, r3, #1
 800f910:	2b00      	cmp	r3, #0
 800f912:	d01f      	beq.n	800f954 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f914:	4b65      	ldr	r3, [pc, #404]	; (800faac <tcp_receive+0x888>)
 800f916:	68db      	ldr	r3, [r3, #12]
 800f918:	899b      	ldrh	r3, [r3, #12]
 800f91a:	b29b      	uxth	r3, r3
 800f91c:	b21b      	sxth	r3, r3
 800f91e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f922:	b21c      	sxth	r4, r3
 800f924:	4b61      	ldr	r3, [pc, #388]	; (800faac <tcp_receive+0x888>)
 800f926:	68db      	ldr	r3, [r3, #12]
 800f928:	899b      	ldrh	r3, [r3, #12]
 800f92a:	b29b      	uxth	r3, r3
 800f92c:	4618      	mov	r0, r3
 800f92e:	f7fa fd11 	bl	800a354 <lwip_htons>
 800f932:	4603      	mov	r3, r0
 800f934:	b2db      	uxtb	r3, r3
 800f936:	b29b      	uxth	r3, r3
 800f938:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f93c:	b29b      	uxth	r3, r3
 800f93e:	4618      	mov	r0, r3
 800f940:	f7fa fd08 	bl	800a354 <lwip_htons>
 800f944:	4603      	mov	r3, r0
 800f946:	b21b      	sxth	r3, r3
 800f948:	4323      	orrs	r3, r4
 800f94a:	b21a      	sxth	r2, r3
 800f94c:	4b57      	ldr	r3, [pc, #348]	; (800faac <tcp_receive+0x888>)
 800f94e:	68db      	ldr	r3, [r3, #12]
 800f950:	b292      	uxth	r2, r2
 800f952:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f958:	4b54      	ldr	r3, [pc, #336]	; (800faac <tcp_receive+0x888>)
 800f95a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f95c:	4b53      	ldr	r3, [pc, #332]	; (800faac <tcp_receive+0x888>)
 800f95e:	68db      	ldr	r3, [r3, #12]
 800f960:	899b      	ldrh	r3, [r3, #12]
 800f962:	b29b      	uxth	r3, r3
 800f964:	4618      	mov	r0, r3
 800f966:	f7fa fcf5 	bl	800a354 <lwip_htons>
 800f96a:	4603      	mov	r3, r0
 800f96c:	b2db      	uxtb	r3, r3
 800f96e:	f003 0302 	and.w	r3, r3, #2
 800f972:	2b00      	cmp	r3, #0
 800f974:	d005      	beq.n	800f982 <tcp_receive+0x75e>
            inseg.len -= 1;
 800f976:	4b4d      	ldr	r3, [pc, #308]	; (800faac <tcp_receive+0x888>)
 800f978:	891b      	ldrh	r3, [r3, #8]
 800f97a:	3b01      	subs	r3, #1
 800f97c:	b29a      	uxth	r2, r3
 800f97e:	4b4b      	ldr	r3, [pc, #300]	; (800faac <tcp_receive+0x888>)
 800f980:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f982:	4b4a      	ldr	r3, [pc, #296]	; (800faac <tcp_receive+0x888>)
 800f984:	685b      	ldr	r3, [r3, #4]
 800f986:	4a49      	ldr	r2, [pc, #292]	; (800faac <tcp_receive+0x888>)
 800f988:	8912      	ldrh	r2, [r2, #8]
 800f98a:	4611      	mov	r1, r2
 800f98c:	4618      	mov	r0, r3
 800f98e:	f7fb ff07 	bl	800b7a0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f992:	4b46      	ldr	r3, [pc, #280]	; (800faac <tcp_receive+0x888>)
 800f994:	891c      	ldrh	r4, [r3, #8]
 800f996:	4b45      	ldr	r3, [pc, #276]	; (800faac <tcp_receive+0x888>)
 800f998:	68db      	ldr	r3, [r3, #12]
 800f99a:	899b      	ldrh	r3, [r3, #12]
 800f99c:	b29b      	uxth	r3, r3
 800f99e:	4618      	mov	r0, r3
 800f9a0:	f7fa fcd8 	bl	800a354 <lwip_htons>
 800f9a4:	4603      	mov	r3, r0
 800f9a6:	b2db      	uxtb	r3, r3
 800f9a8:	f003 0303 	and.w	r3, r3, #3
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d001      	beq.n	800f9b4 <tcp_receive+0x790>
 800f9b0:	2301      	movs	r3, #1
 800f9b2:	e000      	b.n	800f9b6 <tcp_receive+0x792>
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	4423      	add	r3, r4
 800f9b8:	b29a      	uxth	r2, r3
 800f9ba:	4b3d      	ldr	r3, [pc, #244]	; (800fab0 <tcp_receive+0x88c>)
 800f9bc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f9be:	4b3c      	ldr	r3, [pc, #240]	; (800fab0 <tcp_receive+0x88c>)
 800f9c0:	881b      	ldrh	r3, [r3, #0]
 800f9c2:	461a      	mov	r2, r3
 800f9c4:	4b38      	ldr	r3, [pc, #224]	; (800faa8 <tcp_receive+0x884>)
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	441a      	add	r2, r3
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9ce:	6879      	ldr	r1, [r7, #4]
 800f9d0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f9d2:	440b      	add	r3, r1
 800f9d4:	429a      	cmp	r2, r3
 800f9d6:	d006      	beq.n	800f9e6 <tcp_receive+0x7c2>
 800f9d8:	4b36      	ldr	r3, [pc, #216]	; (800fab4 <tcp_receive+0x890>)
 800f9da:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800f9de:	4936      	ldr	r1, [pc, #216]	; (800fab8 <tcp_receive+0x894>)
 800f9e0:	4836      	ldr	r0, [pc, #216]	; (800fabc <tcp_receive+0x898>)
 800f9e2:	f005 fe0b 	bl	80155fc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	f000 80e7 	beq.w	800fbbe <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f9f0:	4b2e      	ldr	r3, [pc, #184]	; (800faac <tcp_receive+0x888>)
 800f9f2:	68db      	ldr	r3, [r3, #12]
 800f9f4:	899b      	ldrh	r3, [r3, #12]
 800f9f6:	b29b      	uxth	r3, r3
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	f7fa fcab 	bl	800a354 <lwip_htons>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	b2db      	uxtb	r3, r3
 800fa02:	f003 0301 	and.w	r3, r3, #1
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d010      	beq.n	800fa2c <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800fa0a:	e00a      	b.n	800fa22 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa10:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa16:	681a      	ldr	r2, [r3, #0]
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800fa1c:	68f8      	ldr	r0, [r7, #12]
 800fa1e:	f7fd fcc8 	bl	800d3b2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d1f0      	bne.n	800fa0c <tcp_receive+0x7e8>
 800fa2a:	e0c8      	b.n	800fbbe <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa30:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800fa32:	e052      	b.n	800fada <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fa34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa36:	68db      	ldr	r3, [r3, #12]
 800fa38:	899b      	ldrh	r3, [r3, #12]
 800fa3a:	b29b      	uxth	r3, r3
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	f7fa fc89 	bl	800a354 <lwip_htons>
 800fa42:	4603      	mov	r3, r0
 800fa44:	b2db      	uxtb	r3, r3
 800fa46:	f003 0301 	and.w	r3, r3, #1
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d03d      	beq.n	800faca <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800fa4e:	4b17      	ldr	r3, [pc, #92]	; (800faac <tcp_receive+0x888>)
 800fa50:	68db      	ldr	r3, [r3, #12]
 800fa52:	899b      	ldrh	r3, [r3, #12]
 800fa54:	b29b      	uxth	r3, r3
 800fa56:	4618      	mov	r0, r3
 800fa58:	f7fa fc7c 	bl	800a354 <lwip_htons>
 800fa5c:	4603      	mov	r3, r0
 800fa5e:	b2db      	uxtb	r3, r3
 800fa60:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d130      	bne.n	800faca <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800fa68:	4b10      	ldr	r3, [pc, #64]	; (800faac <tcp_receive+0x888>)
 800fa6a:	68db      	ldr	r3, [r3, #12]
 800fa6c:	899b      	ldrh	r3, [r3, #12]
 800fa6e:	b29c      	uxth	r4, r3
 800fa70:	2001      	movs	r0, #1
 800fa72:	f7fa fc6f 	bl	800a354 <lwip_htons>
 800fa76:	4603      	mov	r3, r0
 800fa78:	461a      	mov	r2, r3
 800fa7a:	4b0c      	ldr	r3, [pc, #48]	; (800faac <tcp_receive+0x888>)
 800fa7c:	68db      	ldr	r3, [r3, #12]
 800fa7e:	4322      	orrs	r2, r4
 800fa80:	b292      	uxth	r2, r2
 800fa82:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800fa84:	4b09      	ldr	r3, [pc, #36]	; (800faac <tcp_receive+0x888>)
 800fa86:	891c      	ldrh	r4, [r3, #8]
 800fa88:	4b08      	ldr	r3, [pc, #32]	; (800faac <tcp_receive+0x888>)
 800fa8a:	68db      	ldr	r3, [r3, #12]
 800fa8c:	899b      	ldrh	r3, [r3, #12]
 800fa8e:	b29b      	uxth	r3, r3
 800fa90:	4618      	mov	r0, r3
 800fa92:	f7fa fc5f 	bl	800a354 <lwip_htons>
 800fa96:	4603      	mov	r3, r0
 800fa98:	b2db      	uxtb	r3, r3
 800fa9a:	f003 0303 	and.w	r3, r3, #3
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d00e      	beq.n	800fac0 <tcp_receive+0x89c>
 800faa2:	2301      	movs	r3, #1
 800faa4:	e00d      	b.n	800fac2 <tcp_receive+0x89e>
 800faa6:	bf00      	nop
 800faa8:	20004af0 	.word	0x20004af0
 800faac:	20004ad0 	.word	0x20004ad0
 800fab0:	20004afa 	.word	0x20004afa
 800fab4:	080182a0 	.word	0x080182a0
 800fab8:	08018648 	.word	0x08018648
 800fabc:	080182ec 	.word	0x080182ec
 800fac0:	2300      	movs	r3, #0
 800fac2:	4423      	add	r3, r4
 800fac4:	b29a      	uxth	r2, r3
 800fac6:	4b98      	ldr	r3, [pc, #608]	; (800fd28 <tcp_receive+0xb04>)
 800fac8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800faca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800facc:	613b      	str	r3, [r7, #16]
              next = next->next;
 800face:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800fad4:	6938      	ldr	r0, [r7, #16]
 800fad6:	f7fd fc6c 	bl	800d3b2 <tcp_seg_free>
            while (next &&
 800fada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d00e      	beq.n	800fafe <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800fae0:	4b91      	ldr	r3, [pc, #580]	; (800fd28 <tcp_receive+0xb04>)
 800fae2:	881b      	ldrh	r3, [r3, #0]
 800fae4:	461a      	mov	r2, r3
 800fae6:	4b91      	ldr	r3, [pc, #580]	; (800fd2c <tcp_receive+0xb08>)
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	441a      	add	r2, r3
 800faec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800faee:	68db      	ldr	r3, [r3, #12]
 800faf0:	685b      	ldr	r3, [r3, #4]
 800faf2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800faf4:	8909      	ldrh	r1, [r1, #8]
 800faf6:	440b      	add	r3, r1
 800faf8:	1ad3      	subs	r3, r2, r3
            while (next &&
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	da9a      	bge.n	800fa34 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800fafe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d059      	beq.n	800fbb8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800fb04:	4b88      	ldr	r3, [pc, #544]	; (800fd28 <tcp_receive+0xb04>)
 800fb06:	881b      	ldrh	r3, [r3, #0]
 800fb08:	461a      	mov	r2, r3
 800fb0a:	4b88      	ldr	r3, [pc, #544]	; (800fd2c <tcp_receive+0xb08>)
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	441a      	add	r2, r3
 800fb10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb12:	68db      	ldr	r3, [r3, #12]
 800fb14:	685b      	ldr	r3, [r3, #4]
 800fb16:	1ad3      	subs	r3, r2, r3
            if (next &&
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	dd4d      	ble.n	800fbb8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800fb1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb1e:	68db      	ldr	r3, [r3, #12]
 800fb20:	685b      	ldr	r3, [r3, #4]
 800fb22:	b29a      	uxth	r2, r3
 800fb24:	4b81      	ldr	r3, [pc, #516]	; (800fd2c <tcp_receive+0xb08>)
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	b29b      	uxth	r3, r3
 800fb2a:	1ad3      	subs	r3, r2, r3
 800fb2c:	b29a      	uxth	r2, r3
 800fb2e:	4b80      	ldr	r3, [pc, #512]	; (800fd30 <tcp_receive+0xb0c>)
 800fb30:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fb32:	4b7f      	ldr	r3, [pc, #508]	; (800fd30 <tcp_receive+0xb0c>)
 800fb34:	68db      	ldr	r3, [r3, #12]
 800fb36:	899b      	ldrh	r3, [r3, #12]
 800fb38:	b29b      	uxth	r3, r3
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	f7fa fc0a 	bl	800a354 <lwip_htons>
 800fb40:	4603      	mov	r3, r0
 800fb42:	b2db      	uxtb	r3, r3
 800fb44:	f003 0302 	and.w	r3, r3, #2
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d005      	beq.n	800fb58 <tcp_receive+0x934>
                inseg.len -= 1;
 800fb4c:	4b78      	ldr	r3, [pc, #480]	; (800fd30 <tcp_receive+0xb0c>)
 800fb4e:	891b      	ldrh	r3, [r3, #8]
 800fb50:	3b01      	subs	r3, #1
 800fb52:	b29a      	uxth	r2, r3
 800fb54:	4b76      	ldr	r3, [pc, #472]	; (800fd30 <tcp_receive+0xb0c>)
 800fb56:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800fb58:	4b75      	ldr	r3, [pc, #468]	; (800fd30 <tcp_receive+0xb0c>)
 800fb5a:	685b      	ldr	r3, [r3, #4]
 800fb5c:	4a74      	ldr	r2, [pc, #464]	; (800fd30 <tcp_receive+0xb0c>)
 800fb5e:	8912      	ldrh	r2, [r2, #8]
 800fb60:	4611      	mov	r1, r2
 800fb62:	4618      	mov	r0, r3
 800fb64:	f7fb fe1c 	bl	800b7a0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800fb68:	4b71      	ldr	r3, [pc, #452]	; (800fd30 <tcp_receive+0xb0c>)
 800fb6a:	891c      	ldrh	r4, [r3, #8]
 800fb6c:	4b70      	ldr	r3, [pc, #448]	; (800fd30 <tcp_receive+0xb0c>)
 800fb6e:	68db      	ldr	r3, [r3, #12]
 800fb70:	899b      	ldrh	r3, [r3, #12]
 800fb72:	b29b      	uxth	r3, r3
 800fb74:	4618      	mov	r0, r3
 800fb76:	f7fa fbed 	bl	800a354 <lwip_htons>
 800fb7a:	4603      	mov	r3, r0
 800fb7c:	b2db      	uxtb	r3, r3
 800fb7e:	f003 0303 	and.w	r3, r3, #3
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d001      	beq.n	800fb8a <tcp_receive+0x966>
 800fb86:	2301      	movs	r3, #1
 800fb88:	e000      	b.n	800fb8c <tcp_receive+0x968>
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	4423      	add	r3, r4
 800fb8e:	b29a      	uxth	r2, r3
 800fb90:	4b65      	ldr	r3, [pc, #404]	; (800fd28 <tcp_receive+0xb04>)
 800fb92:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800fb94:	4b64      	ldr	r3, [pc, #400]	; (800fd28 <tcp_receive+0xb04>)
 800fb96:	881b      	ldrh	r3, [r3, #0]
 800fb98:	461a      	mov	r2, r3
 800fb9a:	4b64      	ldr	r3, [pc, #400]	; (800fd2c <tcp_receive+0xb08>)
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	441a      	add	r2, r3
 800fba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fba2:	68db      	ldr	r3, [r3, #12]
 800fba4:	685b      	ldr	r3, [r3, #4]
 800fba6:	429a      	cmp	r2, r3
 800fba8:	d006      	beq.n	800fbb8 <tcp_receive+0x994>
 800fbaa:	4b62      	ldr	r3, [pc, #392]	; (800fd34 <tcp_receive+0xb10>)
 800fbac:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800fbb0:	4961      	ldr	r1, [pc, #388]	; (800fd38 <tcp_receive+0xb14>)
 800fbb2:	4862      	ldr	r0, [pc, #392]	; (800fd3c <tcp_receive+0xb18>)
 800fbb4:	f005 fd22 	bl	80155fc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fbbc:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800fbbe:	4b5a      	ldr	r3, [pc, #360]	; (800fd28 <tcp_receive+0xb04>)
 800fbc0:	881b      	ldrh	r3, [r3, #0]
 800fbc2:	461a      	mov	r2, r3
 800fbc4:	4b59      	ldr	r3, [pc, #356]	; (800fd2c <tcp_receive+0xb08>)
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	441a      	add	r2, r3
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fbd2:	4b55      	ldr	r3, [pc, #340]	; (800fd28 <tcp_receive+0xb04>)
 800fbd4:	881b      	ldrh	r3, [r3, #0]
 800fbd6:	429a      	cmp	r2, r3
 800fbd8:	d206      	bcs.n	800fbe8 <tcp_receive+0x9c4>
 800fbda:	4b56      	ldr	r3, [pc, #344]	; (800fd34 <tcp_receive+0xb10>)
 800fbdc:	f240 6207 	movw	r2, #1543	; 0x607
 800fbe0:	4957      	ldr	r1, [pc, #348]	; (800fd40 <tcp_receive+0xb1c>)
 800fbe2:	4856      	ldr	r0, [pc, #344]	; (800fd3c <tcp_receive+0xb18>)
 800fbe4:	f005 fd0a 	bl	80155fc <iprintf>
        pcb->rcv_wnd -= tcplen;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fbec:	4b4e      	ldr	r3, [pc, #312]	; (800fd28 <tcp_receive+0xb04>)
 800fbee:	881b      	ldrh	r3, [r3, #0]
 800fbf0:	1ad3      	subs	r3, r2, r3
 800fbf2:	b29a      	uxth	r2, r3
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800fbf8:	6878      	ldr	r0, [r7, #4]
 800fbfa:	f7fc feb5 	bl	800c968 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800fbfe:	4b4c      	ldr	r3, [pc, #304]	; (800fd30 <tcp_receive+0xb0c>)
 800fc00:	685b      	ldr	r3, [r3, #4]
 800fc02:	891b      	ldrh	r3, [r3, #8]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d006      	beq.n	800fc16 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800fc08:	4b49      	ldr	r3, [pc, #292]	; (800fd30 <tcp_receive+0xb0c>)
 800fc0a:	685b      	ldr	r3, [r3, #4]
 800fc0c:	4a4d      	ldr	r2, [pc, #308]	; (800fd44 <tcp_receive+0xb20>)
 800fc0e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800fc10:	4b47      	ldr	r3, [pc, #284]	; (800fd30 <tcp_receive+0xb0c>)
 800fc12:	2200      	movs	r2, #0
 800fc14:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fc16:	4b46      	ldr	r3, [pc, #280]	; (800fd30 <tcp_receive+0xb0c>)
 800fc18:	68db      	ldr	r3, [r3, #12]
 800fc1a:	899b      	ldrh	r3, [r3, #12]
 800fc1c:	b29b      	uxth	r3, r3
 800fc1e:	4618      	mov	r0, r3
 800fc20:	f7fa fb98 	bl	800a354 <lwip_htons>
 800fc24:	4603      	mov	r3, r0
 800fc26:	b2db      	uxtb	r3, r3
 800fc28:	f003 0301 	and.w	r3, r3, #1
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	f000 80b8 	beq.w	800fda2 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800fc32:	4b45      	ldr	r3, [pc, #276]	; (800fd48 <tcp_receive+0xb24>)
 800fc34:	781b      	ldrb	r3, [r3, #0]
 800fc36:	f043 0320 	orr.w	r3, r3, #32
 800fc3a:	b2da      	uxtb	r2, r3
 800fc3c:	4b42      	ldr	r3, [pc, #264]	; (800fd48 <tcp_receive+0xb24>)
 800fc3e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800fc40:	e0af      	b.n	800fda2 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc46:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc4c:	68db      	ldr	r3, [r3, #12]
 800fc4e:	685b      	ldr	r3, [r3, #4]
 800fc50:	4a36      	ldr	r2, [pc, #216]	; (800fd2c <tcp_receive+0xb08>)
 800fc52:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800fc54:	68bb      	ldr	r3, [r7, #8]
 800fc56:	891b      	ldrh	r3, [r3, #8]
 800fc58:	461c      	mov	r4, r3
 800fc5a:	68bb      	ldr	r3, [r7, #8]
 800fc5c:	68db      	ldr	r3, [r3, #12]
 800fc5e:	899b      	ldrh	r3, [r3, #12]
 800fc60:	b29b      	uxth	r3, r3
 800fc62:	4618      	mov	r0, r3
 800fc64:	f7fa fb76 	bl	800a354 <lwip_htons>
 800fc68:	4603      	mov	r3, r0
 800fc6a:	b2db      	uxtb	r3, r3
 800fc6c:	f003 0303 	and.w	r3, r3, #3
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d001      	beq.n	800fc78 <tcp_receive+0xa54>
 800fc74:	2301      	movs	r3, #1
 800fc76:	e000      	b.n	800fc7a <tcp_receive+0xa56>
 800fc78:	2300      	movs	r3, #0
 800fc7a:	191a      	adds	r2, r3, r4
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc80:	441a      	add	r2, r3
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fc8a:	461c      	mov	r4, r3
 800fc8c:	68bb      	ldr	r3, [r7, #8]
 800fc8e:	891b      	ldrh	r3, [r3, #8]
 800fc90:	461d      	mov	r5, r3
 800fc92:	68bb      	ldr	r3, [r7, #8]
 800fc94:	68db      	ldr	r3, [r3, #12]
 800fc96:	899b      	ldrh	r3, [r3, #12]
 800fc98:	b29b      	uxth	r3, r3
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	f7fa fb5a 	bl	800a354 <lwip_htons>
 800fca0:	4603      	mov	r3, r0
 800fca2:	b2db      	uxtb	r3, r3
 800fca4:	f003 0303 	and.w	r3, r3, #3
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d001      	beq.n	800fcb0 <tcp_receive+0xa8c>
 800fcac:	2301      	movs	r3, #1
 800fcae:	e000      	b.n	800fcb2 <tcp_receive+0xa8e>
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	442b      	add	r3, r5
 800fcb4:	429c      	cmp	r4, r3
 800fcb6:	d206      	bcs.n	800fcc6 <tcp_receive+0xaa2>
 800fcb8:	4b1e      	ldr	r3, [pc, #120]	; (800fd34 <tcp_receive+0xb10>)
 800fcba:	f240 622b 	movw	r2, #1579	; 0x62b
 800fcbe:	4923      	ldr	r1, [pc, #140]	; (800fd4c <tcp_receive+0xb28>)
 800fcc0:	481e      	ldr	r0, [pc, #120]	; (800fd3c <tcp_receive+0xb18>)
 800fcc2:	f005 fc9b 	bl	80155fc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800fcc6:	68bb      	ldr	r3, [r7, #8]
 800fcc8:	891b      	ldrh	r3, [r3, #8]
 800fcca:	461c      	mov	r4, r3
 800fccc:	68bb      	ldr	r3, [r7, #8]
 800fcce:	68db      	ldr	r3, [r3, #12]
 800fcd0:	899b      	ldrh	r3, [r3, #12]
 800fcd2:	b29b      	uxth	r3, r3
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	f7fa fb3d 	bl	800a354 <lwip_htons>
 800fcda:	4603      	mov	r3, r0
 800fcdc:	b2db      	uxtb	r3, r3
 800fcde:	f003 0303 	and.w	r3, r3, #3
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d001      	beq.n	800fcea <tcp_receive+0xac6>
 800fce6:	2301      	movs	r3, #1
 800fce8:	e000      	b.n	800fcec <tcp_receive+0xac8>
 800fcea:	2300      	movs	r3, #0
 800fcec:	1919      	adds	r1, r3, r4
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fcf2:	b28b      	uxth	r3, r1
 800fcf4:	1ad3      	subs	r3, r2, r3
 800fcf6:	b29a      	uxth	r2, r3
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800fcfc:	6878      	ldr	r0, [r7, #4]
 800fcfe:	f7fc fe33 	bl	800c968 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800fd02:	68bb      	ldr	r3, [r7, #8]
 800fd04:	685b      	ldr	r3, [r3, #4]
 800fd06:	891b      	ldrh	r3, [r3, #8]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d028      	beq.n	800fd5e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800fd0c:	4b0d      	ldr	r3, [pc, #52]	; (800fd44 <tcp_receive+0xb20>)
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d01d      	beq.n	800fd50 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800fd14:	4b0b      	ldr	r3, [pc, #44]	; (800fd44 <tcp_receive+0xb20>)
 800fd16:	681a      	ldr	r2, [r3, #0]
 800fd18:	68bb      	ldr	r3, [r7, #8]
 800fd1a:	685b      	ldr	r3, [r3, #4]
 800fd1c:	4619      	mov	r1, r3
 800fd1e:	4610      	mov	r0, r2
 800fd20:	f7fb ff92 	bl	800bc48 <pbuf_cat>
 800fd24:	e018      	b.n	800fd58 <tcp_receive+0xb34>
 800fd26:	bf00      	nop
 800fd28:	20004afa 	.word	0x20004afa
 800fd2c:	20004af0 	.word	0x20004af0
 800fd30:	20004ad0 	.word	0x20004ad0
 800fd34:	080182a0 	.word	0x080182a0
 800fd38:	08018680 	.word	0x08018680
 800fd3c:	080182ec 	.word	0x080182ec
 800fd40:	080186bc 	.word	0x080186bc
 800fd44:	20004b00 	.word	0x20004b00
 800fd48:	20004afd 	.word	0x20004afd
 800fd4c:	080186dc 	.word	0x080186dc
            } else {
              recv_data = cseg->p;
 800fd50:	68bb      	ldr	r3, [r7, #8]
 800fd52:	685b      	ldr	r3, [r3, #4]
 800fd54:	4a70      	ldr	r2, [pc, #448]	; (800ff18 <tcp_receive+0xcf4>)
 800fd56:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800fd58:	68bb      	ldr	r3, [r7, #8]
 800fd5a:	2200      	movs	r2, #0
 800fd5c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fd5e:	68bb      	ldr	r3, [r7, #8]
 800fd60:	68db      	ldr	r3, [r3, #12]
 800fd62:	899b      	ldrh	r3, [r3, #12]
 800fd64:	b29b      	uxth	r3, r3
 800fd66:	4618      	mov	r0, r3
 800fd68:	f7fa faf4 	bl	800a354 <lwip_htons>
 800fd6c:	4603      	mov	r3, r0
 800fd6e:	b2db      	uxtb	r3, r3
 800fd70:	f003 0301 	and.w	r3, r3, #1
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d00d      	beq.n	800fd94 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800fd78:	4b68      	ldr	r3, [pc, #416]	; (800ff1c <tcp_receive+0xcf8>)
 800fd7a:	781b      	ldrb	r3, [r3, #0]
 800fd7c:	f043 0320 	orr.w	r3, r3, #32
 800fd80:	b2da      	uxtb	r2, r3
 800fd82:	4b66      	ldr	r3, [pc, #408]	; (800ff1c <tcp_receive+0xcf8>)
 800fd84:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	7d1b      	ldrb	r3, [r3, #20]
 800fd8a:	2b04      	cmp	r3, #4
 800fd8c:	d102      	bne.n	800fd94 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	2207      	movs	r2, #7
 800fd92:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800fd94:	68bb      	ldr	r3, [r7, #8]
 800fd96:	681a      	ldr	r2, [r3, #0]
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800fd9c:	68b8      	ldr	r0, [r7, #8]
 800fd9e:	f7fd fb08 	bl	800d3b2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d008      	beq.n	800fdbc <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fdae:	68db      	ldr	r3, [r3, #12]
 800fdb0:	685a      	ldr	r2, [r3, #4]
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800fdb6:	429a      	cmp	r2, r3
 800fdb8:	f43f af43 	beq.w	800fc42 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	8b5b      	ldrh	r3, [r3, #26]
 800fdc0:	f003 0301 	and.w	r3, r3, #1
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d00e      	beq.n	800fde6 <tcp_receive+0xbc2>
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	8b5b      	ldrh	r3, [r3, #26]
 800fdcc:	f023 0301 	bic.w	r3, r3, #1
 800fdd0:	b29a      	uxth	r2, r3
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	835a      	strh	r2, [r3, #26]
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	8b5b      	ldrh	r3, [r3, #26]
 800fdda:	f043 0302 	orr.w	r3, r3, #2
 800fdde:	b29a      	uxth	r2, r3
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fde4:	e188      	b.n	80100f8 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	8b5b      	ldrh	r3, [r3, #26]
 800fdea:	f043 0301 	orr.w	r3, r3, #1
 800fdee:	b29a      	uxth	r2, r3
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fdf4:	e180      	b.n	80100f8 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d106      	bne.n	800fe0c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800fdfe:	4848      	ldr	r0, [pc, #288]	; (800ff20 <tcp_receive+0xcfc>)
 800fe00:	f7fd faf0 	bl	800d3e4 <tcp_seg_copy>
 800fe04:	4602      	mov	r2, r0
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	675a      	str	r2, [r3, #116]	; 0x74
 800fe0a:	e16d      	b.n	80100e8 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe14:	63bb      	str	r3, [r7, #56]	; 0x38
 800fe16:	e157      	b.n	80100c8 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800fe18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe1a:	68db      	ldr	r3, [r3, #12]
 800fe1c:	685a      	ldr	r2, [r3, #4]
 800fe1e:	4b41      	ldr	r3, [pc, #260]	; (800ff24 <tcp_receive+0xd00>)
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	429a      	cmp	r2, r3
 800fe24:	d11d      	bne.n	800fe62 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800fe26:	4b3e      	ldr	r3, [pc, #248]	; (800ff20 <tcp_receive+0xcfc>)
 800fe28:	891a      	ldrh	r2, [r3, #8]
 800fe2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe2c:	891b      	ldrh	r3, [r3, #8]
 800fe2e:	429a      	cmp	r2, r3
 800fe30:	f240 814f 	bls.w	80100d2 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fe34:	483a      	ldr	r0, [pc, #232]	; (800ff20 <tcp_receive+0xcfc>)
 800fe36:	f7fd fad5 	bl	800d3e4 <tcp_seg_copy>
 800fe3a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800fe3c:	697b      	ldr	r3, [r7, #20]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	f000 8149 	beq.w	80100d6 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800fe44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d003      	beq.n	800fe52 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800fe4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe4c:	697a      	ldr	r2, [r7, #20]
 800fe4e:	601a      	str	r2, [r3, #0]
 800fe50:	e002      	b.n	800fe58 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	697a      	ldr	r2, [r7, #20]
 800fe56:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800fe58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fe5a:	6978      	ldr	r0, [r7, #20]
 800fe5c:	f7ff f8de 	bl	800f01c <tcp_oos_insert_segment>
                }
                break;
 800fe60:	e139      	b.n	80100d6 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800fe62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d117      	bne.n	800fe98 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800fe68:	4b2e      	ldr	r3, [pc, #184]	; (800ff24 <tcp_receive+0xd00>)
 800fe6a:	681a      	ldr	r2, [r3, #0]
 800fe6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe6e:	68db      	ldr	r3, [r3, #12]
 800fe70:	685b      	ldr	r3, [r3, #4]
 800fe72:	1ad3      	subs	r3, r2, r3
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	da57      	bge.n	800ff28 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fe78:	4829      	ldr	r0, [pc, #164]	; (800ff20 <tcp_receive+0xcfc>)
 800fe7a:	f7fd fab3 	bl	800d3e4 <tcp_seg_copy>
 800fe7e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800fe80:	69bb      	ldr	r3, [r7, #24]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	f000 8129 	beq.w	80100da <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	69ba      	ldr	r2, [r7, #24]
 800fe8c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800fe8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fe90:	69b8      	ldr	r0, [r7, #24]
 800fe92:	f7ff f8c3 	bl	800f01c <tcp_oos_insert_segment>
                  }
                  break;
 800fe96:	e120      	b.n	80100da <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800fe98:	4b22      	ldr	r3, [pc, #136]	; (800ff24 <tcp_receive+0xd00>)
 800fe9a:	681a      	ldr	r2, [r3, #0]
 800fe9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe9e:	68db      	ldr	r3, [r3, #12]
 800fea0:	685b      	ldr	r3, [r3, #4]
 800fea2:	1ad3      	subs	r3, r2, r3
 800fea4:	3b01      	subs	r3, #1
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	db3e      	blt.n	800ff28 <tcp_receive+0xd04>
 800feaa:	4b1e      	ldr	r3, [pc, #120]	; (800ff24 <tcp_receive+0xd00>)
 800feac:	681a      	ldr	r2, [r3, #0]
 800feae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feb0:	68db      	ldr	r3, [r3, #12]
 800feb2:	685b      	ldr	r3, [r3, #4]
 800feb4:	1ad3      	subs	r3, r2, r3
 800feb6:	3301      	adds	r3, #1
 800feb8:	2b00      	cmp	r3, #0
 800feba:	dc35      	bgt.n	800ff28 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800febc:	4818      	ldr	r0, [pc, #96]	; (800ff20 <tcp_receive+0xcfc>)
 800febe:	f7fd fa91 	bl	800d3e4 <tcp_seg_copy>
 800fec2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800fec4:	69fb      	ldr	r3, [r7, #28]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	f000 8109 	beq.w	80100de <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800fecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fece:	68db      	ldr	r3, [r3, #12]
 800fed0:	685b      	ldr	r3, [r3, #4]
 800fed2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fed4:	8912      	ldrh	r2, [r2, #8]
 800fed6:	441a      	add	r2, r3
 800fed8:	4b12      	ldr	r3, [pc, #72]	; (800ff24 <tcp_receive+0xd00>)
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	1ad3      	subs	r3, r2, r3
 800fede:	2b00      	cmp	r3, #0
 800fee0:	dd12      	ble.n	800ff08 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800fee2:	4b10      	ldr	r3, [pc, #64]	; (800ff24 <tcp_receive+0xd00>)
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	b29a      	uxth	r2, r3
 800fee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800feea:	68db      	ldr	r3, [r3, #12]
 800feec:	685b      	ldr	r3, [r3, #4]
 800feee:	b29b      	uxth	r3, r3
 800fef0:	1ad3      	subs	r3, r2, r3
 800fef2:	b29a      	uxth	r2, r3
 800fef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fef6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800fef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fefa:	685a      	ldr	r2, [r3, #4]
 800fefc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fefe:	891b      	ldrh	r3, [r3, #8]
 800ff00:	4619      	mov	r1, r3
 800ff02:	4610      	mov	r0, r2
 800ff04:	f7fb fc4c 	bl	800b7a0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ff08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff0a:	69fa      	ldr	r2, [r7, #28]
 800ff0c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800ff0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ff10:	69f8      	ldr	r0, [r7, #28]
 800ff12:	f7ff f883 	bl	800f01c <tcp_oos_insert_segment>
                  }
                  break;
 800ff16:	e0e2      	b.n	80100de <tcp_receive+0xeba>
 800ff18:	20004b00 	.word	0x20004b00
 800ff1c:	20004afd 	.word	0x20004afd
 800ff20:	20004ad0 	.word	0x20004ad0
 800ff24:	20004af0 	.word	0x20004af0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800ff28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff2a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800ff2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	f040 80c6 	bne.w	80100c2 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800ff36:	4b80      	ldr	r3, [pc, #512]	; (8010138 <tcp_receive+0xf14>)
 800ff38:	681a      	ldr	r2, [r3, #0]
 800ff3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff3c:	68db      	ldr	r3, [r3, #12]
 800ff3e:	685b      	ldr	r3, [r3, #4]
 800ff40:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	f340 80bd 	ble.w	80100c2 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ff48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff4a:	68db      	ldr	r3, [r3, #12]
 800ff4c:	899b      	ldrh	r3, [r3, #12]
 800ff4e:	b29b      	uxth	r3, r3
 800ff50:	4618      	mov	r0, r3
 800ff52:	f7fa f9ff 	bl	800a354 <lwip_htons>
 800ff56:	4603      	mov	r3, r0
 800ff58:	b2db      	uxtb	r3, r3
 800ff5a:	f003 0301 	and.w	r3, r3, #1
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	f040 80bf 	bne.w	80100e2 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800ff64:	4875      	ldr	r0, [pc, #468]	; (801013c <tcp_receive+0xf18>)
 800ff66:	f7fd fa3d 	bl	800d3e4 <tcp_seg_copy>
 800ff6a:	4602      	mov	r2, r0
 800ff6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff6e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800ff70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	f000 80b6 	beq.w	80100e6 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800ff7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff7c:	68db      	ldr	r3, [r3, #12]
 800ff7e:	685b      	ldr	r3, [r3, #4]
 800ff80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff82:	8912      	ldrh	r2, [r2, #8]
 800ff84:	441a      	add	r2, r3
 800ff86:	4b6c      	ldr	r3, [pc, #432]	; (8010138 <tcp_receive+0xf14>)
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	1ad3      	subs	r3, r2, r3
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	dd12      	ble.n	800ffb6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800ff90:	4b69      	ldr	r3, [pc, #420]	; (8010138 <tcp_receive+0xf14>)
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	b29a      	uxth	r2, r3
 800ff96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff98:	68db      	ldr	r3, [r3, #12]
 800ff9a:	685b      	ldr	r3, [r3, #4]
 800ff9c:	b29b      	uxth	r3, r3
 800ff9e:	1ad3      	subs	r3, r2, r3
 800ffa0:	b29a      	uxth	r2, r3
 800ffa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffa4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800ffa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffa8:	685a      	ldr	r2, [r3, #4]
 800ffaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffac:	891b      	ldrh	r3, [r3, #8]
 800ffae:	4619      	mov	r1, r3
 800ffb0:	4610      	mov	r0, r2
 800ffb2:	f7fb fbf5 	bl	800b7a0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800ffb6:	4b62      	ldr	r3, [pc, #392]	; (8010140 <tcp_receive+0xf1c>)
 800ffb8:	881b      	ldrh	r3, [r3, #0]
 800ffba:	461a      	mov	r2, r3
 800ffbc:	4b5e      	ldr	r3, [pc, #376]	; (8010138 <tcp_receive+0xf14>)
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	441a      	add	r2, r3
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffc6:	6879      	ldr	r1, [r7, #4]
 800ffc8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ffca:	440b      	add	r3, r1
 800ffcc:	1ad3      	subs	r3, r2, r3
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	f340 8089 	ble.w	80100e6 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800ffd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	68db      	ldr	r3, [r3, #12]
 800ffda:	899b      	ldrh	r3, [r3, #12]
 800ffdc:	b29b      	uxth	r3, r3
 800ffde:	4618      	mov	r0, r3
 800ffe0:	f7fa f9b8 	bl	800a354 <lwip_htons>
 800ffe4:	4603      	mov	r3, r0
 800ffe6:	b2db      	uxtb	r3, r3
 800ffe8:	f003 0301 	and.w	r3, r3, #1
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d022      	beq.n	8010036 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800fff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	68db      	ldr	r3, [r3, #12]
 800fff6:	899b      	ldrh	r3, [r3, #12]
 800fff8:	b29b      	uxth	r3, r3
 800fffa:	b21b      	sxth	r3, r3
 800fffc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010000:	b21c      	sxth	r4, r3
 8010002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	68db      	ldr	r3, [r3, #12]
 8010008:	899b      	ldrh	r3, [r3, #12]
 801000a:	b29b      	uxth	r3, r3
 801000c:	4618      	mov	r0, r3
 801000e:	f7fa f9a1 	bl	800a354 <lwip_htons>
 8010012:	4603      	mov	r3, r0
 8010014:	b2db      	uxtb	r3, r3
 8010016:	b29b      	uxth	r3, r3
 8010018:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801001c:	b29b      	uxth	r3, r3
 801001e:	4618      	mov	r0, r3
 8010020:	f7fa f998 	bl	800a354 <lwip_htons>
 8010024:	4603      	mov	r3, r0
 8010026:	b21b      	sxth	r3, r3
 8010028:	4323      	orrs	r3, r4
 801002a:	b21a      	sxth	r2, r3
 801002c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	68db      	ldr	r3, [r3, #12]
 8010032:	b292      	uxth	r2, r2
 8010034:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801003a:	b29a      	uxth	r2, r3
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010040:	4413      	add	r3, r2
 8010042:	b299      	uxth	r1, r3
 8010044:	4b3c      	ldr	r3, [pc, #240]	; (8010138 <tcp_receive+0xf14>)
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	b29a      	uxth	r2, r3
 801004a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	1a8a      	subs	r2, r1, r2
 8010050:	b292      	uxth	r2, r2
 8010052:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	685a      	ldr	r2, [r3, #4]
 801005a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	891b      	ldrh	r3, [r3, #8]
 8010060:	4619      	mov	r1, r3
 8010062:	4610      	mov	r0, r2
 8010064:	f7fb fb9c 	bl	800b7a0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	891c      	ldrh	r4, [r3, #8]
 801006e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	68db      	ldr	r3, [r3, #12]
 8010074:	899b      	ldrh	r3, [r3, #12]
 8010076:	b29b      	uxth	r3, r3
 8010078:	4618      	mov	r0, r3
 801007a:	f7fa f96b 	bl	800a354 <lwip_htons>
 801007e:	4603      	mov	r3, r0
 8010080:	b2db      	uxtb	r3, r3
 8010082:	f003 0303 	and.w	r3, r3, #3
 8010086:	2b00      	cmp	r3, #0
 8010088:	d001      	beq.n	801008e <tcp_receive+0xe6a>
 801008a:	2301      	movs	r3, #1
 801008c:	e000      	b.n	8010090 <tcp_receive+0xe6c>
 801008e:	2300      	movs	r3, #0
 8010090:	4423      	add	r3, r4
 8010092:	b29a      	uxth	r2, r3
 8010094:	4b2a      	ldr	r3, [pc, #168]	; (8010140 <tcp_receive+0xf1c>)
 8010096:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010098:	4b29      	ldr	r3, [pc, #164]	; (8010140 <tcp_receive+0xf1c>)
 801009a:	881b      	ldrh	r3, [r3, #0]
 801009c:	461a      	mov	r2, r3
 801009e:	4b26      	ldr	r3, [pc, #152]	; (8010138 <tcp_receive+0xf14>)
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	441a      	add	r2, r3
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100a8:	6879      	ldr	r1, [r7, #4]
 80100aa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80100ac:	440b      	add	r3, r1
 80100ae:	429a      	cmp	r2, r3
 80100b0:	d019      	beq.n	80100e6 <tcp_receive+0xec2>
 80100b2:	4b24      	ldr	r3, [pc, #144]	; (8010144 <tcp_receive+0xf20>)
 80100b4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80100b8:	4923      	ldr	r1, [pc, #140]	; (8010148 <tcp_receive+0xf24>)
 80100ba:	4824      	ldr	r0, [pc, #144]	; (801014c <tcp_receive+0xf28>)
 80100bc:	f005 fa9e 	bl	80155fc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80100c0:	e011      	b.n	80100e6 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80100c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80100c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	f47f aea4 	bne.w	800fe18 <tcp_receive+0xbf4>
 80100d0:	e00a      	b.n	80100e8 <tcp_receive+0xec4>
                break;
 80100d2:	bf00      	nop
 80100d4:	e008      	b.n	80100e8 <tcp_receive+0xec4>
                break;
 80100d6:	bf00      	nop
 80100d8:	e006      	b.n	80100e8 <tcp_receive+0xec4>
                  break;
 80100da:	bf00      	nop
 80100dc:	e004      	b.n	80100e8 <tcp_receive+0xec4>
                  break;
 80100de:	bf00      	nop
 80100e0:	e002      	b.n	80100e8 <tcp_receive+0xec4>
                  break;
 80100e2:	bf00      	nop
 80100e4:	e000      	b.n	80100e8 <tcp_receive+0xec4>
                break;
 80100e6:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80100e8:	6878      	ldr	r0, [r7, #4]
 80100ea:	f001 fe8b 	bl	8011e04 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80100ee:	e003      	b.n	80100f8 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80100f0:	6878      	ldr	r0, [r7, #4]
 80100f2:	f001 fe87 	bl	8011e04 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80100f6:	e01a      	b.n	801012e <tcp_receive+0xf0a>
 80100f8:	e019      	b.n	801012e <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80100fa:	4b0f      	ldr	r3, [pc, #60]	; (8010138 <tcp_receive+0xf14>)
 80100fc:	681a      	ldr	r2, [r3, #0]
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010102:	1ad3      	subs	r3, r2, r3
 8010104:	2b00      	cmp	r3, #0
 8010106:	db0a      	blt.n	801011e <tcp_receive+0xefa>
 8010108:	4b0b      	ldr	r3, [pc, #44]	; (8010138 <tcp_receive+0xf14>)
 801010a:	681a      	ldr	r2, [r3, #0]
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010110:	6879      	ldr	r1, [r7, #4]
 8010112:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010114:	440b      	add	r3, r1
 8010116:	1ad3      	subs	r3, r2, r3
 8010118:	3301      	adds	r3, #1
 801011a:	2b00      	cmp	r3, #0
 801011c:	dd07      	ble.n	801012e <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	8b5b      	ldrh	r3, [r3, #26]
 8010122:	f043 0302 	orr.w	r3, r3, #2
 8010126:	b29a      	uxth	r2, r3
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801012c:	e7ff      	b.n	801012e <tcp_receive+0xf0a>
 801012e:	bf00      	nop
 8010130:	3750      	adds	r7, #80	; 0x50
 8010132:	46bd      	mov	sp, r7
 8010134:	bdb0      	pop	{r4, r5, r7, pc}
 8010136:	bf00      	nop
 8010138:	20004af0 	.word	0x20004af0
 801013c:	20004ad0 	.word	0x20004ad0
 8010140:	20004afa 	.word	0x20004afa
 8010144:	080182a0 	.word	0x080182a0
 8010148:	08018648 	.word	0x08018648
 801014c:	080182ec 	.word	0x080182ec

08010150 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8010150:	b480      	push	{r7}
 8010152:	b083      	sub	sp, #12
 8010154:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8010156:	4b15      	ldr	r3, [pc, #84]	; (80101ac <tcp_get_next_optbyte+0x5c>)
 8010158:	881b      	ldrh	r3, [r3, #0]
 801015a:	1c5a      	adds	r2, r3, #1
 801015c:	b291      	uxth	r1, r2
 801015e:	4a13      	ldr	r2, [pc, #76]	; (80101ac <tcp_get_next_optbyte+0x5c>)
 8010160:	8011      	strh	r1, [r2, #0]
 8010162:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010164:	4b12      	ldr	r3, [pc, #72]	; (80101b0 <tcp_get_next_optbyte+0x60>)
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	2b00      	cmp	r3, #0
 801016a:	d004      	beq.n	8010176 <tcp_get_next_optbyte+0x26>
 801016c:	4b11      	ldr	r3, [pc, #68]	; (80101b4 <tcp_get_next_optbyte+0x64>)
 801016e:	881b      	ldrh	r3, [r3, #0]
 8010170:	88fa      	ldrh	r2, [r7, #6]
 8010172:	429a      	cmp	r2, r3
 8010174:	d208      	bcs.n	8010188 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8010176:	4b10      	ldr	r3, [pc, #64]	; (80101b8 <tcp_get_next_optbyte+0x68>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	3314      	adds	r3, #20
 801017c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801017e:	88fb      	ldrh	r3, [r7, #6]
 8010180:	683a      	ldr	r2, [r7, #0]
 8010182:	4413      	add	r3, r2
 8010184:	781b      	ldrb	r3, [r3, #0]
 8010186:	e00b      	b.n	80101a0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8010188:	88fb      	ldrh	r3, [r7, #6]
 801018a:	b2da      	uxtb	r2, r3
 801018c:	4b09      	ldr	r3, [pc, #36]	; (80101b4 <tcp_get_next_optbyte+0x64>)
 801018e:	881b      	ldrh	r3, [r3, #0]
 8010190:	b2db      	uxtb	r3, r3
 8010192:	1ad3      	subs	r3, r2, r3
 8010194:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8010196:	4b06      	ldr	r3, [pc, #24]	; (80101b0 <tcp_get_next_optbyte+0x60>)
 8010198:	681a      	ldr	r2, [r3, #0]
 801019a:	797b      	ldrb	r3, [r7, #5]
 801019c:	4413      	add	r3, r2
 801019e:	781b      	ldrb	r3, [r3, #0]
  }
}
 80101a0:	4618      	mov	r0, r3
 80101a2:	370c      	adds	r7, #12
 80101a4:	46bd      	mov	sp, r7
 80101a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101aa:	4770      	bx	lr
 80101ac:	20004aec 	.word	0x20004aec
 80101b0:	20004ae8 	.word	0x20004ae8
 80101b4:	20004ae6 	.word	0x20004ae6
 80101b8:	20004ae0 	.word	0x20004ae0

080101bc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80101bc:	b580      	push	{r7, lr}
 80101be:	b084      	sub	sp, #16
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d106      	bne.n	80101d8 <tcp_parseopt+0x1c>
 80101ca:	4b32      	ldr	r3, [pc, #200]	; (8010294 <tcp_parseopt+0xd8>)
 80101cc:	f240 727d 	movw	r2, #1917	; 0x77d
 80101d0:	4931      	ldr	r1, [pc, #196]	; (8010298 <tcp_parseopt+0xdc>)
 80101d2:	4832      	ldr	r0, [pc, #200]	; (801029c <tcp_parseopt+0xe0>)
 80101d4:	f005 fa12 	bl	80155fc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80101d8:	4b31      	ldr	r3, [pc, #196]	; (80102a0 <tcp_parseopt+0xe4>)
 80101da:	881b      	ldrh	r3, [r3, #0]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d055      	beq.n	801028c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80101e0:	4b30      	ldr	r3, [pc, #192]	; (80102a4 <tcp_parseopt+0xe8>)
 80101e2:	2200      	movs	r2, #0
 80101e4:	801a      	strh	r2, [r3, #0]
 80101e6:	e045      	b.n	8010274 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80101e8:	f7ff ffb2 	bl	8010150 <tcp_get_next_optbyte>
 80101ec:	4603      	mov	r3, r0
 80101ee:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80101f0:	7bfb      	ldrb	r3, [r7, #15]
 80101f2:	2b02      	cmp	r3, #2
 80101f4:	d006      	beq.n	8010204 <tcp_parseopt+0x48>
 80101f6:	2b02      	cmp	r3, #2
 80101f8:	dc2b      	bgt.n	8010252 <tcp_parseopt+0x96>
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d041      	beq.n	8010282 <tcp_parseopt+0xc6>
 80101fe:	2b01      	cmp	r3, #1
 8010200:	d127      	bne.n	8010252 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8010202:	e037      	b.n	8010274 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8010204:	f7ff ffa4 	bl	8010150 <tcp_get_next_optbyte>
 8010208:	4603      	mov	r3, r0
 801020a:	2b04      	cmp	r3, #4
 801020c:	d13b      	bne.n	8010286 <tcp_parseopt+0xca>
 801020e:	4b25      	ldr	r3, [pc, #148]	; (80102a4 <tcp_parseopt+0xe8>)
 8010210:	881b      	ldrh	r3, [r3, #0]
 8010212:	3301      	adds	r3, #1
 8010214:	4a22      	ldr	r2, [pc, #136]	; (80102a0 <tcp_parseopt+0xe4>)
 8010216:	8812      	ldrh	r2, [r2, #0]
 8010218:	4293      	cmp	r3, r2
 801021a:	da34      	bge.n	8010286 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801021c:	f7ff ff98 	bl	8010150 <tcp_get_next_optbyte>
 8010220:	4603      	mov	r3, r0
 8010222:	b29b      	uxth	r3, r3
 8010224:	021b      	lsls	r3, r3, #8
 8010226:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8010228:	f7ff ff92 	bl	8010150 <tcp_get_next_optbyte>
 801022c:	4603      	mov	r3, r0
 801022e:	b29a      	uxth	r2, r3
 8010230:	89bb      	ldrh	r3, [r7, #12]
 8010232:	4313      	orrs	r3, r2
 8010234:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8010236:	89bb      	ldrh	r3, [r7, #12]
 8010238:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801023c:	d804      	bhi.n	8010248 <tcp_parseopt+0x8c>
 801023e:	89bb      	ldrh	r3, [r7, #12]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d001      	beq.n	8010248 <tcp_parseopt+0x8c>
 8010244:	89ba      	ldrh	r2, [r7, #12]
 8010246:	e001      	b.n	801024c <tcp_parseopt+0x90>
 8010248:	f44f 7206 	mov.w	r2, #536	; 0x218
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8010250:	e010      	b.n	8010274 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8010252:	f7ff ff7d 	bl	8010150 <tcp_get_next_optbyte>
 8010256:	4603      	mov	r3, r0
 8010258:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801025a:	7afb      	ldrb	r3, [r7, #11]
 801025c:	2b01      	cmp	r3, #1
 801025e:	d914      	bls.n	801028a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8010260:	7afb      	ldrb	r3, [r7, #11]
 8010262:	b29a      	uxth	r2, r3
 8010264:	4b0f      	ldr	r3, [pc, #60]	; (80102a4 <tcp_parseopt+0xe8>)
 8010266:	881b      	ldrh	r3, [r3, #0]
 8010268:	4413      	add	r3, r2
 801026a:	b29b      	uxth	r3, r3
 801026c:	3b02      	subs	r3, #2
 801026e:	b29a      	uxth	r2, r3
 8010270:	4b0c      	ldr	r3, [pc, #48]	; (80102a4 <tcp_parseopt+0xe8>)
 8010272:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010274:	4b0b      	ldr	r3, [pc, #44]	; (80102a4 <tcp_parseopt+0xe8>)
 8010276:	881a      	ldrh	r2, [r3, #0]
 8010278:	4b09      	ldr	r3, [pc, #36]	; (80102a0 <tcp_parseopt+0xe4>)
 801027a:	881b      	ldrh	r3, [r3, #0]
 801027c:	429a      	cmp	r2, r3
 801027e:	d3b3      	bcc.n	80101e8 <tcp_parseopt+0x2c>
 8010280:	e004      	b.n	801028c <tcp_parseopt+0xd0>
          return;
 8010282:	bf00      	nop
 8010284:	e002      	b.n	801028c <tcp_parseopt+0xd0>
            return;
 8010286:	bf00      	nop
 8010288:	e000      	b.n	801028c <tcp_parseopt+0xd0>
            return;
 801028a:	bf00      	nop
      }
    }
  }
}
 801028c:	3710      	adds	r7, #16
 801028e:	46bd      	mov	sp, r7
 8010290:	bd80      	pop	{r7, pc}
 8010292:	bf00      	nop
 8010294:	080182a0 	.word	0x080182a0
 8010298:	08018704 	.word	0x08018704
 801029c:	080182ec 	.word	0x080182ec
 80102a0:	20004ae4 	.word	0x20004ae4
 80102a4:	20004aec 	.word	0x20004aec

080102a8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80102a8:	b480      	push	{r7}
 80102aa:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80102ac:	4b05      	ldr	r3, [pc, #20]	; (80102c4 <tcp_trigger_input_pcb_close+0x1c>)
 80102ae:	781b      	ldrb	r3, [r3, #0]
 80102b0:	f043 0310 	orr.w	r3, r3, #16
 80102b4:	b2da      	uxtb	r2, r3
 80102b6:	4b03      	ldr	r3, [pc, #12]	; (80102c4 <tcp_trigger_input_pcb_close+0x1c>)
 80102b8:	701a      	strb	r2, [r3, #0]
}
 80102ba:	bf00      	nop
 80102bc:	46bd      	mov	sp, r7
 80102be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c2:	4770      	bx	lr
 80102c4:	20004afd 	.word	0x20004afd

080102c8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80102c8:	b580      	push	{r7, lr}
 80102ca:	b084      	sub	sp, #16
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	60f8      	str	r0, [r7, #12]
 80102d0:	60b9      	str	r1, [r7, #8]
 80102d2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d00a      	beq.n	80102f0 <tcp_route+0x28>
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	7a1b      	ldrb	r3, [r3, #8]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d006      	beq.n	80102f0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	7a1b      	ldrb	r3, [r3, #8]
 80102e6:	4618      	mov	r0, r3
 80102e8:	f7fb f852 	bl	800b390 <netif_get_by_index>
 80102ec:	4603      	mov	r3, r0
 80102ee:	e003      	b.n	80102f8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80102f0:	6878      	ldr	r0, [r7, #4]
 80102f2:	f003 fc4b 	bl	8013b8c <ip4_route>
 80102f6:	4603      	mov	r3, r0
  }
}
 80102f8:	4618      	mov	r0, r3
 80102fa:	3710      	adds	r7, #16
 80102fc:	46bd      	mov	sp, r7
 80102fe:	bd80      	pop	{r7, pc}

08010300 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8010300:	b590      	push	{r4, r7, lr}
 8010302:	b087      	sub	sp, #28
 8010304:	af00      	add	r7, sp, #0
 8010306:	60f8      	str	r0, [r7, #12]
 8010308:	60b9      	str	r1, [r7, #8]
 801030a:	603b      	str	r3, [r7, #0]
 801030c:	4613      	mov	r3, r2
 801030e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d105      	bne.n	8010322 <tcp_create_segment+0x22>
 8010316:	4b44      	ldr	r3, [pc, #272]	; (8010428 <tcp_create_segment+0x128>)
 8010318:	22a3      	movs	r2, #163	; 0xa3
 801031a:	4944      	ldr	r1, [pc, #272]	; (801042c <tcp_create_segment+0x12c>)
 801031c:	4844      	ldr	r0, [pc, #272]	; (8010430 <tcp_create_segment+0x130>)
 801031e:	f005 f96d 	bl	80155fc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8010322:	68bb      	ldr	r3, [r7, #8]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d105      	bne.n	8010334 <tcp_create_segment+0x34>
 8010328:	4b3f      	ldr	r3, [pc, #252]	; (8010428 <tcp_create_segment+0x128>)
 801032a:	22a4      	movs	r2, #164	; 0xa4
 801032c:	4941      	ldr	r1, [pc, #260]	; (8010434 <tcp_create_segment+0x134>)
 801032e:	4840      	ldr	r0, [pc, #256]	; (8010430 <tcp_create_segment+0x130>)
 8010330:	f005 f964 	bl	80155fc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010334:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010338:	009b      	lsls	r3, r3, #2
 801033a:	b2db      	uxtb	r3, r3
 801033c:	f003 0304 	and.w	r3, r3, #4
 8010340:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010342:	2003      	movs	r0, #3
 8010344:	f7fa fcbc 	bl	800acc0 <memp_malloc>
 8010348:	6138      	str	r0, [r7, #16]
 801034a:	693b      	ldr	r3, [r7, #16]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d104      	bne.n	801035a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010350:	68b8      	ldr	r0, [r7, #8]
 8010352:	f7fb fbab 	bl	800baac <pbuf_free>
    return NULL;
 8010356:	2300      	movs	r3, #0
 8010358:	e061      	b.n	801041e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801035a:	693b      	ldr	r3, [r7, #16]
 801035c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010360:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010362:	693b      	ldr	r3, [r7, #16]
 8010364:	2200      	movs	r2, #0
 8010366:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010368:	693b      	ldr	r3, [r7, #16]
 801036a:	68ba      	ldr	r2, [r7, #8]
 801036c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801036e:	68bb      	ldr	r3, [r7, #8]
 8010370:	891a      	ldrh	r2, [r3, #8]
 8010372:	7dfb      	ldrb	r3, [r7, #23]
 8010374:	b29b      	uxth	r3, r3
 8010376:	429a      	cmp	r2, r3
 8010378:	d205      	bcs.n	8010386 <tcp_create_segment+0x86>
 801037a:	4b2b      	ldr	r3, [pc, #172]	; (8010428 <tcp_create_segment+0x128>)
 801037c:	22b0      	movs	r2, #176	; 0xb0
 801037e:	492e      	ldr	r1, [pc, #184]	; (8010438 <tcp_create_segment+0x138>)
 8010380:	482b      	ldr	r0, [pc, #172]	; (8010430 <tcp_create_segment+0x130>)
 8010382:	f005 f93b 	bl	80155fc <iprintf>
  seg->len = p->tot_len - optlen;
 8010386:	68bb      	ldr	r3, [r7, #8]
 8010388:	891a      	ldrh	r2, [r3, #8]
 801038a:	7dfb      	ldrb	r3, [r7, #23]
 801038c:	b29b      	uxth	r3, r3
 801038e:	1ad3      	subs	r3, r2, r3
 8010390:	b29a      	uxth	r2, r3
 8010392:	693b      	ldr	r3, [r7, #16]
 8010394:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8010396:	2114      	movs	r1, #20
 8010398:	68b8      	ldr	r0, [r7, #8]
 801039a:	f7fb faf1 	bl	800b980 <pbuf_add_header>
 801039e:	4603      	mov	r3, r0
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d004      	beq.n	80103ae <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80103a4:	6938      	ldr	r0, [r7, #16]
 80103a6:	f7fd f804 	bl	800d3b2 <tcp_seg_free>
    return NULL;
 80103aa:	2300      	movs	r3, #0
 80103ac:	e037      	b.n	801041e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80103ae:	693b      	ldr	r3, [r7, #16]
 80103b0:	685b      	ldr	r3, [r3, #4]
 80103b2:	685a      	ldr	r2, [r3, #4]
 80103b4:	693b      	ldr	r3, [r7, #16]
 80103b6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	8ada      	ldrh	r2, [r3, #22]
 80103bc:	693b      	ldr	r3, [r7, #16]
 80103be:	68dc      	ldr	r4, [r3, #12]
 80103c0:	4610      	mov	r0, r2
 80103c2:	f7f9 ffc7 	bl	800a354 <lwip_htons>
 80103c6:	4603      	mov	r3, r0
 80103c8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	8b1a      	ldrh	r2, [r3, #24]
 80103ce:	693b      	ldr	r3, [r7, #16]
 80103d0:	68dc      	ldr	r4, [r3, #12]
 80103d2:	4610      	mov	r0, r2
 80103d4:	f7f9 ffbe 	bl	800a354 <lwip_htons>
 80103d8:	4603      	mov	r3, r0
 80103da:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80103dc:	693b      	ldr	r3, [r7, #16]
 80103de:	68dc      	ldr	r4, [r3, #12]
 80103e0:	6838      	ldr	r0, [r7, #0]
 80103e2:	f7f9 ffcc 	bl	800a37e <lwip_htonl>
 80103e6:	4603      	mov	r3, r0
 80103e8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80103ea:	7dfb      	ldrb	r3, [r7, #23]
 80103ec:	089b      	lsrs	r3, r3, #2
 80103ee:	b2db      	uxtb	r3, r3
 80103f0:	b29b      	uxth	r3, r3
 80103f2:	3305      	adds	r3, #5
 80103f4:	b29b      	uxth	r3, r3
 80103f6:	031b      	lsls	r3, r3, #12
 80103f8:	b29a      	uxth	r2, r3
 80103fa:	79fb      	ldrb	r3, [r7, #7]
 80103fc:	b29b      	uxth	r3, r3
 80103fe:	4313      	orrs	r3, r2
 8010400:	b29a      	uxth	r2, r3
 8010402:	693b      	ldr	r3, [r7, #16]
 8010404:	68dc      	ldr	r4, [r3, #12]
 8010406:	4610      	mov	r0, r2
 8010408:	f7f9 ffa4 	bl	800a354 <lwip_htons>
 801040c:	4603      	mov	r3, r0
 801040e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010410:	693b      	ldr	r3, [r7, #16]
 8010412:	68db      	ldr	r3, [r3, #12]
 8010414:	2200      	movs	r2, #0
 8010416:	749a      	strb	r2, [r3, #18]
 8010418:	2200      	movs	r2, #0
 801041a:	74da      	strb	r2, [r3, #19]
  return seg;
 801041c:	693b      	ldr	r3, [r7, #16]
}
 801041e:	4618      	mov	r0, r3
 8010420:	371c      	adds	r7, #28
 8010422:	46bd      	mov	sp, r7
 8010424:	bd90      	pop	{r4, r7, pc}
 8010426:	bf00      	nop
 8010428:	08018720 	.word	0x08018720
 801042c:	08018754 	.word	0x08018754
 8010430:	08018774 	.word	0x08018774
 8010434:	0801879c 	.word	0x0801879c
 8010438:	080187c0 	.word	0x080187c0

0801043c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801043c:	b580      	push	{r7, lr}
 801043e:	b086      	sub	sp, #24
 8010440:	af00      	add	r7, sp, #0
 8010442:	607b      	str	r3, [r7, #4]
 8010444:	4603      	mov	r3, r0
 8010446:	73fb      	strb	r3, [r7, #15]
 8010448:	460b      	mov	r3, r1
 801044a:	81bb      	strh	r3, [r7, #12]
 801044c:	4613      	mov	r3, r2
 801044e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8010450:	89bb      	ldrh	r3, [r7, #12]
 8010452:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d105      	bne.n	8010466 <tcp_pbuf_prealloc+0x2a>
 801045a:	4b30      	ldr	r3, [pc, #192]	; (801051c <tcp_pbuf_prealloc+0xe0>)
 801045c:	22e8      	movs	r2, #232	; 0xe8
 801045e:	4930      	ldr	r1, [pc, #192]	; (8010520 <tcp_pbuf_prealloc+0xe4>)
 8010460:	4830      	ldr	r0, [pc, #192]	; (8010524 <tcp_pbuf_prealloc+0xe8>)
 8010462:	f005 f8cb 	bl	80155fc <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8010466:	6a3b      	ldr	r3, [r7, #32]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d105      	bne.n	8010478 <tcp_pbuf_prealloc+0x3c>
 801046c:	4b2b      	ldr	r3, [pc, #172]	; (801051c <tcp_pbuf_prealloc+0xe0>)
 801046e:	22e9      	movs	r2, #233	; 0xe9
 8010470:	492d      	ldr	r1, [pc, #180]	; (8010528 <tcp_pbuf_prealloc+0xec>)
 8010472:	482c      	ldr	r0, [pc, #176]	; (8010524 <tcp_pbuf_prealloc+0xe8>)
 8010474:	f005 f8c2 	bl	80155fc <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8010478:	89ba      	ldrh	r2, [r7, #12]
 801047a:	897b      	ldrh	r3, [r7, #10]
 801047c:	429a      	cmp	r2, r3
 801047e:	d221      	bcs.n	80104c4 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010480:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010484:	f003 0302 	and.w	r3, r3, #2
 8010488:	2b00      	cmp	r3, #0
 801048a:	d111      	bne.n	80104b0 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801048c:	6a3b      	ldr	r3, [r7, #32]
 801048e:	8b5b      	ldrh	r3, [r3, #26]
 8010490:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010494:	2b00      	cmp	r3, #0
 8010496:	d115      	bne.n	80104c4 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8010498:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801049c:	2b00      	cmp	r3, #0
 801049e:	d007      	beq.n	80104b0 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80104a0:	6a3b      	ldr	r3, [r7, #32]
 80104a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d103      	bne.n	80104b0 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80104a8:	6a3b      	ldr	r3, [r7, #32]
 80104aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d009      	beq.n	80104c4 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80104b0:	89bb      	ldrh	r3, [r7, #12]
 80104b2:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80104b6:	f023 0203 	bic.w	r2, r3, #3
 80104ba:	897b      	ldrh	r3, [r7, #10]
 80104bc:	4293      	cmp	r3, r2
 80104be:	bf28      	it	cs
 80104c0:	4613      	movcs	r3, r2
 80104c2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80104c4:	8af9      	ldrh	r1, [r7, #22]
 80104c6:	7bfb      	ldrb	r3, [r7, #15]
 80104c8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80104cc:	4618      	mov	r0, r3
 80104ce:	f7fb f809 	bl	800b4e4 <pbuf_alloc>
 80104d2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80104d4:	693b      	ldr	r3, [r7, #16]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d101      	bne.n	80104de <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80104da:	2300      	movs	r3, #0
 80104dc:	e019      	b.n	8010512 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80104de:	693b      	ldr	r3, [r7, #16]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d006      	beq.n	80104f4 <tcp_pbuf_prealloc+0xb8>
 80104e6:	4b0d      	ldr	r3, [pc, #52]	; (801051c <tcp_pbuf_prealloc+0xe0>)
 80104e8:	f240 120b 	movw	r2, #267	; 0x10b
 80104ec:	490f      	ldr	r1, [pc, #60]	; (801052c <tcp_pbuf_prealloc+0xf0>)
 80104ee:	480d      	ldr	r0, [pc, #52]	; (8010524 <tcp_pbuf_prealloc+0xe8>)
 80104f0:	f005 f884 	bl	80155fc <iprintf>
  *oversize = p->len - length;
 80104f4:	693b      	ldr	r3, [r7, #16]
 80104f6:	895a      	ldrh	r2, [r3, #10]
 80104f8:	89bb      	ldrh	r3, [r7, #12]
 80104fa:	1ad3      	subs	r3, r2, r3
 80104fc:	b29a      	uxth	r2, r3
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8010502:	693b      	ldr	r3, [r7, #16]
 8010504:	89ba      	ldrh	r2, [r7, #12]
 8010506:	811a      	strh	r2, [r3, #8]
 8010508:	693b      	ldr	r3, [r7, #16]
 801050a:	891a      	ldrh	r2, [r3, #8]
 801050c:	693b      	ldr	r3, [r7, #16]
 801050e:	815a      	strh	r2, [r3, #10]
  return p;
 8010510:	693b      	ldr	r3, [r7, #16]
}
 8010512:	4618      	mov	r0, r3
 8010514:	3718      	adds	r7, #24
 8010516:	46bd      	mov	sp, r7
 8010518:	bd80      	pop	{r7, pc}
 801051a:	bf00      	nop
 801051c:	08018720 	.word	0x08018720
 8010520:	080187d8 	.word	0x080187d8
 8010524:	08018774 	.word	0x08018774
 8010528:	080187fc 	.word	0x080187fc
 801052c:	0801881c 	.word	0x0801881c

08010530 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8010530:	b580      	push	{r7, lr}
 8010532:	b082      	sub	sp, #8
 8010534:	af00      	add	r7, sp, #0
 8010536:	6078      	str	r0, [r7, #4]
 8010538:	460b      	mov	r3, r1
 801053a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d106      	bne.n	8010550 <tcp_write_checks+0x20>
 8010542:	4b33      	ldr	r3, [pc, #204]	; (8010610 <tcp_write_checks+0xe0>)
 8010544:	f240 1233 	movw	r2, #307	; 0x133
 8010548:	4932      	ldr	r1, [pc, #200]	; (8010614 <tcp_write_checks+0xe4>)
 801054a:	4833      	ldr	r0, [pc, #204]	; (8010618 <tcp_write_checks+0xe8>)
 801054c:	f005 f856 	bl	80155fc <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	7d1b      	ldrb	r3, [r3, #20]
 8010554:	2b04      	cmp	r3, #4
 8010556:	d00e      	beq.n	8010576 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801055c:	2b07      	cmp	r3, #7
 801055e:	d00a      	beq.n	8010576 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8010564:	2b02      	cmp	r3, #2
 8010566:	d006      	beq.n	8010576 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801056c:	2b03      	cmp	r3, #3
 801056e:	d002      	beq.n	8010576 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8010570:	f06f 030a 	mvn.w	r3, #10
 8010574:	e048      	b.n	8010608 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8010576:	887b      	ldrh	r3, [r7, #2]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d101      	bne.n	8010580 <tcp_write_checks+0x50>
    return ERR_OK;
 801057c:	2300      	movs	r3, #0
 801057e:	e043      	b.n	8010608 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010586:	887a      	ldrh	r2, [r7, #2]
 8010588:	429a      	cmp	r2, r3
 801058a:	d909      	bls.n	80105a0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	8b5b      	ldrh	r3, [r3, #26]
 8010590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010594:	b29a      	uxth	r2, r3
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801059a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801059e:	e033      	b.n	8010608 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80105a6:	2b08      	cmp	r3, #8
 80105a8:	d909      	bls.n	80105be <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	8b5b      	ldrh	r3, [r3, #26]
 80105ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105b2:	b29a      	uxth	r2, r3
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80105b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80105bc:	e024      	b.n	8010608 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d00f      	beq.n	80105e8 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d11a      	bne.n	8010606 <tcp_write_checks+0xd6>
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d116      	bne.n	8010606 <tcp_write_checks+0xd6>
 80105d8:	4b0d      	ldr	r3, [pc, #52]	; (8010610 <tcp_write_checks+0xe0>)
 80105da:	f240 1255 	movw	r2, #341	; 0x155
 80105de:	490f      	ldr	r1, [pc, #60]	; (801061c <tcp_write_checks+0xec>)
 80105e0:	480d      	ldr	r0, [pc, #52]	; (8010618 <tcp_write_checks+0xe8>)
 80105e2:	f005 f80b 	bl	80155fc <iprintf>
 80105e6:	e00e      	b.n	8010606 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d103      	bne.n	80105f8 <tcp_write_checks+0xc8>
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d006      	beq.n	8010606 <tcp_write_checks+0xd6>
 80105f8:	4b05      	ldr	r3, [pc, #20]	; (8010610 <tcp_write_checks+0xe0>)
 80105fa:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80105fe:	4908      	ldr	r1, [pc, #32]	; (8010620 <tcp_write_checks+0xf0>)
 8010600:	4805      	ldr	r0, [pc, #20]	; (8010618 <tcp_write_checks+0xe8>)
 8010602:	f004 fffb 	bl	80155fc <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8010606:	2300      	movs	r3, #0
}
 8010608:	4618      	mov	r0, r3
 801060a:	3708      	adds	r7, #8
 801060c:	46bd      	mov	sp, r7
 801060e:	bd80      	pop	{r7, pc}
 8010610:	08018720 	.word	0x08018720
 8010614:	08018830 	.word	0x08018830
 8010618:	08018774 	.word	0x08018774
 801061c:	08018850 	.word	0x08018850
 8010620:	0801888c 	.word	0x0801888c

08010624 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8010624:	b590      	push	{r4, r7, lr}
 8010626:	b09b      	sub	sp, #108	; 0x6c
 8010628:	af04      	add	r7, sp, #16
 801062a:	60f8      	str	r0, [r7, #12]
 801062c:	60b9      	str	r1, [r7, #8]
 801062e:	4611      	mov	r1, r2
 8010630:	461a      	mov	r2, r3
 8010632:	460b      	mov	r3, r1
 8010634:	80fb      	strh	r3, [r7, #6]
 8010636:	4613      	mov	r3, r2
 8010638:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801063a:	2300      	movs	r3, #0
 801063c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801063e:	2300      	movs	r3, #0
 8010640:	653b      	str	r3, [r7, #80]	; 0x50
 8010642:	2300      	movs	r3, #0
 8010644:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010646:	2300      	movs	r3, #0
 8010648:	64bb      	str	r3, [r7, #72]	; 0x48
 801064a:	2300      	movs	r3, #0
 801064c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801064e:	2300      	movs	r3, #0
 8010650:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8010654:	2300      	movs	r3, #0
 8010656:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801065a:	2300      	movs	r3, #0
 801065c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801065e:	2300      	movs	r3, #0
 8010660:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8010662:	2300      	movs	r3, #0
 8010664:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d109      	bne.n	8010680 <tcp_write+0x5c>
 801066c:	4ba4      	ldr	r3, [pc, #656]	; (8010900 <tcp_write+0x2dc>)
 801066e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8010672:	49a4      	ldr	r1, [pc, #656]	; (8010904 <tcp_write+0x2e0>)
 8010674:	48a4      	ldr	r0, [pc, #656]	; (8010908 <tcp_write+0x2e4>)
 8010676:	f004 ffc1 	bl	80155fc <iprintf>
 801067a:	f06f 030f 	mvn.w	r3, #15
 801067e:	e32a      	b.n	8010cd6 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010686:	085b      	lsrs	r3, r3, #1
 8010688:	b29a      	uxth	r2, r3
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801068e:	4293      	cmp	r3, r2
 8010690:	bf28      	it	cs
 8010692:	4613      	movcs	r3, r2
 8010694:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8010696:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010698:	2b00      	cmp	r3, #0
 801069a:	d102      	bne.n	80106a2 <tcp_write+0x7e>
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80106a0:	e000      	b.n	80106a4 <tcp_write+0x80>
 80106a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80106a4:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80106a6:	68bb      	ldr	r3, [r7, #8]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d109      	bne.n	80106c0 <tcp_write+0x9c>
 80106ac:	4b94      	ldr	r3, [pc, #592]	; (8010900 <tcp_write+0x2dc>)
 80106ae:	f240 12ad 	movw	r2, #429	; 0x1ad
 80106b2:	4996      	ldr	r1, [pc, #600]	; (801090c <tcp_write+0x2e8>)
 80106b4:	4894      	ldr	r0, [pc, #592]	; (8010908 <tcp_write+0x2e4>)
 80106b6:	f004 ffa1 	bl	80155fc <iprintf>
 80106ba:	f06f 030f 	mvn.w	r3, #15
 80106be:	e30a      	b.n	8010cd6 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80106c0:	88fb      	ldrh	r3, [r7, #6]
 80106c2:	4619      	mov	r1, r3
 80106c4:	68f8      	ldr	r0, [r7, #12]
 80106c6:	f7ff ff33 	bl	8010530 <tcp_write_checks>
 80106ca:	4603      	mov	r3, r0
 80106cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80106d0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d002      	beq.n	80106de <tcp_write+0xba>
    return err;
 80106d8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80106dc:	e2fb      	b.n	8010cd6 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80106e4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80106e8:	2300      	movs	r3, #0
 80106ea:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	f000 80f6 	beq.w	80108e4 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106fc:	653b      	str	r3, [r7, #80]	; 0x50
 80106fe:	e002      	b.n	8010706 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8010700:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d1f8      	bne.n	8010700 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801070e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010710:	7a9b      	ldrb	r3, [r3, #10]
 8010712:	009b      	lsls	r3, r3, #2
 8010714:	b29b      	uxth	r3, r3
 8010716:	f003 0304 	and.w	r3, r3, #4
 801071a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801071c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801071e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010720:	891b      	ldrh	r3, [r3, #8]
 8010722:	4619      	mov	r1, r3
 8010724:	8c3b      	ldrh	r3, [r7, #32]
 8010726:	440b      	add	r3, r1
 8010728:	429a      	cmp	r2, r3
 801072a:	da06      	bge.n	801073a <tcp_write+0x116>
 801072c:	4b74      	ldr	r3, [pc, #464]	; (8010900 <tcp_write+0x2dc>)
 801072e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010732:	4977      	ldr	r1, [pc, #476]	; (8010910 <tcp_write+0x2ec>)
 8010734:	4874      	ldr	r0, [pc, #464]	; (8010908 <tcp_write+0x2e4>)
 8010736:	f004 ff61 	bl	80155fc <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801073a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801073c:	891a      	ldrh	r2, [r3, #8]
 801073e:	8c3b      	ldrh	r3, [r7, #32]
 8010740:	4413      	add	r3, r2
 8010742:	b29b      	uxth	r3, r3
 8010744:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010746:	1ad3      	subs	r3, r2, r3
 8010748:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010750:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8010752:	8a7b      	ldrh	r3, [r7, #18]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d026      	beq.n	80107a6 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8010758:	8a7b      	ldrh	r3, [r7, #18]
 801075a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801075c:	429a      	cmp	r2, r3
 801075e:	d206      	bcs.n	801076e <tcp_write+0x14a>
 8010760:	4b67      	ldr	r3, [pc, #412]	; (8010900 <tcp_write+0x2dc>)
 8010762:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8010766:	496b      	ldr	r1, [pc, #428]	; (8010914 <tcp_write+0x2f0>)
 8010768:	4867      	ldr	r0, [pc, #412]	; (8010908 <tcp_write+0x2e4>)
 801076a:	f004 ff47 	bl	80155fc <iprintf>
      seg = last_unsent;
 801076e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010770:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8010772:	8a7b      	ldrh	r3, [r7, #18]
 8010774:	88fa      	ldrh	r2, [r7, #6]
 8010776:	4293      	cmp	r3, r2
 8010778:	bf28      	it	cs
 801077a:	4613      	movcs	r3, r2
 801077c:	b29b      	uxth	r3, r3
 801077e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010780:	4293      	cmp	r3, r2
 8010782:	bf28      	it	cs
 8010784:	4613      	movcs	r3, r2
 8010786:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8010788:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801078c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801078e:	4413      	add	r3, r2
 8010790:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8010794:	8a7a      	ldrh	r2, [r7, #18]
 8010796:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010798:	1ad3      	subs	r3, r2, r3
 801079a:	b29b      	uxth	r3, r3
 801079c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801079e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80107a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80107a2:	1ad3      	subs	r3, r2, r3
 80107a4:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80107a6:	8a7b      	ldrh	r3, [r7, #18]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d00b      	beq.n	80107c4 <tcp_write+0x1a0>
 80107ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80107b0:	88fb      	ldrh	r3, [r7, #6]
 80107b2:	429a      	cmp	r2, r3
 80107b4:	d006      	beq.n	80107c4 <tcp_write+0x1a0>
 80107b6:	4b52      	ldr	r3, [pc, #328]	; (8010900 <tcp_write+0x2dc>)
 80107b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80107bc:	4956      	ldr	r1, [pc, #344]	; (8010918 <tcp_write+0x2f4>)
 80107be:	4852      	ldr	r0, [pc, #328]	; (8010908 <tcp_write+0x2e4>)
 80107c0:	f004 ff1c 	bl	80155fc <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80107c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80107c8:	88fb      	ldrh	r3, [r7, #6]
 80107ca:	429a      	cmp	r2, r3
 80107cc:	f080 8167 	bcs.w	8010a9e <tcp_write+0x47a>
 80107d0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	f000 8163 	beq.w	8010a9e <tcp_write+0x47a>
 80107d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107da:	891b      	ldrh	r3, [r3, #8]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	f000 815e 	beq.w	8010a9e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80107e2:	88fa      	ldrh	r2, [r7, #6]
 80107e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80107e8:	1ad2      	subs	r2, r2, r3
 80107ea:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80107ec:	4293      	cmp	r3, r2
 80107ee:	bfa8      	it	ge
 80107f0:	4613      	movge	r3, r2
 80107f2:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80107f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107f6:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80107f8:	797b      	ldrb	r3, [r7, #5]
 80107fa:	f003 0301 	and.w	r3, r3, #1
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d027      	beq.n	8010852 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8010802:	f107 0012 	add.w	r0, r7, #18
 8010806:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010808:	8bf9      	ldrh	r1, [r7, #30]
 801080a:	2301      	movs	r3, #1
 801080c:	9302      	str	r3, [sp, #8]
 801080e:	797b      	ldrb	r3, [r7, #5]
 8010810:	9301      	str	r3, [sp, #4]
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	9300      	str	r3, [sp, #0]
 8010816:	4603      	mov	r3, r0
 8010818:	2000      	movs	r0, #0
 801081a:	f7ff fe0f 	bl	801043c <tcp_pbuf_prealloc>
 801081e:	6578      	str	r0, [r7, #84]	; 0x54
 8010820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010822:	2b00      	cmp	r3, #0
 8010824:	f000 8225 	beq.w	8010c72 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8010828:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801082a:	6858      	ldr	r0, [r3, #4]
 801082c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010830:	68ba      	ldr	r2, [r7, #8]
 8010832:	4413      	add	r3, r2
 8010834:	8bfa      	ldrh	r2, [r7, #30]
 8010836:	4619      	mov	r1, r3
 8010838:	f004 fe6f 	bl	801551a <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801083c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801083e:	f7fb f9c3 	bl	800bbc8 <pbuf_clen>
 8010842:	4603      	mov	r3, r0
 8010844:	461a      	mov	r2, r3
 8010846:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801084a:	4413      	add	r3, r2
 801084c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8010850:	e041      	b.n	80108d6 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8010852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010854:	685b      	ldr	r3, [r3, #4]
 8010856:	637b      	str	r3, [r7, #52]	; 0x34
 8010858:	e002      	b.n	8010860 <tcp_write+0x23c>
 801085a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	637b      	str	r3, [r7, #52]	; 0x34
 8010860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	2b00      	cmp	r3, #0
 8010866:	d1f8      	bne.n	801085a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801086a:	7b1b      	ldrb	r3, [r3, #12]
 801086c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010870:	2b00      	cmp	r3, #0
 8010872:	d115      	bne.n	80108a0 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8010874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010876:	685b      	ldr	r3, [r3, #4]
 8010878:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801087a:	8952      	ldrh	r2, [r2, #10]
 801087c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801087e:	68ba      	ldr	r2, [r7, #8]
 8010880:	429a      	cmp	r2, r3
 8010882:	d10d      	bne.n	80108a0 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8010884:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010888:	2b00      	cmp	r3, #0
 801088a:	d006      	beq.n	801089a <tcp_write+0x276>
 801088c:	4b1c      	ldr	r3, [pc, #112]	; (8010900 <tcp_write+0x2dc>)
 801088e:	f240 2231 	movw	r2, #561	; 0x231
 8010892:	4922      	ldr	r1, [pc, #136]	; (801091c <tcp_write+0x2f8>)
 8010894:	481c      	ldr	r0, [pc, #112]	; (8010908 <tcp_write+0x2e4>)
 8010896:	f004 feb1 	bl	80155fc <iprintf>
          extendlen = seglen;
 801089a:	8bfb      	ldrh	r3, [r7, #30]
 801089c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801089e:	e01a      	b.n	80108d6 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80108a0:	8bfb      	ldrh	r3, [r7, #30]
 80108a2:	2201      	movs	r2, #1
 80108a4:	4619      	mov	r1, r3
 80108a6:	2000      	movs	r0, #0
 80108a8:	f7fa fe1c 	bl	800b4e4 <pbuf_alloc>
 80108ac:	6578      	str	r0, [r7, #84]	; 0x54
 80108ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	f000 81e0 	beq.w	8010c76 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80108b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80108ba:	68ba      	ldr	r2, [r7, #8]
 80108bc:	441a      	add	r2, r3
 80108be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80108c0:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80108c2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80108c4:	f7fb f980 	bl	800bbc8 <pbuf_clen>
 80108c8:	4603      	mov	r3, r0
 80108ca:	461a      	mov	r2, r3
 80108cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80108d0:	4413      	add	r3, r2
 80108d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80108d6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80108da:	8bfb      	ldrh	r3, [r7, #30]
 80108dc:	4413      	add	r3, r2
 80108de:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80108e2:	e0dc      	b.n	8010a9e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	f000 80d7 	beq.w	8010a9e <tcp_write+0x47a>
 80108f0:	4b03      	ldr	r3, [pc, #12]	; (8010900 <tcp_write+0x2dc>)
 80108f2:	f240 224a 	movw	r2, #586	; 0x24a
 80108f6:	490a      	ldr	r1, [pc, #40]	; (8010920 <tcp_write+0x2fc>)
 80108f8:	4803      	ldr	r0, [pc, #12]	; (8010908 <tcp_write+0x2e4>)
 80108fa:	f004 fe7f 	bl	80155fc <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80108fe:	e0ce      	b.n	8010a9e <tcp_write+0x47a>
 8010900:	08018720 	.word	0x08018720
 8010904:	080188c0 	.word	0x080188c0
 8010908:	08018774 	.word	0x08018774
 801090c:	080188d8 	.word	0x080188d8
 8010910:	0801890c 	.word	0x0801890c
 8010914:	08018924 	.word	0x08018924
 8010918:	08018944 	.word	0x08018944
 801091c:	08018964 	.word	0x08018964
 8010920:	08018990 	.word	0x08018990
    struct pbuf *p;
    u16_t left = len - pos;
 8010924:	88fa      	ldrh	r2, [r7, #6]
 8010926:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801092a:	1ad3      	subs	r3, r2, r3
 801092c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801092e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010932:	b29b      	uxth	r3, r3
 8010934:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010936:	1ad3      	subs	r3, r2, r3
 8010938:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801093a:	8b7a      	ldrh	r2, [r7, #26]
 801093c:	8bbb      	ldrh	r3, [r7, #28]
 801093e:	4293      	cmp	r3, r2
 8010940:	bf28      	it	cs
 8010942:	4613      	movcs	r3, r2
 8010944:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010946:	797b      	ldrb	r3, [r7, #5]
 8010948:	f003 0301 	and.w	r3, r3, #1
 801094c:	2b00      	cmp	r3, #0
 801094e:	d036      	beq.n	80109be <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8010950:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010954:	b29a      	uxth	r2, r3
 8010956:	8b3b      	ldrh	r3, [r7, #24]
 8010958:	4413      	add	r3, r2
 801095a:	b299      	uxth	r1, r3
 801095c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801095e:	2b00      	cmp	r3, #0
 8010960:	bf0c      	ite	eq
 8010962:	2301      	moveq	r3, #1
 8010964:	2300      	movne	r3, #0
 8010966:	b2db      	uxtb	r3, r3
 8010968:	f107 0012 	add.w	r0, r7, #18
 801096c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801096e:	9302      	str	r3, [sp, #8]
 8010970:	797b      	ldrb	r3, [r7, #5]
 8010972:	9301      	str	r3, [sp, #4]
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	9300      	str	r3, [sp, #0]
 8010978:	4603      	mov	r3, r0
 801097a:	2036      	movs	r0, #54	; 0x36
 801097c:	f7ff fd5e 	bl	801043c <tcp_pbuf_prealloc>
 8010980:	6338      	str	r0, [r7, #48]	; 0x30
 8010982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010984:	2b00      	cmp	r3, #0
 8010986:	f000 8178 	beq.w	8010c7a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801098a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801098c:	895b      	ldrh	r3, [r3, #10]
 801098e:	8b3a      	ldrh	r2, [r7, #24]
 8010990:	429a      	cmp	r2, r3
 8010992:	d906      	bls.n	80109a2 <tcp_write+0x37e>
 8010994:	4b8c      	ldr	r3, [pc, #560]	; (8010bc8 <tcp_write+0x5a4>)
 8010996:	f240 2266 	movw	r2, #614	; 0x266
 801099a:	498c      	ldr	r1, [pc, #560]	; (8010bcc <tcp_write+0x5a8>)
 801099c:	488c      	ldr	r0, [pc, #560]	; (8010bd0 <tcp_write+0x5ac>)
 801099e:	f004 fe2d 	bl	80155fc <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80109a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109a4:	685a      	ldr	r2, [r3, #4]
 80109a6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80109aa:	18d0      	adds	r0, r2, r3
 80109ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80109b0:	68ba      	ldr	r2, [r7, #8]
 80109b2:	4413      	add	r3, r2
 80109b4:	8b3a      	ldrh	r2, [r7, #24]
 80109b6:	4619      	mov	r1, r3
 80109b8:	f004 fdaf 	bl	801551a <memcpy>
 80109bc:	e02f      	b.n	8010a1e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80109be:	8a7b      	ldrh	r3, [r7, #18]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d006      	beq.n	80109d2 <tcp_write+0x3ae>
 80109c4:	4b80      	ldr	r3, [pc, #512]	; (8010bc8 <tcp_write+0x5a4>)
 80109c6:	f240 2271 	movw	r2, #625	; 0x271
 80109ca:	4982      	ldr	r1, [pc, #520]	; (8010bd4 <tcp_write+0x5b0>)
 80109cc:	4880      	ldr	r0, [pc, #512]	; (8010bd0 <tcp_write+0x5ac>)
 80109ce:	f004 fe15 	bl	80155fc <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80109d2:	8b3b      	ldrh	r3, [r7, #24]
 80109d4:	2201      	movs	r2, #1
 80109d6:	4619      	mov	r1, r3
 80109d8:	2036      	movs	r0, #54	; 0x36
 80109da:	f7fa fd83 	bl	800b4e4 <pbuf_alloc>
 80109de:	6178      	str	r0, [r7, #20]
 80109e0:	697b      	ldr	r3, [r7, #20]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	f000 814b 	beq.w	8010c7e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80109e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80109ec:	68ba      	ldr	r2, [r7, #8]
 80109ee:	441a      	add	r2, r3
 80109f0:	697b      	ldr	r3, [r7, #20]
 80109f2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80109f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80109f8:	b29b      	uxth	r3, r3
 80109fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80109fe:	4619      	mov	r1, r3
 8010a00:	2036      	movs	r0, #54	; 0x36
 8010a02:	f7fa fd6f 	bl	800b4e4 <pbuf_alloc>
 8010a06:	6338      	str	r0, [r7, #48]	; 0x30
 8010a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d103      	bne.n	8010a16 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8010a0e:	6978      	ldr	r0, [r7, #20]
 8010a10:	f7fb f84c 	bl	800baac <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8010a14:	e136      	b.n	8010c84 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8010a16:	6979      	ldr	r1, [r7, #20]
 8010a18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a1a:	f7fb f915 	bl	800bc48 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8010a1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a20:	f7fb f8d2 	bl	800bbc8 <pbuf_clen>
 8010a24:	4603      	mov	r3, r0
 8010a26:	461a      	mov	r2, r3
 8010a28:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010a2c:	4413      	add	r3, r2
 8010a2e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8010a32:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010a36:	2b09      	cmp	r3, #9
 8010a38:	d903      	bls.n	8010a42 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8010a3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a3c:	f7fb f836 	bl	800baac <pbuf_free>
      goto memerr;
 8010a40:	e120      	b.n	8010c84 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010a46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010a4a:	441a      	add	r2, r3
 8010a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010a50:	9300      	str	r3, [sp, #0]
 8010a52:	4613      	mov	r3, r2
 8010a54:	2200      	movs	r2, #0
 8010a56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010a58:	68f8      	ldr	r0, [r7, #12]
 8010a5a:	f7ff fc51 	bl	8010300 <tcp_create_segment>
 8010a5e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8010a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	f000 810d 	beq.w	8010c82 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8010a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d102      	bne.n	8010a74 <tcp_write+0x450>
      queue = seg;
 8010a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a70:	647b      	str	r3, [r7, #68]	; 0x44
 8010a72:	e00c      	b.n	8010a8e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8010a74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d106      	bne.n	8010a88 <tcp_write+0x464>
 8010a7a:	4b53      	ldr	r3, [pc, #332]	; (8010bc8 <tcp_write+0x5a4>)
 8010a7c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010a80:	4955      	ldr	r1, [pc, #340]	; (8010bd8 <tcp_write+0x5b4>)
 8010a82:	4853      	ldr	r0, [pc, #332]	; (8010bd0 <tcp_write+0x5ac>)
 8010a84:	f004 fdba 	bl	80155fc <iprintf>
      prev_seg->next = seg;
 8010a88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010a8c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8010a8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a90:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8010a92:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010a96:	8b3b      	ldrh	r3, [r7, #24]
 8010a98:	4413      	add	r3, r2
 8010a9a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8010a9e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010aa2:	88fb      	ldrh	r3, [r7, #6]
 8010aa4:	429a      	cmp	r2, r3
 8010aa6:	f4ff af3d 	bcc.w	8010924 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8010aaa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d02c      	beq.n	8010b0a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8010ab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ab2:	685b      	ldr	r3, [r3, #4]
 8010ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010ab6:	e01e      	b.n	8010af6 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8010ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010aba:	891a      	ldrh	r2, [r3, #8]
 8010abc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010abe:	4413      	add	r3, r2
 8010ac0:	b29a      	uxth	r2, r3
 8010ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ac4:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8010ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d110      	bne.n	8010af0 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8010ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ad0:	685b      	ldr	r3, [r3, #4]
 8010ad2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010ad4:	8952      	ldrh	r2, [r2, #10]
 8010ad6:	4413      	add	r3, r2
 8010ad8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010ada:	68b9      	ldr	r1, [r7, #8]
 8010adc:	4618      	mov	r0, r3
 8010ade:	f004 fd1c 	bl	801551a <memcpy>
        p->len += oversize_used;
 8010ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ae4:	895a      	ldrh	r2, [r3, #10]
 8010ae6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010ae8:	4413      	add	r3, r2
 8010aea:	b29a      	uxth	r2, r3
 8010aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010aee:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8010af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d1dd      	bne.n	8010ab8 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8010afc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010afe:	891a      	ldrh	r2, [r3, #8]
 8010b00:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010b02:	4413      	add	r3, r2
 8010b04:	b29a      	uxth	r2, r3
 8010b06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b08:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8010b0a:	8a7a      	ldrh	r2, [r7, #18]
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8010b12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d018      	beq.n	8010b4a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8010b18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d106      	bne.n	8010b2c <tcp_write+0x508>
 8010b1e:	4b2a      	ldr	r3, [pc, #168]	; (8010bc8 <tcp_write+0x5a4>)
 8010b20:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8010b24:	492d      	ldr	r1, [pc, #180]	; (8010bdc <tcp_write+0x5b8>)
 8010b26:	482a      	ldr	r0, [pc, #168]	; (8010bd0 <tcp_write+0x5ac>)
 8010b28:	f004 fd68 	bl	80155fc <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8010b2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b2e:	685b      	ldr	r3, [r3, #4]
 8010b30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010b32:	4618      	mov	r0, r3
 8010b34:	f7fb f888 	bl	800bc48 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8010b38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b3a:	891a      	ldrh	r2, [r3, #8]
 8010b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b3e:	891b      	ldrh	r3, [r3, #8]
 8010b40:	4413      	add	r3, r2
 8010b42:	b29a      	uxth	r2, r3
 8010b44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b46:	811a      	strh	r2, [r3, #8]
 8010b48:	e037      	b.n	8010bba <tcp_write+0x596>
  } else if (extendlen > 0) {
 8010b4a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d034      	beq.n	8010bba <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8010b50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d003      	beq.n	8010b5e <tcp_write+0x53a>
 8010b56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b58:	685b      	ldr	r3, [r3, #4]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d106      	bne.n	8010b6c <tcp_write+0x548>
 8010b5e:	4b1a      	ldr	r3, [pc, #104]	; (8010bc8 <tcp_write+0x5a4>)
 8010b60:	f240 22e6 	movw	r2, #742	; 0x2e6
 8010b64:	491e      	ldr	r1, [pc, #120]	; (8010be0 <tcp_write+0x5bc>)
 8010b66:	481a      	ldr	r0, [pc, #104]	; (8010bd0 <tcp_write+0x5ac>)
 8010b68:	f004 fd48 	bl	80155fc <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010b6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b6e:	685b      	ldr	r3, [r3, #4]
 8010b70:	62bb      	str	r3, [r7, #40]	; 0x28
 8010b72:	e009      	b.n	8010b88 <tcp_write+0x564>
      p->tot_len += extendlen;
 8010b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b76:	891a      	ldrh	r2, [r3, #8]
 8010b78:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010b7a:	4413      	add	r3, r2
 8010b7c:	b29a      	uxth	r2, r3
 8010b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b80:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	62bb      	str	r3, [r7, #40]	; 0x28
 8010b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d1f1      	bne.n	8010b74 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8010b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b92:	891a      	ldrh	r2, [r3, #8]
 8010b94:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010b96:	4413      	add	r3, r2
 8010b98:	b29a      	uxth	r2, r3
 8010b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b9c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8010b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ba0:	895a      	ldrh	r2, [r3, #10]
 8010ba2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010ba4:	4413      	add	r3, r2
 8010ba6:	b29a      	uxth	r2, r3
 8010ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010baa:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8010bac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bae:	891a      	ldrh	r2, [r3, #8]
 8010bb0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010bb2:	4413      	add	r3, r2
 8010bb4:	b29a      	uxth	r2, r3
 8010bb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bb8:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8010bba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d111      	bne.n	8010be4 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010bc4:	66da      	str	r2, [r3, #108]	; 0x6c
 8010bc6:	e010      	b.n	8010bea <tcp_write+0x5c6>
 8010bc8:	08018720 	.word	0x08018720
 8010bcc:	080189c0 	.word	0x080189c0
 8010bd0:	08018774 	.word	0x08018774
 8010bd4:	08018a00 	.word	0x08018a00
 8010bd8:	08018a10 	.word	0x08018a10
 8010bdc:	08018a24 	.word	0x08018a24
 8010be0:	08018a5c 	.word	0x08018a5c
  } else {
    last_unsent->next = queue;
 8010be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010be6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010be8:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010bee:	88fb      	ldrh	r3, [r7, #6]
 8010bf0:	441a      	add	r2, r3
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010bfc:	88fb      	ldrh	r3, [r7, #6]
 8010bfe:	1ad3      	subs	r3, r2, r3
 8010c00:	b29a      	uxth	r2, r3
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010c0e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d00e      	beq.n	8010c3a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d10a      	bne.n	8010c3a <tcp_write+0x616>
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d106      	bne.n	8010c3a <tcp_write+0x616>
 8010c2c:	4b2c      	ldr	r3, [pc, #176]	; (8010ce0 <tcp_write+0x6bc>)
 8010c2e:	f240 3212 	movw	r2, #786	; 0x312
 8010c32:	492c      	ldr	r1, [pc, #176]	; (8010ce4 <tcp_write+0x6c0>)
 8010c34:	482c      	ldr	r0, [pc, #176]	; (8010ce8 <tcp_write+0x6c4>)
 8010c36:	f004 fce1 	bl	80155fc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8010c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d016      	beq.n	8010c6e <tcp_write+0x64a>
 8010c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c42:	68db      	ldr	r3, [r3, #12]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d012      	beq.n	8010c6e <tcp_write+0x64a>
 8010c48:	797b      	ldrb	r3, [r7, #5]
 8010c4a:	f003 0302 	and.w	r3, r3, #2
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d10d      	bne.n	8010c6e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8010c52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c54:	68db      	ldr	r3, [r3, #12]
 8010c56:	899b      	ldrh	r3, [r3, #12]
 8010c58:	b29c      	uxth	r4, r3
 8010c5a:	2008      	movs	r0, #8
 8010c5c:	f7f9 fb7a 	bl	800a354 <lwip_htons>
 8010c60:	4603      	mov	r3, r0
 8010c62:	461a      	mov	r2, r3
 8010c64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c66:	68db      	ldr	r3, [r3, #12]
 8010c68:	4322      	orrs	r2, r4
 8010c6a:	b292      	uxth	r2, r2
 8010c6c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8010c6e:	2300      	movs	r3, #0
 8010c70:	e031      	b.n	8010cd6 <tcp_write+0x6b2>
          goto memerr;
 8010c72:	bf00      	nop
 8010c74:	e006      	b.n	8010c84 <tcp_write+0x660>
            goto memerr;
 8010c76:	bf00      	nop
 8010c78:	e004      	b.n	8010c84 <tcp_write+0x660>
        goto memerr;
 8010c7a:	bf00      	nop
 8010c7c:	e002      	b.n	8010c84 <tcp_write+0x660>
        goto memerr;
 8010c7e:	bf00      	nop
 8010c80:	e000      	b.n	8010c84 <tcp_write+0x660>
      goto memerr;
 8010c82:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	8b5b      	ldrh	r3, [r3, #26]
 8010c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c8c:	b29a      	uxth	r2, r3
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8010c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d002      	beq.n	8010c9e <tcp_write+0x67a>
    pbuf_free(concat_p);
 8010c98:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010c9a:	f7fa ff07 	bl	800baac <pbuf_free>
  }
  if (queue != NULL) {
 8010c9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d002      	beq.n	8010caa <tcp_write+0x686>
    tcp_segs_free(queue);
 8010ca4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010ca6:	f7fc fb6f 	bl	800d388 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d00e      	beq.n	8010cd2 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d10a      	bne.n	8010cd2 <tcp_write+0x6ae>
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d106      	bne.n	8010cd2 <tcp_write+0x6ae>
 8010cc4:	4b06      	ldr	r3, [pc, #24]	; (8010ce0 <tcp_write+0x6bc>)
 8010cc6:	f240 3227 	movw	r2, #807	; 0x327
 8010cca:	4906      	ldr	r1, [pc, #24]	; (8010ce4 <tcp_write+0x6c0>)
 8010ccc:	4806      	ldr	r0, [pc, #24]	; (8010ce8 <tcp_write+0x6c4>)
 8010cce:	f004 fc95 	bl	80155fc <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8010cd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	375c      	adds	r7, #92	; 0x5c
 8010cda:	46bd      	mov	sp, r7
 8010cdc:	bd90      	pop	{r4, r7, pc}
 8010cde:	bf00      	nop
 8010ce0:	08018720 	.word	0x08018720
 8010ce4:	08018a94 	.word	0x08018a94
 8010ce8:	08018774 	.word	0x08018774

08010cec <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010cec:	b590      	push	{r4, r7, lr}
 8010cee:	b08b      	sub	sp, #44	; 0x2c
 8010cf0:	af02      	add	r7, sp, #8
 8010cf2:	6078      	str	r0, [r7, #4]
 8010cf4:	460b      	mov	r3, r1
 8010cf6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	61fb      	str	r3, [r7, #28]
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010d00:	2300      	movs	r3, #0
 8010d02:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d106      	bne.n	8010d18 <tcp_split_unsent_seg+0x2c>
 8010d0a:	4b95      	ldr	r3, [pc, #596]	; (8010f60 <tcp_split_unsent_seg+0x274>)
 8010d0c:	f240 324b 	movw	r2, #843	; 0x34b
 8010d10:	4994      	ldr	r1, [pc, #592]	; (8010f64 <tcp_split_unsent_seg+0x278>)
 8010d12:	4895      	ldr	r0, [pc, #596]	; (8010f68 <tcp_split_unsent_seg+0x27c>)
 8010d14:	f004 fc72 	bl	80155fc <iprintf>

  useg = pcb->unsent;
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d1c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8010d1e:	697b      	ldr	r3, [r7, #20]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d102      	bne.n	8010d2a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010d24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010d28:	e116      	b.n	8010f58 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8010d2a:	887b      	ldrh	r3, [r7, #2]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d109      	bne.n	8010d44 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8010d30:	4b8b      	ldr	r3, [pc, #556]	; (8010f60 <tcp_split_unsent_seg+0x274>)
 8010d32:	f240 3253 	movw	r2, #851	; 0x353
 8010d36:	498d      	ldr	r1, [pc, #564]	; (8010f6c <tcp_split_unsent_seg+0x280>)
 8010d38:	488b      	ldr	r0, [pc, #556]	; (8010f68 <tcp_split_unsent_seg+0x27c>)
 8010d3a:	f004 fc5f 	bl	80155fc <iprintf>
    return ERR_VAL;
 8010d3e:	f06f 0305 	mvn.w	r3, #5
 8010d42:	e109      	b.n	8010f58 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010d44:	697b      	ldr	r3, [r7, #20]
 8010d46:	891b      	ldrh	r3, [r3, #8]
 8010d48:	887a      	ldrh	r2, [r7, #2]
 8010d4a:	429a      	cmp	r2, r3
 8010d4c:	d301      	bcc.n	8010d52 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8010d4e:	2300      	movs	r3, #0
 8010d50:	e102      	b.n	8010f58 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d56:	887a      	ldrh	r2, [r7, #2]
 8010d58:	429a      	cmp	r2, r3
 8010d5a:	d906      	bls.n	8010d6a <tcp_split_unsent_seg+0x7e>
 8010d5c:	4b80      	ldr	r3, [pc, #512]	; (8010f60 <tcp_split_unsent_seg+0x274>)
 8010d5e:	f240 325b 	movw	r2, #859	; 0x35b
 8010d62:	4983      	ldr	r1, [pc, #524]	; (8010f70 <tcp_split_unsent_seg+0x284>)
 8010d64:	4880      	ldr	r0, [pc, #512]	; (8010f68 <tcp_split_unsent_seg+0x27c>)
 8010d66:	f004 fc49 	bl	80155fc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010d6a:	697b      	ldr	r3, [r7, #20]
 8010d6c:	891b      	ldrh	r3, [r3, #8]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d106      	bne.n	8010d80 <tcp_split_unsent_seg+0x94>
 8010d72:	4b7b      	ldr	r3, [pc, #492]	; (8010f60 <tcp_split_unsent_seg+0x274>)
 8010d74:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8010d78:	497e      	ldr	r1, [pc, #504]	; (8010f74 <tcp_split_unsent_seg+0x288>)
 8010d7a:	487b      	ldr	r0, [pc, #492]	; (8010f68 <tcp_split_unsent_seg+0x27c>)
 8010d7c:	f004 fc3e 	bl	80155fc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8010d80:	697b      	ldr	r3, [r7, #20]
 8010d82:	7a9b      	ldrb	r3, [r3, #10]
 8010d84:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010d86:	7bfb      	ldrb	r3, [r7, #15]
 8010d88:	009b      	lsls	r3, r3, #2
 8010d8a:	b2db      	uxtb	r3, r3
 8010d8c:	f003 0304 	and.w	r3, r3, #4
 8010d90:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8010d92:	697b      	ldr	r3, [r7, #20]
 8010d94:	891a      	ldrh	r2, [r3, #8]
 8010d96:	887b      	ldrh	r3, [r7, #2]
 8010d98:	1ad3      	subs	r3, r2, r3
 8010d9a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010d9c:	7bbb      	ldrb	r3, [r7, #14]
 8010d9e:	b29a      	uxth	r2, r3
 8010da0:	89bb      	ldrh	r3, [r7, #12]
 8010da2:	4413      	add	r3, r2
 8010da4:	b29b      	uxth	r3, r3
 8010da6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010daa:	4619      	mov	r1, r3
 8010dac:	2036      	movs	r0, #54	; 0x36
 8010dae:	f7fa fb99 	bl	800b4e4 <pbuf_alloc>
 8010db2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010db4:	693b      	ldr	r3, [r7, #16]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	f000 80b7 	beq.w	8010f2a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010dbc:	697b      	ldr	r3, [r7, #20]
 8010dbe:	685b      	ldr	r3, [r3, #4]
 8010dc0:	891a      	ldrh	r2, [r3, #8]
 8010dc2:	697b      	ldr	r3, [r7, #20]
 8010dc4:	891b      	ldrh	r3, [r3, #8]
 8010dc6:	1ad3      	subs	r3, r2, r3
 8010dc8:	b29a      	uxth	r2, r3
 8010dca:	887b      	ldrh	r3, [r7, #2]
 8010dcc:	4413      	add	r3, r2
 8010dce:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010dd0:	697b      	ldr	r3, [r7, #20]
 8010dd2:	6858      	ldr	r0, [r3, #4]
 8010dd4:	693b      	ldr	r3, [r7, #16]
 8010dd6:	685a      	ldr	r2, [r3, #4]
 8010dd8:	7bbb      	ldrb	r3, [r7, #14]
 8010dda:	18d1      	adds	r1, r2, r3
 8010ddc:	897b      	ldrh	r3, [r7, #10]
 8010dde:	89ba      	ldrh	r2, [r7, #12]
 8010de0:	f7fb f85a 	bl	800be98 <pbuf_copy_partial>
 8010de4:	4603      	mov	r3, r0
 8010de6:	461a      	mov	r2, r3
 8010de8:	89bb      	ldrh	r3, [r7, #12]
 8010dea:	4293      	cmp	r3, r2
 8010dec:	f040 809f 	bne.w	8010f2e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010df0:	697b      	ldr	r3, [r7, #20]
 8010df2:	68db      	ldr	r3, [r3, #12]
 8010df4:	899b      	ldrh	r3, [r3, #12]
 8010df6:	b29b      	uxth	r3, r3
 8010df8:	4618      	mov	r0, r3
 8010dfa:	f7f9 faab 	bl	800a354 <lwip_htons>
 8010dfe:	4603      	mov	r3, r0
 8010e00:	b2db      	uxtb	r3, r3
 8010e02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010e06:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010e08:	2300      	movs	r3, #0
 8010e0a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010e0c:	7efb      	ldrb	r3, [r7, #27]
 8010e0e:	f003 0308 	and.w	r3, r3, #8
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d007      	beq.n	8010e26 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8010e16:	7efb      	ldrb	r3, [r7, #27]
 8010e18:	f023 0308 	bic.w	r3, r3, #8
 8010e1c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8010e1e:	7ebb      	ldrb	r3, [r7, #26]
 8010e20:	f043 0308 	orr.w	r3, r3, #8
 8010e24:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8010e26:	7efb      	ldrb	r3, [r7, #27]
 8010e28:	f003 0301 	and.w	r3, r3, #1
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d007      	beq.n	8010e40 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010e30:	7efb      	ldrb	r3, [r7, #27]
 8010e32:	f023 0301 	bic.w	r3, r3, #1
 8010e36:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010e38:	7ebb      	ldrb	r3, [r7, #26]
 8010e3a:	f043 0301 	orr.w	r3, r3, #1
 8010e3e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010e40:	697b      	ldr	r3, [r7, #20]
 8010e42:	68db      	ldr	r3, [r3, #12]
 8010e44:	685b      	ldr	r3, [r3, #4]
 8010e46:	4618      	mov	r0, r3
 8010e48:	f7f9 fa99 	bl	800a37e <lwip_htonl>
 8010e4c:	4602      	mov	r2, r0
 8010e4e:	887b      	ldrh	r3, [r7, #2]
 8010e50:	18d1      	adds	r1, r2, r3
 8010e52:	7eba      	ldrb	r2, [r7, #26]
 8010e54:	7bfb      	ldrb	r3, [r7, #15]
 8010e56:	9300      	str	r3, [sp, #0]
 8010e58:	460b      	mov	r3, r1
 8010e5a:	6939      	ldr	r1, [r7, #16]
 8010e5c:	6878      	ldr	r0, [r7, #4]
 8010e5e:	f7ff fa4f 	bl	8010300 <tcp_create_segment>
 8010e62:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010e64:	69fb      	ldr	r3, [r7, #28]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d063      	beq.n	8010f32 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010e6a:	697b      	ldr	r3, [r7, #20]
 8010e6c:	685b      	ldr	r3, [r3, #4]
 8010e6e:	4618      	mov	r0, r3
 8010e70:	f7fa feaa 	bl	800bbc8 <pbuf_clen>
 8010e74:	4603      	mov	r3, r0
 8010e76:	461a      	mov	r2, r3
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010e7e:	1a9b      	subs	r3, r3, r2
 8010e80:	b29a      	uxth	r2, r3
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010e88:	697b      	ldr	r3, [r7, #20]
 8010e8a:	6858      	ldr	r0, [r3, #4]
 8010e8c:	697b      	ldr	r3, [r7, #20]
 8010e8e:	685b      	ldr	r3, [r3, #4]
 8010e90:	891a      	ldrh	r2, [r3, #8]
 8010e92:	89bb      	ldrh	r3, [r7, #12]
 8010e94:	1ad3      	subs	r3, r2, r3
 8010e96:	b29b      	uxth	r3, r3
 8010e98:	4619      	mov	r1, r3
 8010e9a:	f7fa fc81 	bl	800b7a0 <pbuf_realloc>
  useg->len -= remainder;
 8010e9e:	697b      	ldr	r3, [r7, #20]
 8010ea0:	891a      	ldrh	r2, [r3, #8]
 8010ea2:	89bb      	ldrh	r3, [r7, #12]
 8010ea4:	1ad3      	subs	r3, r2, r3
 8010ea6:	b29a      	uxth	r2, r3
 8010ea8:	697b      	ldr	r3, [r7, #20]
 8010eaa:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010eac:	697b      	ldr	r3, [r7, #20]
 8010eae:	68db      	ldr	r3, [r3, #12]
 8010eb0:	899b      	ldrh	r3, [r3, #12]
 8010eb2:	b29c      	uxth	r4, r3
 8010eb4:	7efb      	ldrb	r3, [r7, #27]
 8010eb6:	b29b      	uxth	r3, r3
 8010eb8:	4618      	mov	r0, r3
 8010eba:	f7f9 fa4b 	bl	800a354 <lwip_htons>
 8010ebe:	4603      	mov	r3, r0
 8010ec0:	461a      	mov	r2, r3
 8010ec2:	697b      	ldr	r3, [r7, #20]
 8010ec4:	68db      	ldr	r3, [r3, #12]
 8010ec6:	4322      	orrs	r2, r4
 8010ec8:	b292      	uxth	r2, r2
 8010eca:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010ecc:	697b      	ldr	r3, [r7, #20]
 8010ece:	685b      	ldr	r3, [r3, #4]
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	f7fa fe79 	bl	800bbc8 <pbuf_clen>
 8010ed6:	4603      	mov	r3, r0
 8010ed8:	461a      	mov	r2, r3
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010ee0:	4413      	add	r3, r2
 8010ee2:	b29a      	uxth	r2, r3
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010eea:	69fb      	ldr	r3, [r7, #28]
 8010eec:	685b      	ldr	r3, [r3, #4]
 8010eee:	4618      	mov	r0, r3
 8010ef0:	f7fa fe6a 	bl	800bbc8 <pbuf_clen>
 8010ef4:	4603      	mov	r3, r0
 8010ef6:	461a      	mov	r2, r3
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010efe:	4413      	add	r3, r2
 8010f00:	b29a      	uxth	r2, r3
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010f08:	697b      	ldr	r3, [r7, #20]
 8010f0a:	681a      	ldr	r2, [r3, #0]
 8010f0c:	69fb      	ldr	r3, [r7, #28]
 8010f0e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010f10:	697b      	ldr	r3, [r7, #20]
 8010f12:	69fa      	ldr	r2, [r7, #28]
 8010f14:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010f16:	69fb      	ldr	r3, [r7, #28]
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d103      	bne.n	8010f26 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	2200      	movs	r2, #0
 8010f22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010f26:	2300      	movs	r3, #0
 8010f28:	e016      	b.n	8010f58 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010f2a:	bf00      	nop
 8010f2c:	e002      	b.n	8010f34 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010f2e:	bf00      	nop
 8010f30:	e000      	b.n	8010f34 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010f32:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010f34:	69fb      	ldr	r3, [r7, #28]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d006      	beq.n	8010f48 <tcp_split_unsent_seg+0x25c>
 8010f3a:	4b09      	ldr	r3, [pc, #36]	; (8010f60 <tcp_split_unsent_seg+0x274>)
 8010f3c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8010f40:	490d      	ldr	r1, [pc, #52]	; (8010f78 <tcp_split_unsent_seg+0x28c>)
 8010f42:	4809      	ldr	r0, [pc, #36]	; (8010f68 <tcp_split_unsent_seg+0x27c>)
 8010f44:	f004 fb5a 	bl	80155fc <iprintf>
  if (p != NULL) {
 8010f48:	693b      	ldr	r3, [r7, #16]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d002      	beq.n	8010f54 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010f4e:	6938      	ldr	r0, [r7, #16]
 8010f50:	f7fa fdac 	bl	800baac <pbuf_free>
  }

  return ERR_MEM;
 8010f54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8010f58:	4618      	mov	r0, r3
 8010f5a:	3724      	adds	r7, #36	; 0x24
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	bd90      	pop	{r4, r7, pc}
 8010f60:	08018720 	.word	0x08018720
 8010f64:	08018ab4 	.word	0x08018ab4
 8010f68:	08018774 	.word	0x08018774
 8010f6c:	08018ad8 	.word	0x08018ad8
 8010f70:	08018afc 	.word	0x08018afc
 8010f74:	08018b0c 	.word	0x08018b0c
 8010f78:	08018b1c 	.word	0x08018b1c

08010f7c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010f7c:	b590      	push	{r4, r7, lr}
 8010f7e:	b085      	sub	sp, #20
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d106      	bne.n	8010f98 <tcp_send_fin+0x1c>
 8010f8a:	4b21      	ldr	r3, [pc, #132]	; (8011010 <tcp_send_fin+0x94>)
 8010f8c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8010f90:	4920      	ldr	r1, [pc, #128]	; (8011014 <tcp_send_fin+0x98>)
 8010f92:	4821      	ldr	r0, [pc, #132]	; (8011018 <tcp_send_fin+0x9c>)
 8010f94:	f004 fb32 	bl	80155fc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d02e      	beq.n	8010ffe <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fa4:	60fb      	str	r3, [r7, #12]
 8010fa6:	e002      	b.n	8010fae <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d1f8      	bne.n	8010fa8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	68db      	ldr	r3, [r3, #12]
 8010fba:	899b      	ldrh	r3, [r3, #12]
 8010fbc:	b29b      	uxth	r3, r3
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	f7f9 f9c8 	bl	800a354 <lwip_htons>
 8010fc4:	4603      	mov	r3, r0
 8010fc6:	b2db      	uxtb	r3, r3
 8010fc8:	f003 0307 	and.w	r3, r3, #7
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d116      	bne.n	8010ffe <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	68db      	ldr	r3, [r3, #12]
 8010fd4:	899b      	ldrh	r3, [r3, #12]
 8010fd6:	b29c      	uxth	r4, r3
 8010fd8:	2001      	movs	r0, #1
 8010fda:	f7f9 f9bb 	bl	800a354 <lwip_htons>
 8010fde:	4603      	mov	r3, r0
 8010fe0:	461a      	mov	r2, r3
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	68db      	ldr	r3, [r3, #12]
 8010fe6:	4322      	orrs	r2, r4
 8010fe8:	b292      	uxth	r2, r2
 8010fea:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	8b5b      	ldrh	r3, [r3, #26]
 8010ff0:	f043 0320 	orr.w	r3, r3, #32
 8010ff4:	b29a      	uxth	r2, r3
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	e004      	b.n	8011008 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010ffe:	2101      	movs	r1, #1
 8011000:	6878      	ldr	r0, [r7, #4]
 8011002:	f000 f80b 	bl	801101c <tcp_enqueue_flags>
 8011006:	4603      	mov	r3, r0
}
 8011008:	4618      	mov	r0, r3
 801100a:	3714      	adds	r7, #20
 801100c:	46bd      	mov	sp, r7
 801100e:	bd90      	pop	{r4, r7, pc}
 8011010:	08018720 	.word	0x08018720
 8011014:	08018b28 	.word	0x08018b28
 8011018:	08018774 	.word	0x08018774

0801101c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801101c:	b580      	push	{r7, lr}
 801101e:	b08a      	sub	sp, #40	; 0x28
 8011020:	af02      	add	r7, sp, #8
 8011022:	6078      	str	r0, [r7, #4]
 8011024:	460b      	mov	r3, r1
 8011026:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011028:	2300      	movs	r3, #0
 801102a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801102c:	2300      	movs	r3, #0
 801102e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011030:	78fb      	ldrb	r3, [r7, #3]
 8011032:	f003 0303 	and.w	r3, r3, #3
 8011036:	2b00      	cmp	r3, #0
 8011038:	d106      	bne.n	8011048 <tcp_enqueue_flags+0x2c>
 801103a:	4b67      	ldr	r3, [pc, #412]	; (80111d8 <tcp_enqueue_flags+0x1bc>)
 801103c:	f240 4211 	movw	r2, #1041	; 0x411
 8011040:	4966      	ldr	r1, [pc, #408]	; (80111dc <tcp_enqueue_flags+0x1c0>)
 8011042:	4867      	ldr	r0, [pc, #412]	; (80111e0 <tcp_enqueue_flags+0x1c4>)
 8011044:	f004 fada 	bl	80155fc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d106      	bne.n	801105c <tcp_enqueue_flags+0x40>
 801104e:	4b62      	ldr	r3, [pc, #392]	; (80111d8 <tcp_enqueue_flags+0x1bc>)
 8011050:	f240 4213 	movw	r2, #1043	; 0x413
 8011054:	4963      	ldr	r1, [pc, #396]	; (80111e4 <tcp_enqueue_flags+0x1c8>)
 8011056:	4862      	ldr	r0, [pc, #392]	; (80111e0 <tcp_enqueue_flags+0x1c4>)
 8011058:	f004 fad0 	bl	80155fc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801105c:	78fb      	ldrb	r3, [r7, #3]
 801105e:	f003 0302 	and.w	r3, r3, #2
 8011062:	2b00      	cmp	r3, #0
 8011064:	d001      	beq.n	801106a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8011066:	2301      	movs	r3, #1
 8011068:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801106a:	7ffb      	ldrb	r3, [r7, #31]
 801106c:	009b      	lsls	r3, r3, #2
 801106e:	b2db      	uxtb	r3, r3
 8011070:	f003 0304 	and.w	r3, r3, #4
 8011074:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011076:	7dfb      	ldrb	r3, [r7, #23]
 8011078:	b29b      	uxth	r3, r3
 801107a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801107e:	4619      	mov	r1, r3
 8011080:	2036      	movs	r0, #54	; 0x36
 8011082:	f7fa fa2f 	bl	800b4e4 <pbuf_alloc>
 8011086:	6138      	str	r0, [r7, #16]
 8011088:	693b      	ldr	r3, [r7, #16]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d109      	bne.n	80110a2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	8b5b      	ldrh	r3, [r3, #26]
 8011092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011096:	b29a      	uxth	r2, r3
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801109c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80110a0:	e095      	b.n	80111ce <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80110a2:	693b      	ldr	r3, [r7, #16]
 80110a4:	895a      	ldrh	r2, [r3, #10]
 80110a6:	7dfb      	ldrb	r3, [r7, #23]
 80110a8:	b29b      	uxth	r3, r3
 80110aa:	429a      	cmp	r2, r3
 80110ac:	d206      	bcs.n	80110bc <tcp_enqueue_flags+0xa0>
 80110ae:	4b4a      	ldr	r3, [pc, #296]	; (80111d8 <tcp_enqueue_flags+0x1bc>)
 80110b0:	f240 4239 	movw	r2, #1081	; 0x439
 80110b4:	494c      	ldr	r1, [pc, #304]	; (80111e8 <tcp_enqueue_flags+0x1cc>)
 80110b6:	484a      	ldr	r0, [pc, #296]	; (80111e0 <tcp_enqueue_flags+0x1c4>)
 80110b8:	f004 faa0 	bl	80155fc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80110c0:	78fa      	ldrb	r2, [r7, #3]
 80110c2:	7ffb      	ldrb	r3, [r7, #31]
 80110c4:	9300      	str	r3, [sp, #0]
 80110c6:	460b      	mov	r3, r1
 80110c8:	6939      	ldr	r1, [r7, #16]
 80110ca:	6878      	ldr	r0, [r7, #4]
 80110cc:	f7ff f918 	bl	8010300 <tcp_create_segment>
 80110d0:	60f8      	str	r0, [r7, #12]
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d109      	bne.n	80110ec <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	8b5b      	ldrh	r3, [r3, #26]
 80110dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80110e0:	b29a      	uxth	r2, r3
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80110e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80110ea:	e070      	b.n	80111ce <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	68db      	ldr	r3, [r3, #12]
 80110f0:	f003 0303 	and.w	r3, r3, #3
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d006      	beq.n	8011106 <tcp_enqueue_flags+0xea>
 80110f8:	4b37      	ldr	r3, [pc, #220]	; (80111d8 <tcp_enqueue_flags+0x1bc>)
 80110fa:	f240 4242 	movw	r2, #1090	; 0x442
 80110fe:	493b      	ldr	r1, [pc, #236]	; (80111ec <tcp_enqueue_flags+0x1d0>)
 8011100:	4837      	ldr	r0, [pc, #220]	; (80111e0 <tcp_enqueue_flags+0x1c4>)
 8011102:	f004 fa7b 	bl	80155fc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	891b      	ldrh	r3, [r3, #8]
 801110a:	2b00      	cmp	r3, #0
 801110c:	d006      	beq.n	801111c <tcp_enqueue_flags+0x100>
 801110e:	4b32      	ldr	r3, [pc, #200]	; (80111d8 <tcp_enqueue_flags+0x1bc>)
 8011110:	f240 4243 	movw	r2, #1091	; 0x443
 8011114:	4936      	ldr	r1, [pc, #216]	; (80111f0 <tcp_enqueue_flags+0x1d4>)
 8011116:	4832      	ldr	r0, [pc, #200]	; (80111e0 <tcp_enqueue_flags+0x1c4>)
 8011118:	f004 fa70 	bl	80155fc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011120:	2b00      	cmp	r3, #0
 8011122:	d103      	bne.n	801112c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	68fa      	ldr	r2, [r7, #12]
 8011128:	66da      	str	r2, [r3, #108]	; 0x6c
 801112a:	e00d      	b.n	8011148 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011130:	61bb      	str	r3, [r7, #24]
 8011132:	e002      	b.n	801113a <tcp_enqueue_flags+0x11e>
 8011134:	69bb      	ldr	r3, [r7, #24]
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	61bb      	str	r3, [r7, #24]
 801113a:	69bb      	ldr	r3, [r7, #24]
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d1f8      	bne.n	8011134 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8011142:	69bb      	ldr	r3, [r7, #24]
 8011144:	68fa      	ldr	r2, [r7, #12]
 8011146:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	2200      	movs	r2, #0
 801114c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011150:	78fb      	ldrb	r3, [r7, #3]
 8011152:	f003 0302 	and.w	r3, r3, #2
 8011156:	2b00      	cmp	r3, #0
 8011158:	d104      	bne.n	8011164 <tcp_enqueue_flags+0x148>
 801115a:	78fb      	ldrb	r3, [r7, #3]
 801115c:	f003 0301 	and.w	r3, r3, #1
 8011160:	2b00      	cmp	r3, #0
 8011162:	d004      	beq.n	801116e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011168:	1c5a      	adds	r2, r3, #1
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801116e:	78fb      	ldrb	r3, [r7, #3]
 8011170:	f003 0301 	and.w	r3, r3, #1
 8011174:	2b00      	cmp	r3, #0
 8011176:	d006      	beq.n	8011186 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	8b5b      	ldrh	r3, [r3, #26]
 801117c:	f043 0320 	orr.w	r3, r3, #32
 8011180:	b29a      	uxth	r2, r3
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	685b      	ldr	r3, [r3, #4]
 801118a:	4618      	mov	r0, r3
 801118c:	f7fa fd1c 	bl	800bbc8 <pbuf_clen>
 8011190:	4603      	mov	r3, r0
 8011192:	461a      	mov	r2, r3
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801119a:	4413      	add	r3, r2
 801119c:	b29a      	uxth	r2, r3
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d00e      	beq.n	80111cc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d10a      	bne.n	80111cc <tcp_enqueue_flags+0x1b0>
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d106      	bne.n	80111cc <tcp_enqueue_flags+0x1b0>
 80111be:	4b06      	ldr	r3, [pc, #24]	; (80111d8 <tcp_enqueue_flags+0x1bc>)
 80111c0:	f240 4265 	movw	r2, #1125	; 0x465
 80111c4:	490b      	ldr	r1, [pc, #44]	; (80111f4 <tcp_enqueue_flags+0x1d8>)
 80111c6:	4806      	ldr	r0, [pc, #24]	; (80111e0 <tcp_enqueue_flags+0x1c4>)
 80111c8:	f004 fa18 	bl	80155fc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80111cc:	2300      	movs	r3, #0
}
 80111ce:	4618      	mov	r0, r3
 80111d0:	3720      	adds	r7, #32
 80111d2:	46bd      	mov	sp, r7
 80111d4:	bd80      	pop	{r7, pc}
 80111d6:	bf00      	nop
 80111d8:	08018720 	.word	0x08018720
 80111dc:	08018b44 	.word	0x08018b44
 80111e0:	08018774 	.word	0x08018774
 80111e4:	08018b9c 	.word	0x08018b9c
 80111e8:	08018bbc 	.word	0x08018bbc
 80111ec:	08018bf8 	.word	0x08018bf8
 80111f0:	08018c10 	.word	0x08018c10
 80111f4:	08018c3c 	.word	0x08018c3c

080111f8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80111f8:	b5b0      	push	{r4, r5, r7, lr}
 80111fa:	b08a      	sub	sp, #40	; 0x28
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	2b00      	cmp	r3, #0
 8011204:	d106      	bne.n	8011214 <tcp_output+0x1c>
 8011206:	4b9e      	ldr	r3, [pc, #632]	; (8011480 <tcp_output+0x288>)
 8011208:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801120c:	499d      	ldr	r1, [pc, #628]	; (8011484 <tcp_output+0x28c>)
 801120e:	489e      	ldr	r0, [pc, #632]	; (8011488 <tcp_output+0x290>)
 8011210:	f004 f9f4 	bl	80155fc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	7d1b      	ldrb	r3, [r3, #20]
 8011218:	2b01      	cmp	r3, #1
 801121a:	d106      	bne.n	801122a <tcp_output+0x32>
 801121c:	4b98      	ldr	r3, [pc, #608]	; (8011480 <tcp_output+0x288>)
 801121e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8011222:	499a      	ldr	r1, [pc, #616]	; (801148c <tcp_output+0x294>)
 8011224:	4898      	ldr	r0, [pc, #608]	; (8011488 <tcp_output+0x290>)
 8011226:	f004 f9e9 	bl	80155fc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801122a:	4b99      	ldr	r3, [pc, #612]	; (8011490 <tcp_output+0x298>)
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	687a      	ldr	r2, [r7, #4]
 8011230:	429a      	cmp	r2, r3
 8011232:	d101      	bne.n	8011238 <tcp_output+0x40>
    return ERR_OK;
 8011234:	2300      	movs	r3, #0
 8011236:	e1ce      	b.n	80115d6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011244:	4293      	cmp	r3, r2
 8011246:	bf28      	it	cs
 8011248:	4613      	movcs	r3, r2
 801124a:	b29b      	uxth	r3, r3
 801124c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011252:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8011254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011256:	2b00      	cmp	r3, #0
 8011258:	d10b      	bne.n	8011272 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	8b5b      	ldrh	r3, [r3, #26]
 801125e:	f003 0302 	and.w	r3, r3, #2
 8011262:	2b00      	cmp	r3, #0
 8011264:	f000 81aa 	beq.w	80115bc <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8011268:	6878      	ldr	r0, [r7, #4]
 801126a:	f000 fdcb 	bl	8011e04 <tcp_send_empty_ack>
 801126e:	4603      	mov	r3, r0
 8011270:	e1b1      	b.n	80115d6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8011272:	6879      	ldr	r1, [r7, #4]
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	3304      	adds	r3, #4
 8011278:	461a      	mov	r2, r3
 801127a:	6878      	ldr	r0, [r7, #4]
 801127c:	f7ff f824 	bl	80102c8 <tcp_route>
 8011280:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011282:	697b      	ldr	r3, [r7, #20]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d102      	bne.n	801128e <tcp_output+0x96>
    return ERR_RTE;
 8011288:	f06f 0303 	mvn.w	r3, #3
 801128c:	e1a3      	b.n	80115d6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	2b00      	cmp	r3, #0
 8011292:	d003      	beq.n	801129c <tcp_output+0xa4>
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d111      	bne.n	80112c0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801129c:	697b      	ldr	r3, [r7, #20]
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d002      	beq.n	80112a8 <tcp_output+0xb0>
 80112a2:	697b      	ldr	r3, [r7, #20]
 80112a4:	3304      	adds	r3, #4
 80112a6:	e000      	b.n	80112aa <tcp_output+0xb2>
 80112a8:	2300      	movs	r3, #0
 80112aa:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80112ac:	693b      	ldr	r3, [r7, #16]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d102      	bne.n	80112b8 <tcp_output+0xc0>
      return ERR_RTE;
 80112b2:	f06f 0303 	mvn.w	r3, #3
 80112b6:	e18e      	b.n	80115d6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80112b8:	693b      	ldr	r3, [r7, #16]
 80112ba:	681a      	ldr	r2, [r3, #0]
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80112c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112c2:	68db      	ldr	r3, [r3, #12]
 80112c4:	685b      	ldr	r3, [r3, #4]
 80112c6:	4618      	mov	r0, r3
 80112c8:	f7f9 f859 	bl	800a37e <lwip_htonl>
 80112cc:	4602      	mov	r2, r0
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80112d2:	1ad3      	subs	r3, r2, r3
 80112d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80112d6:	8912      	ldrh	r2, [r2, #8]
 80112d8:	4413      	add	r3, r2
 80112da:	69ba      	ldr	r2, [r7, #24]
 80112dc:	429a      	cmp	r2, r3
 80112de:	d227      	bcs.n	8011330 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80112e6:	461a      	mov	r2, r3
 80112e8:	69bb      	ldr	r3, [r7, #24]
 80112ea:	4293      	cmp	r3, r2
 80112ec:	d114      	bne.n	8011318 <tcp_output+0x120>
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d110      	bne.n	8011318 <tcp_output+0x120>
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d10b      	bne.n	8011318 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	2200      	movs	r2, #0
 8011304:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	2201      	movs	r2, #1
 801130c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	2200      	movs	r2, #0
 8011314:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	8b5b      	ldrh	r3, [r3, #26]
 801131c:	f003 0302 	and.w	r3, r3, #2
 8011320:	2b00      	cmp	r3, #0
 8011322:	f000 814d 	beq.w	80115c0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8011326:	6878      	ldr	r0, [r7, #4]
 8011328:	f000 fd6c 	bl	8011e04 <tcp_send_empty_ack>
 801132c:	4603      	mov	r3, r0
 801132e:	e152      	b.n	80115d6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	2200      	movs	r2, #0
 8011334:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801133c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801133e:	6a3b      	ldr	r3, [r7, #32]
 8011340:	2b00      	cmp	r3, #0
 8011342:	f000 811c 	beq.w	801157e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8011346:	e002      	b.n	801134e <tcp_output+0x156>
 8011348:	6a3b      	ldr	r3, [r7, #32]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	623b      	str	r3, [r7, #32]
 801134e:	6a3b      	ldr	r3, [r7, #32]
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d1f8      	bne.n	8011348 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8011356:	e112      	b.n	801157e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801135a:	68db      	ldr	r3, [r3, #12]
 801135c:	899b      	ldrh	r3, [r3, #12]
 801135e:	b29b      	uxth	r3, r3
 8011360:	4618      	mov	r0, r3
 8011362:	f7f8 fff7 	bl	800a354 <lwip_htons>
 8011366:	4603      	mov	r3, r0
 8011368:	b2db      	uxtb	r3, r3
 801136a:	f003 0304 	and.w	r3, r3, #4
 801136e:	2b00      	cmp	r3, #0
 8011370:	d006      	beq.n	8011380 <tcp_output+0x188>
 8011372:	4b43      	ldr	r3, [pc, #268]	; (8011480 <tcp_output+0x288>)
 8011374:	f240 5236 	movw	r2, #1334	; 0x536
 8011378:	4946      	ldr	r1, [pc, #280]	; (8011494 <tcp_output+0x29c>)
 801137a:	4843      	ldr	r0, [pc, #268]	; (8011488 <tcp_output+0x290>)
 801137c:	f004 f93e 	bl	80155fc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011384:	2b00      	cmp	r3, #0
 8011386:	d01f      	beq.n	80113c8 <tcp_output+0x1d0>
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	8b5b      	ldrh	r3, [r3, #26]
 801138c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011390:	2b00      	cmp	r3, #0
 8011392:	d119      	bne.n	80113c8 <tcp_output+0x1d0>
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011398:	2b00      	cmp	r3, #0
 801139a:	d00b      	beq.n	80113b4 <tcp_output+0x1bc>
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d110      	bne.n	80113c8 <tcp_output+0x1d0>
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113aa:	891a      	ldrh	r2, [r3, #8]
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80113b0:	429a      	cmp	r2, r3
 80113b2:	d209      	bcs.n	80113c8 <tcp_output+0x1d0>
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d004      	beq.n	80113c8 <tcp_output+0x1d0>
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80113c4:	2b08      	cmp	r3, #8
 80113c6:	d901      	bls.n	80113cc <tcp_output+0x1d4>
 80113c8:	2301      	movs	r3, #1
 80113ca:	e000      	b.n	80113ce <tcp_output+0x1d6>
 80113cc:	2300      	movs	r3, #0
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d106      	bne.n	80113e0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	8b5b      	ldrh	r3, [r3, #26]
 80113d6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80113da:	2b00      	cmp	r3, #0
 80113dc:	f000 80e4 	beq.w	80115a8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	7d1b      	ldrb	r3, [r3, #20]
 80113e4:	2b02      	cmp	r3, #2
 80113e6:	d00d      	beq.n	8011404 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80113e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113ea:	68db      	ldr	r3, [r3, #12]
 80113ec:	899b      	ldrh	r3, [r3, #12]
 80113ee:	b29c      	uxth	r4, r3
 80113f0:	2010      	movs	r0, #16
 80113f2:	f7f8 ffaf 	bl	800a354 <lwip_htons>
 80113f6:	4603      	mov	r3, r0
 80113f8:	461a      	mov	r2, r3
 80113fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113fc:	68db      	ldr	r3, [r3, #12]
 80113fe:	4322      	orrs	r2, r4
 8011400:	b292      	uxth	r2, r2
 8011402:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011404:	697a      	ldr	r2, [r7, #20]
 8011406:	6879      	ldr	r1, [r7, #4]
 8011408:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801140a:	f000 f909 	bl	8011620 <tcp_output_segment>
 801140e:	4603      	mov	r3, r0
 8011410:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d009      	beq.n	801142e <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	8b5b      	ldrh	r3, [r3, #26]
 801141e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011422:	b29a      	uxth	r2, r3
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	835a      	strh	r2, [r3, #26]
      return err;
 8011428:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801142c:	e0d3      	b.n	80115d6 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011430:	681a      	ldr	r2, [r3, #0]
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	7d1b      	ldrb	r3, [r3, #20]
 801143a:	2b02      	cmp	r3, #2
 801143c:	d006      	beq.n	801144c <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	8b5b      	ldrh	r3, [r3, #26]
 8011442:	f023 0303 	bic.w	r3, r3, #3
 8011446:	b29a      	uxth	r2, r3
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801144c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801144e:	68db      	ldr	r3, [r3, #12]
 8011450:	685b      	ldr	r3, [r3, #4]
 8011452:	4618      	mov	r0, r3
 8011454:	f7f8 ff93 	bl	800a37e <lwip_htonl>
 8011458:	4604      	mov	r4, r0
 801145a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801145c:	891b      	ldrh	r3, [r3, #8]
 801145e:	461d      	mov	r5, r3
 8011460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011462:	68db      	ldr	r3, [r3, #12]
 8011464:	899b      	ldrh	r3, [r3, #12]
 8011466:	b29b      	uxth	r3, r3
 8011468:	4618      	mov	r0, r3
 801146a:	f7f8 ff73 	bl	800a354 <lwip_htons>
 801146e:	4603      	mov	r3, r0
 8011470:	b2db      	uxtb	r3, r3
 8011472:	f003 0303 	and.w	r3, r3, #3
 8011476:	2b00      	cmp	r3, #0
 8011478:	d00e      	beq.n	8011498 <tcp_output+0x2a0>
 801147a:	2301      	movs	r3, #1
 801147c:	e00d      	b.n	801149a <tcp_output+0x2a2>
 801147e:	bf00      	nop
 8011480:	08018720 	.word	0x08018720
 8011484:	08018c64 	.word	0x08018c64
 8011488:	08018774 	.word	0x08018774
 801148c:	08018c7c 	.word	0x08018c7c
 8011490:	2000b7ec 	.word	0x2000b7ec
 8011494:	08018ca4 	.word	0x08018ca4
 8011498:	2300      	movs	r3, #0
 801149a:	442b      	add	r3, r5
 801149c:	4423      	add	r3, r4
 801149e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80114a4:	68bb      	ldr	r3, [r7, #8]
 80114a6:	1ad3      	subs	r3, r2, r3
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	da02      	bge.n	80114b2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	68ba      	ldr	r2, [r7, #8]
 80114b0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80114b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114b4:	891b      	ldrh	r3, [r3, #8]
 80114b6:	461c      	mov	r4, r3
 80114b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114ba:	68db      	ldr	r3, [r3, #12]
 80114bc:	899b      	ldrh	r3, [r3, #12]
 80114be:	b29b      	uxth	r3, r3
 80114c0:	4618      	mov	r0, r3
 80114c2:	f7f8 ff47 	bl	800a354 <lwip_htons>
 80114c6:	4603      	mov	r3, r0
 80114c8:	b2db      	uxtb	r3, r3
 80114ca:	f003 0303 	and.w	r3, r3, #3
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d001      	beq.n	80114d6 <tcp_output+0x2de>
 80114d2:	2301      	movs	r3, #1
 80114d4:	e000      	b.n	80114d8 <tcp_output+0x2e0>
 80114d6:	2300      	movs	r3, #0
 80114d8:	4423      	add	r3, r4
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d049      	beq.n	8011572 <tcp_output+0x37a>
      seg->next = NULL;
 80114de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114e0:	2200      	movs	r2, #0
 80114e2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d105      	bne.n	80114f8 <tcp_output+0x300>
        pcb->unacked = seg;
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80114f0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80114f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114f4:	623b      	str	r3, [r7, #32]
 80114f6:	e03f      	b.n	8011578 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80114f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114fa:	68db      	ldr	r3, [r3, #12]
 80114fc:	685b      	ldr	r3, [r3, #4]
 80114fe:	4618      	mov	r0, r3
 8011500:	f7f8 ff3d 	bl	800a37e <lwip_htonl>
 8011504:	4604      	mov	r4, r0
 8011506:	6a3b      	ldr	r3, [r7, #32]
 8011508:	68db      	ldr	r3, [r3, #12]
 801150a:	685b      	ldr	r3, [r3, #4]
 801150c:	4618      	mov	r0, r3
 801150e:	f7f8 ff36 	bl	800a37e <lwip_htonl>
 8011512:	4603      	mov	r3, r0
 8011514:	1ae3      	subs	r3, r4, r3
 8011516:	2b00      	cmp	r3, #0
 8011518:	da24      	bge.n	8011564 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	3370      	adds	r3, #112	; 0x70
 801151e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011520:	e002      	b.n	8011528 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011522:	69fb      	ldr	r3, [r7, #28]
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011528:	69fb      	ldr	r3, [r7, #28]
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d011      	beq.n	8011554 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011530:	69fb      	ldr	r3, [r7, #28]
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	68db      	ldr	r3, [r3, #12]
 8011536:	685b      	ldr	r3, [r3, #4]
 8011538:	4618      	mov	r0, r3
 801153a:	f7f8 ff20 	bl	800a37e <lwip_htonl>
 801153e:	4604      	mov	r4, r0
 8011540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011542:	68db      	ldr	r3, [r3, #12]
 8011544:	685b      	ldr	r3, [r3, #4]
 8011546:	4618      	mov	r0, r3
 8011548:	f7f8 ff19 	bl	800a37e <lwip_htonl>
 801154c:	4603      	mov	r3, r0
 801154e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011550:	2b00      	cmp	r3, #0
 8011552:	dbe6      	blt.n	8011522 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8011554:	69fb      	ldr	r3, [r7, #28]
 8011556:	681a      	ldr	r2, [r3, #0]
 8011558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801155a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801155c:	69fb      	ldr	r3, [r7, #28]
 801155e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011560:	601a      	str	r2, [r3, #0]
 8011562:	e009      	b.n	8011578 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011564:	6a3b      	ldr	r3, [r7, #32]
 8011566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011568:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801156a:	6a3b      	ldr	r3, [r7, #32]
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	623b      	str	r3, [r7, #32]
 8011570:	e002      	b.n	8011578 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011572:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011574:	f7fb ff1d 	bl	800d3b2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801157c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011580:	2b00      	cmp	r3, #0
 8011582:	d012      	beq.n	80115aa <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011586:	68db      	ldr	r3, [r3, #12]
 8011588:	685b      	ldr	r3, [r3, #4]
 801158a:	4618      	mov	r0, r3
 801158c:	f7f8 fef7 	bl	800a37e <lwip_htonl>
 8011590:	4602      	mov	r2, r0
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011596:	1ad3      	subs	r3, r2, r3
 8011598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801159a:	8912      	ldrh	r2, [r2, #8]
 801159c:	4413      	add	r3, r2
  while (seg != NULL &&
 801159e:	69ba      	ldr	r2, [r7, #24]
 80115a0:	429a      	cmp	r2, r3
 80115a2:	f4bf aed9 	bcs.w	8011358 <tcp_output+0x160>
 80115a6:	e000      	b.n	80115aa <tcp_output+0x3b2>
      break;
 80115a8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d108      	bne.n	80115c4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	2200      	movs	r2, #0
 80115b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80115ba:	e004      	b.n	80115c6 <tcp_output+0x3ce>
    goto output_done;
 80115bc:	bf00      	nop
 80115be:	e002      	b.n	80115c6 <tcp_output+0x3ce>
    goto output_done;
 80115c0:	bf00      	nop
 80115c2:	e000      	b.n	80115c6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80115c4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	8b5b      	ldrh	r3, [r3, #26]
 80115ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80115ce:	b29a      	uxth	r2, r3
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80115d4:	2300      	movs	r3, #0
}
 80115d6:	4618      	mov	r0, r3
 80115d8:	3728      	adds	r7, #40	; 0x28
 80115da:	46bd      	mov	sp, r7
 80115dc:	bdb0      	pop	{r4, r5, r7, pc}
 80115de:	bf00      	nop

080115e0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80115e0:	b580      	push	{r7, lr}
 80115e2:	b082      	sub	sp, #8
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d106      	bne.n	80115fc <tcp_output_segment_busy+0x1c>
 80115ee:	4b09      	ldr	r3, [pc, #36]	; (8011614 <tcp_output_segment_busy+0x34>)
 80115f0:	f240 529a 	movw	r2, #1434	; 0x59a
 80115f4:	4908      	ldr	r1, [pc, #32]	; (8011618 <tcp_output_segment_busy+0x38>)
 80115f6:	4809      	ldr	r0, [pc, #36]	; (801161c <tcp_output_segment_busy+0x3c>)
 80115f8:	f004 f800 	bl	80155fc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	685b      	ldr	r3, [r3, #4]
 8011600:	7b9b      	ldrb	r3, [r3, #14]
 8011602:	2b01      	cmp	r3, #1
 8011604:	d001      	beq.n	801160a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8011606:	2301      	movs	r3, #1
 8011608:	e000      	b.n	801160c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801160a:	2300      	movs	r3, #0
}
 801160c:	4618      	mov	r0, r3
 801160e:	3708      	adds	r7, #8
 8011610:	46bd      	mov	sp, r7
 8011612:	bd80      	pop	{r7, pc}
 8011614:	08018720 	.word	0x08018720
 8011618:	08018cbc 	.word	0x08018cbc
 801161c:	08018774 	.word	0x08018774

08011620 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011620:	b5b0      	push	{r4, r5, r7, lr}
 8011622:	b08c      	sub	sp, #48	; 0x30
 8011624:	af04      	add	r7, sp, #16
 8011626:	60f8      	str	r0, [r7, #12]
 8011628:	60b9      	str	r1, [r7, #8]
 801162a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	2b00      	cmp	r3, #0
 8011630:	d106      	bne.n	8011640 <tcp_output_segment+0x20>
 8011632:	4b63      	ldr	r3, [pc, #396]	; (80117c0 <tcp_output_segment+0x1a0>)
 8011634:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8011638:	4962      	ldr	r1, [pc, #392]	; (80117c4 <tcp_output_segment+0x1a4>)
 801163a:	4863      	ldr	r0, [pc, #396]	; (80117c8 <tcp_output_segment+0x1a8>)
 801163c:	f003 ffde 	bl	80155fc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011640:	68bb      	ldr	r3, [r7, #8]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d106      	bne.n	8011654 <tcp_output_segment+0x34>
 8011646:	4b5e      	ldr	r3, [pc, #376]	; (80117c0 <tcp_output_segment+0x1a0>)
 8011648:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801164c:	495f      	ldr	r1, [pc, #380]	; (80117cc <tcp_output_segment+0x1ac>)
 801164e:	485e      	ldr	r0, [pc, #376]	; (80117c8 <tcp_output_segment+0x1a8>)
 8011650:	f003 ffd4 	bl	80155fc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d106      	bne.n	8011668 <tcp_output_segment+0x48>
 801165a:	4b59      	ldr	r3, [pc, #356]	; (80117c0 <tcp_output_segment+0x1a0>)
 801165c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8011660:	495b      	ldr	r1, [pc, #364]	; (80117d0 <tcp_output_segment+0x1b0>)
 8011662:	4859      	ldr	r0, [pc, #356]	; (80117c8 <tcp_output_segment+0x1a8>)
 8011664:	f003 ffca 	bl	80155fc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8011668:	68f8      	ldr	r0, [r7, #12]
 801166a:	f7ff ffb9 	bl	80115e0 <tcp_output_segment_busy>
 801166e:	4603      	mov	r3, r0
 8011670:	2b00      	cmp	r3, #0
 8011672:	d001      	beq.n	8011678 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8011674:	2300      	movs	r3, #0
 8011676:	e09f      	b.n	80117b8 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011678:	68bb      	ldr	r3, [r7, #8]
 801167a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	68dc      	ldr	r4, [r3, #12]
 8011680:	4610      	mov	r0, r2
 8011682:	f7f8 fe7c 	bl	800a37e <lwip_htonl>
 8011686:	4603      	mov	r3, r0
 8011688:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801168a:	68bb      	ldr	r3, [r7, #8]
 801168c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	68dc      	ldr	r4, [r3, #12]
 8011692:	4610      	mov	r0, r2
 8011694:	f7f8 fe5e 	bl	800a354 <lwip_htons>
 8011698:	4603      	mov	r3, r0
 801169a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801169c:	68bb      	ldr	r3, [r7, #8]
 801169e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116a0:	68ba      	ldr	r2, [r7, #8]
 80116a2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80116a4:	441a      	add	r2, r3
 80116a6:	68bb      	ldr	r3, [r7, #8]
 80116a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	68db      	ldr	r3, [r3, #12]
 80116ae:	3314      	adds	r3, #20
 80116b0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	7a9b      	ldrb	r3, [r3, #10]
 80116b6:	f003 0301 	and.w	r3, r3, #1
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d015      	beq.n	80116ea <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80116be:	68bb      	ldr	r3, [r7, #8]
 80116c0:	3304      	adds	r3, #4
 80116c2:	461a      	mov	r2, r3
 80116c4:	6879      	ldr	r1, [r7, #4]
 80116c6:	f44f 7006 	mov.w	r0, #536	; 0x218
 80116ca:	f7fc fa37 	bl	800db3c <tcp_eff_send_mss_netif>
 80116ce:	4603      	mov	r3, r0
 80116d0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80116d2:	8b7b      	ldrh	r3, [r7, #26]
 80116d4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80116d8:	4618      	mov	r0, r3
 80116da:	f7f8 fe50 	bl	800a37e <lwip_htonl>
 80116de:	4602      	mov	r2, r0
 80116e0:	69fb      	ldr	r3, [r7, #28]
 80116e2:	601a      	str	r2, [r3, #0]
    opts += 1;
 80116e4:	69fb      	ldr	r3, [r7, #28]
 80116e6:	3304      	adds	r3, #4
 80116e8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80116ea:	68bb      	ldr	r3, [r7, #8]
 80116ec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	da02      	bge.n	80116fa <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80116f4:	68bb      	ldr	r3, [r7, #8]
 80116f6:	2200      	movs	r2, #0
 80116f8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80116fa:	68bb      	ldr	r3, [r7, #8]
 80116fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d10c      	bne.n	801171c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8011702:	4b34      	ldr	r3, [pc, #208]	; (80117d4 <tcp_output_segment+0x1b4>)
 8011704:	681a      	ldr	r2, [r3, #0]
 8011706:	68bb      	ldr	r3, [r7, #8]
 8011708:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	68db      	ldr	r3, [r3, #12]
 801170e:	685b      	ldr	r3, [r3, #4]
 8011710:	4618      	mov	r0, r3
 8011712:	f7f8 fe34 	bl	800a37e <lwip_htonl>
 8011716:	4602      	mov	r2, r0
 8011718:	68bb      	ldr	r3, [r7, #8]
 801171a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	68da      	ldr	r2, [r3, #12]
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	685b      	ldr	r3, [r3, #4]
 8011724:	685b      	ldr	r3, [r3, #4]
 8011726:	1ad3      	subs	r3, r2, r3
 8011728:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	685b      	ldr	r3, [r3, #4]
 801172e:	8959      	ldrh	r1, [r3, #10]
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	685b      	ldr	r3, [r3, #4]
 8011734:	8b3a      	ldrh	r2, [r7, #24]
 8011736:	1a8a      	subs	r2, r1, r2
 8011738:	b292      	uxth	r2, r2
 801173a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	685b      	ldr	r3, [r3, #4]
 8011740:	8919      	ldrh	r1, [r3, #8]
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	685b      	ldr	r3, [r3, #4]
 8011746:	8b3a      	ldrh	r2, [r7, #24]
 8011748:	1a8a      	subs	r2, r1, r2
 801174a:	b292      	uxth	r2, r2
 801174c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	685b      	ldr	r3, [r3, #4]
 8011752:	68fa      	ldr	r2, [r7, #12]
 8011754:	68d2      	ldr	r2, [r2, #12]
 8011756:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	68db      	ldr	r3, [r3, #12]
 801175c:	2200      	movs	r2, #0
 801175e:	741a      	strb	r2, [r3, #16]
 8011760:	2200      	movs	r2, #0
 8011762:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	68db      	ldr	r3, [r3, #12]
 8011768:	f103 0214 	add.w	r2, r3, #20
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	7a9b      	ldrb	r3, [r3, #10]
 8011770:	009b      	lsls	r3, r3, #2
 8011772:	f003 0304 	and.w	r3, r3, #4
 8011776:	4413      	add	r3, r2
 8011778:	69fa      	ldr	r2, [r7, #28]
 801177a:	429a      	cmp	r2, r3
 801177c:	d006      	beq.n	801178c <tcp_output_segment+0x16c>
 801177e:	4b10      	ldr	r3, [pc, #64]	; (80117c0 <tcp_output_segment+0x1a0>)
 8011780:	f240 621c 	movw	r2, #1564	; 0x61c
 8011784:	4914      	ldr	r1, [pc, #80]	; (80117d8 <tcp_output_segment+0x1b8>)
 8011786:	4810      	ldr	r0, [pc, #64]	; (80117c8 <tcp_output_segment+0x1a8>)
 8011788:	f003 ff38 	bl	80155fc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	6858      	ldr	r0, [r3, #4]
 8011790:	68b9      	ldr	r1, [r7, #8]
 8011792:	68bb      	ldr	r3, [r7, #8]
 8011794:	1d1c      	adds	r4, r3, #4
 8011796:	68bb      	ldr	r3, [r7, #8]
 8011798:	7add      	ldrb	r5, [r3, #11]
 801179a:	68bb      	ldr	r3, [r7, #8]
 801179c:	7a9b      	ldrb	r3, [r3, #10]
 801179e:	687a      	ldr	r2, [r7, #4]
 80117a0:	9202      	str	r2, [sp, #8]
 80117a2:	2206      	movs	r2, #6
 80117a4:	9201      	str	r2, [sp, #4]
 80117a6:	9300      	str	r3, [sp, #0]
 80117a8:	462b      	mov	r3, r5
 80117aa:	4622      	mov	r2, r4
 80117ac:	f002 fbac 	bl	8013f08 <ip4_output_if>
 80117b0:	4603      	mov	r3, r0
 80117b2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80117b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80117b8:	4618      	mov	r0, r3
 80117ba:	3720      	adds	r7, #32
 80117bc:	46bd      	mov	sp, r7
 80117be:	bdb0      	pop	{r4, r5, r7, pc}
 80117c0:	08018720 	.word	0x08018720
 80117c4:	08018ce4 	.word	0x08018ce4
 80117c8:	08018774 	.word	0x08018774
 80117cc:	08018d04 	.word	0x08018d04
 80117d0:	08018d24 	.word	0x08018d24
 80117d4:	2000b7dc 	.word	0x2000b7dc
 80117d8:	08018d48 	.word	0x08018d48

080117dc <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80117dc:	b5b0      	push	{r4, r5, r7, lr}
 80117de:	b084      	sub	sp, #16
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d106      	bne.n	80117f8 <tcp_rexmit_rto_prepare+0x1c>
 80117ea:	4b31      	ldr	r3, [pc, #196]	; (80118b0 <tcp_rexmit_rto_prepare+0xd4>)
 80117ec:	f240 6263 	movw	r2, #1635	; 0x663
 80117f0:	4930      	ldr	r1, [pc, #192]	; (80118b4 <tcp_rexmit_rto_prepare+0xd8>)
 80117f2:	4831      	ldr	r0, [pc, #196]	; (80118b8 <tcp_rexmit_rto_prepare+0xdc>)
 80117f4:	f003 ff02 	bl	80155fc <iprintf>

  if (pcb->unacked == NULL) {
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d102      	bne.n	8011806 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011800:	f06f 0305 	mvn.w	r3, #5
 8011804:	e050      	b.n	80118a8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801180a:	60fb      	str	r3, [r7, #12]
 801180c:	e00b      	b.n	8011826 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801180e:	68f8      	ldr	r0, [r7, #12]
 8011810:	f7ff fee6 	bl	80115e0 <tcp_output_segment_busy>
 8011814:	4603      	mov	r3, r0
 8011816:	2b00      	cmp	r3, #0
 8011818:	d002      	beq.n	8011820 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801181a:	f06f 0305 	mvn.w	r3, #5
 801181e:	e043      	b.n	80118a8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	60fb      	str	r3, [r7, #12]
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	2b00      	cmp	r3, #0
 801182c:	d1ef      	bne.n	801180e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801182e:	68f8      	ldr	r0, [r7, #12]
 8011830:	f7ff fed6 	bl	80115e0 <tcp_output_segment_busy>
 8011834:	4603      	mov	r3, r0
 8011836:	2b00      	cmp	r3, #0
 8011838:	d002      	beq.n	8011840 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801183a:	f06f 0305 	mvn.w	r3, #5
 801183e:	e033      	b.n	80118a8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	2200      	movs	r2, #0
 8011854:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	8b5b      	ldrh	r3, [r3, #26]
 801185a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801185e:	b29a      	uxth	r2, r3
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	68db      	ldr	r3, [r3, #12]
 8011868:	685b      	ldr	r3, [r3, #4]
 801186a:	4618      	mov	r0, r3
 801186c:	f7f8 fd87 	bl	800a37e <lwip_htonl>
 8011870:	4604      	mov	r4, r0
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	891b      	ldrh	r3, [r3, #8]
 8011876:	461d      	mov	r5, r3
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	68db      	ldr	r3, [r3, #12]
 801187c:	899b      	ldrh	r3, [r3, #12]
 801187e:	b29b      	uxth	r3, r3
 8011880:	4618      	mov	r0, r3
 8011882:	f7f8 fd67 	bl	800a354 <lwip_htons>
 8011886:	4603      	mov	r3, r0
 8011888:	b2db      	uxtb	r3, r3
 801188a:	f003 0303 	and.w	r3, r3, #3
 801188e:	2b00      	cmp	r3, #0
 8011890:	d001      	beq.n	8011896 <tcp_rexmit_rto_prepare+0xba>
 8011892:	2301      	movs	r3, #1
 8011894:	e000      	b.n	8011898 <tcp_rexmit_rto_prepare+0xbc>
 8011896:	2300      	movs	r3, #0
 8011898:	442b      	add	r3, r5
 801189a:	18e2      	adds	r2, r4, r3
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	2200      	movs	r2, #0
 80118a4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80118a6:	2300      	movs	r3, #0
}
 80118a8:	4618      	mov	r0, r3
 80118aa:	3710      	adds	r7, #16
 80118ac:	46bd      	mov	sp, r7
 80118ae:	bdb0      	pop	{r4, r5, r7, pc}
 80118b0:	08018720 	.word	0x08018720
 80118b4:	08018d5c 	.word	0x08018d5c
 80118b8:	08018774 	.word	0x08018774

080118bc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80118bc:	b580      	push	{r7, lr}
 80118be:	b082      	sub	sp, #8
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d106      	bne.n	80118d8 <tcp_rexmit_rto_commit+0x1c>
 80118ca:	4b0d      	ldr	r3, [pc, #52]	; (8011900 <tcp_rexmit_rto_commit+0x44>)
 80118cc:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80118d0:	490c      	ldr	r1, [pc, #48]	; (8011904 <tcp_rexmit_rto_commit+0x48>)
 80118d2:	480d      	ldr	r0, [pc, #52]	; (8011908 <tcp_rexmit_rto_commit+0x4c>)
 80118d4:	f003 fe92 	bl	80155fc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80118de:	2bff      	cmp	r3, #255	; 0xff
 80118e0:	d007      	beq.n	80118f2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80118e8:	3301      	adds	r3, #1
 80118ea:	b2da      	uxtb	r2, r3
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80118f2:	6878      	ldr	r0, [r7, #4]
 80118f4:	f7ff fc80 	bl	80111f8 <tcp_output>
}
 80118f8:	bf00      	nop
 80118fa:	3708      	adds	r7, #8
 80118fc:	46bd      	mov	sp, r7
 80118fe:	bd80      	pop	{r7, pc}
 8011900:	08018720 	.word	0x08018720
 8011904:	08018d80 	.word	0x08018d80
 8011908:	08018774 	.word	0x08018774

0801190c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801190c:	b580      	push	{r7, lr}
 801190e:	b082      	sub	sp, #8
 8011910:	af00      	add	r7, sp, #0
 8011912:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	2b00      	cmp	r3, #0
 8011918:	d106      	bne.n	8011928 <tcp_rexmit_rto+0x1c>
 801191a:	4b0a      	ldr	r3, [pc, #40]	; (8011944 <tcp_rexmit_rto+0x38>)
 801191c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8011920:	4909      	ldr	r1, [pc, #36]	; (8011948 <tcp_rexmit_rto+0x3c>)
 8011922:	480a      	ldr	r0, [pc, #40]	; (801194c <tcp_rexmit_rto+0x40>)
 8011924:	f003 fe6a 	bl	80155fc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011928:	6878      	ldr	r0, [r7, #4]
 801192a:	f7ff ff57 	bl	80117dc <tcp_rexmit_rto_prepare>
 801192e:	4603      	mov	r3, r0
 8011930:	2b00      	cmp	r3, #0
 8011932:	d102      	bne.n	801193a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8011934:	6878      	ldr	r0, [r7, #4]
 8011936:	f7ff ffc1 	bl	80118bc <tcp_rexmit_rto_commit>
  }
}
 801193a:	bf00      	nop
 801193c:	3708      	adds	r7, #8
 801193e:	46bd      	mov	sp, r7
 8011940:	bd80      	pop	{r7, pc}
 8011942:	bf00      	nop
 8011944:	08018720 	.word	0x08018720
 8011948:	08018da4 	.word	0x08018da4
 801194c:	08018774 	.word	0x08018774

08011950 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011950:	b590      	push	{r4, r7, lr}
 8011952:	b085      	sub	sp, #20
 8011954:	af00      	add	r7, sp, #0
 8011956:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	2b00      	cmp	r3, #0
 801195c:	d106      	bne.n	801196c <tcp_rexmit+0x1c>
 801195e:	4b2f      	ldr	r3, [pc, #188]	; (8011a1c <tcp_rexmit+0xcc>)
 8011960:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8011964:	492e      	ldr	r1, [pc, #184]	; (8011a20 <tcp_rexmit+0xd0>)
 8011966:	482f      	ldr	r0, [pc, #188]	; (8011a24 <tcp_rexmit+0xd4>)
 8011968:	f003 fe48 	bl	80155fc <iprintf>

  if (pcb->unacked == NULL) {
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011970:	2b00      	cmp	r3, #0
 8011972:	d102      	bne.n	801197a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8011974:	f06f 0305 	mvn.w	r3, #5
 8011978:	e04c      	b.n	8011a14 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801197e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8011980:	68b8      	ldr	r0, [r7, #8]
 8011982:	f7ff fe2d 	bl	80115e0 <tcp_output_segment_busy>
 8011986:	4603      	mov	r3, r0
 8011988:	2b00      	cmp	r3, #0
 801198a:	d002      	beq.n	8011992 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801198c:	f06f 0305 	mvn.w	r3, #5
 8011990:	e040      	b.n	8011a14 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8011992:	68bb      	ldr	r3, [r7, #8]
 8011994:	681a      	ldr	r2, [r3, #0]
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	336c      	adds	r3, #108	; 0x6c
 801199e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80119a0:	e002      	b.n	80119a8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d011      	beq.n	80119d4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	68db      	ldr	r3, [r3, #12]
 80119b6:	685b      	ldr	r3, [r3, #4]
 80119b8:	4618      	mov	r0, r3
 80119ba:	f7f8 fce0 	bl	800a37e <lwip_htonl>
 80119be:	4604      	mov	r4, r0
 80119c0:	68bb      	ldr	r3, [r7, #8]
 80119c2:	68db      	ldr	r3, [r3, #12]
 80119c4:	685b      	ldr	r3, [r3, #4]
 80119c6:	4618      	mov	r0, r3
 80119c8:	f7f8 fcd9 	bl	800a37e <lwip_htonl>
 80119cc:	4603      	mov	r3, r0
 80119ce:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	dbe6      	blt.n	80119a2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	681a      	ldr	r2, [r3, #0]
 80119d8:	68bb      	ldr	r3, [r7, #8]
 80119da:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	68ba      	ldr	r2, [r7, #8]
 80119e0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80119e2:	68bb      	ldr	r3, [r7, #8]
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d103      	bne.n	80119f2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	2200      	movs	r2, #0
 80119ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80119f8:	2bff      	cmp	r3, #255	; 0xff
 80119fa:	d007      	beq.n	8011a0c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011a02:	3301      	adds	r3, #1
 8011a04:	b2da      	uxtb	r2, r3
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	2200      	movs	r2, #0
 8011a10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8011a12:	2300      	movs	r3, #0
}
 8011a14:	4618      	mov	r0, r3
 8011a16:	3714      	adds	r7, #20
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	bd90      	pop	{r4, r7, pc}
 8011a1c:	08018720 	.word	0x08018720
 8011a20:	08018dc0 	.word	0x08018dc0
 8011a24:	08018774 	.word	0x08018774

08011a28 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	b082      	sub	sp, #8
 8011a2c:	af00      	add	r7, sp, #0
 8011a2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d106      	bne.n	8011a44 <tcp_rexmit_fast+0x1c>
 8011a36:	4b2a      	ldr	r3, [pc, #168]	; (8011ae0 <tcp_rexmit_fast+0xb8>)
 8011a38:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8011a3c:	4929      	ldr	r1, [pc, #164]	; (8011ae4 <tcp_rexmit_fast+0xbc>)
 8011a3e:	482a      	ldr	r0, [pc, #168]	; (8011ae8 <tcp_rexmit_fast+0xc0>)
 8011a40:	f003 fddc 	bl	80155fc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d044      	beq.n	8011ad6 <tcp_rexmit_fast+0xae>
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	8b5b      	ldrh	r3, [r3, #26]
 8011a50:	f003 0304 	and.w	r3, r3, #4
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d13e      	bne.n	8011ad6 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8011a58:	6878      	ldr	r0, [r7, #4]
 8011a5a:	f7ff ff79 	bl	8011950 <tcp_rexmit>
 8011a5e:	4603      	mov	r3, r0
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d138      	bne.n	8011ad6 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011a70:	4293      	cmp	r3, r2
 8011a72:	bf28      	it	cs
 8011a74:	4613      	movcs	r3, r2
 8011a76:	b29b      	uxth	r3, r3
 8011a78:	0fda      	lsrs	r2, r3, #31
 8011a7a:	4413      	add	r3, r2
 8011a7c:	105b      	asrs	r3, r3, #1
 8011a7e:	b29a      	uxth	r2, r3
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011a8c:	461a      	mov	r2, r3
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a92:	005b      	lsls	r3, r3, #1
 8011a94:	429a      	cmp	r2, r3
 8011a96:	d206      	bcs.n	8011aa6 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a9c:	005b      	lsls	r3, r3, #1
 8011a9e:	b29a      	uxth	r2, r3
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ab0:	4619      	mov	r1, r3
 8011ab2:	0049      	lsls	r1, r1, #1
 8011ab4:	440b      	add	r3, r1
 8011ab6:	b29b      	uxth	r3, r3
 8011ab8:	4413      	add	r3, r2
 8011aba:	b29a      	uxth	r2, r3
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	8b5b      	ldrh	r3, [r3, #26]
 8011ac6:	f043 0304 	orr.w	r3, r3, #4
 8011aca:	b29a      	uxth	r2, r3
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	2200      	movs	r2, #0
 8011ad4:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8011ad6:	bf00      	nop
 8011ad8:	3708      	adds	r7, #8
 8011ada:	46bd      	mov	sp, r7
 8011adc:	bd80      	pop	{r7, pc}
 8011ade:	bf00      	nop
 8011ae0:	08018720 	.word	0x08018720
 8011ae4:	08018dd8 	.word	0x08018dd8
 8011ae8:	08018774 	.word	0x08018774

08011aec <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8011aec:	b580      	push	{r7, lr}
 8011aee:	b086      	sub	sp, #24
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	60f8      	str	r0, [r7, #12]
 8011af4:	607b      	str	r3, [r7, #4]
 8011af6:	460b      	mov	r3, r1
 8011af8:	817b      	strh	r3, [r7, #10]
 8011afa:	4613      	mov	r3, r2
 8011afc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8011afe:	897a      	ldrh	r2, [r7, #10]
 8011b00:	893b      	ldrh	r3, [r7, #8]
 8011b02:	4413      	add	r3, r2
 8011b04:	b29b      	uxth	r3, r3
 8011b06:	3314      	adds	r3, #20
 8011b08:	b29b      	uxth	r3, r3
 8011b0a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011b0e:	4619      	mov	r1, r3
 8011b10:	2022      	movs	r0, #34	; 0x22
 8011b12:	f7f9 fce7 	bl	800b4e4 <pbuf_alloc>
 8011b16:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011b18:	697b      	ldr	r3, [r7, #20]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d04d      	beq.n	8011bba <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8011b1e:	897b      	ldrh	r3, [r7, #10]
 8011b20:	3313      	adds	r3, #19
 8011b22:	697a      	ldr	r2, [r7, #20]
 8011b24:	8952      	ldrh	r2, [r2, #10]
 8011b26:	4293      	cmp	r3, r2
 8011b28:	db06      	blt.n	8011b38 <tcp_output_alloc_header_common+0x4c>
 8011b2a:	4b26      	ldr	r3, [pc, #152]	; (8011bc4 <tcp_output_alloc_header_common+0xd8>)
 8011b2c:	f240 7223 	movw	r2, #1827	; 0x723
 8011b30:	4925      	ldr	r1, [pc, #148]	; (8011bc8 <tcp_output_alloc_header_common+0xdc>)
 8011b32:	4826      	ldr	r0, [pc, #152]	; (8011bcc <tcp_output_alloc_header_common+0xe0>)
 8011b34:	f003 fd62 	bl	80155fc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8011b38:	697b      	ldr	r3, [r7, #20]
 8011b3a:	685b      	ldr	r3, [r3, #4]
 8011b3c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8011b3e:	8c3b      	ldrh	r3, [r7, #32]
 8011b40:	4618      	mov	r0, r3
 8011b42:	f7f8 fc07 	bl	800a354 <lwip_htons>
 8011b46:	4603      	mov	r3, r0
 8011b48:	461a      	mov	r2, r3
 8011b4a:	693b      	ldr	r3, [r7, #16]
 8011b4c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8011b4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011b50:	4618      	mov	r0, r3
 8011b52:	f7f8 fbff 	bl	800a354 <lwip_htons>
 8011b56:	4603      	mov	r3, r0
 8011b58:	461a      	mov	r2, r3
 8011b5a:	693b      	ldr	r3, [r7, #16]
 8011b5c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8011b5e:	693b      	ldr	r3, [r7, #16]
 8011b60:	687a      	ldr	r2, [r7, #4]
 8011b62:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8011b64:	68f8      	ldr	r0, [r7, #12]
 8011b66:	f7f8 fc0a 	bl	800a37e <lwip_htonl>
 8011b6a:	4602      	mov	r2, r0
 8011b6c:	693b      	ldr	r3, [r7, #16]
 8011b6e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8011b70:	897b      	ldrh	r3, [r7, #10]
 8011b72:	089b      	lsrs	r3, r3, #2
 8011b74:	b29b      	uxth	r3, r3
 8011b76:	3305      	adds	r3, #5
 8011b78:	b29b      	uxth	r3, r3
 8011b7a:	031b      	lsls	r3, r3, #12
 8011b7c:	b29a      	uxth	r2, r3
 8011b7e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011b82:	b29b      	uxth	r3, r3
 8011b84:	4313      	orrs	r3, r2
 8011b86:	b29b      	uxth	r3, r3
 8011b88:	4618      	mov	r0, r3
 8011b8a:	f7f8 fbe3 	bl	800a354 <lwip_htons>
 8011b8e:	4603      	mov	r3, r0
 8011b90:	461a      	mov	r2, r3
 8011b92:	693b      	ldr	r3, [r7, #16]
 8011b94:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8011b96:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011b98:	4618      	mov	r0, r3
 8011b9a:	f7f8 fbdb 	bl	800a354 <lwip_htons>
 8011b9e:	4603      	mov	r3, r0
 8011ba0:	461a      	mov	r2, r3
 8011ba2:	693b      	ldr	r3, [r7, #16]
 8011ba4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8011ba6:	693b      	ldr	r3, [r7, #16]
 8011ba8:	2200      	movs	r2, #0
 8011baa:	741a      	strb	r2, [r3, #16]
 8011bac:	2200      	movs	r2, #0
 8011bae:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011bb0:	693b      	ldr	r3, [r7, #16]
 8011bb2:	2200      	movs	r2, #0
 8011bb4:	749a      	strb	r2, [r3, #18]
 8011bb6:	2200      	movs	r2, #0
 8011bb8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8011bba:	697b      	ldr	r3, [r7, #20]
}
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	3718      	adds	r7, #24
 8011bc0:	46bd      	mov	sp, r7
 8011bc2:	bd80      	pop	{r7, pc}
 8011bc4:	08018720 	.word	0x08018720
 8011bc8:	08018df8 	.word	0x08018df8
 8011bcc:	08018774 	.word	0x08018774

08011bd0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8011bd0:	b5b0      	push	{r4, r5, r7, lr}
 8011bd2:	b08a      	sub	sp, #40	; 0x28
 8011bd4:	af04      	add	r7, sp, #16
 8011bd6:	60f8      	str	r0, [r7, #12]
 8011bd8:	607b      	str	r3, [r7, #4]
 8011bda:	460b      	mov	r3, r1
 8011bdc:	817b      	strh	r3, [r7, #10]
 8011bde:	4613      	mov	r3, r2
 8011be0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d106      	bne.n	8011bf6 <tcp_output_alloc_header+0x26>
 8011be8:	4b15      	ldr	r3, [pc, #84]	; (8011c40 <tcp_output_alloc_header+0x70>)
 8011bea:	f240 7242 	movw	r2, #1858	; 0x742
 8011bee:	4915      	ldr	r1, [pc, #84]	; (8011c44 <tcp_output_alloc_header+0x74>)
 8011bf0:	4815      	ldr	r0, [pc, #84]	; (8011c48 <tcp_output_alloc_header+0x78>)
 8011bf2:	f003 fd03 	bl	80155fc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	8adb      	ldrh	r3, [r3, #22]
 8011bfe:	68fa      	ldr	r2, [r7, #12]
 8011c00:	8b12      	ldrh	r2, [r2, #24]
 8011c02:	68f9      	ldr	r1, [r7, #12]
 8011c04:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8011c06:	893d      	ldrh	r5, [r7, #8]
 8011c08:	897c      	ldrh	r4, [r7, #10]
 8011c0a:	9103      	str	r1, [sp, #12]
 8011c0c:	2110      	movs	r1, #16
 8011c0e:	9102      	str	r1, [sp, #8]
 8011c10:	9201      	str	r2, [sp, #4]
 8011c12:	9300      	str	r3, [sp, #0]
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	462a      	mov	r2, r5
 8011c18:	4621      	mov	r1, r4
 8011c1a:	f7ff ff67 	bl	8011aec <tcp_output_alloc_header_common>
 8011c1e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8011c20:	697b      	ldr	r3, [r7, #20]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d006      	beq.n	8011c34 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c2a:	68fa      	ldr	r2, [r7, #12]
 8011c2c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011c2e:	441a      	add	r2, r3
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8011c34:	697b      	ldr	r3, [r7, #20]
}
 8011c36:	4618      	mov	r0, r3
 8011c38:	3718      	adds	r7, #24
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	bdb0      	pop	{r4, r5, r7, pc}
 8011c3e:	bf00      	nop
 8011c40:	08018720 	.word	0x08018720
 8011c44:	08018e28 	.word	0x08018e28
 8011c48:	08018774 	.word	0x08018774

08011c4c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8011c4c:	b580      	push	{r7, lr}
 8011c4e:	b088      	sub	sp, #32
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	60f8      	str	r0, [r7, #12]
 8011c54:	60b9      	str	r1, [r7, #8]
 8011c56:	4611      	mov	r1, r2
 8011c58:	461a      	mov	r2, r3
 8011c5a:	460b      	mov	r3, r1
 8011c5c:	71fb      	strb	r3, [r7, #7]
 8011c5e:	4613      	mov	r3, r2
 8011c60:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8011c62:	2300      	movs	r3, #0
 8011c64:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8011c66:	68bb      	ldr	r3, [r7, #8]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d106      	bne.n	8011c7a <tcp_output_fill_options+0x2e>
 8011c6c:	4b13      	ldr	r3, [pc, #76]	; (8011cbc <tcp_output_fill_options+0x70>)
 8011c6e:	f240 7256 	movw	r2, #1878	; 0x756
 8011c72:	4913      	ldr	r1, [pc, #76]	; (8011cc0 <tcp_output_fill_options+0x74>)
 8011c74:	4813      	ldr	r0, [pc, #76]	; (8011cc4 <tcp_output_fill_options+0x78>)
 8011c76:	f003 fcc1 	bl	80155fc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8011c7a:	68bb      	ldr	r3, [r7, #8]
 8011c7c:	685b      	ldr	r3, [r3, #4]
 8011c7e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8011c80:	69bb      	ldr	r3, [r7, #24]
 8011c82:	3314      	adds	r3, #20
 8011c84:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8011c86:	69bb      	ldr	r3, [r7, #24]
 8011c88:	f103 0214 	add.w	r2, r3, #20
 8011c8c:	8bfb      	ldrh	r3, [r7, #30]
 8011c8e:	009b      	lsls	r3, r3, #2
 8011c90:	4619      	mov	r1, r3
 8011c92:	79fb      	ldrb	r3, [r7, #7]
 8011c94:	009b      	lsls	r3, r3, #2
 8011c96:	f003 0304 	and.w	r3, r3, #4
 8011c9a:	440b      	add	r3, r1
 8011c9c:	4413      	add	r3, r2
 8011c9e:	697a      	ldr	r2, [r7, #20]
 8011ca0:	429a      	cmp	r2, r3
 8011ca2:	d006      	beq.n	8011cb2 <tcp_output_fill_options+0x66>
 8011ca4:	4b05      	ldr	r3, [pc, #20]	; (8011cbc <tcp_output_fill_options+0x70>)
 8011ca6:	f240 7275 	movw	r2, #1909	; 0x775
 8011caa:	4907      	ldr	r1, [pc, #28]	; (8011cc8 <tcp_output_fill_options+0x7c>)
 8011cac:	4805      	ldr	r0, [pc, #20]	; (8011cc4 <tcp_output_fill_options+0x78>)
 8011cae:	f003 fca5 	bl	80155fc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8011cb2:	bf00      	nop
 8011cb4:	3720      	adds	r7, #32
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	bd80      	pop	{r7, pc}
 8011cba:	bf00      	nop
 8011cbc:	08018720 	.word	0x08018720
 8011cc0:	08018e50 	.word	0x08018e50
 8011cc4:	08018774 	.word	0x08018774
 8011cc8:	08018d48 	.word	0x08018d48

08011ccc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	b08a      	sub	sp, #40	; 0x28
 8011cd0:	af04      	add	r7, sp, #16
 8011cd2:	60f8      	str	r0, [r7, #12]
 8011cd4:	60b9      	str	r1, [r7, #8]
 8011cd6:	607a      	str	r2, [r7, #4]
 8011cd8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8011cda:	68bb      	ldr	r3, [r7, #8]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d106      	bne.n	8011cee <tcp_output_control_segment+0x22>
 8011ce0:	4b1c      	ldr	r3, [pc, #112]	; (8011d54 <tcp_output_control_segment+0x88>)
 8011ce2:	f240 7287 	movw	r2, #1927	; 0x787
 8011ce6:	491c      	ldr	r1, [pc, #112]	; (8011d58 <tcp_output_control_segment+0x8c>)
 8011ce8:	481c      	ldr	r0, [pc, #112]	; (8011d5c <tcp_output_control_segment+0x90>)
 8011cea:	f003 fc87 	bl	80155fc <iprintf>

  netif = tcp_route(pcb, src, dst);
 8011cee:	683a      	ldr	r2, [r7, #0]
 8011cf0:	6879      	ldr	r1, [r7, #4]
 8011cf2:	68f8      	ldr	r0, [r7, #12]
 8011cf4:	f7fe fae8 	bl	80102c8 <tcp_route>
 8011cf8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8011cfa:	693b      	ldr	r3, [r7, #16]
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d102      	bne.n	8011d06 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011d00:	23fc      	movs	r3, #252	; 0xfc
 8011d02:	75fb      	strb	r3, [r7, #23]
 8011d04:	e01c      	b.n	8011d40 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d006      	beq.n	8011d1a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	7adb      	ldrb	r3, [r3, #11]
 8011d10:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	7a9b      	ldrb	r3, [r3, #10]
 8011d16:	757b      	strb	r3, [r7, #21]
 8011d18:	e003      	b.n	8011d22 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8011d1a:	23ff      	movs	r3, #255	; 0xff
 8011d1c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8011d1e:	2300      	movs	r3, #0
 8011d20:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8011d22:	7dba      	ldrb	r2, [r7, #22]
 8011d24:	693b      	ldr	r3, [r7, #16]
 8011d26:	9302      	str	r3, [sp, #8]
 8011d28:	2306      	movs	r3, #6
 8011d2a:	9301      	str	r3, [sp, #4]
 8011d2c:	7d7b      	ldrb	r3, [r7, #21]
 8011d2e:	9300      	str	r3, [sp, #0]
 8011d30:	4613      	mov	r3, r2
 8011d32:	683a      	ldr	r2, [r7, #0]
 8011d34:	6879      	ldr	r1, [r7, #4]
 8011d36:	68b8      	ldr	r0, [r7, #8]
 8011d38:	f002 f8e6 	bl	8013f08 <ip4_output_if>
 8011d3c:	4603      	mov	r3, r0
 8011d3e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011d40:	68b8      	ldr	r0, [r7, #8]
 8011d42:	f7f9 feb3 	bl	800baac <pbuf_free>
  return err;
 8011d46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	3718      	adds	r7, #24
 8011d4e:	46bd      	mov	sp, r7
 8011d50:	bd80      	pop	{r7, pc}
 8011d52:	bf00      	nop
 8011d54:	08018720 	.word	0x08018720
 8011d58:	08018e78 	.word	0x08018e78
 8011d5c:	08018774 	.word	0x08018774

08011d60 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8011d60:	b590      	push	{r4, r7, lr}
 8011d62:	b08b      	sub	sp, #44	; 0x2c
 8011d64:	af04      	add	r7, sp, #16
 8011d66:	60f8      	str	r0, [r7, #12]
 8011d68:	60b9      	str	r1, [r7, #8]
 8011d6a:	607a      	str	r2, [r7, #4]
 8011d6c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8011d6e:	683b      	ldr	r3, [r7, #0]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d106      	bne.n	8011d82 <tcp_rst+0x22>
 8011d74:	4b1f      	ldr	r3, [pc, #124]	; (8011df4 <tcp_rst+0x94>)
 8011d76:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8011d7a:	491f      	ldr	r1, [pc, #124]	; (8011df8 <tcp_rst+0x98>)
 8011d7c:	481f      	ldr	r0, [pc, #124]	; (8011dfc <tcp_rst+0x9c>)
 8011d7e:	f003 fc3d 	bl	80155fc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8011d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d106      	bne.n	8011d96 <tcp_rst+0x36>
 8011d88:	4b1a      	ldr	r3, [pc, #104]	; (8011df4 <tcp_rst+0x94>)
 8011d8a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8011d8e:	491c      	ldr	r1, [pc, #112]	; (8011e00 <tcp_rst+0xa0>)
 8011d90:	481a      	ldr	r0, [pc, #104]	; (8011dfc <tcp_rst+0x9c>)
 8011d92:	f003 fc33 	bl	80155fc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011d96:	2300      	movs	r3, #0
 8011d98:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8011d9a:	f246 0308 	movw	r3, #24584	; 0x6008
 8011d9e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8011da0:	7dfb      	ldrb	r3, [r7, #23]
 8011da2:	b29c      	uxth	r4, r3
 8011da4:	68b8      	ldr	r0, [r7, #8]
 8011da6:	f7f8 faea 	bl	800a37e <lwip_htonl>
 8011daa:	4602      	mov	r2, r0
 8011dac:	8abb      	ldrh	r3, [r7, #20]
 8011dae:	9303      	str	r3, [sp, #12]
 8011db0:	2314      	movs	r3, #20
 8011db2:	9302      	str	r3, [sp, #8]
 8011db4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011db6:	9301      	str	r3, [sp, #4]
 8011db8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011dba:	9300      	str	r3, [sp, #0]
 8011dbc:	4613      	mov	r3, r2
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	4621      	mov	r1, r4
 8011dc2:	6878      	ldr	r0, [r7, #4]
 8011dc4:	f7ff fe92 	bl	8011aec <tcp_output_alloc_header_common>
 8011dc8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8011dca:	693b      	ldr	r3, [r7, #16]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d00c      	beq.n	8011dea <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011dd0:	7dfb      	ldrb	r3, [r7, #23]
 8011dd2:	2200      	movs	r2, #0
 8011dd4:	6939      	ldr	r1, [r7, #16]
 8011dd6:	68f8      	ldr	r0, [r7, #12]
 8011dd8:	f7ff ff38 	bl	8011c4c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dde:	683a      	ldr	r2, [r7, #0]
 8011de0:	6939      	ldr	r1, [r7, #16]
 8011de2:	68f8      	ldr	r0, [r7, #12]
 8011de4:	f7ff ff72 	bl	8011ccc <tcp_output_control_segment>
 8011de8:	e000      	b.n	8011dec <tcp_rst+0x8c>
    return;
 8011dea:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011dec:	371c      	adds	r7, #28
 8011dee:	46bd      	mov	sp, r7
 8011df0:	bd90      	pop	{r4, r7, pc}
 8011df2:	bf00      	nop
 8011df4:	08018720 	.word	0x08018720
 8011df8:	08018ea4 	.word	0x08018ea4
 8011dfc:	08018774 	.word	0x08018774
 8011e00:	08018ec0 	.word	0x08018ec0

08011e04 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011e04:	b590      	push	{r4, r7, lr}
 8011e06:	b087      	sub	sp, #28
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011e0c:	2300      	movs	r3, #0
 8011e0e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011e10:	2300      	movs	r3, #0
 8011e12:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d106      	bne.n	8011e28 <tcp_send_empty_ack+0x24>
 8011e1a:	4b28      	ldr	r3, [pc, #160]	; (8011ebc <tcp_send_empty_ack+0xb8>)
 8011e1c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8011e20:	4927      	ldr	r1, [pc, #156]	; (8011ec0 <tcp_send_empty_ack+0xbc>)
 8011e22:	4828      	ldr	r0, [pc, #160]	; (8011ec4 <tcp_send_empty_ack+0xc0>)
 8011e24:	f003 fbea 	bl	80155fc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011e28:	7dfb      	ldrb	r3, [r7, #23]
 8011e2a:	009b      	lsls	r3, r3, #2
 8011e2c:	b2db      	uxtb	r3, r3
 8011e2e:	f003 0304 	and.w	r3, r3, #4
 8011e32:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011e34:	7d7b      	ldrb	r3, [r7, #21]
 8011e36:	b29c      	uxth	r4, r3
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	f7f8 fa9e 	bl	800a37e <lwip_htonl>
 8011e42:	4603      	mov	r3, r0
 8011e44:	2200      	movs	r2, #0
 8011e46:	4621      	mov	r1, r4
 8011e48:	6878      	ldr	r0, [r7, #4]
 8011e4a:	f7ff fec1 	bl	8011bd0 <tcp_output_alloc_header>
 8011e4e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011e50:	693b      	ldr	r3, [r7, #16]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d109      	bne.n	8011e6a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	8b5b      	ldrh	r3, [r3, #26]
 8011e5a:	f043 0303 	orr.w	r3, r3, #3
 8011e5e:	b29a      	uxth	r2, r3
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011e64:	f06f 0301 	mvn.w	r3, #1
 8011e68:	e023      	b.n	8011eb2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011e6a:	7dbb      	ldrb	r3, [r7, #22]
 8011e6c:	7dfa      	ldrb	r2, [r7, #23]
 8011e6e:	6939      	ldr	r1, [r7, #16]
 8011e70:	6878      	ldr	r0, [r7, #4]
 8011e72:	f7ff feeb 	bl	8011c4c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011e76:	687a      	ldr	r2, [r7, #4]
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	3304      	adds	r3, #4
 8011e7c:	6939      	ldr	r1, [r7, #16]
 8011e7e:	6878      	ldr	r0, [r7, #4]
 8011e80:	f7ff ff24 	bl	8011ccc <tcp_output_control_segment>
 8011e84:	4603      	mov	r3, r0
 8011e86:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011e88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d007      	beq.n	8011ea0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	8b5b      	ldrh	r3, [r3, #26]
 8011e94:	f043 0303 	orr.w	r3, r3, #3
 8011e98:	b29a      	uxth	r2, r3
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	835a      	strh	r2, [r3, #26]
 8011e9e:	e006      	b.n	8011eae <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	8b5b      	ldrh	r3, [r3, #26]
 8011ea4:	f023 0303 	bic.w	r3, r3, #3
 8011ea8:	b29a      	uxth	r2, r3
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	371c      	adds	r7, #28
 8011eb6:	46bd      	mov	sp, r7
 8011eb8:	bd90      	pop	{r4, r7, pc}
 8011eba:	bf00      	nop
 8011ebc:	08018720 	.word	0x08018720
 8011ec0:	08018edc 	.word	0x08018edc
 8011ec4:	08018774 	.word	0x08018774

08011ec8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011ec8:	b590      	push	{r4, r7, lr}
 8011eca:	b087      	sub	sp, #28
 8011ecc:	af00      	add	r7, sp, #0
 8011ece:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011ed0:	2300      	movs	r3, #0
 8011ed2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d106      	bne.n	8011ee8 <tcp_keepalive+0x20>
 8011eda:	4b18      	ldr	r3, [pc, #96]	; (8011f3c <tcp_keepalive+0x74>)
 8011edc:	f640 0224 	movw	r2, #2084	; 0x824
 8011ee0:	4917      	ldr	r1, [pc, #92]	; (8011f40 <tcp_keepalive+0x78>)
 8011ee2:	4818      	ldr	r0, [pc, #96]	; (8011f44 <tcp_keepalive+0x7c>)
 8011ee4:	f003 fb8a 	bl	80155fc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011ee8:	7dfb      	ldrb	r3, [r7, #23]
 8011eea:	b29c      	uxth	r4, r3
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011ef0:	3b01      	subs	r3, #1
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	f7f8 fa43 	bl	800a37e <lwip_htonl>
 8011ef8:	4603      	mov	r3, r0
 8011efa:	2200      	movs	r2, #0
 8011efc:	4621      	mov	r1, r4
 8011efe:	6878      	ldr	r0, [r7, #4]
 8011f00:	f7ff fe66 	bl	8011bd0 <tcp_output_alloc_header>
 8011f04:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011f06:	693b      	ldr	r3, [r7, #16]
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d102      	bne.n	8011f12 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011f0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011f10:	e010      	b.n	8011f34 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011f12:	7dfb      	ldrb	r3, [r7, #23]
 8011f14:	2200      	movs	r2, #0
 8011f16:	6939      	ldr	r1, [r7, #16]
 8011f18:	6878      	ldr	r0, [r7, #4]
 8011f1a:	f7ff fe97 	bl	8011c4c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011f1e:	687a      	ldr	r2, [r7, #4]
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	3304      	adds	r3, #4
 8011f24:	6939      	ldr	r1, [r7, #16]
 8011f26:	6878      	ldr	r0, [r7, #4]
 8011f28:	f7ff fed0 	bl	8011ccc <tcp_output_control_segment>
 8011f2c:	4603      	mov	r3, r0
 8011f2e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011f30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011f34:	4618      	mov	r0, r3
 8011f36:	371c      	adds	r7, #28
 8011f38:	46bd      	mov	sp, r7
 8011f3a:	bd90      	pop	{r4, r7, pc}
 8011f3c:	08018720 	.word	0x08018720
 8011f40:	08018efc 	.word	0x08018efc
 8011f44:	08018774 	.word	0x08018774

08011f48 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011f48:	b590      	push	{r4, r7, lr}
 8011f4a:	b08b      	sub	sp, #44	; 0x2c
 8011f4c:	af00      	add	r7, sp, #0
 8011f4e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011f50:	2300      	movs	r3, #0
 8011f52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d106      	bne.n	8011f6a <tcp_zero_window_probe+0x22>
 8011f5c:	4b4c      	ldr	r3, [pc, #304]	; (8012090 <tcp_zero_window_probe+0x148>)
 8011f5e:	f640 024f 	movw	r2, #2127	; 0x84f
 8011f62:	494c      	ldr	r1, [pc, #304]	; (8012094 <tcp_zero_window_probe+0x14c>)
 8011f64:	484c      	ldr	r0, [pc, #304]	; (8012098 <tcp_zero_window_probe+0x150>)
 8011f66:	f003 fb49 	bl	80155fc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f6e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011f70:	6a3b      	ldr	r3, [r7, #32]
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d101      	bne.n	8011f7a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011f76:	2300      	movs	r3, #0
 8011f78:	e086      	b.n	8012088 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011f80:	2bff      	cmp	r3, #255	; 0xff
 8011f82:	d007      	beq.n	8011f94 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011f8a:	3301      	adds	r3, #1
 8011f8c:	b2da      	uxtb	r2, r3
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011f94:	6a3b      	ldr	r3, [r7, #32]
 8011f96:	68db      	ldr	r3, [r3, #12]
 8011f98:	899b      	ldrh	r3, [r3, #12]
 8011f9a:	b29b      	uxth	r3, r3
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	f7f8 f9d9 	bl	800a354 <lwip_htons>
 8011fa2:	4603      	mov	r3, r0
 8011fa4:	b2db      	uxtb	r3, r3
 8011fa6:	f003 0301 	and.w	r3, r3, #1
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d005      	beq.n	8011fba <tcp_zero_window_probe+0x72>
 8011fae:	6a3b      	ldr	r3, [r7, #32]
 8011fb0:	891b      	ldrh	r3, [r3, #8]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d101      	bne.n	8011fba <tcp_zero_window_probe+0x72>
 8011fb6:	2301      	movs	r3, #1
 8011fb8:	e000      	b.n	8011fbc <tcp_zero_window_probe+0x74>
 8011fba:	2300      	movs	r3, #0
 8011fbc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011fbe:	7ffb      	ldrb	r3, [r7, #31]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	bf0c      	ite	eq
 8011fc4:	2301      	moveq	r3, #1
 8011fc6:	2300      	movne	r3, #0
 8011fc8:	b2db      	uxtb	r3, r3
 8011fca:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011fcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011fd0:	b299      	uxth	r1, r3
 8011fd2:	6a3b      	ldr	r3, [r7, #32]
 8011fd4:	68db      	ldr	r3, [r3, #12]
 8011fd6:	685b      	ldr	r3, [r3, #4]
 8011fd8:	8bba      	ldrh	r2, [r7, #28]
 8011fda:	6878      	ldr	r0, [r7, #4]
 8011fdc:	f7ff fdf8 	bl	8011bd0 <tcp_output_alloc_header>
 8011fe0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011fe2:	69bb      	ldr	r3, [r7, #24]
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d102      	bne.n	8011fee <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011fe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011fec:	e04c      	b.n	8012088 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011fee:	69bb      	ldr	r3, [r7, #24]
 8011ff0:	685b      	ldr	r3, [r3, #4]
 8011ff2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011ff4:	7ffb      	ldrb	r3, [r7, #31]
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d011      	beq.n	801201e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011ffa:	697b      	ldr	r3, [r7, #20]
 8011ffc:	899b      	ldrh	r3, [r3, #12]
 8011ffe:	b29b      	uxth	r3, r3
 8012000:	b21b      	sxth	r3, r3
 8012002:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012006:	b21c      	sxth	r4, r3
 8012008:	2011      	movs	r0, #17
 801200a:	f7f8 f9a3 	bl	800a354 <lwip_htons>
 801200e:	4603      	mov	r3, r0
 8012010:	b21b      	sxth	r3, r3
 8012012:	4323      	orrs	r3, r4
 8012014:	b21b      	sxth	r3, r3
 8012016:	b29a      	uxth	r2, r3
 8012018:	697b      	ldr	r3, [r7, #20]
 801201a:	819a      	strh	r2, [r3, #12]
 801201c:	e010      	b.n	8012040 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801201e:	69bb      	ldr	r3, [r7, #24]
 8012020:	685b      	ldr	r3, [r3, #4]
 8012022:	3314      	adds	r3, #20
 8012024:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012026:	6a3b      	ldr	r3, [r7, #32]
 8012028:	6858      	ldr	r0, [r3, #4]
 801202a:	6a3b      	ldr	r3, [r7, #32]
 801202c:	685b      	ldr	r3, [r3, #4]
 801202e:	891a      	ldrh	r2, [r3, #8]
 8012030:	6a3b      	ldr	r3, [r7, #32]
 8012032:	891b      	ldrh	r3, [r3, #8]
 8012034:	1ad3      	subs	r3, r2, r3
 8012036:	b29b      	uxth	r3, r3
 8012038:	2201      	movs	r2, #1
 801203a:	6939      	ldr	r1, [r7, #16]
 801203c:	f7f9 ff2c 	bl	800be98 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012040:	6a3b      	ldr	r3, [r7, #32]
 8012042:	68db      	ldr	r3, [r3, #12]
 8012044:	685b      	ldr	r3, [r3, #4]
 8012046:	4618      	mov	r0, r3
 8012048:	f7f8 f999 	bl	800a37e <lwip_htonl>
 801204c:	4603      	mov	r3, r0
 801204e:	3301      	adds	r3, #1
 8012050:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	1ad3      	subs	r3, r2, r3
 801205a:	2b00      	cmp	r3, #0
 801205c:	da02      	bge.n	8012064 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	68fa      	ldr	r2, [r7, #12]
 8012062:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012064:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012068:	2200      	movs	r2, #0
 801206a:	69b9      	ldr	r1, [r7, #24]
 801206c:	6878      	ldr	r0, [r7, #4]
 801206e:	f7ff fded 	bl	8011c4c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012072:	687a      	ldr	r2, [r7, #4]
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	3304      	adds	r3, #4
 8012078:	69b9      	ldr	r1, [r7, #24]
 801207a:	6878      	ldr	r0, [r7, #4]
 801207c:	f7ff fe26 	bl	8011ccc <tcp_output_control_segment>
 8012080:	4603      	mov	r3, r0
 8012082:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012084:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012088:	4618      	mov	r0, r3
 801208a:	372c      	adds	r7, #44	; 0x2c
 801208c:	46bd      	mov	sp, r7
 801208e:	bd90      	pop	{r4, r7, pc}
 8012090:	08018720 	.word	0x08018720
 8012094:	08018f18 	.word	0x08018f18
 8012098:	08018774 	.word	0x08018774

0801209c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801209c:	b580      	push	{r7, lr}
 801209e:	b082      	sub	sp, #8
 80120a0:	af00      	add	r7, sp, #0
 80120a2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80120a4:	f7f9 ffe6 	bl	800c074 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80120a8:	4b0a      	ldr	r3, [pc, #40]	; (80120d4 <tcpip_tcp_timer+0x38>)
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d103      	bne.n	80120b8 <tcpip_tcp_timer+0x1c>
 80120b0:	4b09      	ldr	r3, [pc, #36]	; (80120d8 <tcpip_tcp_timer+0x3c>)
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d005      	beq.n	80120c4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80120b8:	2200      	movs	r2, #0
 80120ba:	4908      	ldr	r1, [pc, #32]	; (80120dc <tcpip_tcp_timer+0x40>)
 80120bc:	20fa      	movs	r0, #250	; 0xfa
 80120be:	f000 f8f3 	bl	80122a8 <sys_timeout>
 80120c2:	e003      	b.n	80120cc <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80120c4:	4b06      	ldr	r3, [pc, #24]	; (80120e0 <tcpip_tcp_timer+0x44>)
 80120c6:	2200      	movs	r2, #0
 80120c8:	601a      	str	r2, [r3, #0]
  }
}
 80120ca:	bf00      	nop
 80120cc:	bf00      	nop
 80120ce:	3708      	adds	r7, #8
 80120d0:	46bd      	mov	sp, r7
 80120d2:	bd80      	pop	{r7, pc}
 80120d4:	2000b7d8 	.word	0x2000b7d8
 80120d8:	2000b7e8 	.word	0x2000b7e8
 80120dc:	0801209d 	.word	0x0801209d
 80120e0:	20004b0c 	.word	0x20004b0c

080120e4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80120e4:	b580      	push	{r7, lr}
 80120e6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80120e8:	4b0a      	ldr	r3, [pc, #40]	; (8012114 <tcp_timer_needed+0x30>)
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d10f      	bne.n	8012110 <tcp_timer_needed+0x2c>
 80120f0:	4b09      	ldr	r3, [pc, #36]	; (8012118 <tcp_timer_needed+0x34>)
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d103      	bne.n	8012100 <tcp_timer_needed+0x1c>
 80120f8:	4b08      	ldr	r3, [pc, #32]	; (801211c <tcp_timer_needed+0x38>)
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d007      	beq.n	8012110 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012100:	4b04      	ldr	r3, [pc, #16]	; (8012114 <tcp_timer_needed+0x30>)
 8012102:	2201      	movs	r2, #1
 8012104:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012106:	2200      	movs	r2, #0
 8012108:	4905      	ldr	r1, [pc, #20]	; (8012120 <tcp_timer_needed+0x3c>)
 801210a:	20fa      	movs	r0, #250	; 0xfa
 801210c:	f000 f8cc 	bl	80122a8 <sys_timeout>
  }
}
 8012110:	bf00      	nop
 8012112:	bd80      	pop	{r7, pc}
 8012114:	20004b0c 	.word	0x20004b0c
 8012118:	2000b7d8 	.word	0x2000b7d8
 801211c:	2000b7e8 	.word	0x2000b7e8
 8012120:	0801209d 	.word	0x0801209d

08012124 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012124:	b580      	push	{r7, lr}
 8012126:	b086      	sub	sp, #24
 8012128:	af00      	add	r7, sp, #0
 801212a:	60f8      	str	r0, [r7, #12]
 801212c:	60b9      	str	r1, [r7, #8]
 801212e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012130:	200a      	movs	r0, #10
 8012132:	f7f8 fdc5 	bl	800acc0 <memp_malloc>
 8012136:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012138:	693b      	ldr	r3, [r7, #16]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d109      	bne.n	8012152 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801213e:	693b      	ldr	r3, [r7, #16]
 8012140:	2b00      	cmp	r3, #0
 8012142:	d151      	bne.n	80121e8 <sys_timeout_abs+0xc4>
 8012144:	4b2a      	ldr	r3, [pc, #168]	; (80121f0 <sys_timeout_abs+0xcc>)
 8012146:	22be      	movs	r2, #190	; 0xbe
 8012148:	492a      	ldr	r1, [pc, #168]	; (80121f4 <sys_timeout_abs+0xd0>)
 801214a:	482b      	ldr	r0, [pc, #172]	; (80121f8 <sys_timeout_abs+0xd4>)
 801214c:	f003 fa56 	bl	80155fc <iprintf>
    return;
 8012150:	e04a      	b.n	80121e8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8012152:	693b      	ldr	r3, [r7, #16]
 8012154:	2200      	movs	r2, #0
 8012156:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012158:	693b      	ldr	r3, [r7, #16]
 801215a:	68ba      	ldr	r2, [r7, #8]
 801215c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801215e:	693b      	ldr	r3, [r7, #16]
 8012160:	687a      	ldr	r2, [r7, #4]
 8012162:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012164:	693b      	ldr	r3, [r7, #16]
 8012166:	68fa      	ldr	r2, [r7, #12]
 8012168:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801216a:	4b24      	ldr	r3, [pc, #144]	; (80121fc <sys_timeout_abs+0xd8>)
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	2b00      	cmp	r3, #0
 8012170:	d103      	bne.n	801217a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8012172:	4a22      	ldr	r2, [pc, #136]	; (80121fc <sys_timeout_abs+0xd8>)
 8012174:	693b      	ldr	r3, [r7, #16]
 8012176:	6013      	str	r3, [r2, #0]
    return;
 8012178:	e037      	b.n	80121ea <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801217a:	693b      	ldr	r3, [r7, #16]
 801217c:	685a      	ldr	r2, [r3, #4]
 801217e:	4b1f      	ldr	r3, [pc, #124]	; (80121fc <sys_timeout_abs+0xd8>)
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	685b      	ldr	r3, [r3, #4]
 8012184:	1ad3      	subs	r3, r2, r3
 8012186:	0fdb      	lsrs	r3, r3, #31
 8012188:	f003 0301 	and.w	r3, r3, #1
 801218c:	b2db      	uxtb	r3, r3
 801218e:	2b00      	cmp	r3, #0
 8012190:	d007      	beq.n	80121a2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8012192:	4b1a      	ldr	r3, [pc, #104]	; (80121fc <sys_timeout_abs+0xd8>)
 8012194:	681a      	ldr	r2, [r3, #0]
 8012196:	693b      	ldr	r3, [r7, #16]
 8012198:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801219a:	4a18      	ldr	r2, [pc, #96]	; (80121fc <sys_timeout_abs+0xd8>)
 801219c:	693b      	ldr	r3, [r7, #16]
 801219e:	6013      	str	r3, [r2, #0]
 80121a0:	e023      	b.n	80121ea <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80121a2:	4b16      	ldr	r3, [pc, #88]	; (80121fc <sys_timeout_abs+0xd8>)
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	617b      	str	r3, [r7, #20]
 80121a8:	e01a      	b.n	80121e0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80121aa:	697b      	ldr	r3, [r7, #20]
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d00b      	beq.n	80121ca <sys_timeout_abs+0xa6>
 80121b2:	693b      	ldr	r3, [r7, #16]
 80121b4:	685a      	ldr	r2, [r3, #4]
 80121b6:	697b      	ldr	r3, [r7, #20]
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	685b      	ldr	r3, [r3, #4]
 80121bc:	1ad3      	subs	r3, r2, r3
 80121be:	0fdb      	lsrs	r3, r3, #31
 80121c0:	f003 0301 	and.w	r3, r3, #1
 80121c4:	b2db      	uxtb	r3, r3
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d007      	beq.n	80121da <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80121ca:	697b      	ldr	r3, [r7, #20]
 80121cc:	681a      	ldr	r2, [r3, #0]
 80121ce:	693b      	ldr	r3, [r7, #16]
 80121d0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80121d2:	697b      	ldr	r3, [r7, #20]
 80121d4:	693a      	ldr	r2, [r7, #16]
 80121d6:	601a      	str	r2, [r3, #0]
        break;
 80121d8:	e007      	b.n	80121ea <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80121da:	697b      	ldr	r3, [r7, #20]
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	617b      	str	r3, [r7, #20]
 80121e0:	697b      	ldr	r3, [r7, #20]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d1e1      	bne.n	80121aa <sys_timeout_abs+0x86>
 80121e6:	e000      	b.n	80121ea <sys_timeout_abs+0xc6>
    return;
 80121e8:	bf00      	nop
      }
    }
  }
}
 80121ea:	3718      	adds	r7, #24
 80121ec:	46bd      	mov	sp, r7
 80121ee:	bd80      	pop	{r7, pc}
 80121f0:	08018f3c 	.word	0x08018f3c
 80121f4:	08018f70 	.word	0x08018f70
 80121f8:	08018fb0 	.word	0x08018fb0
 80121fc:	20004b04 	.word	0x20004b04

08012200 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8012200:	b580      	push	{r7, lr}
 8012202:	b086      	sub	sp, #24
 8012204:	af00      	add	r7, sp, #0
 8012206:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801220c:	697b      	ldr	r3, [r7, #20]
 801220e:	685b      	ldr	r3, [r3, #4]
 8012210:	4798      	blx	r3

  now = sys_now();
 8012212:	f7f1 fe2b 	bl	8003e6c <sys_now>
 8012216:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012218:	697b      	ldr	r3, [r7, #20]
 801221a:	681a      	ldr	r2, [r3, #0]
 801221c:	4b0f      	ldr	r3, [pc, #60]	; (801225c <lwip_cyclic_timer+0x5c>)
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	4413      	add	r3, r2
 8012222:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8012224:	68fa      	ldr	r2, [r7, #12]
 8012226:	693b      	ldr	r3, [r7, #16]
 8012228:	1ad3      	subs	r3, r2, r3
 801222a:	0fdb      	lsrs	r3, r3, #31
 801222c:	f003 0301 	and.w	r3, r3, #1
 8012230:	b2db      	uxtb	r3, r3
 8012232:	2b00      	cmp	r3, #0
 8012234:	d009      	beq.n	801224a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8012236:	697b      	ldr	r3, [r7, #20]
 8012238:	681a      	ldr	r2, [r3, #0]
 801223a:	693b      	ldr	r3, [r7, #16]
 801223c:	4413      	add	r3, r2
 801223e:	687a      	ldr	r2, [r7, #4]
 8012240:	4907      	ldr	r1, [pc, #28]	; (8012260 <lwip_cyclic_timer+0x60>)
 8012242:	4618      	mov	r0, r3
 8012244:	f7ff ff6e 	bl	8012124 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012248:	e004      	b.n	8012254 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801224a:	687a      	ldr	r2, [r7, #4]
 801224c:	4904      	ldr	r1, [pc, #16]	; (8012260 <lwip_cyclic_timer+0x60>)
 801224e:	68f8      	ldr	r0, [r7, #12]
 8012250:	f7ff ff68 	bl	8012124 <sys_timeout_abs>
}
 8012254:	bf00      	nop
 8012256:	3718      	adds	r7, #24
 8012258:	46bd      	mov	sp, r7
 801225a:	bd80      	pop	{r7, pc}
 801225c:	20004b08 	.word	0x20004b08
 8012260:	08012201 	.word	0x08012201

08012264 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012264:	b580      	push	{r7, lr}
 8012266:	b082      	sub	sp, #8
 8012268:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801226a:	2301      	movs	r3, #1
 801226c:	607b      	str	r3, [r7, #4]
 801226e:	e00e      	b.n	801228e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8012270:	4a0b      	ldr	r2, [pc, #44]	; (80122a0 <sys_timeouts_init+0x3c>)
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	00db      	lsls	r3, r3, #3
 801227c:	4a08      	ldr	r2, [pc, #32]	; (80122a0 <sys_timeouts_init+0x3c>)
 801227e:	4413      	add	r3, r2
 8012280:	461a      	mov	r2, r3
 8012282:	4908      	ldr	r1, [pc, #32]	; (80122a4 <sys_timeouts_init+0x40>)
 8012284:	f000 f810 	bl	80122a8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	3301      	adds	r3, #1
 801228c:	607b      	str	r3, [r7, #4]
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	2b02      	cmp	r3, #2
 8012292:	d9ed      	bls.n	8012270 <sys_timeouts_init+0xc>
  }
}
 8012294:	bf00      	nop
 8012296:	bf00      	nop
 8012298:	3708      	adds	r7, #8
 801229a:	46bd      	mov	sp, r7
 801229c:	bd80      	pop	{r7, pc}
 801229e:	bf00      	nop
 80122a0:	08019f8c 	.word	0x08019f8c
 80122a4:	08012201 	.word	0x08012201

080122a8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80122a8:	b580      	push	{r7, lr}
 80122aa:	b086      	sub	sp, #24
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	60f8      	str	r0, [r7, #12]
 80122b0:	60b9      	str	r1, [r7, #8]
 80122b2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80122ba:	d306      	bcc.n	80122ca <sys_timeout+0x22>
 80122bc:	4b0a      	ldr	r3, [pc, #40]	; (80122e8 <sys_timeout+0x40>)
 80122be:	f240 1229 	movw	r2, #297	; 0x129
 80122c2:	490a      	ldr	r1, [pc, #40]	; (80122ec <sys_timeout+0x44>)
 80122c4:	480a      	ldr	r0, [pc, #40]	; (80122f0 <sys_timeout+0x48>)
 80122c6:	f003 f999 	bl	80155fc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80122ca:	f7f1 fdcf 	bl	8003e6c <sys_now>
 80122ce:	4602      	mov	r2, r0
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	4413      	add	r3, r2
 80122d4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80122d6:	687a      	ldr	r2, [r7, #4]
 80122d8:	68b9      	ldr	r1, [r7, #8]
 80122da:	6978      	ldr	r0, [r7, #20]
 80122dc:	f7ff ff22 	bl	8012124 <sys_timeout_abs>
#endif
}
 80122e0:	bf00      	nop
 80122e2:	3718      	adds	r7, #24
 80122e4:	46bd      	mov	sp, r7
 80122e6:	bd80      	pop	{r7, pc}
 80122e8:	08018f3c 	.word	0x08018f3c
 80122ec:	08018fd8 	.word	0x08018fd8
 80122f0:	08018fb0 	.word	0x08018fb0

080122f4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b084      	sub	sp, #16
 80122f8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80122fa:	f7f1 fdb7 	bl	8003e6c <sys_now>
 80122fe:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8012300:	4b17      	ldr	r3, [pc, #92]	; (8012360 <sys_check_timeouts+0x6c>)
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8012306:	68bb      	ldr	r3, [r7, #8]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d022      	beq.n	8012352 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801230c:	68bb      	ldr	r3, [r7, #8]
 801230e:	685b      	ldr	r3, [r3, #4]
 8012310:	68fa      	ldr	r2, [r7, #12]
 8012312:	1ad3      	subs	r3, r2, r3
 8012314:	0fdb      	lsrs	r3, r3, #31
 8012316:	f003 0301 	and.w	r3, r3, #1
 801231a:	b2db      	uxtb	r3, r3
 801231c:	2b00      	cmp	r3, #0
 801231e:	d11a      	bne.n	8012356 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8012320:	68bb      	ldr	r3, [r7, #8]
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	4a0e      	ldr	r2, [pc, #56]	; (8012360 <sys_check_timeouts+0x6c>)
 8012326:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8012328:	68bb      	ldr	r3, [r7, #8]
 801232a:	689b      	ldr	r3, [r3, #8]
 801232c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801232e:	68bb      	ldr	r3, [r7, #8]
 8012330:	68db      	ldr	r3, [r3, #12]
 8012332:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012334:	68bb      	ldr	r3, [r7, #8]
 8012336:	685b      	ldr	r3, [r3, #4]
 8012338:	4a0a      	ldr	r2, [pc, #40]	; (8012364 <sys_check_timeouts+0x70>)
 801233a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801233c:	68b9      	ldr	r1, [r7, #8]
 801233e:	200a      	movs	r0, #10
 8012340:	f7f8 fd10 	bl	800ad64 <memp_free>
    if (handler != NULL) {
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	2b00      	cmp	r3, #0
 8012348:	d0da      	beq.n	8012300 <sys_check_timeouts+0xc>
      handler(arg);
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	6838      	ldr	r0, [r7, #0]
 801234e:	4798      	blx	r3
  do {
 8012350:	e7d6      	b.n	8012300 <sys_check_timeouts+0xc>
      return;
 8012352:	bf00      	nop
 8012354:	e000      	b.n	8012358 <sys_check_timeouts+0x64>
      return;
 8012356:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8012358:	3710      	adds	r7, #16
 801235a:	46bd      	mov	sp, r7
 801235c:	bd80      	pop	{r7, pc}
 801235e:	bf00      	nop
 8012360:	20004b04 	.word	0x20004b04
 8012364:	20004b08 	.word	0x20004b08

08012368 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8012368:	b580      	push	{r7, lr}
 801236a:	b082      	sub	sp, #8
 801236c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801236e:	4b16      	ldr	r3, [pc, #88]	; (80123c8 <sys_timeouts_sleeptime+0x60>)
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d102      	bne.n	801237c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8012376:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801237a:	e020      	b.n	80123be <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801237c:	f7f1 fd76 	bl	8003e6c <sys_now>
 8012380:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8012382:	4b11      	ldr	r3, [pc, #68]	; (80123c8 <sys_timeouts_sleeptime+0x60>)
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	685a      	ldr	r2, [r3, #4]
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	1ad3      	subs	r3, r2, r3
 801238c:	0fdb      	lsrs	r3, r3, #31
 801238e:	f003 0301 	and.w	r3, r3, #1
 8012392:	b2db      	uxtb	r3, r3
 8012394:	2b00      	cmp	r3, #0
 8012396:	d001      	beq.n	801239c <sys_timeouts_sleeptime+0x34>
    return 0;
 8012398:	2300      	movs	r3, #0
 801239a:	e010      	b.n	80123be <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801239c:	4b0a      	ldr	r3, [pc, #40]	; (80123c8 <sys_timeouts_sleeptime+0x60>)
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	685a      	ldr	r2, [r3, #4]
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	1ad3      	subs	r3, r2, r3
 80123a6:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80123a8:	683b      	ldr	r3, [r7, #0]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	da06      	bge.n	80123bc <sys_timeouts_sleeptime+0x54>
 80123ae:	4b07      	ldr	r3, [pc, #28]	; (80123cc <sys_timeouts_sleeptime+0x64>)
 80123b0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80123b4:	4906      	ldr	r1, [pc, #24]	; (80123d0 <sys_timeouts_sleeptime+0x68>)
 80123b6:	4807      	ldr	r0, [pc, #28]	; (80123d4 <sys_timeouts_sleeptime+0x6c>)
 80123b8:	f003 f920 	bl	80155fc <iprintf>
    return ret;
 80123bc:	683b      	ldr	r3, [r7, #0]
  }
}
 80123be:	4618      	mov	r0, r3
 80123c0:	3708      	adds	r7, #8
 80123c2:	46bd      	mov	sp, r7
 80123c4:	bd80      	pop	{r7, pc}
 80123c6:	bf00      	nop
 80123c8:	20004b04 	.word	0x20004b04
 80123cc:	08018f3c 	.word	0x08018f3c
 80123d0:	08019010 	.word	0x08019010
 80123d4:	08018fb0 	.word	0x08018fb0

080123d8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80123dc:	f003 f926 	bl	801562c <rand>
 80123e0:	4603      	mov	r3, r0
 80123e2:	b29b      	uxth	r3, r3
 80123e4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80123e8:	b29b      	uxth	r3, r3
 80123ea:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80123ee:	b29a      	uxth	r2, r3
 80123f0:	4b01      	ldr	r3, [pc, #4]	; (80123f8 <udp_init+0x20>)
 80123f2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80123f4:	bf00      	nop
 80123f6:	bd80      	pop	{r7, pc}
 80123f8:	20000018 	.word	0x20000018

080123fc <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80123fc:	b480      	push	{r7}
 80123fe:	b083      	sub	sp, #12
 8012400:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8012402:	2300      	movs	r3, #0
 8012404:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8012406:	4b17      	ldr	r3, [pc, #92]	; (8012464 <udp_new_port+0x68>)
 8012408:	881b      	ldrh	r3, [r3, #0]
 801240a:	1c5a      	adds	r2, r3, #1
 801240c:	b291      	uxth	r1, r2
 801240e:	4a15      	ldr	r2, [pc, #84]	; (8012464 <udp_new_port+0x68>)
 8012410:	8011      	strh	r1, [r2, #0]
 8012412:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012416:	4293      	cmp	r3, r2
 8012418:	d103      	bne.n	8012422 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801241a:	4b12      	ldr	r3, [pc, #72]	; (8012464 <udp_new_port+0x68>)
 801241c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8012420:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012422:	4b11      	ldr	r3, [pc, #68]	; (8012468 <udp_new_port+0x6c>)
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	603b      	str	r3, [r7, #0]
 8012428:	e011      	b.n	801244e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801242a:	683b      	ldr	r3, [r7, #0]
 801242c:	8a5a      	ldrh	r2, [r3, #18]
 801242e:	4b0d      	ldr	r3, [pc, #52]	; (8012464 <udp_new_port+0x68>)
 8012430:	881b      	ldrh	r3, [r3, #0]
 8012432:	429a      	cmp	r2, r3
 8012434:	d108      	bne.n	8012448 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8012436:	88fb      	ldrh	r3, [r7, #6]
 8012438:	3301      	adds	r3, #1
 801243a:	80fb      	strh	r3, [r7, #6]
 801243c:	88fb      	ldrh	r3, [r7, #6]
 801243e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012442:	d3e0      	bcc.n	8012406 <udp_new_port+0xa>
        return 0;
 8012444:	2300      	movs	r3, #0
 8012446:	e007      	b.n	8012458 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012448:	683b      	ldr	r3, [r7, #0]
 801244a:	68db      	ldr	r3, [r3, #12]
 801244c:	603b      	str	r3, [r7, #0]
 801244e:	683b      	ldr	r3, [r7, #0]
 8012450:	2b00      	cmp	r3, #0
 8012452:	d1ea      	bne.n	801242a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8012454:	4b03      	ldr	r3, [pc, #12]	; (8012464 <udp_new_port+0x68>)
 8012456:	881b      	ldrh	r3, [r3, #0]
}
 8012458:	4618      	mov	r0, r3
 801245a:	370c      	adds	r7, #12
 801245c:	46bd      	mov	sp, r7
 801245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012462:	4770      	bx	lr
 8012464:	20000018 	.word	0x20000018
 8012468:	2000b7f0 	.word	0x2000b7f0

0801246c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801246c:	b580      	push	{r7, lr}
 801246e:	b084      	sub	sp, #16
 8012470:	af00      	add	r7, sp, #0
 8012472:	60f8      	str	r0, [r7, #12]
 8012474:	60b9      	str	r1, [r7, #8]
 8012476:	4613      	mov	r3, r2
 8012478:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	2b00      	cmp	r3, #0
 801247e:	d105      	bne.n	801248c <udp_input_local_match+0x20>
 8012480:	4b27      	ldr	r3, [pc, #156]	; (8012520 <udp_input_local_match+0xb4>)
 8012482:	2287      	movs	r2, #135	; 0x87
 8012484:	4927      	ldr	r1, [pc, #156]	; (8012524 <udp_input_local_match+0xb8>)
 8012486:	4828      	ldr	r0, [pc, #160]	; (8012528 <udp_input_local_match+0xbc>)
 8012488:	f003 f8b8 	bl	80155fc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801248c:	68bb      	ldr	r3, [r7, #8]
 801248e:	2b00      	cmp	r3, #0
 8012490:	d105      	bne.n	801249e <udp_input_local_match+0x32>
 8012492:	4b23      	ldr	r3, [pc, #140]	; (8012520 <udp_input_local_match+0xb4>)
 8012494:	2288      	movs	r2, #136	; 0x88
 8012496:	4925      	ldr	r1, [pc, #148]	; (801252c <udp_input_local_match+0xc0>)
 8012498:	4823      	ldr	r0, [pc, #140]	; (8012528 <udp_input_local_match+0xbc>)
 801249a:	f003 f8af 	bl	80155fc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	7a1b      	ldrb	r3, [r3, #8]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d00b      	beq.n	80124be <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	7a1a      	ldrb	r2, [r3, #8]
 80124aa:	4b21      	ldr	r3, [pc, #132]	; (8012530 <udp_input_local_match+0xc4>)
 80124ac:	685b      	ldr	r3, [r3, #4]
 80124ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80124b2:	3301      	adds	r3, #1
 80124b4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80124b6:	429a      	cmp	r2, r3
 80124b8:	d001      	beq.n	80124be <udp_input_local_match+0x52>
    return 0;
 80124ba:	2300      	movs	r3, #0
 80124bc:	e02b      	b.n	8012516 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80124be:	79fb      	ldrb	r3, [r7, #7]
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d018      	beq.n	80124f6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d013      	beq.n	80124f2 <udp_input_local_match+0x86>
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d00f      	beq.n	80124f2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80124d2:	4b17      	ldr	r3, [pc, #92]	; (8012530 <udp_input_local_match+0xc4>)
 80124d4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80124d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80124da:	d00a      	beq.n	80124f2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	681a      	ldr	r2, [r3, #0]
 80124e0:	4b13      	ldr	r3, [pc, #76]	; (8012530 <udp_input_local_match+0xc4>)
 80124e2:	695b      	ldr	r3, [r3, #20]
 80124e4:	405a      	eors	r2, r3
 80124e6:	68bb      	ldr	r3, [r7, #8]
 80124e8:	3308      	adds	r3, #8
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d110      	bne.n	8012514 <udp_input_local_match+0xa8>
          return 1;
 80124f2:	2301      	movs	r3, #1
 80124f4:	e00f      	b.n	8012516 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d009      	beq.n	8012510 <udp_input_local_match+0xa4>
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	2b00      	cmp	r3, #0
 8012502:	d005      	beq.n	8012510 <udp_input_local_match+0xa4>
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	681a      	ldr	r2, [r3, #0]
 8012508:	4b09      	ldr	r3, [pc, #36]	; (8012530 <udp_input_local_match+0xc4>)
 801250a:	695b      	ldr	r3, [r3, #20]
 801250c:	429a      	cmp	r2, r3
 801250e:	d101      	bne.n	8012514 <udp_input_local_match+0xa8>
        return 1;
 8012510:	2301      	movs	r3, #1
 8012512:	e000      	b.n	8012516 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012514:	2300      	movs	r3, #0
}
 8012516:	4618      	mov	r0, r3
 8012518:	3710      	adds	r7, #16
 801251a:	46bd      	mov	sp, r7
 801251c:	bd80      	pop	{r7, pc}
 801251e:	bf00      	nop
 8012520:	08019024 	.word	0x08019024
 8012524:	08019054 	.word	0x08019054
 8012528:	08019078 	.word	0x08019078
 801252c:	080190a0 	.word	0x080190a0
 8012530:	200080c4 	.word	0x200080c4

08012534 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012534:	b590      	push	{r4, r7, lr}
 8012536:	b08d      	sub	sp, #52	; 0x34
 8012538:	af02      	add	r7, sp, #8
 801253a:	6078      	str	r0, [r7, #4]
 801253c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801253e:	2300      	movs	r3, #0
 8012540:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	2b00      	cmp	r3, #0
 8012546:	d105      	bne.n	8012554 <udp_input+0x20>
 8012548:	4b7c      	ldr	r3, [pc, #496]	; (801273c <udp_input+0x208>)
 801254a:	22cf      	movs	r2, #207	; 0xcf
 801254c:	497c      	ldr	r1, [pc, #496]	; (8012740 <udp_input+0x20c>)
 801254e:	487d      	ldr	r0, [pc, #500]	; (8012744 <udp_input+0x210>)
 8012550:	f003 f854 	bl	80155fc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8012554:	683b      	ldr	r3, [r7, #0]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d105      	bne.n	8012566 <udp_input+0x32>
 801255a:	4b78      	ldr	r3, [pc, #480]	; (801273c <udp_input+0x208>)
 801255c:	22d0      	movs	r2, #208	; 0xd0
 801255e:	497a      	ldr	r1, [pc, #488]	; (8012748 <udp_input+0x214>)
 8012560:	4878      	ldr	r0, [pc, #480]	; (8012744 <udp_input+0x210>)
 8012562:	f003 f84b 	bl	80155fc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	895b      	ldrh	r3, [r3, #10]
 801256a:	2b07      	cmp	r3, #7
 801256c:	d803      	bhi.n	8012576 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801256e:	6878      	ldr	r0, [r7, #4]
 8012570:	f7f9 fa9c 	bl	800baac <pbuf_free>
    goto end;
 8012574:	e0de      	b.n	8012734 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	685b      	ldr	r3, [r3, #4]
 801257a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801257c:	4b73      	ldr	r3, [pc, #460]	; (801274c <udp_input+0x218>)
 801257e:	695b      	ldr	r3, [r3, #20]
 8012580:	4a72      	ldr	r2, [pc, #456]	; (801274c <udp_input+0x218>)
 8012582:	6812      	ldr	r2, [r2, #0]
 8012584:	4611      	mov	r1, r2
 8012586:	4618      	mov	r0, r3
 8012588:	f001 fd96 	bl	80140b8 <ip4_addr_isbroadcast_u32>
 801258c:	4603      	mov	r3, r0
 801258e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012590:	697b      	ldr	r3, [r7, #20]
 8012592:	881b      	ldrh	r3, [r3, #0]
 8012594:	b29b      	uxth	r3, r3
 8012596:	4618      	mov	r0, r3
 8012598:	f7f7 fedc 	bl	800a354 <lwip_htons>
 801259c:	4603      	mov	r3, r0
 801259e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80125a0:	697b      	ldr	r3, [r7, #20]
 80125a2:	885b      	ldrh	r3, [r3, #2]
 80125a4:	b29b      	uxth	r3, r3
 80125a6:	4618      	mov	r0, r3
 80125a8:	f7f7 fed4 	bl	800a354 <lwip_htons>
 80125ac:	4603      	mov	r3, r0
 80125ae:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80125b0:	2300      	movs	r3, #0
 80125b2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80125b4:	2300      	movs	r3, #0
 80125b6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80125b8:	2300      	movs	r3, #0
 80125ba:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80125bc:	4b64      	ldr	r3, [pc, #400]	; (8012750 <udp_input+0x21c>)
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	627b      	str	r3, [r7, #36]	; 0x24
 80125c2:	e054      	b.n	801266e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80125c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125c6:	8a5b      	ldrh	r3, [r3, #18]
 80125c8:	89fa      	ldrh	r2, [r7, #14]
 80125ca:	429a      	cmp	r2, r3
 80125cc:	d14a      	bne.n	8012664 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80125ce:	7cfb      	ldrb	r3, [r7, #19]
 80125d0:	461a      	mov	r2, r3
 80125d2:	6839      	ldr	r1, [r7, #0]
 80125d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80125d6:	f7ff ff49 	bl	801246c <udp_input_local_match>
 80125da:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d041      	beq.n	8012664 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80125e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125e2:	7c1b      	ldrb	r3, [r3, #16]
 80125e4:	f003 0304 	and.w	r3, r3, #4
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d11d      	bne.n	8012628 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80125ec:	69fb      	ldr	r3, [r7, #28]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d102      	bne.n	80125f8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80125f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125f4:	61fb      	str	r3, [r7, #28]
 80125f6:	e017      	b.n	8012628 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80125f8:	7cfb      	ldrb	r3, [r7, #19]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d014      	beq.n	8012628 <udp_input+0xf4>
 80125fe:	4b53      	ldr	r3, [pc, #332]	; (801274c <udp_input+0x218>)
 8012600:	695b      	ldr	r3, [r3, #20]
 8012602:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012606:	d10f      	bne.n	8012628 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8012608:	69fb      	ldr	r3, [r7, #28]
 801260a:	681a      	ldr	r2, [r3, #0]
 801260c:	683b      	ldr	r3, [r7, #0]
 801260e:	3304      	adds	r3, #4
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	429a      	cmp	r2, r3
 8012614:	d008      	beq.n	8012628 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8012616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012618:	681a      	ldr	r2, [r3, #0]
 801261a:	683b      	ldr	r3, [r7, #0]
 801261c:	3304      	adds	r3, #4
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	429a      	cmp	r2, r3
 8012622:	d101      	bne.n	8012628 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8012624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012626:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801262a:	8a9b      	ldrh	r3, [r3, #20]
 801262c:	8a3a      	ldrh	r2, [r7, #16]
 801262e:	429a      	cmp	r2, r3
 8012630:	d118      	bne.n	8012664 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012634:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8012636:	2b00      	cmp	r3, #0
 8012638:	d005      	beq.n	8012646 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801263c:	685a      	ldr	r2, [r3, #4]
 801263e:	4b43      	ldr	r3, [pc, #268]	; (801274c <udp_input+0x218>)
 8012640:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012642:	429a      	cmp	r2, r3
 8012644:	d10e      	bne.n	8012664 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8012646:	6a3b      	ldr	r3, [r7, #32]
 8012648:	2b00      	cmp	r3, #0
 801264a:	d014      	beq.n	8012676 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801264e:	68da      	ldr	r2, [r3, #12]
 8012650:	6a3b      	ldr	r3, [r7, #32]
 8012652:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012654:	4b3e      	ldr	r3, [pc, #248]	; (8012750 <udp_input+0x21c>)
 8012656:	681a      	ldr	r2, [r3, #0]
 8012658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801265a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801265c:	4a3c      	ldr	r2, [pc, #240]	; (8012750 <udp_input+0x21c>)
 801265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012660:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8012662:	e008      	b.n	8012676 <udp_input+0x142>
      }
    }

    prev = pcb;
 8012664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012666:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801266a:	68db      	ldr	r3, [r3, #12]
 801266c:	627b      	str	r3, [r7, #36]	; 0x24
 801266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012670:	2b00      	cmp	r3, #0
 8012672:	d1a7      	bne.n	80125c4 <udp_input+0x90>
 8012674:	e000      	b.n	8012678 <udp_input+0x144>
        break;
 8012676:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801267a:	2b00      	cmp	r3, #0
 801267c:	d101      	bne.n	8012682 <udp_input+0x14e>
    pcb = uncon_pcb;
 801267e:	69fb      	ldr	r3, [r7, #28]
 8012680:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012684:	2b00      	cmp	r3, #0
 8012686:	d002      	beq.n	801268e <udp_input+0x15a>
    for_us = 1;
 8012688:	2301      	movs	r3, #1
 801268a:	76fb      	strb	r3, [r7, #27]
 801268c:	e00a      	b.n	80126a4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801268e:	683b      	ldr	r3, [r7, #0]
 8012690:	3304      	adds	r3, #4
 8012692:	681a      	ldr	r2, [r3, #0]
 8012694:	4b2d      	ldr	r3, [pc, #180]	; (801274c <udp_input+0x218>)
 8012696:	695b      	ldr	r3, [r3, #20]
 8012698:	429a      	cmp	r2, r3
 801269a:	bf0c      	ite	eq
 801269c:	2301      	moveq	r3, #1
 801269e:	2300      	movne	r3, #0
 80126a0:	b2db      	uxtb	r3, r3
 80126a2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80126a4:	7efb      	ldrb	r3, [r7, #27]
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d041      	beq.n	801272e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80126aa:	2108      	movs	r1, #8
 80126ac:	6878      	ldr	r0, [r7, #4]
 80126ae:	f7f9 f977 	bl	800b9a0 <pbuf_remove_header>
 80126b2:	4603      	mov	r3, r0
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d00a      	beq.n	80126ce <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80126b8:	4b20      	ldr	r3, [pc, #128]	; (801273c <udp_input+0x208>)
 80126ba:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80126be:	4925      	ldr	r1, [pc, #148]	; (8012754 <udp_input+0x220>)
 80126c0:	4820      	ldr	r0, [pc, #128]	; (8012744 <udp_input+0x210>)
 80126c2:	f002 ff9b 	bl	80155fc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80126c6:	6878      	ldr	r0, [r7, #4]
 80126c8:	f7f9 f9f0 	bl	800baac <pbuf_free>
      goto end;
 80126cc:	e032      	b.n	8012734 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80126ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d012      	beq.n	80126fa <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80126d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126d6:	699b      	ldr	r3, [r3, #24]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d00a      	beq.n	80126f2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80126dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126de:	699c      	ldr	r4, [r3, #24]
 80126e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126e2:	69d8      	ldr	r0, [r3, #28]
 80126e4:	8a3b      	ldrh	r3, [r7, #16]
 80126e6:	9300      	str	r3, [sp, #0]
 80126e8:	4b1b      	ldr	r3, [pc, #108]	; (8012758 <udp_input+0x224>)
 80126ea:	687a      	ldr	r2, [r7, #4]
 80126ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80126ee:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80126f0:	e021      	b.n	8012736 <udp_input+0x202>
        pbuf_free(p);
 80126f2:	6878      	ldr	r0, [r7, #4]
 80126f4:	f7f9 f9da 	bl	800baac <pbuf_free>
        goto end;
 80126f8:	e01c      	b.n	8012734 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80126fa:	7cfb      	ldrb	r3, [r7, #19]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d112      	bne.n	8012726 <udp_input+0x1f2>
 8012700:	4b12      	ldr	r3, [pc, #72]	; (801274c <udp_input+0x218>)
 8012702:	695b      	ldr	r3, [r3, #20]
 8012704:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012708:	2be0      	cmp	r3, #224	; 0xe0
 801270a:	d00c      	beq.n	8012726 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801270c:	4b0f      	ldr	r3, [pc, #60]	; (801274c <udp_input+0x218>)
 801270e:	899b      	ldrh	r3, [r3, #12]
 8012710:	3308      	adds	r3, #8
 8012712:	b29b      	uxth	r3, r3
 8012714:	b21b      	sxth	r3, r3
 8012716:	4619      	mov	r1, r3
 8012718:	6878      	ldr	r0, [r7, #4]
 801271a:	f7f9 f9b4 	bl	800ba86 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801271e:	2103      	movs	r1, #3
 8012720:	6878      	ldr	r0, [r7, #4]
 8012722:	f001 f9a9 	bl	8013a78 <icmp_dest_unreach>
      pbuf_free(p);
 8012726:	6878      	ldr	r0, [r7, #4]
 8012728:	f7f9 f9c0 	bl	800baac <pbuf_free>
  return;
 801272c:	e003      	b.n	8012736 <udp_input+0x202>
    pbuf_free(p);
 801272e:	6878      	ldr	r0, [r7, #4]
 8012730:	f7f9 f9bc 	bl	800baac <pbuf_free>
  return;
 8012734:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8012736:	372c      	adds	r7, #44	; 0x2c
 8012738:	46bd      	mov	sp, r7
 801273a:	bd90      	pop	{r4, r7, pc}
 801273c:	08019024 	.word	0x08019024
 8012740:	080190c8 	.word	0x080190c8
 8012744:	08019078 	.word	0x08019078
 8012748:	080190e0 	.word	0x080190e0
 801274c:	200080c4 	.word	0x200080c4
 8012750:	2000b7f0 	.word	0x2000b7f0
 8012754:	080190fc 	.word	0x080190fc
 8012758:	200080d4 	.word	0x200080d4

0801275c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801275c:	b580      	push	{r7, lr}
 801275e:	b086      	sub	sp, #24
 8012760:	af00      	add	r7, sp, #0
 8012762:	60f8      	str	r0, [r7, #12]
 8012764:	60b9      	str	r1, [r7, #8]
 8012766:	4613      	mov	r3, r2
 8012768:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801276a:	68bb      	ldr	r3, [r7, #8]
 801276c:	2b00      	cmp	r3, #0
 801276e:	d101      	bne.n	8012774 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8012770:	4b39      	ldr	r3, [pc, #228]	; (8012858 <udp_bind+0xfc>)
 8012772:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	2b00      	cmp	r3, #0
 8012778:	d109      	bne.n	801278e <udp_bind+0x32>
 801277a:	4b38      	ldr	r3, [pc, #224]	; (801285c <udp_bind+0x100>)
 801277c:	f240 32b7 	movw	r2, #951	; 0x3b7
 8012780:	4937      	ldr	r1, [pc, #220]	; (8012860 <udp_bind+0x104>)
 8012782:	4838      	ldr	r0, [pc, #224]	; (8012864 <udp_bind+0x108>)
 8012784:	f002 ff3a 	bl	80155fc <iprintf>
 8012788:	f06f 030f 	mvn.w	r3, #15
 801278c:	e060      	b.n	8012850 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801278e:	2300      	movs	r3, #0
 8012790:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012792:	4b35      	ldr	r3, [pc, #212]	; (8012868 <udp_bind+0x10c>)
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	617b      	str	r3, [r7, #20]
 8012798:	e009      	b.n	80127ae <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801279a:	68fa      	ldr	r2, [r7, #12]
 801279c:	697b      	ldr	r3, [r7, #20]
 801279e:	429a      	cmp	r2, r3
 80127a0:	d102      	bne.n	80127a8 <udp_bind+0x4c>
      rebind = 1;
 80127a2:	2301      	movs	r3, #1
 80127a4:	74fb      	strb	r3, [r7, #19]
      break;
 80127a6:	e005      	b.n	80127b4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80127a8:	697b      	ldr	r3, [r7, #20]
 80127aa:	68db      	ldr	r3, [r3, #12]
 80127ac:	617b      	str	r3, [r7, #20]
 80127ae:	697b      	ldr	r3, [r7, #20]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d1f2      	bne.n	801279a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80127b4:	88fb      	ldrh	r3, [r7, #6]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d109      	bne.n	80127ce <udp_bind+0x72>
    port = udp_new_port();
 80127ba:	f7ff fe1f 	bl	80123fc <udp_new_port>
 80127be:	4603      	mov	r3, r0
 80127c0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80127c2:	88fb      	ldrh	r3, [r7, #6]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d12c      	bne.n	8012822 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80127c8:	f06f 0307 	mvn.w	r3, #7
 80127cc:	e040      	b.n	8012850 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80127ce:	4b26      	ldr	r3, [pc, #152]	; (8012868 <udp_bind+0x10c>)
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	617b      	str	r3, [r7, #20]
 80127d4:	e022      	b.n	801281c <udp_bind+0xc0>
      if (pcb != ipcb) {
 80127d6:	68fa      	ldr	r2, [r7, #12]
 80127d8:	697b      	ldr	r3, [r7, #20]
 80127da:	429a      	cmp	r2, r3
 80127dc:	d01b      	beq.n	8012816 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80127de:	697b      	ldr	r3, [r7, #20]
 80127e0:	8a5b      	ldrh	r3, [r3, #18]
 80127e2:	88fa      	ldrh	r2, [r7, #6]
 80127e4:	429a      	cmp	r2, r3
 80127e6:	d116      	bne.n	8012816 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80127e8:	697b      	ldr	r3, [r7, #20]
 80127ea:	681a      	ldr	r2, [r3, #0]
 80127ec:	68bb      	ldr	r3, [r7, #8]
 80127ee:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80127f0:	429a      	cmp	r2, r3
 80127f2:	d00d      	beq.n	8012810 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80127f4:	68bb      	ldr	r3, [r7, #8]
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d00a      	beq.n	8012810 <udp_bind+0xb4>
 80127fa:	68bb      	ldr	r3, [r7, #8]
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d006      	beq.n	8012810 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8012802:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012804:	2b00      	cmp	r3, #0
 8012806:	d003      	beq.n	8012810 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8012808:	697b      	ldr	r3, [r7, #20]
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	2b00      	cmp	r3, #0
 801280e:	d102      	bne.n	8012816 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8012810:	f06f 0307 	mvn.w	r3, #7
 8012814:	e01c      	b.n	8012850 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012816:	697b      	ldr	r3, [r7, #20]
 8012818:	68db      	ldr	r3, [r3, #12]
 801281a:	617b      	str	r3, [r7, #20]
 801281c:	697b      	ldr	r3, [r7, #20]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d1d9      	bne.n	80127d6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8012822:	68bb      	ldr	r3, [r7, #8]
 8012824:	2b00      	cmp	r3, #0
 8012826:	d002      	beq.n	801282e <udp_bind+0xd2>
 8012828:	68bb      	ldr	r3, [r7, #8]
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	e000      	b.n	8012830 <udp_bind+0xd4>
 801282e:	2300      	movs	r3, #0
 8012830:	68fa      	ldr	r2, [r7, #12]
 8012832:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	88fa      	ldrh	r2, [r7, #6]
 8012838:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801283a:	7cfb      	ldrb	r3, [r7, #19]
 801283c:	2b00      	cmp	r3, #0
 801283e:	d106      	bne.n	801284e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8012840:	4b09      	ldr	r3, [pc, #36]	; (8012868 <udp_bind+0x10c>)
 8012842:	681a      	ldr	r2, [r3, #0]
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8012848:	4a07      	ldr	r2, [pc, #28]	; (8012868 <udp_bind+0x10c>)
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801284e:	2300      	movs	r3, #0
}
 8012850:	4618      	mov	r0, r3
 8012852:	3718      	adds	r7, #24
 8012854:	46bd      	mov	sp, r7
 8012856:	bd80      	pop	{r7, pc}
 8012858:	08019fa4 	.word	0x08019fa4
 801285c:	08019024 	.word	0x08019024
 8012860:	080192ec 	.word	0x080192ec
 8012864:	08019078 	.word	0x08019078
 8012868:	2000b7f0 	.word	0x2000b7f0

0801286c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801286c:	b580      	push	{r7, lr}
 801286e:	b084      	sub	sp, #16
 8012870:	af00      	add	r7, sp, #0
 8012872:	60f8      	str	r0, [r7, #12]
 8012874:	60b9      	str	r1, [r7, #8]
 8012876:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d107      	bne.n	801288e <udp_recv+0x22>
 801287e:	4b08      	ldr	r3, [pc, #32]	; (80128a0 <udp_recv+0x34>)
 8012880:	f240 428a 	movw	r2, #1162	; 0x48a
 8012884:	4907      	ldr	r1, [pc, #28]	; (80128a4 <udp_recv+0x38>)
 8012886:	4808      	ldr	r0, [pc, #32]	; (80128a8 <udp_recv+0x3c>)
 8012888:	f002 feb8 	bl	80155fc <iprintf>
 801288c:	e005      	b.n	801289a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	68ba      	ldr	r2, [r7, #8]
 8012892:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	687a      	ldr	r2, [r7, #4]
 8012898:	61da      	str	r2, [r3, #28]
}
 801289a:	3710      	adds	r7, #16
 801289c:	46bd      	mov	sp, r7
 801289e:	bd80      	pop	{r7, pc}
 80128a0:	08019024 	.word	0x08019024
 80128a4:	08019358 	.word	0x08019358
 80128a8:	08019078 	.word	0x08019078

080128ac <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80128ac:	b580      	push	{r7, lr}
 80128ae:	b084      	sub	sp, #16
 80128b0:	af00      	add	r7, sp, #0
 80128b2:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d107      	bne.n	80128ca <udp_remove+0x1e>
 80128ba:	4b19      	ldr	r3, [pc, #100]	; (8012920 <udp_remove+0x74>)
 80128bc:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80128c0:	4918      	ldr	r1, [pc, #96]	; (8012924 <udp_remove+0x78>)
 80128c2:	4819      	ldr	r0, [pc, #100]	; (8012928 <udp_remove+0x7c>)
 80128c4:	f002 fe9a 	bl	80155fc <iprintf>
 80128c8:	e026      	b.n	8012918 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80128ca:	4b18      	ldr	r3, [pc, #96]	; (801292c <udp_remove+0x80>)
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	687a      	ldr	r2, [r7, #4]
 80128d0:	429a      	cmp	r2, r3
 80128d2:	d105      	bne.n	80128e0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80128d4:	4b15      	ldr	r3, [pc, #84]	; (801292c <udp_remove+0x80>)
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	68db      	ldr	r3, [r3, #12]
 80128da:	4a14      	ldr	r2, [pc, #80]	; (801292c <udp_remove+0x80>)
 80128dc:	6013      	str	r3, [r2, #0]
 80128de:	e017      	b.n	8012910 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80128e0:	4b12      	ldr	r3, [pc, #72]	; (801292c <udp_remove+0x80>)
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	60fb      	str	r3, [r7, #12]
 80128e6:	e010      	b.n	801290a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	68db      	ldr	r3, [r3, #12]
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d009      	beq.n	8012904 <udp_remove+0x58>
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	68db      	ldr	r3, [r3, #12]
 80128f4:	687a      	ldr	r2, [r7, #4]
 80128f6:	429a      	cmp	r2, r3
 80128f8:	d104      	bne.n	8012904 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	68da      	ldr	r2, [r3, #12]
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	60da      	str	r2, [r3, #12]
        break;
 8012902:	e005      	b.n	8012910 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	68db      	ldr	r3, [r3, #12]
 8012908:	60fb      	str	r3, [r7, #12]
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	2b00      	cmp	r3, #0
 801290e:	d1eb      	bne.n	80128e8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8012910:	6879      	ldr	r1, [r7, #4]
 8012912:	2000      	movs	r0, #0
 8012914:	f7f8 fa26 	bl	800ad64 <memp_free>
}
 8012918:	3710      	adds	r7, #16
 801291a:	46bd      	mov	sp, r7
 801291c:	bd80      	pop	{r7, pc}
 801291e:	bf00      	nop
 8012920:	08019024 	.word	0x08019024
 8012924:	08019370 	.word	0x08019370
 8012928:	08019078 	.word	0x08019078
 801292c:	2000b7f0 	.word	0x2000b7f0

08012930 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8012930:	b580      	push	{r7, lr}
 8012932:	b082      	sub	sp, #8
 8012934:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8012936:	2000      	movs	r0, #0
 8012938:	f7f8 f9c2 	bl	800acc0 <memp_malloc>
 801293c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d007      	beq.n	8012954 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8012944:	2220      	movs	r2, #32
 8012946:	2100      	movs	r1, #0
 8012948:	6878      	ldr	r0, [r7, #4]
 801294a:	f002 fdf4 	bl	8015536 <memset>
    pcb->ttl = UDP_TTL;
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	22ff      	movs	r2, #255	; 0xff
 8012952:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8012954:	687b      	ldr	r3, [r7, #4]
}
 8012956:	4618      	mov	r0, r3
 8012958:	3708      	adds	r7, #8
 801295a:	46bd      	mov	sp, r7
 801295c:	bd80      	pop	{r7, pc}

0801295e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801295e:	b580      	push	{r7, lr}
 8012960:	b084      	sub	sp, #16
 8012962:	af00      	add	r7, sp, #0
 8012964:	4603      	mov	r3, r0
 8012966:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8012968:	f7ff ffe2 	bl	8012930 <udp_new>
 801296c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801296e:	68fb      	ldr	r3, [r7, #12]
}
 8012970:	4618      	mov	r0, r3
 8012972:	3710      	adds	r7, #16
 8012974:	46bd      	mov	sp, r7
 8012976:	bd80      	pop	{r7, pc}

08012978 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012978:	b480      	push	{r7}
 801297a:	b085      	sub	sp, #20
 801297c:	af00      	add	r7, sp, #0
 801297e:	6078      	str	r0, [r7, #4]
 8012980:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	2b00      	cmp	r3, #0
 8012986:	d01e      	beq.n	80129c6 <udp_netif_ip_addr_changed+0x4e>
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d01a      	beq.n	80129c6 <udp_netif_ip_addr_changed+0x4e>
 8012990:	683b      	ldr	r3, [r7, #0]
 8012992:	2b00      	cmp	r3, #0
 8012994:	d017      	beq.n	80129c6 <udp_netif_ip_addr_changed+0x4e>
 8012996:	683b      	ldr	r3, [r7, #0]
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	2b00      	cmp	r3, #0
 801299c:	d013      	beq.n	80129c6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801299e:	4b0d      	ldr	r3, [pc, #52]	; (80129d4 <udp_netif_ip_addr_changed+0x5c>)
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	60fb      	str	r3, [r7, #12]
 80129a4:	e00c      	b.n	80129c0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	681a      	ldr	r2, [r3, #0]
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	429a      	cmp	r2, r3
 80129b0:	d103      	bne.n	80129ba <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80129b2:	683b      	ldr	r3, [r7, #0]
 80129b4:	681a      	ldr	r2, [r3, #0]
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	68db      	ldr	r3, [r3, #12]
 80129be:	60fb      	str	r3, [r7, #12]
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d1ef      	bne.n	80129a6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80129c6:	bf00      	nop
 80129c8:	3714      	adds	r7, #20
 80129ca:	46bd      	mov	sp, r7
 80129cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d0:	4770      	bx	lr
 80129d2:	bf00      	nop
 80129d4:	2000b7f0 	.word	0x2000b7f0

080129d8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80129d8:	b580      	push	{r7, lr}
 80129da:	b082      	sub	sp, #8
 80129dc:	af00      	add	r7, sp, #0
 80129de:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80129e0:	4915      	ldr	r1, [pc, #84]	; (8012a38 <etharp_free_entry+0x60>)
 80129e2:	687a      	ldr	r2, [r7, #4]
 80129e4:	4613      	mov	r3, r2
 80129e6:	005b      	lsls	r3, r3, #1
 80129e8:	4413      	add	r3, r2
 80129ea:	00db      	lsls	r3, r3, #3
 80129ec:	440b      	add	r3, r1
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d013      	beq.n	8012a1c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80129f4:	4910      	ldr	r1, [pc, #64]	; (8012a38 <etharp_free_entry+0x60>)
 80129f6:	687a      	ldr	r2, [r7, #4]
 80129f8:	4613      	mov	r3, r2
 80129fa:	005b      	lsls	r3, r3, #1
 80129fc:	4413      	add	r3, r2
 80129fe:	00db      	lsls	r3, r3, #3
 8012a00:	440b      	add	r3, r1
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	4618      	mov	r0, r3
 8012a06:	f7f9 f851 	bl	800baac <pbuf_free>
    arp_table[i].q = NULL;
 8012a0a:	490b      	ldr	r1, [pc, #44]	; (8012a38 <etharp_free_entry+0x60>)
 8012a0c:	687a      	ldr	r2, [r7, #4]
 8012a0e:	4613      	mov	r3, r2
 8012a10:	005b      	lsls	r3, r3, #1
 8012a12:	4413      	add	r3, r2
 8012a14:	00db      	lsls	r3, r3, #3
 8012a16:	440b      	add	r3, r1
 8012a18:	2200      	movs	r2, #0
 8012a1a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8012a1c:	4906      	ldr	r1, [pc, #24]	; (8012a38 <etharp_free_entry+0x60>)
 8012a1e:	687a      	ldr	r2, [r7, #4]
 8012a20:	4613      	mov	r3, r2
 8012a22:	005b      	lsls	r3, r3, #1
 8012a24:	4413      	add	r3, r2
 8012a26:	00db      	lsls	r3, r3, #3
 8012a28:	440b      	add	r3, r1
 8012a2a:	3314      	adds	r3, #20
 8012a2c:	2200      	movs	r2, #0
 8012a2e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8012a30:	bf00      	nop
 8012a32:	3708      	adds	r7, #8
 8012a34:	46bd      	mov	sp, r7
 8012a36:	bd80      	pop	{r7, pc}
 8012a38:	20004b10 	.word	0x20004b10

08012a3c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8012a3c:	b580      	push	{r7, lr}
 8012a3e:	b082      	sub	sp, #8
 8012a40:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012a42:	2300      	movs	r3, #0
 8012a44:	607b      	str	r3, [r7, #4]
 8012a46:	e096      	b.n	8012b76 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8012a48:	494f      	ldr	r1, [pc, #316]	; (8012b88 <etharp_tmr+0x14c>)
 8012a4a:	687a      	ldr	r2, [r7, #4]
 8012a4c:	4613      	mov	r3, r2
 8012a4e:	005b      	lsls	r3, r3, #1
 8012a50:	4413      	add	r3, r2
 8012a52:	00db      	lsls	r3, r3, #3
 8012a54:	440b      	add	r3, r1
 8012a56:	3314      	adds	r3, #20
 8012a58:	781b      	ldrb	r3, [r3, #0]
 8012a5a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8012a5c:	78fb      	ldrb	r3, [r7, #3]
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	f000 8086 	beq.w	8012b70 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8012a64:	4948      	ldr	r1, [pc, #288]	; (8012b88 <etharp_tmr+0x14c>)
 8012a66:	687a      	ldr	r2, [r7, #4]
 8012a68:	4613      	mov	r3, r2
 8012a6a:	005b      	lsls	r3, r3, #1
 8012a6c:	4413      	add	r3, r2
 8012a6e:	00db      	lsls	r3, r3, #3
 8012a70:	440b      	add	r3, r1
 8012a72:	3312      	adds	r3, #18
 8012a74:	881b      	ldrh	r3, [r3, #0]
 8012a76:	3301      	adds	r3, #1
 8012a78:	b298      	uxth	r0, r3
 8012a7a:	4943      	ldr	r1, [pc, #268]	; (8012b88 <etharp_tmr+0x14c>)
 8012a7c:	687a      	ldr	r2, [r7, #4]
 8012a7e:	4613      	mov	r3, r2
 8012a80:	005b      	lsls	r3, r3, #1
 8012a82:	4413      	add	r3, r2
 8012a84:	00db      	lsls	r3, r3, #3
 8012a86:	440b      	add	r3, r1
 8012a88:	3312      	adds	r3, #18
 8012a8a:	4602      	mov	r2, r0
 8012a8c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012a8e:	493e      	ldr	r1, [pc, #248]	; (8012b88 <etharp_tmr+0x14c>)
 8012a90:	687a      	ldr	r2, [r7, #4]
 8012a92:	4613      	mov	r3, r2
 8012a94:	005b      	lsls	r3, r3, #1
 8012a96:	4413      	add	r3, r2
 8012a98:	00db      	lsls	r3, r3, #3
 8012a9a:	440b      	add	r3, r1
 8012a9c:	3312      	adds	r3, #18
 8012a9e:	881b      	ldrh	r3, [r3, #0]
 8012aa0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8012aa4:	d215      	bcs.n	8012ad2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012aa6:	4938      	ldr	r1, [pc, #224]	; (8012b88 <etharp_tmr+0x14c>)
 8012aa8:	687a      	ldr	r2, [r7, #4]
 8012aaa:	4613      	mov	r3, r2
 8012aac:	005b      	lsls	r3, r3, #1
 8012aae:	4413      	add	r3, r2
 8012ab0:	00db      	lsls	r3, r3, #3
 8012ab2:	440b      	add	r3, r1
 8012ab4:	3314      	adds	r3, #20
 8012ab6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012ab8:	2b01      	cmp	r3, #1
 8012aba:	d10e      	bne.n	8012ada <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8012abc:	4932      	ldr	r1, [pc, #200]	; (8012b88 <etharp_tmr+0x14c>)
 8012abe:	687a      	ldr	r2, [r7, #4]
 8012ac0:	4613      	mov	r3, r2
 8012ac2:	005b      	lsls	r3, r3, #1
 8012ac4:	4413      	add	r3, r2
 8012ac6:	00db      	lsls	r3, r3, #3
 8012ac8:	440b      	add	r3, r1
 8012aca:	3312      	adds	r3, #18
 8012acc:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012ace:	2b04      	cmp	r3, #4
 8012ad0:	d903      	bls.n	8012ada <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8012ad2:	6878      	ldr	r0, [r7, #4]
 8012ad4:	f7ff ff80 	bl	80129d8 <etharp_free_entry>
 8012ad8:	e04a      	b.n	8012b70 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8012ada:	492b      	ldr	r1, [pc, #172]	; (8012b88 <etharp_tmr+0x14c>)
 8012adc:	687a      	ldr	r2, [r7, #4]
 8012ade:	4613      	mov	r3, r2
 8012ae0:	005b      	lsls	r3, r3, #1
 8012ae2:	4413      	add	r3, r2
 8012ae4:	00db      	lsls	r3, r3, #3
 8012ae6:	440b      	add	r3, r1
 8012ae8:	3314      	adds	r3, #20
 8012aea:	781b      	ldrb	r3, [r3, #0]
 8012aec:	2b03      	cmp	r3, #3
 8012aee:	d10a      	bne.n	8012b06 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8012af0:	4925      	ldr	r1, [pc, #148]	; (8012b88 <etharp_tmr+0x14c>)
 8012af2:	687a      	ldr	r2, [r7, #4]
 8012af4:	4613      	mov	r3, r2
 8012af6:	005b      	lsls	r3, r3, #1
 8012af8:	4413      	add	r3, r2
 8012afa:	00db      	lsls	r3, r3, #3
 8012afc:	440b      	add	r3, r1
 8012afe:	3314      	adds	r3, #20
 8012b00:	2204      	movs	r2, #4
 8012b02:	701a      	strb	r2, [r3, #0]
 8012b04:	e034      	b.n	8012b70 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8012b06:	4920      	ldr	r1, [pc, #128]	; (8012b88 <etharp_tmr+0x14c>)
 8012b08:	687a      	ldr	r2, [r7, #4]
 8012b0a:	4613      	mov	r3, r2
 8012b0c:	005b      	lsls	r3, r3, #1
 8012b0e:	4413      	add	r3, r2
 8012b10:	00db      	lsls	r3, r3, #3
 8012b12:	440b      	add	r3, r1
 8012b14:	3314      	adds	r3, #20
 8012b16:	781b      	ldrb	r3, [r3, #0]
 8012b18:	2b04      	cmp	r3, #4
 8012b1a:	d10a      	bne.n	8012b32 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8012b1c:	491a      	ldr	r1, [pc, #104]	; (8012b88 <etharp_tmr+0x14c>)
 8012b1e:	687a      	ldr	r2, [r7, #4]
 8012b20:	4613      	mov	r3, r2
 8012b22:	005b      	lsls	r3, r3, #1
 8012b24:	4413      	add	r3, r2
 8012b26:	00db      	lsls	r3, r3, #3
 8012b28:	440b      	add	r3, r1
 8012b2a:	3314      	adds	r3, #20
 8012b2c:	2202      	movs	r2, #2
 8012b2e:	701a      	strb	r2, [r3, #0]
 8012b30:	e01e      	b.n	8012b70 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012b32:	4915      	ldr	r1, [pc, #84]	; (8012b88 <etharp_tmr+0x14c>)
 8012b34:	687a      	ldr	r2, [r7, #4]
 8012b36:	4613      	mov	r3, r2
 8012b38:	005b      	lsls	r3, r3, #1
 8012b3a:	4413      	add	r3, r2
 8012b3c:	00db      	lsls	r3, r3, #3
 8012b3e:	440b      	add	r3, r1
 8012b40:	3314      	adds	r3, #20
 8012b42:	781b      	ldrb	r3, [r3, #0]
 8012b44:	2b01      	cmp	r3, #1
 8012b46:	d113      	bne.n	8012b70 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8012b48:	490f      	ldr	r1, [pc, #60]	; (8012b88 <etharp_tmr+0x14c>)
 8012b4a:	687a      	ldr	r2, [r7, #4]
 8012b4c:	4613      	mov	r3, r2
 8012b4e:	005b      	lsls	r3, r3, #1
 8012b50:	4413      	add	r3, r2
 8012b52:	00db      	lsls	r3, r3, #3
 8012b54:	440b      	add	r3, r1
 8012b56:	3308      	adds	r3, #8
 8012b58:	6818      	ldr	r0, [r3, #0]
 8012b5a:	687a      	ldr	r2, [r7, #4]
 8012b5c:	4613      	mov	r3, r2
 8012b5e:	005b      	lsls	r3, r3, #1
 8012b60:	4413      	add	r3, r2
 8012b62:	00db      	lsls	r3, r3, #3
 8012b64:	4a08      	ldr	r2, [pc, #32]	; (8012b88 <etharp_tmr+0x14c>)
 8012b66:	4413      	add	r3, r2
 8012b68:	3304      	adds	r3, #4
 8012b6a:	4619      	mov	r1, r3
 8012b6c:	f000 fe6e 	bl	801384c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	3301      	adds	r3, #1
 8012b74:	607b      	str	r3, [r7, #4]
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	2b09      	cmp	r3, #9
 8012b7a:	f77f af65 	ble.w	8012a48 <etharp_tmr+0xc>
      }
    }
  }
}
 8012b7e:	bf00      	nop
 8012b80:	bf00      	nop
 8012b82:	3708      	adds	r7, #8
 8012b84:	46bd      	mov	sp, r7
 8012b86:	bd80      	pop	{r7, pc}
 8012b88:	20004b10 	.word	0x20004b10

08012b8c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8012b8c:	b580      	push	{r7, lr}
 8012b8e:	b08a      	sub	sp, #40	; 0x28
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	60f8      	str	r0, [r7, #12]
 8012b94:	460b      	mov	r3, r1
 8012b96:	607a      	str	r2, [r7, #4]
 8012b98:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8012b9a:	230a      	movs	r3, #10
 8012b9c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012b9e:	230a      	movs	r3, #10
 8012ba0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8012ba2:	230a      	movs	r3, #10
 8012ba4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8012ba6:	2300      	movs	r3, #0
 8012ba8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8012baa:	230a      	movs	r3, #10
 8012bac:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8012bae:	2300      	movs	r3, #0
 8012bb0:	83bb      	strh	r3, [r7, #28]
 8012bb2:	2300      	movs	r3, #0
 8012bb4:	837b      	strh	r3, [r7, #26]
 8012bb6:	2300      	movs	r3, #0
 8012bb8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012bba:	2300      	movs	r3, #0
 8012bbc:	843b      	strh	r3, [r7, #32]
 8012bbe:	e0ae      	b.n	8012d1e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8012bc0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012bc4:	49a6      	ldr	r1, [pc, #664]	; (8012e60 <etharp_find_entry+0x2d4>)
 8012bc6:	4613      	mov	r3, r2
 8012bc8:	005b      	lsls	r3, r3, #1
 8012bca:	4413      	add	r3, r2
 8012bcc:	00db      	lsls	r3, r3, #3
 8012bce:	440b      	add	r3, r1
 8012bd0:	3314      	adds	r3, #20
 8012bd2:	781b      	ldrb	r3, [r3, #0]
 8012bd4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8012bd6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012bda:	2b0a      	cmp	r3, #10
 8012bdc:	d105      	bne.n	8012bea <etharp_find_entry+0x5e>
 8012bde:	7dfb      	ldrb	r3, [r7, #23]
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d102      	bne.n	8012bea <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8012be4:	8c3b      	ldrh	r3, [r7, #32]
 8012be6:	847b      	strh	r3, [r7, #34]	; 0x22
 8012be8:	e095      	b.n	8012d16 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8012bea:	7dfb      	ldrb	r3, [r7, #23]
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	f000 8092 	beq.w	8012d16 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8012bf2:	7dfb      	ldrb	r3, [r7, #23]
 8012bf4:	2b01      	cmp	r3, #1
 8012bf6:	d009      	beq.n	8012c0c <etharp_find_entry+0x80>
 8012bf8:	7dfb      	ldrb	r3, [r7, #23]
 8012bfa:	2b01      	cmp	r3, #1
 8012bfc:	d806      	bhi.n	8012c0c <etharp_find_entry+0x80>
 8012bfe:	4b99      	ldr	r3, [pc, #612]	; (8012e64 <etharp_find_entry+0x2d8>)
 8012c00:	f240 1223 	movw	r2, #291	; 0x123
 8012c04:	4998      	ldr	r1, [pc, #608]	; (8012e68 <etharp_find_entry+0x2dc>)
 8012c06:	4899      	ldr	r0, [pc, #612]	; (8012e6c <etharp_find_entry+0x2e0>)
 8012c08:	f002 fcf8 	bl	80155fc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d020      	beq.n	8012c54 <etharp_find_entry+0xc8>
 8012c12:	68fb      	ldr	r3, [r7, #12]
 8012c14:	6819      	ldr	r1, [r3, #0]
 8012c16:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012c1a:	4891      	ldr	r0, [pc, #580]	; (8012e60 <etharp_find_entry+0x2d4>)
 8012c1c:	4613      	mov	r3, r2
 8012c1e:	005b      	lsls	r3, r3, #1
 8012c20:	4413      	add	r3, r2
 8012c22:	00db      	lsls	r3, r3, #3
 8012c24:	4403      	add	r3, r0
 8012c26:	3304      	adds	r3, #4
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	4299      	cmp	r1, r3
 8012c2c:	d112      	bne.n	8012c54 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d00c      	beq.n	8012c4e <etharp_find_entry+0xc2>
 8012c34:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012c38:	4989      	ldr	r1, [pc, #548]	; (8012e60 <etharp_find_entry+0x2d4>)
 8012c3a:	4613      	mov	r3, r2
 8012c3c:	005b      	lsls	r3, r3, #1
 8012c3e:	4413      	add	r3, r2
 8012c40:	00db      	lsls	r3, r3, #3
 8012c42:	440b      	add	r3, r1
 8012c44:	3308      	adds	r3, #8
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	687a      	ldr	r2, [r7, #4]
 8012c4a:	429a      	cmp	r2, r3
 8012c4c:	d102      	bne.n	8012c54 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8012c4e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012c52:	e100      	b.n	8012e56 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8012c54:	7dfb      	ldrb	r3, [r7, #23]
 8012c56:	2b01      	cmp	r3, #1
 8012c58:	d140      	bne.n	8012cdc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8012c5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012c5e:	4980      	ldr	r1, [pc, #512]	; (8012e60 <etharp_find_entry+0x2d4>)
 8012c60:	4613      	mov	r3, r2
 8012c62:	005b      	lsls	r3, r3, #1
 8012c64:	4413      	add	r3, r2
 8012c66:	00db      	lsls	r3, r3, #3
 8012c68:	440b      	add	r3, r1
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d01a      	beq.n	8012ca6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8012c70:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012c74:	497a      	ldr	r1, [pc, #488]	; (8012e60 <etharp_find_entry+0x2d4>)
 8012c76:	4613      	mov	r3, r2
 8012c78:	005b      	lsls	r3, r3, #1
 8012c7a:	4413      	add	r3, r2
 8012c7c:	00db      	lsls	r3, r3, #3
 8012c7e:	440b      	add	r3, r1
 8012c80:	3312      	adds	r3, #18
 8012c82:	881b      	ldrh	r3, [r3, #0]
 8012c84:	8bba      	ldrh	r2, [r7, #28]
 8012c86:	429a      	cmp	r2, r3
 8012c88:	d845      	bhi.n	8012d16 <etharp_find_entry+0x18a>
            old_queue = i;
 8012c8a:	8c3b      	ldrh	r3, [r7, #32]
 8012c8c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8012c8e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012c92:	4973      	ldr	r1, [pc, #460]	; (8012e60 <etharp_find_entry+0x2d4>)
 8012c94:	4613      	mov	r3, r2
 8012c96:	005b      	lsls	r3, r3, #1
 8012c98:	4413      	add	r3, r2
 8012c9a:	00db      	lsls	r3, r3, #3
 8012c9c:	440b      	add	r3, r1
 8012c9e:	3312      	adds	r3, #18
 8012ca0:	881b      	ldrh	r3, [r3, #0]
 8012ca2:	83bb      	strh	r3, [r7, #28]
 8012ca4:	e037      	b.n	8012d16 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8012ca6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012caa:	496d      	ldr	r1, [pc, #436]	; (8012e60 <etharp_find_entry+0x2d4>)
 8012cac:	4613      	mov	r3, r2
 8012cae:	005b      	lsls	r3, r3, #1
 8012cb0:	4413      	add	r3, r2
 8012cb2:	00db      	lsls	r3, r3, #3
 8012cb4:	440b      	add	r3, r1
 8012cb6:	3312      	adds	r3, #18
 8012cb8:	881b      	ldrh	r3, [r3, #0]
 8012cba:	8b7a      	ldrh	r2, [r7, #26]
 8012cbc:	429a      	cmp	r2, r3
 8012cbe:	d82a      	bhi.n	8012d16 <etharp_find_entry+0x18a>
            old_pending = i;
 8012cc0:	8c3b      	ldrh	r3, [r7, #32]
 8012cc2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8012cc4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012cc8:	4965      	ldr	r1, [pc, #404]	; (8012e60 <etharp_find_entry+0x2d4>)
 8012cca:	4613      	mov	r3, r2
 8012ccc:	005b      	lsls	r3, r3, #1
 8012cce:	4413      	add	r3, r2
 8012cd0:	00db      	lsls	r3, r3, #3
 8012cd2:	440b      	add	r3, r1
 8012cd4:	3312      	adds	r3, #18
 8012cd6:	881b      	ldrh	r3, [r3, #0]
 8012cd8:	837b      	strh	r3, [r7, #26]
 8012cda:	e01c      	b.n	8012d16 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8012cdc:	7dfb      	ldrb	r3, [r7, #23]
 8012cde:	2b01      	cmp	r3, #1
 8012ce0:	d919      	bls.n	8012d16 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8012ce2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012ce6:	495e      	ldr	r1, [pc, #376]	; (8012e60 <etharp_find_entry+0x2d4>)
 8012ce8:	4613      	mov	r3, r2
 8012cea:	005b      	lsls	r3, r3, #1
 8012cec:	4413      	add	r3, r2
 8012cee:	00db      	lsls	r3, r3, #3
 8012cf0:	440b      	add	r3, r1
 8012cf2:	3312      	adds	r3, #18
 8012cf4:	881b      	ldrh	r3, [r3, #0]
 8012cf6:	8b3a      	ldrh	r2, [r7, #24]
 8012cf8:	429a      	cmp	r2, r3
 8012cfa:	d80c      	bhi.n	8012d16 <etharp_find_entry+0x18a>
            old_stable = i;
 8012cfc:	8c3b      	ldrh	r3, [r7, #32]
 8012cfe:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8012d00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012d04:	4956      	ldr	r1, [pc, #344]	; (8012e60 <etharp_find_entry+0x2d4>)
 8012d06:	4613      	mov	r3, r2
 8012d08:	005b      	lsls	r3, r3, #1
 8012d0a:	4413      	add	r3, r2
 8012d0c:	00db      	lsls	r3, r3, #3
 8012d0e:	440b      	add	r3, r1
 8012d10:	3312      	adds	r3, #18
 8012d12:	881b      	ldrh	r3, [r3, #0]
 8012d14:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012d16:	8c3b      	ldrh	r3, [r7, #32]
 8012d18:	3301      	adds	r3, #1
 8012d1a:	b29b      	uxth	r3, r3
 8012d1c:	843b      	strh	r3, [r7, #32]
 8012d1e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012d22:	2b09      	cmp	r3, #9
 8012d24:	f77f af4c 	ble.w	8012bc0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8012d28:	7afb      	ldrb	r3, [r7, #11]
 8012d2a:	f003 0302 	and.w	r3, r3, #2
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d108      	bne.n	8012d44 <etharp_find_entry+0x1b8>
 8012d32:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012d36:	2b0a      	cmp	r3, #10
 8012d38:	d107      	bne.n	8012d4a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8012d3a:	7afb      	ldrb	r3, [r7, #11]
 8012d3c:	f003 0301 	and.w	r3, r3, #1
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d102      	bne.n	8012d4a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8012d44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012d48:	e085      	b.n	8012e56 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8012d4a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012d4e:	2b09      	cmp	r3, #9
 8012d50:	dc02      	bgt.n	8012d58 <etharp_find_entry+0x1cc>
    i = empty;
 8012d52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012d54:	843b      	strh	r3, [r7, #32]
 8012d56:	e039      	b.n	8012dcc <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8012d58:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8012d5c:	2b09      	cmp	r3, #9
 8012d5e:	dc14      	bgt.n	8012d8a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8012d60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012d62:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8012d64:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012d68:	493d      	ldr	r1, [pc, #244]	; (8012e60 <etharp_find_entry+0x2d4>)
 8012d6a:	4613      	mov	r3, r2
 8012d6c:	005b      	lsls	r3, r3, #1
 8012d6e:	4413      	add	r3, r2
 8012d70:	00db      	lsls	r3, r3, #3
 8012d72:	440b      	add	r3, r1
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d018      	beq.n	8012dac <etharp_find_entry+0x220>
 8012d7a:	4b3a      	ldr	r3, [pc, #232]	; (8012e64 <etharp_find_entry+0x2d8>)
 8012d7c:	f240 126d 	movw	r2, #365	; 0x16d
 8012d80:	493b      	ldr	r1, [pc, #236]	; (8012e70 <etharp_find_entry+0x2e4>)
 8012d82:	483a      	ldr	r0, [pc, #232]	; (8012e6c <etharp_find_entry+0x2e0>)
 8012d84:	f002 fc3a 	bl	80155fc <iprintf>
 8012d88:	e010      	b.n	8012dac <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8012d8a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8012d8e:	2b09      	cmp	r3, #9
 8012d90:	dc02      	bgt.n	8012d98 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8012d92:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012d94:	843b      	strh	r3, [r7, #32]
 8012d96:	e009      	b.n	8012dac <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8012d98:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012d9c:	2b09      	cmp	r3, #9
 8012d9e:	dc02      	bgt.n	8012da6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8012da0:	8bfb      	ldrh	r3, [r7, #30]
 8012da2:	843b      	strh	r3, [r7, #32]
 8012da4:	e002      	b.n	8012dac <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8012da6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012daa:	e054      	b.n	8012e56 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012dac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012db0:	2b09      	cmp	r3, #9
 8012db2:	dd06      	ble.n	8012dc2 <etharp_find_entry+0x236>
 8012db4:	4b2b      	ldr	r3, [pc, #172]	; (8012e64 <etharp_find_entry+0x2d8>)
 8012db6:	f240 127f 	movw	r2, #383	; 0x17f
 8012dba:	492e      	ldr	r1, [pc, #184]	; (8012e74 <etharp_find_entry+0x2e8>)
 8012dbc:	482b      	ldr	r0, [pc, #172]	; (8012e6c <etharp_find_entry+0x2e0>)
 8012dbe:	f002 fc1d 	bl	80155fc <iprintf>
    etharp_free_entry(i);
 8012dc2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012dc6:	4618      	mov	r0, r3
 8012dc8:	f7ff fe06 	bl	80129d8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012dcc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012dd0:	2b09      	cmp	r3, #9
 8012dd2:	dd06      	ble.n	8012de2 <etharp_find_entry+0x256>
 8012dd4:	4b23      	ldr	r3, [pc, #140]	; (8012e64 <etharp_find_entry+0x2d8>)
 8012dd6:	f240 1283 	movw	r2, #387	; 0x183
 8012dda:	4926      	ldr	r1, [pc, #152]	; (8012e74 <etharp_find_entry+0x2e8>)
 8012ddc:	4823      	ldr	r0, [pc, #140]	; (8012e6c <etharp_find_entry+0x2e0>)
 8012dde:	f002 fc0d 	bl	80155fc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8012de2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012de6:	491e      	ldr	r1, [pc, #120]	; (8012e60 <etharp_find_entry+0x2d4>)
 8012de8:	4613      	mov	r3, r2
 8012dea:	005b      	lsls	r3, r3, #1
 8012dec:	4413      	add	r3, r2
 8012dee:	00db      	lsls	r3, r3, #3
 8012df0:	440b      	add	r3, r1
 8012df2:	3314      	adds	r3, #20
 8012df4:	781b      	ldrb	r3, [r3, #0]
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d006      	beq.n	8012e08 <etharp_find_entry+0x27c>
 8012dfa:	4b1a      	ldr	r3, [pc, #104]	; (8012e64 <etharp_find_entry+0x2d8>)
 8012dfc:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8012e00:	491d      	ldr	r1, [pc, #116]	; (8012e78 <etharp_find_entry+0x2ec>)
 8012e02:	481a      	ldr	r0, [pc, #104]	; (8012e6c <etharp_find_entry+0x2e0>)
 8012e04:	f002 fbfa 	bl	80155fc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d00b      	beq.n	8012e26 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8012e0e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	6819      	ldr	r1, [r3, #0]
 8012e16:	4812      	ldr	r0, [pc, #72]	; (8012e60 <etharp_find_entry+0x2d4>)
 8012e18:	4613      	mov	r3, r2
 8012e1a:	005b      	lsls	r3, r3, #1
 8012e1c:	4413      	add	r3, r2
 8012e1e:	00db      	lsls	r3, r3, #3
 8012e20:	4403      	add	r3, r0
 8012e22:	3304      	adds	r3, #4
 8012e24:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8012e26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012e2a:	490d      	ldr	r1, [pc, #52]	; (8012e60 <etharp_find_entry+0x2d4>)
 8012e2c:	4613      	mov	r3, r2
 8012e2e:	005b      	lsls	r3, r3, #1
 8012e30:	4413      	add	r3, r2
 8012e32:	00db      	lsls	r3, r3, #3
 8012e34:	440b      	add	r3, r1
 8012e36:	3312      	adds	r3, #18
 8012e38:	2200      	movs	r2, #0
 8012e3a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8012e3c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012e40:	4907      	ldr	r1, [pc, #28]	; (8012e60 <etharp_find_entry+0x2d4>)
 8012e42:	4613      	mov	r3, r2
 8012e44:	005b      	lsls	r3, r3, #1
 8012e46:	4413      	add	r3, r2
 8012e48:	00db      	lsls	r3, r3, #3
 8012e4a:	440b      	add	r3, r1
 8012e4c:	3308      	adds	r3, #8
 8012e4e:	687a      	ldr	r2, [r7, #4]
 8012e50:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8012e52:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8012e56:	4618      	mov	r0, r3
 8012e58:	3728      	adds	r7, #40	; 0x28
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	bd80      	pop	{r7, pc}
 8012e5e:	bf00      	nop
 8012e60:	20004b10 	.word	0x20004b10
 8012e64:	08019388 	.word	0x08019388
 8012e68:	080193c0 	.word	0x080193c0
 8012e6c:	08019400 	.word	0x08019400
 8012e70:	08019428 	.word	0x08019428
 8012e74:	08019440 	.word	0x08019440
 8012e78:	08019454 	.word	0x08019454

08012e7c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b088      	sub	sp, #32
 8012e80:	af02      	add	r7, sp, #8
 8012e82:	60f8      	str	r0, [r7, #12]
 8012e84:	60b9      	str	r1, [r7, #8]
 8012e86:	607a      	str	r2, [r7, #4]
 8012e88:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012e90:	2b06      	cmp	r3, #6
 8012e92:	d006      	beq.n	8012ea2 <etharp_update_arp_entry+0x26>
 8012e94:	4b48      	ldr	r3, [pc, #288]	; (8012fb8 <etharp_update_arp_entry+0x13c>)
 8012e96:	f240 12a9 	movw	r2, #425	; 0x1a9
 8012e9a:	4948      	ldr	r1, [pc, #288]	; (8012fbc <etharp_update_arp_entry+0x140>)
 8012e9c:	4848      	ldr	r0, [pc, #288]	; (8012fc0 <etharp_update_arp_entry+0x144>)
 8012e9e:	f002 fbad 	bl	80155fc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8012ea2:	68bb      	ldr	r3, [r7, #8]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d012      	beq.n	8012ece <etharp_update_arp_entry+0x52>
 8012ea8:	68bb      	ldr	r3, [r7, #8]
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d00e      	beq.n	8012ece <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012eb0:	68bb      	ldr	r3, [r7, #8]
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	68f9      	ldr	r1, [r7, #12]
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	f001 f8fe 	bl	80140b8 <ip4_addr_isbroadcast_u32>
 8012ebc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d105      	bne.n	8012ece <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8012ec2:	68bb      	ldr	r3, [r7, #8]
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012eca:	2be0      	cmp	r3, #224	; 0xe0
 8012ecc:	d102      	bne.n	8012ed4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012ece:	f06f 030f 	mvn.w	r3, #15
 8012ed2:	e06c      	b.n	8012fae <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012ed4:	78fb      	ldrb	r3, [r7, #3]
 8012ed6:	68fa      	ldr	r2, [r7, #12]
 8012ed8:	4619      	mov	r1, r3
 8012eda:	68b8      	ldr	r0, [r7, #8]
 8012edc:	f7ff fe56 	bl	8012b8c <etharp_find_entry>
 8012ee0:	4603      	mov	r3, r0
 8012ee2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012ee4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	da02      	bge.n	8012ef2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8012eec:	8afb      	ldrh	r3, [r7, #22]
 8012eee:	b25b      	sxtb	r3, r3
 8012ef0:	e05d      	b.n	8012fae <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012ef2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012ef6:	4933      	ldr	r1, [pc, #204]	; (8012fc4 <etharp_update_arp_entry+0x148>)
 8012ef8:	4613      	mov	r3, r2
 8012efa:	005b      	lsls	r3, r3, #1
 8012efc:	4413      	add	r3, r2
 8012efe:	00db      	lsls	r3, r3, #3
 8012f00:	440b      	add	r3, r1
 8012f02:	3314      	adds	r3, #20
 8012f04:	2202      	movs	r2, #2
 8012f06:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8012f08:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012f0c:	492d      	ldr	r1, [pc, #180]	; (8012fc4 <etharp_update_arp_entry+0x148>)
 8012f0e:	4613      	mov	r3, r2
 8012f10:	005b      	lsls	r3, r3, #1
 8012f12:	4413      	add	r3, r2
 8012f14:	00db      	lsls	r3, r3, #3
 8012f16:	440b      	add	r3, r1
 8012f18:	3308      	adds	r3, #8
 8012f1a:	68fa      	ldr	r2, [r7, #12]
 8012f1c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8012f1e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012f22:	4613      	mov	r3, r2
 8012f24:	005b      	lsls	r3, r3, #1
 8012f26:	4413      	add	r3, r2
 8012f28:	00db      	lsls	r3, r3, #3
 8012f2a:	3308      	adds	r3, #8
 8012f2c:	4a25      	ldr	r2, [pc, #148]	; (8012fc4 <etharp_update_arp_entry+0x148>)
 8012f2e:	4413      	add	r3, r2
 8012f30:	3304      	adds	r3, #4
 8012f32:	2206      	movs	r2, #6
 8012f34:	6879      	ldr	r1, [r7, #4]
 8012f36:	4618      	mov	r0, r3
 8012f38:	f002 faef 	bl	801551a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8012f3c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012f40:	4920      	ldr	r1, [pc, #128]	; (8012fc4 <etharp_update_arp_entry+0x148>)
 8012f42:	4613      	mov	r3, r2
 8012f44:	005b      	lsls	r3, r3, #1
 8012f46:	4413      	add	r3, r2
 8012f48:	00db      	lsls	r3, r3, #3
 8012f4a:	440b      	add	r3, r1
 8012f4c:	3312      	adds	r3, #18
 8012f4e:	2200      	movs	r2, #0
 8012f50:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8012f52:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012f56:	491b      	ldr	r1, [pc, #108]	; (8012fc4 <etharp_update_arp_entry+0x148>)
 8012f58:	4613      	mov	r3, r2
 8012f5a:	005b      	lsls	r3, r3, #1
 8012f5c:	4413      	add	r3, r2
 8012f5e:	00db      	lsls	r3, r3, #3
 8012f60:	440b      	add	r3, r1
 8012f62:	681b      	ldr	r3, [r3, #0]
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d021      	beq.n	8012fac <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8012f68:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012f6c:	4915      	ldr	r1, [pc, #84]	; (8012fc4 <etharp_update_arp_entry+0x148>)
 8012f6e:	4613      	mov	r3, r2
 8012f70:	005b      	lsls	r3, r3, #1
 8012f72:	4413      	add	r3, r2
 8012f74:	00db      	lsls	r3, r3, #3
 8012f76:	440b      	add	r3, r1
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8012f7c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012f80:	4910      	ldr	r1, [pc, #64]	; (8012fc4 <etharp_update_arp_entry+0x148>)
 8012f82:	4613      	mov	r3, r2
 8012f84:	005b      	lsls	r3, r3, #1
 8012f86:	4413      	add	r3, r2
 8012f88:	00db      	lsls	r3, r3, #3
 8012f8a:	440b      	add	r3, r1
 8012f8c:	2200      	movs	r2, #0
 8012f8e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8012f96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012f9a:	9300      	str	r3, [sp, #0]
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	6939      	ldr	r1, [r7, #16]
 8012fa0:	68f8      	ldr	r0, [r7, #12]
 8012fa2:	f001 ff91 	bl	8014ec8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8012fa6:	6938      	ldr	r0, [r7, #16]
 8012fa8:	f7f8 fd80 	bl	800baac <pbuf_free>
  }
  return ERR_OK;
 8012fac:	2300      	movs	r3, #0
}
 8012fae:	4618      	mov	r0, r3
 8012fb0:	3718      	adds	r7, #24
 8012fb2:	46bd      	mov	sp, r7
 8012fb4:	bd80      	pop	{r7, pc}
 8012fb6:	bf00      	nop
 8012fb8:	08019388 	.word	0x08019388
 8012fbc:	08019480 	.word	0x08019480
 8012fc0:	08019400 	.word	0x08019400
 8012fc4:	20004b10 	.word	0x20004b10

08012fc8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8012fc8:	b580      	push	{r7, lr}
 8012fca:	b084      	sub	sp, #16
 8012fcc:	af00      	add	r7, sp, #0
 8012fce:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012fd0:	2300      	movs	r3, #0
 8012fd2:	60fb      	str	r3, [r7, #12]
 8012fd4:	e01e      	b.n	8013014 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8012fd6:	4913      	ldr	r1, [pc, #76]	; (8013024 <etharp_cleanup_netif+0x5c>)
 8012fd8:	68fa      	ldr	r2, [r7, #12]
 8012fda:	4613      	mov	r3, r2
 8012fdc:	005b      	lsls	r3, r3, #1
 8012fde:	4413      	add	r3, r2
 8012fe0:	00db      	lsls	r3, r3, #3
 8012fe2:	440b      	add	r3, r1
 8012fe4:	3314      	adds	r3, #20
 8012fe6:	781b      	ldrb	r3, [r3, #0]
 8012fe8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8012fea:	7afb      	ldrb	r3, [r7, #11]
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d00e      	beq.n	801300e <etharp_cleanup_netif+0x46>
 8012ff0:	490c      	ldr	r1, [pc, #48]	; (8013024 <etharp_cleanup_netif+0x5c>)
 8012ff2:	68fa      	ldr	r2, [r7, #12]
 8012ff4:	4613      	mov	r3, r2
 8012ff6:	005b      	lsls	r3, r3, #1
 8012ff8:	4413      	add	r3, r2
 8012ffa:	00db      	lsls	r3, r3, #3
 8012ffc:	440b      	add	r3, r1
 8012ffe:	3308      	adds	r3, #8
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	687a      	ldr	r2, [r7, #4]
 8013004:	429a      	cmp	r2, r3
 8013006:	d102      	bne.n	801300e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8013008:	68f8      	ldr	r0, [r7, #12]
 801300a:	f7ff fce5 	bl	80129d8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	3301      	adds	r3, #1
 8013012:	60fb      	str	r3, [r7, #12]
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	2b09      	cmp	r3, #9
 8013018:	dddd      	ble.n	8012fd6 <etharp_cleanup_netif+0xe>
    }
  }
}
 801301a:	bf00      	nop
 801301c:	bf00      	nop
 801301e:	3710      	adds	r7, #16
 8013020:	46bd      	mov	sp, r7
 8013022:	bd80      	pop	{r7, pc}
 8013024:	20004b10 	.word	0x20004b10

08013028 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8013028:	b5b0      	push	{r4, r5, r7, lr}
 801302a:	b08a      	sub	sp, #40	; 0x28
 801302c:	af04      	add	r7, sp, #16
 801302e:	6078      	str	r0, [r7, #4]
 8013030:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013032:	683b      	ldr	r3, [r7, #0]
 8013034:	2b00      	cmp	r3, #0
 8013036:	d107      	bne.n	8013048 <etharp_input+0x20>
 8013038:	4b3d      	ldr	r3, [pc, #244]	; (8013130 <etharp_input+0x108>)
 801303a:	f240 228a 	movw	r2, #650	; 0x28a
 801303e:	493d      	ldr	r1, [pc, #244]	; (8013134 <etharp_input+0x10c>)
 8013040:	483d      	ldr	r0, [pc, #244]	; (8013138 <etharp_input+0x110>)
 8013042:	f002 fadb 	bl	80155fc <iprintf>
 8013046:	e06f      	b.n	8013128 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	685b      	ldr	r3, [r3, #4]
 801304c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801304e:	693b      	ldr	r3, [r7, #16]
 8013050:	881b      	ldrh	r3, [r3, #0]
 8013052:	b29b      	uxth	r3, r3
 8013054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013058:	d10c      	bne.n	8013074 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801305a:	693b      	ldr	r3, [r7, #16]
 801305c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801305e:	2b06      	cmp	r3, #6
 8013060:	d108      	bne.n	8013074 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013062:	693b      	ldr	r3, [r7, #16]
 8013064:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013066:	2b04      	cmp	r3, #4
 8013068:	d104      	bne.n	8013074 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801306a:	693b      	ldr	r3, [r7, #16]
 801306c:	885b      	ldrh	r3, [r3, #2]
 801306e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013070:	2b08      	cmp	r3, #8
 8013072:	d003      	beq.n	801307c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8013074:	6878      	ldr	r0, [r7, #4]
 8013076:	f7f8 fd19 	bl	800baac <pbuf_free>
    return;
 801307a:	e055      	b.n	8013128 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801307c:	693b      	ldr	r3, [r7, #16]
 801307e:	330e      	adds	r3, #14
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8013084:	693b      	ldr	r3, [r7, #16]
 8013086:	3318      	adds	r3, #24
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801308c:	683b      	ldr	r3, [r7, #0]
 801308e:	3304      	adds	r3, #4
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	2b00      	cmp	r3, #0
 8013094:	d102      	bne.n	801309c <etharp_input+0x74>
    for_us = 0;
 8013096:	2300      	movs	r3, #0
 8013098:	75fb      	strb	r3, [r7, #23]
 801309a:	e009      	b.n	80130b0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801309c:	68ba      	ldr	r2, [r7, #8]
 801309e:	683b      	ldr	r3, [r7, #0]
 80130a0:	3304      	adds	r3, #4
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	429a      	cmp	r2, r3
 80130a6:	bf0c      	ite	eq
 80130a8:	2301      	moveq	r3, #1
 80130aa:	2300      	movne	r3, #0
 80130ac:	b2db      	uxtb	r3, r3
 80130ae:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80130b0:	693b      	ldr	r3, [r7, #16]
 80130b2:	f103 0208 	add.w	r2, r3, #8
 80130b6:	7dfb      	ldrb	r3, [r7, #23]
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d001      	beq.n	80130c0 <etharp_input+0x98>
 80130bc:	2301      	movs	r3, #1
 80130be:	e000      	b.n	80130c2 <etharp_input+0x9a>
 80130c0:	2302      	movs	r3, #2
 80130c2:	f107 010c 	add.w	r1, r7, #12
 80130c6:	6838      	ldr	r0, [r7, #0]
 80130c8:	f7ff fed8 	bl	8012e7c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80130cc:	693b      	ldr	r3, [r7, #16]
 80130ce:	88db      	ldrh	r3, [r3, #6]
 80130d0:	b29b      	uxth	r3, r3
 80130d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80130d6:	d003      	beq.n	80130e0 <etharp_input+0xb8>
 80130d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80130dc:	d01e      	beq.n	801311c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80130de:	e020      	b.n	8013122 <etharp_input+0xfa>
      if (for_us) {
 80130e0:	7dfb      	ldrb	r3, [r7, #23]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d01c      	beq.n	8013120 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80130e6:	683b      	ldr	r3, [r7, #0]
 80130e8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80130ec:	693b      	ldr	r3, [r7, #16]
 80130ee:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80130f2:	683b      	ldr	r3, [r7, #0]
 80130f4:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80130f8:	683b      	ldr	r3, [r7, #0]
 80130fa:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80130fc:	693a      	ldr	r2, [r7, #16]
 80130fe:	3208      	adds	r2, #8
        etharp_raw(netif,
 8013100:	2102      	movs	r1, #2
 8013102:	9103      	str	r1, [sp, #12]
 8013104:	f107 010c 	add.w	r1, r7, #12
 8013108:	9102      	str	r1, [sp, #8]
 801310a:	9201      	str	r2, [sp, #4]
 801310c:	9300      	str	r3, [sp, #0]
 801310e:	462b      	mov	r3, r5
 8013110:	4622      	mov	r2, r4
 8013112:	4601      	mov	r1, r0
 8013114:	6838      	ldr	r0, [r7, #0]
 8013116:	f000 faeb 	bl	80136f0 <etharp_raw>
      break;
 801311a:	e001      	b.n	8013120 <etharp_input+0xf8>
      break;
 801311c:	bf00      	nop
 801311e:	e000      	b.n	8013122 <etharp_input+0xfa>
      break;
 8013120:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8013122:	6878      	ldr	r0, [r7, #4]
 8013124:	f7f8 fcc2 	bl	800baac <pbuf_free>
}
 8013128:	3718      	adds	r7, #24
 801312a:	46bd      	mov	sp, r7
 801312c:	bdb0      	pop	{r4, r5, r7, pc}
 801312e:	bf00      	nop
 8013130:	08019388 	.word	0x08019388
 8013134:	080194d8 	.word	0x080194d8
 8013138:	08019400 	.word	0x08019400

0801313c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801313c:	b580      	push	{r7, lr}
 801313e:	b086      	sub	sp, #24
 8013140:	af02      	add	r7, sp, #8
 8013142:	60f8      	str	r0, [r7, #12]
 8013144:	60b9      	str	r1, [r7, #8]
 8013146:	4613      	mov	r3, r2
 8013148:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801314a:	79fa      	ldrb	r2, [r7, #7]
 801314c:	4944      	ldr	r1, [pc, #272]	; (8013260 <etharp_output_to_arp_index+0x124>)
 801314e:	4613      	mov	r3, r2
 8013150:	005b      	lsls	r3, r3, #1
 8013152:	4413      	add	r3, r2
 8013154:	00db      	lsls	r3, r3, #3
 8013156:	440b      	add	r3, r1
 8013158:	3314      	adds	r3, #20
 801315a:	781b      	ldrb	r3, [r3, #0]
 801315c:	2b01      	cmp	r3, #1
 801315e:	d806      	bhi.n	801316e <etharp_output_to_arp_index+0x32>
 8013160:	4b40      	ldr	r3, [pc, #256]	; (8013264 <etharp_output_to_arp_index+0x128>)
 8013162:	f240 22ee 	movw	r2, #750	; 0x2ee
 8013166:	4940      	ldr	r1, [pc, #256]	; (8013268 <etharp_output_to_arp_index+0x12c>)
 8013168:	4840      	ldr	r0, [pc, #256]	; (801326c <etharp_output_to_arp_index+0x130>)
 801316a:	f002 fa47 	bl	80155fc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801316e:	79fa      	ldrb	r2, [r7, #7]
 8013170:	493b      	ldr	r1, [pc, #236]	; (8013260 <etharp_output_to_arp_index+0x124>)
 8013172:	4613      	mov	r3, r2
 8013174:	005b      	lsls	r3, r3, #1
 8013176:	4413      	add	r3, r2
 8013178:	00db      	lsls	r3, r3, #3
 801317a:	440b      	add	r3, r1
 801317c:	3314      	adds	r3, #20
 801317e:	781b      	ldrb	r3, [r3, #0]
 8013180:	2b02      	cmp	r3, #2
 8013182:	d153      	bne.n	801322c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8013184:	79fa      	ldrb	r2, [r7, #7]
 8013186:	4936      	ldr	r1, [pc, #216]	; (8013260 <etharp_output_to_arp_index+0x124>)
 8013188:	4613      	mov	r3, r2
 801318a:	005b      	lsls	r3, r3, #1
 801318c:	4413      	add	r3, r2
 801318e:	00db      	lsls	r3, r3, #3
 8013190:	440b      	add	r3, r1
 8013192:	3312      	adds	r3, #18
 8013194:	881b      	ldrh	r3, [r3, #0]
 8013196:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801319a:	d919      	bls.n	80131d0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801319c:	79fa      	ldrb	r2, [r7, #7]
 801319e:	4613      	mov	r3, r2
 80131a0:	005b      	lsls	r3, r3, #1
 80131a2:	4413      	add	r3, r2
 80131a4:	00db      	lsls	r3, r3, #3
 80131a6:	4a2e      	ldr	r2, [pc, #184]	; (8013260 <etharp_output_to_arp_index+0x124>)
 80131a8:	4413      	add	r3, r2
 80131aa:	3304      	adds	r3, #4
 80131ac:	4619      	mov	r1, r3
 80131ae:	68f8      	ldr	r0, [r7, #12]
 80131b0:	f000 fb4c 	bl	801384c <etharp_request>
 80131b4:	4603      	mov	r3, r0
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d138      	bne.n	801322c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80131ba:	79fa      	ldrb	r2, [r7, #7]
 80131bc:	4928      	ldr	r1, [pc, #160]	; (8013260 <etharp_output_to_arp_index+0x124>)
 80131be:	4613      	mov	r3, r2
 80131c0:	005b      	lsls	r3, r3, #1
 80131c2:	4413      	add	r3, r2
 80131c4:	00db      	lsls	r3, r3, #3
 80131c6:	440b      	add	r3, r1
 80131c8:	3314      	adds	r3, #20
 80131ca:	2203      	movs	r2, #3
 80131cc:	701a      	strb	r2, [r3, #0]
 80131ce:	e02d      	b.n	801322c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80131d0:	79fa      	ldrb	r2, [r7, #7]
 80131d2:	4923      	ldr	r1, [pc, #140]	; (8013260 <etharp_output_to_arp_index+0x124>)
 80131d4:	4613      	mov	r3, r2
 80131d6:	005b      	lsls	r3, r3, #1
 80131d8:	4413      	add	r3, r2
 80131da:	00db      	lsls	r3, r3, #3
 80131dc:	440b      	add	r3, r1
 80131de:	3312      	adds	r3, #18
 80131e0:	881b      	ldrh	r3, [r3, #0]
 80131e2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80131e6:	d321      	bcc.n	801322c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80131e8:	79fa      	ldrb	r2, [r7, #7]
 80131ea:	4613      	mov	r3, r2
 80131ec:	005b      	lsls	r3, r3, #1
 80131ee:	4413      	add	r3, r2
 80131f0:	00db      	lsls	r3, r3, #3
 80131f2:	4a1b      	ldr	r2, [pc, #108]	; (8013260 <etharp_output_to_arp_index+0x124>)
 80131f4:	4413      	add	r3, r2
 80131f6:	1d19      	adds	r1, r3, #4
 80131f8:	79fa      	ldrb	r2, [r7, #7]
 80131fa:	4613      	mov	r3, r2
 80131fc:	005b      	lsls	r3, r3, #1
 80131fe:	4413      	add	r3, r2
 8013200:	00db      	lsls	r3, r3, #3
 8013202:	3308      	adds	r3, #8
 8013204:	4a16      	ldr	r2, [pc, #88]	; (8013260 <etharp_output_to_arp_index+0x124>)
 8013206:	4413      	add	r3, r2
 8013208:	3304      	adds	r3, #4
 801320a:	461a      	mov	r2, r3
 801320c:	68f8      	ldr	r0, [r7, #12]
 801320e:	f000 fafb 	bl	8013808 <etharp_request_dst>
 8013212:	4603      	mov	r3, r0
 8013214:	2b00      	cmp	r3, #0
 8013216:	d109      	bne.n	801322c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013218:	79fa      	ldrb	r2, [r7, #7]
 801321a:	4911      	ldr	r1, [pc, #68]	; (8013260 <etharp_output_to_arp_index+0x124>)
 801321c:	4613      	mov	r3, r2
 801321e:	005b      	lsls	r3, r3, #1
 8013220:	4413      	add	r3, r2
 8013222:	00db      	lsls	r3, r3, #3
 8013224:	440b      	add	r3, r1
 8013226:	3314      	adds	r3, #20
 8013228:	2203      	movs	r2, #3
 801322a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8013232:	79fa      	ldrb	r2, [r7, #7]
 8013234:	4613      	mov	r3, r2
 8013236:	005b      	lsls	r3, r3, #1
 8013238:	4413      	add	r3, r2
 801323a:	00db      	lsls	r3, r3, #3
 801323c:	3308      	adds	r3, #8
 801323e:	4a08      	ldr	r2, [pc, #32]	; (8013260 <etharp_output_to_arp_index+0x124>)
 8013240:	4413      	add	r3, r2
 8013242:	3304      	adds	r3, #4
 8013244:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013248:	9200      	str	r2, [sp, #0]
 801324a:	460a      	mov	r2, r1
 801324c:	68b9      	ldr	r1, [r7, #8]
 801324e:	68f8      	ldr	r0, [r7, #12]
 8013250:	f001 fe3a 	bl	8014ec8 <ethernet_output>
 8013254:	4603      	mov	r3, r0
}
 8013256:	4618      	mov	r0, r3
 8013258:	3710      	adds	r7, #16
 801325a:	46bd      	mov	sp, r7
 801325c:	bd80      	pop	{r7, pc}
 801325e:	bf00      	nop
 8013260:	20004b10 	.word	0x20004b10
 8013264:	08019388 	.word	0x08019388
 8013268:	080194f8 	.word	0x080194f8
 801326c:	08019400 	.word	0x08019400

08013270 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8013270:	b580      	push	{r7, lr}
 8013272:	b08a      	sub	sp, #40	; 0x28
 8013274:	af02      	add	r7, sp, #8
 8013276:	60f8      	str	r0, [r7, #12]
 8013278:	60b9      	str	r1, [r7, #8]
 801327a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d106      	bne.n	8013294 <etharp_output+0x24>
 8013286:	4b73      	ldr	r3, [pc, #460]	; (8013454 <etharp_output+0x1e4>)
 8013288:	f240 321e 	movw	r2, #798	; 0x31e
 801328c:	4972      	ldr	r1, [pc, #456]	; (8013458 <etharp_output+0x1e8>)
 801328e:	4873      	ldr	r0, [pc, #460]	; (801345c <etharp_output+0x1ec>)
 8013290:	f002 f9b4 	bl	80155fc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8013294:	68bb      	ldr	r3, [r7, #8]
 8013296:	2b00      	cmp	r3, #0
 8013298:	d106      	bne.n	80132a8 <etharp_output+0x38>
 801329a:	4b6e      	ldr	r3, [pc, #440]	; (8013454 <etharp_output+0x1e4>)
 801329c:	f240 321f 	movw	r2, #799	; 0x31f
 80132a0:	496f      	ldr	r1, [pc, #444]	; (8013460 <etharp_output+0x1f0>)
 80132a2:	486e      	ldr	r0, [pc, #440]	; (801345c <etharp_output+0x1ec>)
 80132a4:	f002 f9aa 	bl	80155fc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d106      	bne.n	80132bc <etharp_output+0x4c>
 80132ae:	4b69      	ldr	r3, [pc, #420]	; (8013454 <etharp_output+0x1e4>)
 80132b0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80132b4:	496b      	ldr	r1, [pc, #428]	; (8013464 <etharp_output+0x1f4>)
 80132b6:	4869      	ldr	r0, [pc, #420]	; (801345c <etharp_output+0x1ec>)
 80132b8:	f002 f9a0 	bl	80155fc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	68f9      	ldr	r1, [r7, #12]
 80132c2:	4618      	mov	r0, r3
 80132c4:	f000 fef8 	bl	80140b8 <ip4_addr_isbroadcast_u32>
 80132c8:	4603      	mov	r3, r0
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d002      	beq.n	80132d4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80132ce:	4b66      	ldr	r3, [pc, #408]	; (8013468 <etharp_output+0x1f8>)
 80132d0:	61fb      	str	r3, [r7, #28]
 80132d2:	e0af      	b.n	8013434 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80132dc:	2be0      	cmp	r3, #224	; 0xe0
 80132de:	d118      	bne.n	8013312 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80132e0:	2301      	movs	r3, #1
 80132e2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80132e4:	2300      	movs	r3, #0
 80132e6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80132e8:	235e      	movs	r3, #94	; 0x5e
 80132ea:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	3301      	adds	r3, #1
 80132f0:	781b      	ldrb	r3, [r3, #0]
 80132f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80132f6:	b2db      	uxtb	r3, r3
 80132f8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	3302      	adds	r3, #2
 80132fe:	781b      	ldrb	r3, [r3, #0]
 8013300:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	3303      	adds	r3, #3
 8013306:	781b      	ldrb	r3, [r3, #0]
 8013308:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801330a:	f107 0310 	add.w	r3, r7, #16
 801330e:	61fb      	str	r3, [r7, #28]
 8013310:	e090      	b.n	8013434 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	681a      	ldr	r2, [r3, #0]
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	3304      	adds	r3, #4
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	405a      	eors	r2, r3
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	3308      	adds	r3, #8
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	4013      	ands	r3, r2
 8013326:	2b00      	cmp	r3, #0
 8013328:	d012      	beq.n	8013350 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013330:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8013334:	4293      	cmp	r3, r2
 8013336:	d00b      	beq.n	8013350 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	330c      	adds	r3, #12
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d003      	beq.n	801334a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	330c      	adds	r3, #12
 8013346:	61bb      	str	r3, [r7, #24]
 8013348:	e002      	b.n	8013350 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801334a:	f06f 0303 	mvn.w	r3, #3
 801334e:	e07d      	b.n	801344c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013350:	4b46      	ldr	r3, [pc, #280]	; (801346c <etharp_output+0x1fc>)
 8013352:	781b      	ldrb	r3, [r3, #0]
 8013354:	4619      	mov	r1, r3
 8013356:	4a46      	ldr	r2, [pc, #280]	; (8013470 <etharp_output+0x200>)
 8013358:	460b      	mov	r3, r1
 801335a:	005b      	lsls	r3, r3, #1
 801335c:	440b      	add	r3, r1
 801335e:	00db      	lsls	r3, r3, #3
 8013360:	4413      	add	r3, r2
 8013362:	3314      	adds	r3, #20
 8013364:	781b      	ldrb	r3, [r3, #0]
 8013366:	2b01      	cmp	r3, #1
 8013368:	d925      	bls.n	80133b6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801336a:	4b40      	ldr	r3, [pc, #256]	; (801346c <etharp_output+0x1fc>)
 801336c:	781b      	ldrb	r3, [r3, #0]
 801336e:	4619      	mov	r1, r3
 8013370:	4a3f      	ldr	r2, [pc, #252]	; (8013470 <etharp_output+0x200>)
 8013372:	460b      	mov	r3, r1
 8013374:	005b      	lsls	r3, r3, #1
 8013376:	440b      	add	r3, r1
 8013378:	00db      	lsls	r3, r3, #3
 801337a:	4413      	add	r3, r2
 801337c:	3308      	adds	r3, #8
 801337e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013380:	68fa      	ldr	r2, [r7, #12]
 8013382:	429a      	cmp	r2, r3
 8013384:	d117      	bne.n	80133b6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8013386:	69bb      	ldr	r3, [r7, #24]
 8013388:	681a      	ldr	r2, [r3, #0]
 801338a:	4b38      	ldr	r3, [pc, #224]	; (801346c <etharp_output+0x1fc>)
 801338c:	781b      	ldrb	r3, [r3, #0]
 801338e:	4618      	mov	r0, r3
 8013390:	4937      	ldr	r1, [pc, #220]	; (8013470 <etharp_output+0x200>)
 8013392:	4603      	mov	r3, r0
 8013394:	005b      	lsls	r3, r3, #1
 8013396:	4403      	add	r3, r0
 8013398:	00db      	lsls	r3, r3, #3
 801339a:	440b      	add	r3, r1
 801339c:	3304      	adds	r3, #4
 801339e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80133a0:	429a      	cmp	r2, r3
 80133a2:	d108      	bne.n	80133b6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80133a4:	4b31      	ldr	r3, [pc, #196]	; (801346c <etharp_output+0x1fc>)
 80133a6:	781b      	ldrb	r3, [r3, #0]
 80133a8:	461a      	mov	r2, r3
 80133aa:	68b9      	ldr	r1, [r7, #8]
 80133ac:	68f8      	ldr	r0, [r7, #12]
 80133ae:	f7ff fec5 	bl	801313c <etharp_output_to_arp_index>
 80133b2:	4603      	mov	r3, r0
 80133b4:	e04a      	b.n	801344c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80133b6:	2300      	movs	r3, #0
 80133b8:	75fb      	strb	r3, [r7, #23]
 80133ba:	e031      	b.n	8013420 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80133bc:	7dfa      	ldrb	r2, [r7, #23]
 80133be:	492c      	ldr	r1, [pc, #176]	; (8013470 <etharp_output+0x200>)
 80133c0:	4613      	mov	r3, r2
 80133c2:	005b      	lsls	r3, r3, #1
 80133c4:	4413      	add	r3, r2
 80133c6:	00db      	lsls	r3, r3, #3
 80133c8:	440b      	add	r3, r1
 80133ca:	3314      	adds	r3, #20
 80133cc:	781b      	ldrb	r3, [r3, #0]
 80133ce:	2b01      	cmp	r3, #1
 80133d0:	d923      	bls.n	801341a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80133d2:	7dfa      	ldrb	r2, [r7, #23]
 80133d4:	4926      	ldr	r1, [pc, #152]	; (8013470 <etharp_output+0x200>)
 80133d6:	4613      	mov	r3, r2
 80133d8:	005b      	lsls	r3, r3, #1
 80133da:	4413      	add	r3, r2
 80133dc:	00db      	lsls	r3, r3, #3
 80133de:	440b      	add	r3, r1
 80133e0:	3308      	adds	r3, #8
 80133e2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80133e4:	68fa      	ldr	r2, [r7, #12]
 80133e6:	429a      	cmp	r2, r3
 80133e8:	d117      	bne.n	801341a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80133ea:	69bb      	ldr	r3, [r7, #24]
 80133ec:	6819      	ldr	r1, [r3, #0]
 80133ee:	7dfa      	ldrb	r2, [r7, #23]
 80133f0:	481f      	ldr	r0, [pc, #124]	; (8013470 <etharp_output+0x200>)
 80133f2:	4613      	mov	r3, r2
 80133f4:	005b      	lsls	r3, r3, #1
 80133f6:	4413      	add	r3, r2
 80133f8:	00db      	lsls	r3, r3, #3
 80133fa:	4403      	add	r3, r0
 80133fc:	3304      	adds	r3, #4
 80133fe:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8013400:	4299      	cmp	r1, r3
 8013402:	d10a      	bne.n	801341a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8013404:	4a19      	ldr	r2, [pc, #100]	; (801346c <etharp_output+0x1fc>)
 8013406:	7dfb      	ldrb	r3, [r7, #23]
 8013408:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801340a:	7dfb      	ldrb	r3, [r7, #23]
 801340c:	461a      	mov	r2, r3
 801340e:	68b9      	ldr	r1, [r7, #8]
 8013410:	68f8      	ldr	r0, [r7, #12]
 8013412:	f7ff fe93 	bl	801313c <etharp_output_to_arp_index>
 8013416:	4603      	mov	r3, r0
 8013418:	e018      	b.n	801344c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801341a:	7dfb      	ldrb	r3, [r7, #23]
 801341c:	3301      	adds	r3, #1
 801341e:	75fb      	strb	r3, [r7, #23]
 8013420:	7dfb      	ldrb	r3, [r7, #23]
 8013422:	2b09      	cmp	r3, #9
 8013424:	d9ca      	bls.n	80133bc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8013426:	68ba      	ldr	r2, [r7, #8]
 8013428:	69b9      	ldr	r1, [r7, #24]
 801342a:	68f8      	ldr	r0, [r7, #12]
 801342c:	f000 f822 	bl	8013474 <etharp_query>
 8013430:	4603      	mov	r3, r0
 8013432:	e00b      	b.n	801344c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801343a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801343e:	9300      	str	r3, [sp, #0]
 8013440:	69fb      	ldr	r3, [r7, #28]
 8013442:	68b9      	ldr	r1, [r7, #8]
 8013444:	68f8      	ldr	r0, [r7, #12]
 8013446:	f001 fd3f 	bl	8014ec8 <ethernet_output>
 801344a:	4603      	mov	r3, r0
}
 801344c:	4618      	mov	r0, r3
 801344e:	3720      	adds	r7, #32
 8013450:	46bd      	mov	sp, r7
 8013452:	bd80      	pop	{r7, pc}
 8013454:	08019388 	.word	0x08019388
 8013458:	080194d8 	.word	0x080194d8
 801345c:	08019400 	.word	0x08019400
 8013460:	08019528 	.word	0x08019528
 8013464:	080194c8 	.word	0x080194c8
 8013468:	08019fa8 	.word	0x08019fa8
 801346c:	20004c00 	.word	0x20004c00
 8013470:	20004b10 	.word	0x20004b10

08013474 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8013474:	b580      	push	{r7, lr}
 8013476:	b08c      	sub	sp, #48	; 0x30
 8013478:	af02      	add	r7, sp, #8
 801347a:	60f8      	str	r0, [r7, #12]
 801347c:	60b9      	str	r1, [r7, #8]
 801347e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	3326      	adds	r3, #38	; 0x26
 8013484:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8013486:	23ff      	movs	r3, #255	; 0xff
 8013488:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801348c:	2300      	movs	r3, #0
 801348e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013490:	68bb      	ldr	r3, [r7, #8]
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	68f9      	ldr	r1, [r7, #12]
 8013496:	4618      	mov	r0, r3
 8013498:	f000 fe0e 	bl	80140b8 <ip4_addr_isbroadcast_u32>
 801349c:	4603      	mov	r3, r0
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d10c      	bne.n	80134bc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80134a2:	68bb      	ldr	r3, [r7, #8]
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80134aa:	2be0      	cmp	r3, #224	; 0xe0
 80134ac:	d006      	beq.n	80134bc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80134ae:	68bb      	ldr	r3, [r7, #8]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d003      	beq.n	80134bc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80134b4:	68bb      	ldr	r3, [r7, #8]
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d102      	bne.n	80134c2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80134bc:	f06f 030f 	mvn.w	r3, #15
 80134c0:	e101      	b.n	80136c6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80134c2:	68fa      	ldr	r2, [r7, #12]
 80134c4:	2101      	movs	r1, #1
 80134c6:	68b8      	ldr	r0, [r7, #8]
 80134c8:	f7ff fb60 	bl	8012b8c <etharp_find_entry>
 80134cc:	4603      	mov	r3, r0
 80134ce:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80134d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	da02      	bge.n	80134de <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80134d8:	8a7b      	ldrh	r3, [r7, #18]
 80134da:	b25b      	sxtb	r3, r3
 80134dc:	e0f3      	b.n	80136c6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80134de:	8a7b      	ldrh	r3, [r7, #18]
 80134e0:	2b7e      	cmp	r3, #126	; 0x7e
 80134e2:	d906      	bls.n	80134f2 <etharp_query+0x7e>
 80134e4:	4b7a      	ldr	r3, [pc, #488]	; (80136d0 <etharp_query+0x25c>)
 80134e6:	f240 32c1 	movw	r2, #961	; 0x3c1
 80134ea:	497a      	ldr	r1, [pc, #488]	; (80136d4 <etharp_query+0x260>)
 80134ec:	487a      	ldr	r0, [pc, #488]	; (80136d8 <etharp_query+0x264>)
 80134ee:	f002 f885 	bl	80155fc <iprintf>
  i = (netif_addr_idx_t)i_err;
 80134f2:	8a7b      	ldrh	r3, [r7, #18]
 80134f4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80134f6:	7c7a      	ldrb	r2, [r7, #17]
 80134f8:	4978      	ldr	r1, [pc, #480]	; (80136dc <etharp_query+0x268>)
 80134fa:	4613      	mov	r3, r2
 80134fc:	005b      	lsls	r3, r3, #1
 80134fe:	4413      	add	r3, r2
 8013500:	00db      	lsls	r3, r3, #3
 8013502:	440b      	add	r3, r1
 8013504:	3314      	adds	r3, #20
 8013506:	781b      	ldrb	r3, [r3, #0]
 8013508:	2b00      	cmp	r3, #0
 801350a:	d115      	bne.n	8013538 <etharp_query+0xc4>
    is_new_entry = 1;
 801350c:	2301      	movs	r3, #1
 801350e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8013510:	7c7a      	ldrb	r2, [r7, #17]
 8013512:	4972      	ldr	r1, [pc, #456]	; (80136dc <etharp_query+0x268>)
 8013514:	4613      	mov	r3, r2
 8013516:	005b      	lsls	r3, r3, #1
 8013518:	4413      	add	r3, r2
 801351a:	00db      	lsls	r3, r3, #3
 801351c:	440b      	add	r3, r1
 801351e:	3314      	adds	r3, #20
 8013520:	2201      	movs	r2, #1
 8013522:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8013524:	7c7a      	ldrb	r2, [r7, #17]
 8013526:	496d      	ldr	r1, [pc, #436]	; (80136dc <etharp_query+0x268>)
 8013528:	4613      	mov	r3, r2
 801352a:	005b      	lsls	r3, r3, #1
 801352c:	4413      	add	r3, r2
 801352e:	00db      	lsls	r3, r3, #3
 8013530:	440b      	add	r3, r1
 8013532:	3308      	adds	r3, #8
 8013534:	68fa      	ldr	r2, [r7, #12]
 8013536:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8013538:	7c7a      	ldrb	r2, [r7, #17]
 801353a:	4968      	ldr	r1, [pc, #416]	; (80136dc <etharp_query+0x268>)
 801353c:	4613      	mov	r3, r2
 801353e:	005b      	lsls	r3, r3, #1
 8013540:	4413      	add	r3, r2
 8013542:	00db      	lsls	r3, r3, #3
 8013544:	440b      	add	r3, r1
 8013546:	3314      	adds	r3, #20
 8013548:	781b      	ldrb	r3, [r3, #0]
 801354a:	2b01      	cmp	r3, #1
 801354c:	d011      	beq.n	8013572 <etharp_query+0xfe>
 801354e:	7c7a      	ldrb	r2, [r7, #17]
 8013550:	4962      	ldr	r1, [pc, #392]	; (80136dc <etharp_query+0x268>)
 8013552:	4613      	mov	r3, r2
 8013554:	005b      	lsls	r3, r3, #1
 8013556:	4413      	add	r3, r2
 8013558:	00db      	lsls	r3, r3, #3
 801355a:	440b      	add	r3, r1
 801355c:	3314      	adds	r3, #20
 801355e:	781b      	ldrb	r3, [r3, #0]
 8013560:	2b01      	cmp	r3, #1
 8013562:	d806      	bhi.n	8013572 <etharp_query+0xfe>
 8013564:	4b5a      	ldr	r3, [pc, #360]	; (80136d0 <etharp_query+0x25c>)
 8013566:	f240 32cd 	movw	r2, #973	; 0x3cd
 801356a:	495d      	ldr	r1, [pc, #372]	; (80136e0 <etharp_query+0x26c>)
 801356c:	485a      	ldr	r0, [pc, #360]	; (80136d8 <etharp_query+0x264>)
 801356e:	f002 f845 	bl	80155fc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8013572:	6a3b      	ldr	r3, [r7, #32]
 8013574:	2b00      	cmp	r3, #0
 8013576:	d102      	bne.n	801357e <etharp_query+0x10a>
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	2b00      	cmp	r3, #0
 801357c:	d10c      	bne.n	8013598 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801357e:	68b9      	ldr	r1, [r7, #8]
 8013580:	68f8      	ldr	r0, [r7, #12]
 8013582:	f000 f963 	bl	801384c <etharp_request>
 8013586:	4603      	mov	r3, r0
 8013588:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	2b00      	cmp	r3, #0
 8013590:	d102      	bne.n	8013598 <etharp_query+0x124>
      return result;
 8013592:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013596:	e096      	b.n	80136c6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	2b00      	cmp	r3, #0
 801359c:	d106      	bne.n	80135ac <etharp_query+0x138>
 801359e:	4b4c      	ldr	r3, [pc, #304]	; (80136d0 <etharp_query+0x25c>)
 80135a0:	f240 32e1 	movw	r2, #993	; 0x3e1
 80135a4:	494f      	ldr	r1, [pc, #316]	; (80136e4 <etharp_query+0x270>)
 80135a6:	484c      	ldr	r0, [pc, #304]	; (80136d8 <etharp_query+0x264>)
 80135a8:	f002 f828 	bl	80155fc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80135ac:	7c7a      	ldrb	r2, [r7, #17]
 80135ae:	494b      	ldr	r1, [pc, #300]	; (80136dc <etharp_query+0x268>)
 80135b0:	4613      	mov	r3, r2
 80135b2:	005b      	lsls	r3, r3, #1
 80135b4:	4413      	add	r3, r2
 80135b6:	00db      	lsls	r3, r3, #3
 80135b8:	440b      	add	r3, r1
 80135ba:	3314      	adds	r3, #20
 80135bc:	781b      	ldrb	r3, [r3, #0]
 80135be:	2b01      	cmp	r3, #1
 80135c0:	d917      	bls.n	80135f2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80135c2:	4a49      	ldr	r2, [pc, #292]	; (80136e8 <etharp_query+0x274>)
 80135c4:	7c7b      	ldrb	r3, [r7, #17]
 80135c6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80135c8:	7c7a      	ldrb	r2, [r7, #17]
 80135ca:	4613      	mov	r3, r2
 80135cc:	005b      	lsls	r3, r3, #1
 80135ce:	4413      	add	r3, r2
 80135d0:	00db      	lsls	r3, r3, #3
 80135d2:	3308      	adds	r3, #8
 80135d4:	4a41      	ldr	r2, [pc, #260]	; (80136dc <etharp_query+0x268>)
 80135d6:	4413      	add	r3, r2
 80135d8:	3304      	adds	r3, #4
 80135da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80135de:	9200      	str	r2, [sp, #0]
 80135e0:	697a      	ldr	r2, [r7, #20]
 80135e2:	6879      	ldr	r1, [r7, #4]
 80135e4:	68f8      	ldr	r0, [r7, #12]
 80135e6:	f001 fc6f 	bl	8014ec8 <ethernet_output>
 80135ea:	4603      	mov	r3, r0
 80135ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80135f0:	e067      	b.n	80136c2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80135f2:	7c7a      	ldrb	r2, [r7, #17]
 80135f4:	4939      	ldr	r1, [pc, #228]	; (80136dc <etharp_query+0x268>)
 80135f6:	4613      	mov	r3, r2
 80135f8:	005b      	lsls	r3, r3, #1
 80135fa:	4413      	add	r3, r2
 80135fc:	00db      	lsls	r3, r3, #3
 80135fe:	440b      	add	r3, r1
 8013600:	3314      	adds	r3, #20
 8013602:	781b      	ldrb	r3, [r3, #0]
 8013604:	2b01      	cmp	r3, #1
 8013606:	d15c      	bne.n	80136c2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8013608:	2300      	movs	r3, #0
 801360a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013610:	e01c      	b.n	801364c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8013612:	69fb      	ldr	r3, [r7, #28]
 8013614:	895a      	ldrh	r2, [r3, #10]
 8013616:	69fb      	ldr	r3, [r7, #28]
 8013618:	891b      	ldrh	r3, [r3, #8]
 801361a:	429a      	cmp	r2, r3
 801361c:	d10a      	bne.n	8013634 <etharp_query+0x1c0>
 801361e:	69fb      	ldr	r3, [r7, #28]
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	2b00      	cmp	r3, #0
 8013624:	d006      	beq.n	8013634 <etharp_query+0x1c0>
 8013626:	4b2a      	ldr	r3, [pc, #168]	; (80136d0 <etharp_query+0x25c>)
 8013628:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801362c:	492f      	ldr	r1, [pc, #188]	; (80136ec <etharp_query+0x278>)
 801362e:	482a      	ldr	r0, [pc, #168]	; (80136d8 <etharp_query+0x264>)
 8013630:	f001 ffe4 	bl	80155fc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8013634:	69fb      	ldr	r3, [r7, #28]
 8013636:	7b1b      	ldrb	r3, [r3, #12]
 8013638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801363c:	2b00      	cmp	r3, #0
 801363e:	d002      	beq.n	8013646 <etharp_query+0x1d2>
        copy_needed = 1;
 8013640:	2301      	movs	r3, #1
 8013642:	61bb      	str	r3, [r7, #24]
        break;
 8013644:	e005      	b.n	8013652 <etharp_query+0x1de>
      }
      p = p->next;
 8013646:	69fb      	ldr	r3, [r7, #28]
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801364c:	69fb      	ldr	r3, [r7, #28]
 801364e:	2b00      	cmp	r3, #0
 8013650:	d1df      	bne.n	8013612 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8013652:	69bb      	ldr	r3, [r7, #24]
 8013654:	2b00      	cmp	r3, #0
 8013656:	d007      	beq.n	8013668 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8013658:	687a      	ldr	r2, [r7, #4]
 801365a:	f44f 7120 	mov.w	r1, #640	; 0x280
 801365e:	200e      	movs	r0, #14
 8013660:	f7f8 fc8c 	bl	800bf7c <pbuf_clone>
 8013664:	61f8      	str	r0, [r7, #28]
 8013666:	e004      	b.n	8013672 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801366c:	69f8      	ldr	r0, [r7, #28]
 801366e:	f7f8 fac3 	bl	800bbf8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8013672:	69fb      	ldr	r3, [r7, #28]
 8013674:	2b00      	cmp	r3, #0
 8013676:	d021      	beq.n	80136bc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8013678:	7c7a      	ldrb	r2, [r7, #17]
 801367a:	4918      	ldr	r1, [pc, #96]	; (80136dc <etharp_query+0x268>)
 801367c:	4613      	mov	r3, r2
 801367e:	005b      	lsls	r3, r3, #1
 8013680:	4413      	add	r3, r2
 8013682:	00db      	lsls	r3, r3, #3
 8013684:	440b      	add	r3, r1
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d00a      	beq.n	80136a2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801368c:	7c7a      	ldrb	r2, [r7, #17]
 801368e:	4913      	ldr	r1, [pc, #76]	; (80136dc <etharp_query+0x268>)
 8013690:	4613      	mov	r3, r2
 8013692:	005b      	lsls	r3, r3, #1
 8013694:	4413      	add	r3, r2
 8013696:	00db      	lsls	r3, r3, #3
 8013698:	440b      	add	r3, r1
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	4618      	mov	r0, r3
 801369e:	f7f8 fa05 	bl	800baac <pbuf_free>
      }
      arp_table[i].q = p;
 80136a2:	7c7a      	ldrb	r2, [r7, #17]
 80136a4:	490d      	ldr	r1, [pc, #52]	; (80136dc <etharp_query+0x268>)
 80136a6:	4613      	mov	r3, r2
 80136a8:	005b      	lsls	r3, r3, #1
 80136aa:	4413      	add	r3, r2
 80136ac:	00db      	lsls	r3, r3, #3
 80136ae:	440b      	add	r3, r1
 80136b0:	69fa      	ldr	r2, [r7, #28]
 80136b2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80136b4:	2300      	movs	r3, #0
 80136b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80136ba:	e002      	b.n	80136c2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80136bc:	23ff      	movs	r3, #255	; 0xff
 80136be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80136c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80136c6:	4618      	mov	r0, r3
 80136c8:	3728      	adds	r7, #40	; 0x28
 80136ca:	46bd      	mov	sp, r7
 80136cc:	bd80      	pop	{r7, pc}
 80136ce:	bf00      	nop
 80136d0:	08019388 	.word	0x08019388
 80136d4:	08019534 	.word	0x08019534
 80136d8:	08019400 	.word	0x08019400
 80136dc:	20004b10 	.word	0x20004b10
 80136e0:	08019544 	.word	0x08019544
 80136e4:	08019528 	.word	0x08019528
 80136e8:	20004c00 	.word	0x20004c00
 80136ec:	0801956c 	.word	0x0801956c

080136f0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80136f0:	b580      	push	{r7, lr}
 80136f2:	b08a      	sub	sp, #40	; 0x28
 80136f4:	af02      	add	r7, sp, #8
 80136f6:	60f8      	str	r0, [r7, #12]
 80136f8:	60b9      	str	r1, [r7, #8]
 80136fa:	607a      	str	r2, [r7, #4]
 80136fc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80136fe:	2300      	movs	r3, #0
 8013700:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	2b00      	cmp	r3, #0
 8013706:	d106      	bne.n	8013716 <etharp_raw+0x26>
 8013708:	4b3a      	ldr	r3, [pc, #232]	; (80137f4 <etharp_raw+0x104>)
 801370a:	f240 4257 	movw	r2, #1111	; 0x457
 801370e:	493a      	ldr	r1, [pc, #232]	; (80137f8 <etharp_raw+0x108>)
 8013710:	483a      	ldr	r0, [pc, #232]	; (80137fc <etharp_raw+0x10c>)
 8013712:	f001 ff73 	bl	80155fc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8013716:	f44f 7220 	mov.w	r2, #640	; 0x280
 801371a:	211c      	movs	r1, #28
 801371c:	200e      	movs	r0, #14
 801371e:	f7f7 fee1 	bl	800b4e4 <pbuf_alloc>
 8013722:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8013724:	69bb      	ldr	r3, [r7, #24]
 8013726:	2b00      	cmp	r3, #0
 8013728:	d102      	bne.n	8013730 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801372a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801372e:	e05d      	b.n	80137ec <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8013730:	69bb      	ldr	r3, [r7, #24]
 8013732:	895b      	ldrh	r3, [r3, #10]
 8013734:	2b1b      	cmp	r3, #27
 8013736:	d806      	bhi.n	8013746 <etharp_raw+0x56>
 8013738:	4b2e      	ldr	r3, [pc, #184]	; (80137f4 <etharp_raw+0x104>)
 801373a:	f240 4262 	movw	r2, #1122	; 0x462
 801373e:	4930      	ldr	r1, [pc, #192]	; (8013800 <etharp_raw+0x110>)
 8013740:	482e      	ldr	r0, [pc, #184]	; (80137fc <etharp_raw+0x10c>)
 8013742:	f001 ff5b 	bl	80155fc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8013746:	69bb      	ldr	r3, [r7, #24]
 8013748:	685b      	ldr	r3, [r3, #4]
 801374a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801374c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801374e:	4618      	mov	r0, r3
 8013750:	f7f6 fe00 	bl	800a354 <lwip_htons>
 8013754:	4603      	mov	r3, r0
 8013756:	461a      	mov	r2, r3
 8013758:	697b      	ldr	r3, [r7, #20]
 801375a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801375c:	68fb      	ldr	r3, [r7, #12]
 801375e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013762:	2b06      	cmp	r3, #6
 8013764:	d006      	beq.n	8013774 <etharp_raw+0x84>
 8013766:	4b23      	ldr	r3, [pc, #140]	; (80137f4 <etharp_raw+0x104>)
 8013768:	f240 4269 	movw	r2, #1129	; 0x469
 801376c:	4925      	ldr	r1, [pc, #148]	; (8013804 <etharp_raw+0x114>)
 801376e:	4823      	ldr	r0, [pc, #140]	; (80137fc <etharp_raw+0x10c>)
 8013770:	f001 ff44 	bl	80155fc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8013774:	697b      	ldr	r3, [r7, #20]
 8013776:	3308      	adds	r3, #8
 8013778:	2206      	movs	r2, #6
 801377a:	6839      	ldr	r1, [r7, #0]
 801377c:	4618      	mov	r0, r3
 801377e:	f001 fecc 	bl	801551a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8013782:	697b      	ldr	r3, [r7, #20]
 8013784:	3312      	adds	r3, #18
 8013786:	2206      	movs	r2, #6
 8013788:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801378a:	4618      	mov	r0, r3
 801378c:	f001 fec5 	bl	801551a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8013790:	697b      	ldr	r3, [r7, #20]
 8013792:	330e      	adds	r3, #14
 8013794:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013796:	6812      	ldr	r2, [r2, #0]
 8013798:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801379a:	697b      	ldr	r3, [r7, #20]
 801379c:	3318      	adds	r3, #24
 801379e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80137a0:	6812      	ldr	r2, [r2, #0]
 80137a2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80137a4:	697b      	ldr	r3, [r7, #20]
 80137a6:	2200      	movs	r2, #0
 80137a8:	701a      	strb	r2, [r3, #0]
 80137aa:	2200      	movs	r2, #0
 80137ac:	f042 0201 	orr.w	r2, r2, #1
 80137b0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80137b2:	697b      	ldr	r3, [r7, #20]
 80137b4:	2200      	movs	r2, #0
 80137b6:	f042 0208 	orr.w	r2, r2, #8
 80137ba:	709a      	strb	r2, [r3, #2]
 80137bc:	2200      	movs	r2, #0
 80137be:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80137c0:	697b      	ldr	r3, [r7, #20]
 80137c2:	2206      	movs	r2, #6
 80137c4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80137c6:	697b      	ldr	r3, [r7, #20]
 80137c8:	2204      	movs	r2, #4
 80137ca:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80137cc:	f640 0306 	movw	r3, #2054	; 0x806
 80137d0:	9300      	str	r3, [sp, #0]
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	68ba      	ldr	r2, [r7, #8]
 80137d6:	69b9      	ldr	r1, [r7, #24]
 80137d8:	68f8      	ldr	r0, [r7, #12]
 80137da:	f001 fb75 	bl	8014ec8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80137de:	69b8      	ldr	r0, [r7, #24]
 80137e0:	f7f8 f964 	bl	800baac <pbuf_free>
  p = NULL;
 80137e4:	2300      	movs	r3, #0
 80137e6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80137e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80137ec:	4618      	mov	r0, r3
 80137ee:	3720      	adds	r7, #32
 80137f0:	46bd      	mov	sp, r7
 80137f2:	bd80      	pop	{r7, pc}
 80137f4:	08019388 	.word	0x08019388
 80137f8:	080194d8 	.word	0x080194d8
 80137fc:	08019400 	.word	0x08019400
 8013800:	08019588 	.word	0x08019588
 8013804:	080195bc 	.word	0x080195bc

08013808 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8013808:	b580      	push	{r7, lr}
 801380a:	b088      	sub	sp, #32
 801380c:	af04      	add	r7, sp, #16
 801380e:	60f8      	str	r0, [r7, #12]
 8013810:	60b9      	str	r1, [r7, #8]
 8013812:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013824:	2201      	movs	r2, #1
 8013826:	9203      	str	r2, [sp, #12]
 8013828:	68ba      	ldr	r2, [r7, #8]
 801382a:	9202      	str	r2, [sp, #8]
 801382c:	4a06      	ldr	r2, [pc, #24]	; (8013848 <etharp_request_dst+0x40>)
 801382e:	9201      	str	r2, [sp, #4]
 8013830:	9300      	str	r3, [sp, #0]
 8013832:	4603      	mov	r3, r0
 8013834:	687a      	ldr	r2, [r7, #4]
 8013836:	68f8      	ldr	r0, [r7, #12]
 8013838:	f7ff ff5a 	bl	80136f0 <etharp_raw>
 801383c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801383e:	4618      	mov	r0, r3
 8013840:	3710      	adds	r7, #16
 8013842:	46bd      	mov	sp, r7
 8013844:	bd80      	pop	{r7, pc}
 8013846:	bf00      	nop
 8013848:	08019fb0 	.word	0x08019fb0

0801384c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801384c:	b580      	push	{r7, lr}
 801384e:	b082      	sub	sp, #8
 8013850:	af00      	add	r7, sp, #0
 8013852:	6078      	str	r0, [r7, #4]
 8013854:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8013856:	4a05      	ldr	r2, [pc, #20]	; (801386c <etharp_request+0x20>)
 8013858:	6839      	ldr	r1, [r7, #0]
 801385a:	6878      	ldr	r0, [r7, #4]
 801385c:	f7ff ffd4 	bl	8013808 <etharp_request_dst>
 8013860:	4603      	mov	r3, r0
}
 8013862:	4618      	mov	r0, r3
 8013864:	3708      	adds	r7, #8
 8013866:	46bd      	mov	sp, r7
 8013868:	bd80      	pop	{r7, pc}
 801386a:	bf00      	nop
 801386c:	08019fa8 	.word	0x08019fa8

08013870 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8013870:	b580      	push	{r7, lr}
 8013872:	b08e      	sub	sp, #56	; 0x38
 8013874:	af04      	add	r7, sp, #16
 8013876:	6078      	str	r0, [r7, #4]
 8013878:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801387a:	4b79      	ldr	r3, [pc, #484]	; (8013a60 <icmp_input+0x1f0>)
 801387c:	689b      	ldr	r3, [r3, #8]
 801387e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8013880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013882:	781b      	ldrb	r3, [r3, #0]
 8013884:	f003 030f 	and.w	r3, r3, #15
 8013888:	b2db      	uxtb	r3, r3
 801388a:	009b      	lsls	r3, r3, #2
 801388c:	b2db      	uxtb	r3, r3
 801388e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8013890:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013892:	2b13      	cmp	r3, #19
 8013894:	f240 80cd 	bls.w	8013a32 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	895b      	ldrh	r3, [r3, #10]
 801389c:	2b03      	cmp	r3, #3
 801389e:	f240 80ca 	bls.w	8013a36 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	685b      	ldr	r3, [r3, #4]
 80138a6:	781b      	ldrb	r3, [r3, #0]
 80138a8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80138ac:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	f000 80b7 	beq.w	8013a24 <icmp_input+0x1b4>
 80138b6:	2b08      	cmp	r3, #8
 80138b8:	f040 80b7 	bne.w	8013a2a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80138bc:	4b69      	ldr	r3, [pc, #420]	; (8013a64 <icmp_input+0x1f4>)
 80138be:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80138c0:	4b67      	ldr	r3, [pc, #412]	; (8013a60 <icmp_input+0x1f0>)
 80138c2:	695b      	ldr	r3, [r3, #20]
 80138c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80138c8:	2be0      	cmp	r3, #224	; 0xe0
 80138ca:	f000 80bb 	beq.w	8013a44 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80138ce:	4b64      	ldr	r3, [pc, #400]	; (8013a60 <icmp_input+0x1f0>)
 80138d0:	695b      	ldr	r3, [r3, #20]
 80138d2:	4a63      	ldr	r2, [pc, #396]	; (8013a60 <icmp_input+0x1f0>)
 80138d4:	6812      	ldr	r2, [r2, #0]
 80138d6:	4611      	mov	r1, r2
 80138d8:	4618      	mov	r0, r3
 80138da:	f000 fbed 	bl	80140b8 <ip4_addr_isbroadcast_u32>
 80138de:	4603      	mov	r3, r0
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	f040 80b1 	bne.w	8013a48 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	891b      	ldrh	r3, [r3, #8]
 80138ea:	2b07      	cmp	r3, #7
 80138ec:	f240 80a5 	bls.w	8013a3a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80138f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80138f2:	330e      	adds	r3, #14
 80138f4:	4619      	mov	r1, r3
 80138f6:	6878      	ldr	r0, [r7, #4]
 80138f8:	f7f8 f842 	bl	800b980 <pbuf_add_header>
 80138fc:	4603      	mov	r3, r0
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d04b      	beq.n	801399a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	891a      	ldrh	r2, [r3, #8]
 8013906:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013908:	4413      	add	r3, r2
 801390a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	891b      	ldrh	r3, [r3, #8]
 8013910:	8b7a      	ldrh	r2, [r7, #26]
 8013912:	429a      	cmp	r2, r3
 8013914:	f0c0 809a 	bcc.w	8013a4c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8013918:	8b7b      	ldrh	r3, [r7, #26]
 801391a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801391e:	4619      	mov	r1, r3
 8013920:	200e      	movs	r0, #14
 8013922:	f7f7 fddf 	bl	800b4e4 <pbuf_alloc>
 8013926:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8013928:	697b      	ldr	r3, [r7, #20]
 801392a:	2b00      	cmp	r3, #0
 801392c:	f000 8090 	beq.w	8013a50 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8013930:	697b      	ldr	r3, [r7, #20]
 8013932:	895b      	ldrh	r3, [r3, #10]
 8013934:	461a      	mov	r2, r3
 8013936:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013938:	3308      	adds	r3, #8
 801393a:	429a      	cmp	r2, r3
 801393c:	d203      	bcs.n	8013946 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801393e:	6978      	ldr	r0, [r7, #20]
 8013940:	f7f8 f8b4 	bl	800baac <pbuf_free>
          goto icmperr;
 8013944:	e085      	b.n	8013a52 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8013946:	697b      	ldr	r3, [r7, #20]
 8013948:	685b      	ldr	r3, [r3, #4]
 801394a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801394c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801394e:	4618      	mov	r0, r3
 8013950:	f001 fde3 	bl	801551a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8013954:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013956:	4619      	mov	r1, r3
 8013958:	6978      	ldr	r0, [r7, #20]
 801395a:	f7f8 f821 	bl	800b9a0 <pbuf_remove_header>
 801395e:	4603      	mov	r3, r0
 8013960:	2b00      	cmp	r3, #0
 8013962:	d009      	beq.n	8013978 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8013964:	4b40      	ldr	r3, [pc, #256]	; (8013a68 <icmp_input+0x1f8>)
 8013966:	22b6      	movs	r2, #182	; 0xb6
 8013968:	4940      	ldr	r1, [pc, #256]	; (8013a6c <icmp_input+0x1fc>)
 801396a:	4841      	ldr	r0, [pc, #260]	; (8013a70 <icmp_input+0x200>)
 801396c:	f001 fe46 	bl	80155fc <iprintf>
          pbuf_free(r);
 8013970:	6978      	ldr	r0, [r7, #20]
 8013972:	f7f8 f89b 	bl	800baac <pbuf_free>
          goto icmperr;
 8013976:	e06c      	b.n	8013a52 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8013978:	6879      	ldr	r1, [r7, #4]
 801397a:	6978      	ldr	r0, [r7, #20]
 801397c:	f7f8 f9ba 	bl	800bcf4 <pbuf_copy>
 8013980:	4603      	mov	r3, r0
 8013982:	2b00      	cmp	r3, #0
 8013984:	d003      	beq.n	801398e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8013986:	6978      	ldr	r0, [r7, #20]
 8013988:	f7f8 f890 	bl	800baac <pbuf_free>
          goto icmperr;
 801398c:	e061      	b.n	8013a52 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801398e:	6878      	ldr	r0, [r7, #4]
 8013990:	f7f8 f88c 	bl	800baac <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8013994:	697b      	ldr	r3, [r7, #20]
 8013996:	607b      	str	r3, [r7, #4]
 8013998:	e00f      	b.n	80139ba <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801399a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801399c:	330e      	adds	r3, #14
 801399e:	4619      	mov	r1, r3
 80139a0:	6878      	ldr	r0, [r7, #4]
 80139a2:	f7f7 fffd 	bl	800b9a0 <pbuf_remove_header>
 80139a6:	4603      	mov	r3, r0
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d006      	beq.n	80139ba <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80139ac:	4b2e      	ldr	r3, [pc, #184]	; (8013a68 <icmp_input+0x1f8>)
 80139ae:	22c7      	movs	r2, #199	; 0xc7
 80139b0:	4930      	ldr	r1, [pc, #192]	; (8013a74 <icmp_input+0x204>)
 80139b2:	482f      	ldr	r0, [pc, #188]	; (8013a70 <icmp_input+0x200>)
 80139b4:	f001 fe22 	bl	80155fc <iprintf>
          goto icmperr;
 80139b8:	e04b      	b.n	8013a52 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	685b      	ldr	r3, [r3, #4]
 80139be:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80139c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80139c2:	4619      	mov	r1, r3
 80139c4:	6878      	ldr	r0, [r7, #4]
 80139c6:	f7f7 ffdb 	bl	800b980 <pbuf_add_header>
 80139ca:	4603      	mov	r3, r0
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d12b      	bne.n	8013a28 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	685b      	ldr	r3, [r3, #4]
 80139d4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80139d6:	69fb      	ldr	r3, [r7, #28]
 80139d8:	681a      	ldr	r2, [r3, #0]
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80139de:	4b20      	ldr	r3, [pc, #128]	; (8013a60 <icmp_input+0x1f0>)
 80139e0:	691a      	ldr	r2, [r3, #16]
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80139e6:	693b      	ldr	r3, [r7, #16]
 80139e8:	2200      	movs	r2, #0
 80139ea:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80139ec:	693b      	ldr	r3, [r7, #16]
 80139ee:	2200      	movs	r2, #0
 80139f0:	709a      	strb	r2, [r3, #2]
 80139f2:	2200      	movs	r2, #0
 80139f4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	22ff      	movs	r2, #255	; 0xff
 80139fa:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	2200      	movs	r2, #0
 8013a00:	729a      	strb	r2, [r3, #10]
 8013a02:	2200      	movs	r2, #0
 8013a04:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8013a06:	683b      	ldr	r3, [r7, #0]
 8013a08:	9302      	str	r3, [sp, #8]
 8013a0a:	2301      	movs	r3, #1
 8013a0c:	9301      	str	r3, [sp, #4]
 8013a0e:	2300      	movs	r3, #0
 8013a10:	9300      	str	r3, [sp, #0]
 8013a12:	23ff      	movs	r3, #255	; 0xff
 8013a14:	2200      	movs	r2, #0
 8013a16:	69f9      	ldr	r1, [r7, #28]
 8013a18:	6878      	ldr	r0, [r7, #4]
 8013a1a:	f000 fa75 	bl	8013f08 <ip4_output_if>
 8013a1e:	4603      	mov	r3, r0
 8013a20:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8013a22:	e001      	b.n	8013a28 <icmp_input+0x1b8>
      break;
 8013a24:	bf00      	nop
 8013a26:	e000      	b.n	8013a2a <icmp_input+0x1ba>
      break;
 8013a28:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8013a2a:	6878      	ldr	r0, [r7, #4]
 8013a2c:	f7f8 f83e 	bl	800baac <pbuf_free>
  return;
 8013a30:	e013      	b.n	8013a5a <icmp_input+0x1ea>
    goto lenerr;
 8013a32:	bf00      	nop
 8013a34:	e002      	b.n	8013a3c <icmp_input+0x1cc>
    goto lenerr;
 8013a36:	bf00      	nop
 8013a38:	e000      	b.n	8013a3c <icmp_input+0x1cc>
        goto lenerr;
 8013a3a:	bf00      	nop
lenerr:
  pbuf_free(p);
 8013a3c:	6878      	ldr	r0, [r7, #4]
 8013a3e:	f7f8 f835 	bl	800baac <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013a42:	e00a      	b.n	8013a5a <icmp_input+0x1ea>
        goto icmperr;
 8013a44:	bf00      	nop
 8013a46:	e004      	b.n	8013a52 <icmp_input+0x1e2>
        goto icmperr;
 8013a48:	bf00      	nop
 8013a4a:	e002      	b.n	8013a52 <icmp_input+0x1e2>
          goto icmperr;
 8013a4c:	bf00      	nop
 8013a4e:	e000      	b.n	8013a52 <icmp_input+0x1e2>
          goto icmperr;
 8013a50:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8013a52:	6878      	ldr	r0, [r7, #4]
 8013a54:	f7f8 f82a 	bl	800baac <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013a58:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8013a5a:	3728      	adds	r7, #40	; 0x28
 8013a5c:	46bd      	mov	sp, r7
 8013a5e:	bd80      	pop	{r7, pc}
 8013a60:	200080c4 	.word	0x200080c4
 8013a64:	200080d8 	.word	0x200080d8
 8013a68:	08019600 	.word	0x08019600
 8013a6c:	08019638 	.word	0x08019638
 8013a70:	08019670 	.word	0x08019670
 8013a74:	08019698 	.word	0x08019698

08013a78 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8013a78:	b580      	push	{r7, lr}
 8013a7a:	b082      	sub	sp, #8
 8013a7c:	af00      	add	r7, sp, #0
 8013a7e:	6078      	str	r0, [r7, #4]
 8013a80:	460b      	mov	r3, r1
 8013a82:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8013a84:	78fb      	ldrb	r3, [r7, #3]
 8013a86:	461a      	mov	r2, r3
 8013a88:	2103      	movs	r1, #3
 8013a8a:	6878      	ldr	r0, [r7, #4]
 8013a8c:	f000 f814 	bl	8013ab8 <icmp_send_response>
}
 8013a90:	bf00      	nop
 8013a92:	3708      	adds	r7, #8
 8013a94:	46bd      	mov	sp, r7
 8013a96:	bd80      	pop	{r7, pc}

08013a98 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8013a98:	b580      	push	{r7, lr}
 8013a9a:	b082      	sub	sp, #8
 8013a9c:	af00      	add	r7, sp, #0
 8013a9e:	6078      	str	r0, [r7, #4]
 8013aa0:	460b      	mov	r3, r1
 8013aa2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8013aa4:	78fb      	ldrb	r3, [r7, #3]
 8013aa6:	461a      	mov	r2, r3
 8013aa8:	210b      	movs	r1, #11
 8013aaa:	6878      	ldr	r0, [r7, #4]
 8013aac:	f000 f804 	bl	8013ab8 <icmp_send_response>
}
 8013ab0:	bf00      	nop
 8013ab2:	3708      	adds	r7, #8
 8013ab4:	46bd      	mov	sp, r7
 8013ab6:	bd80      	pop	{r7, pc}

08013ab8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8013ab8:	b580      	push	{r7, lr}
 8013aba:	b08c      	sub	sp, #48	; 0x30
 8013abc:	af04      	add	r7, sp, #16
 8013abe:	6078      	str	r0, [r7, #4]
 8013ac0:	460b      	mov	r3, r1
 8013ac2:	70fb      	strb	r3, [r7, #3]
 8013ac4:	4613      	mov	r3, r2
 8013ac6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8013ac8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013acc:	2124      	movs	r1, #36	; 0x24
 8013ace:	2022      	movs	r0, #34	; 0x22
 8013ad0:	f7f7 fd08 	bl	800b4e4 <pbuf_alloc>
 8013ad4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8013ad6:	69fb      	ldr	r3, [r7, #28]
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d04c      	beq.n	8013b76 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8013adc:	69fb      	ldr	r3, [r7, #28]
 8013ade:	895b      	ldrh	r3, [r3, #10]
 8013ae0:	2b23      	cmp	r3, #35	; 0x23
 8013ae2:	d806      	bhi.n	8013af2 <icmp_send_response+0x3a>
 8013ae4:	4b26      	ldr	r3, [pc, #152]	; (8013b80 <icmp_send_response+0xc8>)
 8013ae6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8013aea:	4926      	ldr	r1, [pc, #152]	; (8013b84 <icmp_send_response+0xcc>)
 8013aec:	4826      	ldr	r0, [pc, #152]	; (8013b88 <icmp_send_response+0xd0>)
 8013aee:	f001 fd85 	bl	80155fc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	685b      	ldr	r3, [r3, #4]
 8013af6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8013af8:	69fb      	ldr	r3, [r7, #28]
 8013afa:	685b      	ldr	r3, [r3, #4]
 8013afc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8013afe:	697b      	ldr	r3, [r7, #20]
 8013b00:	78fa      	ldrb	r2, [r7, #3]
 8013b02:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8013b04:	697b      	ldr	r3, [r7, #20]
 8013b06:	78ba      	ldrb	r2, [r7, #2]
 8013b08:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8013b0a:	697b      	ldr	r3, [r7, #20]
 8013b0c:	2200      	movs	r2, #0
 8013b0e:	711a      	strb	r2, [r3, #4]
 8013b10:	2200      	movs	r2, #0
 8013b12:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8013b14:	697b      	ldr	r3, [r7, #20]
 8013b16:	2200      	movs	r2, #0
 8013b18:	719a      	strb	r2, [r3, #6]
 8013b1a:	2200      	movs	r2, #0
 8013b1c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8013b1e:	69fb      	ldr	r3, [r7, #28]
 8013b20:	685b      	ldr	r3, [r3, #4]
 8013b22:	f103 0008 	add.w	r0, r3, #8
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	685b      	ldr	r3, [r3, #4]
 8013b2a:	221c      	movs	r2, #28
 8013b2c:	4619      	mov	r1, r3
 8013b2e:	f001 fcf4 	bl	801551a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8013b32:	69bb      	ldr	r3, [r7, #24]
 8013b34:	68db      	ldr	r3, [r3, #12]
 8013b36:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8013b38:	f107 030c 	add.w	r3, r7, #12
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	f000 f825 	bl	8013b8c <ip4_route>
 8013b42:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8013b44:	693b      	ldr	r3, [r7, #16]
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d011      	beq.n	8013b6e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8013b4a:	697b      	ldr	r3, [r7, #20]
 8013b4c:	2200      	movs	r2, #0
 8013b4e:	709a      	strb	r2, [r3, #2]
 8013b50:	2200      	movs	r2, #0
 8013b52:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8013b54:	f107 020c 	add.w	r2, r7, #12
 8013b58:	693b      	ldr	r3, [r7, #16]
 8013b5a:	9302      	str	r3, [sp, #8]
 8013b5c:	2301      	movs	r3, #1
 8013b5e:	9301      	str	r3, [sp, #4]
 8013b60:	2300      	movs	r3, #0
 8013b62:	9300      	str	r3, [sp, #0]
 8013b64:	23ff      	movs	r3, #255	; 0xff
 8013b66:	2100      	movs	r1, #0
 8013b68:	69f8      	ldr	r0, [r7, #28]
 8013b6a:	f000 f9cd 	bl	8013f08 <ip4_output_if>
  }
  pbuf_free(q);
 8013b6e:	69f8      	ldr	r0, [r7, #28]
 8013b70:	f7f7 ff9c 	bl	800baac <pbuf_free>
 8013b74:	e000      	b.n	8013b78 <icmp_send_response+0xc0>
    return;
 8013b76:	bf00      	nop
}
 8013b78:	3720      	adds	r7, #32
 8013b7a:	46bd      	mov	sp, r7
 8013b7c:	bd80      	pop	{r7, pc}
 8013b7e:	bf00      	nop
 8013b80:	08019600 	.word	0x08019600
 8013b84:	080196cc 	.word	0x080196cc
 8013b88:	08019670 	.word	0x08019670

08013b8c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8013b8c:	b480      	push	{r7}
 8013b8e:	b085      	sub	sp, #20
 8013b90:	af00      	add	r7, sp, #0
 8013b92:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8013b94:	4b33      	ldr	r3, [pc, #204]	; (8013c64 <ip4_route+0xd8>)
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	60fb      	str	r3, [r7, #12]
 8013b9a:	e036      	b.n	8013c0a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013ba2:	f003 0301 	and.w	r3, r3, #1
 8013ba6:	b2db      	uxtb	r3, r3
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d02b      	beq.n	8013c04 <ip4_route+0x78>
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013bb2:	089b      	lsrs	r3, r3, #2
 8013bb4:	f003 0301 	and.w	r3, r3, #1
 8013bb8:	b2db      	uxtb	r3, r3
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d022      	beq.n	8013c04 <ip4_route+0x78>
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	3304      	adds	r3, #4
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d01d      	beq.n	8013c04 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	681a      	ldr	r2, [r3, #0]
 8013bcc:	68fb      	ldr	r3, [r7, #12]
 8013bce:	3304      	adds	r3, #4
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	405a      	eors	r2, r3
 8013bd4:	68fb      	ldr	r3, [r7, #12]
 8013bd6:	3308      	adds	r3, #8
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	4013      	ands	r3, r2
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d101      	bne.n	8013be4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	e038      	b.n	8013c56 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013bea:	f003 0302 	and.w	r3, r3, #2
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d108      	bne.n	8013c04 <ip4_route+0x78>
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	681a      	ldr	r2, [r3, #0]
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	330c      	adds	r3, #12
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	429a      	cmp	r2, r3
 8013bfe:	d101      	bne.n	8013c04 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	e028      	b.n	8013c56 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	60fb      	str	r3, [r7, #12]
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d1c5      	bne.n	8013b9c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013c10:	4b15      	ldr	r3, [pc, #84]	; (8013c68 <ip4_route+0xdc>)
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d01a      	beq.n	8013c4e <ip4_route+0xc2>
 8013c18:	4b13      	ldr	r3, [pc, #76]	; (8013c68 <ip4_route+0xdc>)
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013c20:	f003 0301 	and.w	r3, r3, #1
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d012      	beq.n	8013c4e <ip4_route+0xc2>
 8013c28:	4b0f      	ldr	r3, [pc, #60]	; (8013c68 <ip4_route+0xdc>)
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013c30:	f003 0304 	and.w	r3, r3, #4
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d00a      	beq.n	8013c4e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013c38:	4b0b      	ldr	r3, [pc, #44]	; (8013c68 <ip4_route+0xdc>)
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	3304      	adds	r3, #4
 8013c3e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d004      	beq.n	8013c4e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	b2db      	uxtb	r3, r3
 8013c4a:	2b7f      	cmp	r3, #127	; 0x7f
 8013c4c:	d101      	bne.n	8013c52 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8013c4e:	2300      	movs	r3, #0
 8013c50:	e001      	b.n	8013c56 <ip4_route+0xca>
  }

  return netif_default;
 8013c52:	4b05      	ldr	r3, [pc, #20]	; (8013c68 <ip4_route+0xdc>)
 8013c54:	681b      	ldr	r3, [r3, #0]
}
 8013c56:	4618      	mov	r0, r3
 8013c58:	3714      	adds	r7, #20
 8013c5a:	46bd      	mov	sp, r7
 8013c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c60:	4770      	bx	lr
 8013c62:	bf00      	nop
 8013c64:	2000b7c8 	.word	0x2000b7c8
 8013c68:	2000b7cc 	.word	0x2000b7cc

08013c6c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8013c6c:	b580      	push	{r7, lr}
 8013c6e:	b082      	sub	sp, #8
 8013c70:	af00      	add	r7, sp, #0
 8013c72:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013c7a:	f003 0301 	and.w	r3, r3, #1
 8013c7e:	b2db      	uxtb	r3, r3
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d016      	beq.n	8013cb2 <ip4_input_accept+0x46>
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	3304      	adds	r3, #4
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d011      	beq.n	8013cb2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013c8e:	4b0b      	ldr	r3, [pc, #44]	; (8013cbc <ip4_input_accept+0x50>)
 8013c90:	695a      	ldr	r2, [r3, #20]
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	3304      	adds	r3, #4
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	429a      	cmp	r2, r3
 8013c9a:	d008      	beq.n	8013cae <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8013c9c:	4b07      	ldr	r3, [pc, #28]	; (8013cbc <ip4_input_accept+0x50>)
 8013c9e:	695b      	ldr	r3, [r3, #20]
 8013ca0:	6879      	ldr	r1, [r7, #4]
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	f000 fa08 	bl	80140b8 <ip4_addr_isbroadcast_u32>
 8013ca8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d001      	beq.n	8013cb2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8013cae:	2301      	movs	r3, #1
 8013cb0:	e000      	b.n	8013cb4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8013cb2:	2300      	movs	r3, #0
}
 8013cb4:	4618      	mov	r0, r3
 8013cb6:	3708      	adds	r7, #8
 8013cb8:	46bd      	mov	sp, r7
 8013cba:	bd80      	pop	{r7, pc}
 8013cbc:	200080c4 	.word	0x200080c4

08013cc0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8013cc0:	b580      	push	{r7, lr}
 8013cc2:	b086      	sub	sp, #24
 8013cc4:	af00      	add	r7, sp, #0
 8013cc6:	6078      	str	r0, [r7, #4]
 8013cc8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	685b      	ldr	r3, [r3, #4]
 8013cce:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8013cd0:	697b      	ldr	r3, [r7, #20]
 8013cd2:	781b      	ldrb	r3, [r3, #0]
 8013cd4:	091b      	lsrs	r3, r3, #4
 8013cd6:	b2db      	uxtb	r3, r3
 8013cd8:	2b04      	cmp	r3, #4
 8013cda:	d004      	beq.n	8013ce6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8013cdc:	6878      	ldr	r0, [r7, #4]
 8013cde:	f7f7 fee5 	bl	800baac <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8013ce2:	2300      	movs	r3, #0
 8013ce4:	e107      	b.n	8013ef6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8013ce6:	697b      	ldr	r3, [r7, #20]
 8013ce8:	781b      	ldrb	r3, [r3, #0]
 8013cea:	f003 030f 	and.w	r3, r3, #15
 8013cee:	b2db      	uxtb	r3, r3
 8013cf0:	009b      	lsls	r3, r3, #2
 8013cf2:	b2db      	uxtb	r3, r3
 8013cf4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8013cf6:	697b      	ldr	r3, [r7, #20]
 8013cf8:	885b      	ldrh	r3, [r3, #2]
 8013cfa:	b29b      	uxth	r3, r3
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	f7f6 fb29 	bl	800a354 <lwip_htons>
 8013d02:	4603      	mov	r3, r0
 8013d04:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	891b      	ldrh	r3, [r3, #8]
 8013d0a:	89ba      	ldrh	r2, [r7, #12]
 8013d0c:	429a      	cmp	r2, r3
 8013d0e:	d204      	bcs.n	8013d1a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8013d10:	89bb      	ldrh	r3, [r7, #12]
 8013d12:	4619      	mov	r1, r3
 8013d14:	6878      	ldr	r0, [r7, #4]
 8013d16:	f7f7 fd43 	bl	800b7a0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	895b      	ldrh	r3, [r3, #10]
 8013d1e:	89fa      	ldrh	r2, [r7, #14]
 8013d20:	429a      	cmp	r2, r3
 8013d22:	d807      	bhi.n	8013d34 <ip4_input+0x74>
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	891b      	ldrh	r3, [r3, #8]
 8013d28:	89ba      	ldrh	r2, [r7, #12]
 8013d2a:	429a      	cmp	r2, r3
 8013d2c:	d802      	bhi.n	8013d34 <ip4_input+0x74>
 8013d2e:	89fb      	ldrh	r3, [r7, #14]
 8013d30:	2b13      	cmp	r3, #19
 8013d32:	d804      	bhi.n	8013d3e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8013d34:	6878      	ldr	r0, [r7, #4]
 8013d36:	f7f7 feb9 	bl	800baac <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8013d3a:	2300      	movs	r3, #0
 8013d3c:	e0db      	b.n	8013ef6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8013d3e:	697b      	ldr	r3, [r7, #20]
 8013d40:	691b      	ldr	r3, [r3, #16]
 8013d42:	4a6f      	ldr	r2, [pc, #444]	; (8013f00 <ip4_input+0x240>)
 8013d44:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8013d46:	697b      	ldr	r3, [r7, #20]
 8013d48:	68db      	ldr	r3, [r3, #12]
 8013d4a:	4a6d      	ldr	r2, [pc, #436]	; (8013f00 <ip4_input+0x240>)
 8013d4c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013d4e:	4b6c      	ldr	r3, [pc, #432]	; (8013f00 <ip4_input+0x240>)
 8013d50:	695b      	ldr	r3, [r3, #20]
 8013d52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013d56:	2be0      	cmp	r3, #224	; 0xe0
 8013d58:	d112      	bne.n	8013d80 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8013d5a:	683b      	ldr	r3, [r7, #0]
 8013d5c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013d60:	f003 0301 	and.w	r3, r3, #1
 8013d64:	b2db      	uxtb	r3, r3
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d007      	beq.n	8013d7a <ip4_input+0xba>
 8013d6a:	683b      	ldr	r3, [r7, #0]
 8013d6c:	3304      	adds	r3, #4
 8013d6e:	681b      	ldr	r3, [r3, #0]
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d002      	beq.n	8013d7a <ip4_input+0xba>
      netif = inp;
 8013d74:	683b      	ldr	r3, [r7, #0]
 8013d76:	613b      	str	r3, [r7, #16]
 8013d78:	e02a      	b.n	8013dd0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8013d7a:	2300      	movs	r3, #0
 8013d7c:	613b      	str	r3, [r7, #16]
 8013d7e:	e027      	b.n	8013dd0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8013d80:	6838      	ldr	r0, [r7, #0]
 8013d82:	f7ff ff73 	bl	8013c6c <ip4_input_accept>
 8013d86:	4603      	mov	r3, r0
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d002      	beq.n	8013d92 <ip4_input+0xd2>
      netif = inp;
 8013d8c:	683b      	ldr	r3, [r7, #0]
 8013d8e:	613b      	str	r3, [r7, #16]
 8013d90:	e01e      	b.n	8013dd0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8013d92:	2300      	movs	r3, #0
 8013d94:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8013d96:	4b5a      	ldr	r3, [pc, #360]	; (8013f00 <ip4_input+0x240>)
 8013d98:	695b      	ldr	r3, [r3, #20]
 8013d9a:	b2db      	uxtb	r3, r3
 8013d9c:	2b7f      	cmp	r3, #127	; 0x7f
 8013d9e:	d017      	beq.n	8013dd0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8013da0:	4b58      	ldr	r3, [pc, #352]	; (8013f04 <ip4_input+0x244>)
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	613b      	str	r3, [r7, #16]
 8013da6:	e00e      	b.n	8013dc6 <ip4_input+0x106>
          if (netif == inp) {
 8013da8:	693a      	ldr	r2, [r7, #16]
 8013daa:	683b      	ldr	r3, [r7, #0]
 8013dac:	429a      	cmp	r2, r3
 8013dae:	d006      	beq.n	8013dbe <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8013db0:	6938      	ldr	r0, [r7, #16]
 8013db2:	f7ff ff5b 	bl	8013c6c <ip4_input_accept>
 8013db6:	4603      	mov	r3, r0
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d108      	bne.n	8013dce <ip4_input+0x10e>
 8013dbc:	e000      	b.n	8013dc0 <ip4_input+0x100>
            continue;
 8013dbe:	bf00      	nop
        NETIF_FOREACH(netif) {
 8013dc0:	693b      	ldr	r3, [r7, #16]
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	613b      	str	r3, [r7, #16]
 8013dc6:	693b      	ldr	r3, [r7, #16]
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d1ed      	bne.n	8013da8 <ip4_input+0xe8>
 8013dcc:	e000      	b.n	8013dd0 <ip4_input+0x110>
            break;
 8013dce:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013dd0:	4b4b      	ldr	r3, [pc, #300]	; (8013f00 <ip4_input+0x240>)
 8013dd2:	691b      	ldr	r3, [r3, #16]
 8013dd4:	6839      	ldr	r1, [r7, #0]
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	f000 f96e 	bl	80140b8 <ip4_addr_isbroadcast_u32>
 8013ddc:	4603      	mov	r3, r0
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d105      	bne.n	8013dee <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8013de2:	4b47      	ldr	r3, [pc, #284]	; (8013f00 <ip4_input+0x240>)
 8013de4:	691b      	ldr	r3, [r3, #16]
 8013de6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013dea:	2be0      	cmp	r3, #224	; 0xe0
 8013dec:	d104      	bne.n	8013df8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8013dee:	6878      	ldr	r0, [r7, #4]
 8013df0:	f7f7 fe5c 	bl	800baac <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8013df4:	2300      	movs	r3, #0
 8013df6:	e07e      	b.n	8013ef6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8013df8:	693b      	ldr	r3, [r7, #16]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d104      	bne.n	8013e08 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8013dfe:	6878      	ldr	r0, [r7, #4]
 8013e00:	f7f7 fe54 	bl	800baac <pbuf_free>
    return ERR_OK;
 8013e04:	2300      	movs	r3, #0
 8013e06:	e076      	b.n	8013ef6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8013e08:	697b      	ldr	r3, [r7, #20]
 8013e0a:	88db      	ldrh	r3, [r3, #6]
 8013e0c:	b29b      	uxth	r3, r3
 8013e0e:	461a      	mov	r2, r3
 8013e10:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8013e14:	4013      	ands	r3, r2
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d00b      	beq.n	8013e32 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8013e1a:	6878      	ldr	r0, [r7, #4]
 8013e1c:	f000 fc92 	bl	8014744 <ip4_reass>
 8013e20:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d101      	bne.n	8013e2c <ip4_input+0x16c>
      return ERR_OK;
 8013e28:	2300      	movs	r3, #0
 8013e2a:	e064      	b.n	8013ef6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	685b      	ldr	r3, [r3, #4]
 8013e30:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8013e32:	4a33      	ldr	r2, [pc, #204]	; (8013f00 <ip4_input+0x240>)
 8013e34:	693b      	ldr	r3, [r7, #16]
 8013e36:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8013e38:	4a31      	ldr	r2, [pc, #196]	; (8013f00 <ip4_input+0x240>)
 8013e3a:	683b      	ldr	r3, [r7, #0]
 8013e3c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8013e3e:	4a30      	ldr	r2, [pc, #192]	; (8013f00 <ip4_input+0x240>)
 8013e40:	697b      	ldr	r3, [r7, #20]
 8013e42:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8013e44:	697b      	ldr	r3, [r7, #20]
 8013e46:	781b      	ldrb	r3, [r3, #0]
 8013e48:	f003 030f 	and.w	r3, r3, #15
 8013e4c:	b2db      	uxtb	r3, r3
 8013e4e:	009b      	lsls	r3, r3, #2
 8013e50:	b2db      	uxtb	r3, r3
 8013e52:	b29a      	uxth	r2, r3
 8013e54:	4b2a      	ldr	r3, [pc, #168]	; (8013f00 <ip4_input+0x240>)
 8013e56:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8013e58:	89fb      	ldrh	r3, [r7, #14]
 8013e5a:	4619      	mov	r1, r3
 8013e5c:	6878      	ldr	r0, [r7, #4]
 8013e5e:	f7f7 fd9f 	bl	800b9a0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8013e62:	697b      	ldr	r3, [r7, #20]
 8013e64:	7a5b      	ldrb	r3, [r3, #9]
 8013e66:	2b11      	cmp	r3, #17
 8013e68:	d006      	beq.n	8013e78 <ip4_input+0x1b8>
 8013e6a:	2b11      	cmp	r3, #17
 8013e6c:	dc13      	bgt.n	8013e96 <ip4_input+0x1d6>
 8013e6e:	2b01      	cmp	r3, #1
 8013e70:	d00c      	beq.n	8013e8c <ip4_input+0x1cc>
 8013e72:	2b06      	cmp	r3, #6
 8013e74:	d005      	beq.n	8013e82 <ip4_input+0x1c2>
 8013e76:	e00e      	b.n	8013e96 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8013e78:	6839      	ldr	r1, [r7, #0]
 8013e7a:	6878      	ldr	r0, [r7, #4]
 8013e7c:	f7fe fb5a 	bl	8012534 <udp_input>
        break;
 8013e80:	e026      	b.n	8013ed0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8013e82:	6839      	ldr	r1, [r7, #0]
 8013e84:	6878      	ldr	r0, [r7, #4]
 8013e86:	f7f9 ff17 	bl	800dcb8 <tcp_input>
        break;
 8013e8a:	e021      	b.n	8013ed0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8013e8c:	6839      	ldr	r1, [r7, #0]
 8013e8e:	6878      	ldr	r0, [r7, #4]
 8013e90:	f7ff fcee 	bl	8013870 <icmp_input>
        break;
 8013e94:	e01c      	b.n	8013ed0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013e96:	4b1a      	ldr	r3, [pc, #104]	; (8013f00 <ip4_input+0x240>)
 8013e98:	695b      	ldr	r3, [r3, #20]
 8013e9a:	6939      	ldr	r1, [r7, #16]
 8013e9c:	4618      	mov	r0, r3
 8013e9e:	f000 f90b 	bl	80140b8 <ip4_addr_isbroadcast_u32>
 8013ea2:	4603      	mov	r3, r0
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d10f      	bne.n	8013ec8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013ea8:	4b15      	ldr	r3, [pc, #84]	; (8013f00 <ip4_input+0x240>)
 8013eaa:	695b      	ldr	r3, [r3, #20]
 8013eac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013eb0:	2be0      	cmp	r3, #224	; 0xe0
 8013eb2:	d009      	beq.n	8013ec8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8013eb4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013eb8:	4619      	mov	r1, r3
 8013eba:	6878      	ldr	r0, [r7, #4]
 8013ebc:	f7f7 fde3 	bl	800ba86 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8013ec0:	2102      	movs	r1, #2
 8013ec2:	6878      	ldr	r0, [r7, #4]
 8013ec4:	f7ff fdd8 	bl	8013a78 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8013ec8:	6878      	ldr	r0, [r7, #4]
 8013eca:	f7f7 fdef 	bl	800baac <pbuf_free>
        break;
 8013ece:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8013ed0:	4b0b      	ldr	r3, [pc, #44]	; (8013f00 <ip4_input+0x240>)
 8013ed2:	2200      	movs	r2, #0
 8013ed4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8013ed6:	4b0a      	ldr	r3, [pc, #40]	; (8013f00 <ip4_input+0x240>)
 8013ed8:	2200      	movs	r2, #0
 8013eda:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8013edc:	4b08      	ldr	r3, [pc, #32]	; (8013f00 <ip4_input+0x240>)
 8013ede:	2200      	movs	r2, #0
 8013ee0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8013ee2:	4b07      	ldr	r3, [pc, #28]	; (8013f00 <ip4_input+0x240>)
 8013ee4:	2200      	movs	r2, #0
 8013ee6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013ee8:	4b05      	ldr	r3, [pc, #20]	; (8013f00 <ip4_input+0x240>)
 8013eea:	2200      	movs	r2, #0
 8013eec:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8013eee:	4b04      	ldr	r3, [pc, #16]	; (8013f00 <ip4_input+0x240>)
 8013ef0:	2200      	movs	r2, #0
 8013ef2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8013ef4:	2300      	movs	r3, #0
}
 8013ef6:	4618      	mov	r0, r3
 8013ef8:	3718      	adds	r7, #24
 8013efa:	46bd      	mov	sp, r7
 8013efc:	bd80      	pop	{r7, pc}
 8013efe:	bf00      	nop
 8013f00:	200080c4 	.word	0x200080c4
 8013f04:	2000b7c8 	.word	0x2000b7c8

08013f08 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8013f08:	b580      	push	{r7, lr}
 8013f0a:	b08a      	sub	sp, #40	; 0x28
 8013f0c:	af04      	add	r7, sp, #16
 8013f0e:	60f8      	str	r0, [r7, #12]
 8013f10:	60b9      	str	r1, [r7, #8]
 8013f12:	607a      	str	r2, [r7, #4]
 8013f14:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8013f16:	68bb      	ldr	r3, [r7, #8]
 8013f18:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d009      	beq.n	8013f34 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8013f20:	68bb      	ldr	r3, [r7, #8]
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d003      	beq.n	8013f2e <ip4_output_if+0x26>
 8013f26:	68bb      	ldr	r3, [r7, #8]
 8013f28:	681b      	ldr	r3, [r3, #0]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d102      	bne.n	8013f34 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8013f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f30:	3304      	adds	r3, #4
 8013f32:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8013f34:	78fa      	ldrb	r2, [r7, #3]
 8013f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f38:	9302      	str	r3, [sp, #8]
 8013f3a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013f3e:	9301      	str	r3, [sp, #4]
 8013f40:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013f44:	9300      	str	r3, [sp, #0]
 8013f46:	4613      	mov	r3, r2
 8013f48:	687a      	ldr	r2, [r7, #4]
 8013f4a:	6979      	ldr	r1, [r7, #20]
 8013f4c:	68f8      	ldr	r0, [r7, #12]
 8013f4e:	f000 f805 	bl	8013f5c <ip4_output_if_src>
 8013f52:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8013f54:	4618      	mov	r0, r3
 8013f56:	3718      	adds	r7, #24
 8013f58:	46bd      	mov	sp, r7
 8013f5a:	bd80      	pop	{r7, pc}

08013f5c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8013f5c:	b580      	push	{r7, lr}
 8013f5e:	b088      	sub	sp, #32
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	60f8      	str	r0, [r7, #12]
 8013f64:	60b9      	str	r1, [r7, #8]
 8013f66:	607a      	str	r2, [r7, #4]
 8013f68:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	7b9b      	ldrb	r3, [r3, #14]
 8013f6e:	2b01      	cmp	r3, #1
 8013f70:	d006      	beq.n	8013f80 <ip4_output_if_src+0x24>
 8013f72:	4b4b      	ldr	r3, [pc, #300]	; (80140a0 <ip4_output_if_src+0x144>)
 8013f74:	f44f 7255 	mov.w	r2, #852	; 0x354
 8013f78:	494a      	ldr	r1, [pc, #296]	; (80140a4 <ip4_output_if_src+0x148>)
 8013f7a:	484b      	ldr	r0, [pc, #300]	; (80140a8 <ip4_output_if_src+0x14c>)
 8013f7c:	f001 fb3e 	bl	80155fc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d060      	beq.n	8014048 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8013f86:	2314      	movs	r3, #20
 8013f88:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8013f8a:	2114      	movs	r1, #20
 8013f8c:	68f8      	ldr	r0, [r7, #12]
 8013f8e:	f7f7 fcf7 	bl	800b980 <pbuf_add_header>
 8013f92:	4603      	mov	r3, r0
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d002      	beq.n	8013f9e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013f98:	f06f 0301 	mvn.w	r3, #1
 8013f9c:	e07c      	b.n	8014098 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8013f9e:	68fb      	ldr	r3, [r7, #12]
 8013fa0:	685b      	ldr	r3, [r3, #4]
 8013fa2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	895b      	ldrh	r3, [r3, #10]
 8013fa8:	2b13      	cmp	r3, #19
 8013faa:	d806      	bhi.n	8013fba <ip4_output_if_src+0x5e>
 8013fac:	4b3c      	ldr	r3, [pc, #240]	; (80140a0 <ip4_output_if_src+0x144>)
 8013fae:	f44f 7262 	mov.w	r2, #904	; 0x388
 8013fb2:	493e      	ldr	r1, [pc, #248]	; (80140ac <ip4_output_if_src+0x150>)
 8013fb4:	483c      	ldr	r0, [pc, #240]	; (80140a8 <ip4_output_if_src+0x14c>)
 8013fb6:	f001 fb21 	bl	80155fc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8013fba:	69fb      	ldr	r3, [r7, #28]
 8013fbc:	78fa      	ldrb	r2, [r7, #3]
 8013fbe:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8013fc0:	69fb      	ldr	r3, [r7, #28]
 8013fc2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8013fc6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	681a      	ldr	r2, [r3, #0]
 8013fcc:	69fb      	ldr	r3, [r7, #28]
 8013fce:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8013fd0:	8b7b      	ldrh	r3, [r7, #26]
 8013fd2:	089b      	lsrs	r3, r3, #2
 8013fd4:	b29b      	uxth	r3, r3
 8013fd6:	b2db      	uxtb	r3, r3
 8013fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013fdc:	b2da      	uxtb	r2, r3
 8013fde:	69fb      	ldr	r3, [r7, #28]
 8013fe0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8013fe2:	69fb      	ldr	r3, [r7, #28]
 8013fe4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013fe8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	891b      	ldrh	r3, [r3, #8]
 8013fee:	4618      	mov	r0, r3
 8013ff0:	f7f6 f9b0 	bl	800a354 <lwip_htons>
 8013ff4:	4603      	mov	r3, r0
 8013ff6:	461a      	mov	r2, r3
 8013ff8:	69fb      	ldr	r3, [r7, #28]
 8013ffa:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8013ffc:	69fb      	ldr	r3, [r7, #28]
 8013ffe:	2200      	movs	r2, #0
 8014000:	719a      	strb	r2, [r3, #6]
 8014002:	2200      	movs	r2, #0
 8014004:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8014006:	4b2a      	ldr	r3, [pc, #168]	; (80140b0 <ip4_output_if_src+0x154>)
 8014008:	881b      	ldrh	r3, [r3, #0]
 801400a:	4618      	mov	r0, r3
 801400c:	f7f6 f9a2 	bl	800a354 <lwip_htons>
 8014010:	4603      	mov	r3, r0
 8014012:	461a      	mov	r2, r3
 8014014:	69fb      	ldr	r3, [r7, #28]
 8014016:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8014018:	4b25      	ldr	r3, [pc, #148]	; (80140b0 <ip4_output_if_src+0x154>)
 801401a:	881b      	ldrh	r3, [r3, #0]
 801401c:	3301      	adds	r3, #1
 801401e:	b29a      	uxth	r2, r3
 8014020:	4b23      	ldr	r3, [pc, #140]	; (80140b0 <ip4_output_if_src+0x154>)
 8014022:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8014024:	68bb      	ldr	r3, [r7, #8]
 8014026:	2b00      	cmp	r3, #0
 8014028:	d104      	bne.n	8014034 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801402a:	4b22      	ldr	r3, [pc, #136]	; (80140b4 <ip4_output_if_src+0x158>)
 801402c:	681a      	ldr	r2, [r3, #0]
 801402e:	69fb      	ldr	r3, [r7, #28]
 8014030:	60da      	str	r2, [r3, #12]
 8014032:	e003      	b.n	801403c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8014034:	68bb      	ldr	r3, [r7, #8]
 8014036:	681a      	ldr	r2, [r3, #0]
 8014038:	69fb      	ldr	r3, [r7, #28]
 801403a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801403c:	69fb      	ldr	r3, [r7, #28]
 801403e:	2200      	movs	r2, #0
 8014040:	729a      	strb	r2, [r3, #10]
 8014042:	2200      	movs	r2, #0
 8014044:	72da      	strb	r2, [r3, #11]
 8014046:	e00f      	b.n	8014068 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	895b      	ldrh	r3, [r3, #10]
 801404c:	2b13      	cmp	r3, #19
 801404e:	d802      	bhi.n	8014056 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014050:	f06f 0301 	mvn.w	r3, #1
 8014054:	e020      	b.n	8014098 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8014056:	68fb      	ldr	r3, [r7, #12]
 8014058:	685b      	ldr	r3, [r3, #4]
 801405a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801405c:	69fb      	ldr	r3, [r7, #28]
 801405e:	691b      	ldr	r3, [r3, #16]
 8014060:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8014062:	f107 0314 	add.w	r3, r7, #20
 8014066:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8014068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801406a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801406c:	2b00      	cmp	r3, #0
 801406e:	d00c      	beq.n	801408a <ip4_output_if_src+0x12e>
 8014070:	68fb      	ldr	r3, [r7, #12]
 8014072:	891a      	ldrh	r2, [r3, #8]
 8014074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014076:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014078:	429a      	cmp	r2, r3
 801407a:	d906      	bls.n	801408a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801407c:	687a      	ldr	r2, [r7, #4]
 801407e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014080:	68f8      	ldr	r0, [r7, #12]
 8014082:	f000 fd4d 	bl	8014b20 <ip4_frag>
 8014086:	4603      	mov	r3, r0
 8014088:	e006      	b.n	8014098 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801408a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801408c:	695b      	ldr	r3, [r3, #20]
 801408e:	687a      	ldr	r2, [r7, #4]
 8014090:	68f9      	ldr	r1, [r7, #12]
 8014092:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014094:	4798      	blx	r3
 8014096:	4603      	mov	r3, r0
}
 8014098:	4618      	mov	r0, r3
 801409a:	3720      	adds	r7, #32
 801409c:	46bd      	mov	sp, r7
 801409e:	bd80      	pop	{r7, pc}
 80140a0:	080196f8 	.word	0x080196f8
 80140a4:	0801972c 	.word	0x0801972c
 80140a8:	08019738 	.word	0x08019738
 80140ac:	08019760 	.word	0x08019760
 80140b0:	20004c02 	.word	0x20004c02
 80140b4:	08019fa4 	.word	0x08019fa4

080140b8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80140b8:	b480      	push	{r7}
 80140ba:	b085      	sub	sp, #20
 80140bc:	af00      	add	r7, sp, #0
 80140be:	6078      	str	r0, [r7, #4]
 80140c0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80140cc:	d002      	beq.n	80140d4 <ip4_addr_isbroadcast_u32+0x1c>
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d101      	bne.n	80140d8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80140d4:	2301      	movs	r3, #1
 80140d6:	e02a      	b.n	801412e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80140d8:	683b      	ldr	r3, [r7, #0]
 80140da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80140de:	f003 0302 	and.w	r3, r3, #2
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d101      	bne.n	80140ea <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80140e6:	2300      	movs	r3, #0
 80140e8:	e021      	b.n	801412e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80140ea:	683b      	ldr	r3, [r7, #0]
 80140ec:	3304      	adds	r3, #4
 80140ee:	681b      	ldr	r3, [r3, #0]
 80140f0:	687a      	ldr	r2, [r7, #4]
 80140f2:	429a      	cmp	r2, r3
 80140f4:	d101      	bne.n	80140fa <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80140f6:	2300      	movs	r3, #0
 80140f8:	e019      	b.n	801412e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80140fa:	68fa      	ldr	r2, [r7, #12]
 80140fc:	683b      	ldr	r3, [r7, #0]
 80140fe:	3304      	adds	r3, #4
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	405a      	eors	r2, r3
 8014104:	683b      	ldr	r3, [r7, #0]
 8014106:	3308      	adds	r3, #8
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	4013      	ands	r3, r2
 801410c:	2b00      	cmp	r3, #0
 801410e:	d10d      	bne.n	801412c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014110:	683b      	ldr	r3, [r7, #0]
 8014112:	3308      	adds	r3, #8
 8014114:	681b      	ldr	r3, [r3, #0]
 8014116:	43da      	mvns	r2, r3
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801411c:	683b      	ldr	r3, [r7, #0]
 801411e:	3308      	adds	r3, #8
 8014120:	681b      	ldr	r3, [r3, #0]
 8014122:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014124:	429a      	cmp	r2, r3
 8014126:	d101      	bne.n	801412c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8014128:	2301      	movs	r3, #1
 801412a:	e000      	b.n	801412e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801412c:	2300      	movs	r3, #0
  }
}
 801412e:	4618      	mov	r0, r3
 8014130:	3714      	adds	r7, #20
 8014132:	46bd      	mov	sp, r7
 8014134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014138:	4770      	bx	lr
	...

0801413c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801413c:	b580      	push	{r7, lr}
 801413e:	b084      	sub	sp, #16
 8014140:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8014142:	2300      	movs	r3, #0
 8014144:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8014146:	4b12      	ldr	r3, [pc, #72]	; (8014190 <ip_reass_tmr+0x54>)
 8014148:	681b      	ldr	r3, [r3, #0]
 801414a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801414c:	e018      	b.n	8014180 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	7fdb      	ldrb	r3, [r3, #31]
 8014152:	2b00      	cmp	r3, #0
 8014154:	d00b      	beq.n	801416e <ip_reass_tmr+0x32>
      r->timer--;
 8014156:	68fb      	ldr	r3, [r7, #12]
 8014158:	7fdb      	ldrb	r3, [r3, #31]
 801415a:	3b01      	subs	r3, #1
 801415c:	b2da      	uxtb	r2, r3
 801415e:	68fb      	ldr	r3, [r7, #12]
 8014160:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8014166:	68fb      	ldr	r3, [r7, #12]
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	60fb      	str	r3, [r7, #12]
 801416c:	e008      	b.n	8014180 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8014172:	68fb      	ldr	r3, [r7, #12]
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8014178:	68b9      	ldr	r1, [r7, #8]
 801417a:	6878      	ldr	r0, [r7, #4]
 801417c:	f000 f80a 	bl	8014194 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8014180:	68fb      	ldr	r3, [r7, #12]
 8014182:	2b00      	cmp	r3, #0
 8014184:	d1e3      	bne.n	801414e <ip_reass_tmr+0x12>
    }
  }
}
 8014186:	bf00      	nop
 8014188:	bf00      	nop
 801418a:	3710      	adds	r7, #16
 801418c:	46bd      	mov	sp, r7
 801418e:	bd80      	pop	{r7, pc}
 8014190:	20004c04 	.word	0x20004c04

08014194 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014194:	b580      	push	{r7, lr}
 8014196:	b088      	sub	sp, #32
 8014198:	af00      	add	r7, sp, #0
 801419a:	6078      	str	r0, [r7, #4]
 801419c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801419e:	2300      	movs	r3, #0
 80141a0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80141a2:	683a      	ldr	r2, [r7, #0]
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	429a      	cmp	r2, r3
 80141a8:	d105      	bne.n	80141b6 <ip_reass_free_complete_datagram+0x22>
 80141aa:	4b45      	ldr	r3, [pc, #276]	; (80142c0 <ip_reass_free_complete_datagram+0x12c>)
 80141ac:	22ab      	movs	r2, #171	; 0xab
 80141ae:	4945      	ldr	r1, [pc, #276]	; (80142c4 <ip_reass_free_complete_datagram+0x130>)
 80141b0:	4845      	ldr	r0, [pc, #276]	; (80142c8 <ip_reass_free_complete_datagram+0x134>)
 80141b2:	f001 fa23 	bl	80155fc <iprintf>
  if (prev != NULL) {
 80141b6:	683b      	ldr	r3, [r7, #0]
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d00a      	beq.n	80141d2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80141bc:	683b      	ldr	r3, [r7, #0]
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	687a      	ldr	r2, [r7, #4]
 80141c2:	429a      	cmp	r2, r3
 80141c4:	d005      	beq.n	80141d2 <ip_reass_free_complete_datagram+0x3e>
 80141c6:	4b3e      	ldr	r3, [pc, #248]	; (80142c0 <ip_reass_free_complete_datagram+0x12c>)
 80141c8:	22ad      	movs	r2, #173	; 0xad
 80141ca:	4940      	ldr	r1, [pc, #256]	; (80142cc <ip_reass_free_complete_datagram+0x138>)
 80141cc:	483e      	ldr	r0, [pc, #248]	; (80142c8 <ip_reass_free_complete_datagram+0x134>)
 80141ce:	f001 fa15 	bl	80155fc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	685b      	ldr	r3, [r3, #4]
 80141d6:	685b      	ldr	r3, [r3, #4]
 80141d8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80141da:	697b      	ldr	r3, [r7, #20]
 80141dc:	889b      	ldrh	r3, [r3, #4]
 80141de:	b29b      	uxth	r3, r3
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d12a      	bne.n	801423a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	685b      	ldr	r3, [r3, #4]
 80141e8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80141ea:	697b      	ldr	r3, [r7, #20]
 80141ec:	681a      	ldr	r2, [r3, #0]
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80141f2:	69bb      	ldr	r3, [r7, #24]
 80141f4:	6858      	ldr	r0, [r3, #4]
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	3308      	adds	r3, #8
 80141fa:	2214      	movs	r2, #20
 80141fc:	4619      	mov	r1, r3
 80141fe:	f001 f98c 	bl	801551a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8014202:	2101      	movs	r1, #1
 8014204:	69b8      	ldr	r0, [r7, #24]
 8014206:	f7ff fc47 	bl	8013a98 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801420a:	69b8      	ldr	r0, [r7, #24]
 801420c:	f7f7 fcdc 	bl	800bbc8 <pbuf_clen>
 8014210:	4603      	mov	r3, r0
 8014212:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014214:	8bfa      	ldrh	r2, [r7, #30]
 8014216:	8a7b      	ldrh	r3, [r7, #18]
 8014218:	4413      	add	r3, r2
 801421a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801421e:	db05      	blt.n	801422c <ip_reass_free_complete_datagram+0x98>
 8014220:	4b27      	ldr	r3, [pc, #156]	; (80142c0 <ip_reass_free_complete_datagram+0x12c>)
 8014222:	22bc      	movs	r2, #188	; 0xbc
 8014224:	492a      	ldr	r1, [pc, #168]	; (80142d0 <ip_reass_free_complete_datagram+0x13c>)
 8014226:	4828      	ldr	r0, [pc, #160]	; (80142c8 <ip_reass_free_complete_datagram+0x134>)
 8014228:	f001 f9e8 	bl	80155fc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801422c:	8bfa      	ldrh	r2, [r7, #30]
 801422e:	8a7b      	ldrh	r3, [r7, #18]
 8014230:	4413      	add	r3, r2
 8014232:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8014234:	69b8      	ldr	r0, [r7, #24]
 8014236:	f7f7 fc39 	bl	800baac <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	685b      	ldr	r3, [r3, #4]
 801423e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8014240:	e01f      	b.n	8014282 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8014242:	69bb      	ldr	r3, [r7, #24]
 8014244:	685b      	ldr	r3, [r3, #4]
 8014246:	617b      	str	r3, [r7, #20]
    pcur = p;
 8014248:	69bb      	ldr	r3, [r7, #24]
 801424a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801424c:	697b      	ldr	r3, [r7, #20]
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8014252:	68f8      	ldr	r0, [r7, #12]
 8014254:	f7f7 fcb8 	bl	800bbc8 <pbuf_clen>
 8014258:	4603      	mov	r3, r0
 801425a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801425c:	8bfa      	ldrh	r2, [r7, #30]
 801425e:	8a7b      	ldrh	r3, [r7, #18]
 8014260:	4413      	add	r3, r2
 8014262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014266:	db05      	blt.n	8014274 <ip_reass_free_complete_datagram+0xe0>
 8014268:	4b15      	ldr	r3, [pc, #84]	; (80142c0 <ip_reass_free_complete_datagram+0x12c>)
 801426a:	22cc      	movs	r2, #204	; 0xcc
 801426c:	4918      	ldr	r1, [pc, #96]	; (80142d0 <ip_reass_free_complete_datagram+0x13c>)
 801426e:	4816      	ldr	r0, [pc, #88]	; (80142c8 <ip_reass_free_complete_datagram+0x134>)
 8014270:	f001 f9c4 	bl	80155fc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014274:	8bfa      	ldrh	r2, [r7, #30]
 8014276:	8a7b      	ldrh	r3, [r7, #18]
 8014278:	4413      	add	r3, r2
 801427a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801427c:	68f8      	ldr	r0, [r7, #12]
 801427e:	f7f7 fc15 	bl	800baac <pbuf_free>
  while (p != NULL) {
 8014282:	69bb      	ldr	r3, [r7, #24]
 8014284:	2b00      	cmp	r3, #0
 8014286:	d1dc      	bne.n	8014242 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8014288:	6839      	ldr	r1, [r7, #0]
 801428a:	6878      	ldr	r0, [r7, #4]
 801428c:	f000 f8c2 	bl	8014414 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8014290:	4b10      	ldr	r3, [pc, #64]	; (80142d4 <ip_reass_free_complete_datagram+0x140>)
 8014292:	881b      	ldrh	r3, [r3, #0]
 8014294:	8bfa      	ldrh	r2, [r7, #30]
 8014296:	429a      	cmp	r2, r3
 8014298:	d905      	bls.n	80142a6 <ip_reass_free_complete_datagram+0x112>
 801429a:	4b09      	ldr	r3, [pc, #36]	; (80142c0 <ip_reass_free_complete_datagram+0x12c>)
 801429c:	22d2      	movs	r2, #210	; 0xd2
 801429e:	490e      	ldr	r1, [pc, #56]	; (80142d8 <ip_reass_free_complete_datagram+0x144>)
 80142a0:	4809      	ldr	r0, [pc, #36]	; (80142c8 <ip_reass_free_complete_datagram+0x134>)
 80142a2:	f001 f9ab 	bl	80155fc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80142a6:	4b0b      	ldr	r3, [pc, #44]	; (80142d4 <ip_reass_free_complete_datagram+0x140>)
 80142a8:	881a      	ldrh	r2, [r3, #0]
 80142aa:	8bfb      	ldrh	r3, [r7, #30]
 80142ac:	1ad3      	subs	r3, r2, r3
 80142ae:	b29a      	uxth	r2, r3
 80142b0:	4b08      	ldr	r3, [pc, #32]	; (80142d4 <ip_reass_free_complete_datagram+0x140>)
 80142b2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80142b4:	8bfb      	ldrh	r3, [r7, #30]
}
 80142b6:	4618      	mov	r0, r3
 80142b8:	3720      	adds	r7, #32
 80142ba:	46bd      	mov	sp, r7
 80142bc:	bd80      	pop	{r7, pc}
 80142be:	bf00      	nop
 80142c0:	08019790 	.word	0x08019790
 80142c4:	080197cc 	.word	0x080197cc
 80142c8:	080197d8 	.word	0x080197d8
 80142cc:	08019800 	.word	0x08019800
 80142d0:	08019814 	.word	0x08019814
 80142d4:	20004c08 	.word	0x20004c08
 80142d8:	08019834 	.word	0x08019834

080142dc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80142dc:	b580      	push	{r7, lr}
 80142de:	b08a      	sub	sp, #40	; 0x28
 80142e0:	af00      	add	r7, sp, #0
 80142e2:	6078      	str	r0, [r7, #4]
 80142e4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80142e6:	2300      	movs	r3, #0
 80142e8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80142ea:	2300      	movs	r3, #0
 80142ec:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80142ee:	2300      	movs	r3, #0
 80142f0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80142f2:	2300      	movs	r3, #0
 80142f4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80142f6:	2300      	movs	r3, #0
 80142f8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80142fa:	4b28      	ldr	r3, [pc, #160]	; (801439c <ip_reass_remove_oldest_datagram+0xc0>)
 80142fc:	681b      	ldr	r3, [r3, #0]
 80142fe:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014300:	e030      	b.n	8014364 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8014302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014304:	695a      	ldr	r2, [r3, #20]
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	68db      	ldr	r3, [r3, #12]
 801430a:	429a      	cmp	r2, r3
 801430c:	d10c      	bne.n	8014328 <ip_reass_remove_oldest_datagram+0x4c>
 801430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014310:	699a      	ldr	r2, [r3, #24]
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	691b      	ldr	r3, [r3, #16]
 8014316:	429a      	cmp	r2, r3
 8014318:	d106      	bne.n	8014328 <ip_reass_remove_oldest_datagram+0x4c>
 801431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801431c:	899a      	ldrh	r2, [r3, #12]
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	889b      	ldrh	r3, [r3, #4]
 8014322:	b29b      	uxth	r3, r3
 8014324:	429a      	cmp	r2, r3
 8014326:	d014      	beq.n	8014352 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8014328:	693b      	ldr	r3, [r7, #16]
 801432a:	3301      	adds	r3, #1
 801432c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801432e:	6a3b      	ldr	r3, [r7, #32]
 8014330:	2b00      	cmp	r3, #0
 8014332:	d104      	bne.n	801433e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8014334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014336:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014338:	69fb      	ldr	r3, [r7, #28]
 801433a:	61bb      	str	r3, [r7, #24]
 801433c:	e009      	b.n	8014352 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801433e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014340:	7fda      	ldrb	r2, [r3, #31]
 8014342:	6a3b      	ldr	r3, [r7, #32]
 8014344:	7fdb      	ldrb	r3, [r3, #31]
 8014346:	429a      	cmp	r2, r3
 8014348:	d803      	bhi.n	8014352 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801434a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801434c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801434e:	69fb      	ldr	r3, [r7, #28]
 8014350:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8014352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014354:	681b      	ldr	r3, [r3, #0]
 8014356:	2b00      	cmp	r3, #0
 8014358:	d001      	beq.n	801435e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801435c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014366:	2b00      	cmp	r3, #0
 8014368:	d1cb      	bne.n	8014302 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801436a:	6a3b      	ldr	r3, [r7, #32]
 801436c:	2b00      	cmp	r3, #0
 801436e:	d008      	beq.n	8014382 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8014370:	69b9      	ldr	r1, [r7, #24]
 8014372:	6a38      	ldr	r0, [r7, #32]
 8014374:	f7ff ff0e 	bl	8014194 <ip_reass_free_complete_datagram>
 8014378:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801437a:	697a      	ldr	r2, [r7, #20]
 801437c:	68fb      	ldr	r3, [r7, #12]
 801437e:	4413      	add	r3, r2
 8014380:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8014382:	697a      	ldr	r2, [r7, #20]
 8014384:	683b      	ldr	r3, [r7, #0]
 8014386:	429a      	cmp	r2, r3
 8014388:	da02      	bge.n	8014390 <ip_reass_remove_oldest_datagram+0xb4>
 801438a:	693b      	ldr	r3, [r7, #16]
 801438c:	2b01      	cmp	r3, #1
 801438e:	dcac      	bgt.n	80142ea <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8014390:	697b      	ldr	r3, [r7, #20]
}
 8014392:	4618      	mov	r0, r3
 8014394:	3728      	adds	r7, #40	; 0x28
 8014396:	46bd      	mov	sp, r7
 8014398:	bd80      	pop	{r7, pc}
 801439a:	bf00      	nop
 801439c:	20004c04 	.word	0x20004c04

080143a0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80143a0:	b580      	push	{r7, lr}
 80143a2:	b084      	sub	sp, #16
 80143a4:	af00      	add	r7, sp, #0
 80143a6:	6078      	str	r0, [r7, #4]
 80143a8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80143aa:	2004      	movs	r0, #4
 80143ac:	f7f6 fc88 	bl	800acc0 <memp_malloc>
 80143b0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d110      	bne.n	80143da <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80143b8:	6839      	ldr	r1, [r7, #0]
 80143ba:	6878      	ldr	r0, [r7, #4]
 80143bc:	f7ff ff8e 	bl	80142dc <ip_reass_remove_oldest_datagram>
 80143c0:	4602      	mov	r2, r0
 80143c2:	683b      	ldr	r3, [r7, #0]
 80143c4:	4293      	cmp	r3, r2
 80143c6:	dc03      	bgt.n	80143d0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80143c8:	2004      	movs	r0, #4
 80143ca:	f7f6 fc79 	bl	800acc0 <memp_malloc>
 80143ce:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d101      	bne.n	80143da <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80143d6:	2300      	movs	r3, #0
 80143d8:	e016      	b.n	8014408 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80143da:	2220      	movs	r2, #32
 80143dc:	2100      	movs	r1, #0
 80143de:	68f8      	ldr	r0, [r7, #12]
 80143e0:	f001 f8a9 	bl	8015536 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	220f      	movs	r2, #15
 80143e8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80143ea:	4b09      	ldr	r3, [pc, #36]	; (8014410 <ip_reass_enqueue_new_datagram+0x70>)
 80143ec:	681a      	ldr	r2, [r3, #0]
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80143f2:	4a07      	ldr	r2, [pc, #28]	; (8014410 <ip_reass_enqueue_new_datagram+0x70>)
 80143f4:	68fb      	ldr	r3, [r7, #12]
 80143f6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	3308      	adds	r3, #8
 80143fc:	2214      	movs	r2, #20
 80143fe:	6879      	ldr	r1, [r7, #4]
 8014400:	4618      	mov	r0, r3
 8014402:	f001 f88a 	bl	801551a <memcpy>
  return ipr;
 8014406:	68fb      	ldr	r3, [r7, #12]
}
 8014408:	4618      	mov	r0, r3
 801440a:	3710      	adds	r7, #16
 801440c:	46bd      	mov	sp, r7
 801440e:	bd80      	pop	{r7, pc}
 8014410:	20004c04 	.word	0x20004c04

08014414 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014414:	b580      	push	{r7, lr}
 8014416:	b082      	sub	sp, #8
 8014418:	af00      	add	r7, sp, #0
 801441a:	6078      	str	r0, [r7, #4]
 801441c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801441e:	4b10      	ldr	r3, [pc, #64]	; (8014460 <ip_reass_dequeue_datagram+0x4c>)
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	687a      	ldr	r2, [r7, #4]
 8014424:	429a      	cmp	r2, r3
 8014426:	d104      	bne.n	8014432 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	4a0c      	ldr	r2, [pc, #48]	; (8014460 <ip_reass_dequeue_datagram+0x4c>)
 801442e:	6013      	str	r3, [r2, #0]
 8014430:	e00d      	b.n	801444e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8014432:	683b      	ldr	r3, [r7, #0]
 8014434:	2b00      	cmp	r3, #0
 8014436:	d106      	bne.n	8014446 <ip_reass_dequeue_datagram+0x32>
 8014438:	4b0a      	ldr	r3, [pc, #40]	; (8014464 <ip_reass_dequeue_datagram+0x50>)
 801443a:	f240 1245 	movw	r2, #325	; 0x145
 801443e:	490a      	ldr	r1, [pc, #40]	; (8014468 <ip_reass_dequeue_datagram+0x54>)
 8014440:	480a      	ldr	r0, [pc, #40]	; (801446c <ip_reass_dequeue_datagram+0x58>)
 8014442:	f001 f8db 	bl	80155fc <iprintf>
    prev->next = ipr->next;
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	681a      	ldr	r2, [r3, #0]
 801444a:	683b      	ldr	r3, [r7, #0]
 801444c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801444e:	6879      	ldr	r1, [r7, #4]
 8014450:	2004      	movs	r0, #4
 8014452:	f7f6 fc87 	bl	800ad64 <memp_free>
}
 8014456:	bf00      	nop
 8014458:	3708      	adds	r7, #8
 801445a:	46bd      	mov	sp, r7
 801445c:	bd80      	pop	{r7, pc}
 801445e:	bf00      	nop
 8014460:	20004c04 	.word	0x20004c04
 8014464:	08019790 	.word	0x08019790
 8014468:	08019858 	.word	0x08019858
 801446c:	080197d8 	.word	0x080197d8

08014470 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8014470:	b580      	push	{r7, lr}
 8014472:	b08c      	sub	sp, #48	; 0x30
 8014474:	af00      	add	r7, sp, #0
 8014476:	60f8      	str	r0, [r7, #12]
 8014478:	60b9      	str	r1, [r7, #8]
 801447a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801447c:	2300      	movs	r3, #0
 801447e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8014480:	2301      	movs	r3, #1
 8014482:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8014484:	68bb      	ldr	r3, [r7, #8]
 8014486:	685b      	ldr	r3, [r3, #4]
 8014488:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801448a:	69fb      	ldr	r3, [r7, #28]
 801448c:	885b      	ldrh	r3, [r3, #2]
 801448e:	b29b      	uxth	r3, r3
 8014490:	4618      	mov	r0, r3
 8014492:	f7f5 ff5f 	bl	800a354 <lwip_htons>
 8014496:	4603      	mov	r3, r0
 8014498:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801449a:	69fb      	ldr	r3, [r7, #28]
 801449c:	781b      	ldrb	r3, [r3, #0]
 801449e:	f003 030f 	and.w	r3, r3, #15
 80144a2:	b2db      	uxtb	r3, r3
 80144a4:	009b      	lsls	r3, r3, #2
 80144a6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80144a8:	7e7b      	ldrb	r3, [r7, #25]
 80144aa:	b29b      	uxth	r3, r3
 80144ac:	8b7a      	ldrh	r2, [r7, #26]
 80144ae:	429a      	cmp	r2, r3
 80144b0:	d202      	bcs.n	80144b8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80144b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80144b6:	e135      	b.n	8014724 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80144b8:	7e7b      	ldrb	r3, [r7, #25]
 80144ba:	b29b      	uxth	r3, r3
 80144bc:	8b7a      	ldrh	r2, [r7, #26]
 80144be:	1ad3      	subs	r3, r2, r3
 80144c0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80144c2:	69fb      	ldr	r3, [r7, #28]
 80144c4:	88db      	ldrh	r3, [r3, #6]
 80144c6:	b29b      	uxth	r3, r3
 80144c8:	4618      	mov	r0, r3
 80144ca:	f7f5 ff43 	bl	800a354 <lwip_htons>
 80144ce:	4603      	mov	r3, r0
 80144d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80144d4:	b29b      	uxth	r3, r3
 80144d6:	00db      	lsls	r3, r3, #3
 80144d8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80144da:	68bb      	ldr	r3, [r7, #8]
 80144dc:	685b      	ldr	r3, [r3, #4]
 80144de:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80144e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144e2:	2200      	movs	r2, #0
 80144e4:	701a      	strb	r2, [r3, #0]
 80144e6:	2200      	movs	r2, #0
 80144e8:	705a      	strb	r2, [r3, #1]
 80144ea:	2200      	movs	r2, #0
 80144ec:	709a      	strb	r2, [r3, #2]
 80144ee:	2200      	movs	r2, #0
 80144f0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80144f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144f4:	8afa      	ldrh	r2, [r7, #22]
 80144f6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80144f8:	8afa      	ldrh	r2, [r7, #22]
 80144fa:	8b7b      	ldrh	r3, [r7, #26]
 80144fc:	4413      	add	r3, r2
 80144fe:	b29a      	uxth	r2, r3
 8014500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014502:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8014504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014506:	88db      	ldrh	r3, [r3, #6]
 8014508:	b29b      	uxth	r3, r3
 801450a:	8afa      	ldrh	r2, [r7, #22]
 801450c:	429a      	cmp	r2, r3
 801450e:	d902      	bls.n	8014516 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014510:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014514:	e106      	b.n	8014724 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	685b      	ldr	r3, [r3, #4]
 801451a:	627b      	str	r3, [r7, #36]	; 0x24
 801451c:	e068      	b.n	80145f0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014520:	685b      	ldr	r3, [r3, #4]
 8014522:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8014524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014526:	889b      	ldrh	r3, [r3, #4]
 8014528:	b29a      	uxth	r2, r3
 801452a:	693b      	ldr	r3, [r7, #16]
 801452c:	889b      	ldrh	r3, [r3, #4]
 801452e:	b29b      	uxth	r3, r3
 8014530:	429a      	cmp	r2, r3
 8014532:	d235      	bcs.n	80145a0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8014534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014538:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801453a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801453c:	2b00      	cmp	r3, #0
 801453e:	d020      	beq.n	8014582 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8014540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014542:	889b      	ldrh	r3, [r3, #4]
 8014544:	b29a      	uxth	r2, r3
 8014546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014548:	88db      	ldrh	r3, [r3, #6]
 801454a:	b29b      	uxth	r3, r3
 801454c:	429a      	cmp	r2, r3
 801454e:	d307      	bcc.n	8014560 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8014550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014552:	88db      	ldrh	r3, [r3, #6]
 8014554:	b29a      	uxth	r2, r3
 8014556:	693b      	ldr	r3, [r7, #16]
 8014558:	889b      	ldrh	r3, [r3, #4]
 801455a:	b29b      	uxth	r3, r3
 801455c:	429a      	cmp	r2, r3
 801455e:	d902      	bls.n	8014566 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014560:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014564:	e0de      	b.n	8014724 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8014566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014568:	68ba      	ldr	r2, [r7, #8]
 801456a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801456c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801456e:	88db      	ldrh	r3, [r3, #6]
 8014570:	b29a      	uxth	r2, r3
 8014572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014574:	889b      	ldrh	r3, [r3, #4]
 8014576:	b29b      	uxth	r3, r3
 8014578:	429a      	cmp	r2, r3
 801457a:	d03d      	beq.n	80145f8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801457c:	2300      	movs	r3, #0
 801457e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8014580:	e03a      	b.n	80145f8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8014582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014584:	88db      	ldrh	r3, [r3, #6]
 8014586:	b29a      	uxth	r2, r3
 8014588:	693b      	ldr	r3, [r7, #16]
 801458a:	889b      	ldrh	r3, [r3, #4]
 801458c:	b29b      	uxth	r3, r3
 801458e:	429a      	cmp	r2, r3
 8014590:	d902      	bls.n	8014598 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014592:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014596:	e0c5      	b.n	8014724 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8014598:	68fb      	ldr	r3, [r7, #12]
 801459a:	68ba      	ldr	r2, [r7, #8]
 801459c:	605a      	str	r2, [r3, #4]
      break;
 801459e:	e02b      	b.n	80145f8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80145a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145a2:	889b      	ldrh	r3, [r3, #4]
 80145a4:	b29a      	uxth	r2, r3
 80145a6:	693b      	ldr	r3, [r7, #16]
 80145a8:	889b      	ldrh	r3, [r3, #4]
 80145aa:	b29b      	uxth	r3, r3
 80145ac:	429a      	cmp	r2, r3
 80145ae:	d102      	bne.n	80145b6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80145b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80145b4:	e0b6      	b.n	8014724 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80145b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145b8:	889b      	ldrh	r3, [r3, #4]
 80145ba:	b29a      	uxth	r2, r3
 80145bc:	693b      	ldr	r3, [r7, #16]
 80145be:	88db      	ldrh	r3, [r3, #6]
 80145c0:	b29b      	uxth	r3, r3
 80145c2:	429a      	cmp	r2, r3
 80145c4:	d202      	bcs.n	80145cc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80145c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80145ca:	e0ab      	b.n	8014724 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80145cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d009      	beq.n	80145e6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80145d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145d4:	88db      	ldrh	r3, [r3, #6]
 80145d6:	b29a      	uxth	r2, r3
 80145d8:	693b      	ldr	r3, [r7, #16]
 80145da:	889b      	ldrh	r3, [r3, #4]
 80145dc:	b29b      	uxth	r3, r3
 80145de:	429a      	cmp	r2, r3
 80145e0:	d001      	beq.n	80145e6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80145e2:	2300      	movs	r3, #0
 80145e4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80145e6:	693b      	ldr	r3, [r7, #16]
 80145e8:	681b      	ldr	r3, [r3, #0]
 80145ea:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80145ec:	693b      	ldr	r3, [r7, #16]
 80145ee:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80145f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d193      	bne.n	801451e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80145f6:	e000      	b.n	80145fa <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80145f8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80145fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d12d      	bne.n	801465c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8014600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014602:	2b00      	cmp	r3, #0
 8014604:	d01c      	beq.n	8014640 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8014606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014608:	88db      	ldrh	r3, [r3, #6]
 801460a:	b29a      	uxth	r2, r3
 801460c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801460e:	889b      	ldrh	r3, [r3, #4]
 8014610:	b29b      	uxth	r3, r3
 8014612:	429a      	cmp	r2, r3
 8014614:	d906      	bls.n	8014624 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8014616:	4b45      	ldr	r3, [pc, #276]	; (801472c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014618:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801461c:	4944      	ldr	r1, [pc, #272]	; (8014730 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801461e:	4845      	ldr	r0, [pc, #276]	; (8014734 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014620:	f000 ffec 	bl	80155fc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8014624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014626:	68ba      	ldr	r2, [r7, #8]
 8014628:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801462a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801462c:	88db      	ldrh	r3, [r3, #6]
 801462e:	b29a      	uxth	r2, r3
 8014630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014632:	889b      	ldrh	r3, [r3, #4]
 8014634:	b29b      	uxth	r3, r3
 8014636:	429a      	cmp	r2, r3
 8014638:	d010      	beq.n	801465c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801463a:	2300      	movs	r3, #0
 801463c:	623b      	str	r3, [r7, #32]
 801463e:	e00d      	b.n	801465c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8014640:	68fb      	ldr	r3, [r7, #12]
 8014642:	685b      	ldr	r3, [r3, #4]
 8014644:	2b00      	cmp	r3, #0
 8014646:	d006      	beq.n	8014656 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8014648:	4b38      	ldr	r3, [pc, #224]	; (801472c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801464a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801464e:	493a      	ldr	r1, [pc, #232]	; (8014738 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8014650:	4838      	ldr	r0, [pc, #224]	; (8014734 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014652:	f000 ffd3 	bl	80155fc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8014656:	68fb      	ldr	r3, [r7, #12]
 8014658:	68ba      	ldr	r2, [r7, #8]
 801465a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	2b00      	cmp	r3, #0
 8014660:	d105      	bne.n	801466e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8014662:	68fb      	ldr	r3, [r7, #12]
 8014664:	7f9b      	ldrb	r3, [r3, #30]
 8014666:	f003 0301 	and.w	r3, r3, #1
 801466a:	2b00      	cmp	r3, #0
 801466c:	d059      	beq.n	8014722 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801466e:	6a3b      	ldr	r3, [r7, #32]
 8014670:	2b00      	cmp	r3, #0
 8014672:	d04f      	beq.n	8014714 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	685b      	ldr	r3, [r3, #4]
 8014678:	2b00      	cmp	r3, #0
 801467a:	d006      	beq.n	801468a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	685b      	ldr	r3, [r3, #4]
 8014680:	685b      	ldr	r3, [r3, #4]
 8014682:	889b      	ldrh	r3, [r3, #4]
 8014684:	b29b      	uxth	r3, r3
 8014686:	2b00      	cmp	r3, #0
 8014688:	d002      	beq.n	8014690 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801468a:	2300      	movs	r3, #0
 801468c:	623b      	str	r3, [r7, #32]
 801468e:	e041      	b.n	8014714 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8014690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014692:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8014694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801469a:	e012      	b.n	80146c2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801469e:	685b      	ldr	r3, [r3, #4]
 80146a0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80146a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146a4:	88db      	ldrh	r3, [r3, #6]
 80146a6:	b29a      	uxth	r2, r3
 80146a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146aa:	889b      	ldrh	r3, [r3, #4]
 80146ac:	b29b      	uxth	r3, r3
 80146ae:	429a      	cmp	r2, r3
 80146b0:	d002      	beq.n	80146b8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80146b2:	2300      	movs	r3, #0
 80146b4:	623b      	str	r3, [r7, #32]
            break;
 80146b6:	e007      	b.n	80146c8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80146b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146ba:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80146bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80146c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d1e9      	bne.n	801469c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80146c8:	6a3b      	ldr	r3, [r7, #32]
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d022      	beq.n	8014714 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80146ce:	68fb      	ldr	r3, [r7, #12]
 80146d0:	685b      	ldr	r3, [r3, #4]
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d106      	bne.n	80146e4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80146d6:	4b15      	ldr	r3, [pc, #84]	; (801472c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80146d8:	f240 12df 	movw	r2, #479	; 0x1df
 80146dc:	4917      	ldr	r1, [pc, #92]	; (801473c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80146de:	4815      	ldr	r0, [pc, #84]	; (8014734 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80146e0:	f000 ff8c 	bl	80155fc <iprintf>
          LWIP_ASSERT("sanity check",
 80146e4:	68fb      	ldr	r3, [r7, #12]
 80146e6:	685b      	ldr	r3, [r3, #4]
 80146e8:	685b      	ldr	r3, [r3, #4]
 80146ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80146ec:	429a      	cmp	r2, r3
 80146ee:	d106      	bne.n	80146fe <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80146f0:	4b0e      	ldr	r3, [pc, #56]	; (801472c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80146f2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80146f6:	4911      	ldr	r1, [pc, #68]	; (801473c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80146f8:	480e      	ldr	r0, [pc, #56]	; (8014734 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80146fa:	f000 ff7f 	bl	80155fc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80146fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014700:	681b      	ldr	r3, [r3, #0]
 8014702:	2b00      	cmp	r3, #0
 8014704:	d006      	beq.n	8014714 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8014706:	4b09      	ldr	r3, [pc, #36]	; (801472c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014708:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801470c:	490c      	ldr	r1, [pc, #48]	; (8014740 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801470e:	4809      	ldr	r0, [pc, #36]	; (8014734 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014710:	f000 ff74 	bl	80155fc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8014714:	6a3b      	ldr	r3, [r7, #32]
 8014716:	2b00      	cmp	r3, #0
 8014718:	bf14      	ite	ne
 801471a:	2301      	movne	r3, #1
 801471c:	2300      	moveq	r3, #0
 801471e:	b2db      	uxtb	r3, r3
 8014720:	e000      	b.n	8014724 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8014722:	2300      	movs	r3, #0
}
 8014724:	4618      	mov	r0, r3
 8014726:	3730      	adds	r7, #48	; 0x30
 8014728:	46bd      	mov	sp, r7
 801472a:	bd80      	pop	{r7, pc}
 801472c:	08019790 	.word	0x08019790
 8014730:	08019874 	.word	0x08019874
 8014734:	080197d8 	.word	0x080197d8
 8014738:	08019894 	.word	0x08019894
 801473c:	080198cc 	.word	0x080198cc
 8014740:	080198dc 	.word	0x080198dc

08014744 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8014744:	b580      	push	{r7, lr}
 8014746:	b08e      	sub	sp, #56	; 0x38
 8014748:	af00      	add	r7, sp, #0
 801474a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	685b      	ldr	r3, [r3, #4]
 8014750:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8014752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014754:	781b      	ldrb	r3, [r3, #0]
 8014756:	f003 030f 	and.w	r3, r3, #15
 801475a:	b2db      	uxtb	r3, r3
 801475c:	009b      	lsls	r3, r3, #2
 801475e:	b2db      	uxtb	r3, r3
 8014760:	2b14      	cmp	r3, #20
 8014762:	f040 8167 	bne.w	8014a34 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8014766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014768:	88db      	ldrh	r3, [r3, #6]
 801476a:	b29b      	uxth	r3, r3
 801476c:	4618      	mov	r0, r3
 801476e:	f7f5 fdf1 	bl	800a354 <lwip_htons>
 8014772:	4603      	mov	r3, r0
 8014774:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014778:	b29b      	uxth	r3, r3
 801477a:	00db      	lsls	r3, r3, #3
 801477c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801477e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014780:	885b      	ldrh	r3, [r3, #2]
 8014782:	b29b      	uxth	r3, r3
 8014784:	4618      	mov	r0, r3
 8014786:	f7f5 fde5 	bl	800a354 <lwip_htons>
 801478a:	4603      	mov	r3, r0
 801478c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801478e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014790:	781b      	ldrb	r3, [r3, #0]
 8014792:	f003 030f 	and.w	r3, r3, #15
 8014796:	b2db      	uxtb	r3, r3
 8014798:	009b      	lsls	r3, r3, #2
 801479a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801479e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80147a2:	b29b      	uxth	r3, r3
 80147a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80147a6:	429a      	cmp	r2, r3
 80147a8:	f0c0 8146 	bcc.w	8014a38 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80147ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80147b0:	b29b      	uxth	r3, r3
 80147b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80147b4:	1ad3      	subs	r3, r2, r3
 80147b6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80147b8:	6878      	ldr	r0, [r7, #4]
 80147ba:	f7f7 fa05 	bl	800bbc8 <pbuf_clen>
 80147be:	4603      	mov	r3, r0
 80147c0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80147c2:	4b9f      	ldr	r3, [pc, #636]	; (8014a40 <ip4_reass+0x2fc>)
 80147c4:	881b      	ldrh	r3, [r3, #0]
 80147c6:	461a      	mov	r2, r3
 80147c8:	8c3b      	ldrh	r3, [r7, #32]
 80147ca:	4413      	add	r3, r2
 80147cc:	2b0a      	cmp	r3, #10
 80147ce:	dd10      	ble.n	80147f2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80147d0:	8c3b      	ldrh	r3, [r7, #32]
 80147d2:	4619      	mov	r1, r3
 80147d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80147d6:	f7ff fd81 	bl	80142dc <ip_reass_remove_oldest_datagram>
 80147da:	4603      	mov	r3, r0
 80147dc:	2b00      	cmp	r3, #0
 80147de:	f000 812d 	beq.w	8014a3c <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80147e2:	4b97      	ldr	r3, [pc, #604]	; (8014a40 <ip4_reass+0x2fc>)
 80147e4:	881b      	ldrh	r3, [r3, #0]
 80147e6:	461a      	mov	r2, r3
 80147e8:	8c3b      	ldrh	r3, [r7, #32]
 80147ea:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80147ec:	2b0a      	cmp	r3, #10
 80147ee:	f300 8125 	bgt.w	8014a3c <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80147f2:	4b94      	ldr	r3, [pc, #592]	; (8014a44 <ip4_reass+0x300>)
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	633b      	str	r3, [r7, #48]	; 0x30
 80147f8:	e015      	b.n	8014826 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80147fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147fc:	695a      	ldr	r2, [r3, #20]
 80147fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014800:	68db      	ldr	r3, [r3, #12]
 8014802:	429a      	cmp	r2, r3
 8014804:	d10c      	bne.n	8014820 <ip4_reass+0xdc>
 8014806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014808:	699a      	ldr	r2, [r3, #24]
 801480a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801480c:	691b      	ldr	r3, [r3, #16]
 801480e:	429a      	cmp	r2, r3
 8014810:	d106      	bne.n	8014820 <ip4_reass+0xdc>
 8014812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014814:	899a      	ldrh	r2, [r3, #12]
 8014816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014818:	889b      	ldrh	r3, [r3, #4]
 801481a:	b29b      	uxth	r3, r3
 801481c:	429a      	cmp	r2, r3
 801481e:	d006      	beq.n	801482e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	633b      	str	r3, [r7, #48]	; 0x30
 8014826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014828:	2b00      	cmp	r3, #0
 801482a:	d1e6      	bne.n	80147fa <ip4_reass+0xb6>
 801482c:	e000      	b.n	8014830 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801482e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8014830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014832:	2b00      	cmp	r3, #0
 8014834:	d109      	bne.n	801484a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8014836:	8c3b      	ldrh	r3, [r7, #32]
 8014838:	4619      	mov	r1, r3
 801483a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801483c:	f7ff fdb0 	bl	80143a0 <ip_reass_enqueue_new_datagram>
 8014840:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8014842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014844:	2b00      	cmp	r3, #0
 8014846:	d11c      	bne.n	8014882 <ip4_reass+0x13e>
      goto nullreturn;
 8014848:	e109      	b.n	8014a5e <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801484a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801484c:	88db      	ldrh	r3, [r3, #6]
 801484e:	b29b      	uxth	r3, r3
 8014850:	4618      	mov	r0, r3
 8014852:	f7f5 fd7f 	bl	800a354 <lwip_htons>
 8014856:	4603      	mov	r3, r0
 8014858:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801485c:	2b00      	cmp	r3, #0
 801485e:	d110      	bne.n	8014882 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8014860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014862:	89db      	ldrh	r3, [r3, #14]
 8014864:	4618      	mov	r0, r3
 8014866:	f7f5 fd75 	bl	800a354 <lwip_htons>
 801486a:	4603      	mov	r3, r0
 801486c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014870:	2b00      	cmp	r3, #0
 8014872:	d006      	beq.n	8014882 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8014874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014876:	3308      	adds	r3, #8
 8014878:	2214      	movs	r2, #20
 801487a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801487c:	4618      	mov	r0, r3
 801487e:	f000 fe4c 	bl	801551a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8014882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014884:	88db      	ldrh	r3, [r3, #6]
 8014886:	b29b      	uxth	r3, r3
 8014888:	f003 0320 	and.w	r3, r3, #32
 801488c:	2b00      	cmp	r3, #0
 801488e:	bf0c      	ite	eq
 8014890:	2301      	moveq	r3, #1
 8014892:	2300      	movne	r3, #0
 8014894:	b2db      	uxtb	r3, r3
 8014896:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8014898:	69fb      	ldr	r3, [r7, #28]
 801489a:	2b00      	cmp	r3, #0
 801489c:	d00e      	beq.n	80148bc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801489e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80148a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80148a2:	4413      	add	r3, r2
 80148a4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80148a6:	8b7a      	ldrh	r2, [r7, #26]
 80148a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80148aa:	429a      	cmp	r2, r3
 80148ac:	f0c0 80a0 	bcc.w	80149f0 <ip4_reass+0x2ac>
 80148b0:	8b7b      	ldrh	r3, [r7, #26]
 80148b2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80148b6:	4293      	cmp	r3, r2
 80148b8:	f200 809a 	bhi.w	80149f0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80148bc:	69fa      	ldr	r2, [r7, #28]
 80148be:	6879      	ldr	r1, [r7, #4]
 80148c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80148c2:	f7ff fdd5 	bl	8014470 <ip_reass_chain_frag_into_datagram_and_validate>
 80148c6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80148c8:	697b      	ldr	r3, [r7, #20]
 80148ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80148ce:	f000 8091 	beq.w	80149f4 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80148d2:	4b5b      	ldr	r3, [pc, #364]	; (8014a40 <ip4_reass+0x2fc>)
 80148d4:	881a      	ldrh	r2, [r3, #0]
 80148d6:	8c3b      	ldrh	r3, [r7, #32]
 80148d8:	4413      	add	r3, r2
 80148da:	b29a      	uxth	r2, r3
 80148dc:	4b58      	ldr	r3, [pc, #352]	; (8014a40 <ip4_reass+0x2fc>)
 80148de:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80148e0:	69fb      	ldr	r3, [r7, #28]
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d00d      	beq.n	8014902 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80148e6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80148e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80148ea:	4413      	add	r3, r2
 80148ec:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80148ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148f0:	8a7a      	ldrh	r2, [r7, #18]
 80148f2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80148f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148f6:	7f9b      	ldrb	r3, [r3, #30]
 80148f8:	f043 0301 	orr.w	r3, r3, #1
 80148fc:	b2da      	uxtb	r2, r3
 80148fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014900:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8014902:	697b      	ldr	r3, [r7, #20]
 8014904:	2b01      	cmp	r3, #1
 8014906:	d171      	bne.n	80149ec <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8014908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801490a:	8b9b      	ldrh	r3, [r3, #28]
 801490c:	3314      	adds	r3, #20
 801490e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8014910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014912:	685b      	ldr	r3, [r3, #4]
 8014914:	685b      	ldr	r3, [r3, #4]
 8014916:	681b      	ldr	r3, [r3, #0]
 8014918:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801491a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801491c:	685b      	ldr	r3, [r3, #4]
 801491e:	685b      	ldr	r3, [r3, #4]
 8014920:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8014922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014924:	3308      	adds	r3, #8
 8014926:	2214      	movs	r2, #20
 8014928:	4619      	mov	r1, r3
 801492a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801492c:	f000 fdf5 	bl	801551a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8014930:	8a3b      	ldrh	r3, [r7, #16]
 8014932:	4618      	mov	r0, r3
 8014934:	f7f5 fd0e 	bl	800a354 <lwip_htons>
 8014938:	4603      	mov	r3, r0
 801493a:	461a      	mov	r2, r3
 801493c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801493e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8014940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014942:	2200      	movs	r2, #0
 8014944:	719a      	strb	r2, [r3, #6]
 8014946:	2200      	movs	r2, #0
 8014948:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801494a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801494c:	2200      	movs	r2, #0
 801494e:	729a      	strb	r2, [r3, #10]
 8014950:	2200      	movs	r2, #0
 8014952:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8014954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014956:	685b      	ldr	r3, [r3, #4]
 8014958:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801495a:	e00d      	b.n	8014978 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801495c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801495e:	685b      	ldr	r3, [r3, #4]
 8014960:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8014962:	2114      	movs	r1, #20
 8014964:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014966:	f7f7 f81b 	bl	800b9a0 <pbuf_remove_header>
      pbuf_cat(p, r);
 801496a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801496c:	6878      	ldr	r0, [r7, #4]
 801496e:	f7f7 f96b 	bl	800bc48 <pbuf_cat>
      r = iprh->next_pbuf;
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	681b      	ldr	r3, [r3, #0]
 8014976:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8014978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801497a:	2b00      	cmp	r3, #0
 801497c:	d1ee      	bne.n	801495c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801497e:	4b31      	ldr	r3, [pc, #196]	; (8014a44 <ip4_reass+0x300>)
 8014980:	681b      	ldr	r3, [r3, #0]
 8014982:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014984:	429a      	cmp	r2, r3
 8014986:	d102      	bne.n	801498e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8014988:	2300      	movs	r3, #0
 801498a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801498c:	e010      	b.n	80149b0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801498e:	4b2d      	ldr	r3, [pc, #180]	; (8014a44 <ip4_reass+0x300>)
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014994:	e007      	b.n	80149a6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8014996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014998:	681b      	ldr	r3, [r3, #0]
 801499a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801499c:	429a      	cmp	r2, r3
 801499e:	d006      	beq.n	80149ae <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80149a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80149a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d1f4      	bne.n	8014996 <ip4_reass+0x252>
 80149ac:	e000      	b.n	80149b0 <ip4_reass+0x26c>
          break;
 80149ae:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80149b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80149b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80149b4:	f7ff fd2e 	bl	8014414 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80149b8:	6878      	ldr	r0, [r7, #4]
 80149ba:	f7f7 f905 	bl	800bbc8 <pbuf_clen>
 80149be:	4603      	mov	r3, r0
 80149c0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80149c2:	4b1f      	ldr	r3, [pc, #124]	; (8014a40 <ip4_reass+0x2fc>)
 80149c4:	881b      	ldrh	r3, [r3, #0]
 80149c6:	8c3a      	ldrh	r2, [r7, #32]
 80149c8:	429a      	cmp	r2, r3
 80149ca:	d906      	bls.n	80149da <ip4_reass+0x296>
 80149cc:	4b1e      	ldr	r3, [pc, #120]	; (8014a48 <ip4_reass+0x304>)
 80149ce:	f240 229b 	movw	r2, #667	; 0x29b
 80149d2:	491e      	ldr	r1, [pc, #120]	; (8014a4c <ip4_reass+0x308>)
 80149d4:	481e      	ldr	r0, [pc, #120]	; (8014a50 <ip4_reass+0x30c>)
 80149d6:	f000 fe11 	bl	80155fc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80149da:	4b19      	ldr	r3, [pc, #100]	; (8014a40 <ip4_reass+0x2fc>)
 80149dc:	881a      	ldrh	r2, [r3, #0]
 80149de:	8c3b      	ldrh	r3, [r7, #32]
 80149e0:	1ad3      	subs	r3, r2, r3
 80149e2:	b29a      	uxth	r2, r3
 80149e4:	4b16      	ldr	r3, [pc, #88]	; (8014a40 <ip4_reass+0x2fc>)
 80149e6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	e03c      	b.n	8014a66 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80149ec:	2300      	movs	r3, #0
 80149ee:	e03a      	b.n	8014a66 <ip4_reass+0x322>
      goto nullreturn_ipr;
 80149f0:	bf00      	nop
 80149f2:	e000      	b.n	80149f6 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80149f4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80149f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d106      	bne.n	8014a0a <ip4_reass+0x2c6>
 80149fc:	4b12      	ldr	r3, [pc, #72]	; (8014a48 <ip4_reass+0x304>)
 80149fe:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8014a02:	4914      	ldr	r1, [pc, #80]	; (8014a54 <ip4_reass+0x310>)
 8014a04:	4812      	ldr	r0, [pc, #72]	; (8014a50 <ip4_reass+0x30c>)
 8014a06:	f000 fdf9 	bl	80155fc <iprintf>
  if (ipr->p == NULL) {
 8014a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a0c:	685b      	ldr	r3, [r3, #4]
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	d124      	bne.n	8014a5c <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8014a12:	4b0c      	ldr	r3, [pc, #48]	; (8014a44 <ip4_reass+0x300>)
 8014a14:	681b      	ldr	r3, [r3, #0]
 8014a16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014a18:	429a      	cmp	r2, r3
 8014a1a:	d006      	beq.n	8014a2a <ip4_reass+0x2e6>
 8014a1c:	4b0a      	ldr	r3, [pc, #40]	; (8014a48 <ip4_reass+0x304>)
 8014a1e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8014a22:	490d      	ldr	r1, [pc, #52]	; (8014a58 <ip4_reass+0x314>)
 8014a24:	480a      	ldr	r0, [pc, #40]	; (8014a50 <ip4_reass+0x30c>)
 8014a26:	f000 fde9 	bl	80155fc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8014a2a:	2100      	movs	r1, #0
 8014a2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014a2e:	f7ff fcf1 	bl	8014414 <ip_reass_dequeue_datagram>
 8014a32:	e014      	b.n	8014a5e <ip4_reass+0x31a>
    goto nullreturn;
 8014a34:	bf00      	nop
 8014a36:	e012      	b.n	8014a5e <ip4_reass+0x31a>
    goto nullreturn;
 8014a38:	bf00      	nop
 8014a3a:	e010      	b.n	8014a5e <ip4_reass+0x31a>
      goto nullreturn;
 8014a3c:	bf00      	nop
 8014a3e:	e00e      	b.n	8014a5e <ip4_reass+0x31a>
 8014a40:	20004c08 	.word	0x20004c08
 8014a44:	20004c04 	.word	0x20004c04
 8014a48:	08019790 	.word	0x08019790
 8014a4c:	08019900 	.word	0x08019900
 8014a50:	080197d8 	.word	0x080197d8
 8014a54:	0801991c 	.word	0x0801991c
 8014a58:	08019928 	.word	0x08019928
  }

nullreturn:
 8014a5c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8014a5e:	6878      	ldr	r0, [r7, #4]
 8014a60:	f7f7 f824 	bl	800baac <pbuf_free>
  return NULL;
 8014a64:	2300      	movs	r3, #0
}
 8014a66:	4618      	mov	r0, r3
 8014a68:	3738      	adds	r7, #56	; 0x38
 8014a6a:	46bd      	mov	sp, r7
 8014a6c:	bd80      	pop	{r7, pc}
 8014a6e:	bf00      	nop

08014a70 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8014a70:	b580      	push	{r7, lr}
 8014a72:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8014a74:	2005      	movs	r0, #5
 8014a76:	f7f6 f923 	bl	800acc0 <memp_malloc>
 8014a7a:	4603      	mov	r3, r0
}
 8014a7c:	4618      	mov	r0, r3
 8014a7e:	bd80      	pop	{r7, pc}

08014a80 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8014a80:	b580      	push	{r7, lr}
 8014a82:	b082      	sub	sp, #8
 8014a84:	af00      	add	r7, sp, #0
 8014a86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d106      	bne.n	8014a9c <ip_frag_free_pbuf_custom_ref+0x1c>
 8014a8e:	4b07      	ldr	r3, [pc, #28]	; (8014aac <ip_frag_free_pbuf_custom_ref+0x2c>)
 8014a90:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8014a94:	4906      	ldr	r1, [pc, #24]	; (8014ab0 <ip_frag_free_pbuf_custom_ref+0x30>)
 8014a96:	4807      	ldr	r0, [pc, #28]	; (8014ab4 <ip_frag_free_pbuf_custom_ref+0x34>)
 8014a98:	f000 fdb0 	bl	80155fc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8014a9c:	6879      	ldr	r1, [r7, #4]
 8014a9e:	2005      	movs	r0, #5
 8014aa0:	f7f6 f960 	bl	800ad64 <memp_free>
}
 8014aa4:	bf00      	nop
 8014aa6:	3708      	adds	r7, #8
 8014aa8:	46bd      	mov	sp, r7
 8014aaa:	bd80      	pop	{r7, pc}
 8014aac:	08019790 	.word	0x08019790
 8014ab0:	08019948 	.word	0x08019948
 8014ab4:	080197d8 	.word	0x080197d8

08014ab8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014ab8:	b580      	push	{r7, lr}
 8014aba:	b084      	sub	sp, #16
 8014abc:	af00      	add	r7, sp, #0
 8014abe:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d106      	bne.n	8014ad8 <ipfrag_free_pbuf_custom+0x20>
 8014aca:	4b11      	ldr	r3, [pc, #68]	; (8014b10 <ipfrag_free_pbuf_custom+0x58>)
 8014acc:	f240 22ce 	movw	r2, #718	; 0x2ce
 8014ad0:	4910      	ldr	r1, [pc, #64]	; (8014b14 <ipfrag_free_pbuf_custom+0x5c>)
 8014ad2:	4811      	ldr	r0, [pc, #68]	; (8014b18 <ipfrag_free_pbuf_custom+0x60>)
 8014ad4:	f000 fd92 	bl	80155fc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8014ad8:	68fa      	ldr	r2, [r7, #12]
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	429a      	cmp	r2, r3
 8014ade:	d006      	beq.n	8014aee <ipfrag_free_pbuf_custom+0x36>
 8014ae0:	4b0b      	ldr	r3, [pc, #44]	; (8014b10 <ipfrag_free_pbuf_custom+0x58>)
 8014ae2:	f240 22cf 	movw	r2, #719	; 0x2cf
 8014ae6:	490d      	ldr	r1, [pc, #52]	; (8014b1c <ipfrag_free_pbuf_custom+0x64>)
 8014ae8:	480b      	ldr	r0, [pc, #44]	; (8014b18 <ipfrag_free_pbuf_custom+0x60>)
 8014aea:	f000 fd87 	bl	80155fc <iprintf>
  if (pcr->original != NULL) {
 8014aee:	68fb      	ldr	r3, [r7, #12]
 8014af0:	695b      	ldr	r3, [r3, #20]
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d004      	beq.n	8014b00 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8014af6:	68fb      	ldr	r3, [r7, #12]
 8014af8:	695b      	ldr	r3, [r3, #20]
 8014afa:	4618      	mov	r0, r3
 8014afc:	f7f6 ffd6 	bl	800baac <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8014b00:	68f8      	ldr	r0, [r7, #12]
 8014b02:	f7ff ffbd 	bl	8014a80 <ip_frag_free_pbuf_custom_ref>
}
 8014b06:	bf00      	nop
 8014b08:	3710      	adds	r7, #16
 8014b0a:	46bd      	mov	sp, r7
 8014b0c:	bd80      	pop	{r7, pc}
 8014b0e:	bf00      	nop
 8014b10:	08019790 	.word	0x08019790
 8014b14:	08019954 	.word	0x08019954
 8014b18:	080197d8 	.word	0x080197d8
 8014b1c:	08019960 	.word	0x08019960

08014b20 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8014b20:	b580      	push	{r7, lr}
 8014b22:	b094      	sub	sp, #80	; 0x50
 8014b24:	af02      	add	r7, sp, #8
 8014b26:	60f8      	str	r0, [r7, #12]
 8014b28:	60b9      	str	r1, [r7, #8]
 8014b2a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8014b2c:	2300      	movs	r3, #0
 8014b2e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8014b32:	68bb      	ldr	r3, [r7, #8]
 8014b34:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014b36:	3b14      	subs	r3, #20
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	da00      	bge.n	8014b3e <ip4_frag+0x1e>
 8014b3c:	3307      	adds	r3, #7
 8014b3e:	10db      	asrs	r3, r3, #3
 8014b40:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8014b42:	2314      	movs	r3, #20
 8014b44:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8014b46:	68fb      	ldr	r3, [r7, #12]
 8014b48:	685b      	ldr	r3, [r3, #4]
 8014b4a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8014b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b4e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8014b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b52:	781b      	ldrb	r3, [r3, #0]
 8014b54:	f003 030f 	and.w	r3, r3, #15
 8014b58:	b2db      	uxtb	r3, r3
 8014b5a:	009b      	lsls	r3, r3, #2
 8014b5c:	b2db      	uxtb	r3, r3
 8014b5e:	2b14      	cmp	r3, #20
 8014b60:	d002      	beq.n	8014b68 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8014b62:	f06f 0305 	mvn.w	r3, #5
 8014b66:	e110      	b.n	8014d8a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8014b68:	68fb      	ldr	r3, [r7, #12]
 8014b6a:	895b      	ldrh	r3, [r3, #10]
 8014b6c:	2b13      	cmp	r3, #19
 8014b6e:	d809      	bhi.n	8014b84 <ip4_frag+0x64>
 8014b70:	4b88      	ldr	r3, [pc, #544]	; (8014d94 <ip4_frag+0x274>)
 8014b72:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8014b76:	4988      	ldr	r1, [pc, #544]	; (8014d98 <ip4_frag+0x278>)
 8014b78:	4888      	ldr	r0, [pc, #544]	; (8014d9c <ip4_frag+0x27c>)
 8014b7a:	f000 fd3f 	bl	80155fc <iprintf>
 8014b7e:	f06f 0305 	mvn.w	r3, #5
 8014b82:	e102      	b.n	8014d8a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8014b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b86:	88db      	ldrh	r3, [r3, #6]
 8014b88:	b29b      	uxth	r3, r3
 8014b8a:	4618      	mov	r0, r3
 8014b8c:	f7f5 fbe2 	bl	800a354 <lwip_htons>
 8014b90:	4603      	mov	r3, r0
 8014b92:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8014b94:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014b96:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014b9a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8014b9e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014ba0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014ba4:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	891b      	ldrh	r3, [r3, #8]
 8014baa:	3b14      	subs	r3, #20
 8014bac:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8014bb0:	e0e1      	b.n	8014d76 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8014bb2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014bb4:	00db      	lsls	r3, r3, #3
 8014bb6:	b29b      	uxth	r3, r3
 8014bb8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014bbc:	4293      	cmp	r3, r2
 8014bbe:	bf28      	it	cs
 8014bc0:	4613      	movcs	r3, r2
 8014bc2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8014bc4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014bc8:	2114      	movs	r1, #20
 8014bca:	200e      	movs	r0, #14
 8014bcc:	f7f6 fc8a 	bl	800b4e4 <pbuf_alloc>
 8014bd0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8014bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	f000 80d5 	beq.w	8014d84 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8014bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bdc:	895b      	ldrh	r3, [r3, #10]
 8014bde:	2b13      	cmp	r3, #19
 8014be0:	d806      	bhi.n	8014bf0 <ip4_frag+0xd0>
 8014be2:	4b6c      	ldr	r3, [pc, #432]	; (8014d94 <ip4_frag+0x274>)
 8014be4:	f44f 7249 	mov.w	r2, #804	; 0x324
 8014be8:	496d      	ldr	r1, [pc, #436]	; (8014da0 <ip4_frag+0x280>)
 8014bea:	486c      	ldr	r0, [pc, #432]	; (8014d9c <ip4_frag+0x27c>)
 8014bec:	f000 fd06 	bl	80155fc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8014bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bf2:	685b      	ldr	r3, [r3, #4]
 8014bf4:	2214      	movs	r2, #20
 8014bf6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014bf8:	4618      	mov	r0, r3
 8014bfa:	f000 fc8e 	bl	801551a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8014bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c00:	685b      	ldr	r3, [r3, #4]
 8014c02:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8014c04:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014c06:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8014c0a:	e064      	b.n	8014cd6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8014c0c:	68fb      	ldr	r3, [r7, #12]
 8014c0e:	895a      	ldrh	r2, [r3, #10]
 8014c10:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014c12:	1ad3      	subs	r3, r2, r3
 8014c14:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8014c16:	68fb      	ldr	r3, [r7, #12]
 8014c18:	895b      	ldrh	r3, [r3, #10]
 8014c1a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014c1c:	429a      	cmp	r2, r3
 8014c1e:	d906      	bls.n	8014c2e <ip4_frag+0x10e>
 8014c20:	4b5c      	ldr	r3, [pc, #368]	; (8014d94 <ip4_frag+0x274>)
 8014c22:	f240 322d 	movw	r2, #813	; 0x32d
 8014c26:	495f      	ldr	r1, [pc, #380]	; (8014da4 <ip4_frag+0x284>)
 8014c28:	485c      	ldr	r0, [pc, #368]	; (8014d9c <ip4_frag+0x27c>)
 8014c2a:	f000 fce7 	bl	80155fc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8014c2e:	8bfa      	ldrh	r2, [r7, #30]
 8014c30:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014c34:	4293      	cmp	r3, r2
 8014c36:	bf28      	it	cs
 8014c38:	4613      	movcs	r3, r2
 8014c3a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8014c3e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d105      	bne.n	8014c52 <ip4_frag+0x132>
        poff = 0;
 8014c46:	2300      	movs	r3, #0
 8014c48:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014c4a:	68fb      	ldr	r3, [r7, #12]
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	60fb      	str	r3, [r7, #12]
        continue;
 8014c50:	e041      	b.n	8014cd6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8014c52:	f7ff ff0d 	bl	8014a70 <ip_frag_alloc_pbuf_custom_ref>
 8014c56:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8014c58:	69bb      	ldr	r3, [r7, #24]
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d103      	bne.n	8014c66 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8014c5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014c60:	f7f6 ff24 	bl	800baac <pbuf_free>
        goto memerr;
 8014c64:	e08f      	b.n	8014d86 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014c66:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014c6c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014c6e:	4413      	add	r3, r2
 8014c70:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8014c74:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8014c78:	9201      	str	r2, [sp, #4]
 8014c7a:	9300      	str	r3, [sp, #0]
 8014c7c:	4603      	mov	r3, r0
 8014c7e:	2241      	movs	r2, #65	; 0x41
 8014c80:	2000      	movs	r0, #0
 8014c82:	f7f6 fd59 	bl	800b738 <pbuf_alloced_custom>
 8014c86:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8014c88:	697b      	ldr	r3, [r7, #20]
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d106      	bne.n	8014c9c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8014c8e:	69b8      	ldr	r0, [r7, #24]
 8014c90:	f7ff fef6 	bl	8014a80 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8014c94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014c96:	f7f6 ff09 	bl	800baac <pbuf_free>
        goto memerr;
 8014c9a:	e074      	b.n	8014d86 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8014c9c:	68f8      	ldr	r0, [r7, #12]
 8014c9e:	f7f6 ffab 	bl	800bbf8 <pbuf_ref>
      pcr->original = p;
 8014ca2:	69bb      	ldr	r3, [r7, #24]
 8014ca4:	68fa      	ldr	r2, [r7, #12]
 8014ca6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8014ca8:	69bb      	ldr	r3, [r7, #24]
 8014caa:	4a3f      	ldr	r2, [pc, #252]	; (8014da8 <ip4_frag+0x288>)
 8014cac:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8014cae:	6979      	ldr	r1, [r7, #20]
 8014cb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014cb2:	f7f6 ffc9 	bl	800bc48 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8014cb6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8014cba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014cbe:	1ad3      	subs	r3, r2, r3
 8014cc0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8014cc4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d004      	beq.n	8014cd6 <ip4_frag+0x1b6>
        poff = 0;
 8014ccc:	2300      	movs	r3, #0
 8014cce:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	681b      	ldr	r3, [r3, #0]
 8014cd4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8014cd6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d196      	bne.n	8014c0c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8014cde:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014ce0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014ce4:	4413      	add	r3, r2
 8014ce6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8014ce8:	68bb      	ldr	r3, [r7, #8]
 8014cea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014cec:	f1a3 0213 	sub.w	r2, r3, #19
 8014cf0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014cf4:	429a      	cmp	r2, r3
 8014cf6:	bfcc      	ite	gt
 8014cf8:	2301      	movgt	r3, #1
 8014cfa:	2300      	movle	r3, #0
 8014cfc:	b2db      	uxtb	r3, r3
 8014cfe:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8014d00:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014d04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014d08:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8014d0a:	6a3b      	ldr	r3, [r7, #32]
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d002      	beq.n	8014d16 <ip4_frag+0x1f6>
 8014d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d003      	beq.n	8014d1e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8014d16:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014d18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014d1c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8014d1e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014d20:	4618      	mov	r0, r3
 8014d22:	f7f5 fb17 	bl	800a354 <lwip_htons>
 8014d26:	4603      	mov	r3, r0
 8014d28:	461a      	mov	r2, r3
 8014d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d2c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8014d2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014d30:	3314      	adds	r3, #20
 8014d32:	b29b      	uxth	r3, r3
 8014d34:	4618      	mov	r0, r3
 8014d36:	f7f5 fb0d 	bl	800a354 <lwip_htons>
 8014d3a:	4603      	mov	r3, r0
 8014d3c:	461a      	mov	r2, r3
 8014d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d40:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8014d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d44:	2200      	movs	r2, #0
 8014d46:	729a      	strb	r2, [r3, #10]
 8014d48:	2200      	movs	r2, #0
 8014d4a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8014d4c:	68bb      	ldr	r3, [r7, #8]
 8014d4e:	695b      	ldr	r3, [r3, #20]
 8014d50:	687a      	ldr	r2, [r7, #4]
 8014d52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014d54:	68b8      	ldr	r0, [r7, #8]
 8014d56:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8014d58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014d5a:	f7f6 fea7 	bl	800baac <pbuf_free>
    left = (u16_t)(left - fragsize);
 8014d5e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014d62:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014d64:	1ad3      	subs	r3, r2, r3
 8014d66:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8014d6a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8014d6e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014d70:	4413      	add	r3, r2
 8014d72:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8014d76:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	f47f af19 	bne.w	8014bb2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8014d80:	2300      	movs	r3, #0
 8014d82:	e002      	b.n	8014d8a <ip4_frag+0x26a>
      goto memerr;
 8014d84:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8014d86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8014d8a:	4618      	mov	r0, r3
 8014d8c:	3748      	adds	r7, #72	; 0x48
 8014d8e:	46bd      	mov	sp, r7
 8014d90:	bd80      	pop	{r7, pc}
 8014d92:	bf00      	nop
 8014d94:	08019790 	.word	0x08019790
 8014d98:	0801996c 	.word	0x0801996c
 8014d9c:	080197d8 	.word	0x080197d8
 8014da0:	08019988 	.word	0x08019988
 8014da4:	080199a8 	.word	0x080199a8
 8014da8:	08014ab9 	.word	0x08014ab9

08014dac <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8014dac:	b580      	push	{r7, lr}
 8014dae:	b086      	sub	sp, #24
 8014db0:	af00      	add	r7, sp, #0
 8014db2:	6078      	str	r0, [r7, #4]
 8014db4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8014db6:	230e      	movs	r3, #14
 8014db8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	895b      	ldrh	r3, [r3, #10]
 8014dbe:	2b0e      	cmp	r3, #14
 8014dc0:	d96e      	bls.n	8014ea0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	7bdb      	ldrb	r3, [r3, #15]
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d106      	bne.n	8014dd8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8014dca:	683b      	ldr	r3, [r7, #0]
 8014dcc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014dd0:	3301      	adds	r3, #1
 8014dd2:	b2da      	uxtb	r2, r3
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	685b      	ldr	r3, [r3, #4]
 8014ddc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8014dde:	693b      	ldr	r3, [r7, #16]
 8014de0:	7b1a      	ldrb	r2, [r3, #12]
 8014de2:	7b5b      	ldrb	r3, [r3, #13]
 8014de4:	021b      	lsls	r3, r3, #8
 8014de6:	4313      	orrs	r3, r2
 8014de8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8014dea:	693b      	ldr	r3, [r7, #16]
 8014dec:	781b      	ldrb	r3, [r3, #0]
 8014dee:	f003 0301 	and.w	r3, r3, #1
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	d023      	beq.n	8014e3e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8014df6:	693b      	ldr	r3, [r7, #16]
 8014df8:	781b      	ldrb	r3, [r3, #0]
 8014dfa:	2b01      	cmp	r3, #1
 8014dfc:	d10f      	bne.n	8014e1e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014dfe:	693b      	ldr	r3, [r7, #16]
 8014e00:	785b      	ldrb	r3, [r3, #1]
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d11b      	bne.n	8014e3e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8014e06:	693b      	ldr	r3, [r7, #16]
 8014e08:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014e0a:	2b5e      	cmp	r3, #94	; 0x5e
 8014e0c:	d117      	bne.n	8014e3e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	7b5b      	ldrb	r3, [r3, #13]
 8014e12:	f043 0310 	orr.w	r3, r3, #16
 8014e16:	b2da      	uxtb	r2, r3
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	735a      	strb	r2, [r3, #13]
 8014e1c:	e00f      	b.n	8014e3e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8014e1e:	693b      	ldr	r3, [r7, #16]
 8014e20:	2206      	movs	r2, #6
 8014e22:	4928      	ldr	r1, [pc, #160]	; (8014ec4 <ethernet_input+0x118>)
 8014e24:	4618      	mov	r0, r3
 8014e26:	f000 fb6a 	bl	80154fe <memcmp>
 8014e2a:	4603      	mov	r3, r0
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	d106      	bne.n	8014e3e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	7b5b      	ldrb	r3, [r3, #13]
 8014e34:	f043 0308 	orr.w	r3, r3, #8
 8014e38:	b2da      	uxtb	r2, r3
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8014e3e:	89fb      	ldrh	r3, [r7, #14]
 8014e40:	2b08      	cmp	r3, #8
 8014e42:	d003      	beq.n	8014e4c <ethernet_input+0xa0>
 8014e44:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8014e48:	d014      	beq.n	8014e74 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8014e4a:	e032      	b.n	8014eb2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014e4c:	683b      	ldr	r3, [r7, #0]
 8014e4e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014e52:	f003 0308 	and.w	r3, r3, #8
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d024      	beq.n	8014ea4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014e5a:	8afb      	ldrh	r3, [r7, #22]
 8014e5c:	4619      	mov	r1, r3
 8014e5e:	6878      	ldr	r0, [r7, #4]
 8014e60:	f7f6 fd9e 	bl	800b9a0 <pbuf_remove_header>
 8014e64:	4603      	mov	r3, r0
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d11e      	bne.n	8014ea8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8014e6a:	6839      	ldr	r1, [r7, #0]
 8014e6c:	6878      	ldr	r0, [r7, #4]
 8014e6e:	f7fe ff27 	bl	8013cc0 <ip4_input>
      break;
 8014e72:	e013      	b.n	8014e9c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014e74:	683b      	ldr	r3, [r7, #0]
 8014e76:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014e7a:	f003 0308 	and.w	r3, r3, #8
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	d014      	beq.n	8014eac <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014e82:	8afb      	ldrh	r3, [r7, #22]
 8014e84:	4619      	mov	r1, r3
 8014e86:	6878      	ldr	r0, [r7, #4]
 8014e88:	f7f6 fd8a 	bl	800b9a0 <pbuf_remove_header>
 8014e8c:	4603      	mov	r3, r0
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d10e      	bne.n	8014eb0 <ethernet_input+0x104>
        etharp_input(p, netif);
 8014e92:	6839      	ldr	r1, [r7, #0]
 8014e94:	6878      	ldr	r0, [r7, #4]
 8014e96:	f7fe f8c7 	bl	8013028 <etharp_input>
      break;
 8014e9a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8014e9c:	2300      	movs	r3, #0
 8014e9e:	e00c      	b.n	8014eba <ethernet_input+0x10e>
    goto free_and_return;
 8014ea0:	bf00      	nop
 8014ea2:	e006      	b.n	8014eb2 <ethernet_input+0x106>
        goto free_and_return;
 8014ea4:	bf00      	nop
 8014ea6:	e004      	b.n	8014eb2 <ethernet_input+0x106>
        goto free_and_return;
 8014ea8:	bf00      	nop
 8014eaa:	e002      	b.n	8014eb2 <ethernet_input+0x106>
        goto free_and_return;
 8014eac:	bf00      	nop
 8014eae:	e000      	b.n	8014eb2 <ethernet_input+0x106>
        goto free_and_return;
 8014eb0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8014eb2:	6878      	ldr	r0, [r7, #4]
 8014eb4:	f7f6 fdfa 	bl	800baac <pbuf_free>
  return ERR_OK;
 8014eb8:	2300      	movs	r3, #0
}
 8014eba:	4618      	mov	r0, r3
 8014ebc:	3718      	adds	r7, #24
 8014ebe:	46bd      	mov	sp, r7
 8014ec0:	bd80      	pop	{r7, pc}
 8014ec2:	bf00      	nop
 8014ec4:	08019fa8 	.word	0x08019fa8

08014ec8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014ec8:	b580      	push	{r7, lr}
 8014eca:	b086      	sub	sp, #24
 8014ecc:	af00      	add	r7, sp, #0
 8014ece:	60f8      	str	r0, [r7, #12]
 8014ed0:	60b9      	str	r1, [r7, #8]
 8014ed2:	607a      	str	r2, [r7, #4]
 8014ed4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014ed6:	8c3b      	ldrh	r3, [r7, #32]
 8014ed8:	4618      	mov	r0, r3
 8014eda:	f7f5 fa3b 	bl	800a354 <lwip_htons>
 8014ede:	4603      	mov	r3, r0
 8014ee0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8014ee2:	210e      	movs	r1, #14
 8014ee4:	68b8      	ldr	r0, [r7, #8]
 8014ee6:	f7f6 fd4b 	bl	800b980 <pbuf_add_header>
 8014eea:	4603      	mov	r3, r0
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d125      	bne.n	8014f3c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8014ef0:	68bb      	ldr	r3, [r7, #8]
 8014ef2:	685b      	ldr	r3, [r3, #4]
 8014ef4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014ef6:	693b      	ldr	r3, [r7, #16]
 8014ef8:	8afa      	ldrh	r2, [r7, #22]
 8014efa:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014efc:	693b      	ldr	r3, [r7, #16]
 8014efe:	2206      	movs	r2, #6
 8014f00:	6839      	ldr	r1, [r7, #0]
 8014f02:	4618      	mov	r0, r3
 8014f04:	f000 fb09 	bl	801551a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014f08:	693b      	ldr	r3, [r7, #16]
 8014f0a:	3306      	adds	r3, #6
 8014f0c:	2206      	movs	r2, #6
 8014f0e:	6879      	ldr	r1, [r7, #4]
 8014f10:	4618      	mov	r0, r3
 8014f12:	f000 fb02 	bl	801551a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014f16:	68fb      	ldr	r3, [r7, #12]
 8014f18:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014f1c:	2b06      	cmp	r3, #6
 8014f1e:	d006      	beq.n	8014f2e <ethernet_output+0x66>
 8014f20:	4b0a      	ldr	r3, [pc, #40]	; (8014f4c <ethernet_output+0x84>)
 8014f22:	f44f 7299 	mov.w	r2, #306	; 0x132
 8014f26:	490a      	ldr	r1, [pc, #40]	; (8014f50 <ethernet_output+0x88>)
 8014f28:	480a      	ldr	r0, [pc, #40]	; (8014f54 <ethernet_output+0x8c>)
 8014f2a:	f000 fb67 	bl	80155fc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8014f2e:	68fb      	ldr	r3, [r7, #12]
 8014f30:	699b      	ldr	r3, [r3, #24]
 8014f32:	68b9      	ldr	r1, [r7, #8]
 8014f34:	68f8      	ldr	r0, [r7, #12]
 8014f36:	4798      	blx	r3
 8014f38:	4603      	mov	r3, r0
 8014f3a:	e002      	b.n	8014f42 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014f3c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8014f3e:	f06f 0301 	mvn.w	r3, #1
}
 8014f42:	4618      	mov	r0, r3
 8014f44:	3718      	adds	r7, #24
 8014f46:	46bd      	mov	sp, r7
 8014f48:	bd80      	pop	{r7, pc}
 8014f4a:	bf00      	nop
 8014f4c:	080199b8 	.word	0x080199b8
 8014f50:	080199f0 	.word	0x080199f0
 8014f54:	08019a24 	.word	0x08019a24

08014f58 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8014f58:	b580      	push	{r7, lr}
 8014f5a:	b082      	sub	sp, #8
 8014f5c:	af00      	add	r7, sp, #0
 8014f5e:	6078      	str	r0, [r7, #4]
 8014f60:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8014f62:	683b      	ldr	r3, [r7, #0]
 8014f64:	2200      	movs	r2, #0
 8014f66:	2104      	movs	r1, #4
 8014f68:	4618      	mov	r0, r3
 8014f6a:	f7ef fbeb 	bl	8004744 <osMessageQueueNew>
 8014f6e:	4602      	mov	r2, r0
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d102      	bne.n	8014f82 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8014f7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014f80:	e000      	b.n	8014f84 <sys_mbox_new+0x2c>

  return ERR_OK;
 8014f82:	2300      	movs	r3, #0
}
 8014f84:	4618      	mov	r0, r3
 8014f86:	3708      	adds	r7, #8
 8014f88:	46bd      	mov	sp, r7
 8014f8a:	bd80      	pop	{r7, pc}

08014f8c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8014f8c:	b580      	push	{r7, lr}
 8014f8e:	b082      	sub	sp, #8
 8014f90:	af00      	add	r7, sp, #0
 8014f92:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	681b      	ldr	r3, [r3, #0]
 8014f98:	4618      	mov	r0, r3
 8014f9a:	f7ef fd05 	bl	80049a8 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	681b      	ldr	r3, [r3, #0]
 8014fa2:	4618      	mov	r0, r3
 8014fa4:	f7ef fd20 	bl	80049e8 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8014fa8:	bf00      	nop
 8014faa:	3708      	adds	r7, #8
 8014fac:	46bd      	mov	sp, r7
 8014fae:	bd80      	pop	{r7, pc}

08014fb0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8014fb0:	b580      	push	{r7, lr}
 8014fb2:	b084      	sub	sp, #16
 8014fb4:	af00      	add	r7, sp, #0
 8014fb6:	6078      	str	r0, [r7, #4]
 8014fb8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	6818      	ldr	r0, [r3, #0]
 8014fbe:	4639      	mov	r1, r7
 8014fc0:	2300      	movs	r3, #0
 8014fc2:	2200      	movs	r2, #0
 8014fc4:	f7ef fc32 	bl	800482c <osMessageQueuePut>
 8014fc8:	4603      	mov	r3, r0
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d102      	bne.n	8014fd4 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8014fce:	2300      	movs	r3, #0
 8014fd0:	73fb      	strb	r3, [r7, #15]
 8014fd2:	e001      	b.n	8014fd8 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8014fd4:	23ff      	movs	r3, #255	; 0xff
 8014fd6:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8014fd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014fdc:	4618      	mov	r0, r3
 8014fde:	3710      	adds	r7, #16
 8014fe0:	46bd      	mov	sp, r7
 8014fe2:	bd80      	pop	{r7, pc}

08014fe4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8014fe4:	b580      	push	{r7, lr}
 8014fe6:	b086      	sub	sp, #24
 8014fe8:	af00      	add	r7, sp, #0
 8014fea:	60f8      	str	r0, [r7, #12]
 8014fec:	60b9      	str	r1, [r7, #8]
 8014fee:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8014ff0:	f7ef f894 	bl	800411c <osKernelGetTickCount>
 8014ff4:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d013      	beq.n	8015024 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8014ffc:	68fb      	ldr	r3, [r7, #12]
 8014ffe:	6818      	ldr	r0, [r3, #0]
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	2200      	movs	r2, #0
 8015004:	68b9      	ldr	r1, [r7, #8]
 8015006:	f7ef fc71 	bl	80048ec <osMessageQueueGet>
 801500a:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801500c:	693b      	ldr	r3, [r7, #16]
 801500e:	2b00      	cmp	r3, #0
 8015010:	d105      	bne.n	801501e <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8015012:	f7ef f883 	bl	800411c <osKernelGetTickCount>
 8015016:	4602      	mov	r2, r0
 8015018:	697b      	ldr	r3, [r7, #20]
 801501a:	1ad3      	subs	r3, r2, r3
 801501c:	e00f      	b.n	801503e <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801501e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015022:	e00c      	b.n	801503e <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	6818      	ldr	r0, [r3, #0]
 8015028:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801502c:	2200      	movs	r2, #0
 801502e:	68b9      	ldr	r1, [r7, #8]
 8015030:	f7ef fc5c 	bl	80048ec <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8015034:	f7ef f872 	bl	800411c <osKernelGetTickCount>
 8015038:	4602      	mov	r2, r0
 801503a:	697b      	ldr	r3, [r7, #20]
 801503c:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801503e:	4618      	mov	r0, r3
 8015040:	3718      	adds	r7, #24
 8015042:	46bd      	mov	sp, r7
 8015044:	bd80      	pop	{r7, pc}

08015046 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8015046:	b580      	push	{r7, lr}
 8015048:	b082      	sub	sp, #8
 801504a:	af00      	add	r7, sp, #0
 801504c:	6078      	str	r0, [r7, #4]
 801504e:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	6818      	ldr	r0, [r3, #0]
 8015054:	2300      	movs	r3, #0
 8015056:	2200      	movs	r2, #0
 8015058:	6839      	ldr	r1, [r7, #0]
 801505a:	f7ef fc47 	bl	80048ec <osMessageQueueGet>
 801505e:	4603      	mov	r3, r0
 8015060:	2b00      	cmp	r3, #0
 8015062:	d101      	bne.n	8015068 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 8015064:	2300      	movs	r3, #0
 8015066:	e001      	b.n	801506c <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8015068:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 801506c:	4618      	mov	r0, r3
 801506e:	3708      	adds	r7, #8
 8015070:	46bd      	mov	sp, r7
 8015072:	bd80      	pop	{r7, pc}

08015074 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8015074:	b480      	push	{r7}
 8015076:	b083      	sub	sp, #12
 8015078:	af00      	add	r7, sp, #0
 801507a:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	2b00      	cmp	r3, #0
 8015082:	d101      	bne.n	8015088 <sys_mbox_valid+0x14>
    return 0;
 8015084:	2300      	movs	r3, #0
 8015086:	e000      	b.n	801508a <sys_mbox_valid+0x16>
  else
    return 1;
 8015088:	2301      	movs	r3, #1
}
 801508a:	4618      	mov	r0, r3
 801508c:	370c      	adds	r7, #12
 801508e:	46bd      	mov	sp, r7
 8015090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015094:	4770      	bx	lr

08015096 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8015096:	b480      	push	{r7}
 8015098:	b083      	sub	sp, #12
 801509a:	af00      	add	r7, sp, #0
 801509c:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	2200      	movs	r2, #0
 80150a2:	601a      	str	r2, [r3, #0]
}
 80150a4:	bf00      	nop
 80150a6:	370c      	adds	r7, #12
 80150a8:	46bd      	mov	sp, r7
 80150aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ae:	4770      	bx	lr

080150b0 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80150b0:	b580      	push	{r7, lr}
 80150b2:	b082      	sub	sp, #8
 80150b4:	af00      	add	r7, sp, #0
 80150b6:	6078      	str	r0, [r7, #4]
 80150b8:	460b      	mov	r3, r1
 80150ba:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 80150bc:	78fb      	ldrb	r3, [r7, #3]
 80150be:	2200      	movs	r2, #0
 80150c0:	4619      	mov	r1, r3
 80150c2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80150c6:	f7ef f9f9 	bl	80044bc <osSemaphoreNew>
 80150ca:	4602      	mov	r2, r0
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d102      	bne.n	80150de <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80150d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80150dc:	e009      	b.n	80150f2 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 80150de:	78fb      	ldrb	r3, [r7, #3]
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d105      	bne.n	80150f0 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	681b      	ldr	r3, [r3, #0]
 80150e8:	2100      	movs	r1, #0
 80150ea:	4618      	mov	r0, r3
 80150ec:	f7ef fa70 	bl	80045d0 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80150f0:	2300      	movs	r3, #0
}
 80150f2:	4618      	mov	r0, r3
 80150f4:	3708      	adds	r7, #8
 80150f6:	46bd      	mov	sp, r7
 80150f8:	bd80      	pop	{r7, pc}

080150fa <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80150fa:	b580      	push	{r7, lr}
 80150fc:	b084      	sub	sp, #16
 80150fe:	af00      	add	r7, sp, #0
 8015100:	6078      	str	r0, [r7, #4]
 8015102:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 8015104:	f7ef f80a 	bl	800411c <osKernelGetTickCount>
 8015108:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801510a:	683b      	ldr	r3, [r7, #0]
 801510c:	2b00      	cmp	r3, #0
 801510e:	d011      	beq.n	8015134 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	6839      	ldr	r1, [r7, #0]
 8015116:	4618      	mov	r0, r3
 8015118:	f7ef fa5a 	bl	80045d0 <osSemaphoreAcquire>
 801511c:	4603      	mov	r3, r0
 801511e:	2b00      	cmp	r3, #0
 8015120:	d105      	bne.n	801512e <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 8015122:	f7ee fffb 	bl	800411c <osKernelGetTickCount>
 8015126:	4602      	mov	r2, r0
 8015128:	68fb      	ldr	r3, [r7, #12]
 801512a:	1ad3      	subs	r3, r2, r3
 801512c:	e012      	b.n	8015154 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801512e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015132:	e00f      	b.n	8015154 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 8015134:	bf00      	nop
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801513e:	4618      	mov	r0, r3
 8015140:	f7ef fa46 	bl	80045d0 <osSemaphoreAcquire>
 8015144:	4603      	mov	r3, r0
 8015146:	2b00      	cmp	r3, #0
 8015148:	d1f5      	bne.n	8015136 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801514a:	f7ee ffe7 	bl	800411c <osKernelGetTickCount>
 801514e:	4602      	mov	r2, r0
 8015150:	68fb      	ldr	r3, [r7, #12]
 8015152:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8015154:	4618      	mov	r0, r3
 8015156:	3710      	adds	r7, #16
 8015158:	46bd      	mov	sp, r7
 801515a:	bd80      	pop	{r7, pc}

0801515c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801515c:	b580      	push	{r7, lr}
 801515e:	b082      	sub	sp, #8
 8015160:	af00      	add	r7, sp, #0
 8015162:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	681b      	ldr	r3, [r3, #0]
 8015168:	4618      	mov	r0, r3
 801516a:	f7ef fa83 	bl	8004674 <osSemaphoreRelease>
}
 801516e:	bf00      	nop
 8015170:	3708      	adds	r7, #8
 8015172:	46bd      	mov	sp, r7
 8015174:	bd80      	pop	{r7, pc}

08015176 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8015176:	b580      	push	{r7, lr}
 8015178:	b082      	sub	sp, #8
 801517a:	af00      	add	r7, sp, #0
 801517c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	4618      	mov	r0, r3
 8015184:	f7ef faba 	bl	80046fc <osSemaphoreDelete>
}
 8015188:	bf00      	nop
 801518a:	3708      	adds	r7, #8
 801518c:	46bd      	mov	sp, r7
 801518e:	bd80      	pop	{r7, pc}

08015190 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8015190:	b480      	push	{r7}
 8015192:	b083      	sub	sp, #12
 8015194:	af00      	add	r7, sp, #0
 8015196:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	2b00      	cmp	r3, #0
 801519e:	d101      	bne.n	80151a4 <sys_sem_valid+0x14>
    return 0;
 80151a0:	2300      	movs	r3, #0
 80151a2:	e000      	b.n	80151a6 <sys_sem_valid+0x16>
  else
    return 1;
 80151a4:	2301      	movs	r3, #1
}
 80151a6:	4618      	mov	r0, r3
 80151a8:	370c      	adds	r7, #12
 80151aa:	46bd      	mov	sp, r7
 80151ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151b0:	4770      	bx	lr

080151b2 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 80151b2:	b480      	push	{r7}
 80151b4:	b083      	sub	sp, #12
 80151b6:	af00      	add	r7, sp, #0
 80151b8:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	2200      	movs	r2, #0
 80151be:	601a      	str	r2, [r3, #0]
}
 80151c0:	bf00      	nop
 80151c2:	370c      	adds	r7, #12
 80151c4:	46bd      	mov	sp, r7
 80151c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ca:	4770      	bx	lr

080151cc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80151cc:	b580      	push	{r7, lr}
 80151ce:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 80151d0:	2000      	movs	r0, #0
 80151d2:	f7ef f865 	bl	80042a0 <osMutexNew>
 80151d6:	4603      	mov	r3, r0
 80151d8:	4a01      	ldr	r2, [pc, #4]	; (80151e0 <sys_init+0x14>)
 80151da:	6013      	str	r3, [r2, #0]
#endif
}
 80151dc:	bf00      	nop
 80151de:	bd80      	pop	{r7, pc}
 80151e0:	2000b7f8 	.word	0x2000b7f8

080151e4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80151e4:	b580      	push	{r7, lr}
 80151e6:	b082      	sub	sp, #8
 80151e8:	af00      	add	r7, sp, #0
 80151ea:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 80151ec:	2000      	movs	r0, #0
 80151ee:	f7ef f857 	bl	80042a0 <osMutexNew>
 80151f2:	4602      	mov	r2, r0
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	681b      	ldr	r3, [r3, #0]
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d102      	bne.n	8015206 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8015200:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015204:	e000      	b.n	8015208 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8015206:	2300      	movs	r3, #0
}
 8015208:	4618      	mov	r0, r3
 801520a:	3708      	adds	r7, #8
 801520c:	46bd      	mov	sp, r7
 801520e:	bd80      	pop	{r7, pc}

08015210 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8015210:	b580      	push	{r7, lr}
 8015212:	b082      	sub	sp, #8
 8015214:	af00      	add	r7, sp, #0
 8015216:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015220:	4618      	mov	r0, r3
 8015222:	f7ef f8c3 	bl	80043ac <osMutexAcquire>
#endif
}
 8015226:	bf00      	nop
 8015228:	3708      	adds	r7, #8
 801522a:	46bd      	mov	sp, r7
 801522c:	bd80      	pop	{r7, pc}

0801522e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801522e:	b580      	push	{r7, lr}
 8015230:	b082      	sub	sp, #8
 8015232:	af00      	add	r7, sp, #0
 8015234:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	4618      	mov	r0, r3
 801523c:	f7ef f901 	bl	8004442 <osMutexRelease>
}
 8015240:	bf00      	nop
 8015242:	3708      	adds	r7, #8
 8015244:	46bd      	mov	sp, r7
 8015246:	bd80      	pop	{r7, pc}

08015248 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8015248:	b580      	push	{r7, lr}
 801524a:	b08e      	sub	sp, #56	; 0x38
 801524c:	af00      	add	r7, sp, #0
 801524e:	60f8      	str	r0, [r7, #12]
 8015250:	60b9      	str	r1, [r7, #8]
 8015252:	607a      	str	r2, [r7, #4]
 8015254:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8015256:	f107 0314 	add.w	r3, r7, #20
 801525a:	2224      	movs	r2, #36	; 0x24
 801525c:	2100      	movs	r1, #0
 801525e:	4618      	mov	r0, r3
 8015260:	f000 f969 	bl	8015536 <memset>
 8015264:	68fb      	ldr	r3, [r7, #12]
 8015266:	617b      	str	r3, [r7, #20]
 8015268:	683b      	ldr	r3, [r7, #0]
 801526a:	62bb      	str	r3, [r7, #40]	; 0x28
 801526c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801526e:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8015270:	f107 0314 	add.w	r3, r7, #20
 8015274:	461a      	mov	r2, r3
 8015276:	6879      	ldr	r1, [r7, #4]
 8015278:	68b8      	ldr	r0, [r7, #8]
 801527a:	f7ee ff64 	bl	8004146 <osThreadNew>
 801527e:	4603      	mov	r3, r0
#endif
}
 8015280:	4618      	mov	r0, r3
 8015282:	3738      	adds	r7, #56	; 0x38
 8015284:	46bd      	mov	sp, r7
 8015286:	bd80      	pop	{r7, pc}

08015288 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8015288:	b580      	push	{r7, lr}
 801528a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801528c:	4b04      	ldr	r3, [pc, #16]	; (80152a0 <sys_arch_protect+0x18>)
 801528e:	681b      	ldr	r3, [r3, #0]
 8015290:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015294:	4618      	mov	r0, r3
 8015296:	f7ef f889 	bl	80043ac <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801529a:	2301      	movs	r3, #1
}
 801529c:	4618      	mov	r0, r3
 801529e:	bd80      	pop	{r7, pc}
 80152a0:	2000b7f8 	.word	0x2000b7f8

080152a4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80152a4:	b580      	push	{r7, lr}
 80152a6:	b082      	sub	sp, #8
 80152a8:	af00      	add	r7, sp, #0
 80152aa:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80152ac:	4b04      	ldr	r3, [pc, #16]	; (80152c0 <sys_arch_unprotect+0x1c>)
 80152ae:	681b      	ldr	r3, [r3, #0]
 80152b0:	4618      	mov	r0, r3
 80152b2:	f7ef f8c6 	bl	8004442 <osMutexRelease>
}
 80152b6:	bf00      	nop
 80152b8:	3708      	adds	r7, #8
 80152ba:	46bd      	mov	sp, r7
 80152bc:	bd80      	pop	{r7, pc}
 80152be:	bf00      	nop
 80152c0:	2000b7f8 	.word	0x2000b7f8

080152c4 <std>:
 80152c4:	2300      	movs	r3, #0
 80152c6:	b510      	push	{r4, lr}
 80152c8:	4604      	mov	r4, r0
 80152ca:	e9c0 3300 	strd	r3, r3, [r0]
 80152ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80152d2:	6083      	str	r3, [r0, #8]
 80152d4:	8181      	strh	r1, [r0, #12]
 80152d6:	6643      	str	r3, [r0, #100]	; 0x64
 80152d8:	81c2      	strh	r2, [r0, #14]
 80152da:	6183      	str	r3, [r0, #24]
 80152dc:	4619      	mov	r1, r3
 80152de:	2208      	movs	r2, #8
 80152e0:	305c      	adds	r0, #92	; 0x5c
 80152e2:	f000 f928 	bl	8015536 <memset>
 80152e6:	4b05      	ldr	r3, [pc, #20]	; (80152fc <std+0x38>)
 80152e8:	6263      	str	r3, [r4, #36]	; 0x24
 80152ea:	4b05      	ldr	r3, [pc, #20]	; (8015300 <std+0x3c>)
 80152ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80152ee:	4b05      	ldr	r3, [pc, #20]	; (8015304 <std+0x40>)
 80152f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80152f2:	4b05      	ldr	r3, [pc, #20]	; (8015308 <std+0x44>)
 80152f4:	6224      	str	r4, [r4, #32]
 80152f6:	6323      	str	r3, [r4, #48]	; 0x30
 80152f8:	bd10      	pop	{r4, pc}
 80152fa:	bf00      	nop
 80152fc:	080157a1 	.word	0x080157a1
 8015300:	080157c3 	.word	0x080157c3
 8015304:	080157fb 	.word	0x080157fb
 8015308:	0801581f 	.word	0x0801581f

0801530c <_cleanup_r>:
 801530c:	4901      	ldr	r1, [pc, #4]	; (8015314 <_cleanup_r+0x8>)
 801530e:	f000 b8af 	b.w	8015470 <_fwalk_reent>
 8015312:	bf00      	nop
 8015314:	080159b5 	.word	0x080159b5

08015318 <__sfmoreglue>:
 8015318:	b570      	push	{r4, r5, r6, lr}
 801531a:	1e4a      	subs	r2, r1, #1
 801531c:	2568      	movs	r5, #104	; 0x68
 801531e:	4355      	muls	r5, r2
 8015320:	460e      	mov	r6, r1
 8015322:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015326:	f000 f90f 	bl	8015548 <_malloc_r>
 801532a:	4604      	mov	r4, r0
 801532c:	b140      	cbz	r0, 8015340 <__sfmoreglue+0x28>
 801532e:	2100      	movs	r1, #0
 8015330:	e9c0 1600 	strd	r1, r6, [r0]
 8015334:	300c      	adds	r0, #12
 8015336:	60a0      	str	r0, [r4, #8]
 8015338:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801533c:	f000 f8fb 	bl	8015536 <memset>
 8015340:	4620      	mov	r0, r4
 8015342:	bd70      	pop	{r4, r5, r6, pc}

08015344 <__sfp_lock_acquire>:
 8015344:	4801      	ldr	r0, [pc, #4]	; (801534c <__sfp_lock_acquire+0x8>)
 8015346:	f000 b8d8 	b.w	80154fa <__retarget_lock_acquire_recursive>
 801534a:	bf00      	nop
 801534c:	2000b804 	.word	0x2000b804

08015350 <__sfp_lock_release>:
 8015350:	4801      	ldr	r0, [pc, #4]	; (8015358 <__sfp_lock_release+0x8>)
 8015352:	f000 b8d3 	b.w	80154fc <__retarget_lock_release_recursive>
 8015356:	bf00      	nop
 8015358:	2000b804 	.word	0x2000b804

0801535c <__sinit_lock_acquire>:
 801535c:	4801      	ldr	r0, [pc, #4]	; (8015364 <__sinit_lock_acquire+0x8>)
 801535e:	f000 b8cc 	b.w	80154fa <__retarget_lock_acquire_recursive>
 8015362:	bf00      	nop
 8015364:	2000b7ff 	.word	0x2000b7ff

08015368 <__sinit_lock_release>:
 8015368:	4801      	ldr	r0, [pc, #4]	; (8015370 <__sinit_lock_release+0x8>)
 801536a:	f000 b8c7 	b.w	80154fc <__retarget_lock_release_recursive>
 801536e:	bf00      	nop
 8015370:	2000b7ff 	.word	0x2000b7ff

08015374 <__sinit>:
 8015374:	b510      	push	{r4, lr}
 8015376:	4604      	mov	r4, r0
 8015378:	f7ff fff0 	bl	801535c <__sinit_lock_acquire>
 801537c:	69a3      	ldr	r3, [r4, #24]
 801537e:	b11b      	cbz	r3, 8015388 <__sinit+0x14>
 8015380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015384:	f7ff bff0 	b.w	8015368 <__sinit_lock_release>
 8015388:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801538c:	6523      	str	r3, [r4, #80]	; 0x50
 801538e:	4b13      	ldr	r3, [pc, #76]	; (80153dc <__sinit+0x68>)
 8015390:	4a13      	ldr	r2, [pc, #76]	; (80153e0 <__sinit+0x6c>)
 8015392:	681b      	ldr	r3, [r3, #0]
 8015394:	62a2      	str	r2, [r4, #40]	; 0x28
 8015396:	42a3      	cmp	r3, r4
 8015398:	bf04      	itt	eq
 801539a:	2301      	moveq	r3, #1
 801539c:	61a3      	streq	r3, [r4, #24]
 801539e:	4620      	mov	r0, r4
 80153a0:	f000 f820 	bl	80153e4 <__sfp>
 80153a4:	6060      	str	r0, [r4, #4]
 80153a6:	4620      	mov	r0, r4
 80153a8:	f000 f81c 	bl	80153e4 <__sfp>
 80153ac:	60a0      	str	r0, [r4, #8]
 80153ae:	4620      	mov	r0, r4
 80153b0:	f000 f818 	bl	80153e4 <__sfp>
 80153b4:	2200      	movs	r2, #0
 80153b6:	60e0      	str	r0, [r4, #12]
 80153b8:	2104      	movs	r1, #4
 80153ba:	6860      	ldr	r0, [r4, #4]
 80153bc:	f7ff ff82 	bl	80152c4 <std>
 80153c0:	68a0      	ldr	r0, [r4, #8]
 80153c2:	2201      	movs	r2, #1
 80153c4:	2109      	movs	r1, #9
 80153c6:	f7ff ff7d 	bl	80152c4 <std>
 80153ca:	68e0      	ldr	r0, [r4, #12]
 80153cc:	2202      	movs	r2, #2
 80153ce:	2112      	movs	r1, #18
 80153d0:	f7ff ff78 	bl	80152c4 <std>
 80153d4:	2301      	movs	r3, #1
 80153d6:	61a3      	str	r3, [r4, #24]
 80153d8:	e7d2      	b.n	8015380 <__sinit+0xc>
 80153da:	bf00      	nop
 80153dc:	0801a018 	.word	0x0801a018
 80153e0:	0801530d 	.word	0x0801530d

080153e4 <__sfp>:
 80153e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153e6:	4607      	mov	r7, r0
 80153e8:	f7ff ffac 	bl	8015344 <__sfp_lock_acquire>
 80153ec:	4b1e      	ldr	r3, [pc, #120]	; (8015468 <__sfp+0x84>)
 80153ee:	681e      	ldr	r6, [r3, #0]
 80153f0:	69b3      	ldr	r3, [r6, #24]
 80153f2:	b913      	cbnz	r3, 80153fa <__sfp+0x16>
 80153f4:	4630      	mov	r0, r6
 80153f6:	f7ff ffbd 	bl	8015374 <__sinit>
 80153fa:	3648      	adds	r6, #72	; 0x48
 80153fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015400:	3b01      	subs	r3, #1
 8015402:	d503      	bpl.n	801540c <__sfp+0x28>
 8015404:	6833      	ldr	r3, [r6, #0]
 8015406:	b30b      	cbz	r3, 801544c <__sfp+0x68>
 8015408:	6836      	ldr	r6, [r6, #0]
 801540a:	e7f7      	b.n	80153fc <__sfp+0x18>
 801540c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015410:	b9d5      	cbnz	r5, 8015448 <__sfp+0x64>
 8015412:	4b16      	ldr	r3, [pc, #88]	; (801546c <__sfp+0x88>)
 8015414:	60e3      	str	r3, [r4, #12]
 8015416:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801541a:	6665      	str	r5, [r4, #100]	; 0x64
 801541c:	f000 f86c 	bl	80154f8 <__retarget_lock_init_recursive>
 8015420:	f7ff ff96 	bl	8015350 <__sfp_lock_release>
 8015424:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015428:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801542c:	6025      	str	r5, [r4, #0]
 801542e:	61a5      	str	r5, [r4, #24]
 8015430:	2208      	movs	r2, #8
 8015432:	4629      	mov	r1, r5
 8015434:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015438:	f000 f87d 	bl	8015536 <memset>
 801543c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015440:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015444:	4620      	mov	r0, r4
 8015446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015448:	3468      	adds	r4, #104	; 0x68
 801544a:	e7d9      	b.n	8015400 <__sfp+0x1c>
 801544c:	2104      	movs	r1, #4
 801544e:	4638      	mov	r0, r7
 8015450:	f7ff ff62 	bl	8015318 <__sfmoreglue>
 8015454:	4604      	mov	r4, r0
 8015456:	6030      	str	r0, [r6, #0]
 8015458:	2800      	cmp	r0, #0
 801545a:	d1d5      	bne.n	8015408 <__sfp+0x24>
 801545c:	f7ff ff78 	bl	8015350 <__sfp_lock_release>
 8015460:	230c      	movs	r3, #12
 8015462:	603b      	str	r3, [r7, #0]
 8015464:	e7ee      	b.n	8015444 <__sfp+0x60>
 8015466:	bf00      	nop
 8015468:	0801a018 	.word	0x0801a018
 801546c:	ffff0001 	.word	0xffff0001

08015470 <_fwalk_reent>:
 8015470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015474:	4606      	mov	r6, r0
 8015476:	4688      	mov	r8, r1
 8015478:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801547c:	2700      	movs	r7, #0
 801547e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015482:	f1b9 0901 	subs.w	r9, r9, #1
 8015486:	d505      	bpl.n	8015494 <_fwalk_reent+0x24>
 8015488:	6824      	ldr	r4, [r4, #0]
 801548a:	2c00      	cmp	r4, #0
 801548c:	d1f7      	bne.n	801547e <_fwalk_reent+0xe>
 801548e:	4638      	mov	r0, r7
 8015490:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015494:	89ab      	ldrh	r3, [r5, #12]
 8015496:	2b01      	cmp	r3, #1
 8015498:	d907      	bls.n	80154aa <_fwalk_reent+0x3a>
 801549a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801549e:	3301      	adds	r3, #1
 80154a0:	d003      	beq.n	80154aa <_fwalk_reent+0x3a>
 80154a2:	4629      	mov	r1, r5
 80154a4:	4630      	mov	r0, r6
 80154a6:	47c0      	blx	r8
 80154a8:	4307      	orrs	r7, r0
 80154aa:	3568      	adds	r5, #104	; 0x68
 80154ac:	e7e9      	b.n	8015482 <_fwalk_reent+0x12>
	...

080154b0 <__libc_init_array>:
 80154b0:	b570      	push	{r4, r5, r6, lr}
 80154b2:	4d0d      	ldr	r5, [pc, #52]	; (80154e8 <__libc_init_array+0x38>)
 80154b4:	4c0d      	ldr	r4, [pc, #52]	; (80154ec <__libc_init_array+0x3c>)
 80154b6:	1b64      	subs	r4, r4, r5
 80154b8:	10a4      	asrs	r4, r4, #2
 80154ba:	2600      	movs	r6, #0
 80154bc:	42a6      	cmp	r6, r4
 80154be:	d109      	bne.n	80154d4 <__libc_init_array+0x24>
 80154c0:	4d0b      	ldr	r5, [pc, #44]	; (80154f0 <__libc_init_array+0x40>)
 80154c2:	4c0c      	ldr	r4, [pc, #48]	; (80154f4 <__libc_init_array+0x44>)
 80154c4:	f000 ffcc 	bl	8016460 <_init>
 80154c8:	1b64      	subs	r4, r4, r5
 80154ca:	10a4      	asrs	r4, r4, #2
 80154cc:	2600      	movs	r6, #0
 80154ce:	42a6      	cmp	r6, r4
 80154d0:	d105      	bne.n	80154de <__libc_init_array+0x2e>
 80154d2:	bd70      	pop	{r4, r5, r6, pc}
 80154d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80154d8:	4798      	blx	r3
 80154da:	3601      	adds	r6, #1
 80154dc:	e7ee      	b.n	80154bc <__libc_init_array+0xc>
 80154de:	f855 3b04 	ldr.w	r3, [r5], #4
 80154e2:	4798      	blx	r3
 80154e4:	3601      	adds	r6, #1
 80154e6:	e7f2      	b.n	80154ce <__libc_init_array+0x1e>
 80154e8:	0801a10c 	.word	0x0801a10c
 80154ec:	0801a10c 	.word	0x0801a10c
 80154f0:	0801a10c 	.word	0x0801a10c
 80154f4:	0801a110 	.word	0x0801a110

080154f8 <__retarget_lock_init_recursive>:
 80154f8:	4770      	bx	lr

080154fa <__retarget_lock_acquire_recursive>:
 80154fa:	4770      	bx	lr

080154fc <__retarget_lock_release_recursive>:
 80154fc:	4770      	bx	lr

080154fe <memcmp>:
 80154fe:	b530      	push	{r4, r5, lr}
 8015500:	3901      	subs	r1, #1
 8015502:	2400      	movs	r4, #0
 8015504:	42a2      	cmp	r2, r4
 8015506:	d101      	bne.n	801550c <memcmp+0xe>
 8015508:	2000      	movs	r0, #0
 801550a:	e005      	b.n	8015518 <memcmp+0x1a>
 801550c:	5d03      	ldrb	r3, [r0, r4]
 801550e:	3401      	adds	r4, #1
 8015510:	5d0d      	ldrb	r5, [r1, r4]
 8015512:	42ab      	cmp	r3, r5
 8015514:	d0f6      	beq.n	8015504 <memcmp+0x6>
 8015516:	1b58      	subs	r0, r3, r5
 8015518:	bd30      	pop	{r4, r5, pc}

0801551a <memcpy>:
 801551a:	440a      	add	r2, r1
 801551c:	4291      	cmp	r1, r2
 801551e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8015522:	d100      	bne.n	8015526 <memcpy+0xc>
 8015524:	4770      	bx	lr
 8015526:	b510      	push	{r4, lr}
 8015528:	f811 4b01 	ldrb.w	r4, [r1], #1
 801552c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015530:	4291      	cmp	r1, r2
 8015532:	d1f9      	bne.n	8015528 <memcpy+0xe>
 8015534:	bd10      	pop	{r4, pc}

08015536 <memset>:
 8015536:	4402      	add	r2, r0
 8015538:	4603      	mov	r3, r0
 801553a:	4293      	cmp	r3, r2
 801553c:	d100      	bne.n	8015540 <memset+0xa>
 801553e:	4770      	bx	lr
 8015540:	f803 1b01 	strb.w	r1, [r3], #1
 8015544:	e7f9      	b.n	801553a <memset+0x4>
	...

08015548 <_malloc_r>:
 8015548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801554a:	1ccd      	adds	r5, r1, #3
 801554c:	f025 0503 	bic.w	r5, r5, #3
 8015550:	3508      	adds	r5, #8
 8015552:	2d0c      	cmp	r5, #12
 8015554:	bf38      	it	cc
 8015556:	250c      	movcc	r5, #12
 8015558:	2d00      	cmp	r5, #0
 801555a:	4606      	mov	r6, r0
 801555c:	db01      	blt.n	8015562 <_malloc_r+0x1a>
 801555e:	42a9      	cmp	r1, r5
 8015560:	d903      	bls.n	801556a <_malloc_r+0x22>
 8015562:	230c      	movs	r3, #12
 8015564:	6033      	str	r3, [r6, #0]
 8015566:	2000      	movs	r0, #0
 8015568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801556a:	f000 fa8b 	bl	8015a84 <__malloc_lock>
 801556e:	4921      	ldr	r1, [pc, #132]	; (80155f4 <_malloc_r+0xac>)
 8015570:	680a      	ldr	r2, [r1, #0]
 8015572:	4614      	mov	r4, r2
 8015574:	b99c      	cbnz	r4, 801559e <_malloc_r+0x56>
 8015576:	4f20      	ldr	r7, [pc, #128]	; (80155f8 <_malloc_r+0xb0>)
 8015578:	683b      	ldr	r3, [r7, #0]
 801557a:	b923      	cbnz	r3, 8015586 <_malloc_r+0x3e>
 801557c:	4621      	mov	r1, r4
 801557e:	4630      	mov	r0, r6
 8015580:	f000 f8fe 	bl	8015780 <_sbrk_r>
 8015584:	6038      	str	r0, [r7, #0]
 8015586:	4629      	mov	r1, r5
 8015588:	4630      	mov	r0, r6
 801558a:	f000 f8f9 	bl	8015780 <_sbrk_r>
 801558e:	1c43      	adds	r3, r0, #1
 8015590:	d123      	bne.n	80155da <_malloc_r+0x92>
 8015592:	230c      	movs	r3, #12
 8015594:	6033      	str	r3, [r6, #0]
 8015596:	4630      	mov	r0, r6
 8015598:	f000 fa7a 	bl	8015a90 <__malloc_unlock>
 801559c:	e7e3      	b.n	8015566 <_malloc_r+0x1e>
 801559e:	6823      	ldr	r3, [r4, #0]
 80155a0:	1b5b      	subs	r3, r3, r5
 80155a2:	d417      	bmi.n	80155d4 <_malloc_r+0x8c>
 80155a4:	2b0b      	cmp	r3, #11
 80155a6:	d903      	bls.n	80155b0 <_malloc_r+0x68>
 80155a8:	6023      	str	r3, [r4, #0]
 80155aa:	441c      	add	r4, r3
 80155ac:	6025      	str	r5, [r4, #0]
 80155ae:	e004      	b.n	80155ba <_malloc_r+0x72>
 80155b0:	6863      	ldr	r3, [r4, #4]
 80155b2:	42a2      	cmp	r2, r4
 80155b4:	bf0c      	ite	eq
 80155b6:	600b      	streq	r3, [r1, #0]
 80155b8:	6053      	strne	r3, [r2, #4]
 80155ba:	4630      	mov	r0, r6
 80155bc:	f000 fa68 	bl	8015a90 <__malloc_unlock>
 80155c0:	f104 000b 	add.w	r0, r4, #11
 80155c4:	1d23      	adds	r3, r4, #4
 80155c6:	f020 0007 	bic.w	r0, r0, #7
 80155ca:	1ac2      	subs	r2, r0, r3
 80155cc:	d0cc      	beq.n	8015568 <_malloc_r+0x20>
 80155ce:	1a1b      	subs	r3, r3, r0
 80155d0:	50a3      	str	r3, [r4, r2]
 80155d2:	e7c9      	b.n	8015568 <_malloc_r+0x20>
 80155d4:	4622      	mov	r2, r4
 80155d6:	6864      	ldr	r4, [r4, #4]
 80155d8:	e7cc      	b.n	8015574 <_malloc_r+0x2c>
 80155da:	1cc4      	adds	r4, r0, #3
 80155dc:	f024 0403 	bic.w	r4, r4, #3
 80155e0:	42a0      	cmp	r0, r4
 80155e2:	d0e3      	beq.n	80155ac <_malloc_r+0x64>
 80155e4:	1a21      	subs	r1, r4, r0
 80155e6:	4630      	mov	r0, r6
 80155e8:	f000 f8ca 	bl	8015780 <_sbrk_r>
 80155ec:	3001      	adds	r0, #1
 80155ee:	d1dd      	bne.n	80155ac <_malloc_r+0x64>
 80155f0:	e7cf      	b.n	8015592 <_malloc_r+0x4a>
 80155f2:	bf00      	nop
 80155f4:	20004c0c 	.word	0x20004c0c
 80155f8:	20004c10 	.word	0x20004c10

080155fc <iprintf>:
 80155fc:	b40f      	push	{r0, r1, r2, r3}
 80155fe:	4b0a      	ldr	r3, [pc, #40]	; (8015628 <iprintf+0x2c>)
 8015600:	b513      	push	{r0, r1, r4, lr}
 8015602:	681c      	ldr	r4, [r3, #0]
 8015604:	b124      	cbz	r4, 8015610 <iprintf+0x14>
 8015606:	69a3      	ldr	r3, [r4, #24]
 8015608:	b913      	cbnz	r3, 8015610 <iprintf+0x14>
 801560a:	4620      	mov	r0, r4
 801560c:	f7ff feb2 	bl	8015374 <__sinit>
 8015610:	ab05      	add	r3, sp, #20
 8015612:	9a04      	ldr	r2, [sp, #16]
 8015614:	68a1      	ldr	r1, [r4, #8]
 8015616:	9301      	str	r3, [sp, #4]
 8015618:	4620      	mov	r0, r4
 801561a:	f000 fab9 	bl	8015b90 <_vfiprintf_r>
 801561e:	b002      	add	sp, #8
 8015620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015624:	b004      	add	sp, #16
 8015626:	4770      	bx	lr
 8015628:	2000001c 	.word	0x2000001c

0801562c <rand>:
 801562c:	4b17      	ldr	r3, [pc, #92]	; (801568c <rand+0x60>)
 801562e:	b510      	push	{r4, lr}
 8015630:	681c      	ldr	r4, [r3, #0]
 8015632:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015634:	b9b3      	cbnz	r3, 8015664 <rand+0x38>
 8015636:	2018      	movs	r0, #24
 8015638:	f000 fa1c 	bl	8015a74 <malloc>
 801563c:	63a0      	str	r0, [r4, #56]	; 0x38
 801563e:	b928      	cbnz	r0, 801564c <rand+0x20>
 8015640:	4602      	mov	r2, r0
 8015642:	4b13      	ldr	r3, [pc, #76]	; (8015690 <rand+0x64>)
 8015644:	4813      	ldr	r0, [pc, #76]	; (8015694 <rand+0x68>)
 8015646:	214e      	movs	r1, #78	; 0x4e
 8015648:	f000 f900 	bl	801584c <__assert_func>
 801564c:	4a12      	ldr	r2, [pc, #72]	; (8015698 <rand+0x6c>)
 801564e:	4b13      	ldr	r3, [pc, #76]	; (801569c <rand+0x70>)
 8015650:	e9c0 2300 	strd	r2, r3, [r0]
 8015654:	4b12      	ldr	r3, [pc, #72]	; (80156a0 <rand+0x74>)
 8015656:	6083      	str	r3, [r0, #8]
 8015658:	230b      	movs	r3, #11
 801565a:	8183      	strh	r3, [r0, #12]
 801565c:	2201      	movs	r2, #1
 801565e:	2300      	movs	r3, #0
 8015660:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8015664:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8015666:	480f      	ldr	r0, [pc, #60]	; (80156a4 <rand+0x78>)
 8015668:	690a      	ldr	r2, [r1, #16]
 801566a:	694b      	ldr	r3, [r1, #20]
 801566c:	4c0e      	ldr	r4, [pc, #56]	; (80156a8 <rand+0x7c>)
 801566e:	4350      	muls	r0, r2
 8015670:	fb04 0003 	mla	r0, r4, r3, r0
 8015674:	fba2 3404 	umull	r3, r4, r2, r4
 8015678:	1c5a      	adds	r2, r3, #1
 801567a:	4404      	add	r4, r0
 801567c:	f144 0000 	adc.w	r0, r4, #0
 8015680:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8015684:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8015688:	bd10      	pop	{r4, pc}
 801568a:	bf00      	nop
 801568c:	2000001c 	.word	0x2000001c
 8015690:	0801a01c 	.word	0x0801a01c
 8015694:	0801a033 	.word	0x0801a033
 8015698:	abcd330e 	.word	0xabcd330e
 801569c:	e66d1234 	.word	0xe66d1234
 80156a0:	0005deec 	.word	0x0005deec
 80156a4:	5851f42d 	.word	0x5851f42d
 80156a8:	4c957f2d 	.word	0x4c957f2d

080156ac <cleanup_glue>:
 80156ac:	b538      	push	{r3, r4, r5, lr}
 80156ae:	460c      	mov	r4, r1
 80156b0:	6809      	ldr	r1, [r1, #0]
 80156b2:	4605      	mov	r5, r0
 80156b4:	b109      	cbz	r1, 80156ba <cleanup_glue+0xe>
 80156b6:	f7ff fff9 	bl	80156ac <cleanup_glue>
 80156ba:	4621      	mov	r1, r4
 80156bc:	4628      	mov	r0, r5
 80156be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80156c2:	f000 b9eb 	b.w	8015a9c <_free_r>
	...

080156c8 <_reclaim_reent>:
 80156c8:	4b2c      	ldr	r3, [pc, #176]	; (801577c <_reclaim_reent+0xb4>)
 80156ca:	681b      	ldr	r3, [r3, #0]
 80156cc:	4283      	cmp	r3, r0
 80156ce:	b570      	push	{r4, r5, r6, lr}
 80156d0:	4604      	mov	r4, r0
 80156d2:	d051      	beq.n	8015778 <_reclaim_reent+0xb0>
 80156d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80156d6:	b143      	cbz	r3, 80156ea <_reclaim_reent+0x22>
 80156d8:	68db      	ldr	r3, [r3, #12]
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d14a      	bne.n	8015774 <_reclaim_reent+0xac>
 80156de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80156e0:	6819      	ldr	r1, [r3, #0]
 80156e2:	b111      	cbz	r1, 80156ea <_reclaim_reent+0x22>
 80156e4:	4620      	mov	r0, r4
 80156e6:	f000 f9d9 	bl	8015a9c <_free_r>
 80156ea:	6961      	ldr	r1, [r4, #20]
 80156ec:	b111      	cbz	r1, 80156f4 <_reclaim_reent+0x2c>
 80156ee:	4620      	mov	r0, r4
 80156f0:	f000 f9d4 	bl	8015a9c <_free_r>
 80156f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80156f6:	b111      	cbz	r1, 80156fe <_reclaim_reent+0x36>
 80156f8:	4620      	mov	r0, r4
 80156fa:	f000 f9cf 	bl	8015a9c <_free_r>
 80156fe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8015700:	b111      	cbz	r1, 8015708 <_reclaim_reent+0x40>
 8015702:	4620      	mov	r0, r4
 8015704:	f000 f9ca 	bl	8015a9c <_free_r>
 8015708:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801570a:	b111      	cbz	r1, 8015712 <_reclaim_reent+0x4a>
 801570c:	4620      	mov	r0, r4
 801570e:	f000 f9c5 	bl	8015a9c <_free_r>
 8015712:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8015714:	b111      	cbz	r1, 801571c <_reclaim_reent+0x54>
 8015716:	4620      	mov	r0, r4
 8015718:	f000 f9c0 	bl	8015a9c <_free_r>
 801571c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801571e:	b111      	cbz	r1, 8015726 <_reclaim_reent+0x5e>
 8015720:	4620      	mov	r0, r4
 8015722:	f000 f9bb 	bl	8015a9c <_free_r>
 8015726:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8015728:	b111      	cbz	r1, 8015730 <_reclaim_reent+0x68>
 801572a:	4620      	mov	r0, r4
 801572c:	f000 f9b6 	bl	8015a9c <_free_r>
 8015730:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015732:	b111      	cbz	r1, 801573a <_reclaim_reent+0x72>
 8015734:	4620      	mov	r0, r4
 8015736:	f000 f9b1 	bl	8015a9c <_free_r>
 801573a:	69a3      	ldr	r3, [r4, #24]
 801573c:	b1e3      	cbz	r3, 8015778 <_reclaim_reent+0xb0>
 801573e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015740:	4620      	mov	r0, r4
 8015742:	4798      	blx	r3
 8015744:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8015746:	b1b9      	cbz	r1, 8015778 <_reclaim_reent+0xb0>
 8015748:	4620      	mov	r0, r4
 801574a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801574e:	f7ff bfad 	b.w	80156ac <cleanup_glue>
 8015752:	5949      	ldr	r1, [r1, r5]
 8015754:	b941      	cbnz	r1, 8015768 <_reclaim_reent+0xa0>
 8015756:	3504      	adds	r5, #4
 8015758:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801575a:	2d80      	cmp	r5, #128	; 0x80
 801575c:	68d9      	ldr	r1, [r3, #12]
 801575e:	d1f8      	bne.n	8015752 <_reclaim_reent+0x8a>
 8015760:	4620      	mov	r0, r4
 8015762:	f000 f99b 	bl	8015a9c <_free_r>
 8015766:	e7ba      	b.n	80156de <_reclaim_reent+0x16>
 8015768:	680e      	ldr	r6, [r1, #0]
 801576a:	4620      	mov	r0, r4
 801576c:	f000 f996 	bl	8015a9c <_free_r>
 8015770:	4631      	mov	r1, r6
 8015772:	e7ef      	b.n	8015754 <_reclaim_reent+0x8c>
 8015774:	2500      	movs	r5, #0
 8015776:	e7ef      	b.n	8015758 <_reclaim_reent+0x90>
 8015778:	bd70      	pop	{r4, r5, r6, pc}
 801577a:	bf00      	nop
 801577c:	2000001c 	.word	0x2000001c

08015780 <_sbrk_r>:
 8015780:	b538      	push	{r3, r4, r5, lr}
 8015782:	4d06      	ldr	r5, [pc, #24]	; (801579c <_sbrk_r+0x1c>)
 8015784:	2300      	movs	r3, #0
 8015786:	4604      	mov	r4, r0
 8015788:	4608      	mov	r0, r1
 801578a:	602b      	str	r3, [r5, #0]
 801578c:	f7eb fa72 	bl	8000c74 <_sbrk>
 8015790:	1c43      	adds	r3, r0, #1
 8015792:	d102      	bne.n	801579a <_sbrk_r+0x1a>
 8015794:	682b      	ldr	r3, [r5, #0]
 8015796:	b103      	cbz	r3, 801579a <_sbrk_r+0x1a>
 8015798:	6023      	str	r3, [r4, #0]
 801579a:	bd38      	pop	{r3, r4, r5, pc}
 801579c:	2000b7f4 	.word	0x2000b7f4

080157a0 <__sread>:
 80157a0:	b510      	push	{r4, lr}
 80157a2:	460c      	mov	r4, r1
 80157a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80157a8:	f000 fcb6 	bl	8016118 <_read_r>
 80157ac:	2800      	cmp	r0, #0
 80157ae:	bfab      	itete	ge
 80157b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80157b2:	89a3      	ldrhlt	r3, [r4, #12]
 80157b4:	181b      	addge	r3, r3, r0
 80157b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80157ba:	bfac      	ite	ge
 80157bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80157be:	81a3      	strhlt	r3, [r4, #12]
 80157c0:	bd10      	pop	{r4, pc}

080157c2 <__swrite>:
 80157c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157c6:	461f      	mov	r7, r3
 80157c8:	898b      	ldrh	r3, [r1, #12]
 80157ca:	05db      	lsls	r3, r3, #23
 80157cc:	4605      	mov	r5, r0
 80157ce:	460c      	mov	r4, r1
 80157d0:	4616      	mov	r6, r2
 80157d2:	d505      	bpl.n	80157e0 <__swrite+0x1e>
 80157d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80157d8:	2302      	movs	r3, #2
 80157da:	2200      	movs	r2, #0
 80157dc:	f000 f938 	bl	8015a50 <_lseek_r>
 80157e0:	89a3      	ldrh	r3, [r4, #12]
 80157e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80157e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80157ea:	81a3      	strh	r3, [r4, #12]
 80157ec:	4632      	mov	r2, r6
 80157ee:	463b      	mov	r3, r7
 80157f0:	4628      	mov	r0, r5
 80157f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80157f6:	f000 b817 	b.w	8015828 <_write_r>

080157fa <__sseek>:
 80157fa:	b510      	push	{r4, lr}
 80157fc:	460c      	mov	r4, r1
 80157fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015802:	f000 f925 	bl	8015a50 <_lseek_r>
 8015806:	1c43      	adds	r3, r0, #1
 8015808:	89a3      	ldrh	r3, [r4, #12]
 801580a:	bf15      	itete	ne
 801580c:	6560      	strne	r0, [r4, #84]	; 0x54
 801580e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015812:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015816:	81a3      	strheq	r3, [r4, #12]
 8015818:	bf18      	it	ne
 801581a:	81a3      	strhne	r3, [r4, #12]
 801581c:	bd10      	pop	{r4, pc}

0801581e <__sclose>:
 801581e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015822:	f000 b831 	b.w	8015888 <_close_r>
	...

08015828 <_write_r>:
 8015828:	b538      	push	{r3, r4, r5, lr}
 801582a:	4d07      	ldr	r5, [pc, #28]	; (8015848 <_write_r+0x20>)
 801582c:	4604      	mov	r4, r0
 801582e:	4608      	mov	r0, r1
 8015830:	4611      	mov	r1, r2
 8015832:	2200      	movs	r2, #0
 8015834:	602a      	str	r2, [r5, #0]
 8015836:	461a      	mov	r2, r3
 8015838:	f7eb f9cb 	bl	8000bd2 <_write>
 801583c:	1c43      	adds	r3, r0, #1
 801583e:	d102      	bne.n	8015846 <_write_r+0x1e>
 8015840:	682b      	ldr	r3, [r5, #0]
 8015842:	b103      	cbz	r3, 8015846 <_write_r+0x1e>
 8015844:	6023      	str	r3, [r4, #0]
 8015846:	bd38      	pop	{r3, r4, r5, pc}
 8015848:	2000b7f4 	.word	0x2000b7f4

0801584c <__assert_func>:
 801584c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801584e:	4614      	mov	r4, r2
 8015850:	461a      	mov	r2, r3
 8015852:	4b09      	ldr	r3, [pc, #36]	; (8015878 <__assert_func+0x2c>)
 8015854:	681b      	ldr	r3, [r3, #0]
 8015856:	4605      	mov	r5, r0
 8015858:	68d8      	ldr	r0, [r3, #12]
 801585a:	b14c      	cbz	r4, 8015870 <__assert_func+0x24>
 801585c:	4b07      	ldr	r3, [pc, #28]	; (801587c <__assert_func+0x30>)
 801585e:	9100      	str	r1, [sp, #0]
 8015860:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015864:	4906      	ldr	r1, [pc, #24]	; (8015880 <__assert_func+0x34>)
 8015866:	462b      	mov	r3, r5
 8015868:	f000 f8e0 	bl	8015a2c <fiprintf>
 801586c:	f000 fd26 	bl	80162bc <abort>
 8015870:	4b04      	ldr	r3, [pc, #16]	; (8015884 <__assert_func+0x38>)
 8015872:	461c      	mov	r4, r3
 8015874:	e7f3      	b.n	801585e <__assert_func+0x12>
 8015876:	bf00      	nop
 8015878:	2000001c 	.word	0x2000001c
 801587c:	0801a092 	.word	0x0801a092
 8015880:	0801a09f 	.word	0x0801a09f
 8015884:	0801a0cd 	.word	0x0801a0cd

08015888 <_close_r>:
 8015888:	b538      	push	{r3, r4, r5, lr}
 801588a:	4d06      	ldr	r5, [pc, #24]	; (80158a4 <_close_r+0x1c>)
 801588c:	2300      	movs	r3, #0
 801588e:	4604      	mov	r4, r0
 8015890:	4608      	mov	r0, r1
 8015892:	602b      	str	r3, [r5, #0]
 8015894:	f7eb f9b9 	bl	8000c0a <_close>
 8015898:	1c43      	adds	r3, r0, #1
 801589a:	d102      	bne.n	80158a2 <_close_r+0x1a>
 801589c:	682b      	ldr	r3, [r5, #0]
 801589e:	b103      	cbz	r3, 80158a2 <_close_r+0x1a>
 80158a0:	6023      	str	r3, [r4, #0]
 80158a2:	bd38      	pop	{r3, r4, r5, pc}
 80158a4:	2000b7f4 	.word	0x2000b7f4

080158a8 <__sflush_r>:
 80158a8:	898a      	ldrh	r2, [r1, #12]
 80158aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158ae:	4605      	mov	r5, r0
 80158b0:	0710      	lsls	r0, r2, #28
 80158b2:	460c      	mov	r4, r1
 80158b4:	d458      	bmi.n	8015968 <__sflush_r+0xc0>
 80158b6:	684b      	ldr	r3, [r1, #4]
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	dc05      	bgt.n	80158c8 <__sflush_r+0x20>
 80158bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80158be:	2b00      	cmp	r3, #0
 80158c0:	dc02      	bgt.n	80158c8 <__sflush_r+0x20>
 80158c2:	2000      	movs	r0, #0
 80158c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80158ca:	2e00      	cmp	r6, #0
 80158cc:	d0f9      	beq.n	80158c2 <__sflush_r+0x1a>
 80158ce:	2300      	movs	r3, #0
 80158d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80158d4:	682f      	ldr	r7, [r5, #0]
 80158d6:	602b      	str	r3, [r5, #0]
 80158d8:	d032      	beq.n	8015940 <__sflush_r+0x98>
 80158da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80158dc:	89a3      	ldrh	r3, [r4, #12]
 80158de:	075a      	lsls	r2, r3, #29
 80158e0:	d505      	bpl.n	80158ee <__sflush_r+0x46>
 80158e2:	6863      	ldr	r3, [r4, #4]
 80158e4:	1ac0      	subs	r0, r0, r3
 80158e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80158e8:	b10b      	cbz	r3, 80158ee <__sflush_r+0x46>
 80158ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80158ec:	1ac0      	subs	r0, r0, r3
 80158ee:	2300      	movs	r3, #0
 80158f0:	4602      	mov	r2, r0
 80158f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80158f4:	6a21      	ldr	r1, [r4, #32]
 80158f6:	4628      	mov	r0, r5
 80158f8:	47b0      	blx	r6
 80158fa:	1c43      	adds	r3, r0, #1
 80158fc:	89a3      	ldrh	r3, [r4, #12]
 80158fe:	d106      	bne.n	801590e <__sflush_r+0x66>
 8015900:	6829      	ldr	r1, [r5, #0]
 8015902:	291d      	cmp	r1, #29
 8015904:	d82c      	bhi.n	8015960 <__sflush_r+0xb8>
 8015906:	4a2a      	ldr	r2, [pc, #168]	; (80159b0 <__sflush_r+0x108>)
 8015908:	40ca      	lsrs	r2, r1
 801590a:	07d6      	lsls	r6, r2, #31
 801590c:	d528      	bpl.n	8015960 <__sflush_r+0xb8>
 801590e:	2200      	movs	r2, #0
 8015910:	6062      	str	r2, [r4, #4]
 8015912:	04d9      	lsls	r1, r3, #19
 8015914:	6922      	ldr	r2, [r4, #16]
 8015916:	6022      	str	r2, [r4, #0]
 8015918:	d504      	bpl.n	8015924 <__sflush_r+0x7c>
 801591a:	1c42      	adds	r2, r0, #1
 801591c:	d101      	bne.n	8015922 <__sflush_r+0x7a>
 801591e:	682b      	ldr	r3, [r5, #0]
 8015920:	b903      	cbnz	r3, 8015924 <__sflush_r+0x7c>
 8015922:	6560      	str	r0, [r4, #84]	; 0x54
 8015924:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015926:	602f      	str	r7, [r5, #0]
 8015928:	2900      	cmp	r1, #0
 801592a:	d0ca      	beq.n	80158c2 <__sflush_r+0x1a>
 801592c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015930:	4299      	cmp	r1, r3
 8015932:	d002      	beq.n	801593a <__sflush_r+0x92>
 8015934:	4628      	mov	r0, r5
 8015936:	f000 f8b1 	bl	8015a9c <_free_r>
 801593a:	2000      	movs	r0, #0
 801593c:	6360      	str	r0, [r4, #52]	; 0x34
 801593e:	e7c1      	b.n	80158c4 <__sflush_r+0x1c>
 8015940:	6a21      	ldr	r1, [r4, #32]
 8015942:	2301      	movs	r3, #1
 8015944:	4628      	mov	r0, r5
 8015946:	47b0      	blx	r6
 8015948:	1c41      	adds	r1, r0, #1
 801594a:	d1c7      	bne.n	80158dc <__sflush_r+0x34>
 801594c:	682b      	ldr	r3, [r5, #0]
 801594e:	2b00      	cmp	r3, #0
 8015950:	d0c4      	beq.n	80158dc <__sflush_r+0x34>
 8015952:	2b1d      	cmp	r3, #29
 8015954:	d001      	beq.n	801595a <__sflush_r+0xb2>
 8015956:	2b16      	cmp	r3, #22
 8015958:	d101      	bne.n	801595e <__sflush_r+0xb6>
 801595a:	602f      	str	r7, [r5, #0]
 801595c:	e7b1      	b.n	80158c2 <__sflush_r+0x1a>
 801595e:	89a3      	ldrh	r3, [r4, #12]
 8015960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015964:	81a3      	strh	r3, [r4, #12]
 8015966:	e7ad      	b.n	80158c4 <__sflush_r+0x1c>
 8015968:	690f      	ldr	r7, [r1, #16]
 801596a:	2f00      	cmp	r7, #0
 801596c:	d0a9      	beq.n	80158c2 <__sflush_r+0x1a>
 801596e:	0793      	lsls	r3, r2, #30
 8015970:	680e      	ldr	r6, [r1, #0]
 8015972:	bf08      	it	eq
 8015974:	694b      	ldreq	r3, [r1, #20]
 8015976:	600f      	str	r7, [r1, #0]
 8015978:	bf18      	it	ne
 801597a:	2300      	movne	r3, #0
 801597c:	eba6 0807 	sub.w	r8, r6, r7
 8015980:	608b      	str	r3, [r1, #8]
 8015982:	f1b8 0f00 	cmp.w	r8, #0
 8015986:	dd9c      	ble.n	80158c2 <__sflush_r+0x1a>
 8015988:	6a21      	ldr	r1, [r4, #32]
 801598a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801598c:	4643      	mov	r3, r8
 801598e:	463a      	mov	r2, r7
 8015990:	4628      	mov	r0, r5
 8015992:	47b0      	blx	r6
 8015994:	2800      	cmp	r0, #0
 8015996:	dc06      	bgt.n	80159a6 <__sflush_r+0xfe>
 8015998:	89a3      	ldrh	r3, [r4, #12]
 801599a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801599e:	81a3      	strh	r3, [r4, #12]
 80159a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80159a4:	e78e      	b.n	80158c4 <__sflush_r+0x1c>
 80159a6:	4407      	add	r7, r0
 80159a8:	eba8 0800 	sub.w	r8, r8, r0
 80159ac:	e7e9      	b.n	8015982 <__sflush_r+0xda>
 80159ae:	bf00      	nop
 80159b0:	20400001 	.word	0x20400001

080159b4 <_fflush_r>:
 80159b4:	b538      	push	{r3, r4, r5, lr}
 80159b6:	690b      	ldr	r3, [r1, #16]
 80159b8:	4605      	mov	r5, r0
 80159ba:	460c      	mov	r4, r1
 80159bc:	b913      	cbnz	r3, 80159c4 <_fflush_r+0x10>
 80159be:	2500      	movs	r5, #0
 80159c0:	4628      	mov	r0, r5
 80159c2:	bd38      	pop	{r3, r4, r5, pc}
 80159c4:	b118      	cbz	r0, 80159ce <_fflush_r+0x1a>
 80159c6:	6983      	ldr	r3, [r0, #24]
 80159c8:	b90b      	cbnz	r3, 80159ce <_fflush_r+0x1a>
 80159ca:	f7ff fcd3 	bl	8015374 <__sinit>
 80159ce:	4b14      	ldr	r3, [pc, #80]	; (8015a20 <_fflush_r+0x6c>)
 80159d0:	429c      	cmp	r4, r3
 80159d2:	d11b      	bne.n	8015a0c <_fflush_r+0x58>
 80159d4:	686c      	ldr	r4, [r5, #4]
 80159d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d0ef      	beq.n	80159be <_fflush_r+0xa>
 80159de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80159e0:	07d0      	lsls	r0, r2, #31
 80159e2:	d404      	bmi.n	80159ee <_fflush_r+0x3a>
 80159e4:	0599      	lsls	r1, r3, #22
 80159e6:	d402      	bmi.n	80159ee <_fflush_r+0x3a>
 80159e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80159ea:	f7ff fd86 	bl	80154fa <__retarget_lock_acquire_recursive>
 80159ee:	4628      	mov	r0, r5
 80159f0:	4621      	mov	r1, r4
 80159f2:	f7ff ff59 	bl	80158a8 <__sflush_r>
 80159f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80159f8:	07da      	lsls	r2, r3, #31
 80159fa:	4605      	mov	r5, r0
 80159fc:	d4e0      	bmi.n	80159c0 <_fflush_r+0xc>
 80159fe:	89a3      	ldrh	r3, [r4, #12]
 8015a00:	059b      	lsls	r3, r3, #22
 8015a02:	d4dd      	bmi.n	80159c0 <_fflush_r+0xc>
 8015a04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015a06:	f7ff fd79 	bl	80154fc <__retarget_lock_release_recursive>
 8015a0a:	e7d9      	b.n	80159c0 <_fflush_r+0xc>
 8015a0c:	4b05      	ldr	r3, [pc, #20]	; (8015a24 <_fflush_r+0x70>)
 8015a0e:	429c      	cmp	r4, r3
 8015a10:	d101      	bne.n	8015a16 <_fflush_r+0x62>
 8015a12:	68ac      	ldr	r4, [r5, #8]
 8015a14:	e7df      	b.n	80159d6 <_fflush_r+0x22>
 8015a16:	4b04      	ldr	r3, [pc, #16]	; (8015a28 <_fflush_r+0x74>)
 8015a18:	429c      	cmp	r4, r3
 8015a1a:	bf08      	it	eq
 8015a1c:	68ec      	ldreq	r4, [r5, #12]
 8015a1e:	e7da      	b.n	80159d6 <_fflush_r+0x22>
 8015a20:	08019fd8 	.word	0x08019fd8
 8015a24:	08019ff8 	.word	0x08019ff8
 8015a28:	08019fb8 	.word	0x08019fb8

08015a2c <fiprintf>:
 8015a2c:	b40e      	push	{r1, r2, r3}
 8015a2e:	b503      	push	{r0, r1, lr}
 8015a30:	4601      	mov	r1, r0
 8015a32:	ab03      	add	r3, sp, #12
 8015a34:	4805      	ldr	r0, [pc, #20]	; (8015a4c <fiprintf+0x20>)
 8015a36:	f853 2b04 	ldr.w	r2, [r3], #4
 8015a3a:	6800      	ldr	r0, [r0, #0]
 8015a3c:	9301      	str	r3, [sp, #4]
 8015a3e:	f000 f8a7 	bl	8015b90 <_vfiprintf_r>
 8015a42:	b002      	add	sp, #8
 8015a44:	f85d eb04 	ldr.w	lr, [sp], #4
 8015a48:	b003      	add	sp, #12
 8015a4a:	4770      	bx	lr
 8015a4c:	2000001c 	.word	0x2000001c

08015a50 <_lseek_r>:
 8015a50:	b538      	push	{r3, r4, r5, lr}
 8015a52:	4d07      	ldr	r5, [pc, #28]	; (8015a70 <_lseek_r+0x20>)
 8015a54:	4604      	mov	r4, r0
 8015a56:	4608      	mov	r0, r1
 8015a58:	4611      	mov	r1, r2
 8015a5a:	2200      	movs	r2, #0
 8015a5c:	602a      	str	r2, [r5, #0]
 8015a5e:	461a      	mov	r2, r3
 8015a60:	f7eb f8fa 	bl	8000c58 <_lseek>
 8015a64:	1c43      	adds	r3, r0, #1
 8015a66:	d102      	bne.n	8015a6e <_lseek_r+0x1e>
 8015a68:	682b      	ldr	r3, [r5, #0]
 8015a6a:	b103      	cbz	r3, 8015a6e <_lseek_r+0x1e>
 8015a6c:	6023      	str	r3, [r4, #0]
 8015a6e:	bd38      	pop	{r3, r4, r5, pc}
 8015a70:	2000b7f4 	.word	0x2000b7f4

08015a74 <malloc>:
 8015a74:	4b02      	ldr	r3, [pc, #8]	; (8015a80 <malloc+0xc>)
 8015a76:	4601      	mov	r1, r0
 8015a78:	6818      	ldr	r0, [r3, #0]
 8015a7a:	f7ff bd65 	b.w	8015548 <_malloc_r>
 8015a7e:	bf00      	nop
 8015a80:	2000001c 	.word	0x2000001c

08015a84 <__malloc_lock>:
 8015a84:	4801      	ldr	r0, [pc, #4]	; (8015a8c <__malloc_lock+0x8>)
 8015a86:	f7ff bd38 	b.w	80154fa <__retarget_lock_acquire_recursive>
 8015a8a:	bf00      	nop
 8015a8c:	2000b800 	.word	0x2000b800

08015a90 <__malloc_unlock>:
 8015a90:	4801      	ldr	r0, [pc, #4]	; (8015a98 <__malloc_unlock+0x8>)
 8015a92:	f7ff bd33 	b.w	80154fc <__retarget_lock_release_recursive>
 8015a96:	bf00      	nop
 8015a98:	2000b800 	.word	0x2000b800

08015a9c <_free_r>:
 8015a9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015a9e:	2900      	cmp	r1, #0
 8015aa0:	d048      	beq.n	8015b34 <_free_r+0x98>
 8015aa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015aa6:	9001      	str	r0, [sp, #4]
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	f1a1 0404 	sub.w	r4, r1, #4
 8015aae:	bfb8      	it	lt
 8015ab0:	18e4      	addlt	r4, r4, r3
 8015ab2:	f7ff ffe7 	bl	8015a84 <__malloc_lock>
 8015ab6:	4a20      	ldr	r2, [pc, #128]	; (8015b38 <_free_r+0x9c>)
 8015ab8:	9801      	ldr	r0, [sp, #4]
 8015aba:	6813      	ldr	r3, [r2, #0]
 8015abc:	4615      	mov	r5, r2
 8015abe:	b933      	cbnz	r3, 8015ace <_free_r+0x32>
 8015ac0:	6063      	str	r3, [r4, #4]
 8015ac2:	6014      	str	r4, [r2, #0]
 8015ac4:	b003      	add	sp, #12
 8015ac6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015aca:	f7ff bfe1 	b.w	8015a90 <__malloc_unlock>
 8015ace:	42a3      	cmp	r3, r4
 8015ad0:	d90b      	bls.n	8015aea <_free_r+0x4e>
 8015ad2:	6821      	ldr	r1, [r4, #0]
 8015ad4:	1862      	adds	r2, r4, r1
 8015ad6:	4293      	cmp	r3, r2
 8015ad8:	bf04      	itt	eq
 8015ada:	681a      	ldreq	r2, [r3, #0]
 8015adc:	685b      	ldreq	r3, [r3, #4]
 8015ade:	6063      	str	r3, [r4, #4]
 8015ae0:	bf04      	itt	eq
 8015ae2:	1852      	addeq	r2, r2, r1
 8015ae4:	6022      	streq	r2, [r4, #0]
 8015ae6:	602c      	str	r4, [r5, #0]
 8015ae8:	e7ec      	b.n	8015ac4 <_free_r+0x28>
 8015aea:	461a      	mov	r2, r3
 8015aec:	685b      	ldr	r3, [r3, #4]
 8015aee:	b10b      	cbz	r3, 8015af4 <_free_r+0x58>
 8015af0:	42a3      	cmp	r3, r4
 8015af2:	d9fa      	bls.n	8015aea <_free_r+0x4e>
 8015af4:	6811      	ldr	r1, [r2, #0]
 8015af6:	1855      	adds	r5, r2, r1
 8015af8:	42a5      	cmp	r5, r4
 8015afa:	d10b      	bne.n	8015b14 <_free_r+0x78>
 8015afc:	6824      	ldr	r4, [r4, #0]
 8015afe:	4421      	add	r1, r4
 8015b00:	1854      	adds	r4, r2, r1
 8015b02:	42a3      	cmp	r3, r4
 8015b04:	6011      	str	r1, [r2, #0]
 8015b06:	d1dd      	bne.n	8015ac4 <_free_r+0x28>
 8015b08:	681c      	ldr	r4, [r3, #0]
 8015b0a:	685b      	ldr	r3, [r3, #4]
 8015b0c:	6053      	str	r3, [r2, #4]
 8015b0e:	4421      	add	r1, r4
 8015b10:	6011      	str	r1, [r2, #0]
 8015b12:	e7d7      	b.n	8015ac4 <_free_r+0x28>
 8015b14:	d902      	bls.n	8015b1c <_free_r+0x80>
 8015b16:	230c      	movs	r3, #12
 8015b18:	6003      	str	r3, [r0, #0]
 8015b1a:	e7d3      	b.n	8015ac4 <_free_r+0x28>
 8015b1c:	6825      	ldr	r5, [r4, #0]
 8015b1e:	1961      	adds	r1, r4, r5
 8015b20:	428b      	cmp	r3, r1
 8015b22:	bf04      	itt	eq
 8015b24:	6819      	ldreq	r1, [r3, #0]
 8015b26:	685b      	ldreq	r3, [r3, #4]
 8015b28:	6063      	str	r3, [r4, #4]
 8015b2a:	bf04      	itt	eq
 8015b2c:	1949      	addeq	r1, r1, r5
 8015b2e:	6021      	streq	r1, [r4, #0]
 8015b30:	6054      	str	r4, [r2, #4]
 8015b32:	e7c7      	b.n	8015ac4 <_free_r+0x28>
 8015b34:	b003      	add	sp, #12
 8015b36:	bd30      	pop	{r4, r5, pc}
 8015b38:	20004c0c 	.word	0x20004c0c

08015b3c <__sfputc_r>:
 8015b3c:	6893      	ldr	r3, [r2, #8]
 8015b3e:	3b01      	subs	r3, #1
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	b410      	push	{r4}
 8015b44:	6093      	str	r3, [r2, #8]
 8015b46:	da08      	bge.n	8015b5a <__sfputc_r+0x1e>
 8015b48:	6994      	ldr	r4, [r2, #24]
 8015b4a:	42a3      	cmp	r3, r4
 8015b4c:	db01      	blt.n	8015b52 <__sfputc_r+0x16>
 8015b4e:	290a      	cmp	r1, #10
 8015b50:	d103      	bne.n	8015b5a <__sfputc_r+0x1e>
 8015b52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015b56:	f000 baf1 	b.w	801613c <__swbuf_r>
 8015b5a:	6813      	ldr	r3, [r2, #0]
 8015b5c:	1c58      	adds	r0, r3, #1
 8015b5e:	6010      	str	r0, [r2, #0]
 8015b60:	7019      	strb	r1, [r3, #0]
 8015b62:	4608      	mov	r0, r1
 8015b64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015b68:	4770      	bx	lr

08015b6a <__sfputs_r>:
 8015b6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b6c:	4606      	mov	r6, r0
 8015b6e:	460f      	mov	r7, r1
 8015b70:	4614      	mov	r4, r2
 8015b72:	18d5      	adds	r5, r2, r3
 8015b74:	42ac      	cmp	r4, r5
 8015b76:	d101      	bne.n	8015b7c <__sfputs_r+0x12>
 8015b78:	2000      	movs	r0, #0
 8015b7a:	e007      	b.n	8015b8c <__sfputs_r+0x22>
 8015b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015b80:	463a      	mov	r2, r7
 8015b82:	4630      	mov	r0, r6
 8015b84:	f7ff ffda 	bl	8015b3c <__sfputc_r>
 8015b88:	1c43      	adds	r3, r0, #1
 8015b8a:	d1f3      	bne.n	8015b74 <__sfputs_r+0xa>
 8015b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015b90 <_vfiprintf_r>:
 8015b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b94:	460d      	mov	r5, r1
 8015b96:	b09d      	sub	sp, #116	; 0x74
 8015b98:	4614      	mov	r4, r2
 8015b9a:	4698      	mov	r8, r3
 8015b9c:	4606      	mov	r6, r0
 8015b9e:	b118      	cbz	r0, 8015ba8 <_vfiprintf_r+0x18>
 8015ba0:	6983      	ldr	r3, [r0, #24]
 8015ba2:	b90b      	cbnz	r3, 8015ba8 <_vfiprintf_r+0x18>
 8015ba4:	f7ff fbe6 	bl	8015374 <__sinit>
 8015ba8:	4b89      	ldr	r3, [pc, #548]	; (8015dd0 <_vfiprintf_r+0x240>)
 8015baa:	429d      	cmp	r5, r3
 8015bac:	d11b      	bne.n	8015be6 <_vfiprintf_r+0x56>
 8015bae:	6875      	ldr	r5, [r6, #4]
 8015bb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015bb2:	07d9      	lsls	r1, r3, #31
 8015bb4:	d405      	bmi.n	8015bc2 <_vfiprintf_r+0x32>
 8015bb6:	89ab      	ldrh	r3, [r5, #12]
 8015bb8:	059a      	lsls	r2, r3, #22
 8015bba:	d402      	bmi.n	8015bc2 <_vfiprintf_r+0x32>
 8015bbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015bbe:	f7ff fc9c 	bl	80154fa <__retarget_lock_acquire_recursive>
 8015bc2:	89ab      	ldrh	r3, [r5, #12]
 8015bc4:	071b      	lsls	r3, r3, #28
 8015bc6:	d501      	bpl.n	8015bcc <_vfiprintf_r+0x3c>
 8015bc8:	692b      	ldr	r3, [r5, #16]
 8015bca:	b9eb      	cbnz	r3, 8015c08 <_vfiprintf_r+0x78>
 8015bcc:	4629      	mov	r1, r5
 8015bce:	4630      	mov	r0, r6
 8015bd0:	f000 fb06 	bl	80161e0 <__swsetup_r>
 8015bd4:	b1c0      	cbz	r0, 8015c08 <_vfiprintf_r+0x78>
 8015bd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015bd8:	07dc      	lsls	r4, r3, #31
 8015bda:	d50e      	bpl.n	8015bfa <_vfiprintf_r+0x6a>
 8015bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015be0:	b01d      	add	sp, #116	; 0x74
 8015be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015be6:	4b7b      	ldr	r3, [pc, #492]	; (8015dd4 <_vfiprintf_r+0x244>)
 8015be8:	429d      	cmp	r5, r3
 8015bea:	d101      	bne.n	8015bf0 <_vfiprintf_r+0x60>
 8015bec:	68b5      	ldr	r5, [r6, #8]
 8015bee:	e7df      	b.n	8015bb0 <_vfiprintf_r+0x20>
 8015bf0:	4b79      	ldr	r3, [pc, #484]	; (8015dd8 <_vfiprintf_r+0x248>)
 8015bf2:	429d      	cmp	r5, r3
 8015bf4:	bf08      	it	eq
 8015bf6:	68f5      	ldreq	r5, [r6, #12]
 8015bf8:	e7da      	b.n	8015bb0 <_vfiprintf_r+0x20>
 8015bfa:	89ab      	ldrh	r3, [r5, #12]
 8015bfc:	0598      	lsls	r0, r3, #22
 8015bfe:	d4ed      	bmi.n	8015bdc <_vfiprintf_r+0x4c>
 8015c00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015c02:	f7ff fc7b 	bl	80154fc <__retarget_lock_release_recursive>
 8015c06:	e7e9      	b.n	8015bdc <_vfiprintf_r+0x4c>
 8015c08:	2300      	movs	r3, #0
 8015c0a:	9309      	str	r3, [sp, #36]	; 0x24
 8015c0c:	2320      	movs	r3, #32
 8015c0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015c12:	f8cd 800c 	str.w	r8, [sp, #12]
 8015c16:	2330      	movs	r3, #48	; 0x30
 8015c18:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015ddc <_vfiprintf_r+0x24c>
 8015c1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015c20:	f04f 0901 	mov.w	r9, #1
 8015c24:	4623      	mov	r3, r4
 8015c26:	469a      	mov	sl, r3
 8015c28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015c2c:	b10a      	cbz	r2, 8015c32 <_vfiprintf_r+0xa2>
 8015c2e:	2a25      	cmp	r2, #37	; 0x25
 8015c30:	d1f9      	bne.n	8015c26 <_vfiprintf_r+0x96>
 8015c32:	ebba 0b04 	subs.w	fp, sl, r4
 8015c36:	d00b      	beq.n	8015c50 <_vfiprintf_r+0xc0>
 8015c38:	465b      	mov	r3, fp
 8015c3a:	4622      	mov	r2, r4
 8015c3c:	4629      	mov	r1, r5
 8015c3e:	4630      	mov	r0, r6
 8015c40:	f7ff ff93 	bl	8015b6a <__sfputs_r>
 8015c44:	3001      	adds	r0, #1
 8015c46:	f000 80aa 	beq.w	8015d9e <_vfiprintf_r+0x20e>
 8015c4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015c4c:	445a      	add	r2, fp
 8015c4e:	9209      	str	r2, [sp, #36]	; 0x24
 8015c50:	f89a 3000 	ldrb.w	r3, [sl]
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	f000 80a2 	beq.w	8015d9e <_vfiprintf_r+0x20e>
 8015c5a:	2300      	movs	r3, #0
 8015c5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015c60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015c64:	f10a 0a01 	add.w	sl, sl, #1
 8015c68:	9304      	str	r3, [sp, #16]
 8015c6a:	9307      	str	r3, [sp, #28]
 8015c6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015c70:	931a      	str	r3, [sp, #104]	; 0x68
 8015c72:	4654      	mov	r4, sl
 8015c74:	2205      	movs	r2, #5
 8015c76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015c7a:	4858      	ldr	r0, [pc, #352]	; (8015ddc <_vfiprintf_r+0x24c>)
 8015c7c:	f7ea faa8 	bl	80001d0 <memchr>
 8015c80:	9a04      	ldr	r2, [sp, #16]
 8015c82:	b9d8      	cbnz	r0, 8015cbc <_vfiprintf_r+0x12c>
 8015c84:	06d1      	lsls	r1, r2, #27
 8015c86:	bf44      	itt	mi
 8015c88:	2320      	movmi	r3, #32
 8015c8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015c8e:	0713      	lsls	r3, r2, #28
 8015c90:	bf44      	itt	mi
 8015c92:	232b      	movmi	r3, #43	; 0x2b
 8015c94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015c98:	f89a 3000 	ldrb.w	r3, [sl]
 8015c9c:	2b2a      	cmp	r3, #42	; 0x2a
 8015c9e:	d015      	beq.n	8015ccc <_vfiprintf_r+0x13c>
 8015ca0:	9a07      	ldr	r2, [sp, #28]
 8015ca2:	4654      	mov	r4, sl
 8015ca4:	2000      	movs	r0, #0
 8015ca6:	f04f 0c0a 	mov.w	ip, #10
 8015caa:	4621      	mov	r1, r4
 8015cac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015cb0:	3b30      	subs	r3, #48	; 0x30
 8015cb2:	2b09      	cmp	r3, #9
 8015cb4:	d94e      	bls.n	8015d54 <_vfiprintf_r+0x1c4>
 8015cb6:	b1b0      	cbz	r0, 8015ce6 <_vfiprintf_r+0x156>
 8015cb8:	9207      	str	r2, [sp, #28]
 8015cba:	e014      	b.n	8015ce6 <_vfiprintf_r+0x156>
 8015cbc:	eba0 0308 	sub.w	r3, r0, r8
 8015cc0:	fa09 f303 	lsl.w	r3, r9, r3
 8015cc4:	4313      	orrs	r3, r2
 8015cc6:	9304      	str	r3, [sp, #16]
 8015cc8:	46a2      	mov	sl, r4
 8015cca:	e7d2      	b.n	8015c72 <_vfiprintf_r+0xe2>
 8015ccc:	9b03      	ldr	r3, [sp, #12]
 8015cce:	1d19      	adds	r1, r3, #4
 8015cd0:	681b      	ldr	r3, [r3, #0]
 8015cd2:	9103      	str	r1, [sp, #12]
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	bfbb      	ittet	lt
 8015cd8:	425b      	neglt	r3, r3
 8015cda:	f042 0202 	orrlt.w	r2, r2, #2
 8015cde:	9307      	strge	r3, [sp, #28]
 8015ce0:	9307      	strlt	r3, [sp, #28]
 8015ce2:	bfb8      	it	lt
 8015ce4:	9204      	strlt	r2, [sp, #16]
 8015ce6:	7823      	ldrb	r3, [r4, #0]
 8015ce8:	2b2e      	cmp	r3, #46	; 0x2e
 8015cea:	d10c      	bne.n	8015d06 <_vfiprintf_r+0x176>
 8015cec:	7863      	ldrb	r3, [r4, #1]
 8015cee:	2b2a      	cmp	r3, #42	; 0x2a
 8015cf0:	d135      	bne.n	8015d5e <_vfiprintf_r+0x1ce>
 8015cf2:	9b03      	ldr	r3, [sp, #12]
 8015cf4:	1d1a      	adds	r2, r3, #4
 8015cf6:	681b      	ldr	r3, [r3, #0]
 8015cf8:	9203      	str	r2, [sp, #12]
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	bfb8      	it	lt
 8015cfe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015d02:	3402      	adds	r4, #2
 8015d04:	9305      	str	r3, [sp, #20]
 8015d06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015dec <_vfiprintf_r+0x25c>
 8015d0a:	7821      	ldrb	r1, [r4, #0]
 8015d0c:	2203      	movs	r2, #3
 8015d0e:	4650      	mov	r0, sl
 8015d10:	f7ea fa5e 	bl	80001d0 <memchr>
 8015d14:	b140      	cbz	r0, 8015d28 <_vfiprintf_r+0x198>
 8015d16:	2340      	movs	r3, #64	; 0x40
 8015d18:	eba0 000a 	sub.w	r0, r0, sl
 8015d1c:	fa03 f000 	lsl.w	r0, r3, r0
 8015d20:	9b04      	ldr	r3, [sp, #16]
 8015d22:	4303      	orrs	r3, r0
 8015d24:	3401      	adds	r4, #1
 8015d26:	9304      	str	r3, [sp, #16]
 8015d28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015d2c:	482c      	ldr	r0, [pc, #176]	; (8015de0 <_vfiprintf_r+0x250>)
 8015d2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015d32:	2206      	movs	r2, #6
 8015d34:	f7ea fa4c 	bl	80001d0 <memchr>
 8015d38:	2800      	cmp	r0, #0
 8015d3a:	d03f      	beq.n	8015dbc <_vfiprintf_r+0x22c>
 8015d3c:	4b29      	ldr	r3, [pc, #164]	; (8015de4 <_vfiprintf_r+0x254>)
 8015d3e:	bb1b      	cbnz	r3, 8015d88 <_vfiprintf_r+0x1f8>
 8015d40:	9b03      	ldr	r3, [sp, #12]
 8015d42:	3307      	adds	r3, #7
 8015d44:	f023 0307 	bic.w	r3, r3, #7
 8015d48:	3308      	adds	r3, #8
 8015d4a:	9303      	str	r3, [sp, #12]
 8015d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d4e:	443b      	add	r3, r7
 8015d50:	9309      	str	r3, [sp, #36]	; 0x24
 8015d52:	e767      	b.n	8015c24 <_vfiprintf_r+0x94>
 8015d54:	fb0c 3202 	mla	r2, ip, r2, r3
 8015d58:	460c      	mov	r4, r1
 8015d5a:	2001      	movs	r0, #1
 8015d5c:	e7a5      	b.n	8015caa <_vfiprintf_r+0x11a>
 8015d5e:	2300      	movs	r3, #0
 8015d60:	3401      	adds	r4, #1
 8015d62:	9305      	str	r3, [sp, #20]
 8015d64:	4619      	mov	r1, r3
 8015d66:	f04f 0c0a 	mov.w	ip, #10
 8015d6a:	4620      	mov	r0, r4
 8015d6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015d70:	3a30      	subs	r2, #48	; 0x30
 8015d72:	2a09      	cmp	r2, #9
 8015d74:	d903      	bls.n	8015d7e <_vfiprintf_r+0x1ee>
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d0c5      	beq.n	8015d06 <_vfiprintf_r+0x176>
 8015d7a:	9105      	str	r1, [sp, #20]
 8015d7c:	e7c3      	b.n	8015d06 <_vfiprintf_r+0x176>
 8015d7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8015d82:	4604      	mov	r4, r0
 8015d84:	2301      	movs	r3, #1
 8015d86:	e7f0      	b.n	8015d6a <_vfiprintf_r+0x1da>
 8015d88:	ab03      	add	r3, sp, #12
 8015d8a:	9300      	str	r3, [sp, #0]
 8015d8c:	462a      	mov	r2, r5
 8015d8e:	4b16      	ldr	r3, [pc, #88]	; (8015de8 <_vfiprintf_r+0x258>)
 8015d90:	a904      	add	r1, sp, #16
 8015d92:	4630      	mov	r0, r6
 8015d94:	f3af 8000 	nop.w
 8015d98:	4607      	mov	r7, r0
 8015d9a:	1c78      	adds	r0, r7, #1
 8015d9c:	d1d6      	bne.n	8015d4c <_vfiprintf_r+0x1bc>
 8015d9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015da0:	07d9      	lsls	r1, r3, #31
 8015da2:	d405      	bmi.n	8015db0 <_vfiprintf_r+0x220>
 8015da4:	89ab      	ldrh	r3, [r5, #12]
 8015da6:	059a      	lsls	r2, r3, #22
 8015da8:	d402      	bmi.n	8015db0 <_vfiprintf_r+0x220>
 8015daa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015dac:	f7ff fba6 	bl	80154fc <__retarget_lock_release_recursive>
 8015db0:	89ab      	ldrh	r3, [r5, #12]
 8015db2:	065b      	lsls	r3, r3, #25
 8015db4:	f53f af12 	bmi.w	8015bdc <_vfiprintf_r+0x4c>
 8015db8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015dba:	e711      	b.n	8015be0 <_vfiprintf_r+0x50>
 8015dbc:	ab03      	add	r3, sp, #12
 8015dbe:	9300      	str	r3, [sp, #0]
 8015dc0:	462a      	mov	r2, r5
 8015dc2:	4b09      	ldr	r3, [pc, #36]	; (8015de8 <_vfiprintf_r+0x258>)
 8015dc4:	a904      	add	r1, sp, #16
 8015dc6:	4630      	mov	r0, r6
 8015dc8:	f000 f880 	bl	8015ecc <_printf_i>
 8015dcc:	e7e4      	b.n	8015d98 <_vfiprintf_r+0x208>
 8015dce:	bf00      	nop
 8015dd0:	08019fd8 	.word	0x08019fd8
 8015dd4:	08019ff8 	.word	0x08019ff8
 8015dd8:	08019fb8 	.word	0x08019fb8
 8015ddc:	0801a0ce 	.word	0x0801a0ce
 8015de0:	0801a0d8 	.word	0x0801a0d8
 8015de4:	00000000 	.word	0x00000000
 8015de8:	08015b6b 	.word	0x08015b6b
 8015dec:	0801a0d4 	.word	0x0801a0d4

08015df0 <_printf_common>:
 8015df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015df4:	4616      	mov	r6, r2
 8015df6:	4699      	mov	r9, r3
 8015df8:	688a      	ldr	r2, [r1, #8]
 8015dfa:	690b      	ldr	r3, [r1, #16]
 8015dfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015e00:	4293      	cmp	r3, r2
 8015e02:	bfb8      	it	lt
 8015e04:	4613      	movlt	r3, r2
 8015e06:	6033      	str	r3, [r6, #0]
 8015e08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015e0c:	4607      	mov	r7, r0
 8015e0e:	460c      	mov	r4, r1
 8015e10:	b10a      	cbz	r2, 8015e16 <_printf_common+0x26>
 8015e12:	3301      	adds	r3, #1
 8015e14:	6033      	str	r3, [r6, #0]
 8015e16:	6823      	ldr	r3, [r4, #0]
 8015e18:	0699      	lsls	r1, r3, #26
 8015e1a:	bf42      	ittt	mi
 8015e1c:	6833      	ldrmi	r3, [r6, #0]
 8015e1e:	3302      	addmi	r3, #2
 8015e20:	6033      	strmi	r3, [r6, #0]
 8015e22:	6825      	ldr	r5, [r4, #0]
 8015e24:	f015 0506 	ands.w	r5, r5, #6
 8015e28:	d106      	bne.n	8015e38 <_printf_common+0x48>
 8015e2a:	f104 0a19 	add.w	sl, r4, #25
 8015e2e:	68e3      	ldr	r3, [r4, #12]
 8015e30:	6832      	ldr	r2, [r6, #0]
 8015e32:	1a9b      	subs	r3, r3, r2
 8015e34:	42ab      	cmp	r3, r5
 8015e36:	dc26      	bgt.n	8015e86 <_printf_common+0x96>
 8015e38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015e3c:	1e13      	subs	r3, r2, #0
 8015e3e:	6822      	ldr	r2, [r4, #0]
 8015e40:	bf18      	it	ne
 8015e42:	2301      	movne	r3, #1
 8015e44:	0692      	lsls	r2, r2, #26
 8015e46:	d42b      	bmi.n	8015ea0 <_printf_common+0xb0>
 8015e48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015e4c:	4649      	mov	r1, r9
 8015e4e:	4638      	mov	r0, r7
 8015e50:	47c0      	blx	r8
 8015e52:	3001      	adds	r0, #1
 8015e54:	d01e      	beq.n	8015e94 <_printf_common+0xa4>
 8015e56:	6823      	ldr	r3, [r4, #0]
 8015e58:	68e5      	ldr	r5, [r4, #12]
 8015e5a:	6832      	ldr	r2, [r6, #0]
 8015e5c:	f003 0306 	and.w	r3, r3, #6
 8015e60:	2b04      	cmp	r3, #4
 8015e62:	bf08      	it	eq
 8015e64:	1aad      	subeq	r5, r5, r2
 8015e66:	68a3      	ldr	r3, [r4, #8]
 8015e68:	6922      	ldr	r2, [r4, #16]
 8015e6a:	bf0c      	ite	eq
 8015e6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015e70:	2500      	movne	r5, #0
 8015e72:	4293      	cmp	r3, r2
 8015e74:	bfc4      	itt	gt
 8015e76:	1a9b      	subgt	r3, r3, r2
 8015e78:	18ed      	addgt	r5, r5, r3
 8015e7a:	2600      	movs	r6, #0
 8015e7c:	341a      	adds	r4, #26
 8015e7e:	42b5      	cmp	r5, r6
 8015e80:	d11a      	bne.n	8015eb8 <_printf_common+0xc8>
 8015e82:	2000      	movs	r0, #0
 8015e84:	e008      	b.n	8015e98 <_printf_common+0xa8>
 8015e86:	2301      	movs	r3, #1
 8015e88:	4652      	mov	r2, sl
 8015e8a:	4649      	mov	r1, r9
 8015e8c:	4638      	mov	r0, r7
 8015e8e:	47c0      	blx	r8
 8015e90:	3001      	adds	r0, #1
 8015e92:	d103      	bne.n	8015e9c <_printf_common+0xac>
 8015e94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e9c:	3501      	adds	r5, #1
 8015e9e:	e7c6      	b.n	8015e2e <_printf_common+0x3e>
 8015ea0:	18e1      	adds	r1, r4, r3
 8015ea2:	1c5a      	adds	r2, r3, #1
 8015ea4:	2030      	movs	r0, #48	; 0x30
 8015ea6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015eaa:	4422      	add	r2, r4
 8015eac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015eb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015eb4:	3302      	adds	r3, #2
 8015eb6:	e7c7      	b.n	8015e48 <_printf_common+0x58>
 8015eb8:	2301      	movs	r3, #1
 8015eba:	4622      	mov	r2, r4
 8015ebc:	4649      	mov	r1, r9
 8015ebe:	4638      	mov	r0, r7
 8015ec0:	47c0      	blx	r8
 8015ec2:	3001      	adds	r0, #1
 8015ec4:	d0e6      	beq.n	8015e94 <_printf_common+0xa4>
 8015ec6:	3601      	adds	r6, #1
 8015ec8:	e7d9      	b.n	8015e7e <_printf_common+0x8e>
	...

08015ecc <_printf_i>:
 8015ecc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015ed0:	460c      	mov	r4, r1
 8015ed2:	4691      	mov	r9, r2
 8015ed4:	7e27      	ldrb	r7, [r4, #24]
 8015ed6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015ed8:	2f78      	cmp	r7, #120	; 0x78
 8015eda:	4680      	mov	r8, r0
 8015edc:	469a      	mov	sl, r3
 8015ede:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015ee2:	d807      	bhi.n	8015ef4 <_printf_i+0x28>
 8015ee4:	2f62      	cmp	r7, #98	; 0x62
 8015ee6:	d80a      	bhi.n	8015efe <_printf_i+0x32>
 8015ee8:	2f00      	cmp	r7, #0
 8015eea:	f000 80d8 	beq.w	801609e <_printf_i+0x1d2>
 8015eee:	2f58      	cmp	r7, #88	; 0x58
 8015ef0:	f000 80a3 	beq.w	801603a <_printf_i+0x16e>
 8015ef4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015ef8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015efc:	e03a      	b.n	8015f74 <_printf_i+0xa8>
 8015efe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015f02:	2b15      	cmp	r3, #21
 8015f04:	d8f6      	bhi.n	8015ef4 <_printf_i+0x28>
 8015f06:	a001      	add	r0, pc, #4	; (adr r0, 8015f0c <_printf_i+0x40>)
 8015f08:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8015f0c:	08015f65 	.word	0x08015f65
 8015f10:	08015f79 	.word	0x08015f79
 8015f14:	08015ef5 	.word	0x08015ef5
 8015f18:	08015ef5 	.word	0x08015ef5
 8015f1c:	08015ef5 	.word	0x08015ef5
 8015f20:	08015ef5 	.word	0x08015ef5
 8015f24:	08015f79 	.word	0x08015f79
 8015f28:	08015ef5 	.word	0x08015ef5
 8015f2c:	08015ef5 	.word	0x08015ef5
 8015f30:	08015ef5 	.word	0x08015ef5
 8015f34:	08015ef5 	.word	0x08015ef5
 8015f38:	08016085 	.word	0x08016085
 8015f3c:	08015fa9 	.word	0x08015fa9
 8015f40:	08016067 	.word	0x08016067
 8015f44:	08015ef5 	.word	0x08015ef5
 8015f48:	08015ef5 	.word	0x08015ef5
 8015f4c:	080160a7 	.word	0x080160a7
 8015f50:	08015ef5 	.word	0x08015ef5
 8015f54:	08015fa9 	.word	0x08015fa9
 8015f58:	08015ef5 	.word	0x08015ef5
 8015f5c:	08015ef5 	.word	0x08015ef5
 8015f60:	0801606f 	.word	0x0801606f
 8015f64:	680b      	ldr	r3, [r1, #0]
 8015f66:	1d1a      	adds	r2, r3, #4
 8015f68:	681b      	ldr	r3, [r3, #0]
 8015f6a:	600a      	str	r2, [r1, #0]
 8015f6c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015f70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015f74:	2301      	movs	r3, #1
 8015f76:	e0a3      	b.n	80160c0 <_printf_i+0x1f4>
 8015f78:	6825      	ldr	r5, [r4, #0]
 8015f7a:	6808      	ldr	r0, [r1, #0]
 8015f7c:	062e      	lsls	r6, r5, #24
 8015f7e:	f100 0304 	add.w	r3, r0, #4
 8015f82:	d50a      	bpl.n	8015f9a <_printf_i+0xce>
 8015f84:	6805      	ldr	r5, [r0, #0]
 8015f86:	600b      	str	r3, [r1, #0]
 8015f88:	2d00      	cmp	r5, #0
 8015f8a:	da03      	bge.n	8015f94 <_printf_i+0xc8>
 8015f8c:	232d      	movs	r3, #45	; 0x2d
 8015f8e:	426d      	negs	r5, r5
 8015f90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015f94:	485e      	ldr	r0, [pc, #376]	; (8016110 <_printf_i+0x244>)
 8015f96:	230a      	movs	r3, #10
 8015f98:	e019      	b.n	8015fce <_printf_i+0x102>
 8015f9a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8015f9e:	6805      	ldr	r5, [r0, #0]
 8015fa0:	600b      	str	r3, [r1, #0]
 8015fa2:	bf18      	it	ne
 8015fa4:	b22d      	sxthne	r5, r5
 8015fa6:	e7ef      	b.n	8015f88 <_printf_i+0xbc>
 8015fa8:	680b      	ldr	r3, [r1, #0]
 8015faa:	6825      	ldr	r5, [r4, #0]
 8015fac:	1d18      	adds	r0, r3, #4
 8015fae:	6008      	str	r0, [r1, #0]
 8015fb0:	0628      	lsls	r0, r5, #24
 8015fb2:	d501      	bpl.n	8015fb8 <_printf_i+0xec>
 8015fb4:	681d      	ldr	r5, [r3, #0]
 8015fb6:	e002      	b.n	8015fbe <_printf_i+0xf2>
 8015fb8:	0669      	lsls	r1, r5, #25
 8015fba:	d5fb      	bpl.n	8015fb4 <_printf_i+0xe8>
 8015fbc:	881d      	ldrh	r5, [r3, #0]
 8015fbe:	4854      	ldr	r0, [pc, #336]	; (8016110 <_printf_i+0x244>)
 8015fc0:	2f6f      	cmp	r7, #111	; 0x6f
 8015fc2:	bf0c      	ite	eq
 8015fc4:	2308      	moveq	r3, #8
 8015fc6:	230a      	movne	r3, #10
 8015fc8:	2100      	movs	r1, #0
 8015fca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015fce:	6866      	ldr	r6, [r4, #4]
 8015fd0:	60a6      	str	r6, [r4, #8]
 8015fd2:	2e00      	cmp	r6, #0
 8015fd4:	bfa2      	ittt	ge
 8015fd6:	6821      	ldrge	r1, [r4, #0]
 8015fd8:	f021 0104 	bicge.w	r1, r1, #4
 8015fdc:	6021      	strge	r1, [r4, #0]
 8015fde:	b90d      	cbnz	r5, 8015fe4 <_printf_i+0x118>
 8015fe0:	2e00      	cmp	r6, #0
 8015fe2:	d04d      	beq.n	8016080 <_printf_i+0x1b4>
 8015fe4:	4616      	mov	r6, r2
 8015fe6:	fbb5 f1f3 	udiv	r1, r5, r3
 8015fea:	fb03 5711 	mls	r7, r3, r1, r5
 8015fee:	5dc7      	ldrb	r7, [r0, r7]
 8015ff0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015ff4:	462f      	mov	r7, r5
 8015ff6:	42bb      	cmp	r3, r7
 8015ff8:	460d      	mov	r5, r1
 8015ffa:	d9f4      	bls.n	8015fe6 <_printf_i+0x11a>
 8015ffc:	2b08      	cmp	r3, #8
 8015ffe:	d10b      	bne.n	8016018 <_printf_i+0x14c>
 8016000:	6823      	ldr	r3, [r4, #0]
 8016002:	07df      	lsls	r7, r3, #31
 8016004:	d508      	bpl.n	8016018 <_printf_i+0x14c>
 8016006:	6923      	ldr	r3, [r4, #16]
 8016008:	6861      	ldr	r1, [r4, #4]
 801600a:	4299      	cmp	r1, r3
 801600c:	bfde      	ittt	le
 801600e:	2330      	movle	r3, #48	; 0x30
 8016010:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016014:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8016018:	1b92      	subs	r2, r2, r6
 801601a:	6122      	str	r2, [r4, #16]
 801601c:	f8cd a000 	str.w	sl, [sp]
 8016020:	464b      	mov	r3, r9
 8016022:	aa03      	add	r2, sp, #12
 8016024:	4621      	mov	r1, r4
 8016026:	4640      	mov	r0, r8
 8016028:	f7ff fee2 	bl	8015df0 <_printf_common>
 801602c:	3001      	adds	r0, #1
 801602e:	d14c      	bne.n	80160ca <_printf_i+0x1fe>
 8016030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016034:	b004      	add	sp, #16
 8016036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801603a:	4835      	ldr	r0, [pc, #212]	; (8016110 <_printf_i+0x244>)
 801603c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016040:	6823      	ldr	r3, [r4, #0]
 8016042:	680e      	ldr	r6, [r1, #0]
 8016044:	061f      	lsls	r7, r3, #24
 8016046:	f856 5b04 	ldr.w	r5, [r6], #4
 801604a:	600e      	str	r6, [r1, #0]
 801604c:	d514      	bpl.n	8016078 <_printf_i+0x1ac>
 801604e:	07d9      	lsls	r1, r3, #31
 8016050:	bf44      	itt	mi
 8016052:	f043 0320 	orrmi.w	r3, r3, #32
 8016056:	6023      	strmi	r3, [r4, #0]
 8016058:	b91d      	cbnz	r5, 8016062 <_printf_i+0x196>
 801605a:	6823      	ldr	r3, [r4, #0]
 801605c:	f023 0320 	bic.w	r3, r3, #32
 8016060:	6023      	str	r3, [r4, #0]
 8016062:	2310      	movs	r3, #16
 8016064:	e7b0      	b.n	8015fc8 <_printf_i+0xfc>
 8016066:	6823      	ldr	r3, [r4, #0]
 8016068:	f043 0320 	orr.w	r3, r3, #32
 801606c:	6023      	str	r3, [r4, #0]
 801606e:	2378      	movs	r3, #120	; 0x78
 8016070:	4828      	ldr	r0, [pc, #160]	; (8016114 <_printf_i+0x248>)
 8016072:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016076:	e7e3      	b.n	8016040 <_printf_i+0x174>
 8016078:	065e      	lsls	r6, r3, #25
 801607a:	bf48      	it	mi
 801607c:	b2ad      	uxthmi	r5, r5
 801607e:	e7e6      	b.n	801604e <_printf_i+0x182>
 8016080:	4616      	mov	r6, r2
 8016082:	e7bb      	b.n	8015ffc <_printf_i+0x130>
 8016084:	680b      	ldr	r3, [r1, #0]
 8016086:	6826      	ldr	r6, [r4, #0]
 8016088:	6960      	ldr	r0, [r4, #20]
 801608a:	1d1d      	adds	r5, r3, #4
 801608c:	600d      	str	r5, [r1, #0]
 801608e:	0635      	lsls	r5, r6, #24
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	d501      	bpl.n	8016098 <_printf_i+0x1cc>
 8016094:	6018      	str	r0, [r3, #0]
 8016096:	e002      	b.n	801609e <_printf_i+0x1d2>
 8016098:	0671      	lsls	r1, r6, #25
 801609a:	d5fb      	bpl.n	8016094 <_printf_i+0x1c8>
 801609c:	8018      	strh	r0, [r3, #0]
 801609e:	2300      	movs	r3, #0
 80160a0:	6123      	str	r3, [r4, #16]
 80160a2:	4616      	mov	r6, r2
 80160a4:	e7ba      	b.n	801601c <_printf_i+0x150>
 80160a6:	680b      	ldr	r3, [r1, #0]
 80160a8:	1d1a      	adds	r2, r3, #4
 80160aa:	600a      	str	r2, [r1, #0]
 80160ac:	681e      	ldr	r6, [r3, #0]
 80160ae:	6862      	ldr	r2, [r4, #4]
 80160b0:	2100      	movs	r1, #0
 80160b2:	4630      	mov	r0, r6
 80160b4:	f7ea f88c 	bl	80001d0 <memchr>
 80160b8:	b108      	cbz	r0, 80160be <_printf_i+0x1f2>
 80160ba:	1b80      	subs	r0, r0, r6
 80160bc:	6060      	str	r0, [r4, #4]
 80160be:	6863      	ldr	r3, [r4, #4]
 80160c0:	6123      	str	r3, [r4, #16]
 80160c2:	2300      	movs	r3, #0
 80160c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80160c8:	e7a8      	b.n	801601c <_printf_i+0x150>
 80160ca:	6923      	ldr	r3, [r4, #16]
 80160cc:	4632      	mov	r2, r6
 80160ce:	4649      	mov	r1, r9
 80160d0:	4640      	mov	r0, r8
 80160d2:	47d0      	blx	sl
 80160d4:	3001      	adds	r0, #1
 80160d6:	d0ab      	beq.n	8016030 <_printf_i+0x164>
 80160d8:	6823      	ldr	r3, [r4, #0]
 80160da:	079b      	lsls	r3, r3, #30
 80160dc:	d413      	bmi.n	8016106 <_printf_i+0x23a>
 80160de:	68e0      	ldr	r0, [r4, #12]
 80160e0:	9b03      	ldr	r3, [sp, #12]
 80160e2:	4298      	cmp	r0, r3
 80160e4:	bfb8      	it	lt
 80160e6:	4618      	movlt	r0, r3
 80160e8:	e7a4      	b.n	8016034 <_printf_i+0x168>
 80160ea:	2301      	movs	r3, #1
 80160ec:	4632      	mov	r2, r6
 80160ee:	4649      	mov	r1, r9
 80160f0:	4640      	mov	r0, r8
 80160f2:	47d0      	blx	sl
 80160f4:	3001      	adds	r0, #1
 80160f6:	d09b      	beq.n	8016030 <_printf_i+0x164>
 80160f8:	3501      	adds	r5, #1
 80160fa:	68e3      	ldr	r3, [r4, #12]
 80160fc:	9903      	ldr	r1, [sp, #12]
 80160fe:	1a5b      	subs	r3, r3, r1
 8016100:	42ab      	cmp	r3, r5
 8016102:	dcf2      	bgt.n	80160ea <_printf_i+0x21e>
 8016104:	e7eb      	b.n	80160de <_printf_i+0x212>
 8016106:	2500      	movs	r5, #0
 8016108:	f104 0619 	add.w	r6, r4, #25
 801610c:	e7f5      	b.n	80160fa <_printf_i+0x22e>
 801610e:	bf00      	nop
 8016110:	0801a0df 	.word	0x0801a0df
 8016114:	0801a0f0 	.word	0x0801a0f0

08016118 <_read_r>:
 8016118:	b538      	push	{r3, r4, r5, lr}
 801611a:	4d07      	ldr	r5, [pc, #28]	; (8016138 <_read_r+0x20>)
 801611c:	4604      	mov	r4, r0
 801611e:	4608      	mov	r0, r1
 8016120:	4611      	mov	r1, r2
 8016122:	2200      	movs	r2, #0
 8016124:	602a      	str	r2, [r5, #0]
 8016126:	461a      	mov	r2, r3
 8016128:	f7ea fd36 	bl	8000b98 <_read>
 801612c:	1c43      	adds	r3, r0, #1
 801612e:	d102      	bne.n	8016136 <_read_r+0x1e>
 8016130:	682b      	ldr	r3, [r5, #0]
 8016132:	b103      	cbz	r3, 8016136 <_read_r+0x1e>
 8016134:	6023      	str	r3, [r4, #0]
 8016136:	bd38      	pop	{r3, r4, r5, pc}
 8016138:	2000b7f4 	.word	0x2000b7f4

0801613c <__swbuf_r>:
 801613c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801613e:	460e      	mov	r6, r1
 8016140:	4614      	mov	r4, r2
 8016142:	4605      	mov	r5, r0
 8016144:	b118      	cbz	r0, 801614e <__swbuf_r+0x12>
 8016146:	6983      	ldr	r3, [r0, #24]
 8016148:	b90b      	cbnz	r3, 801614e <__swbuf_r+0x12>
 801614a:	f7ff f913 	bl	8015374 <__sinit>
 801614e:	4b21      	ldr	r3, [pc, #132]	; (80161d4 <__swbuf_r+0x98>)
 8016150:	429c      	cmp	r4, r3
 8016152:	d12b      	bne.n	80161ac <__swbuf_r+0x70>
 8016154:	686c      	ldr	r4, [r5, #4]
 8016156:	69a3      	ldr	r3, [r4, #24]
 8016158:	60a3      	str	r3, [r4, #8]
 801615a:	89a3      	ldrh	r3, [r4, #12]
 801615c:	071a      	lsls	r2, r3, #28
 801615e:	d52f      	bpl.n	80161c0 <__swbuf_r+0x84>
 8016160:	6923      	ldr	r3, [r4, #16]
 8016162:	b36b      	cbz	r3, 80161c0 <__swbuf_r+0x84>
 8016164:	6923      	ldr	r3, [r4, #16]
 8016166:	6820      	ldr	r0, [r4, #0]
 8016168:	1ac0      	subs	r0, r0, r3
 801616a:	6963      	ldr	r3, [r4, #20]
 801616c:	b2f6      	uxtb	r6, r6
 801616e:	4283      	cmp	r3, r0
 8016170:	4637      	mov	r7, r6
 8016172:	dc04      	bgt.n	801617e <__swbuf_r+0x42>
 8016174:	4621      	mov	r1, r4
 8016176:	4628      	mov	r0, r5
 8016178:	f7ff fc1c 	bl	80159b4 <_fflush_r>
 801617c:	bb30      	cbnz	r0, 80161cc <__swbuf_r+0x90>
 801617e:	68a3      	ldr	r3, [r4, #8]
 8016180:	3b01      	subs	r3, #1
 8016182:	60a3      	str	r3, [r4, #8]
 8016184:	6823      	ldr	r3, [r4, #0]
 8016186:	1c5a      	adds	r2, r3, #1
 8016188:	6022      	str	r2, [r4, #0]
 801618a:	701e      	strb	r6, [r3, #0]
 801618c:	6963      	ldr	r3, [r4, #20]
 801618e:	3001      	adds	r0, #1
 8016190:	4283      	cmp	r3, r0
 8016192:	d004      	beq.n	801619e <__swbuf_r+0x62>
 8016194:	89a3      	ldrh	r3, [r4, #12]
 8016196:	07db      	lsls	r3, r3, #31
 8016198:	d506      	bpl.n	80161a8 <__swbuf_r+0x6c>
 801619a:	2e0a      	cmp	r6, #10
 801619c:	d104      	bne.n	80161a8 <__swbuf_r+0x6c>
 801619e:	4621      	mov	r1, r4
 80161a0:	4628      	mov	r0, r5
 80161a2:	f7ff fc07 	bl	80159b4 <_fflush_r>
 80161a6:	b988      	cbnz	r0, 80161cc <__swbuf_r+0x90>
 80161a8:	4638      	mov	r0, r7
 80161aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80161ac:	4b0a      	ldr	r3, [pc, #40]	; (80161d8 <__swbuf_r+0x9c>)
 80161ae:	429c      	cmp	r4, r3
 80161b0:	d101      	bne.n	80161b6 <__swbuf_r+0x7a>
 80161b2:	68ac      	ldr	r4, [r5, #8]
 80161b4:	e7cf      	b.n	8016156 <__swbuf_r+0x1a>
 80161b6:	4b09      	ldr	r3, [pc, #36]	; (80161dc <__swbuf_r+0xa0>)
 80161b8:	429c      	cmp	r4, r3
 80161ba:	bf08      	it	eq
 80161bc:	68ec      	ldreq	r4, [r5, #12]
 80161be:	e7ca      	b.n	8016156 <__swbuf_r+0x1a>
 80161c0:	4621      	mov	r1, r4
 80161c2:	4628      	mov	r0, r5
 80161c4:	f000 f80c 	bl	80161e0 <__swsetup_r>
 80161c8:	2800      	cmp	r0, #0
 80161ca:	d0cb      	beq.n	8016164 <__swbuf_r+0x28>
 80161cc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80161d0:	e7ea      	b.n	80161a8 <__swbuf_r+0x6c>
 80161d2:	bf00      	nop
 80161d4:	08019fd8 	.word	0x08019fd8
 80161d8:	08019ff8 	.word	0x08019ff8
 80161dc:	08019fb8 	.word	0x08019fb8

080161e0 <__swsetup_r>:
 80161e0:	4b32      	ldr	r3, [pc, #200]	; (80162ac <__swsetup_r+0xcc>)
 80161e2:	b570      	push	{r4, r5, r6, lr}
 80161e4:	681d      	ldr	r5, [r3, #0]
 80161e6:	4606      	mov	r6, r0
 80161e8:	460c      	mov	r4, r1
 80161ea:	b125      	cbz	r5, 80161f6 <__swsetup_r+0x16>
 80161ec:	69ab      	ldr	r3, [r5, #24]
 80161ee:	b913      	cbnz	r3, 80161f6 <__swsetup_r+0x16>
 80161f0:	4628      	mov	r0, r5
 80161f2:	f7ff f8bf 	bl	8015374 <__sinit>
 80161f6:	4b2e      	ldr	r3, [pc, #184]	; (80162b0 <__swsetup_r+0xd0>)
 80161f8:	429c      	cmp	r4, r3
 80161fa:	d10f      	bne.n	801621c <__swsetup_r+0x3c>
 80161fc:	686c      	ldr	r4, [r5, #4]
 80161fe:	89a3      	ldrh	r3, [r4, #12]
 8016200:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016204:	0719      	lsls	r1, r3, #28
 8016206:	d42c      	bmi.n	8016262 <__swsetup_r+0x82>
 8016208:	06dd      	lsls	r5, r3, #27
 801620a:	d411      	bmi.n	8016230 <__swsetup_r+0x50>
 801620c:	2309      	movs	r3, #9
 801620e:	6033      	str	r3, [r6, #0]
 8016210:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016214:	81a3      	strh	r3, [r4, #12]
 8016216:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801621a:	e03e      	b.n	801629a <__swsetup_r+0xba>
 801621c:	4b25      	ldr	r3, [pc, #148]	; (80162b4 <__swsetup_r+0xd4>)
 801621e:	429c      	cmp	r4, r3
 8016220:	d101      	bne.n	8016226 <__swsetup_r+0x46>
 8016222:	68ac      	ldr	r4, [r5, #8]
 8016224:	e7eb      	b.n	80161fe <__swsetup_r+0x1e>
 8016226:	4b24      	ldr	r3, [pc, #144]	; (80162b8 <__swsetup_r+0xd8>)
 8016228:	429c      	cmp	r4, r3
 801622a:	bf08      	it	eq
 801622c:	68ec      	ldreq	r4, [r5, #12]
 801622e:	e7e6      	b.n	80161fe <__swsetup_r+0x1e>
 8016230:	0758      	lsls	r0, r3, #29
 8016232:	d512      	bpl.n	801625a <__swsetup_r+0x7a>
 8016234:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016236:	b141      	cbz	r1, 801624a <__swsetup_r+0x6a>
 8016238:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801623c:	4299      	cmp	r1, r3
 801623e:	d002      	beq.n	8016246 <__swsetup_r+0x66>
 8016240:	4630      	mov	r0, r6
 8016242:	f7ff fc2b 	bl	8015a9c <_free_r>
 8016246:	2300      	movs	r3, #0
 8016248:	6363      	str	r3, [r4, #52]	; 0x34
 801624a:	89a3      	ldrh	r3, [r4, #12]
 801624c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016250:	81a3      	strh	r3, [r4, #12]
 8016252:	2300      	movs	r3, #0
 8016254:	6063      	str	r3, [r4, #4]
 8016256:	6923      	ldr	r3, [r4, #16]
 8016258:	6023      	str	r3, [r4, #0]
 801625a:	89a3      	ldrh	r3, [r4, #12]
 801625c:	f043 0308 	orr.w	r3, r3, #8
 8016260:	81a3      	strh	r3, [r4, #12]
 8016262:	6923      	ldr	r3, [r4, #16]
 8016264:	b94b      	cbnz	r3, 801627a <__swsetup_r+0x9a>
 8016266:	89a3      	ldrh	r3, [r4, #12]
 8016268:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801626c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016270:	d003      	beq.n	801627a <__swsetup_r+0x9a>
 8016272:	4621      	mov	r1, r4
 8016274:	4630      	mov	r0, r6
 8016276:	f000 f84d 	bl	8016314 <__smakebuf_r>
 801627a:	89a0      	ldrh	r0, [r4, #12]
 801627c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016280:	f010 0301 	ands.w	r3, r0, #1
 8016284:	d00a      	beq.n	801629c <__swsetup_r+0xbc>
 8016286:	2300      	movs	r3, #0
 8016288:	60a3      	str	r3, [r4, #8]
 801628a:	6963      	ldr	r3, [r4, #20]
 801628c:	425b      	negs	r3, r3
 801628e:	61a3      	str	r3, [r4, #24]
 8016290:	6923      	ldr	r3, [r4, #16]
 8016292:	b943      	cbnz	r3, 80162a6 <__swsetup_r+0xc6>
 8016294:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016298:	d1ba      	bne.n	8016210 <__swsetup_r+0x30>
 801629a:	bd70      	pop	{r4, r5, r6, pc}
 801629c:	0781      	lsls	r1, r0, #30
 801629e:	bf58      	it	pl
 80162a0:	6963      	ldrpl	r3, [r4, #20]
 80162a2:	60a3      	str	r3, [r4, #8]
 80162a4:	e7f4      	b.n	8016290 <__swsetup_r+0xb0>
 80162a6:	2000      	movs	r0, #0
 80162a8:	e7f7      	b.n	801629a <__swsetup_r+0xba>
 80162aa:	bf00      	nop
 80162ac:	2000001c 	.word	0x2000001c
 80162b0:	08019fd8 	.word	0x08019fd8
 80162b4:	08019ff8 	.word	0x08019ff8
 80162b8:	08019fb8 	.word	0x08019fb8

080162bc <abort>:
 80162bc:	b508      	push	{r3, lr}
 80162be:	2006      	movs	r0, #6
 80162c0:	f000 f890 	bl	80163e4 <raise>
 80162c4:	2001      	movs	r0, #1
 80162c6:	f7ea fc5d 	bl	8000b84 <_exit>

080162ca <__swhatbuf_r>:
 80162ca:	b570      	push	{r4, r5, r6, lr}
 80162cc:	460e      	mov	r6, r1
 80162ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80162d2:	2900      	cmp	r1, #0
 80162d4:	b096      	sub	sp, #88	; 0x58
 80162d6:	4614      	mov	r4, r2
 80162d8:	461d      	mov	r5, r3
 80162da:	da07      	bge.n	80162ec <__swhatbuf_r+0x22>
 80162dc:	2300      	movs	r3, #0
 80162de:	602b      	str	r3, [r5, #0]
 80162e0:	89b3      	ldrh	r3, [r6, #12]
 80162e2:	061a      	lsls	r2, r3, #24
 80162e4:	d410      	bmi.n	8016308 <__swhatbuf_r+0x3e>
 80162e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80162ea:	e00e      	b.n	801630a <__swhatbuf_r+0x40>
 80162ec:	466a      	mov	r2, sp
 80162ee:	f000 f895 	bl	801641c <_fstat_r>
 80162f2:	2800      	cmp	r0, #0
 80162f4:	dbf2      	blt.n	80162dc <__swhatbuf_r+0x12>
 80162f6:	9a01      	ldr	r2, [sp, #4]
 80162f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80162fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016300:	425a      	negs	r2, r3
 8016302:	415a      	adcs	r2, r3
 8016304:	602a      	str	r2, [r5, #0]
 8016306:	e7ee      	b.n	80162e6 <__swhatbuf_r+0x1c>
 8016308:	2340      	movs	r3, #64	; 0x40
 801630a:	2000      	movs	r0, #0
 801630c:	6023      	str	r3, [r4, #0]
 801630e:	b016      	add	sp, #88	; 0x58
 8016310:	bd70      	pop	{r4, r5, r6, pc}
	...

08016314 <__smakebuf_r>:
 8016314:	898b      	ldrh	r3, [r1, #12]
 8016316:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016318:	079d      	lsls	r5, r3, #30
 801631a:	4606      	mov	r6, r0
 801631c:	460c      	mov	r4, r1
 801631e:	d507      	bpl.n	8016330 <__smakebuf_r+0x1c>
 8016320:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016324:	6023      	str	r3, [r4, #0]
 8016326:	6123      	str	r3, [r4, #16]
 8016328:	2301      	movs	r3, #1
 801632a:	6163      	str	r3, [r4, #20]
 801632c:	b002      	add	sp, #8
 801632e:	bd70      	pop	{r4, r5, r6, pc}
 8016330:	ab01      	add	r3, sp, #4
 8016332:	466a      	mov	r2, sp
 8016334:	f7ff ffc9 	bl	80162ca <__swhatbuf_r>
 8016338:	9900      	ldr	r1, [sp, #0]
 801633a:	4605      	mov	r5, r0
 801633c:	4630      	mov	r0, r6
 801633e:	f7ff f903 	bl	8015548 <_malloc_r>
 8016342:	b948      	cbnz	r0, 8016358 <__smakebuf_r+0x44>
 8016344:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016348:	059a      	lsls	r2, r3, #22
 801634a:	d4ef      	bmi.n	801632c <__smakebuf_r+0x18>
 801634c:	f023 0303 	bic.w	r3, r3, #3
 8016350:	f043 0302 	orr.w	r3, r3, #2
 8016354:	81a3      	strh	r3, [r4, #12]
 8016356:	e7e3      	b.n	8016320 <__smakebuf_r+0xc>
 8016358:	4b0d      	ldr	r3, [pc, #52]	; (8016390 <__smakebuf_r+0x7c>)
 801635a:	62b3      	str	r3, [r6, #40]	; 0x28
 801635c:	89a3      	ldrh	r3, [r4, #12]
 801635e:	6020      	str	r0, [r4, #0]
 8016360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016364:	81a3      	strh	r3, [r4, #12]
 8016366:	9b00      	ldr	r3, [sp, #0]
 8016368:	6163      	str	r3, [r4, #20]
 801636a:	9b01      	ldr	r3, [sp, #4]
 801636c:	6120      	str	r0, [r4, #16]
 801636e:	b15b      	cbz	r3, 8016388 <__smakebuf_r+0x74>
 8016370:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016374:	4630      	mov	r0, r6
 8016376:	f000 f863 	bl	8016440 <_isatty_r>
 801637a:	b128      	cbz	r0, 8016388 <__smakebuf_r+0x74>
 801637c:	89a3      	ldrh	r3, [r4, #12]
 801637e:	f023 0303 	bic.w	r3, r3, #3
 8016382:	f043 0301 	orr.w	r3, r3, #1
 8016386:	81a3      	strh	r3, [r4, #12]
 8016388:	89a0      	ldrh	r0, [r4, #12]
 801638a:	4305      	orrs	r5, r0
 801638c:	81a5      	strh	r5, [r4, #12]
 801638e:	e7cd      	b.n	801632c <__smakebuf_r+0x18>
 8016390:	0801530d 	.word	0x0801530d

08016394 <_raise_r>:
 8016394:	291f      	cmp	r1, #31
 8016396:	b538      	push	{r3, r4, r5, lr}
 8016398:	4604      	mov	r4, r0
 801639a:	460d      	mov	r5, r1
 801639c:	d904      	bls.n	80163a8 <_raise_r+0x14>
 801639e:	2316      	movs	r3, #22
 80163a0:	6003      	str	r3, [r0, #0]
 80163a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80163a6:	bd38      	pop	{r3, r4, r5, pc}
 80163a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80163aa:	b112      	cbz	r2, 80163b2 <_raise_r+0x1e>
 80163ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80163b0:	b94b      	cbnz	r3, 80163c6 <_raise_r+0x32>
 80163b2:	4620      	mov	r0, r4
 80163b4:	f000 f830 	bl	8016418 <_getpid_r>
 80163b8:	462a      	mov	r2, r5
 80163ba:	4601      	mov	r1, r0
 80163bc:	4620      	mov	r0, r4
 80163be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80163c2:	f000 b817 	b.w	80163f4 <_kill_r>
 80163c6:	2b01      	cmp	r3, #1
 80163c8:	d00a      	beq.n	80163e0 <_raise_r+0x4c>
 80163ca:	1c59      	adds	r1, r3, #1
 80163cc:	d103      	bne.n	80163d6 <_raise_r+0x42>
 80163ce:	2316      	movs	r3, #22
 80163d0:	6003      	str	r3, [r0, #0]
 80163d2:	2001      	movs	r0, #1
 80163d4:	e7e7      	b.n	80163a6 <_raise_r+0x12>
 80163d6:	2400      	movs	r4, #0
 80163d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80163dc:	4628      	mov	r0, r5
 80163de:	4798      	blx	r3
 80163e0:	2000      	movs	r0, #0
 80163e2:	e7e0      	b.n	80163a6 <_raise_r+0x12>

080163e4 <raise>:
 80163e4:	4b02      	ldr	r3, [pc, #8]	; (80163f0 <raise+0xc>)
 80163e6:	4601      	mov	r1, r0
 80163e8:	6818      	ldr	r0, [r3, #0]
 80163ea:	f7ff bfd3 	b.w	8016394 <_raise_r>
 80163ee:	bf00      	nop
 80163f0:	2000001c 	.word	0x2000001c

080163f4 <_kill_r>:
 80163f4:	b538      	push	{r3, r4, r5, lr}
 80163f6:	4d07      	ldr	r5, [pc, #28]	; (8016414 <_kill_r+0x20>)
 80163f8:	2300      	movs	r3, #0
 80163fa:	4604      	mov	r4, r0
 80163fc:	4608      	mov	r0, r1
 80163fe:	4611      	mov	r1, r2
 8016400:	602b      	str	r3, [r5, #0]
 8016402:	f7ea fbad 	bl	8000b60 <_kill>
 8016406:	1c43      	adds	r3, r0, #1
 8016408:	d102      	bne.n	8016410 <_kill_r+0x1c>
 801640a:	682b      	ldr	r3, [r5, #0]
 801640c:	b103      	cbz	r3, 8016410 <_kill_r+0x1c>
 801640e:	6023      	str	r3, [r4, #0]
 8016410:	bd38      	pop	{r3, r4, r5, pc}
 8016412:	bf00      	nop
 8016414:	2000b7f4 	.word	0x2000b7f4

08016418 <_getpid_r>:
 8016418:	f7ea bb9a 	b.w	8000b50 <_getpid>

0801641c <_fstat_r>:
 801641c:	b538      	push	{r3, r4, r5, lr}
 801641e:	4d07      	ldr	r5, [pc, #28]	; (801643c <_fstat_r+0x20>)
 8016420:	2300      	movs	r3, #0
 8016422:	4604      	mov	r4, r0
 8016424:	4608      	mov	r0, r1
 8016426:	4611      	mov	r1, r2
 8016428:	602b      	str	r3, [r5, #0]
 801642a:	f7ea fbfa 	bl	8000c22 <_fstat>
 801642e:	1c43      	adds	r3, r0, #1
 8016430:	d102      	bne.n	8016438 <_fstat_r+0x1c>
 8016432:	682b      	ldr	r3, [r5, #0]
 8016434:	b103      	cbz	r3, 8016438 <_fstat_r+0x1c>
 8016436:	6023      	str	r3, [r4, #0]
 8016438:	bd38      	pop	{r3, r4, r5, pc}
 801643a:	bf00      	nop
 801643c:	2000b7f4 	.word	0x2000b7f4

08016440 <_isatty_r>:
 8016440:	b538      	push	{r3, r4, r5, lr}
 8016442:	4d06      	ldr	r5, [pc, #24]	; (801645c <_isatty_r+0x1c>)
 8016444:	2300      	movs	r3, #0
 8016446:	4604      	mov	r4, r0
 8016448:	4608      	mov	r0, r1
 801644a:	602b      	str	r3, [r5, #0]
 801644c:	f7ea fbf9 	bl	8000c42 <_isatty>
 8016450:	1c43      	adds	r3, r0, #1
 8016452:	d102      	bne.n	801645a <_isatty_r+0x1a>
 8016454:	682b      	ldr	r3, [r5, #0]
 8016456:	b103      	cbz	r3, 801645a <_isatty_r+0x1a>
 8016458:	6023      	str	r3, [r4, #0]
 801645a:	bd38      	pop	{r3, r4, r5, pc}
 801645c:	2000b7f4 	.word	0x2000b7f4

08016460 <_init>:
 8016460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016462:	bf00      	nop
 8016464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016466:	bc08      	pop	{r3}
 8016468:	469e      	mov	lr, r3
 801646a:	4770      	bx	lr

0801646c <_fini>:
 801646c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801646e:	bf00      	nop
 8016470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016472:	bc08      	pop	{r3}
 8016474:	469e      	mov	lr, r3
 8016476:	4770      	bx	lr
