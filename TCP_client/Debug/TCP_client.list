
TCP_client.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011480  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d44  08011610  08011610  00021610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014354  08014354  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  08014354  08014354  00024354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801435c  0801435c  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801435c  0801435c  0002435c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014360  08014360  00024360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08014364  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030078  2**0
                  CONTENTS
 10 .bss          000065a8  20000078  20000078  00030078  2**2
                  ALLOC
 11 ._user_heap_stack 00006000  20006620  20006620  00030078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00034403  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005f4b  00000000  00000000  000644ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001848  00000000  00000000  0006a3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017a8  00000000  00000000  0006bc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002da1f  00000000  00000000  0006d3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028284  00000000  00000000  0009ae07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4224  00000000  00000000  000c308b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001a72af  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006fa4  00000000  00000000  001a7304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080115f8 	.word	0x080115f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080115f8 	.word	0x080115f8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057c:	f000 ff88 	bl	8001490 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000580:	f000 f820 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000584:	f000 f900 	bl	8000788 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000588:	f000 f886 	bl	8000698 <MX_TIM2_Init>
  MX_USART6_UART_Init();
 800058c:	f000 f8d2 	bl	8000734 <MX_USART6_UART_Init>
  MX_LWIP_Init();
 8000590:	f004 fd5c 	bl	800504c <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2); // Просто для нагрузки, а так он не нужен для tcp client
 8000594:	4807      	ldr	r0, [pc, #28]	; (80005b4 <main+0x3c>)
 8000596:	f003 f955 	bl	8003844 <HAL_TIM_Base_Start_IT>
  net_ini();
 800059a:	f000 fb61 	bl	8000c60 <net_ini>
  HAL_UART_Receive_IT(&huart6,(uint8_t*)str,1); // Подключаем UASRT, что бы он начал прием.
 800059e:	2201      	movs	r2, #1
 80005a0:	4905      	ldr	r1, [pc, #20]	; (80005b8 <main+0x40>)
 80005a2:	4806      	ldr	r0, [pc, #24]	; (80005bc <main+0x44>)
 80005a4:	f003 fe69 	bl	800427a <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ethernetif_input(&gnetif); // Принемаем пакет
 80005a8:	4805      	ldr	r0, [pc, #20]	; (80005c0 <main+0x48>)
 80005aa:	f005 f927 	bl	80057fc <ethernetif_input>
	  sys_check_timeouts();      // Ждем timeout
 80005ae:	f00d f877 	bl	800d6a0 <sys_check_timeouts>
	  ethernetif_input(&gnetif); // Принемаем пакет
 80005b2:	e7f9      	b.n	80005a8 <main+0x30>
 80005b4:	20000258 	.word	0x20000258
 80005b8:	20000398 	.word	0x20000398
 80005bc:	20000214 	.word	0x20000214
 80005c0:	200003c0 	.word	0x200003c0

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b094      	sub	sp, #80	; 0x50
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	2230      	movs	r2, #48	; 0x30
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f00f fd7e 	bl	80100d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	4b28      	ldr	r3, [pc, #160]	; (8000690 <SystemClock_Config+0xcc>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	4a27      	ldr	r2, [pc, #156]	; (8000690 <SystemClock_Config+0xcc>)
 80005f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f6:	6413      	str	r3, [r2, #64]	; 0x40
 80005f8:	4b25      	ldr	r3, [pc, #148]	; (8000690 <SystemClock_Config+0xcc>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	4b22      	ldr	r3, [pc, #136]	; (8000694 <SystemClock_Config+0xd0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a21      	ldr	r2, [pc, #132]	; (8000694 <SystemClock_Config+0xd0>)
 800060e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <SystemClock_Config+0xd0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000620:	2301      	movs	r3, #1
 8000622:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000624:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062a:	2302      	movs	r3, #2
 800062c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000632:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000634:	2304      	movs	r3, #4
 8000636:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000638:	23a8      	movs	r3, #168	; 0xa8
 800063a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063c:	2302      	movs	r3, #2
 800063e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000640:	2304      	movs	r3, #4
 8000642:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 0320 	add.w	r3, r7, #32
 8000648:	4618      	mov	r0, r3
 800064a:	f002 fc37 	bl	8002ebc <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000654:	f000 f914 	bl	8000880 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065c:	2302      	movs	r3, #2
 800065e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000664:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000668:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800066a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800066e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2105      	movs	r1, #5
 8000676:	4618      	mov	r0, r3
 8000678:	f002 fe98 	bl	80033ac <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000682:	f000 f8fd 	bl	8000880 <Error_Handler>
  }
}
 8000686:	bf00      	nop
 8000688:	3750      	adds	r7, #80	; 0x50
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800
 8000694:	40007000 	.word	0x40007000

08000698 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b086      	sub	sp, #24
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800069e:	f107 0308 	add.w	r3, r7, #8
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ac:	463b      	mov	r3, r7
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006b4:	4b1e      	ldr	r3, [pc, #120]	; (8000730 <MX_TIM2_Init+0x98>)
 80006b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 80006bc:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <MX_TIM2_Init+0x98>)
 80006be:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80006c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c4:	4b1a      	ldr	r3, [pc, #104]	; (8000730 <MX_TIM2_Init+0x98>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 80006ca:	4b19      	ldr	r3, [pc, #100]	; (8000730 <MX_TIM2_Init+0x98>)
 80006cc:	f241 3287 	movw	r2, #4999	; 0x1387
 80006d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d2:	4b17      	ldr	r3, [pc, #92]	; (8000730 <MX_TIM2_Init+0x98>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006d8:	4b15      	ldr	r3, [pc, #84]	; (8000730 <MX_TIM2_Init+0x98>)
 80006da:	2200      	movs	r2, #0
 80006dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006de:	4814      	ldr	r0, [pc, #80]	; (8000730 <MX_TIM2_Init+0x98>)
 80006e0:	f003 f860 	bl	80037a4 <HAL_TIM_Base_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80006ea:	f000 f8c9 	bl	8000880 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006f4:	f107 0308 	add.w	r3, r7, #8
 80006f8:	4619      	mov	r1, r3
 80006fa:	480d      	ldr	r0, [pc, #52]	; (8000730 <MX_TIM2_Init+0x98>)
 80006fc:	f003 fa1a 	bl	8003b34 <HAL_TIM_ConfigClockSource>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000706:	f000 f8bb 	bl	8000880 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800070a:	2300      	movs	r3, #0
 800070c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800070e:	2300      	movs	r3, #0
 8000710:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000712:	463b      	mov	r3, r7
 8000714:	4619      	mov	r1, r3
 8000716:	4806      	ldr	r0, [pc, #24]	; (8000730 <MX_TIM2_Init+0x98>)
 8000718:	f003 fc40 	bl	8003f9c <HAL_TIMEx_MasterConfigSynchronization>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000722:	f000 f8ad 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	3718      	adds	r7, #24
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000258 	.word	0x20000258

08000734 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000738:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_USART6_UART_Init+0x4c>)
 800073a:	4a12      	ldr	r2, [pc, #72]	; (8000784 <MX_USART6_UART_Init+0x50>)
 800073c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800073e:	4b10      	ldr	r3, [pc, #64]	; (8000780 <MX_USART6_UART_Init+0x4c>)
 8000740:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000744:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_USART6_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_USART6_UART_Init+0x4c>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <MX_USART6_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_USART6_UART_Init+0x4c>)
 800075a:	220c      	movs	r2, #12
 800075c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <MX_USART6_UART_Init+0x4c>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_USART6_UART_Init+0x4c>)
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800076a:	4805      	ldr	r0, [pc, #20]	; (8000780 <MX_USART6_UART_Init+0x4c>)
 800076c:	f003 fca6 	bl	80040bc <HAL_UART_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000776:	f000 f883 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000214 	.word	0x20000214
 8000784:	40011400 	.word	0x40011400

08000788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	; 0x28
 800078c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	4b2d      	ldr	r3, [pc, #180]	; (8000858 <MX_GPIO_Init+0xd0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a2c      	ldr	r2, [pc, #176]	; (8000858 <MX_GPIO_Init+0xd0>)
 80007a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b2a      	ldr	r3, [pc, #168]	; (8000858 <MX_GPIO_Init+0xd0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	4b26      	ldr	r3, [pc, #152]	; (8000858 <MX_GPIO_Init+0xd0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a25      	ldr	r2, [pc, #148]	; (8000858 <MX_GPIO_Init+0xd0>)
 80007c4:	f043 0304 	orr.w	r3, r3, #4
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b23      	ldr	r3, [pc, #140]	; (8000858 <MX_GPIO_Init+0xd0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0304 	and.w	r3, r3, #4
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	4b1f      	ldr	r3, [pc, #124]	; (8000858 <MX_GPIO_Init+0xd0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a1e      	ldr	r2, [pc, #120]	; (8000858 <MX_GPIO_Init+0xd0>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <MX_GPIO_Init+0xd0>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	4b18      	ldr	r3, [pc, #96]	; (8000858 <MX_GPIO_Init+0xd0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a17      	ldr	r2, [pc, #92]	; (8000858 <MX_GPIO_Init+0xd0>)
 80007fc:	f043 0302 	orr.w	r3, r3, #2
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <MX_GPIO_Init+0xd0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	603b      	str	r3, [r7, #0]
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_GPIO_Init+0xd0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a10      	ldr	r2, [pc, #64]	; (8000858 <MX_GPIO_Init+0xd0>)
 8000818:	f043 0308 	orr.w	r3, r3, #8
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_GPIO_Init+0xd0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0308 	and.w	r3, r3, #8
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2110      	movs	r1, #16
 800082e:	480b      	ldr	r0, [pc, #44]	; (800085c <MX_GPIO_Init+0xd4>)
 8000830:	f002 fb2a 	bl	8002e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_Pin */
  GPIO_InitStruct.Pin = BLUE_Pin;
 8000834:	2310      	movs	r3, #16
 8000836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000838:	2301      	movs	r3, #1
 800083a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUE_GPIO_Port, &GPIO_InitStruct);
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	4619      	mov	r1, r3
 800084a:	4804      	ldr	r0, [pc, #16]	; (800085c <MX_GPIO_Init+0xd4>)
 800084c:	f002 f980 	bl	8002b50 <HAL_GPIO_Init>

}
 8000850:	bf00      	nop
 8000852:	3728      	adds	r7, #40	; 0x28
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40023800 	.word	0x40023800
 800085c:	40020c00 	.word	0x40020c00

08000860 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) // В момент прихода данных в Rx...
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  if(huart==&huart6)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	4a04      	ldr	r2, [pc, #16]	; (800087c <HAL_UART_RxCpltCallback+0x1c>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d101      	bne.n	8000874 <HAL_UART_RxCpltCallback+0x14>
  {
    UART6_RxCpltCallback();
 8000870:	f000 fbea 	bl	8001048 <UART6_RxCpltCallback>
  }
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000214 	.word	0x20000214

08000880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000884:	b672      	cpsid	i
}
 8000886:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000888:	e7fe      	b.n	8000888 <Error_Handler+0x8>
	...

0800088c <tcp_client_connect>:
static void tcp_client_send(struct tcp_pcb *tpcb, struct client_struct *es); // Внутренний прототип функции
static err_t tcp_client_sent(void *arg, struct tcp_pcb *tpcb, u16_t len); // Внутренний прототип функции
static err_t tcp_client_poll(void *arg, struct tcp_pcb *tpcb); // Внутренний прототип функции
//-----------------------------------------------
void tcp_client_connect(void) // Функция соединения с TCP сервером.
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
	ip_addr_t DestIPaddr;
	client_pcb = tcp_new(); // Получаем указатель на структуру
 8000892:	f008 f993 	bl	8008bbc <tcp_new>
 8000896:	4603      	mov	r3, r0
 8000898:	4a2d      	ldr	r2, [pc, #180]	; (8000950 <tcp_client_connect+0xc4>)
 800089a:	6013      	str	r3, [r2, #0]
	if (client_pcb != NULL) // Если указатель не нулевой то...
 800089c:	4b2c      	ldr	r3, [pc, #176]	; (8000950 <tcp_client_connect+0xc4>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d050      	beq.n	8000946 <tcp_client_connect+0xba>
	{
		IP4_ADDR(&DestIPaddr, ipaddr_dest[0], ipaddr_dest[1], ipaddr_dest[2],
 80008a4:	4b2b      	ldr	r3, [pc, #172]	; (8000954 <tcp_client_connect+0xc8>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	061a      	lsls	r2, r3, #24
 80008aa:	4b2a      	ldr	r3, [pc, #168]	; (8000954 <tcp_client_connect+0xc8>)
 80008ac:	785b      	ldrb	r3, [r3, #1]
 80008ae:	041b      	lsls	r3, r3, #16
 80008b0:	431a      	orrs	r2, r3
 80008b2:	4b28      	ldr	r3, [pc, #160]	; (8000954 <tcp_client_connect+0xc8>)
 80008b4:	789b      	ldrb	r3, [r3, #2]
 80008b6:	021b      	lsls	r3, r3, #8
 80008b8:	4313      	orrs	r3, r2
 80008ba:	4a26      	ldr	r2, [pc, #152]	; (8000954 <tcp_client_connect+0xc8>)
 80008bc:	78d2      	ldrb	r2, [r2, #3]
 80008be:	4313      	orrs	r3, r2
 80008c0:	061a      	lsls	r2, r3, #24
 80008c2:	4b24      	ldr	r3, [pc, #144]	; (8000954 <tcp_client_connect+0xc8>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	0619      	lsls	r1, r3, #24
 80008c8:	4b22      	ldr	r3, [pc, #136]	; (8000954 <tcp_client_connect+0xc8>)
 80008ca:	785b      	ldrb	r3, [r3, #1]
 80008cc:	041b      	lsls	r3, r3, #16
 80008ce:	4319      	orrs	r1, r3
 80008d0:	4b20      	ldr	r3, [pc, #128]	; (8000954 <tcp_client_connect+0xc8>)
 80008d2:	789b      	ldrb	r3, [r3, #2]
 80008d4:	021b      	lsls	r3, r3, #8
 80008d6:	430b      	orrs	r3, r1
 80008d8:	491e      	ldr	r1, [pc, #120]	; (8000954 <tcp_client_connect+0xc8>)
 80008da:	78c9      	ldrb	r1, [r1, #3]
 80008dc:	430b      	orrs	r3, r1
 80008de:	021b      	lsls	r3, r3, #8
 80008e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80008e4:	431a      	orrs	r2, r3
 80008e6:	4b1b      	ldr	r3, [pc, #108]	; (8000954 <tcp_client_connect+0xc8>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	0619      	lsls	r1, r3, #24
 80008ec:	4b19      	ldr	r3, [pc, #100]	; (8000954 <tcp_client_connect+0xc8>)
 80008ee:	785b      	ldrb	r3, [r3, #1]
 80008f0:	041b      	lsls	r3, r3, #16
 80008f2:	4319      	orrs	r1, r3
 80008f4:	4b17      	ldr	r3, [pc, #92]	; (8000954 <tcp_client_connect+0xc8>)
 80008f6:	789b      	ldrb	r3, [r3, #2]
 80008f8:	021b      	lsls	r3, r3, #8
 80008fa:	430b      	orrs	r3, r1
 80008fc:	4915      	ldr	r1, [pc, #84]	; (8000954 <tcp_client_connect+0xc8>)
 80008fe:	78c9      	ldrb	r1, [r1, #3]
 8000900:	430b      	orrs	r3, r1
 8000902:	0a1b      	lsrs	r3, r3, #8
 8000904:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000908:	431a      	orrs	r2, r3
 800090a:	4b12      	ldr	r3, [pc, #72]	; (8000954 <tcp_client_connect+0xc8>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	0619      	lsls	r1, r3, #24
 8000910:	4b10      	ldr	r3, [pc, #64]	; (8000954 <tcp_client_connect+0xc8>)
 8000912:	785b      	ldrb	r3, [r3, #1]
 8000914:	041b      	lsls	r3, r3, #16
 8000916:	4319      	orrs	r1, r3
 8000918:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <tcp_client_connect+0xc8>)
 800091a:	789b      	ldrb	r3, [r3, #2]
 800091c:	021b      	lsls	r3, r3, #8
 800091e:	430b      	orrs	r3, r1
 8000920:	490c      	ldr	r1, [pc, #48]	; (8000954 <tcp_client_connect+0xc8>)
 8000922:	78c9      	ldrb	r1, [r1, #3]
 8000924:	430b      	orrs	r3, r1
 8000926:	0e1b      	lsrs	r3, r3, #24
 8000928:	4313      	orrs	r3, r2
 800092a:	607b      	str	r3, [r7, #4]
				ipaddr_dest[3]);
		tcp_connect(client_pcb, &DestIPaddr, port_dest, tcp_client_connected);
 800092c:	4b08      	ldr	r3, [pc, #32]	; (8000950 <tcp_client_connect+0xc4>)
 800092e:	6818      	ldr	r0, [r3, #0]
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <tcp_client_connect+0xcc>)
 8000932:	881a      	ldrh	r2, [r3, #0]
 8000934:	1d39      	adds	r1, r7, #4
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <tcp_client_connect+0xd0>)
 8000938:	f007 fa06 	bl	8007d48 <tcp_connect>
		HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, GPIO_PIN_SET); // В случае успешного соедиения включаем BLUE led.
 800093c:	2201      	movs	r2, #1
 800093e:	2110      	movs	r1, #16
 8000940:	4807      	ldr	r0, [pc, #28]	; (8000960 <tcp_client_connect+0xd4>)
 8000942:	f002 faa1 	bl	8002e88 <HAL_GPIO_WritePin>
	}
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200002a8 	.word	0x200002a8
 8000954:	200002a0 	.word	0x200002a0
 8000958:	20000394 	.word	0x20000394
 800095c:	080009a5 	.word	0x080009a5
 8000960:	40020c00 	.word	0x40020c00

08000964 <tcp_client_connection_close>:

//----------------------------------------------------------
static void tcp_client_connection_close(struct tcp_pcb *tpcb,
		struct client_struct *es) // Функция для корректного разрыва соединения с сервером после функции tcp_client_connected
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	6039      	str	r1, [r7, #0]
	/* remove callbacks */
	tcp_recv(tpcb, NULL);
 800096e:	2100      	movs	r1, #0
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f008 f93d 	bl	8008bf0 <tcp_recv>
	tcp_sent(tpcb, NULL);
 8000976:	2100      	movs	r1, #0
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f008 f95b 	bl	8008c34 <tcp_sent>
	tcp_poll(tpcb, NULL, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2100      	movs	r1, #0
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f008 f978 	bl	8008c78 <tcp_poll>
	if (es != NULL) {
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d002      	beq.n	8000994 <tcp_client_connection_close+0x30>
		mem_free(es);
 800098e:	6838      	ldr	r0, [r7, #0]
 8000990:	f005 f992 	bl	8005cb8 <mem_free>
	}
	/* close tcp connection */
	tcp_close(tpcb);
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f006 fff1 	bl	800797c <tcp_close>
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
	...

080009a4 <tcp_client_connected>:
//-----------------------------------------------
static err_t tcp_client_connected(void *arg, struct tcp_pcb *tpcb, err_t err) // Эта функция будет вызываться в случае успешного соединения.
{
 80009a4:	b590      	push	{r4, r7, lr}
 80009a6:	b087      	sub	sp, #28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	4613      	mov	r3, r2
 80009b0:	71fb      	strb	r3, [r7, #7]
	struct client_struct *es = NULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	617b      	str	r3, [r7, #20]
	if (err == ERR_OK) {
 80009b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d148      	bne.n	8000a50 <tcp_client_connected+0xac>
		es = (struct client_struct*) mem_malloc(sizeof(struct client_struct));
 80009be:	200c      	movs	r0, #12
 80009c0:	f005 fae0 	bl	8005f84 <mem_malloc>
 80009c4:	6178      	str	r0, [r7, #20]
		if (es != NULL) {
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d03a      	beq.n	8000a42 <tcp_client_connected+0x9e>
			es->state = ES_CONNECTED;
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	2201      	movs	r2, #1
 80009d0:	701a      	strb	r2, [r3, #0]
			es->pcb = tpcb;
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	68ba      	ldr	r2, [r7, #8]
 80009d6:	605a      	str	r2, [r3, #4]
			es->p_tx = pbuf_alloc(PBUF_TRANSPORT, strlen((char*) data),
 80009d8:	4822      	ldr	r0, [pc, #136]	; (8000a64 <tcp_client_connected+0xc0>)
 80009da:	f7ff fbf9 	bl	80001d0 <strlen>
 80009de:	4603      	mov	r3, r0
 80009e0:	b29b      	uxth	r3, r3
 80009e2:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80009e6:	4619      	mov	r1, r3
 80009e8:	2036      	movs	r0, #54	; 0x36
 80009ea:	f005 ffb3 	bl	8006954 <pbuf_alloc>
 80009ee:	4602      	mov	r2, r0
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	609a      	str	r2, [r3, #8]
					PBUF_POOL);
			if (es->p_tx)
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d02d      	beq.n	8000a58 <tcp_client_connected+0xb4>

			{
				/* copy data to pbuf */
				pbuf_take(es->p_tx, (char*) data, strlen((char*) data));
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	689c      	ldr	r4, [r3, #8]
 8000a00:	4818      	ldr	r0, [pc, #96]	; (8000a64 <tcp_client_connected+0xc0>)
 8000a02:	f7ff fbe5 	bl	80001d0 <strlen>
 8000a06:	4603      	mov	r3, r0
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	4915      	ldr	r1, [pc, #84]	; (8000a64 <tcp_client_connected+0xc0>)
 8000a0e:	4620      	mov	r0, r4
 8000a10:	f006 fce0 	bl	80073d4 <pbuf_take>
				/* pass newly allocated es structure as argument to tpcb */
				tcp_arg(tpcb, es);
 8000a14:	6979      	ldr	r1, [r7, #20]
 8000a16:	68b8      	ldr	r0, [r7, #8]
 8000a18:	f008 f8d8 	bl	8008bcc <tcp_arg>
				/* initialize LwIP tcp_recv callback function */
				tcp_recv(tpcb, tcp_client_recv);
 8000a1c:	4912      	ldr	r1, [pc, #72]	; (8000a68 <tcp_client_connected+0xc4>)
 8000a1e:	68b8      	ldr	r0, [r7, #8]
 8000a20:	f008 f8e6 	bl	8008bf0 <tcp_recv>
				/* initialize LwIP tcp_sent callback function */
				tcp_sent(tpcb, tcp_client_sent);
 8000a24:	4911      	ldr	r1, [pc, #68]	; (8000a6c <tcp_client_connected+0xc8>)
 8000a26:	68b8      	ldr	r0, [r7, #8]
 8000a28:	f008 f904 	bl	8008c34 <tcp_sent>
				/* initialize LwIP tcp_poll callback function */
				tcp_poll(tpcb, tcp_client_poll, 1);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	4910      	ldr	r1, [pc, #64]	; (8000a70 <tcp_client_connected+0xcc>)
 8000a30:	68b8      	ldr	r0, [r7, #8]
 8000a32:	f008 f921 	bl	8008c78 <tcp_poll>
				/* send data */
				tcp_client_send(tpcb, es);
 8000a36:	6979      	ldr	r1, [r7, #20]
 8000a38:	68b8      	ldr	r0, [r7, #8]
 8000a3a:	f000 f891 	bl	8000b60 <tcp_client_send>
				return ERR_OK;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	e00c      	b.n	8000a5c <tcp_client_connected+0xb8>
			}
		} else {
			tcp_client_connection_close(tpcb, es);
 8000a42:	6979      	ldr	r1, [r7, #20]
 8000a44:	68b8      	ldr	r0, [r7, #8]
 8000a46:	f7ff ff8d 	bl	8000964 <tcp_client_connection_close>
			return ERR_MEM; // Если память не смогла выделиться!
 8000a4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a4e:	e005      	b.n	8000a5c <tcp_client_connected+0xb8>
		}
	} else {
		tcp_client_connection_close(tpcb, es); // Если нет ошибки то разъединяемся.
 8000a50:	6979      	ldr	r1, [r7, #20]
 8000a52:	68b8      	ldr	r0, [r7, #8]
 8000a54:	f7ff ff86 	bl	8000964 <tcp_client_connection_close>
	}
	return err;
 8000a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	371c      	adds	r7, #28
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd90      	pop	{r4, r7, pc}
 8000a64:	20000330 	.word	0x20000330
 8000a68:	08000a75 	.word	0x08000a75
 8000a6c:	08000bed 	.word	0x08000bed
 8000a70:	08000c19 	.word	0x08000c19

08000a74 <tcp_client_recv>:
//-----------------------------------------------

static err_t tcp_client_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p,
		err_t err) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
 8000a80:	70fb      	strb	r3, [r7, #3]
	struct client_struct *es;
	err_t ret_err;
	es = (struct client_struct*) arg;
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	613b      	str	r3, [r7, #16]
	if (p == NULL) {
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d10d      	bne.n	8000aa8 <tcp_client_recv+0x34>
		es->state = ES_CLOSING;
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	2203      	movs	r2, #3
 8000a90:	701a      	strb	r2, [r3, #0]
		if (es->p_tx == NULL) {
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	689b      	ldr	r3, [r3, #8]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d103      	bne.n	8000aa2 <tcp_client_recv+0x2e>
			tcp_client_connection_close(tpcb, es);
 8000a9a:	6939      	ldr	r1, [r7, #16]
 8000a9c:	68b8      	ldr	r0, [r7, #8]
 8000a9e:	f7ff ff61 	bl	8000964 <tcp_client_connection_close>
		}
		ret_err = ERR_OK;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	75fb      	strb	r3, [r7, #23]
 8000aa6:	e04f      	b.n	8000b48 <tcp_client_recv+0xd4>
	} else if (err != ERR_OK) {
 8000aa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d008      	beq.n	8000ac2 <tcp_client_recv+0x4e>
		if (p != NULL) {
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d002      	beq.n	8000abc <tcp_client_recv+0x48>
			pbuf_free(p);
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f006 fa30 	bl	8006f1c <pbuf_free>
		}
		ret_err = err;
 8000abc:	78fb      	ldrb	r3, [r7, #3]
 8000abe:	75fb      	strb	r3, [r7, #23]
 8000ac0:	e042      	b.n	8000b48 <tcp_client_recv+0xd4>
	} else if (es->state == ES_CONNECTED) {
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d12c      	bne.n	8000b24 <tcp_client_recv+0xb0>
		message_count++;
 8000aca:	4b22      	ldr	r3, [pc, #136]	; (8000b54 <tcp_client_recv+0xe0>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	4a20      	ldr	r2, [pc, #128]	; (8000b54 <tcp_client_recv+0xe0>)
 8000ad2:	6013      	str	r3, [r2, #0]
		tcp_recved(tpcb, p->tot_len);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	891b      	ldrh	r3, [r3, #8]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	68b8      	ldr	r0, [r7, #8]
 8000adc:	f007 f89e 	bl	8007c1c <tcp_recved>
		//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
		es->p_tx = p;
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
		strncpy(str1, es->p_tx->payload, es->p_tx->len);
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	6859      	ldr	r1, [r3, #4]
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	689b      	ldr	r3, [r3, #8]
 8000af0:	895b      	ldrh	r3, [r3, #10]
 8000af2:	461a      	mov	r2, r3
 8000af4:	4818      	ldr	r0, [pc, #96]	; (8000b58 <tcp_client_recv+0xe4>)
 8000af6:	f00f fb8c 	bl	8010212 <strncpy>
		str1[es->p_tx->len] = '\0';
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	689b      	ldr	r3, [r3, #8]
 8000afe:	895b      	ldrh	r3, [r3, #10]
 8000b00:	461a      	mov	r2, r3
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <tcp_client_recv+0xe4>)
 8000b04:	2100      	movs	r1, #0
 8000b06:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart6, (uint8_t*) str1, strlen(str1), 0x1000); // Отобразим то, что нам пришло.
 8000b08:	4813      	ldr	r0, [pc, #76]	; (8000b58 <tcp_client_recv+0xe4>)
 8000b0a:	f7ff fb61 	bl	80001d0 <strlen>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	b29a      	uxth	r2, r3
 8000b12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b16:	4910      	ldr	r1, [pc, #64]	; (8000b58 <tcp_client_recv+0xe4>)
 8000b18:	4810      	ldr	r0, [pc, #64]	; (8000b5c <tcp_client_recv+0xe8>)
 8000b1a:	f003 fb1c 	bl	8004156 <HAL_UART_Transmit>
		ret_err = ERR_OK;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	75fb      	strb	r3, [r7, #23]
 8000b22:	e011      	b.n	8000b48 <tcp_client_recv+0xd4>
	} else if (es->state == ES_RECEIVED) {
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b02      	cmp	r3, #2
 8000b2a:	d102      	bne.n	8000b32 <tcp_client_recv+0xbe>
		//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
		ret_err = ERR_OK;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	75fb      	strb	r3, [r7, #23]
 8000b30:	e00a      	b.n	8000b48 <tcp_client_recv+0xd4>
	} else {
		/* Acknowledge data reception */
		tcp_recved(tpcb, p->tot_len);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	891b      	ldrh	r3, [r3, #8]
 8000b36:	4619      	mov	r1, r3
 8000b38:	68b8      	ldr	r0, [r7, #8]
 8000b3a:	f007 f86f 	bl	8007c1c <tcp_recved>
		/* free pbuf and do nothing */
		pbuf_free(p);
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f006 f9ec 	bl	8006f1c <pbuf_free>
		ret_err = ERR_OK;
 8000b44:	2300      	movs	r3, #0
 8000b46:	75fb      	strb	r3, [r7, #23]
	}
	return ret_err;
 8000b48:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3718      	adds	r7, #24
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20000094 	.word	0x20000094
 8000b58:	200002cc 	.word	0x200002cc
 8000b5c:	20000214 	.word	0x20000214

08000b60 <tcp_client_send>:
//----------------------------------------------------------
static void tcp_client_send(struct tcp_pcb *tpcb, struct client_struct *es) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
	struct pbuf *ptr;
	err_t wr_err = ERR_OK;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	73fb      	strb	r3, [r7, #15]
	while ((wr_err == ERR_OK) && (es->p_tx != NULL)
 8000b6e:	e029      	b.n	8000bc4 <tcp_client_send+0x64>
			&& (es->p_tx->len <= tcp_sndbuf(tpcb))) {
		ptr = es->p_tx;
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	60bb      	str	r3, [r7, #8]
		wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	6859      	ldr	r1, [r3, #4]
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	895a      	ldrh	r2, [r3, #10]
 8000b7e:	2301      	movs	r3, #1
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f00a ff27 	bl	800b9d4 <tcp_write>
 8000b86:	4603      	mov	r3, r0
 8000b88:	73fb      	strb	r3, [r7, #15]
		if (wr_err == ERR_OK) {
 8000b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d110      	bne.n	8000bb4 <tcp_client_send+0x54>
			es->p_tx = ptr->next;
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	609a      	str	r2, [r3, #8]
			if (es->p_tx != NULL) {
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	689b      	ldr	r3, [r3, #8]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d004      	beq.n	8000bac <tcp_client_send+0x4c>
				pbuf_ref(es->p_tx);
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f006 fa58 	bl	800705c <pbuf_ref>
			}
			pbuf_free(ptr);
 8000bac:	68b8      	ldr	r0, [r7, #8]
 8000bae:	f006 f9b5 	bl	8006f1c <pbuf_free>
 8000bb2:	e007      	b.n	8000bc4 <tcp_client_send+0x64>
		} else if (wr_err == ERR_MEM) {
 8000bb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bbc:	d102      	bne.n	8000bc4 <tcp_client_send+0x64>
			es->p_tx = ptr;
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	68ba      	ldr	r2, [r7, #8]
 8000bc2:	609a      	str	r2, [r3, #8]
	while ((wr_err == ERR_OK) && (es->p_tx != NULL)
 8000bc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d10b      	bne.n	8000be4 <tcp_client_send+0x84>
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d007      	beq.n	8000be4 <tcp_client_send+0x84>
			&& (es->p_tx->len <= tcp_sndbuf(tpcb))) {
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	689b      	ldr	r3, [r3, #8]
 8000bd8:	895a      	ldrh	r2, [r3, #10]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d9c5      	bls.n	8000b70 <tcp_client_send+0x10>
		} else {
			/* other problem ?? */
		}
	}
}
 8000be4:	bf00      	nop
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <tcp_client_sent>:
//----------------------------------------------------------
static err_t tcp_client_sent(void *arg, struct tcp_pcb *tpcb, u16_t len) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	80fb      	strh	r3, [r7, #6]
	struct client_struct *es;
	LWIP_UNUSED_ARG(len);
	es = (struct client_struct*) arg;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	617b      	str	r3, [r7, #20]
	if (es->p_tx != NULL) {
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d003      	beq.n	8000c0e <tcp_client_sent+0x22>
		tcp_client_send(tpcb, es);
 8000c06:	6979      	ldr	r1, [r7, #20]
 8000c08:	68b8      	ldr	r0, [r7, #8]
 8000c0a:	f7ff ffa9 	bl	8000b60 <tcp_client_send>
	}
	return ERR_OK;
 8000c0e:	2300      	movs	r3, #0
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3718      	adds	r7, #24
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <tcp_client_poll>:
//----------------------------------------------------------
static err_t tcp_client_poll(void *arg, struct tcp_pcb *tpcb) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
	err_t ret_err;
	struct client_struct *es;
	es = (struct client_struct*) arg;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	60bb      	str	r3, [r7, #8]
	//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
	if (es != NULL) {
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d00e      	beq.n	8000c4a <tcp_client_poll+0x32>
		if (es->p_tx != NULL) {
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d107      	bne.n	8000c44 <tcp_client_poll+0x2c>
			// если есть буфер то, ничего не делаем.
		} else {
			if (es->state == ES_CLOSING) // Если сервер сделал запрос на разоединение.
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b03      	cmp	r3, #3
 8000c3a:	d103      	bne.n	8000c44 <tcp_client_poll+0x2c>
					{
				tcp_client_connection_close(tpcb, es); // Если нет буфера то закрываем соединение.
 8000c3c:	68b9      	ldr	r1, [r7, #8]
 8000c3e:	6838      	ldr	r0, [r7, #0]
 8000c40:	f7ff fe90 	bl	8000964 <tcp_client_connection_close>
			}
		}
		ret_err = ERR_OK;
 8000c44:	2300      	movs	r3, #0
 8000c46:	73fb      	strb	r3, [r7, #15]
 8000c48:	e004      	b.n	8000c54 <tcp_client_poll+0x3c>
	} else {
		tcp_abort(tpcb);
 8000c4a:	6838      	ldr	r0, [r7, #0]
 8000c4c:	f006 ff80 	bl	8007b50 <tcp_abort>
		ret_err = ERR_ABRT;
 8000c50:	23f3      	movs	r3, #243	; 0xf3
 8000c52:	73fb      	strb	r3, [r7, #15]
	}
	return ret_err;
 8000c54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3710      	adds	r7, #16
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <net_ini>:
//----------------------------------------------------------

void net_ini(void) // При старте обнуляем поля структуры.
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
	usartprop.usart_buf[0] = 0;
 8000c64:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <net_ini+0x28>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	701a      	strb	r2, [r3, #0]
	usartprop.usart_cnt = 0;
 8000c6a:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <net_ini+0x28>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	769a      	strb	r2, [r3, #26]
	usartprop.is_tcp_connect = 0;
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <net_ini+0x28>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	76da      	strb	r2, [r3, #27]
	usartprop.is_text = 0;
 8000c76:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <net_ini+0x28>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	771a      	strb	r2, [r3, #28]
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	200002ac 	.word	0x200002ac

08000c8c <port_extract>:
//-----------------------------------------------
uint16_t port_extract(char *ip_str, uint8_t len) // Функция разбора строк со значением порта.
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	460b      	mov	r3, r1
 8000c96:	70fb      	strb	r3, [r7, #3]
	uint16_t port = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	82fb      	strh	r3, [r7, #22]
	int ch1 = ':';
 8000c9c:	233a      	movs	r3, #58	; 0x3a
 8000c9e:	613b      	str	r3, [r7, #16]
	char *ss1;
	uint8_t offset = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	73fb      	strb	r3, [r7, #15]
	ss1 = strchr(ip_str, ch1);
 8000ca4:	6939      	ldr	r1, [r7, #16]
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f00f fa94 	bl	80101d4 <strchr>
 8000cac:	60b8      	str	r0, [r7, #8]
	offset = ss1 - ip_str + 1;
 8000cae:	68ba      	ldr	r2, [r7, #8]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	73fb      	strb	r3, [r7, #15]
	ip_str += offset;
 8000cba:	7bfb      	ldrb	r3, [r7, #15]
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	607b      	str	r3, [r7, #4]
	port = atoi(ip_str);
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f00f f9a8 	bl	8010018 <atoi>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	82fb      	strh	r3, [r7, #22]
	return port;
 8000ccc:	8afb      	ldrh	r3, [r7, #22]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3718      	adds	r7, #24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <ip_extract>:
//-----------------------------------------------
void ip_extract(char *ip_str, uint8_t len, uint8_t *ipextp) // Функция разбора строк со значением IP адреса.
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b08a      	sub	sp, #40	; 0x28
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	60f8      	str	r0, [r7, #12]
 8000cde:	460b      	mov	r3, r1
 8000ce0:	607a      	str	r2, [r7, #4]
 8000ce2:	72fb      	strb	r3, [r7, #11]
	uint8_t offset = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t i;

	char ss2[5] = { 0 };
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	2300      	movs	r3, #0
 8000cf0:	753b      	strb	r3, [r7, #20]
	char *ss1;
	int ch1 = '.';
 8000cf2:	232e      	movs	r3, #46	; 0x2e
 8000cf4:	623b      	str	r3, [r7, #32]
	int ch2 = ':';
 8000cf6:	233a      	movs	r3, #58	; 0x3a
 8000cf8:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < 3; i++) {
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d00:	e036      	b.n	8000d70 <ip_extract+0x9a>
		ss1 = strchr(ip_str, ch1);
 8000d02:	6a39      	ldr	r1, [r7, #32]
 8000d04:	68f8      	ldr	r0, [r7, #12]
 8000d06:	f00f fa65 	bl	80101d4 <strchr>
 8000d0a:	61b8      	str	r0, [r7, #24]
		offset = ss1 - ip_str + 1;
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	3301      	adds	r3, #1
 8000d16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		strncpy(ss2, ip_str, offset);
 8000d1a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000d1e:	f107 0310 	add.w	r3, r7, #16
 8000d22:	68f9      	ldr	r1, [r7, #12]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f00f fa74 	bl	8010212 <strncpy>
		ss2[offset] = 0;
 8000d2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d2e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000d32:	4413      	add	r3, r2
 8000d34:	2200      	movs	r2, #0
 8000d36:	f803 2c18 	strb.w	r2, [r3, #-24]
		ipextp[i] = atoi(ss2);
 8000d3a:	f107 0310 	add.w	r3, r7, #16
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f00f f96a 	bl	8010018 <atoi>
 8000d44:	4601      	mov	r1, r0
 8000d46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	b2ca      	uxtb	r2, r1
 8000d50:	701a      	strb	r2, [r3, #0]
		ip_str += offset;
 8000d52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d56:	68fa      	ldr	r2, [r7, #12]
 8000d58:	4413      	add	r3, r2
 8000d5a:	60fb      	str	r3, [r7, #12]
		len -= offset;
 8000d5c:	7afa      	ldrb	r2, [r7, #11]
 8000d5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	72fb      	strb	r3, [r7, #11]
	for (i = 0; i < 3; i++) {
 8000d66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d9c4      	bls.n	8000d02 <ip_extract+0x2c>
	}
	ss1 = strchr(ip_str, ch2);
 8000d78:	69f9      	ldr	r1, [r7, #28]
 8000d7a:	68f8      	ldr	r0, [r7, #12]
 8000d7c:	f00f fa2a 	bl	80101d4 <strchr>
 8000d80:	61b8      	str	r0, [r7, #24]
	if (ss1 != NULL) {
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d021      	beq.n	8000dcc <ip_extract+0xf6>
		offset = ss1 - ip_str + 1;
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	3301      	adds	r3, #1
 8000d92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		strncpy(ss2, ip_str, offset);
 8000d96:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000d9a:	f107 0310 	add.w	r3, r7, #16
 8000d9e:	68f9      	ldr	r1, [r7, #12]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f00f fa36 	bl	8010212 <strncpy>
		ss2[offset] = 0;
 8000da6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000daa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000dae:	4413      	add	r3, r2
 8000db0:	2200      	movs	r2, #0
 8000db2:	f803 2c18 	strb.w	r2, [r3, #-24]
		ipextp[3] = atoi(ss2);
 8000db6:	f107 0310 	add.w	r3, r7, #16
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f00f f92c 	bl	8010018 <atoi>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	3303      	adds	r3, #3
 8000dc6:	b2d2      	uxtb	r2, r2
 8000dc8:	701a      	strb	r2, [r3, #0]
 8000dca:	e017      	b.n	8000dfc <ip_extract+0x126>
		return;
	}
	strncpy(ss2, ip_str, len);
 8000dcc:	7afa      	ldrb	r2, [r7, #11]
 8000dce:	f107 0310 	add.w	r3, r7, #16
 8000dd2:	68f9      	ldr	r1, [r7, #12]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f00f fa1c 	bl	8010212 <strncpy>
	ss2[len] = 0;
 8000dda:	7afb      	ldrb	r3, [r7, #11]
 8000ddc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000de0:	4413      	add	r3, r2
 8000de2:	2200      	movs	r2, #0
 8000de4:	f803 2c18 	strb.w	r2, [r3, #-24]
	ipextp[3] = atoi(ss2);
 8000de8:	f107 0310 	add.w	r3, r7, #16
 8000dec:	4618      	mov	r0, r3
 8000dee:	f00f f913 	bl	8010018 <atoi>
 8000df2:	4602      	mov	r2, r0
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3303      	adds	r3, #3
 8000df8:	b2d2      	uxtb	r2, r2
 8000dfa:	701a      	strb	r2, [r3, #0]
}
 8000dfc:	3728      	adds	r7, #40	; 0x28
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
	...

08000e04 <net_cmd>:
//--------------------------------------------------
void net_cmd(char *buf_str) // Функция обработки команд
{
 8000e04:	b590      	push	{r4, r7, lr}
 8000e06:	b089      	sub	sp, #36	; 0x24
 8000e08:	af04      	add	r7, sp, #16
 8000e0a:	6078      	str	r0, [r7, #4]
	uint8_t ip[4];
	uint16_t port;
	if (usartprop.is_tcp_connect == 1) //статус попытки создать соединение TCP с сервером
 8000e0c:	4b48      	ldr	r3, [pc, #288]	; (8000f30 <net_cmd+0x12c>)
 8000e0e:	7edb      	ldrb	r3, [r3, #27]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d13e      	bne.n	8000e92 <net_cmd+0x8e>
			{
		ip_extract(buf_str, usartprop.usart_cnt - 1, ipaddr_dest); // Извлекаем IP из строки
 8000e14:	4b46      	ldr	r3, [pc, #280]	; (8000f30 <net_cmd+0x12c>)
 8000e16:	7e9b      	ldrb	r3, [r3, #26]
 8000e18:	3b01      	subs	r3, #1
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	4a45      	ldr	r2, [pc, #276]	; (8000f34 <net_cmd+0x130>)
 8000e1e:	4619      	mov	r1, r3
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f7ff ff58 	bl	8000cd6 <ip_extract>
		port_dest = port_extract(buf_str, usartprop.usart_cnt - 1); // Извлекаем Port из строки
 8000e26:	4b42      	ldr	r3, [pc, #264]	; (8000f30 <net_cmd+0x12c>)
 8000e28:	7e9b      	ldrb	r3, [r3, #26]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	4619      	mov	r1, r3
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff ff2b 	bl	8000c8c <port_extract>
 8000e36:	4603      	mov	r3, r0
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b3f      	ldr	r3, [pc, #252]	; (8000f38 <net_cmd+0x134>)
 8000e3c:	801a      	strh	r2, [r3, #0]
		usartprop.usart_cnt = 0;
 8000e3e:	4b3c      	ldr	r3, [pc, #240]	; (8000f30 <net_cmd+0x12c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	769a      	strb	r2, [r3, #26]
		usartprop.is_tcp_connect = 0;
 8000e44:	4b3a      	ldr	r3, [pc, #232]	; (8000f30 <net_cmd+0x12c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	76da      	strb	r2, [r3, #27]
		tcp_client_connect();
 8000e4a:	f7ff fd1f 	bl	800088c <tcp_client_connect>
		sprintf(str1, "%d.%d.%d.%d:%u\r\n", ipaddr_dest[0], ipaddr_dest[1],
 8000e4e:	4b39      	ldr	r3, [pc, #228]	; (8000f34 <net_cmd+0x130>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	4618      	mov	r0, r3
 8000e54:	4b37      	ldr	r3, [pc, #220]	; (8000f34 <net_cmd+0x130>)
 8000e56:	785b      	ldrb	r3, [r3, #1]
 8000e58:	461c      	mov	r4, r3
				ipaddr_dest[2], ipaddr_dest[3], port_dest);
 8000e5a:	4b36      	ldr	r3, [pc, #216]	; (8000f34 <net_cmd+0x130>)
 8000e5c:	789b      	ldrb	r3, [r3, #2]
		sprintf(str1, "%d.%d.%d.%d:%u\r\n", ipaddr_dest[0], ipaddr_dest[1],
 8000e5e:	461a      	mov	r2, r3
				ipaddr_dest[2], ipaddr_dest[3], port_dest);
 8000e60:	4b34      	ldr	r3, [pc, #208]	; (8000f34 <net_cmd+0x130>)
 8000e62:	78db      	ldrb	r3, [r3, #3]
		sprintf(str1, "%d.%d.%d.%d:%u\r\n", ipaddr_dest[0], ipaddr_dest[1],
 8000e64:	4619      	mov	r1, r3
 8000e66:	4b34      	ldr	r3, [pc, #208]	; (8000f38 <net_cmd+0x134>)
 8000e68:	881b      	ldrh	r3, [r3, #0]
 8000e6a:	9302      	str	r3, [sp, #8]
 8000e6c:	9101      	str	r1, [sp, #4]
 8000e6e:	9200      	str	r2, [sp, #0]
 8000e70:	4623      	mov	r3, r4
 8000e72:	4602      	mov	r2, r0
 8000e74:	4931      	ldr	r1, [pc, #196]	; (8000f3c <net_cmd+0x138>)
 8000e76:	4832      	ldr	r0, [pc, #200]	; (8000f40 <net_cmd+0x13c>)
 8000e78:	f00f f98c 	bl	8010194 <siprintf>
		HAL_UART_Transmit(&huart6, (uint8_t*) str1, strlen(str1), 0x1000);
 8000e7c:	4830      	ldr	r0, [pc, #192]	; (8000f40 <net_cmd+0x13c>)
 8000e7e:	f7ff f9a7 	bl	80001d0 <strlen>
 8000e82:	4603      	mov	r3, r0
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e8a:	492d      	ldr	r1, [pc, #180]	; (8000f40 <net_cmd+0x13c>)
 8000e8c:	482d      	ldr	r0, [pc, #180]	; (8000f44 <net_cmd+0x140>)
 8000e8e:	f003 f962 	bl	8004156 <HAL_UART_Transmit>
		//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
	}
	if (usartprop.is_tcp_connect == 2) //статус попытки разорвать соединение TCP с сервером
 8000e92:	4b27      	ldr	r3, [pc, #156]	; (8000f30 <net_cmd+0x12c>)
 8000e94:	7edb      	ldrb	r3, [r3, #27]
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d145      	bne.n	8000f26 <net_cmd+0x122>
			{
		ip_extract(buf_str, usartprop.usart_cnt - 1, ip); // Извлекаем IP из строки но, в локальную переменную
 8000e9a:	4b25      	ldr	r3, [pc, #148]	; (8000f30 <net_cmd+0x12c>)
 8000e9c:	7e9b      	ldrb	r3, [r3, #26]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	f107 0208 	add.w	r2, r7, #8
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f7ff ff14 	bl	8000cd6 <ip_extract>
		port = port_extract(buf_str, usartprop.usart_cnt - 1); // Извлекаем Port из строки но, в локальную переменную
 8000eae:	4b20      	ldr	r3, [pc, #128]	; (8000f30 <net_cmd+0x12c>)
 8000eb0:	7e9b      	ldrb	r3, [r3, #26]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff fee7 	bl	8000c8c <port_extract>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	81fb      	strh	r3, [r7, #14]
		usartprop.usart_cnt = 0;
 8000ec2:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <net_cmd+0x12c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	769a      	strb	r2, [r3, #26]
		usartprop.is_tcp_connect = 0;
 8000ec8:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <net_cmd+0x12c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	76da      	strb	r2, [r3, #27]

		if (!memcmp(ip, ipaddr_dest, 4)) //проверим что IP правильный
 8000ece:	f107 0308 	add.w	r3, r7, #8
 8000ed2:	2204      	movs	r2, #4
 8000ed4:	4917      	ldr	r1, [pc, #92]	; (8000f34 <net_cmd+0x130>)
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f00f f8c6 	bl	8010068 <memcmp>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d121      	bne.n	8000f26 <net_cmd+0x122>
				{
			if (port == port_dest) //также проверим, что порт тоже правильный
 8000ee2:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <net_cmd+0x134>)
 8000ee4:	881b      	ldrh	r3, [r3, #0]
 8000ee6:	89fa      	ldrh	r2, [r7, #14]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d11c      	bne.n	8000f26 <net_cmd+0x122>
					{
				/* close tcp connection */
				tcp_recv(client_pcb, NULL);
 8000eec:	4b16      	ldr	r3, [pc, #88]	; (8000f48 <net_cmd+0x144>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f007 fe7c 	bl	8008bf0 <tcp_recv>
				tcp_sent(client_pcb, NULL);
 8000ef8:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <net_cmd+0x144>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f007 fe98 	bl	8008c34 <tcp_sent>
				tcp_poll(client_pcb, NULL, 0);
 8000f04:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <net_cmd+0x144>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f007 feb3 	bl	8008c78 <tcp_poll>
				tcp_close(client_pcb);
 8000f12:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <net_cmd+0x144>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f006 fd30 	bl	800797c <tcp_close>
				HAL_GPIO_WritePin(BLUE_GPIO_Port, BLUE_Pin, GPIO_PIN_RESET); // По завершению закрытия соединения откл. BLUE led
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2110      	movs	r1, #16
 8000f20:	480a      	ldr	r0, [pc, #40]	; (8000f4c <net_cmd+0x148>)
 8000f22:	f001 ffb1 	bl	8002e88 <HAL_GPIO_WritePin>
			}
		}
	}
}
 8000f26:	bf00      	nop
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd90      	pop	{r4, r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	200002ac 	.word	0x200002ac
 8000f34:	200002a0 	.word	0x200002a0
 8000f38:	20000394 	.word	0x20000394
 8000f3c:	08011610 	.word	0x08011610
 8000f40:	200002cc 	.word	0x200002cc
 8000f44:	20000214 	.word	0x20000214
 8000f48:	200002a8 	.word	0x200002a8
 8000f4c:	40020c00 	.word	0x40020c00

08000f50 <sendstring>:
//-----------------------------------------------
void sendstring(char *buf_str) // Функция передачи строки серверу.
{
 8000f50:	b590      	push	{r4, r7, lr}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	tcp_sent(client_pcb, tcp_client_sent);
 8000f58:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <sendstring+0x4c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4910      	ldr	r1, [pc, #64]	; (8000fa0 <sendstring+0x50>)
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f007 fe68 	bl	8008c34 <tcp_sent>
	tcp_write(client_pcb, (void*) buf_str, strlen(buf_str), 1);
 8000f64:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <sendstring+0x4c>)
 8000f66:	681c      	ldr	r4, [r3, #0]
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff f931 	bl	80001d0 <strlen>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	2301      	movs	r3, #1
 8000f74:	6879      	ldr	r1, [r7, #4]
 8000f76:	4620      	mov	r0, r4
 8000f78:	f00a fd2c 	bl	800b9d4 <tcp_write>
	tcp_output(client_pcb);
 8000f7c:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <sendstring+0x4c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f00b fb11 	bl	800c5a8 <tcp_output>
	usartprop.usart_cnt = 0;
 8000f86:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <sendstring+0x54>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	769a      	strb	r2, [r3, #26]
	usartprop.is_text = 0;
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <sendstring+0x54>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	771a      	strb	r2, [r3, #28]
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd90      	pop	{r4, r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	200002a8 	.word	0x200002a8
 8000fa0:	08000bed 	.word	0x08000bed
 8000fa4:	200002ac 	.word	0x200002ac

08000fa8 <string_parse>:
//-----------------------------------------------
void string_parse(char *buf_str) // Функция разбора строки.
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, (uint8_t*) buf_str, strlen(buf_str), 0x1000); // Просто Эхо.
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff f90d 	bl	80001d0 <strlen>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	481d      	ldr	r0, [pc, #116]	; (8001038 <string_parse+0x90>)
 8000fc2:	f003 f8c8 	bl	8004156 <HAL_UART_Transmit>

	if (strncmp(buf_str, "t:", 2) == 0) // если пришла команда попытки соединения ("t:")
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	491c      	ldr	r1, [pc, #112]	; (800103c <string_parse+0x94>)
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f00f f90f 	bl	80101ee <strncmp>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d10e      	bne.n	8000ff4 <string_parse+0x4c>
			{
		usartprop.usart_cnt -= 1;
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <string_parse+0x98>)
 8000fd8:	7e9b      	ldrb	r3, [r3, #26]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	4b18      	ldr	r3, [pc, #96]	; (8001040 <string_parse+0x98>)
 8000fe0:	769a      	strb	r2, [r3, #26]
		usartprop.is_tcp_connect = 1; //статус попытки создать соединение TCP с сервером
 8000fe2:	4b17      	ldr	r3, [pc, #92]	; (8001040 <string_parse+0x98>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	76da      	strb	r2, [r3, #27]
		net_cmd(buf_str + 2);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3302      	adds	r3, #2
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff09 	bl	8000e04 <net_cmd>
	} else {
		usartprop.is_text = 1;
		sendstring(buf_str);
		//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
	}
}
 8000ff2:	e01c      	b.n	800102e <string_parse+0x86>
	} else if (strncmp(buf_str, "c:", 2) == 0) //статус попытки разорвать соединение ("c:")
 8000ff4:	2202      	movs	r2, #2
 8000ff6:	4913      	ldr	r1, [pc, #76]	; (8001044 <string_parse+0x9c>)
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f00f f8f8 	bl	80101ee <strncmp>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d10e      	bne.n	8001022 <string_parse+0x7a>
		usartprop.usart_cnt -= 1;
 8001004:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <string_parse+0x98>)
 8001006:	7e9b      	ldrb	r3, [r3, #26]
 8001008:	3b01      	subs	r3, #1
 800100a:	b2da      	uxtb	r2, r3
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <string_parse+0x98>)
 800100e:	769a      	strb	r2, [r3, #26]
		usartprop.is_tcp_connect = 2; //статус попытки разорвать соединение TCP с сервером
 8001010:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <string_parse+0x98>)
 8001012:	2202      	movs	r2, #2
 8001014:	76da      	strb	r2, [r3, #27]
		net_cmd(buf_str + 2);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	3302      	adds	r3, #2
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fef2 	bl	8000e04 <net_cmd>
}
 8001020:	e005      	b.n	800102e <string_parse+0x86>
		usartprop.is_text = 1;
 8001022:	4b07      	ldr	r3, [pc, #28]	; (8001040 <string_parse+0x98>)
 8001024:	2201      	movs	r2, #1
 8001026:	771a      	strb	r2, [r3, #28]
		sendstring(buf_str);
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff ff91 	bl	8000f50 <sendstring>
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000214 	.word	0x20000214
 800103c:	08011624 	.word	0x08011624
 8001040:	200002ac 	.word	0x200002ac
 8001044:	08011628 	.word	0x08011628

08001048 <UART6_RxCpltCallback>:
//-----------------------------------------------
void UART6_RxCpltCallback(void) // Обработчик из USART символов
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
	uint8_t b;
	b = str[0]; // Из буфера сохраняем данняе в нее
 800104e:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <UART6_RxCpltCallback+0x78>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	71fb      	strb	r3, [r7, #7]

	if (usartprop.usart_cnt > 25) { //если вдруг случайно превысим длину буфера
 8001054:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <UART6_RxCpltCallback+0x7c>)
 8001056:	7e9b      	ldrb	r3, [r3, #26]
 8001058:	2b19      	cmp	r3, #25
 800105a:	d908      	bls.n	800106e <UART6_RxCpltCallback+0x26>
		usartprop.usart_cnt = 0;   // то, обнуляем счетчик и снова
 800105c:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <UART6_RxCpltCallback+0x7c>)
 800105e:	2200      	movs	r2, #0
 8001060:	769a      	strb	r2, [r3, #26]
		HAL_UART_Receive_IT(&huart6, (uint8_t*) str, 1); // даем команду на прием.
 8001062:	2201      	movs	r2, #1
 8001064:	4916      	ldr	r1, [pc, #88]	; (80010c0 <UART6_RxCpltCallback+0x78>)
 8001066:	4818      	ldr	r0, [pc, #96]	; (80010c8 <UART6_RxCpltCallback+0x80>)
 8001068:	f003 f907 	bl	800427a <HAL_UART_Receive_IT>
		return;
 800106c:	e025      	b.n	80010ba <UART6_RxCpltCallback+0x72>
	}
	usartprop.usart_buf[usartprop.usart_cnt] = b;
 800106e:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <UART6_RxCpltCallback+0x7c>)
 8001070:	7e9b      	ldrb	r3, [r3, #26]
 8001072:	4619      	mov	r1, r3
 8001074:	4a13      	ldr	r2, [pc, #76]	; (80010c4 <UART6_RxCpltCallback+0x7c>)
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	5453      	strb	r3, [r2, r1]
	if (b == 0x0A) // Проверка, а не пришел ли к нам начало возврата коретки.
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	2b0a      	cmp	r3, #10
 800107e:	d111      	bne.n	80010a4 <UART6_RxCpltCallback+0x5c>
			{
		usartprop.usart_buf[usartprop.usart_cnt + 1] = 0;
 8001080:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <UART6_RxCpltCallback+0x7c>)
 8001082:	7e9b      	ldrb	r3, [r3, #26]
 8001084:	3301      	adds	r3, #1
 8001086:	4a0f      	ldr	r2, [pc, #60]	; (80010c4 <UART6_RxCpltCallback+0x7c>)
 8001088:	2100      	movs	r1, #0
 800108a:	54d1      	strb	r1, [r2, r3]
		string_parse((char*) usartprop.usart_buf); // обрабатываем строки.
 800108c:	480d      	ldr	r0, [pc, #52]	; (80010c4 <UART6_RxCpltCallback+0x7c>)
 800108e:	f7ff ff8b 	bl	8000fa8 <string_parse>
		usartprop.usart_cnt = 0;
 8001092:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <UART6_RxCpltCallback+0x7c>)
 8001094:	2200      	movs	r2, #0
 8001096:	769a      	strb	r2, [r3, #26]
		HAL_UART_Receive_IT(&huart6, (uint8_t*) str, 1);
 8001098:	2201      	movs	r2, #1
 800109a:	4909      	ldr	r1, [pc, #36]	; (80010c0 <UART6_RxCpltCallback+0x78>)
 800109c:	480a      	ldr	r0, [pc, #40]	; (80010c8 <UART6_RxCpltCallback+0x80>)
 800109e:	f003 f8ec 	bl	800427a <HAL_UART_Receive_IT>
		return;
 80010a2:	e00a      	b.n	80010ba <UART6_RxCpltCallback+0x72>
	}
	usartprop.usart_cnt++; // Если все нормально то увеличиваем счетчик
 80010a4:	4b07      	ldr	r3, [pc, #28]	; (80010c4 <UART6_RxCpltCallback+0x7c>)
 80010a6:	7e9b      	ldrb	r3, [r3, #26]
 80010a8:	3301      	adds	r3, #1
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <UART6_RxCpltCallback+0x7c>)
 80010ae:	769a      	strb	r2, [r3, #26]
	HAL_UART_Receive_IT(&huart6, (uint8_t*) str, 1); // и так же даем команду на прием.
 80010b0:	2201      	movs	r2, #1
 80010b2:	4903      	ldr	r1, [pc, #12]	; (80010c0 <UART6_RxCpltCallback+0x78>)
 80010b4:	4804      	ldr	r0, [pc, #16]	; (80010c8 <UART6_RxCpltCallback+0x80>)
 80010b6:	f003 f8e0 	bl	800427a <HAL_UART_Receive_IT>
}
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000398 	.word	0x20000398
 80010c4:	200002ac 	.word	0x200002ac
 80010c8:	20000214 	.word	0x20000214

080010cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <HAL_MspInit+0x4c>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	4a0f      	ldr	r2, [pc, #60]	; (8001118 <HAL_MspInit+0x4c>)
 80010dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e0:	6453      	str	r3, [r2, #68]	; 0x44
 80010e2:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <HAL_MspInit+0x4c>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	603b      	str	r3, [r7, #0]
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <HAL_MspInit+0x4c>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	4a08      	ldr	r2, [pc, #32]	; (8001118 <HAL_MspInit+0x4c>)
 80010f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010fc:	6413      	str	r3, [r2, #64]	; 0x40
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_MspInit+0x4c>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001106:	603b      	str	r3, [r7, #0]
 8001108:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800

0800111c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800112c:	d115      	bne.n	800115a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <HAL_TIM_Base_MspInit+0x48>)
 8001134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001136:	4a0b      	ldr	r2, [pc, #44]	; (8001164 <HAL_TIM_Base_MspInit+0x48>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6413      	str	r3, [r2, #64]	; 0x40
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <HAL_TIM_Base_MspInit+0x48>)
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	2100      	movs	r1, #0
 800114e:	201c      	movs	r0, #28
 8001150:	f000 fb0f 	bl	8001772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001154:	201c      	movs	r0, #28
 8001156:	f000 fb28 	bl	80017aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800115a:	bf00      	nop
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800

08001168 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a1d      	ldr	r2, [pc, #116]	; (80011fc <HAL_UART_MspInit+0x94>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d133      	bne.n	80011f2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <HAL_UART_MspInit+0x98>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	4a1b      	ldr	r2, [pc, #108]	; (8001200 <HAL_UART_MspInit+0x98>)
 8001194:	f043 0320 	orr.w	r3, r3, #32
 8001198:	6453      	str	r3, [r2, #68]	; 0x44
 800119a:	4b19      	ldr	r3, [pc, #100]	; (8001200 <HAL_UART_MspInit+0x98>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	f003 0320 	and.w	r3, r3, #32
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	4b15      	ldr	r3, [pc, #84]	; (8001200 <HAL_UART_MspInit+0x98>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a14      	ldr	r2, [pc, #80]	; (8001200 <HAL_UART_MspInit+0x98>)
 80011b0:	f043 0304 	orr.w	r3, r3, #4
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b12      	ldr	r3, [pc, #72]	; (8001200 <HAL_UART_MspInit+0x98>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0304 	and.w	r3, r3, #4
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011c2:	23c0      	movs	r3, #192	; 0xc0
 80011c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c6:	2302      	movs	r3, #2
 80011c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ce:	2303      	movs	r3, #3
 80011d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80011d2:	2308      	movs	r3, #8
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	4619      	mov	r1, r3
 80011dc:	4809      	ldr	r0, [pc, #36]	; (8001204 <HAL_UART_MspInit+0x9c>)
 80011de:	f001 fcb7 	bl	8002b50 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2100      	movs	r1, #0
 80011e6:	2047      	movs	r0, #71	; 0x47
 80011e8:	f000 fac3 	bl	8001772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80011ec:	2047      	movs	r0, #71	; 0x47
 80011ee:	f000 fadc 	bl	80017aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80011f2:	bf00      	nop
 80011f4:	3728      	adds	r7, #40	; 0x28
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40011400 	.word	0x40011400
 8001200:	40023800 	.word	0x40023800
 8001204:	40020800 	.word	0x40020800

08001208 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800120c:	e7fe      	b.n	800120c <NMI_Handler+0x4>

0800120e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001212:	e7fe      	b.n	8001212 <HardFault_Handler+0x4>

08001214 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001218:	e7fe      	b.n	8001218 <MemManage_Handler+0x4>

0800121a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800121e:	e7fe      	b.n	800121e <BusFault_Handler+0x4>

08001220 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001224:	e7fe      	b.n	8001224 <UsageFault_Handler+0x4>

08001226 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001254:	f000 f96e 	bl	8001534 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}

0800125c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001260:	4802      	ldr	r0, [pc, #8]	; (800126c <TIM2_IRQHandler+0x10>)
 8001262:	f002 fb5f 	bl	8003924 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000258 	.word	0x20000258

08001270 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001274:	4802      	ldr	r0, [pc, #8]	; (8001280 <USART6_IRQHandler+0x10>)
 8001276:	f003 f831 	bl	80042dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000214 	.word	0x20000214

08001284 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
	return 1;
 8001288:	2301      	movs	r3, #1
}
 800128a:	4618      	mov	r0, r3
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <_kill>:

int _kill(int pid, int sig)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800129e:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <_kill+0x20>)
 80012a0:	2216      	movs	r2, #22
 80012a2:	601a      	str	r2, [r3, #0]
	return -1;
 80012a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	20006610 	.word	0x20006610

080012b8 <_exit>:

void _exit (int status)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80012c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff ffe5 	bl	8001294 <_kill>
	while (1) {}		/* Make sure we hang here */
 80012ca:	e7fe      	b.n	80012ca <_exit+0x12>

080012cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	e00a      	b.n	80012f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012de:	f3af 8000 	nop.w
 80012e2:	4601      	mov	r1, r0
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	1c5a      	adds	r2, r3, #1
 80012e8:	60ba      	str	r2, [r7, #8]
 80012ea:	b2ca      	uxtb	r2, r1
 80012ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	3301      	adds	r3, #1
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	697a      	ldr	r2, [r7, #20]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	dbf0      	blt.n	80012de <_read+0x12>
	}

return len;
 80012fc:	687b      	ldr	r3, [r7, #4]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b086      	sub	sp, #24
 800130a:	af00      	add	r7, sp, #0
 800130c:	60f8      	str	r0, [r7, #12]
 800130e:	60b9      	str	r1, [r7, #8]
 8001310:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
 8001316:	e009      	b.n	800132c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	1c5a      	adds	r2, r3, #1
 800131c:	60ba      	str	r2, [r7, #8]
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	3301      	adds	r3, #1
 800132a:	617b      	str	r3, [r7, #20]
 800132c:	697a      	ldr	r2, [r7, #20]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	429a      	cmp	r2, r3
 8001332:	dbf1      	blt.n	8001318 <_write+0x12>
	}
	return len;
 8001334:	687b      	ldr	r3, [r7, #4]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3718      	adds	r7, #24
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <_close>:

int _close(int file)
{
 800133e:	b480      	push	{r7}
 8001340:	b083      	sub	sp, #12
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
	return -1;
 8001346:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800134a:	4618      	mov	r0, r3
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001366:	605a      	str	r2, [r3, #4]
	return 0;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <_isatty>:

int _isatty(int file)
{
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
	return 1;
 800137e:	2301      	movs	r3, #1
}
 8001380:	4618      	mov	r0, r3
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
	return 0;
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
	...

080013a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b087      	sub	sp, #28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013b0:	4a14      	ldr	r2, [pc, #80]	; (8001404 <_sbrk+0x5c>)
 80013b2:	4b15      	ldr	r3, [pc, #84]	; (8001408 <_sbrk+0x60>)
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013bc:	4b13      	ldr	r3, [pc, #76]	; (800140c <_sbrk+0x64>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d102      	bne.n	80013ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013c4:	4b11      	ldr	r3, [pc, #68]	; (800140c <_sbrk+0x64>)
 80013c6:	4a12      	ldr	r2, [pc, #72]	; (8001410 <_sbrk+0x68>)
 80013c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ca:	4b10      	ldr	r3, [pc, #64]	; (800140c <_sbrk+0x64>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d205      	bcs.n	80013e4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80013d8:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <_sbrk+0x6c>)
 80013da:	220c      	movs	r2, #12
 80013dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013e2:	e009      	b.n	80013f8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80013e4:	4b09      	ldr	r3, [pc, #36]	; (800140c <_sbrk+0x64>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ea:	4b08      	ldr	r3, [pc, #32]	; (800140c <_sbrk+0x64>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4413      	add	r3, r2
 80013f2:	4a06      	ldr	r2, [pc, #24]	; (800140c <_sbrk+0x64>)
 80013f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013f6:	68fb      	ldr	r3, [r7, #12]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	371c      	adds	r7, #28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	20020000 	.word	0x20020000
 8001408:	00004000 	.word	0x00004000
 800140c:	20000098 	.word	0x20000098
 8001410:	20006620 	.word	0x20006620
 8001414:	20006610 	.word	0x20006610

08001418 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800141c:	4b06      	ldr	r3, [pc, #24]	; (8001438 <SystemInit+0x20>)
 800141e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001422:	4a05      	ldr	r2, [pc, #20]	; (8001438 <SystemInit+0x20>)
 8001424:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001428:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800143c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001474 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001440:	480d      	ldr	r0, [pc, #52]	; (8001478 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001442:	490e      	ldr	r1, [pc, #56]	; (800147c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001444:	4a0e      	ldr	r2, [pc, #56]	; (8001480 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001448:	e002      	b.n	8001450 <LoopCopyDataInit>

0800144a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800144a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800144c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800144e:	3304      	adds	r3, #4

08001450 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001450:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001452:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001454:	d3f9      	bcc.n	800144a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001456:	4a0b      	ldr	r2, [pc, #44]	; (8001484 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001458:	4c0b      	ldr	r4, [pc, #44]	; (8001488 <LoopFillZerobss+0x26>)
  movs r3, #0
 800145a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800145c:	e001      	b.n	8001462 <LoopFillZerobss>

0800145e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800145e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001460:	3204      	adds	r2, #4

08001462 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001462:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001464:	d3fb      	bcc.n	800145e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001466:	f7ff ffd7 	bl	8001418 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800146a:	f00e fdd9 	bl	8010020 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800146e:	f7ff f883 	bl	8000578 <main>
  bx  lr    
 8001472:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001474:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800147c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001480:	08014364 	.word	0x08014364
  ldr r2, =_sbss
 8001484:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001488:	20006620 	.word	0x20006620

0800148c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800148c:	e7fe      	b.n	800148c <ADC_IRQHandler>
	...

08001490 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001494:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <HAL_Init+0x40>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a0d      	ldr	r2, [pc, #52]	; (80014d0 <HAL_Init+0x40>)
 800149a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800149e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014a0:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <HAL_Init+0x40>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <HAL_Init+0x40>)
 80014a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <HAL_Init+0x40>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a07      	ldr	r2, [pc, #28]	; (80014d0 <HAL_Init+0x40>)
 80014b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b8:	2003      	movs	r0, #3
 80014ba:	f000 f94f 	bl	800175c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014be:	200f      	movs	r0, #15
 80014c0:	f000 f808 	bl	80014d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014c4:	f7ff fe02 	bl	80010cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40023c00 	.word	0x40023c00

080014d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014dc:	4b12      	ldr	r3, [pc, #72]	; (8001528 <HAL_InitTick+0x54>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4b12      	ldr	r3, [pc, #72]	; (800152c <HAL_InitTick+0x58>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	4619      	mov	r1, r3
 80014e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 f967 	bl	80017c6 <HAL_SYSTICK_Config>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e00e      	b.n	8001520 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2b0f      	cmp	r3, #15
 8001506:	d80a      	bhi.n	800151e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001508:	2200      	movs	r2, #0
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001510:	f000 f92f 	bl	8001772 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001514:	4a06      	ldr	r2, [pc, #24]	; (8001530 <HAL_InitTick+0x5c>)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800151a:	2300      	movs	r3, #0
 800151c:	e000      	b.n	8001520 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
}
 8001520:	4618      	mov	r0, r3
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000000 	.word	0x20000000
 800152c:	20000008 	.word	0x20000008
 8001530:	20000004 	.word	0x20000004

08001534 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <HAL_IncTick+0x20>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	461a      	mov	r2, r3
 800153e:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_IncTick+0x24>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4413      	add	r3, r2
 8001544:	4a04      	ldr	r2, [pc, #16]	; (8001558 <HAL_IncTick+0x24>)
 8001546:	6013      	str	r3, [r2, #0]
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	20000008 	.word	0x20000008
 8001558:	200003b8 	.word	0x200003b8

0800155c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  return uwTick;
 8001560:	4b03      	ldr	r3, [pc, #12]	; (8001570 <HAL_GetTick+0x14>)
 8001562:	681b      	ldr	r3, [r3, #0]
}
 8001564:	4618      	mov	r0, r3
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	200003b8 	.word	0x200003b8

08001574 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800157c:	f7ff ffee 	bl	800155c <HAL_GetTick>
 8001580:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800158c:	d005      	beq.n	800159a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800158e:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <HAL_Delay+0x44>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	461a      	mov	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4413      	add	r3, r2
 8001598:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800159a:	bf00      	nop
 800159c:	f7ff ffde 	bl	800155c <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d8f7      	bhi.n	800159c <HAL_Delay+0x28>
  {
  }
}
 80015ac:	bf00      	nop
 80015ae:	bf00      	nop
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000008 	.word	0x20000008

080015bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <__NVIC_SetPriorityGrouping+0x44>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015d8:	4013      	ands	r3, r2
 80015da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ee:	4a04      	ldr	r2, [pc, #16]	; (8001600 <__NVIC_SetPriorityGrouping+0x44>)
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	60d3      	str	r3, [r2, #12]
}
 80015f4:	bf00      	nop
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001608:	4b04      	ldr	r3, [pc, #16]	; (800161c <__NVIC_GetPriorityGrouping+0x18>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	0a1b      	lsrs	r3, r3, #8
 800160e:	f003 0307 	and.w	r3, r3, #7
}
 8001612:	4618      	mov	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800162a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162e:	2b00      	cmp	r3, #0
 8001630:	db0b      	blt.n	800164a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	f003 021f 	and.w	r2, r3, #31
 8001638:	4907      	ldr	r1, [pc, #28]	; (8001658 <__NVIC_EnableIRQ+0x38>)
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	095b      	lsrs	r3, r3, #5
 8001640:	2001      	movs	r0, #1
 8001642:	fa00 f202 	lsl.w	r2, r0, r2
 8001646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000e100 	.word	0xe000e100

0800165c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	6039      	str	r1, [r7, #0]
 8001666:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166c:	2b00      	cmp	r3, #0
 800166e:	db0a      	blt.n	8001686 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	b2da      	uxtb	r2, r3
 8001674:	490c      	ldr	r1, [pc, #48]	; (80016a8 <__NVIC_SetPriority+0x4c>)
 8001676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167a:	0112      	lsls	r2, r2, #4
 800167c:	b2d2      	uxtb	r2, r2
 800167e:	440b      	add	r3, r1
 8001680:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001684:	e00a      	b.n	800169c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	b2da      	uxtb	r2, r3
 800168a:	4908      	ldr	r1, [pc, #32]	; (80016ac <__NVIC_SetPriority+0x50>)
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	3b04      	subs	r3, #4
 8001694:	0112      	lsls	r2, r2, #4
 8001696:	b2d2      	uxtb	r2, r2
 8001698:	440b      	add	r3, r1
 800169a:	761a      	strb	r2, [r3, #24]
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	e000e100 	.word	0xe000e100
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b089      	sub	sp, #36	; 0x24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f1c3 0307 	rsb	r3, r3, #7
 80016ca:	2b04      	cmp	r3, #4
 80016cc:	bf28      	it	cs
 80016ce:	2304      	movcs	r3, #4
 80016d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	3304      	adds	r3, #4
 80016d6:	2b06      	cmp	r3, #6
 80016d8:	d902      	bls.n	80016e0 <NVIC_EncodePriority+0x30>
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	3b03      	subs	r3, #3
 80016de:	e000      	b.n	80016e2 <NVIC_EncodePriority+0x32>
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43da      	mvns	r2, r3
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	401a      	ands	r2, r3
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001702:	43d9      	mvns	r1, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	4313      	orrs	r3, r2
         );
}
 800170a:	4618      	mov	r0, r3
 800170c:	3724      	adds	r7, #36	; 0x24
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
	...

08001718 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3b01      	subs	r3, #1
 8001724:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001728:	d301      	bcc.n	800172e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800172a:	2301      	movs	r3, #1
 800172c:	e00f      	b.n	800174e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800172e:	4a0a      	ldr	r2, [pc, #40]	; (8001758 <SysTick_Config+0x40>)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3b01      	subs	r3, #1
 8001734:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001736:	210f      	movs	r1, #15
 8001738:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800173c:	f7ff ff8e 	bl	800165c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001740:	4b05      	ldr	r3, [pc, #20]	; (8001758 <SysTick_Config+0x40>)
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001746:	4b04      	ldr	r3, [pc, #16]	; (8001758 <SysTick_Config+0x40>)
 8001748:	2207      	movs	r2, #7
 800174a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	e000e010 	.word	0xe000e010

0800175c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff ff29 	bl	80015bc <__NVIC_SetPriorityGrouping>
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001772:	b580      	push	{r7, lr}
 8001774:	b086      	sub	sp, #24
 8001776:	af00      	add	r7, sp, #0
 8001778:	4603      	mov	r3, r0
 800177a:	60b9      	str	r1, [r7, #8]
 800177c:	607a      	str	r2, [r7, #4]
 800177e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001784:	f7ff ff3e 	bl	8001604 <__NVIC_GetPriorityGrouping>
 8001788:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	68b9      	ldr	r1, [r7, #8]
 800178e:	6978      	ldr	r0, [r7, #20]
 8001790:	f7ff ff8e 	bl	80016b0 <NVIC_EncodePriority>
 8001794:	4602      	mov	r2, r0
 8001796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800179a:	4611      	mov	r1, r2
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff ff5d 	bl	800165c <__NVIC_SetPriority>
}
 80017a2:	bf00      	nop
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	4603      	mov	r3, r0
 80017b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ff31 	bl	8001620 <__NVIC_EnableIRQ>
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff ffa2 	bl	8001718 <SysTick_Config>
 80017d4:	4603      	mov	r3, r0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b084      	sub	sp, #16
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ea:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80017ec:	f7ff feb6 	bl	800155c <HAL_GetTick>
 80017f0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d008      	beq.n	8001810 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2280      	movs	r2, #128	; 0x80
 8001802:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e052      	b.n	80018b6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f022 0216 	bic.w	r2, r2, #22
 800181e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	695a      	ldr	r2, [r3, #20]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800182e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001834:	2b00      	cmp	r3, #0
 8001836:	d103      	bne.n	8001840 <HAL_DMA_Abort+0x62>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800183c:	2b00      	cmp	r3, #0
 800183e:	d007      	beq.n	8001850 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f022 0208 	bic.w	r2, r2, #8
 800184e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f022 0201 	bic.w	r2, r2, #1
 800185e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001860:	e013      	b.n	800188a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001862:	f7ff fe7b 	bl	800155c <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b05      	cmp	r3, #5
 800186e:	d90c      	bls.n	800188a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2220      	movs	r2, #32
 8001874:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2203      	movs	r2, #3
 800187a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e015      	b.n	80018b6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1e4      	bne.n	8001862 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800189c:	223f      	movs	r2, #63	; 0x3f
 800189e:	409a      	lsls	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d004      	beq.n	80018dc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2280      	movs	r2, #128	; 0x80
 80018d6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e00c      	b.n	80018f6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2205      	movs	r2, #5
 80018e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f022 0201 	bic.w	r2, r2, #1
 80018f2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
	...

08001904 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b088      	sub	sp, #32
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 800190c:	2300      	movs	r3, #0
 800190e:	61fb      	str	r3, [r7, #28]
 8001910:	2300      	movs	r3, #0
 8001912:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001914:	4baa      	ldr	r3, [pc, #680]	; (8001bc0 <HAL_ETH_Init+0x2bc>)
 8001916:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800191c:	2300      	movs	r3, #0
 800191e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e183      	b.n	8001c32 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d106      	bne.n	8001944 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f003 fcb6 	bl	80052b0 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001944:	2300      	movs	r3, #0
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	4b9e      	ldr	r3, [pc, #632]	; (8001bc4 <HAL_ETH_Init+0x2c0>)
 800194a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194c:	4a9d      	ldr	r2, [pc, #628]	; (8001bc4 <HAL_ETH_Init+0x2c0>)
 800194e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001952:	6453      	str	r3, [r2, #68]	; 0x44
 8001954:	4b9b      	ldr	r3, [pc, #620]	; (8001bc4 <HAL_ETH_Init+0x2c0>)
 8001956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001958:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001960:	4b99      	ldr	r3, [pc, #612]	; (8001bc8 <HAL_ETH_Init+0x2c4>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	4a98      	ldr	r2, [pc, #608]	; (8001bc8 <HAL_ETH_Init+0x2c4>)
 8001966:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800196a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800196c:	4b96      	ldr	r3, [pc, #600]	; (8001bc8 <HAL_ETH_Init+0x2c4>)
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a1b      	ldr	r3, [r3, #32]
 8001974:	4994      	ldr	r1, [pc, #592]	; (8001bc8 <HAL_ETH_Init+0x2c4>)
 8001976:	4313      	orrs	r3, r2
 8001978:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f042 0201 	orr.w	r2, r2, #1
 800198c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001990:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001992:	f7ff fde3 	bl	800155c <HAL_GetTick>
 8001996:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001998:	e011      	b.n	80019be <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800199a:	f7ff fddf 	bl	800155c <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80019a8:	d909      	bls.n	80019be <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2203      	movs	r2, #3
 80019ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e139      	b.n	8001c32 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1e4      	bne.n	800199a <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	f023 031c 	bic.w	r3, r3, #28
 80019de:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80019e0:	f001 feac 	bl	800373c <HAL_RCC_GetHCLKFreq>
 80019e4:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	4a78      	ldr	r2, [pc, #480]	; (8001bcc <HAL_ETH_Init+0x2c8>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d908      	bls.n	8001a00 <HAL_ETH_Init+0xfc>
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	4a77      	ldr	r2, [pc, #476]	; (8001bd0 <HAL_ETH_Init+0x2cc>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d804      	bhi.n	8001a00 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	f043 0308 	orr.w	r3, r3, #8
 80019fc:	61fb      	str	r3, [r7, #28]
 80019fe:	e027      	b.n	8001a50 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	4a73      	ldr	r2, [pc, #460]	; (8001bd0 <HAL_ETH_Init+0x2cc>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d908      	bls.n	8001a1a <HAL_ETH_Init+0x116>
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	4a6d      	ldr	r2, [pc, #436]	; (8001bc0 <HAL_ETH_Init+0x2bc>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d204      	bcs.n	8001a1a <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	f043 030c 	orr.w	r3, r3, #12
 8001a16:	61fb      	str	r3, [r7, #28]
 8001a18:	e01a      	b.n	8001a50 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	4a68      	ldr	r2, [pc, #416]	; (8001bc0 <HAL_ETH_Init+0x2bc>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d303      	bcc.n	8001a2a <HAL_ETH_Init+0x126>
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	4a6b      	ldr	r2, [pc, #428]	; (8001bd4 <HAL_ETH_Init+0x2d0>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d911      	bls.n	8001a4e <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	4a69      	ldr	r2, [pc, #420]	; (8001bd4 <HAL_ETH_Init+0x2d0>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d908      	bls.n	8001a44 <HAL_ETH_Init+0x140>
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	4a68      	ldr	r2, [pc, #416]	; (8001bd8 <HAL_ETH_Init+0x2d4>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d804      	bhi.n	8001a44 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	f043 0304 	orr.w	r3, r3, #4
 8001a40:	61fb      	str	r3, [r7, #28]
 8001a42:	e005      	b.n	8001a50 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f043 0310 	orr.w	r3, r3, #16
 8001a4a:	61fb      	str	r3, [r7, #28]
 8001a4c:	e000      	b.n	8001a50 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001a4e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	69fa      	ldr	r2, [r7, #28]
 8001a56:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001a58:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 fb98 	bl	8002194 <HAL_ETH_WritePHYRegister>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d00b      	beq.n	8001a82 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001a6e:	6939      	ldr	r1, [r7, #16]
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 fd4d 	bl	8002510 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e0d7      	b.n	8001c32 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001a82:	20ff      	movs	r0, #255	; 0xff
 8001a84:	f7ff fd76 	bl	8001574 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f000 80a5 	beq.w	8001bdc <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001a92:	f7ff fd63 	bl	800155c <HAL_GetTick>
 8001a96:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001a98:	f107 030c 	add.w	r3, r7, #12
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 fb0f 	bl	80020c4 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001aa6:	f7ff fd59 	bl	800155c <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d90f      	bls.n	8001ad8 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001abc:	6939      	ldr	r1, [r7, #16]
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 fd26 	bl	8002510 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e0ac      	b.n	8001c32 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f003 0304 	and.w	r3, r3, #4
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0da      	beq.n	8001a98 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001ae2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f000 fb53 	bl	8002194 <HAL_ETH_WritePHYRegister>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d00b      	beq.n	8001b0c <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001af8:	6939      	ldr	r1, [r7, #16]
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 fd08 	bl	8002510 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e092      	b.n	8001c32 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b0c:	f7ff fd26 	bl	800155c <HAL_GetTick>
 8001b10:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001b12:	f107 030c 	add.w	r3, r7, #12
 8001b16:	461a      	mov	r2, r3
 8001b18:	2101      	movs	r1, #1
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 fad2 	bl	80020c4 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001b20:	f7ff fd1c 	bl	800155c <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d90f      	bls.n	8001b52 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001b36:	6939      	ldr	r1, [r7, #16]
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f000 fce9 	bl	8002510 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e06f      	b.n	8001c32 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f003 0320 	and.w	r3, r3, #32
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0da      	beq.n	8001b12 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001b5c:	f107 030c 	add.w	r3, r7, #12
 8001b60:	461a      	mov	r2, r3
 8001b62:	2110      	movs	r1, #16
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 faad 	bl	80020c4 <HAL_ETH_ReadPHYRegister>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d00b      	beq.n	8001b88 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001b74:	6939      	ldr	r1, [r7, #16]
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 fcca 	bl	8002510 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001b84:	2301      	movs	r3, #1
 8001b86:	e054      	b.n	8001c32 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f003 0304 	and.w	r3, r3, #4
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d004      	beq.n	8001b9c <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	e002      	b.n	8001ba2 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d003      	beq.n	8001bb4 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
 8001bb2:	e035      	b.n	8001c20 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	e030      	b.n	8001c20 <HAL_ETH_Init+0x31c>
 8001bbe:	bf00      	nop
 8001bc0:	03938700 	.word	0x03938700
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40013800 	.word	0x40013800
 8001bcc:	01312cff 	.word	0x01312cff
 8001bd0:	02160ebf 	.word	0x02160ebf
 8001bd4:	05f5e0ff 	.word	0x05f5e0ff
 8001bd8:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	08db      	lsrs	r3, r3, #3
 8001be2:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	085b      	lsrs	r3, r3, #1
 8001bea:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001bec:	4313      	orrs	r3, r2
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 facd 	bl	8002194 <HAL_ETH_WritePHYRegister>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d00b      	beq.n	8001c18 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001c04:	6939      	ldr	r1, [r7, #16]
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 fc82 	bl	8002510 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e00c      	b.n	8001c32 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001c18:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001c1c:	f7ff fcaa 	bl	8001574 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001c20:	6939      	ldr	r1, [r7, #16]
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 fc74 	bl	8002510 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3720      	adds	r7, #32
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop

08001c3c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b087      	sub	sp, #28
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
 8001c48:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d101      	bne.n	8001c5c <HAL_ETH_DMATxDescListInit+0x20>
 8001c58:	2302      	movs	r3, #2
 8001c5a:	e052      	b.n	8001d02 <HAL_ETH_DMATxDescListInit+0xc6>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2202      	movs	r2, #2
 8001c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	e030      	b.n	8001cda <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	015b      	lsls	r3, r3, #5
 8001c7c:	68ba      	ldr	r2, [r7, #8]
 8001c7e:	4413      	add	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c88:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001c90:	fb02 f303 	mul.w	r3, r2, r3
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	4413      	add	r3, r2
 8001c98:	461a      	mov	r2, r3
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d105      	bne.n	8001cb2 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d208      	bcs.n	8001cce <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	015b      	lsls	r3, r3, #5
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	60da      	str	r2, [r3, #12]
 8001ccc:	e002      	b.n	8001cd4 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001cce:	68ba      	ldr	r2, [r7, #8]
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d3ca      	bcc.n	8001c78 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cec:	3310      	adds	r3, #16
 8001cee:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	371c      	adds	r7, #28
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b087      	sub	sp, #28
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	60f8      	str	r0, [r7, #12]
 8001d16:	60b9      	str	r1, [r7, #8]
 8001d18:	607a      	str	r2, [r7, #4]
 8001d1a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d101      	bne.n	8001d2e <HAL_ETH_DMARxDescListInit+0x20>
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	e056      	b.n	8001ddc <HAL_ETH_DMARxDescListInit+0xce>
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2202      	movs	r2, #2
 8001d3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	68ba      	ldr	r2, [r7, #8]
 8001d42:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]
 8001d48:	e034      	b.n	8001db4 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	015b      	lsls	r3, r3, #5
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	4413      	add	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001d5a:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001d62:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001d6a:	fb02 f303 	mul.w	r3, r2, r3
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	461a      	mov	r2, r3
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d105      	bne.n	8001d8c <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d208      	bcs.n	8001da8 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	015b      	lsls	r3, r3, #5
 8001d9c:	68ba      	ldr	r2, [r7, #8]
 8001d9e:	4413      	add	r3, r2
 8001da0:	461a      	mov	r2, r3
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	e002      	b.n	8001dae <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001da8:	68ba      	ldr	r2, [r7, #8]
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	3301      	adds	r3, #1
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d3c6      	bcc.n	8001d4a <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68ba      	ldr	r2, [r7, #8]
 8001dc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dc6:	330c      	adds	r3, #12
 8001dc8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	371c      	adds	r7, #28
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b087      	sub	sp, #28
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d101      	bne.n	8001e0c <HAL_ETH_TransmitFrame+0x24>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	e0cd      	b.n	8001fa8 <HAL_ETH_TransmitFrame+0x1c0>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2202      	movs	r2, #2
 8001e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d109      	bne.n	8001e36 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001e32:	2301      	movs	r3, #1
 8001e34:	e0b8      	b.n	8001fa8 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	da09      	bge.n	8001e54 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2212      	movs	r2, #18
 8001e44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e0a9      	b.n	8001fa8 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d915      	bls.n	8001e8a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	4a54      	ldr	r2, [pc, #336]	; (8001fb4 <HAL_ETH_TransmitFrame+0x1cc>)
 8001e62:	fba2 2303 	umull	r2, r3, r2, r3
 8001e66:	0a9b      	lsrs	r3, r3, #10
 8001e68:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	4b51      	ldr	r3, [pc, #324]	; (8001fb4 <HAL_ETH_TransmitFrame+0x1cc>)
 8001e6e:	fba3 1302 	umull	r1, r3, r3, r2
 8001e72:	0a9b      	lsrs	r3, r3, #10
 8001e74:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001e78:	fb01 f303 	mul.w	r3, r1, r3
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d005      	beq.n	8001e8e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	3301      	adds	r3, #1
 8001e86:	617b      	str	r3, [r7, #20]
 8001e88:	e001      	b.n	8001e8e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d11c      	bne.n	8001ece <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001ea2:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001eae:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ebe:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ecc:	e04b      	b.n	8001f66 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001ece:	2300      	movs	r3, #0
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	e044      	b.n	8001f5e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ede:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ee2:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d107      	bne.n	8001efa <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ef8:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001f02:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d116      	bne.n	8001f3c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f18:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001f1c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	4a25      	ldr	r2, [pc, #148]	; (8001fb8 <HAL_ETH_TransmitFrame+0x1d0>)
 8001f22:	fb02 f203 	mul.w	r2, r2, r3
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	4413      	add	r3, r2
 8001f2a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001f2e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001f3a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f46:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f4a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	461a      	mov	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	613b      	str	r3, [r7, #16]
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d3b6      	bcc.n	8001ed4 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f6e:	3314      	adds	r3, #20
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0304 	and.w	r3, r3, #4
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00d      	beq.n	8001f96 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f82:	3314      	adds	r3, #20
 8001f84:	2204      	movs	r2, #4
 8001f86:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f90:	3304      	adds	r3, #4
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	371c      	adds	r7, #28
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	ac02b00b 	.word	0xac02b00b
 8001fb8:	fffffa0c 	.word	0xfffffa0c

08001fbc <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d101      	bne.n	8001fd6 <HAL_ETH_GetReceivedFrame+0x1a>
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	e070      	b.n	80020b8 <HAL_ETH_GetReceivedFrame+0xfc>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	db5a      	blt.n	80020a6 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d030      	beq.n	8002060 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002002:	1c5a      	adds	r2, r3, #1
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200c:	2b01      	cmp	r3, #1
 800200e:	d103      	bne.n	8002018 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	0c1b      	lsrs	r3, r3, #16
 8002028:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800202c:	3b04      	subs	r3, #4
 800202e:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	461a      	mov	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 800205c:	2300      	movs	r3, #0
 800205e:	e02b      	b.n	80020b8 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800206a:	2b00      	cmp	r3, #0
 800206c:	d010      	beq.n	8002090 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	461a      	mov	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	629a      	str	r2, [r3, #40]	; 0x28
 800208e:	e00a      	b.n	80020a6 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002094:	1c5a      	adds	r2, r3, #1
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	461a      	mov	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	460b      	mov	r3, r1
 80020ce:	607a      	str	r2, [r7, #4]
 80020d0:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80020d2:	2300      	movs	r3, #0
 80020d4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b82      	cmp	r3, #130	; 0x82
 80020e4:	d101      	bne.n	80020ea <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80020e6:	2302      	movs	r3, #2
 80020e8:	e050      	b.n	800218c <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2282      	movs	r2, #130	; 0x82
 80020ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	f003 031c 	and.w	r3, r3, #28
 8002100:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	8a1b      	ldrh	r3, [r3, #16]
 8002106:	02db      	lsls	r3, r3, #11
 8002108:	b29b      	uxth	r3, r3
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	4313      	orrs	r3, r2
 800210e:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002110:	897b      	ldrh	r3, [r7, #10]
 8002112:	019b      	lsls	r3, r3, #6
 8002114:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002118:	697a      	ldr	r2, [r7, #20]
 800211a:	4313      	orrs	r3, r2
 800211c:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f023 0302 	bic.w	r3, r3, #2
 8002124:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002136:	f7ff fa11 	bl	800155c <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800213c:	e015      	b.n	800216a <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800213e:	f7ff fa0d 	bl	800155c <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800214c:	d309      	bcc.n	8002162 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e014      	b.n	800218c <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1e4      	bne.n	800213e <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	b29b      	uxth	r3, r3
 800217c:	461a      	mov	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3718      	adds	r7, #24
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	460b      	mov	r3, r1
 800219e:	607a      	str	r2, [r7, #4]
 80021a0:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b42      	cmp	r3, #66	; 0x42
 80021b4:	d101      	bne.n	80021ba <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80021b6:	2302      	movs	r3, #2
 80021b8:	e04e      	b.n	8002258 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2242      	movs	r2, #66	; 0x42
 80021be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f003 031c 	and.w	r3, r3, #28
 80021d0:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	8a1b      	ldrh	r3, [r3, #16]
 80021d6:	02db      	lsls	r3, r3, #11
 80021d8:	b29b      	uxth	r3, r3
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	4313      	orrs	r3, r2
 80021de:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80021e0:	897b      	ldrh	r3, [r7, #10]
 80021e2:	019b      	lsls	r3, r3, #6
 80021e4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	f043 0302 	orr.w	r3, r3, #2
 80021f4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	b29a      	uxth	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002210:	f7ff f9a4 	bl	800155c <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002216:	e015      	b.n	8002244 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002218:	f7ff f9a0 	bl	800155c <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002226:	d309      	bcc.n	800223c <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e00d      	b.n	8002258 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1e4      	bne.n	8002218 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	3718      	adds	r7, #24
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800226e:	2b01      	cmp	r3, #1
 8002270:	d101      	bne.n	8002276 <HAL_ETH_Start+0x16>
 8002272:	2302      	movs	r3, #2
 8002274:	e01f      	b.n	80022b6 <HAL_ETH_Start+0x56>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2202      	movs	r2, #2
 8002282:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 fb44 	bl	8002914 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 fb7b 	bl	8002988 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 fc12 	bl	8002abc <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 fbaf 	bl	80029fc <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 fbdc 	bl	8002a5c <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80022be:	b580      	push	{r7, lr}
 80022c0:	b082      	sub	sp, #8
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d101      	bne.n	80022d4 <HAL_ETH_Stop+0x16>
 80022d0:	2302      	movs	r3, #2
 80022d2:	e01f      	b.n	8002314 <HAL_ETH_Stop+0x56>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2202      	movs	r2, #2
 80022e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f000 fba1 	bl	8002a2c <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 fbce 	bl	8002a8c <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 fb66 	bl	80029c2 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 fbe0 	bl	8002abc <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f000 fb26 	bl	800294e <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8002326:	2300      	movs	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002330:	2b01      	cmp	r3, #1
 8002332:	d101      	bne.n	8002338 <HAL_ETH_ConfigMAC+0x1c>
 8002334:	2302      	movs	r3, #2
 8002336:	e0e4      	b.n	8002502 <HAL_ETH_ConfigMAC+0x1e6>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2202      	movs	r2, #2
 8002344:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	f000 80b1 	beq.w	80024b2 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	4b6c      	ldr	r3, [pc, #432]	; (800250c <HAL_ETH_ConfigMAC+0x1f0>)
 800235c:	4013      	ands	r3, r2
 800235e:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002368:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800236e:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8002374:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800237a:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8002380:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8002386:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 800238c:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8002392:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8002398:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800239e:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80023a4:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80023aa:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80023c2:	2001      	movs	r0, #1
 80023c4:	f7ff f8d6 	bl	8001574 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80023d8:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80023de:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80023e4:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80023ea:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80023f0:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80023f6:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8002402:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002404:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800240e:	2001      	movs	r0, #1
 8002410:	f7ff f8b0 	bl	8001574 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002424:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800242e:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800243e:	4013      	ands	r3, r2
 8002440:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002446:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800244c:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8002452:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002458:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800245e:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002464:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	4313      	orrs	r3, r2
 800246a:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800247c:	2001      	movs	r0, #1
 800247e:	f7ff f879 	bl	8001574 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	69db      	ldr	r3, [r3, #28]
 80024a0:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80024a2:	2001      	movs	r0, #1
 80024a4:	f7ff f866 	bl	8001574 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	61da      	str	r2, [r3, #28]
 80024b0:	e01e      	b.n	80024f0 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80024c0:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80024e2:	2001      	movs	r0, #1
 80024e4:	f7ff f846 	bl	8001574 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	ff20810f 	.word	0xff20810f

08002510 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b0b0      	sub	sp, #192	; 0xc0
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800251a:	2300      	movs	r3, #0
 800251c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d007      	beq.n	8002536 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800252c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002534:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002536:	2300      	movs	r3, #0
 8002538:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800253a:	2300      	movs	r3, #0
 800253c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800253e:	2300      	movs	r3, #0
 8002540:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002542:	2300      	movs	r3, #0
 8002544:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002546:	2300      	movs	r3, #0
 8002548:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800254a:	2300      	movs	r3, #0
 800254c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d103      	bne.n	800255e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002556:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800255a:	663b      	str	r3, [r7, #96]	; 0x60
 800255c:	e001      	b.n	8002562 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800255e:	2300      	movs	r3, #0
 8002560:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002562:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002566:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002568:	2300      	movs	r3, #0
 800256a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800256c:	2300      	movs	r3, #0
 800256e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002570:	2300      	movs	r3, #0
 8002572:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002574:	2300      	movs	r3, #0
 8002576:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002578:	2300      	movs	r3, #0
 800257a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800257c:	2340      	movs	r3, #64	; 0x40
 800257e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002580:	2300      	movs	r3, #0
 8002582:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002586:	2300      	movs	r3, #0
 8002588:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800258c:	2300      	movs	r3, #0
 800258e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002592:	2300      	movs	r3, #0
 8002594:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002598:	2300      	movs	r3, #0
 800259a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800259e:	2300      	movs	r3, #0
 80025a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80025b0:	2380      	movs	r3, #128	; 0x80
 80025b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80025b6:	2300      	movs	r3, #0
 80025b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80025bc:	2300      	movs	r3, #0
 80025be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80025c2:	2300      	movs	r3, #0
 80025c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80025c8:	2300      	movs	r3, #0
 80025ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80025ce:	2300      	movs	r3, #0
 80025d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80025e4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025e8:	4bac      	ldr	r3, [pc, #688]	; (800289c <ETH_MACDMAConfig+0x38c>)
 80025ea:	4013      	ands	r3, r2
 80025ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80025f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80025f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80025f4:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80025f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80025f8:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80025fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80025fc:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002602:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002604:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002606:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002608:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800260a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002610:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002612:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002614:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002616:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002618:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800261a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800261c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800261e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002620:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002622:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002624:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002626:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800262a:	4313      	orrs	r3, r2
 800262c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002638:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002644:	2001      	movs	r0, #1
 8002646:	f7fe ff95 	bl	8001574 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002652:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002654:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002656:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002658:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800265a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 800265c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800265e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002662:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002664:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002668:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800266a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800266e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002670:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002674:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002678:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002680:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002682:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800268e:	2001      	movs	r0, #1
 8002690:	f7fe ff70 	bl	8001574 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800269c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80026a6:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80026b0:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80026bc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80026c0:	f64f 7341 	movw	r3, #65345	; 0xff41
 80026c4:	4013      	ands	r3, r2
 80026c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80026ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026ce:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80026d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80026d4:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80026d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80026da:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80026dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80026e0:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80026e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80026e6:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80026e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80026ec:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80026ee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80026f2:	4313      	orrs	r3, r2
 80026f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002700:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800270c:	2001      	movs	r0, #1
 800270e:	f7fe ff31 	bl	8001574 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800271a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800271c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002720:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	430a      	orrs	r2, r1
 800272a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002736:	2001      	movs	r0, #1
 8002738:	f7fe ff1c 	bl	8001574 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002744:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002746:	2300      	movs	r3, #0
 8002748:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800274a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800274e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002750:	2300      	movs	r3, #0
 8002752:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002754:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002758:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800275a:	2300      	movs	r3, #0
 800275c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800275e:	2300      	movs	r3, #0
 8002760:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002762:	2300      	movs	r3, #0
 8002764:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002766:	2300      	movs	r3, #0
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800276a:	2304      	movs	r3, #4
 800276c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800276e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002772:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002774:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002778:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800277a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800277e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002780:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002784:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002786:	2380      	movs	r3, #128	; 0x80
 8002788:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800278a:	2300      	movs	r3, #0
 800278c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800278e:	2300      	movs	r3, #0
 8002790:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800279a:	3318      	adds	r3, #24
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80027a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027a6:	4b3e      	ldr	r3, [pc, #248]	; (80028a0 <ETH_MACDMAConfig+0x390>)
 80027a8:	4013      	ands	r3, r2
 80027aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80027ae:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80027b0:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80027b2:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80027b4:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80027b6:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80027b8:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80027ba:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80027bc:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80027be:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80027c0:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80027c2:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80027c4:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80027c6:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80027ca:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80027cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80027ce:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80027d0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027d4:	4313      	orrs	r3, r2
 80027d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027e2:	3318      	adds	r3, #24
 80027e4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027e8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027f2:	3318      	adds	r3, #24
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80027fa:	2001      	movs	r0, #1
 80027fc:	f7fe feba 	bl	8001574 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002808:	3318      	adds	r3, #24
 800280a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800280e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002810:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002814:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002818:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800281a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800281c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800281e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002820:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002824:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002826:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800282a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002838:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002848:	2001      	movs	r0, #1
 800284a:	f7fe fe93 	bl	8001574 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002856:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800285a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d10f      	bne.n	8002884 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800286c:	331c      	adds	r3, #28
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002878:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800287c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002880:	331c      	adds	r3, #28
 8002882:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	461a      	mov	r2, r3
 800288a:	2100      	movs	r1, #0
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 f809 	bl	80028a4 <ETH_MACAddressConfig>
}
 8002892:	bf00      	nop
 8002894:	37c0      	adds	r7, #192	; 0xc0
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	ff20810f 	.word	0xff20810f
 80028a0:	f8de3f23 	.word	0xf8de3f23

080028a4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b087      	sub	sp, #28
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3305      	adds	r3, #5
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	021b      	lsls	r3, r3, #8
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	3204      	adds	r2, #4
 80028bc:	7812      	ldrb	r2, [r2, #0]
 80028be:	4313      	orrs	r3, r2
 80028c0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	4b11      	ldr	r3, [pc, #68]	; (800290c <ETH_MACAddressConfig+0x68>)
 80028c6:	4413      	add	r3, r2
 80028c8:	461a      	mov	r2, r3
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	3303      	adds	r3, #3
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	061a      	lsls	r2, r3, #24
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	3302      	adds	r3, #2
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	041b      	lsls	r3, r3, #16
 80028de:	431a      	orrs	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3301      	adds	r3, #1
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	021b      	lsls	r3, r3, #8
 80028e8:	4313      	orrs	r3, r2
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	7812      	ldrb	r2, [r2, #0]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	4b06      	ldr	r3, [pc, #24]	; (8002910 <ETH_MACAddressConfig+0x6c>)
 80028f6:	4413      	add	r3, r2
 80028f8:	461a      	mov	r2, r3
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	6013      	str	r3, [r2, #0]
}
 80028fe:	bf00      	nop
 8002900:	371c      	adds	r7, #28
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40028040 	.word	0x40028040
 8002910:	40028044 	.word	0x40028044

08002914 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800291c:	2300      	movs	r3, #0
 800291e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 0208 	orr.w	r2, r2, #8
 800292e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002938:	2001      	movs	r0, #1
 800293a:	f000 f8e9 	bl	8002b10 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	601a      	str	r2, [r3, #0]
}
 8002946:	bf00      	nop
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800294e:	b580      	push	{r7, lr}
 8002950:	b084      	sub	sp, #16
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002956:	2300      	movs	r3, #0
 8002958:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 0208 	bic.w	r2, r2, #8
 8002968:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002972:	2001      	movs	r0, #1
 8002974:	f000 f8cc 	bl	8002b10 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	601a      	str	r2, [r3, #0]
}
 8002980:	bf00      	nop
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002990:	2300      	movs	r3, #0
 8002992:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0204 	orr.w	r2, r2, #4
 80029a2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80029ac:	2001      	movs	r0, #1
 80029ae:	f000 f8af 	bl	8002b10 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	601a      	str	r2, [r3, #0]
}
 80029ba:	bf00      	nop
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b084      	sub	sp, #16
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 0204 	bic.w	r2, r2, #4
 80029dc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80029e6:	2001      	movs	r0, #1
 80029e8:	f000 f892 	bl	8002b10 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	601a      	str	r2, [r3, #0]
}
 80029f4:	bf00      	nop
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a0c:	3318      	adds	r3, #24
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a1c:	3318      	adds	r3, #24
 8002a1e:	601a      	str	r2, [r3, #0]
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a3c:	3318      	adds	r3, #24
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a4c:	3318      	adds	r3, #24
 8002a4e:	601a      	str	r2, [r3, #0]
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a6c:	3318      	adds	r3, #24
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f042 0202 	orr.w	r2, r2, #2
 8002a78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a7c:	3318      	adds	r3, #24
 8002a7e:	601a      	str	r2, [r3, #0]
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a9c:	3318      	adds	r3, #24
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 0202 	bic.w	r2, r2, #2
 8002aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aac:	3318      	adds	r3, #24
 8002aae:	601a      	str	r2, [r3, #0]
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ad0:	3318      	adds	r3, #24
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ae0:	3318      	adds	r3, #24
 8002ae2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aec:	3318      	adds	r3, #24
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002af2:	2001      	movs	r0, #1
 8002af4:	f000 f80c 	bl	8002b10 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b02:	3318      	adds	r3, #24
 8002b04:	601a      	str	r2, [r3, #0]
}
 8002b06:	bf00      	nop
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
	...

08002b10 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b18:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <ETH_Delay+0x38>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a0b      	ldr	r2, [pc, #44]	; (8002b4c <ETH_Delay+0x3c>)
 8002b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b22:	0a5b      	lsrs	r3, r3, #9
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	fb02 f303 	mul.w	r3, r2, r3
 8002b2a:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002b2c:	bf00      	nop
  } 
  while (Delay --);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	1e5a      	subs	r2, r3, #1
 8002b32:	60fa      	str	r2, [r7, #12]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1f9      	bne.n	8002b2c <ETH_Delay+0x1c>
}
 8002b38:	bf00      	nop
 8002b3a:	bf00      	nop
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	20000000 	.word	0x20000000
 8002b4c:	10624dd3 	.word	0x10624dd3

08002b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b089      	sub	sp, #36	; 0x24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b66:	2300      	movs	r3, #0
 8002b68:	61fb      	str	r3, [r7, #28]
 8002b6a:	e16b      	b.n	8002e44 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	f040 815a 	bne.w	8002e3e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d005      	beq.n	8002ba2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d130      	bne.n	8002c04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	2203      	movs	r2, #3
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bd8:	2201      	movs	r2, #1
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	43db      	mvns	r3, r3
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	4013      	ands	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	091b      	lsrs	r3, r3, #4
 8002bee:	f003 0201 	and.w	r2, r3, #1
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f003 0303 	and.w	r3, r3, #3
 8002c0c:	2b03      	cmp	r3, #3
 8002c0e:	d017      	beq.n	8002c40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	2203      	movs	r2, #3
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	43db      	mvns	r3, r3
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4013      	ands	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 0303 	and.w	r3, r3, #3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d123      	bne.n	8002c94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	08da      	lsrs	r2, r3, #3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3208      	adds	r2, #8
 8002c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	220f      	movs	r2, #15
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	691a      	ldr	r2, [r3, #16]
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	f003 0307 	and.w	r3, r3, #7
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	08da      	lsrs	r2, r3, #3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	3208      	adds	r2, #8
 8002c8e:	69b9      	ldr	r1, [r7, #24]
 8002c90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	2203      	movs	r2, #3
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f003 0203 	and.w	r2, r3, #3
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 80b4 	beq.w	8002e3e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	4b60      	ldr	r3, [pc, #384]	; (8002e5c <HAL_GPIO_Init+0x30c>)
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cde:	4a5f      	ldr	r2, [pc, #380]	; (8002e5c <HAL_GPIO_Init+0x30c>)
 8002ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ce6:	4b5d      	ldr	r3, [pc, #372]	; (8002e5c <HAL_GPIO_Init+0x30c>)
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cf2:	4a5b      	ldr	r2, [pc, #364]	; (8002e60 <HAL_GPIO_Init+0x310>)
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	089b      	lsrs	r3, r3, #2
 8002cf8:	3302      	adds	r3, #2
 8002cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	220f      	movs	r2, #15
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4013      	ands	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a52      	ldr	r2, [pc, #328]	; (8002e64 <HAL_GPIO_Init+0x314>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d02b      	beq.n	8002d76 <HAL_GPIO_Init+0x226>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a51      	ldr	r2, [pc, #324]	; (8002e68 <HAL_GPIO_Init+0x318>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d025      	beq.n	8002d72 <HAL_GPIO_Init+0x222>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a50      	ldr	r2, [pc, #320]	; (8002e6c <HAL_GPIO_Init+0x31c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d01f      	beq.n	8002d6e <HAL_GPIO_Init+0x21e>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a4f      	ldr	r2, [pc, #316]	; (8002e70 <HAL_GPIO_Init+0x320>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d019      	beq.n	8002d6a <HAL_GPIO_Init+0x21a>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a4e      	ldr	r2, [pc, #312]	; (8002e74 <HAL_GPIO_Init+0x324>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d013      	beq.n	8002d66 <HAL_GPIO_Init+0x216>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a4d      	ldr	r2, [pc, #308]	; (8002e78 <HAL_GPIO_Init+0x328>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d00d      	beq.n	8002d62 <HAL_GPIO_Init+0x212>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a4c      	ldr	r2, [pc, #304]	; (8002e7c <HAL_GPIO_Init+0x32c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d007      	beq.n	8002d5e <HAL_GPIO_Init+0x20e>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a4b      	ldr	r2, [pc, #300]	; (8002e80 <HAL_GPIO_Init+0x330>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d101      	bne.n	8002d5a <HAL_GPIO_Init+0x20a>
 8002d56:	2307      	movs	r3, #7
 8002d58:	e00e      	b.n	8002d78 <HAL_GPIO_Init+0x228>
 8002d5a:	2308      	movs	r3, #8
 8002d5c:	e00c      	b.n	8002d78 <HAL_GPIO_Init+0x228>
 8002d5e:	2306      	movs	r3, #6
 8002d60:	e00a      	b.n	8002d78 <HAL_GPIO_Init+0x228>
 8002d62:	2305      	movs	r3, #5
 8002d64:	e008      	b.n	8002d78 <HAL_GPIO_Init+0x228>
 8002d66:	2304      	movs	r3, #4
 8002d68:	e006      	b.n	8002d78 <HAL_GPIO_Init+0x228>
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e004      	b.n	8002d78 <HAL_GPIO_Init+0x228>
 8002d6e:	2302      	movs	r3, #2
 8002d70:	e002      	b.n	8002d78 <HAL_GPIO_Init+0x228>
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <HAL_GPIO_Init+0x228>
 8002d76:	2300      	movs	r3, #0
 8002d78:	69fa      	ldr	r2, [r7, #28]
 8002d7a:	f002 0203 	and.w	r2, r2, #3
 8002d7e:	0092      	lsls	r2, r2, #2
 8002d80:	4093      	lsls	r3, r2
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d88:	4935      	ldr	r1, [pc, #212]	; (8002e60 <HAL_GPIO_Init+0x310>)
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	089b      	lsrs	r3, r3, #2
 8002d8e:	3302      	adds	r3, #2
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d96:	4b3b      	ldr	r3, [pc, #236]	; (8002e84 <HAL_GPIO_Init+0x334>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4013      	ands	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dba:	4a32      	ldr	r2, [pc, #200]	; (8002e84 <HAL_GPIO_Init+0x334>)
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002dc0:	4b30      	ldr	r3, [pc, #192]	; (8002e84 <HAL_GPIO_Init+0x334>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002de4:	4a27      	ldr	r2, [pc, #156]	; (8002e84 <HAL_GPIO_Init+0x334>)
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dea:	4b26      	ldr	r3, [pc, #152]	; (8002e84 <HAL_GPIO_Init+0x334>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	43db      	mvns	r3, r3
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	4013      	ands	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e0e:	4a1d      	ldr	r2, [pc, #116]	; (8002e84 <HAL_GPIO_Init+0x334>)
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e14:	4b1b      	ldr	r3, [pc, #108]	; (8002e84 <HAL_GPIO_Init+0x334>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4013      	ands	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d003      	beq.n	8002e38 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e38:	4a12      	ldr	r2, [pc, #72]	; (8002e84 <HAL_GPIO_Init+0x334>)
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	3301      	adds	r3, #1
 8002e42:	61fb      	str	r3, [r7, #28]
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	2b0f      	cmp	r3, #15
 8002e48:	f67f ae90 	bls.w	8002b6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e4c:	bf00      	nop
 8002e4e:	bf00      	nop
 8002e50:	3724      	adds	r7, #36	; 0x24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	40013800 	.word	0x40013800
 8002e64:	40020000 	.word	0x40020000
 8002e68:	40020400 	.word	0x40020400
 8002e6c:	40020800 	.word	0x40020800
 8002e70:	40020c00 	.word	0x40020c00
 8002e74:	40021000 	.word	0x40021000
 8002e78:	40021400 	.word	0x40021400
 8002e7c:	40021800 	.word	0x40021800
 8002e80:	40021c00 	.word	0x40021c00
 8002e84:	40013c00 	.word	0x40013c00

08002e88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	807b      	strh	r3, [r7, #2]
 8002e94:	4613      	mov	r3, r2
 8002e96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e98:	787b      	ldrb	r3, [r7, #1]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e9e:	887a      	ldrh	r2, [r7, #2]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ea4:	e003      	b.n	8002eae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ea6:	887b      	ldrh	r3, [r7, #2]
 8002ea8:	041a      	lsls	r2, r3, #16
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	619a      	str	r2, [r3, #24]
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
	...

08002ebc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e264      	b.n	8003398 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d075      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eda:	4ba3      	ldr	r3, [pc, #652]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 030c 	and.w	r3, r3, #12
 8002ee2:	2b04      	cmp	r3, #4
 8002ee4:	d00c      	beq.n	8002f00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ee6:	4ba0      	ldr	r3, [pc, #640]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eee:	2b08      	cmp	r3, #8
 8002ef0:	d112      	bne.n	8002f18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ef2:	4b9d      	ldr	r3, [pc, #628]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002efa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002efe:	d10b      	bne.n	8002f18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f00:	4b99      	ldr	r3, [pc, #612]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d05b      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x108>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d157      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e23f      	b.n	8003398 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f20:	d106      	bne.n	8002f30 <HAL_RCC_OscConfig+0x74>
 8002f22:	4b91      	ldr	r3, [pc, #580]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a90      	ldr	r2, [pc, #576]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	e01d      	b.n	8002f6c <HAL_RCC_OscConfig+0xb0>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f38:	d10c      	bne.n	8002f54 <HAL_RCC_OscConfig+0x98>
 8002f3a:	4b8b      	ldr	r3, [pc, #556]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a8a      	ldr	r2, [pc, #552]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002f40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f44:	6013      	str	r3, [r2, #0]
 8002f46:	4b88      	ldr	r3, [pc, #544]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a87      	ldr	r2, [pc, #540]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f50:	6013      	str	r3, [r2, #0]
 8002f52:	e00b      	b.n	8002f6c <HAL_RCC_OscConfig+0xb0>
 8002f54:	4b84      	ldr	r3, [pc, #528]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a83      	ldr	r2, [pc, #524]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f5e:	6013      	str	r3, [r2, #0]
 8002f60:	4b81      	ldr	r3, [pc, #516]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a80      	ldr	r2, [pc, #512]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002f66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d013      	beq.n	8002f9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f74:	f7fe faf2 	bl	800155c <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f7c:	f7fe faee 	bl	800155c <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b64      	cmp	r3, #100	; 0x64
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e204      	b.n	8003398 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8e:	4b76      	ldr	r3, [pc, #472]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0f0      	beq.n	8002f7c <HAL_RCC_OscConfig+0xc0>
 8002f9a:	e014      	b.n	8002fc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9c:	f7fe fade 	bl	800155c <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fa4:	f7fe fada 	bl	800155c <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b64      	cmp	r3, #100	; 0x64
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e1f0      	b.n	8003398 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fb6:	4b6c      	ldr	r3, [pc, #432]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1f0      	bne.n	8002fa4 <HAL_RCC_OscConfig+0xe8>
 8002fc2:	e000      	b.n	8002fc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d063      	beq.n	800309a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fd2:	4b65      	ldr	r3, [pc, #404]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f003 030c 	and.w	r3, r3, #12
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00b      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fde:	4b62      	ldr	r3, [pc, #392]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fe6:	2b08      	cmp	r3, #8
 8002fe8:	d11c      	bne.n	8003024 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fea:	4b5f      	ldr	r3, [pc, #380]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d116      	bne.n	8003024 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ff6:	4b5c      	ldr	r3, [pc, #368]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d005      	beq.n	800300e <HAL_RCC_OscConfig+0x152>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d001      	beq.n	800300e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e1c4      	b.n	8003398 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800300e:	4b56      	ldr	r3, [pc, #344]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	4952      	ldr	r1, [pc, #328]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 800301e:	4313      	orrs	r3, r2
 8003020:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003022:	e03a      	b.n	800309a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d020      	beq.n	800306e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800302c:	4b4f      	ldr	r3, [pc, #316]	; (800316c <HAL_RCC_OscConfig+0x2b0>)
 800302e:	2201      	movs	r2, #1
 8003030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003032:	f7fe fa93 	bl	800155c <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003038:	e008      	b.n	800304c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800303a:	f7fe fa8f 	bl	800155c <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e1a5      	b.n	8003398 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800304c:	4b46      	ldr	r3, [pc, #280]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d0f0      	beq.n	800303a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003058:	4b43      	ldr	r3, [pc, #268]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	4940      	ldr	r1, [pc, #256]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8003068:	4313      	orrs	r3, r2
 800306a:	600b      	str	r3, [r1, #0]
 800306c:	e015      	b.n	800309a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800306e:	4b3f      	ldr	r3, [pc, #252]	; (800316c <HAL_RCC_OscConfig+0x2b0>)
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003074:	f7fe fa72 	bl	800155c <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800307c:	f7fe fa6e 	bl	800155c <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e184      	b.n	8003398 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800308e:	4b36      	ldr	r3, [pc, #216]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1f0      	bne.n	800307c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0308 	and.w	r3, r3, #8
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d030      	beq.n	8003108 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d016      	beq.n	80030dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ae:	4b30      	ldr	r3, [pc, #192]	; (8003170 <HAL_RCC_OscConfig+0x2b4>)
 80030b0:	2201      	movs	r2, #1
 80030b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b4:	f7fe fa52 	bl	800155c <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030bc:	f7fe fa4e 	bl	800155c <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e164      	b.n	8003398 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ce:	4b26      	ldr	r3, [pc, #152]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 80030d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0f0      	beq.n	80030bc <HAL_RCC_OscConfig+0x200>
 80030da:	e015      	b.n	8003108 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030dc:	4b24      	ldr	r3, [pc, #144]	; (8003170 <HAL_RCC_OscConfig+0x2b4>)
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030e2:	f7fe fa3b 	bl	800155c <HAL_GetTick>
 80030e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e8:	e008      	b.n	80030fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030ea:	f7fe fa37 	bl	800155c <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e14d      	b.n	8003398 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030fc:	4b1a      	ldr	r3, [pc, #104]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 80030fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1f0      	bne.n	80030ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 80a0 	beq.w	8003256 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003116:	2300      	movs	r3, #0
 8003118:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800311a:	4b13      	ldr	r3, [pc, #76]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10f      	bne.n	8003146 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003126:	2300      	movs	r3, #0
 8003128:	60bb      	str	r3, [r7, #8]
 800312a:	4b0f      	ldr	r3, [pc, #60]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	4a0e      	ldr	r2, [pc, #56]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8003130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003134:	6413      	str	r3, [r2, #64]	; 0x40
 8003136:	4b0c      	ldr	r3, [pc, #48]	; (8003168 <HAL_RCC_OscConfig+0x2ac>)
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313e:	60bb      	str	r3, [r7, #8]
 8003140:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003142:	2301      	movs	r3, #1
 8003144:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003146:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <HAL_RCC_OscConfig+0x2b8>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314e:	2b00      	cmp	r3, #0
 8003150:	d121      	bne.n	8003196 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003152:	4b08      	ldr	r3, [pc, #32]	; (8003174 <HAL_RCC_OscConfig+0x2b8>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a07      	ldr	r2, [pc, #28]	; (8003174 <HAL_RCC_OscConfig+0x2b8>)
 8003158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800315c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800315e:	f7fe f9fd 	bl	800155c <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003164:	e011      	b.n	800318a <HAL_RCC_OscConfig+0x2ce>
 8003166:	bf00      	nop
 8003168:	40023800 	.word	0x40023800
 800316c:	42470000 	.word	0x42470000
 8003170:	42470e80 	.word	0x42470e80
 8003174:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003178:	f7fe f9f0 	bl	800155c <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e106      	b.n	8003398 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800318a:	4b85      	ldr	r3, [pc, #532]	; (80033a0 <HAL_RCC_OscConfig+0x4e4>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003192:	2b00      	cmp	r3, #0
 8003194:	d0f0      	beq.n	8003178 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d106      	bne.n	80031ac <HAL_RCC_OscConfig+0x2f0>
 800319e:	4b81      	ldr	r3, [pc, #516]	; (80033a4 <HAL_RCC_OscConfig+0x4e8>)
 80031a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a2:	4a80      	ldr	r2, [pc, #512]	; (80033a4 <HAL_RCC_OscConfig+0x4e8>)
 80031a4:	f043 0301 	orr.w	r3, r3, #1
 80031a8:	6713      	str	r3, [r2, #112]	; 0x70
 80031aa:	e01c      	b.n	80031e6 <HAL_RCC_OscConfig+0x32a>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	2b05      	cmp	r3, #5
 80031b2:	d10c      	bne.n	80031ce <HAL_RCC_OscConfig+0x312>
 80031b4:	4b7b      	ldr	r3, [pc, #492]	; (80033a4 <HAL_RCC_OscConfig+0x4e8>)
 80031b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b8:	4a7a      	ldr	r2, [pc, #488]	; (80033a4 <HAL_RCC_OscConfig+0x4e8>)
 80031ba:	f043 0304 	orr.w	r3, r3, #4
 80031be:	6713      	str	r3, [r2, #112]	; 0x70
 80031c0:	4b78      	ldr	r3, [pc, #480]	; (80033a4 <HAL_RCC_OscConfig+0x4e8>)
 80031c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c4:	4a77      	ldr	r2, [pc, #476]	; (80033a4 <HAL_RCC_OscConfig+0x4e8>)
 80031c6:	f043 0301 	orr.w	r3, r3, #1
 80031ca:	6713      	str	r3, [r2, #112]	; 0x70
 80031cc:	e00b      	b.n	80031e6 <HAL_RCC_OscConfig+0x32a>
 80031ce:	4b75      	ldr	r3, [pc, #468]	; (80033a4 <HAL_RCC_OscConfig+0x4e8>)
 80031d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d2:	4a74      	ldr	r2, [pc, #464]	; (80033a4 <HAL_RCC_OscConfig+0x4e8>)
 80031d4:	f023 0301 	bic.w	r3, r3, #1
 80031d8:	6713      	str	r3, [r2, #112]	; 0x70
 80031da:	4b72      	ldr	r3, [pc, #456]	; (80033a4 <HAL_RCC_OscConfig+0x4e8>)
 80031dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031de:	4a71      	ldr	r2, [pc, #452]	; (80033a4 <HAL_RCC_OscConfig+0x4e8>)
 80031e0:	f023 0304 	bic.w	r3, r3, #4
 80031e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d015      	beq.n	800321a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ee:	f7fe f9b5 	bl	800155c <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f4:	e00a      	b.n	800320c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031f6:	f7fe f9b1 	bl	800155c <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	f241 3288 	movw	r2, #5000	; 0x1388
 8003204:	4293      	cmp	r3, r2
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e0c5      	b.n	8003398 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800320c:	4b65      	ldr	r3, [pc, #404]	; (80033a4 <HAL_RCC_OscConfig+0x4e8>)
 800320e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0ee      	beq.n	80031f6 <HAL_RCC_OscConfig+0x33a>
 8003218:	e014      	b.n	8003244 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321a:	f7fe f99f 	bl	800155c <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003220:	e00a      	b.n	8003238 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003222:	f7fe f99b 	bl	800155c <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003230:	4293      	cmp	r3, r2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e0af      	b.n	8003398 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003238:	4b5a      	ldr	r3, [pc, #360]	; (80033a4 <HAL_RCC_OscConfig+0x4e8>)
 800323a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1ee      	bne.n	8003222 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003244:	7dfb      	ldrb	r3, [r7, #23]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d105      	bne.n	8003256 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800324a:	4b56      	ldr	r3, [pc, #344]	; (80033a4 <HAL_RCC_OscConfig+0x4e8>)
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	4a55      	ldr	r2, [pc, #340]	; (80033a4 <HAL_RCC_OscConfig+0x4e8>)
 8003250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003254:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 809b 	beq.w	8003396 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003260:	4b50      	ldr	r3, [pc, #320]	; (80033a4 <HAL_RCC_OscConfig+0x4e8>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f003 030c 	and.w	r3, r3, #12
 8003268:	2b08      	cmp	r3, #8
 800326a:	d05c      	beq.n	8003326 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	2b02      	cmp	r3, #2
 8003272:	d141      	bne.n	80032f8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003274:	4b4c      	ldr	r3, [pc, #304]	; (80033a8 <HAL_RCC_OscConfig+0x4ec>)
 8003276:	2200      	movs	r2, #0
 8003278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327a:	f7fe f96f 	bl	800155c <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003280:	e008      	b.n	8003294 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003282:	f7fe f96b 	bl	800155c <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e081      	b.n	8003398 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003294:	4b43      	ldr	r3, [pc, #268]	; (80033a4 <HAL_RCC_OscConfig+0x4e8>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1f0      	bne.n	8003282 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	69da      	ldr	r2, [r3, #28]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	431a      	orrs	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ae:	019b      	lsls	r3, r3, #6
 80032b0:	431a      	orrs	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b6:	085b      	lsrs	r3, r3, #1
 80032b8:	3b01      	subs	r3, #1
 80032ba:	041b      	lsls	r3, r3, #16
 80032bc:	431a      	orrs	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c2:	061b      	lsls	r3, r3, #24
 80032c4:	4937      	ldr	r1, [pc, #220]	; (80033a4 <HAL_RCC_OscConfig+0x4e8>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032ca:	4b37      	ldr	r3, [pc, #220]	; (80033a8 <HAL_RCC_OscConfig+0x4ec>)
 80032cc:	2201      	movs	r2, #1
 80032ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d0:	f7fe f944 	bl	800155c <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032d8:	f7fe f940 	bl	800155c <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e056      	b.n	8003398 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ea:	4b2e      	ldr	r3, [pc, #184]	; (80033a4 <HAL_RCC_OscConfig+0x4e8>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0f0      	beq.n	80032d8 <HAL_RCC_OscConfig+0x41c>
 80032f6:	e04e      	b.n	8003396 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f8:	4b2b      	ldr	r3, [pc, #172]	; (80033a8 <HAL_RCC_OscConfig+0x4ec>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fe:	f7fe f92d 	bl	800155c <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003306:	f7fe f929 	bl	800155c <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e03f      	b.n	8003398 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003318:	4b22      	ldr	r3, [pc, #136]	; (80033a4 <HAL_RCC_OscConfig+0x4e8>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1f0      	bne.n	8003306 <HAL_RCC_OscConfig+0x44a>
 8003324:	e037      	b.n	8003396 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d101      	bne.n	8003332 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e032      	b.n	8003398 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003332:	4b1c      	ldr	r3, [pc, #112]	; (80033a4 <HAL_RCC_OscConfig+0x4e8>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d028      	beq.n	8003392 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800334a:	429a      	cmp	r2, r3
 800334c:	d121      	bne.n	8003392 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003358:	429a      	cmp	r2, r3
 800335a:	d11a      	bne.n	8003392 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003362:	4013      	ands	r3, r2
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003368:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800336a:	4293      	cmp	r3, r2
 800336c:	d111      	bne.n	8003392 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003378:	085b      	lsrs	r3, r3, #1
 800337a:	3b01      	subs	r3, #1
 800337c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800337e:	429a      	cmp	r2, r3
 8003380:	d107      	bne.n	8003392 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800338e:	429a      	cmp	r2, r3
 8003390:	d001      	beq.n	8003396 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e000      	b.n	8003398 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3718      	adds	r7, #24
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	40007000 	.word	0x40007000
 80033a4:	40023800 	.word	0x40023800
 80033a8:	42470060 	.word	0x42470060

080033ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e0cc      	b.n	800355a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033c0:	4b68      	ldr	r3, [pc, #416]	; (8003564 <HAL_RCC_ClockConfig+0x1b8>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d90c      	bls.n	80033e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ce:	4b65      	ldr	r3, [pc, #404]	; (8003564 <HAL_RCC_ClockConfig+0x1b8>)
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	b2d2      	uxtb	r2, r2
 80033d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d6:	4b63      	ldr	r3, [pc, #396]	; (8003564 <HAL_RCC_ClockConfig+0x1b8>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d001      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e0b8      	b.n	800355a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d020      	beq.n	8003436 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d005      	beq.n	800340c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003400:	4b59      	ldr	r3, [pc, #356]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	4a58      	ldr	r2, [pc, #352]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 8003406:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800340a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0308 	and.w	r3, r3, #8
 8003414:	2b00      	cmp	r3, #0
 8003416:	d005      	beq.n	8003424 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003418:	4b53      	ldr	r3, [pc, #332]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	4a52      	ldr	r2, [pc, #328]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 800341e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003422:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003424:	4b50      	ldr	r3, [pc, #320]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	494d      	ldr	r1, [pc, #308]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 8003432:	4313      	orrs	r3, r2
 8003434:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	d044      	beq.n	80034cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d107      	bne.n	800345a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344a:	4b47      	ldr	r3, [pc, #284]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d119      	bne.n	800348a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e07f      	b.n	800355a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	2b02      	cmp	r3, #2
 8003460:	d003      	beq.n	800346a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003466:	2b03      	cmp	r3, #3
 8003468:	d107      	bne.n	800347a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800346a:	4b3f      	ldr	r3, [pc, #252]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d109      	bne.n	800348a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e06f      	b.n	800355a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800347a:	4b3b      	ldr	r3, [pc, #236]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e067      	b.n	800355a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800348a:	4b37      	ldr	r3, [pc, #220]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f023 0203 	bic.w	r2, r3, #3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	4934      	ldr	r1, [pc, #208]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 8003498:	4313      	orrs	r3, r2
 800349a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800349c:	f7fe f85e 	bl	800155c <HAL_GetTick>
 80034a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034a2:	e00a      	b.n	80034ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034a4:	f7fe f85a 	bl	800155c <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e04f      	b.n	800355a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ba:	4b2b      	ldr	r3, [pc, #172]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 020c 	and.w	r2, r3, #12
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d1eb      	bne.n	80034a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034cc:	4b25      	ldr	r3, [pc, #148]	; (8003564 <HAL_RCC_ClockConfig+0x1b8>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d20c      	bcs.n	80034f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034da:	4b22      	ldr	r3, [pc, #136]	; (8003564 <HAL_RCC_ClockConfig+0x1b8>)
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e2:	4b20      	ldr	r3, [pc, #128]	; (8003564 <HAL_RCC_ClockConfig+0x1b8>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d001      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e032      	b.n	800355a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d008      	beq.n	8003512 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003500:	4b19      	ldr	r3, [pc, #100]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	4916      	ldr	r1, [pc, #88]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 800350e:	4313      	orrs	r3, r2
 8003510:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0308 	and.w	r3, r3, #8
 800351a:	2b00      	cmp	r3, #0
 800351c:	d009      	beq.n	8003532 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800351e:	4b12      	ldr	r3, [pc, #72]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	490e      	ldr	r1, [pc, #56]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 800352e:	4313      	orrs	r3, r2
 8003530:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003532:	f000 f821 	bl	8003578 <HAL_RCC_GetSysClockFreq>
 8003536:	4602      	mov	r2, r0
 8003538:	4b0b      	ldr	r3, [pc, #44]	; (8003568 <HAL_RCC_ClockConfig+0x1bc>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	091b      	lsrs	r3, r3, #4
 800353e:	f003 030f 	and.w	r3, r3, #15
 8003542:	490a      	ldr	r1, [pc, #40]	; (800356c <HAL_RCC_ClockConfig+0x1c0>)
 8003544:	5ccb      	ldrb	r3, [r1, r3]
 8003546:	fa22 f303 	lsr.w	r3, r2, r3
 800354a:	4a09      	ldr	r2, [pc, #36]	; (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 800354c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800354e:	4b09      	ldr	r3, [pc, #36]	; (8003574 <HAL_RCC_ClockConfig+0x1c8>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4618      	mov	r0, r3
 8003554:	f7fd ffbe 	bl	80014d4 <HAL_InitTick>

  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	40023c00 	.word	0x40023c00
 8003568:	40023800 	.word	0x40023800
 800356c:	0801400c 	.word	0x0801400c
 8003570:	20000000 	.word	0x20000000
 8003574:	20000004 	.word	0x20000004

08003578 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003578:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800357c:	b084      	sub	sp, #16
 800357e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003580:	2300      	movs	r3, #0
 8003582:	607b      	str	r3, [r7, #4]
 8003584:	2300      	movs	r3, #0
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	2300      	movs	r3, #0
 800358a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800358c:	2300      	movs	r3, #0
 800358e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003590:	4b67      	ldr	r3, [pc, #412]	; (8003730 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 030c 	and.w	r3, r3, #12
 8003598:	2b08      	cmp	r3, #8
 800359a:	d00d      	beq.n	80035b8 <HAL_RCC_GetSysClockFreq+0x40>
 800359c:	2b08      	cmp	r3, #8
 800359e:	f200 80bd 	bhi.w	800371c <HAL_RCC_GetSysClockFreq+0x1a4>
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d002      	beq.n	80035ac <HAL_RCC_GetSysClockFreq+0x34>
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d003      	beq.n	80035b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80035aa:	e0b7      	b.n	800371c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035ac:	4b61      	ldr	r3, [pc, #388]	; (8003734 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80035ae:	60bb      	str	r3, [r7, #8]
       break;
 80035b0:	e0b7      	b.n	8003722 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035b2:	4b61      	ldr	r3, [pc, #388]	; (8003738 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80035b4:	60bb      	str	r3, [r7, #8]
      break;
 80035b6:	e0b4      	b.n	8003722 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035b8:	4b5d      	ldr	r3, [pc, #372]	; (8003730 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035c2:	4b5b      	ldr	r3, [pc, #364]	; (8003730 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d04d      	beq.n	800366a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ce:	4b58      	ldr	r3, [pc, #352]	; (8003730 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	099b      	lsrs	r3, r3, #6
 80035d4:	461a      	mov	r2, r3
 80035d6:	f04f 0300 	mov.w	r3, #0
 80035da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80035de:	f04f 0100 	mov.w	r1, #0
 80035e2:	ea02 0800 	and.w	r8, r2, r0
 80035e6:	ea03 0901 	and.w	r9, r3, r1
 80035ea:	4640      	mov	r0, r8
 80035ec:	4649      	mov	r1, r9
 80035ee:	f04f 0200 	mov.w	r2, #0
 80035f2:	f04f 0300 	mov.w	r3, #0
 80035f6:	014b      	lsls	r3, r1, #5
 80035f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80035fc:	0142      	lsls	r2, r0, #5
 80035fe:	4610      	mov	r0, r2
 8003600:	4619      	mov	r1, r3
 8003602:	ebb0 0008 	subs.w	r0, r0, r8
 8003606:	eb61 0109 	sbc.w	r1, r1, r9
 800360a:	f04f 0200 	mov.w	r2, #0
 800360e:	f04f 0300 	mov.w	r3, #0
 8003612:	018b      	lsls	r3, r1, #6
 8003614:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003618:	0182      	lsls	r2, r0, #6
 800361a:	1a12      	subs	r2, r2, r0
 800361c:	eb63 0301 	sbc.w	r3, r3, r1
 8003620:	f04f 0000 	mov.w	r0, #0
 8003624:	f04f 0100 	mov.w	r1, #0
 8003628:	00d9      	lsls	r1, r3, #3
 800362a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800362e:	00d0      	lsls	r0, r2, #3
 8003630:	4602      	mov	r2, r0
 8003632:	460b      	mov	r3, r1
 8003634:	eb12 0208 	adds.w	r2, r2, r8
 8003638:	eb43 0309 	adc.w	r3, r3, r9
 800363c:	f04f 0000 	mov.w	r0, #0
 8003640:	f04f 0100 	mov.w	r1, #0
 8003644:	0259      	lsls	r1, r3, #9
 8003646:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800364a:	0250      	lsls	r0, r2, #9
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	4610      	mov	r0, r2
 8003652:	4619      	mov	r1, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	461a      	mov	r2, r3
 8003658:	f04f 0300 	mov.w	r3, #0
 800365c:	f7fc fe10 	bl	8000280 <__aeabi_uldivmod>
 8003660:	4602      	mov	r2, r0
 8003662:	460b      	mov	r3, r1
 8003664:	4613      	mov	r3, r2
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	e04a      	b.n	8003700 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800366a:	4b31      	ldr	r3, [pc, #196]	; (8003730 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	099b      	lsrs	r3, r3, #6
 8003670:	461a      	mov	r2, r3
 8003672:	f04f 0300 	mov.w	r3, #0
 8003676:	f240 10ff 	movw	r0, #511	; 0x1ff
 800367a:	f04f 0100 	mov.w	r1, #0
 800367e:	ea02 0400 	and.w	r4, r2, r0
 8003682:	ea03 0501 	and.w	r5, r3, r1
 8003686:	4620      	mov	r0, r4
 8003688:	4629      	mov	r1, r5
 800368a:	f04f 0200 	mov.w	r2, #0
 800368e:	f04f 0300 	mov.w	r3, #0
 8003692:	014b      	lsls	r3, r1, #5
 8003694:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003698:	0142      	lsls	r2, r0, #5
 800369a:	4610      	mov	r0, r2
 800369c:	4619      	mov	r1, r3
 800369e:	1b00      	subs	r0, r0, r4
 80036a0:	eb61 0105 	sbc.w	r1, r1, r5
 80036a4:	f04f 0200 	mov.w	r2, #0
 80036a8:	f04f 0300 	mov.w	r3, #0
 80036ac:	018b      	lsls	r3, r1, #6
 80036ae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80036b2:	0182      	lsls	r2, r0, #6
 80036b4:	1a12      	subs	r2, r2, r0
 80036b6:	eb63 0301 	sbc.w	r3, r3, r1
 80036ba:	f04f 0000 	mov.w	r0, #0
 80036be:	f04f 0100 	mov.w	r1, #0
 80036c2:	00d9      	lsls	r1, r3, #3
 80036c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036c8:	00d0      	lsls	r0, r2, #3
 80036ca:	4602      	mov	r2, r0
 80036cc:	460b      	mov	r3, r1
 80036ce:	1912      	adds	r2, r2, r4
 80036d0:	eb45 0303 	adc.w	r3, r5, r3
 80036d4:	f04f 0000 	mov.w	r0, #0
 80036d8:	f04f 0100 	mov.w	r1, #0
 80036dc:	0299      	lsls	r1, r3, #10
 80036de:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80036e2:	0290      	lsls	r0, r2, #10
 80036e4:	4602      	mov	r2, r0
 80036e6:	460b      	mov	r3, r1
 80036e8:	4610      	mov	r0, r2
 80036ea:	4619      	mov	r1, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	461a      	mov	r2, r3
 80036f0:	f04f 0300 	mov.w	r3, #0
 80036f4:	f7fc fdc4 	bl	8000280 <__aeabi_uldivmod>
 80036f8:	4602      	mov	r2, r0
 80036fa:	460b      	mov	r3, r1
 80036fc:	4613      	mov	r3, r2
 80036fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003700:	4b0b      	ldr	r3, [pc, #44]	; (8003730 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	0c1b      	lsrs	r3, r3, #16
 8003706:	f003 0303 	and.w	r3, r3, #3
 800370a:	3301      	adds	r3, #1
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	fbb2 f3f3 	udiv	r3, r2, r3
 8003718:	60bb      	str	r3, [r7, #8]
      break;
 800371a:	e002      	b.n	8003722 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800371c:	4b05      	ldr	r3, [pc, #20]	; (8003734 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800371e:	60bb      	str	r3, [r7, #8]
      break;
 8003720:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003722:	68bb      	ldr	r3, [r7, #8]
}
 8003724:	4618      	mov	r0, r3
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800372e:	bf00      	nop
 8003730:	40023800 	.word	0x40023800
 8003734:	00f42400 	.word	0x00f42400
 8003738:	007a1200 	.word	0x007a1200

0800373c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003740:	4b03      	ldr	r3, [pc, #12]	; (8003750 <HAL_RCC_GetHCLKFreq+0x14>)
 8003742:	681b      	ldr	r3, [r3, #0]
}
 8003744:	4618      	mov	r0, r3
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	20000000 	.word	0x20000000

08003754 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003758:	f7ff fff0 	bl	800373c <HAL_RCC_GetHCLKFreq>
 800375c:	4602      	mov	r2, r0
 800375e:	4b05      	ldr	r3, [pc, #20]	; (8003774 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	0a9b      	lsrs	r3, r3, #10
 8003764:	f003 0307 	and.w	r3, r3, #7
 8003768:	4903      	ldr	r1, [pc, #12]	; (8003778 <HAL_RCC_GetPCLK1Freq+0x24>)
 800376a:	5ccb      	ldrb	r3, [r1, r3]
 800376c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003770:	4618      	mov	r0, r3
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40023800 	.word	0x40023800
 8003778:	0801401c 	.word	0x0801401c

0800377c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003780:	f7ff ffdc 	bl	800373c <HAL_RCC_GetHCLKFreq>
 8003784:	4602      	mov	r2, r0
 8003786:	4b05      	ldr	r3, [pc, #20]	; (800379c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	0b5b      	lsrs	r3, r3, #13
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	4903      	ldr	r1, [pc, #12]	; (80037a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003792:	5ccb      	ldrb	r3, [r1, r3]
 8003794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003798:	4618      	mov	r0, r3
 800379a:	bd80      	pop	{r7, pc}
 800379c:	40023800 	.word	0x40023800
 80037a0:	0801401c 	.word	0x0801401c

080037a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e041      	b.n	800383a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d106      	bne.n	80037d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7fd fca6 	bl	800111c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2202      	movs	r2, #2
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3304      	adds	r3, #4
 80037e0:	4619      	mov	r1, r3
 80037e2:	4610      	mov	r0, r2
 80037e4:	f000 faa0 	bl	8003d28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
	...

08003844 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b01      	cmp	r3, #1
 8003856:	d001      	beq.n	800385c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e04e      	b.n	80038fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2202      	movs	r2, #2
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68da      	ldr	r2, [r3, #12]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f042 0201 	orr.w	r2, r2, #1
 8003872:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a23      	ldr	r2, [pc, #140]	; (8003908 <HAL_TIM_Base_Start_IT+0xc4>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d022      	beq.n	80038c4 <HAL_TIM_Base_Start_IT+0x80>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003886:	d01d      	beq.n	80038c4 <HAL_TIM_Base_Start_IT+0x80>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a1f      	ldr	r2, [pc, #124]	; (800390c <HAL_TIM_Base_Start_IT+0xc8>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d018      	beq.n	80038c4 <HAL_TIM_Base_Start_IT+0x80>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a1e      	ldr	r2, [pc, #120]	; (8003910 <HAL_TIM_Base_Start_IT+0xcc>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d013      	beq.n	80038c4 <HAL_TIM_Base_Start_IT+0x80>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a1c      	ldr	r2, [pc, #112]	; (8003914 <HAL_TIM_Base_Start_IT+0xd0>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d00e      	beq.n	80038c4 <HAL_TIM_Base_Start_IT+0x80>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a1b      	ldr	r2, [pc, #108]	; (8003918 <HAL_TIM_Base_Start_IT+0xd4>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d009      	beq.n	80038c4 <HAL_TIM_Base_Start_IT+0x80>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a19      	ldr	r2, [pc, #100]	; (800391c <HAL_TIM_Base_Start_IT+0xd8>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d004      	beq.n	80038c4 <HAL_TIM_Base_Start_IT+0x80>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a18      	ldr	r2, [pc, #96]	; (8003920 <HAL_TIM_Base_Start_IT+0xdc>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d111      	bne.n	80038e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2b06      	cmp	r3, #6
 80038d4:	d010      	beq.n	80038f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f042 0201 	orr.w	r2, r2, #1
 80038e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038e6:	e007      	b.n	80038f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 0201 	orr.w	r2, r2, #1
 80038f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	40010000 	.word	0x40010000
 800390c:	40000400 	.word	0x40000400
 8003910:	40000800 	.word	0x40000800
 8003914:	40000c00 	.word	0x40000c00
 8003918:	40010400 	.word	0x40010400
 800391c:	40014000 	.word	0x40014000
 8003920:	40001800 	.word	0x40001800

08003924 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b02      	cmp	r3, #2
 8003938:	d122      	bne.n	8003980 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b02      	cmp	r3, #2
 8003946:	d11b      	bne.n	8003980 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f06f 0202 	mvn.w	r2, #2
 8003950:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f9bf 	bl	8003cea <HAL_TIM_IC_CaptureCallback>
 800396c:	e005      	b.n	800397a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f9b1 	bl	8003cd6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 f9c2 	bl	8003cfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	f003 0304 	and.w	r3, r3, #4
 800398a:	2b04      	cmp	r3, #4
 800398c:	d122      	bne.n	80039d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b04      	cmp	r3, #4
 800399a:	d11b      	bne.n	80039d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f06f 0204 	mvn.w	r2, #4
 80039a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2202      	movs	r2, #2
 80039aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f995 	bl	8003cea <HAL_TIM_IC_CaptureCallback>
 80039c0:	e005      	b.n	80039ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f987 	bl	8003cd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 f998 	bl	8003cfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b08      	cmp	r3, #8
 80039e0:	d122      	bne.n	8003a28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f003 0308 	and.w	r3, r3, #8
 80039ec:	2b08      	cmp	r3, #8
 80039ee:	d11b      	bne.n	8003a28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f06f 0208 	mvn.w	r2, #8
 80039f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2204      	movs	r2, #4
 80039fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	f003 0303 	and.w	r3, r3, #3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f96b 	bl	8003cea <HAL_TIM_IC_CaptureCallback>
 8003a14:	e005      	b.n	8003a22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f95d 	bl	8003cd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 f96e 	bl	8003cfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	f003 0310 	and.w	r3, r3, #16
 8003a32:	2b10      	cmp	r3, #16
 8003a34:	d122      	bne.n	8003a7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f003 0310 	and.w	r3, r3, #16
 8003a40:	2b10      	cmp	r3, #16
 8003a42:	d11b      	bne.n	8003a7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f06f 0210 	mvn.w	r2, #16
 8003a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2208      	movs	r2, #8
 8003a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f941 	bl	8003cea <HAL_TIM_IC_CaptureCallback>
 8003a68:	e005      	b.n	8003a76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f933 	bl	8003cd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 f944 	bl	8003cfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d10e      	bne.n	8003aa8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d107      	bne.n	8003aa8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f06f 0201 	mvn.w	r2, #1
 8003aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f90d 	bl	8003cc2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab2:	2b80      	cmp	r3, #128	; 0x80
 8003ab4:	d10e      	bne.n	8003ad4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac0:	2b80      	cmp	r3, #128	; 0x80
 8003ac2:	d107      	bne.n	8003ad4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 faea 	bl	80040a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ade:	2b40      	cmp	r3, #64	; 0x40
 8003ae0:	d10e      	bne.n	8003b00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aec:	2b40      	cmp	r3, #64	; 0x40
 8003aee:	d107      	bne.n	8003b00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f909 	bl	8003d12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	f003 0320 	and.w	r3, r3, #32
 8003b0a:	2b20      	cmp	r3, #32
 8003b0c:	d10e      	bne.n	8003b2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	f003 0320 	and.w	r3, r3, #32
 8003b18:	2b20      	cmp	r3, #32
 8003b1a:	d107      	bne.n	8003b2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f06f 0220 	mvn.w	r2, #32
 8003b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 fab4 	bl	8004094 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b2c:	bf00      	nop
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d101      	bne.n	8003b50 <HAL_TIM_ConfigClockSource+0x1c>
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	e0b4      	b.n	8003cba <HAL_TIM_ConfigClockSource+0x186>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b88:	d03e      	beq.n	8003c08 <HAL_TIM_ConfigClockSource+0xd4>
 8003b8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b8e:	f200 8087 	bhi.w	8003ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8003b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b96:	f000 8086 	beq.w	8003ca6 <HAL_TIM_ConfigClockSource+0x172>
 8003b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b9e:	d87f      	bhi.n	8003ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ba0:	2b70      	cmp	r3, #112	; 0x70
 8003ba2:	d01a      	beq.n	8003bda <HAL_TIM_ConfigClockSource+0xa6>
 8003ba4:	2b70      	cmp	r3, #112	; 0x70
 8003ba6:	d87b      	bhi.n	8003ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ba8:	2b60      	cmp	r3, #96	; 0x60
 8003baa:	d050      	beq.n	8003c4e <HAL_TIM_ConfigClockSource+0x11a>
 8003bac:	2b60      	cmp	r3, #96	; 0x60
 8003bae:	d877      	bhi.n	8003ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bb0:	2b50      	cmp	r3, #80	; 0x50
 8003bb2:	d03c      	beq.n	8003c2e <HAL_TIM_ConfigClockSource+0xfa>
 8003bb4:	2b50      	cmp	r3, #80	; 0x50
 8003bb6:	d873      	bhi.n	8003ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bb8:	2b40      	cmp	r3, #64	; 0x40
 8003bba:	d058      	beq.n	8003c6e <HAL_TIM_ConfigClockSource+0x13a>
 8003bbc:	2b40      	cmp	r3, #64	; 0x40
 8003bbe:	d86f      	bhi.n	8003ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc0:	2b30      	cmp	r3, #48	; 0x30
 8003bc2:	d064      	beq.n	8003c8e <HAL_TIM_ConfigClockSource+0x15a>
 8003bc4:	2b30      	cmp	r3, #48	; 0x30
 8003bc6:	d86b      	bhi.n	8003ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc8:	2b20      	cmp	r3, #32
 8003bca:	d060      	beq.n	8003c8e <HAL_TIM_ConfigClockSource+0x15a>
 8003bcc:	2b20      	cmp	r3, #32
 8003bce:	d867      	bhi.n	8003ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d05c      	beq.n	8003c8e <HAL_TIM_ConfigClockSource+0x15a>
 8003bd4:	2b10      	cmp	r3, #16
 8003bd6:	d05a      	beq.n	8003c8e <HAL_TIM_ConfigClockSource+0x15a>
 8003bd8:	e062      	b.n	8003ca0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6818      	ldr	r0, [r3, #0]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	6899      	ldr	r1, [r3, #8]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	f000 f9b7 	bl	8003f5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003bfc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	609a      	str	r2, [r3, #8]
      break;
 8003c06:	e04f      	b.n	8003ca8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6818      	ldr	r0, [r3, #0]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	6899      	ldr	r1, [r3, #8]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685a      	ldr	r2, [r3, #4]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f000 f9a0 	bl	8003f5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689a      	ldr	r2, [r3, #8]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c2a:	609a      	str	r2, [r3, #8]
      break;
 8003c2c:	e03c      	b.n	8003ca8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6818      	ldr	r0, [r3, #0]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	6859      	ldr	r1, [r3, #4]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	f000 f914 	bl	8003e68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2150      	movs	r1, #80	; 0x50
 8003c46:	4618      	mov	r0, r3
 8003c48:	f000 f96d 	bl	8003f26 <TIM_ITRx_SetConfig>
      break;
 8003c4c:	e02c      	b.n	8003ca8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6818      	ldr	r0, [r3, #0]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	6859      	ldr	r1, [r3, #4]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	f000 f933 	bl	8003ec6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2160      	movs	r1, #96	; 0x60
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 f95d 	bl	8003f26 <TIM_ITRx_SetConfig>
      break;
 8003c6c:	e01c      	b.n	8003ca8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6818      	ldr	r0, [r3, #0]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	6859      	ldr	r1, [r3, #4]
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	f000 f8f4 	bl	8003e68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2140      	movs	r1, #64	; 0x40
 8003c86:	4618      	mov	r0, r3
 8003c88:	f000 f94d 	bl	8003f26 <TIM_ITRx_SetConfig>
      break;
 8003c8c:	e00c      	b.n	8003ca8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4619      	mov	r1, r3
 8003c98:	4610      	mov	r0, r2
 8003c9a:	f000 f944 	bl	8003f26 <TIM_ITRx_SetConfig>
      break;
 8003c9e:	e003      	b.n	8003ca8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ca4:	e000      	b.n	8003ca8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ca6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b083      	sub	sp, #12
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003cca:	bf00      	nop
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b083      	sub	sp, #12
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
	...

08003d28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a40      	ldr	r2, [pc, #256]	; (8003e3c <TIM_Base_SetConfig+0x114>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d013      	beq.n	8003d68 <TIM_Base_SetConfig+0x40>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d46:	d00f      	beq.n	8003d68 <TIM_Base_SetConfig+0x40>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a3d      	ldr	r2, [pc, #244]	; (8003e40 <TIM_Base_SetConfig+0x118>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d00b      	beq.n	8003d68 <TIM_Base_SetConfig+0x40>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a3c      	ldr	r2, [pc, #240]	; (8003e44 <TIM_Base_SetConfig+0x11c>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d007      	beq.n	8003d68 <TIM_Base_SetConfig+0x40>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a3b      	ldr	r2, [pc, #236]	; (8003e48 <TIM_Base_SetConfig+0x120>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d003      	beq.n	8003d68 <TIM_Base_SetConfig+0x40>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a3a      	ldr	r2, [pc, #232]	; (8003e4c <TIM_Base_SetConfig+0x124>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d108      	bne.n	8003d7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a2f      	ldr	r2, [pc, #188]	; (8003e3c <TIM_Base_SetConfig+0x114>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d02b      	beq.n	8003dda <TIM_Base_SetConfig+0xb2>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d88:	d027      	beq.n	8003dda <TIM_Base_SetConfig+0xb2>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a2c      	ldr	r2, [pc, #176]	; (8003e40 <TIM_Base_SetConfig+0x118>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d023      	beq.n	8003dda <TIM_Base_SetConfig+0xb2>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a2b      	ldr	r2, [pc, #172]	; (8003e44 <TIM_Base_SetConfig+0x11c>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d01f      	beq.n	8003dda <TIM_Base_SetConfig+0xb2>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a2a      	ldr	r2, [pc, #168]	; (8003e48 <TIM_Base_SetConfig+0x120>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d01b      	beq.n	8003dda <TIM_Base_SetConfig+0xb2>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a29      	ldr	r2, [pc, #164]	; (8003e4c <TIM_Base_SetConfig+0x124>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d017      	beq.n	8003dda <TIM_Base_SetConfig+0xb2>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a28      	ldr	r2, [pc, #160]	; (8003e50 <TIM_Base_SetConfig+0x128>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d013      	beq.n	8003dda <TIM_Base_SetConfig+0xb2>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a27      	ldr	r2, [pc, #156]	; (8003e54 <TIM_Base_SetConfig+0x12c>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d00f      	beq.n	8003dda <TIM_Base_SetConfig+0xb2>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a26      	ldr	r2, [pc, #152]	; (8003e58 <TIM_Base_SetConfig+0x130>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d00b      	beq.n	8003dda <TIM_Base_SetConfig+0xb2>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a25      	ldr	r2, [pc, #148]	; (8003e5c <TIM_Base_SetConfig+0x134>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d007      	beq.n	8003dda <TIM_Base_SetConfig+0xb2>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a24      	ldr	r2, [pc, #144]	; (8003e60 <TIM_Base_SetConfig+0x138>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d003      	beq.n	8003dda <TIM_Base_SetConfig+0xb2>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a23      	ldr	r2, [pc, #140]	; (8003e64 <TIM_Base_SetConfig+0x13c>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d108      	bne.n	8003dec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003de0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a0a      	ldr	r2, [pc, #40]	; (8003e3c <TIM_Base_SetConfig+0x114>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d003      	beq.n	8003e20 <TIM_Base_SetConfig+0xf8>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a0c      	ldr	r2, [pc, #48]	; (8003e4c <TIM_Base_SetConfig+0x124>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d103      	bne.n	8003e28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	691a      	ldr	r2, [r3, #16]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	615a      	str	r2, [r3, #20]
}
 8003e2e:	bf00      	nop
 8003e30:	3714      	adds	r7, #20
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	40010000 	.word	0x40010000
 8003e40:	40000400 	.word	0x40000400
 8003e44:	40000800 	.word	0x40000800
 8003e48:	40000c00 	.word	0x40000c00
 8003e4c:	40010400 	.word	0x40010400
 8003e50:	40014000 	.word	0x40014000
 8003e54:	40014400 	.word	0x40014400
 8003e58:	40014800 	.word	0x40014800
 8003e5c:	40001800 	.word	0x40001800
 8003e60:	40001c00 	.word	0x40001c00
 8003e64:	40002000 	.word	0x40002000

08003e68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b087      	sub	sp, #28
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	f023 0201 	bic.w	r2, r3, #1
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	011b      	lsls	r3, r3, #4
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	f023 030a 	bic.w	r3, r3, #10
 8003ea4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	621a      	str	r2, [r3, #32]
}
 8003eba:	bf00      	nop
 8003ebc:	371c      	adds	r7, #28
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b087      	sub	sp, #28
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	60f8      	str	r0, [r7, #12]
 8003ece:	60b9      	str	r1, [r7, #8]
 8003ed0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	f023 0210 	bic.w	r2, r3, #16
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ef0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	031b      	lsls	r3, r3, #12
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	011b      	lsls	r3, r3, #4
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	621a      	str	r2, [r3, #32]
}
 8003f1a:	bf00      	nop
 8003f1c:	371c      	adds	r7, #28
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f26:	b480      	push	{r7}
 8003f28:	b085      	sub	sp, #20
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
 8003f2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f3e:	683a      	ldr	r2, [r7, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	f043 0307 	orr.w	r3, r3, #7
 8003f48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	609a      	str	r2, [r3, #8]
}
 8003f50:	bf00      	nop
 8003f52:	3714      	adds	r7, #20
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b087      	sub	sp, #28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
 8003f68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	021a      	lsls	r2, r3, #8
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	609a      	str	r2, [r3, #8]
}
 8003f90:	bf00      	nop
 8003f92:	371c      	adds	r7, #28
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d101      	bne.n	8003fb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	e05a      	b.n	800406a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a21      	ldr	r2, [pc, #132]	; (8004078 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d022      	beq.n	800403e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004000:	d01d      	beq.n	800403e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a1d      	ldr	r2, [pc, #116]	; (800407c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d018      	beq.n	800403e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a1b      	ldr	r2, [pc, #108]	; (8004080 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d013      	beq.n	800403e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a1a      	ldr	r2, [pc, #104]	; (8004084 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d00e      	beq.n	800403e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a18      	ldr	r2, [pc, #96]	; (8004088 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d009      	beq.n	800403e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a17      	ldr	r2, [pc, #92]	; (800408c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d004      	beq.n	800403e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a15      	ldr	r2, [pc, #84]	; (8004090 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d10c      	bne.n	8004058 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004044:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	4313      	orrs	r3, r2
 800404e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3714      	adds	r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	40010000 	.word	0x40010000
 800407c:	40000400 	.word	0x40000400
 8004080:	40000800 	.word	0x40000800
 8004084:	40000c00 	.word	0x40000c00
 8004088:	40010400 	.word	0x40010400
 800408c:	40014000 	.word	0x40014000
 8004090:	40001800 	.word	0x40001800

08004094 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e03f      	b.n	800414e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d106      	bne.n	80040e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7fd f840 	bl	8001168 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2224      	movs	r2, #36	; 0x24
 80040ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68da      	ldr	r2, [r3, #12]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 fddb 	bl	8004cbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	691a      	ldr	r2, [r3, #16]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004114:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	695a      	ldr	r2, [r3, #20]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004124:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004134:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2220      	movs	r2, #32
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2220      	movs	r2, #32
 8004148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b08a      	sub	sp, #40	; 0x28
 800415a:	af02      	add	r7, sp, #8
 800415c:	60f8      	str	r0, [r7, #12]
 800415e:	60b9      	str	r1, [r7, #8]
 8004160:	603b      	str	r3, [r7, #0]
 8004162:	4613      	mov	r3, r2
 8004164:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004166:	2300      	movs	r3, #0
 8004168:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b20      	cmp	r3, #32
 8004174:	d17c      	bne.n	8004270 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d002      	beq.n	8004182 <HAL_UART_Transmit+0x2c>
 800417c:	88fb      	ldrh	r3, [r7, #6]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e075      	b.n	8004272 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800418c:	2b01      	cmp	r3, #1
 800418e:	d101      	bne.n	8004194 <HAL_UART_Transmit+0x3e>
 8004190:	2302      	movs	r3, #2
 8004192:	e06e      	b.n	8004272 <HAL_UART_Transmit+0x11c>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2221      	movs	r2, #33	; 0x21
 80041a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041aa:	f7fd f9d7 	bl	800155c <HAL_GetTick>
 80041ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	88fa      	ldrh	r2, [r7, #6]
 80041b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	88fa      	ldrh	r2, [r7, #6]
 80041ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041c4:	d108      	bne.n	80041d8 <HAL_UART_Transmit+0x82>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d104      	bne.n	80041d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80041ce:	2300      	movs	r3, #0
 80041d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	61bb      	str	r3, [r7, #24]
 80041d6:	e003      	b.n	80041e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041dc:	2300      	movs	r3, #0
 80041de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80041e8:	e02a      	b.n	8004240 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	2200      	movs	r2, #0
 80041f2:	2180      	movs	r1, #128	; 0x80
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 fb1f 	bl	8004838 <UART_WaitOnFlagUntilTimeout>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d001      	beq.n	8004204 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e036      	b.n	8004272 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10b      	bne.n	8004222 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	461a      	mov	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004218:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	3302      	adds	r3, #2
 800421e:	61bb      	str	r3, [r7, #24]
 8004220:	e007      	b.n	8004232 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	781a      	ldrb	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	3301      	adds	r3, #1
 8004230:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004236:	b29b      	uxth	r3, r3
 8004238:	3b01      	subs	r3, #1
 800423a:	b29a      	uxth	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004244:	b29b      	uxth	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1cf      	bne.n	80041ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	9300      	str	r3, [sp, #0]
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	2200      	movs	r2, #0
 8004252:	2140      	movs	r1, #64	; 0x40
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f000 faef 	bl	8004838 <UART_WaitOnFlagUntilTimeout>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e006      	b.n	8004272 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2220      	movs	r2, #32
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800426c:	2300      	movs	r3, #0
 800426e:	e000      	b.n	8004272 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004270:	2302      	movs	r3, #2
  }
}
 8004272:	4618      	mov	r0, r3
 8004274:	3720      	adds	r7, #32
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b084      	sub	sp, #16
 800427e:	af00      	add	r7, sp, #0
 8004280:	60f8      	str	r0, [r7, #12]
 8004282:	60b9      	str	r1, [r7, #8]
 8004284:	4613      	mov	r3, r2
 8004286:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b20      	cmp	r3, #32
 8004292:	d11d      	bne.n	80042d0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d002      	beq.n	80042a0 <HAL_UART_Receive_IT+0x26>
 800429a:	88fb      	ldrh	r3, [r7, #6]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e016      	b.n	80042d2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d101      	bne.n	80042b2 <HAL_UART_Receive_IT+0x38>
 80042ae:	2302      	movs	r3, #2
 80042b0:	e00f      	b.n	80042d2 <HAL_UART_Receive_IT+0x58>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80042c0:	88fb      	ldrh	r3, [r7, #6]
 80042c2:	461a      	mov	r2, r3
 80042c4:	68b9      	ldr	r1, [r7, #8]
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f000 fb24 	bl	8004914 <UART_Start_Receive_IT>
 80042cc:	4603      	mov	r3, r0
 80042ce:	e000      	b.n	80042d2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80042d0:	2302      	movs	r3, #2
  }
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
	...

080042dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b0ba      	sub	sp, #232	; 0xe8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004302:	2300      	movs	r3, #0
 8004304:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004308:	2300      	movs	r3, #0
 800430a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800430e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004312:	f003 030f 	and.w	r3, r3, #15
 8004316:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800431a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10f      	bne.n	8004342 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004326:	f003 0320 	and.w	r3, r3, #32
 800432a:	2b00      	cmp	r3, #0
 800432c:	d009      	beq.n	8004342 <HAL_UART_IRQHandler+0x66>
 800432e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004332:	f003 0320 	and.w	r3, r3, #32
 8004336:	2b00      	cmp	r3, #0
 8004338:	d003      	beq.n	8004342 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 fc03 	bl	8004b46 <UART_Receive_IT>
      return;
 8004340:	e256      	b.n	80047f0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004342:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004346:	2b00      	cmp	r3, #0
 8004348:	f000 80de 	beq.w	8004508 <HAL_UART_IRQHandler+0x22c>
 800434c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	2b00      	cmp	r3, #0
 8004356:	d106      	bne.n	8004366 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800435c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 80d1 	beq.w	8004508 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00b      	beq.n	800438a <HAL_UART_IRQHandler+0xae>
 8004372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437a:	2b00      	cmp	r3, #0
 800437c:	d005      	beq.n	800438a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	f043 0201 	orr.w	r2, r3, #1
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800438a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800438e:	f003 0304 	and.w	r3, r3, #4
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00b      	beq.n	80043ae <HAL_UART_IRQHandler+0xd2>
 8004396:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d005      	beq.n	80043ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	f043 0202 	orr.w	r2, r3, #2
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00b      	beq.n	80043d2 <HAL_UART_IRQHandler+0xf6>
 80043ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d005      	beq.n	80043d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	f043 0204 	orr.w	r2, r3, #4
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80043d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043d6:	f003 0308 	and.w	r3, r3, #8
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d011      	beq.n	8004402 <HAL_UART_IRQHandler+0x126>
 80043de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043e2:	f003 0320 	and.w	r3, r3, #32
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d105      	bne.n	80043f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80043ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d005      	beq.n	8004402 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fa:	f043 0208 	orr.w	r2, r3, #8
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004406:	2b00      	cmp	r3, #0
 8004408:	f000 81ed 	beq.w	80047e6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800440c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004410:	f003 0320 	and.w	r3, r3, #32
 8004414:	2b00      	cmp	r3, #0
 8004416:	d008      	beq.n	800442a <HAL_UART_IRQHandler+0x14e>
 8004418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800441c:	f003 0320 	and.w	r3, r3, #32
 8004420:	2b00      	cmp	r3, #0
 8004422:	d002      	beq.n	800442a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 fb8e 	bl	8004b46 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004434:	2b40      	cmp	r3, #64	; 0x40
 8004436:	bf0c      	ite	eq
 8004438:	2301      	moveq	r3, #1
 800443a:	2300      	movne	r3, #0
 800443c:	b2db      	uxtb	r3, r3
 800443e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004446:	f003 0308 	and.w	r3, r3, #8
 800444a:	2b00      	cmp	r3, #0
 800444c:	d103      	bne.n	8004456 <HAL_UART_IRQHandler+0x17a>
 800444e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004452:	2b00      	cmp	r3, #0
 8004454:	d04f      	beq.n	80044f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 fa96 	bl	8004988 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004466:	2b40      	cmp	r3, #64	; 0x40
 8004468:	d141      	bne.n	80044ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	3314      	adds	r3, #20
 8004470:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004474:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004478:	e853 3f00 	ldrex	r3, [r3]
 800447c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004480:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004484:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004488:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	3314      	adds	r3, #20
 8004492:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004496:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800449a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80044a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80044a6:	e841 2300 	strex	r3, r2, [r1]
 80044aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80044ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1d9      	bne.n	800446a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d013      	beq.n	80044e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c2:	4a7d      	ldr	r2, [pc, #500]	; (80046b8 <HAL_UART_IRQHandler+0x3dc>)
 80044c4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7fd f9f7 	bl	80018be <HAL_DMA_Abort_IT>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d016      	beq.n	8004504 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044e0:	4610      	mov	r0, r2
 80044e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044e4:	e00e      	b.n	8004504 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f990 	bl	800480c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ec:	e00a      	b.n	8004504 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f98c 	bl	800480c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f4:	e006      	b.n	8004504 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f988 	bl	800480c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004502:	e170      	b.n	80047e6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004504:	bf00      	nop
    return;
 8004506:	e16e      	b.n	80047e6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450c:	2b01      	cmp	r3, #1
 800450e:	f040 814a 	bne.w	80047a6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004516:	f003 0310 	and.w	r3, r3, #16
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 8143 	beq.w	80047a6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004524:	f003 0310 	and.w	r3, r3, #16
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 813c 	beq.w	80047a6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800452e:	2300      	movs	r3, #0
 8004530:	60bb      	str	r3, [r7, #8]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	60bb      	str	r3, [r7, #8]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	60bb      	str	r3, [r7, #8]
 8004542:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800454e:	2b40      	cmp	r3, #64	; 0x40
 8004550:	f040 80b4 	bne.w	80046bc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004560:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 8140 	beq.w	80047ea <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800456e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004572:	429a      	cmp	r2, r3
 8004574:	f080 8139 	bcs.w	80047ea <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800457e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004584:	69db      	ldr	r3, [r3, #28]
 8004586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800458a:	f000 8088 	beq.w	800469e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	330c      	adds	r3, #12
 8004594:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004598:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800459c:	e853 3f00 	ldrex	r3, [r3]
 80045a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80045a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	330c      	adds	r3, #12
 80045b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80045ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80045c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80045ca:	e841 2300 	strex	r3, r2, [r1]
 80045ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80045d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1d9      	bne.n	800458e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	3314      	adds	r3, #20
 80045e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045e4:	e853 3f00 	ldrex	r3, [r3]
 80045e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80045ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045ec:	f023 0301 	bic.w	r3, r3, #1
 80045f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	3314      	adds	r3, #20
 80045fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80045fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004602:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004604:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004606:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800460a:	e841 2300 	strex	r3, r2, [r1]
 800460e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004610:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1e1      	bne.n	80045da <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	3314      	adds	r3, #20
 800461c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004620:	e853 3f00 	ldrex	r3, [r3]
 8004624:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004626:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004628:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800462c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	3314      	adds	r3, #20
 8004636:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800463a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800463c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004640:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004642:	e841 2300 	strex	r3, r2, [r1]
 8004646:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004648:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1e3      	bne.n	8004616 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2220      	movs	r2, #32
 8004652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	330c      	adds	r3, #12
 8004662:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004666:	e853 3f00 	ldrex	r3, [r3]
 800466a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800466c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800466e:	f023 0310 	bic.w	r3, r3, #16
 8004672:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	330c      	adds	r3, #12
 800467c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004680:	65ba      	str	r2, [r7, #88]	; 0x58
 8004682:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004684:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004686:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004688:	e841 2300 	strex	r3, r2, [r1]
 800468c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800468e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1e3      	bne.n	800465c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004698:	4618      	mov	r0, r3
 800469a:	f7fd f8a0 	bl	80017de <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	4619      	mov	r1, r3
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f8b6 	bl	8004820 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046b4:	e099      	b.n	80047ea <HAL_UART_IRQHandler+0x50e>
 80046b6:	bf00      	nop
 80046b8:	08004a4f 	.word	0x08004a4f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 808b 	beq.w	80047ee <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80046d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f000 8086 	beq.w	80047ee <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	330c      	adds	r3, #12
 80046e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ec:	e853 3f00 	ldrex	r3, [r3]
 80046f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	330c      	adds	r3, #12
 8004702:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004706:	647a      	str	r2, [r7, #68]	; 0x44
 8004708:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800470c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800470e:	e841 2300 	strex	r3, r2, [r1]
 8004712:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1e3      	bne.n	80046e2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	3314      	adds	r3, #20
 8004720:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004724:	e853 3f00 	ldrex	r3, [r3]
 8004728:	623b      	str	r3, [r7, #32]
   return(result);
 800472a:	6a3b      	ldr	r3, [r7, #32]
 800472c:	f023 0301 	bic.w	r3, r3, #1
 8004730:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	3314      	adds	r3, #20
 800473a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800473e:	633a      	str	r2, [r7, #48]	; 0x30
 8004740:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004742:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004746:	e841 2300 	strex	r3, r2, [r1]
 800474a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800474c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1e3      	bne.n	800471a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2220      	movs	r2, #32
 8004756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	330c      	adds	r3, #12
 8004766:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	e853 3f00 	ldrex	r3, [r3]
 800476e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f023 0310 	bic.w	r3, r3, #16
 8004776:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	330c      	adds	r3, #12
 8004780:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004784:	61fa      	str	r2, [r7, #28]
 8004786:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004788:	69b9      	ldr	r1, [r7, #24]
 800478a:	69fa      	ldr	r2, [r7, #28]
 800478c:	e841 2300 	strex	r3, r2, [r1]
 8004790:	617b      	str	r3, [r7, #20]
   return(result);
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1e3      	bne.n	8004760 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004798:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800479c:	4619      	mov	r1, r3
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f83e 	bl	8004820 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80047a4:	e023      	b.n	80047ee <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80047a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d009      	beq.n	80047c6 <HAL_UART_IRQHandler+0x4ea>
 80047b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f959 	bl	8004a76 <UART_Transmit_IT>
    return;
 80047c4:	e014      	b.n	80047f0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80047c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00e      	beq.n	80047f0 <HAL_UART_IRQHandler+0x514>
 80047d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d008      	beq.n	80047f0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f999 	bl	8004b16 <UART_EndTransmit_IT>
    return;
 80047e4:	e004      	b.n	80047f0 <HAL_UART_IRQHandler+0x514>
    return;
 80047e6:	bf00      	nop
 80047e8:	e002      	b.n	80047f0 <HAL_UART_IRQHandler+0x514>
      return;
 80047ea:	bf00      	nop
 80047ec:	e000      	b.n	80047f0 <HAL_UART_IRQHandler+0x514>
      return;
 80047ee:	bf00      	nop
  }
}
 80047f0:	37e8      	adds	r7, #232	; 0xe8
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop

080047f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	460b      	mov	r3, r1
 800482a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b090      	sub	sp, #64	; 0x40
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	603b      	str	r3, [r7, #0]
 8004844:	4613      	mov	r3, r2
 8004846:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004848:	e050      	b.n	80048ec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800484a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800484c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004850:	d04c      	beq.n	80048ec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004854:	2b00      	cmp	r3, #0
 8004856:	d007      	beq.n	8004868 <UART_WaitOnFlagUntilTimeout+0x30>
 8004858:	f7fc fe80 	bl	800155c <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004864:	429a      	cmp	r2, r3
 8004866:	d241      	bcs.n	80048ec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	330c      	adds	r3, #12
 800486e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004872:	e853 3f00 	ldrex	r3, [r3]
 8004876:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800487e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	330c      	adds	r3, #12
 8004886:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004888:	637a      	str	r2, [r7, #52]	; 0x34
 800488a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800488e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004890:	e841 2300 	strex	r3, r2, [r1]
 8004894:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1e5      	bne.n	8004868 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	3314      	adds	r3, #20
 80048a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	e853 3f00 	ldrex	r3, [r3]
 80048aa:	613b      	str	r3, [r7, #16]
   return(result);
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	f023 0301 	bic.w	r3, r3, #1
 80048b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	3314      	adds	r3, #20
 80048ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048bc:	623a      	str	r2, [r7, #32]
 80048be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c0:	69f9      	ldr	r1, [r7, #28]
 80048c2:	6a3a      	ldr	r2, [r7, #32]
 80048c4:	e841 2300 	strex	r3, r2, [r1]
 80048c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1e5      	bne.n	800489c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2220      	movs	r2, #32
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2220      	movs	r2, #32
 80048dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e00f      	b.n	800490c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	4013      	ands	r3, r2
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	bf0c      	ite	eq
 80048fc:	2301      	moveq	r3, #1
 80048fe:	2300      	movne	r3, #0
 8004900:	b2db      	uxtb	r3, r3
 8004902:	461a      	mov	r2, r3
 8004904:	79fb      	ldrb	r3, [r7, #7]
 8004906:	429a      	cmp	r2, r3
 8004908:	d09f      	beq.n	800484a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3740      	adds	r7, #64	; 0x40
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	4613      	mov	r3, r2
 8004920:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	68ba      	ldr	r2, [r7, #8]
 8004926:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	88fa      	ldrh	r2, [r7, #6]
 800492c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	88fa      	ldrh	r2, [r7, #6]
 8004932:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2222      	movs	r2, #34	; 0x22
 800493e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68da      	ldr	r2, [r3, #12]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004958:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	695a      	ldr	r2, [r3, #20]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f042 0201 	orr.w	r2, r2, #1
 8004968:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68da      	ldr	r2, [r3, #12]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f042 0220 	orr.w	r2, r2, #32
 8004978:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3714      	adds	r7, #20
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004988:	b480      	push	{r7}
 800498a:	b095      	sub	sp, #84	; 0x54
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	330c      	adds	r3, #12
 8004996:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800499a:	e853 3f00 	ldrex	r3, [r3]
 800499e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	330c      	adds	r3, #12
 80049ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049b0:	643a      	str	r2, [r7, #64]	; 0x40
 80049b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049b8:	e841 2300 	strex	r3, r2, [r1]
 80049bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1e5      	bne.n	8004990 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	3314      	adds	r3, #20
 80049ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049cc:	6a3b      	ldr	r3, [r7, #32]
 80049ce:	e853 3f00 	ldrex	r3, [r3]
 80049d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	f023 0301 	bic.w	r3, r3, #1
 80049da:	64bb      	str	r3, [r7, #72]	; 0x48
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	3314      	adds	r3, #20
 80049e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049ec:	e841 2300 	strex	r3, r2, [r1]
 80049f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1e5      	bne.n	80049c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d119      	bne.n	8004a34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	330c      	adds	r3, #12
 8004a06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	e853 3f00 	ldrex	r3, [r3]
 8004a0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	f023 0310 	bic.w	r3, r3, #16
 8004a16:	647b      	str	r3, [r7, #68]	; 0x44
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	330c      	adds	r3, #12
 8004a1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a20:	61ba      	str	r2, [r7, #24]
 8004a22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a24:	6979      	ldr	r1, [r7, #20]
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	e841 2300 	strex	r3, r2, [r1]
 8004a2c:	613b      	str	r3, [r7, #16]
   return(result);
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1e5      	bne.n	8004a00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2220      	movs	r2, #32
 8004a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a42:	bf00      	nop
 8004a44:	3754      	adds	r7, #84	; 0x54
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b084      	sub	sp, #16
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f7ff fecf 	bl	800480c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a6e:	bf00      	nop
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b085      	sub	sp, #20
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b21      	cmp	r3, #33	; 0x21
 8004a88:	d13e      	bne.n	8004b08 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a92:	d114      	bne.n	8004abe <UART_Transmit_IT+0x48>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d110      	bne.n	8004abe <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a1b      	ldr	r3, [r3, #32]
 8004aa0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	881b      	ldrh	r3, [r3, #0]
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ab0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	1c9a      	adds	r2, r3, #2
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	621a      	str	r2, [r3, #32]
 8004abc:	e008      	b.n	8004ad0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	1c59      	adds	r1, r3, #1
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6211      	str	r1, [r2, #32]
 8004ac8:	781a      	ldrb	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	4619      	mov	r1, r3
 8004ade:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10f      	bne.n	8004b04 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68da      	ldr	r2, [r3, #12]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004af2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68da      	ldr	r2, [r3, #12]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b02:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b04:	2300      	movs	r3, #0
 8004b06:	e000      	b.n	8004b0a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b08:	2302      	movs	r3, #2
  }
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b082      	sub	sp, #8
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68da      	ldr	r2, [r3, #12]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b2c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2220      	movs	r2, #32
 8004b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7ff fe5e 	bl	80047f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b08c      	sub	sp, #48	; 0x30
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b22      	cmp	r3, #34	; 0x22
 8004b58:	f040 80ab 	bne.w	8004cb2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b64:	d117      	bne.n	8004b96 <UART_Receive_IT+0x50>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d113      	bne.n	8004b96 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b76:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b88:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8e:	1c9a      	adds	r2, r3, #2
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	629a      	str	r2, [r3, #40]	; 0x28
 8004b94:	e026      	b.n	8004be4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ba8:	d007      	beq.n	8004bba <UART_Receive_IT+0x74>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10a      	bne.n	8004bc8 <UART_Receive_IT+0x82>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d106      	bne.n	8004bc8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	b2da      	uxtb	r2, r3
 8004bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc4:	701a      	strb	r2, [r3, #0]
 8004bc6:	e008      	b.n	8004bda <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bde:	1c5a      	adds	r2, r3, #1
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	3b01      	subs	r3, #1
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d15a      	bne.n	8004cae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68da      	ldr	r2, [r3, #12]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f022 0220 	bic.w	r2, r2, #32
 8004c06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68da      	ldr	r2, [r3, #12]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	695a      	ldr	r2, [r3, #20]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 0201 	bic.w	r2, r2, #1
 8004c26:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2220      	movs	r2, #32
 8004c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d135      	bne.n	8004ca4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	330c      	adds	r3, #12
 8004c44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	e853 3f00 	ldrex	r3, [r3]
 8004c4c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	f023 0310 	bic.w	r3, r3, #16
 8004c54:	627b      	str	r3, [r7, #36]	; 0x24
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	330c      	adds	r3, #12
 8004c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c5e:	623a      	str	r2, [r7, #32]
 8004c60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c62:	69f9      	ldr	r1, [r7, #28]
 8004c64:	6a3a      	ldr	r2, [r7, #32]
 8004c66:	e841 2300 	strex	r3, r2, [r1]
 8004c6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1e5      	bne.n	8004c3e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0310 	and.w	r3, r3, #16
 8004c7c:	2b10      	cmp	r3, #16
 8004c7e:	d10a      	bne.n	8004c96 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c80:	2300      	movs	r3, #0
 8004c82:	60fb      	str	r3, [r7, #12]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	60fb      	str	r3, [r7, #12]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	60fb      	str	r3, [r7, #12]
 8004c94:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f7ff fdbf 	bl	8004820 <HAL_UARTEx_RxEventCallback>
 8004ca2:	e002      	b.n	8004caa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f7fb fddb 	bl	8000860 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004caa:	2300      	movs	r3, #0
 8004cac:	e002      	b.n	8004cb4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	e000      	b.n	8004cb4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004cb2:	2302      	movs	r3, #2
  }
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3730      	adds	r7, #48	; 0x30
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cc0:	b09f      	sub	sp, #124	; 0x7c
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cd2:	68d9      	ldr	r1, [r3, #12]
 8004cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	ea40 0301 	orr.w	r3, r0, r1
 8004cdc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ce0:	689a      	ldr	r2, [r3, #8]
 8004ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	431a      	orrs	r2, r3
 8004cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004cf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d00:	f021 010c 	bic.w	r1, r1, #12
 8004d04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d0a:	430b      	orrs	r3, r1
 8004d0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d1a:	6999      	ldr	r1, [r3, #24]
 8004d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	ea40 0301 	orr.w	r3, r0, r1
 8004d24:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	4bc5      	ldr	r3, [pc, #788]	; (8005040 <UART_SetConfig+0x384>)
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d004      	beq.n	8004d3a <UART_SetConfig+0x7e>
 8004d30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	4bc3      	ldr	r3, [pc, #780]	; (8005044 <UART_SetConfig+0x388>)
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d103      	bne.n	8004d42 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d3a:	f7fe fd1f 	bl	800377c <HAL_RCC_GetPCLK2Freq>
 8004d3e:	6778      	str	r0, [r7, #116]	; 0x74
 8004d40:	e002      	b.n	8004d48 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d42:	f7fe fd07 	bl	8003754 <HAL_RCC_GetPCLK1Freq>
 8004d46:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d4a:	69db      	ldr	r3, [r3, #28]
 8004d4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d50:	f040 80b6 	bne.w	8004ec0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d56:	461c      	mov	r4, r3
 8004d58:	f04f 0500 	mov.w	r5, #0
 8004d5c:	4622      	mov	r2, r4
 8004d5e:	462b      	mov	r3, r5
 8004d60:	1891      	adds	r1, r2, r2
 8004d62:	6439      	str	r1, [r7, #64]	; 0x40
 8004d64:	415b      	adcs	r3, r3
 8004d66:	647b      	str	r3, [r7, #68]	; 0x44
 8004d68:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d6c:	1912      	adds	r2, r2, r4
 8004d6e:	eb45 0303 	adc.w	r3, r5, r3
 8004d72:	f04f 0000 	mov.w	r0, #0
 8004d76:	f04f 0100 	mov.w	r1, #0
 8004d7a:	00d9      	lsls	r1, r3, #3
 8004d7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d80:	00d0      	lsls	r0, r2, #3
 8004d82:	4602      	mov	r2, r0
 8004d84:	460b      	mov	r3, r1
 8004d86:	1911      	adds	r1, r2, r4
 8004d88:	6639      	str	r1, [r7, #96]	; 0x60
 8004d8a:	416b      	adcs	r3, r5
 8004d8c:	667b      	str	r3, [r7, #100]	; 0x64
 8004d8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	461a      	mov	r2, r3
 8004d94:	f04f 0300 	mov.w	r3, #0
 8004d98:	1891      	adds	r1, r2, r2
 8004d9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d9c:	415b      	adcs	r3, r3
 8004d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004da0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004da4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004da8:	f7fb fa6a 	bl	8000280 <__aeabi_uldivmod>
 8004dac:	4602      	mov	r2, r0
 8004dae:	460b      	mov	r3, r1
 8004db0:	4ba5      	ldr	r3, [pc, #660]	; (8005048 <UART_SetConfig+0x38c>)
 8004db2:	fba3 2302 	umull	r2, r3, r3, r2
 8004db6:	095b      	lsrs	r3, r3, #5
 8004db8:	011e      	lsls	r6, r3, #4
 8004dba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dbc:	461c      	mov	r4, r3
 8004dbe:	f04f 0500 	mov.w	r5, #0
 8004dc2:	4622      	mov	r2, r4
 8004dc4:	462b      	mov	r3, r5
 8004dc6:	1891      	adds	r1, r2, r2
 8004dc8:	6339      	str	r1, [r7, #48]	; 0x30
 8004dca:	415b      	adcs	r3, r3
 8004dcc:	637b      	str	r3, [r7, #52]	; 0x34
 8004dce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004dd2:	1912      	adds	r2, r2, r4
 8004dd4:	eb45 0303 	adc.w	r3, r5, r3
 8004dd8:	f04f 0000 	mov.w	r0, #0
 8004ddc:	f04f 0100 	mov.w	r1, #0
 8004de0:	00d9      	lsls	r1, r3, #3
 8004de2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004de6:	00d0      	lsls	r0, r2, #3
 8004de8:	4602      	mov	r2, r0
 8004dea:	460b      	mov	r3, r1
 8004dec:	1911      	adds	r1, r2, r4
 8004dee:	65b9      	str	r1, [r7, #88]	; 0x58
 8004df0:	416b      	adcs	r3, r5
 8004df2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	461a      	mov	r2, r3
 8004dfa:	f04f 0300 	mov.w	r3, #0
 8004dfe:	1891      	adds	r1, r2, r2
 8004e00:	62b9      	str	r1, [r7, #40]	; 0x28
 8004e02:	415b      	adcs	r3, r3
 8004e04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e0a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004e0e:	f7fb fa37 	bl	8000280 <__aeabi_uldivmod>
 8004e12:	4602      	mov	r2, r0
 8004e14:	460b      	mov	r3, r1
 8004e16:	4b8c      	ldr	r3, [pc, #560]	; (8005048 <UART_SetConfig+0x38c>)
 8004e18:	fba3 1302 	umull	r1, r3, r3, r2
 8004e1c:	095b      	lsrs	r3, r3, #5
 8004e1e:	2164      	movs	r1, #100	; 0x64
 8004e20:	fb01 f303 	mul.w	r3, r1, r3
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	00db      	lsls	r3, r3, #3
 8004e28:	3332      	adds	r3, #50	; 0x32
 8004e2a:	4a87      	ldr	r2, [pc, #540]	; (8005048 <UART_SetConfig+0x38c>)
 8004e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e30:	095b      	lsrs	r3, r3, #5
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e38:	441e      	add	r6, r3
 8004e3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f04f 0100 	mov.w	r1, #0
 8004e42:	4602      	mov	r2, r0
 8004e44:	460b      	mov	r3, r1
 8004e46:	1894      	adds	r4, r2, r2
 8004e48:	623c      	str	r4, [r7, #32]
 8004e4a:	415b      	adcs	r3, r3
 8004e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e52:	1812      	adds	r2, r2, r0
 8004e54:	eb41 0303 	adc.w	r3, r1, r3
 8004e58:	f04f 0400 	mov.w	r4, #0
 8004e5c:	f04f 0500 	mov.w	r5, #0
 8004e60:	00dd      	lsls	r5, r3, #3
 8004e62:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e66:	00d4      	lsls	r4, r2, #3
 8004e68:	4622      	mov	r2, r4
 8004e6a:	462b      	mov	r3, r5
 8004e6c:	1814      	adds	r4, r2, r0
 8004e6e:	653c      	str	r4, [r7, #80]	; 0x50
 8004e70:	414b      	adcs	r3, r1
 8004e72:	657b      	str	r3, [r7, #84]	; 0x54
 8004e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	461a      	mov	r2, r3
 8004e7a:	f04f 0300 	mov.w	r3, #0
 8004e7e:	1891      	adds	r1, r2, r2
 8004e80:	61b9      	str	r1, [r7, #24]
 8004e82:	415b      	adcs	r3, r3
 8004e84:	61fb      	str	r3, [r7, #28]
 8004e86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e8a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004e8e:	f7fb f9f7 	bl	8000280 <__aeabi_uldivmod>
 8004e92:	4602      	mov	r2, r0
 8004e94:	460b      	mov	r3, r1
 8004e96:	4b6c      	ldr	r3, [pc, #432]	; (8005048 <UART_SetConfig+0x38c>)
 8004e98:	fba3 1302 	umull	r1, r3, r3, r2
 8004e9c:	095b      	lsrs	r3, r3, #5
 8004e9e:	2164      	movs	r1, #100	; 0x64
 8004ea0:	fb01 f303 	mul.w	r3, r1, r3
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	00db      	lsls	r3, r3, #3
 8004ea8:	3332      	adds	r3, #50	; 0x32
 8004eaa:	4a67      	ldr	r2, [pc, #412]	; (8005048 <UART_SetConfig+0x38c>)
 8004eac:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb0:	095b      	lsrs	r3, r3, #5
 8004eb2:	f003 0207 	and.w	r2, r3, #7
 8004eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4432      	add	r2, r6
 8004ebc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ebe:	e0b9      	b.n	8005034 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ec0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ec2:	461c      	mov	r4, r3
 8004ec4:	f04f 0500 	mov.w	r5, #0
 8004ec8:	4622      	mov	r2, r4
 8004eca:	462b      	mov	r3, r5
 8004ecc:	1891      	adds	r1, r2, r2
 8004ece:	6139      	str	r1, [r7, #16]
 8004ed0:	415b      	adcs	r3, r3
 8004ed2:	617b      	str	r3, [r7, #20]
 8004ed4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004ed8:	1912      	adds	r2, r2, r4
 8004eda:	eb45 0303 	adc.w	r3, r5, r3
 8004ede:	f04f 0000 	mov.w	r0, #0
 8004ee2:	f04f 0100 	mov.w	r1, #0
 8004ee6:	00d9      	lsls	r1, r3, #3
 8004ee8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004eec:	00d0      	lsls	r0, r2, #3
 8004eee:	4602      	mov	r2, r0
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	eb12 0804 	adds.w	r8, r2, r4
 8004ef6:	eb43 0905 	adc.w	r9, r3, r5
 8004efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f04f 0100 	mov.w	r1, #0
 8004f04:	f04f 0200 	mov.w	r2, #0
 8004f08:	f04f 0300 	mov.w	r3, #0
 8004f0c:	008b      	lsls	r3, r1, #2
 8004f0e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004f12:	0082      	lsls	r2, r0, #2
 8004f14:	4640      	mov	r0, r8
 8004f16:	4649      	mov	r1, r9
 8004f18:	f7fb f9b2 	bl	8000280 <__aeabi_uldivmod>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	460b      	mov	r3, r1
 8004f20:	4b49      	ldr	r3, [pc, #292]	; (8005048 <UART_SetConfig+0x38c>)
 8004f22:	fba3 2302 	umull	r2, r3, r3, r2
 8004f26:	095b      	lsrs	r3, r3, #5
 8004f28:	011e      	lsls	r6, r3, #4
 8004f2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f04f 0100 	mov.w	r1, #0
 8004f32:	4602      	mov	r2, r0
 8004f34:	460b      	mov	r3, r1
 8004f36:	1894      	adds	r4, r2, r2
 8004f38:	60bc      	str	r4, [r7, #8]
 8004f3a:	415b      	adcs	r3, r3
 8004f3c:	60fb      	str	r3, [r7, #12]
 8004f3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f42:	1812      	adds	r2, r2, r0
 8004f44:	eb41 0303 	adc.w	r3, r1, r3
 8004f48:	f04f 0400 	mov.w	r4, #0
 8004f4c:	f04f 0500 	mov.w	r5, #0
 8004f50:	00dd      	lsls	r5, r3, #3
 8004f52:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004f56:	00d4      	lsls	r4, r2, #3
 8004f58:	4622      	mov	r2, r4
 8004f5a:	462b      	mov	r3, r5
 8004f5c:	1814      	adds	r4, r2, r0
 8004f5e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004f60:	414b      	adcs	r3, r1
 8004f62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f04f 0100 	mov.w	r1, #0
 8004f6e:	f04f 0200 	mov.w	r2, #0
 8004f72:	f04f 0300 	mov.w	r3, #0
 8004f76:	008b      	lsls	r3, r1, #2
 8004f78:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004f7c:	0082      	lsls	r2, r0, #2
 8004f7e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004f82:	f7fb f97d 	bl	8000280 <__aeabi_uldivmod>
 8004f86:	4602      	mov	r2, r0
 8004f88:	460b      	mov	r3, r1
 8004f8a:	4b2f      	ldr	r3, [pc, #188]	; (8005048 <UART_SetConfig+0x38c>)
 8004f8c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f90:	095b      	lsrs	r3, r3, #5
 8004f92:	2164      	movs	r1, #100	; 0x64
 8004f94:	fb01 f303 	mul.w	r3, r1, r3
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	011b      	lsls	r3, r3, #4
 8004f9c:	3332      	adds	r3, #50	; 0x32
 8004f9e:	4a2a      	ldr	r2, [pc, #168]	; (8005048 <UART_SetConfig+0x38c>)
 8004fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa4:	095b      	lsrs	r3, r3, #5
 8004fa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004faa:	441e      	add	r6, r3
 8004fac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f04f 0100 	mov.w	r1, #0
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	1894      	adds	r4, r2, r2
 8004fba:	603c      	str	r4, [r7, #0]
 8004fbc:	415b      	adcs	r3, r3
 8004fbe:	607b      	str	r3, [r7, #4]
 8004fc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fc4:	1812      	adds	r2, r2, r0
 8004fc6:	eb41 0303 	adc.w	r3, r1, r3
 8004fca:	f04f 0400 	mov.w	r4, #0
 8004fce:	f04f 0500 	mov.w	r5, #0
 8004fd2:	00dd      	lsls	r5, r3, #3
 8004fd4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004fd8:	00d4      	lsls	r4, r2, #3
 8004fda:	4622      	mov	r2, r4
 8004fdc:	462b      	mov	r3, r5
 8004fde:	eb12 0a00 	adds.w	sl, r2, r0
 8004fe2:	eb43 0b01 	adc.w	fp, r3, r1
 8004fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f04f 0100 	mov.w	r1, #0
 8004ff0:	f04f 0200 	mov.w	r2, #0
 8004ff4:	f04f 0300 	mov.w	r3, #0
 8004ff8:	008b      	lsls	r3, r1, #2
 8004ffa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004ffe:	0082      	lsls	r2, r0, #2
 8005000:	4650      	mov	r0, sl
 8005002:	4659      	mov	r1, fp
 8005004:	f7fb f93c 	bl	8000280 <__aeabi_uldivmod>
 8005008:	4602      	mov	r2, r0
 800500a:	460b      	mov	r3, r1
 800500c:	4b0e      	ldr	r3, [pc, #56]	; (8005048 <UART_SetConfig+0x38c>)
 800500e:	fba3 1302 	umull	r1, r3, r3, r2
 8005012:	095b      	lsrs	r3, r3, #5
 8005014:	2164      	movs	r1, #100	; 0x64
 8005016:	fb01 f303 	mul.w	r3, r1, r3
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	011b      	lsls	r3, r3, #4
 800501e:	3332      	adds	r3, #50	; 0x32
 8005020:	4a09      	ldr	r2, [pc, #36]	; (8005048 <UART_SetConfig+0x38c>)
 8005022:	fba2 2303 	umull	r2, r3, r2, r3
 8005026:	095b      	lsrs	r3, r3, #5
 8005028:	f003 020f 	and.w	r2, r3, #15
 800502c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4432      	add	r2, r6
 8005032:	609a      	str	r2, [r3, #8]
}
 8005034:	bf00      	nop
 8005036:	377c      	adds	r7, #124	; 0x7c
 8005038:	46bd      	mov	sp, r7
 800503a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800503e:	bf00      	nop
 8005040:	40011000 	.word	0x40011000
 8005044:	40011400 	.word	0x40011400
 8005048:	51eb851f 	.word	0x51eb851f

0800504c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8005052:	4b8d      	ldr	r3, [pc, #564]	; (8005288 <MX_LWIP_Init+0x23c>)
 8005054:	22c0      	movs	r2, #192	; 0xc0
 8005056:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005058:	4b8b      	ldr	r3, [pc, #556]	; (8005288 <MX_LWIP_Init+0x23c>)
 800505a:	22a8      	movs	r2, #168	; 0xa8
 800505c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 18;
 800505e:	4b8a      	ldr	r3, [pc, #552]	; (8005288 <MX_LWIP_Init+0x23c>)
 8005060:	2212      	movs	r2, #18
 8005062:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 117;
 8005064:	4b88      	ldr	r3, [pc, #544]	; (8005288 <MX_LWIP_Init+0x23c>)
 8005066:	2275      	movs	r2, #117	; 0x75
 8005068:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800506a:	4b88      	ldr	r3, [pc, #544]	; (800528c <MX_LWIP_Init+0x240>)
 800506c:	22ff      	movs	r2, #255	; 0xff
 800506e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005070:	4b86      	ldr	r3, [pc, #536]	; (800528c <MX_LWIP_Init+0x240>)
 8005072:	22ff      	movs	r2, #255	; 0xff
 8005074:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8005076:	4b85      	ldr	r3, [pc, #532]	; (800528c <MX_LWIP_Init+0x240>)
 8005078:	22ff      	movs	r2, #255	; 0xff
 800507a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800507c:	4b83      	ldr	r3, [pc, #524]	; (800528c <MX_LWIP_Init+0x240>)
 800507e:	2200      	movs	r2, #0
 8005080:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8005082:	4b83      	ldr	r3, [pc, #524]	; (8005290 <MX_LWIP_Init+0x244>)
 8005084:	22c0      	movs	r2, #192	; 0xc0
 8005086:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8005088:	4b81      	ldr	r3, [pc, #516]	; (8005290 <MX_LWIP_Init+0x244>)
 800508a:	22a8      	movs	r2, #168	; 0xa8
 800508c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 18;
 800508e:	4b80      	ldr	r3, [pc, #512]	; (8005290 <MX_LWIP_Init+0x244>)
 8005090:	2212      	movs	r2, #18
 8005092:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8005094:	4b7e      	ldr	r3, [pc, #504]	; (8005290 <MX_LWIP_Init+0x244>)
 8005096:	2201      	movs	r2, #1
 8005098:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800509a:	f000 fcb9 	bl	8005a10 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800509e:	4b7a      	ldr	r3, [pc, #488]	; (8005288 <MX_LWIP_Init+0x23c>)
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	061a      	lsls	r2, r3, #24
 80050a4:	4b78      	ldr	r3, [pc, #480]	; (8005288 <MX_LWIP_Init+0x23c>)
 80050a6:	785b      	ldrb	r3, [r3, #1]
 80050a8:	041b      	lsls	r3, r3, #16
 80050aa:	431a      	orrs	r2, r3
 80050ac:	4b76      	ldr	r3, [pc, #472]	; (8005288 <MX_LWIP_Init+0x23c>)
 80050ae:	789b      	ldrb	r3, [r3, #2]
 80050b0:	021b      	lsls	r3, r3, #8
 80050b2:	4313      	orrs	r3, r2
 80050b4:	4a74      	ldr	r2, [pc, #464]	; (8005288 <MX_LWIP_Init+0x23c>)
 80050b6:	78d2      	ldrb	r2, [r2, #3]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	061a      	lsls	r2, r3, #24
 80050bc:	4b72      	ldr	r3, [pc, #456]	; (8005288 <MX_LWIP_Init+0x23c>)
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	0619      	lsls	r1, r3, #24
 80050c2:	4b71      	ldr	r3, [pc, #452]	; (8005288 <MX_LWIP_Init+0x23c>)
 80050c4:	785b      	ldrb	r3, [r3, #1]
 80050c6:	041b      	lsls	r3, r3, #16
 80050c8:	4319      	orrs	r1, r3
 80050ca:	4b6f      	ldr	r3, [pc, #444]	; (8005288 <MX_LWIP_Init+0x23c>)
 80050cc:	789b      	ldrb	r3, [r3, #2]
 80050ce:	021b      	lsls	r3, r3, #8
 80050d0:	430b      	orrs	r3, r1
 80050d2:	496d      	ldr	r1, [pc, #436]	; (8005288 <MX_LWIP_Init+0x23c>)
 80050d4:	78c9      	ldrb	r1, [r1, #3]
 80050d6:	430b      	orrs	r3, r1
 80050d8:	021b      	lsls	r3, r3, #8
 80050da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80050de:	431a      	orrs	r2, r3
 80050e0:	4b69      	ldr	r3, [pc, #420]	; (8005288 <MX_LWIP_Init+0x23c>)
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	0619      	lsls	r1, r3, #24
 80050e6:	4b68      	ldr	r3, [pc, #416]	; (8005288 <MX_LWIP_Init+0x23c>)
 80050e8:	785b      	ldrb	r3, [r3, #1]
 80050ea:	041b      	lsls	r3, r3, #16
 80050ec:	4319      	orrs	r1, r3
 80050ee:	4b66      	ldr	r3, [pc, #408]	; (8005288 <MX_LWIP_Init+0x23c>)
 80050f0:	789b      	ldrb	r3, [r3, #2]
 80050f2:	021b      	lsls	r3, r3, #8
 80050f4:	430b      	orrs	r3, r1
 80050f6:	4964      	ldr	r1, [pc, #400]	; (8005288 <MX_LWIP_Init+0x23c>)
 80050f8:	78c9      	ldrb	r1, [r1, #3]
 80050fa:	430b      	orrs	r3, r1
 80050fc:	0a1b      	lsrs	r3, r3, #8
 80050fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005102:	431a      	orrs	r2, r3
 8005104:	4b60      	ldr	r3, [pc, #384]	; (8005288 <MX_LWIP_Init+0x23c>)
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	0619      	lsls	r1, r3, #24
 800510a:	4b5f      	ldr	r3, [pc, #380]	; (8005288 <MX_LWIP_Init+0x23c>)
 800510c:	785b      	ldrb	r3, [r3, #1]
 800510e:	041b      	lsls	r3, r3, #16
 8005110:	4319      	orrs	r1, r3
 8005112:	4b5d      	ldr	r3, [pc, #372]	; (8005288 <MX_LWIP_Init+0x23c>)
 8005114:	789b      	ldrb	r3, [r3, #2]
 8005116:	021b      	lsls	r3, r3, #8
 8005118:	430b      	orrs	r3, r1
 800511a:	495b      	ldr	r1, [pc, #364]	; (8005288 <MX_LWIP_Init+0x23c>)
 800511c:	78c9      	ldrb	r1, [r1, #3]
 800511e:	430b      	orrs	r3, r1
 8005120:	0e1b      	lsrs	r3, r3, #24
 8005122:	4313      	orrs	r3, r2
 8005124:	4a5b      	ldr	r2, [pc, #364]	; (8005294 <MX_LWIP_Init+0x248>)
 8005126:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005128:	4b58      	ldr	r3, [pc, #352]	; (800528c <MX_LWIP_Init+0x240>)
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	061a      	lsls	r2, r3, #24
 800512e:	4b57      	ldr	r3, [pc, #348]	; (800528c <MX_LWIP_Init+0x240>)
 8005130:	785b      	ldrb	r3, [r3, #1]
 8005132:	041b      	lsls	r3, r3, #16
 8005134:	431a      	orrs	r2, r3
 8005136:	4b55      	ldr	r3, [pc, #340]	; (800528c <MX_LWIP_Init+0x240>)
 8005138:	789b      	ldrb	r3, [r3, #2]
 800513a:	021b      	lsls	r3, r3, #8
 800513c:	4313      	orrs	r3, r2
 800513e:	4a53      	ldr	r2, [pc, #332]	; (800528c <MX_LWIP_Init+0x240>)
 8005140:	78d2      	ldrb	r2, [r2, #3]
 8005142:	4313      	orrs	r3, r2
 8005144:	061a      	lsls	r2, r3, #24
 8005146:	4b51      	ldr	r3, [pc, #324]	; (800528c <MX_LWIP_Init+0x240>)
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	0619      	lsls	r1, r3, #24
 800514c:	4b4f      	ldr	r3, [pc, #316]	; (800528c <MX_LWIP_Init+0x240>)
 800514e:	785b      	ldrb	r3, [r3, #1]
 8005150:	041b      	lsls	r3, r3, #16
 8005152:	4319      	orrs	r1, r3
 8005154:	4b4d      	ldr	r3, [pc, #308]	; (800528c <MX_LWIP_Init+0x240>)
 8005156:	789b      	ldrb	r3, [r3, #2]
 8005158:	021b      	lsls	r3, r3, #8
 800515a:	430b      	orrs	r3, r1
 800515c:	494b      	ldr	r1, [pc, #300]	; (800528c <MX_LWIP_Init+0x240>)
 800515e:	78c9      	ldrb	r1, [r1, #3]
 8005160:	430b      	orrs	r3, r1
 8005162:	021b      	lsls	r3, r3, #8
 8005164:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005168:	431a      	orrs	r2, r3
 800516a:	4b48      	ldr	r3, [pc, #288]	; (800528c <MX_LWIP_Init+0x240>)
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	0619      	lsls	r1, r3, #24
 8005170:	4b46      	ldr	r3, [pc, #280]	; (800528c <MX_LWIP_Init+0x240>)
 8005172:	785b      	ldrb	r3, [r3, #1]
 8005174:	041b      	lsls	r3, r3, #16
 8005176:	4319      	orrs	r1, r3
 8005178:	4b44      	ldr	r3, [pc, #272]	; (800528c <MX_LWIP_Init+0x240>)
 800517a:	789b      	ldrb	r3, [r3, #2]
 800517c:	021b      	lsls	r3, r3, #8
 800517e:	430b      	orrs	r3, r1
 8005180:	4942      	ldr	r1, [pc, #264]	; (800528c <MX_LWIP_Init+0x240>)
 8005182:	78c9      	ldrb	r1, [r1, #3]
 8005184:	430b      	orrs	r3, r1
 8005186:	0a1b      	lsrs	r3, r3, #8
 8005188:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800518c:	431a      	orrs	r2, r3
 800518e:	4b3f      	ldr	r3, [pc, #252]	; (800528c <MX_LWIP_Init+0x240>)
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	0619      	lsls	r1, r3, #24
 8005194:	4b3d      	ldr	r3, [pc, #244]	; (800528c <MX_LWIP_Init+0x240>)
 8005196:	785b      	ldrb	r3, [r3, #1]
 8005198:	041b      	lsls	r3, r3, #16
 800519a:	4319      	orrs	r1, r3
 800519c:	4b3b      	ldr	r3, [pc, #236]	; (800528c <MX_LWIP_Init+0x240>)
 800519e:	789b      	ldrb	r3, [r3, #2]
 80051a0:	021b      	lsls	r3, r3, #8
 80051a2:	430b      	orrs	r3, r1
 80051a4:	4939      	ldr	r1, [pc, #228]	; (800528c <MX_LWIP_Init+0x240>)
 80051a6:	78c9      	ldrb	r1, [r1, #3]
 80051a8:	430b      	orrs	r3, r1
 80051aa:	0e1b      	lsrs	r3, r3, #24
 80051ac:	4313      	orrs	r3, r2
 80051ae:	4a3a      	ldr	r2, [pc, #232]	; (8005298 <MX_LWIP_Init+0x24c>)
 80051b0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80051b2:	4b37      	ldr	r3, [pc, #220]	; (8005290 <MX_LWIP_Init+0x244>)
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	061a      	lsls	r2, r3, #24
 80051b8:	4b35      	ldr	r3, [pc, #212]	; (8005290 <MX_LWIP_Init+0x244>)
 80051ba:	785b      	ldrb	r3, [r3, #1]
 80051bc:	041b      	lsls	r3, r3, #16
 80051be:	431a      	orrs	r2, r3
 80051c0:	4b33      	ldr	r3, [pc, #204]	; (8005290 <MX_LWIP_Init+0x244>)
 80051c2:	789b      	ldrb	r3, [r3, #2]
 80051c4:	021b      	lsls	r3, r3, #8
 80051c6:	4313      	orrs	r3, r2
 80051c8:	4a31      	ldr	r2, [pc, #196]	; (8005290 <MX_LWIP_Init+0x244>)
 80051ca:	78d2      	ldrb	r2, [r2, #3]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	061a      	lsls	r2, r3, #24
 80051d0:	4b2f      	ldr	r3, [pc, #188]	; (8005290 <MX_LWIP_Init+0x244>)
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	0619      	lsls	r1, r3, #24
 80051d6:	4b2e      	ldr	r3, [pc, #184]	; (8005290 <MX_LWIP_Init+0x244>)
 80051d8:	785b      	ldrb	r3, [r3, #1]
 80051da:	041b      	lsls	r3, r3, #16
 80051dc:	4319      	orrs	r1, r3
 80051de:	4b2c      	ldr	r3, [pc, #176]	; (8005290 <MX_LWIP_Init+0x244>)
 80051e0:	789b      	ldrb	r3, [r3, #2]
 80051e2:	021b      	lsls	r3, r3, #8
 80051e4:	430b      	orrs	r3, r1
 80051e6:	492a      	ldr	r1, [pc, #168]	; (8005290 <MX_LWIP_Init+0x244>)
 80051e8:	78c9      	ldrb	r1, [r1, #3]
 80051ea:	430b      	orrs	r3, r1
 80051ec:	021b      	lsls	r3, r3, #8
 80051ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80051f2:	431a      	orrs	r2, r3
 80051f4:	4b26      	ldr	r3, [pc, #152]	; (8005290 <MX_LWIP_Init+0x244>)
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	0619      	lsls	r1, r3, #24
 80051fa:	4b25      	ldr	r3, [pc, #148]	; (8005290 <MX_LWIP_Init+0x244>)
 80051fc:	785b      	ldrb	r3, [r3, #1]
 80051fe:	041b      	lsls	r3, r3, #16
 8005200:	4319      	orrs	r1, r3
 8005202:	4b23      	ldr	r3, [pc, #140]	; (8005290 <MX_LWIP_Init+0x244>)
 8005204:	789b      	ldrb	r3, [r3, #2]
 8005206:	021b      	lsls	r3, r3, #8
 8005208:	430b      	orrs	r3, r1
 800520a:	4921      	ldr	r1, [pc, #132]	; (8005290 <MX_LWIP_Init+0x244>)
 800520c:	78c9      	ldrb	r1, [r1, #3]
 800520e:	430b      	orrs	r3, r1
 8005210:	0a1b      	lsrs	r3, r3, #8
 8005212:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005216:	431a      	orrs	r2, r3
 8005218:	4b1d      	ldr	r3, [pc, #116]	; (8005290 <MX_LWIP_Init+0x244>)
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	0619      	lsls	r1, r3, #24
 800521e:	4b1c      	ldr	r3, [pc, #112]	; (8005290 <MX_LWIP_Init+0x244>)
 8005220:	785b      	ldrb	r3, [r3, #1]
 8005222:	041b      	lsls	r3, r3, #16
 8005224:	4319      	orrs	r1, r3
 8005226:	4b1a      	ldr	r3, [pc, #104]	; (8005290 <MX_LWIP_Init+0x244>)
 8005228:	789b      	ldrb	r3, [r3, #2]
 800522a:	021b      	lsls	r3, r3, #8
 800522c:	430b      	orrs	r3, r1
 800522e:	4918      	ldr	r1, [pc, #96]	; (8005290 <MX_LWIP_Init+0x244>)
 8005230:	78c9      	ldrb	r1, [r1, #3]
 8005232:	430b      	orrs	r3, r1
 8005234:	0e1b      	lsrs	r3, r3, #24
 8005236:	4313      	orrs	r3, r2
 8005238:	4a18      	ldr	r2, [pc, #96]	; (800529c <MX_LWIP_Init+0x250>)
 800523a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800523c:	4b18      	ldr	r3, [pc, #96]	; (80052a0 <MX_LWIP_Init+0x254>)
 800523e:	9302      	str	r3, [sp, #8]
 8005240:	4b18      	ldr	r3, [pc, #96]	; (80052a4 <MX_LWIP_Init+0x258>)
 8005242:	9301      	str	r3, [sp, #4]
 8005244:	2300      	movs	r3, #0
 8005246:	9300      	str	r3, [sp, #0]
 8005248:	4b14      	ldr	r3, [pc, #80]	; (800529c <MX_LWIP_Init+0x250>)
 800524a:	4a13      	ldr	r2, [pc, #76]	; (8005298 <MX_LWIP_Init+0x24c>)
 800524c:	4911      	ldr	r1, [pc, #68]	; (8005294 <MX_LWIP_Init+0x248>)
 800524e:	4816      	ldr	r0, [pc, #88]	; (80052a8 <MX_LWIP_Init+0x25c>)
 8005250:	f001 f884 	bl	800635c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005254:	4814      	ldr	r0, [pc, #80]	; (80052a8 <MX_LWIP_Init+0x25c>)
 8005256:	f001 fa33 	bl	80066c0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800525a:	4b13      	ldr	r3, [pc, #76]	; (80052a8 <MX_LWIP_Init+0x25c>)
 800525c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005260:	089b      	lsrs	r3, r3, #2
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b00      	cmp	r3, #0
 800526a:	d003      	beq.n	8005274 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800526c:	480e      	ldr	r0, [pc, #56]	; (80052a8 <MX_LWIP_Init+0x25c>)
 800526e:	f001 fa37 	bl	80066e0 <netif_set_up>
 8005272:	e002      	b.n	800527a <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005274:	480c      	ldr	r0, [pc, #48]	; (80052a8 <MX_LWIP_Init+0x25c>)
 8005276:	f001 fa9f 	bl	80067b8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800527a:	490c      	ldr	r1, [pc, #48]	; (80052ac <MX_LWIP_Init+0x260>)
 800527c:	480a      	ldr	r0, [pc, #40]	; (80052a8 <MX_LWIP_Init+0x25c>)
 800527e:	f001 facd 	bl	800681c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005282:	bf00      	nop
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	200003fc 	.word	0x200003fc
 800528c:	200003f8 	.word	0x200003f8
 8005290:	200003bc 	.word	0x200003bc
 8005294:	200003f4 	.word	0x200003f4
 8005298:	20000400 	.word	0x20000400
 800529c:	20000404 	.word	0x20000404
 80052a0:	0800fe6d 	.word	0x0800fe6d
 80052a4:	0800583d 	.word	0x0800583d
 80052a8:	200003c0 	.word	0x200003c0
 80052ac:	080058a9 	.word	0x080058a9

080052b0 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b08e      	sub	sp, #56	; 0x38
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052bc:	2200      	movs	r2, #0
 80052be:	601a      	str	r2, [r3, #0]
 80052c0:	605a      	str	r2, [r3, #4]
 80052c2:	609a      	str	r2, [r3, #8]
 80052c4:	60da      	str	r2, [r3, #12]
 80052c6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a46      	ldr	r2, [pc, #280]	; (80053e8 <HAL_ETH_MspInit+0x138>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	f040 8085 	bne.w	80053de <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80052d4:	2300      	movs	r3, #0
 80052d6:	623b      	str	r3, [r7, #32]
 80052d8:	4b44      	ldr	r3, [pc, #272]	; (80053ec <HAL_ETH_MspInit+0x13c>)
 80052da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052dc:	4a43      	ldr	r2, [pc, #268]	; (80053ec <HAL_ETH_MspInit+0x13c>)
 80052de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80052e2:	6313      	str	r3, [r2, #48]	; 0x30
 80052e4:	4b41      	ldr	r3, [pc, #260]	; (80053ec <HAL_ETH_MspInit+0x13c>)
 80052e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ec:	623b      	str	r3, [r7, #32]
 80052ee:	6a3b      	ldr	r3, [r7, #32]
 80052f0:	2300      	movs	r3, #0
 80052f2:	61fb      	str	r3, [r7, #28]
 80052f4:	4b3d      	ldr	r3, [pc, #244]	; (80053ec <HAL_ETH_MspInit+0x13c>)
 80052f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f8:	4a3c      	ldr	r2, [pc, #240]	; (80053ec <HAL_ETH_MspInit+0x13c>)
 80052fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052fe:	6313      	str	r3, [r2, #48]	; 0x30
 8005300:	4b3a      	ldr	r3, [pc, #232]	; (80053ec <HAL_ETH_MspInit+0x13c>)
 8005302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005304:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005308:	61fb      	str	r3, [r7, #28]
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	2300      	movs	r3, #0
 800530e:	61bb      	str	r3, [r7, #24]
 8005310:	4b36      	ldr	r3, [pc, #216]	; (80053ec <HAL_ETH_MspInit+0x13c>)
 8005312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005314:	4a35      	ldr	r2, [pc, #212]	; (80053ec <HAL_ETH_MspInit+0x13c>)
 8005316:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800531a:	6313      	str	r3, [r2, #48]	; 0x30
 800531c:	4b33      	ldr	r3, [pc, #204]	; (80053ec <HAL_ETH_MspInit+0x13c>)
 800531e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005320:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005324:	61bb      	str	r3, [r7, #24]
 8005326:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005328:	2300      	movs	r3, #0
 800532a:	617b      	str	r3, [r7, #20]
 800532c:	4b2f      	ldr	r3, [pc, #188]	; (80053ec <HAL_ETH_MspInit+0x13c>)
 800532e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005330:	4a2e      	ldr	r2, [pc, #184]	; (80053ec <HAL_ETH_MspInit+0x13c>)
 8005332:	f043 0304 	orr.w	r3, r3, #4
 8005336:	6313      	str	r3, [r2, #48]	; 0x30
 8005338:	4b2c      	ldr	r3, [pc, #176]	; (80053ec <HAL_ETH_MspInit+0x13c>)
 800533a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533c:	f003 0304 	and.w	r3, r3, #4
 8005340:	617b      	str	r3, [r7, #20]
 8005342:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005344:	2300      	movs	r3, #0
 8005346:	613b      	str	r3, [r7, #16]
 8005348:	4b28      	ldr	r3, [pc, #160]	; (80053ec <HAL_ETH_MspInit+0x13c>)
 800534a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534c:	4a27      	ldr	r2, [pc, #156]	; (80053ec <HAL_ETH_MspInit+0x13c>)
 800534e:	f043 0301 	orr.w	r3, r3, #1
 8005352:	6313      	str	r3, [r2, #48]	; 0x30
 8005354:	4b25      	ldr	r3, [pc, #148]	; (80053ec <HAL_ETH_MspInit+0x13c>)
 8005356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005358:	f003 0301 	and.w	r3, r3, #1
 800535c:	613b      	str	r3, [r7, #16]
 800535e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005360:	2300      	movs	r3, #0
 8005362:	60fb      	str	r3, [r7, #12]
 8005364:	4b21      	ldr	r3, [pc, #132]	; (80053ec <HAL_ETH_MspInit+0x13c>)
 8005366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005368:	4a20      	ldr	r2, [pc, #128]	; (80053ec <HAL_ETH_MspInit+0x13c>)
 800536a:	f043 0302 	orr.w	r3, r3, #2
 800536e:	6313      	str	r3, [r2, #48]	; 0x30
 8005370:	4b1e      	ldr	r3, [pc, #120]	; (80053ec <HAL_ETH_MspInit+0x13c>)
 8005372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005374:	f003 0302 	and.w	r3, r3, #2
 8005378:	60fb      	str	r3, [r7, #12]
 800537a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800537c:	2332      	movs	r3, #50	; 0x32
 800537e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005380:	2302      	movs	r3, #2
 8005382:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005384:	2300      	movs	r3, #0
 8005386:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005388:	2303      	movs	r3, #3
 800538a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800538c:	230b      	movs	r3, #11
 800538e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005390:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005394:	4619      	mov	r1, r3
 8005396:	4816      	ldr	r0, [pc, #88]	; (80053f0 <HAL_ETH_MspInit+0x140>)
 8005398:	f7fd fbda 	bl	8002b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800539c:	2386      	movs	r3, #134	; 0x86
 800539e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053a0:	2302      	movs	r3, #2
 80053a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053a4:	2300      	movs	r3, #0
 80053a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053a8:	2303      	movs	r3, #3
 80053aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80053ac:	230b      	movs	r3, #11
 80053ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053b4:	4619      	mov	r1, r3
 80053b6:	480f      	ldr	r0, [pc, #60]	; (80053f4 <HAL_ETH_MspInit+0x144>)
 80053b8:	f7fd fbca 	bl	8002b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80053bc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80053c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053c2:	2302      	movs	r3, #2
 80053c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053c6:	2300      	movs	r3, #0
 80053c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053ca:	2303      	movs	r3, #3
 80053cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80053ce:	230b      	movs	r3, #11
 80053d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053d6:	4619      	mov	r1, r3
 80053d8:	4807      	ldr	r0, [pc, #28]	; (80053f8 <HAL_ETH_MspInit+0x148>)
 80053da:	f7fd fbb9 	bl	8002b50 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80053de:	bf00      	nop
 80053e0:	3738      	adds	r7, #56	; 0x38
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	40028000 	.word	0x40028000
 80053ec:	40023800 	.word	0x40023800
 80053f0:	40020800 	.word	0x40020800
 80053f4:	40020000 	.word	0x40020000
 80053f8:	40020400 	.word	0x40020400

080053fc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b086      	sub	sp, #24
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005404:	2300      	movs	r3, #0
 8005406:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005408:	4b4d      	ldr	r3, [pc, #308]	; (8005540 <low_level_init+0x144>)
 800540a:	4a4e      	ldr	r2, [pc, #312]	; (8005544 <low_level_init+0x148>)
 800540c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800540e:	4b4c      	ldr	r3, [pc, #304]	; (8005540 <low_level_init+0x144>)
 8005410:	2201      	movs	r2, #1
 8005412:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8005414:	4b4a      	ldr	r3, [pc, #296]	; (8005540 <low_level_init+0x144>)
 8005416:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800541a:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800541c:	4b48      	ldr	r3, [pc, #288]	; (8005540 <low_level_init+0x144>)
 800541e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005422:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8005424:	4b46      	ldr	r3, [pc, #280]	; (8005540 <low_level_init+0x144>)
 8005426:	2201      	movs	r2, #1
 8005428:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800542a:	2300      	movs	r3, #0
 800542c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800542e:	2380      	movs	r3, #128	; 0x80
 8005430:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8005432:	23e1      	movs	r3, #225	; 0xe1
 8005434:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8005436:	2300      	movs	r3, #0
 8005438:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800543a:	2300      	movs	r3, #0
 800543c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800543e:	2300      	movs	r3, #0
 8005440:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8005442:	4a3f      	ldr	r2, [pc, #252]	; (8005540 <low_level_init+0x144>)
 8005444:	f107 0308 	add.w	r3, r7, #8
 8005448:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800544a:	4b3d      	ldr	r3, [pc, #244]	; (8005540 <low_level_init+0x144>)
 800544c:	2200      	movs	r2, #0
 800544e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8005450:	4b3b      	ldr	r3, [pc, #236]	; (8005540 <low_level_init+0x144>)
 8005452:	2200      	movs	r2, #0
 8005454:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8005456:	4b3a      	ldr	r3, [pc, #232]	; (8005540 <low_level_init+0x144>)
 8005458:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800545c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800545e:	4838      	ldr	r0, [pc, #224]	; (8005540 <low_level_init+0x144>)
 8005460:	f7fc fa50 	bl	8001904 <HAL_ETH_Init>
 8005464:	4603      	mov	r3, r0
 8005466:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8005468:	7dfb      	ldrb	r3, [r7, #23]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d108      	bne.n	8005480 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005474:	f043 0304 	orr.w	r3, r3, #4
 8005478:	b2da      	uxtb	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8005480:	2304      	movs	r3, #4
 8005482:	4a31      	ldr	r2, [pc, #196]	; (8005548 <low_level_init+0x14c>)
 8005484:	4931      	ldr	r1, [pc, #196]	; (800554c <low_level_init+0x150>)
 8005486:	482e      	ldr	r0, [pc, #184]	; (8005540 <low_level_init+0x144>)
 8005488:	f7fc fbd8 	bl	8001c3c <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800548c:	2304      	movs	r3, #4
 800548e:	4a30      	ldr	r2, [pc, #192]	; (8005550 <low_level_init+0x154>)
 8005490:	4930      	ldr	r1, [pc, #192]	; (8005554 <low_level_init+0x158>)
 8005492:	482b      	ldr	r0, [pc, #172]	; (8005540 <low_level_init+0x144>)
 8005494:	f7fc fc3b 	bl	8001d0e <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2206      	movs	r2, #6
 800549c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80054a0:	4b27      	ldr	r3, [pc, #156]	; (8005540 <low_level_init+0x144>)
 80054a2:	695b      	ldr	r3, [r3, #20]
 80054a4:	781a      	ldrb	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80054ac:	4b24      	ldr	r3, [pc, #144]	; (8005540 <low_level_init+0x144>)
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	785a      	ldrb	r2, [r3, #1]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80054b8:	4b21      	ldr	r3, [pc, #132]	; (8005540 <low_level_init+0x144>)
 80054ba:	695b      	ldr	r3, [r3, #20]
 80054bc:	789a      	ldrb	r2, [r3, #2]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80054c4:	4b1e      	ldr	r3, [pc, #120]	; (8005540 <low_level_init+0x144>)
 80054c6:	695b      	ldr	r3, [r3, #20]
 80054c8:	78da      	ldrb	r2, [r3, #3]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80054d0:	4b1b      	ldr	r3, [pc, #108]	; (8005540 <low_level_init+0x144>)
 80054d2:	695b      	ldr	r3, [r3, #20]
 80054d4:	791a      	ldrb	r2, [r3, #4]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80054dc:	4b18      	ldr	r3, [pc, #96]	; (8005540 <low_level_init+0x144>)
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	795a      	ldrb	r2, [r3, #5]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80054ee:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80054f6:	f043 030a 	orr.w	r3, r3, #10
 80054fa:	b2da      	uxtb	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8005502:	480f      	ldr	r0, [pc, #60]	; (8005540 <low_level_init+0x144>)
 8005504:	f7fc feac 	bl	8002260 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8005508:	f107 0310 	add.w	r3, r7, #16
 800550c:	461a      	mov	r2, r3
 800550e:	211d      	movs	r1, #29
 8005510:	480b      	ldr	r0, [pc, #44]	; (8005540 <low_level_init+0x144>)
 8005512:	f7fc fdd7 	bl	80020c4 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	f043 030b 	orr.w	r3, r3, #11
 800551c:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	461a      	mov	r2, r3
 8005522:	211d      	movs	r1, #29
 8005524:	4806      	ldr	r0, [pc, #24]	; (8005540 <low_level_init+0x144>)
 8005526:	f7fc fe35 	bl	8002194 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800552a:	f107 0310 	add.w	r3, r7, #16
 800552e:	461a      	mov	r2, r3
 8005530:	211d      	movs	r1, #29
 8005532:	4803      	ldr	r0, [pc, #12]	; (8005540 <low_level_init+0x144>)
 8005534:	f7fc fdc6 	bl	80020c4 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005538:	bf00      	nop
 800553a:	3718      	adds	r7, #24
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	20001cd8 	.word	0x20001cd8
 8005544:	40028000 	.word	0x40028000
 8005548:	20001d20 	.word	0x20001d20
 800554c:	20000408 	.word	0x20000408
 8005550:	20000488 	.word	0x20000488
 8005554:	20001c58 	.word	0x20001c58

08005558 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b08a      	sub	sp, #40	; 0x28
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8005562:	4b4b      	ldr	r3, [pc, #300]	; (8005690 <low_level_output+0x138>)
 8005564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800556a:	2300      	movs	r3, #0
 800556c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800556e:	2300      	movs	r3, #0
 8005570:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8005572:	2300      	movs	r3, #0
 8005574:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8005576:	2300      	movs	r3, #0
 8005578:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800557a:	4b45      	ldr	r3, [pc, #276]	; (8005690 <low_level_output+0x138>)
 800557c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8005580:	2300      	movs	r3, #0
 8005582:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	623b      	str	r3, [r7, #32]
 8005588:	e05a      	b.n	8005640 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	da03      	bge.n	800559a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8005592:	23f8      	movs	r3, #248	; 0xf8
 8005594:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8005598:	e05c      	b.n	8005654 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800559a:	6a3b      	ldr	r3, [r7, #32]
 800559c:	895b      	ldrh	r3, [r3, #10]
 800559e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80055a0:	2300      	movs	r3, #0
 80055a2:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80055a4:	e02f      	b.n	8005606 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80055a6:	69fa      	ldr	r2, [r7, #28]
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	18d0      	adds	r0, r2, r3
 80055ac:	6a3b      	ldr	r3, [r7, #32]
 80055ae:	685a      	ldr	r2, [r3, #4]
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	18d1      	adds	r1, r2, r3
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80055ba:	3304      	adds	r3, #4
 80055bc:	461a      	mov	r2, r3
 80055be:	f00a fd61 	bl	8010084 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	da03      	bge.n	80055d8 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80055d0:	23f8      	movs	r3, #248	; 0xf8
 80055d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80055d6:	e03d      	b.n	8005654 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	4413      	add	r3, r2
 80055e4:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80055e8:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80055f4:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005600:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8005602:	2300      	movs	r3, #0
 8005604:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	4413      	add	r3, r2
 800560c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005610:	4293      	cmp	r3, r2
 8005612:	d8c8      	bhi.n	80055a6 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8005614:	69fa      	ldr	r2, [r7, #28]
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	18d0      	adds	r0, r2, r3
 800561a:	6a3b      	ldr	r3, [r7, #32]
 800561c:	685a      	ldr	r2, [r3, #4]
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	4413      	add	r3, r2
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	4619      	mov	r1, r3
 8005626:	f00a fd2d 	bl	8010084 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800562a:	693a      	ldr	r2, [r7, #16]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	4413      	add	r3, r2
 8005630:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	4413      	add	r3, r2
 8005638:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800563a:	6a3b      	ldr	r3, [r7, #32]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	623b      	str	r3, [r7, #32]
 8005640:	6a3b      	ldr	r3, [r7, #32]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1a1      	bne.n	800558a <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8005646:	6979      	ldr	r1, [r7, #20]
 8005648:	4811      	ldr	r0, [pc, #68]	; (8005690 <low_level_output+0x138>)
 800564a:	f7fc fbcd 	bl	8001de8 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800564e:	2300      	movs	r3, #0
 8005650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8005654:	4b0e      	ldr	r3, [pc, #56]	; (8005690 <low_level_output+0x138>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800565c:	3314      	adds	r3, #20
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0320 	and.w	r3, r3, #32
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00d      	beq.n	8005684 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8005668:	4b09      	ldr	r3, [pc, #36]	; (8005690 <low_level_output+0x138>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005670:	3314      	adds	r3, #20
 8005672:	2220      	movs	r2, #32
 8005674:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8005676:	4b06      	ldr	r3, [pc, #24]	; (8005690 <low_level_output+0x138>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800567e:	3304      	adds	r3, #4
 8005680:	2200      	movs	r2, #0
 8005682:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8005684:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005688:	4618      	mov	r0, r3
 800568a:	3728      	adds	r7, #40	; 0x28
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	20001cd8 	.word	0x20001cd8

08005694 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b08c      	sub	sp, #48	; 0x30
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800569c:	2300      	movs	r3, #0
 800569e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80056a0:	2300      	movs	r3, #0
 80056a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80056a4:	2300      	movs	r3, #0
 80056a6:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80056a8:	2300      	movs	r3, #0
 80056aa:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80056ac:	2300      	movs	r3, #0
 80056ae:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80056b0:	2300      	movs	r3, #0
 80056b2:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80056b4:	2300      	movs	r3, #0
 80056b6:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80056b8:	484f      	ldr	r0, [pc, #316]	; (80057f8 <low_level_input+0x164>)
 80056ba:	f7fc fc7f 	bl	8001fbc <HAL_ETH_GetReceivedFrame>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d001      	beq.n	80056c8 <low_level_input+0x34>

    return NULL;
 80056c4:	2300      	movs	r3, #0
 80056c6:	e092      	b.n	80057ee <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80056c8:	4b4b      	ldr	r3, [pc, #300]	; (80057f8 <low_level_input+0x164>)
 80056ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056cc:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80056ce:	4b4a      	ldr	r3, [pc, #296]	; (80057f8 <low_level_input+0x164>)
 80056d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d2:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80056d4:	89fb      	ldrh	r3, [r7, #14]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d007      	beq.n	80056ea <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80056da:	89fb      	ldrh	r3, [r7, #14]
 80056dc:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80056e0:	4619      	mov	r1, r3
 80056e2:	2000      	movs	r0, #0
 80056e4:	f001 f936 	bl	8006954 <pbuf_alloc>
 80056e8:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80056ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d04b      	beq.n	8005788 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80056f0:	4b41      	ldr	r3, [pc, #260]	; (80057f8 <low_level_input+0x164>)
 80056f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f4:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80056f6:	2300      	movs	r3, #0
 80056f8:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80056fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80056fe:	e040      	b.n	8005782 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8005700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005702:	895b      	ldrh	r3, [r3, #10]
 8005704:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8005706:	2300      	movs	r3, #0
 8005708:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800570a:	e021      	b.n	8005750 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800570c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	18d0      	adds	r0, r2, r3
 8005714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	18d1      	adds	r1, r2, r3
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8005720:	3304      	adds	r3, #4
 8005722:	461a      	mov	r2, r3
 8005724:	f00a fcae 	bl	8010084 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005728:	6a3b      	ldr	r3, [r7, #32]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800572e:	6a3b      	ldr	r3, [r7, #32]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8005734:	69fa      	ldr	r2, [r7, #28]
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	4413      	add	r3, r2
 800573a:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800573e:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8005740:	69ba      	ldr	r2, [r7, #24]
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800574a:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800574c:	2300      	movs	r3, #0
 800574e:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	4413      	add	r3, r2
 8005756:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800575a:	4293      	cmp	r3, r2
 800575c:	d8d6      	bhi.n	800570c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800575e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	18d0      	adds	r0, r2, r3
 8005766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	4413      	add	r3, r2
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	4619      	mov	r1, r3
 8005770:	f00a fc88 	bl	8010084 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005774:	69fa      	ldr	r2, [r7, #28]
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	4413      	add	r3, r2
 800577a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800577c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	62bb      	str	r3, [r7, #40]	; 0x28
 8005782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1bb      	bne.n	8005700 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005788:	4b1b      	ldr	r3, [pc, #108]	; (80057f8 <low_level_input+0x164>)
 800578a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578c:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800578e:	2300      	movs	r3, #0
 8005790:	613b      	str	r3, [r7, #16]
 8005792:	e00b      	b.n	80057ac <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8005794:	6a3b      	ldr	r3, [r7, #32]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800579c:	6a3b      	ldr	r3, [r7, #32]
 800579e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80057a0:	6a3b      	ldr	r3, [r7, #32]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	3301      	adds	r3, #1
 80057aa:	613b      	str	r3, [r7, #16]
 80057ac:	4b12      	ldr	r3, [pc, #72]	; (80057f8 <low_level_input+0x164>)
 80057ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d3ee      	bcc.n	8005794 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80057b6:	4b10      	ldr	r3, [pc, #64]	; (80057f8 <low_level_input+0x164>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80057bc:	4b0e      	ldr	r3, [pc, #56]	; (80057f8 <low_level_input+0x164>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057c4:	3314      	adds	r3, #20
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00d      	beq.n	80057ec <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80057d0:	4b09      	ldr	r3, [pc, #36]	; (80057f8 <low_level_input+0x164>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057d8:	3314      	adds	r3, #20
 80057da:	2280      	movs	r2, #128	; 0x80
 80057dc:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80057de:	4b06      	ldr	r3, [pc, #24]	; (80057f8 <low_level_input+0x164>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057e6:	3308      	adds	r3, #8
 80057e8:	2200      	movs	r2, #0
 80057ea:	601a      	str	r2, [r3, #0]
  }
  return p;
 80057ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3730      	adds	r7, #48	; 0x30
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	20001cd8 	.word	0x20001cd8

080057fc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f7ff ff45 	bl	8005694 <low_level_input>
 800580a:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d010      	beq.n	8005834 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	6879      	ldr	r1, [r7, #4]
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	4798      	blx	r3
 800581c:	4603      	mov	r3, r0
 800581e:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8005820:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d006      	beq.n	8005836 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f001 fb77 	bl	8006f1c <pbuf_free>
    p = NULL;
 800582e:	2300      	movs	r3, #0
 8005830:	60fb      	str	r3, [r7, #12]
 8005832:	e000      	b.n	8005836 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8005834:	bf00      	nop
  }
}
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d106      	bne.n	8005858 <ethernetif_init+0x1c>
 800584a:	4b0e      	ldr	r3, [pc, #56]	; (8005884 <ethernetif_init+0x48>)
 800584c:	f44f 7202 	mov.w	r2, #520	; 0x208
 8005850:	490d      	ldr	r1, [pc, #52]	; (8005888 <ethernetif_init+0x4c>)
 8005852:	480e      	ldr	r0, [pc, #56]	; (800588c <ethernetif_init+0x50>)
 8005854:	f00a fc46 	bl	80100e4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2273      	movs	r2, #115	; 0x73
 800585c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2274      	movs	r2, #116	; 0x74
 8005864:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a09      	ldr	r2, [pc, #36]	; (8005890 <ethernetif_init+0x54>)
 800586c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a08      	ldr	r2, [pc, #32]	; (8005894 <ethernetif_init+0x58>)
 8005872:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f7ff fdc1 	bl	80053fc <low_level_init>

  return ERR_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3708      	adds	r7, #8
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	0801162c 	.word	0x0801162c
 8005888:	08011648 	.word	0x08011648
 800588c:	08011658 	.word	0x08011658
 8005890:	0800e331 	.word	0x0800e331
 8005894:	08005559 	.word	0x08005559

08005898 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800589c:	f7fb fe5e 	bl	800155c <HAL_GetTick>
 80058a0:	4603      	mov	r3, r0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	bd80      	pop	{r7, pc}
	...

080058a8 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80058b0:	2300      	movs	r3, #0
 80058b2:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80058b4:	2300      	movs	r3, #0
 80058b6:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80058be:	089b      	lsrs	r3, r3, #2
 80058c0:	f003 0301 	and.w	r3, r3, #1
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d05d      	beq.n	8005986 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80058ca:	4b34      	ldr	r3, [pc, #208]	; (800599c <ethernetif_update_config+0xf4>)
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d03f      	beq.n	8005952 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80058d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80058d6:	2100      	movs	r1, #0
 80058d8:	4830      	ldr	r0, [pc, #192]	; (800599c <ethernetif_update_config+0xf4>)
 80058da:	f7fc fc5b 	bl	8002194 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80058de:	f7fb fe3d 	bl	800155c <HAL_GetTick>
 80058e2:	4603      	mov	r3, r0
 80058e4:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80058e6:	f107 0308 	add.w	r3, r7, #8
 80058ea:	461a      	mov	r2, r3
 80058ec:	2101      	movs	r1, #1
 80058ee:	482b      	ldr	r0, [pc, #172]	; (800599c <ethernetif_update_config+0xf4>)
 80058f0:	f7fc fbe8 	bl	80020c4 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80058f4:	f7fb fe32 	bl	800155c <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005902:	d828      	bhi.n	8005956 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	f003 0320 	and.w	r3, r3, #32
 800590a:	2b00      	cmp	r3, #0
 800590c:	d0eb      	beq.n	80058e6 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800590e:	f107 0308 	add.w	r3, r7, #8
 8005912:	461a      	mov	r2, r3
 8005914:	2110      	movs	r1, #16
 8005916:	4821      	ldr	r0, [pc, #132]	; (800599c <ethernetif_update_config+0xf4>)
 8005918:	f7fc fbd4 	bl	80020c4 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f003 0304 	and.w	r3, r3, #4
 8005922:	2b00      	cmp	r3, #0
 8005924:	d004      	beq.n	8005930 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005926:	4b1d      	ldr	r3, [pc, #116]	; (800599c <ethernetif_update_config+0xf4>)
 8005928:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800592c:	60da      	str	r2, [r3, #12]
 800592e:	e002      	b.n	8005936 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8005930:	4b1a      	ldr	r3, [pc, #104]	; (800599c <ethernetif_update_config+0xf4>)
 8005932:	2200      	movs	r2, #0
 8005934:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d003      	beq.n	8005948 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8005940:	4b16      	ldr	r3, [pc, #88]	; (800599c <ethernetif_update_config+0xf4>)
 8005942:	2200      	movs	r2, #0
 8005944:	609a      	str	r2, [r3, #8]
 8005946:	e016      	b.n	8005976 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8005948:	4b14      	ldr	r3, [pc, #80]	; (800599c <ethernetif_update_config+0xf4>)
 800594a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800594e:	609a      	str	r2, [r3, #8]
 8005950:	e011      	b.n	8005976 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8005952:	bf00      	nop
 8005954:	e000      	b.n	8005958 <ethernetif_update_config+0xb0>
          goto error;
 8005956:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005958:	4b10      	ldr	r3, [pc, #64]	; (800599c <ethernetif_update_config+0xf4>)
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	08db      	lsrs	r3, r3, #3
 800595e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8005960:	4b0e      	ldr	r3, [pc, #56]	; (800599c <ethernetif_update_config+0xf4>)
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	085b      	lsrs	r3, r3, #1
 8005966:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005968:	4313      	orrs	r3, r2
 800596a:	b29b      	uxth	r3, r3
 800596c:	461a      	mov	r2, r3
 800596e:	2100      	movs	r1, #0
 8005970:	480a      	ldr	r0, [pc, #40]	; (800599c <ethernetif_update_config+0xf4>)
 8005972:	f7fc fc0f 	bl	8002194 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8005976:	2100      	movs	r1, #0
 8005978:	4808      	ldr	r0, [pc, #32]	; (800599c <ethernetif_update_config+0xf4>)
 800597a:	f7fc fccf 	bl	800231c <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800597e:	4807      	ldr	r0, [pc, #28]	; (800599c <ethernetif_update_config+0xf4>)
 8005980:	f7fc fc6e 	bl	8002260 <HAL_ETH_Start>
 8005984:	e002      	b.n	800598c <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8005986:	4805      	ldr	r0, [pc, #20]	; (800599c <ethernetif_update_config+0xf4>)
 8005988:	f7fc fc99 	bl	80022be <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 f807 	bl	80059a0 <ethernetif_notify_conn_changed>
}
 8005992:	bf00      	nop
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	20001cd8 	.word	0x20001cd8

080059a0 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	4603      	mov	r3, r0
 80059bc:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80059be:	88fb      	ldrh	r3, [r7, #6]
 80059c0:	021b      	lsls	r3, r3, #8
 80059c2:	b21a      	sxth	r2, r3
 80059c4:	88fb      	ldrh	r3, [r7, #6]
 80059c6:	0a1b      	lsrs	r3, r3, #8
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	b21b      	sxth	r3, r3
 80059cc:	4313      	orrs	r3, r2
 80059ce:	b21b      	sxth	r3, r3
 80059d0:	b29b      	uxth	r3, r3
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	370c      	adds	r7, #12
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr

080059de <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80059de:	b480      	push	{r7}
 80059e0:	b083      	sub	sp, #12
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	061a      	lsls	r2, r3, #24
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	021b      	lsls	r3, r3, #8
 80059ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80059f2:	431a      	orrs	r2, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	0a1b      	lsrs	r3, r3, #8
 80059f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80059fc:	431a      	orrs	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	0e1b      	lsrs	r3, r3, #24
 8005a02:	4313      	orrs	r3, r2
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8005a16:	2300      	movs	r3, #0
 8005a18:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8005a1a:	f000 f8d5 	bl	8005bc8 <mem_init>
  memp_init();
 8005a1e:	f000 fbdb 	bl	80061d8 <memp_init>
  pbuf_init();
  netif_init();
 8005a22:	f000 fc93 	bl	800634c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8005a26:	f007 fe7d 	bl	800d724 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8005a2a:	f001 fd97 	bl	800755c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8005a2e:	f007 fdef 	bl	800d610 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8005a32:	bf00      	nop
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
	...

08005a3c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	4603      	mov	r3, r0
 8005a44:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8005a46:	4b05      	ldr	r3, [pc, #20]	; (8005a5c <ptr_to_mem+0x20>)
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	88fb      	ldrh	r3, [r7, #6]
 8005a4c:	4413      	add	r3, r2
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	370c      	adds	r7, #12
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	2000009c 	.word	0x2000009c

08005a60 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8005a68:	4b05      	ldr	r3, [pc, #20]	; (8005a80 <mem_to_ptr+0x20>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	b29b      	uxth	r3, r3
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	2000009c 	.word	0x2000009c

08005a84 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8005a84:	b590      	push	{r4, r7, lr}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005a8c:	4b45      	ldr	r3, [pc, #276]	; (8005ba4 <plug_holes+0x120>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d206      	bcs.n	8005aa4 <plug_holes+0x20>
 8005a96:	4b44      	ldr	r3, [pc, #272]	; (8005ba8 <plug_holes+0x124>)
 8005a98:	f240 12df 	movw	r2, #479	; 0x1df
 8005a9c:	4943      	ldr	r1, [pc, #268]	; (8005bac <plug_holes+0x128>)
 8005a9e:	4844      	ldr	r0, [pc, #272]	; (8005bb0 <plug_holes+0x12c>)
 8005aa0:	f00a fb20 	bl	80100e4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8005aa4:	4b43      	ldr	r3, [pc, #268]	; (8005bb4 <plug_holes+0x130>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d306      	bcc.n	8005abc <plug_holes+0x38>
 8005aae:	4b3e      	ldr	r3, [pc, #248]	; (8005ba8 <plug_holes+0x124>)
 8005ab0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005ab4:	4940      	ldr	r1, [pc, #256]	; (8005bb8 <plug_holes+0x134>)
 8005ab6:	483e      	ldr	r0, [pc, #248]	; (8005bb0 <plug_holes+0x12c>)
 8005ab8:	f00a fb14 	bl	80100e4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	791b      	ldrb	r3, [r3, #4]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d006      	beq.n	8005ad2 <plug_holes+0x4e>
 8005ac4:	4b38      	ldr	r3, [pc, #224]	; (8005ba8 <plug_holes+0x124>)
 8005ac6:	f240 12e1 	movw	r2, #481	; 0x1e1
 8005aca:	493c      	ldr	r1, [pc, #240]	; (8005bbc <plug_holes+0x138>)
 8005acc:	4838      	ldr	r0, [pc, #224]	; (8005bb0 <plug_holes+0x12c>)
 8005ace:	f00a fb09 	bl	80100e4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	881b      	ldrh	r3, [r3, #0]
 8005ad6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005ada:	d906      	bls.n	8005aea <plug_holes+0x66>
 8005adc:	4b32      	ldr	r3, [pc, #200]	; (8005ba8 <plug_holes+0x124>)
 8005ade:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8005ae2:	4937      	ldr	r1, [pc, #220]	; (8005bc0 <plug_holes+0x13c>)
 8005ae4:	4832      	ldr	r0, [pc, #200]	; (8005bb0 <plug_holes+0x12c>)
 8005ae6:	f00a fafd 	bl	80100e4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	881b      	ldrh	r3, [r3, #0]
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7ff ffa4 	bl	8005a3c <ptr_to_mem>
 8005af4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d024      	beq.n	8005b48 <plug_holes+0xc4>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	791b      	ldrb	r3, [r3, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d120      	bne.n	8005b48 <plug_holes+0xc4>
 8005b06:	4b2b      	ldr	r3, [pc, #172]	; (8005bb4 <plug_holes+0x130>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d01b      	beq.n	8005b48 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8005b10:	4b2c      	ldr	r3, [pc, #176]	; (8005bc4 <plug_holes+0x140>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d102      	bne.n	8005b20 <plug_holes+0x9c>
      lfree = mem;
 8005b1a:	4a2a      	ldr	r2, [pc, #168]	; (8005bc4 <plug_holes+0x140>)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	881a      	ldrh	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	881b      	ldrh	r3, [r3, #0]
 8005b2c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005b30:	d00a      	beq.n	8005b48 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	881b      	ldrh	r3, [r3, #0]
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7ff ff80 	bl	8005a3c <ptr_to_mem>
 8005b3c:	4604      	mov	r4, r0
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f7ff ff8e 	bl	8005a60 <mem_to_ptr>
 8005b44:	4603      	mov	r3, r0
 8005b46:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	885b      	ldrh	r3, [r3, #2]
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f7ff ff75 	bl	8005a3c <ptr_to_mem>
 8005b52:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d01f      	beq.n	8005b9c <plug_holes+0x118>
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	791b      	ldrb	r3, [r3, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d11b      	bne.n	8005b9c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8005b64:	4b17      	ldr	r3, [pc, #92]	; (8005bc4 <plug_holes+0x140>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d102      	bne.n	8005b74 <plug_holes+0xf0>
      lfree = pmem;
 8005b6e:	4a15      	ldr	r2, [pc, #84]	; (8005bc4 <plug_holes+0x140>)
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	881a      	ldrh	r2, [r3, #0]
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	881b      	ldrh	r3, [r3, #0]
 8005b80:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005b84:	d00a      	beq.n	8005b9c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	881b      	ldrh	r3, [r3, #0]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7ff ff56 	bl	8005a3c <ptr_to_mem>
 8005b90:	4604      	mov	r4, r0
 8005b92:	68b8      	ldr	r0, [r7, #8]
 8005b94:	f7ff ff64 	bl	8005a60 <mem_to_ptr>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8005b9c:	bf00      	nop
 8005b9e:	3714      	adds	r7, #20
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd90      	pop	{r4, r7, pc}
 8005ba4:	2000009c 	.word	0x2000009c
 8005ba8:	08011680 	.word	0x08011680
 8005bac:	080116b0 	.word	0x080116b0
 8005bb0:	080116c8 	.word	0x080116c8
 8005bb4:	200000a0 	.word	0x200000a0
 8005bb8:	080116f0 	.word	0x080116f0
 8005bbc:	0801170c 	.word	0x0801170c
 8005bc0:	08011728 	.word	0x08011728
 8005bc4:	200000a4 	.word	0x200000a4

08005bc8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005bce:	4b18      	ldr	r3, [pc, #96]	; (8005c30 <mem_init+0x68>)
 8005bd0:	3303      	adds	r3, #3
 8005bd2:	f023 0303 	bic.w	r3, r3, #3
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	4b16      	ldr	r3, [pc, #88]	; (8005c34 <mem_init+0x6c>)
 8005bda:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8005bdc:	4b15      	ldr	r3, [pc, #84]	; (8005c34 <mem_init+0x6c>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005be8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8005bf6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8005bfa:	f7ff ff1f 	bl	8005a3c <ptr_to_mem>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	4a0d      	ldr	r2, [pc, #52]	; (8005c38 <mem_init+0x70>)
 8005c02:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8005c04:	4b0c      	ldr	r3, [pc, #48]	; (8005c38 <mem_init+0x70>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8005c0c:	4b0a      	ldr	r3, [pc, #40]	; (8005c38 <mem_init+0x70>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005c14:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8005c16:	4b08      	ldr	r3, [pc, #32]	; (8005c38 <mem_init+0x70>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005c1e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8005c20:	4b04      	ldr	r3, [pc, #16]	; (8005c34 <mem_init+0x6c>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a05      	ldr	r2, [pc, #20]	; (8005c3c <mem_init+0x74>)
 8005c26:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8005c28:	bf00      	nop
 8005c2a:	3708      	adds	r7, #8
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	20003508 	.word	0x20003508
 8005c34:	2000009c 	.word	0x2000009c
 8005c38:	200000a0 	.word	0x200000a0
 8005c3c:	200000a4 	.word	0x200000a4

08005c40 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b086      	sub	sp, #24
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f7ff ff09 	bl	8005a60 <mem_to_ptr>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	881b      	ldrh	r3, [r3, #0]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7ff fef0 	bl	8005a3c <ptr_to_mem>
 8005c5c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	885b      	ldrh	r3, [r3, #2]
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7ff feea 	bl	8005a3c <ptr_to_mem>
 8005c68:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	881b      	ldrh	r3, [r3, #0]
 8005c6e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005c72:	d818      	bhi.n	8005ca6 <mem_link_valid+0x66>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	885b      	ldrh	r3, [r3, #2]
 8005c78:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005c7c:	d813      	bhi.n	8005ca6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005c82:	8afa      	ldrh	r2, [r7, #22]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d004      	beq.n	8005c92 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	881b      	ldrh	r3, [r3, #0]
 8005c8c:	8afa      	ldrh	r2, [r7, #22]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d109      	bne.n	8005ca6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005c92:	4b08      	ldr	r3, [pc, #32]	; (8005cb4 <mem_link_valid+0x74>)
 8005c94:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d006      	beq.n	8005caa <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	885b      	ldrh	r3, [r3, #2]
 8005ca0:	8afa      	ldrh	r2, [r7, #22]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d001      	beq.n	8005caa <mem_link_valid+0x6a>
    return 0;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	e000      	b.n	8005cac <mem_link_valid+0x6c>
  }
  return 1;
 8005caa:	2301      	movs	r3, #1
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3718      	adds	r7, #24
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	200000a0 	.word	0x200000a0

08005cb8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d04c      	beq.n	8005d60 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f003 0303 	and.w	r3, r3, #3
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d007      	beq.n	8005ce0 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8005cd0:	4b25      	ldr	r3, [pc, #148]	; (8005d68 <mem_free+0xb0>)
 8005cd2:	f240 2273 	movw	r2, #627	; 0x273
 8005cd6:	4925      	ldr	r1, [pc, #148]	; (8005d6c <mem_free+0xb4>)
 8005cd8:	4825      	ldr	r0, [pc, #148]	; (8005d70 <mem_free+0xb8>)
 8005cda:	f00a fa03 	bl	80100e4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005cde:	e040      	b.n	8005d62 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	3b08      	subs	r3, #8
 8005ce4:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8005ce6:	4b23      	ldr	r3, [pc, #140]	; (8005d74 <mem_free+0xbc>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d306      	bcc.n	8005cfe <mem_free+0x46>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f103 020c 	add.w	r2, r3, #12
 8005cf6:	4b20      	ldr	r3, [pc, #128]	; (8005d78 <mem_free+0xc0>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d907      	bls.n	8005d0e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8005cfe:	4b1a      	ldr	r3, [pc, #104]	; (8005d68 <mem_free+0xb0>)
 8005d00:	f240 227f 	movw	r2, #639	; 0x27f
 8005d04:	491d      	ldr	r1, [pc, #116]	; (8005d7c <mem_free+0xc4>)
 8005d06:	481a      	ldr	r0, [pc, #104]	; (8005d70 <mem_free+0xb8>)
 8005d08:	f00a f9ec 	bl	80100e4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005d0c:	e029      	b.n	8005d62 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	791b      	ldrb	r3, [r3, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d107      	bne.n	8005d26 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8005d16:	4b14      	ldr	r3, [pc, #80]	; (8005d68 <mem_free+0xb0>)
 8005d18:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8005d1c:	4918      	ldr	r1, [pc, #96]	; (8005d80 <mem_free+0xc8>)
 8005d1e:	4814      	ldr	r0, [pc, #80]	; (8005d70 <mem_free+0xb8>)
 8005d20:	f00a f9e0 	bl	80100e4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005d24:	e01d      	b.n	8005d62 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f7ff ff8a 	bl	8005c40 <mem_link_valid>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d107      	bne.n	8005d42 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8005d32:	4b0d      	ldr	r3, [pc, #52]	; (8005d68 <mem_free+0xb0>)
 8005d34:	f240 2295 	movw	r2, #661	; 0x295
 8005d38:	4912      	ldr	r1, [pc, #72]	; (8005d84 <mem_free+0xcc>)
 8005d3a:	480d      	ldr	r0, [pc, #52]	; (8005d70 <mem_free+0xb8>)
 8005d3c:	f00a f9d2 	bl	80100e4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005d40:	e00f      	b.n	8005d62 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8005d48:	4b0f      	ldr	r3, [pc, #60]	; (8005d88 <mem_free+0xd0>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d202      	bcs.n	8005d58 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8005d52:	4a0d      	ldr	r2, [pc, #52]	; (8005d88 <mem_free+0xd0>)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f7ff fe93 	bl	8005a84 <plug_holes>
 8005d5e:	e000      	b.n	8005d62 <mem_free+0xaa>
    return;
 8005d60:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8005d62:	3710      	adds	r7, #16
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	08011680 	.word	0x08011680
 8005d6c:	08011754 	.word	0x08011754
 8005d70:	080116c8 	.word	0x080116c8
 8005d74:	2000009c 	.word	0x2000009c
 8005d78:	200000a0 	.word	0x200000a0
 8005d7c:	08011778 	.word	0x08011778
 8005d80:	08011794 	.word	0x08011794
 8005d84:	080117bc 	.word	0x080117bc
 8005d88:	200000a4 	.word	0x200000a4

08005d8c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b088      	sub	sp, #32
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	460b      	mov	r3, r1
 8005d96:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005d98:	887b      	ldrh	r3, [r7, #2]
 8005d9a:	3303      	adds	r3, #3
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	f023 0303 	bic.w	r3, r3, #3
 8005da2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8005da4:	8bfb      	ldrh	r3, [r7, #30]
 8005da6:	2b0b      	cmp	r3, #11
 8005da8:	d801      	bhi.n	8005dae <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005daa:	230c      	movs	r3, #12
 8005dac:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8005dae:	8bfb      	ldrh	r3, [r7, #30]
 8005db0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005db4:	d803      	bhi.n	8005dbe <mem_trim+0x32>
 8005db6:	8bfa      	ldrh	r2, [r7, #30]
 8005db8:	887b      	ldrh	r3, [r7, #2]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d201      	bcs.n	8005dc2 <mem_trim+0x36>
    return NULL;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	e0cc      	b.n	8005f5c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005dc2:	4b68      	ldr	r3, [pc, #416]	; (8005f64 <mem_trim+0x1d8>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d304      	bcc.n	8005dd6 <mem_trim+0x4a>
 8005dcc:	4b66      	ldr	r3, [pc, #408]	; (8005f68 <mem_trim+0x1dc>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d306      	bcc.n	8005de4 <mem_trim+0x58>
 8005dd6:	4b65      	ldr	r3, [pc, #404]	; (8005f6c <mem_trim+0x1e0>)
 8005dd8:	f240 22d1 	movw	r2, #721	; 0x2d1
 8005ddc:	4964      	ldr	r1, [pc, #400]	; (8005f70 <mem_trim+0x1e4>)
 8005dde:	4865      	ldr	r0, [pc, #404]	; (8005f74 <mem_trim+0x1e8>)
 8005de0:	f00a f980 	bl	80100e4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005de4:	4b5f      	ldr	r3, [pc, #380]	; (8005f64 <mem_trim+0x1d8>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d304      	bcc.n	8005df8 <mem_trim+0x6c>
 8005dee:	4b5e      	ldr	r3, [pc, #376]	; (8005f68 <mem_trim+0x1dc>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d301      	bcc.n	8005dfc <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	e0af      	b.n	8005f5c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	3b08      	subs	r3, #8
 8005e00:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8005e02:	69b8      	ldr	r0, [r7, #24]
 8005e04:	f7ff fe2c 	bl	8005a60 <mem_to_ptr>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	881a      	ldrh	r2, [r3, #0]
 8005e10:	8afb      	ldrh	r3, [r7, #22]
 8005e12:	1ad3      	subs	r3, r2, r3
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	3b08      	subs	r3, #8
 8005e18:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8005e1a:	8bfa      	ldrh	r2, [r7, #30]
 8005e1c:	8abb      	ldrh	r3, [r7, #20]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d906      	bls.n	8005e30 <mem_trim+0xa4>
 8005e22:	4b52      	ldr	r3, [pc, #328]	; (8005f6c <mem_trim+0x1e0>)
 8005e24:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8005e28:	4953      	ldr	r1, [pc, #332]	; (8005f78 <mem_trim+0x1ec>)
 8005e2a:	4852      	ldr	r0, [pc, #328]	; (8005f74 <mem_trim+0x1e8>)
 8005e2c:	f00a f95a 	bl	80100e4 <iprintf>
  if (newsize > size) {
 8005e30:	8bfa      	ldrh	r2, [r7, #30]
 8005e32:	8abb      	ldrh	r3, [r7, #20]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d901      	bls.n	8005e3c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	e08f      	b.n	8005f5c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8005e3c:	8bfa      	ldrh	r2, [r7, #30]
 8005e3e:	8abb      	ldrh	r3, [r7, #20]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d101      	bne.n	8005e48 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	e089      	b.n	8005f5c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	881b      	ldrh	r3, [r3, #0]
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7ff fdf5 	bl	8005a3c <ptr_to_mem>
 8005e52:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	791b      	ldrb	r3, [r3, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d13f      	bne.n	8005edc <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	881b      	ldrh	r3, [r3, #0]
 8005e60:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005e64:	d106      	bne.n	8005e74 <mem_trim+0xe8>
 8005e66:	4b41      	ldr	r3, [pc, #260]	; (8005f6c <mem_trim+0x1e0>)
 8005e68:	f240 22f5 	movw	r2, #757	; 0x2f5
 8005e6c:	4943      	ldr	r1, [pc, #268]	; (8005f7c <mem_trim+0x1f0>)
 8005e6e:	4841      	ldr	r0, [pc, #260]	; (8005f74 <mem_trim+0x1e8>)
 8005e70:	f00a f938 	bl	80100e4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	881b      	ldrh	r3, [r3, #0]
 8005e78:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005e7a:	8afa      	ldrh	r2, [r7, #22]
 8005e7c:	8bfb      	ldrh	r3, [r7, #30]
 8005e7e:	4413      	add	r3, r2
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	3308      	adds	r3, #8
 8005e84:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8005e86:	4b3e      	ldr	r3, [pc, #248]	; (8005f80 <mem_trim+0x1f4>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	693a      	ldr	r2, [r7, #16]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d106      	bne.n	8005e9e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8005e90:	89fb      	ldrh	r3, [r7, #14]
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7ff fdd2 	bl	8005a3c <ptr_to_mem>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	4a39      	ldr	r2, [pc, #228]	; (8005f80 <mem_trim+0x1f4>)
 8005e9c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8005e9e:	89fb      	ldrh	r3, [r7, #14]
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7ff fdcb 	bl	8005a3c <ptr_to_mem>
 8005ea6:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	89ba      	ldrh	r2, [r7, #12]
 8005eb2:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	8afa      	ldrh	r2, [r7, #22]
 8005eb8:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	89fa      	ldrh	r2, [r7, #14]
 8005ebe:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	881b      	ldrh	r3, [r3, #0]
 8005ec4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005ec8:	d047      	beq.n	8005f5a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	881b      	ldrh	r3, [r3, #0]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7ff fdb4 	bl	8005a3c <ptr_to_mem>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	89fb      	ldrh	r3, [r7, #14]
 8005ed8:	8053      	strh	r3, [r2, #2]
 8005eda:	e03e      	b.n	8005f5a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005edc:	8bfb      	ldrh	r3, [r7, #30]
 8005ede:	f103 0214 	add.w	r2, r3, #20
 8005ee2:	8abb      	ldrh	r3, [r7, #20]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d838      	bhi.n	8005f5a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005ee8:	8afa      	ldrh	r2, [r7, #22]
 8005eea:	8bfb      	ldrh	r3, [r7, #30]
 8005eec:	4413      	add	r3, r2
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	3308      	adds	r3, #8
 8005ef2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005efc:	d106      	bne.n	8005f0c <mem_trim+0x180>
 8005efe:	4b1b      	ldr	r3, [pc, #108]	; (8005f6c <mem_trim+0x1e0>)
 8005f00:	f240 3216 	movw	r2, #790	; 0x316
 8005f04:	491d      	ldr	r1, [pc, #116]	; (8005f7c <mem_trim+0x1f0>)
 8005f06:	481b      	ldr	r0, [pc, #108]	; (8005f74 <mem_trim+0x1e8>)
 8005f08:	f00a f8ec 	bl	80100e4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8005f0c:	89fb      	ldrh	r3, [r7, #14]
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7ff fd94 	bl	8005a3c <ptr_to_mem>
 8005f14:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8005f16:	4b1a      	ldr	r3, [pc, #104]	; (8005f80 <mem_trim+0x1f4>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d202      	bcs.n	8005f26 <mem_trim+0x19a>
      lfree = mem2;
 8005f20:	4a17      	ldr	r2, [pc, #92]	; (8005f80 <mem_trim+0x1f4>)
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	881a      	ldrh	r2, [r3, #0]
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	8afa      	ldrh	r2, [r7, #22]
 8005f38:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	89fa      	ldrh	r2, [r7, #14]
 8005f3e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	881b      	ldrh	r3, [r3, #0]
 8005f44:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005f48:	d007      	beq.n	8005f5a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	881b      	ldrh	r3, [r3, #0]
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7ff fd74 	bl	8005a3c <ptr_to_mem>
 8005f54:	4602      	mov	r2, r0
 8005f56:	89fb      	ldrh	r3, [r7, #14]
 8005f58:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8005f5a:	687b      	ldr	r3, [r7, #4]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3720      	adds	r7, #32
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	2000009c 	.word	0x2000009c
 8005f68:	200000a0 	.word	0x200000a0
 8005f6c:	08011680 	.word	0x08011680
 8005f70:	080117f0 	.word	0x080117f0
 8005f74:	080116c8 	.word	0x080116c8
 8005f78:	08011808 	.word	0x08011808
 8005f7c:	08011828 	.word	0x08011828
 8005f80:	200000a4 	.word	0x200000a4

08005f84 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b088      	sub	sp, #32
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8005f8e:	88fb      	ldrh	r3, [r7, #6]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d101      	bne.n	8005f98 <mem_malloc+0x14>
    return NULL;
 8005f94:	2300      	movs	r3, #0
 8005f96:	e0d9      	b.n	800614c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005f98:	88fb      	ldrh	r3, [r7, #6]
 8005f9a:	3303      	adds	r3, #3
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	f023 0303 	bic.w	r3, r3, #3
 8005fa2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8005fa4:	8bbb      	ldrh	r3, [r7, #28]
 8005fa6:	2b0b      	cmp	r3, #11
 8005fa8:	d801      	bhi.n	8005fae <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8005faa:	230c      	movs	r3, #12
 8005fac:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8005fae:	8bbb      	ldrh	r3, [r7, #28]
 8005fb0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005fb4:	d803      	bhi.n	8005fbe <mem_malloc+0x3a>
 8005fb6:	8bba      	ldrh	r2, [r7, #28]
 8005fb8:	88fb      	ldrh	r3, [r7, #6]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d201      	bcs.n	8005fc2 <mem_malloc+0x3e>
    return NULL;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	e0c4      	b.n	800614c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005fc2:	4b64      	ldr	r3, [pc, #400]	; (8006154 <mem_malloc+0x1d0>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7ff fd4a 	bl	8005a60 <mem_to_ptr>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	83fb      	strh	r3, [r7, #30]
 8005fd0:	e0b4      	b.n	800613c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8005fd2:	8bfb      	ldrh	r3, [r7, #30]
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7ff fd31 	bl	8005a3c <ptr_to_mem>
 8005fda:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	791b      	ldrb	r3, [r3, #4]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f040 80a4 	bne.w	800612e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	881b      	ldrh	r3, [r3, #0]
 8005fea:	461a      	mov	r2, r3
 8005fec:	8bfb      	ldrh	r3, [r7, #30]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	f1a3 0208 	sub.w	r2, r3, #8
 8005ff4:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	f0c0 8099 	bcc.w	800612e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	881b      	ldrh	r3, [r3, #0]
 8006000:	461a      	mov	r2, r3
 8006002:	8bfb      	ldrh	r3, [r7, #30]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	f1a3 0208 	sub.w	r2, r3, #8
 800600a:	8bbb      	ldrh	r3, [r7, #28]
 800600c:	3314      	adds	r3, #20
 800600e:	429a      	cmp	r2, r3
 8006010:	d333      	bcc.n	800607a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8006012:	8bfa      	ldrh	r2, [r7, #30]
 8006014:	8bbb      	ldrh	r3, [r7, #28]
 8006016:	4413      	add	r3, r2
 8006018:	b29b      	uxth	r3, r3
 800601a:	3308      	adds	r3, #8
 800601c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800601e:	8a7b      	ldrh	r3, [r7, #18]
 8006020:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006024:	d106      	bne.n	8006034 <mem_malloc+0xb0>
 8006026:	4b4c      	ldr	r3, [pc, #304]	; (8006158 <mem_malloc+0x1d4>)
 8006028:	f240 3287 	movw	r2, #903	; 0x387
 800602c:	494b      	ldr	r1, [pc, #300]	; (800615c <mem_malloc+0x1d8>)
 800602e:	484c      	ldr	r0, [pc, #304]	; (8006160 <mem_malloc+0x1dc>)
 8006030:	f00a f858 	bl	80100e4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8006034:	8a7b      	ldrh	r3, [r7, #18]
 8006036:	4618      	mov	r0, r3
 8006038:	f7ff fd00 	bl	8005a3c <ptr_to_mem>
 800603c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	881a      	ldrh	r2, [r3, #0]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	8bfa      	ldrh	r2, [r7, #30]
 8006050:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	8a7a      	ldrh	r2, [r7, #18]
 8006056:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	2201      	movs	r2, #1
 800605c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	881b      	ldrh	r3, [r3, #0]
 8006062:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006066:	d00b      	beq.n	8006080 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	881b      	ldrh	r3, [r3, #0]
 800606c:	4618      	mov	r0, r3
 800606e:	f7ff fce5 	bl	8005a3c <ptr_to_mem>
 8006072:	4602      	mov	r2, r0
 8006074:	8a7b      	ldrh	r3, [r7, #18]
 8006076:	8053      	strh	r3, [r2, #2]
 8006078:	e002      	b.n	8006080 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	2201      	movs	r2, #1
 800607e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8006080:	4b34      	ldr	r3, [pc, #208]	; (8006154 <mem_malloc+0x1d0>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	697a      	ldr	r2, [r7, #20]
 8006086:	429a      	cmp	r2, r3
 8006088:	d127      	bne.n	80060da <mem_malloc+0x156>
          struct mem *cur = lfree;
 800608a:	4b32      	ldr	r3, [pc, #200]	; (8006154 <mem_malloc+0x1d0>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8006090:	e005      	b.n	800609e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	881b      	ldrh	r3, [r3, #0]
 8006096:	4618      	mov	r0, r3
 8006098:	f7ff fcd0 	bl	8005a3c <ptr_to_mem>
 800609c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	791b      	ldrb	r3, [r3, #4]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d004      	beq.n	80060b0 <mem_malloc+0x12c>
 80060a6:	4b2f      	ldr	r3, [pc, #188]	; (8006164 <mem_malloc+0x1e0>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	69ba      	ldr	r2, [r7, #24]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d1f0      	bne.n	8006092 <mem_malloc+0x10e>
          }
          lfree = cur;
 80060b0:	4a28      	ldr	r2, [pc, #160]	; (8006154 <mem_malloc+0x1d0>)
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80060b6:	4b27      	ldr	r3, [pc, #156]	; (8006154 <mem_malloc+0x1d0>)
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	4b2a      	ldr	r3, [pc, #168]	; (8006164 <mem_malloc+0x1e0>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	429a      	cmp	r2, r3
 80060c0:	d00b      	beq.n	80060da <mem_malloc+0x156>
 80060c2:	4b24      	ldr	r3, [pc, #144]	; (8006154 <mem_malloc+0x1d0>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	791b      	ldrb	r3, [r3, #4]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d006      	beq.n	80060da <mem_malloc+0x156>
 80060cc:	4b22      	ldr	r3, [pc, #136]	; (8006158 <mem_malloc+0x1d4>)
 80060ce:	f240 32b5 	movw	r2, #949	; 0x3b5
 80060d2:	4925      	ldr	r1, [pc, #148]	; (8006168 <mem_malloc+0x1e4>)
 80060d4:	4822      	ldr	r0, [pc, #136]	; (8006160 <mem_malloc+0x1dc>)
 80060d6:	f00a f805 	bl	80100e4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80060da:	8bba      	ldrh	r2, [r7, #28]
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	4413      	add	r3, r2
 80060e0:	3308      	adds	r3, #8
 80060e2:	4a20      	ldr	r2, [pc, #128]	; (8006164 <mem_malloc+0x1e0>)
 80060e4:	6812      	ldr	r2, [r2, #0]
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d906      	bls.n	80060f8 <mem_malloc+0x174>
 80060ea:	4b1b      	ldr	r3, [pc, #108]	; (8006158 <mem_malloc+0x1d4>)
 80060ec:	f240 32b9 	movw	r2, #953	; 0x3b9
 80060f0:	491e      	ldr	r1, [pc, #120]	; (800616c <mem_malloc+0x1e8>)
 80060f2:	481b      	ldr	r0, [pc, #108]	; (8006160 <mem_malloc+0x1dc>)
 80060f4:	f009 fff6 	bl	80100e4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	f003 0303 	and.w	r3, r3, #3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d006      	beq.n	8006110 <mem_malloc+0x18c>
 8006102:	4b15      	ldr	r3, [pc, #84]	; (8006158 <mem_malloc+0x1d4>)
 8006104:	f240 32bb 	movw	r2, #955	; 0x3bb
 8006108:	4919      	ldr	r1, [pc, #100]	; (8006170 <mem_malloc+0x1ec>)
 800610a:	4815      	ldr	r0, [pc, #84]	; (8006160 <mem_malloc+0x1dc>)
 800610c:	f009 ffea 	bl	80100e4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	f003 0303 	and.w	r3, r3, #3
 8006116:	2b00      	cmp	r3, #0
 8006118:	d006      	beq.n	8006128 <mem_malloc+0x1a4>
 800611a:	4b0f      	ldr	r3, [pc, #60]	; (8006158 <mem_malloc+0x1d4>)
 800611c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8006120:	4914      	ldr	r1, [pc, #80]	; (8006174 <mem_malloc+0x1f0>)
 8006122:	480f      	ldr	r0, [pc, #60]	; (8006160 <mem_malloc+0x1dc>)
 8006124:	f009 ffde 	bl	80100e4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	3308      	adds	r3, #8
 800612c:	e00e      	b.n	800614c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800612e:	8bfb      	ldrh	r3, [r7, #30]
 8006130:	4618      	mov	r0, r3
 8006132:	f7ff fc83 	bl	8005a3c <ptr_to_mem>
 8006136:	4603      	mov	r3, r0
 8006138:	881b      	ldrh	r3, [r3, #0]
 800613a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800613c:	8bfa      	ldrh	r2, [r7, #30]
 800613e:	8bbb      	ldrh	r3, [r7, #28]
 8006140:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8006144:	429a      	cmp	r2, r3
 8006146:	f4ff af44 	bcc.w	8005fd2 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3720      	adds	r7, #32
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	200000a4 	.word	0x200000a4
 8006158:	08011680 	.word	0x08011680
 800615c:	08011828 	.word	0x08011828
 8006160:	080116c8 	.word	0x080116c8
 8006164:	200000a0 	.word	0x200000a0
 8006168:	0801183c 	.word	0x0801183c
 800616c:	08011858 	.word	0x08011858
 8006170:	08011888 	.word	0x08011888
 8006174:	080118b8 	.word	0x080118b8

08006178 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	2200      	movs	r2, #0
 8006186:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	3303      	adds	r3, #3
 800618e:	f023 0303 	bic.w	r3, r3, #3
 8006192:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006194:	2300      	movs	r3, #0
 8006196:	60fb      	str	r3, [r7, #12]
 8006198:	e011      	b.n	80061be <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	68ba      	ldr	r2, [r7, #8]
 80061aa:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	881b      	ldrh	r3, [r3, #0]
 80061b0:	461a      	mov	r2, r3
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	4413      	add	r3, r2
 80061b6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	3301      	adds	r3, #1
 80061bc:	60fb      	str	r3, [r7, #12]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	885b      	ldrh	r3, [r3, #2]
 80061c2:	461a      	mov	r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	4293      	cmp	r3, r2
 80061c8:	dbe7      	blt.n	800619a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80061ca:	bf00      	nop
 80061cc:	bf00      	nop
 80061ce:	3714      	adds	r7, #20
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80061de:	2300      	movs	r3, #0
 80061e0:	80fb      	strh	r3, [r7, #6]
 80061e2:	e009      	b.n	80061f8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80061e4:	88fb      	ldrh	r3, [r7, #6]
 80061e6:	4a08      	ldr	r2, [pc, #32]	; (8006208 <memp_init+0x30>)
 80061e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7ff ffc3 	bl	8006178 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80061f2:	88fb      	ldrh	r3, [r7, #6]
 80061f4:	3301      	adds	r3, #1
 80061f6:	80fb      	strh	r3, [r7, #6]
 80061f8:	88fb      	ldrh	r3, [r7, #6]
 80061fa:	2b08      	cmp	r3, #8
 80061fc:	d9f2      	bls.n	80061e4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80061fe:	bf00      	nop
 8006200:	bf00      	nop
 8006202:	3708      	adds	r7, #8
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	08014090 	.word	0x08014090

0800620c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d012      	beq.n	8006248 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	6812      	ldr	r2, [r2, #0]
 800622a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f003 0303 	and.w	r3, r3, #3
 8006232:	2b00      	cmp	r3, #0
 8006234:	d006      	beq.n	8006244 <do_memp_malloc_pool+0x38>
 8006236:	4b07      	ldr	r3, [pc, #28]	; (8006254 <do_memp_malloc_pool+0x48>)
 8006238:	f44f 728c 	mov.w	r2, #280	; 0x118
 800623c:	4906      	ldr	r1, [pc, #24]	; (8006258 <do_memp_malloc_pool+0x4c>)
 800623e:	4807      	ldr	r0, [pc, #28]	; (800625c <do_memp_malloc_pool+0x50>)
 8006240:	f009 ff50 	bl	80100e4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	e000      	b.n	800624a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	080118dc 	.word	0x080118dc
 8006258:	0801190c 	.word	0x0801190c
 800625c:	08011930 	.word	0x08011930

08006260 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	4603      	mov	r3, r0
 8006268:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800626a:	79fb      	ldrb	r3, [r7, #7]
 800626c:	2b08      	cmp	r3, #8
 800626e:	d908      	bls.n	8006282 <memp_malloc+0x22>
 8006270:	4b0a      	ldr	r3, [pc, #40]	; (800629c <memp_malloc+0x3c>)
 8006272:	f240 1257 	movw	r2, #343	; 0x157
 8006276:	490a      	ldr	r1, [pc, #40]	; (80062a0 <memp_malloc+0x40>)
 8006278:	480a      	ldr	r0, [pc, #40]	; (80062a4 <memp_malloc+0x44>)
 800627a:	f009 ff33 	bl	80100e4 <iprintf>
 800627e:	2300      	movs	r3, #0
 8006280:	e008      	b.n	8006294 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006282:	79fb      	ldrb	r3, [r7, #7]
 8006284:	4a08      	ldr	r2, [pc, #32]	; (80062a8 <memp_malloc+0x48>)
 8006286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800628a:	4618      	mov	r0, r3
 800628c:	f7ff ffbe 	bl	800620c <do_memp_malloc_pool>
 8006290:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8006292:	68fb      	ldr	r3, [r7, #12]
}
 8006294:	4618      	mov	r0, r3
 8006296:	3710      	adds	r7, #16
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	080118dc 	.word	0x080118dc
 80062a0:	0801196c 	.word	0x0801196c
 80062a4:	08011930 	.word	0x08011930
 80062a8:	08014090 	.word	0x08014090

080062ac <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	f003 0303 	and.w	r3, r3, #3
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d006      	beq.n	80062ce <do_memp_free_pool+0x22>
 80062c0:	4b0a      	ldr	r3, [pc, #40]	; (80062ec <do_memp_free_pool+0x40>)
 80062c2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80062c6:	490a      	ldr	r1, [pc, #40]	; (80062f0 <do_memp_free_pool+0x44>)
 80062c8:	480a      	ldr	r0, [pc, #40]	; (80062f4 <do_memp_free_pool+0x48>)
 80062ca:	f009 ff0b 	bl	80100e4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80062e4:	bf00      	nop
 80062e6:	3710      	adds	r7, #16
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	080118dc 	.word	0x080118dc
 80062f0:	0801198c 	.word	0x0801198c
 80062f4:	08011930 	.word	0x08011930

080062f8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	4603      	mov	r3, r0
 8006300:	6039      	str	r1, [r7, #0]
 8006302:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006304:	79fb      	ldrb	r3, [r7, #7]
 8006306:	2b08      	cmp	r3, #8
 8006308:	d907      	bls.n	800631a <memp_free+0x22>
 800630a:	4b0c      	ldr	r3, [pc, #48]	; (800633c <memp_free+0x44>)
 800630c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8006310:	490b      	ldr	r1, [pc, #44]	; (8006340 <memp_free+0x48>)
 8006312:	480c      	ldr	r0, [pc, #48]	; (8006344 <memp_free+0x4c>)
 8006314:	f009 fee6 	bl	80100e4 <iprintf>
 8006318:	e00c      	b.n	8006334 <memp_free+0x3c>

  if (mem == NULL) {
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d008      	beq.n	8006332 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006320:	79fb      	ldrb	r3, [r7, #7]
 8006322:	4a09      	ldr	r2, [pc, #36]	; (8006348 <memp_free+0x50>)
 8006324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006328:	6839      	ldr	r1, [r7, #0]
 800632a:	4618      	mov	r0, r3
 800632c:	f7ff ffbe 	bl	80062ac <do_memp_free_pool>
 8006330:	e000      	b.n	8006334 <memp_free+0x3c>
    return;
 8006332:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006334:	3708      	adds	r7, #8
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	080118dc 	.word	0x080118dc
 8006340:	080119ac 	.word	0x080119ac
 8006344:	08011930 	.word	0x08011930
 8006348:	08014090 	.word	0x08014090

0800634c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800634c:	b480      	push	{r7}
 800634e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006350:	bf00      	nop
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
	...

0800635c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b086      	sub	sp, #24
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
 8006368:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d108      	bne.n	8006382 <netif_add+0x26>
 8006370:	4b57      	ldr	r3, [pc, #348]	; (80064d0 <netif_add+0x174>)
 8006372:	f240 1227 	movw	r2, #295	; 0x127
 8006376:	4957      	ldr	r1, [pc, #348]	; (80064d4 <netif_add+0x178>)
 8006378:	4857      	ldr	r0, [pc, #348]	; (80064d8 <netif_add+0x17c>)
 800637a:	f009 feb3 	bl	80100e4 <iprintf>
 800637e:	2300      	movs	r3, #0
 8006380:	e0a2      	b.n	80064c8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8006382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006384:	2b00      	cmp	r3, #0
 8006386:	d108      	bne.n	800639a <netif_add+0x3e>
 8006388:	4b51      	ldr	r3, [pc, #324]	; (80064d0 <netif_add+0x174>)
 800638a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800638e:	4953      	ldr	r1, [pc, #332]	; (80064dc <netif_add+0x180>)
 8006390:	4851      	ldr	r0, [pc, #324]	; (80064d8 <netif_add+0x17c>)
 8006392:	f009 fea7 	bl	80100e4 <iprintf>
 8006396:	2300      	movs	r3, #0
 8006398:	e096      	b.n	80064c8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d101      	bne.n	80063a4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80063a0:	4b4f      	ldr	r3, [pc, #316]	; (80064e0 <netif_add+0x184>)
 80063a2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d101      	bne.n	80063ae <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80063aa:	4b4d      	ldr	r3, [pc, #308]	; (80064e0 <netif_add+0x184>)
 80063ac:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d101      	bne.n	80063b8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80063b4:	4b4a      	ldr	r3, [pc, #296]	; (80064e0 <netif_add+0x184>)
 80063b6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	4a45      	ldr	r2, [pc, #276]	; (80064e4 <netif_add+0x188>)
 80063ce:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6a3a      	ldr	r2, [r7, #32]
 80063e8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80063ea:	4b3f      	ldr	r3, [pc, #252]	; (80064e8 <netif_add+0x18c>)
 80063ec:	781a      	ldrb	r2, [r3, #0]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063f8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	68b9      	ldr	r1, [r7, #8]
 8006400:	68f8      	ldr	r0, [r7, #12]
 8006402:	f000 f913 	bl	800662c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8006406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	4798      	blx	r3
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <netif_add+0xba>
    return NULL;
 8006412:	2300      	movs	r3, #0
 8006414:	e058      	b.n	80064c8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800641c:	2bff      	cmp	r3, #255	; 0xff
 800641e:	d103      	bne.n	8006428 <netif_add+0xcc>
        netif->num = 0;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8006428:	2300      	movs	r3, #0
 800642a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800642c:	4b2f      	ldr	r3, [pc, #188]	; (80064ec <netif_add+0x190>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	617b      	str	r3, [r7, #20]
 8006432:	e02b      	b.n	800648c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8006434:	697a      	ldr	r2, [r7, #20]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	429a      	cmp	r2, r3
 800643a:	d106      	bne.n	800644a <netif_add+0xee>
 800643c:	4b24      	ldr	r3, [pc, #144]	; (80064d0 <netif_add+0x174>)
 800643e:	f240 128b 	movw	r2, #395	; 0x18b
 8006442:	492b      	ldr	r1, [pc, #172]	; (80064f0 <netif_add+0x194>)
 8006444:	4824      	ldr	r0, [pc, #144]	; (80064d8 <netif_add+0x17c>)
 8006446:	f009 fe4d 	bl	80100e4 <iprintf>
        num_netifs++;
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	3301      	adds	r3, #1
 800644e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	2bff      	cmp	r3, #255	; 0xff
 8006454:	dd06      	ble.n	8006464 <netif_add+0x108>
 8006456:	4b1e      	ldr	r3, [pc, #120]	; (80064d0 <netif_add+0x174>)
 8006458:	f240 128d 	movw	r2, #397	; 0x18d
 800645c:	4925      	ldr	r1, [pc, #148]	; (80064f4 <netif_add+0x198>)
 800645e:	481e      	ldr	r0, [pc, #120]	; (80064d8 <netif_add+0x17c>)
 8006460:	f009 fe40 	bl	80100e4 <iprintf>
        if (netif2->num == netif->num) {
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006470:	429a      	cmp	r2, r3
 8006472:	d108      	bne.n	8006486 <netif_add+0x12a>
          netif->num++;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800647a:	3301      	adds	r3, #1
 800647c:	b2da      	uxtb	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8006484:	e005      	b.n	8006492 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	617b      	str	r3, [r7, #20]
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d1d0      	bne.n	8006434 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1be      	bne.n	8006416 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800649e:	2bfe      	cmp	r3, #254	; 0xfe
 80064a0:	d103      	bne.n	80064aa <netif_add+0x14e>
    netif_num = 0;
 80064a2:	4b11      	ldr	r3, [pc, #68]	; (80064e8 <netif_add+0x18c>)
 80064a4:	2200      	movs	r2, #0
 80064a6:	701a      	strb	r2, [r3, #0]
 80064a8:	e006      	b.n	80064b8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80064b0:	3301      	adds	r3, #1
 80064b2:	b2da      	uxtb	r2, r3
 80064b4:	4b0c      	ldr	r3, [pc, #48]	; (80064e8 <netif_add+0x18c>)
 80064b6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80064b8:	4b0c      	ldr	r3, [pc, #48]	; (80064ec <netif_add+0x190>)
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80064c0:	4a0a      	ldr	r2, [pc, #40]	; (80064ec <netif_add+0x190>)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80064c6:	68fb      	ldr	r3, [r7, #12]
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3718      	adds	r7, #24
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	080119c8 	.word	0x080119c8
 80064d4:	08011a5c 	.word	0x08011a5c
 80064d8:	08011a18 	.word	0x08011a18
 80064dc:	08011a78 	.word	0x08011a78
 80064e0:	080140f4 	.word	0x080140f4
 80064e4:	0800683f 	.word	0x0800683f
 80064e8:	200000cc 	.word	0x200000cc
 80064ec:	200065e4 	.word	0x200065e4
 80064f0:	08011a9c 	.word	0x08011a9c
 80064f4:	08011ab0 	.word	0x08011ab0

080064f8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8006502:	6839      	ldr	r1, [r7, #0]
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f002 fd5d 	bl	8008fc4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800650a:	6839      	ldr	r1, [r7, #0]
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f007 fa93 	bl	800da38 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8006512:	bf00      	nop
 8006514:	3708      	adds	r7, #8
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
	...

0800651c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b086      	sub	sp, #24
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d106      	bne.n	800653c <netif_do_set_ipaddr+0x20>
 800652e:	4b1d      	ldr	r3, [pc, #116]	; (80065a4 <netif_do_set_ipaddr+0x88>)
 8006530:	f240 12cb 	movw	r2, #459	; 0x1cb
 8006534:	491c      	ldr	r1, [pc, #112]	; (80065a8 <netif_do_set_ipaddr+0x8c>)
 8006536:	481d      	ldr	r0, [pc, #116]	; (80065ac <netif_do_set_ipaddr+0x90>)
 8006538:	f009 fdd4 	bl	80100e4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d106      	bne.n	8006550 <netif_do_set_ipaddr+0x34>
 8006542:	4b18      	ldr	r3, [pc, #96]	; (80065a4 <netif_do_set_ipaddr+0x88>)
 8006544:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8006548:	4917      	ldr	r1, [pc, #92]	; (80065a8 <netif_do_set_ipaddr+0x8c>)
 800654a:	4818      	ldr	r0, [pc, #96]	; (80065ac <netif_do_set_ipaddr+0x90>)
 800654c:	f009 fdca 	bl	80100e4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	3304      	adds	r3, #4
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	429a      	cmp	r2, r3
 800655c:	d01c      	beq.n	8006598 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	3304      	adds	r3, #4
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800656e:	f107 0314 	add.w	r3, r7, #20
 8006572:	4619      	mov	r1, r3
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f7ff ffbf 	bl	80064f8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d002      	beq.n	8006586 <netif_do_set_ipaddr+0x6a>
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	e000      	b.n	8006588 <netif_do_set_ipaddr+0x6c>
 8006586:	2300      	movs	r3, #0
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800658c:	2101      	movs	r1, #1
 800658e:	68f8      	ldr	r0, [r7, #12]
 8006590:	f000 f8d2 	bl	8006738 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8006594:	2301      	movs	r3, #1
 8006596:	e000      	b.n	800659a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3718      	adds	r7, #24
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	080119c8 	.word	0x080119c8
 80065a8:	08011ae0 	.word	0x08011ae0
 80065ac:	08011a18 	.word	0x08011a18

080065b0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	3308      	adds	r3, #8
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d00a      	beq.n	80065e0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d002      	beq.n	80065d6 <netif_do_set_netmask+0x26>
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	e000      	b.n	80065d8 <netif_do_set_netmask+0x28>
 80065d6:	2300      	movs	r3, #0
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80065dc:	2301      	movs	r3, #1
 80065de:	e000      	b.n	80065e2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3714      	adds	r7, #20
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr

080065ee <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80065ee:	b480      	push	{r7}
 80065f0:	b085      	sub	sp, #20
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	60f8      	str	r0, [r7, #12]
 80065f6:	60b9      	str	r1, [r7, #8]
 80065f8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	330c      	adds	r3, #12
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	429a      	cmp	r2, r3
 8006606:	d00a      	beq.n	800661e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d002      	beq.n	8006614 <netif_do_set_gw+0x26>
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	e000      	b.n	8006616 <netif_do_set_gw+0x28>
 8006614:	2300      	movs	r3, #0
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800661a:	2301      	movs	r3, #1
 800661c:	e000      	b.n	8006620 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3714      	adds	r7, #20
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b088      	sub	sp, #32
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
 8006638:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800663a:	2300      	movs	r3, #0
 800663c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800663e:	2300      	movs	r3, #0
 8006640:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d101      	bne.n	800664c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8006648:	4b1c      	ldr	r3, [pc, #112]	; (80066bc <netif_set_addr+0x90>)
 800664a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d101      	bne.n	8006656 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8006652:	4b1a      	ldr	r3, [pc, #104]	; (80066bc <netif_set_addr+0x90>)
 8006654:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d101      	bne.n	8006660 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800665c:	4b17      	ldr	r3, [pc, #92]	; (80066bc <netif_set_addr+0x90>)
 800665e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d003      	beq.n	800666e <netif_set_addr+0x42>
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d101      	bne.n	8006672 <netif_set_addr+0x46>
 800666e:	2301      	movs	r3, #1
 8006670:	e000      	b.n	8006674 <netif_set_addr+0x48>
 8006672:	2300      	movs	r3, #0
 8006674:	617b      	str	r3, [r7, #20]
  if (remove) {
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d006      	beq.n	800668a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800667c:	f107 0310 	add.w	r3, r7, #16
 8006680:	461a      	mov	r2, r3
 8006682:	68b9      	ldr	r1, [r7, #8]
 8006684:	68f8      	ldr	r0, [r7, #12]
 8006686:	f7ff ff49 	bl	800651c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800668a:	69fa      	ldr	r2, [r7, #28]
 800668c:	6879      	ldr	r1, [r7, #4]
 800668e:	68f8      	ldr	r0, [r7, #12]
 8006690:	f7ff ff8e 	bl	80065b0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8006694:	69ba      	ldr	r2, [r7, #24]
 8006696:	6839      	ldr	r1, [r7, #0]
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f7ff ffa8 	bl	80065ee <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d106      	bne.n	80066b2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80066a4:	f107 0310 	add.w	r3, r7, #16
 80066a8:	461a      	mov	r2, r3
 80066aa:	68b9      	ldr	r1, [r7, #8]
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f7ff ff35 	bl	800651c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80066b2:	bf00      	nop
 80066b4:	3720      	adds	r7, #32
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	080140f4 	.word	0x080140f4

080066c0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80066c8:	4a04      	ldr	r2, [pc, #16]	; (80066dc <netif_set_default+0x1c>)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80066ce:	bf00      	nop
 80066d0:	370c      	adds	r7, #12
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	200065e8 	.word	0x200065e8

080066e0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d107      	bne.n	80066fe <netif_set_up+0x1e>
 80066ee:	4b0f      	ldr	r3, [pc, #60]	; (800672c <netif_set_up+0x4c>)
 80066f0:	f44f 7254 	mov.w	r2, #848	; 0x350
 80066f4:	490e      	ldr	r1, [pc, #56]	; (8006730 <netif_set_up+0x50>)
 80066f6:	480f      	ldr	r0, [pc, #60]	; (8006734 <netif_set_up+0x54>)
 80066f8:	f009 fcf4 	bl	80100e4 <iprintf>
 80066fc:	e013      	b.n	8006726 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006704:	f003 0301 	and.w	r3, r3, #1
 8006708:	2b00      	cmp	r3, #0
 800670a:	d10c      	bne.n	8006726 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006712:	f043 0301 	orr.w	r3, r3, #1
 8006716:	b2da      	uxtb	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800671e:	2103      	movs	r1, #3
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 f809 	bl	8006738 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8006726:	3708      	adds	r7, #8
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	080119c8 	.word	0x080119c8
 8006730:	08011b50 	.word	0x08011b50
 8006734:	08011a18 	.word	0x08011a18

08006738 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	460b      	mov	r3, r1
 8006742:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d106      	bne.n	8006758 <netif_issue_reports+0x20>
 800674a:	4b18      	ldr	r3, [pc, #96]	; (80067ac <netif_issue_reports+0x74>)
 800674c:	f240 326d 	movw	r2, #877	; 0x36d
 8006750:	4917      	ldr	r1, [pc, #92]	; (80067b0 <netif_issue_reports+0x78>)
 8006752:	4818      	ldr	r0, [pc, #96]	; (80067b4 <netif_issue_reports+0x7c>)
 8006754:	f009 fcc6 	bl	80100e4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800675e:	f003 0304 	and.w	r3, r3, #4
 8006762:	2b00      	cmp	r3, #0
 8006764:	d01e      	beq.n	80067a4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800676c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006770:	2b00      	cmp	r3, #0
 8006772:	d017      	beq.n	80067a4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006774:	78fb      	ldrb	r3, [r7, #3]
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	2b00      	cmp	r3, #0
 800677c:	d013      	beq.n	80067a6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	3304      	adds	r3, #4
 8006782:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00e      	beq.n	80067a6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800678e:	f003 0308 	and.w	r3, r3, #8
 8006792:	2b00      	cmp	r3, #0
 8006794:	d007      	beq.n	80067a6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	3304      	adds	r3, #4
 800679a:	4619      	mov	r1, r3
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f008 f8b5 	bl	800e90c <etharp_request>
 80067a2:	e000      	b.n	80067a6 <netif_issue_reports+0x6e>
    return;
 80067a4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80067a6:	3708      	adds	r7, #8
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	080119c8 	.word	0x080119c8
 80067b0:	08011b6c 	.word	0x08011b6c
 80067b4:	08011a18 	.word	0x08011a18

080067b8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d107      	bne.n	80067d6 <netif_set_down+0x1e>
 80067c6:	4b12      	ldr	r3, [pc, #72]	; (8006810 <netif_set_down+0x58>)
 80067c8:	f240 329b 	movw	r2, #923	; 0x39b
 80067cc:	4911      	ldr	r1, [pc, #68]	; (8006814 <netif_set_down+0x5c>)
 80067ce:	4812      	ldr	r0, [pc, #72]	; (8006818 <netif_set_down+0x60>)
 80067d0:	f009 fc88 	bl	80100e4 <iprintf>
 80067d4:	e019      	b.n	800680a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80067dc:	f003 0301 	and.w	r3, r3, #1
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d012      	beq.n	800680a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80067ea:	f023 0301 	bic.w	r3, r3, #1
 80067ee:	b2da      	uxtb	r2, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80067fc:	f003 0308 	and.w	r3, r3, #8
 8006800:	2b00      	cmp	r3, #0
 8006802:	d002      	beq.n	800680a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f007 fc3f 	bl	800e088 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800680a:	3708      	adds	r7, #8
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	080119c8 	.word	0x080119c8
 8006814:	08011b90 	.word	0x08011b90
 8006818:	08011a18 	.word	0x08011a18

0800681c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d002      	beq.n	8006832 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	61da      	str	r2, [r3, #28]
  }
}
 8006832:	bf00      	nop
 8006834:	370c      	adds	r7, #12
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr

0800683e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800683e:	b480      	push	{r7}
 8006840:	b085      	sub	sp, #20
 8006842:	af00      	add	r7, sp, #0
 8006844:	60f8      	str	r0, [r7, #12]
 8006846:	60b9      	str	r1, [r7, #8]
 8006848:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800684a:	f06f 030b 	mvn.w	r3, #11
}
 800684e:	4618      	mov	r0, r3
 8006850:	3714      	adds	r7, #20
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
	...

0800685c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
 8006862:	4603      	mov	r3, r0
 8006864:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8006866:	79fb      	ldrb	r3, [r7, #7]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d013      	beq.n	8006894 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800686c:	4b0d      	ldr	r3, [pc, #52]	; (80068a4 <netif_get_by_index+0x48>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	60fb      	str	r3, [r7, #12]
 8006872:	e00c      	b.n	800688e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800687a:	3301      	adds	r3, #1
 800687c:	b2db      	uxtb	r3, r3
 800687e:	79fa      	ldrb	r2, [r7, #7]
 8006880:	429a      	cmp	r2, r3
 8006882:	d101      	bne.n	8006888 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	e006      	b.n	8006896 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	60fb      	str	r3, [r7, #12]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d1ef      	bne.n	8006874 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3714      	adds	r7, #20
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	200065e4 	.word	0x200065e4

080068a8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80068ae:	4b0c      	ldr	r3, [pc, #48]	; (80068e0 <pbuf_free_ooseq+0x38>)
 80068b0:	2200      	movs	r2, #0
 80068b2:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80068b4:	4b0b      	ldr	r3, [pc, #44]	; (80068e4 <pbuf_free_ooseq+0x3c>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	607b      	str	r3, [r7, #4]
 80068ba:	e00a      	b.n	80068d2 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d003      	beq.n	80068cc <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f002 fbbb 	bl	8009040 <tcp_free_ooseq>
      return;
 80068ca:	e005      	b.n	80068d8 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	607b      	str	r3, [r7, #4]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1f1      	bne.n	80068bc <pbuf_free_ooseq+0x14>
    }
  }
}
 80068d8:	3708      	adds	r7, #8
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	200065ec 	.word	0x200065ec
 80068e4:	200065f4 	.word	0x200065f4

080068e8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80068e8:	b480      	push	{r7}
 80068ea:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80068ec:	4b03      	ldr	r3, [pc, #12]	; (80068fc <pbuf_pool_is_empty+0x14>)
 80068ee:	2201      	movs	r2, #1
 80068f0:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80068f2:	bf00      	nop
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr
 80068fc:	200065ec 	.word	0x200065ec

08006900 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	4611      	mov	r1, r2
 800690c:	461a      	mov	r2, r3
 800690e:	460b      	mov	r3, r1
 8006910:	80fb      	strh	r3, [r7, #6]
 8006912:	4613      	mov	r3, r2
 8006914:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2200      	movs	r2, #0
 800691a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	68ba      	ldr	r2, [r7, #8]
 8006920:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	88fa      	ldrh	r2, [r7, #6]
 8006926:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	88ba      	ldrh	r2, [r7, #4]
 800692c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800692e:	8b3b      	ldrh	r3, [r7, #24]
 8006930:	b2da      	uxtb	r2, r3
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	7f3a      	ldrb	r2, [r7, #28]
 800693a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2201      	movs	r2, #1
 8006940:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	73da      	strb	r2, [r3, #15]
}
 8006948:	bf00      	nop
 800694a:	3714      	adds	r7, #20
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b08c      	sub	sp, #48	; 0x30
 8006958:	af02      	add	r7, sp, #8
 800695a:	4603      	mov	r3, r0
 800695c:	71fb      	strb	r3, [r7, #7]
 800695e:	460b      	mov	r3, r1
 8006960:	80bb      	strh	r3, [r7, #4]
 8006962:	4613      	mov	r3, r2
 8006964:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8006966:	79fb      	ldrb	r3, [r7, #7]
 8006968:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800696a:	887b      	ldrh	r3, [r7, #2]
 800696c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8006970:	d07f      	beq.n	8006a72 <pbuf_alloc+0x11e>
 8006972:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8006976:	f300 80c8 	bgt.w	8006b0a <pbuf_alloc+0x1b6>
 800697a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800697e:	d010      	beq.n	80069a2 <pbuf_alloc+0x4e>
 8006980:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8006984:	f300 80c1 	bgt.w	8006b0a <pbuf_alloc+0x1b6>
 8006988:	2b01      	cmp	r3, #1
 800698a:	d002      	beq.n	8006992 <pbuf_alloc+0x3e>
 800698c:	2b41      	cmp	r3, #65	; 0x41
 800698e:	f040 80bc 	bne.w	8006b0a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8006992:	887a      	ldrh	r2, [r7, #2]
 8006994:	88bb      	ldrh	r3, [r7, #4]
 8006996:	4619      	mov	r1, r3
 8006998:	2000      	movs	r0, #0
 800699a:	f000 f8d1 	bl	8006b40 <pbuf_alloc_reference>
 800699e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80069a0:	e0bd      	b.n	8006b1e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80069a2:	2300      	movs	r3, #0
 80069a4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80069a6:	2300      	movs	r3, #0
 80069a8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80069aa:	88bb      	ldrh	r3, [r7, #4]
 80069ac:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80069ae:	2008      	movs	r0, #8
 80069b0:	f7ff fc56 	bl	8006260 <memp_malloc>
 80069b4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d109      	bne.n	80069d0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80069bc:	f7ff ff94 	bl	80068e8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80069c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d002      	beq.n	80069cc <pbuf_alloc+0x78>
            pbuf_free(p);
 80069c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069c8:	f000 faa8 	bl	8006f1c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80069cc:	2300      	movs	r3, #0
 80069ce:	e0a7      	b.n	8006b20 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80069d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80069d2:	3303      	adds	r3, #3
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	f023 0303 	bic.w	r3, r3, #3
 80069da:	b29b      	uxth	r3, r3
 80069dc:	f5c3 7301 	rsb	r3, r3, #516	; 0x204
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	8b7a      	ldrh	r2, [r7, #26]
 80069e4:	4293      	cmp	r3, r2
 80069e6:	bf28      	it	cs
 80069e8:	4613      	movcs	r3, r2
 80069ea:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80069ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80069ee:	3310      	adds	r3, #16
 80069f0:	693a      	ldr	r2, [r7, #16]
 80069f2:	4413      	add	r3, r2
 80069f4:	3303      	adds	r3, #3
 80069f6:	f023 0303 	bic.w	r3, r3, #3
 80069fa:	4618      	mov	r0, r3
 80069fc:	89f9      	ldrh	r1, [r7, #14]
 80069fe:	8b7a      	ldrh	r2, [r7, #26]
 8006a00:	2300      	movs	r3, #0
 8006a02:	9301      	str	r3, [sp, #4]
 8006a04:	887b      	ldrh	r3, [r7, #2]
 8006a06:	9300      	str	r3, [sp, #0]
 8006a08:	460b      	mov	r3, r1
 8006a0a:	4601      	mov	r1, r0
 8006a0c:	6938      	ldr	r0, [r7, #16]
 8006a0e:	f7ff ff77 	bl	8006900 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	f003 0303 	and.w	r3, r3, #3
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d006      	beq.n	8006a2c <pbuf_alloc+0xd8>
 8006a1e:	4b42      	ldr	r3, [pc, #264]	; (8006b28 <pbuf_alloc+0x1d4>)
 8006a20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a24:	4941      	ldr	r1, [pc, #260]	; (8006b2c <pbuf_alloc+0x1d8>)
 8006a26:	4842      	ldr	r0, [pc, #264]	; (8006b30 <pbuf_alloc+0x1dc>)
 8006a28:	f009 fb5c 	bl	80100e4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8006a2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a2e:	3303      	adds	r3, #3
 8006a30:	f023 0303 	bic.w	r3, r3, #3
 8006a34:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 8006a38:	d106      	bne.n	8006a48 <pbuf_alloc+0xf4>
 8006a3a:	4b3b      	ldr	r3, [pc, #236]	; (8006b28 <pbuf_alloc+0x1d4>)
 8006a3c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8006a40:	493c      	ldr	r1, [pc, #240]	; (8006b34 <pbuf_alloc+0x1e0>)
 8006a42:	483b      	ldr	r0, [pc, #236]	; (8006b30 <pbuf_alloc+0x1dc>)
 8006a44:	f009 fb4e 	bl	80100e4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8006a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d102      	bne.n	8006a54 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	627b      	str	r3, [r7, #36]	; 0x24
 8006a52:	e002      	b.n	8006a5a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8006a5e:	8b7a      	ldrh	r2, [r7, #26]
 8006a60:	89fb      	ldrh	r3, [r7, #14]
 8006a62:	1ad3      	subs	r3, r2, r3
 8006a64:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8006a66:	2300      	movs	r3, #0
 8006a68:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8006a6a:	8b7b      	ldrh	r3, [r7, #26]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d19e      	bne.n	80069ae <pbuf_alloc+0x5a>
      break;
 8006a70:	e055      	b.n	8006b1e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8006a72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a74:	3303      	adds	r3, #3
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	f023 0303 	bic.w	r3, r3, #3
 8006a7c:	b29a      	uxth	r2, r3
 8006a7e:	88bb      	ldrh	r3, [r7, #4]
 8006a80:	3303      	adds	r3, #3
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	f023 0303 	bic.w	r3, r3, #3
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	4413      	add	r3, r2
 8006a8c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8006a8e:	8b3b      	ldrh	r3, [r7, #24]
 8006a90:	3310      	adds	r3, #16
 8006a92:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006a94:	8b3a      	ldrh	r2, [r7, #24]
 8006a96:	88bb      	ldrh	r3, [r7, #4]
 8006a98:	3303      	adds	r3, #3
 8006a9a:	f023 0303 	bic.w	r3, r3, #3
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d306      	bcc.n	8006ab0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8006aa2:	8afa      	ldrh	r2, [r7, #22]
 8006aa4:	88bb      	ldrh	r3, [r7, #4]
 8006aa6:	3303      	adds	r3, #3
 8006aa8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d201      	bcs.n	8006ab4 <pbuf_alloc+0x160>
        return NULL;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	e035      	b.n	8006b20 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8006ab4:	8afb      	ldrh	r3, [r7, #22]
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7ff fa64 	bl	8005f84 <mem_malloc>
 8006abc:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8006abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d101      	bne.n	8006ac8 <pbuf_alloc+0x174>
        return NULL;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	e02b      	b.n	8006b20 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8006ac8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006aca:	3310      	adds	r3, #16
 8006acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ace:	4413      	add	r3, r2
 8006ad0:	3303      	adds	r3, #3
 8006ad2:	f023 0303 	bic.w	r3, r3, #3
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	88b9      	ldrh	r1, [r7, #4]
 8006ada:	88ba      	ldrh	r2, [r7, #4]
 8006adc:	2300      	movs	r3, #0
 8006ade:	9301      	str	r3, [sp, #4]
 8006ae0:	887b      	ldrh	r3, [r7, #2]
 8006ae2:	9300      	str	r3, [sp, #0]
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	4601      	mov	r1, r0
 8006ae8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006aea:	f7ff ff09 	bl	8006900 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8006aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	f003 0303 	and.w	r3, r3, #3
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d010      	beq.n	8006b1c <pbuf_alloc+0x1c8>
 8006afa:	4b0b      	ldr	r3, [pc, #44]	; (8006b28 <pbuf_alloc+0x1d4>)
 8006afc:	f44f 7291 	mov.w	r2, #290	; 0x122
 8006b00:	490d      	ldr	r1, [pc, #52]	; (8006b38 <pbuf_alloc+0x1e4>)
 8006b02:	480b      	ldr	r0, [pc, #44]	; (8006b30 <pbuf_alloc+0x1dc>)
 8006b04:	f009 faee 	bl	80100e4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8006b08:	e008      	b.n	8006b1c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8006b0a:	4b07      	ldr	r3, [pc, #28]	; (8006b28 <pbuf_alloc+0x1d4>)
 8006b0c:	f240 1227 	movw	r2, #295	; 0x127
 8006b10:	490a      	ldr	r1, [pc, #40]	; (8006b3c <pbuf_alloc+0x1e8>)
 8006b12:	4807      	ldr	r0, [pc, #28]	; (8006b30 <pbuf_alloc+0x1dc>)
 8006b14:	f009 fae6 	bl	80100e4 <iprintf>
      return NULL;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	e001      	b.n	8006b20 <pbuf_alloc+0x1cc>
      break;
 8006b1c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3728      	adds	r7, #40	; 0x28
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	08011bf8 	.word	0x08011bf8
 8006b2c:	08011c28 	.word	0x08011c28
 8006b30:	08011c58 	.word	0x08011c58
 8006b34:	08011c80 	.word	0x08011c80
 8006b38:	08011cb4 	.word	0x08011cb4
 8006b3c:	08011ce0 	.word	0x08011ce0

08006b40 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b086      	sub	sp, #24
 8006b44:	af02      	add	r7, sp, #8
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	460b      	mov	r3, r1
 8006b4a:	807b      	strh	r3, [r7, #2]
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8006b50:	883b      	ldrh	r3, [r7, #0]
 8006b52:	2b41      	cmp	r3, #65	; 0x41
 8006b54:	d009      	beq.n	8006b6a <pbuf_alloc_reference+0x2a>
 8006b56:	883b      	ldrh	r3, [r7, #0]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d006      	beq.n	8006b6a <pbuf_alloc_reference+0x2a>
 8006b5c:	4b0f      	ldr	r3, [pc, #60]	; (8006b9c <pbuf_alloc_reference+0x5c>)
 8006b5e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8006b62:	490f      	ldr	r1, [pc, #60]	; (8006ba0 <pbuf_alloc_reference+0x60>)
 8006b64:	480f      	ldr	r0, [pc, #60]	; (8006ba4 <pbuf_alloc_reference+0x64>)
 8006b66:	f009 fabd 	bl	80100e4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006b6a:	2007      	movs	r0, #7
 8006b6c:	f7ff fb78 	bl	8006260 <memp_malloc>
 8006b70:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d101      	bne.n	8006b7c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	e00b      	b.n	8006b94 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8006b7c:	8879      	ldrh	r1, [r7, #2]
 8006b7e:	887a      	ldrh	r2, [r7, #2]
 8006b80:	2300      	movs	r3, #0
 8006b82:	9301      	str	r3, [sp, #4]
 8006b84:	883b      	ldrh	r3, [r7, #0]
 8006b86:	9300      	str	r3, [sp, #0]
 8006b88:	460b      	mov	r3, r1
 8006b8a:	6879      	ldr	r1, [r7, #4]
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f7ff feb7 	bl	8006900 <pbuf_init_alloced_pbuf>
  return p;
 8006b92:	68fb      	ldr	r3, [r7, #12]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3710      	adds	r7, #16
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	08011bf8 	.word	0x08011bf8
 8006ba0:	08011cfc 	.word	0x08011cfc
 8006ba4:	08011c58 	.word	0x08011c58

08006ba8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b088      	sub	sp, #32
 8006bac:	af02      	add	r7, sp, #8
 8006bae:	607b      	str	r3, [r7, #4]
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	73fb      	strb	r3, [r7, #15]
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	81bb      	strh	r3, [r7, #12]
 8006bb8:	4613      	mov	r3, r2
 8006bba:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8006bbc:	7bfb      	ldrb	r3, [r7, #15]
 8006bbe:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006bc0:	8a7b      	ldrh	r3, [r7, #18]
 8006bc2:	3303      	adds	r3, #3
 8006bc4:	f023 0203 	bic.w	r2, r3, #3
 8006bc8:	89bb      	ldrh	r3, [r7, #12]
 8006bca:	441a      	add	r2, r3
 8006bcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d901      	bls.n	8006bd6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	e018      	b.n	8006c08 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8006bd6:	6a3b      	ldr	r3, [r7, #32]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d007      	beq.n	8006bec <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006bdc:	8a7b      	ldrh	r3, [r7, #18]
 8006bde:	3303      	adds	r3, #3
 8006be0:	f023 0303 	bic.w	r3, r3, #3
 8006be4:	6a3a      	ldr	r2, [r7, #32]
 8006be6:	4413      	add	r3, r2
 8006be8:	617b      	str	r3, [r7, #20]
 8006bea:	e001      	b.n	8006bf0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8006bec:	2300      	movs	r3, #0
 8006bee:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	89b9      	ldrh	r1, [r7, #12]
 8006bf4:	89ba      	ldrh	r2, [r7, #12]
 8006bf6:	2302      	movs	r3, #2
 8006bf8:	9301      	str	r3, [sp, #4]
 8006bfa:	897b      	ldrh	r3, [r7, #10]
 8006bfc:	9300      	str	r3, [sp, #0]
 8006bfe:	460b      	mov	r3, r1
 8006c00:	6979      	ldr	r1, [r7, #20]
 8006c02:	f7ff fe7d 	bl	8006900 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8006c06:	687b      	ldr	r3, [r7, #4]
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3718      	adds	r7, #24
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	460b      	mov	r3, r1
 8006c1a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d106      	bne.n	8006c30 <pbuf_realloc+0x20>
 8006c22:	4b3a      	ldr	r3, [pc, #232]	; (8006d0c <pbuf_realloc+0xfc>)
 8006c24:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8006c28:	4939      	ldr	r1, [pc, #228]	; (8006d10 <pbuf_realloc+0x100>)
 8006c2a:	483a      	ldr	r0, [pc, #232]	; (8006d14 <pbuf_realloc+0x104>)
 8006c2c:	f009 fa5a 	bl	80100e4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	891b      	ldrh	r3, [r3, #8]
 8006c34:	887a      	ldrh	r2, [r7, #2]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d263      	bcs.n	8006d02 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	891a      	ldrh	r2, [r3, #8]
 8006c3e:	887b      	ldrh	r3, [r7, #2]
 8006c40:	1ad3      	subs	r3, r2, r3
 8006c42:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006c44:	887b      	ldrh	r3, [r7, #2]
 8006c46:	817b      	strh	r3, [r7, #10]
  q = p;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006c4c:	e018      	b.n	8006c80 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	895b      	ldrh	r3, [r3, #10]
 8006c52:	897a      	ldrh	r2, [r7, #10]
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	891a      	ldrh	r2, [r3, #8]
 8006c5c:	893b      	ldrh	r3, [r7, #8]
 8006c5e:	1ad3      	subs	r3, r2, r3
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d106      	bne.n	8006c80 <pbuf_realloc+0x70>
 8006c72:	4b26      	ldr	r3, [pc, #152]	; (8006d0c <pbuf_realloc+0xfc>)
 8006c74:	f240 12af 	movw	r2, #431	; 0x1af
 8006c78:	4927      	ldr	r1, [pc, #156]	; (8006d18 <pbuf_realloc+0x108>)
 8006c7a:	4826      	ldr	r0, [pc, #152]	; (8006d14 <pbuf_realloc+0x104>)
 8006c7c:	f009 fa32 	bl	80100e4 <iprintf>
  while (rem_len > q->len) {
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	895b      	ldrh	r3, [r3, #10]
 8006c84:	897a      	ldrh	r2, [r7, #10]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d8e1      	bhi.n	8006c4e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	7b1b      	ldrb	r3, [r3, #12]
 8006c8e:	f003 030f 	and.w	r3, r3, #15
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d121      	bne.n	8006cda <pbuf_realloc+0xca>
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	895b      	ldrh	r3, [r3, #10]
 8006c9a:	897a      	ldrh	r2, [r7, #10]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d01c      	beq.n	8006cda <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	7b5b      	ldrb	r3, [r3, #13]
 8006ca4:	f003 0302 	and.w	r3, r3, #2
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d116      	bne.n	8006cda <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	685a      	ldr	r2, [r3, #4]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	897b      	ldrh	r3, [r7, #10]
 8006cb8:	4413      	add	r3, r2
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	f7ff f864 	bl	8005d8c <mem_trim>
 8006cc4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d106      	bne.n	8006cda <pbuf_realloc+0xca>
 8006ccc:	4b0f      	ldr	r3, [pc, #60]	; (8006d0c <pbuf_realloc+0xfc>)
 8006cce:	f240 12bd 	movw	r2, #445	; 0x1bd
 8006cd2:	4912      	ldr	r1, [pc, #72]	; (8006d1c <pbuf_realloc+0x10c>)
 8006cd4:	480f      	ldr	r0, [pc, #60]	; (8006d14 <pbuf_realloc+0x104>)
 8006cd6:	f009 fa05 	bl	80100e4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	897a      	ldrh	r2, [r7, #10]
 8006cde:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	895a      	ldrh	r2, [r3, #10]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d004      	beq.n	8006cfa <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f000 f911 	bl	8006f1c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	601a      	str	r2, [r3, #0]
 8006d00:	e000      	b.n	8006d04 <pbuf_realloc+0xf4>
    return;
 8006d02:	bf00      	nop

}
 8006d04:	3710      	adds	r7, #16
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	08011bf8 	.word	0x08011bf8
 8006d10:	08011d10 	.word	0x08011d10
 8006d14:	08011c58 	.word	0x08011c58
 8006d18:	08011d28 	.word	0x08011d28
 8006d1c:	08011d40 	.word	0x08011d40

08006d20 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b086      	sub	sp, #24
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d106      	bne.n	8006d42 <pbuf_add_header_impl+0x22>
 8006d34:	4b2b      	ldr	r3, [pc, #172]	; (8006de4 <pbuf_add_header_impl+0xc4>)
 8006d36:	f240 12df 	movw	r2, #479	; 0x1df
 8006d3a:	492b      	ldr	r1, [pc, #172]	; (8006de8 <pbuf_add_header_impl+0xc8>)
 8006d3c:	482b      	ldr	r0, [pc, #172]	; (8006dec <pbuf_add_header_impl+0xcc>)
 8006d3e:	f009 f9d1 	bl	80100e4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d003      	beq.n	8006d50 <pbuf_add_header_impl+0x30>
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d4e:	d301      	bcc.n	8006d54 <pbuf_add_header_impl+0x34>
    return 1;
 8006d50:	2301      	movs	r3, #1
 8006d52:	e043      	b.n	8006ddc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d101      	bne.n	8006d5e <pbuf_add_header_impl+0x3e>
    return 0;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	e03e      	b.n	8006ddc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	891a      	ldrh	r2, [r3, #8]
 8006d66:	8a7b      	ldrh	r3, [r7, #18]
 8006d68:	4413      	add	r3, r2
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	8a7a      	ldrh	r2, [r7, #18]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d901      	bls.n	8006d76 <pbuf_add_header_impl+0x56>
    return 1;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e032      	b.n	8006ddc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	7b1b      	ldrb	r3, [r3, #12]
 8006d7a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006d7c:	8a3b      	ldrh	r3, [r7, #16]
 8006d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00c      	beq.n	8006da0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	685a      	ldr	r2, [r3, #4]
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	425b      	negs	r3, r3
 8006d8e:	4413      	add	r3, r2
 8006d90:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	3310      	adds	r3, #16
 8006d96:	697a      	ldr	r2, [r7, #20]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d20d      	bcs.n	8006db8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e01d      	b.n	8006ddc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8006da0:	79fb      	ldrb	r3, [r7, #7]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d006      	beq.n	8006db4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	685a      	ldr	r2, [r3, #4]
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	425b      	negs	r3, r3
 8006dae:	4413      	add	r3, r2
 8006db0:	617b      	str	r3, [r7, #20]
 8006db2:	e001      	b.n	8006db8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8006db4:	2301      	movs	r3, #1
 8006db6:	e011      	b.n	8006ddc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	697a      	ldr	r2, [r7, #20]
 8006dbc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	895a      	ldrh	r2, [r3, #10]
 8006dc2:	8a7b      	ldrh	r3, [r7, #18]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	891a      	ldrh	r2, [r3, #8]
 8006dd0:	8a7b      	ldrh	r3, [r7, #18]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	811a      	strh	r2, [r3, #8]


  return 0;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3718      	adds	r7, #24
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	08011bf8 	.word	0x08011bf8
 8006de8:	08011d5c 	.word	0x08011d5c
 8006dec:	08011c58 	.word	0x08011c58

08006df0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	6839      	ldr	r1, [r7, #0]
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f7ff ff8e 	bl	8006d20 <pbuf_add_header_impl>
 8006e04:	4603      	mov	r3, r0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3708      	adds	r7, #8
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
	...

08006e10 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d106      	bne.n	8006e2e <pbuf_remove_header+0x1e>
 8006e20:	4b20      	ldr	r3, [pc, #128]	; (8006ea4 <pbuf_remove_header+0x94>)
 8006e22:	f240 224b 	movw	r2, #587	; 0x24b
 8006e26:	4920      	ldr	r1, [pc, #128]	; (8006ea8 <pbuf_remove_header+0x98>)
 8006e28:	4820      	ldr	r0, [pc, #128]	; (8006eac <pbuf_remove_header+0x9c>)
 8006e2a:	f009 f95b 	bl	80100e4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d003      	beq.n	8006e3c <pbuf_remove_header+0x2c>
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e3a:	d301      	bcc.n	8006e40 <pbuf_remove_header+0x30>
    return 1;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e02c      	b.n	8006e9a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d101      	bne.n	8006e4a <pbuf_remove_header+0x3a>
    return 0;
 8006e46:	2300      	movs	r3, #0
 8006e48:	e027      	b.n	8006e9a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	895b      	ldrh	r3, [r3, #10]
 8006e52:	89fa      	ldrh	r2, [r7, #14]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d908      	bls.n	8006e6a <pbuf_remove_header+0x5a>
 8006e58:	4b12      	ldr	r3, [pc, #72]	; (8006ea4 <pbuf_remove_header+0x94>)
 8006e5a:	f240 2255 	movw	r2, #597	; 0x255
 8006e5e:	4914      	ldr	r1, [pc, #80]	; (8006eb0 <pbuf_remove_header+0xa0>)
 8006e60:	4812      	ldr	r0, [pc, #72]	; (8006eac <pbuf_remove_header+0x9c>)
 8006e62:	f009 f93f 	bl	80100e4 <iprintf>
 8006e66:	2301      	movs	r3, #1
 8006e68:	e017      	b.n	8006e9a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	685a      	ldr	r2, [r3, #4]
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	441a      	add	r2, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	895a      	ldrh	r2, [r3, #10]
 8006e80:	89fb      	ldrh	r3, [r7, #14]
 8006e82:	1ad3      	subs	r3, r2, r3
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	891a      	ldrh	r2, [r3, #8]
 8006e8e:	89fb      	ldrh	r3, [r7, #14]
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	08011bf8 	.word	0x08011bf8
 8006ea8:	08011d5c 	.word	0x08011d5c
 8006eac:	08011c58 	.word	0x08011c58
 8006eb0:	08011d68 	.word	0x08011d68

08006eb4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	807b      	strh	r3, [r7, #2]
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8006ec4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	da08      	bge.n	8006ede <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8006ecc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006ed0:	425b      	negs	r3, r3
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f7ff ff9b 	bl	8006e10 <pbuf_remove_header>
 8006eda:	4603      	mov	r3, r0
 8006edc:	e007      	b.n	8006eee <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8006ede:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006ee2:	787a      	ldrb	r2, [r7, #1]
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f7ff ff1a 	bl	8006d20 <pbuf_add_header_impl>
 8006eec:	4603      	mov	r3, r0
  }
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3708      	adds	r7, #8
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b082      	sub	sp, #8
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
 8006efe:	460b      	mov	r3, r1
 8006f00:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8006f02:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006f06:	2201      	movs	r2, #1
 8006f08:	4619      	mov	r1, r3
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f7ff ffd2 	bl	8006eb4 <pbuf_header_impl>
 8006f10:	4603      	mov	r3, r0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3708      	adds	r7, #8
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
	...

08006f1c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b086      	sub	sp, #24
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d10b      	bne.n	8006f42 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d106      	bne.n	8006f3e <pbuf_free+0x22>
 8006f30:	4b38      	ldr	r3, [pc, #224]	; (8007014 <pbuf_free+0xf8>)
 8006f32:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8006f36:	4938      	ldr	r1, [pc, #224]	; (8007018 <pbuf_free+0xfc>)
 8006f38:	4838      	ldr	r0, [pc, #224]	; (800701c <pbuf_free+0x100>)
 8006f3a:	f009 f8d3 	bl	80100e4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	e063      	b.n	800700a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8006f42:	2300      	movs	r3, #0
 8006f44:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006f46:	e05c      	b.n	8007002 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	7b9b      	ldrb	r3, [r3, #14]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d106      	bne.n	8006f5e <pbuf_free+0x42>
 8006f50:	4b30      	ldr	r3, [pc, #192]	; (8007014 <pbuf_free+0xf8>)
 8006f52:	f240 22f1 	movw	r2, #753	; 0x2f1
 8006f56:	4932      	ldr	r1, [pc, #200]	; (8007020 <pbuf_free+0x104>)
 8006f58:	4830      	ldr	r0, [pc, #192]	; (800701c <pbuf_free+0x100>)
 8006f5a:	f009 f8c3 	bl	80100e4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	7b9b      	ldrb	r3, [r3, #14]
 8006f62:	3b01      	subs	r3, #1
 8006f64:	b2da      	uxtb	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	739a      	strb	r2, [r3, #14]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	7b9b      	ldrb	r3, [r3, #14]
 8006f6e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006f70:	7dbb      	ldrb	r3, [r7, #22]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d143      	bne.n	8006ffe <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	7b1b      	ldrb	r3, [r3, #12]
 8006f80:	f003 030f 	and.w	r3, r3, #15
 8006f84:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	7b5b      	ldrb	r3, [r3, #13]
 8006f8a:	f003 0302 	and.w	r3, r3, #2
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d011      	beq.n	8006fb6 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d106      	bne.n	8006fac <pbuf_free+0x90>
 8006f9e:	4b1d      	ldr	r3, [pc, #116]	; (8007014 <pbuf_free+0xf8>)
 8006fa0:	f240 22ff 	movw	r2, #767	; 0x2ff
 8006fa4:	491f      	ldr	r1, [pc, #124]	; (8007024 <pbuf_free+0x108>)
 8006fa6:	481d      	ldr	r0, [pc, #116]	; (800701c <pbuf_free+0x100>)
 8006fa8:	f009 f89c 	bl	80100e4 <iprintf>
        pc->custom_free_function(p);
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	691b      	ldr	r3, [r3, #16]
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	4798      	blx	r3
 8006fb4:	e01d      	b.n	8006ff2 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8006fb6:	7bfb      	ldrb	r3, [r7, #15]
 8006fb8:	2b02      	cmp	r3, #2
 8006fba:	d104      	bne.n	8006fc6 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8006fbc:	6879      	ldr	r1, [r7, #4]
 8006fbe:	2008      	movs	r0, #8
 8006fc0:	f7ff f99a 	bl	80062f8 <memp_free>
 8006fc4:	e015      	b.n	8006ff2 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8006fc6:	7bfb      	ldrb	r3, [r7, #15]
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d104      	bne.n	8006fd6 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8006fcc:	6879      	ldr	r1, [r7, #4]
 8006fce:	2007      	movs	r0, #7
 8006fd0:	f7ff f992 	bl	80062f8 <memp_free>
 8006fd4:	e00d      	b.n	8006ff2 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8006fd6:	7bfb      	ldrb	r3, [r7, #15]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d103      	bne.n	8006fe4 <pbuf_free+0xc8>
          mem_free(p);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f7fe fe6b 	bl	8005cb8 <mem_free>
 8006fe2:	e006      	b.n	8006ff2 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8006fe4:	4b0b      	ldr	r3, [pc, #44]	; (8007014 <pbuf_free+0xf8>)
 8006fe6:	f240 320f 	movw	r2, #783	; 0x30f
 8006fea:	490f      	ldr	r1, [pc, #60]	; (8007028 <pbuf_free+0x10c>)
 8006fec:	480b      	ldr	r0, [pc, #44]	; (800701c <pbuf_free+0x100>)
 8006fee:	f009 f879 	bl	80100e4 <iprintf>
        }
      }
      count++;
 8006ff2:	7dfb      	ldrb	r3, [r7, #23]
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	607b      	str	r3, [r7, #4]
 8006ffc:	e001      	b.n	8007002 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8006ffe:	2300      	movs	r3, #0
 8007000:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d19f      	bne.n	8006f48 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8007008:	7dfb      	ldrb	r3, [r7, #23]
}
 800700a:	4618      	mov	r0, r3
 800700c:	3718      	adds	r7, #24
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	08011bf8 	.word	0x08011bf8
 8007018:	08011d5c 	.word	0x08011d5c
 800701c:	08011c58 	.word	0x08011c58
 8007020:	08011d88 	.word	0x08011d88
 8007024:	08011da0 	.word	0x08011da0
 8007028:	08011dc4 	.word	0x08011dc4

0800702c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8007034:	2300      	movs	r3, #0
 8007036:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8007038:	e005      	b.n	8007046 <pbuf_clen+0x1a>
    ++len;
 800703a:	89fb      	ldrh	r3, [r7, #14]
 800703c:	3301      	adds	r3, #1
 800703e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1f6      	bne.n	800703a <pbuf_clen+0xe>
  }
  return len;
 800704c:	89fb      	ldrh	r3, [r7, #14]
}
 800704e:	4618      	mov	r0, r3
 8007050:	3714      	adds	r7, #20
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr
	...

0800705c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d010      	beq.n	800708c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	7b9b      	ldrb	r3, [r3, #14]
 800706e:	3301      	adds	r3, #1
 8007070:	b2da      	uxtb	r2, r3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	7b9b      	ldrb	r3, [r3, #14]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d106      	bne.n	800708c <pbuf_ref+0x30>
 800707e:	4b05      	ldr	r3, [pc, #20]	; (8007094 <pbuf_ref+0x38>)
 8007080:	f240 3242 	movw	r2, #834	; 0x342
 8007084:	4904      	ldr	r1, [pc, #16]	; (8007098 <pbuf_ref+0x3c>)
 8007086:	4805      	ldr	r0, [pc, #20]	; (800709c <pbuf_ref+0x40>)
 8007088:	f009 f82c 	bl	80100e4 <iprintf>
  }
}
 800708c:	bf00      	nop
 800708e:	3708      	adds	r7, #8
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	08011bf8 	.word	0x08011bf8
 8007098:	08011dd8 	.word	0x08011dd8
 800709c:	08011c58 	.word	0x08011c58

080070a0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d002      	beq.n	80070b6 <pbuf_cat+0x16>
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d107      	bne.n	80070c6 <pbuf_cat+0x26>
 80070b6:	4b20      	ldr	r3, [pc, #128]	; (8007138 <pbuf_cat+0x98>)
 80070b8:	f240 3259 	movw	r2, #857	; 0x359
 80070bc:	491f      	ldr	r1, [pc, #124]	; (800713c <pbuf_cat+0x9c>)
 80070be:	4820      	ldr	r0, [pc, #128]	; (8007140 <pbuf_cat+0xa0>)
 80070c0:	f009 f810 	bl	80100e4 <iprintf>
 80070c4:	e034      	b.n	8007130 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	60fb      	str	r3, [r7, #12]
 80070ca:	e00a      	b.n	80070e2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	891a      	ldrh	r2, [r3, #8]
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	891b      	ldrh	r3, [r3, #8]
 80070d4:	4413      	add	r3, r2
 80070d6:	b29a      	uxth	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	60fb      	str	r3, [r7, #12]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d1f0      	bne.n	80070cc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	891a      	ldrh	r2, [r3, #8]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	895b      	ldrh	r3, [r3, #10]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d006      	beq.n	8007104 <pbuf_cat+0x64>
 80070f6:	4b10      	ldr	r3, [pc, #64]	; (8007138 <pbuf_cat+0x98>)
 80070f8:	f240 3262 	movw	r2, #866	; 0x362
 80070fc:	4911      	ldr	r1, [pc, #68]	; (8007144 <pbuf_cat+0xa4>)
 80070fe:	4810      	ldr	r0, [pc, #64]	; (8007140 <pbuf_cat+0xa0>)
 8007100:	f008 fff0 	bl	80100e4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d006      	beq.n	800711a <pbuf_cat+0x7a>
 800710c:	4b0a      	ldr	r3, [pc, #40]	; (8007138 <pbuf_cat+0x98>)
 800710e:	f240 3263 	movw	r2, #867	; 0x363
 8007112:	490d      	ldr	r1, [pc, #52]	; (8007148 <pbuf_cat+0xa8>)
 8007114:	480a      	ldr	r0, [pc, #40]	; (8007140 <pbuf_cat+0xa0>)
 8007116:	f008 ffe5 	bl	80100e4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	891a      	ldrh	r2, [r3, #8]
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	891b      	ldrh	r3, [r3, #8]
 8007122:	4413      	add	r3, r2
 8007124:	b29a      	uxth	r2, r3
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	683a      	ldr	r2, [r7, #0]
 800712e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	08011bf8 	.word	0x08011bf8
 800713c:	08011dec 	.word	0x08011dec
 8007140:	08011c58 	.word	0x08011c58
 8007144:	08011e24 	.word	0x08011e24
 8007148:	08011e54 	.word	0x08011e54

0800714c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b086      	sub	sp, #24
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8007156:	2300      	movs	r3, #0
 8007158:	617b      	str	r3, [r7, #20]
 800715a:	2300      	movs	r3, #0
 800715c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d008      	beq.n	8007176 <pbuf_copy+0x2a>
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d005      	beq.n	8007176 <pbuf_copy+0x2a>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	891a      	ldrh	r2, [r3, #8]
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	891b      	ldrh	r3, [r3, #8]
 8007172:	429a      	cmp	r2, r3
 8007174:	d209      	bcs.n	800718a <pbuf_copy+0x3e>
 8007176:	4b57      	ldr	r3, [pc, #348]	; (80072d4 <pbuf_copy+0x188>)
 8007178:	f240 32c9 	movw	r2, #969	; 0x3c9
 800717c:	4956      	ldr	r1, [pc, #344]	; (80072d8 <pbuf_copy+0x18c>)
 800717e:	4857      	ldr	r0, [pc, #348]	; (80072dc <pbuf_copy+0x190>)
 8007180:	f008 ffb0 	bl	80100e4 <iprintf>
 8007184:	f06f 030f 	mvn.w	r3, #15
 8007188:	e09f      	b.n	80072ca <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	895b      	ldrh	r3, [r3, #10]
 800718e:	461a      	mov	r2, r3
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	1ad2      	subs	r2, r2, r3
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	895b      	ldrh	r3, [r3, #10]
 8007198:	4619      	mov	r1, r3
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	1acb      	subs	r3, r1, r3
 800719e:	429a      	cmp	r2, r3
 80071a0:	d306      	bcc.n	80071b0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	895b      	ldrh	r3, [r3, #10]
 80071a6:	461a      	mov	r2, r3
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	1ad3      	subs	r3, r2, r3
 80071ac:	60fb      	str	r3, [r7, #12]
 80071ae:	e005      	b.n	80071bc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	895b      	ldrh	r3, [r3, #10]
 80071b4:	461a      	mov	r2, r3
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	685a      	ldr	r2, [r3, #4]
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	18d0      	adds	r0, r2, r3
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	685a      	ldr	r2, [r3, #4]
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	4413      	add	r3, r2
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	4619      	mov	r1, r3
 80071d0:	f008 ff58 	bl	8010084 <memcpy>
    offset_to += len;
 80071d4:	697a      	ldr	r2, [r7, #20]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	4413      	add	r3, r2
 80071da:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80071dc:	693a      	ldr	r2, [r7, #16]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	4413      	add	r3, r2
 80071e2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	895b      	ldrh	r3, [r3, #10]
 80071e8:	461a      	mov	r2, r3
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d906      	bls.n	80071fe <pbuf_copy+0xb2>
 80071f0:	4b38      	ldr	r3, [pc, #224]	; (80072d4 <pbuf_copy+0x188>)
 80071f2:	f240 32d9 	movw	r2, #985	; 0x3d9
 80071f6:	493a      	ldr	r1, [pc, #232]	; (80072e0 <pbuf_copy+0x194>)
 80071f8:	4838      	ldr	r0, [pc, #224]	; (80072dc <pbuf_copy+0x190>)
 80071fa:	f008 ff73 	bl	80100e4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	895b      	ldrh	r3, [r3, #10]
 8007202:	461a      	mov	r2, r3
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	4293      	cmp	r3, r2
 8007208:	d906      	bls.n	8007218 <pbuf_copy+0xcc>
 800720a:	4b32      	ldr	r3, [pc, #200]	; (80072d4 <pbuf_copy+0x188>)
 800720c:	f240 32da 	movw	r2, #986	; 0x3da
 8007210:	4934      	ldr	r1, [pc, #208]	; (80072e4 <pbuf_copy+0x198>)
 8007212:	4832      	ldr	r0, [pc, #200]	; (80072dc <pbuf_copy+0x190>)
 8007214:	f008 ff66 	bl	80100e4 <iprintf>
    if (offset_from >= p_from->len) {
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	895b      	ldrh	r3, [r3, #10]
 800721c:	461a      	mov	r2, r3
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	4293      	cmp	r3, r2
 8007222:	d304      	bcc.n	800722e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8007224:	2300      	movs	r3, #0
 8007226:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	895b      	ldrh	r3, [r3, #10]
 8007232:	461a      	mov	r2, r3
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	4293      	cmp	r3, r2
 8007238:	d114      	bne.n	8007264 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800723a:	2300      	movs	r3, #0
 800723c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d10c      	bne.n	8007264 <pbuf_copy+0x118>
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d009      	beq.n	8007264 <pbuf_copy+0x118>
 8007250:	4b20      	ldr	r3, [pc, #128]	; (80072d4 <pbuf_copy+0x188>)
 8007252:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8007256:	4924      	ldr	r1, [pc, #144]	; (80072e8 <pbuf_copy+0x19c>)
 8007258:	4820      	ldr	r0, [pc, #128]	; (80072dc <pbuf_copy+0x190>)
 800725a:	f008 ff43 	bl	80100e4 <iprintf>
 800725e:	f06f 030f 	mvn.w	r3, #15
 8007262:	e032      	b.n	80072ca <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d013      	beq.n	8007292 <pbuf_copy+0x146>
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	895a      	ldrh	r2, [r3, #10]
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	891b      	ldrh	r3, [r3, #8]
 8007272:	429a      	cmp	r2, r3
 8007274:	d10d      	bne.n	8007292 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d009      	beq.n	8007292 <pbuf_copy+0x146>
 800727e:	4b15      	ldr	r3, [pc, #84]	; (80072d4 <pbuf_copy+0x188>)
 8007280:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8007284:	4919      	ldr	r1, [pc, #100]	; (80072ec <pbuf_copy+0x1a0>)
 8007286:	4815      	ldr	r0, [pc, #84]	; (80072dc <pbuf_copy+0x190>)
 8007288:	f008 ff2c 	bl	80100e4 <iprintf>
 800728c:	f06f 0305 	mvn.w	r3, #5
 8007290:	e01b      	b.n	80072ca <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d013      	beq.n	80072c0 <pbuf_copy+0x174>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	895a      	ldrh	r2, [r3, #10]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	891b      	ldrh	r3, [r3, #8]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d10d      	bne.n	80072c0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d009      	beq.n	80072c0 <pbuf_copy+0x174>
 80072ac:	4b09      	ldr	r3, [pc, #36]	; (80072d4 <pbuf_copy+0x188>)
 80072ae:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80072b2:	490e      	ldr	r1, [pc, #56]	; (80072ec <pbuf_copy+0x1a0>)
 80072b4:	4809      	ldr	r0, [pc, #36]	; (80072dc <pbuf_copy+0x190>)
 80072b6:	f008 ff15 	bl	80100e4 <iprintf>
 80072ba:	f06f 0305 	mvn.w	r3, #5
 80072be:	e004      	b.n	80072ca <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	f47f af61 	bne.w	800718a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80072c8:	2300      	movs	r3, #0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3718      	adds	r7, #24
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	08011bf8 	.word	0x08011bf8
 80072d8:	08011ea0 	.word	0x08011ea0
 80072dc:	08011c58 	.word	0x08011c58
 80072e0:	08011ed0 	.word	0x08011ed0
 80072e4:	08011ee8 	.word	0x08011ee8
 80072e8:	08011f04 	.word	0x08011f04
 80072ec:	08011f14 	.word	0x08011f14

080072f0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b088      	sub	sp, #32
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	4611      	mov	r1, r2
 80072fc:	461a      	mov	r2, r3
 80072fe:	460b      	mov	r3, r1
 8007300:	80fb      	strh	r3, [r7, #6]
 8007302:	4613      	mov	r3, r2
 8007304:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8007306:	2300      	movs	r3, #0
 8007308:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800730a:	2300      	movs	r3, #0
 800730c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d108      	bne.n	8007326 <pbuf_copy_partial+0x36>
 8007314:	4b2b      	ldr	r3, [pc, #172]	; (80073c4 <pbuf_copy_partial+0xd4>)
 8007316:	f240 420a 	movw	r2, #1034	; 0x40a
 800731a:	492b      	ldr	r1, [pc, #172]	; (80073c8 <pbuf_copy_partial+0xd8>)
 800731c:	482b      	ldr	r0, [pc, #172]	; (80073cc <pbuf_copy_partial+0xdc>)
 800731e:	f008 fee1 	bl	80100e4 <iprintf>
 8007322:	2300      	movs	r3, #0
 8007324:	e04a      	b.n	80073bc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d108      	bne.n	800733e <pbuf_copy_partial+0x4e>
 800732c:	4b25      	ldr	r3, [pc, #148]	; (80073c4 <pbuf_copy_partial+0xd4>)
 800732e:	f240 420b 	movw	r2, #1035	; 0x40b
 8007332:	4927      	ldr	r1, [pc, #156]	; (80073d0 <pbuf_copy_partial+0xe0>)
 8007334:	4825      	ldr	r0, [pc, #148]	; (80073cc <pbuf_copy_partial+0xdc>)
 8007336:	f008 fed5 	bl	80100e4 <iprintf>
 800733a:	2300      	movs	r3, #0
 800733c:	e03e      	b.n	80073bc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	61fb      	str	r3, [r7, #28]
 8007342:	e034      	b.n	80073ae <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8007344:	88bb      	ldrh	r3, [r7, #4]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00a      	beq.n	8007360 <pbuf_copy_partial+0x70>
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	895b      	ldrh	r3, [r3, #10]
 800734e:	88ba      	ldrh	r2, [r7, #4]
 8007350:	429a      	cmp	r2, r3
 8007352:	d305      	bcc.n	8007360 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	895b      	ldrh	r3, [r3, #10]
 8007358:	88ba      	ldrh	r2, [r7, #4]
 800735a:	1ad3      	subs	r3, r2, r3
 800735c:	80bb      	strh	r3, [r7, #4]
 800735e:	e023      	b.n	80073a8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	895a      	ldrh	r2, [r3, #10]
 8007364:	88bb      	ldrh	r3, [r7, #4]
 8007366:	1ad3      	subs	r3, r2, r3
 8007368:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800736a:	8b3a      	ldrh	r2, [r7, #24]
 800736c:	88fb      	ldrh	r3, [r7, #6]
 800736e:	429a      	cmp	r2, r3
 8007370:	d901      	bls.n	8007376 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8007372:	88fb      	ldrh	r3, [r7, #6]
 8007374:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8007376:	8b7b      	ldrh	r3, [r7, #26]
 8007378:	68ba      	ldr	r2, [r7, #8]
 800737a:	18d0      	adds	r0, r2, r3
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	685a      	ldr	r2, [r3, #4]
 8007380:	88bb      	ldrh	r3, [r7, #4]
 8007382:	4413      	add	r3, r2
 8007384:	8b3a      	ldrh	r2, [r7, #24]
 8007386:	4619      	mov	r1, r3
 8007388:	f008 fe7c 	bl	8010084 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800738c:	8afa      	ldrh	r2, [r7, #22]
 800738e:	8b3b      	ldrh	r3, [r7, #24]
 8007390:	4413      	add	r3, r2
 8007392:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8007394:	8b7a      	ldrh	r2, [r7, #26]
 8007396:	8b3b      	ldrh	r3, [r7, #24]
 8007398:	4413      	add	r3, r2
 800739a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800739c:	88fa      	ldrh	r2, [r7, #6]
 800739e:	8b3b      	ldrh	r3, [r7, #24]
 80073a0:	1ad3      	subs	r3, r2, r3
 80073a2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80073a4:	2300      	movs	r3, #0
 80073a6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	61fb      	str	r3, [r7, #28]
 80073ae:	88fb      	ldrh	r3, [r7, #6]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d002      	beq.n	80073ba <pbuf_copy_partial+0xca>
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d1c4      	bne.n	8007344 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80073ba:	8afb      	ldrh	r3, [r7, #22]
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3720      	adds	r7, #32
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}
 80073c4:	08011bf8 	.word	0x08011bf8
 80073c8:	08011f40 	.word	0x08011f40
 80073cc:	08011c58 	.word	0x08011c58
 80073d0:	08011f60 	.word	0x08011f60

080073d4 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b088      	sub	sp, #32
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	4613      	mov	r3, r2
 80073e0:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 80073e2:	88fb      	ldrh	r3, [r7, #6]
 80073e4:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 80073e6:	2300      	movs	r3, #0
 80073e8:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d109      	bne.n	8007404 <pbuf_take+0x30>
 80073f0:	4b3a      	ldr	r3, [pc, #232]	; (80074dc <pbuf_take+0x108>)
 80073f2:	f240 42b3 	movw	r2, #1203	; 0x4b3
 80073f6:	493a      	ldr	r1, [pc, #232]	; (80074e0 <pbuf_take+0x10c>)
 80073f8:	483a      	ldr	r0, [pc, #232]	; (80074e4 <pbuf_take+0x110>)
 80073fa:	f008 fe73 	bl	80100e4 <iprintf>
 80073fe:	f06f 030f 	mvn.w	r3, #15
 8007402:	e067      	b.n	80074d4 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d109      	bne.n	800741e <pbuf_take+0x4a>
 800740a:	4b34      	ldr	r3, [pc, #208]	; (80074dc <pbuf_take+0x108>)
 800740c:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8007410:	4935      	ldr	r1, [pc, #212]	; (80074e8 <pbuf_take+0x114>)
 8007412:	4834      	ldr	r0, [pc, #208]	; (80074e4 <pbuf_take+0x110>)
 8007414:	f008 fe66 	bl	80100e4 <iprintf>
 8007418:	f06f 030f 	mvn.w	r3, #15
 800741c:	e05a      	b.n	80074d4 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	891b      	ldrh	r3, [r3, #8]
 8007422:	88fa      	ldrh	r2, [r7, #6]
 8007424:	429a      	cmp	r2, r3
 8007426:	d909      	bls.n	800743c <pbuf_take+0x68>
 8007428:	4b2c      	ldr	r3, [pc, #176]	; (80074dc <pbuf_take+0x108>)
 800742a:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800742e:	492f      	ldr	r1, [pc, #188]	; (80074ec <pbuf_take+0x118>)
 8007430:	482c      	ldr	r0, [pc, #176]	; (80074e4 <pbuf_take+0x110>)
 8007432:	f008 fe57 	bl	80100e4 <iprintf>
 8007436:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800743a:	e04b      	b.n	80074d4 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d007      	beq.n	8007452 <pbuf_take+0x7e>
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d004      	beq.n	8007452 <pbuf_take+0x7e>
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	891b      	ldrh	r3, [r3, #8]
 800744c:	88fa      	ldrh	r2, [r7, #6]
 800744e:	429a      	cmp	r2, r3
 8007450:	d902      	bls.n	8007458 <pbuf_take+0x84>
    return ERR_ARG;
 8007452:	f06f 030f 	mvn.w	r3, #15
 8007456:	e03d      	b.n	80074d4 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	61fb      	str	r3, [r7, #28]
 800745c:	e028      	b.n	80074b0 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d106      	bne.n	8007472 <pbuf_take+0x9e>
 8007464:	4b1d      	ldr	r3, [pc, #116]	; (80074dc <pbuf_take+0x108>)
 8007466:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800746a:	4921      	ldr	r1, [pc, #132]	; (80074f0 <pbuf_take+0x11c>)
 800746c:	481d      	ldr	r0, [pc, #116]	; (80074e4 <pbuf_take+0x110>)
 800746e:	f008 fe39 	bl	80100e4 <iprintf>
    buf_copy_len = total_copy_len;
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	895b      	ldrh	r3, [r3, #10]
 800747a:	461a      	mov	r2, r3
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	4293      	cmp	r3, r2
 8007480:	d902      	bls.n	8007488 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	895b      	ldrh	r3, [r3, #10]
 8007486:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	6858      	ldr	r0, [r3, #4]
 800748c:	68ba      	ldr	r2, [r7, #8]
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	4413      	add	r3, r2
 8007492:	69ba      	ldr	r2, [r7, #24]
 8007494:	4619      	mov	r1, r3
 8007496:	f008 fdf5 	bl	8010084 <memcpy>
    total_copy_len -= buf_copy_len;
 800749a:	697a      	ldr	r2, [r7, #20]
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 80074a2:	693a      	ldr	r2, [r7, #16]
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	4413      	add	r3, r2
 80074a8:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	61fb      	str	r3, [r7, #28]
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d1d3      	bne.n	800745e <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d103      	bne.n	80074c4 <pbuf_take+0xf0>
 80074bc:	88fb      	ldrh	r3, [r7, #6]
 80074be:	693a      	ldr	r2, [r7, #16]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d006      	beq.n	80074d2 <pbuf_take+0xfe>
 80074c4:	4b05      	ldr	r3, [pc, #20]	; (80074dc <pbuf_take+0x108>)
 80074c6:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 80074ca:	490a      	ldr	r1, [pc, #40]	; (80074f4 <pbuf_take+0x120>)
 80074cc:	4805      	ldr	r0, [pc, #20]	; (80074e4 <pbuf_take+0x110>)
 80074ce:	f008 fe09 	bl	80100e4 <iprintf>
  return ERR_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3720      	adds	r7, #32
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	08011bf8 	.word	0x08011bf8
 80074e0:	08011fd0 	.word	0x08011fd0
 80074e4:	08011c58 	.word	0x08011c58
 80074e8:	08011fe8 	.word	0x08011fe8
 80074ec:	08012004 	.word	0x08012004
 80074f0:	08012024 	.word	0x08012024
 80074f4:	0801203c 	.word	0x0801203c

080074f8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	4603      	mov	r3, r0
 8007500:	603a      	str	r2, [r7, #0]
 8007502:	71fb      	strb	r3, [r7, #7]
 8007504:	460b      	mov	r3, r1
 8007506:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	8919      	ldrh	r1, [r3, #8]
 800750c:	88ba      	ldrh	r2, [r7, #4]
 800750e:	79fb      	ldrb	r3, [r7, #7]
 8007510:	4618      	mov	r0, r3
 8007512:	f7ff fa1f 	bl	8006954 <pbuf_alloc>
 8007516:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d101      	bne.n	8007522 <pbuf_clone+0x2a>
    return NULL;
 800751e:	2300      	movs	r3, #0
 8007520:	e011      	b.n	8007546 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8007522:	6839      	ldr	r1, [r7, #0]
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f7ff fe11 	bl	800714c <pbuf_copy>
 800752a:	4603      	mov	r3, r0
 800752c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800752e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d006      	beq.n	8007544 <pbuf_clone+0x4c>
 8007536:	4b06      	ldr	r3, [pc, #24]	; (8007550 <pbuf_clone+0x58>)
 8007538:	f240 5224 	movw	r2, #1316	; 0x524
 800753c:	4905      	ldr	r1, [pc, #20]	; (8007554 <pbuf_clone+0x5c>)
 800753e:	4806      	ldr	r0, [pc, #24]	; (8007558 <pbuf_clone+0x60>)
 8007540:	f008 fdd0 	bl	80100e4 <iprintf>
  return q;
 8007544:	68fb      	ldr	r3, [r7, #12]
}
 8007546:	4618      	mov	r0, r3
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	08011bf8 	.word	0x08011bf8
 8007554:	0801206c 	.word	0x0801206c
 8007558:	08011c58 	.word	0x08011c58

0800755c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8007560:	f008 fdd8 	bl	8010114 <rand>
 8007564:	4603      	mov	r3, r0
 8007566:	b29b      	uxth	r3, r3
 8007568:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800756c:	b29b      	uxth	r3, r3
 800756e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8007572:	b29a      	uxth	r2, r3
 8007574:	4b01      	ldr	r3, [pc, #4]	; (800757c <tcp_init+0x20>)
 8007576:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8007578:	bf00      	nop
 800757a:	bd80      	pop	{r7, pc}
 800757c:	2000000a 	.word	0x2000000a

08007580 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	7d1b      	ldrb	r3, [r3, #20]
 800758c:	2b01      	cmp	r3, #1
 800758e:	d105      	bne.n	800759c <tcp_free+0x1c>
 8007590:	4b06      	ldr	r3, [pc, #24]	; (80075ac <tcp_free+0x2c>)
 8007592:	22d4      	movs	r2, #212	; 0xd4
 8007594:	4906      	ldr	r1, [pc, #24]	; (80075b0 <tcp_free+0x30>)
 8007596:	4807      	ldr	r0, [pc, #28]	; (80075b4 <tcp_free+0x34>)
 8007598:	f008 fda4 	bl	80100e4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800759c:	6879      	ldr	r1, [r7, #4]
 800759e:	2001      	movs	r0, #1
 80075a0:	f7fe feaa 	bl	80062f8 <memp_free>
}
 80075a4:	bf00      	nop
 80075a6:	3708      	adds	r7, #8
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	080120f8 	.word	0x080120f8
 80075b0:	08012128 	.word	0x08012128
 80075b4:	0801213c 	.word	0x0801213c

080075b8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	7d1b      	ldrb	r3, [r3, #20]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d105      	bne.n	80075d4 <tcp_free_listen+0x1c>
 80075c8:	4b06      	ldr	r3, [pc, #24]	; (80075e4 <tcp_free_listen+0x2c>)
 80075ca:	22df      	movs	r2, #223	; 0xdf
 80075cc:	4906      	ldr	r1, [pc, #24]	; (80075e8 <tcp_free_listen+0x30>)
 80075ce:	4807      	ldr	r0, [pc, #28]	; (80075ec <tcp_free_listen+0x34>)
 80075d0:	f008 fd88 	bl	80100e4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80075d4:	6879      	ldr	r1, [r7, #4]
 80075d6:	2002      	movs	r0, #2
 80075d8:	f7fe fe8e 	bl	80062f8 <memp_free>
}
 80075dc:	bf00      	nop
 80075de:	3708      	adds	r7, #8
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}
 80075e4:	080120f8 	.word	0x080120f8
 80075e8:	08012164 	.word	0x08012164
 80075ec:	0801213c 	.word	0x0801213c

080075f0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80075f4:	f001 f800 	bl	80085f8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80075f8:	4b07      	ldr	r3, [pc, #28]	; (8007618 <tcp_tmr+0x28>)
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	3301      	adds	r3, #1
 80075fe:	b2da      	uxtb	r2, r3
 8007600:	4b05      	ldr	r3, [pc, #20]	; (8007618 <tcp_tmr+0x28>)
 8007602:	701a      	strb	r2, [r3, #0]
 8007604:	4b04      	ldr	r3, [pc, #16]	; (8007618 <tcp_tmr+0x28>)
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	f003 0301 	and.w	r3, r3, #1
 800760c:	2b00      	cmp	r3, #0
 800760e:	d001      	beq.n	8007614 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8007610:	f000 fcb2 	bl	8007f78 <tcp_slowtmr>
  }
}
 8007614:	bf00      	nop
 8007616:	bd80      	pop	{r7, pc}
 8007618:	200000cd 	.word	0x200000cd

0800761c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d105      	bne.n	8007638 <tcp_remove_listener+0x1c>
 800762c:	4b0d      	ldr	r3, [pc, #52]	; (8007664 <tcp_remove_listener+0x48>)
 800762e:	22ff      	movs	r2, #255	; 0xff
 8007630:	490d      	ldr	r1, [pc, #52]	; (8007668 <tcp_remove_listener+0x4c>)
 8007632:	480e      	ldr	r0, [pc, #56]	; (800766c <tcp_remove_listener+0x50>)
 8007634:	f008 fd56 	bl	80100e4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	60fb      	str	r3, [r7, #12]
 800763c:	e00a      	b.n	8007654 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007642:	683a      	ldr	r2, [r7, #0]
 8007644:	429a      	cmp	r2, r3
 8007646:	d102      	bne.n	800764e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2200      	movs	r2, #0
 800764c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	60fb      	str	r3, [r7, #12]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d1f1      	bne.n	800763e <tcp_remove_listener+0x22>
    }
  }
}
 800765a:	bf00      	nop
 800765c:	bf00      	nop
 800765e:	3710      	adds	r7, #16
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}
 8007664:	080120f8 	.word	0x080120f8
 8007668:	08012180 	.word	0x08012180
 800766c:	0801213c 	.word	0x0801213c

08007670 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d106      	bne.n	800768c <tcp_listen_closed+0x1c>
 800767e:	4b14      	ldr	r3, [pc, #80]	; (80076d0 <tcp_listen_closed+0x60>)
 8007680:	f240 1211 	movw	r2, #273	; 0x111
 8007684:	4913      	ldr	r1, [pc, #76]	; (80076d4 <tcp_listen_closed+0x64>)
 8007686:	4814      	ldr	r0, [pc, #80]	; (80076d8 <tcp_listen_closed+0x68>)
 8007688:	f008 fd2c 	bl	80100e4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	7d1b      	ldrb	r3, [r3, #20]
 8007690:	2b01      	cmp	r3, #1
 8007692:	d006      	beq.n	80076a2 <tcp_listen_closed+0x32>
 8007694:	4b0e      	ldr	r3, [pc, #56]	; (80076d0 <tcp_listen_closed+0x60>)
 8007696:	f44f 7289 	mov.w	r2, #274	; 0x112
 800769a:	4910      	ldr	r1, [pc, #64]	; (80076dc <tcp_listen_closed+0x6c>)
 800769c:	480e      	ldr	r0, [pc, #56]	; (80076d8 <tcp_listen_closed+0x68>)
 800769e:	f008 fd21 	bl	80100e4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80076a2:	2301      	movs	r3, #1
 80076a4:	60fb      	str	r3, [r7, #12]
 80076a6:	e00b      	b.n	80076c0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80076a8:	4a0d      	ldr	r2, [pc, #52]	; (80076e0 <tcp_listen_closed+0x70>)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	6879      	ldr	r1, [r7, #4]
 80076b4:	4618      	mov	r0, r3
 80076b6:	f7ff ffb1 	bl	800761c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	3301      	adds	r3, #1
 80076be:	60fb      	str	r3, [r7, #12]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2b03      	cmp	r3, #3
 80076c4:	d9f0      	bls.n	80076a8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80076c6:	bf00      	nop
 80076c8:	bf00      	nop
 80076ca:	3710      	adds	r7, #16
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	080120f8 	.word	0x080120f8
 80076d4:	080121a8 	.word	0x080121a8
 80076d8:	0801213c 	.word	0x0801213c
 80076dc:	080121b4 	.word	0x080121b4
 80076e0:	080140cc 	.word	0x080140cc

080076e4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80076e4:	b5b0      	push	{r4, r5, r7, lr}
 80076e6:	b088      	sub	sp, #32
 80076e8:	af04      	add	r7, sp, #16
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	460b      	mov	r3, r1
 80076ee:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d106      	bne.n	8007704 <tcp_close_shutdown+0x20>
 80076f6:	4b63      	ldr	r3, [pc, #396]	; (8007884 <tcp_close_shutdown+0x1a0>)
 80076f8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80076fc:	4962      	ldr	r1, [pc, #392]	; (8007888 <tcp_close_shutdown+0x1a4>)
 80076fe:	4863      	ldr	r0, [pc, #396]	; (800788c <tcp_close_shutdown+0x1a8>)
 8007700:	f008 fcf0 	bl	80100e4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8007704:	78fb      	ldrb	r3, [r7, #3]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d066      	beq.n	80077d8 <tcp_close_shutdown+0xf4>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	7d1b      	ldrb	r3, [r3, #20]
 800770e:	2b04      	cmp	r3, #4
 8007710:	d003      	beq.n	800771a <tcp_close_shutdown+0x36>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	7d1b      	ldrb	r3, [r3, #20]
 8007716:	2b07      	cmp	r3, #7
 8007718:	d15e      	bne.n	80077d8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800771e:	2b00      	cmp	r3, #0
 8007720:	d104      	bne.n	800772c <tcp_close_shutdown+0x48>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007726:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800772a:	d055      	beq.n	80077d8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	8b5b      	ldrh	r3, [r3, #26]
 8007730:	f003 0310 	and.w	r3, r3, #16
 8007734:	2b00      	cmp	r3, #0
 8007736:	d106      	bne.n	8007746 <tcp_close_shutdown+0x62>
 8007738:	4b52      	ldr	r3, [pc, #328]	; (8007884 <tcp_close_shutdown+0x1a0>)
 800773a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800773e:	4954      	ldr	r1, [pc, #336]	; (8007890 <tcp_close_shutdown+0x1ac>)
 8007740:	4852      	ldr	r0, [pc, #328]	; (800788c <tcp_close_shutdown+0x1a8>)
 8007742:	f008 fccf 	bl	80100e4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800774e:	687d      	ldr	r5, [r7, #4]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	3304      	adds	r3, #4
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	8ad2      	ldrh	r2, [r2, #22]
 8007758:	6879      	ldr	r1, [r7, #4]
 800775a:	8b09      	ldrh	r1, [r1, #24]
 800775c:	9102      	str	r1, [sp, #8]
 800775e:	9201      	str	r2, [sp, #4]
 8007760:	9300      	str	r3, [sp, #0]
 8007762:	462b      	mov	r3, r5
 8007764:	4622      	mov	r2, r4
 8007766:	4601      	mov	r1, r0
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f005 fcd1 	bl	800d110 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f001 fab2 	bl	8008cd8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007774:	4b47      	ldr	r3, [pc, #284]	; (8007894 <tcp_close_shutdown+0x1b0>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	429a      	cmp	r2, r3
 800777c:	d105      	bne.n	800778a <tcp_close_shutdown+0xa6>
 800777e:	4b45      	ldr	r3, [pc, #276]	; (8007894 <tcp_close_shutdown+0x1b0>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68db      	ldr	r3, [r3, #12]
 8007784:	4a43      	ldr	r2, [pc, #268]	; (8007894 <tcp_close_shutdown+0x1b0>)
 8007786:	6013      	str	r3, [r2, #0]
 8007788:	e013      	b.n	80077b2 <tcp_close_shutdown+0xce>
 800778a:	4b42      	ldr	r3, [pc, #264]	; (8007894 <tcp_close_shutdown+0x1b0>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	60fb      	str	r3, [r7, #12]
 8007790:	e00c      	b.n	80077ac <tcp_close_shutdown+0xc8>
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	429a      	cmp	r2, r3
 800779a:	d104      	bne.n	80077a6 <tcp_close_shutdown+0xc2>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	68da      	ldr	r2, [r3, #12]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	60da      	str	r2, [r3, #12]
 80077a4:	e005      	b.n	80077b2 <tcp_close_shutdown+0xce>
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	60fb      	str	r3, [r7, #12]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d1ef      	bne.n	8007792 <tcp_close_shutdown+0xae>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	60da      	str	r2, [r3, #12]
 80077b8:	4b37      	ldr	r3, [pc, #220]	; (8007898 <tcp_close_shutdown+0x1b4>)
 80077ba:	2201      	movs	r2, #1
 80077bc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80077be:	4b37      	ldr	r3, [pc, #220]	; (800789c <tcp_close_shutdown+0x1b8>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d102      	bne.n	80077ce <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80077c8:	f003 ff46 	bl	800b658 <tcp_trigger_input_pcb_close>
 80077cc:	e002      	b.n	80077d4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f7ff fed6 	bl	8007580 <tcp_free>
      }
      return ERR_OK;
 80077d4:	2300      	movs	r3, #0
 80077d6:	e050      	b.n	800787a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	7d1b      	ldrb	r3, [r3, #20]
 80077dc:	2b02      	cmp	r3, #2
 80077de:	d03b      	beq.n	8007858 <tcp_close_shutdown+0x174>
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	dc44      	bgt.n	800786e <tcp_close_shutdown+0x18a>
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d002      	beq.n	80077ee <tcp_close_shutdown+0x10a>
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d02a      	beq.n	8007842 <tcp_close_shutdown+0x15e>
 80077ec:	e03f      	b.n	800786e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	8adb      	ldrh	r3, [r3, #22]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d021      	beq.n	800783a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80077f6:	4b2a      	ldr	r3, [pc, #168]	; (80078a0 <tcp_close_shutdown+0x1bc>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d105      	bne.n	800780c <tcp_close_shutdown+0x128>
 8007800:	4b27      	ldr	r3, [pc, #156]	; (80078a0 <tcp_close_shutdown+0x1bc>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	4a26      	ldr	r2, [pc, #152]	; (80078a0 <tcp_close_shutdown+0x1bc>)
 8007808:	6013      	str	r3, [r2, #0]
 800780a:	e013      	b.n	8007834 <tcp_close_shutdown+0x150>
 800780c:	4b24      	ldr	r3, [pc, #144]	; (80078a0 <tcp_close_shutdown+0x1bc>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	60bb      	str	r3, [r7, #8]
 8007812:	e00c      	b.n	800782e <tcp_close_shutdown+0x14a>
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	429a      	cmp	r2, r3
 800781c:	d104      	bne.n	8007828 <tcp_close_shutdown+0x144>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	68da      	ldr	r2, [r3, #12]
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	60da      	str	r2, [r3, #12]
 8007826:	e005      	b.n	8007834 <tcp_close_shutdown+0x150>
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	60bb      	str	r3, [r7, #8]
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d1ef      	bne.n	8007814 <tcp_close_shutdown+0x130>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f7ff fea0 	bl	8007580 <tcp_free>
      break;
 8007840:	e01a      	b.n	8007878 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f7ff ff14 	bl	8007670 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8007848:	6879      	ldr	r1, [r7, #4]
 800784a:	4816      	ldr	r0, [pc, #88]	; (80078a4 <tcp_close_shutdown+0x1c0>)
 800784c:	f001 fa94 	bl	8008d78 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f7ff feb1 	bl	80075b8 <tcp_free_listen>
      break;
 8007856:	e00f      	b.n	8007878 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007858:	6879      	ldr	r1, [r7, #4]
 800785a:	480e      	ldr	r0, [pc, #56]	; (8007894 <tcp_close_shutdown+0x1b0>)
 800785c:	f001 fa8c 	bl	8008d78 <tcp_pcb_remove>
 8007860:	4b0d      	ldr	r3, [pc, #52]	; (8007898 <tcp_close_shutdown+0x1b4>)
 8007862:	2201      	movs	r2, #1
 8007864:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f7ff fe8a 	bl	8007580 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800786c:	e004      	b.n	8007878 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 f81a 	bl	80078a8 <tcp_close_shutdown_fin>
 8007874:	4603      	mov	r3, r0
 8007876:	e000      	b.n	800787a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8007878:	2300      	movs	r3, #0
}
 800787a:	4618      	mov	r0, r3
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bdb0      	pop	{r4, r5, r7, pc}
 8007882:	bf00      	nop
 8007884:	080120f8 	.word	0x080120f8
 8007888:	080121cc 	.word	0x080121cc
 800788c:	0801213c 	.word	0x0801213c
 8007890:	080121ec 	.word	0x080121ec
 8007894:	200065f4 	.word	0x200065f4
 8007898:	200065f0 	.word	0x200065f0
 800789c:	20006608 	.word	0x20006608
 80078a0:	20006600 	.word	0x20006600
 80078a4:	200065fc 	.word	0x200065fc

080078a8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d106      	bne.n	80078c4 <tcp_close_shutdown_fin+0x1c>
 80078b6:	4b2e      	ldr	r3, [pc, #184]	; (8007970 <tcp_close_shutdown_fin+0xc8>)
 80078b8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80078bc:	492d      	ldr	r1, [pc, #180]	; (8007974 <tcp_close_shutdown_fin+0xcc>)
 80078be:	482e      	ldr	r0, [pc, #184]	; (8007978 <tcp_close_shutdown_fin+0xd0>)
 80078c0:	f008 fc10 	bl	80100e4 <iprintf>

  switch (pcb->state) {
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	7d1b      	ldrb	r3, [r3, #20]
 80078c8:	2b07      	cmp	r3, #7
 80078ca:	d020      	beq.n	800790e <tcp_close_shutdown_fin+0x66>
 80078cc:	2b07      	cmp	r3, #7
 80078ce:	dc2b      	bgt.n	8007928 <tcp_close_shutdown_fin+0x80>
 80078d0:	2b03      	cmp	r3, #3
 80078d2:	d002      	beq.n	80078da <tcp_close_shutdown_fin+0x32>
 80078d4:	2b04      	cmp	r3, #4
 80078d6:	d00d      	beq.n	80078f4 <tcp_close_shutdown_fin+0x4c>
 80078d8:	e026      	b.n	8007928 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f004 fd26 	bl	800c32c <tcp_send_fin>
 80078e0:	4603      	mov	r3, r0
 80078e2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80078e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d11f      	bne.n	800792c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2205      	movs	r2, #5
 80078f0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80078f2:	e01b      	b.n	800792c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f004 fd19 	bl	800c32c <tcp_send_fin>
 80078fa:	4603      	mov	r3, r0
 80078fc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80078fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d114      	bne.n	8007930 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2205      	movs	r2, #5
 800790a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800790c:	e010      	b.n	8007930 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f004 fd0c 	bl	800c32c <tcp_send_fin>
 8007914:	4603      	mov	r3, r0
 8007916:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007918:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d109      	bne.n	8007934 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2209      	movs	r2, #9
 8007924:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007926:	e005      	b.n	8007934 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8007928:	2300      	movs	r3, #0
 800792a:	e01c      	b.n	8007966 <tcp_close_shutdown_fin+0xbe>
      break;
 800792c:	bf00      	nop
 800792e:	e002      	b.n	8007936 <tcp_close_shutdown_fin+0x8e>
      break;
 8007930:	bf00      	nop
 8007932:	e000      	b.n	8007936 <tcp_close_shutdown_fin+0x8e>
      break;
 8007934:	bf00      	nop
  }

  if (err == ERR_OK) {
 8007936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d103      	bne.n	8007946 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f004 fe32 	bl	800c5a8 <tcp_output>
 8007944:	e00d      	b.n	8007962 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8007946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800794a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800794e:	d108      	bne.n	8007962 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	8b5b      	ldrh	r3, [r3, #26]
 8007954:	f043 0308 	orr.w	r3, r3, #8
 8007958:	b29a      	uxth	r2, r3
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800795e:	2300      	movs	r3, #0
 8007960:	e001      	b.n	8007966 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8007962:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007966:	4618      	mov	r0, r3
 8007968:	3710      	adds	r7, #16
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	080120f8 	.word	0x080120f8
 8007974:	080121a8 	.word	0x080121a8
 8007978:	0801213c 	.word	0x0801213c

0800797c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d109      	bne.n	800799e <tcp_close+0x22>
 800798a:	4b0f      	ldr	r3, [pc, #60]	; (80079c8 <tcp_close+0x4c>)
 800798c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8007990:	490e      	ldr	r1, [pc, #56]	; (80079cc <tcp_close+0x50>)
 8007992:	480f      	ldr	r0, [pc, #60]	; (80079d0 <tcp_close+0x54>)
 8007994:	f008 fba6 	bl	80100e4 <iprintf>
 8007998:	f06f 030f 	mvn.w	r3, #15
 800799c:	e00f      	b.n	80079be <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	7d1b      	ldrb	r3, [r3, #20]
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d006      	beq.n	80079b4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	8b5b      	ldrh	r3, [r3, #26]
 80079aa:	f043 0310 	orr.w	r3, r3, #16
 80079ae:	b29a      	uxth	r2, r3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80079b4:	2101      	movs	r1, #1
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f7ff fe94 	bl	80076e4 <tcp_close_shutdown>
 80079bc:	4603      	mov	r3, r0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3708      	adds	r7, #8
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	080120f8 	.word	0x080120f8
 80079cc:	08012208 	.word	0x08012208
 80079d0:	0801213c 	.word	0x0801213c

080079d4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b08e      	sub	sp, #56	; 0x38
 80079d8:	af04      	add	r7, sp, #16
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d107      	bne.n	80079f4 <tcp_abandon+0x20>
 80079e4:	4b52      	ldr	r3, [pc, #328]	; (8007b30 <tcp_abandon+0x15c>)
 80079e6:	f240 223d 	movw	r2, #573	; 0x23d
 80079ea:	4952      	ldr	r1, [pc, #328]	; (8007b34 <tcp_abandon+0x160>)
 80079ec:	4852      	ldr	r0, [pc, #328]	; (8007b38 <tcp_abandon+0x164>)
 80079ee:	f008 fb79 	bl	80100e4 <iprintf>
 80079f2:	e099      	b.n	8007b28 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	7d1b      	ldrb	r3, [r3, #20]
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d106      	bne.n	8007a0a <tcp_abandon+0x36>
 80079fc:	4b4c      	ldr	r3, [pc, #304]	; (8007b30 <tcp_abandon+0x15c>)
 80079fe:	f44f 7210 	mov.w	r2, #576	; 0x240
 8007a02:	494e      	ldr	r1, [pc, #312]	; (8007b3c <tcp_abandon+0x168>)
 8007a04:	484c      	ldr	r0, [pc, #304]	; (8007b38 <tcp_abandon+0x164>)
 8007a06:	f008 fb6d 	bl	80100e4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	7d1b      	ldrb	r3, [r3, #20]
 8007a0e:	2b0a      	cmp	r3, #10
 8007a10:	d107      	bne.n	8007a22 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8007a12:	6879      	ldr	r1, [r7, #4]
 8007a14:	484a      	ldr	r0, [pc, #296]	; (8007b40 <tcp_abandon+0x16c>)
 8007a16:	f001 f9af 	bl	8008d78 <tcp_pcb_remove>
    tcp_free(pcb);
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f7ff fdb0 	bl	8007580 <tcp_free>
 8007a20:	e082      	b.n	8007b28 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8007a22:	2300      	movs	r3, #0
 8007a24:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8007a26:	2300      	movs	r3, #0
 8007a28:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a2e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a34:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a3c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	691b      	ldr	r3, [r3, #16]
 8007a42:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	7d1b      	ldrb	r3, [r3, #20]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d126      	bne.n	8007a9a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	8adb      	ldrh	r3, [r3, #22]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d02e      	beq.n	8007ab2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007a54:	4b3b      	ldr	r3, [pc, #236]	; (8007b44 <tcp_abandon+0x170>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d105      	bne.n	8007a6a <tcp_abandon+0x96>
 8007a5e:	4b39      	ldr	r3, [pc, #228]	; (8007b44 <tcp_abandon+0x170>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	4a37      	ldr	r2, [pc, #220]	; (8007b44 <tcp_abandon+0x170>)
 8007a66:	6013      	str	r3, [r2, #0]
 8007a68:	e013      	b.n	8007a92 <tcp_abandon+0xbe>
 8007a6a:	4b36      	ldr	r3, [pc, #216]	; (8007b44 <tcp_abandon+0x170>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	61fb      	str	r3, [r7, #28]
 8007a70:	e00c      	b.n	8007a8c <tcp_abandon+0xb8>
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d104      	bne.n	8007a86 <tcp_abandon+0xb2>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	68da      	ldr	r2, [r3, #12]
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	60da      	str	r2, [r3, #12]
 8007a84:	e005      	b.n	8007a92 <tcp_abandon+0xbe>
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	68db      	ldr	r3, [r3, #12]
 8007a8a:	61fb      	str	r3, [r7, #28]
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d1ef      	bne.n	8007a72 <tcp_abandon+0x9e>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	60da      	str	r2, [r3, #12]
 8007a98:	e00b      	b.n	8007ab2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	8adb      	ldrh	r3, [r3, #22]
 8007aa2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007aa4:	6879      	ldr	r1, [r7, #4]
 8007aa6:	4828      	ldr	r0, [pc, #160]	; (8007b48 <tcp_abandon+0x174>)
 8007aa8:	f001 f966 	bl	8008d78 <tcp_pcb_remove>
 8007aac:	4b27      	ldr	r3, [pc, #156]	; (8007b4c <tcp_abandon+0x178>)
 8007aae:	2201      	movs	r2, #1
 8007ab0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d004      	beq.n	8007ac4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f000 fe7a 	bl	80087b8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d004      	beq.n	8007ad6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f000 fe71 	bl	80087b8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d004      	beq.n	8007ae8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f000 fe68 	bl	80087b8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8007ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00e      	beq.n	8007b0c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8007aee:	6879      	ldr	r1, [r7, #4]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	3304      	adds	r3, #4
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	8b12      	ldrh	r2, [r2, #24]
 8007af8:	9202      	str	r2, [sp, #8]
 8007afa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007afc:	9201      	str	r2, [sp, #4]
 8007afe:	9300      	str	r3, [sp, #0]
 8007b00:	460b      	mov	r3, r1
 8007b02:	697a      	ldr	r2, [r7, #20]
 8007b04:	69b9      	ldr	r1, [r7, #24]
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f005 fb02 	bl	800d110 <tcp_rst>
    }
    last_state = pcb->state;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	7d1b      	ldrb	r3, [r3, #20]
 8007b10:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f7ff fd34 	bl	8007580 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d004      	beq.n	8007b28 <tcp_abandon+0x154>
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	f06f 010c 	mvn.w	r1, #12
 8007b24:	68f8      	ldr	r0, [r7, #12]
 8007b26:	4798      	blx	r3
  }
}
 8007b28:	3728      	adds	r7, #40	; 0x28
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	080120f8 	.word	0x080120f8
 8007b34:	0801223c 	.word	0x0801223c
 8007b38:	0801213c 	.word	0x0801213c
 8007b3c:	08012258 	.word	0x08012258
 8007b40:	20006604 	.word	0x20006604
 8007b44:	20006600 	.word	0x20006600
 8007b48:	200065f4 	.word	0x200065f4
 8007b4c:	200065f0 	.word	0x200065f0

08007b50 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8007b58:	2101      	movs	r1, #1
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f7ff ff3a 	bl	80079d4 <tcp_abandon>
}
 8007b60:	bf00      	nop
 8007b62:	3708      	adds	r7, #8
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d106      	bne.n	8007b84 <tcp_update_rcv_ann_wnd+0x1c>
 8007b76:	4b25      	ldr	r3, [pc, #148]	; (8007c0c <tcp_update_rcv_ann_wnd+0xa4>)
 8007b78:	f240 32a6 	movw	r2, #934	; 0x3a6
 8007b7c:	4924      	ldr	r1, [pc, #144]	; (8007c10 <tcp_update_rcv_ann_wnd+0xa8>)
 8007b7e:	4825      	ldr	r0, [pc, #148]	; (8007c14 <tcp_update_rcv_ann_wnd+0xac>)
 8007b80:	f008 fab0 	bl	80100e4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007b8c:	4413      	add	r3, r2
 8007b8e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8007b98:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007b9c:	bf28      	it	cs
 8007b9e:	f44f 6280 	movcs.w	r2, #1024	; 0x400
 8007ba2:	b292      	uxth	r2, r2
 8007ba4:	4413      	add	r3, r2
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	1ad3      	subs	r3, r2, r3
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	db08      	blt.n	8007bc0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bba:	68fa      	ldr	r2, [r7, #12]
 8007bbc:	1ad3      	subs	r3, r2, r3
 8007bbe:	e020      	b.n	8007c02 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc8:	1ad3      	subs	r3, r2, r3
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	dd03      	ble.n	8007bd6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007bd4:	e014      	b.n	8007c00 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bde:	1ad3      	subs	r3, r2, r3
 8007be0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007be8:	d306      	bcc.n	8007bf8 <tcp_update_rcv_ann_wnd+0x90>
 8007bea:	4b08      	ldr	r3, [pc, #32]	; (8007c0c <tcp_update_rcv_ann_wnd+0xa4>)
 8007bec:	f240 32b6 	movw	r2, #950	; 0x3b6
 8007bf0:	4909      	ldr	r1, [pc, #36]	; (8007c18 <tcp_update_rcv_ann_wnd+0xb0>)
 8007bf2:	4808      	ldr	r0, [pc, #32]	; (8007c14 <tcp_update_rcv_ann_wnd+0xac>)
 8007bf4:	f008 fa76 	bl	80100e4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8007c00:	2300      	movs	r3, #0
  }
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	080120f8 	.word	0x080120f8
 8007c10:	08012354 	.word	0x08012354
 8007c14:	0801213c 	.word	0x0801213c
 8007c18:	08012378 	.word	0x08012378

08007c1c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	460b      	mov	r3, r1
 8007c26:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d107      	bne.n	8007c3e <tcp_recved+0x22>
 8007c2e:	4b1f      	ldr	r3, [pc, #124]	; (8007cac <tcp_recved+0x90>)
 8007c30:	f240 32cf 	movw	r2, #975	; 0x3cf
 8007c34:	491e      	ldr	r1, [pc, #120]	; (8007cb0 <tcp_recved+0x94>)
 8007c36:	481f      	ldr	r0, [pc, #124]	; (8007cb4 <tcp_recved+0x98>)
 8007c38:	f008 fa54 	bl	80100e4 <iprintf>
 8007c3c:	e032      	b.n	8007ca4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	7d1b      	ldrb	r3, [r3, #20]
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d106      	bne.n	8007c54 <tcp_recved+0x38>
 8007c46:	4b19      	ldr	r3, [pc, #100]	; (8007cac <tcp_recved+0x90>)
 8007c48:	f240 32d2 	movw	r2, #978	; 0x3d2
 8007c4c:	491a      	ldr	r1, [pc, #104]	; (8007cb8 <tcp_recved+0x9c>)
 8007c4e:	4819      	ldr	r0, [pc, #100]	; (8007cb4 <tcp_recved+0x98>)
 8007c50:	f008 fa48 	bl	80100e4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007c58:	887b      	ldrh	r3, [r7, #2]
 8007c5a:	4413      	add	r3, r2
 8007c5c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8007c5e:	89fb      	ldrh	r3, [r7, #14]
 8007c60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c64:	d804      	bhi.n	8007c70 <tcp_recved+0x54>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c6a:	89fa      	ldrh	r2, [r7, #14]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d204      	bcs.n	8007c7a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c76:	851a      	strh	r2, [r3, #40]	; 0x28
 8007c78:	e002      	b.n	8007c80 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	89fa      	ldrh	r2, [r7, #14]
 8007c7e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f7ff ff71 	bl	8007b68 <tcp_update_rcv_ann_wnd>
 8007c86:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c8e:	d309      	bcc.n	8007ca4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	8b5b      	ldrh	r3, [r3, #26]
 8007c94:	f043 0302 	orr.w	r3, r3, #2
 8007c98:	b29a      	uxth	r2, r3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f004 fc82 	bl	800c5a8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007ca4:	3710      	adds	r7, #16
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	080120f8 	.word	0x080120f8
 8007cb0:	08012394 	.word	0x08012394
 8007cb4:	0801213c 	.word	0x0801213c
 8007cb8:	080123ac 	.word	0x080123ac

08007cbc <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8007cc6:	4b1e      	ldr	r3, [pc, #120]	; (8007d40 <tcp_new_port+0x84>)
 8007cc8:	881b      	ldrh	r3, [r3, #0]
 8007cca:	3301      	adds	r3, #1
 8007ccc:	b29a      	uxth	r2, r3
 8007cce:	4b1c      	ldr	r3, [pc, #112]	; (8007d40 <tcp_new_port+0x84>)
 8007cd0:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8007cd2:	4b1b      	ldr	r3, [pc, #108]	; (8007d40 <tcp_new_port+0x84>)
 8007cd4:	881b      	ldrh	r3, [r3, #0]
 8007cd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d103      	bne.n	8007ce6 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8007cde:	4b18      	ldr	r3, [pc, #96]	; (8007d40 <tcp_new_port+0x84>)
 8007ce0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8007ce4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	71fb      	strb	r3, [r7, #7]
 8007cea:	e01e      	b.n	8007d2a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007cec:	79fb      	ldrb	r3, [r7, #7]
 8007cee:	4a15      	ldr	r2, [pc, #84]	; (8007d44 <tcp_new_port+0x88>)
 8007cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	603b      	str	r3, [r7, #0]
 8007cf8:	e011      	b.n	8007d1e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	8ada      	ldrh	r2, [r3, #22]
 8007cfe:	4b10      	ldr	r3, [pc, #64]	; (8007d40 <tcp_new_port+0x84>)
 8007d00:	881b      	ldrh	r3, [r3, #0]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d108      	bne.n	8007d18 <tcp_new_port+0x5c>
        n++;
 8007d06:	88bb      	ldrh	r3, [r7, #4]
 8007d08:	3301      	adds	r3, #1
 8007d0a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8007d0c:	88bb      	ldrh	r3, [r7, #4]
 8007d0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d12:	d3d8      	bcc.n	8007cc6 <tcp_new_port+0xa>
          return 0;
 8007d14:	2300      	movs	r3, #0
 8007d16:	e00d      	b.n	8007d34 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	603b      	str	r3, [r7, #0]
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d1ea      	bne.n	8007cfa <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8007d24:	79fb      	ldrb	r3, [r7, #7]
 8007d26:	3301      	adds	r3, #1
 8007d28:	71fb      	strb	r3, [r7, #7]
 8007d2a:	79fb      	ldrb	r3, [r7, #7]
 8007d2c:	2b03      	cmp	r3, #3
 8007d2e:	d9dd      	bls.n	8007cec <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8007d30:	4b03      	ldr	r3, [pc, #12]	; (8007d40 <tcp_new_port+0x84>)
 8007d32:	881b      	ldrh	r3, [r3, #0]
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	370c      	adds	r7, #12
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr
 8007d40:	2000000a 	.word	0x2000000a
 8007d44:	080140cc 	.word	0x080140cc

08007d48 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b08a      	sub	sp, #40	; 0x28
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	603b      	str	r3, [r7, #0]
 8007d54:	4613      	mov	r3, r2
 8007d56:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d109      	bne.n	8007d76 <tcp_connect+0x2e>
 8007d62:	4b7d      	ldr	r3, [pc, #500]	; (8007f58 <tcp_connect+0x210>)
 8007d64:	f240 4235 	movw	r2, #1077	; 0x435
 8007d68:	497c      	ldr	r1, [pc, #496]	; (8007f5c <tcp_connect+0x214>)
 8007d6a:	487d      	ldr	r0, [pc, #500]	; (8007f60 <tcp_connect+0x218>)
 8007d6c:	f008 f9ba 	bl	80100e4 <iprintf>
 8007d70:	f06f 030f 	mvn.w	r3, #15
 8007d74:	e0ec      	b.n	8007f50 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d109      	bne.n	8007d90 <tcp_connect+0x48>
 8007d7c:	4b76      	ldr	r3, [pc, #472]	; (8007f58 <tcp_connect+0x210>)
 8007d7e:	f240 4236 	movw	r2, #1078	; 0x436
 8007d82:	4978      	ldr	r1, [pc, #480]	; (8007f64 <tcp_connect+0x21c>)
 8007d84:	4876      	ldr	r0, [pc, #472]	; (8007f60 <tcp_connect+0x218>)
 8007d86:	f008 f9ad 	bl	80100e4 <iprintf>
 8007d8a:	f06f 030f 	mvn.w	r3, #15
 8007d8e:	e0df      	b.n	8007f50 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	7d1b      	ldrb	r3, [r3, #20]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d009      	beq.n	8007dac <tcp_connect+0x64>
 8007d98:	4b6f      	ldr	r3, [pc, #444]	; (8007f58 <tcp_connect+0x210>)
 8007d9a:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8007d9e:	4972      	ldr	r1, [pc, #456]	; (8007f68 <tcp_connect+0x220>)
 8007da0:	486f      	ldr	r0, [pc, #444]	; (8007f60 <tcp_connect+0x218>)
 8007da2:	f008 f99f 	bl	80100e4 <iprintf>
 8007da6:	f06f 0309 	mvn.w	r3, #9
 8007daa:	e0d1      	b.n	8007f50 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d002      	beq.n	8007db8 <tcp_connect+0x70>
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	e000      	b.n	8007dba <tcp_connect+0x72>
 8007db8:	2300      	movs	r3, #0
 8007dba:	68fa      	ldr	r2, [r7, #12]
 8007dbc:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	88fa      	ldrh	r2, [r7, #6]
 8007dc2:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	7a1b      	ldrb	r3, [r3, #8]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d006      	beq.n	8007dda <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	7a1b      	ldrb	r3, [r3, #8]
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f7fe fd43 	bl	800685c <netif_get_by_index>
 8007dd6:	6278      	str	r0, [r7, #36]	; 0x24
 8007dd8:	e005      	b.n	8007de6 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	3304      	adds	r3, #4
 8007dde:	4618      	mov	r0, r3
 8007de0:	f006 ff34 	bl	800ec4c <ip4_route>
 8007de4:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 8007de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d102      	bne.n	8007df2 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8007dec:	f06f 0303 	mvn.w	r3, #3
 8007df0:	e0ae      	b.n	8007f50 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d003      	beq.n	8007e00 <tcp_connect+0xb8>
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d111      	bne.n	8007e24 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8007e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d002      	beq.n	8007e0c <tcp_connect+0xc4>
 8007e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e08:	3304      	adds	r3, #4
 8007e0a:	e000      	b.n	8007e0e <tcp_connect+0xc6>
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8007e10:	69fb      	ldr	r3, [r7, #28]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d102      	bne.n	8007e1c <tcp_connect+0xd4>
      return ERR_RTE;
 8007e16:	f06f 0303 	mvn.w	r3, #3
 8007e1a:	e099      	b.n	8007f50 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	8adb      	ldrh	r3, [r3, #22]
 8007e28:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	8adb      	ldrh	r3, [r3, #22]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d10c      	bne.n	8007e4c <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8007e32:	f7ff ff43 	bl	8007cbc <tcp_new_port>
 8007e36:	4603      	mov	r3, r0
 8007e38:	461a      	mov	r2, r3
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	8adb      	ldrh	r3, [r3, #22]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d102      	bne.n	8007e4c <tcp_connect+0x104>
      return ERR_BUF;
 8007e46:	f06f 0301 	mvn.w	r3, #1
 8007e4a:	e081      	b.n	8007f50 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8007e4c:	68f8      	ldr	r0, [r7, #12]
 8007e4e:	f001 f827 	bl	8008ea0 <tcp_next_iss>
 8007e52:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2200      	movs	r2, #0
 8007e58:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	697a      	ldr	r2, [r7, #20]
 8007e5e:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	1e5a      	subs	r2, r3, #1
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	1e5a      	subs	r2, r3, #1
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	1e5a      	subs	r2, r3, #1
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e96:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8007ea0:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	3304      	adds	r3, #4
 8007eaa:	461a      	mov	r2, r3
 8007eac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007eae:	f001 f81d 	bl	8008eec <tcp_eff_send_mss_netif>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	683a      	ldr	r2, [r7, #0]
 8007ec6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8007eca:	2102      	movs	r1, #2
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f004 fa7d 	bl	800c3cc <tcp_enqueue_flags>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8007ed6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d136      	bne.n	8007f4c <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2202      	movs	r2, #2
 8007ee2:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8007ee4:	8b7b      	ldrh	r3, [r7, #26]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d021      	beq.n	8007f2e <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8007eea:	4b20      	ldr	r3, [pc, #128]	; (8007f6c <tcp_connect+0x224>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	68fa      	ldr	r2, [r7, #12]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d105      	bne.n	8007f00 <tcp_connect+0x1b8>
 8007ef4:	4b1d      	ldr	r3, [pc, #116]	; (8007f6c <tcp_connect+0x224>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	4a1c      	ldr	r2, [pc, #112]	; (8007f6c <tcp_connect+0x224>)
 8007efc:	6013      	str	r3, [r2, #0]
 8007efe:	e013      	b.n	8007f28 <tcp_connect+0x1e0>
 8007f00:	4b1a      	ldr	r3, [pc, #104]	; (8007f6c <tcp_connect+0x224>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	623b      	str	r3, [r7, #32]
 8007f06:	e00c      	b.n	8007f22 <tcp_connect+0x1da>
 8007f08:	6a3b      	ldr	r3, [r7, #32]
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	68fa      	ldr	r2, [r7, #12]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d104      	bne.n	8007f1c <tcp_connect+0x1d4>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	68da      	ldr	r2, [r3, #12]
 8007f16:	6a3b      	ldr	r3, [r7, #32]
 8007f18:	60da      	str	r2, [r3, #12]
 8007f1a:	e005      	b.n	8007f28 <tcp_connect+0x1e0>
 8007f1c:	6a3b      	ldr	r3, [r7, #32]
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	623b      	str	r3, [r7, #32]
 8007f22:	6a3b      	ldr	r3, [r7, #32]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d1ef      	bne.n	8007f08 <tcp_connect+0x1c0>
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8007f2e:	4b10      	ldr	r3, [pc, #64]	; (8007f70 <tcp_connect+0x228>)
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	60da      	str	r2, [r3, #12]
 8007f36:	4a0e      	ldr	r2, [pc, #56]	; (8007f70 <tcp_connect+0x228>)
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6013      	str	r3, [r2, #0]
 8007f3c:	f005 faa8 	bl	800d490 <tcp_timer_needed>
 8007f40:	4b0c      	ldr	r3, [pc, #48]	; (8007f74 <tcp_connect+0x22c>)
 8007f42:	2201      	movs	r2, #1
 8007f44:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f004 fb2e 	bl	800c5a8 <tcp_output>
  }
  return ret;
 8007f4c:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3728      	adds	r7, #40	; 0x28
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	080120f8 	.word	0x080120f8
 8007f5c:	080123d4 	.word	0x080123d4
 8007f60:	0801213c 	.word	0x0801213c
 8007f64:	080123f0 	.word	0x080123f0
 8007f68:	0801240c 	.word	0x0801240c
 8007f6c:	20006600 	.word	0x20006600
 8007f70:	200065f4 	.word	0x200065f4
 8007f74:	200065f0 	.word	0x200065f0

08007f78 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8007f78:	b5b0      	push	{r4, r5, r7, lr}
 8007f7a:	b090      	sub	sp, #64	; 0x40
 8007f7c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8007f84:	4b94      	ldr	r3, [pc, #592]	; (80081d8 <tcp_slowtmr+0x260>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	3301      	adds	r3, #1
 8007f8a:	4a93      	ldr	r2, [pc, #588]	; (80081d8 <tcp_slowtmr+0x260>)
 8007f8c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8007f8e:	4b93      	ldr	r3, [pc, #588]	; (80081dc <tcp_slowtmr+0x264>)
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	3301      	adds	r3, #1
 8007f94:	b2da      	uxtb	r2, r3
 8007f96:	4b91      	ldr	r3, [pc, #580]	; (80081dc <tcp_slowtmr+0x264>)
 8007f98:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8007f9e:	4b90      	ldr	r3, [pc, #576]	; (80081e0 <tcp_slowtmr+0x268>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8007fa4:	e29f      	b.n	80084e6 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8007fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa8:	7d1b      	ldrb	r3, [r3, #20]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d106      	bne.n	8007fbc <tcp_slowtmr+0x44>
 8007fae:	4b8d      	ldr	r3, [pc, #564]	; (80081e4 <tcp_slowtmr+0x26c>)
 8007fb0:	f240 42be 	movw	r2, #1214	; 0x4be
 8007fb4:	498c      	ldr	r1, [pc, #560]	; (80081e8 <tcp_slowtmr+0x270>)
 8007fb6:	488d      	ldr	r0, [pc, #564]	; (80081ec <tcp_slowtmr+0x274>)
 8007fb8:	f008 f894 	bl	80100e4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fbe:	7d1b      	ldrb	r3, [r3, #20]
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d106      	bne.n	8007fd2 <tcp_slowtmr+0x5a>
 8007fc4:	4b87      	ldr	r3, [pc, #540]	; (80081e4 <tcp_slowtmr+0x26c>)
 8007fc6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8007fca:	4989      	ldr	r1, [pc, #548]	; (80081f0 <tcp_slowtmr+0x278>)
 8007fcc:	4887      	ldr	r0, [pc, #540]	; (80081ec <tcp_slowtmr+0x274>)
 8007fce:	f008 f889 	bl	80100e4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd4:	7d1b      	ldrb	r3, [r3, #20]
 8007fd6:	2b0a      	cmp	r3, #10
 8007fd8:	d106      	bne.n	8007fe8 <tcp_slowtmr+0x70>
 8007fda:	4b82      	ldr	r3, [pc, #520]	; (80081e4 <tcp_slowtmr+0x26c>)
 8007fdc:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8007fe0:	4984      	ldr	r1, [pc, #528]	; (80081f4 <tcp_slowtmr+0x27c>)
 8007fe2:	4882      	ldr	r0, [pc, #520]	; (80081ec <tcp_slowtmr+0x274>)
 8007fe4:	f008 f87e 	bl	80100e4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fea:	7f9a      	ldrb	r2, [r3, #30]
 8007fec:	4b7b      	ldr	r3, [pc, #492]	; (80081dc <tcp_slowtmr+0x264>)
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d105      	bne.n	8008000 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8007ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8007ffe:	e272      	b.n	80084e6 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8008000:	4b76      	ldr	r3, [pc, #472]	; (80081dc <tcp_slowtmr+0x264>)
 8008002:	781a      	ldrb	r2, [r3, #0]
 8008004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008006:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8008008:	2300      	movs	r3, #0
 800800a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800800e:	2300      	movs	r3, #0
 8008010:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008016:	7d1b      	ldrb	r3, [r3, #20]
 8008018:	2b02      	cmp	r3, #2
 800801a:	d10a      	bne.n	8008032 <tcp_slowtmr+0xba>
 800801c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800801e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008022:	2b05      	cmp	r3, #5
 8008024:	d905      	bls.n	8008032 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8008026:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800802a:	3301      	adds	r3, #1
 800802c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008030:	e11e      	b.n	8008270 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8008032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008034:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008038:	2b0b      	cmp	r3, #11
 800803a:	d905      	bls.n	8008048 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800803c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008040:	3301      	adds	r3, #1
 8008042:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008046:	e113      	b.n	8008270 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8008048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800804a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800804e:	2b00      	cmp	r3, #0
 8008050:	d075      	beq.n	800813e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8008052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008056:	2b00      	cmp	r3, #0
 8008058:	d006      	beq.n	8008068 <tcp_slowtmr+0xf0>
 800805a:	4b62      	ldr	r3, [pc, #392]	; (80081e4 <tcp_slowtmr+0x26c>)
 800805c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8008060:	4965      	ldr	r1, [pc, #404]	; (80081f8 <tcp_slowtmr+0x280>)
 8008062:	4862      	ldr	r0, [pc, #392]	; (80081ec <tcp_slowtmr+0x274>)
 8008064:	f008 f83e 	bl	80100e4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8008068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800806a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800806c:	2b00      	cmp	r3, #0
 800806e:	d106      	bne.n	800807e <tcp_slowtmr+0x106>
 8008070:	4b5c      	ldr	r3, [pc, #368]	; (80081e4 <tcp_slowtmr+0x26c>)
 8008072:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8008076:	4961      	ldr	r1, [pc, #388]	; (80081fc <tcp_slowtmr+0x284>)
 8008078:	485c      	ldr	r0, [pc, #368]	; (80081ec <tcp_slowtmr+0x274>)
 800807a:	f008 f833 	bl	80100e4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800807e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008080:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8008084:	2b0b      	cmp	r3, #11
 8008086:	d905      	bls.n	8008094 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8008088:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800808c:	3301      	adds	r3, #1
 800808e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008092:	e0ed      	b.n	8008270 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8008094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008096:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800809a:	3b01      	subs	r3, #1
 800809c:	4a58      	ldr	r2, [pc, #352]	; (8008200 <tcp_slowtmr+0x288>)
 800809e:	5cd3      	ldrb	r3, [r2, r3]
 80080a0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80080a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80080a8:	7c7a      	ldrb	r2, [r7, #17]
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d907      	bls.n	80080be <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80080ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080b0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80080b4:	3301      	adds	r3, #1
 80080b6:	b2da      	uxtb	r2, r3
 80080b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ba:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80080be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80080c4:	7c7a      	ldrb	r2, [r7, #17]
 80080c6:	429a      	cmp	r2, r3
 80080c8:	f200 80d2 	bhi.w	8008270 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80080cc:	2301      	movs	r3, #1
 80080ce:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80080d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d108      	bne.n	80080ec <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80080da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80080dc:	f005 f90a 	bl	800d2f4 <tcp_zero_window_probe>
 80080e0:	4603      	mov	r3, r0
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d014      	beq.n	8008110 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80080e6:	2300      	movs	r3, #0
 80080e8:	623b      	str	r3, [r7, #32]
 80080ea:	e011      	b.n	8008110 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80080ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80080f2:	4619      	mov	r1, r3
 80080f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80080f6:	f003 ffd1 	bl	800c09c <tcp_split_unsent_seg>
 80080fa:	4603      	mov	r3, r0
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d107      	bne.n	8008110 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8008100:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008102:	f004 fa51 	bl	800c5a8 <tcp_output>
 8008106:	4603      	mov	r3, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d101      	bne.n	8008110 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800810c:	2300      	movs	r3, #0
 800810e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8008110:	6a3b      	ldr	r3, [r7, #32]
 8008112:	2b00      	cmp	r3, #0
 8008114:	f000 80ac 	beq.w	8008270 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8008118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800811a:	2200      	movs	r2, #0
 800811c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008122:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008126:	2b06      	cmp	r3, #6
 8008128:	f200 80a2 	bhi.w	8008270 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800812c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800812e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008132:	3301      	adds	r3, #1
 8008134:	b2da      	uxtb	r2, r3
 8008136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008138:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800813c:	e098      	b.n	8008270 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800813e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008140:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008144:	2b00      	cmp	r3, #0
 8008146:	db0f      	blt.n	8008168 <tcp_slowtmr+0x1f0>
 8008148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800814a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800814e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008152:	4293      	cmp	r3, r2
 8008154:	d008      	beq.n	8008168 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8008156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008158:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800815c:	b29b      	uxth	r3, r3
 800815e:	3301      	adds	r3, #1
 8008160:	b29b      	uxth	r3, r3
 8008162:	b21a      	sxth	r2, r3
 8008164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008166:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8008168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800816a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800816e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008170:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008174:	429a      	cmp	r2, r3
 8008176:	db7b      	blt.n	8008270 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8008178:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800817a:	f004 fd07 	bl	800cb8c <tcp_rexmit_rto_prepare>
 800817e:	4603      	mov	r3, r0
 8008180:	2b00      	cmp	r3, #0
 8008182:	d007      	beq.n	8008194 <tcp_slowtmr+0x21c>
 8008184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008188:	2b00      	cmp	r3, #0
 800818a:	d171      	bne.n	8008270 <tcp_slowtmr+0x2f8>
 800818c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800818e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008190:	2b00      	cmp	r3, #0
 8008192:	d06d      	beq.n	8008270 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8008194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008196:	7d1b      	ldrb	r3, [r3, #20]
 8008198:	2b02      	cmp	r3, #2
 800819a:	d03a      	beq.n	8008212 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800819c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800819e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80081a2:	2b0c      	cmp	r3, #12
 80081a4:	bf28      	it	cs
 80081a6:	230c      	movcs	r3, #12
 80081a8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80081aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80081b0:	10db      	asrs	r3, r3, #3
 80081b2:	b21b      	sxth	r3, r3
 80081b4:	461a      	mov	r2, r3
 80081b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081b8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80081bc:	4413      	add	r3, r2
 80081be:	7efa      	ldrb	r2, [r7, #27]
 80081c0:	4910      	ldr	r1, [pc, #64]	; (8008204 <tcp_slowtmr+0x28c>)
 80081c2:	5c8a      	ldrb	r2, [r1, r2]
 80081c4:	4093      	lsls	r3, r2
 80081c6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80081ce:	4293      	cmp	r3, r2
 80081d0:	dc1a      	bgt.n	8008208 <tcp_slowtmr+0x290>
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	b21a      	sxth	r2, r3
 80081d6:	e019      	b.n	800820c <tcp_slowtmr+0x294>
 80081d8:	200065f8 	.word	0x200065f8
 80081dc:	200000ce 	.word	0x200000ce
 80081e0:	200065f4 	.word	0x200065f4
 80081e4:	080120f8 	.word	0x080120f8
 80081e8:	0801243c 	.word	0x0801243c
 80081ec:	0801213c 	.word	0x0801213c
 80081f0:	08012468 	.word	0x08012468
 80081f4:	08012494 	.word	0x08012494
 80081f8:	080124c4 	.word	0x080124c4
 80081fc:	080124f8 	.word	0x080124f8
 8008200:	080140c4 	.word	0x080140c4
 8008204:	080140b4 	.word	0x080140b4
 8008208:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800820c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800820e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8008212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008214:	2200      	movs	r2, #0
 8008216:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800821a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800821e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008220:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008224:	4293      	cmp	r3, r2
 8008226:	bf28      	it	cs
 8008228:	4613      	movcs	r3, r2
 800822a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800822c:	8a7b      	ldrh	r3, [r7, #18]
 800822e:	085b      	lsrs	r3, r3, #1
 8008230:	b29a      	uxth	r2, r3
 8008232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008234:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800823a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800823e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008240:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008242:	005b      	lsls	r3, r3, #1
 8008244:	b29b      	uxth	r3, r3
 8008246:	429a      	cmp	r2, r3
 8008248:	d206      	bcs.n	8008258 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800824a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800824c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800824e:	005b      	lsls	r3, r3, #1
 8008250:	b29a      	uxth	r2, r3
 8008252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008254:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8008258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800825a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800825c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800825e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8008262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008264:	2200      	movs	r2, #0
 8008266:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800826a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800826c:	f004 fcfe 	bl	800cc6c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8008270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008272:	7d1b      	ldrb	r3, [r3, #20]
 8008274:	2b06      	cmp	r3, #6
 8008276:	d111      	bne.n	800829c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8008278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800827a:	8b5b      	ldrh	r3, [r3, #26]
 800827c:	f003 0310 	and.w	r3, r3, #16
 8008280:	2b00      	cmp	r3, #0
 8008282:	d00b      	beq.n	800829c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008284:	4b9d      	ldr	r3, [pc, #628]	; (80084fc <tcp_slowtmr+0x584>)
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800828a:	6a1b      	ldr	r3, [r3, #32]
 800828c:	1ad3      	subs	r3, r2, r3
 800828e:	2b28      	cmp	r3, #40	; 0x28
 8008290:	d904      	bls.n	800829c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8008292:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008296:	3301      	adds	r3, #1
 8008298:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800829c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800829e:	7a5b      	ldrb	r3, [r3, #9]
 80082a0:	f003 0308 	and.w	r3, r3, #8
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d04c      	beq.n	8008342 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80082a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082aa:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80082ac:	2b04      	cmp	r3, #4
 80082ae:	d003      	beq.n	80082b8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80082b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80082b4:	2b07      	cmp	r3, #7
 80082b6:	d144      	bne.n	8008342 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80082b8:	4b90      	ldr	r3, [pc, #576]	; (80084fc <tcp_slowtmr+0x584>)
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082be:	6a1b      	ldr	r3, [r3, #32]
 80082c0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80082c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80082c8:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80082cc:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80082d0:	498b      	ldr	r1, [pc, #556]	; (8008500 <tcp_slowtmr+0x588>)
 80082d2:	fba1 1303 	umull	r1, r3, r1, r3
 80082d6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80082d8:	429a      	cmp	r2, r3
 80082da:	d90a      	bls.n	80082f2 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80082dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082e0:	3301      	adds	r3, #1
 80082e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80082e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80082ea:	3301      	adds	r3, #1
 80082ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80082f0:	e027      	b.n	8008342 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80082f2:	4b82      	ldr	r3, [pc, #520]	; (80084fc <tcp_slowtmr+0x584>)
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f8:	6a1b      	ldr	r3, [r3, #32]
 80082fa:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80082fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082fe:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8008302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008304:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8008308:	4618      	mov	r0, r3
 800830a:	4b7e      	ldr	r3, [pc, #504]	; (8008504 <tcp_slowtmr+0x58c>)
 800830c:	fb03 f300 	mul.w	r3, r3, r0
 8008310:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8008312:	497b      	ldr	r1, [pc, #492]	; (8008500 <tcp_slowtmr+0x588>)
 8008314:	fba1 1303 	umull	r1, r3, r1, r3
 8008318:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800831a:	429a      	cmp	r2, r3
 800831c:	d911      	bls.n	8008342 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800831e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008320:	f004 ffa8 	bl	800d274 <tcp_keepalive>
 8008324:	4603      	mov	r3, r0
 8008326:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800832a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800832e:	2b00      	cmp	r3, #0
 8008330:	d107      	bne.n	8008342 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8008332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008334:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8008338:	3301      	adds	r3, #1
 800833a:	b2da      	uxtb	r2, r3
 800833c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800833e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8008342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008346:	2b00      	cmp	r3, #0
 8008348:	d011      	beq.n	800836e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800834a:	4b6c      	ldr	r3, [pc, #432]	; (80084fc <tcp_slowtmr+0x584>)
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008350:	6a1b      	ldr	r3, [r3, #32]
 8008352:	1ad2      	subs	r2, r2, r3
 8008354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008356:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800835a:	4619      	mov	r1, r3
 800835c:	460b      	mov	r3, r1
 800835e:	005b      	lsls	r3, r3, #1
 8008360:	440b      	add	r3, r1
 8008362:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8008364:	429a      	cmp	r2, r3
 8008366:	d302      	bcc.n	800836e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8008368:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800836a:	f000 fe69 	bl	8009040 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800836e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008370:	7d1b      	ldrb	r3, [r3, #20]
 8008372:	2b03      	cmp	r3, #3
 8008374:	d10b      	bne.n	800838e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008376:	4b61      	ldr	r3, [pc, #388]	; (80084fc <tcp_slowtmr+0x584>)
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800837c:	6a1b      	ldr	r3, [r3, #32]
 800837e:	1ad3      	subs	r3, r2, r3
 8008380:	2b28      	cmp	r3, #40	; 0x28
 8008382:	d904      	bls.n	800838e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8008384:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008388:	3301      	adds	r3, #1
 800838a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800838e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008390:	7d1b      	ldrb	r3, [r3, #20]
 8008392:	2b09      	cmp	r3, #9
 8008394:	d10b      	bne.n	80083ae <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008396:	4b59      	ldr	r3, [pc, #356]	; (80084fc <tcp_slowtmr+0x584>)
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800839c:	6a1b      	ldr	r3, [r3, #32]
 800839e:	1ad3      	subs	r3, r2, r3
 80083a0:	2bf0      	cmp	r3, #240	; 0xf0
 80083a2:	d904      	bls.n	80083ae <tcp_slowtmr+0x436>
        ++pcb_remove;
 80083a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083a8:	3301      	adds	r3, #1
 80083aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80083ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d060      	beq.n	8008478 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80083b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083bc:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80083be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083c0:	f000 fc8a 	bl	8008cd8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80083c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d010      	beq.n	80083ec <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80083ca:	4b4f      	ldr	r3, [pc, #316]	; (8008508 <tcp_slowtmr+0x590>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d106      	bne.n	80083e2 <tcp_slowtmr+0x46a>
 80083d4:	4b4d      	ldr	r3, [pc, #308]	; (800850c <tcp_slowtmr+0x594>)
 80083d6:	f240 526d 	movw	r2, #1389	; 0x56d
 80083da:	494d      	ldr	r1, [pc, #308]	; (8008510 <tcp_slowtmr+0x598>)
 80083dc:	484d      	ldr	r0, [pc, #308]	; (8008514 <tcp_slowtmr+0x59c>)
 80083de:	f007 fe81 	bl	80100e4 <iprintf>
        prev->next = pcb->next;
 80083e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e4:	68da      	ldr	r2, [r3, #12]
 80083e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e8:	60da      	str	r2, [r3, #12]
 80083ea:	e00f      	b.n	800840c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80083ec:	4b46      	ldr	r3, [pc, #280]	; (8008508 <tcp_slowtmr+0x590>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d006      	beq.n	8008404 <tcp_slowtmr+0x48c>
 80083f6:	4b45      	ldr	r3, [pc, #276]	; (800850c <tcp_slowtmr+0x594>)
 80083f8:	f240 5271 	movw	r2, #1393	; 0x571
 80083fc:	4946      	ldr	r1, [pc, #280]	; (8008518 <tcp_slowtmr+0x5a0>)
 80083fe:	4845      	ldr	r0, [pc, #276]	; (8008514 <tcp_slowtmr+0x59c>)
 8008400:	f007 fe70 	bl	80100e4 <iprintf>
        tcp_active_pcbs = pcb->next;
 8008404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	4a3f      	ldr	r2, [pc, #252]	; (8008508 <tcp_slowtmr+0x590>)
 800840a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800840c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008410:	2b00      	cmp	r3, #0
 8008412:	d013      	beq.n	800843c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008416:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800841c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800841e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008420:	3304      	adds	r3, #4
 8008422:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008424:	8ad2      	ldrh	r2, [r2, #22]
 8008426:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008428:	8b09      	ldrh	r1, [r1, #24]
 800842a:	9102      	str	r1, [sp, #8]
 800842c:	9201      	str	r2, [sp, #4]
 800842e:	9300      	str	r3, [sp, #0]
 8008430:	462b      	mov	r3, r5
 8008432:	4622      	mov	r2, r4
 8008434:	4601      	mov	r1, r0
 8008436:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008438:	f004 fe6a 	bl	800d110 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800843c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800843e:	691b      	ldr	r3, [r3, #16]
 8008440:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8008442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008444:	7d1b      	ldrb	r3, [r3, #20]
 8008446:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8008448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800844a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800844c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8008452:	6838      	ldr	r0, [r7, #0]
 8008454:	f7ff f894 	bl	8007580 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8008458:	4b30      	ldr	r3, [pc, #192]	; (800851c <tcp_slowtmr+0x5a4>)
 800845a:	2200      	movs	r2, #0
 800845c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d004      	beq.n	800846e <tcp_slowtmr+0x4f6>
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f06f 010c 	mvn.w	r1, #12
 800846a:	68b8      	ldr	r0, [r7, #8]
 800846c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800846e:	4b2b      	ldr	r3, [pc, #172]	; (800851c <tcp_slowtmr+0x5a4>)
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d037      	beq.n	80084e6 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8008476:	e590      	b.n	8007f9a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8008478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800847a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800847c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800847e:	68db      	ldr	r3, [r3, #12]
 8008480:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8008482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008484:	7f1b      	ldrb	r3, [r3, #28]
 8008486:	3301      	adds	r3, #1
 8008488:	b2da      	uxtb	r2, r3
 800848a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800848c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800848e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008490:	7f1a      	ldrb	r2, [r3, #28]
 8008492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008494:	7f5b      	ldrb	r3, [r3, #29]
 8008496:	429a      	cmp	r2, r3
 8008498:	d325      	bcc.n	80084e6 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800849a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849c:	2200      	movs	r2, #0
 800849e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80084a0:	4b1e      	ldr	r3, [pc, #120]	; (800851c <tcp_slowtmr+0x5a4>)
 80084a2:	2200      	movs	r2, #0
 80084a4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80084a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d00b      	beq.n	80084c8 <tcp_slowtmr+0x550>
 80084b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084b8:	6912      	ldr	r2, [r2, #16]
 80084ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084bc:	4610      	mov	r0, r2
 80084be:	4798      	blx	r3
 80084c0:	4603      	mov	r3, r0
 80084c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80084c6:	e002      	b.n	80084ce <tcp_slowtmr+0x556>
 80084c8:	2300      	movs	r3, #0
 80084ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80084ce:	4b13      	ldr	r3, [pc, #76]	; (800851c <tcp_slowtmr+0x5a4>)
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d000      	beq.n	80084d8 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 80084d6:	e560      	b.n	8007f9a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80084d8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d102      	bne.n	80084e6 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80084e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084e2:	f004 f861 	bl	800c5a8 <tcp_output>
  while (pcb != NULL) {
 80084e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	f47f ad5c 	bne.w	8007fa6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80084ee:	2300      	movs	r3, #0
 80084f0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80084f2:	4b0b      	ldr	r3, [pc, #44]	; (8008520 <tcp_slowtmr+0x5a8>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80084f8:	e067      	b.n	80085ca <tcp_slowtmr+0x652>
 80084fa:	bf00      	nop
 80084fc:	200065f8 	.word	0x200065f8
 8008500:	10624dd3 	.word	0x10624dd3
 8008504:	000124f8 	.word	0x000124f8
 8008508:	200065f4 	.word	0x200065f4
 800850c:	080120f8 	.word	0x080120f8
 8008510:	08012530 	.word	0x08012530
 8008514:	0801213c 	.word	0x0801213c
 8008518:	0801255c 	.word	0x0801255c
 800851c:	200065f0 	.word	0x200065f0
 8008520:	20006604 	.word	0x20006604
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008526:	7d1b      	ldrb	r3, [r3, #20]
 8008528:	2b0a      	cmp	r3, #10
 800852a:	d006      	beq.n	800853a <tcp_slowtmr+0x5c2>
 800852c:	4b2b      	ldr	r3, [pc, #172]	; (80085dc <tcp_slowtmr+0x664>)
 800852e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8008532:	492b      	ldr	r1, [pc, #172]	; (80085e0 <tcp_slowtmr+0x668>)
 8008534:	482b      	ldr	r0, [pc, #172]	; (80085e4 <tcp_slowtmr+0x66c>)
 8008536:	f007 fdd5 	bl	80100e4 <iprintf>
    pcb_remove = 0;
 800853a:	2300      	movs	r3, #0
 800853c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008540:	4b29      	ldr	r3, [pc, #164]	; (80085e8 <tcp_slowtmr+0x670>)
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008546:	6a1b      	ldr	r3, [r3, #32]
 8008548:	1ad3      	subs	r3, r2, r3
 800854a:	2bf0      	cmp	r3, #240	; 0xf0
 800854c:	d904      	bls.n	8008558 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800854e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008552:	3301      	adds	r3, #1
 8008554:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008558:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800855c:	2b00      	cmp	r3, #0
 800855e:	d02f      	beq.n	80085c0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8008560:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008562:	f000 fbb9 	bl	8008cd8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8008566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008568:	2b00      	cmp	r3, #0
 800856a:	d010      	beq.n	800858e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800856c:	4b1f      	ldr	r3, [pc, #124]	; (80085ec <tcp_slowtmr+0x674>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008572:	429a      	cmp	r2, r3
 8008574:	d106      	bne.n	8008584 <tcp_slowtmr+0x60c>
 8008576:	4b19      	ldr	r3, [pc, #100]	; (80085dc <tcp_slowtmr+0x664>)
 8008578:	f240 52af 	movw	r2, #1455	; 0x5af
 800857c:	491c      	ldr	r1, [pc, #112]	; (80085f0 <tcp_slowtmr+0x678>)
 800857e:	4819      	ldr	r0, [pc, #100]	; (80085e4 <tcp_slowtmr+0x66c>)
 8008580:	f007 fdb0 	bl	80100e4 <iprintf>
        prev->next = pcb->next;
 8008584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008586:	68da      	ldr	r2, [r3, #12]
 8008588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858a:	60da      	str	r2, [r3, #12]
 800858c:	e00f      	b.n	80085ae <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800858e:	4b17      	ldr	r3, [pc, #92]	; (80085ec <tcp_slowtmr+0x674>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008594:	429a      	cmp	r2, r3
 8008596:	d006      	beq.n	80085a6 <tcp_slowtmr+0x62e>
 8008598:	4b10      	ldr	r3, [pc, #64]	; (80085dc <tcp_slowtmr+0x664>)
 800859a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800859e:	4915      	ldr	r1, [pc, #84]	; (80085f4 <tcp_slowtmr+0x67c>)
 80085a0:	4810      	ldr	r0, [pc, #64]	; (80085e4 <tcp_slowtmr+0x66c>)
 80085a2:	f007 fd9f 	bl	80100e4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80085a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a8:	68db      	ldr	r3, [r3, #12]
 80085aa:	4a10      	ldr	r2, [pc, #64]	; (80085ec <tcp_slowtmr+0x674>)
 80085ac:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80085ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80085b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80085b8:	69f8      	ldr	r0, [r7, #28]
 80085ba:	f7fe ffe1 	bl	8007580 <tcp_free>
 80085be:	e004      	b.n	80085ca <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80085c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80085c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80085ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d1a9      	bne.n	8008524 <tcp_slowtmr+0x5ac>
    }
  }
}
 80085d0:	bf00      	nop
 80085d2:	bf00      	nop
 80085d4:	3730      	adds	r7, #48	; 0x30
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bdb0      	pop	{r4, r5, r7, pc}
 80085da:	bf00      	nop
 80085dc:	080120f8 	.word	0x080120f8
 80085e0:	08012588 	.word	0x08012588
 80085e4:	0801213c 	.word	0x0801213c
 80085e8:	200065f8 	.word	0x200065f8
 80085ec:	20006604 	.word	0x20006604
 80085f0:	080125b8 	.word	0x080125b8
 80085f4:	080125e0 	.word	0x080125e0

080085f8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80085fe:	4b2d      	ldr	r3, [pc, #180]	; (80086b4 <tcp_fasttmr+0xbc>)
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	3301      	adds	r3, #1
 8008604:	b2da      	uxtb	r2, r3
 8008606:	4b2b      	ldr	r3, [pc, #172]	; (80086b4 <tcp_fasttmr+0xbc>)
 8008608:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800860a:	4b2b      	ldr	r3, [pc, #172]	; (80086b8 <tcp_fasttmr+0xc0>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008610:	e048      	b.n	80086a4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	7f9a      	ldrb	r2, [r3, #30]
 8008616:	4b27      	ldr	r3, [pc, #156]	; (80086b4 <tcp_fasttmr+0xbc>)
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	429a      	cmp	r2, r3
 800861c:	d03f      	beq.n	800869e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800861e:	4b25      	ldr	r3, [pc, #148]	; (80086b4 <tcp_fasttmr+0xbc>)
 8008620:	781a      	ldrb	r2, [r3, #0]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	8b5b      	ldrh	r3, [r3, #26]
 800862a:	f003 0301 	and.w	r3, r3, #1
 800862e:	2b00      	cmp	r3, #0
 8008630:	d010      	beq.n	8008654 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	8b5b      	ldrh	r3, [r3, #26]
 8008636:	f043 0302 	orr.w	r3, r3, #2
 800863a:	b29a      	uxth	r2, r3
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f003 ffb1 	bl	800c5a8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	8b5b      	ldrh	r3, [r3, #26]
 800864a:	f023 0303 	bic.w	r3, r3, #3
 800864e:	b29a      	uxth	r2, r3
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	8b5b      	ldrh	r3, [r3, #26]
 8008658:	f003 0308 	and.w	r3, r3, #8
 800865c:	2b00      	cmp	r3, #0
 800865e:	d009      	beq.n	8008674 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	8b5b      	ldrh	r3, [r3, #26]
 8008664:	f023 0308 	bic.w	r3, r3, #8
 8008668:	b29a      	uxth	r2, r3
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f7ff f91a 	bl	80078a8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800867e:	2b00      	cmp	r3, #0
 8008680:	d00a      	beq.n	8008698 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8008682:	4b0e      	ldr	r3, [pc, #56]	; (80086bc <tcp_fasttmr+0xc4>)
 8008684:	2200      	movs	r2, #0
 8008686:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 f819 	bl	80086c0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800868e:	4b0b      	ldr	r3, [pc, #44]	; (80086bc <tcp_fasttmr+0xc4>)
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d000      	beq.n	8008698 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8008696:	e7b8      	b.n	800860a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	607b      	str	r3, [r7, #4]
 800869c:	e002      	b.n	80086a4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d1b3      	bne.n	8008612 <tcp_fasttmr+0x1a>
    }
  }
}
 80086aa:	bf00      	nop
 80086ac:	bf00      	nop
 80086ae:	3708      	adds	r7, #8
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	200000ce 	.word	0x200000ce
 80086b8:	200065f4 	.word	0x200065f4
 80086bc:	200065f0 	.word	0x200065f0

080086c0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80086c0:	b590      	push	{r4, r7, lr}
 80086c2:	b085      	sub	sp, #20
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d109      	bne.n	80086e2 <tcp_process_refused_data+0x22>
 80086ce:	4b37      	ldr	r3, [pc, #220]	; (80087ac <tcp_process_refused_data+0xec>)
 80086d0:	f240 6209 	movw	r2, #1545	; 0x609
 80086d4:	4936      	ldr	r1, [pc, #216]	; (80087b0 <tcp_process_refused_data+0xf0>)
 80086d6:	4837      	ldr	r0, [pc, #220]	; (80087b4 <tcp_process_refused_data+0xf4>)
 80086d8:	f007 fd04 	bl	80100e4 <iprintf>
 80086dc:	f06f 030f 	mvn.w	r3, #15
 80086e0:	e060      	b.n	80087a4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086e6:	7b5b      	ldrb	r3, [r3, #13]
 80086e8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086ee:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d00b      	beq.n	8008718 <tcp_process_refused_data+0x58>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6918      	ldr	r0, [r3, #16]
 800870a:	2300      	movs	r3, #0
 800870c:	68ba      	ldr	r2, [r7, #8]
 800870e:	6879      	ldr	r1, [r7, #4]
 8008710:	47a0      	blx	r4
 8008712:	4603      	mov	r3, r0
 8008714:	73fb      	strb	r3, [r7, #15]
 8008716:	e007      	b.n	8008728 <tcp_process_refused_data+0x68>
 8008718:	2300      	movs	r3, #0
 800871a:	68ba      	ldr	r2, [r7, #8]
 800871c:	6879      	ldr	r1, [r7, #4]
 800871e:	2000      	movs	r0, #0
 8008720:	f000 f8a4 	bl	800886c <tcp_recv_null>
 8008724:	4603      	mov	r3, r0
 8008726:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008728:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d12a      	bne.n	8008786 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8008730:	7bbb      	ldrb	r3, [r7, #14]
 8008732:	f003 0320 	and.w	r3, r3, #32
 8008736:	2b00      	cmp	r3, #0
 8008738:	d033      	beq.n	80087a2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800873e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008742:	d005      	beq.n	8008750 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008748:	3301      	adds	r3, #1
 800874a:	b29a      	uxth	r2, r3
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008756:	2b00      	cmp	r3, #0
 8008758:	d00b      	beq.n	8008772 <tcp_process_refused_data+0xb2>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6918      	ldr	r0, [r3, #16]
 8008764:	2300      	movs	r3, #0
 8008766:	2200      	movs	r2, #0
 8008768:	6879      	ldr	r1, [r7, #4]
 800876a:	47a0      	blx	r4
 800876c:	4603      	mov	r3, r0
 800876e:	73fb      	strb	r3, [r7, #15]
 8008770:	e001      	b.n	8008776 <tcp_process_refused_data+0xb6>
 8008772:	2300      	movs	r3, #0
 8008774:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8008776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800877a:	f113 0f0d 	cmn.w	r3, #13
 800877e:	d110      	bne.n	80087a2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8008780:	f06f 030c 	mvn.w	r3, #12
 8008784:	e00e      	b.n	80087a4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8008786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800878a:	f113 0f0d 	cmn.w	r3, #13
 800878e:	d102      	bne.n	8008796 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8008790:	f06f 030c 	mvn.w	r3, #12
 8008794:	e006      	b.n	80087a4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	68ba      	ldr	r2, [r7, #8]
 800879a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800879c:	f06f 0304 	mvn.w	r3, #4
 80087a0:	e000      	b.n	80087a4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80087a2:	2300      	movs	r3, #0
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3714      	adds	r7, #20
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd90      	pop	{r4, r7, pc}
 80087ac:	080120f8 	.word	0x080120f8
 80087b0:	08012608 	.word	0x08012608
 80087b4:	0801213c 	.word	0x0801213c

080087b8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80087c0:	e007      	b.n	80087d2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 f80a 	bl	80087e2 <tcp_seg_free>
    seg = next;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d1f4      	bne.n	80087c2 <tcp_segs_free+0xa>
  }
}
 80087d8:	bf00      	nop
 80087da:	bf00      	nop
 80087dc:	3710      	adds	r7, #16
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}

080087e2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b082      	sub	sp, #8
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d00c      	beq.n	800880a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d004      	beq.n	8008802 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7fe fb8d 	bl	8006f1c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8008802:	6879      	ldr	r1, [r7, #4]
 8008804:	2003      	movs	r0, #3
 8008806:	f7fd fd77 	bl	80062f8 <memp_free>
  }
}
 800880a:	bf00      	nop
 800880c:	3708      	adds	r7, #8
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
	...

08008814 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d106      	bne.n	8008830 <tcp_seg_copy+0x1c>
 8008822:	4b0f      	ldr	r3, [pc, #60]	; (8008860 <tcp_seg_copy+0x4c>)
 8008824:	f240 6282 	movw	r2, #1666	; 0x682
 8008828:	490e      	ldr	r1, [pc, #56]	; (8008864 <tcp_seg_copy+0x50>)
 800882a:	480f      	ldr	r0, [pc, #60]	; (8008868 <tcp_seg_copy+0x54>)
 800882c:	f007 fc5a 	bl	80100e4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8008830:	2003      	movs	r0, #3
 8008832:	f7fd fd15 	bl	8006260 <memp_malloc>
 8008836:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d101      	bne.n	8008842 <tcp_seg_copy+0x2e>
    return NULL;
 800883e:	2300      	movs	r3, #0
 8008840:	e00a      	b.n	8008858 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8008842:	2210      	movs	r2, #16
 8008844:	6879      	ldr	r1, [r7, #4]
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	f007 fc1c 	bl	8010084 <memcpy>
  pbuf_ref(cseg->p);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	4618      	mov	r0, r3
 8008852:	f7fe fc03 	bl	800705c <pbuf_ref>
  return cseg;
 8008856:	68fb      	ldr	r3, [r7, #12]
}
 8008858:	4618      	mov	r0, r3
 800885a:	3710      	adds	r7, #16
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}
 8008860:	080120f8 	.word	0x080120f8
 8008864:	0801264c 	.word	0x0801264c
 8008868:	0801213c 	.word	0x0801213c

0800886c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	60b9      	str	r1, [r7, #8]
 8008876:	607a      	str	r2, [r7, #4]
 8008878:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d109      	bne.n	8008894 <tcp_recv_null+0x28>
 8008880:	4b12      	ldr	r3, [pc, #72]	; (80088cc <tcp_recv_null+0x60>)
 8008882:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8008886:	4912      	ldr	r1, [pc, #72]	; (80088d0 <tcp_recv_null+0x64>)
 8008888:	4812      	ldr	r0, [pc, #72]	; (80088d4 <tcp_recv_null+0x68>)
 800888a:	f007 fc2b 	bl	80100e4 <iprintf>
 800888e:	f06f 030f 	mvn.w	r3, #15
 8008892:	e016      	b.n	80088c2 <tcp_recv_null+0x56>

  if (p != NULL) {
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d009      	beq.n	80088ae <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	891b      	ldrh	r3, [r3, #8]
 800889e:	4619      	mov	r1, r3
 80088a0:	68b8      	ldr	r0, [r7, #8]
 80088a2:	f7ff f9bb 	bl	8007c1c <tcp_recved>
    pbuf_free(p);
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f7fe fb38 	bl	8006f1c <pbuf_free>
 80088ac:	e008      	b.n	80088c0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80088ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d104      	bne.n	80088c0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80088b6:	68b8      	ldr	r0, [r7, #8]
 80088b8:	f7ff f860 	bl	800797c <tcp_close>
 80088bc:	4603      	mov	r3, r0
 80088be:	e000      	b.n	80088c2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3710      	adds	r7, #16
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	080120f8 	.word	0x080120f8
 80088d0:	08012668 	.word	0x08012668
 80088d4:	0801213c 	.word	0x0801213c

080088d8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b086      	sub	sp, #24
 80088dc:	af00      	add	r7, sp, #0
 80088de:	4603      	mov	r3, r0
 80088e0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80088e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	db01      	blt.n	80088ee <tcp_kill_prio+0x16>
 80088ea:	79fb      	ldrb	r3, [r7, #7]
 80088ec:	e000      	b.n	80088f0 <tcp_kill_prio+0x18>
 80088ee:	237f      	movs	r3, #127	; 0x7f
 80088f0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80088f2:	7afb      	ldrb	r3, [r7, #11]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d034      	beq.n	8008962 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80088f8:	7afb      	ldrb	r3, [r7, #11]
 80088fa:	3b01      	subs	r3, #1
 80088fc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80088fe:	2300      	movs	r3, #0
 8008900:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008902:	2300      	movs	r3, #0
 8008904:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008906:	4b19      	ldr	r3, [pc, #100]	; (800896c <tcp_kill_prio+0x94>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	617b      	str	r3, [r7, #20]
 800890c:	e01f      	b.n	800894e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	7d5b      	ldrb	r3, [r3, #21]
 8008912:	7afa      	ldrb	r2, [r7, #11]
 8008914:	429a      	cmp	r2, r3
 8008916:	d80c      	bhi.n	8008932 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800891c:	7afa      	ldrb	r2, [r7, #11]
 800891e:	429a      	cmp	r2, r3
 8008920:	d112      	bne.n	8008948 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008922:	4b13      	ldr	r3, [pc, #76]	; (8008970 <tcp_kill_prio+0x98>)
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	6a1b      	ldr	r3, [r3, #32]
 800892a:	1ad3      	subs	r3, r2, r3
 800892c:	68fa      	ldr	r2, [r7, #12]
 800892e:	429a      	cmp	r2, r3
 8008930:	d80a      	bhi.n	8008948 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8008932:	4b0f      	ldr	r3, [pc, #60]	; (8008970 <tcp_kill_prio+0x98>)
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	6a1b      	ldr	r3, [r3, #32]
 800893a:	1ad3      	subs	r3, r2, r3
 800893c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	7d5b      	ldrb	r3, [r3, #21]
 8008946:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	68db      	ldr	r3, [r3, #12]
 800894c:	617b      	str	r3, [r7, #20]
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d1dc      	bne.n	800890e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d004      	beq.n	8008964 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800895a:	6938      	ldr	r0, [r7, #16]
 800895c:	f7ff f8f8 	bl	8007b50 <tcp_abort>
 8008960:	e000      	b.n	8008964 <tcp_kill_prio+0x8c>
    return;
 8008962:	bf00      	nop
  }
}
 8008964:	3718      	adds	r7, #24
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	200065f4 	.word	0x200065f4
 8008970:	200065f8 	.word	0x200065f8

08008974 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b086      	sub	sp, #24
 8008978:	af00      	add	r7, sp, #0
 800897a:	4603      	mov	r3, r0
 800897c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800897e:	79fb      	ldrb	r3, [r7, #7]
 8008980:	2b08      	cmp	r3, #8
 8008982:	d009      	beq.n	8008998 <tcp_kill_state+0x24>
 8008984:	79fb      	ldrb	r3, [r7, #7]
 8008986:	2b09      	cmp	r3, #9
 8008988:	d006      	beq.n	8008998 <tcp_kill_state+0x24>
 800898a:	4b1a      	ldr	r3, [pc, #104]	; (80089f4 <tcp_kill_state+0x80>)
 800898c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8008990:	4919      	ldr	r1, [pc, #100]	; (80089f8 <tcp_kill_state+0x84>)
 8008992:	481a      	ldr	r0, [pc, #104]	; (80089fc <tcp_kill_state+0x88>)
 8008994:	f007 fba6 	bl	80100e4 <iprintf>

  inactivity = 0;
 8008998:	2300      	movs	r3, #0
 800899a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800899c:	2300      	movs	r3, #0
 800899e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80089a0:	4b17      	ldr	r3, [pc, #92]	; (8008a00 <tcp_kill_state+0x8c>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	617b      	str	r3, [r7, #20]
 80089a6:	e017      	b.n	80089d8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	7d1b      	ldrb	r3, [r3, #20]
 80089ac:	79fa      	ldrb	r2, [r7, #7]
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d10f      	bne.n	80089d2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80089b2:	4b14      	ldr	r3, [pc, #80]	; (8008a04 <tcp_kill_state+0x90>)
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	6a1b      	ldr	r3, [r3, #32]
 80089ba:	1ad3      	subs	r3, r2, r3
 80089bc:	68fa      	ldr	r2, [r7, #12]
 80089be:	429a      	cmp	r2, r3
 80089c0:	d807      	bhi.n	80089d2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80089c2:	4b10      	ldr	r3, [pc, #64]	; (8008a04 <tcp_kill_state+0x90>)
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	6a1b      	ldr	r3, [r3, #32]
 80089ca:	1ad3      	subs	r3, r2, r3
 80089cc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	68db      	ldr	r3, [r3, #12]
 80089d6:	617b      	str	r3, [r7, #20]
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d1e4      	bne.n	80089a8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d003      	beq.n	80089ec <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80089e4:	2100      	movs	r1, #0
 80089e6:	6938      	ldr	r0, [r7, #16]
 80089e8:	f7fe fff4 	bl	80079d4 <tcp_abandon>
  }
}
 80089ec:	bf00      	nop
 80089ee:	3718      	adds	r7, #24
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}
 80089f4:	080120f8 	.word	0x080120f8
 80089f8:	08012684 	.word	0x08012684
 80089fc:	0801213c 	.word	0x0801213c
 8008a00:	200065f4 	.word	0x200065f4
 8008a04:	200065f8 	.word	0x200065f8

08008a08 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8008a12:	2300      	movs	r3, #0
 8008a14:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008a16:	4b12      	ldr	r3, [pc, #72]	; (8008a60 <tcp_kill_timewait+0x58>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	60fb      	str	r3, [r7, #12]
 8008a1c:	e012      	b.n	8008a44 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008a1e:	4b11      	ldr	r3, [pc, #68]	; (8008a64 <tcp_kill_timewait+0x5c>)
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	6a1b      	ldr	r3, [r3, #32]
 8008a26:	1ad3      	subs	r3, r2, r3
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d807      	bhi.n	8008a3e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8008a2e:	4b0d      	ldr	r3, [pc, #52]	; (8008a64 <tcp_kill_timewait+0x5c>)
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	6a1b      	ldr	r3, [r3, #32]
 8008a36:	1ad3      	subs	r3, r2, r3
 8008a38:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	68db      	ldr	r3, [r3, #12]
 8008a42:	60fb      	str	r3, [r7, #12]
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d1e9      	bne.n	8008a1e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d002      	beq.n	8008a56 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008a50:	68b8      	ldr	r0, [r7, #8]
 8008a52:	f7ff f87d 	bl	8007b50 <tcp_abort>
  }
}
 8008a56:	bf00      	nop
 8008a58:	3710      	adds	r7, #16
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	20006604 	.word	0x20006604
 8008a64:	200065f8 	.word	0x200065f8

08008a68 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8008a6e:	4b10      	ldr	r3, [pc, #64]	; (8008ab0 <tcp_handle_closepend+0x48>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008a74:	e014      	b.n	8008aa0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	68db      	ldr	r3, [r3, #12]
 8008a7a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	8b5b      	ldrh	r3, [r3, #26]
 8008a80:	f003 0308 	and.w	r3, r3, #8
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d009      	beq.n	8008a9c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	8b5b      	ldrh	r3, [r3, #26]
 8008a8c:	f023 0308 	bic.w	r3, r3, #8
 8008a90:	b29a      	uxth	r2, r3
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f7fe ff06 	bl	80078a8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d1e7      	bne.n	8008a76 <tcp_handle_closepend+0xe>
  }
}
 8008aa6:	bf00      	nop
 8008aa8:	bf00      	nop
 8008aaa:	3708      	adds	r7, #8
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}
 8008ab0:	200065f4 	.word	0x200065f4

08008ab4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	4603      	mov	r3, r0
 8008abc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008abe:	2001      	movs	r0, #1
 8008ac0:	f7fd fbce 	bl	8006260 <memp_malloc>
 8008ac4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d126      	bne.n	8008b1a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8008acc:	f7ff ffcc 	bl	8008a68 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8008ad0:	f7ff ff9a 	bl	8008a08 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008ad4:	2001      	movs	r0, #1
 8008ad6:	f7fd fbc3 	bl	8006260 <memp_malloc>
 8008ada:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d11b      	bne.n	8008b1a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8008ae2:	2009      	movs	r0, #9
 8008ae4:	f7ff ff46 	bl	8008974 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008ae8:	2001      	movs	r0, #1
 8008aea:	f7fd fbb9 	bl	8006260 <memp_malloc>
 8008aee:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d111      	bne.n	8008b1a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8008af6:	2008      	movs	r0, #8
 8008af8:	f7ff ff3c 	bl	8008974 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008afc:	2001      	movs	r0, #1
 8008afe:	f7fd fbaf 	bl	8006260 <memp_malloc>
 8008b02:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d107      	bne.n	8008b1a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8008b0a:	79fb      	ldrb	r3, [r7, #7]
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f7ff fee3 	bl	80088d8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008b12:	2001      	movs	r0, #1
 8008b14:	f7fd fba4 	bl	8006260 <memp_malloc>
 8008b18:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d03f      	beq.n	8008ba0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008b20:	229c      	movs	r2, #156	; 0x9c
 8008b22:	2100      	movs	r1, #0
 8008b24:	68f8      	ldr	r0, [r7, #12]
 8008b26:	f007 fad5 	bl	80100d4 <memset>
    pcb->prio = prio;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	79fa      	ldrb	r2, [r7, #7]
 8008b2e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 8008b36:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b40:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	22ff      	movs	r2, #255	; 0xff
 8008b4e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8008b56:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2206      	movs	r2, #6
 8008b5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2206      	movs	r2, #6
 8008b64:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b6c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2201      	movs	r2, #1
 8008b72:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8008b76:	4b0d      	ldr	r3, [pc, #52]	; (8008bac <tcp_alloc+0xf8>)
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8008b7e:	4b0c      	ldr	r3, [pc, #48]	; (8008bb0 <tcp_alloc+0xfc>)
 8008b80:	781a      	ldrb	r2, [r3, #0]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 8008b8c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	4a08      	ldr	r2, [pc, #32]	; (8008bb4 <tcp_alloc+0x100>)
 8008b94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	4a07      	ldr	r2, [pc, #28]	; (8008bb8 <tcp_alloc+0x104>)
 8008b9c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	200065f8 	.word	0x200065f8
 8008bb0:	200000ce 	.word	0x200000ce
 8008bb4:	0800886d 	.word	0x0800886d
 8008bb8:	006ddd00 	.word	0x006ddd00

08008bbc <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8008bc0:	2040      	movs	r0, #64	; 0x40
 8008bc2:	f7ff ff77 	bl	8008ab4 <tcp_alloc>
 8008bc6:	4603      	mov	r3, r0
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b083      	sub	sp, #12
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d002      	beq.n	8008be2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	683a      	ldr	r2, [r7, #0]
 8008be0:	611a      	str	r2, [r3, #16]
  }
}
 8008be2:	bf00      	nop
 8008be4:	370c      	adds	r7, #12
 8008be6:	46bd      	mov	sp, r7
 8008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bec:	4770      	bx	lr
	...

08008bf0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d00e      	beq.n	8008c1e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	7d1b      	ldrb	r3, [r3, #20]
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d106      	bne.n	8008c16 <tcp_recv+0x26>
 8008c08:	4b07      	ldr	r3, [pc, #28]	; (8008c28 <tcp_recv+0x38>)
 8008c0a:	f240 72df 	movw	r2, #2015	; 0x7df
 8008c0e:	4907      	ldr	r1, [pc, #28]	; (8008c2c <tcp_recv+0x3c>)
 8008c10:	4807      	ldr	r0, [pc, #28]	; (8008c30 <tcp_recv+0x40>)
 8008c12:	f007 fa67 	bl	80100e4 <iprintf>
    pcb->recv = recv;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	683a      	ldr	r2, [r7, #0]
 8008c1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8008c1e:	bf00      	nop
 8008c20:	3708      	adds	r7, #8
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	080120f8 	.word	0x080120f8
 8008c2c:	08012694 	.word	0x08012694
 8008c30:	0801213c 	.word	0x0801213c

08008c34 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d00e      	beq.n	8008c62 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	7d1b      	ldrb	r3, [r3, #20]
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d106      	bne.n	8008c5a <tcp_sent+0x26>
 8008c4c:	4b07      	ldr	r3, [pc, #28]	; (8008c6c <tcp_sent+0x38>)
 8008c4e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8008c52:	4907      	ldr	r1, [pc, #28]	; (8008c70 <tcp_sent+0x3c>)
 8008c54:	4807      	ldr	r0, [pc, #28]	; (8008c74 <tcp_sent+0x40>)
 8008c56:	f007 fa45 	bl	80100e4 <iprintf>
    pcb->sent = sent;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	683a      	ldr	r2, [r7, #0]
 8008c5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8008c62:	bf00      	nop
 8008c64:	3708      	adds	r7, #8
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	080120f8 	.word	0x080120f8
 8008c70:	080126bc 	.word	0x080126bc
 8008c74:	0801213c 	.word	0x0801213c

08008c78 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	4613      	mov	r3, r2
 8008c84:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d107      	bne.n	8008c9c <tcp_poll+0x24>
 8008c8c:	4b0e      	ldr	r3, [pc, #56]	; (8008cc8 <tcp_poll+0x50>)
 8008c8e:	f640 023d 	movw	r2, #2109	; 0x83d
 8008c92:	490e      	ldr	r1, [pc, #56]	; (8008ccc <tcp_poll+0x54>)
 8008c94:	480e      	ldr	r0, [pc, #56]	; (8008cd0 <tcp_poll+0x58>)
 8008c96:	f007 fa25 	bl	80100e4 <iprintf>
 8008c9a:	e011      	b.n	8008cc0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	7d1b      	ldrb	r3, [r3, #20]
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d106      	bne.n	8008cb2 <tcp_poll+0x3a>
 8008ca4:	4b08      	ldr	r3, [pc, #32]	; (8008cc8 <tcp_poll+0x50>)
 8008ca6:	f640 023e 	movw	r2, #2110	; 0x83e
 8008caa:	490a      	ldr	r1, [pc, #40]	; (8008cd4 <tcp_poll+0x5c>)
 8008cac:	4808      	ldr	r0, [pc, #32]	; (8008cd0 <tcp_poll+0x58>)
 8008cae:	f007 fa19 	bl	80100e4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	68ba      	ldr	r2, [r7, #8]
 8008cb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	79fa      	ldrb	r2, [r7, #7]
 8008cbe:	775a      	strb	r2, [r3, #29]
}
 8008cc0:	3710      	adds	r7, #16
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	080120f8 	.word	0x080120f8
 8008ccc:	0801270c 	.word	0x0801270c
 8008cd0:	0801213c 	.word	0x0801213c
 8008cd4:	08012724 	.word	0x08012724

08008cd8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d107      	bne.n	8008cf6 <tcp_pcb_purge+0x1e>
 8008ce6:	4b21      	ldr	r3, [pc, #132]	; (8008d6c <tcp_pcb_purge+0x94>)
 8008ce8:	f640 0251 	movw	r2, #2129	; 0x851
 8008cec:	4920      	ldr	r1, [pc, #128]	; (8008d70 <tcp_pcb_purge+0x98>)
 8008cee:	4821      	ldr	r0, [pc, #132]	; (8008d74 <tcp_pcb_purge+0x9c>)
 8008cf0:	f007 f9f8 	bl	80100e4 <iprintf>
 8008cf4:	e037      	b.n	8008d66 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	7d1b      	ldrb	r3, [r3, #20]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d033      	beq.n	8008d66 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8008d02:	2b0a      	cmp	r3, #10
 8008d04:	d02f      	beq.n	8008d66 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d02b      	beq.n	8008d66 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d007      	beq.n	8008d26 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f7fe f8fe 	bl	8006f1c <pbuf_free>
      pcb->refused_data = NULL;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d002      	beq.n	8008d34 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 f986 	bl	8009040 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d3a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d40:	4618      	mov	r0, r3
 8008d42:	f7ff fd39 	bl	80087b8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7ff fd34 	bl	80087b8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	66da      	str	r2, [r3, #108]	; 0x6c
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2200      	movs	r2, #0
 8008d62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8008d66:	3708      	adds	r7, #8
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	080120f8 	.word	0x080120f8
 8008d70:	08012744 	.word	0x08012744
 8008d74:	0801213c 	.word	0x0801213c

08008d78 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d106      	bne.n	8008d96 <tcp_pcb_remove+0x1e>
 8008d88:	4b3e      	ldr	r3, [pc, #248]	; (8008e84 <tcp_pcb_remove+0x10c>)
 8008d8a:	f640 0283 	movw	r2, #2179	; 0x883
 8008d8e:	493e      	ldr	r1, [pc, #248]	; (8008e88 <tcp_pcb_remove+0x110>)
 8008d90:	483e      	ldr	r0, [pc, #248]	; (8008e8c <tcp_pcb_remove+0x114>)
 8008d92:	f007 f9a7 	bl	80100e4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d106      	bne.n	8008daa <tcp_pcb_remove+0x32>
 8008d9c:	4b39      	ldr	r3, [pc, #228]	; (8008e84 <tcp_pcb_remove+0x10c>)
 8008d9e:	f640 0284 	movw	r2, #2180	; 0x884
 8008da2:	493b      	ldr	r1, [pc, #236]	; (8008e90 <tcp_pcb_remove+0x118>)
 8008da4:	4839      	ldr	r0, [pc, #228]	; (8008e8c <tcp_pcb_remove+0x114>)
 8008da6:	f007 f99d 	bl	80100e4 <iprintf>

  TCP_RMV(pcblist, pcb);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	683a      	ldr	r2, [r7, #0]
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d105      	bne.n	8008dc0 <tcp_pcb_remove+0x48>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	68da      	ldr	r2, [r3, #12]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	601a      	str	r2, [r3, #0]
 8008dbe:	e013      	b.n	8008de8 <tcp_pcb_remove+0x70>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	60fb      	str	r3, [r7, #12]
 8008dc6:	e00c      	b.n	8008de2 <tcp_pcb_remove+0x6a>
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	68db      	ldr	r3, [r3, #12]
 8008dcc:	683a      	ldr	r2, [r7, #0]
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d104      	bne.n	8008ddc <tcp_pcb_remove+0x64>
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	68da      	ldr	r2, [r3, #12]
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	60da      	str	r2, [r3, #12]
 8008dda:	e005      	b.n	8008de8 <tcp_pcb_remove+0x70>
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	68db      	ldr	r3, [r3, #12]
 8008de0:	60fb      	str	r3, [r7, #12]
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d1ef      	bne.n	8008dc8 <tcp_pcb_remove+0x50>
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	2200      	movs	r2, #0
 8008dec:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8008dee:	6838      	ldr	r0, [r7, #0]
 8008df0:	f7ff ff72 	bl	8008cd8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	7d1b      	ldrb	r3, [r3, #20]
 8008df8:	2b0a      	cmp	r3, #10
 8008dfa:	d013      	beq.n	8008e24 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d00f      	beq.n	8008e24 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	8b5b      	ldrh	r3, [r3, #26]
 8008e08:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d009      	beq.n	8008e24 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	8b5b      	ldrh	r3, [r3, #26]
 8008e14:	f043 0302 	orr.w	r3, r3, #2
 8008e18:	b29a      	uxth	r2, r3
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008e1e:	6838      	ldr	r0, [r7, #0]
 8008e20:	f003 fbc2 	bl	800c5a8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	7d1b      	ldrb	r3, [r3, #20]
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	d020      	beq.n	8008e6e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d006      	beq.n	8008e42 <tcp_pcb_remove+0xca>
 8008e34:	4b13      	ldr	r3, [pc, #76]	; (8008e84 <tcp_pcb_remove+0x10c>)
 8008e36:	f640 0293 	movw	r2, #2195	; 0x893
 8008e3a:	4916      	ldr	r1, [pc, #88]	; (8008e94 <tcp_pcb_remove+0x11c>)
 8008e3c:	4813      	ldr	r0, [pc, #76]	; (8008e8c <tcp_pcb_remove+0x114>)
 8008e3e:	f007 f951 	bl	80100e4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d006      	beq.n	8008e58 <tcp_pcb_remove+0xe0>
 8008e4a:	4b0e      	ldr	r3, [pc, #56]	; (8008e84 <tcp_pcb_remove+0x10c>)
 8008e4c:	f640 0294 	movw	r2, #2196	; 0x894
 8008e50:	4911      	ldr	r1, [pc, #68]	; (8008e98 <tcp_pcb_remove+0x120>)
 8008e52:	480e      	ldr	r0, [pc, #56]	; (8008e8c <tcp_pcb_remove+0x114>)
 8008e54:	f007 f946 	bl	80100e4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d006      	beq.n	8008e6e <tcp_pcb_remove+0xf6>
 8008e60:	4b08      	ldr	r3, [pc, #32]	; (8008e84 <tcp_pcb_remove+0x10c>)
 8008e62:	f640 0296 	movw	r2, #2198	; 0x896
 8008e66:	490d      	ldr	r1, [pc, #52]	; (8008e9c <tcp_pcb_remove+0x124>)
 8008e68:	4808      	ldr	r0, [pc, #32]	; (8008e8c <tcp_pcb_remove+0x114>)
 8008e6a:	f007 f93b 	bl	80100e4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	2200      	movs	r2, #0
 8008e72:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	2200      	movs	r2, #0
 8008e78:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8008e7a:	bf00      	nop
 8008e7c:	3710      	adds	r7, #16
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
 8008e82:	bf00      	nop
 8008e84:	080120f8 	.word	0x080120f8
 8008e88:	08012760 	.word	0x08012760
 8008e8c:	0801213c 	.word	0x0801213c
 8008e90:	0801277c 	.word	0x0801277c
 8008e94:	0801279c 	.word	0x0801279c
 8008e98:	080127b4 	.word	0x080127b4
 8008e9c:	080127d0 	.word	0x080127d0

08008ea0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d106      	bne.n	8008ebc <tcp_next_iss+0x1c>
 8008eae:	4b0a      	ldr	r3, [pc, #40]	; (8008ed8 <tcp_next_iss+0x38>)
 8008eb0:	f640 02af 	movw	r2, #2223	; 0x8af
 8008eb4:	4909      	ldr	r1, [pc, #36]	; (8008edc <tcp_next_iss+0x3c>)
 8008eb6:	480a      	ldr	r0, [pc, #40]	; (8008ee0 <tcp_next_iss+0x40>)
 8008eb8:	f007 f914 	bl	80100e4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8008ebc:	4b09      	ldr	r3, [pc, #36]	; (8008ee4 <tcp_next_iss+0x44>)
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	4b09      	ldr	r3, [pc, #36]	; (8008ee8 <tcp_next_iss+0x48>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4413      	add	r3, r2
 8008ec6:	4a07      	ldr	r2, [pc, #28]	; (8008ee4 <tcp_next_iss+0x44>)
 8008ec8:	6013      	str	r3, [r2, #0]
  return iss;
 8008eca:	4b06      	ldr	r3, [pc, #24]	; (8008ee4 <tcp_next_iss+0x44>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3708      	adds	r7, #8
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
 8008ed6:	bf00      	nop
 8008ed8:	080120f8 	.word	0x080120f8
 8008edc:	080127e8 	.word	0x080127e8
 8008ee0:	0801213c 	.word	0x0801213c
 8008ee4:	2000000c 	.word	0x2000000c
 8008ee8:	200065f8 	.word	0x200065f8

08008eec <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b086      	sub	sp, #24
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	60b9      	str	r1, [r7, #8]
 8008ef6:	607a      	str	r2, [r7, #4]
 8008ef8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d106      	bne.n	8008f0e <tcp_eff_send_mss_netif+0x22>
 8008f00:	4b14      	ldr	r3, [pc, #80]	; (8008f54 <tcp_eff_send_mss_netif+0x68>)
 8008f02:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8008f06:	4914      	ldr	r1, [pc, #80]	; (8008f58 <tcp_eff_send_mss_netif+0x6c>)
 8008f08:	4814      	ldr	r0, [pc, #80]	; (8008f5c <tcp_eff_send_mss_netif+0x70>)
 8008f0a:	f007 f8eb 	bl	80100e4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d101      	bne.n	8008f18 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8008f14:	89fb      	ldrh	r3, [r7, #14]
 8008f16:	e019      	b.n	8008f4c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008f1c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8008f1e:	8afb      	ldrh	r3, [r7, #22]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d012      	beq.n	8008f4a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8008f24:	2328      	movs	r3, #40	; 0x28
 8008f26:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8008f28:	8afa      	ldrh	r2, [r7, #22]
 8008f2a:	8abb      	ldrh	r3, [r7, #20]
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d904      	bls.n	8008f3a <tcp_eff_send_mss_netif+0x4e>
 8008f30:	8afa      	ldrh	r2, [r7, #22]
 8008f32:	8abb      	ldrh	r3, [r7, #20]
 8008f34:	1ad3      	subs	r3, r2, r3
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	e000      	b.n	8008f3c <tcp_eff_send_mss_netif+0x50>
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008f3e:	8a7a      	ldrh	r2, [r7, #18]
 8008f40:	89fb      	ldrh	r3, [r7, #14]
 8008f42:	4293      	cmp	r3, r2
 8008f44:	bf28      	it	cs
 8008f46:	4613      	movcs	r3, r2
 8008f48:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8008f4a:	89fb      	ldrh	r3, [r7, #14]
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3718      	adds	r7, #24
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}
 8008f54:	080120f8 	.word	0x080120f8
 8008f58:	08012804 	.word	0x08012804
 8008f5c:	0801213c 	.word	0x0801213c

08008f60 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d119      	bne.n	8008fa8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8008f74:	4b10      	ldr	r3, [pc, #64]	; (8008fb8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8008f76:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8008f7a:	4910      	ldr	r1, [pc, #64]	; (8008fbc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8008f7c:	4810      	ldr	r0, [pc, #64]	; (8008fc0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8008f7e:	f007 f8b1 	bl	80100e4 <iprintf>

  while (pcb != NULL) {
 8008f82:	e011      	b.n	8008fa8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d108      	bne.n	8008fa2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	68db      	ldr	r3, [r3, #12]
 8008f94:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	f7fe fdda 	bl	8007b50 <tcp_abort>
      pcb = next;
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	60fb      	str	r3, [r7, #12]
 8008fa0:	e002      	b.n	8008fa8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	68db      	ldr	r3, [r3, #12]
 8008fa6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d1ea      	bne.n	8008f84 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8008fae:	bf00      	nop
 8008fb0:	bf00      	nop
 8008fb2:	3710      	adds	r7, #16
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	080120f8 	.word	0x080120f8
 8008fbc:	0801282c 	.word	0x0801282c
 8008fc0:	0801213c 	.word	0x0801213c

08008fc4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d02a      	beq.n	800902a <tcp_netif_ip_addr_changed+0x66>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d026      	beq.n	800902a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008fdc:	4b15      	ldr	r3, [pc, #84]	; (8009034 <tcp_netif_ip_addr_changed+0x70>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f7ff ffbc 	bl	8008f60 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008fe8:	4b13      	ldr	r3, [pc, #76]	; (8009038 <tcp_netif_ip_addr_changed+0x74>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4619      	mov	r1, r3
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f7ff ffb6 	bl	8008f60 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d017      	beq.n	800902a <tcp_netif_ip_addr_changed+0x66>
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d013      	beq.n	800902a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009002:	4b0e      	ldr	r3, [pc, #56]	; (800903c <tcp_netif_ip_addr_changed+0x78>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	60fb      	str	r3, [r7, #12]
 8009008:	e00c      	b.n	8009024 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	429a      	cmp	r2, r3
 8009014:	d103      	bne.n	800901e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	60fb      	str	r3, [r7, #12]
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d1ef      	bne.n	800900a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800902a:	bf00      	nop
 800902c:	3710      	adds	r7, #16
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop
 8009034:	200065f4 	.word	0x200065f4
 8009038:	20006600 	.word	0x20006600
 800903c:	200065fc 	.word	0x200065fc

08009040 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b082      	sub	sp, #8
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800904c:	2b00      	cmp	r3, #0
 800904e:	d007      	beq.n	8009060 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009054:	4618      	mov	r0, r3
 8009056:	f7ff fbaf 	bl	80087b8 <tcp_segs_free>
    pcb->ooseq = NULL;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8009060:	bf00      	nop
 8009062:	3708      	adds	r7, #8
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8009068:	b590      	push	{r4, r7, lr}
 800906a:	b08d      	sub	sp, #52	; 0x34
 800906c:	af04      	add	r7, sp, #16
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d105      	bne.n	8009084 <tcp_input+0x1c>
 8009078:	4b9b      	ldr	r3, [pc, #620]	; (80092e8 <tcp_input+0x280>)
 800907a:	2283      	movs	r2, #131	; 0x83
 800907c:	499b      	ldr	r1, [pc, #620]	; (80092ec <tcp_input+0x284>)
 800907e:	489c      	ldr	r0, [pc, #624]	; (80092f0 <tcp_input+0x288>)
 8009080:	f007 f830 	bl	80100e4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	4a9a      	ldr	r2, [pc, #616]	; (80092f4 <tcp_input+0x28c>)
 800908a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	895b      	ldrh	r3, [r3, #10]
 8009090:	2b13      	cmp	r3, #19
 8009092:	f240 83c4 	bls.w	800981e <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009096:	4b98      	ldr	r3, [pc, #608]	; (80092f8 <tcp_input+0x290>)
 8009098:	695b      	ldr	r3, [r3, #20]
 800909a:	4a97      	ldr	r2, [pc, #604]	; (80092f8 <tcp_input+0x290>)
 800909c:	6812      	ldr	r2, [r2, #0]
 800909e:	4611      	mov	r1, r2
 80090a0:	4618      	mov	r0, r3
 80090a2:	f006 f869 	bl	800f178 <ip4_addr_isbroadcast_u32>
 80090a6:	4603      	mov	r3, r0
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	f040 83ba 	bne.w	8009822 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80090ae:	4b92      	ldr	r3, [pc, #584]	; (80092f8 <tcp_input+0x290>)
 80090b0:	695b      	ldr	r3, [r3, #20]
 80090b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80090b6:	2be0      	cmp	r3, #224	; 0xe0
 80090b8:	f000 83b3 	beq.w	8009822 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80090bc:	4b8d      	ldr	r3, [pc, #564]	; (80092f4 <tcp_input+0x28c>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	899b      	ldrh	r3, [r3, #12]
 80090c2:	b29b      	uxth	r3, r3
 80090c4:	4618      	mov	r0, r3
 80090c6:	f7fc fc75 	bl	80059b4 <lwip_htons>
 80090ca:	4603      	mov	r3, r0
 80090cc:	0b1b      	lsrs	r3, r3, #12
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80090d6:	7cbb      	ldrb	r3, [r7, #18]
 80090d8:	2b13      	cmp	r3, #19
 80090da:	f240 83a4 	bls.w	8009826 <tcp_input+0x7be>
 80090de:	7cbb      	ldrb	r3, [r7, #18]
 80090e0:	b29a      	uxth	r2, r3
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	891b      	ldrh	r3, [r3, #8]
 80090e6:	429a      	cmp	r2, r3
 80090e8:	f200 839d 	bhi.w	8009826 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80090ec:	7cbb      	ldrb	r3, [r7, #18]
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	3b14      	subs	r3, #20
 80090f2:	b29a      	uxth	r2, r3
 80090f4:	4b81      	ldr	r3, [pc, #516]	; (80092fc <tcp_input+0x294>)
 80090f6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80090f8:	4b81      	ldr	r3, [pc, #516]	; (8009300 <tcp_input+0x298>)
 80090fa:	2200      	movs	r2, #0
 80090fc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	895a      	ldrh	r2, [r3, #10]
 8009102:	7cbb      	ldrb	r3, [r7, #18]
 8009104:	b29b      	uxth	r3, r3
 8009106:	429a      	cmp	r2, r3
 8009108:	d309      	bcc.n	800911e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800910a:	4b7c      	ldr	r3, [pc, #496]	; (80092fc <tcp_input+0x294>)
 800910c:	881a      	ldrh	r2, [r3, #0]
 800910e:	4b7d      	ldr	r3, [pc, #500]	; (8009304 <tcp_input+0x29c>)
 8009110:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8009112:	7cbb      	ldrb	r3, [r7, #18]
 8009114:	4619      	mov	r1, r3
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f7fd fe7a 	bl	8006e10 <pbuf_remove_header>
 800911c:	e04e      	b.n	80091bc <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d105      	bne.n	8009132 <tcp_input+0xca>
 8009126:	4b70      	ldr	r3, [pc, #448]	; (80092e8 <tcp_input+0x280>)
 8009128:	22c2      	movs	r2, #194	; 0xc2
 800912a:	4977      	ldr	r1, [pc, #476]	; (8009308 <tcp_input+0x2a0>)
 800912c:	4870      	ldr	r0, [pc, #448]	; (80092f0 <tcp_input+0x288>)
 800912e:	f006 ffd9 	bl	80100e4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8009132:	2114      	movs	r1, #20
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f7fd fe6b 	bl	8006e10 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	895a      	ldrh	r2, [r3, #10]
 800913e:	4b71      	ldr	r3, [pc, #452]	; (8009304 <tcp_input+0x29c>)
 8009140:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8009142:	4b6e      	ldr	r3, [pc, #440]	; (80092fc <tcp_input+0x294>)
 8009144:	881a      	ldrh	r2, [r3, #0]
 8009146:	4b6f      	ldr	r3, [pc, #444]	; (8009304 <tcp_input+0x29c>)
 8009148:	881b      	ldrh	r3, [r3, #0]
 800914a:	1ad3      	subs	r3, r2, r3
 800914c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800914e:	4b6d      	ldr	r3, [pc, #436]	; (8009304 <tcp_input+0x29c>)
 8009150:	881b      	ldrh	r3, [r3, #0]
 8009152:	4619      	mov	r1, r3
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f7fd fe5b 	bl	8006e10 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	895b      	ldrh	r3, [r3, #10]
 8009160:	8a3a      	ldrh	r2, [r7, #16]
 8009162:	429a      	cmp	r2, r3
 8009164:	f200 8361 	bhi.w	800982a <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	4a64      	ldr	r2, [pc, #400]	; (8009300 <tcp_input+0x298>)
 8009170:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	8a3a      	ldrh	r2, [r7, #16]
 8009178:	4611      	mov	r1, r2
 800917a:	4618      	mov	r0, r3
 800917c:	f7fd fe48 	bl	8006e10 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	891a      	ldrh	r2, [r3, #8]
 8009184:	8a3b      	ldrh	r3, [r7, #16]
 8009186:	1ad3      	subs	r3, r2, r3
 8009188:	b29a      	uxth	r2, r3
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	895b      	ldrh	r3, [r3, #10]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d005      	beq.n	80091a2 <tcp_input+0x13a>
 8009196:	4b54      	ldr	r3, [pc, #336]	; (80092e8 <tcp_input+0x280>)
 8009198:	22df      	movs	r2, #223	; 0xdf
 800919a:	495c      	ldr	r1, [pc, #368]	; (800930c <tcp_input+0x2a4>)
 800919c:	4854      	ldr	r0, [pc, #336]	; (80092f0 <tcp_input+0x288>)
 800919e:	f006 ffa1 	bl	80100e4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	891a      	ldrh	r2, [r3, #8]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	891b      	ldrh	r3, [r3, #8]
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d005      	beq.n	80091bc <tcp_input+0x154>
 80091b0:	4b4d      	ldr	r3, [pc, #308]	; (80092e8 <tcp_input+0x280>)
 80091b2:	22e0      	movs	r2, #224	; 0xe0
 80091b4:	4956      	ldr	r1, [pc, #344]	; (8009310 <tcp_input+0x2a8>)
 80091b6:	484e      	ldr	r0, [pc, #312]	; (80092f0 <tcp_input+0x288>)
 80091b8:	f006 ff94 	bl	80100e4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80091bc:	4b4d      	ldr	r3, [pc, #308]	; (80092f4 <tcp_input+0x28c>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	881b      	ldrh	r3, [r3, #0]
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	4a4b      	ldr	r2, [pc, #300]	; (80092f4 <tcp_input+0x28c>)
 80091c6:	6814      	ldr	r4, [r2, #0]
 80091c8:	4618      	mov	r0, r3
 80091ca:	f7fc fbf3 	bl	80059b4 <lwip_htons>
 80091ce:	4603      	mov	r3, r0
 80091d0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80091d2:	4b48      	ldr	r3, [pc, #288]	; (80092f4 <tcp_input+0x28c>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	885b      	ldrh	r3, [r3, #2]
 80091d8:	b29b      	uxth	r3, r3
 80091da:	4a46      	ldr	r2, [pc, #280]	; (80092f4 <tcp_input+0x28c>)
 80091dc:	6814      	ldr	r4, [r2, #0]
 80091de:	4618      	mov	r0, r3
 80091e0:	f7fc fbe8 	bl	80059b4 <lwip_htons>
 80091e4:	4603      	mov	r3, r0
 80091e6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80091e8:	4b42      	ldr	r3, [pc, #264]	; (80092f4 <tcp_input+0x28c>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	685b      	ldr	r3, [r3, #4]
 80091ee:	4a41      	ldr	r2, [pc, #260]	; (80092f4 <tcp_input+0x28c>)
 80091f0:	6814      	ldr	r4, [r2, #0]
 80091f2:	4618      	mov	r0, r3
 80091f4:	f7fc fbf3 	bl	80059de <lwip_htonl>
 80091f8:	4603      	mov	r3, r0
 80091fa:	6063      	str	r3, [r4, #4]
 80091fc:	6863      	ldr	r3, [r4, #4]
 80091fe:	4a45      	ldr	r2, [pc, #276]	; (8009314 <tcp_input+0x2ac>)
 8009200:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009202:	4b3c      	ldr	r3, [pc, #240]	; (80092f4 <tcp_input+0x28c>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	4a3a      	ldr	r2, [pc, #232]	; (80092f4 <tcp_input+0x28c>)
 800920a:	6814      	ldr	r4, [r2, #0]
 800920c:	4618      	mov	r0, r3
 800920e:	f7fc fbe6 	bl	80059de <lwip_htonl>
 8009212:	4603      	mov	r3, r0
 8009214:	60a3      	str	r3, [r4, #8]
 8009216:	68a3      	ldr	r3, [r4, #8]
 8009218:	4a3f      	ldr	r2, [pc, #252]	; (8009318 <tcp_input+0x2b0>)
 800921a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800921c:	4b35      	ldr	r3, [pc, #212]	; (80092f4 <tcp_input+0x28c>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	89db      	ldrh	r3, [r3, #14]
 8009222:	b29b      	uxth	r3, r3
 8009224:	4a33      	ldr	r2, [pc, #204]	; (80092f4 <tcp_input+0x28c>)
 8009226:	6814      	ldr	r4, [r2, #0]
 8009228:	4618      	mov	r0, r3
 800922a:	f7fc fbc3 	bl	80059b4 <lwip_htons>
 800922e:	4603      	mov	r3, r0
 8009230:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8009232:	4b30      	ldr	r3, [pc, #192]	; (80092f4 <tcp_input+0x28c>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	899b      	ldrh	r3, [r3, #12]
 8009238:	b29b      	uxth	r3, r3
 800923a:	4618      	mov	r0, r3
 800923c:	f7fc fbba 	bl	80059b4 <lwip_htons>
 8009240:	4603      	mov	r3, r0
 8009242:	b2db      	uxtb	r3, r3
 8009244:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009248:	b2da      	uxtb	r2, r3
 800924a:	4b34      	ldr	r3, [pc, #208]	; (800931c <tcp_input+0x2b4>)
 800924c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	891a      	ldrh	r2, [r3, #8]
 8009252:	4b33      	ldr	r3, [pc, #204]	; (8009320 <tcp_input+0x2b8>)
 8009254:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8009256:	4b31      	ldr	r3, [pc, #196]	; (800931c <tcp_input+0x2b4>)
 8009258:	781b      	ldrb	r3, [r3, #0]
 800925a:	f003 0303 	and.w	r3, r3, #3
 800925e:	2b00      	cmp	r3, #0
 8009260:	d00c      	beq.n	800927c <tcp_input+0x214>
    tcplen++;
 8009262:	4b2f      	ldr	r3, [pc, #188]	; (8009320 <tcp_input+0x2b8>)
 8009264:	881b      	ldrh	r3, [r3, #0]
 8009266:	3301      	adds	r3, #1
 8009268:	b29a      	uxth	r2, r3
 800926a:	4b2d      	ldr	r3, [pc, #180]	; (8009320 <tcp_input+0x2b8>)
 800926c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	891a      	ldrh	r2, [r3, #8]
 8009272:	4b2b      	ldr	r3, [pc, #172]	; (8009320 <tcp_input+0x2b8>)
 8009274:	881b      	ldrh	r3, [r3, #0]
 8009276:	429a      	cmp	r2, r3
 8009278:	f200 82d9 	bhi.w	800982e <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800927c:	2300      	movs	r3, #0
 800927e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009280:	4b28      	ldr	r3, [pc, #160]	; (8009324 <tcp_input+0x2bc>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	61fb      	str	r3, [r7, #28]
 8009286:	e09d      	b.n	80093c4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009288:	69fb      	ldr	r3, [r7, #28]
 800928a:	7d1b      	ldrb	r3, [r3, #20]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d105      	bne.n	800929c <tcp_input+0x234>
 8009290:	4b15      	ldr	r3, [pc, #84]	; (80092e8 <tcp_input+0x280>)
 8009292:	22fb      	movs	r2, #251	; 0xfb
 8009294:	4924      	ldr	r1, [pc, #144]	; (8009328 <tcp_input+0x2c0>)
 8009296:	4816      	ldr	r0, [pc, #88]	; (80092f0 <tcp_input+0x288>)
 8009298:	f006 ff24 	bl	80100e4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800929c:	69fb      	ldr	r3, [r7, #28]
 800929e:	7d1b      	ldrb	r3, [r3, #20]
 80092a0:	2b0a      	cmp	r3, #10
 80092a2:	d105      	bne.n	80092b0 <tcp_input+0x248>
 80092a4:	4b10      	ldr	r3, [pc, #64]	; (80092e8 <tcp_input+0x280>)
 80092a6:	22fc      	movs	r2, #252	; 0xfc
 80092a8:	4920      	ldr	r1, [pc, #128]	; (800932c <tcp_input+0x2c4>)
 80092aa:	4811      	ldr	r0, [pc, #68]	; (80092f0 <tcp_input+0x288>)
 80092ac:	f006 ff1a 	bl	80100e4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80092b0:	69fb      	ldr	r3, [r7, #28]
 80092b2:	7d1b      	ldrb	r3, [r3, #20]
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d105      	bne.n	80092c4 <tcp_input+0x25c>
 80092b8:	4b0b      	ldr	r3, [pc, #44]	; (80092e8 <tcp_input+0x280>)
 80092ba:	22fd      	movs	r2, #253	; 0xfd
 80092bc:	491c      	ldr	r1, [pc, #112]	; (8009330 <tcp_input+0x2c8>)
 80092be:	480c      	ldr	r0, [pc, #48]	; (80092f0 <tcp_input+0x288>)
 80092c0:	f006 ff10 	bl	80100e4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	7a1b      	ldrb	r3, [r3, #8]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d033      	beq.n	8009334 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80092cc:	69fb      	ldr	r3, [r7, #28]
 80092ce:	7a1a      	ldrb	r2, [r3, #8]
 80092d0:	4b09      	ldr	r3, [pc, #36]	; (80092f8 <tcp_input+0x290>)
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80092d8:	3301      	adds	r3, #1
 80092da:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80092dc:	429a      	cmp	r2, r3
 80092de:	d029      	beq.n	8009334 <tcp_input+0x2cc>
      prev = pcb;
 80092e0:	69fb      	ldr	r3, [r7, #28]
 80092e2:	61bb      	str	r3, [r7, #24]
      continue;
 80092e4:	e06b      	b.n	80093be <tcp_input+0x356>
 80092e6:	bf00      	nop
 80092e8:	08012860 	.word	0x08012860
 80092ec:	08012894 	.word	0x08012894
 80092f0:	080128ac 	.word	0x080128ac
 80092f4:	200000e0 	.word	0x200000e0
 80092f8:	200034f0 	.word	0x200034f0
 80092fc:	200000e4 	.word	0x200000e4
 8009300:	200000e8 	.word	0x200000e8
 8009304:	200000e6 	.word	0x200000e6
 8009308:	080128d4 	.word	0x080128d4
 800930c:	080128e4 	.word	0x080128e4
 8009310:	080128f0 	.word	0x080128f0
 8009314:	200000f0 	.word	0x200000f0
 8009318:	200000f4 	.word	0x200000f4
 800931c:	200000fc 	.word	0x200000fc
 8009320:	200000fa 	.word	0x200000fa
 8009324:	200065f4 	.word	0x200065f4
 8009328:	08012910 	.word	0x08012910
 800932c:	08012938 	.word	0x08012938
 8009330:	08012964 	.word	0x08012964
    }

    if (pcb->remote_port == tcphdr->src &&
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	8b1a      	ldrh	r2, [r3, #24]
 8009338:	4b94      	ldr	r3, [pc, #592]	; (800958c <tcp_input+0x524>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	881b      	ldrh	r3, [r3, #0]
 800933e:	b29b      	uxth	r3, r3
 8009340:	429a      	cmp	r2, r3
 8009342:	d13a      	bne.n	80093ba <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	8ada      	ldrh	r2, [r3, #22]
 8009348:	4b90      	ldr	r3, [pc, #576]	; (800958c <tcp_input+0x524>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	885b      	ldrh	r3, [r3, #2]
 800934e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8009350:	429a      	cmp	r2, r3
 8009352:	d132      	bne.n	80093ba <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009354:	69fb      	ldr	r3, [r7, #28]
 8009356:	685a      	ldr	r2, [r3, #4]
 8009358:	4b8d      	ldr	r3, [pc, #564]	; (8009590 <tcp_input+0x528>)
 800935a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800935c:	429a      	cmp	r2, r3
 800935e:	d12c      	bne.n	80093ba <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009360:	69fb      	ldr	r3, [r7, #28]
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	4b8a      	ldr	r3, [pc, #552]	; (8009590 <tcp_input+0x528>)
 8009366:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009368:	429a      	cmp	r2, r3
 800936a:	d126      	bne.n	80093ba <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800936c:	69fb      	ldr	r3, [r7, #28]
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	69fa      	ldr	r2, [r7, #28]
 8009372:	429a      	cmp	r2, r3
 8009374:	d106      	bne.n	8009384 <tcp_input+0x31c>
 8009376:	4b87      	ldr	r3, [pc, #540]	; (8009594 <tcp_input+0x52c>)
 8009378:	f240 120d 	movw	r2, #269	; 0x10d
 800937c:	4986      	ldr	r1, [pc, #536]	; (8009598 <tcp_input+0x530>)
 800937e:	4887      	ldr	r0, [pc, #540]	; (800959c <tcp_input+0x534>)
 8009380:	f006 feb0 	bl	80100e4 <iprintf>
      if (prev != NULL) {
 8009384:	69bb      	ldr	r3, [r7, #24]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d00a      	beq.n	80093a0 <tcp_input+0x338>
        prev->next = pcb->next;
 800938a:	69fb      	ldr	r3, [r7, #28]
 800938c:	68da      	ldr	r2, [r3, #12]
 800938e:	69bb      	ldr	r3, [r7, #24]
 8009390:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8009392:	4b83      	ldr	r3, [pc, #524]	; (80095a0 <tcp_input+0x538>)
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	69fb      	ldr	r3, [r7, #28]
 8009398:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800939a:	4a81      	ldr	r2, [pc, #516]	; (80095a0 <tcp_input+0x538>)
 800939c:	69fb      	ldr	r3, [r7, #28]
 800939e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80093a0:	69fb      	ldr	r3, [r7, #28]
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	69fa      	ldr	r2, [r7, #28]
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d111      	bne.n	80093ce <tcp_input+0x366>
 80093aa:	4b7a      	ldr	r3, [pc, #488]	; (8009594 <tcp_input+0x52c>)
 80093ac:	f240 1215 	movw	r2, #277	; 0x115
 80093b0:	497c      	ldr	r1, [pc, #496]	; (80095a4 <tcp_input+0x53c>)
 80093b2:	487a      	ldr	r0, [pc, #488]	; (800959c <tcp_input+0x534>)
 80093b4:	f006 fe96 	bl	80100e4 <iprintf>
      break;
 80093b8:	e009      	b.n	80093ce <tcp_input+0x366>
    }
    prev = pcb;
 80093ba:	69fb      	ldr	r3, [r7, #28]
 80093bc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80093be:	69fb      	ldr	r3, [r7, #28]
 80093c0:	68db      	ldr	r3, [r3, #12]
 80093c2:	61fb      	str	r3, [r7, #28]
 80093c4:	69fb      	ldr	r3, [r7, #28]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	f47f af5e 	bne.w	8009288 <tcp_input+0x220>
 80093cc:	e000      	b.n	80093d0 <tcp_input+0x368>
      break;
 80093ce:	bf00      	nop
  }

  if (pcb == NULL) {
 80093d0:	69fb      	ldr	r3, [r7, #28]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	f040 8095 	bne.w	8009502 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80093d8:	4b73      	ldr	r3, [pc, #460]	; (80095a8 <tcp_input+0x540>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	61fb      	str	r3, [r7, #28]
 80093de:	e03f      	b.n	8009460 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80093e0:	69fb      	ldr	r3, [r7, #28]
 80093e2:	7d1b      	ldrb	r3, [r3, #20]
 80093e4:	2b0a      	cmp	r3, #10
 80093e6:	d006      	beq.n	80093f6 <tcp_input+0x38e>
 80093e8:	4b6a      	ldr	r3, [pc, #424]	; (8009594 <tcp_input+0x52c>)
 80093ea:	f240 121f 	movw	r2, #287	; 0x11f
 80093ee:	496f      	ldr	r1, [pc, #444]	; (80095ac <tcp_input+0x544>)
 80093f0:	486a      	ldr	r0, [pc, #424]	; (800959c <tcp_input+0x534>)
 80093f2:	f006 fe77 	bl	80100e4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80093f6:	69fb      	ldr	r3, [r7, #28]
 80093f8:	7a1b      	ldrb	r3, [r3, #8]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d009      	beq.n	8009412 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80093fe:	69fb      	ldr	r3, [r7, #28]
 8009400:	7a1a      	ldrb	r2, [r3, #8]
 8009402:	4b63      	ldr	r3, [pc, #396]	; (8009590 <tcp_input+0x528>)
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800940a:	3301      	adds	r3, #1
 800940c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800940e:	429a      	cmp	r2, r3
 8009410:	d122      	bne.n	8009458 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8009412:	69fb      	ldr	r3, [r7, #28]
 8009414:	8b1a      	ldrh	r2, [r3, #24]
 8009416:	4b5d      	ldr	r3, [pc, #372]	; (800958c <tcp_input+0x524>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	881b      	ldrh	r3, [r3, #0]
 800941c:	b29b      	uxth	r3, r3
 800941e:	429a      	cmp	r2, r3
 8009420:	d11b      	bne.n	800945a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8009422:	69fb      	ldr	r3, [r7, #28]
 8009424:	8ada      	ldrh	r2, [r3, #22]
 8009426:	4b59      	ldr	r3, [pc, #356]	; (800958c <tcp_input+0x524>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	885b      	ldrh	r3, [r3, #2]
 800942c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800942e:	429a      	cmp	r2, r3
 8009430:	d113      	bne.n	800945a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009432:	69fb      	ldr	r3, [r7, #28]
 8009434:	685a      	ldr	r2, [r3, #4]
 8009436:	4b56      	ldr	r3, [pc, #344]	; (8009590 <tcp_input+0x528>)
 8009438:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800943a:	429a      	cmp	r2, r3
 800943c:	d10d      	bne.n	800945a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800943e:	69fb      	ldr	r3, [r7, #28]
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	4b53      	ldr	r3, [pc, #332]	; (8009590 <tcp_input+0x528>)
 8009444:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009446:	429a      	cmp	r2, r3
 8009448:	d107      	bne.n	800945a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800944a:	69f8      	ldr	r0, [r7, #28]
 800944c:	f000 fb54 	bl	8009af8 <tcp_timewait_input>
        }
        pbuf_free(p);
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f7fd fd63 	bl	8006f1c <pbuf_free>
        return;
 8009456:	e1f0      	b.n	800983a <tcp_input+0x7d2>
        continue;
 8009458:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800945a:	69fb      	ldr	r3, [r7, #28]
 800945c:	68db      	ldr	r3, [r3, #12]
 800945e:	61fb      	str	r3, [r7, #28]
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d1bc      	bne.n	80093e0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8009466:	2300      	movs	r3, #0
 8009468:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800946a:	4b51      	ldr	r3, [pc, #324]	; (80095b0 <tcp_input+0x548>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	617b      	str	r3, [r7, #20]
 8009470:	e02a      	b.n	80094c8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	7a1b      	ldrb	r3, [r3, #8]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d00c      	beq.n	8009494 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	7a1a      	ldrb	r2, [r3, #8]
 800947e:	4b44      	ldr	r3, [pc, #272]	; (8009590 <tcp_input+0x528>)
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009486:	3301      	adds	r3, #1
 8009488:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800948a:	429a      	cmp	r2, r3
 800948c:	d002      	beq.n	8009494 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	61bb      	str	r3, [r7, #24]
        continue;
 8009492:	e016      	b.n	80094c2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	8ada      	ldrh	r2, [r3, #22]
 8009498:	4b3c      	ldr	r3, [pc, #240]	; (800958c <tcp_input+0x524>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	885b      	ldrh	r3, [r3, #2]
 800949e:	b29b      	uxth	r3, r3
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d10c      	bne.n	80094be <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	681a      	ldr	r2, [r3, #0]
 80094a8:	4b39      	ldr	r3, [pc, #228]	; (8009590 <tcp_input+0x528>)
 80094aa:	695b      	ldr	r3, [r3, #20]
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d00f      	beq.n	80094d0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d00d      	beq.n	80094d2 <tcp_input+0x46a>
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d009      	beq.n	80094d2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	68db      	ldr	r3, [r3, #12]
 80094c6:	617b      	str	r3, [r7, #20]
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d1d1      	bne.n	8009472 <tcp_input+0x40a>
 80094ce:	e000      	b.n	80094d2 <tcp_input+0x46a>
            break;
 80094d0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d014      	beq.n	8009502 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80094d8:	69bb      	ldr	r3, [r7, #24]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d00a      	beq.n	80094f4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	68da      	ldr	r2, [r3, #12]
 80094e2:	69bb      	ldr	r3, [r7, #24]
 80094e4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80094e6:	4b32      	ldr	r3, [pc, #200]	; (80095b0 <tcp_input+0x548>)
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80094ee:	4a30      	ldr	r2, [pc, #192]	; (80095b0 <tcp_input+0x548>)
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80094f4:	6978      	ldr	r0, [r7, #20]
 80094f6:	f000 fa01 	bl	80098fc <tcp_listen_input>
      }
      pbuf_free(p);
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f7fd fd0e 	bl	8006f1c <pbuf_free>
      return;
 8009500:	e19b      	b.n	800983a <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8009502:	69fb      	ldr	r3, [r7, #28]
 8009504:	2b00      	cmp	r3, #0
 8009506:	f000 8160 	beq.w	80097ca <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800950a:	4b2a      	ldr	r3, [pc, #168]	; (80095b4 <tcp_input+0x54c>)
 800950c:	2200      	movs	r2, #0
 800950e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	891a      	ldrh	r2, [r3, #8]
 8009514:	4b27      	ldr	r3, [pc, #156]	; (80095b4 <tcp_input+0x54c>)
 8009516:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8009518:	4a26      	ldr	r2, [pc, #152]	; (80095b4 <tcp_input+0x54c>)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800951e:	4b1b      	ldr	r3, [pc, #108]	; (800958c <tcp_input+0x524>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a24      	ldr	r2, [pc, #144]	; (80095b4 <tcp_input+0x54c>)
 8009524:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8009526:	4b24      	ldr	r3, [pc, #144]	; (80095b8 <tcp_input+0x550>)
 8009528:	2200      	movs	r2, #0
 800952a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800952c:	4b23      	ldr	r3, [pc, #140]	; (80095bc <tcp_input+0x554>)
 800952e:	2200      	movs	r2, #0
 8009530:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8009532:	4b23      	ldr	r3, [pc, #140]	; (80095c0 <tcp_input+0x558>)
 8009534:	2200      	movs	r2, #0
 8009536:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8009538:	4b22      	ldr	r3, [pc, #136]	; (80095c4 <tcp_input+0x55c>)
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	f003 0308 	and.w	r3, r3, #8
 8009540:	2b00      	cmp	r3, #0
 8009542:	d006      	beq.n	8009552 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	7b5b      	ldrb	r3, [r3, #13]
 8009548:	f043 0301 	orr.w	r3, r3, #1
 800954c:	b2da      	uxtb	r2, r3
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8009552:	69fb      	ldr	r3, [r7, #28]
 8009554:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009556:	2b00      	cmp	r3, #0
 8009558:	d038      	beq.n	80095cc <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800955a:	69f8      	ldr	r0, [r7, #28]
 800955c:	f7ff f8b0 	bl	80086c0 <tcp_process_refused_data>
 8009560:	4603      	mov	r3, r0
 8009562:	f113 0f0d 	cmn.w	r3, #13
 8009566:	d007      	beq.n	8009578 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009568:	69fb      	ldr	r3, [r7, #28]
 800956a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800956c:	2b00      	cmp	r3, #0
 800956e:	d02d      	beq.n	80095cc <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009570:	4b15      	ldr	r3, [pc, #84]	; (80095c8 <tcp_input+0x560>)
 8009572:	881b      	ldrh	r3, [r3, #0]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d029      	beq.n	80095cc <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8009578:	69fb      	ldr	r3, [r7, #28]
 800957a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800957c:	2b00      	cmp	r3, #0
 800957e:	f040 8104 	bne.w	800978a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8009582:	69f8      	ldr	r0, [r7, #28]
 8009584:	f003 fe14 	bl	800d1b0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8009588:	e0ff      	b.n	800978a <tcp_input+0x722>
 800958a:	bf00      	nop
 800958c:	200000e0 	.word	0x200000e0
 8009590:	200034f0 	.word	0x200034f0
 8009594:	08012860 	.word	0x08012860
 8009598:	0801298c 	.word	0x0801298c
 800959c:	080128ac 	.word	0x080128ac
 80095a0:	200065f4 	.word	0x200065f4
 80095a4:	080129b8 	.word	0x080129b8
 80095a8:	20006604 	.word	0x20006604
 80095ac:	080129e4 	.word	0x080129e4
 80095b0:	200065fc 	.word	0x200065fc
 80095b4:	200000d0 	.word	0x200000d0
 80095b8:	20000100 	.word	0x20000100
 80095bc:	200000fd 	.word	0x200000fd
 80095c0:	200000f8 	.word	0x200000f8
 80095c4:	200000fc 	.word	0x200000fc
 80095c8:	200000fa 	.word	0x200000fa
      }
    }
    tcp_input_pcb = pcb;
 80095cc:	4a9c      	ldr	r2, [pc, #624]	; (8009840 <tcp_input+0x7d8>)
 80095ce:	69fb      	ldr	r3, [r7, #28]
 80095d0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80095d2:	69f8      	ldr	r0, [r7, #28]
 80095d4:	f000 fb0a 	bl	8009bec <tcp_process>
 80095d8:	4603      	mov	r3, r0
 80095da:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80095dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80095e0:	f113 0f0d 	cmn.w	r3, #13
 80095e4:	f000 80d3 	beq.w	800978e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 80095e8:	4b96      	ldr	r3, [pc, #600]	; (8009844 <tcp_input+0x7dc>)
 80095ea:	781b      	ldrb	r3, [r3, #0]
 80095ec:	f003 0308 	and.w	r3, r3, #8
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d015      	beq.n	8009620 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80095f4:	69fb      	ldr	r3, [r7, #28]
 80095f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d008      	beq.n	8009610 <tcp_input+0x5a8>
 80095fe:	69fb      	ldr	r3, [r7, #28]
 8009600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009604:	69fa      	ldr	r2, [r7, #28]
 8009606:	6912      	ldr	r2, [r2, #16]
 8009608:	f06f 010d 	mvn.w	r1, #13
 800960c:	4610      	mov	r0, r2
 800960e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009610:	69f9      	ldr	r1, [r7, #28]
 8009612:	488d      	ldr	r0, [pc, #564]	; (8009848 <tcp_input+0x7e0>)
 8009614:	f7ff fbb0 	bl	8008d78 <tcp_pcb_remove>
        tcp_free(pcb);
 8009618:	69f8      	ldr	r0, [r7, #28]
 800961a:	f7fd ffb1 	bl	8007580 <tcp_free>
 800961e:	e0c1      	b.n	80097a4 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8009620:	2300      	movs	r3, #0
 8009622:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8009624:	4b89      	ldr	r3, [pc, #548]	; (800984c <tcp_input+0x7e4>)
 8009626:	881b      	ldrh	r3, [r3, #0]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d01d      	beq.n	8009668 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800962c:	4b87      	ldr	r3, [pc, #540]	; (800984c <tcp_input+0x7e4>)
 800962e:	881b      	ldrh	r3, [r3, #0]
 8009630:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009632:	69fb      	ldr	r3, [r7, #28]
 8009634:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009638:	2b00      	cmp	r3, #0
 800963a:	d00a      	beq.n	8009652 <tcp_input+0x5ea>
 800963c:	69fb      	ldr	r3, [r7, #28]
 800963e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009642:	69fa      	ldr	r2, [r7, #28]
 8009644:	6910      	ldr	r0, [r2, #16]
 8009646:	89fa      	ldrh	r2, [r7, #14]
 8009648:	69f9      	ldr	r1, [r7, #28]
 800964a:	4798      	blx	r3
 800964c:	4603      	mov	r3, r0
 800964e:	74fb      	strb	r3, [r7, #19]
 8009650:	e001      	b.n	8009656 <tcp_input+0x5ee>
 8009652:	2300      	movs	r3, #0
 8009654:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009656:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800965a:	f113 0f0d 	cmn.w	r3, #13
 800965e:	f000 8098 	beq.w	8009792 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8009662:	4b7a      	ldr	r3, [pc, #488]	; (800984c <tcp_input+0x7e4>)
 8009664:	2200      	movs	r2, #0
 8009666:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8009668:	69f8      	ldr	r0, [r7, #28]
 800966a:	f000 f907 	bl	800987c <tcp_input_delayed_close>
 800966e:	4603      	mov	r3, r0
 8009670:	2b00      	cmp	r3, #0
 8009672:	f040 8090 	bne.w	8009796 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8009676:	4b76      	ldr	r3, [pc, #472]	; (8009850 <tcp_input+0x7e8>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d041      	beq.n	8009702 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800967e:	69fb      	ldr	r3, [r7, #28]
 8009680:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009682:	2b00      	cmp	r3, #0
 8009684:	d006      	beq.n	8009694 <tcp_input+0x62c>
 8009686:	4b73      	ldr	r3, [pc, #460]	; (8009854 <tcp_input+0x7ec>)
 8009688:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800968c:	4972      	ldr	r1, [pc, #456]	; (8009858 <tcp_input+0x7f0>)
 800968e:	4873      	ldr	r0, [pc, #460]	; (800985c <tcp_input+0x7f4>)
 8009690:	f006 fd28 	bl	80100e4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8009694:	69fb      	ldr	r3, [r7, #28]
 8009696:	8b5b      	ldrh	r3, [r3, #26]
 8009698:	f003 0310 	and.w	r3, r3, #16
 800969c:	2b00      	cmp	r3, #0
 800969e:	d008      	beq.n	80096b2 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80096a0:	4b6b      	ldr	r3, [pc, #428]	; (8009850 <tcp_input+0x7e8>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4618      	mov	r0, r3
 80096a6:	f7fd fc39 	bl	8006f1c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80096aa:	69f8      	ldr	r0, [r7, #28]
 80096ac:	f7fe fa50 	bl	8007b50 <tcp_abort>
            goto aborted;
 80096b0:	e078      	b.n	80097a4 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80096b2:	69fb      	ldr	r3, [r7, #28]
 80096b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d00c      	beq.n	80096d6 <tcp_input+0x66e>
 80096bc:	69fb      	ldr	r3, [r7, #28]
 80096be:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80096c2:	69fb      	ldr	r3, [r7, #28]
 80096c4:	6918      	ldr	r0, [r3, #16]
 80096c6:	4b62      	ldr	r3, [pc, #392]	; (8009850 <tcp_input+0x7e8>)
 80096c8:	681a      	ldr	r2, [r3, #0]
 80096ca:	2300      	movs	r3, #0
 80096cc:	69f9      	ldr	r1, [r7, #28]
 80096ce:	47a0      	blx	r4
 80096d0:	4603      	mov	r3, r0
 80096d2:	74fb      	strb	r3, [r7, #19]
 80096d4:	e008      	b.n	80096e8 <tcp_input+0x680>
 80096d6:	4b5e      	ldr	r3, [pc, #376]	; (8009850 <tcp_input+0x7e8>)
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	2300      	movs	r3, #0
 80096dc:	69f9      	ldr	r1, [r7, #28]
 80096de:	2000      	movs	r0, #0
 80096e0:	f7ff f8c4 	bl	800886c <tcp_recv_null>
 80096e4:	4603      	mov	r3, r0
 80096e6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80096e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80096ec:	f113 0f0d 	cmn.w	r3, #13
 80096f0:	d053      	beq.n	800979a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80096f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d003      	beq.n	8009702 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80096fa:	4b55      	ldr	r3, [pc, #340]	; (8009850 <tcp_input+0x7e8>)
 80096fc:	681a      	ldr	r2, [r3, #0]
 80096fe:	69fb      	ldr	r3, [r7, #28]
 8009700:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8009702:	4b50      	ldr	r3, [pc, #320]	; (8009844 <tcp_input+0x7dc>)
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	f003 0320 	and.w	r3, r3, #32
 800970a:	2b00      	cmp	r3, #0
 800970c:	d030      	beq.n	8009770 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800970e:	69fb      	ldr	r3, [r7, #28]
 8009710:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009712:	2b00      	cmp	r3, #0
 8009714:	d009      	beq.n	800972a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8009716:	69fb      	ldr	r3, [r7, #28]
 8009718:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800971a:	7b5a      	ldrb	r2, [r3, #13]
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009720:	f042 0220 	orr.w	r2, r2, #32
 8009724:	b2d2      	uxtb	r2, r2
 8009726:	735a      	strb	r2, [r3, #13]
 8009728:	e022      	b.n	8009770 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800972a:	69fb      	ldr	r3, [r7, #28]
 800972c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800972e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009732:	d005      	beq.n	8009740 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8009734:	69fb      	ldr	r3, [r7, #28]
 8009736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009738:	3301      	adds	r3, #1
 800973a:	b29a      	uxth	r2, r3
 800973c:	69fb      	ldr	r3, [r7, #28]
 800973e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8009740:	69fb      	ldr	r3, [r7, #28]
 8009742:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009746:	2b00      	cmp	r3, #0
 8009748:	d00b      	beq.n	8009762 <tcp_input+0x6fa>
 800974a:	69fb      	ldr	r3, [r7, #28]
 800974c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009750:	69fb      	ldr	r3, [r7, #28]
 8009752:	6918      	ldr	r0, [r3, #16]
 8009754:	2300      	movs	r3, #0
 8009756:	2200      	movs	r2, #0
 8009758:	69f9      	ldr	r1, [r7, #28]
 800975a:	47a0      	blx	r4
 800975c:	4603      	mov	r3, r0
 800975e:	74fb      	strb	r3, [r7, #19]
 8009760:	e001      	b.n	8009766 <tcp_input+0x6fe>
 8009762:	2300      	movs	r3, #0
 8009764:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009766:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800976a:	f113 0f0d 	cmn.w	r3, #13
 800976e:	d016      	beq.n	800979e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8009770:	4b33      	ldr	r3, [pc, #204]	; (8009840 <tcp_input+0x7d8>)
 8009772:	2200      	movs	r2, #0
 8009774:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8009776:	69f8      	ldr	r0, [r7, #28]
 8009778:	f000 f880 	bl	800987c <tcp_input_delayed_close>
 800977c:	4603      	mov	r3, r0
 800977e:	2b00      	cmp	r3, #0
 8009780:	d10f      	bne.n	80097a2 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8009782:	69f8      	ldr	r0, [r7, #28]
 8009784:	f002 ff10 	bl	800c5a8 <tcp_output>
 8009788:	e00c      	b.n	80097a4 <tcp_input+0x73c>
        goto aborted;
 800978a:	bf00      	nop
 800978c:	e00a      	b.n	80097a4 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800978e:	bf00      	nop
 8009790:	e008      	b.n	80097a4 <tcp_input+0x73c>
              goto aborted;
 8009792:	bf00      	nop
 8009794:	e006      	b.n	80097a4 <tcp_input+0x73c>
          goto aborted;
 8009796:	bf00      	nop
 8009798:	e004      	b.n	80097a4 <tcp_input+0x73c>
            goto aborted;
 800979a:	bf00      	nop
 800979c:	e002      	b.n	80097a4 <tcp_input+0x73c>
              goto aborted;
 800979e:	bf00      	nop
 80097a0:	e000      	b.n	80097a4 <tcp_input+0x73c>
          goto aborted;
 80097a2:	bf00      	nop
    tcp_input_pcb = NULL;
 80097a4:	4b26      	ldr	r3, [pc, #152]	; (8009840 <tcp_input+0x7d8>)
 80097a6:	2200      	movs	r2, #0
 80097a8:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80097aa:	4b29      	ldr	r3, [pc, #164]	; (8009850 <tcp_input+0x7e8>)
 80097ac:	2200      	movs	r2, #0
 80097ae:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80097b0:	4b2b      	ldr	r3, [pc, #172]	; (8009860 <tcp_input+0x7f8>)
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d03f      	beq.n	8009838 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 80097b8:	4b29      	ldr	r3, [pc, #164]	; (8009860 <tcp_input+0x7f8>)
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	4618      	mov	r0, r3
 80097be:	f7fd fbad 	bl	8006f1c <pbuf_free>
      inseg.p = NULL;
 80097c2:	4b27      	ldr	r3, [pc, #156]	; (8009860 <tcp_input+0x7f8>)
 80097c4:	2200      	movs	r2, #0
 80097c6:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80097c8:	e036      	b.n	8009838 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80097ca:	4b26      	ldr	r3, [pc, #152]	; (8009864 <tcp_input+0x7fc>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	899b      	ldrh	r3, [r3, #12]
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	4618      	mov	r0, r3
 80097d4:	f7fc f8ee 	bl	80059b4 <lwip_htons>
 80097d8:	4603      	mov	r3, r0
 80097da:	b2db      	uxtb	r3, r3
 80097dc:	f003 0304 	and.w	r3, r3, #4
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d118      	bne.n	8009816 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80097e4:	4b20      	ldr	r3, [pc, #128]	; (8009868 <tcp_input+0x800>)
 80097e6:	6819      	ldr	r1, [r3, #0]
 80097e8:	4b20      	ldr	r3, [pc, #128]	; (800986c <tcp_input+0x804>)
 80097ea:	881b      	ldrh	r3, [r3, #0]
 80097ec:	461a      	mov	r2, r3
 80097ee:	4b20      	ldr	r3, [pc, #128]	; (8009870 <tcp_input+0x808>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80097f4:	4b1b      	ldr	r3, [pc, #108]	; (8009864 <tcp_input+0x7fc>)
 80097f6:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80097f8:	885b      	ldrh	r3, [r3, #2]
 80097fa:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80097fc:	4a19      	ldr	r2, [pc, #100]	; (8009864 <tcp_input+0x7fc>)
 80097fe:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009800:	8812      	ldrh	r2, [r2, #0]
 8009802:	b292      	uxth	r2, r2
 8009804:	9202      	str	r2, [sp, #8]
 8009806:	9301      	str	r3, [sp, #4]
 8009808:	4b1a      	ldr	r3, [pc, #104]	; (8009874 <tcp_input+0x80c>)
 800980a:	9300      	str	r3, [sp, #0]
 800980c:	4b1a      	ldr	r3, [pc, #104]	; (8009878 <tcp_input+0x810>)
 800980e:	4602      	mov	r2, r0
 8009810:	2000      	movs	r0, #0
 8009812:	f003 fc7d 	bl	800d110 <tcp_rst>
    pbuf_free(p);
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f7fd fb80 	bl	8006f1c <pbuf_free>
  return;
 800981c:	e00c      	b.n	8009838 <tcp_input+0x7d0>
    goto dropped;
 800981e:	bf00      	nop
 8009820:	e006      	b.n	8009830 <tcp_input+0x7c8>
    goto dropped;
 8009822:	bf00      	nop
 8009824:	e004      	b.n	8009830 <tcp_input+0x7c8>
    goto dropped;
 8009826:	bf00      	nop
 8009828:	e002      	b.n	8009830 <tcp_input+0x7c8>
      goto dropped;
 800982a:	bf00      	nop
 800982c:	e000      	b.n	8009830 <tcp_input+0x7c8>
      goto dropped;
 800982e:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f7fd fb73 	bl	8006f1c <pbuf_free>
 8009836:	e000      	b.n	800983a <tcp_input+0x7d2>
  return;
 8009838:	bf00      	nop
}
 800983a:	3724      	adds	r7, #36	; 0x24
 800983c:	46bd      	mov	sp, r7
 800983e:	bd90      	pop	{r4, r7, pc}
 8009840:	20006608 	.word	0x20006608
 8009844:	200000fd 	.word	0x200000fd
 8009848:	200065f4 	.word	0x200065f4
 800984c:	200000f8 	.word	0x200000f8
 8009850:	20000100 	.word	0x20000100
 8009854:	08012860 	.word	0x08012860
 8009858:	08012a14 	.word	0x08012a14
 800985c:	080128ac 	.word	0x080128ac
 8009860:	200000d0 	.word	0x200000d0
 8009864:	200000e0 	.word	0x200000e0
 8009868:	200000f4 	.word	0x200000f4
 800986c:	200000fa 	.word	0x200000fa
 8009870:	200000f0 	.word	0x200000f0
 8009874:	20003500 	.word	0x20003500
 8009878:	20003504 	.word	0x20003504

0800987c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b082      	sub	sp, #8
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d106      	bne.n	8009898 <tcp_input_delayed_close+0x1c>
 800988a:	4b17      	ldr	r3, [pc, #92]	; (80098e8 <tcp_input_delayed_close+0x6c>)
 800988c:	f240 225a 	movw	r2, #602	; 0x25a
 8009890:	4916      	ldr	r1, [pc, #88]	; (80098ec <tcp_input_delayed_close+0x70>)
 8009892:	4817      	ldr	r0, [pc, #92]	; (80098f0 <tcp_input_delayed_close+0x74>)
 8009894:	f006 fc26 	bl	80100e4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8009898:	4b16      	ldr	r3, [pc, #88]	; (80098f4 <tcp_input_delayed_close+0x78>)
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	f003 0310 	and.w	r3, r3, #16
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d01c      	beq.n	80098de <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	8b5b      	ldrh	r3, [r3, #26]
 80098a8:	f003 0310 	and.w	r3, r3, #16
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d10d      	bne.n	80098cc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d008      	beq.n	80098cc <tcp_input_delayed_close+0x50>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	6912      	ldr	r2, [r2, #16]
 80098c4:	f06f 010e 	mvn.w	r1, #14
 80098c8:	4610      	mov	r0, r2
 80098ca:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80098cc:	6879      	ldr	r1, [r7, #4]
 80098ce:	480a      	ldr	r0, [pc, #40]	; (80098f8 <tcp_input_delayed_close+0x7c>)
 80098d0:	f7ff fa52 	bl	8008d78 <tcp_pcb_remove>
    tcp_free(pcb);
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f7fd fe53 	bl	8007580 <tcp_free>
    return 1;
 80098da:	2301      	movs	r3, #1
 80098dc:	e000      	b.n	80098e0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80098de:	2300      	movs	r3, #0
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3708      	adds	r7, #8
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	08012860 	.word	0x08012860
 80098ec:	08012a30 	.word	0x08012a30
 80098f0:	080128ac 	.word	0x080128ac
 80098f4:	200000fd 	.word	0x200000fd
 80098f8:	200065f4 	.word	0x200065f4

080098fc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80098fc:	b590      	push	{r4, r7, lr}
 80098fe:	b08b      	sub	sp, #44	; 0x2c
 8009900:	af04      	add	r7, sp, #16
 8009902:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8009904:	4b6f      	ldr	r3, [pc, #444]	; (8009ac4 <tcp_listen_input+0x1c8>)
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	f003 0304 	and.w	r3, r3, #4
 800990c:	2b00      	cmp	r3, #0
 800990e:	f040 80d2 	bne.w	8009ab6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d106      	bne.n	8009926 <tcp_listen_input+0x2a>
 8009918:	4b6b      	ldr	r3, [pc, #428]	; (8009ac8 <tcp_listen_input+0x1cc>)
 800991a:	f240 2281 	movw	r2, #641	; 0x281
 800991e:	496b      	ldr	r1, [pc, #428]	; (8009acc <tcp_listen_input+0x1d0>)
 8009920:	486b      	ldr	r0, [pc, #428]	; (8009ad0 <tcp_listen_input+0x1d4>)
 8009922:	f006 fbdf 	bl	80100e4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8009926:	4b67      	ldr	r3, [pc, #412]	; (8009ac4 <tcp_listen_input+0x1c8>)
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	f003 0310 	and.w	r3, r3, #16
 800992e:	2b00      	cmp	r3, #0
 8009930:	d019      	beq.n	8009966 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009932:	4b68      	ldr	r3, [pc, #416]	; (8009ad4 <tcp_listen_input+0x1d8>)
 8009934:	6819      	ldr	r1, [r3, #0]
 8009936:	4b68      	ldr	r3, [pc, #416]	; (8009ad8 <tcp_listen_input+0x1dc>)
 8009938:	881b      	ldrh	r3, [r3, #0]
 800993a:	461a      	mov	r2, r3
 800993c:	4b67      	ldr	r3, [pc, #412]	; (8009adc <tcp_listen_input+0x1e0>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009942:	4b67      	ldr	r3, [pc, #412]	; (8009ae0 <tcp_listen_input+0x1e4>)
 8009944:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009946:	885b      	ldrh	r3, [r3, #2]
 8009948:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800994a:	4a65      	ldr	r2, [pc, #404]	; (8009ae0 <tcp_listen_input+0x1e4>)
 800994c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800994e:	8812      	ldrh	r2, [r2, #0]
 8009950:	b292      	uxth	r2, r2
 8009952:	9202      	str	r2, [sp, #8]
 8009954:	9301      	str	r3, [sp, #4]
 8009956:	4b63      	ldr	r3, [pc, #396]	; (8009ae4 <tcp_listen_input+0x1e8>)
 8009958:	9300      	str	r3, [sp, #0]
 800995a:	4b63      	ldr	r3, [pc, #396]	; (8009ae8 <tcp_listen_input+0x1ec>)
 800995c:	4602      	mov	r2, r0
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f003 fbd6 	bl	800d110 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8009964:	e0a9      	b.n	8009aba <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8009966:	4b57      	ldr	r3, [pc, #348]	; (8009ac4 <tcp_listen_input+0x1c8>)
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	f003 0302 	and.w	r3, r3, #2
 800996e:	2b00      	cmp	r3, #0
 8009970:	f000 80a3 	beq.w	8009aba <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	7d5b      	ldrb	r3, [r3, #21]
 8009978:	4618      	mov	r0, r3
 800997a:	f7ff f89b 	bl	8008ab4 <tcp_alloc>
 800997e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d111      	bne.n	80099aa <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	699b      	ldr	r3, [r3, #24]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d00a      	beq.n	80099a4 <tcp_listen_input+0xa8>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	699b      	ldr	r3, [r3, #24]
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	6910      	ldr	r0, [r2, #16]
 8009996:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800999a:	2100      	movs	r1, #0
 800999c:	4798      	blx	r3
 800999e:	4603      	mov	r3, r0
 80099a0:	73bb      	strb	r3, [r7, #14]
      return;
 80099a2:	e08b      	b.n	8009abc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80099a4:	23f0      	movs	r3, #240	; 0xf0
 80099a6:	73bb      	strb	r3, [r7, #14]
      return;
 80099a8:	e088      	b.n	8009abc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80099aa:	4b50      	ldr	r3, [pc, #320]	; (8009aec <tcp_listen_input+0x1f0>)
 80099ac:	695a      	ldr	r2, [r3, #20]
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80099b2:	4b4e      	ldr	r3, [pc, #312]	; (8009aec <tcp_listen_input+0x1f0>)
 80099b4:	691a      	ldr	r2, [r3, #16]
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	8ada      	ldrh	r2, [r3, #22]
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80099c2:	4b47      	ldr	r3, [pc, #284]	; (8009ae0 <tcp_listen_input+0x1e4>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	881b      	ldrh	r3, [r3, #0]
 80099c8:	b29a      	uxth	r2, r3
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	2203      	movs	r2, #3
 80099d2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80099d4:	4b41      	ldr	r3, [pc, #260]	; (8009adc <tcp_listen_input+0x1e0>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	1c5a      	adds	r2, r3, #1
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80099e6:	6978      	ldr	r0, [r7, #20]
 80099e8:	f7ff fa5a 	bl	8008ea0 <tcp_next_iss>
 80099ec:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	693a      	ldr	r2, [r7, #16]
 80099f2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	693a      	ldr	r2, [r7, #16]
 80099f8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	693a      	ldr	r2, [r7, #16]
 80099fe:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	693a      	ldr	r2, [r7, #16]
 8009a04:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009a06:	4b35      	ldr	r3, [pc, #212]	; (8009adc <tcp_listen_input+0x1e0>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	1e5a      	subs	r2, r3, #1
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	691a      	ldr	r2, [r3, #16]
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	687a      	ldr	r2, [r7, #4]
 8009a1c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	7a5b      	ldrb	r3, [r3, #9]
 8009a22:	f003 030c 	and.w	r3, r3, #12
 8009a26:	b2da      	uxtb	r2, r3
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	7a1a      	ldrb	r2, [r3, #8]
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8009a34:	4b2e      	ldr	r3, [pc, #184]	; (8009af0 <tcp_listen_input+0x1f4>)
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	60da      	str	r2, [r3, #12]
 8009a3c:	4a2c      	ldr	r2, [pc, #176]	; (8009af0 <tcp_listen_input+0x1f4>)
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	6013      	str	r3, [r2, #0]
 8009a42:	f003 fd25 	bl	800d490 <tcp_timer_needed>
 8009a46:	4b2b      	ldr	r3, [pc, #172]	; (8009af4 <tcp_listen_input+0x1f8>)
 8009a48:	2201      	movs	r2, #1
 8009a4a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8009a4c:	6978      	ldr	r0, [r7, #20]
 8009a4e:	f001 fd8d 	bl	800b56c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8009a52:	4b23      	ldr	r3, [pc, #140]	; (8009ae0 <tcp_listen_input+0x1e4>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	89db      	ldrh	r3, [r3, #14]
 8009a58:	b29a      	uxth	r2, r3
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	3304      	adds	r3, #4
 8009a74:	4618      	mov	r0, r3
 8009a76:	f005 f8e9 	bl	800ec4c <ip4_route>
 8009a7a:	4601      	mov	r1, r0
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	3304      	adds	r3, #4
 8009a80:	461a      	mov	r2, r3
 8009a82:	4620      	mov	r0, r4
 8009a84:	f7ff fa32 	bl	8008eec <tcp_eff_send_mss_netif>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8009a90:	2112      	movs	r1, #18
 8009a92:	6978      	ldr	r0, [r7, #20]
 8009a94:	f002 fc9a 	bl	800c3cc <tcp_enqueue_flags>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8009a9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d004      	beq.n	8009aae <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8009aa4:	2100      	movs	r1, #0
 8009aa6:	6978      	ldr	r0, [r7, #20]
 8009aa8:	f7fd ff94 	bl	80079d4 <tcp_abandon>
      return;
 8009aac:	e006      	b.n	8009abc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8009aae:	6978      	ldr	r0, [r7, #20]
 8009ab0:	f002 fd7a 	bl	800c5a8 <tcp_output>
  return;
 8009ab4:	e001      	b.n	8009aba <tcp_listen_input+0x1be>
    return;
 8009ab6:	bf00      	nop
 8009ab8:	e000      	b.n	8009abc <tcp_listen_input+0x1c0>
  return;
 8009aba:	bf00      	nop
}
 8009abc:	371c      	adds	r7, #28
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd90      	pop	{r4, r7, pc}
 8009ac2:	bf00      	nop
 8009ac4:	200000fc 	.word	0x200000fc
 8009ac8:	08012860 	.word	0x08012860
 8009acc:	08012a58 	.word	0x08012a58
 8009ad0:	080128ac 	.word	0x080128ac
 8009ad4:	200000f4 	.word	0x200000f4
 8009ad8:	200000fa 	.word	0x200000fa
 8009adc:	200000f0 	.word	0x200000f0
 8009ae0:	200000e0 	.word	0x200000e0
 8009ae4:	20003500 	.word	0x20003500
 8009ae8:	20003504 	.word	0x20003504
 8009aec:	200034f0 	.word	0x200034f0
 8009af0:	200065f4 	.word	0x200065f4
 8009af4:	200065f0 	.word	0x200065f0

08009af8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b086      	sub	sp, #24
 8009afc:	af04      	add	r7, sp, #16
 8009afe:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8009b00:	4b2f      	ldr	r3, [pc, #188]	; (8009bc0 <tcp_timewait_input+0xc8>)
 8009b02:	781b      	ldrb	r3, [r3, #0]
 8009b04:	f003 0304 	and.w	r3, r3, #4
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d153      	bne.n	8009bb4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d106      	bne.n	8009b20 <tcp_timewait_input+0x28>
 8009b12:	4b2c      	ldr	r3, [pc, #176]	; (8009bc4 <tcp_timewait_input+0xcc>)
 8009b14:	f240 22ee 	movw	r2, #750	; 0x2ee
 8009b18:	492b      	ldr	r1, [pc, #172]	; (8009bc8 <tcp_timewait_input+0xd0>)
 8009b1a:	482c      	ldr	r0, [pc, #176]	; (8009bcc <tcp_timewait_input+0xd4>)
 8009b1c:	f006 fae2 	bl	80100e4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8009b20:	4b27      	ldr	r3, [pc, #156]	; (8009bc0 <tcp_timewait_input+0xc8>)
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	f003 0302 	and.w	r3, r3, #2
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d02a      	beq.n	8009b82 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8009b2c:	4b28      	ldr	r3, [pc, #160]	; (8009bd0 <tcp_timewait_input+0xd8>)
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b34:	1ad3      	subs	r3, r2, r3
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	db2d      	blt.n	8009b96 <tcp_timewait_input+0x9e>
 8009b3a:	4b25      	ldr	r3, [pc, #148]	; (8009bd0 <tcp_timewait_input+0xd8>)
 8009b3c:	681a      	ldr	r2, [r3, #0]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b42:	6879      	ldr	r1, [r7, #4]
 8009b44:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009b46:	440b      	add	r3, r1
 8009b48:	1ad3      	subs	r3, r2, r3
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	dc23      	bgt.n	8009b96 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009b4e:	4b21      	ldr	r3, [pc, #132]	; (8009bd4 <tcp_timewait_input+0xdc>)
 8009b50:	6819      	ldr	r1, [r3, #0]
 8009b52:	4b21      	ldr	r3, [pc, #132]	; (8009bd8 <tcp_timewait_input+0xe0>)
 8009b54:	881b      	ldrh	r3, [r3, #0]
 8009b56:	461a      	mov	r2, r3
 8009b58:	4b1d      	ldr	r3, [pc, #116]	; (8009bd0 <tcp_timewait_input+0xd8>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009b5e:	4b1f      	ldr	r3, [pc, #124]	; (8009bdc <tcp_timewait_input+0xe4>)
 8009b60:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009b62:	885b      	ldrh	r3, [r3, #2]
 8009b64:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009b66:	4a1d      	ldr	r2, [pc, #116]	; (8009bdc <tcp_timewait_input+0xe4>)
 8009b68:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009b6a:	8812      	ldrh	r2, [r2, #0]
 8009b6c:	b292      	uxth	r2, r2
 8009b6e:	9202      	str	r2, [sp, #8]
 8009b70:	9301      	str	r3, [sp, #4]
 8009b72:	4b1b      	ldr	r3, [pc, #108]	; (8009be0 <tcp_timewait_input+0xe8>)
 8009b74:	9300      	str	r3, [sp, #0]
 8009b76:	4b1b      	ldr	r3, [pc, #108]	; (8009be4 <tcp_timewait_input+0xec>)
 8009b78:	4602      	mov	r2, r0
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f003 fac8 	bl	800d110 <tcp_rst>
      return;
 8009b80:	e01b      	b.n	8009bba <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8009b82:	4b0f      	ldr	r3, [pc, #60]	; (8009bc0 <tcp_timewait_input+0xc8>)
 8009b84:	781b      	ldrb	r3, [r3, #0]
 8009b86:	f003 0301 	and.w	r3, r3, #1
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d003      	beq.n	8009b96 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8009b8e:	4b16      	ldr	r3, [pc, #88]	; (8009be8 <tcp_timewait_input+0xf0>)
 8009b90:	681a      	ldr	r2, [r3, #0]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8009b96:	4b10      	ldr	r3, [pc, #64]	; (8009bd8 <tcp_timewait_input+0xe0>)
 8009b98:	881b      	ldrh	r3, [r3, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d00c      	beq.n	8009bb8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	8b5b      	ldrh	r3, [r3, #26]
 8009ba2:	f043 0302 	orr.w	r3, r3, #2
 8009ba6:	b29a      	uxth	r2, r3
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f002 fcfb 	bl	800c5a8 <tcp_output>
  }
  return;
 8009bb2:	e001      	b.n	8009bb8 <tcp_timewait_input+0xc0>
    return;
 8009bb4:	bf00      	nop
 8009bb6:	e000      	b.n	8009bba <tcp_timewait_input+0xc2>
  return;
 8009bb8:	bf00      	nop
}
 8009bba:	3708      	adds	r7, #8
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}
 8009bc0:	200000fc 	.word	0x200000fc
 8009bc4:	08012860 	.word	0x08012860
 8009bc8:	08012a78 	.word	0x08012a78
 8009bcc:	080128ac 	.word	0x080128ac
 8009bd0:	200000f0 	.word	0x200000f0
 8009bd4:	200000f4 	.word	0x200000f4
 8009bd8:	200000fa 	.word	0x200000fa
 8009bdc:	200000e0 	.word	0x200000e0
 8009be0:	20003500 	.word	0x20003500
 8009be4:	20003504 	.word	0x20003504
 8009be8:	200065f8 	.word	0x200065f8

08009bec <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8009bec:	b590      	push	{r4, r7, lr}
 8009bee:	b08d      	sub	sp, #52	; 0x34
 8009bf0:	af04      	add	r7, sp, #16
 8009bf2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d106      	bne.n	8009c10 <tcp_process+0x24>
 8009c02:	4ba5      	ldr	r3, [pc, #660]	; (8009e98 <tcp_process+0x2ac>)
 8009c04:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8009c08:	49a4      	ldr	r1, [pc, #656]	; (8009e9c <tcp_process+0x2b0>)
 8009c0a:	48a5      	ldr	r0, [pc, #660]	; (8009ea0 <tcp_process+0x2b4>)
 8009c0c:	f006 fa6a 	bl	80100e4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8009c10:	4ba4      	ldr	r3, [pc, #656]	; (8009ea4 <tcp_process+0x2b8>)
 8009c12:	781b      	ldrb	r3, [r3, #0]
 8009c14:	f003 0304 	and.w	r3, r3, #4
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d04e      	beq.n	8009cba <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	7d1b      	ldrb	r3, [r3, #20]
 8009c20:	2b02      	cmp	r3, #2
 8009c22:	d108      	bne.n	8009c36 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009c28:	4b9f      	ldr	r3, [pc, #636]	; (8009ea8 <tcp_process+0x2bc>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d123      	bne.n	8009c78 <tcp_process+0x8c>
        acceptable = 1;
 8009c30:	2301      	movs	r3, #1
 8009c32:	76fb      	strb	r3, [r7, #27]
 8009c34:	e020      	b.n	8009c78 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c3a:	4b9c      	ldr	r3, [pc, #624]	; (8009eac <tcp_process+0x2c0>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	d102      	bne.n	8009c48 <tcp_process+0x5c>
        acceptable = 1;
 8009c42:	2301      	movs	r3, #1
 8009c44:	76fb      	strb	r3, [r7, #27]
 8009c46:	e017      	b.n	8009c78 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009c48:	4b98      	ldr	r3, [pc, #608]	; (8009eac <tcp_process+0x2c0>)
 8009c4a:	681a      	ldr	r2, [r3, #0]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c50:	1ad3      	subs	r3, r2, r3
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	db10      	blt.n	8009c78 <tcp_process+0x8c>
 8009c56:	4b95      	ldr	r3, [pc, #596]	; (8009eac <tcp_process+0x2c0>)
 8009c58:	681a      	ldr	r2, [r3, #0]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5e:	6879      	ldr	r1, [r7, #4]
 8009c60:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009c62:	440b      	add	r3, r1
 8009c64:	1ad3      	subs	r3, r2, r3
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	dc06      	bgt.n	8009c78 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	8b5b      	ldrh	r3, [r3, #26]
 8009c6e:	f043 0302 	orr.w	r3, r3, #2
 8009c72:	b29a      	uxth	r2, r3
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8009c78:	7efb      	ldrb	r3, [r7, #27]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d01b      	beq.n	8009cb6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	7d1b      	ldrb	r3, [r3, #20]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d106      	bne.n	8009c94 <tcp_process+0xa8>
 8009c86:	4b84      	ldr	r3, [pc, #528]	; (8009e98 <tcp_process+0x2ac>)
 8009c88:	f44f 724e 	mov.w	r2, #824	; 0x338
 8009c8c:	4988      	ldr	r1, [pc, #544]	; (8009eb0 <tcp_process+0x2c4>)
 8009c8e:	4884      	ldr	r0, [pc, #528]	; (8009ea0 <tcp_process+0x2b4>)
 8009c90:	f006 fa28 	bl	80100e4 <iprintf>
      recv_flags |= TF_RESET;
 8009c94:	4b87      	ldr	r3, [pc, #540]	; (8009eb4 <tcp_process+0x2c8>)
 8009c96:	781b      	ldrb	r3, [r3, #0]
 8009c98:	f043 0308 	orr.w	r3, r3, #8
 8009c9c:	b2da      	uxtb	r2, r3
 8009c9e:	4b85      	ldr	r3, [pc, #532]	; (8009eb4 <tcp_process+0x2c8>)
 8009ca0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	8b5b      	ldrh	r3, [r3, #26]
 8009ca6:	f023 0301 	bic.w	r3, r3, #1
 8009caa:	b29a      	uxth	r2, r3
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8009cb0:	f06f 030d 	mvn.w	r3, #13
 8009cb4:	e37a      	b.n	800a3ac <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	e378      	b.n	800a3ac <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8009cba:	4b7a      	ldr	r3, [pc, #488]	; (8009ea4 <tcp_process+0x2b8>)
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	f003 0302 	and.w	r3, r3, #2
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d010      	beq.n	8009ce8 <tcp_process+0xfc>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	7d1b      	ldrb	r3, [r3, #20]
 8009cca:	2b02      	cmp	r3, #2
 8009ccc:	d00c      	beq.n	8009ce8 <tcp_process+0xfc>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	7d1b      	ldrb	r3, [r3, #20]
 8009cd2:	2b03      	cmp	r3, #3
 8009cd4:	d008      	beq.n	8009ce8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	8b5b      	ldrh	r3, [r3, #26]
 8009cda:	f043 0302 	orr.w	r3, r3, #2
 8009cde:	b29a      	uxth	r2, r3
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	e361      	b.n	800a3ac <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	8b5b      	ldrh	r3, [r3, #26]
 8009cec:	f003 0310 	and.w	r3, r3, #16
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d103      	bne.n	8009cfc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8009cf4:	4b70      	ldr	r3, [pc, #448]	; (8009eb8 <tcp_process+0x2cc>)
 8009cf6:	681a      	ldr	r2, [r3, #0]
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2200      	movs	r2, #0
 8009d08:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f001 fc2d 	bl	800b56c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	7d1b      	ldrb	r3, [r3, #20]
 8009d16:	3b02      	subs	r3, #2
 8009d18:	2b07      	cmp	r3, #7
 8009d1a:	f200 8337 	bhi.w	800a38c <tcp_process+0x7a0>
 8009d1e:	a201      	add	r2, pc, #4	; (adr r2, 8009d24 <tcp_process+0x138>)
 8009d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d24:	08009d45 	.word	0x08009d45
 8009d28:	08009f75 	.word	0x08009f75
 8009d2c:	0800a0ed 	.word	0x0800a0ed
 8009d30:	0800a117 	.word	0x0800a117
 8009d34:	0800a23b 	.word	0x0800a23b
 8009d38:	0800a0ed 	.word	0x0800a0ed
 8009d3c:	0800a2c7 	.word	0x0800a2c7
 8009d40:	0800a357 	.word	0x0800a357
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009d44:	4b57      	ldr	r3, [pc, #348]	; (8009ea4 <tcp_process+0x2b8>)
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	f003 0310 	and.w	r3, r3, #16
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	f000 80e4 	beq.w	8009f1a <tcp_process+0x32e>
 8009d52:	4b54      	ldr	r3, [pc, #336]	; (8009ea4 <tcp_process+0x2b8>)
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	f003 0302 	and.w	r3, r3, #2
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	f000 80dd 	beq.w	8009f1a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d64:	1c5a      	adds	r2, r3, #1
 8009d66:	4b50      	ldr	r3, [pc, #320]	; (8009ea8 <tcp_process+0x2bc>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	f040 80d5 	bne.w	8009f1a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8009d70:	4b4e      	ldr	r3, [pc, #312]	; (8009eac <tcp_process+0x2c0>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	1c5a      	adds	r2, r3, #1
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8009d82:	4b49      	ldr	r3, [pc, #292]	; (8009ea8 <tcp_process+0x2bc>)
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8009d8a:	4b4c      	ldr	r3, [pc, #304]	; (8009ebc <tcp_process+0x2d0>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	89db      	ldrh	r3, [r3, #14]
 8009d90:	b29a      	uxth	r2, r3
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8009da4:	4b41      	ldr	r3, [pc, #260]	; (8009eac <tcp_process+0x2c0>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	1e5a      	subs	r2, r3, #1
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2204      	movs	r2, #4
 8009db2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	3304      	adds	r3, #4
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f004 ff45 	bl	800ec4c <ip4_route>
 8009dc2:	4601      	mov	r1, r0
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	3304      	adds	r3, #4
 8009dc8:	461a      	mov	r2, r3
 8009dca:	4620      	mov	r0, r4
 8009dcc:	f7ff f88e 	bl	8008eec <tcp_eff_send_mss_netif>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009ddc:	009a      	lsls	r2, r3, #2
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009de2:	005b      	lsls	r3, r3, #1
 8009de4:	f241 111c 	movw	r1, #4380	; 0x111c
 8009de8:	428b      	cmp	r3, r1
 8009dea:	bf38      	it	cc
 8009dec:	460b      	movcc	r3, r1
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d204      	bcs.n	8009dfc <tcp_process+0x210>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009df6:	009b      	lsls	r3, r3, #2
 8009df8:	b29b      	uxth	r3, r3
 8009dfa:	e00d      	b.n	8009e18 <tcp_process+0x22c>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009e00:	005b      	lsls	r3, r3, #1
 8009e02:	f241 121c 	movw	r2, #4380	; 0x111c
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d904      	bls.n	8009e14 <tcp_process+0x228>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009e0e:	005b      	lsls	r3, r3, #1
 8009e10:	b29b      	uxth	r3, r3
 8009e12:	e001      	b.n	8009e18 <tcp_process+0x22c>
 8009e14:	f241 131c 	movw	r3, #4380	; 0x111c
 8009e18:	687a      	ldr	r2, [r7, #4]
 8009e1a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d106      	bne.n	8009e36 <tcp_process+0x24a>
 8009e28:	4b1b      	ldr	r3, [pc, #108]	; (8009e98 <tcp_process+0x2ac>)
 8009e2a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8009e2e:	4924      	ldr	r1, [pc, #144]	; (8009ec0 <tcp_process+0x2d4>)
 8009e30:	481b      	ldr	r0, [pc, #108]	; (8009ea0 <tcp_process+0x2b4>)
 8009e32:	f006 f957 	bl	80100e4 <iprintf>
        --pcb->snd_queuelen;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009e3c:	3b01      	subs	r3, #1
 8009e3e:	b29a      	uxth	r2, r3
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e4a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8009e4c:	69fb      	ldr	r3, [r7, #28]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d111      	bne.n	8009e76 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e56:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8009e58:	69fb      	ldr	r3, [r7, #28]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d106      	bne.n	8009e6c <tcp_process+0x280>
 8009e5e:	4b0e      	ldr	r3, [pc, #56]	; (8009e98 <tcp_process+0x2ac>)
 8009e60:	f44f 725d 	mov.w	r2, #884	; 0x374
 8009e64:	4917      	ldr	r1, [pc, #92]	; (8009ec4 <tcp_process+0x2d8>)
 8009e66:	480e      	ldr	r0, [pc, #56]	; (8009ea0 <tcp_process+0x2b4>)
 8009e68:	f006 f93c 	bl	80100e4 <iprintf>
          pcb->unsent = rseg->next;
 8009e6c:	69fb      	ldr	r3, [r7, #28]
 8009e6e:	681a      	ldr	r2, [r3, #0]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	66da      	str	r2, [r3, #108]	; 0x6c
 8009e74:	e003      	b.n	8009e7e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8009e76:	69fb      	ldr	r3, [r7, #28]
 8009e78:	681a      	ldr	r2, [r3, #0]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8009e7e:	69f8      	ldr	r0, [r7, #28]
 8009e80:	f7fe fcaf 	bl	80087e2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d11d      	bne.n	8009ec8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009e92:	861a      	strh	r2, [r3, #48]	; 0x30
 8009e94:	e01f      	b.n	8009ed6 <tcp_process+0x2ea>
 8009e96:	bf00      	nop
 8009e98:	08012860 	.word	0x08012860
 8009e9c:	08012a98 	.word	0x08012a98
 8009ea0:	080128ac 	.word	0x080128ac
 8009ea4:	200000fc 	.word	0x200000fc
 8009ea8:	200000f4 	.word	0x200000f4
 8009eac:	200000f0 	.word	0x200000f0
 8009eb0:	08012ab4 	.word	0x08012ab4
 8009eb4:	200000fd 	.word	0x200000fd
 8009eb8:	200065f8 	.word	0x200065f8
 8009ebc:	200000e0 	.word	0x200000e0
 8009ec0:	08012ad4 	.word	0x08012ad4
 8009ec4:	08012aec 	.word	0x08012aec
        } else {
          pcb->rtime = 0;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d00a      	beq.n	8009ef6 <tcp_process+0x30a>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ee6:	687a      	ldr	r2, [r7, #4]
 8009ee8:	6910      	ldr	r0, [r2, #16]
 8009eea:	2200      	movs	r2, #0
 8009eec:	6879      	ldr	r1, [r7, #4]
 8009eee:	4798      	blx	r3
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	76bb      	strb	r3, [r7, #26]
 8009ef4:	e001      	b.n	8009efa <tcp_process+0x30e>
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8009efa:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009efe:	f113 0f0d 	cmn.w	r3, #13
 8009f02:	d102      	bne.n	8009f0a <tcp_process+0x31e>
          return ERR_ABRT;
 8009f04:	f06f 030c 	mvn.w	r3, #12
 8009f08:	e250      	b.n	800a3ac <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	8b5b      	ldrh	r3, [r3, #26]
 8009f0e:	f043 0302 	orr.w	r3, r3, #2
 8009f12:	b29a      	uxth	r2, r3
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8009f18:	e23a      	b.n	800a390 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8009f1a:	4b9d      	ldr	r3, [pc, #628]	; (800a190 <tcp_process+0x5a4>)
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	f003 0310 	and.w	r3, r3, #16
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	f000 8234 	beq.w	800a390 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009f28:	4b9a      	ldr	r3, [pc, #616]	; (800a194 <tcp_process+0x5a8>)
 8009f2a:	6819      	ldr	r1, [r3, #0]
 8009f2c:	4b9a      	ldr	r3, [pc, #616]	; (800a198 <tcp_process+0x5ac>)
 8009f2e:	881b      	ldrh	r3, [r3, #0]
 8009f30:	461a      	mov	r2, r3
 8009f32:	4b9a      	ldr	r3, [pc, #616]	; (800a19c <tcp_process+0x5b0>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009f38:	4b99      	ldr	r3, [pc, #612]	; (800a1a0 <tcp_process+0x5b4>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009f3c:	885b      	ldrh	r3, [r3, #2]
 8009f3e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009f40:	4a97      	ldr	r2, [pc, #604]	; (800a1a0 <tcp_process+0x5b4>)
 8009f42:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009f44:	8812      	ldrh	r2, [r2, #0]
 8009f46:	b292      	uxth	r2, r2
 8009f48:	9202      	str	r2, [sp, #8]
 8009f4a:	9301      	str	r3, [sp, #4]
 8009f4c:	4b95      	ldr	r3, [pc, #596]	; (800a1a4 <tcp_process+0x5b8>)
 8009f4e:	9300      	str	r3, [sp, #0]
 8009f50:	4b95      	ldr	r3, [pc, #596]	; (800a1a8 <tcp_process+0x5bc>)
 8009f52:	4602      	mov	r2, r0
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f003 f8db 	bl	800d110 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009f60:	2b05      	cmp	r3, #5
 8009f62:	f200 8215 	bhi.w	800a390 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f002 fea5 	bl	800ccbc <tcp_rexmit_rto>
      break;
 8009f72:	e20d      	b.n	800a390 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8009f74:	4b86      	ldr	r3, [pc, #536]	; (800a190 <tcp_process+0x5a4>)
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	f003 0310 	and.w	r3, r3, #16
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	f000 80a1 	beq.w	800a0c4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009f82:	4b84      	ldr	r3, [pc, #528]	; (800a194 <tcp_process+0x5a8>)
 8009f84:	681a      	ldr	r2, [r3, #0]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f8a:	1ad3      	subs	r3, r2, r3
 8009f8c:	3b01      	subs	r3, #1
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	db7e      	blt.n	800a090 <tcp_process+0x4a4>
 8009f92:	4b80      	ldr	r3, [pc, #512]	; (800a194 <tcp_process+0x5a8>)
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f9a:	1ad3      	subs	r3, r2, r3
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	dc77      	bgt.n	800a090 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2204      	movs	r2, #4
 8009fa4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d102      	bne.n	8009fb4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8009fae:	23fa      	movs	r3, #250	; 0xfa
 8009fb0:	76bb      	strb	r3, [r7, #26]
 8009fb2:	e01d      	b.n	8009ff0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fb8:	699b      	ldr	r3, [r3, #24]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d106      	bne.n	8009fcc <tcp_process+0x3e0>
 8009fbe:	4b7b      	ldr	r3, [pc, #492]	; (800a1ac <tcp_process+0x5c0>)
 8009fc0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8009fc4:	497a      	ldr	r1, [pc, #488]	; (800a1b0 <tcp_process+0x5c4>)
 8009fc6:	487b      	ldr	r0, [pc, #492]	; (800a1b4 <tcp_process+0x5c8>)
 8009fc8:	f006 f88c 	bl	80100e4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fd0:	699b      	ldr	r3, [r3, #24]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d00a      	beq.n	8009fec <tcp_process+0x400>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fda:	699b      	ldr	r3, [r3, #24]
 8009fdc:	687a      	ldr	r2, [r7, #4]
 8009fde:	6910      	ldr	r0, [r2, #16]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	6879      	ldr	r1, [r7, #4]
 8009fe4:	4798      	blx	r3
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	76bb      	strb	r3, [r7, #26]
 8009fea:	e001      	b.n	8009ff0 <tcp_process+0x404>
 8009fec:	23f0      	movs	r3, #240	; 0xf0
 8009fee:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8009ff0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d00a      	beq.n	800a00e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8009ff8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009ffc:	f113 0f0d 	cmn.w	r3, #13
 800a000:	d002      	beq.n	800a008 <tcp_process+0x41c>
              tcp_abort(pcb);
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f7fd fda4 	bl	8007b50 <tcp_abort>
            }
            return ERR_ABRT;
 800a008:	f06f 030c 	mvn.w	r3, #12
 800a00c:	e1ce      	b.n	800a3ac <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 fae0 	bl	800a5d4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800a014:	4b68      	ldr	r3, [pc, #416]	; (800a1b8 <tcp_process+0x5cc>)
 800a016:	881b      	ldrh	r3, [r3, #0]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d005      	beq.n	800a028 <tcp_process+0x43c>
            recv_acked--;
 800a01c:	4b66      	ldr	r3, [pc, #408]	; (800a1b8 <tcp_process+0x5cc>)
 800a01e:	881b      	ldrh	r3, [r3, #0]
 800a020:	3b01      	subs	r3, #1
 800a022:	b29a      	uxth	r2, r3
 800a024:	4b64      	ldr	r3, [pc, #400]	; (800a1b8 <tcp_process+0x5cc>)
 800a026:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a02c:	009a      	lsls	r2, r3, #2
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a032:	005b      	lsls	r3, r3, #1
 800a034:	f241 111c 	movw	r1, #4380	; 0x111c
 800a038:	428b      	cmp	r3, r1
 800a03a:	bf38      	it	cc
 800a03c:	460b      	movcc	r3, r1
 800a03e:	429a      	cmp	r2, r3
 800a040:	d204      	bcs.n	800a04c <tcp_process+0x460>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a046:	009b      	lsls	r3, r3, #2
 800a048:	b29b      	uxth	r3, r3
 800a04a:	e00d      	b.n	800a068 <tcp_process+0x47c>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a050:	005b      	lsls	r3, r3, #1
 800a052:	f241 121c 	movw	r2, #4380	; 0x111c
 800a056:	4293      	cmp	r3, r2
 800a058:	d904      	bls.n	800a064 <tcp_process+0x478>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a05e:	005b      	lsls	r3, r3, #1
 800a060:	b29b      	uxth	r3, r3
 800a062:	e001      	b.n	800a068 <tcp_process+0x47c>
 800a064:	f241 131c 	movw	r3, #4380	; 0x111c
 800a068:	687a      	ldr	r2, [r7, #4]
 800a06a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800a06e:	4b53      	ldr	r3, [pc, #332]	; (800a1bc <tcp_process+0x5d0>)
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	f003 0320 	and.w	r3, r3, #32
 800a076:	2b00      	cmp	r3, #0
 800a078:	d037      	beq.n	800a0ea <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	8b5b      	ldrh	r3, [r3, #26]
 800a07e:	f043 0302 	orr.w	r3, r3, #2
 800a082:	b29a      	uxth	r2, r3
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2207      	movs	r2, #7
 800a08c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800a08e:	e02c      	b.n	800a0ea <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a090:	4b40      	ldr	r3, [pc, #256]	; (800a194 <tcp_process+0x5a8>)
 800a092:	6819      	ldr	r1, [r3, #0]
 800a094:	4b40      	ldr	r3, [pc, #256]	; (800a198 <tcp_process+0x5ac>)
 800a096:	881b      	ldrh	r3, [r3, #0]
 800a098:	461a      	mov	r2, r3
 800a09a:	4b40      	ldr	r3, [pc, #256]	; (800a19c <tcp_process+0x5b0>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a0a0:	4b3f      	ldr	r3, [pc, #252]	; (800a1a0 <tcp_process+0x5b4>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a0a4:	885b      	ldrh	r3, [r3, #2]
 800a0a6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a0a8:	4a3d      	ldr	r2, [pc, #244]	; (800a1a0 <tcp_process+0x5b4>)
 800a0aa:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a0ac:	8812      	ldrh	r2, [r2, #0]
 800a0ae:	b292      	uxth	r2, r2
 800a0b0:	9202      	str	r2, [sp, #8]
 800a0b2:	9301      	str	r3, [sp, #4]
 800a0b4:	4b3b      	ldr	r3, [pc, #236]	; (800a1a4 <tcp_process+0x5b8>)
 800a0b6:	9300      	str	r3, [sp, #0]
 800a0b8:	4b3b      	ldr	r3, [pc, #236]	; (800a1a8 <tcp_process+0x5bc>)
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f003 f827 	bl	800d110 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800a0c2:	e167      	b.n	800a394 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800a0c4:	4b32      	ldr	r3, [pc, #200]	; (800a190 <tcp_process+0x5a4>)
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	f003 0302 	and.w	r3, r3, #2
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	f000 8161 	beq.w	800a394 <tcp_process+0x7a8>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d6:	1e5a      	subs	r2, r3, #1
 800a0d8:	4b30      	ldr	r3, [pc, #192]	; (800a19c <tcp_process+0x5b0>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	f040 8159 	bne.w	800a394 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f002 fe0c 	bl	800cd00 <tcp_rexmit>
      break;
 800a0e8:	e154      	b.n	800a394 <tcp_process+0x7a8>
 800a0ea:	e153      	b.n	800a394 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f000 fa71 	bl	800a5d4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800a0f2:	4b32      	ldr	r3, [pc, #200]	; (800a1bc <tcp_process+0x5d0>)
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	f003 0320 	and.w	r3, r3, #32
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	f000 814c 	beq.w	800a398 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	8b5b      	ldrh	r3, [r3, #26]
 800a104:	f043 0302 	orr.w	r3, r3, #2
 800a108:	b29a      	uxth	r2, r3
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2207      	movs	r2, #7
 800a112:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a114:	e140      	b.n	800a398 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 fa5c 	bl	800a5d4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a11c:	4b27      	ldr	r3, [pc, #156]	; (800a1bc <tcp_process+0x5d0>)
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	f003 0320 	and.w	r3, r3, #32
 800a124:	2b00      	cmp	r3, #0
 800a126:	d071      	beq.n	800a20c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a128:	4b19      	ldr	r3, [pc, #100]	; (800a190 <tcp_process+0x5a4>)
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	f003 0310 	and.w	r3, r3, #16
 800a130:	2b00      	cmp	r3, #0
 800a132:	d060      	beq.n	800a1f6 <tcp_process+0x60a>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a138:	4b16      	ldr	r3, [pc, #88]	; (800a194 <tcp_process+0x5a8>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	429a      	cmp	r2, r3
 800a13e:	d15a      	bne.n	800a1f6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a144:	2b00      	cmp	r3, #0
 800a146:	d156      	bne.n	800a1f6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	8b5b      	ldrh	r3, [r3, #26]
 800a14c:	f043 0302 	orr.w	r3, r3, #2
 800a150:	b29a      	uxth	r2, r3
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f7fe fdbe 	bl	8008cd8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800a15c:	4b18      	ldr	r3, [pc, #96]	; (800a1c0 <tcp_process+0x5d4>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	429a      	cmp	r2, r3
 800a164:	d105      	bne.n	800a172 <tcp_process+0x586>
 800a166:	4b16      	ldr	r3, [pc, #88]	; (800a1c0 <tcp_process+0x5d4>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	68db      	ldr	r3, [r3, #12]
 800a16c:	4a14      	ldr	r2, [pc, #80]	; (800a1c0 <tcp_process+0x5d4>)
 800a16e:	6013      	str	r3, [r2, #0]
 800a170:	e02e      	b.n	800a1d0 <tcp_process+0x5e4>
 800a172:	4b13      	ldr	r3, [pc, #76]	; (800a1c0 <tcp_process+0x5d4>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	617b      	str	r3, [r7, #20]
 800a178:	e027      	b.n	800a1ca <tcp_process+0x5de>
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	68db      	ldr	r3, [r3, #12]
 800a17e:	687a      	ldr	r2, [r7, #4]
 800a180:	429a      	cmp	r2, r3
 800a182:	d11f      	bne.n	800a1c4 <tcp_process+0x5d8>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	68da      	ldr	r2, [r3, #12]
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	60da      	str	r2, [r3, #12]
 800a18c:	e020      	b.n	800a1d0 <tcp_process+0x5e4>
 800a18e:	bf00      	nop
 800a190:	200000fc 	.word	0x200000fc
 800a194:	200000f4 	.word	0x200000f4
 800a198:	200000fa 	.word	0x200000fa
 800a19c:	200000f0 	.word	0x200000f0
 800a1a0:	200000e0 	.word	0x200000e0
 800a1a4:	20003500 	.word	0x20003500
 800a1a8:	20003504 	.word	0x20003504
 800a1ac:	08012860 	.word	0x08012860
 800a1b0:	08012b00 	.word	0x08012b00
 800a1b4:	080128ac 	.word	0x080128ac
 800a1b8:	200000f8 	.word	0x200000f8
 800a1bc:	200000fd 	.word	0x200000fd
 800a1c0:	200065f4 	.word	0x200065f4
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	68db      	ldr	r3, [r3, #12]
 800a1c8:	617b      	str	r3, [r7, #20]
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d1d4      	bne.n	800a17a <tcp_process+0x58e>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	60da      	str	r2, [r3, #12]
 800a1d6:	4b77      	ldr	r3, [pc, #476]	; (800a3b4 <tcp_process+0x7c8>)
 800a1d8:	2201      	movs	r2, #1
 800a1da:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	220a      	movs	r2, #10
 800a1e0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800a1e2:	4b75      	ldr	r3, [pc, #468]	; (800a3b8 <tcp_process+0x7cc>)
 800a1e4:	681a      	ldr	r2, [r3, #0]
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	60da      	str	r2, [r3, #12]
 800a1ea:	4a73      	ldr	r2, [pc, #460]	; (800a3b8 <tcp_process+0x7cc>)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6013      	str	r3, [r2, #0]
 800a1f0:	f003 f94e 	bl	800d490 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800a1f4:	e0d2      	b.n	800a39c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	8b5b      	ldrh	r3, [r3, #26]
 800a1fa:	f043 0302 	orr.w	r3, r3, #2
 800a1fe:	b29a      	uxth	r2, r3
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2208      	movs	r2, #8
 800a208:	751a      	strb	r2, [r3, #20]
      break;
 800a20a:	e0c7      	b.n	800a39c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a20c:	4b6b      	ldr	r3, [pc, #428]	; (800a3bc <tcp_process+0x7d0>)
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	f003 0310 	and.w	r3, r3, #16
 800a214:	2b00      	cmp	r3, #0
 800a216:	f000 80c1 	beq.w	800a39c <tcp_process+0x7b0>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a21e:	4b68      	ldr	r3, [pc, #416]	; (800a3c0 <tcp_process+0x7d4>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	429a      	cmp	r2, r3
 800a224:	f040 80ba 	bne.w	800a39c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	f040 80b5 	bne.w	800a39c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2206      	movs	r2, #6
 800a236:	751a      	strb	r2, [r3, #20]
      break;
 800a238:	e0b0      	b.n	800a39c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f000 f9ca 	bl	800a5d4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a240:	4b60      	ldr	r3, [pc, #384]	; (800a3c4 <tcp_process+0x7d8>)
 800a242:	781b      	ldrb	r3, [r3, #0]
 800a244:	f003 0320 	and.w	r3, r3, #32
 800a248:	2b00      	cmp	r3, #0
 800a24a:	f000 80a9 	beq.w	800a3a0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	8b5b      	ldrh	r3, [r3, #26]
 800a252:	f043 0302 	orr.w	r3, r3, #2
 800a256:	b29a      	uxth	r2, r3
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f7fe fd3b 	bl	8008cd8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a262:	4b59      	ldr	r3, [pc, #356]	; (800a3c8 <tcp_process+0x7dc>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	429a      	cmp	r2, r3
 800a26a:	d105      	bne.n	800a278 <tcp_process+0x68c>
 800a26c:	4b56      	ldr	r3, [pc, #344]	; (800a3c8 <tcp_process+0x7dc>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	68db      	ldr	r3, [r3, #12]
 800a272:	4a55      	ldr	r2, [pc, #340]	; (800a3c8 <tcp_process+0x7dc>)
 800a274:	6013      	str	r3, [r2, #0]
 800a276:	e013      	b.n	800a2a0 <tcp_process+0x6b4>
 800a278:	4b53      	ldr	r3, [pc, #332]	; (800a3c8 <tcp_process+0x7dc>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	613b      	str	r3, [r7, #16]
 800a27e:	e00c      	b.n	800a29a <tcp_process+0x6ae>
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	68db      	ldr	r3, [r3, #12]
 800a284:	687a      	ldr	r2, [r7, #4]
 800a286:	429a      	cmp	r2, r3
 800a288:	d104      	bne.n	800a294 <tcp_process+0x6a8>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	68da      	ldr	r2, [r3, #12]
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	60da      	str	r2, [r3, #12]
 800a292:	e005      	b.n	800a2a0 <tcp_process+0x6b4>
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	68db      	ldr	r3, [r3, #12]
 800a298:	613b      	str	r3, [r7, #16]
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d1ef      	bne.n	800a280 <tcp_process+0x694>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	60da      	str	r2, [r3, #12]
 800a2a6:	4b43      	ldr	r3, [pc, #268]	; (800a3b4 <tcp_process+0x7c8>)
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	220a      	movs	r2, #10
 800a2b0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a2b2:	4b41      	ldr	r3, [pc, #260]	; (800a3b8 <tcp_process+0x7cc>)
 800a2b4:	681a      	ldr	r2, [r3, #0]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	60da      	str	r2, [r3, #12]
 800a2ba:	4a3f      	ldr	r2, [pc, #252]	; (800a3b8 <tcp_process+0x7cc>)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6013      	str	r3, [r2, #0]
 800a2c0:	f003 f8e6 	bl	800d490 <tcp_timer_needed>
      }
      break;
 800a2c4:	e06c      	b.n	800a3a0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f000 f984 	bl	800a5d4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a2cc:	4b3b      	ldr	r3, [pc, #236]	; (800a3bc <tcp_process+0x7d0>)
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	f003 0310 	and.w	r3, r3, #16
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d065      	beq.n	800a3a4 <tcp_process+0x7b8>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a2dc:	4b38      	ldr	r3, [pc, #224]	; (800a3c0 <tcp_process+0x7d4>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d15f      	bne.n	800a3a4 <tcp_process+0x7b8>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d15b      	bne.n	800a3a4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f7fe fcf3 	bl	8008cd8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a2f2:	4b35      	ldr	r3, [pc, #212]	; (800a3c8 <tcp_process+0x7dc>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d105      	bne.n	800a308 <tcp_process+0x71c>
 800a2fc:	4b32      	ldr	r3, [pc, #200]	; (800a3c8 <tcp_process+0x7dc>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	68db      	ldr	r3, [r3, #12]
 800a302:	4a31      	ldr	r2, [pc, #196]	; (800a3c8 <tcp_process+0x7dc>)
 800a304:	6013      	str	r3, [r2, #0]
 800a306:	e013      	b.n	800a330 <tcp_process+0x744>
 800a308:	4b2f      	ldr	r3, [pc, #188]	; (800a3c8 <tcp_process+0x7dc>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	60fb      	str	r3, [r7, #12]
 800a30e:	e00c      	b.n	800a32a <tcp_process+0x73e>
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	68db      	ldr	r3, [r3, #12]
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	429a      	cmp	r2, r3
 800a318:	d104      	bne.n	800a324 <tcp_process+0x738>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	68da      	ldr	r2, [r3, #12]
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	60da      	str	r2, [r3, #12]
 800a322:	e005      	b.n	800a330 <tcp_process+0x744>
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	68db      	ldr	r3, [r3, #12]
 800a328:	60fb      	str	r3, [r7, #12]
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d1ef      	bne.n	800a310 <tcp_process+0x724>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2200      	movs	r2, #0
 800a334:	60da      	str	r2, [r3, #12]
 800a336:	4b1f      	ldr	r3, [pc, #124]	; (800a3b4 <tcp_process+0x7c8>)
 800a338:	2201      	movs	r2, #1
 800a33a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	220a      	movs	r2, #10
 800a340:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a342:	4b1d      	ldr	r3, [pc, #116]	; (800a3b8 <tcp_process+0x7cc>)
 800a344:	681a      	ldr	r2, [r3, #0]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	60da      	str	r2, [r3, #12]
 800a34a:	4a1b      	ldr	r2, [pc, #108]	; (800a3b8 <tcp_process+0x7cc>)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6013      	str	r3, [r2, #0]
 800a350:	f003 f89e 	bl	800d490 <tcp_timer_needed>
      }
      break;
 800a354:	e026      	b.n	800a3a4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f000 f93c 	bl	800a5d4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a35c:	4b17      	ldr	r3, [pc, #92]	; (800a3bc <tcp_process+0x7d0>)
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	f003 0310 	and.w	r3, r3, #16
 800a364:	2b00      	cmp	r3, #0
 800a366:	d01f      	beq.n	800a3a8 <tcp_process+0x7bc>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a36c:	4b14      	ldr	r3, [pc, #80]	; (800a3c0 <tcp_process+0x7d4>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	429a      	cmp	r2, r3
 800a372:	d119      	bne.n	800a3a8 <tcp_process+0x7bc>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d115      	bne.n	800a3a8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800a37c:	4b11      	ldr	r3, [pc, #68]	; (800a3c4 <tcp_process+0x7d8>)
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	f043 0310 	orr.w	r3, r3, #16
 800a384:	b2da      	uxtb	r2, r3
 800a386:	4b0f      	ldr	r3, [pc, #60]	; (800a3c4 <tcp_process+0x7d8>)
 800a388:	701a      	strb	r2, [r3, #0]
      }
      break;
 800a38a:	e00d      	b.n	800a3a8 <tcp_process+0x7bc>
    default:
      break;
 800a38c:	bf00      	nop
 800a38e:	e00c      	b.n	800a3aa <tcp_process+0x7be>
      break;
 800a390:	bf00      	nop
 800a392:	e00a      	b.n	800a3aa <tcp_process+0x7be>
      break;
 800a394:	bf00      	nop
 800a396:	e008      	b.n	800a3aa <tcp_process+0x7be>
      break;
 800a398:	bf00      	nop
 800a39a:	e006      	b.n	800a3aa <tcp_process+0x7be>
      break;
 800a39c:	bf00      	nop
 800a39e:	e004      	b.n	800a3aa <tcp_process+0x7be>
      break;
 800a3a0:	bf00      	nop
 800a3a2:	e002      	b.n	800a3aa <tcp_process+0x7be>
      break;
 800a3a4:	bf00      	nop
 800a3a6:	e000      	b.n	800a3aa <tcp_process+0x7be>
      break;
 800a3a8:	bf00      	nop
  }
  return ERR_OK;
 800a3aa:	2300      	movs	r3, #0
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3724      	adds	r7, #36	; 0x24
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd90      	pop	{r4, r7, pc}
 800a3b4:	200065f0 	.word	0x200065f0
 800a3b8:	20006604 	.word	0x20006604
 800a3bc:	200000fc 	.word	0x200000fc
 800a3c0:	200000f4 	.word	0x200000f4
 800a3c4:	200000fd 	.word	0x200000fd
 800a3c8:	200065f4 	.word	0x200065f4

0800a3cc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800a3cc:	b590      	push	{r4, r7, lr}
 800a3ce:	b085      	sub	sp, #20
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d106      	bne.n	800a3ea <tcp_oos_insert_segment+0x1e>
 800a3dc:	4b3b      	ldr	r3, [pc, #236]	; (800a4cc <tcp_oos_insert_segment+0x100>)
 800a3de:	f240 421f 	movw	r2, #1055	; 0x41f
 800a3e2:	493b      	ldr	r1, [pc, #236]	; (800a4d0 <tcp_oos_insert_segment+0x104>)
 800a3e4:	483b      	ldr	r0, [pc, #236]	; (800a4d4 <tcp_oos_insert_segment+0x108>)
 800a3e6:	f005 fe7d 	bl	80100e4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	68db      	ldr	r3, [r3, #12]
 800a3ee:	899b      	ldrh	r3, [r3, #12]
 800a3f0:	b29b      	uxth	r3, r3
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7fb fade 	bl	80059b4 <lwip_htons>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	b2db      	uxtb	r3, r3
 800a3fc:	f003 0301 	and.w	r3, r3, #1
 800a400:	2b00      	cmp	r3, #0
 800a402:	d028      	beq.n	800a456 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800a404:	6838      	ldr	r0, [r7, #0]
 800a406:	f7fe f9d7 	bl	80087b8 <tcp_segs_free>
    next = NULL;
 800a40a:	2300      	movs	r3, #0
 800a40c:	603b      	str	r3, [r7, #0]
 800a40e:	e056      	b.n	800a4be <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	68db      	ldr	r3, [r3, #12]
 800a414:	899b      	ldrh	r3, [r3, #12]
 800a416:	b29b      	uxth	r3, r3
 800a418:	4618      	mov	r0, r3
 800a41a:	f7fb facb 	bl	80059b4 <lwip_htons>
 800a41e:	4603      	mov	r3, r0
 800a420:	b2db      	uxtb	r3, r3
 800a422:	f003 0301 	and.w	r3, r3, #1
 800a426:	2b00      	cmp	r3, #0
 800a428:	d00d      	beq.n	800a446 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	68db      	ldr	r3, [r3, #12]
 800a42e:	899b      	ldrh	r3, [r3, #12]
 800a430:	b29c      	uxth	r4, r3
 800a432:	2001      	movs	r0, #1
 800a434:	f7fb fabe 	bl	80059b4 <lwip_htons>
 800a438:	4603      	mov	r3, r0
 800a43a:	461a      	mov	r2, r3
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	68db      	ldr	r3, [r3, #12]
 800a440:	4322      	orrs	r2, r4
 800a442:	b292      	uxth	r2, r2
 800a444:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800a450:	68f8      	ldr	r0, [r7, #12]
 800a452:	f7fe f9c6 	bl	80087e2 <tcp_seg_free>
    while (next &&
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d00e      	beq.n	800a47a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	891b      	ldrh	r3, [r3, #8]
 800a460:	461a      	mov	r2, r3
 800a462:	4b1d      	ldr	r3, [pc, #116]	; (800a4d8 <tcp_oos_insert_segment+0x10c>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	441a      	add	r2, r3
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	68db      	ldr	r3, [r3, #12]
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	6839      	ldr	r1, [r7, #0]
 800a470:	8909      	ldrh	r1, [r1, #8]
 800a472:	440b      	add	r3, r1
 800a474:	1ad3      	subs	r3, r2, r3
    while (next &&
 800a476:	2b00      	cmp	r3, #0
 800a478:	daca      	bge.n	800a410 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d01e      	beq.n	800a4be <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	891b      	ldrh	r3, [r3, #8]
 800a484:	461a      	mov	r2, r3
 800a486:	4b14      	ldr	r3, [pc, #80]	; (800a4d8 <tcp_oos_insert_segment+0x10c>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	441a      	add	r2, r3
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	68db      	ldr	r3, [r3, #12]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	1ad3      	subs	r3, r2, r3
    if (next &&
 800a494:	2b00      	cmp	r3, #0
 800a496:	dd12      	ble.n	800a4be <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	68db      	ldr	r3, [r3, #12]
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	b29a      	uxth	r2, r3
 800a4a0:	4b0d      	ldr	r3, [pc, #52]	; (800a4d8 <tcp_oos_insert_segment+0x10c>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	1ad3      	subs	r3, r2, r3
 800a4a8:	b29a      	uxth	r2, r3
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	685a      	ldr	r2, [r3, #4]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	891b      	ldrh	r3, [r3, #8]
 800a4b6:	4619      	mov	r1, r3
 800a4b8:	4610      	mov	r0, r2
 800a4ba:	f7fc fba9 	bl	8006c10 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	683a      	ldr	r2, [r7, #0]
 800a4c2:	601a      	str	r2, [r3, #0]
}
 800a4c4:	bf00      	nop
 800a4c6:	3714      	adds	r7, #20
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd90      	pop	{r4, r7, pc}
 800a4cc:	08012860 	.word	0x08012860
 800a4d0:	08012b20 	.word	0x08012b20
 800a4d4:	080128ac 	.word	0x080128ac
 800a4d8:	200000f0 	.word	0x200000f0

0800a4dc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800a4dc:	b5b0      	push	{r4, r5, r7, lr}
 800a4de:	b086      	sub	sp, #24
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	60f8      	str	r0, [r7, #12]
 800a4e4:	60b9      	str	r1, [r7, #8]
 800a4e6:	607a      	str	r2, [r7, #4]
 800a4e8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800a4ea:	e03e      	b.n	800a56a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	685b      	ldr	r3, [r3, #4]
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f7fc fd96 	bl	800702c <pbuf_clen>
 800a500:	4603      	mov	r3, r0
 800a502:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a50a:	8a7a      	ldrh	r2, [r7, #18]
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d906      	bls.n	800a51e <tcp_free_acked_segments+0x42>
 800a510:	4b2a      	ldr	r3, [pc, #168]	; (800a5bc <tcp_free_acked_segments+0xe0>)
 800a512:	f240 4257 	movw	r2, #1111	; 0x457
 800a516:	492a      	ldr	r1, [pc, #168]	; (800a5c0 <tcp_free_acked_segments+0xe4>)
 800a518:	482a      	ldr	r0, [pc, #168]	; (800a5c4 <tcp_free_acked_segments+0xe8>)
 800a51a:	f005 fde3 	bl	80100e4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800a524:	8a7b      	ldrh	r3, [r7, #18]
 800a526:	1ad3      	subs	r3, r2, r3
 800a528:	b29a      	uxth	r2, r3
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	891a      	ldrh	r2, [r3, #8]
 800a534:	4b24      	ldr	r3, [pc, #144]	; (800a5c8 <tcp_free_acked_segments+0xec>)
 800a536:	881b      	ldrh	r3, [r3, #0]
 800a538:	4413      	add	r3, r2
 800a53a:	b29a      	uxth	r2, r3
 800a53c:	4b22      	ldr	r3, [pc, #136]	; (800a5c8 <tcp_free_acked_segments+0xec>)
 800a53e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800a540:	6978      	ldr	r0, [r7, #20]
 800a542:	f7fe f94e 	bl	80087e2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d00c      	beq.n	800a56a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d109      	bne.n	800a56a <tcp_free_acked_segments+0x8e>
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d106      	bne.n	800a56a <tcp_free_acked_segments+0x8e>
 800a55c:	4b17      	ldr	r3, [pc, #92]	; (800a5bc <tcp_free_acked_segments+0xe0>)
 800a55e:	f240 4261 	movw	r2, #1121	; 0x461
 800a562:	491a      	ldr	r1, [pc, #104]	; (800a5cc <tcp_free_acked_segments+0xf0>)
 800a564:	4817      	ldr	r0, [pc, #92]	; (800a5c4 <tcp_free_acked_segments+0xe8>)
 800a566:	f005 fdbd 	bl	80100e4 <iprintf>
  while (seg_list != NULL &&
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d020      	beq.n	800a5b2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	68db      	ldr	r3, [r3, #12]
 800a574:	685b      	ldr	r3, [r3, #4]
 800a576:	4618      	mov	r0, r3
 800a578:	f7fb fa31 	bl	80059de <lwip_htonl>
 800a57c:	4604      	mov	r4, r0
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	891b      	ldrh	r3, [r3, #8]
 800a582:	461d      	mov	r5, r3
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	68db      	ldr	r3, [r3, #12]
 800a588:	899b      	ldrh	r3, [r3, #12]
 800a58a:	b29b      	uxth	r3, r3
 800a58c:	4618      	mov	r0, r3
 800a58e:	f7fb fa11 	bl	80059b4 <lwip_htons>
 800a592:	4603      	mov	r3, r0
 800a594:	b2db      	uxtb	r3, r3
 800a596:	f003 0303 	and.w	r3, r3, #3
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d001      	beq.n	800a5a2 <tcp_free_acked_segments+0xc6>
 800a59e:	2301      	movs	r3, #1
 800a5a0:	e000      	b.n	800a5a4 <tcp_free_acked_segments+0xc8>
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	442b      	add	r3, r5
 800a5a6:	18e2      	adds	r2, r4, r3
 800a5a8:	4b09      	ldr	r3, [pc, #36]	; (800a5d0 <tcp_free_acked_segments+0xf4>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	dd9c      	ble.n	800a4ec <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800a5b2:	68bb      	ldr	r3, [r7, #8]
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3718      	adds	r7, #24
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bdb0      	pop	{r4, r5, r7, pc}
 800a5bc:	08012860 	.word	0x08012860
 800a5c0:	08012b48 	.word	0x08012b48
 800a5c4:	080128ac 	.word	0x080128ac
 800a5c8:	200000f8 	.word	0x200000f8
 800a5cc:	08012b70 	.word	0x08012b70
 800a5d0:	200000f4 	.word	0x200000f4

0800a5d4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800a5d4:	b5b0      	push	{r4, r5, r7, lr}
 800a5d6:	b094      	sub	sp, #80	; 0x50
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d106      	bne.n	800a5f4 <tcp_receive+0x20>
 800a5e6:	4ba6      	ldr	r3, [pc, #664]	; (800a880 <tcp_receive+0x2ac>)
 800a5e8:	f240 427b 	movw	r2, #1147	; 0x47b
 800a5ec:	49a5      	ldr	r1, [pc, #660]	; (800a884 <tcp_receive+0x2b0>)
 800a5ee:	48a6      	ldr	r0, [pc, #664]	; (800a888 <tcp_receive+0x2b4>)
 800a5f0:	f005 fd78 	bl	80100e4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	7d1b      	ldrb	r3, [r3, #20]
 800a5f8:	2b03      	cmp	r3, #3
 800a5fa:	d806      	bhi.n	800a60a <tcp_receive+0x36>
 800a5fc:	4ba0      	ldr	r3, [pc, #640]	; (800a880 <tcp_receive+0x2ac>)
 800a5fe:	f240 427c 	movw	r2, #1148	; 0x47c
 800a602:	49a2      	ldr	r1, [pc, #648]	; (800a88c <tcp_receive+0x2b8>)
 800a604:	48a0      	ldr	r0, [pc, #640]	; (800a888 <tcp_receive+0x2b4>)
 800a606:	f005 fd6d 	bl	80100e4 <iprintf>

  if (flags & TCP_ACK) {
 800a60a:	4ba1      	ldr	r3, [pc, #644]	; (800a890 <tcp_receive+0x2bc>)
 800a60c:	781b      	ldrb	r3, [r3, #0]
 800a60e:	f003 0310 	and.w	r3, r3, #16
 800a612:	2b00      	cmp	r3, #0
 800a614:	f000 8263 	beq.w	800aade <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a61e:	461a      	mov	r2, r3
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a624:	4413      	add	r3, r2
 800a626:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a62c:	4b99      	ldr	r3, [pc, #612]	; (800a894 <tcp_receive+0x2c0>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	1ad3      	subs	r3, r2, r3
 800a632:	2b00      	cmp	r3, #0
 800a634:	db1b      	blt.n	800a66e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a63a:	4b96      	ldr	r3, [pc, #600]	; (800a894 <tcp_receive+0x2c0>)
 800a63c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a63e:	429a      	cmp	r2, r3
 800a640:	d106      	bne.n	800a650 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a646:	4b94      	ldr	r3, [pc, #592]	; (800a898 <tcp_receive+0x2c4>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	1ad3      	subs	r3, r2, r3
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	db0e      	blt.n	800a66e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a654:	4b90      	ldr	r3, [pc, #576]	; (800a898 <tcp_receive+0x2c4>)
 800a656:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a658:	429a      	cmp	r2, r3
 800a65a:	d125      	bne.n	800a6a8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a65c:	4b8f      	ldr	r3, [pc, #572]	; (800a89c <tcp_receive+0x2c8>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	89db      	ldrh	r3, [r3, #14]
 800a662:	b29a      	uxth	r2, r3
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d91c      	bls.n	800a6a8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a66e:	4b8b      	ldr	r3, [pc, #556]	; (800a89c <tcp_receive+0x2c8>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	89db      	ldrh	r3, [r3, #14]
 800a674:	b29a      	uxth	r2, r3
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a688:	429a      	cmp	r2, r3
 800a68a:	d205      	bcs.n	800a698 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800a698:	4b7e      	ldr	r3, [pc, #504]	; (800a894 <tcp_receive+0x2c0>)
 800a69a:	681a      	ldr	r2, [r3, #0]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800a6a0:	4b7d      	ldr	r3, [pc, #500]	; (800a898 <tcp_receive+0x2c4>)
 800a6a2:	681a      	ldr	r2, [r3, #0]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a6a8:	4b7b      	ldr	r3, [pc, #492]	; (800a898 <tcp_receive+0x2c4>)
 800a6aa:	681a      	ldr	r2, [r3, #0]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6b0:	1ad3      	subs	r3, r2, r3
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	dc58      	bgt.n	800a768 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800a6b6:	4b7a      	ldr	r3, [pc, #488]	; (800a8a0 <tcp_receive+0x2cc>)
 800a6b8:	881b      	ldrh	r3, [r3, #0]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d14b      	bne.n	800a756 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6c2:	687a      	ldr	r2, [r7, #4]
 800a6c4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800a6c8:	4413      	add	r3, r2
 800a6ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	d142      	bne.n	800a756 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	db3d      	blt.n	800a756 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a6de:	4b6e      	ldr	r3, [pc, #440]	; (800a898 <tcp_receive+0x2c4>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d137      	bne.n	800a756 <tcp_receive+0x182>
              found_dupack = 1;
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a6f0:	2bff      	cmp	r3, #255	; 0xff
 800a6f2:	d007      	beq.n	800a704 <tcp_receive+0x130>
                ++pcb->dupacks;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a6fa:	3301      	adds	r3, #1
 800a6fc:	b2da      	uxtb	r2, r3
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a70a:	2b03      	cmp	r3, #3
 800a70c:	d91b      	bls.n	800a746 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a718:	4413      	add	r3, r2
 800a71a:	b29a      	uxth	r2, r3
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a722:	429a      	cmp	r2, r3
 800a724:	d30a      	bcc.n	800a73c <tcp_receive+0x168>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a730:	4413      	add	r3, r2
 800a732:	b29a      	uxth	r2, r3
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a73a:	e004      	b.n	800a746 <tcp_receive+0x172>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a742:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a74c:	2b02      	cmp	r3, #2
 800a74e:	d902      	bls.n	800a756 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f002 fb41 	bl	800cdd8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800a756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a758:	2b00      	cmp	r3, #0
 800a75a:	f040 8160 	bne.w	800aa1e <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2200      	movs	r2, #0
 800a762:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a766:	e15a      	b.n	800aa1e <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a768:	4b4b      	ldr	r3, [pc, #300]	; (800a898 <tcp_receive+0x2c4>)
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a770:	1ad3      	subs	r3, r2, r3
 800a772:	3b01      	subs	r3, #1
 800a774:	2b00      	cmp	r3, #0
 800a776:	f2c0 814d 	blt.w	800aa14 <tcp_receive+0x440>
 800a77a:	4b47      	ldr	r3, [pc, #284]	; (800a898 <tcp_receive+0x2c4>)
 800a77c:	681a      	ldr	r2, [r3, #0]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a782:	1ad3      	subs	r3, r2, r3
 800a784:	2b00      	cmp	r3, #0
 800a786:	f300 8145 	bgt.w	800aa14 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	8b5b      	ldrh	r3, [r3, #26]
 800a78e:	f003 0304 	and.w	r3, r3, #4
 800a792:	2b00      	cmp	r3, #0
 800a794:	d010      	beq.n	800a7b8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	8b5b      	ldrh	r3, [r3, #26]
 800a79a:	f023 0304 	bic.w	r3, r3, #4
 800a79e:	b29a      	uxth	r2, r3
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a7c6:	10db      	asrs	r3, r3, #3
 800a7c8:	b21b      	sxth	r3, r3
 800a7ca:	b29a      	uxth	r2, r3
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a7d2:	b29b      	uxth	r3, r3
 800a7d4:	4413      	add	r3, r2
 800a7d6:	b29b      	uxth	r3, r3
 800a7d8:	b21a      	sxth	r2, r3
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800a7e0:	4b2d      	ldr	r3, [pc, #180]	; (800a898 <tcp_receive+0x2c4>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	b29a      	uxth	r2, r3
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	1ad3      	subs	r3, r2, r3
 800a7ee:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800a7f8:	4b27      	ldr	r3, [pc, #156]	; (800a898 <tcp_receive+0x2c4>)
 800a7fa:	681a      	ldr	r2, [r3, #0]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	7d1b      	ldrb	r3, [r3, #20]
 800a804:	2b03      	cmp	r3, #3
 800a806:	f240 8096 	bls.w	800a936 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a816:	429a      	cmp	r2, r3
 800a818:	d244      	bcs.n	800a8a4 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	8b5b      	ldrh	r3, [r3, #26]
 800a81e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a822:	2b00      	cmp	r3, #0
 800a824:	d001      	beq.n	800a82a <tcp_receive+0x256>
 800a826:	2301      	movs	r3, #1
 800a828:	e000      	b.n	800a82c <tcp_receive+0x258>
 800a82a:	2302      	movs	r3, #2
 800a82c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a830:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a834:	b29a      	uxth	r2, r3
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a83a:	fb12 f303 	smulbb	r3, r2, r3
 800a83e:	b29b      	uxth	r3, r3
 800a840:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a842:	4293      	cmp	r3, r2
 800a844:	bf28      	it	cs
 800a846:	4613      	movcs	r3, r2
 800a848:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a850:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a852:	4413      	add	r3, r2
 800a854:	b29a      	uxth	r2, r3
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d309      	bcc.n	800a874 <tcp_receive+0x2a0>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a866:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a868:	4413      	add	r3, r2
 800a86a:	b29a      	uxth	r2, r3
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a872:	e060      	b.n	800a936 <tcp_receive+0x362>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a87a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a87e:	e05a      	b.n	800a936 <tcp_receive+0x362>
 800a880:	08012860 	.word	0x08012860
 800a884:	08012b90 	.word	0x08012b90
 800a888:	080128ac 	.word	0x080128ac
 800a88c:	08012bac 	.word	0x08012bac
 800a890:	200000fc 	.word	0x200000fc
 800a894:	200000f0 	.word	0x200000f0
 800a898:	200000f4 	.word	0x200000f4
 800a89c:	200000e0 	.word	0x200000e0
 800a8a0:	200000fa 	.word	0x200000fa
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a8aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a8ac:	4413      	add	r3, r2
 800a8ae:	b29a      	uxth	r2, r3
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d309      	bcc.n	800a8ce <tcp_receive+0x2fa>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a8c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a8c2:	4413      	add	r3, r2
 800a8c4:	b29a      	uxth	r2, r3
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a8cc:	e004      	b.n	800a8d8 <tcp_receive+0x304>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a8d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d326      	bcc.n	800a936 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a8f4:	1ad3      	subs	r3, r2, r3
 800a8f6:	b29a      	uxth	r2, r3
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a908:	4413      	add	r3, r2
 800a90a:	b29a      	uxth	r2, r3
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a912:	429a      	cmp	r2, r3
 800a914:	d30a      	bcc.n	800a92c <tcp_receive+0x358>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a920:	4413      	add	r3, r2
 800a922:	b29a      	uxth	r2, r3
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a92a:	e004      	b.n	800a936 <tcp_receive+0x362>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a932:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a93e:	4a98      	ldr	r2, [pc, #608]	; (800aba0 <tcp_receive+0x5cc>)
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f7ff fdcb 	bl	800a4dc <tcp_free_acked_segments>
 800a946:	4602      	mov	r2, r0
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a954:	4a93      	ldr	r2, [pc, #588]	; (800aba4 <tcp_receive+0x5d0>)
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f7ff fdc0 	bl	800a4dc <tcp_free_acked_segments>
 800a95c:	4602      	mov	r2, r0
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a966:	2b00      	cmp	r3, #0
 800a968:	d104      	bne.n	800a974 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a970:	861a      	strh	r2, [r3, #48]	; 0x30
 800a972:	e002      	b.n	800a97a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2200      	movs	r2, #0
 800a978:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2200      	movs	r2, #0
 800a97e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a984:	2b00      	cmp	r3, #0
 800a986:	d103      	bne.n	800a990 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2200      	movs	r2, #0
 800a98c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800a996:	4b84      	ldr	r3, [pc, #528]	; (800aba8 <tcp_receive+0x5d4>)
 800a998:	881b      	ldrh	r3, [r3, #0]
 800a99a:	4413      	add	r3, r2
 800a99c:	b29a      	uxth	r2, r3
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	8b5b      	ldrh	r3, [r3, #26]
 800a9a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d035      	beq.n	800aa1c <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d118      	bne.n	800a9ea <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d00c      	beq.n	800a9da <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9c8:	68db      	ldr	r3, [r3, #12]
 800a9ca:	685b      	ldr	r3, [r3, #4]
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f7fb f806 	bl	80059de <lwip_htonl>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	dc20      	bgt.n	800aa1c <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	8b5b      	ldrh	r3, [r3, #26]
 800a9de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a9e2:	b29a      	uxth	r2, r3
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a9e8:	e018      	b.n	800aa1c <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9f2:	68db      	ldr	r3, [r3, #12]
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f7fa fff1 	bl	80059de <lwip_htonl>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	1ae3      	subs	r3, r4, r3
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	dc0b      	bgt.n	800aa1c <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	8b5b      	ldrh	r3, [r3, #26]
 800aa08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aa0c:	b29a      	uxth	r2, r3
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800aa12:	e003      	b.n	800aa1c <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f002 fbcb 	bl	800d1b0 <tcp_send_empty_ack>
 800aa1a:	e000      	b.n	800aa1e <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800aa1c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d05b      	beq.n	800aade <tcp_receive+0x50a>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa2a:	4b60      	ldr	r3, [pc, #384]	; (800abac <tcp_receive+0x5d8>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	1ad3      	subs	r3, r2, r3
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	da54      	bge.n	800aade <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800aa34:	4b5e      	ldr	r3, [pc, #376]	; (800abb0 <tcp_receive+0x5dc>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	b29a      	uxth	r2, r3
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa3e:	b29b      	uxth	r3, r3
 800aa40:	1ad3      	subs	r3, r2, r3
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800aa48:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800aa52:	10db      	asrs	r3, r3, #3
 800aa54:	b21b      	sxth	r3, r3
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	1ad3      	subs	r3, r2, r3
 800aa5a:	b29b      	uxth	r3, r3
 800aa5c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800aa66:	b29a      	uxth	r2, r3
 800aa68:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800aa6c:	4413      	add	r3, r2
 800aa6e:	b29b      	uxth	r3, r3
 800aa70:	b21a      	sxth	r2, r3
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800aa76:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	da05      	bge.n	800aa8a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800aa7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800aa82:	425b      	negs	r3, r3
 800aa84:	b29b      	uxth	r3, r3
 800aa86:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800aa8a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800aa94:	109b      	asrs	r3, r3, #2
 800aa96:	b21b      	sxth	r3, r3
 800aa98:	b29b      	uxth	r3, r3
 800aa9a:	1ad3      	subs	r3, r2, r3
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800aaa8:	b29a      	uxth	r2, r3
 800aaaa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800aaae:	4413      	add	r3, r2
 800aab0:	b29b      	uxth	r3, r3
 800aab2:	b21a      	sxth	r2, r3
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800aabe:	10db      	asrs	r3, r3, #3
 800aac0:	b21b      	sxth	r3, r3
 800aac2:	b29a      	uxth	r2, r3
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800aaca:	b29b      	uxth	r3, r3
 800aacc:	4413      	add	r3, r2
 800aace:	b29b      	uxth	r3, r3
 800aad0:	b21a      	sxth	r2, r3
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2200      	movs	r2, #0
 800aadc:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800aade:	4b35      	ldr	r3, [pc, #212]	; (800abb4 <tcp_receive+0x5e0>)
 800aae0:	881b      	ldrh	r3, [r3, #0]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	f000 84e1 	beq.w	800b4aa <tcp_receive+0xed6>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	7d1b      	ldrb	r3, [r3, #20]
 800aaec:	2b06      	cmp	r3, #6
 800aaee:	f200 84dc 	bhi.w	800b4aa <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aaf6:	4b30      	ldr	r3, [pc, #192]	; (800abb8 <tcp_receive+0x5e4>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	1ad3      	subs	r3, r2, r3
 800aafc:	3b01      	subs	r3, #1
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	f2c0 808e 	blt.w	800ac20 <tcp_receive+0x64c>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab08:	4b2a      	ldr	r3, [pc, #168]	; (800abb4 <tcp_receive+0x5e0>)
 800ab0a:	881b      	ldrh	r3, [r3, #0]
 800ab0c:	4619      	mov	r1, r3
 800ab0e:	4b2a      	ldr	r3, [pc, #168]	; (800abb8 <tcp_receive+0x5e4>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	440b      	add	r3, r1
 800ab14:	1ad3      	subs	r3, r2, r3
 800ab16:	3301      	adds	r3, #1
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	f300 8081 	bgt.w	800ac20 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800ab1e:	4b27      	ldr	r3, [pc, #156]	; (800abbc <tcp_receive+0x5e8>)
 800ab20:	685b      	ldr	r3, [r3, #4]
 800ab22:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab28:	4b23      	ldr	r3, [pc, #140]	; (800abb8 <tcp_receive+0x5e4>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	1ad3      	subs	r3, r2, r3
 800ab2e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800ab30:	4b22      	ldr	r3, [pc, #136]	; (800abbc <tcp_receive+0x5e8>)
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d106      	bne.n	800ab46 <tcp_receive+0x572>
 800ab38:	4b21      	ldr	r3, [pc, #132]	; (800abc0 <tcp_receive+0x5ec>)
 800ab3a:	f240 5294 	movw	r2, #1428	; 0x594
 800ab3e:	4921      	ldr	r1, [pc, #132]	; (800abc4 <tcp_receive+0x5f0>)
 800ab40:	4821      	ldr	r0, [pc, #132]	; (800abc8 <tcp_receive+0x5f4>)
 800ab42:	f005 facf 	bl	80100e4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800ab46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab48:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d906      	bls.n	800ab5e <tcp_receive+0x58a>
 800ab50:	4b1b      	ldr	r3, [pc, #108]	; (800abc0 <tcp_receive+0x5ec>)
 800ab52:	f240 5295 	movw	r2, #1429	; 0x595
 800ab56:	491d      	ldr	r1, [pc, #116]	; (800abcc <tcp_receive+0x5f8>)
 800ab58:	481b      	ldr	r0, [pc, #108]	; (800abc8 <tcp_receive+0x5f4>)
 800ab5a:	f005 fac3 	bl	80100e4 <iprintf>
      off = (u16_t)off32;
 800ab5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab60:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800ab64:	4b15      	ldr	r3, [pc, #84]	; (800abbc <tcp_receive+0x5e8>)
 800ab66:	685b      	ldr	r3, [r3, #4]
 800ab68:	891b      	ldrh	r3, [r3, #8]
 800ab6a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	d906      	bls.n	800ab80 <tcp_receive+0x5ac>
 800ab72:	4b13      	ldr	r3, [pc, #76]	; (800abc0 <tcp_receive+0x5ec>)
 800ab74:	f240 5297 	movw	r2, #1431	; 0x597
 800ab78:	4915      	ldr	r1, [pc, #84]	; (800abd0 <tcp_receive+0x5fc>)
 800ab7a:	4813      	ldr	r0, [pc, #76]	; (800abc8 <tcp_receive+0x5f4>)
 800ab7c:	f005 fab2 	bl	80100e4 <iprintf>
      inseg.len -= off;
 800ab80:	4b0e      	ldr	r3, [pc, #56]	; (800abbc <tcp_receive+0x5e8>)
 800ab82:	891a      	ldrh	r2, [r3, #8]
 800ab84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ab88:	1ad3      	subs	r3, r2, r3
 800ab8a:	b29a      	uxth	r2, r3
 800ab8c:	4b0b      	ldr	r3, [pc, #44]	; (800abbc <tcp_receive+0x5e8>)
 800ab8e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800ab90:	4b0a      	ldr	r3, [pc, #40]	; (800abbc <tcp_receive+0x5e8>)
 800ab92:	685b      	ldr	r3, [r3, #4]
 800ab94:	891a      	ldrh	r2, [r3, #8]
 800ab96:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ab9a:	1ad3      	subs	r3, r2, r3
 800ab9c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800ab9e:	e029      	b.n	800abf4 <tcp_receive+0x620>
 800aba0:	08012bc8 	.word	0x08012bc8
 800aba4:	08012bd0 	.word	0x08012bd0
 800aba8:	200000f8 	.word	0x200000f8
 800abac:	200000f4 	.word	0x200000f4
 800abb0:	200065f8 	.word	0x200065f8
 800abb4:	200000fa 	.word	0x200000fa
 800abb8:	200000f0 	.word	0x200000f0
 800abbc:	200000d0 	.word	0x200000d0
 800abc0:	08012860 	.word	0x08012860
 800abc4:	08012bd8 	.word	0x08012bd8
 800abc8:	080128ac 	.word	0x080128ac
 800abcc:	08012be8 	.word	0x08012be8
 800abd0:	08012bf8 	.word	0x08012bf8
        off -= p->len;
 800abd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abd6:	895b      	ldrh	r3, [r3, #10]
 800abd8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800abdc:	1ad3      	subs	r3, r2, r3
 800abde:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800abe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abe4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800abe6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800abe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abea:	2200      	movs	r2, #0
 800abec:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800abee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800abf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abf6:	895b      	ldrh	r3, [r3, #10]
 800abf8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800abfc:	429a      	cmp	r2, r3
 800abfe:	d8e9      	bhi.n	800abd4 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800ac00:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ac04:	4619      	mov	r1, r3
 800ac06:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ac08:	f7fc f902 	bl	8006e10 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac10:	4a91      	ldr	r2, [pc, #580]	; (800ae58 <tcp_receive+0x884>)
 800ac12:	6013      	str	r3, [r2, #0]
 800ac14:	4b91      	ldr	r3, [pc, #580]	; (800ae5c <tcp_receive+0x888>)
 800ac16:	68db      	ldr	r3, [r3, #12]
 800ac18:	4a8f      	ldr	r2, [pc, #572]	; (800ae58 <tcp_receive+0x884>)
 800ac1a:	6812      	ldr	r2, [r2, #0]
 800ac1c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ac1e:	e00d      	b.n	800ac3c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800ac20:	4b8d      	ldr	r3, [pc, #564]	; (800ae58 <tcp_receive+0x884>)
 800ac22:	681a      	ldr	r2, [r3, #0]
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac28:	1ad3      	subs	r3, r2, r3
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	da06      	bge.n	800ac3c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	8b5b      	ldrh	r3, [r3, #26]
 800ac32:	f043 0302 	orr.w	r3, r3, #2
 800ac36:	b29a      	uxth	r2, r3
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ac3c:	4b86      	ldr	r3, [pc, #536]	; (800ae58 <tcp_receive+0x884>)
 800ac3e:	681a      	ldr	r2, [r3, #0]
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac44:	1ad3      	subs	r3, r2, r3
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	f2c0 842a 	blt.w	800b4a0 <tcp_receive+0xecc>
 800ac4c:	4b82      	ldr	r3, [pc, #520]	; (800ae58 <tcp_receive+0x884>)
 800ac4e:	681a      	ldr	r2, [r3, #0]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac54:	6879      	ldr	r1, [r7, #4]
 800ac56:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ac58:	440b      	add	r3, r1
 800ac5a:	1ad3      	subs	r3, r2, r3
 800ac5c:	3301      	adds	r3, #1
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	f300 841e 	bgt.w	800b4a0 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac68:	4b7b      	ldr	r3, [pc, #492]	; (800ae58 <tcp_receive+0x884>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	f040 829a 	bne.w	800b1a6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800ac72:	4b7a      	ldr	r3, [pc, #488]	; (800ae5c <tcp_receive+0x888>)
 800ac74:	891c      	ldrh	r4, [r3, #8]
 800ac76:	4b79      	ldr	r3, [pc, #484]	; (800ae5c <tcp_receive+0x888>)
 800ac78:	68db      	ldr	r3, [r3, #12]
 800ac7a:	899b      	ldrh	r3, [r3, #12]
 800ac7c:	b29b      	uxth	r3, r3
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f7fa fe98 	bl	80059b4 <lwip_htons>
 800ac84:	4603      	mov	r3, r0
 800ac86:	b2db      	uxtb	r3, r3
 800ac88:	f003 0303 	and.w	r3, r3, #3
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d001      	beq.n	800ac94 <tcp_receive+0x6c0>
 800ac90:	2301      	movs	r3, #1
 800ac92:	e000      	b.n	800ac96 <tcp_receive+0x6c2>
 800ac94:	2300      	movs	r3, #0
 800ac96:	4423      	add	r3, r4
 800ac98:	b29a      	uxth	r2, r3
 800ac9a:	4b71      	ldr	r3, [pc, #452]	; (800ae60 <tcp_receive+0x88c>)
 800ac9c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800aca2:	4b6f      	ldr	r3, [pc, #444]	; (800ae60 <tcp_receive+0x88c>)
 800aca4:	881b      	ldrh	r3, [r3, #0]
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d275      	bcs.n	800ad96 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800acaa:	4b6c      	ldr	r3, [pc, #432]	; (800ae5c <tcp_receive+0x888>)
 800acac:	68db      	ldr	r3, [r3, #12]
 800acae:	899b      	ldrh	r3, [r3, #12]
 800acb0:	b29b      	uxth	r3, r3
 800acb2:	4618      	mov	r0, r3
 800acb4:	f7fa fe7e 	bl	80059b4 <lwip_htons>
 800acb8:	4603      	mov	r3, r0
 800acba:	b2db      	uxtb	r3, r3
 800acbc:	f003 0301 	and.w	r3, r3, #1
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d01f      	beq.n	800ad04 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800acc4:	4b65      	ldr	r3, [pc, #404]	; (800ae5c <tcp_receive+0x888>)
 800acc6:	68db      	ldr	r3, [r3, #12]
 800acc8:	899b      	ldrh	r3, [r3, #12]
 800acca:	b29b      	uxth	r3, r3
 800accc:	b21b      	sxth	r3, r3
 800acce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800acd2:	b21c      	sxth	r4, r3
 800acd4:	4b61      	ldr	r3, [pc, #388]	; (800ae5c <tcp_receive+0x888>)
 800acd6:	68db      	ldr	r3, [r3, #12]
 800acd8:	899b      	ldrh	r3, [r3, #12]
 800acda:	b29b      	uxth	r3, r3
 800acdc:	4618      	mov	r0, r3
 800acde:	f7fa fe69 	bl	80059b4 <lwip_htons>
 800ace2:	4603      	mov	r3, r0
 800ace4:	b2db      	uxtb	r3, r3
 800ace6:	b29b      	uxth	r3, r3
 800ace8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800acec:	b29b      	uxth	r3, r3
 800acee:	4618      	mov	r0, r3
 800acf0:	f7fa fe60 	bl	80059b4 <lwip_htons>
 800acf4:	4603      	mov	r3, r0
 800acf6:	b21b      	sxth	r3, r3
 800acf8:	4323      	orrs	r3, r4
 800acfa:	b21a      	sxth	r2, r3
 800acfc:	4b57      	ldr	r3, [pc, #348]	; (800ae5c <tcp_receive+0x888>)
 800acfe:	68db      	ldr	r3, [r3, #12]
 800ad00:	b292      	uxth	r2, r2
 800ad02:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ad08:	4b54      	ldr	r3, [pc, #336]	; (800ae5c <tcp_receive+0x888>)
 800ad0a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ad0c:	4b53      	ldr	r3, [pc, #332]	; (800ae5c <tcp_receive+0x888>)
 800ad0e:	68db      	ldr	r3, [r3, #12]
 800ad10:	899b      	ldrh	r3, [r3, #12]
 800ad12:	b29b      	uxth	r3, r3
 800ad14:	4618      	mov	r0, r3
 800ad16:	f7fa fe4d 	bl	80059b4 <lwip_htons>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	b2db      	uxtb	r3, r3
 800ad1e:	f003 0302 	and.w	r3, r3, #2
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d005      	beq.n	800ad32 <tcp_receive+0x75e>
            inseg.len -= 1;
 800ad26:	4b4d      	ldr	r3, [pc, #308]	; (800ae5c <tcp_receive+0x888>)
 800ad28:	891b      	ldrh	r3, [r3, #8]
 800ad2a:	3b01      	subs	r3, #1
 800ad2c:	b29a      	uxth	r2, r3
 800ad2e:	4b4b      	ldr	r3, [pc, #300]	; (800ae5c <tcp_receive+0x888>)
 800ad30:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800ad32:	4b4a      	ldr	r3, [pc, #296]	; (800ae5c <tcp_receive+0x888>)
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	4a49      	ldr	r2, [pc, #292]	; (800ae5c <tcp_receive+0x888>)
 800ad38:	8912      	ldrh	r2, [r2, #8]
 800ad3a:	4611      	mov	r1, r2
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f7fb ff67 	bl	8006c10 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800ad42:	4b46      	ldr	r3, [pc, #280]	; (800ae5c <tcp_receive+0x888>)
 800ad44:	891c      	ldrh	r4, [r3, #8]
 800ad46:	4b45      	ldr	r3, [pc, #276]	; (800ae5c <tcp_receive+0x888>)
 800ad48:	68db      	ldr	r3, [r3, #12]
 800ad4a:	899b      	ldrh	r3, [r3, #12]
 800ad4c:	b29b      	uxth	r3, r3
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f7fa fe30 	bl	80059b4 <lwip_htons>
 800ad54:	4603      	mov	r3, r0
 800ad56:	b2db      	uxtb	r3, r3
 800ad58:	f003 0303 	and.w	r3, r3, #3
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d001      	beq.n	800ad64 <tcp_receive+0x790>
 800ad60:	2301      	movs	r3, #1
 800ad62:	e000      	b.n	800ad66 <tcp_receive+0x792>
 800ad64:	2300      	movs	r3, #0
 800ad66:	4423      	add	r3, r4
 800ad68:	b29a      	uxth	r2, r3
 800ad6a:	4b3d      	ldr	r3, [pc, #244]	; (800ae60 <tcp_receive+0x88c>)
 800ad6c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ad6e:	4b3c      	ldr	r3, [pc, #240]	; (800ae60 <tcp_receive+0x88c>)
 800ad70:	881b      	ldrh	r3, [r3, #0]
 800ad72:	461a      	mov	r2, r3
 800ad74:	4b38      	ldr	r3, [pc, #224]	; (800ae58 <tcp_receive+0x884>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	441a      	add	r2, r3
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad7e:	6879      	ldr	r1, [r7, #4]
 800ad80:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ad82:	440b      	add	r3, r1
 800ad84:	429a      	cmp	r2, r3
 800ad86:	d006      	beq.n	800ad96 <tcp_receive+0x7c2>
 800ad88:	4b36      	ldr	r3, [pc, #216]	; (800ae64 <tcp_receive+0x890>)
 800ad8a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800ad8e:	4936      	ldr	r1, [pc, #216]	; (800ae68 <tcp_receive+0x894>)
 800ad90:	4836      	ldr	r0, [pc, #216]	; (800ae6c <tcp_receive+0x898>)
 800ad92:	f005 f9a7 	bl	80100e4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	f000 80e7 	beq.w	800af6e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ada0:	4b2e      	ldr	r3, [pc, #184]	; (800ae5c <tcp_receive+0x888>)
 800ada2:	68db      	ldr	r3, [r3, #12]
 800ada4:	899b      	ldrh	r3, [r3, #12]
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	4618      	mov	r0, r3
 800adaa:	f7fa fe03 	bl	80059b4 <lwip_htons>
 800adae:	4603      	mov	r3, r0
 800adb0:	b2db      	uxtb	r3, r3
 800adb2:	f003 0301 	and.w	r3, r3, #1
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d010      	beq.n	800addc <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800adba:	e00a      	b.n	800add2 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adc0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adc6:	681a      	ldr	r2, [r3, #0]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800adcc:	68f8      	ldr	r0, [r7, #12]
 800adce:	f7fd fd08 	bl	80087e2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800add6:	2b00      	cmp	r3, #0
 800add8:	d1f0      	bne.n	800adbc <tcp_receive+0x7e8>
 800adda:	e0c8      	b.n	800af6e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ade0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800ade2:	e052      	b.n	800ae8a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ade4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ade6:	68db      	ldr	r3, [r3, #12]
 800ade8:	899b      	ldrh	r3, [r3, #12]
 800adea:	b29b      	uxth	r3, r3
 800adec:	4618      	mov	r0, r3
 800adee:	f7fa fde1 	bl	80059b4 <lwip_htons>
 800adf2:	4603      	mov	r3, r0
 800adf4:	b2db      	uxtb	r3, r3
 800adf6:	f003 0301 	and.w	r3, r3, #1
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d03d      	beq.n	800ae7a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800adfe:	4b17      	ldr	r3, [pc, #92]	; (800ae5c <tcp_receive+0x888>)
 800ae00:	68db      	ldr	r3, [r3, #12]
 800ae02:	899b      	ldrh	r3, [r3, #12]
 800ae04:	b29b      	uxth	r3, r3
 800ae06:	4618      	mov	r0, r3
 800ae08:	f7fa fdd4 	bl	80059b4 <lwip_htons>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	b2db      	uxtb	r3, r3
 800ae10:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d130      	bne.n	800ae7a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800ae18:	4b10      	ldr	r3, [pc, #64]	; (800ae5c <tcp_receive+0x888>)
 800ae1a:	68db      	ldr	r3, [r3, #12]
 800ae1c:	899b      	ldrh	r3, [r3, #12]
 800ae1e:	b29c      	uxth	r4, r3
 800ae20:	2001      	movs	r0, #1
 800ae22:	f7fa fdc7 	bl	80059b4 <lwip_htons>
 800ae26:	4603      	mov	r3, r0
 800ae28:	461a      	mov	r2, r3
 800ae2a:	4b0c      	ldr	r3, [pc, #48]	; (800ae5c <tcp_receive+0x888>)
 800ae2c:	68db      	ldr	r3, [r3, #12]
 800ae2e:	4322      	orrs	r2, r4
 800ae30:	b292      	uxth	r2, r2
 800ae32:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800ae34:	4b09      	ldr	r3, [pc, #36]	; (800ae5c <tcp_receive+0x888>)
 800ae36:	891c      	ldrh	r4, [r3, #8]
 800ae38:	4b08      	ldr	r3, [pc, #32]	; (800ae5c <tcp_receive+0x888>)
 800ae3a:	68db      	ldr	r3, [r3, #12]
 800ae3c:	899b      	ldrh	r3, [r3, #12]
 800ae3e:	b29b      	uxth	r3, r3
 800ae40:	4618      	mov	r0, r3
 800ae42:	f7fa fdb7 	bl	80059b4 <lwip_htons>
 800ae46:	4603      	mov	r3, r0
 800ae48:	b2db      	uxtb	r3, r3
 800ae4a:	f003 0303 	and.w	r3, r3, #3
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d00e      	beq.n	800ae70 <tcp_receive+0x89c>
 800ae52:	2301      	movs	r3, #1
 800ae54:	e00d      	b.n	800ae72 <tcp_receive+0x89e>
 800ae56:	bf00      	nop
 800ae58:	200000f0 	.word	0x200000f0
 800ae5c:	200000d0 	.word	0x200000d0
 800ae60:	200000fa 	.word	0x200000fa
 800ae64:	08012860 	.word	0x08012860
 800ae68:	08012c08 	.word	0x08012c08
 800ae6c:	080128ac 	.word	0x080128ac
 800ae70:	2300      	movs	r3, #0
 800ae72:	4423      	add	r3, r4
 800ae74:	b29a      	uxth	r2, r3
 800ae76:	4b98      	ldr	r3, [pc, #608]	; (800b0d8 <tcp_receive+0xb04>)
 800ae78:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800ae7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae7c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800ae7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800ae84:	6938      	ldr	r0, [r7, #16]
 800ae86:	f7fd fcac 	bl	80087e2 <tcp_seg_free>
            while (next &&
 800ae8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d00e      	beq.n	800aeae <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800ae90:	4b91      	ldr	r3, [pc, #580]	; (800b0d8 <tcp_receive+0xb04>)
 800ae92:	881b      	ldrh	r3, [r3, #0]
 800ae94:	461a      	mov	r2, r3
 800ae96:	4b91      	ldr	r3, [pc, #580]	; (800b0dc <tcp_receive+0xb08>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	441a      	add	r2, r3
 800ae9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae9e:	68db      	ldr	r3, [r3, #12]
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aea4:	8909      	ldrh	r1, [r1, #8]
 800aea6:	440b      	add	r3, r1
 800aea8:	1ad3      	subs	r3, r2, r3
            while (next &&
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	da9a      	bge.n	800ade4 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800aeae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d059      	beq.n	800af68 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800aeb4:	4b88      	ldr	r3, [pc, #544]	; (800b0d8 <tcp_receive+0xb04>)
 800aeb6:	881b      	ldrh	r3, [r3, #0]
 800aeb8:	461a      	mov	r2, r3
 800aeba:	4b88      	ldr	r3, [pc, #544]	; (800b0dc <tcp_receive+0xb08>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	441a      	add	r2, r3
 800aec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aec2:	68db      	ldr	r3, [r3, #12]
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	1ad3      	subs	r3, r2, r3
            if (next &&
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	dd4d      	ble.n	800af68 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800aecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aece:	68db      	ldr	r3, [r3, #12]
 800aed0:	685b      	ldr	r3, [r3, #4]
 800aed2:	b29a      	uxth	r2, r3
 800aed4:	4b81      	ldr	r3, [pc, #516]	; (800b0dc <tcp_receive+0xb08>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	b29b      	uxth	r3, r3
 800aeda:	1ad3      	subs	r3, r2, r3
 800aedc:	b29a      	uxth	r2, r3
 800aede:	4b80      	ldr	r3, [pc, #512]	; (800b0e0 <tcp_receive+0xb0c>)
 800aee0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800aee2:	4b7f      	ldr	r3, [pc, #508]	; (800b0e0 <tcp_receive+0xb0c>)
 800aee4:	68db      	ldr	r3, [r3, #12]
 800aee6:	899b      	ldrh	r3, [r3, #12]
 800aee8:	b29b      	uxth	r3, r3
 800aeea:	4618      	mov	r0, r3
 800aeec:	f7fa fd62 	bl	80059b4 <lwip_htons>
 800aef0:	4603      	mov	r3, r0
 800aef2:	b2db      	uxtb	r3, r3
 800aef4:	f003 0302 	and.w	r3, r3, #2
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d005      	beq.n	800af08 <tcp_receive+0x934>
                inseg.len -= 1;
 800aefc:	4b78      	ldr	r3, [pc, #480]	; (800b0e0 <tcp_receive+0xb0c>)
 800aefe:	891b      	ldrh	r3, [r3, #8]
 800af00:	3b01      	subs	r3, #1
 800af02:	b29a      	uxth	r2, r3
 800af04:	4b76      	ldr	r3, [pc, #472]	; (800b0e0 <tcp_receive+0xb0c>)
 800af06:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800af08:	4b75      	ldr	r3, [pc, #468]	; (800b0e0 <tcp_receive+0xb0c>)
 800af0a:	685b      	ldr	r3, [r3, #4]
 800af0c:	4a74      	ldr	r2, [pc, #464]	; (800b0e0 <tcp_receive+0xb0c>)
 800af0e:	8912      	ldrh	r2, [r2, #8]
 800af10:	4611      	mov	r1, r2
 800af12:	4618      	mov	r0, r3
 800af14:	f7fb fe7c 	bl	8006c10 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800af18:	4b71      	ldr	r3, [pc, #452]	; (800b0e0 <tcp_receive+0xb0c>)
 800af1a:	891c      	ldrh	r4, [r3, #8]
 800af1c:	4b70      	ldr	r3, [pc, #448]	; (800b0e0 <tcp_receive+0xb0c>)
 800af1e:	68db      	ldr	r3, [r3, #12]
 800af20:	899b      	ldrh	r3, [r3, #12]
 800af22:	b29b      	uxth	r3, r3
 800af24:	4618      	mov	r0, r3
 800af26:	f7fa fd45 	bl	80059b4 <lwip_htons>
 800af2a:	4603      	mov	r3, r0
 800af2c:	b2db      	uxtb	r3, r3
 800af2e:	f003 0303 	and.w	r3, r3, #3
 800af32:	2b00      	cmp	r3, #0
 800af34:	d001      	beq.n	800af3a <tcp_receive+0x966>
 800af36:	2301      	movs	r3, #1
 800af38:	e000      	b.n	800af3c <tcp_receive+0x968>
 800af3a:	2300      	movs	r3, #0
 800af3c:	4423      	add	r3, r4
 800af3e:	b29a      	uxth	r2, r3
 800af40:	4b65      	ldr	r3, [pc, #404]	; (800b0d8 <tcp_receive+0xb04>)
 800af42:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800af44:	4b64      	ldr	r3, [pc, #400]	; (800b0d8 <tcp_receive+0xb04>)
 800af46:	881b      	ldrh	r3, [r3, #0]
 800af48:	461a      	mov	r2, r3
 800af4a:	4b64      	ldr	r3, [pc, #400]	; (800b0dc <tcp_receive+0xb08>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	441a      	add	r2, r3
 800af50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af52:	68db      	ldr	r3, [r3, #12]
 800af54:	685b      	ldr	r3, [r3, #4]
 800af56:	429a      	cmp	r2, r3
 800af58:	d006      	beq.n	800af68 <tcp_receive+0x994>
 800af5a:	4b62      	ldr	r3, [pc, #392]	; (800b0e4 <tcp_receive+0xb10>)
 800af5c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800af60:	4961      	ldr	r1, [pc, #388]	; (800b0e8 <tcp_receive+0xb14>)
 800af62:	4862      	ldr	r0, [pc, #392]	; (800b0ec <tcp_receive+0xb18>)
 800af64:	f005 f8be 	bl	80100e4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800af6c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800af6e:	4b5a      	ldr	r3, [pc, #360]	; (800b0d8 <tcp_receive+0xb04>)
 800af70:	881b      	ldrh	r3, [r3, #0]
 800af72:	461a      	mov	r2, r3
 800af74:	4b59      	ldr	r3, [pc, #356]	; (800b0dc <tcp_receive+0xb08>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	441a      	add	r2, r3
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800af82:	4b55      	ldr	r3, [pc, #340]	; (800b0d8 <tcp_receive+0xb04>)
 800af84:	881b      	ldrh	r3, [r3, #0]
 800af86:	429a      	cmp	r2, r3
 800af88:	d206      	bcs.n	800af98 <tcp_receive+0x9c4>
 800af8a:	4b56      	ldr	r3, [pc, #344]	; (800b0e4 <tcp_receive+0xb10>)
 800af8c:	f240 6207 	movw	r2, #1543	; 0x607
 800af90:	4957      	ldr	r1, [pc, #348]	; (800b0f0 <tcp_receive+0xb1c>)
 800af92:	4856      	ldr	r0, [pc, #344]	; (800b0ec <tcp_receive+0xb18>)
 800af94:	f005 f8a6 	bl	80100e4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800af9c:	4b4e      	ldr	r3, [pc, #312]	; (800b0d8 <tcp_receive+0xb04>)
 800af9e:	881b      	ldrh	r3, [r3, #0]
 800afa0:	1ad3      	subs	r3, r2, r3
 800afa2:	b29a      	uxth	r2, r3
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f7fc fddd 	bl	8007b68 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800afae:	4b4c      	ldr	r3, [pc, #304]	; (800b0e0 <tcp_receive+0xb0c>)
 800afb0:	685b      	ldr	r3, [r3, #4]
 800afb2:	891b      	ldrh	r3, [r3, #8]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d006      	beq.n	800afc6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800afb8:	4b49      	ldr	r3, [pc, #292]	; (800b0e0 <tcp_receive+0xb0c>)
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	4a4d      	ldr	r2, [pc, #308]	; (800b0f4 <tcp_receive+0xb20>)
 800afbe:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800afc0:	4b47      	ldr	r3, [pc, #284]	; (800b0e0 <tcp_receive+0xb0c>)
 800afc2:	2200      	movs	r2, #0
 800afc4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800afc6:	4b46      	ldr	r3, [pc, #280]	; (800b0e0 <tcp_receive+0xb0c>)
 800afc8:	68db      	ldr	r3, [r3, #12]
 800afca:	899b      	ldrh	r3, [r3, #12]
 800afcc:	b29b      	uxth	r3, r3
 800afce:	4618      	mov	r0, r3
 800afd0:	f7fa fcf0 	bl	80059b4 <lwip_htons>
 800afd4:	4603      	mov	r3, r0
 800afd6:	b2db      	uxtb	r3, r3
 800afd8:	f003 0301 	and.w	r3, r3, #1
 800afdc:	2b00      	cmp	r3, #0
 800afde:	f000 80b8 	beq.w	800b152 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800afe2:	4b45      	ldr	r3, [pc, #276]	; (800b0f8 <tcp_receive+0xb24>)
 800afe4:	781b      	ldrb	r3, [r3, #0]
 800afe6:	f043 0320 	orr.w	r3, r3, #32
 800afea:	b2da      	uxtb	r2, r3
 800afec:	4b42      	ldr	r3, [pc, #264]	; (800b0f8 <tcp_receive+0xb24>)
 800afee:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800aff0:	e0af      	b.n	800b152 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aff6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800affc:	68db      	ldr	r3, [r3, #12]
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	4a36      	ldr	r2, [pc, #216]	; (800b0dc <tcp_receive+0xb08>)
 800b002:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	891b      	ldrh	r3, [r3, #8]
 800b008:	461c      	mov	r4, r3
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	68db      	ldr	r3, [r3, #12]
 800b00e:	899b      	ldrh	r3, [r3, #12]
 800b010:	b29b      	uxth	r3, r3
 800b012:	4618      	mov	r0, r3
 800b014:	f7fa fcce 	bl	80059b4 <lwip_htons>
 800b018:	4603      	mov	r3, r0
 800b01a:	b2db      	uxtb	r3, r3
 800b01c:	f003 0303 	and.w	r3, r3, #3
 800b020:	2b00      	cmp	r3, #0
 800b022:	d001      	beq.n	800b028 <tcp_receive+0xa54>
 800b024:	2301      	movs	r3, #1
 800b026:	e000      	b.n	800b02a <tcp_receive+0xa56>
 800b028:	2300      	movs	r3, #0
 800b02a:	191a      	adds	r2, r3, r4
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b030:	441a      	add	r2, r3
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b03a:	461c      	mov	r4, r3
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	891b      	ldrh	r3, [r3, #8]
 800b040:	461d      	mov	r5, r3
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	68db      	ldr	r3, [r3, #12]
 800b046:	899b      	ldrh	r3, [r3, #12]
 800b048:	b29b      	uxth	r3, r3
 800b04a:	4618      	mov	r0, r3
 800b04c:	f7fa fcb2 	bl	80059b4 <lwip_htons>
 800b050:	4603      	mov	r3, r0
 800b052:	b2db      	uxtb	r3, r3
 800b054:	f003 0303 	and.w	r3, r3, #3
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d001      	beq.n	800b060 <tcp_receive+0xa8c>
 800b05c:	2301      	movs	r3, #1
 800b05e:	e000      	b.n	800b062 <tcp_receive+0xa8e>
 800b060:	2300      	movs	r3, #0
 800b062:	442b      	add	r3, r5
 800b064:	429c      	cmp	r4, r3
 800b066:	d206      	bcs.n	800b076 <tcp_receive+0xaa2>
 800b068:	4b1e      	ldr	r3, [pc, #120]	; (800b0e4 <tcp_receive+0xb10>)
 800b06a:	f240 622b 	movw	r2, #1579	; 0x62b
 800b06e:	4923      	ldr	r1, [pc, #140]	; (800b0fc <tcp_receive+0xb28>)
 800b070:	481e      	ldr	r0, [pc, #120]	; (800b0ec <tcp_receive+0xb18>)
 800b072:	f005 f837 	bl	80100e4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	891b      	ldrh	r3, [r3, #8]
 800b07a:	461c      	mov	r4, r3
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	68db      	ldr	r3, [r3, #12]
 800b080:	899b      	ldrh	r3, [r3, #12]
 800b082:	b29b      	uxth	r3, r3
 800b084:	4618      	mov	r0, r3
 800b086:	f7fa fc95 	bl	80059b4 <lwip_htons>
 800b08a:	4603      	mov	r3, r0
 800b08c:	b2db      	uxtb	r3, r3
 800b08e:	f003 0303 	and.w	r3, r3, #3
 800b092:	2b00      	cmp	r3, #0
 800b094:	d001      	beq.n	800b09a <tcp_receive+0xac6>
 800b096:	2301      	movs	r3, #1
 800b098:	e000      	b.n	800b09c <tcp_receive+0xac8>
 800b09a:	2300      	movs	r3, #0
 800b09c:	1919      	adds	r1, r3, r4
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b0a2:	b28b      	uxth	r3, r1
 800b0a4:	1ad3      	subs	r3, r2, r3
 800b0a6:	b29a      	uxth	r2, r3
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f7fc fd5b 	bl	8007b68 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	685b      	ldr	r3, [r3, #4]
 800b0b6:	891b      	ldrh	r3, [r3, #8]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d028      	beq.n	800b10e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800b0bc:	4b0d      	ldr	r3, [pc, #52]	; (800b0f4 <tcp_receive+0xb20>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d01d      	beq.n	800b100 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800b0c4:	4b0b      	ldr	r3, [pc, #44]	; (800b0f4 <tcp_receive+0xb20>)
 800b0c6:	681a      	ldr	r2, [r3, #0]
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	685b      	ldr	r3, [r3, #4]
 800b0cc:	4619      	mov	r1, r3
 800b0ce:	4610      	mov	r0, r2
 800b0d0:	f7fb ffe6 	bl	80070a0 <pbuf_cat>
 800b0d4:	e018      	b.n	800b108 <tcp_receive+0xb34>
 800b0d6:	bf00      	nop
 800b0d8:	200000fa 	.word	0x200000fa
 800b0dc:	200000f0 	.word	0x200000f0
 800b0e0:	200000d0 	.word	0x200000d0
 800b0e4:	08012860 	.word	0x08012860
 800b0e8:	08012c40 	.word	0x08012c40
 800b0ec:	080128ac 	.word	0x080128ac
 800b0f0:	08012c7c 	.word	0x08012c7c
 800b0f4:	20000100 	.word	0x20000100
 800b0f8:	200000fd 	.word	0x200000fd
 800b0fc:	08012c9c 	.word	0x08012c9c
            } else {
              recv_data = cseg->p;
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	685b      	ldr	r3, [r3, #4]
 800b104:	4a70      	ldr	r2, [pc, #448]	; (800b2c8 <tcp_receive+0xcf4>)
 800b106:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	2200      	movs	r2, #0
 800b10c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	68db      	ldr	r3, [r3, #12]
 800b112:	899b      	ldrh	r3, [r3, #12]
 800b114:	b29b      	uxth	r3, r3
 800b116:	4618      	mov	r0, r3
 800b118:	f7fa fc4c 	bl	80059b4 <lwip_htons>
 800b11c:	4603      	mov	r3, r0
 800b11e:	b2db      	uxtb	r3, r3
 800b120:	f003 0301 	and.w	r3, r3, #1
 800b124:	2b00      	cmp	r3, #0
 800b126:	d00d      	beq.n	800b144 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800b128:	4b68      	ldr	r3, [pc, #416]	; (800b2cc <tcp_receive+0xcf8>)
 800b12a:	781b      	ldrb	r3, [r3, #0]
 800b12c:	f043 0320 	orr.w	r3, r3, #32
 800b130:	b2da      	uxtb	r2, r3
 800b132:	4b66      	ldr	r3, [pc, #408]	; (800b2cc <tcp_receive+0xcf8>)
 800b134:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	7d1b      	ldrb	r3, [r3, #20]
 800b13a:	2b04      	cmp	r3, #4
 800b13c:	d102      	bne.n	800b144 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2207      	movs	r2, #7
 800b142:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	681a      	ldr	r2, [r3, #0]
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800b14c:	68b8      	ldr	r0, [r7, #8]
 800b14e:	f7fd fb48 	bl	80087e2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b156:	2b00      	cmp	r3, #0
 800b158:	d008      	beq.n	800b16c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b15e:	68db      	ldr	r3, [r3, #12]
 800b160:	685a      	ldr	r2, [r3, #4]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800b166:	429a      	cmp	r2, r3
 800b168:	f43f af43 	beq.w	800aff2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	8b5b      	ldrh	r3, [r3, #26]
 800b170:	f003 0301 	and.w	r3, r3, #1
 800b174:	2b00      	cmp	r3, #0
 800b176:	d00e      	beq.n	800b196 <tcp_receive+0xbc2>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	8b5b      	ldrh	r3, [r3, #26]
 800b17c:	f023 0301 	bic.w	r3, r3, #1
 800b180:	b29a      	uxth	r2, r3
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	835a      	strh	r2, [r3, #26]
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	8b5b      	ldrh	r3, [r3, #26]
 800b18a:	f043 0302 	orr.w	r3, r3, #2
 800b18e:	b29a      	uxth	r2, r3
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b194:	e188      	b.n	800b4a8 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	8b5b      	ldrh	r3, [r3, #26]
 800b19a:	f043 0301 	orr.w	r3, r3, #1
 800b19e:	b29a      	uxth	r2, r3
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b1a4:	e180      	b.n	800b4a8 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d106      	bne.n	800b1bc <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800b1ae:	4848      	ldr	r0, [pc, #288]	; (800b2d0 <tcp_receive+0xcfc>)
 800b1b0:	f7fd fb30 	bl	8008814 <tcp_seg_copy>
 800b1b4:	4602      	mov	r2, r0
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	675a      	str	r2, [r3, #116]	; 0x74
 800b1ba:	e16d      	b.n	800b498 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1c4:	63bb      	str	r3, [r7, #56]	; 0x38
 800b1c6:	e157      	b.n	800b478 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800b1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ca:	68db      	ldr	r3, [r3, #12]
 800b1cc:	685a      	ldr	r2, [r3, #4]
 800b1ce:	4b41      	ldr	r3, [pc, #260]	; (800b2d4 <tcp_receive+0xd00>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d11d      	bne.n	800b212 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800b1d6:	4b3e      	ldr	r3, [pc, #248]	; (800b2d0 <tcp_receive+0xcfc>)
 800b1d8:	891a      	ldrh	r2, [r3, #8]
 800b1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1dc:	891b      	ldrh	r3, [r3, #8]
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	f240 814f 	bls.w	800b482 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b1e4:	483a      	ldr	r0, [pc, #232]	; (800b2d0 <tcp_receive+0xcfc>)
 800b1e6:	f7fd fb15 	bl	8008814 <tcp_seg_copy>
 800b1ea:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800b1ec:	697b      	ldr	r3, [r7, #20]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	f000 8149 	beq.w	800b486 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800b1f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d003      	beq.n	800b202 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800b1fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1fc:	697a      	ldr	r2, [r7, #20]
 800b1fe:	601a      	str	r2, [r3, #0]
 800b200:	e002      	b.n	800b208 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	697a      	ldr	r2, [r7, #20]
 800b206:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800b208:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b20a:	6978      	ldr	r0, [r7, #20]
 800b20c:	f7ff f8de 	bl	800a3cc <tcp_oos_insert_segment>
                }
                break;
 800b210:	e139      	b.n	800b486 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800b212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b214:	2b00      	cmp	r3, #0
 800b216:	d117      	bne.n	800b248 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800b218:	4b2e      	ldr	r3, [pc, #184]	; (800b2d4 <tcp_receive+0xd00>)
 800b21a:	681a      	ldr	r2, [r3, #0]
 800b21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b21e:	68db      	ldr	r3, [r3, #12]
 800b220:	685b      	ldr	r3, [r3, #4]
 800b222:	1ad3      	subs	r3, r2, r3
 800b224:	2b00      	cmp	r3, #0
 800b226:	da57      	bge.n	800b2d8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b228:	4829      	ldr	r0, [pc, #164]	; (800b2d0 <tcp_receive+0xcfc>)
 800b22a:	f7fd faf3 	bl	8008814 <tcp_seg_copy>
 800b22e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800b230:	69bb      	ldr	r3, [r7, #24]
 800b232:	2b00      	cmp	r3, #0
 800b234:	f000 8129 	beq.w	800b48a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	69ba      	ldr	r2, [r7, #24]
 800b23c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800b23e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b240:	69b8      	ldr	r0, [r7, #24]
 800b242:	f7ff f8c3 	bl	800a3cc <tcp_oos_insert_segment>
                  }
                  break;
 800b246:	e120      	b.n	800b48a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800b248:	4b22      	ldr	r3, [pc, #136]	; (800b2d4 <tcp_receive+0xd00>)
 800b24a:	681a      	ldr	r2, [r3, #0]
 800b24c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b24e:	68db      	ldr	r3, [r3, #12]
 800b250:	685b      	ldr	r3, [r3, #4]
 800b252:	1ad3      	subs	r3, r2, r3
 800b254:	3b01      	subs	r3, #1
 800b256:	2b00      	cmp	r3, #0
 800b258:	db3e      	blt.n	800b2d8 <tcp_receive+0xd04>
 800b25a:	4b1e      	ldr	r3, [pc, #120]	; (800b2d4 <tcp_receive+0xd00>)
 800b25c:	681a      	ldr	r2, [r3, #0]
 800b25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b260:	68db      	ldr	r3, [r3, #12]
 800b262:	685b      	ldr	r3, [r3, #4]
 800b264:	1ad3      	subs	r3, r2, r3
 800b266:	3301      	adds	r3, #1
 800b268:	2b00      	cmp	r3, #0
 800b26a:	dc35      	bgt.n	800b2d8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b26c:	4818      	ldr	r0, [pc, #96]	; (800b2d0 <tcp_receive+0xcfc>)
 800b26e:	f7fd fad1 	bl	8008814 <tcp_seg_copy>
 800b272:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800b274:	69fb      	ldr	r3, [r7, #28]
 800b276:	2b00      	cmp	r3, #0
 800b278:	f000 8109 	beq.w	800b48e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800b27c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b27e:	68db      	ldr	r3, [r3, #12]
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b284:	8912      	ldrh	r2, [r2, #8]
 800b286:	441a      	add	r2, r3
 800b288:	4b12      	ldr	r3, [pc, #72]	; (800b2d4 <tcp_receive+0xd00>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	1ad3      	subs	r3, r2, r3
 800b28e:	2b00      	cmp	r3, #0
 800b290:	dd12      	ble.n	800b2b8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800b292:	4b10      	ldr	r3, [pc, #64]	; (800b2d4 <tcp_receive+0xd00>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	b29a      	uxth	r2, r3
 800b298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b29a:	68db      	ldr	r3, [r3, #12]
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	b29b      	uxth	r3, r3
 800b2a0:	1ad3      	subs	r3, r2, r3
 800b2a2:	b29a      	uxth	r2, r3
 800b2a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2a6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800b2a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2aa:	685a      	ldr	r2, [r3, #4]
 800b2ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2ae:	891b      	ldrh	r3, [r3, #8]
 800b2b0:	4619      	mov	r1, r3
 800b2b2:	4610      	mov	r0, r2
 800b2b4:	f7fb fcac 	bl	8006c10 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800b2b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2ba:	69fa      	ldr	r2, [r7, #28]
 800b2bc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800b2be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b2c0:	69f8      	ldr	r0, [r7, #28]
 800b2c2:	f7ff f883 	bl	800a3cc <tcp_oos_insert_segment>
                  }
                  break;
 800b2c6:	e0e2      	b.n	800b48e <tcp_receive+0xeba>
 800b2c8:	20000100 	.word	0x20000100
 800b2cc:	200000fd 	.word	0x200000fd
 800b2d0:	200000d0 	.word	0x200000d0
 800b2d4:	200000f0 	.word	0x200000f0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800b2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2da:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800b2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	f040 80c6 	bne.w	800b472 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800b2e6:	4b80      	ldr	r3, [pc, #512]	; (800b4e8 <tcp_receive+0xf14>)
 800b2e8:	681a      	ldr	r2, [r3, #0]
 800b2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ec:	68db      	ldr	r3, [r3, #12]
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	f340 80bd 	ble.w	800b472 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2fa:	68db      	ldr	r3, [r3, #12]
 800b2fc:	899b      	ldrh	r3, [r3, #12]
 800b2fe:	b29b      	uxth	r3, r3
 800b300:	4618      	mov	r0, r3
 800b302:	f7fa fb57 	bl	80059b4 <lwip_htons>
 800b306:	4603      	mov	r3, r0
 800b308:	b2db      	uxtb	r3, r3
 800b30a:	f003 0301 	and.w	r3, r3, #1
 800b30e:	2b00      	cmp	r3, #0
 800b310:	f040 80bf 	bne.w	800b492 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800b314:	4875      	ldr	r0, [pc, #468]	; (800b4ec <tcp_receive+0xf18>)
 800b316:	f7fd fa7d 	bl	8008814 <tcp_seg_copy>
 800b31a:	4602      	mov	r2, r0
 800b31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b31e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800b320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	2b00      	cmp	r3, #0
 800b326:	f000 80b6 	beq.w	800b496 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800b32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b32c:	68db      	ldr	r3, [r3, #12]
 800b32e:	685b      	ldr	r3, [r3, #4]
 800b330:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b332:	8912      	ldrh	r2, [r2, #8]
 800b334:	441a      	add	r2, r3
 800b336:	4b6c      	ldr	r3, [pc, #432]	; (800b4e8 <tcp_receive+0xf14>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	1ad3      	subs	r3, r2, r3
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	dd12      	ble.n	800b366 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800b340:	4b69      	ldr	r3, [pc, #420]	; (800b4e8 <tcp_receive+0xf14>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	b29a      	uxth	r2, r3
 800b346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b348:	68db      	ldr	r3, [r3, #12]
 800b34a:	685b      	ldr	r3, [r3, #4]
 800b34c:	b29b      	uxth	r3, r3
 800b34e:	1ad3      	subs	r3, r2, r3
 800b350:	b29a      	uxth	r2, r3
 800b352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b354:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800b356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b358:	685a      	ldr	r2, [r3, #4]
 800b35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b35c:	891b      	ldrh	r3, [r3, #8]
 800b35e:	4619      	mov	r1, r3
 800b360:	4610      	mov	r0, r2
 800b362:	f7fb fc55 	bl	8006c10 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800b366:	4b62      	ldr	r3, [pc, #392]	; (800b4f0 <tcp_receive+0xf1c>)
 800b368:	881b      	ldrh	r3, [r3, #0]
 800b36a:	461a      	mov	r2, r3
 800b36c:	4b5e      	ldr	r3, [pc, #376]	; (800b4e8 <tcp_receive+0xf14>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	441a      	add	r2, r3
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b376:	6879      	ldr	r1, [r7, #4]
 800b378:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b37a:	440b      	add	r3, r1
 800b37c:	1ad3      	subs	r3, r2, r3
 800b37e:	2b00      	cmp	r3, #0
 800b380:	f340 8089 	ble.w	800b496 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800b384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	68db      	ldr	r3, [r3, #12]
 800b38a:	899b      	ldrh	r3, [r3, #12]
 800b38c:	b29b      	uxth	r3, r3
 800b38e:	4618      	mov	r0, r3
 800b390:	f7fa fb10 	bl	80059b4 <lwip_htons>
 800b394:	4603      	mov	r3, r0
 800b396:	b2db      	uxtb	r3, r3
 800b398:	f003 0301 	and.w	r3, r3, #1
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d022      	beq.n	800b3e6 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800b3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	68db      	ldr	r3, [r3, #12]
 800b3a6:	899b      	ldrh	r3, [r3, #12]
 800b3a8:	b29b      	uxth	r3, r3
 800b3aa:	b21b      	sxth	r3, r3
 800b3ac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b3b0:	b21c      	sxth	r4, r3
 800b3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	68db      	ldr	r3, [r3, #12]
 800b3b8:	899b      	ldrh	r3, [r3, #12]
 800b3ba:	b29b      	uxth	r3, r3
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f7fa faf9 	bl	80059b4 <lwip_htons>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	b2db      	uxtb	r3, r3
 800b3c6:	b29b      	uxth	r3, r3
 800b3c8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b3cc:	b29b      	uxth	r3, r3
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f7fa faf0 	bl	80059b4 <lwip_htons>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	b21b      	sxth	r3, r3
 800b3d8:	4323      	orrs	r3, r4
 800b3da:	b21a      	sxth	r2, r3
 800b3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	68db      	ldr	r3, [r3, #12]
 800b3e2:	b292      	uxth	r2, r2
 800b3e4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ea:	b29a      	uxth	r2, r3
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3f0:	4413      	add	r3, r2
 800b3f2:	b299      	uxth	r1, r3
 800b3f4:	4b3c      	ldr	r3, [pc, #240]	; (800b4e8 <tcp_receive+0xf14>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	b29a      	uxth	r2, r3
 800b3fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	1a8a      	subs	r2, r1, r2
 800b400:	b292      	uxth	r2, r2
 800b402:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800b404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	685a      	ldr	r2, [r3, #4]
 800b40a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	891b      	ldrh	r3, [r3, #8]
 800b410:	4619      	mov	r1, r3
 800b412:	4610      	mov	r0, r2
 800b414:	f7fb fbfc 	bl	8006c10 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800b418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	891c      	ldrh	r4, [r3, #8]
 800b41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	68db      	ldr	r3, [r3, #12]
 800b424:	899b      	ldrh	r3, [r3, #12]
 800b426:	b29b      	uxth	r3, r3
 800b428:	4618      	mov	r0, r3
 800b42a:	f7fa fac3 	bl	80059b4 <lwip_htons>
 800b42e:	4603      	mov	r3, r0
 800b430:	b2db      	uxtb	r3, r3
 800b432:	f003 0303 	and.w	r3, r3, #3
 800b436:	2b00      	cmp	r3, #0
 800b438:	d001      	beq.n	800b43e <tcp_receive+0xe6a>
 800b43a:	2301      	movs	r3, #1
 800b43c:	e000      	b.n	800b440 <tcp_receive+0xe6c>
 800b43e:	2300      	movs	r3, #0
 800b440:	4423      	add	r3, r4
 800b442:	b29a      	uxth	r2, r3
 800b444:	4b2a      	ldr	r3, [pc, #168]	; (800b4f0 <tcp_receive+0xf1c>)
 800b446:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b448:	4b29      	ldr	r3, [pc, #164]	; (800b4f0 <tcp_receive+0xf1c>)
 800b44a:	881b      	ldrh	r3, [r3, #0]
 800b44c:	461a      	mov	r2, r3
 800b44e:	4b26      	ldr	r3, [pc, #152]	; (800b4e8 <tcp_receive+0xf14>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	441a      	add	r2, r3
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b458:	6879      	ldr	r1, [r7, #4]
 800b45a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b45c:	440b      	add	r3, r1
 800b45e:	429a      	cmp	r2, r3
 800b460:	d019      	beq.n	800b496 <tcp_receive+0xec2>
 800b462:	4b24      	ldr	r3, [pc, #144]	; (800b4f4 <tcp_receive+0xf20>)
 800b464:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800b468:	4923      	ldr	r1, [pc, #140]	; (800b4f8 <tcp_receive+0xf24>)
 800b46a:	4824      	ldr	r0, [pc, #144]	; (800b4fc <tcp_receive+0xf28>)
 800b46c:	f004 fe3a 	bl	80100e4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800b470:	e011      	b.n	800b496 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	63bb      	str	r3, [r7, #56]	; 0x38
 800b478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	f47f aea4 	bne.w	800b1c8 <tcp_receive+0xbf4>
 800b480:	e00a      	b.n	800b498 <tcp_receive+0xec4>
                break;
 800b482:	bf00      	nop
 800b484:	e008      	b.n	800b498 <tcp_receive+0xec4>
                break;
 800b486:	bf00      	nop
 800b488:	e006      	b.n	800b498 <tcp_receive+0xec4>
                  break;
 800b48a:	bf00      	nop
 800b48c:	e004      	b.n	800b498 <tcp_receive+0xec4>
                  break;
 800b48e:	bf00      	nop
 800b490:	e002      	b.n	800b498 <tcp_receive+0xec4>
                  break;
 800b492:	bf00      	nop
 800b494:	e000      	b.n	800b498 <tcp_receive+0xec4>
                break;
 800b496:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f001 fe89 	bl	800d1b0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800b49e:	e003      	b.n	800b4a8 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f001 fe85 	bl	800d1b0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b4a6:	e01a      	b.n	800b4de <tcp_receive+0xf0a>
 800b4a8:	e019      	b.n	800b4de <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800b4aa:	4b0f      	ldr	r3, [pc, #60]	; (800b4e8 <tcp_receive+0xf14>)
 800b4ac:	681a      	ldr	r2, [r3, #0]
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4b2:	1ad3      	subs	r3, r2, r3
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	db0a      	blt.n	800b4ce <tcp_receive+0xefa>
 800b4b8:	4b0b      	ldr	r3, [pc, #44]	; (800b4e8 <tcp_receive+0xf14>)
 800b4ba:	681a      	ldr	r2, [r3, #0]
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c0:	6879      	ldr	r1, [r7, #4]
 800b4c2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b4c4:	440b      	add	r3, r1
 800b4c6:	1ad3      	subs	r3, r2, r3
 800b4c8:	3301      	adds	r3, #1
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	dd07      	ble.n	800b4de <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	8b5b      	ldrh	r3, [r3, #26]
 800b4d2:	f043 0302 	orr.w	r3, r3, #2
 800b4d6:	b29a      	uxth	r2, r3
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800b4dc:	e7ff      	b.n	800b4de <tcp_receive+0xf0a>
 800b4de:	bf00      	nop
 800b4e0:	3750      	adds	r7, #80	; 0x50
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bdb0      	pop	{r4, r5, r7, pc}
 800b4e6:	bf00      	nop
 800b4e8:	200000f0 	.word	0x200000f0
 800b4ec:	200000d0 	.word	0x200000d0
 800b4f0:	200000fa 	.word	0x200000fa
 800b4f4:	08012860 	.word	0x08012860
 800b4f8:	08012c08 	.word	0x08012c08
 800b4fc:	080128ac 	.word	0x080128ac

0800b500 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800b500:	b480      	push	{r7}
 800b502:	b083      	sub	sp, #12
 800b504:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800b506:	4b15      	ldr	r3, [pc, #84]	; (800b55c <tcp_get_next_optbyte+0x5c>)
 800b508:	881b      	ldrh	r3, [r3, #0]
 800b50a:	1c5a      	adds	r2, r3, #1
 800b50c:	b291      	uxth	r1, r2
 800b50e:	4a13      	ldr	r2, [pc, #76]	; (800b55c <tcp_get_next_optbyte+0x5c>)
 800b510:	8011      	strh	r1, [r2, #0]
 800b512:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800b514:	4b12      	ldr	r3, [pc, #72]	; (800b560 <tcp_get_next_optbyte+0x60>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d004      	beq.n	800b526 <tcp_get_next_optbyte+0x26>
 800b51c:	4b11      	ldr	r3, [pc, #68]	; (800b564 <tcp_get_next_optbyte+0x64>)
 800b51e:	881b      	ldrh	r3, [r3, #0]
 800b520:	88fa      	ldrh	r2, [r7, #6]
 800b522:	429a      	cmp	r2, r3
 800b524:	d208      	bcs.n	800b538 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800b526:	4b10      	ldr	r3, [pc, #64]	; (800b568 <tcp_get_next_optbyte+0x68>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	3314      	adds	r3, #20
 800b52c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800b52e:	88fb      	ldrh	r3, [r7, #6]
 800b530:	683a      	ldr	r2, [r7, #0]
 800b532:	4413      	add	r3, r2
 800b534:	781b      	ldrb	r3, [r3, #0]
 800b536:	e00b      	b.n	800b550 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800b538:	88fb      	ldrh	r3, [r7, #6]
 800b53a:	b2da      	uxtb	r2, r3
 800b53c:	4b09      	ldr	r3, [pc, #36]	; (800b564 <tcp_get_next_optbyte+0x64>)
 800b53e:	881b      	ldrh	r3, [r3, #0]
 800b540:	b2db      	uxtb	r3, r3
 800b542:	1ad3      	subs	r3, r2, r3
 800b544:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800b546:	4b06      	ldr	r3, [pc, #24]	; (800b560 <tcp_get_next_optbyte+0x60>)
 800b548:	681a      	ldr	r2, [r3, #0]
 800b54a:	797b      	ldrb	r3, [r7, #5]
 800b54c:	4413      	add	r3, r2
 800b54e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b550:	4618      	mov	r0, r3
 800b552:	370c      	adds	r7, #12
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr
 800b55c:	200000ec 	.word	0x200000ec
 800b560:	200000e8 	.word	0x200000e8
 800b564:	200000e6 	.word	0x200000e6
 800b568:	200000e0 	.word	0x200000e0

0800b56c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b084      	sub	sp, #16
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d106      	bne.n	800b588 <tcp_parseopt+0x1c>
 800b57a:	4b32      	ldr	r3, [pc, #200]	; (800b644 <tcp_parseopt+0xd8>)
 800b57c:	f240 727d 	movw	r2, #1917	; 0x77d
 800b580:	4931      	ldr	r1, [pc, #196]	; (800b648 <tcp_parseopt+0xdc>)
 800b582:	4832      	ldr	r0, [pc, #200]	; (800b64c <tcp_parseopt+0xe0>)
 800b584:	f004 fdae 	bl	80100e4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800b588:	4b31      	ldr	r3, [pc, #196]	; (800b650 <tcp_parseopt+0xe4>)
 800b58a:	881b      	ldrh	r3, [r3, #0]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d055      	beq.n	800b63c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b590:	4b30      	ldr	r3, [pc, #192]	; (800b654 <tcp_parseopt+0xe8>)
 800b592:	2200      	movs	r2, #0
 800b594:	801a      	strh	r2, [r3, #0]
 800b596:	e045      	b.n	800b624 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800b598:	f7ff ffb2 	bl	800b500 <tcp_get_next_optbyte>
 800b59c:	4603      	mov	r3, r0
 800b59e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800b5a0:	7bfb      	ldrb	r3, [r7, #15]
 800b5a2:	2b02      	cmp	r3, #2
 800b5a4:	d006      	beq.n	800b5b4 <tcp_parseopt+0x48>
 800b5a6:	2b02      	cmp	r3, #2
 800b5a8:	dc2b      	bgt.n	800b602 <tcp_parseopt+0x96>
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d041      	beq.n	800b632 <tcp_parseopt+0xc6>
 800b5ae:	2b01      	cmp	r3, #1
 800b5b0:	d127      	bne.n	800b602 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800b5b2:	e037      	b.n	800b624 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800b5b4:	f7ff ffa4 	bl	800b500 <tcp_get_next_optbyte>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	2b04      	cmp	r3, #4
 800b5bc:	d13b      	bne.n	800b636 <tcp_parseopt+0xca>
 800b5be:	4b25      	ldr	r3, [pc, #148]	; (800b654 <tcp_parseopt+0xe8>)
 800b5c0:	881b      	ldrh	r3, [r3, #0]
 800b5c2:	3301      	adds	r3, #1
 800b5c4:	4a22      	ldr	r2, [pc, #136]	; (800b650 <tcp_parseopt+0xe4>)
 800b5c6:	8812      	ldrh	r2, [r2, #0]
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	da34      	bge.n	800b636 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800b5cc:	f7ff ff98 	bl	800b500 <tcp_get_next_optbyte>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	b29b      	uxth	r3, r3
 800b5d4:	021b      	lsls	r3, r3, #8
 800b5d6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800b5d8:	f7ff ff92 	bl	800b500 <tcp_get_next_optbyte>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	b29a      	uxth	r2, r3
 800b5e0:	89bb      	ldrh	r3, [r7, #12]
 800b5e2:	4313      	orrs	r3, r2
 800b5e4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b5e6:	89bb      	ldrh	r3, [r7, #12]
 800b5e8:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 800b5ec:	d804      	bhi.n	800b5f8 <tcp_parseopt+0x8c>
 800b5ee:	89bb      	ldrh	r3, [r7, #12]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d001      	beq.n	800b5f8 <tcp_parseopt+0x8c>
 800b5f4:	89ba      	ldrh	r2, [r7, #12]
 800b5f6:	e001      	b.n	800b5fc <tcp_parseopt+0x90>
 800b5f8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800b600:	e010      	b.n	800b624 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800b602:	f7ff ff7d 	bl	800b500 <tcp_get_next_optbyte>
 800b606:	4603      	mov	r3, r0
 800b608:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800b60a:	7afb      	ldrb	r3, [r7, #11]
 800b60c:	2b01      	cmp	r3, #1
 800b60e:	d914      	bls.n	800b63a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800b610:	7afb      	ldrb	r3, [r7, #11]
 800b612:	b29a      	uxth	r2, r3
 800b614:	4b0f      	ldr	r3, [pc, #60]	; (800b654 <tcp_parseopt+0xe8>)
 800b616:	881b      	ldrh	r3, [r3, #0]
 800b618:	4413      	add	r3, r2
 800b61a:	b29b      	uxth	r3, r3
 800b61c:	3b02      	subs	r3, #2
 800b61e:	b29a      	uxth	r2, r3
 800b620:	4b0c      	ldr	r3, [pc, #48]	; (800b654 <tcp_parseopt+0xe8>)
 800b622:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b624:	4b0b      	ldr	r3, [pc, #44]	; (800b654 <tcp_parseopt+0xe8>)
 800b626:	881a      	ldrh	r2, [r3, #0]
 800b628:	4b09      	ldr	r3, [pc, #36]	; (800b650 <tcp_parseopt+0xe4>)
 800b62a:	881b      	ldrh	r3, [r3, #0]
 800b62c:	429a      	cmp	r2, r3
 800b62e:	d3b3      	bcc.n	800b598 <tcp_parseopt+0x2c>
 800b630:	e004      	b.n	800b63c <tcp_parseopt+0xd0>
          return;
 800b632:	bf00      	nop
 800b634:	e002      	b.n	800b63c <tcp_parseopt+0xd0>
            return;
 800b636:	bf00      	nop
 800b638:	e000      	b.n	800b63c <tcp_parseopt+0xd0>
            return;
 800b63a:	bf00      	nop
      }
    }
  }
}
 800b63c:	3710      	adds	r7, #16
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}
 800b642:	bf00      	nop
 800b644:	08012860 	.word	0x08012860
 800b648:	08012cc4 	.word	0x08012cc4
 800b64c:	080128ac 	.word	0x080128ac
 800b650:	200000e4 	.word	0x200000e4
 800b654:	200000ec 	.word	0x200000ec

0800b658 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800b658:	b480      	push	{r7}
 800b65a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800b65c:	4b05      	ldr	r3, [pc, #20]	; (800b674 <tcp_trigger_input_pcb_close+0x1c>)
 800b65e:	781b      	ldrb	r3, [r3, #0]
 800b660:	f043 0310 	orr.w	r3, r3, #16
 800b664:	b2da      	uxtb	r2, r3
 800b666:	4b03      	ldr	r3, [pc, #12]	; (800b674 <tcp_trigger_input_pcb_close+0x1c>)
 800b668:	701a      	strb	r2, [r3, #0]
}
 800b66a:	bf00      	nop
 800b66c:	46bd      	mov	sp, r7
 800b66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b672:	4770      	bx	lr
 800b674:	200000fd 	.word	0x200000fd

0800b678 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b084      	sub	sp, #16
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	60f8      	str	r0, [r7, #12]
 800b680:	60b9      	str	r1, [r7, #8]
 800b682:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d00a      	beq.n	800b6a0 <tcp_route+0x28>
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	7a1b      	ldrb	r3, [r3, #8]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d006      	beq.n	800b6a0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	7a1b      	ldrb	r3, [r3, #8]
 800b696:	4618      	mov	r0, r3
 800b698:	f7fb f8e0 	bl	800685c <netif_get_by_index>
 800b69c:	4603      	mov	r3, r0
 800b69e:	e003      	b.n	800b6a8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f003 fad3 	bl	800ec4c <ip4_route>
 800b6a6:	4603      	mov	r3, r0
  }
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3710      	adds	r7, #16
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}

0800b6b0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800b6b0:	b590      	push	{r4, r7, lr}
 800b6b2:	b087      	sub	sp, #28
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	60f8      	str	r0, [r7, #12]
 800b6b8:	60b9      	str	r1, [r7, #8]
 800b6ba:	603b      	str	r3, [r7, #0]
 800b6bc:	4613      	mov	r3, r2
 800b6be:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d105      	bne.n	800b6d2 <tcp_create_segment+0x22>
 800b6c6:	4b44      	ldr	r3, [pc, #272]	; (800b7d8 <tcp_create_segment+0x128>)
 800b6c8:	22a3      	movs	r2, #163	; 0xa3
 800b6ca:	4944      	ldr	r1, [pc, #272]	; (800b7dc <tcp_create_segment+0x12c>)
 800b6cc:	4844      	ldr	r0, [pc, #272]	; (800b7e0 <tcp_create_segment+0x130>)
 800b6ce:	f004 fd09 	bl	80100e4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d105      	bne.n	800b6e4 <tcp_create_segment+0x34>
 800b6d8:	4b3f      	ldr	r3, [pc, #252]	; (800b7d8 <tcp_create_segment+0x128>)
 800b6da:	22a4      	movs	r2, #164	; 0xa4
 800b6dc:	4941      	ldr	r1, [pc, #260]	; (800b7e4 <tcp_create_segment+0x134>)
 800b6de:	4840      	ldr	r0, [pc, #256]	; (800b7e0 <tcp_create_segment+0x130>)
 800b6e0:	f004 fd00 	bl	80100e4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b6e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b6e8:	009b      	lsls	r3, r3, #2
 800b6ea:	b2db      	uxtb	r3, r3
 800b6ec:	f003 0304 	and.w	r3, r3, #4
 800b6f0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b6f2:	2003      	movs	r0, #3
 800b6f4:	f7fa fdb4 	bl	8006260 <memp_malloc>
 800b6f8:	6138      	str	r0, [r7, #16]
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d104      	bne.n	800b70a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800b700:	68b8      	ldr	r0, [r7, #8]
 800b702:	f7fb fc0b 	bl	8006f1c <pbuf_free>
    return NULL;
 800b706:	2300      	movs	r3, #0
 800b708:	e061      	b.n	800b7ce <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b710:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	2200      	movs	r2, #0
 800b716:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	68ba      	ldr	r2, [r7, #8]
 800b71c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	891a      	ldrh	r2, [r3, #8]
 800b722:	7dfb      	ldrb	r3, [r7, #23]
 800b724:	b29b      	uxth	r3, r3
 800b726:	429a      	cmp	r2, r3
 800b728:	d205      	bcs.n	800b736 <tcp_create_segment+0x86>
 800b72a:	4b2b      	ldr	r3, [pc, #172]	; (800b7d8 <tcp_create_segment+0x128>)
 800b72c:	22b0      	movs	r2, #176	; 0xb0
 800b72e:	492e      	ldr	r1, [pc, #184]	; (800b7e8 <tcp_create_segment+0x138>)
 800b730:	482b      	ldr	r0, [pc, #172]	; (800b7e0 <tcp_create_segment+0x130>)
 800b732:	f004 fcd7 	bl	80100e4 <iprintf>
  seg->len = p->tot_len - optlen;
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	891a      	ldrh	r2, [r3, #8]
 800b73a:	7dfb      	ldrb	r3, [r7, #23]
 800b73c:	b29b      	uxth	r3, r3
 800b73e:	1ad3      	subs	r3, r2, r3
 800b740:	b29a      	uxth	r2, r3
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b746:	2114      	movs	r1, #20
 800b748:	68b8      	ldr	r0, [r7, #8]
 800b74a:	f7fb fb51 	bl	8006df0 <pbuf_add_header>
 800b74e:	4603      	mov	r3, r0
 800b750:	2b00      	cmp	r3, #0
 800b752:	d004      	beq.n	800b75e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800b754:	6938      	ldr	r0, [r7, #16]
 800b756:	f7fd f844 	bl	80087e2 <tcp_seg_free>
    return NULL;
 800b75a:	2300      	movs	r3, #0
 800b75c:	e037      	b.n	800b7ce <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	685b      	ldr	r3, [r3, #4]
 800b762:	685a      	ldr	r2, [r3, #4]
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	8ada      	ldrh	r2, [r3, #22]
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	68dc      	ldr	r4, [r3, #12]
 800b770:	4610      	mov	r0, r2
 800b772:	f7fa f91f 	bl	80059b4 <lwip_htons>
 800b776:	4603      	mov	r3, r0
 800b778:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	8b1a      	ldrh	r2, [r3, #24]
 800b77e:	693b      	ldr	r3, [r7, #16]
 800b780:	68dc      	ldr	r4, [r3, #12]
 800b782:	4610      	mov	r0, r2
 800b784:	f7fa f916 	bl	80059b4 <lwip_htons>
 800b788:	4603      	mov	r3, r0
 800b78a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	68dc      	ldr	r4, [r3, #12]
 800b790:	6838      	ldr	r0, [r7, #0]
 800b792:	f7fa f924 	bl	80059de <lwip_htonl>
 800b796:	4603      	mov	r3, r0
 800b798:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b79a:	7dfb      	ldrb	r3, [r7, #23]
 800b79c:	089b      	lsrs	r3, r3, #2
 800b79e:	b2db      	uxtb	r3, r3
 800b7a0:	b29b      	uxth	r3, r3
 800b7a2:	3305      	adds	r3, #5
 800b7a4:	b29b      	uxth	r3, r3
 800b7a6:	031b      	lsls	r3, r3, #12
 800b7a8:	b29a      	uxth	r2, r3
 800b7aa:	79fb      	ldrb	r3, [r7, #7]
 800b7ac:	b29b      	uxth	r3, r3
 800b7ae:	4313      	orrs	r3, r2
 800b7b0:	b29a      	uxth	r2, r3
 800b7b2:	693b      	ldr	r3, [r7, #16]
 800b7b4:	68dc      	ldr	r4, [r3, #12]
 800b7b6:	4610      	mov	r0, r2
 800b7b8:	f7fa f8fc 	bl	80059b4 <lwip_htons>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	68db      	ldr	r3, [r3, #12]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	749a      	strb	r2, [r3, #18]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	74da      	strb	r2, [r3, #19]
  return seg;
 800b7cc:	693b      	ldr	r3, [r7, #16]
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	371c      	adds	r7, #28
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd90      	pop	{r4, r7, pc}
 800b7d6:	bf00      	nop
 800b7d8:	08012ce0 	.word	0x08012ce0
 800b7dc:	08012d14 	.word	0x08012d14
 800b7e0:	08012d34 	.word	0x08012d34
 800b7e4:	08012d5c 	.word	0x08012d5c
 800b7e8:	08012d80 	.word	0x08012d80

0800b7ec <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b086      	sub	sp, #24
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	607b      	str	r3, [r7, #4]
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	73fb      	strb	r3, [r7, #15]
 800b7f8:	460b      	mov	r3, r1
 800b7fa:	81bb      	strh	r3, [r7, #12]
 800b7fc:	4613      	mov	r3, r2
 800b7fe:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800b800:	89bb      	ldrh	r3, [r7, #12]
 800b802:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d105      	bne.n	800b816 <tcp_pbuf_prealloc+0x2a>
 800b80a:	4b30      	ldr	r3, [pc, #192]	; (800b8cc <tcp_pbuf_prealloc+0xe0>)
 800b80c:	22e8      	movs	r2, #232	; 0xe8
 800b80e:	4930      	ldr	r1, [pc, #192]	; (800b8d0 <tcp_pbuf_prealloc+0xe4>)
 800b810:	4830      	ldr	r0, [pc, #192]	; (800b8d4 <tcp_pbuf_prealloc+0xe8>)
 800b812:	f004 fc67 	bl	80100e4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800b816:	6a3b      	ldr	r3, [r7, #32]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d105      	bne.n	800b828 <tcp_pbuf_prealloc+0x3c>
 800b81c:	4b2b      	ldr	r3, [pc, #172]	; (800b8cc <tcp_pbuf_prealloc+0xe0>)
 800b81e:	22e9      	movs	r2, #233	; 0xe9
 800b820:	492d      	ldr	r1, [pc, #180]	; (800b8d8 <tcp_pbuf_prealloc+0xec>)
 800b822:	482c      	ldr	r0, [pc, #176]	; (800b8d4 <tcp_pbuf_prealloc+0xe8>)
 800b824:	f004 fc5e 	bl	80100e4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800b828:	89ba      	ldrh	r2, [r7, #12]
 800b82a:	897b      	ldrh	r3, [r7, #10]
 800b82c:	429a      	cmp	r2, r3
 800b82e:	d221      	bcs.n	800b874 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b830:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b834:	f003 0302 	and.w	r3, r3, #2
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d111      	bne.n	800b860 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800b83c:	6a3b      	ldr	r3, [r7, #32]
 800b83e:	8b5b      	ldrh	r3, [r3, #26]
 800b840:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b844:	2b00      	cmp	r3, #0
 800b846:	d115      	bne.n	800b874 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800b848:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d007      	beq.n	800b860 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800b850:	6a3b      	ldr	r3, [r7, #32]
 800b852:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800b854:	2b00      	cmp	r3, #0
 800b856:	d103      	bne.n	800b860 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800b858:	6a3b      	ldr	r3, [r7, #32]
 800b85a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d009      	beq.n	800b874 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800b860:	89bb      	ldrh	r3, [r7, #12]
 800b862:	f203 13cf 	addw	r3, r3, #463	; 0x1cf
 800b866:	f023 0203 	bic.w	r2, r3, #3
 800b86a:	897b      	ldrh	r3, [r7, #10]
 800b86c:	4293      	cmp	r3, r2
 800b86e:	bf28      	it	cs
 800b870:	4613      	movcs	r3, r2
 800b872:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800b874:	8af9      	ldrh	r1, [r7, #22]
 800b876:	7bfb      	ldrb	r3, [r7, #15]
 800b878:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b87c:	4618      	mov	r0, r3
 800b87e:	f7fb f869 	bl	8006954 <pbuf_alloc>
 800b882:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b884:	693b      	ldr	r3, [r7, #16]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d101      	bne.n	800b88e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800b88a:	2300      	movs	r3, #0
 800b88c:	e019      	b.n	800b8c2 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d006      	beq.n	800b8a4 <tcp_pbuf_prealloc+0xb8>
 800b896:	4b0d      	ldr	r3, [pc, #52]	; (800b8cc <tcp_pbuf_prealloc+0xe0>)
 800b898:	f240 120b 	movw	r2, #267	; 0x10b
 800b89c:	490f      	ldr	r1, [pc, #60]	; (800b8dc <tcp_pbuf_prealloc+0xf0>)
 800b89e:	480d      	ldr	r0, [pc, #52]	; (800b8d4 <tcp_pbuf_prealloc+0xe8>)
 800b8a0:	f004 fc20 	bl	80100e4 <iprintf>
  *oversize = p->len - length;
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	895a      	ldrh	r2, [r3, #10]
 800b8a8:	89bb      	ldrh	r3, [r7, #12]
 800b8aa:	1ad3      	subs	r3, r2, r3
 800b8ac:	b29a      	uxth	r2, r3
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	89ba      	ldrh	r2, [r7, #12]
 800b8b6:	811a      	strh	r2, [r3, #8]
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	891a      	ldrh	r2, [r3, #8]
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	815a      	strh	r2, [r3, #10]
  return p;
 800b8c0:	693b      	ldr	r3, [r7, #16]
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3718      	adds	r7, #24
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}
 800b8ca:	bf00      	nop
 800b8cc:	08012ce0 	.word	0x08012ce0
 800b8d0:	08012d98 	.word	0x08012d98
 800b8d4:	08012d34 	.word	0x08012d34
 800b8d8:	08012dbc 	.word	0x08012dbc
 800b8dc:	08012ddc 	.word	0x08012ddc

0800b8e0 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b082      	sub	sp, #8
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	460b      	mov	r3, r1
 800b8ea:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d106      	bne.n	800b900 <tcp_write_checks+0x20>
 800b8f2:	4b33      	ldr	r3, [pc, #204]	; (800b9c0 <tcp_write_checks+0xe0>)
 800b8f4:	f240 1233 	movw	r2, #307	; 0x133
 800b8f8:	4932      	ldr	r1, [pc, #200]	; (800b9c4 <tcp_write_checks+0xe4>)
 800b8fa:	4833      	ldr	r0, [pc, #204]	; (800b9c8 <tcp_write_checks+0xe8>)
 800b8fc:	f004 fbf2 	bl	80100e4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	7d1b      	ldrb	r3, [r3, #20]
 800b904:	2b04      	cmp	r3, #4
 800b906:	d00e      	beq.n	800b926 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800b90c:	2b07      	cmp	r3, #7
 800b90e:	d00a      	beq.n	800b926 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800b914:	2b02      	cmp	r3, #2
 800b916:	d006      	beq.n	800b926 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800b91c:	2b03      	cmp	r3, #3
 800b91e:	d002      	beq.n	800b926 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800b920:	f06f 030a 	mvn.w	r3, #10
 800b924:	e048      	b.n	800b9b8 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800b926:	887b      	ldrh	r3, [r7, #2]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d101      	bne.n	800b930 <tcp_write_checks+0x50>
    return ERR_OK;
 800b92c:	2300      	movs	r3, #0
 800b92e:	e043      	b.n	800b9b8 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b936:	887a      	ldrh	r2, [r7, #2]
 800b938:	429a      	cmp	r2, r3
 800b93a:	d909      	bls.n	800b950 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	8b5b      	ldrh	r3, [r3, #26]
 800b940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b944:	b29a      	uxth	r2, r3
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800b94a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b94e:	e033      	b.n	800b9b8 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b956:	2b0f      	cmp	r3, #15
 800b958:	d909      	bls.n	800b96e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	8b5b      	ldrh	r3, [r3, #26]
 800b95e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b962:	b29a      	uxth	r2, r3
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800b968:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b96c:	e024      	b.n	800b9b8 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b974:	2b00      	cmp	r3, #0
 800b976:	d00f      	beq.n	800b998 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d11a      	bne.n	800b9b6 <tcp_write_checks+0xd6>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b984:	2b00      	cmp	r3, #0
 800b986:	d116      	bne.n	800b9b6 <tcp_write_checks+0xd6>
 800b988:	4b0d      	ldr	r3, [pc, #52]	; (800b9c0 <tcp_write_checks+0xe0>)
 800b98a:	f240 1255 	movw	r2, #341	; 0x155
 800b98e:	490f      	ldr	r1, [pc, #60]	; (800b9cc <tcp_write_checks+0xec>)
 800b990:	480d      	ldr	r0, [pc, #52]	; (800b9c8 <tcp_write_checks+0xe8>)
 800b992:	f004 fba7 	bl	80100e4 <iprintf>
 800b996:	e00e      	b.n	800b9b6 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d103      	bne.n	800b9a8 <tcp_write_checks+0xc8>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d006      	beq.n	800b9b6 <tcp_write_checks+0xd6>
 800b9a8:	4b05      	ldr	r3, [pc, #20]	; (800b9c0 <tcp_write_checks+0xe0>)
 800b9aa:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800b9ae:	4908      	ldr	r1, [pc, #32]	; (800b9d0 <tcp_write_checks+0xf0>)
 800b9b0:	4805      	ldr	r0, [pc, #20]	; (800b9c8 <tcp_write_checks+0xe8>)
 800b9b2:	f004 fb97 	bl	80100e4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800b9b6:	2300      	movs	r3, #0
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3708      	adds	r7, #8
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}
 800b9c0:	08012ce0 	.word	0x08012ce0
 800b9c4:	08012df0 	.word	0x08012df0
 800b9c8:	08012d34 	.word	0x08012d34
 800b9cc:	08012e10 	.word	0x08012e10
 800b9d0:	08012e4c 	.word	0x08012e4c

0800b9d4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800b9d4:	b590      	push	{r4, r7, lr}
 800b9d6:	b09b      	sub	sp, #108	; 0x6c
 800b9d8:	af04      	add	r7, sp, #16
 800b9da:	60f8      	str	r0, [r7, #12]
 800b9dc:	60b9      	str	r1, [r7, #8]
 800b9de:	4611      	mov	r1, r2
 800b9e0:	461a      	mov	r2, r3
 800b9e2:	460b      	mov	r3, r1
 800b9e4:	80fb      	strh	r3, [r7, #6]
 800b9e6:	4613      	mov	r3, r2
 800b9e8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	653b      	str	r3, [r7, #80]	; 0x50
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800b9fe:	2300      	movs	r3, #0
 800ba00:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800ba04:	2300      	movs	r3, #0
 800ba06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800ba12:	2300      	movs	r3, #0
 800ba14:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d109      	bne.n	800ba30 <tcp_write+0x5c>
 800ba1c:	4ba4      	ldr	r3, [pc, #656]	; (800bcb0 <tcp_write+0x2dc>)
 800ba1e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800ba22:	49a4      	ldr	r1, [pc, #656]	; (800bcb4 <tcp_write+0x2e0>)
 800ba24:	48a4      	ldr	r0, [pc, #656]	; (800bcb8 <tcp_write+0x2e4>)
 800ba26:	f004 fb5d 	bl	80100e4 <iprintf>
 800ba2a:	f06f 030f 	mvn.w	r3, #15
 800ba2e:	e32a      	b.n	800c086 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ba36:	085b      	lsrs	r3, r3, #1
 800ba38:	b29a      	uxth	r2, r3
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	bf28      	it	cs
 800ba42:	4613      	movcs	r3, r2
 800ba44:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800ba46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d102      	bne.n	800ba52 <tcp_write+0x7e>
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ba50:	e000      	b.n	800ba54 <tcp_write+0x80>
 800ba52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba54:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d109      	bne.n	800ba70 <tcp_write+0x9c>
 800ba5c:	4b94      	ldr	r3, [pc, #592]	; (800bcb0 <tcp_write+0x2dc>)
 800ba5e:	f240 12ad 	movw	r2, #429	; 0x1ad
 800ba62:	4996      	ldr	r1, [pc, #600]	; (800bcbc <tcp_write+0x2e8>)
 800ba64:	4894      	ldr	r0, [pc, #592]	; (800bcb8 <tcp_write+0x2e4>)
 800ba66:	f004 fb3d 	bl	80100e4 <iprintf>
 800ba6a:	f06f 030f 	mvn.w	r3, #15
 800ba6e:	e30a      	b.n	800c086 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800ba70:	88fb      	ldrh	r3, [r7, #6]
 800ba72:	4619      	mov	r1, r3
 800ba74:	68f8      	ldr	r0, [r7, #12]
 800ba76:	f7ff ff33 	bl	800b8e0 <tcp_write_checks>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800ba80:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d002      	beq.n	800ba8e <tcp_write+0xba>
    return err;
 800ba88:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800ba8c:	e2fb      	b.n	800c086 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ba94:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ba98:	2300      	movs	r3, #0
 800ba9a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	f000 80f6 	beq.w	800bc94 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800baac:	653b      	str	r3, [r7, #80]	; 0x50
 800baae:	e002      	b.n	800bab6 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800bab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d1f8      	bne.n	800bab0 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800babe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bac0:	7a9b      	ldrb	r3, [r3, #10]
 800bac2:	009b      	lsls	r3, r3, #2
 800bac4:	b29b      	uxth	r3, r3
 800bac6:	f003 0304 	and.w	r3, r3, #4
 800baca:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800bacc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bad0:	891b      	ldrh	r3, [r3, #8]
 800bad2:	4619      	mov	r1, r3
 800bad4:	8c3b      	ldrh	r3, [r7, #32]
 800bad6:	440b      	add	r3, r1
 800bad8:	429a      	cmp	r2, r3
 800bada:	da06      	bge.n	800baea <tcp_write+0x116>
 800badc:	4b74      	ldr	r3, [pc, #464]	; (800bcb0 <tcp_write+0x2dc>)
 800bade:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800bae2:	4977      	ldr	r1, [pc, #476]	; (800bcc0 <tcp_write+0x2ec>)
 800bae4:	4874      	ldr	r0, [pc, #464]	; (800bcb8 <tcp_write+0x2e4>)
 800bae6:	f004 fafd 	bl	80100e4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800baea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800baec:	891a      	ldrh	r2, [r3, #8]
 800baee:	8c3b      	ldrh	r3, [r7, #32]
 800baf0:	4413      	add	r3, r2
 800baf2:	b29b      	uxth	r3, r3
 800baf4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800baf6:	1ad3      	subs	r3, r2, r3
 800baf8:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bb00:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800bb02:	8a7b      	ldrh	r3, [r7, #18]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d026      	beq.n	800bb56 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800bb08:	8a7b      	ldrh	r3, [r7, #18]
 800bb0a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800bb0c:	429a      	cmp	r2, r3
 800bb0e:	d206      	bcs.n	800bb1e <tcp_write+0x14a>
 800bb10:	4b67      	ldr	r3, [pc, #412]	; (800bcb0 <tcp_write+0x2dc>)
 800bb12:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800bb16:	496b      	ldr	r1, [pc, #428]	; (800bcc4 <tcp_write+0x2f0>)
 800bb18:	4867      	ldr	r0, [pc, #412]	; (800bcb8 <tcp_write+0x2e4>)
 800bb1a:	f004 fae3 	bl	80100e4 <iprintf>
      seg = last_unsent;
 800bb1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb20:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800bb22:	8a7b      	ldrh	r3, [r7, #18]
 800bb24:	88fa      	ldrh	r2, [r7, #6]
 800bb26:	4293      	cmp	r3, r2
 800bb28:	bf28      	it	cs
 800bb2a:	4613      	movcs	r3, r2
 800bb2c:	b29b      	uxth	r3, r3
 800bb2e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800bb30:	4293      	cmp	r3, r2
 800bb32:	bf28      	it	cs
 800bb34:	4613      	movcs	r3, r2
 800bb36:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800bb38:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bb3c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bb3e:	4413      	add	r3, r2
 800bb40:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800bb44:	8a7a      	ldrh	r2, [r7, #18]
 800bb46:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bb48:	1ad3      	subs	r3, r2, r3
 800bb4a:	b29b      	uxth	r3, r3
 800bb4c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800bb4e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800bb50:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bb52:	1ad3      	subs	r3, r2, r3
 800bb54:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800bb56:	8a7b      	ldrh	r3, [r7, #18]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d00b      	beq.n	800bb74 <tcp_write+0x1a0>
 800bb5c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bb60:	88fb      	ldrh	r3, [r7, #6]
 800bb62:	429a      	cmp	r2, r3
 800bb64:	d006      	beq.n	800bb74 <tcp_write+0x1a0>
 800bb66:	4b52      	ldr	r3, [pc, #328]	; (800bcb0 <tcp_write+0x2dc>)
 800bb68:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bb6c:	4956      	ldr	r1, [pc, #344]	; (800bcc8 <tcp_write+0x2f4>)
 800bb6e:	4852      	ldr	r0, [pc, #328]	; (800bcb8 <tcp_write+0x2e4>)
 800bb70:	f004 fab8 	bl	80100e4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800bb74:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bb78:	88fb      	ldrh	r3, [r7, #6]
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	f080 8167 	bcs.w	800be4e <tcp_write+0x47a>
 800bb80:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	f000 8163 	beq.w	800be4e <tcp_write+0x47a>
 800bb88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb8a:	891b      	ldrh	r3, [r3, #8]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	f000 815e 	beq.w	800be4e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800bb92:	88fa      	ldrh	r2, [r7, #6]
 800bb94:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bb98:	1ad2      	subs	r2, r2, r3
 800bb9a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	bfa8      	it	ge
 800bba0:	4613      	movge	r3, r2
 800bba2:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800bba4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bba6:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800bba8:	797b      	ldrb	r3, [r7, #5]
 800bbaa:	f003 0301 	and.w	r3, r3, #1
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d027      	beq.n	800bc02 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800bbb2:	f107 0012 	add.w	r0, r7, #18
 800bbb6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800bbb8:	8bf9      	ldrh	r1, [r7, #30]
 800bbba:	2301      	movs	r3, #1
 800bbbc:	9302      	str	r3, [sp, #8]
 800bbbe:	797b      	ldrb	r3, [r7, #5]
 800bbc0:	9301      	str	r3, [sp, #4]
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	9300      	str	r3, [sp, #0]
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	2000      	movs	r0, #0
 800bbca:	f7ff fe0f 	bl	800b7ec <tcp_pbuf_prealloc>
 800bbce:	6578      	str	r0, [r7, #84]	; 0x54
 800bbd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	f000 8225 	beq.w	800c022 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800bbd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbda:	6858      	ldr	r0, [r3, #4]
 800bbdc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bbe0:	68ba      	ldr	r2, [r7, #8]
 800bbe2:	4413      	add	r3, r2
 800bbe4:	8bfa      	ldrh	r2, [r7, #30]
 800bbe6:	4619      	mov	r1, r3
 800bbe8:	f004 fa4c 	bl	8010084 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800bbec:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800bbee:	f7fb fa1d 	bl	800702c <pbuf_clen>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	461a      	mov	r2, r3
 800bbf6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bbfa:	4413      	add	r3, r2
 800bbfc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800bc00:	e041      	b.n	800bc86 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800bc02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc04:	685b      	ldr	r3, [r3, #4]
 800bc06:	637b      	str	r3, [r7, #52]	; 0x34
 800bc08:	e002      	b.n	800bc10 <tcp_write+0x23c>
 800bc0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	637b      	str	r3, [r7, #52]	; 0x34
 800bc10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d1f8      	bne.n	800bc0a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800bc18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc1a:	7b1b      	ldrb	r3, [r3, #12]
 800bc1c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d115      	bne.n	800bc50 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800bc24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc26:	685b      	ldr	r3, [r3, #4]
 800bc28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc2a:	8952      	ldrh	r2, [r2, #10]
 800bc2c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800bc2e:	68ba      	ldr	r2, [r7, #8]
 800bc30:	429a      	cmp	r2, r3
 800bc32:	d10d      	bne.n	800bc50 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800bc34:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d006      	beq.n	800bc4a <tcp_write+0x276>
 800bc3c:	4b1c      	ldr	r3, [pc, #112]	; (800bcb0 <tcp_write+0x2dc>)
 800bc3e:	f240 2231 	movw	r2, #561	; 0x231
 800bc42:	4922      	ldr	r1, [pc, #136]	; (800bccc <tcp_write+0x2f8>)
 800bc44:	481c      	ldr	r0, [pc, #112]	; (800bcb8 <tcp_write+0x2e4>)
 800bc46:	f004 fa4d 	bl	80100e4 <iprintf>
          extendlen = seglen;
 800bc4a:	8bfb      	ldrh	r3, [r7, #30]
 800bc4c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800bc4e:	e01a      	b.n	800bc86 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800bc50:	8bfb      	ldrh	r3, [r7, #30]
 800bc52:	2201      	movs	r2, #1
 800bc54:	4619      	mov	r1, r3
 800bc56:	2000      	movs	r0, #0
 800bc58:	f7fa fe7c 	bl	8006954 <pbuf_alloc>
 800bc5c:	6578      	str	r0, [r7, #84]	; 0x54
 800bc5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	f000 81e0 	beq.w	800c026 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800bc66:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bc6a:	68ba      	ldr	r2, [r7, #8]
 800bc6c:	441a      	add	r2, r3
 800bc6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc70:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800bc72:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800bc74:	f7fb f9da 	bl	800702c <pbuf_clen>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	461a      	mov	r2, r3
 800bc7c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bc80:	4413      	add	r3, r2
 800bc82:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800bc86:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bc8a:	8bfb      	ldrh	r3, [r7, #30]
 800bc8c:	4413      	add	r3, r2
 800bc8e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800bc92:	e0dc      	b.n	800be4e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	f000 80d7 	beq.w	800be4e <tcp_write+0x47a>
 800bca0:	4b03      	ldr	r3, [pc, #12]	; (800bcb0 <tcp_write+0x2dc>)
 800bca2:	f240 224a 	movw	r2, #586	; 0x24a
 800bca6:	490a      	ldr	r1, [pc, #40]	; (800bcd0 <tcp_write+0x2fc>)
 800bca8:	4803      	ldr	r0, [pc, #12]	; (800bcb8 <tcp_write+0x2e4>)
 800bcaa:	f004 fa1b 	bl	80100e4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800bcae:	e0ce      	b.n	800be4e <tcp_write+0x47a>
 800bcb0:	08012ce0 	.word	0x08012ce0
 800bcb4:	08012e80 	.word	0x08012e80
 800bcb8:	08012d34 	.word	0x08012d34
 800bcbc:	08012e98 	.word	0x08012e98
 800bcc0:	08012ecc 	.word	0x08012ecc
 800bcc4:	08012ee4 	.word	0x08012ee4
 800bcc8:	08012f04 	.word	0x08012f04
 800bccc:	08012f24 	.word	0x08012f24
 800bcd0:	08012f50 	.word	0x08012f50
    struct pbuf *p;
    u16_t left = len - pos;
 800bcd4:	88fa      	ldrh	r2, [r7, #6]
 800bcd6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bcda:	1ad3      	subs	r3, r2, r3
 800bcdc:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800bcde:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bce2:	b29b      	uxth	r3, r3
 800bce4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bce6:	1ad3      	subs	r3, r2, r3
 800bce8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800bcea:	8b7a      	ldrh	r2, [r7, #26]
 800bcec:	8bbb      	ldrh	r3, [r7, #28]
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	bf28      	it	cs
 800bcf2:	4613      	movcs	r3, r2
 800bcf4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800bcf6:	797b      	ldrb	r3, [r7, #5]
 800bcf8:	f003 0301 	and.w	r3, r3, #1
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d036      	beq.n	800bd6e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800bd00:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bd04:	b29a      	uxth	r2, r3
 800bd06:	8b3b      	ldrh	r3, [r7, #24]
 800bd08:	4413      	add	r3, r2
 800bd0a:	b299      	uxth	r1, r3
 800bd0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	bf0c      	ite	eq
 800bd12:	2301      	moveq	r3, #1
 800bd14:	2300      	movne	r3, #0
 800bd16:	b2db      	uxtb	r3, r3
 800bd18:	f107 0012 	add.w	r0, r7, #18
 800bd1c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bd1e:	9302      	str	r3, [sp, #8]
 800bd20:	797b      	ldrb	r3, [r7, #5]
 800bd22:	9301      	str	r3, [sp, #4]
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	9300      	str	r3, [sp, #0]
 800bd28:	4603      	mov	r3, r0
 800bd2a:	2036      	movs	r0, #54	; 0x36
 800bd2c:	f7ff fd5e 	bl	800b7ec <tcp_pbuf_prealloc>
 800bd30:	6338      	str	r0, [r7, #48]	; 0x30
 800bd32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	f000 8178 	beq.w	800c02a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800bd3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd3c:	895b      	ldrh	r3, [r3, #10]
 800bd3e:	8b3a      	ldrh	r2, [r7, #24]
 800bd40:	429a      	cmp	r2, r3
 800bd42:	d906      	bls.n	800bd52 <tcp_write+0x37e>
 800bd44:	4b8c      	ldr	r3, [pc, #560]	; (800bf78 <tcp_write+0x5a4>)
 800bd46:	f240 2266 	movw	r2, #614	; 0x266
 800bd4a:	498c      	ldr	r1, [pc, #560]	; (800bf7c <tcp_write+0x5a8>)
 800bd4c:	488c      	ldr	r0, [pc, #560]	; (800bf80 <tcp_write+0x5ac>)
 800bd4e:	f004 f9c9 	bl	80100e4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800bd52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd54:	685a      	ldr	r2, [r3, #4]
 800bd56:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bd5a:	18d0      	adds	r0, r2, r3
 800bd5c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bd60:	68ba      	ldr	r2, [r7, #8]
 800bd62:	4413      	add	r3, r2
 800bd64:	8b3a      	ldrh	r2, [r7, #24]
 800bd66:	4619      	mov	r1, r3
 800bd68:	f004 f98c 	bl	8010084 <memcpy>
 800bd6c:	e02f      	b.n	800bdce <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800bd6e:	8a7b      	ldrh	r3, [r7, #18]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d006      	beq.n	800bd82 <tcp_write+0x3ae>
 800bd74:	4b80      	ldr	r3, [pc, #512]	; (800bf78 <tcp_write+0x5a4>)
 800bd76:	f240 2271 	movw	r2, #625	; 0x271
 800bd7a:	4982      	ldr	r1, [pc, #520]	; (800bf84 <tcp_write+0x5b0>)
 800bd7c:	4880      	ldr	r0, [pc, #512]	; (800bf80 <tcp_write+0x5ac>)
 800bd7e:	f004 f9b1 	bl	80100e4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800bd82:	8b3b      	ldrh	r3, [r7, #24]
 800bd84:	2201      	movs	r2, #1
 800bd86:	4619      	mov	r1, r3
 800bd88:	2036      	movs	r0, #54	; 0x36
 800bd8a:	f7fa fde3 	bl	8006954 <pbuf_alloc>
 800bd8e:	6178      	str	r0, [r7, #20]
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	f000 814b 	beq.w	800c02e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800bd98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bd9c:	68ba      	ldr	r2, [r7, #8]
 800bd9e:	441a      	add	r2, r3
 800bda0:	697b      	ldr	r3, [r7, #20]
 800bda2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800bda4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bda8:	b29b      	uxth	r3, r3
 800bdaa:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bdae:	4619      	mov	r1, r3
 800bdb0:	2036      	movs	r0, #54	; 0x36
 800bdb2:	f7fa fdcf 	bl	8006954 <pbuf_alloc>
 800bdb6:	6338      	str	r0, [r7, #48]	; 0x30
 800bdb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d103      	bne.n	800bdc6 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800bdbe:	6978      	ldr	r0, [r7, #20]
 800bdc0:	f7fb f8ac 	bl	8006f1c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800bdc4:	e136      	b.n	800c034 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800bdc6:	6979      	ldr	r1, [r7, #20]
 800bdc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdca:	f7fb f969 	bl	80070a0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800bdce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdd0:	f7fb f92c 	bl	800702c <pbuf_clen>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	461a      	mov	r2, r3
 800bdd8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bddc:	4413      	add	r3, r2
 800bdde:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800bde2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bde6:	2b10      	cmp	r3, #16
 800bde8:	d903      	bls.n	800bdf2 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800bdea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdec:	f7fb f896 	bl	8006f1c <pbuf_free>
      goto memerr;
 800bdf0:	e120      	b.n	800c034 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bdf6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bdfa:	441a      	add	r2, r3
 800bdfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be00:	9300      	str	r3, [sp, #0]
 800be02:	4613      	mov	r3, r2
 800be04:	2200      	movs	r2, #0
 800be06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800be08:	68f8      	ldr	r0, [r7, #12]
 800be0a:	f7ff fc51 	bl	800b6b0 <tcp_create_segment>
 800be0e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800be10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be12:	2b00      	cmp	r3, #0
 800be14:	f000 810d 	beq.w	800c032 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800be18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d102      	bne.n	800be24 <tcp_write+0x450>
      queue = seg;
 800be1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be20:	647b      	str	r3, [r7, #68]	; 0x44
 800be22:	e00c      	b.n	800be3e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800be24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be26:	2b00      	cmp	r3, #0
 800be28:	d106      	bne.n	800be38 <tcp_write+0x464>
 800be2a:	4b53      	ldr	r3, [pc, #332]	; (800bf78 <tcp_write+0x5a4>)
 800be2c:	f240 22ab 	movw	r2, #683	; 0x2ab
 800be30:	4955      	ldr	r1, [pc, #340]	; (800bf88 <tcp_write+0x5b4>)
 800be32:	4853      	ldr	r0, [pc, #332]	; (800bf80 <tcp_write+0x5ac>)
 800be34:	f004 f956 	bl	80100e4 <iprintf>
      prev_seg->next = seg;
 800be38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800be3c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800be3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be40:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800be42:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800be46:	8b3b      	ldrh	r3, [r7, #24]
 800be48:	4413      	add	r3, r2
 800be4a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800be4e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800be52:	88fb      	ldrh	r3, [r7, #6]
 800be54:	429a      	cmp	r2, r3
 800be56:	f4ff af3d 	bcc.w	800bcd4 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800be5a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d02c      	beq.n	800beba <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800be60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be62:	685b      	ldr	r3, [r3, #4]
 800be64:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be66:	e01e      	b.n	800bea6 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800be68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be6a:	891a      	ldrh	r2, [r3, #8]
 800be6c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800be6e:	4413      	add	r3, r2
 800be70:	b29a      	uxth	r2, r3
 800be72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be74:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800be76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d110      	bne.n	800bea0 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800be7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be80:	685b      	ldr	r3, [r3, #4]
 800be82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be84:	8952      	ldrh	r2, [r2, #10]
 800be86:	4413      	add	r3, r2
 800be88:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800be8a:	68b9      	ldr	r1, [r7, #8]
 800be8c:	4618      	mov	r0, r3
 800be8e:	f004 f8f9 	bl	8010084 <memcpy>
        p->len += oversize_used;
 800be92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be94:	895a      	ldrh	r2, [r3, #10]
 800be96:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800be98:	4413      	add	r3, r2
 800be9a:	b29a      	uxth	r2, r3
 800be9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be9e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800bea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d1dd      	bne.n	800be68 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800beac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800beae:	891a      	ldrh	r2, [r3, #8]
 800beb0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800beb2:	4413      	add	r3, r2
 800beb4:	b29a      	uxth	r2, r3
 800beb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800beb8:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800beba:	8a7a      	ldrh	r2, [r7, #18]
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800bec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d018      	beq.n	800befa <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800bec8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800beca:	2b00      	cmp	r3, #0
 800becc:	d106      	bne.n	800bedc <tcp_write+0x508>
 800bece:	4b2a      	ldr	r3, [pc, #168]	; (800bf78 <tcp_write+0x5a4>)
 800bed0:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800bed4:	492d      	ldr	r1, [pc, #180]	; (800bf8c <tcp_write+0x5b8>)
 800bed6:	482a      	ldr	r0, [pc, #168]	; (800bf80 <tcp_write+0x5ac>)
 800bed8:	f004 f904 	bl	80100e4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800bedc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bede:	685b      	ldr	r3, [r3, #4]
 800bee0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bee2:	4618      	mov	r0, r3
 800bee4:	f7fb f8dc 	bl	80070a0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800bee8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800beea:	891a      	ldrh	r2, [r3, #8]
 800beec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800beee:	891b      	ldrh	r3, [r3, #8]
 800bef0:	4413      	add	r3, r2
 800bef2:	b29a      	uxth	r2, r3
 800bef4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bef6:	811a      	strh	r2, [r3, #8]
 800bef8:	e037      	b.n	800bf6a <tcp_write+0x596>
  } else if (extendlen > 0) {
 800befa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800befc:	2b00      	cmp	r3, #0
 800befe:	d034      	beq.n	800bf6a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800bf00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d003      	beq.n	800bf0e <tcp_write+0x53a>
 800bf06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf08:	685b      	ldr	r3, [r3, #4]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d106      	bne.n	800bf1c <tcp_write+0x548>
 800bf0e:	4b1a      	ldr	r3, [pc, #104]	; (800bf78 <tcp_write+0x5a4>)
 800bf10:	f240 22e6 	movw	r2, #742	; 0x2e6
 800bf14:	491e      	ldr	r1, [pc, #120]	; (800bf90 <tcp_write+0x5bc>)
 800bf16:	481a      	ldr	r0, [pc, #104]	; (800bf80 <tcp_write+0x5ac>)
 800bf18:	f004 f8e4 	bl	80100e4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800bf1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf1e:	685b      	ldr	r3, [r3, #4]
 800bf20:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf22:	e009      	b.n	800bf38 <tcp_write+0x564>
      p->tot_len += extendlen;
 800bf24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf26:	891a      	ldrh	r2, [r3, #8]
 800bf28:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bf2a:	4413      	add	r3, r2
 800bf2c:	b29a      	uxth	r2, r3
 800bf2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf30:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800bf32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d1f1      	bne.n	800bf24 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800bf40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf42:	891a      	ldrh	r2, [r3, #8]
 800bf44:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bf46:	4413      	add	r3, r2
 800bf48:	b29a      	uxth	r2, r3
 800bf4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf4c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800bf4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf50:	895a      	ldrh	r2, [r3, #10]
 800bf52:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bf54:	4413      	add	r3, r2
 800bf56:	b29a      	uxth	r2, r3
 800bf58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf5a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800bf5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf5e:	891a      	ldrh	r2, [r3, #8]
 800bf60:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800bf62:	4413      	add	r3, r2
 800bf64:	b29a      	uxth	r2, r3
 800bf66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf68:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800bf6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d111      	bne.n	800bf94 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf74:	66da      	str	r2, [r3, #108]	; 0x6c
 800bf76:	e010      	b.n	800bf9a <tcp_write+0x5c6>
 800bf78:	08012ce0 	.word	0x08012ce0
 800bf7c:	08012f80 	.word	0x08012f80
 800bf80:	08012d34 	.word	0x08012d34
 800bf84:	08012fc0 	.word	0x08012fc0
 800bf88:	08012fd0 	.word	0x08012fd0
 800bf8c:	08012fe4 	.word	0x08012fe4
 800bf90:	0801301c 	.word	0x0801301c
  } else {
    last_unsent->next = queue;
 800bf94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf98:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bf9e:	88fb      	ldrh	r3, [r7, #6]
 800bfa0:	441a      	add	r2, r3
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800bfac:	88fb      	ldrh	r3, [r7, #6]
 800bfae:	1ad3      	subs	r3, r2, r3
 800bfb0:	b29a      	uxth	r2, r3
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800bfbe:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d00e      	beq.n	800bfea <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d10a      	bne.n	800bfea <tcp_write+0x616>
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d106      	bne.n	800bfea <tcp_write+0x616>
 800bfdc:	4b2c      	ldr	r3, [pc, #176]	; (800c090 <tcp_write+0x6bc>)
 800bfde:	f240 3212 	movw	r2, #786	; 0x312
 800bfe2:	492c      	ldr	r1, [pc, #176]	; (800c094 <tcp_write+0x6c0>)
 800bfe4:	482c      	ldr	r0, [pc, #176]	; (800c098 <tcp_write+0x6c4>)
 800bfe6:	f004 f87d 	bl	80100e4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800bfea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d016      	beq.n	800c01e <tcp_write+0x64a>
 800bff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bff2:	68db      	ldr	r3, [r3, #12]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d012      	beq.n	800c01e <tcp_write+0x64a>
 800bff8:	797b      	ldrb	r3, [r7, #5]
 800bffa:	f003 0302 	and.w	r3, r3, #2
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d10d      	bne.n	800c01e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800c002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c004:	68db      	ldr	r3, [r3, #12]
 800c006:	899b      	ldrh	r3, [r3, #12]
 800c008:	b29c      	uxth	r4, r3
 800c00a:	2008      	movs	r0, #8
 800c00c:	f7f9 fcd2 	bl	80059b4 <lwip_htons>
 800c010:	4603      	mov	r3, r0
 800c012:	461a      	mov	r2, r3
 800c014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c016:	68db      	ldr	r3, [r3, #12]
 800c018:	4322      	orrs	r2, r4
 800c01a:	b292      	uxth	r2, r2
 800c01c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800c01e:	2300      	movs	r3, #0
 800c020:	e031      	b.n	800c086 <tcp_write+0x6b2>
          goto memerr;
 800c022:	bf00      	nop
 800c024:	e006      	b.n	800c034 <tcp_write+0x660>
            goto memerr;
 800c026:	bf00      	nop
 800c028:	e004      	b.n	800c034 <tcp_write+0x660>
        goto memerr;
 800c02a:	bf00      	nop
 800c02c:	e002      	b.n	800c034 <tcp_write+0x660>
        goto memerr;
 800c02e:	bf00      	nop
 800c030:	e000      	b.n	800c034 <tcp_write+0x660>
      goto memerr;
 800c032:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	8b5b      	ldrh	r3, [r3, #26]
 800c038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c03c:	b29a      	uxth	r2, r3
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800c042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c044:	2b00      	cmp	r3, #0
 800c046:	d002      	beq.n	800c04e <tcp_write+0x67a>
    pbuf_free(concat_p);
 800c048:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c04a:	f7fa ff67 	bl	8006f1c <pbuf_free>
  }
  if (queue != NULL) {
 800c04e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c050:	2b00      	cmp	r3, #0
 800c052:	d002      	beq.n	800c05a <tcp_write+0x686>
    tcp_segs_free(queue);
 800c054:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c056:	f7fc fbaf 	bl	80087b8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c060:	2b00      	cmp	r3, #0
 800c062:	d00e      	beq.n	800c082 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d10a      	bne.n	800c082 <tcp_write+0x6ae>
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c070:	2b00      	cmp	r3, #0
 800c072:	d106      	bne.n	800c082 <tcp_write+0x6ae>
 800c074:	4b06      	ldr	r3, [pc, #24]	; (800c090 <tcp_write+0x6bc>)
 800c076:	f240 3227 	movw	r2, #807	; 0x327
 800c07a:	4906      	ldr	r1, [pc, #24]	; (800c094 <tcp_write+0x6c0>)
 800c07c:	4806      	ldr	r0, [pc, #24]	; (800c098 <tcp_write+0x6c4>)
 800c07e:	f004 f831 	bl	80100e4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800c082:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800c086:	4618      	mov	r0, r3
 800c088:	375c      	adds	r7, #92	; 0x5c
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd90      	pop	{r4, r7, pc}
 800c08e:	bf00      	nop
 800c090:	08012ce0 	.word	0x08012ce0
 800c094:	08013054 	.word	0x08013054
 800c098:	08012d34 	.word	0x08012d34

0800c09c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800c09c:	b590      	push	{r4, r7, lr}
 800c09e:	b08b      	sub	sp, #44	; 0x2c
 800c0a0:	af02      	add	r7, sp, #8
 800c0a2:	6078      	str	r0, [r7, #4]
 800c0a4:	460b      	mov	r3, r1
 800c0a6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	61fb      	str	r3, [r7, #28]
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d106      	bne.n	800c0c8 <tcp_split_unsent_seg+0x2c>
 800c0ba:	4b95      	ldr	r3, [pc, #596]	; (800c310 <tcp_split_unsent_seg+0x274>)
 800c0bc:	f240 324b 	movw	r2, #843	; 0x34b
 800c0c0:	4994      	ldr	r1, [pc, #592]	; (800c314 <tcp_split_unsent_seg+0x278>)
 800c0c2:	4895      	ldr	r0, [pc, #596]	; (800c318 <tcp_split_unsent_seg+0x27c>)
 800c0c4:	f004 f80e 	bl	80100e4 <iprintf>

  useg = pcb->unsent;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0cc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800c0ce:	697b      	ldr	r3, [r7, #20]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d102      	bne.n	800c0da <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800c0d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c0d8:	e116      	b.n	800c308 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800c0da:	887b      	ldrh	r3, [r7, #2]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d109      	bne.n	800c0f4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800c0e0:	4b8b      	ldr	r3, [pc, #556]	; (800c310 <tcp_split_unsent_seg+0x274>)
 800c0e2:	f240 3253 	movw	r2, #851	; 0x353
 800c0e6:	498d      	ldr	r1, [pc, #564]	; (800c31c <tcp_split_unsent_seg+0x280>)
 800c0e8:	488b      	ldr	r0, [pc, #556]	; (800c318 <tcp_split_unsent_seg+0x27c>)
 800c0ea:	f003 fffb 	bl	80100e4 <iprintf>
    return ERR_VAL;
 800c0ee:	f06f 0305 	mvn.w	r3, #5
 800c0f2:	e109      	b.n	800c308 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	891b      	ldrh	r3, [r3, #8]
 800c0f8:	887a      	ldrh	r2, [r7, #2]
 800c0fa:	429a      	cmp	r2, r3
 800c0fc:	d301      	bcc.n	800c102 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800c0fe:	2300      	movs	r3, #0
 800c100:	e102      	b.n	800c308 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c106:	887a      	ldrh	r2, [r7, #2]
 800c108:	429a      	cmp	r2, r3
 800c10a:	d906      	bls.n	800c11a <tcp_split_unsent_seg+0x7e>
 800c10c:	4b80      	ldr	r3, [pc, #512]	; (800c310 <tcp_split_unsent_seg+0x274>)
 800c10e:	f240 325b 	movw	r2, #859	; 0x35b
 800c112:	4983      	ldr	r1, [pc, #524]	; (800c320 <tcp_split_unsent_seg+0x284>)
 800c114:	4880      	ldr	r0, [pc, #512]	; (800c318 <tcp_split_unsent_seg+0x27c>)
 800c116:	f003 ffe5 	bl	80100e4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800c11a:	697b      	ldr	r3, [r7, #20]
 800c11c:	891b      	ldrh	r3, [r3, #8]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d106      	bne.n	800c130 <tcp_split_unsent_seg+0x94>
 800c122:	4b7b      	ldr	r3, [pc, #492]	; (800c310 <tcp_split_unsent_seg+0x274>)
 800c124:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800c128:	497e      	ldr	r1, [pc, #504]	; (800c324 <tcp_split_unsent_seg+0x288>)
 800c12a:	487b      	ldr	r0, [pc, #492]	; (800c318 <tcp_split_unsent_seg+0x27c>)
 800c12c:	f003 ffda 	bl	80100e4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	7a9b      	ldrb	r3, [r3, #10]
 800c134:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c136:	7bfb      	ldrb	r3, [r7, #15]
 800c138:	009b      	lsls	r3, r3, #2
 800c13a:	b2db      	uxtb	r3, r3
 800c13c:	f003 0304 	and.w	r3, r3, #4
 800c140:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	891a      	ldrh	r2, [r3, #8]
 800c146:	887b      	ldrh	r3, [r7, #2]
 800c148:	1ad3      	subs	r3, r2, r3
 800c14a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c14c:	7bbb      	ldrb	r3, [r7, #14]
 800c14e:	b29a      	uxth	r2, r3
 800c150:	89bb      	ldrh	r3, [r7, #12]
 800c152:	4413      	add	r3, r2
 800c154:	b29b      	uxth	r3, r3
 800c156:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c15a:	4619      	mov	r1, r3
 800c15c:	2036      	movs	r0, #54	; 0x36
 800c15e:	f7fa fbf9 	bl	8006954 <pbuf_alloc>
 800c162:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	2b00      	cmp	r3, #0
 800c168:	f000 80b7 	beq.w	800c2da <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	685b      	ldr	r3, [r3, #4]
 800c170:	891a      	ldrh	r2, [r3, #8]
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	891b      	ldrh	r3, [r3, #8]
 800c176:	1ad3      	subs	r3, r2, r3
 800c178:	b29a      	uxth	r2, r3
 800c17a:	887b      	ldrh	r3, [r7, #2]
 800c17c:	4413      	add	r3, r2
 800c17e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	6858      	ldr	r0, [r3, #4]
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	685a      	ldr	r2, [r3, #4]
 800c188:	7bbb      	ldrb	r3, [r7, #14]
 800c18a:	18d1      	adds	r1, r2, r3
 800c18c:	897b      	ldrh	r3, [r7, #10]
 800c18e:	89ba      	ldrh	r2, [r7, #12]
 800c190:	f7fb f8ae 	bl	80072f0 <pbuf_copy_partial>
 800c194:	4603      	mov	r3, r0
 800c196:	461a      	mov	r2, r3
 800c198:	89bb      	ldrh	r3, [r7, #12]
 800c19a:	4293      	cmp	r3, r2
 800c19c:	f040 809f 	bne.w	800c2de <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	68db      	ldr	r3, [r3, #12]
 800c1a4:	899b      	ldrh	r3, [r3, #12]
 800c1a6:	b29b      	uxth	r3, r3
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	f7f9 fc03 	bl	80059b4 <lwip_htons>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	b2db      	uxtb	r3, r3
 800c1b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c1b6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800c1bc:	7efb      	ldrb	r3, [r7, #27]
 800c1be:	f003 0308 	and.w	r3, r3, #8
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d007      	beq.n	800c1d6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800c1c6:	7efb      	ldrb	r3, [r7, #27]
 800c1c8:	f023 0308 	bic.w	r3, r3, #8
 800c1cc:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800c1ce:	7ebb      	ldrb	r3, [r7, #26]
 800c1d0:	f043 0308 	orr.w	r3, r3, #8
 800c1d4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800c1d6:	7efb      	ldrb	r3, [r7, #27]
 800c1d8:	f003 0301 	and.w	r3, r3, #1
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d007      	beq.n	800c1f0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800c1e0:	7efb      	ldrb	r3, [r7, #27]
 800c1e2:	f023 0301 	bic.w	r3, r3, #1
 800c1e6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800c1e8:	7ebb      	ldrb	r3, [r7, #26]
 800c1ea:	f043 0301 	orr.w	r3, r3, #1
 800c1ee:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c1f0:	697b      	ldr	r3, [r7, #20]
 800c1f2:	68db      	ldr	r3, [r3, #12]
 800c1f4:	685b      	ldr	r3, [r3, #4]
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f7f9 fbf1 	bl	80059de <lwip_htonl>
 800c1fc:	4602      	mov	r2, r0
 800c1fe:	887b      	ldrh	r3, [r7, #2]
 800c200:	18d1      	adds	r1, r2, r3
 800c202:	7eba      	ldrb	r2, [r7, #26]
 800c204:	7bfb      	ldrb	r3, [r7, #15]
 800c206:	9300      	str	r3, [sp, #0]
 800c208:	460b      	mov	r3, r1
 800c20a:	6939      	ldr	r1, [r7, #16]
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f7ff fa4f 	bl	800b6b0 <tcp_create_segment>
 800c212:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800c214:	69fb      	ldr	r3, [r7, #28]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d063      	beq.n	800c2e2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	685b      	ldr	r3, [r3, #4]
 800c21e:	4618      	mov	r0, r3
 800c220:	f7fa ff04 	bl	800702c <pbuf_clen>
 800c224:	4603      	mov	r3, r0
 800c226:	461a      	mov	r2, r3
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c22e:	1a9b      	subs	r3, r3, r2
 800c230:	b29a      	uxth	r2, r3
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	6858      	ldr	r0, [r3, #4]
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	685b      	ldr	r3, [r3, #4]
 800c240:	891a      	ldrh	r2, [r3, #8]
 800c242:	89bb      	ldrh	r3, [r7, #12]
 800c244:	1ad3      	subs	r3, r2, r3
 800c246:	b29b      	uxth	r3, r3
 800c248:	4619      	mov	r1, r3
 800c24a:	f7fa fce1 	bl	8006c10 <pbuf_realloc>
  useg->len -= remainder;
 800c24e:	697b      	ldr	r3, [r7, #20]
 800c250:	891a      	ldrh	r2, [r3, #8]
 800c252:	89bb      	ldrh	r3, [r7, #12]
 800c254:	1ad3      	subs	r3, r2, r3
 800c256:	b29a      	uxth	r2, r3
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	68db      	ldr	r3, [r3, #12]
 800c260:	899b      	ldrh	r3, [r3, #12]
 800c262:	b29c      	uxth	r4, r3
 800c264:	7efb      	ldrb	r3, [r7, #27]
 800c266:	b29b      	uxth	r3, r3
 800c268:	4618      	mov	r0, r3
 800c26a:	f7f9 fba3 	bl	80059b4 <lwip_htons>
 800c26e:	4603      	mov	r3, r0
 800c270:	461a      	mov	r2, r3
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	68db      	ldr	r3, [r3, #12]
 800c276:	4322      	orrs	r2, r4
 800c278:	b292      	uxth	r2, r2
 800c27a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	685b      	ldr	r3, [r3, #4]
 800c280:	4618      	mov	r0, r3
 800c282:	f7fa fed3 	bl	800702c <pbuf_clen>
 800c286:	4603      	mov	r3, r0
 800c288:	461a      	mov	r2, r3
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c290:	4413      	add	r3, r2
 800c292:	b29a      	uxth	r2, r3
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c29a:	69fb      	ldr	r3, [r7, #28]
 800c29c:	685b      	ldr	r3, [r3, #4]
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f7fa fec4 	bl	800702c <pbuf_clen>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	461a      	mov	r2, r3
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c2ae:	4413      	add	r3, r2
 800c2b0:	b29a      	uxth	r2, r3
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	681a      	ldr	r2, [r3, #0]
 800c2bc:	69fb      	ldr	r3, [r7, #28]
 800c2be:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	69fa      	ldr	r2, [r7, #28]
 800c2c4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800c2c6:	69fb      	ldr	r3, [r7, #28]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d103      	bne.n	800c2d6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	e016      	b.n	800c308 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800c2da:	bf00      	nop
 800c2dc:	e002      	b.n	800c2e4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c2de:	bf00      	nop
 800c2e0:	e000      	b.n	800c2e4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c2e2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800c2e4:	69fb      	ldr	r3, [r7, #28]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d006      	beq.n	800c2f8 <tcp_split_unsent_seg+0x25c>
 800c2ea:	4b09      	ldr	r3, [pc, #36]	; (800c310 <tcp_split_unsent_seg+0x274>)
 800c2ec:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800c2f0:	490d      	ldr	r1, [pc, #52]	; (800c328 <tcp_split_unsent_seg+0x28c>)
 800c2f2:	4809      	ldr	r0, [pc, #36]	; (800c318 <tcp_split_unsent_seg+0x27c>)
 800c2f4:	f003 fef6 	bl	80100e4 <iprintf>
  if (p != NULL) {
 800c2f8:	693b      	ldr	r3, [r7, #16]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d002      	beq.n	800c304 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800c2fe:	6938      	ldr	r0, [r7, #16]
 800c300:	f7fa fe0c 	bl	8006f1c <pbuf_free>
  }

  return ERR_MEM;
 800c304:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800c308:	4618      	mov	r0, r3
 800c30a:	3724      	adds	r7, #36	; 0x24
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd90      	pop	{r4, r7, pc}
 800c310:	08012ce0 	.word	0x08012ce0
 800c314:	08013074 	.word	0x08013074
 800c318:	08012d34 	.word	0x08012d34
 800c31c:	08013098 	.word	0x08013098
 800c320:	080130bc 	.word	0x080130bc
 800c324:	080130cc 	.word	0x080130cc
 800c328:	080130dc 	.word	0x080130dc

0800c32c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800c32c:	b590      	push	{r4, r7, lr}
 800c32e:	b085      	sub	sp, #20
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d106      	bne.n	800c348 <tcp_send_fin+0x1c>
 800c33a:	4b21      	ldr	r3, [pc, #132]	; (800c3c0 <tcp_send_fin+0x94>)
 800c33c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800c340:	4920      	ldr	r1, [pc, #128]	; (800c3c4 <tcp_send_fin+0x98>)
 800c342:	4821      	ldr	r0, [pc, #132]	; (800c3c8 <tcp_send_fin+0x9c>)
 800c344:	f003 fece 	bl	80100e4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d02e      	beq.n	800c3ae <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c354:	60fb      	str	r3, [r7, #12]
 800c356:	e002      	b.n	800c35e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d1f8      	bne.n	800c358 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	68db      	ldr	r3, [r3, #12]
 800c36a:	899b      	ldrh	r3, [r3, #12]
 800c36c:	b29b      	uxth	r3, r3
 800c36e:	4618      	mov	r0, r3
 800c370:	f7f9 fb20 	bl	80059b4 <lwip_htons>
 800c374:	4603      	mov	r3, r0
 800c376:	b2db      	uxtb	r3, r3
 800c378:	f003 0307 	and.w	r3, r3, #7
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d116      	bne.n	800c3ae <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	68db      	ldr	r3, [r3, #12]
 800c384:	899b      	ldrh	r3, [r3, #12]
 800c386:	b29c      	uxth	r4, r3
 800c388:	2001      	movs	r0, #1
 800c38a:	f7f9 fb13 	bl	80059b4 <lwip_htons>
 800c38e:	4603      	mov	r3, r0
 800c390:	461a      	mov	r2, r3
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	68db      	ldr	r3, [r3, #12]
 800c396:	4322      	orrs	r2, r4
 800c398:	b292      	uxth	r2, r2
 800c39a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	8b5b      	ldrh	r3, [r3, #26]
 800c3a0:	f043 0320 	orr.w	r3, r3, #32
 800c3a4:	b29a      	uxth	r2, r3
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	e004      	b.n	800c3b8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800c3ae:	2101      	movs	r1, #1
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f000 f80b 	bl	800c3cc <tcp_enqueue_flags>
 800c3b6:	4603      	mov	r3, r0
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	3714      	adds	r7, #20
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd90      	pop	{r4, r7, pc}
 800c3c0:	08012ce0 	.word	0x08012ce0
 800c3c4:	080130e8 	.word	0x080130e8
 800c3c8:	08012d34 	.word	0x08012d34

0800c3cc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b08a      	sub	sp, #40	; 0x28
 800c3d0:	af02      	add	r7, sp, #8
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	460b      	mov	r3, r1
 800c3d6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800c3d8:	2300      	movs	r3, #0
 800c3da:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800c3dc:	2300      	movs	r3, #0
 800c3de:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c3e0:	78fb      	ldrb	r3, [r7, #3]
 800c3e2:	f003 0303 	and.w	r3, r3, #3
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d106      	bne.n	800c3f8 <tcp_enqueue_flags+0x2c>
 800c3ea:	4b67      	ldr	r3, [pc, #412]	; (800c588 <tcp_enqueue_flags+0x1bc>)
 800c3ec:	f240 4211 	movw	r2, #1041	; 0x411
 800c3f0:	4966      	ldr	r1, [pc, #408]	; (800c58c <tcp_enqueue_flags+0x1c0>)
 800c3f2:	4867      	ldr	r0, [pc, #412]	; (800c590 <tcp_enqueue_flags+0x1c4>)
 800c3f4:	f003 fe76 	bl	80100e4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d106      	bne.n	800c40c <tcp_enqueue_flags+0x40>
 800c3fe:	4b62      	ldr	r3, [pc, #392]	; (800c588 <tcp_enqueue_flags+0x1bc>)
 800c400:	f240 4213 	movw	r2, #1043	; 0x413
 800c404:	4963      	ldr	r1, [pc, #396]	; (800c594 <tcp_enqueue_flags+0x1c8>)
 800c406:	4862      	ldr	r0, [pc, #392]	; (800c590 <tcp_enqueue_flags+0x1c4>)
 800c408:	f003 fe6c 	bl	80100e4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800c40c:	78fb      	ldrb	r3, [r7, #3]
 800c40e:	f003 0302 	and.w	r3, r3, #2
 800c412:	2b00      	cmp	r3, #0
 800c414:	d001      	beq.n	800c41a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800c416:	2301      	movs	r3, #1
 800c418:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c41a:	7ffb      	ldrb	r3, [r7, #31]
 800c41c:	009b      	lsls	r3, r3, #2
 800c41e:	b2db      	uxtb	r3, r3
 800c420:	f003 0304 	and.w	r3, r3, #4
 800c424:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c426:	7dfb      	ldrb	r3, [r7, #23]
 800c428:	b29b      	uxth	r3, r3
 800c42a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c42e:	4619      	mov	r1, r3
 800c430:	2036      	movs	r0, #54	; 0x36
 800c432:	f7fa fa8f 	bl	8006954 <pbuf_alloc>
 800c436:	6138      	str	r0, [r7, #16]
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d109      	bne.n	800c452 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	8b5b      	ldrh	r3, [r3, #26]
 800c442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c446:	b29a      	uxth	r2, r3
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c44c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c450:	e095      	b.n	800c57e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	895a      	ldrh	r2, [r3, #10]
 800c456:	7dfb      	ldrb	r3, [r7, #23]
 800c458:	b29b      	uxth	r3, r3
 800c45a:	429a      	cmp	r2, r3
 800c45c:	d206      	bcs.n	800c46c <tcp_enqueue_flags+0xa0>
 800c45e:	4b4a      	ldr	r3, [pc, #296]	; (800c588 <tcp_enqueue_flags+0x1bc>)
 800c460:	f240 4239 	movw	r2, #1081	; 0x439
 800c464:	494c      	ldr	r1, [pc, #304]	; (800c598 <tcp_enqueue_flags+0x1cc>)
 800c466:	484a      	ldr	r0, [pc, #296]	; (800c590 <tcp_enqueue_flags+0x1c4>)
 800c468:	f003 fe3c 	bl	80100e4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800c470:	78fa      	ldrb	r2, [r7, #3]
 800c472:	7ffb      	ldrb	r3, [r7, #31]
 800c474:	9300      	str	r3, [sp, #0]
 800c476:	460b      	mov	r3, r1
 800c478:	6939      	ldr	r1, [r7, #16]
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f7ff f918 	bl	800b6b0 <tcp_create_segment>
 800c480:	60f8      	str	r0, [r7, #12]
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d109      	bne.n	800c49c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	8b5b      	ldrh	r3, [r3, #26]
 800c48c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c490:	b29a      	uxth	r2, r3
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c496:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c49a:	e070      	b.n	800c57e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	68db      	ldr	r3, [r3, #12]
 800c4a0:	f003 0303 	and.w	r3, r3, #3
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d006      	beq.n	800c4b6 <tcp_enqueue_flags+0xea>
 800c4a8:	4b37      	ldr	r3, [pc, #220]	; (800c588 <tcp_enqueue_flags+0x1bc>)
 800c4aa:	f240 4242 	movw	r2, #1090	; 0x442
 800c4ae:	493b      	ldr	r1, [pc, #236]	; (800c59c <tcp_enqueue_flags+0x1d0>)
 800c4b0:	4837      	ldr	r0, [pc, #220]	; (800c590 <tcp_enqueue_flags+0x1c4>)
 800c4b2:	f003 fe17 	bl	80100e4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	891b      	ldrh	r3, [r3, #8]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d006      	beq.n	800c4cc <tcp_enqueue_flags+0x100>
 800c4be:	4b32      	ldr	r3, [pc, #200]	; (800c588 <tcp_enqueue_flags+0x1bc>)
 800c4c0:	f240 4243 	movw	r2, #1091	; 0x443
 800c4c4:	4936      	ldr	r1, [pc, #216]	; (800c5a0 <tcp_enqueue_flags+0x1d4>)
 800c4c6:	4832      	ldr	r0, [pc, #200]	; (800c590 <tcp_enqueue_flags+0x1c4>)
 800c4c8:	f003 fe0c 	bl	80100e4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d103      	bne.n	800c4dc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	68fa      	ldr	r2, [r7, #12]
 800c4d8:	66da      	str	r2, [r3, #108]	; 0x6c
 800c4da:	e00d      	b.n	800c4f8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4e0:	61bb      	str	r3, [r7, #24]
 800c4e2:	e002      	b.n	800c4ea <tcp_enqueue_flags+0x11e>
 800c4e4:	69bb      	ldr	r3, [r7, #24]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	61bb      	str	r3, [r7, #24]
 800c4ea:	69bb      	ldr	r3, [r7, #24]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d1f8      	bne.n	800c4e4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800c4f2:	69bb      	ldr	r3, [r7, #24]
 800c4f4:	68fa      	ldr	r2, [r7, #12]
 800c4f6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800c500:	78fb      	ldrb	r3, [r7, #3]
 800c502:	f003 0302 	and.w	r3, r3, #2
 800c506:	2b00      	cmp	r3, #0
 800c508:	d104      	bne.n	800c514 <tcp_enqueue_flags+0x148>
 800c50a:	78fb      	ldrb	r3, [r7, #3]
 800c50c:	f003 0301 	and.w	r3, r3, #1
 800c510:	2b00      	cmp	r3, #0
 800c512:	d004      	beq.n	800c51e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c518:	1c5a      	adds	r2, r3, #1
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800c51e:	78fb      	ldrb	r3, [r7, #3]
 800c520:	f003 0301 	and.w	r3, r3, #1
 800c524:	2b00      	cmp	r3, #0
 800c526:	d006      	beq.n	800c536 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	8b5b      	ldrh	r3, [r3, #26]
 800c52c:	f043 0320 	orr.w	r3, r3, #32
 800c530:	b29a      	uxth	r2, r3
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	685b      	ldr	r3, [r3, #4]
 800c53a:	4618      	mov	r0, r3
 800c53c:	f7fa fd76 	bl	800702c <pbuf_clen>
 800c540:	4603      	mov	r3, r0
 800c542:	461a      	mov	r2, r3
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c54a:	4413      	add	r3, r2
 800c54c:	b29a      	uxth	r2, r3
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d00e      	beq.n	800c57c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c562:	2b00      	cmp	r3, #0
 800c564:	d10a      	bne.n	800c57c <tcp_enqueue_flags+0x1b0>
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d106      	bne.n	800c57c <tcp_enqueue_flags+0x1b0>
 800c56e:	4b06      	ldr	r3, [pc, #24]	; (800c588 <tcp_enqueue_flags+0x1bc>)
 800c570:	f240 4265 	movw	r2, #1125	; 0x465
 800c574:	490b      	ldr	r1, [pc, #44]	; (800c5a4 <tcp_enqueue_flags+0x1d8>)
 800c576:	4806      	ldr	r0, [pc, #24]	; (800c590 <tcp_enqueue_flags+0x1c4>)
 800c578:	f003 fdb4 	bl	80100e4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800c57c:	2300      	movs	r3, #0
}
 800c57e:	4618      	mov	r0, r3
 800c580:	3720      	adds	r7, #32
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}
 800c586:	bf00      	nop
 800c588:	08012ce0 	.word	0x08012ce0
 800c58c:	08013104 	.word	0x08013104
 800c590:	08012d34 	.word	0x08012d34
 800c594:	0801315c 	.word	0x0801315c
 800c598:	0801317c 	.word	0x0801317c
 800c59c:	080131b8 	.word	0x080131b8
 800c5a0:	080131d0 	.word	0x080131d0
 800c5a4:	080131fc 	.word	0x080131fc

0800c5a8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800c5a8:	b5b0      	push	{r4, r5, r7, lr}
 800c5aa:	b08a      	sub	sp, #40	; 0x28
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d106      	bne.n	800c5c4 <tcp_output+0x1c>
 800c5b6:	4b9e      	ldr	r3, [pc, #632]	; (800c830 <tcp_output+0x288>)
 800c5b8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800c5bc:	499d      	ldr	r1, [pc, #628]	; (800c834 <tcp_output+0x28c>)
 800c5be:	489e      	ldr	r0, [pc, #632]	; (800c838 <tcp_output+0x290>)
 800c5c0:	f003 fd90 	bl	80100e4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	7d1b      	ldrb	r3, [r3, #20]
 800c5c8:	2b01      	cmp	r3, #1
 800c5ca:	d106      	bne.n	800c5da <tcp_output+0x32>
 800c5cc:	4b98      	ldr	r3, [pc, #608]	; (800c830 <tcp_output+0x288>)
 800c5ce:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800c5d2:	499a      	ldr	r1, [pc, #616]	; (800c83c <tcp_output+0x294>)
 800c5d4:	4898      	ldr	r0, [pc, #608]	; (800c838 <tcp_output+0x290>)
 800c5d6:	f003 fd85 	bl	80100e4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800c5da:	4b99      	ldr	r3, [pc, #612]	; (800c840 <tcp_output+0x298>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	687a      	ldr	r2, [r7, #4]
 800c5e0:	429a      	cmp	r2, r3
 800c5e2:	d101      	bne.n	800c5e8 <tcp_output+0x40>
    return ERR_OK;
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	e1ce      	b.n	800c986 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c5f4:	4293      	cmp	r3, r2
 800c5f6:	bf28      	it	cs
 800c5f8:	4613      	movcs	r3, r2
 800c5fa:	b29b      	uxth	r3, r3
 800c5fc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c602:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800c604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c606:	2b00      	cmp	r3, #0
 800c608:	d10b      	bne.n	800c622 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	8b5b      	ldrh	r3, [r3, #26]
 800c60e:	f003 0302 	and.w	r3, r3, #2
 800c612:	2b00      	cmp	r3, #0
 800c614:	f000 81aa 	beq.w	800c96c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800c618:	6878      	ldr	r0, [r7, #4]
 800c61a:	f000 fdc9 	bl	800d1b0 <tcp_send_empty_ack>
 800c61e:	4603      	mov	r3, r0
 800c620:	e1b1      	b.n	800c986 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800c622:	6879      	ldr	r1, [r7, #4]
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	3304      	adds	r3, #4
 800c628:	461a      	mov	r2, r3
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f7ff f824 	bl	800b678 <tcp_route>
 800c630:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800c632:	697b      	ldr	r3, [r7, #20]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d102      	bne.n	800c63e <tcp_output+0x96>
    return ERR_RTE;
 800c638:	f06f 0303 	mvn.w	r3, #3
 800c63c:	e1a3      	b.n	800c986 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d003      	beq.n	800c64c <tcp_output+0xa4>
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d111      	bne.n	800c670 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d002      	beq.n	800c658 <tcp_output+0xb0>
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	3304      	adds	r3, #4
 800c656:	e000      	b.n	800c65a <tcp_output+0xb2>
 800c658:	2300      	movs	r3, #0
 800c65a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800c65c:	693b      	ldr	r3, [r7, #16]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d102      	bne.n	800c668 <tcp_output+0xc0>
      return ERR_RTE;
 800c662:	f06f 0303 	mvn.w	r3, #3
 800c666:	e18e      	b.n	800c986 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c668:	693b      	ldr	r3, [r7, #16]
 800c66a:	681a      	ldr	r2, [r3, #0]
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c672:	68db      	ldr	r3, [r3, #12]
 800c674:	685b      	ldr	r3, [r3, #4]
 800c676:	4618      	mov	r0, r3
 800c678:	f7f9 f9b1 	bl	80059de <lwip_htonl>
 800c67c:	4602      	mov	r2, r0
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c682:	1ad3      	subs	r3, r2, r3
 800c684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c686:	8912      	ldrh	r2, [r2, #8]
 800c688:	4413      	add	r3, r2
 800c68a:	69ba      	ldr	r2, [r7, #24]
 800c68c:	429a      	cmp	r2, r3
 800c68e:	d227      	bcs.n	800c6e0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c696:	461a      	mov	r2, r3
 800c698:	69bb      	ldr	r3, [r7, #24]
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d114      	bne.n	800c6c8 <tcp_output+0x120>
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d110      	bne.n	800c6c8 <tcp_output+0x120>
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d10b      	bne.n	800c6c8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2201      	movs	r2, #1
 800c6bc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	8b5b      	ldrh	r3, [r3, #26]
 800c6cc:	f003 0302 	and.w	r3, r3, #2
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	f000 814d 	beq.w	800c970 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f000 fd6a 	bl	800d1b0 <tcp_send_empty_ack>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	e152      	b.n	800c986 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6ec:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800c6ee:	6a3b      	ldr	r3, [r7, #32]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	f000 811c 	beq.w	800c92e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800c6f6:	e002      	b.n	800c6fe <tcp_output+0x156>
 800c6f8:	6a3b      	ldr	r3, [r7, #32]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	623b      	str	r3, [r7, #32]
 800c6fe:	6a3b      	ldr	r3, [r7, #32]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d1f8      	bne.n	800c6f8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800c706:	e112      	b.n	800c92e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800c708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c70a:	68db      	ldr	r3, [r3, #12]
 800c70c:	899b      	ldrh	r3, [r3, #12]
 800c70e:	b29b      	uxth	r3, r3
 800c710:	4618      	mov	r0, r3
 800c712:	f7f9 f94f 	bl	80059b4 <lwip_htons>
 800c716:	4603      	mov	r3, r0
 800c718:	b2db      	uxtb	r3, r3
 800c71a:	f003 0304 	and.w	r3, r3, #4
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d006      	beq.n	800c730 <tcp_output+0x188>
 800c722:	4b43      	ldr	r3, [pc, #268]	; (800c830 <tcp_output+0x288>)
 800c724:	f240 5236 	movw	r2, #1334	; 0x536
 800c728:	4946      	ldr	r1, [pc, #280]	; (800c844 <tcp_output+0x29c>)
 800c72a:	4843      	ldr	r0, [pc, #268]	; (800c838 <tcp_output+0x290>)
 800c72c:	f003 fcda 	bl	80100e4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c734:	2b00      	cmp	r3, #0
 800c736:	d01f      	beq.n	800c778 <tcp_output+0x1d0>
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	8b5b      	ldrh	r3, [r3, #26]
 800c73c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800c740:	2b00      	cmp	r3, #0
 800c742:	d119      	bne.n	800c778 <tcp_output+0x1d0>
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d00b      	beq.n	800c764 <tcp_output+0x1bc>
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d110      	bne.n	800c778 <tcp_output+0x1d0>
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c75a:	891a      	ldrh	r2, [r3, #8]
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c760:	429a      	cmp	r2, r3
 800c762:	d209      	bcs.n	800c778 <tcp_output+0x1d0>
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d004      	beq.n	800c778 <tcp_output+0x1d0>
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c774:	2b0f      	cmp	r3, #15
 800c776:	d901      	bls.n	800c77c <tcp_output+0x1d4>
 800c778:	2301      	movs	r3, #1
 800c77a:	e000      	b.n	800c77e <tcp_output+0x1d6>
 800c77c:	2300      	movs	r3, #0
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d106      	bne.n	800c790 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	8b5b      	ldrh	r3, [r3, #26]
 800c786:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	f000 80e4 	beq.w	800c958 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	7d1b      	ldrb	r3, [r3, #20]
 800c794:	2b02      	cmp	r3, #2
 800c796:	d00d      	beq.n	800c7b4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c79a:	68db      	ldr	r3, [r3, #12]
 800c79c:	899b      	ldrh	r3, [r3, #12]
 800c79e:	b29c      	uxth	r4, r3
 800c7a0:	2010      	movs	r0, #16
 800c7a2:	f7f9 f907 	bl	80059b4 <lwip_htons>
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	461a      	mov	r2, r3
 800c7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ac:	68db      	ldr	r3, [r3, #12]
 800c7ae:	4322      	orrs	r2, r4
 800c7b0:	b292      	uxth	r2, r2
 800c7b2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800c7b4:	697a      	ldr	r2, [r7, #20]
 800c7b6:	6879      	ldr	r1, [r7, #4]
 800c7b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c7ba:	f000 f909 	bl	800c9d0 <tcp_output_segment>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800c7c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d009      	beq.n	800c7de <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	8b5b      	ldrh	r3, [r3, #26]
 800c7ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7d2:	b29a      	uxth	r2, r3
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	835a      	strh	r2, [r3, #26]
      return err;
 800c7d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c7dc:	e0d3      	b.n	800c986 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800c7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e0:	681a      	ldr	r2, [r3, #0]
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	7d1b      	ldrb	r3, [r3, #20]
 800c7ea:	2b02      	cmp	r3, #2
 800c7ec:	d006      	beq.n	800c7fc <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	8b5b      	ldrh	r3, [r3, #26]
 800c7f2:	f023 0303 	bic.w	r3, r3, #3
 800c7f6:	b29a      	uxth	r2, r3
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7fe:	68db      	ldr	r3, [r3, #12]
 800c800:	685b      	ldr	r3, [r3, #4]
 800c802:	4618      	mov	r0, r3
 800c804:	f7f9 f8eb 	bl	80059de <lwip_htonl>
 800c808:	4604      	mov	r4, r0
 800c80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c80c:	891b      	ldrh	r3, [r3, #8]
 800c80e:	461d      	mov	r5, r3
 800c810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c812:	68db      	ldr	r3, [r3, #12]
 800c814:	899b      	ldrh	r3, [r3, #12]
 800c816:	b29b      	uxth	r3, r3
 800c818:	4618      	mov	r0, r3
 800c81a:	f7f9 f8cb 	bl	80059b4 <lwip_htons>
 800c81e:	4603      	mov	r3, r0
 800c820:	b2db      	uxtb	r3, r3
 800c822:	f003 0303 	and.w	r3, r3, #3
 800c826:	2b00      	cmp	r3, #0
 800c828:	d00e      	beq.n	800c848 <tcp_output+0x2a0>
 800c82a:	2301      	movs	r3, #1
 800c82c:	e00d      	b.n	800c84a <tcp_output+0x2a2>
 800c82e:	bf00      	nop
 800c830:	08012ce0 	.word	0x08012ce0
 800c834:	08013224 	.word	0x08013224
 800c838:	08012d34 	.word	0x08012d34
 800c83c:	0801323c 	.word	0x0801323c
 800c840:	20006608 	.word	0x20006608
 800c844:	08013264 	.word	0x08013264
 800c848:	2300      	movs	r3, #0
 800c84a:	442b      	add	r3, r5
 800c84c:	4423      	add	r3, r4
 800c84e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	1ad3      	subs	r3, r2, r3
 800c858:	2b00      	cmp	r3, #0
 800c85a:	da02      	bge.n	800c862 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	68ba      	ldr	r2, [r7, #8]
 800c860:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800c862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c864:	891b      	ldrh	r3, [r3, #8]
 800c866:	461c      	mov	r4, r3
 800c868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c86a:	68db      	ldr	r3, [r3, #12]
 800c86c:	899b      	ldrh	r3, [r3, #12]
 800c86e:	b29b      	uxth	r3, r3
 800c870:	4618      	mov	r0, r3
 800c872:	f7f9 f89f 	bl	80059b4 <lwip_htons>
 800c876:	4603      	mov	r3, r0
 800c878:	b2db      	uxtb	r3, r3
 800c87a:	f003 0303 	and.w	r3, r3, #3
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d001      	beq.n	800c886 <tcp_output+0x2de>
 800c882:	2301      	movs	r3, #1
 800c884:	e000      	b.n	800c888 <tcp_output+0x2e0>
 800c886:	2300      	movs	r3, #0
 800c888:	4423      	add	r3, r4
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d049      	beq.n	800c922 <tcp_output+0x37a>
      seg->next = NULL;
 800c88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c890:	2200      	movs	r2, #0
 800c892:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d105      	bne.n	800c8a8 <tcp_output+0x300>
        pcb->unacked = seg;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8a0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800c8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a4:	623b      	str	r3, [r7, #32]
 800c8a6:	e03f      	b.n	800c928 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800c8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8aa:	68db      	ldr	r3, [r3, #12]
 800c8ac:	685b      	ldr	r3, [r3, #4]
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	f7f9 f895 	bl	80059de <lwip_htonl>
 800c8b4:	4604      	mov	r4, r0
 800c8b6:	6a3b      	ldr	r3, [r7, #32]
 800c8b8:	68db      	ldr	r3, [r3, #12]
 800c8ba:	685b      	ldr	r3, [r3, #4]
 800c8bc:	4618      	mov	r0, r3
 800c8be:	f7f9 f88e 	bl	80059de <lwip_htonl>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	1ae3      	subs	r3, r4, r3
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	da24      	bge.n	800c914 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	3370      	adds	r3, #112	; 0x70
 800c8ce:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c8d0:	e002      	b.n	800c8d8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800c8d2:	69fb      	ldr	r3, [r7, #28]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c8d8:	69fb      	ldr	r3, [r7, #28]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d011      	beq.n	800c904 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c8e0:	69fb      	ldr	r3, [r7, #28]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	68db      	ldr	r3, [r3, #12]
 800c8e6:	685b      	ldr	r3, [r3, #4]
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f7f9 f878 	bl	80059de <lwip_htonl>
 800c8ee:	4604      	mov	r4, r0
 800c8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f2:	68db      	ldr	r3, [r3, #12]
 800c8f4:	685b      	ldr	r3, [r3, #4]
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f7f9 f871 	bl	80059de <lwip_htonl>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800c900:	2b00      	cmp	r3, #0
 800c902:	dbe6      	blt.n	800c8d2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800c904:	69fb      	ldr	r3, [r7, #28]
 800c906:	681a      	ldr	r2, [r3, #0]
 800c908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c90a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800c90c:	69fb      	ldr	r3, [r7, #28]
 800c90e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c910:	601a      	str	r2, [r3, #0]
 800c912:	e009      	b.n	800c928 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800c914:	6a3b      	ldr	r3, [r7, #32]
 800c916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c918:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800c91a:	6a3b      	ldr	r3, [r7, #32]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	623b      	str	r3, [r7, #32]
 800c920:	e002      	b.n	800c928 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800c922:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c924:	f7fb ff5d 	bl	80087e2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c92c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800c92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c930:	2b00      	cmp	r3, #0
 800c932:	d012      	beq.n	800c95a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800c934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c936:	68db      	ldr	r3, [r3, #12]
 800c938:	685b      	ldr	r3, [r3, #4]
 800c93a:	4618      	mov	r0, r3
 800c93c:	f7f9 f84f 	bl	80059de <lwip_htonl>
 800c940:	4602      	mov	r2, r0
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c946:	1ad3      	subs	r3, r2, r3
 800c948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c94a:	8912      	ldrh	r2, [r2, #8]
 800c94c:	4413      	add	r3, r2
  while (seg != NULL &&
 800c94e:	69ba      	ldr	r2, [r7, #24]
 800c950:	429a      	cmp	r2, r3
 800c952:	f4bf aed9 	bcs.w	800c708 <tcp_output+0x160>
 800c956:	e000      	b.n	800c95a <tcp_output+0x3b2>
      break;
 800c958:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d108      	bne.n	800c974 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2200      	movs	r2, #0
 800c966:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800c96a:	e004      	b.n	800c976 <tcp_output+0x3ce>
    goto output_done;
 800c96c:	bf00      	nop
 800c96e:	e002      	b.n	800c976 <tcp_output+0x3ce>
    goto output_done;
 800c970:	bf00      	nop
 800c972:	e000      	b.n	800c976 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800c974:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	8b5b      	ldrh	r3, [r3, #26]
 800c97a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c97e:	b29a      	uxth	r2, r3
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800c984:	2300      	movs	r3, #0
}
 800c986:	4618      	mov	r0, r3
 800c988:	3728      	adds	r7, #40	; 0x28
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bdb0      	pop	{r4, r5, r7, pc}
 800c98e:	bf00      	nop

0800c990 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b082      	sub	sp, #8
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d106      	bne.n	800c9ac <tcp_output_segment_busy+0x1c>
 800c99e:	4b09      	ldr	r3, [pc, #36]	; (800c9c4 <tcp_output_segment_busy+0x34>)
 800c9a0:	f240 529a 	movw	r2, #1434	; 0x59a
 800c9a4:	4908      	ldr	r1, [pc, #32]	; (800c9c8 <tcp_output_segment_busy+0x38>)
 800c9a6:	4809      	ldr	r0, [pc, #36]	; (800c9cc <tcp_output_segment_busy+0x3c>)
 800c9a8:	f003 fb9c 	bl	80100e4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	685b      	ldr	r3, [r3, #4]
 800c9b0:	7b9b      	ldrb	r3, [r3, #14]
 800c9b2:	2b01      	cmp	r3, #1
 800c9b4:	d001      	beq.n	800c9ba <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	e000      	b.n	800c9bc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800c9ba:	2300      	movs	r3, #0
}
 800c9bc:	4618      	mov	r0, r3
 800c9be:	3708      	adds	r7, #8
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}
 800c9c4:	08012ce0 	.word	0x08012ce0
 800c9c8:	0801327c 	.word	0x0801327c
 800c9cc:	08012d34 	.word	0x08012d34

0800c9d0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800c9d0:	b5b0      	push	{r4, r5, r7, lr}
 800c9d2:	b08c      	sub	sp, #48	; 0x30
 800c9d4:	af04      	add	r7, sp, #16
 800c9d6:	60f8      	str	r0, [r7, #12]
 800c9d8:	60b9      	str	r1, [r7, #8]
 800c9da:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d106      	bne.n	800c9f0 <tcp_output_segment+0x20>
 800c9e2:	4b63      	ldr	r3, [pc, #396]	; (800cb70 <tcp_output_segment+0x1a0>)
 800c9e4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800c9e8:	4962      	ldr	r1, [pc, #392]	; (800cb74 <tcp_output_segment+0x1a4>)
 800c9ea:	4863      	ldr	r0, [pc, #396]	; (800cb78 <tcp_output_segment+0x1a8>)
 800c9ec:	f003 fb7a 	bl	80100e4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d106      	bne.n	800ca04 <tcp_output_segment+0x34>
 800c9f6:	4b5e      	ldr	r3, [pc, #376]	; (800cb70 <tcp_output_segment+0x1a0>)
 800c9f8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800c9fc:	495f      	ldr	r1, [pc, #380]	; (800cb7c <tcp_output_segment+0x1ac>)
 800c9fe:	485e      	ldr	r0, [pc, #376]	; (800cb78 <tcp_output_segment+0x1a8>)
 800ca00:	f003 fb70 	bl	80100e4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d106      	bne.n	800ca18 <tcp_output_segment+0x48>
 800ca0a:	4b59      	ldr	r3, [pc, #356]	; (800cb70 <tcp_output_segment+0x1a0>)
 800ca0c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800ca10:	495b      	ldr	r1, [pc, #364]	; (800cb80 <tcp_output_segment+0x1b0>)
 800ca12:	4859      	ldr	r0, [pc, #356]	; (800cb78 <tcp_output_segment+0x1a8>)
 800ca14:	f003 fb66 	bl	80100e4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800ca18:	68f8      	ldr	r0, [r7, #12]
 800ca1a:	f7ff ffb9 	bl	800c990 <tcp_output_segment_busy>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d001      	beq.n	800ca28 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800ca24:	2300      	movs	r3, #0
 800ca26:	e09f      	b.n	800cb68 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	68dc      	ldr	r4, [r3, #12]
 800ca30:	4610      	mov	r0, r2
 800ca32:	f7f8 ffd4 	bl	80059de <lwip_htonl>
 800ca36:	4603      	mov	r3, r0
 800ca38:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	68dc      	ldr	r4, [r3, #12]
 800ca42:	4610      	mov	r0, r2
 800ca44:	f7f8 ffb6 	bl	80059b4 <lwip_htons>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca50:	68ba      	ldr	r2, [r7, #8]
 800ca52:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800ca54:	441a      	add	r2, r3
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	68db      	ldr	r3, [r3, #12]
 800ca5e:	3314      	adds	r3, #20
 800ca60:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	7a9b      	ldrb	r3, [r3, #10]
 800ca66:	f003 0301 	and.w	r3, r3, #1
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d015      	beq.n	800ca9a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	3304      	adds	r3, #4
 800ca72:	461a      	mov	r2, r3
 800ca74:	6879      	ldr	r1, [r7, #4]
 800ca76:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 800ca7a:	f7fc fa37 	bl	8008eec <tcp_eff_send_mss_netif>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800ca82:	8b7b      	ldrh	r3, [r7, #26]
 800ca84:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f7f8 ffa8 	bl	80059de <lwip_htonl>
 800ca8e:	4602      	mov	r2, r0
 800ca90:	69fb      	ldr	r3, [r7, #28]
 800ca92:	601a      	str	r2, [r3, #0]
    opts += 1;
 800ca94:	69fb      	ldr	r3, [r7, #28]
 800ca96:	3304      	adds	r3, #4
 800ca98:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	da02      	bge.n	800caaa <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	2200      	movs	r2, #0
 800caa8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800caaa:	68bb      	ldr	r3, [r7, #8]
 800caac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d10c      	bne.n	800cacc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800cab2:	4b34      	ldr	r3, [pc, #208]	; (800cb84 <tcp_output_segment+0x1b4>)
 800cab4:	681a      	ldr	r2, [r3, #0]
 800cab6:	68bb      	ldr	r3, [r7, #8]
 800cab8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	68db      	ldr	r3, [r3, #12]
 800cabe:	685b      	ldr	r3, [r3, #4]
 800cac0:	4618      	mov	r0, r3
 800cac2:	f7f8 ff8c 	bl	80059de <lwip_htonl>
 800cac6:	4602      	mov	r2, r0
 800cac8:	68bb      	ldr	r3, [r7, #8]
 800caca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	68da      	ldr	r2, [r3, #12]
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	685b      	ldr	r3, [r3, #4]
 800cad4:	685b      	ldr	r3, [r3, #4]
 800cad6:	1ad3      	subs	r3, r2, r3
 800cad8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	685b      	ldr	r3, [r3, #4]
 800cade:	8959      	ldrh	r1, [r3, #10]
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	685b      	ldr	r3, [r3, #4]
 800cae4:	8b3a      	ldrh	r2, [r7, #24]
 800cae6:	1a8a      	subs	r2, r1, r2
 800cae8:	b292      	uxth	r2, r2
 800caea:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	685b      	ldr	r3, [r3, #4]
 800caf0:	8919      	ldrh	r1, [r3, #8]
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	685b      	ldr	r3, [r3, #4]
 800caf6:	8b3a      	ldrh	r2, [r7, #24]
 800caf8:	1a8a      	subs	r2, r1, r2
 800cafa:	b292      	uxth	r2, r2
 800cafc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	685b      	ldr	r3, [r3, #4]
 800cb02:	68fa      	ldr	r2, [r7, #12]
 800cb04:	68d2      	ldr	r2, [r2, #12]
 800cb06:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	68db      	ldr	r3, [r3, #12]
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	741a      	strb	r2, [r3, #16]
 800cb10:	2200      	movs	r2, #0
 800cb12:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	68db      	ldr	r3, [r3, #12]
 800cb18:	f103 0214 	add.w	r2, r3, #20
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	7a9b      	ldrb	r3, [r3, #10]
 800cb20:	009b      	lsls	r3, r3, #2
 800cb22:	f003 0304 	and.w	r3, r3, #4
 800cb26:	4413      	add	r3, r2
 800cb28:	69fa      	ldr	r2, [r7, #28]
 800cb2a:	429a      	cmp	r2, r3
 800cb2c:	d006      	beq.n	800cb3c <tcp_output_segment+0x16c>
 800cb2e:	4b10      	ldr	r3, [pc, #64]	; (800cb70 <tcp_output_segment+0x1a0>)
 800cb30:	f240 621c 	movw	r2, #1564	; 0x61c
 800cb34:	4914      	ldr	r1, [pc, #80]	; (800cb88 <tcp_output_segment+0x1b8>)
 800cb36:	4810      	ldr	r0, [pc, #64]	; (800cb78 <tcp_output_segment+0x1a8>)
 800cb38:	f003 fad4 	bl	80100e4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	6858      	ldr	r0, [r3, #4]
 800cb40:	68b9      	ldr	r1, [r7, #8]
 800cb42:	68bb      	ldr	r3, [r7, #8]
 800cb44:	1d1c      	adds	r4, r3, #4
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	7add      	ldrb	r5, [r3, #11]
 800cb4a:	68bb      	ldr	r3, [r7, #8]
 800cb4c:	7a9b      	ldrb	r3, [r3, #10]
 800cb4e:	687a      	ldr	r2, [r7, #4]
 800cb50:	9202      	str	r2, [sp, #8]
 800cb52:	2206      	movs	r2, #6
 800cb54:	9201      	str	r2, [sp, #4]
 800cb56:	9300      	str	r3, [sp, #0]
 800cb58:	462b      	mov	r3, r5
 800cb5a:	4622      	mov	r2, r4
 800cb5c:	f002 fa34 	bl	800efc8 <ip4_output_if>
 800cb60:	4603      	mov	r3, r0
 800cb62:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800cb64:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3720      	adds	r7, #32
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bdb0      	pop	{r4, r5, r7, pc}
 800cb70:	08012ce0 	.word	0x08012ce0
 800cb74:	080132a4 	.word	0x080132a4
 800cb78:	08012d34 	.word	0x08012d34
 800cb7c:	080132c4 	.word	0x080132c4
 800cb80:	080132e4 	.word	0x080132e4
 800cb84:	200065f8 	.word	0x200065f8
 800cb88:	08013308 	.word	0x08013308

0800cb8c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800cb8c:	b5b0      	push	{r4, r5, r7, lr}
 800cb8e:	b084      	sub	sp, #16
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d106      	bne.n	800cba8 <tcp_rexmit_rto_prepare+0x1c>
 800cb9a:	4b31      	ldr	r3, [pc, #196]	; (800cc60 <tcp_rexmit_rto_prepare+0xd4>)
 800cb9c:	f240 6263 	movw	r2, #1635	; 0x663
 800cba0:	4930      	ldr	r1, [pc, #192]	; (800cc64 <tcp_rexmit_rto_prepare+0xd8>)
 800cba2:	4831      	ldr	r0, [pc, #196]	; (800cc68 <tcp_rexmit_rto_prepare+0xdc>)
 800cba4:	f003 fa9e 	bl	80100e4 <iprintf>

  if (pcb->unacked == NULL) {
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d102      	bne.n	800cbb6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800cbb0:	f06f 0305 	mvn.w	r3, #5
 800cbb4:	e050      	b.n	800cc58 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbba:	60fb      	str	r3, [r7, #12]
 800cbbc:	e00b      	b.n	800cbd6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800cbbe:	68f8      	ldr	r0, [r7, #12]
 800cbc0:	f7ff fee6 	bl	800c990 <tcp_output_segment_busy>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d002      	beq.n	800cbd0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800cbca:	f06f 0305 	mvn.w	r3, #5
 800cbce:	e043      	b.n	800cc58 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	60fb      	str	r3, [r7, #12]
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d1ef      	bne.n	800cbbe <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800cbde:	68f8      	ldr	r0, [r7, #12]
 800cbe0:	f7ff fed6 	bl	800c990 <tcp_output_segment_busy>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d002      	beq.n	800cbf0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800cbea:	f06f 0305 	mvn.w	r3, #5
 800cbee:	e033      	b.n	800cc58 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2200      	movs	r2, #0
 800cc04:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	8b5b      	ldrh	r3, [r3, #26]
 800cc0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800cc0e:	b29a      	uxth	r2, r3
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	68db      	ldr	r3, [r3, #12]
 800cc18:	685b      	ldr	r3, [r3, #4]
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f7f8 fedf 	bl	80059de <lwip_htonl>
 800cc20:	4604      	mov	r4, r0
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	891b      	ldrh	r3, [r3, #8]
 800cc26:	461d      	mov	r5, r3
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	68db      	ldr	r3, [r3, #12]
 800cc2c:	899b      	ldrh	r3, [r3, #12]
 800cc2e:	b29b      	uxth	r3, r3
 800cc30:	4618      	mov	r0, r3
 800cc32:	f7f8 febf 	bl	80059b4 <lwip_htons>
 800cc36:	4603      	mov	r3, r0
 800cc38:	b2db      	uxtb	r3, r3
 800cc3a:	f003 0303 	and.w	r3, r3, #3
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d001      	beq.n	800cc46 <tcp_rexmit_rto_prepare+0xba>
 800cc42:	2301      	movs	r3, #1
 800cc44:	e000      	b.n	800cc48 <tcp_rexmit_rto_prepare+0xbc>
 800cc46:	2300      	movs	r3, #0
 800cc48:	442b      	add	r3, r5
 800cc4a:	18e2      	adds	r2, r4, r3
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2200      	movs	r2, #0
 800cc54:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800cc56:	2300      	movs	r3, #0
}
 800cc58:	4618      	mov	r0, r3
 800cc5a:	3710      	adds	r7, #16
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bdb0      	pop	{r4, r5, r7, pc}
 800cc60:	08012ce0 	.word	0x08012ce0
 800cc64:	0801331c 	.word	0x0801331c
 800cc68:	08012d34 	.word	0x08012d34

0800cc6c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b082      	sub	sp, #8
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d106      	bne.n	800cc88 <tcp_rexmit_rto_commit+0x1c>
 800cc7a:	4b0d      	ldr	r3, [pc, #52]	; (800ccb0 <tcp_rexmit_rto_commit+0x44>)
 800cc7c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800cc80:	490c      	ldr	r1, [pc, #48]	; (800ccb4 <tcp_rexmit_rto_commit+0x48>)
 800cc82:	480d      	ldr	r0, [pc, #52]	; (800ccb8 <tcp_rexmit_rto_commit+0x4c>)
 800cc84:	f003 fa2e 	bl	80100e4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cc8e:	2bff      	cmp	r3, #255	; 0xff
 800cc90:	d007      	beq.n	800cca2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cc98:	3301      	adds	r3, #1
 800cc9a:	b2da      	uxtb	r2, r3
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f7ff fc80 	bl	800c5a8 <tcp_output>
}
 800cca8:	bf00      	nop
 800ccaa:	3708      	adds	r7, #8
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd80      	pop	{r7, pc}
 800ccb0:	08012ce0 	.word	0x08012ce0
 800ccb4:	08013340 	.word	0x08013340
 800ccb8:	08012d34 	.word	0x08012d34

0800ccbc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b082      	sub	sp, #8
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d106      	bne.n	800ccd8 <tcp_rexmit_rto+0x1c>
 800ccca:	4b0a      	ldr	r3, [pc, #40]	; (800ccf4 <tcp_rexmit_rto+0x38>)
 800cccc:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800ccd0:	4909      	ldr	r1, [pc, #36]	; (800ccf8 <tcp_rexmit_rto+0x3c>)
 800ccd2:	480a      	ldr	r0, [pc, #40]	; (800ccfc <tcp_rexmit_rto+0x40>)
 800ccd4:	f003 fa06 	bl	80100e4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	f7ff ff57 	bl	800cb8c <tcp_rexmit_rto_prepare>
 800ccde:	4603      	mov	r3, r0
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d102      	bne.n	800ccea <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	f7ff ffc1 	bl	800cc6c <tcp_rexmit_rto_commit>
  }
}
 800ccea:	bf00      	nop
 800ccec:	3708      	adds	r7, #8
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}
 800ccf2:	bf00      	nop
 800ccf4:	08012ce0 	.word	0x08012ce0
 800ccf8:	08013364 	.word	0x08013364
 800ccfc:	08012d34 	.word	0x08012d34

0800cd00 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800cd00:	b590      	push	{r4, r7, lr}
 800cd02:	b085      	sub	sp, #20
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d106      	bne.n	800cd1c <tcp_rexmit+0x1c>
 800cd0e:	4b2f      	ldr	r3, [pc, #188]	; (800cdcc <tcp_rexmit+0xcc>)
 800cd10:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800cd14:	492e      	ldr	r1, [pc, #184]	; (800cdd0 <tcp_rexmit+0xd0>)
 800cd16:	482f      	ldr	r0, [pc, #188]	; (800cdd4 <tcp_rexmit+0xd4>)
 800cd18:	f003 f9e4 	bl	80100e4 <iprintf>

  if (pcb->unacked == NULL) {
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d102      	bne.n	800cd2a <tcp_rexmit+0x2a>
    return ERR_VAL;
 800cd24:	f06f 0305 	mvn.w	r3, #5
 800cd28:	e04c      	b.n	800cdc4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd2e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800cd30:	68b8      	ldr	r0, [r7, #8]
 800cd32:	f7ff fe2d 	bl	800c990 <tcp_output_segment_busy>
 800cd36:	4603      	mov	r3, r0
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d002      	beq.n	800cd42 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800cd3c:	f06f 0305 	mvn.w	r3, #5
 800cd40:	e040      	b.n	800cdc4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800cd42:	68bb      	ldr	r3, [r7, #8]
 800cd44:	681a      	ldr	r2, [r3, #0]
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	336c      	adds	r3, #108	; 0x6c
 800cd4e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800cd50:	e002      	b.n	800cd58 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d011      	beq.n	800cd84 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	68db      	ldr	r3, [r3, #12]
 800cd66:	685b      	ldr	r3, [r3, #4]
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f7f8 fe38 	bl	80059de <lwip_htonl>
 800cd6e:	4604      	mov	r4, r0
 800cd70:	68bb      	ldr	r3, [r7, #8]
 800cd72:	68db      	ldr	r3, [r3, #12]
 800cd74:	685b      	ldr	r3, [r3, #4]
 800cd76:	4618      	mov	r0, r3
 800cd78:	f7f8 fe31 	bl	80059de <lwip_htonl>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	dbe6      	blt.n	800cd52 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	681a      	ldr	r2, [r3, #0]
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	68ba      	ldr	r2, [r7, #8]
 800cd90:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d103      	bne.n	800cda2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cda8:	2bff      	cmp	r3, #255	; 0xff
 800cdaa:	d007      	beq.n	800cdbc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cdb2:	3301      	adds	r3, #1
 800cdb4:	b2da      	uxtb	r2, r3
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800cdc2:	2300      	movs	r3, #0
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3714      	adds	r7, #20
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd90      	pop	{r4, r7, pc}
 800cdcc:	08012ce0 	.word	0x08012ce0
 800cdd0:	08013380 	.word	0x08013380
 800cdd4:	08012d34 	.word	0x08012d34

0800cdd8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b082      	sub	sp, #8
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d106      	bne.n	800cdf4 <tcp_rexmit_fast+0x1c>
 800cde6:	4b2a      	ldr	r3, [pc, #168]	; (800ce90 <tcp_rexmit_fast+0xb8>)
 800cde8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800cdec:	4929      	ldr	r1, [pc, #164]	; (800ce94 <tcp_rexmit_fast+0xbc>)
 800cdee:	482a      	ldr	r0, [pc, #168]	; (800ce98 <tcp_rexmit_fast+0xc0>)
 800cdf0:	f003 f978 	bl	80100e4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d044      	beq.n	800ce86 <tcp_rexmit_fast+0xae>
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	8b5b      	ldrh	r3, [r3, #26]
 800ce00:	f003 0304 	and.w	r3, r3, #4
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d13e      	bne.n	800ce86 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f7ff ff79 	bl	800cd00 <tcp_rexmit>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d138      	bne.n	800ce86 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ce20:	4293      	cmp	r3, r2
 800ce22:	bf28      	it	cs
 800ce24:	4613      	movcs	r3, r2
 800ce26:	b29b      	uxth	r3, r3
 800ce28:	0fda      	lsrs	r2, r3, #31
 800ce2a:	4413      	add	r3, r2
 800ce2c:	105b      	asrs	r3, r3, #1
 800ce2e:	b29a      	uxth	r2, r3
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ce3c:	461a      	mov	r2, r3
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ce42:	005b      	lsls	r3, r3, #1
 800ce44:	429a      	cmp	r2, r3
 800ce46:	d206      	bcs.n	800ce56 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ce4c:	005b      	lsls	r3, r3, #1
 800ce4e:	b29a      	uxth	r2, r3
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ce60:	4619      	mov	r1, r3
 800ce62:	0049      	lsls	r1, r1, #1
 800ce64:	440b      	add	r3, r1
 800ce66:	b29b      	uxth	r3, r3
 800ce68:	4413      	add	r3, r2
 800ce6a:	b29a      	uxth	r2, r3
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	8b5b      	ldrh	r3, [r3, #26]
 800ce76:	f043 0304 	orr.w	r3, r3, #4
 800ce7a:	b29a      	uxth	r2, r3
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2200      	movs	r2, #0
 800ce84:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800ce86:	bf00      	nop
 800ce88:	3708      	adds	r7, #8
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}
 800ce8e:	bf00      	nop
 800ce90:	08012ce0 	.word	0x08012ce0
 800ce94:	08013398 	.word	0x08013398
 800ce98:	08012d34 	.word	0x08012d34

0800ce9c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b086      	sub	sp, #24
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	60f8      	str	r0, [r7, #12]
 800cea4:	607b      	str	r3, [r7, #4]
 800cea6:	460b      	mov	r3, r1
 800cea8:	817b      	strh	r3, [r7, #10]
 800ceaa:	4613      	mov	r3, r2
 800ceac:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ceae:	897a      	ldrh	r2, [r7, #10]
 800ceb0:	893b      	ldrh	r3, [r7, #8]
 800ceb2:	4413      	add	r3, r2
 800ceb4:	b29b      	uxth	r3, r3
 800ceb6:	3314      	adds	r3, #20
 800ceb8:	b29b      	uxth	r3, r3
 800ceba:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cebe:	4619      	mov	r1, r3
 800cec0:	2022      	movs	r0, #34	; 0x22
 800cec2:	f7f9 fd47 	bl	8006954 <pbuf_alloc>
 800cec6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800cec8:	697b      	ldr	r3, [r7, #20]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d04d      	beq.n	800cf6a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800cece:	897b      	ldrh	r3, [r7, #10]
 800ced0:	3313      	adds	r3, #19
 800ced2:	697a      	ldr	r2, [r7, #20]
 800ced4:	8952      	ldrh	r2, [r2, #10]
 800ced6:	4293      	cmp	r3, r2
 800ced8:	db06      	blt.n	800cee8 <tcp_output_alloc_header_common+0x4c>
 800ceda:	4b26      	ldr	r3, [pc, #152]	; (800cf74 <tcp_output_alloc_header_common+0xd8>)
 800cedc:	f240 7223 	movw	r2, #1827	; 0x723
 800cee0:	4925      	ldr	r1, [pc, #148]	; (800cf78 <tcp_output_alloc_header_common+0xdc>)
 800cee2:	4826      	ldr	r0, [pc, #152]	; (800cf7c <tcp_output_alloc_header_common+0xe0>)
 800cee4:	f003 f8fe 	bl	80100e4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800cee8:	697b      	ldr	r3, [r7, #20]
 800ceea:	685b      	ldr	r3, [r3, #4]
 800ceec:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800ceee:	8c3b      	ldrh	r3, [r7, #32]
 800cef0:	4618      	mov	r0, r3
 800cef2:	f7f8 fd5f 	bl	80059b4 <lwip_htons>
 800cef6:	4603      	mov	r3, r0
 800cef8:	461a      	mov	r2, r3
 800cefa:	693b      	ldr	r3, [r7, #16]
 800cefc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800cefe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf00:	4618      	mov	r0, r3
 800cf02:	f7f8 fd57 	bl	80059b4 <lwip_htons>
 800cf06:	4603      	mov	r3, r0
 800cf08:	461a      	mov	r2, r3
 800cf0a:	693b      	ldr	r3, [r7, #16]
 800cf0c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800cf0e:	693b      	ldr	r3, [r7, #16]
 800cf10:	687a      	ldr	r2, [r7, #4]
 800cf12:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800cf14:	68f8      	ldr	r0, [r7, #12]
 800cf16:	f7f8 fd62 	bl	80059de <lwip_htonl>
 800cf1a:	4602      	mov	r2, r0
 800cf1c:	693b      	ldr	r3, [r7, #16]
 800cf1e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800cf20:	897b      	ldrh	r3, [r7, #10]
 800cf22:	089b      	lsrs	r3, r3, #2
 800cf24:	b29b      	uxth	r3, r3
 800cf26:	3305      	adds	r3, #5
 800cf28:	b29b      	uxth	r3, r3
 800cf2a:	031b      	lsls	r3, r3, #12
 800cf2c:	b29a      	uxth	r2, r3
 800cf2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cf32:	b29b      	uxth	r3, r3
 800cf34:	4313      	orrs	r3, r2
 800cf36:	b29b      	uxth	r3, r3
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f7f8 fd3b 	bl	80059b4 <lwip_htons>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	461a      	mov	r2, r3
 800cf42:	693b      	ldr	r3, [r7, #16]
 800cf44:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800cf46:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cf48:	4618      	mov	r0, r3
 800cf4a:	f7f8 fd33 	bl	80059b4 <lwip_htons>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	461a      	mov	r2, r3
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800cf56:	693b      	ldr	r3, [r7, #16]
 800cf58:	2200      	movs	r2, #0
 800cf5a:	741a      	strb	r2, [r3, #16]
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800cf60:	693b      	ldr	r3, [r7, #16]
 800cf62:	2200      	movs	r2, #0
 800cf64:	749a      	strb	r2, [r3, #18]
 800cf66:	2200      	movs	r2, #0
 800cf68:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800cf6a:	697b      	ldr	r3, [r7, #20]
}
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	3718      	adds	r7, #24
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}
 800cf74:	08012ce0 	.word	0x08012ce0
 800cf78:	080133b8 	.word	0x080133b8
 800cf7c:	08012d34 	.word	0x08012d34

0800cf80 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800cf80:	b5b0      	push	{r4, r5, r7, lr}
 800cf82:	b08a      	sub	sp, #40	; 0x28
 800cf84:	af04      	add	r7, sp, #16
 800cf86:	60f8      	str	r0, [r7, #12]
 800cf88:	607b      	str	r3, [r7, #4]
 800cf8a:	460b      	mov	r3, r1
 800cf8c:	817b      	strh	r3, [r7, #10]
 800cf8e:	4613      	mov	r3, r2
 800cf90:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d106      	bne.n	800cfa6 <tcp_output_alloc_header+0x26>
 800cf98:	4b15      	ldr	r3, [pc, #84]	; (800cff0 <tcp_output_alloc_header+0x70>)
 800cf9a:	f240 7242 	movw	r2, #1858	; 0x742
 800cf9e:	4915      	ldr	r1, [pc, #84]	; (800cff4 <tcp_output_alloc_header+0x74>)
 800cfa0:	4815      	ldr	r0, [pc, #84]	; (800cff8 <tcp_output_alloc_header+0x78>)
 800cfa2:	f003 f89f 	bl	80100e4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	8adb      	ldrh	r3, [r3, #22]
 800cfae:	68fa      	ldr	r2, [r7, #12]
 800cfb0:	8b12      	ldrh	r2, [r2, #24]
 800cfb2:	68f9      	ldr	r1, [r7, #12]
 800cfb4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800cfb6:	893d      	ldrh	r5, [r7, #8]
 800cfb8:	897c      	ldrh	r4, [r7, #10]
 800cfba:	9103      	str	r1, [sp, #12]
 800cfbc:	2110      	movs	r1, #16
 800cfbe:	9102      	str	r1, [sp, #8]
 800cfc0:	9201      	str	r2, [sp, #4]
 800cfc2:	9300      	str	r3, [sp, #0]
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	462a      	mov	r2, r5
 800cfc8:	4621      	mov	r1, r4
 800cfca:	f7ff ff67 	bl	800ce9c <tcp_output_alloc_header_common>
 800cfce:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800cfd0:	697b      	ldr	r3, [r7, #20]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d006      	beq.n	800cfe4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfda:	68fa      	ldr	r2, [r7, #12]
 800cfdc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800cfde:	441a      	add	r2, r3
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800cfe4:	697b      	ldr	r3, [r7, #20]
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	3718      	adds	r7, #24
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bdb0      	pop	{r4, r5, r7, pc}
 800cfee:	bf00      	nop
 800cff0:	08012ce0 	.word	0x08012ce0
 800cff4:	080133e8 	.word	0x080133e8
 800cff8:	08012d34 	.word	0x08012d34

0800cffc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b088      	sub	sp, #32
 800d000:	af00      	add	r7, sp, #0
 800d002:	60f8      	str	r0, [r7, #12]
 800d004:	60b9      	str	r1, [r7, #8]
 800d006:	4611      	mov	r1, r2
 800d008:	461a      	mov	r2, r3
 800d00a:	460b      	mov	r3, r1
 800d00c:	71fb      	strb	r3, [r7, #7]
 800d00e:	4613      	mov	r3, r2
 800d010:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800d012:	2300      	movs	r3, #0
 800d014:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d106      	bne.n	800d02a <tcp_output_fill_options+0x2e>
 800d01c:	4b13      	ldr	r3, [pc, #76]	; (800d06c <tcp_output_fill_options+0x70>)
 800d01e:	f240 7256 	movw	r2, #1878	; 0x756
 800d022:	4913      	ldr	r1, [pc, #76]	; (800d070 <tcp_output_fill_options+0x74>)
 800d024:	4813      	ldr	r0, [pc, #76]	; (800d074 <tcp_output_fill_options+0x78>)
 800d026:	f003 f85d 	bl	80100e4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	685b      	ldr	r3, [r3, #4]
 800d02e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800d030:	69bb      	ldr	r3, [r7, #24]
 800d032:	3314      	adds	r3, #20
 800d034:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800d036:	69bb      	ldr	r3, [r7, #24]
 800d038:	f103 0214 	add.w	r2, r3, #20
 800d03c:	8bfb      	ldrh	r3, [r7, #30]
 800d03e:	009b      	lsls	r3, r3, #2
 800d040:	4619      	mov	r1, r3
 800d042:	79fb      	ldrb	r3, [r7, #7]
 800d044:	009b      	lsls	r3, r3, #2
 800d046:	f003 0304 	and.w	r3, r3, #4
 800d04a:	440b      	add	r3, r1
 800d04c:	4413      	add	r3, r2
 800d04e:	697a      	ldr	r2, [r7, #20]
 800d050:	429a      	cmp	r2, r3
 800d052:	d006      	beq.n	800d062 <tcp_output_fill_options+0x66>
 800d054:	4b05      	ldr	r3, [pc, #20]	; (800d06c <tcp_output_fill_options+0x70>)
 800d056:	f240 7275 	movw	r2, #1909	; 0x775
 800d05a:	4907      	ldr	r1, [pc, #28]	; (800d078 <tcp_output_fill_options+0x7c>)
 800d05c:	4805      	ldr	r0, [pc, #20]	; (800d074 <tcp_output_fill_options+0x78>)
 800d05e:	f003 f841 	bl	80100e4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800d062:	bf00      	nop
 800d064:	3720      	adds	r7, #32
 800d066:	46bd      	mov	sp, r7
 800d068:	bd80      	pop	{r7, pc}
 800d06a:	bf00      	nop
 800d06c:	08012ce0 	.word	0x08012ce0
 800d070:	08013410 	.word	0x08013410
 800d074:	08012d34 	.word	0x08012d34
 800d078:	08013308 	.word	0x08013308

0800d07c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b08a      	sub	sp, #40	; 0x28
 800d080:	af04      	add	r7, sp, #16
 800d082:	60f8      	str	r0, [r7, #12]
 800d084:	60b9      	str	r1, [r7, #8]
 800d086:	607a      	str	r2, [r7, #4]
 800d088:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800d08a:	68bb      	ldr	r3, [r7, #8]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d106      	bne.n	800d09e <tcp_output_control_segment+0x22>
 800d090:	4b1c      	ldr	r3, [pc, #112]	; (800d104 <tcp_output_control_segment+0x88>)
 800d092:	f240 7287 	movw	r2, #1927	; 0x787
 800d096:	491c      	ldr	r1, [pc, #112]	; (800d108 <tcp_output_control_segment+0x8c>)
 800d098:	481c      	ldr	r0, [pc, #112]	; (800d10c <tcp_output_control_segment+0x90>)
 800d09a:	f003 f823 	bl	80100e4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800d09e:	683a      	ldr	r2, [r7, #0]
 800d0a0:	6879      	ldr	r1, [r7, #4]
 800d0a2:	68f8      	ldr	r0, [r7, #12]
 800d0a4:	f7fe fae8 	bl	800b678 <tcp_route>
 800d0a8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800d0aa:	693b      	ldr	r3, [r7, #16]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d102      	bne.n	800d0b6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800d0b0:	23fc      	movs	r3, #252	; 0xfc
 800d0b2:	75fb      	strb	r3, [r7, #23]
 800d0b4:	e01c      	b.n	800d0f0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d006      	beq.n	800d0ca <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	7adb      	ldrb	r3, [r3, #11]
 800d0c0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	7a9b      	ldrb	r3, [r3, #10]
 800d0c6:	757b      	strb	r3, [r7, #21]
 800d0c8:	e003      	b.n	800d0d2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800d0ca:	23ff      	movs	r3, #255	; 0xff
 800d0cc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800d0d2:	7dba      	ldrb	r2, [r7, #22]
 800d0d4:	693b      	ldr	r3, [r7, #16]
 800d0d6:	9302      	str	r3, [sp, #8]
 800d0d8:	2306      	movs	r3, #6
 800d0da:	9301      	str	r3, [sp, #4]
 800d0dc:	7d7b      	ldrb	r3, [r7, #21]
 800d0de:	9300      	str	r3, [sp, #0]
 800d0e0:	4613      	mov	r3, r2
 800d0e2:	683a      	ldr	r2, [r7, #0]
 800d0e4:	6879      	ldr	r1, [r7, #4]
 800d0e6:	68b8      	ldr	r0, [r7, #8]
 800d0e8:	f001 ff6e 	bl	800efc8 <ip4_output_if>
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800d0f0:	68b8      	ldr	r0, [r7, #8]
 800d0f2:	f7f9 ff13 	bl	8006f1c <pbuf_free>
  return err;
 800d0f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3718      	adds	r7, #24
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}
 800d102:	bf00      	nop
 800d104:	08012ce0 	.word	0x08012ce0
 800d108:	08013438 	.word	0x08013438
 800d10c:	08012d34 	.word	0x08012d34

0800d110 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800d110:	b590      	push	{r4, r7, lr}
 800d112:	b08b      	sub	sp, #44	; 0x2c
 800d114:	af04      	add	r7, sp, #16
 800d116:	60f8      	str	r0, [r7, #12]
 800d118:	60b9      	str	r1, [r7, #8]
 800d11a:	607a      	str	r2, [r7, #4]
 800d11c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d106      	bne.n	800d132 <tcp_rst+0x22>
 800d124:	4b1e      	ldr	r3, [pc, #120]	; (800d1a0 <tcp_rst+0x90>)
 800d126:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800d12a:	491e      	ldr	r1, [pc, #120]	; (800d1a4 <tcp_rst+0x94>)
 800d12c:	481e      	ldr	r0, [pc, #120]	; (800d1a8 <tcp_rst+0x98>)
 800d12e:	f002 ffd9 	bl	80100e4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800d132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d134:	2b00      	cmp	r3, #0
 800d136:	d106      	bne.n	800d146 <tcp_rst+0x36>
 800d138:	4b19      	ldr	r3, [pc, #100]	; (800d1a0 <tcp_rst+0x90>)
 800d13a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800d13e:	491b      	ldr	r1, [pc, #108]	; (800d1ac <tcp_rst+0x9c>)
 800d140:	4819      	ldr	r0, [pc, #100]	; (800d1a8 <tcp_rst+0x98>)
 800d142:	f002 ffcf 	bl	80100e4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d146:	2300      	movs	r3, #0
 800d148:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800d14a:	2308      	movs	r3, #8
 800d14c:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800d14e:	7dfb      	ldrb	r3, [r7, #23]
 800d150:	b29c      	uxth	r4, r3
 800d152:	68b8      	ldr	r0, [r7, #8]
 800d154:	f7f8 fc43 	bl	80059de <lwip_htonl>
 800d158:	4602      	mov	r2, r0
 800d15a:	8abb      	ldrh	r3, [r7, #20]
 800d15c:	9303      	str	r3, [sp, #12]
 800d15e:	2314      	movs	r3, #20
 800d160:	9302      	str	r3, [sp, #8]
 800d162:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d164:	9301      	str	r3, [sp, #4]
 800d166:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d168:	9300      	str	r3, [sp, #0]
 800d16a:	4613      	mov	r3, r2
 800d16c:	2200      	movs	r2, #0
 800d16e:	4621      	mov	r1, r4
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f7ff fe93 	bl	800ce9c <tcp_output_alloc_header_common>
 800d176:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800d178:	693b      	ldr	r3, [r7, #16]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d00c      	beq.n	800d198 <tcp_rst+0x88>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d17e:	7dfb      	ldrb	r3, [r7, #23]
 800d180:	2200      	movs	r2, #0
 800d182:	6939      	ldr	r1, [r7, #16]
 800d184:	68f8      	ldr	r0, [r7, #12]
 800d186:	f7ff ff39 	bl	800cffc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800d18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d18c:	683a      	ldr	r2, [r7, #0]
 800d18e:	6939      	ldr	r1, [r7, #16]
 800d190:	68f8      	ldr	r0, [r7, #12]
 800d192:	f7ff ff73 	bl	800d07c <tcp_output_control_segment>
 800d196:	e000      	b.n	800d19a <tcp_rst+0x8a>
    return;
 800d198:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d19a:	371c      	adds	r7, #28
 800d19c:	46bd      	mov	sp, r7
 800d19e:	bd90      	pop	{r4, r7, pc}
 800d1a0:	08012ce0 	.word	0x08012ce0
 800d1a4:	08013464 	.word	0x08013464
 800d1a8:	08012d34 	.word	0x08012d34
 800d1ac:	08013480 	.word	0x08013480

0800d1b0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d1b0:	b590      	push	{r4, r7, lr}
 800d1b2:	b087      	sub	sp, #28
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800d1bc:	2300      	movs	r3, #0
 800d1be:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d106      	bne.n	800d1d4 <tcp_send_empty_ack+0x24>
 800d1c6:	4b28      	ldr	r3, [pc, #160]	; (800d268 <tcp_send_empty_ack+0xb8>)
 800d1c8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800d1cc:	4927      	ldr	r1, [pc, #156]	; (800d26c <tcp_send_empty_ack+0xbc>)
 800d1ce:	4828      	ldr	r0, [pc, #160]	; (800d270 <tcp_send_empty_ack+0xc0>)
 800d1d0:	f002 ff88 	bl	80100e4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d1d4:	7dfb      	ldrb	r3, [r7, #23]
 800d1d6:	009b      	lsls	r3, r3, #2
 800d1d8:	b2db      	uxtb	r3, r3
 800d1da:	f003 0304 	and.w	r3, r3, #4
 800d1de:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800d1e0:	7d7b      	ldrb	r3, [r7, #21]
 800d1e2:	b29c      	uxth	r4, r3
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f7f8 fbf8 	bl	80059de <lwip_htonl>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	4621      	mov	r1, r4
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f7ff fec3 	bl	800cf80 <tcp_output_alloc_header>
 800d1fa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d1fc:	693b      	ldr	r3, [r7, #16]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d109      	bne.n	800d216 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	8b5b      	ldrh	r3, [r3, #26]
 800d206:	f043 0303 	orr.w	r3, r3, #3
 800d20a:	b29a      	uxth	r2, r3
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800d210:	f06f 0301 	mvn.w	r3, #1
 800d214:	e023      	b.n	800d25e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800d216:	7dbb      	ldrb	r3, [r7, #22]
 800d218:	7dfa      	ldrb	r2, [r7, #23]
 800d21a:	6939      	ldr	r1, [r7, #16]
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f7ff feed 	bl	800cffc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d222:	687a      	ldr	r2, [r7, #4]
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	3304      	adds	r3, #4
 800d228:	6939      	ldr	r1, [r7, #16]
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f7ff ff26 	bl	800d07c <tcp_output_control_segment>
 800d230:	4603      	mov	r3, r0
 800d232:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800d234:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d007      	beq.n	800d24c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	8b5b      	ldrh	r3, [r3, #26]
 800d240:	f043 0303 	orr.w	r3, r3, #3
 800d244:	b29a      	uxth	r2, r3
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	835a      	strh	r2, [r3, #26]
 800d24a:	e006      	b.n	800d25a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	8b5b      	ldrh	r3, [r3, #26]
 800d250:	f023 0303 	bic.w	r3, r3, #3
 800d254:	b29a      	uxth	r2, r3
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800d25a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d25e:	4618      	mov	r0, r3
 800d260:	371c      	adds	r7, #28
 800d262:	46bd      	mov	sp, r7
 800d264:	bd90      	pop	{r4, r7, pc}
 800d266:	bf00      	nop
 800d268:	08012ce0 	.word	0x08012ce0
 800d26c:	0801349c 	.word	0x0801349c
 800d270:	08012d34 	.word	0x08012d34

0800d274 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800d274:	b590      	push	{r4, r7, lr}
 800d276:	b087      	sub	sp, #28
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d27c:	2300      	movs	r3, #0
 800d27e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d106      	bne.n	800d294 <tcp_keepalive+0x20>
 800d286:	4b18      	ldr	r3, [pc, #96]	; (800d2e8 <tcp_keepalive+0x74>)
 800d288:	f640 0224 	movw	r2, #2084	; 0x824
 800d28c:	4917      	ldr	r1, [pc, #92]	; (800d2ec <tcp_keepalive+0x78>)
 800d28e:	4818      	ldr	r0, [pc, #96]	; (800d2f0 <tcp_keepalive+0x7c>)
 800d290:	f002 ff28 	bl	80100e4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800d294:	7dfb      	ldrb	r3, [r7, #23]
 800d296:	b29c      	uxth	r4, r3
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d29c:	3b01      	subs	r3, #1
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f7f8 fb9d 	bl	80059de <lwip_htonl>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	4621      	mov	r1, r4
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	f7ff fe68 	bl	800cf80 <tcp_output_alloc_header>
 800d2b0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d2b2:	693b      	ldr	r3, [r7, #16]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d102      	bne.n	800d2be <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800d2b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d2bc:	e010      	b.n	800d2e0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d2be:	7dfb      	ldrb	r3, [r7, #23]
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	6939      	ldr	r1, [r7, #16]
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f7ff fe99 	bl	800cffc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d2ca:	687a      	ldr	r2, [r7, #4]
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	3304      	adds	r3, #4
 800d2d0:	6939      	ldr	r1, [r7, #16]
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	f7ff fed2 	bl	800d07c <tcp_output_control_segment>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d2dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	371c      	adds	r7, #28
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd90      	pop	{r4, r7, pc}
 800d2e8:	08012ce0 	.word	0x08012ce0
 800d2ec:	080134bc 	.word	0x080134bc
 800d2f0:	08012d34 	.word	0x08012d34

0800d2f4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800d2f4:	b590      	push	{r4, r7, lr}
 800d2f6:	b08b      	sub	sp, #44	; 0x2c
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d106      	bne.n	800d316 <tcp_zero_window_probe+0x22>
 800d308:	4b4c      	ldr	r3, [pc, #304]	; (800d43c <tcp_zero_window_probe+0x148>)
 800d30a:	f640 024f 	movw	r2, #2127	; 0x84f
 800d30e:	494c      	ldr	r1, [pc, #304]	; (800d440 <tcp_zero_window_probe+0x14c>)
 800d310:	484c      	ldr	r0, [pc, #304]	; (800d444 <tcp_zero_window_probe+0x150>)
 800d312:	f002 fee7 	bl	80100e4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d31a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800d31c:	6a3b      	ldr	r3, [r7, #32]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d101      	bne.n	800d326 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800d322:	2300      	movs	r3, #0
 800d324:	e086      	b.n	800d434 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d32c:	2bff      	cmp	r3, #255	; 0xff
 800d32e:	d007      	beq.n	800d340 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d336:	3301      	adds	r3, #1
 800d338:	b2da      	uxtb	r2, r3
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d340:	6a3b      	ldr	r3, [r7, #32]
 800d342:	68db      	ldr	r3, [r3, #12]
 800d344:	899b      	ldrh	r3, [r3, #12]
 800d346:	b29b      	uxth	r3, r3
 800d348:	4618      	mov	r0, r3
 800d34a:	f7f8 fb33 	bl	80059b4 <lwip_htons>
 800d34e:	4603      	mov	r3, r0
 800d350:	b2db      	uxtb	r3, r3
 800d352:	f003 0301 	and.w	r3, r3, #1
 800d356:	2b00      	cmp	r3, #0
 800d358:	d005      	beq.n	800d366 <tcp_zero_window_probe+0x72>
 800d35a:	6a3b      	ldr	r3, [r7, #32]
 800d35c:	891b      	ldrh	r3, [r3, #8]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d101      	bne.n	800d366 <tcp_zero_window_probe+0x72>
 800d362:	2301      	movs	r3, #1
 800d364:	e000      	b.n	800d368 <tcp_zero_window_probe+0x74>
 800d366:	2300      	movs	r3, #0
 800d368:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800d36a:	7ffb      	ldrb	r3, [r7, #31]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	bf0c      	ite	eq
 800d370:	2301      	moveq	r3, #1
 800d372:	2300      	movne	r3, #0
 800d374:	b2db      	uxtb	r3, r3
 800d376:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800d378:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d37c:	b299      	uxth	r1, r3
 800d37e:	6a3b      	ldr	r3, [r7, #32]
 800d380:	68db      	ldr	r3, [r3, #12]
 800d382:	685b      	ldr	r3, [r3, #4]
 800d384:	8bba      	ldrh	r2, [r7, #28]
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f7ff fdfa 	bl	800cf80 <tcp_output_alloc_header>
 800d38c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800d38e:	69bb      	ldr	r3, [r7, #24]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d102      	bne.n	800d39a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800d394:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d398:	e04c      	b.n	800d434 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800d39a:	69bb      	ldr	r3, [r7, #24]
 800d39c:	685b      	ldr	r3, [r3, #4]
 800d39e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800d3a0:	7ffb      	ldrb	r3, [r7, #31]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d011      	beq.n	800d3ca <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800d3a6:	697b      	ldr	r3, [r7, #20]
 800d3a8:	899b      	ldrh	r3, [r3, #12]
 800d3aa:	b29b      	uxth	r3, r3
 800d3ac:	b21b      	sxth	r3, r3
 800d3ae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d3b2:	b21c      	sxth	r4, r3
 800d3b4:	2011      	movs	r0, #17
 800d3b6:	f7f8 fafd 	bl	80059b4 <lwip_htons>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	b21b      	sxth	r3, r3
 800d3be:	4323      	orrs	r3, r4
 800d3c0:	b21b      	sxth	r3, r3
 800d3c2:	b29a      	uxth	r2, r3
 800d3c4:	697b      	ldr	r3, [r7, #20]
 800d3c6:	819a      	strh	r2, [r3, #12]
 800d3c8:	e010      	b.n	800d3ec <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800d3ca:	69bb      	ldr	r3, [r7, #24]
 800d3cc:	685b      	ldr	r3, [r3, #4]
 800d3ce:	3314      	adds	r3, #20
 800d3d0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800d3d2:	6a3b      	ldr	r3, [r7, #32]
 800d3d4:	6858      	ldr	r0, [r3, #4]
 800d3d6:	6a3b      	ldr	r3, [r7, #32]
 800d3d8:	685b      	ldr	r3, [r3, #4]
 800d3da:	891a      	ldrh	r2, [r3, #8]
 800d3dc:	6a3b      	ldr	r3, [r7, #32]
 800d3de:	891b      	ldrh	r3, [r3, #8]
 800d3e0:	1ad3      	subs	r3, r2, r3
 800d3e2:	b29b      	uxth	r3, r3
 800d3e4:	2201      	movs	r2, #1
 800d3e6:	6939      	ldr	r1, [r7, #16]
 800d3e8:	f7f9 ff82 	bl	80072f0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d3ec:	6a3b      	ldr	r3, [r7, #32]
 800d3ee:	68db      	ldr	r3, [r3, #12]
 800d3f0:	685b      	ldr	r3, [r3, #4]
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	f7f8 faf3 	bl	80059de <lwip_htonl>
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	3301      	adds	r3, #1
 800d3fc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	1ad3      	subs	r3, r2, r3
 800d406:	2b00      	cmp	r3, #0
 800d408:	da02      	bge.n	800d410 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	68fa      	ldr	r2, [r7, #12]
 800d40e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d410:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d414:	2200      	movs	r2, #0
 800d416:	69b9      	ldr	r1, [r7, #24]
 800d418:	6878      	ldr	r0, [r7, #4]
 800d41a:	f7ff fdef 	bl	800cffc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d41e:	687a      	ldr	r2, [r7, #4]
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	3304      	adds	r3, #4
 800d424:	69b9      	ldr	r1, [r7, #24]
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	f7ff fe28 	bl	800d07c <tcp_output_control_segment>
 800d42c:	4603      	mov	r3, r0
 800d42e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d430:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d434:	4618      	mov	r0, r3
 800d436:	372c      	adds	r7, #44	; 0x2c
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd90      	pop	{r4, r7, pc}
 800d43c:	08012ce0 	.word	0x08012ce0
 800d440:	080134d8 	.word	0x080134d8
 800d444:	08012d34 	.word	0x08012d34

0800d448 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b082      	sub	sp, #8
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800d450:	f7fa f8ce 	bl	80075f0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800d454:	4b0a      	ldr	r3, [pc, #40]	; (800d480 <tcpip_tcp_timer+0x38>)
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d103      	bne.n	800d464 <tcpip_tcp_timer+0x1c>
 800d45c:	4b09      	ldr	r3, [pc, #36]	; (800d484 <tcpip_tcp_timer+0x3c>)
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d005      	beq.n	800d470 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d464:	2200      	movs	r2, #0
 800d466:	4908      	ldr	r1, [pc, #32]	; (800d488 <tcpip_tcp_timer+0x40>)
 800d468:	20fa      	movs	r0, #250	; 0xfa
 800d46a:	f000 f8f3 	bl	800d654 <sys_timeout>
 800d46e:	e003      	b.n	800d478 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800d470:	4b06      	ldr	r3, [pc, #24]	; (800d48c <tcpip_tcp_timer+0x44>)
 800d472:	2200      	movs	r2, #0
 800d474:	601a      	str	r2, [r3, #0]
  }
}
 800d476:	bf00      	nop
 800d478:	bf00      	nop
 800d47a:	3708      	adds	r7, #8
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}
 800d480:	200065f4 	.word	0x200065f4
 800d484:	20006604 	.word	0x20006604
 800d488:	0800d449 	.word	0x0800d449
 800d48c:	2000010c 	.word	0x2000010c

0800d490 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800d494:	4b0a      	ldr	r3, [pc, #40]	; (800d4c0 <tcp_timer_needed+0x30>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d10f      	bne.n	800d4bc <tcp_timer_needed+0x2c>
 800d49c:	4b09      	ldr	r3, [pc, #36]	; (800d4c4 <tcp_timer_needed+0x34>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d103      	bne.n	800d4ac <tcp_timer_needed+0x1c>
 800d4a4:	4b08      	ldr	r3, [pc, #32]	; (800d4c8 <tcp_timer_needed+0x38>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d007      	beq.n	800d4bc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800d4ac:	4b04      	ldr	r3, [pc, #16]	; (800d4c0 <tcp_timer_needed+0x30>)
 800d4ae:	2201      	movs	r2, #1
 800d4b0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	4905      	ldr	r1, [pc, #20]	; (800d4cc <tcp_timer_needed+0x3c>)
 800d4b6:	20fa      	movs	r0, #250	; 0xfa
 800d4b8:	f000 f8cc 	bl	800d654 <sys_timeout>
  }
}
 800d4bc:	bf00      	nop
 800d4be:	bd80      	pop	{r7, pc}
 800d4c0:	2000010c 	.word	0x2000010c
 800d4c4:	200065f4 	.word	0x200065f4
 800d4c8:	20006604 	.word	0x20006604
 800d4cc:	0800d449 	.word	0x0800d449

0800d4d0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b086      	sub	sp, #24
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	60f8      	str	r0, [r7, #12]
 800d4d8:	60b9      	str	r1, [r7, #8]
 800d4da:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800d4dc:	2006      	movs	r0, #6
 800d4de:	f7f8 febf 	bl	8006260 <memp_malloc>
 800d4e2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800d4e4:	693b      	ldr	r3, [r7, #16]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d109      	bne.n	800d4fe <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800d4ea:	693b      	ldr	r3, [r7, #16]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d151      	bne.n	800d594 <sys_timeout_abs+0xc4>
 800d4f0:	4b2a      	ldr	r3, [pc, #168]	; (800d59c <sys_timeout_abs+0xcc>)
 800d4f2:	22be      	movs	r2, #190	; 0xbe
 800d4f4:	492a      	ldr	r1, [pc, #168]	; (800d5a0 <sys_timeout_abs+0xd0>)
 800d4f6:	482b      	ldr	r0, [pc, #172]	; (800d5a4 <sys_timeout_abs+0xd4>)
 800d4f8:	f002 fdf4 	bl	80100e4 <iprintf>
    return;
 800d4fc:	e04a      	b.n	800d594 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800d4fe:	693b      	ldr	r3, [r7, #16]
 800d500:	2200      	movs	r2, #0
 800d502:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800d504:	693b      	ldr	r3, [r7, #16]
 800d506:	68ba      	ldr	r2, [r7, #8]
 800d508:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800d50a:	693b      	ldr	r3, [r7, #16]
 800d50c:	687a      	ldr	r2, [r7, #4]
 800d50e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800d510:	693b      	ldr	r3, [r7, #16]
 800d512:	68fa      	ldr	r2, [r7, #12]
 800d514:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800d516:	4b24      	ldr	r3, [pc, #144]	; (800d5a8 <sys_timeout_abs+0xd8>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d103      	bne.n	800d526 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800d51e:	4a22      	ldr	r2, [pc, #136]	; (800d5a8 <sys_timeout_abs+0xd8>)
 800d520:	693b      	ldr	r3, [r7, #16]
 800d522:	6013      	str	r3, [r2, #0]
    return;
 800d524:	e037      	b.n	800d596 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800d526:	693b      	ldr	r3, [r7, #16]
 800d528:	685a      	ldr	r2, [r3, #4]
 800d52a:	4b1f      	ldr	r3, [pc, #124]	; (800d5a8 <sys_timeout_abs+0xd8>)
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	685b      	ldr	r3, [r3, #4]
 800d530:	1ad3      	subs	r3, r2, r3
 800d532:	0fdb      	lsrs	r3, r3, #31
 800d534:	f003 0301 	and.w	r3, r3, #1
 800d538:	b2db      	uxtb	r3, r3
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d007      	beq.n	800d54e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800d53e:	4b1a      	ldr	r3, [pc, #104]	; (800d5a8 <sys_timeout_abs+0xd8>)
 800d540:	681a      	ldr	r2, [r3, #0]
 800d542:	693b      	ldr	r3, [r7, #16]
 800d544:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800d546:	4a18      	ldr	r2, [pc, #96]	; (800d5a8 <sys_timeout_abs+0xd8>)
 800d548:	693b      	ldr	r3, [r7, #16]
 800d54a:	6013      	str	r3, [r2, #0]
 800d54c:	e023      	b.n	800d596 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800d54e:	4b16      	ldr	r3, [pc, #88]	; (800d5a8 <sys_timeout_abs+0xd8>)
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	617b      	str	r3, [r7, #20]
 800d554:	e01a      	b.n	800d58c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d00b      	beq.n	800d576 <sys_timeout_abs+0xa6>
 800d55e:	693b      	ldr	r3, [r7, #16]
 800d560:	685a      	ldr	r2, [r3, #4]
 800d562:	697b      	ldr	r3, [r7, #20]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	685b      	ldr	r3, [r3, #4]
 800d568:	1ad3      	subs	r3, r2, r3
 800d56a:	0fdb      	lsrs	r3, r3, #31
 800d56c:	f003 0301 	and.w	r3, r3, #1
 800d570:	b2db      	uxtb	r3, r3
 800d572:	2b00      	cmp	r3, #0
 800d574:	d007      	beq.n	800d586 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800d576:	697b      	ldr	r3, [r7, #20]
 800d578:	681a      	ldr	r2, [r3, #0]
 800d57a:	693b      	ldr	r3, [r7, #16]
 800d57c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	693a      	ldr	r2, [r7, #16]
 800d582:	601a      	str	r2, [r3, #0]
        break;
 800d584:	e007      	b.n	800d596 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800d586:	697b      	ldr	r3, [r7, #20]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	617b      	str	r3, [r7, #20]
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d1e1      	bne.n	800d556 <sys_timeout_abs+0x86>
 800d592:	e000      	b.n	800d596 <sys_timeout_abs+0xc6>
    return;
 800d594:	bf00      	nop
      }
    }
  }
}
 800d596:	3718      	adds	r7, #24
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}
 800d59c:	080134fc 	.word	0x080134fc
 800d5a0:	08013530 	.word	0x08013530
 800d5a4:	08013570 	.word	0x08013570
 800d5a8:	20000104 	.word	0x20000104

0800d5ac <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b086      	sub	sp, #24
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800d5b8:	697b      	ldr	r3, [r7, #20]
 800d5ba:	685b      	ldr	r3, [r3, #4]
 800d5bc:	4798      	blx	r3

  now = sys_now();
 800d5be:	f7f8 f96b 	bl	8005898 <sys_now>
 800d5c2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800d5c4:	697b      	ldr	r3, [r7, #20]
 800d5c6:	681a      	ldr	r2, [r3, #0]
 800d5c8:	4b0f      	ldr	r3, [pc, #60]	; (800d608 <lwip_cyclic_timer+0x5c>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	4413      	add	r3, r2
 800d5ce:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800d5d0:	68fa      	ldr	r2, [r7, #12]
 800d5d2:	693b      	ldr	r3, [r7, #16]
 800d5d4:	1ad3      	subs	r3, r2, r3
 800d5d6:	0fdb      	lsrs	r3, r3, #31
 800d5d8:	f003 0301 	and.w	r3, r3, #1
 800d5dc:	b2db      	uxtb	r3, r3
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d009      	beq.n	800d5f6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	681a      	ldr	r2, [r3, #0]
 800d5e6:	693b      	ldr	r3, [r7, #16]
 800d5e8:	4413      	add	r3, r2
 800d5ea:	687a      	ldr	r2, [r7, #4]
 800d5ec:	4907      	ldr	r1, [pc, #28]	; (800d60c <lwip_cyclic_timer+0x60>)
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f7ff ff6e 	bl	800d4d0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800d5f4:	e004      	b.n	800d600 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800d5f6:	687a      	ldr	r2, [r7, #4]
 800d5f8:	4904      	ldr	r1, [pc, #16]	; (800d60c <lwip_cyclic_timer+0x60>)
 800d5fa:	68f8      	ldr	r0, [r7, #12]
 800d5fc:	f7ff ff68 	bl	800d4d0 <sys_timeout_abs>
}
 800d600:	bf00      	nop
 800d602:	3718      	adds	r7, #24
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}
 800d608:	20000108 	.word	0x20000108
 800d60c:	0800d5ad 	.word	0x0800d5ad

0800d610 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b082      	sub	sp, #8
 800d614:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d616:	2301      	movs	r3, #1
 800d618:	607b      	str	r3, [r7, #4]
 800d61a:	e00e      	b.n	800d63a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800d61c:	4a0b      	ldr	r2, [pc, #44]	; (800d64c <sys_timeouts_init+0x3c>)
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	00db      	lsls	r3, r3, #3
 800d628:	4a08      	ldr	r2, [pc, #32]	; (800d64c <sys_timeouts_init+0x3c>)
 800d62a:	4413      	add	r3, r2
 800d62c:	461a      	mov	r2, r3
 800d62e:	4908      	ldr	r1, [pc, #32]	; (800d650 <sys_timeouts_init+0x40>)
 800d630:	f000 f810 	bl	800d654 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	3301      	adds	r3, #1
 800d638:	607b      	str	r3, [r7, #4]
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2b02      	cmp	r3, #2
 800d63e:	d9ed      	bls.n	800d61c <sys_timeouts_init+0xc>
  }
}
 800d640:	bf00      	nop
 800d642:	bf00      	nop
 800d644:	3708      	adds	r7, #8
 800d646:	46bd      	mov	sp, r7
 800d648:	bd80      	pop	{r7, pc}
 800d64a:	bf00      	nop
 800d64c:	080140dc 	.word	0x080140dc
 800d650:	0800d5ad 	.word	0x0800d5ad

0800d654 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b086      	sub	sp, #24
 800d658:	af00      	add	r7, sp, #0
 800d65a:	60f8      	str	r0, [r7, #12]
 800d65c:	60b9      	str	r1, [r7, #8]
 800d65e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d666:	d306      	bcc.n	800d676 <sys_timeout+0x22>
 800d668:	4b0a      	ldr	r3, [pc, #40]	; (800d694 <sys_timeout+0x40>)
 800d66a:	f240 1229 	movw	r2, #297	; 0x129
 800d66e:	490a      	ldr	r1, [pc, #40]	; (800d698 <sys_timeout+0x44>)
 800d670:	480a      	ldr	r0, [pc, #40]	; (800d69c <sys_timeout+0x48>)
 800d672:	f002 fd37 	bl	80100e4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800d676:	f7f8 f90f 	bl	8005898 <sys_now>
 800d67a:	4602      	mov	r2, r0
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	4413      	add	r3, r2
 800d680:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d682:	687a      	ldr	r2, [r7, #4]
 800d684:	68b9      	ldr	r1, [r7, #8]
 800d686:	6978      	ldr	r0, [r7, #20]
 800d688:	f7ff ff22 	bl	800d4d0 <sys_timeout_abs>
#endif
}
 800d68c:	bf00      	nop
 800d68e:	3718      	adds	r7, #24
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}
 800d694:	080134fc 	.word	0x080134fc
 800d698:	08013598 	.word	0x08013598
 800d69c:	08013570 	.word	0x08013570

0800d6a0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b084      	sub	sp, #16
 800d6a4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800d6a6:	f7f8 f8f7 	bl	8005898 <sys_now>
 800d6aa:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800d6ac:	4b1a      	ldr	r3, [pc, #104]	; (800d718 <sys_check_timeouts+0x78>)
 800d6ae:	781b      	ldrb	r3, [r3, #0]
 800d6b0:	b2db      	uxtb	r3, r3
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d001      	beq.n	800d6ba <sys_check_timeouts+0x1a>
 800d6b6:	f7f9 f8f7 	bl	80068a8 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800d6ba:	4b18      	ldr	r3, [pc, #96]	; (800d71c <sys_check_timeouts+0x7c>)
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800d6c0:	68bb      	ldr	r3, [r7, #8]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d022      	beq.n	800d70c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	685b      	ldr	r3, [r3, #4]
 800d6ca:	68fa      	ldr	r2, [r7, #12]
 800d6cc:	1ad3      	subs	r3, r2, r3
 800d6ce:	0fdb      	lsrs	r3, r3, #31
 800d6d0:	f003 0301 	and.w	r3, r3, #1
 800d6d4:	b2db      	uxtb	r3, r3
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d11a      	bne.n	800d710 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	4a0f      	ldr	r2, [pc, #60]	; (800d71c <sys_check_timeouts+0x7c>)
 800d6e0:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	689b      	ldr	r3, [r3, #8]
 800d6e6:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	68db      	ldr	r3, [r3, #12]
 800d6ec:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800d6ee:	68bb      	ldr	r3, [r7, #8]
 800d6f0:	685b      	ldr	r3, [r3, #4]
 800d6f2:	4a0b      	ldr	r2, [pc, #44]	; (800d720 <sys_check_timeouts+0x80>)
 800d6f4:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800d6f6:	68b9      	ldr	r1, [r7, #8]
 800d6f8:	2006      	movs	r0, #6
 800d6fa:	f7f8 fdfd 	bl	80062f8 <memp_free>
    if (handler != NULL) {
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d0d3      	beq.n	800d6ac <sys_check_timeouts+0xc>
      handler(arg);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	6838      	ldr	r0, [r7, #0]
 800d708:	4798      	blx	r3
  do {
 800d70a:	e7cf      	b.n	800d6ac <sys_check_timeouts+0xc>
      return;
 800d70c:	bf00      	nop
 800d70e:	e000      	b.n	800d712 <sys_check_timeouts+0x72>
      return;
 800d710:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800d712:	3710      	adds	r7, #16
 800d714:	46bd      	mov	sp, r7
 800d716:	bd80      	pop	{r7, pc}
 800d718:	200065ec 	.word	0x200065ec
 800d71c:	20000104 	.word	0x20000104
 800d720:	20000108 	.word	0x20000108

0800d724 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d728:	f002 fcf4 	bl	8010114 <rand>
 800d72c:	4603      	mov	r3, r0
 800d72e:	b29b      	uxth	r3, r3
 800d730:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d734:	b29b      	uxth	r3, r3
 800d736:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d73a:	b29a      	uxth	r2, r3
 800d73c:	4b01      	ldr	r3, [pc, #4]	; (800d744 <udp_init+0x20>)
 800d73e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d740:	bf00      	nop
 800d742:	bd80      	pop	{r7, pc}
 800d744:	20000010 	.word	0x20000010

0800d748 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b084      	sub	sp, #16
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	60f8      	str	r0, [r7, #12]
 800d750:	60b9      	str	r1, [r7, #8]
 800d752:	4613      	mov	r3, r2
 800d754:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d105      	bne.n	800d768 <udp_input_local_match+0x20>
 800d75c:	4b27      	ldr	r3, [pc, #156]	; (800d7fc <udp_input_local_match+0xb4>)
 800d75e:	2287      	movs	r2, #135	; 0x87
 800d760:	4927      	ldr	r1, [pc, #156]	; (800d800 <udp_input_local_match+0xb8>)
 800d762:	4828      	ldr	r0, [pc, #160]	; (800d804 <udp_input_local_match+0xbc>)
 800d764:	f002 fcbe 	bl	80100e4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800d768:	68bb      	ldr	r3, [r7, #8]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d105      	bne.n	800d77a <udp_input_local_match+0x32>
 800d76e:	4b23      	ldr	r3, [pc, #140]	; (800d7fc <udp_input_local_match+0xb4>)
 800d770:	2288      	movs	r2, #136	; 0x88
 800d772:	4925      	ldr	r1, [pc, #148]	; (800d808 <udp_input_local_match+0xc0>)
 800d774:	4823      	ldr	r0, [pc, #140]	; (800d804 <udp_input_local_match+0xbc>)
 800d776:	f002 fcb5 	bl	80100e4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	7a1b      	ldrb	r3, [r3, #8]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d00b      	beq.n	800d79a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	7a1a      	ldrb	r2, [r3, #8]
 800d786:	4b21      	ldr	r3, [pc, #132]	; (800d80c <udp_input_local_match+0xc4>)
 800d788:	685b      	ldr	r3, [r3, #4]
 800d78a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d78e:	3301      	adds	r3, #1
 800d790:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d792:	429a      	cmp	r2, r3
 800d794:	d001      	beq.n	800d79a <udp_input_local_match+0x52>
    return 0;
 800d796:	2300      	movs	r3, #0
 800d798:	e02b      	b.n	800d7f2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800d79a:	79fb      	ldrb	r3, [r7, #7]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d018      	beq.n	800d7d2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d013      	beq.n	800d7ce <udp_input_local_match+0x86>
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d00f      	beq.n	800d7ce <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d7ae:	4b17      	ldr	r3, [pc, #92]	; (800d80c <udp_input_local_match+0xc4>)
 800d7b0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d7b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d7b6:	d00a      	beq.n	800d7ce <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	681a      	ldr	r2, [r3, #0]
 800d7bc:	4b13      	ldr	r3, [pc, #76]	; (800d80c <udp_input_local_match+0xc4>)
 800d7be:	695b      	ldr	r3, [r3, #20]
 800d7c0:	405a      	eors	r2, r3
 800d7c2:	68bb      	ldr	r3, [r7, #8]
 800d7c4:	3308      	adds	r3, #8
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d110      	bne.n	800d7f0 <udp_input_local_match+0xa8>
          return 1;
 800d7ce:	2301      	movs	r3, #1
 800d7d0:	e00f      	b.n	800d7f2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d009      	beq.n	800d7ec <udp_input_local_match+0xa4>
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d005      	beq.n	800d7ec <udp_input_local_match+0xa4>
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	681a      	ldr	r2, [r3, #0]
 800d7e4:	4b09      	ldr	r3, [pc, #36]	; (800d80c <udp_input_local_match+0xc4>)
 800d7e6:	695b      	ldr	r3, [r3, #20]
 800d7e8:	429a      	cmp	r2, r3
 800d7ea:	d101      	bne.n	800d7f0 <udp_input_local_match+0xa8>
        return 1;
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	e000      	b.n	800d7f2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800d7f0:	2300      	movs	r3, #0
}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	3710      	adds	r7, #16
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd80      	pop	{r7, pc}
 800d7fa:	bf00      	nop
 800d7fc:	080135e4 	.word	0x080135e4
 800d800:	08013614 	.word	0x08013614
 800d804:	08013638 	.word	0x08013638
 800d808:	08013660 	.word	0x08013660
 800d80c:	200034f0 	.word	0x200034f0

0800d810 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800d810:	b590      	push	{r4, r7, lr}
 800d812:	b08d      	sub	sp, #52	; 0x34
 800d814:	af02      	add	r7, sp, #8
 800d816:	6078      	str	r0, [r7, #4]
 800d818:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800d81a:	2300      	movs	r3, #0
 800d81c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d105      	bne.n	800d830 <udp_input+0x20>
 800d824:	4b7c      	ldr	r3, [pc, #496]	; (800da18 <udp_input+0x208>)
 800d826:	22cf      	movs	r2, #207	; 0xcf
 800d828:	497c      	ldr	r1, [pc, #496]	; (800da1c <udp_input+0x20c>)
 800d82a:	487d      	ldr	r0, [pc, #500]	; (800da20 <udp_input+0x210>)
 800d82c:	f002 fc5a 	bl	80100e4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d105      	bne.n	800d842 <udp_input+0x32>
 800d836:	4b78      	ldr	r3, [pc, #480]	; (800da18 <udp_input+0x208>)
 800d838:	22d0      	movs	r2, #208	; 0xd0
 800d83a:	497a      	ldr	r1, [pc, #488]	; (800da24 <udp_input+0x214>)
 800d83c:	4878      	ldr	r0, [pc, #480]	; (800da20 <udp_input+0x210>)
 800d83e:	f002 fc51 	bl	80100e4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	895b      	ldrh	r3, [r3, #10]
 800d846:	2b07      	cmp	r3, #7
 800d848:	d803      	bhi.n	800d852 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f7f9 fb66 	bl	8006f1c <pbuf_free>
    goto end;
 800d850:	e0de      	b.n	800da10 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	685b      	ldr	r3, [r3, #4]
 800d856:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d858:	4b73      	ldr	r3, [pc, #460]	; (800da28 <udp_input+0x218>)
 800d85a:	695b      	ldr	r3, [r3, #20]
 800d85c:	4a72      	ldr	r2, [pc, #456]	; (800da28 <udp_input+0x218>)
 800d85e:	6812      	ldr	r2, [r2, #0]
 800d860:	4611      	mov	r1, r2
 800d862:	4618      	mov	r0, r3
 800d864:	f001 fc88 	bl	800f178 <ip4_addr_isbroadcast_u32>
 800d868:	4603      	mov	r3, r0
 800d86a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800d86c:	697b      	ldr	r3, [r7, #20]
 800d86e:	881b      	ldrh	r3, [r3, #0]
 800d870:	b29b      	uxth	r3, r3
 800d872:	4618      	mov	r0, r3
 800d874:	f7f8 f89e 	bl	80059b4 <lwip_htons>
 800d878:	4603      	mov	r3, r0
 800d87a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	885b      	ldrh	r3, [r3, #2]
 800d880:	b29b      	uxth	r3, r3
 800d882:	4618      	mov	r0, r3
 800d884:	f7f8 f896 	bl	80059b4 <lwip_htons>
 800d888:	4603      	mov	r3, r0
 800d88a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800d88c:	2300      	movs	r3, #0
 800d88e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800d890:	2300      	movs	r3, #0
 800d892:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800d894:	2300      	movs	r3, #0
 800d896:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d898:	4b64      	ldr	r3, [pc, #400]	; (800da2c <udp_input+0x21c>)
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	627b      	str	r3, [r7, #36]	; 0x24
 800d89e:	e054      	b.n	800d94a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800d8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8a2:	8a5b      	ldrh	r3, [r3, #18]
 800d8a4:	89fa      	ldrh	r2, [r7, #14]
 800d8a6:	429a      	cmp	r2, r3
 800d8a8:	d14a      	bne.n	800d940 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800d8aa:	7cfb      	ldrb	r3, [r7, #19]
 800d8ac:	461a      	mov	r2, r3
 800d8ae:	6839      	ldr	r1, [r7, #0]
 800d8b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d8b2:	f7ff ff49 	bl	800d748 <udp_input_local_match>
 800d8b6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d041      	beq.n	800d940 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800d8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8be:	7c1b      	ldrb	r3, [r3, #16]
 800d8c0:	f003 0304 	and.w	r3, r3, #4
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d11d      	bne.n	800d904 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800d8c8:	69fb      	ldr	r3, [r7, #28]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d102      	bne.n	800d8d4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800d8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d0:	61fb      	str	r3, [r7, #28]
 800d8d2:	e017      	b.n	800d904 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800d8d4:	7cfb      	ldrb	r3, [r7, #19]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d014      	beq.n	800d904 <udp_input+0xf4>
 800d8da:	4b53      	ldr	r3, [pc, #332]	; (800da28 <udp_input+0x218>)
 800d8dc:	695b      	ldr	r3, [r3, #20]
 800d8de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d8e2:	d10f      	bne.n	800d904 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800d8e4:	69fb      	ldr	r3, [r7, #28]
 800d8e6:	681a      	ldr	r2, [r3, #0]
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	3304      	adds	r3, #4
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	429a      	cmp	r2, r3
 800d8f0:	d008      	beq.n	800d904 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800d8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8f4:	681a      	ldr	r2, [r3, #0]
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	3304      	adds	r3, #4
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	429a      	cmp	r2, r3
 800d8fe:	d101      	bne.n	800d904 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800d900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d902:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800d904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d906:	8a9b      	ldrh	r3, [r3, #20]
 800d908:	8a3a      	ldrh	r2, [r7, #16]
 800d90a:	429a      	cmp	r2, r3
 800d90c:	d118      	bne.n	800d940 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d910:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800d912:	2b00      	cmp	r3, #0
 800d914:	d005      	beq.n	800d922 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800d916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d918:	685a      	ldr	r2, [r3, #4]
 800d91a:	4b43      	ldr	r3, [pc, #268]	; (800da28 <udp_input+0x218>)
 800d91c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d91e:	429a      	cmp	r2, r3
 800d920:	d10e      	bne.n	800d940 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800d922:	6a3b      	ldr	r3, [r7, #32]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d014      	beq.n	800d952 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800d928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d92a:	68da      	ldr	r2, [r3, #12]
 800d92c:	6a3b      	ldr	r3, [r7, #32]
 800d92e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800d930:	4b3e      	ldr	r3, [pc, #248]	; (800da2c <udp_input+0x21c>)
 800d932:	681a      	ldr	r2, [r3, #0]
 800d934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d936:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800d938:	4a3c      	ldr	r2, [pc, #240]	; (800da2c <udp_input+0x21c>)
 800d93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d93c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800d93e:	e008      	b.n	800d952 <udp_input+0x142>
      }
    }

    prev = pcb;
 800d940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d942:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d946:	68db      	ldr	r3, [r3, #12]
 800d948:	627b      	str	r3, [r7, #36]	; 0x24
 800d94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d1a7      	bne.n	800d8a0 <udp_input+0x90>
 800d950:	e000      	b.n	800d954 <udp_input+0x144>
        break;
 800d952:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800d954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d956:	2b00      	cmp	r3, #0
 800d958:	d101      	bne.n	800d95e <udp_input+0x14e>
    pcb = uncon_pcb;
 800d95a:	69fb      	ldr	r3, [r7, #28]
 800d95c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800d95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d960:	2b00      	cmp	r3, #0
 800d962:	d002      	beq.n	800d96a <udp_input+0x15a>
    for_us = 1;
 800d964:	2301      	movs	r3, #1
 800d966:	76fb      	strb	r3, [r7, #27]
 800d968:	e00a      	b.n	800d980 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	3304      	adds	r3, #4
 800d96e:	681a      	ldr	r2, [r3, #0]
 800d970:	4b2d      	ldr	r3, [pc, #180]	; (800da28 <udp_input+0x218>)
 800d972:	695b      	ldr	r3, [r3, #20]
 800d974:	429a      	cmp	r2, r3
 800d976:	bf0c      	ite	eq
 800d978:	2301      	moveq	r3, #1
 800d97a:	2300      	movne	r3, #0
 800d97c:	b2db      	uxtb	r3, r3
 800d97e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800d980:	7efb      	ldrb	r3, [r7, #27]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d041      	beq.n	800da0a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800d986:	2108      	movs	r1, #8
 800d988:	6878      	ldr	r0, [r7, #4]
 800d98a:	f7f9 fa41 	bl	8006e10 <pbuf_remove_header>
 800d98e:	4603      	mov	r3, r0
 800d990:	2b00      	cmp	r3, #0
 800d992:	d00a      	beq.n	800d9aa <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800d994:	4b20      	ldr	r3, [pc, #128]	; (800da18 <udp_input+0x208>)
 800d996:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800d99a:	4925      	ldr	r1, [pc, #148]	; (800da30 <udp_input+0x220>)
 800d99c:	4820      	ldr	r0, [pc, #128]	; (800da20 <udp_input+0x210>)
 800d99e:	f002 fba1 	bl	80100e4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800d9a2:	6878      	ldr	r0, [r7, #4]
 800d9a4:	f7f9 faba 	bl	8006f1c <pbuf_free>
      goto end;
 800d9a8:	e032      	b.n	800da10 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800d9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d012      	beq.n	800d9d6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800d9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b2:	699b      	ldr	r3, [r3, #24]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d00a      	beq.n	800d9ce <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800d9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ba:	699c      	ldr	r4, [r3, #24]
 800d9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9be:	69d8      	ldr	r0, [r3, #28]
 800d9c0:	8a3b      	ldrh	r3, [r7, #16]
 800d9c2:	9300      	str	r3, [sp, #0]
 800d9c4:	4b1b      	ldr	r3, [pc, #108]	; (800da34 <udp_input+0x224>)
 800d9c6:	687a      	ldr	r2, [r7, #4]
 800d9c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d9ca:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800d9cc:	e021      	b.n	800da12 <udp_input+0x202>
        pbuf_free(p);
 800d9ce:	6878      	ldr	r0, [r7, #4]
 800d9d0:	f7f9 faa4 	bl	8006f1c <pbuf_free>
        goto end;
 800d9d4:	e01c      	b.n	800da10 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800d9d6:	7cfb      	ldrb	r3, [r7, #19]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d112      	bne.n	800da02 <udp_input+0x1f2>
 800d9dc:	4b12      	ldr	r3, [pc, #72]	; (800da28 <udp_input+0x218>)
 800d9de:	695b      	ldr	r3, [r3, #20]
 800d9e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d9e4:	2be0      	cmp	r3, #224	; 0xe0
 800d9e6:	d00c      	beq.n	800da02 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800d9e8:	4b0f      	ldr	r3, [pc, #60]	; (800da28 <udp_input+0x218>)
 800d9ea:	899b      	ldrh	r3, [r3, #12]
 800d9ec:	3308      	adds	r3, #8
 800d9ee:	b29b      	uxth	r3, r3
 800d9f0:	b21b      	sxth	r3, r3
 800d9f2:	4619      	mov	r1, r3
 800d9f4:	6878      	ldr	r0, [r7, #4]
 800d9f6:	f7f9 fa7e 	bl	8006ef6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800d9fa:	2103      	movs	r1, #3
 800d9fc:	6878      	ldr	r0, [r7, #4]
 800d9fe:	f001 f89b 	bl	800eb38 <icmp_dest_unreach>
      pbuf_free(p);
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f7f9 fa8a 	bl	8006f1c <pbuf_free>
  return;
 800da08:	e003      	b.n	800da12 <udp_input+0x202>
    pbuf_free(p);
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	f7f9 fa86 	bl	8006f1c <pbuf_free>
  return;
 800da10:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800da12:	372c      	adds	r7, #44	; 0x2c
 800da14:	46bd      	mov	sp, r7
 800da16:	bd90      	pop	{r4, r7, pc}
 800da18:	080135e4 	.word	0x080135e4
 800da1c:	08013688 	.word	0x08013688
 800da20:	08013638 	.word	0x08013638
 800da24:	080136a0 	.word	0x080136a0
 800da28:	200034f0 	.word	0x200034f0
 800da2c:	2000660c 	.word	0x2000660c
 800da30:	080136bc 	.word	0x080136bc
 800da34:	20003500 	.word	0x20003500

0800da38 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800da38:	b480      	push	{r7}
 800da3a:	b085      	sub	sp, #20
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
 800da40:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d01e      	beq.n	800da86 <udp_netif_ip_addr_changed+0x4e>
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d01a      	beq.n	800da86 <udp_netif_ip_addr_changed+0x4e>
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d017      	beq.n	800da86 <udp_netif_ip_addr_changed+0x4e>
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d013      	beq.n	800da86 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800da5e:	4b0d      	ldr	r3, [pc, #52]	; (800da94 <udp_netif_ip_addr_changed+0x5c>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	60fb      	str	r3, [r7, #12]
 800da64:	e00c      	b.n	800da80 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	681a      	ldr	r2, [r3, #0]
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	429a      	cmp	r2, r3
 800da70:	d103      	bne.n	800da7a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	681a      	ldr	r2, [r3, #0]
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	68db      	ldr	r3, [r3, #12]
 800da7e:	60fb      	str	r3, [r7, #12]
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d1ef      	bne.n	800da66 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800da86:	bf00      	nop
 800da88:	3714      	adds	r7, #20
 800da8a:	46bd      	mov	sp, r7
 800da8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da90:	4770      	bx	lr
 800da92:	bf00      	nop
 800da94:	2000660c 	.word	0x2000660c

0800da98 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b082      	sub	sp, #8
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800daa0:	4915      	ldr	r1, [pc, #84]	; (800daf8 <etharp_free_entry+0x60>)
 800daa2:	687a      	ldr	r2, [r7, #4]
 800daa4:	4613      	mov	r3, r2
 800daa6:	005b      	lsls	r3, r3, #1
 800daa8:	4413      	add	r3, r2
 800daaa:	00db      	lsls	r3, r3, #3
 800daac:	440b      	add	r3, r1
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d013      	beq.n	800dadc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800dab4:	4910      	ldr	r1, [pc, #64]	; (800daf8 <etharp_free_entry+0x60>)
 800dab6:	687a      	ldr	r2, [r7, #4]
 800dab8:	4613      	mov	r3, r2
 800daba:	005b      	lsls	r3, r3, #1
 800dabc:	4413      	add	r3, r2
 800dabe:	00db      	lsls	r3, r3, #3
 800dac0:	440b      	add	r3, r1
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	4618      	mov	r0, r3
 800dac6:	f7f9 fa29 	bl	8006f1c <pbuf_free>
    arp_table[i].q = NULL;
 800daca:	490b      	ldr	r1, [pc, #44]	; (800daf8 <etharp_free_entry+0x60>)
 800dacc:	687a      	ldr	r2, [r7, #4]
 800dace:	4613      	mov	r3, r2
 800dad0:	005b      	lsls	r3, r3, #1
 800dad2:	4413      	add	r3, r2
 800dad4:	00db      	lsls	r3, r3, #3
 800dad6:	440b      	add	r3, r1
 800dad8:	2200      	movs	r2, #0
 800dada:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800dadc:	4906      	ldr	r1, [pc, #24]	; (800daf8 <etharp_free_entry+0x60>)
 800dade:	687a      	ldr	r2, [r7, #4]
 800dae0:	4613      	mov	r3, r2
 800dae2:	005b      	lsls	r3, r3, #1
 800dae4:	4413      	add	r3, r2
 800dae6:	00db      	lsls	r3, r3, #3
 800dae8:	440b      	add	r3, r1
 800daea:	3314      	adds	r3, #20
 800daec:	2200      	movs	r2, #0
 800daee:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800daf0:	bf00      	nop
 800daf2:	3708      	adds	r7, #8
 800daf4:	46bd      	mov	sp, r7
 800daf6:	bd80      	pop	{r7, pc}
 800daf8:	20000110 	.word	0x20000110

0800dafc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b082      	sub	sp, #8
 800db00:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800db02:	2300      	movs	r3, #0
 800db04:	607b      	str	r3, [r7, #4]
 800db06:	e096      	b.n	800dc36 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800db08:	494f      	ldr	r1, [pc, #316]	; (800dc48 <etharp_tmr+0x14c>)
 800db0a:	687a      	ldr	r2, [r7, #4]
 800db0c:	4613      	mov	r3, r2
 800db0e:	005b      	lsls	r3, r3, #1
 800db10:	4413      	add	r3, r2
 800db12:	00db      	lsls	r3, r3, #3
 800db14:	440b      	add	r3, r1
 800db16:	3314      	adds	r3, #20
 800db18:	781b      	ldrb	r3, [r3, #0]
 800db1a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800db1c:	78fb      	ldrb	r3, [r7, #3]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	f000 8086 	beq.w	800dc30 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800db24:	4948      	ldr	r1, [pc, #288]	; (800dc48 <etharp_tmr+0x14c>)
 800db26:	687a      	ldr	r2, [r7, #4]
 800db28:	4613      	mov	r3, r2
 800db2a:	005b      	lsls	r3, r3, #1
 800db2c:	4413      	add	r3, r2
 800db2e:	00db      	lsls	r3, r3, #3
 800db30:	440b      	add	r3, r1
 800db32:	3312      	adds	r3, #18
 800db34:	881b      	ldrh	r3, [r3, #0]
 800db36:	3301      	adds	r3, #1
 800db38:	b298      	uxth	r0, r3
 800db3a:	4943      	ldr	r1, [pc, #268]	; (800dc48 <etharp_tmr+0x14c>)
 800db3c:	687a      	ldr	r2, [r7, #4]
 800db3e:	4613      	mov	r3, r2
 800db40:	005b      	lsls	r3, r3, #1
 800db42:	4413      	add	r3, r2
 800db44:	00db      	lsls	r3, r3, #3
 800db46:	440b      	add	r3, r1
 800db48:	3312      	adds	r3, #18
 800db4a:	4602      	mov	r2, r0
 800db4c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800db4e:	493e      	ldr	r1, [pc, #248]	; (800dc48 <etharp_tmr+0x14c>)
 800db50:	687a      	ldr	r2, [r7, #4]
 800db52:	4613      	mov	r3, r2
 800db54:	005b      	lsls	r3, r3, #1
 800db56:	4413      	add	r3, r2
 800db58:	00db      	lsls	r3, r3, #3
 800db5a:	440b      	add	r3, r1
 800db5c:	3312      	adds	r3, #18
 800db5e:	881b      	ldrh	r3, [r3, #0]
 800db60:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800db64:	d215      	bcs.n	800db92 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800db66:	4938      	ldr	r1, [pc, #224]	; (800dc48 <etharp_tmr+0x14c>)
 800db68:	687a      	ldr	r2, [r7, #4]
 800db6a:	4613      	mov	r3, r2
 800db6c:	005b      	lsls	r3, r3, #1
 800db6e:	4413      	add	r3, r2
 800db70:	00db      	lsls	r3, r3, #3
 800db72:	440b      	add	r3, r1
 800db74:	3314      	adds	r3, #20
 800db76:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800db78:	2b01      	cmp	r3, #1
 800db7a:	d10e      	bne.n	800db9a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800db7c:	4932      	ldr	r1, [pc, #200]	; (800dc48 <etharp_tmr+0x14c>)
 800db7e:	687a      	ldr	r2, [r7, #4]
 800db80:	4613      	mov	r3, r2
 800db82:	005b      	lsls	r3, r3, #1
 800db84:	4413      	add	r3, r2
 800db86:	00db      	lsls	r3, r3, #3
 800db88:	440b      	add	r3, r1
 800db8a:	3312      	adds	r3, #18
 800db8c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800db8e:	2b04      	cmp	r3, #4
 800db90:	d903      	bls.n	800db9a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f7ff ff80 	bl	800da98 <etharp_free_entry>
 800db98:	e04a      	b.n	800dc30 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800db9a:	492b      	ldr	r1, [pc, #172]	; (800dc48 <etharp_tmr+0x14c>)
 800db9c:	687a      	ldr	r2, [r7, #4]
 800db9e:	4613      	mov	r3, r2
 800dba0:	005b      	lsls	r3, r3, #1
 800dba2:	4413      	add	r3, r2
 800dba4:	00db      	lsls	r3, r3, #3
 800dba6:	440b      	add	r3, r1
 800dba8:	3314      	adds	r3, #20
 800dbaa:	781b      	ldrb	r3, [r3, #0]
 800dbac:	2b03      	cmp	r3, #3
 800dbae:	d10a      	bne.n	800dbc6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800dbb0:	4925      	ldr	r1, [pc, #148]	; (800dc48 <etharp_tmr+0x14c>)
 800dbb2:	687a      	ldr	r2, [r7, #4]
 800dbb4:	4613      	mov	r3, r2
 800dbb6:	005b      	lsls	r3, r3, #1
 800dbb8:	4413      	add	r3, r2
 800dbba:	00db      	lsls	r3, r3, #3
 800dbbc:	440b      	add	r3, r1
 800dbbe:	3314      	adds	r3, #20
 800dbc0:	2204      	movs	r2, #4
 800dbc2:	701a      	strb	r2, [r3, #0]
 800dbc4:	e034      	b.n	800dc30 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800dbc6:	4920      	ldr	r1, [pc, #128]	; (800dc48 <etharp_tmr+0x14c>)
 800dbc8:	687a      	ldr	r2, [r7, #4]
 800dbca:	4613      	mov	r3, r2
 800dbcc:	005b      	lsls	r3, r3, #1
 800dbce:	4413      	add	r3, r2
 800dbd0:	00db      	lsls	r3, r3, #3
 800dbd2:	440b      	add	r3, r1
 800dbd4:	3314      	adds	r3, #20
 800dbd6:	781b      	ldrb	r3, [r3, #0]
 800dbd8:	2b04      	cmp	r3, #4
 800dbda:	d10a      	bne.n	800dbf2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800dbdc:	491a      	ldr	r1, [pc, #104]	; (800dc48 <etharp_tmr+0x14c>)
 800dbde:	687a      	ldr	r2, [r7, #4]
 800dbe0:	4613      	mov	r3, r2
 800dbe2:	005b      	lsls	r3, r3, #1
 800dbe4:	4413      	add	r3, r2
 800dbe6:	00db      	lsls	r3, r3, #3
 800dbe8:	440b      	add	r3, r1
 800dbea:	3314      	adds	r3, #20
 800dbec:	2202      	movs	r2, #2
 800dbee:	701a      	strb	r2, [r3, #0]
 800dbf0:	e01e      	b.n	800dc30 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800dbf2:	4915      	ldr	r1, [pc, #84]	; (800dc48 <etharp_tmr+0x14c>)
 800dbf4:	687a      	ldr	r2, [r7, #4]
 800dbf6:	4613      	mov	r3, r2
 800dbf8:	005b      	lsls	r3, r3, #1
 800dbfa:	4413      	add	r3, r2
 800dbfc:	00db      	lsls	r3, r3, #3
 800dbfe:	440b      	add	r3, r1
 800dc00:	3314      	adds	r3, #20
 800dc02:	781b      	ldrb	r3, [r3, #0]
 800dc04:	2b01      	cmp	r3, #1
 800dc06:	d113      	bne.n	800dc30 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800dc08:	490f      	ldr	r1, [pc, #60]	; (800dc48 <etharp_tmr+0x14c>)
 800dc0a:	687a      	ldr	r2, [r7, #4]
 800dc0c:	4613      	mov	r3, r2
 800dc0e:	005b      	lsls	r3, r3, #1
 800dc10:	4413      	add	r3, r2
 800dc12:	00db      	lsls	r3, r3, #3
 800dc14:	440b      	add	r3, r1
 800dc16:	3308      	adds	r3, #8
 800dc18:	6818      	ldr	r0, [r3, #0]
 800dc1a:	687a      	ldr	r2, [r7, #4]
 800dc1c:	4613      	mov	r3, r2
 800dc1e:	005b      	lsls	r3, r3, #1
 800dc20:	4413      	add	r3, r2
 800dc22:	00db      	lsls	r3, r3, #3
 800dc24:	4a08      	ldr	r2, [pc, #32]	; (800dc48 <etharp_tmr+0x14c>)
 800dc26:	4413      	add	r3, r2
 800dc28:	3304      	adds	r3, #4
 800dc2a:	4619      	mov	r1, r3
 800dc2c:	f000 fe6e 	bl	800e90c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	3301      	adds	r3, #1
 800dc34:	607b      	str	r3, [r7, #4]
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	2b09      	cmp	r3, #9
 800dc3a:	f77f af65 	ble.w	800db08 <etharp_tmr+0xc>
      }
    }
  }
}
 800dc3e:	bf00      	nop
 800dc40:	bf00      	nop
 800dc42:	3708      	adds	r7, #8
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bd80      	pop	{r7, pc}
 800dc48:	20000110 	.word	0x20000110

0800dc4c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b08a      	sub	sp, #40	; 0x28
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	60f8      	str	r0, [r7, #12]
 800dc54:	460b      	mov	r3, r1
 800dc56:	607a      	str	r2, [r7, #4]
 800dc58:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800dc5a:	230a      	movs	r3, #10
 800dc5c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800dc5e:	230a      	movs	r3, #10
 800dc60:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800dc62:	230a      	movs	r3, #10
 800dc64:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800dc66:	2300      	movs	r3, #0
 800dc68:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800dc6a:	230a      	movs	r3, #10
 800dc6c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800dc6e:	2300      	movs	r3, #0
 800dc70:	83bb      	strh	r3, [r7, #28]
 800dc72:	2300      	movs	r3, #0
 800dc74:	837b      	strh	r3, [r7, #26]
 800dc76:	2300      	movs	r3, #0
 800dc78:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	843b      	strh	r3, [r7, #32]
 800dc7e:	e0ae      	b.n	800ddde <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800dc80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dc84:	49a6      	ldr	r1, [pc, #664]	; (800df20 <etharp_find_entry+0x2d4>)
 800dc86:	4613      	mov	r3, r2
 800dc88:	005b      	lsls	r3, r3, #1
 800dc8a:	4413      	add	r3, r2
 800dc8c:	00db      	lsls	r3, r3, #3
 800dc8e:	440b      	add	r3, r1
 800dc90:	3314      	adds	r3, #20
 800dc92:	781b      	ldrb	r3, [r3, #0]
 800dc94:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800dc96:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800dc9a:	2b0a      	cmp	r3, #10
 800dc9c:	d105      	bne.n	800dcaa <etharp_find_entry+0x5e>
 800dc9e:	7dfb      	ldrb	r3, [r7, #23]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d102      	bne.n	800dcaa <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800dca4:	8c3b      	ldrh	r3, [r7, #32]
 800dca6:	847b      	strh	r3, [r7, #34]	; 0x22
 800dca8:	e095      	b.n	800ddd6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800dcaa:	7dfb      	ldrb	r3, [r7, #23]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	f000 8092 	beq.w	800ddd6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800dcb2:	7dfb      	ldrb	r3, [r7, #23]
 800dcb4:	2b01      	cmp	r3, #1
 800dcb6:	d009      	beq.n	800dccc <etharp_find_entry+0x80>
 800dcb8:	7dfb      	ldrb	r3, [r7, #23]
 800dcba:	2b01      	cmp	r3, #1
 800dcbc:	d806      	bhi.n	800dccc <etharp_find_entry+0x80>
 800dcbe:	4b99      	ldr	r3, [pc, #612]	; (800df24 <etharp_find_entry+0x2d8>)
 800dcc0:	f240 1223 	movw	r2, #291	; 0x123
 800dcc4:	4998      	ldr	r1, [pc, #608]	; (800df28 <etharp_find_entry+0x2dc>)
 800dcc6:	4899      	ldr	r0, [pc, #612]	; (800df2c <etharp_find_entry+0x2e0>)
 800dcc8:	f002 fa0c 	bl	80100e4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d020      	beq.n	800dd14 <etharp_find_entry+0xc8>
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	6819      	ldr	r1, [r3, #0]
 800dcd6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dcda:	4891      	ldr	r0, [pc, #580]	; (800df20 <etharp_find_entry+0x2d4>)
 800dcdc:	4613      	mov	r3, r2
 800dcde:	005b      	lsls	r3, r3, #1
 800dce0:	4413      	add	r3, r2
 800dce2:	00db      	lsls	r3, r3, #3
 800dce4:	4403      	add	r3, r0
 800dce6:	3304      	adds	r3, #4
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	4299      	cmp	r1, r3
 800dcec:	d112      	bne.n	800dd14 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d00c      	beq.n	800dd0e <etharp_find_entry+0xc2>
 800dcf4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dcf8:	4989      	ldr	r1, [pc, #548]	; (800df20 <etharp_find_entry+0x2d4>)
 800dcfa:	4613      	mov	r3, r2
 800dcfc:	005b      	lsls	r3, r3, #1
 800dcfe:	4413      	add	r3, r2
 800dd00:	00db      	lsls	r3, r3, #3
 800dd02:	440b      	add	r3, r1
 800dd04:	3308      	adds	r3, #8
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	687a      	ldr	r2, [r7, #4]
 800dd0a:	429a      	cmp	r2, r3
 800dd0c:	d102      	bne.n	800dd14 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800dd0e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800dd12:	e100      	b.n	800df16 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800dd14:	7dfb      	ldrb	r3, [r7, #23]
 800dd16:	2b01      	cmp	r3, #1
 800dd18:	d140      	bne.n	800dd9c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800dd1a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dd1e:	4980      	ldr	r1, [pc, #512]	; (800df20 <etharp_find_entry+0x2d4>)
 800dd20:	4613      	mov	r3, r2
 800dd22:	005b      	lsls	r3, r3, #1
 800dd24:	4413      	add	r3, r2
 800dd26:	00db      	lsls	r3, r3, #3
 800dd28:	440b      	add	r3, r1
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d01a      	beq.n	800dd66 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800dd30:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dd34:	497a      	ldr	r1, [pc, #488]	; (800df20 <etharp_find_entry+0x2d4>)
 800dd36:	4613      	mov	r3, r2
 800dd38:	005b      	lsls	r3, r3, #1
 800dd3a:	4413      	add	r3, r2
 800dd3c:	00db      	lsls	r3, r3, #3
 800dd3e:	440b      	add	r3, r1
 800dd40:	3312      	adds	r3, #18
 800dd42:	881b      	ldrh	r3, [r3, #0]
 800dd44:	8bba      	ldrh	r2, [r7, #28]
 800dd46:	429a      	cmp	r2, r3
 800dd48:	d845      	bhi.n	800ddd6 <etharp_find_entry+0x18a>
            old_queue = i;
 800dd4a:	8c3b      	ldrh	r3, [r7, #32]
 800dd4c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800dd4e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dd52:	4973      	ldr	r1, [pc, #460]	; (800df20 <etharp_find_entry+0x2d4>)
 800dd54:	4613      	mov	r3, r2
 800dd56:	005b      	lsls	r3, r3, #1
 800dd58:	4413      	add	r3, r2
 800dd5a:	00db      	lsls	r3, r3, #3
 800dd5c:	440b      	add	r3, r1
 800dd5e:	3312      	adds	r3, #18
 800dd60:	881b      	ldrh	r3, [r3, #0]
 800dd62:	83bb      	strh	r3, [r7, #28]
 800dd64:	e037      	b.n	800ddd6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800dd66:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dd6a:	496d      	ldr	r1, [pc, #436]	; (800df20 <etharp_find_entry+0x2d4>)
 800dd6c:	4613      	mov	r3, r2
 800dd6e:	005b      	lsls	r3, r3, #1
 800dd70:	4413      	add	r3, r2
 800dd72:	00db      	lsls	r3, r3, #3
 800dd74:	440b      	add	r3, r1
 800dd76:	3312      	adds	r3, #18
 800dd78:	881b      	ldrh	r3, [r3, #0]
 800dd7a:	8b7a      	ldrh	r2, [r7, #26]
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d82a      	bhi.n	800ddd6 <etharp_find_entry+0x18a>
            old_pending = i;
 800dd80:	8c3b      	ldrh	r3, [r7, #32]
 800dd82:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800dd84:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dd88:	4965      	ldr	r1, [pc, #404]	; (800df20 <etharp_find_entry+0x2d4>)
 800dd8a:	4613      	mov	r3, r2
 800dd8c:	005b      	lsls	r3, r3, #1
 800dd8e:	4413      	add	r3, r2
 800dd90:	00db      	lsls	r3, r3, #3
 800dd92:	440b      	add	r3, r1
 800dd94:	3312      	adds	r3, #18
 800dd96:	881b      	ldrh	r3, [r3, #0]
 800dd98:	837b      	strh	r3, [r7, #26]
 800dd9a:	e01c      	b.n	800ddd6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800dd9c:	7dfb      	ldrb	r3, [r7, #23]
 800dd9e:	2b01      	cmp	r3, #1
 800dda0:	d919      	bls.n	800ddd6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800dda2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dda6:	495e      	ldr	r1, [pc, #376]	; (800df20 <etharp_find_entry+0x2d4>)
 800dda8:	4613      	mov	r3, r2
 800ddaa:	005b      	lsls	r3, r3, #1
 800ddac:	4413      	add	r3, r2
 800ddae:	00db      	lsls	r3, r3, #3
 800ddb0:	440b      	add	r3, r1
 800ddb2:	3312      	adds	r3, #18
 800ddb4:	881b      	ldrh	r3, [r3, #0]
 800ddb6:	8b3a      	ldrh	r2, [r7, #24]
 800ddb8:	429a      	cmp	r2, r3
 800ddba:	d80c      	bhi.n	800ddd6 <etharp_find_entry+0x18a>
            old_stable = i;
 800ddbc:	8c3b      	ldrh	r3, [r7, #32]
 800ddbe:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800ddc0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ddc4:	4956      	ldr	r1, [pc, #344]	; (800df20 <etharp_find_entry+0x2d4>)
 800ddc6:	4613      	mov	r3, r2
 800ddc8:	005b      	lsls	r3, r3, #1
 800ddca:	4413      	add	r3, r2
 800ddcc:	00db      	lsls	r3, r3, #3
 800ddce:	440b      	add	r3, r1
 800ddd0:	3312      	adds	r3, #18
 800ddd2:	881b      	ldrh	r3, [r3, #0]
 800ddd4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ddd6:	8c3b      	ldrh	r3, [r7, #32]
 800ddd8:	3301      	adds	r3, #1
 800ddda:	b29b      	uxth	r3, r3
 800dddc:	843b      	strh	r3, [r7, #32]
 800ddde:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800dde2:	2b09      	cmp	r3, #9
 800dde4:	f77f af4c 	ble.w	800dc80 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800dde8:	7afb      	ldrb	r3, [r7, #11]
 800ddea:	f003 0302 	and.w	r3, r3, #2
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d108      	bne.n	800de04 <etharp_find_entry+0x1b8>
 800ddf2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ddf6:	2b0a      	cmp	r3, #10
 800ddf8:	d107      	bne.n	800de0a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800ddfa:	7afb      	ldrb	r3, [r7, #11]
 800ddfc:	f003 0301 	and.w	r3, r3, #1
 800de00:	2b00      	cmp	r3, #0
 800de02:	d102      	bne.n	800de0a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800de04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de08:	e085      	b.n	800df16 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800de0a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800de0e:	2b09      	cmp	r3, #9
 800de10:	dc02      	bgt.n	800de18 <etharp_find_entry+0x1cc>
    i = empty;
 800de12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800de14:	843b      	strh	r3, [r7, #32]
 800de16:	e039      	b.n	800de8c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800de18:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800de1c:	2b09      	cmp	r3, #9
 800de1e:	dc14      	bgt.n	800de4a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800de20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de22:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800de24:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800de28:	493d      	ldr	r1, [pc, #244]	; (800df20 <etharp_find_entry+0x2d4>)
 800de2a:	4613      	mov	r3, r2
 800de2c:	005b      	lsls	r3, r3, #1
 800de2e:	4413      	add	r3, r2
 800de30:	00db      	lsls	r3, r3, #3
 800de32:	440b      	add	r3, r1
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d018      	beq.n	800de6c <etharp_find_entry+0x220>
 800de3a:	4b3a      	ldr	r3, [pc, #232]	; (800df24 <etharp_find_entry+0x2d8>)
 800de3c:	f240 126d 	movw	r2, #365	; 0x16d
 800de40:	493b      	ldr	r1, [pc, #236]	; (800df30 <etharp_find_entry+0x2e4>)
 800de42:	483a      	ldr	r0, [pc, #232]	; (800df2c <etharp_find_entry+0x2e0>)
 800de44:	f002 f94e 	bl	80100e4 <iprintf>
 800de48:	e010      	b.n	800de6c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800de4a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800de4e:	2b09      	cmp	r3, #9
 800de50:	dc02      	bgt.n	800de58 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800de52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800de54:	843b      	strh	r3, [r7, #32]
 800de56:	e009      	b.n	800de6c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800de58:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800de5c:	2b09      	cmp	r3, #9
 800de5e:	dc02      	bgt.n	800de66 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800de60:	8bfb      	ldrh	r3, [r7, #30]
 800de62:	843b      	strh	r3, [r7, #32]
 800de64:	e002      	b.n	800de6c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800de66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de6a:	e054      	b.n	800df16 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800de6c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800de70:	2b09      	cmp	r3, #9
 800de72:	dd06      	ble.n	800de82 <etharp_find_entry+0x236>
 800de74:	4b2b      	ldr	r3, [pc, #172]	; (800df24 <etharp_find_entry+0x2d8>)
 800de76:	f240 127f 	movw	r2, #383	; 0x17f
 800de7a:	492e      	ldr	r1, [pc, #184]	; (800df34 <etharp_find_entry+0x2e8>)
 800de7c:	482b      	ldr	r0, [pc, #172]	; (800df2c <etharp_find_entry+0x2e0>)
 800de7e:	f002 f931 	bl	80100e4 <iprintf>
    etharp_free_entry(i);
 800de82:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800de86:	4618      	mov	r0, r3
 800de88:	f7ff fe06 	bl	800da98 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800de8c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800de90:	2b09      	cmp	r3, #9
 800de92:	dd06      	ble.n	800dea2 <etharp_find_entry+0x256>
 800de94:	4b23      	ldr	r3, [pc, #140]	; (800df24 <etharp_find_entry+0x2d8>)
 800de96:	f240 1283 	movw	r2, #387	; 0x183
 800de9a:	4926      	ldr	r1, [pc, #152]	; (800df34 <etharp_find_entry+0x2e8>)
 800de9c:	4823      	ldr	r0, [pc, #140]	; (800df2c <etharp_find_entry+0x2e0>)
 800de9e:	f002 f921 	bl	80100e4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800dea2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dea6:	491e      	ldr	r1, [pc, #120]	; (800df20 <etharp_find_entry+0x2d4>)
 800dea8:	4613      	mov	r3, r2
 800deaa:	005b      	lsls	r3, r3, #1
 800deac:	4413      	add	r3, r2
 800deae:	00db      	lsls	r3, r3, #3
 800deb0:	440b      	add	r3, r1
 800deb2:	3314      	adds	r3, #20
 800deb4:	781b      	ldrb	r3, [r3, #0]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d006      	beq.n	800dec8 <etharp_find_entry+0x27c>
 800deba:	4b1a      	ldr	r3, [pc, #104]	; (800df24 <etharp_find_entry+0x2d8>)
 800debc:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800dec0:	491d      	ldr	r1, [pc, #116]	; (800df38 <etharp_find_entry+0x2ec>)
 800dec2:	481a      	ldr	r0, [pc, #104]	; (800df2c <etharp_find_entry+0x2e0>)
 800dec4:	f002 f90e 	bl	80100e4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d00b      	beq.n	800dee6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800dece:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	6819      	ldr	r1, [r3, #0]
 800ded6:	4812      	ldr	r0, [pc, #72]	; (800df20 <etharp_find_entry+0x2d4>)
 800ded8:	4613      	mov	r3, r2
 800deda:	005b      	lsls	r3, r3, #1
 800dedc:	4413      	add	r3, r2
 800dede:	00db      	lsls	r3, r3, #3
 800dee0:	4403      	add	r3, r0
 800dee2:	3304      	adds	r3, #4
 800dee4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800dee6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800deea:	490d      	ldr	r1, [pc, #52]	; (800df20 <etharp_find_entry+0x2d4>)
 800deec:	4613      	mov	r3, r2
 800deee:	005b      	lsls	r3, r3, #1
 800def0:	4413      	add	r3, r2
 800def2:	00db      	lsls	r3, r3, #3
 800def4:	440b      	add	r3, r1
 800def6:	3312      	adds	r3, #18
 800def8:	2200      	movs	r2, #0
 800defa:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800defc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800df00:	4907      	ldr	r1, [pc, #28]	; (800df20 <etharp_find_entry+0x2d4>)
 800df02:	4613      	mov	r3, r2
 800df04:	005b      	lsls	r3, r3, #1
 800df06:	4413      	add	r3, r2
 800df08:	00db      	lsls	r3, r3, #3
 800df0a:	440b      	add	r3, r1
 800df0c:	3308      	adds	r3, #8
 800df0e:	687a      	ldr	r2, [r7, #4]
 800df10:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800df12:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800df16:	4618      	mov	r0, r3
 800df18:	3728      	adds	r7, #40	; 0x28
 800df1a:	46bd      	mov	sp, r7
 800df1c:	bd80      	pop	{r7, pc}
 800df1e:	bf00      	nop
 800df20:	20000110 	.word	0x20000110
 800df24:	08013948 	.word	0x08013948
 800df28:	08013980 	.word	0x08013980
 800df2c:	080139c0 	.word	0x080139c0
 800df30:	080139e8 	.word	0x080139e8
 800df34:	08013a00 	.word	0x08013a00
 800df38:	08013a14 	.word	0x08013a14

0800df3c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b088      	sub	sp, #32
 800df40:	af02      	add	r7, sp, #8
 800df42:	60f8      	str	r0, [r7, #12]
 800df44:	60b9      	str	r1, [r7, #8]
 800df46:	607a      	str	r2, [r7, #4]
 800df48:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800df50:	2b06      	cmp	r3, #6
 800df52:	d006      	beq.n	800df62 <etharp_update_arp_entry+0x26>
 800df54:	4b48      	ldr	r3, [pc, #288]	; (800e078 <etharp_update_arp_entry+0x13c>)
 800df56:	f240 12a9 	movw	r2, #425	; 0x1a9
 800df5a:	4948      	ldr	r1, [pc, #288]	; (800e07c <etharp_update_arp_entry+0x140>)
 800df5c:	4848      	ldr	r0, [pc, #288]	; (800e080 <etharp_update_arp_entry+0x144>)
 800df5e:	f002 f8c1 	bl	80100e4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d012      	beq.n	800df8e <etharp_update_arp_entry+0x52>
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d00e      	beq.n	800df8e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	68f9      	ldr	r1, [r7, #12]
 800df76:	4618      	mov	r0, r3
 800df78:	f001 f8fe 	bl	800f178 <ip4_addr_isbroadcast_u32>
 800df7c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d105      	bne.n	800df8e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800df82:	68bb      	ldr	r3, [r7, #8]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800df8a:	2be0      	cmp	r3, #224	; 0xe0
 800df8c:	d102      	bne.n	800df94 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800df8e:	f06f 030f 	mvn.w	r3, #15
 800df92:	e06c      	b.n	800e06e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800df94:	78fb      	ldrb	r3, [r7, #3]
 800df96:	68fa      	ldr	r2, [r7, #12]
 800df98:	4619      	mov	r1, r3
 800df9a:	68b8      	ldr	r0, [r7, #8]
 800df9c:	f7ff fe56 	bl	800dc4c <etharp_find_entry>
 800dfa0:	4603      	mov	r3, r0
 800dfa2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800dfa4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	da02      	bge.n	800dfb2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800dfac:	8afb      	ldrh	r3, [r7, #22]
 800dfae:	b25b      	sxtb	r3, r3
 800dfb0:	e05d      	b.n	800e06e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800dfb2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dfb6:	4933      	ldr	r1, [pc, #204]	; (800e084 <etharp_update_arp_entry+0x148>)
 800dfb8:	4613      	mov	r3, r2
 800dfba:	005b      	lsls	r3, r3, #1
 800dfbc:	4413      	add	r3, r2
 800dfbe:	00db      	lsls	r3, r3, #3
 800dfc0:	440b      	add	r3, r1
 800dfc2:	3314      	adds	r3, #20
 800dfc4:	2202      	movs	r2, #2
 800dfc6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800dfc8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dfcc:	492d      	ldr	r1, [pc, #180]	; (800e084 <etharp_update_arp_entry+0x148>)
 800dfce:	4613      	mov	r3, r2
 800dfd0:	005b      	lsls	r3, r3, #1
 800dfd2:	4413      	add	r3, r2
 800dfd4:	00db      	lsls	r3, r3, #3
 800dfd6:	440b      	add	r3, r1
 800dfd8:	3308      	adds	r3, #8
 800dfda:	68fa      	ldr	r2, [r7, #12]
 800dfdc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800dfde:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dfe2:	4613      	mov	r3, r2
 800dfe4:	005b      	lsls	r3, r3, #1
 800dfe6:	4413      	add	r3, r2
 800dfe8:	00db      	lsls	r3, r3, #3
 800dfea:	3308      	adds	r3, #8
 800dfec:	4a25      	ldr	r2, [pc, #148]	; (800e084 <etharp_update_arp_entry+0x148>)
 800dfee:	4413      	add	r3, r2
 800dff0:	3304      	adds	r3, #4
 800dff2:	2206      	movs	r2, #6
 800dff4:	6879      	ldr	r1, [r7, #4]
 800dff6:	4618      	mov	r0, r3
 800dff8:	f002 f844 	bl	8010084 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800dffc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e000:	4920      	ldr	r1, [pc, #128]	; (800e084 <etharp_update_arp_entry+0x148>)
 800e002:	4613      	mov	r3, r2
 800e004:	005b      	lsls	r3, r3, #1
 800e006:	4413      	add	r3, r2
 800e008:	00db      	lsls	r3, r3, #3
 800e00a:	440b      	add	r3, r1
 800e00c:	3312      	adds	r3, #18
 800e00e:	2200      	movs	r2, #0
 800e010:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800e012:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e016:	491b      	ldr	r1, [pc, #108]	; (800e084 <etharp_update_arp_entry+0x148>)
 800e018:	4613      	mov	r3, r2
 800e01a:	005b      	lsls	r3, r3, #1
 800e01c:	4413      	add	r3, r2
 800e01e:	00db      	lsls	r3, r3, #3
 800e020:	440b      	add	r3, r1
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d021      	beq.n	800e06c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800e028:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e02c:	4915      	ldr	r1, [pc, #84]	; (800e084 <etharp_update_arp_entry+0x148>)
 800e02e:	4613      	mov	r3, r2
 800e030:	005b      	lsls	r3, r3, #1
 800e032:	4413      	add	r3, r2
 800e034:	00db      	lsls	r3, r3, #3
 800e036:	440b      	add	r3, r1
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800e03c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e040:	4910      	ldr	r1, [pc, #64]	; (800e084 <etharp_update_arp_entry+0x148>)
 800e042:	4613      	mov	r3, r2
 800e044:	005b      	lsls	r3, r3, #1
 800e046:	4413      	add	r3, r2
 800e048:	00db      	lsls	r3, r3, #3
 800e04a:	440b      	add	r3, r1
 800e04c:	2200      	movs	r2, #0
 800e04e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800e056:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e05a:	9300      	str	r3, [sp, #0]
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	6939      	ldr	r1, [r7, #16]
 800e060:	68f8      	ldr	r0, [r7, #12]
 800e062:	f001 ff91 	bl	800ff88 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800e066:	6938      	ldr	r0, [r7, #16]
 800e068:	f7f8 ff58 	bl	8006f1c <pbuf_free>
  }
  return ERR_OK;
 800e06c:	2300      	movs	r3, #0
}
 800e06e:	4618      	mov	r0, r3
 800e070:	3718      	adds	r7, #24
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}
 800e076:	bf00      	nop
 800e078:	08013948 	.word	0x08013948
 800e07c:	08013a40 	.word	0x08013a40
 800e080:	080139c0 	.word	0x080139c0
 800e084:	20000110 	.word	0x20000110

0800e088 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b084      	sub	sp, #16
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e090:	2300      	movs	r3, #0
 800e092:	60fb      	str	r3, [r7, #12]
 800e094:	e01e      	b.n	800e0d4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800e096:	4913      	ldr	r1, [pc, #76]	; (800e0e4 <etharp_cleanup_netif+0x5c>)
 800e098:	68fa      	ldr	r2, [r7, #12]
 800e09a:	4613      	mov	r3, r2
 800e09c:	005b      	lsls	r3, r3, #1
 800e09e:	4413      	add	r3, r2
 800e0a0:	00db      	lsls	r3, r3, #3
 800e0a2:	440b      	add	r3, r1
 800e0a4:	3314      	adds	r3, #20
 800e0a6:	781b      	ldrb	r3, [r3, #0]
 800e0a8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800e0aa:	7afb      	ldrb	r3, [r7, #11]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d00e      	beq.n	800e0ce <etharp_cleanup_netif+0x46>
 800e0b0:	490c      	ldr	r1, [pc, #48]	; (800e0e4 <etharp_cleanup_netif+0x5c>)
 800e0b2:	68fa      	ldr	r2, [r7, #12]
 800e0b4:	4613      	mov	r3, r2
 800e0b6:	005b      	lsls	r3, r3, #1
 800e0b8:	4413      	add	r3, r2
 800e0ba:	00db      	lsls	r3, r3, #3
 800e0bc:	440b      	add	r3, r1
 800e0be:	3308      	adds	r3, #8
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	687a      	ldr	r2, [r7, #4]
 800e0c4:	429a      	cmp	r2, r3
 800e0c6:	d102      	bne.n	800e0ce <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800e0c8:	68f8      	ldr	r0, [r7, #12]
 800e0ca:	f7ff fce5 	bl	800da98 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	3301      	adds	r3, #1
 800e0d2:	60fb      	str	r3, [r7, #12]
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	2b09      	cmp	r3, #9
 800e0d8:	dddd      	ble.n	800e096 <etharp_cleanup_netif+0xe>
    }
  }
}
 800e0da:	bf00      	nop
 800e0dc:	bf00      	nop
 800e0de:	3710      	adds	r7, #16
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd80      	pop	{r7, pc}
 800e0e4:	20000110 	.word	0x20000110

0800e0e8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800e0e8:	b5b0      	push	{r4, r5, r7, lr}
 800e0ea:	b08a      	sub	sp, #40	; 0x28
 800e0ec:	af04      	add	r7, sp, #16
 800e0ee:	6078      	str	r0, [r7, #4]
 800e0f0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d107      	bne.n	800e108 <etharp_input+0x20>
 800e0f8:	4b3d      	ldr	r3, [pc, #244]	; (800e1f0 <etharp_input+0x108>)
 800e0fa:	f240 228a 	movw	r2, #650	; 0x28a
 800e0fe:	493d      	ldr	r1, [pc, #244]	; (800e1f4 <etharp_input+0x10c>)
 800e100:	483d      	ldr	r0, [pc, #244]	; (800e1f8 <etharp_input+0x110>)
 800e102:	f001 ffef 	bl	80100e4 <iprintf>
 800e106:	e06f      	b.n	800e1e8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	685b      	ldr	r3, [r3, #4]
 800e10c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e10e:	693b      	ldr	r3, [r7, #16]
 800e110:	881b      	ldrh	r3, [r3, #0]
 800e112:	b29b      	uxth	r3, r3
 800e114:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e118:	d10c      	bne.n	800e134 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e11a:	693b      	ldr	r3, [r7, #16]
 800e11c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e11e:	2b06      	cmp	r3, #6
 800e120:	d108      	bne.n	800e134 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e122:	693b      	ldr	r3, [r7, #16]
 800e124:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e126:	2b04      	cmp	r3, #4
 800e128:	d104      	bne.n	800e134 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800e12a:	693b      	ldr	r3, [r7, #16]
 800e12c:	885b      	ldrh	r3, [r3, #2]
 800e12e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e130:	2b08      	cmp	r3, #8
 800e132:	d003      	beq.n	800e13c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800e134:	6878      	ldr	r0, [r7, #4]
 800e136:	f7f8 fef1 	bl	8006f1c <pbuf_free>
    return;
 800e13a:	e055      	b.n	800e1e8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800e13c:	693b      	ldr	r3, [r7, #16]
 800e13e:	330e      	adds	r3, #14
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800e144:	693b      	ldr	r3, [r7, #16]
 800e146:	3318      	adds	r3, #24
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	3304      	adds	r3, #4
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d102      	bne.n	800e15c <etharp_input+0x74>
    for_us = 0;
 800e156:	2300      	movs	r3, #0
 800e158:	75fb      	strb	r3, [r7, #23]
 800e15a:	e009      	b.n	800e170 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800e15c:	68ba      	ldr	r2, [r7, #8]
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	3304      	adds	r3, #4
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	429a      	cmp	r2, r3
 800e166:	bf0c      	ite	eq
 800e168:	2301      	moveq	r3, #1
 800e16a:	2300      	movne	r3, #0
 800e16c:	b2db      	uxtb	r3, r3
 800e16e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800e170:	693b      	ldr	r3, [r7, #16]
 800e172:	f103 0208 	add.w	r2, r3, #8
 800e176:	7dfb      	ldrb	r3, [r7, #23]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d001      	beq.n	800e180 <etharp_input+0x98>
 800e17c:	2301      	movs	r3, #1
 800e17e:	e000      	b.n	800e182 <etharp_input+0x9a>
 800e180:	2302      	movs	r3, #2
 800e182:	f107 010c 	add.w	r1, r7, #12
 800e186:	6838      	ldr	r0, [r7, #0]
 800e188:	f7ff fed8 	bl	800df3c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800e18c:	693b      	ldr	r3, [r7, #16]
 800e18e:	88db      	ldrh	r3, [r3, #6]
 800e190:	b29b      	uxth	r3, r3
 800e192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e196:	d003      	beq.n	800e1a0 <etharp_input+0xb8>
 800e198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e19c:	d01e      	beq.n	800e1dc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800e19e:	e020      	b.n	800e1e2 <etharp_input+0xfa>
      if (for_us) {
 800e1a0:	7dfb      	ldrb	r3, [r7, #23]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d01c      	beq.n	800e1e0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800e1ac:	693b      	ldr	r3, [r7, #16]
 800e1ae:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800e1bc:	693a      	ldr	r2, [r7, #16]
 800e1be:	3208      	adds	r2, #8
        etharp_raw(netif,
 800e1c0:	2102      	movs	r1, #2
 800e1c2:	9103      	str	r1, [sp, #12]
 800e1c4:	f107 010c 	add.w	r1, r7, #12
 800e1c8:	9102      	str	r1, [sp, #8]
 800e1ca:	9201      	str	r2, [sp, #4]
 800e1cc:	9300      	str	r3, [sp, #0]
 800e1ce:	462b      	mov	r3, r5
 800e1d0:	4622      	mov	r2, r4
 800e1d2:	4601      	mov	r1, r0
 800e1d4:	6838      	ldr	r0, [r7, #0]
 800e1d6:	f000 faeb 	bl	800e7b0 <etharp_raw>
      break;
 800e1da:	e001      	b.n	800e1e0 <etharp_input+0xf8>
      break;
 800e1dc:	bf00      	nop
 800e1de:	e000      	b.n	800e1e2 <etharp_input+0xfa>
      break;
 800e1e0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800e1e2:	6878      	ldr	r0, [r7, #4]
 800e1e4:	f7f8 fe9a 	bl	8006f1c <pbuf_free>
}
 800e1e8:	3718      	adds	r7, #24
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	bdb0      	pop	{r4, r5, r7, pc}
 800e1ee:	bf00      	nop
 800e1f0:	08013948 	.word	0x08013948
 800e1f4:	08013a98 	.word	0x08013a98
 800e1f8:	080139c0 	.word	0x080139c0

0800e1fc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b086      	sub	sp, #24
 800e200:	af02      	add	r7, sp, #8
 800e202:	60f8      	str	r0, [r7, #12]
 800e204:	60b9      	str	r1, [r7, #8]
 800e206:	4613      	mov	r3, r2
 800e208:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800e20a:	79fa      	ldrb	r2, [r7, #7]
 800e20c:	4944      	ldr	r1, [pc, #272]	; (800e320 <etharp_output_to_arp_index+0x124>)
 800e20e:	4613      	mov	r3, r2
 800e210:	005b      	lsls	r3, r3, #1
 800e212:	4413      	add	r3, r2
 800e214:	00db      	lsls	r3, r3, #3
 800e216:	440b      	add	r3, r1
 800e218:	3314      	adds	r3, #20
 800e21a:	781b      	ldrb	r3, [r3, #0]
 800e21c:	2b01      	cmp	r3, #1
 800e21e:	d806      	bhi.n	800e22e <etharp_output_to_arp_index+0x32>
 800e220:	4b40      	ldr	r3, [pc, #256]	; (800e324 <etharp_output_to_arp_index+0x128>)
 800e222:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e226:	4940      	ldr	r1, [pc, #256]	; (800e328 <etharp_output_to_arp_index+0x12c>)
 800e228:	4840      	ldr	r0, [pc, #256]	; (800e32c <etharp_output_to_arp_index+0x130>)
 800e22a:	f001 ff5b 	bl	80100e4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800e22e:	79fa      	ldrb	r2, [r7, #7]
 800e230:	493b      	ldr	r1, [pc, #236]	; (800e320 <etharp_output_to_arp_index+0x124>)
 800e232:	4613      	mov	r3, r2
 800e234:	005b      	lsls	r3, r3, #1
 800e236:	4413      	add	r3, r2
 800e238:	00db      	lsls	r3, r3, #3
 800e23a:	440b      	add	r3, r1
 800e23c:	3314      	adds	r3, #20
 800e23e:	781b      	ldrb	r3, [r3, #0]
 800e240:	2b02      	cmp	r3, #2
 800e242:	d153      	bne.n	800e2ec <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800e244:	79fa      	ldrb	r2, [r7, #7]
 800e246:	4936      	ldr	r1, [pc, #216]	; (800e320 <etharp_output_to_arp_index+0x124>)
 800e248:	4613      	mov	r3, r2
 800e24a:	005b      	lsls	r3, r3, #1
 800e24c:	4413      	add	r3, r2
 800e24e:	00db      	lsls	r3, r3, #3
 800e250:	440b      	add	r3, r1
 800e252:	3312      	adds	r3, #18
 800e254:	881b      	ldrh	r3, [r3, #0]
 800e256:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800e25a:	d919      	bls.n	800e290 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800e25c:	79fa      	ldrb	r2, [r7, #7]
 800e25e:	4613      	mov	r3, r2
 800e260:	005b      	lsls	r3, r3, #1
 800e262:	4413      	add	r3, r2
 800e264:	00db      	lsls	r3, r3, #3
 800e266:	4a2e      	ldr	r2, [pc, #184]	; (800e320 <etharp_output_to_arp_index+0x124>)
 800e268:	4413      	add	r3, r2
 800e26a:	3304      	adds	r3, #4
 800e26c:	4619      	mov	r1, r3
 800e26e:	68f8      	ldr	r0, [r7, #12]
 800e270:	f000 fb4c 	bl	800e90c <etharp_request>
 800e274:	4603      	mov	r3, r0
 800e276:	2b00      	cmp	r3, #0
 800e278:	d138      	bne.n	800e2ec <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e27a:	79fa      	ldrb	r2, [r7, #7]
 800e27c:	4928      	ldr	r1, [pc, #160]	; (800e320 <etharp_output_to_arp_index+0x124>)
 800e27e:	4613      	mov	r3, r2
 800e280:	005b      	lsls	r3, r3, #1
 800e282:	4413      	add	r3, r2
 800e284:	00db      	lsls	r3, r3, #3
 800e286:	440b      	add	r3, r1
 800e288:	3314      	adds	r3, #20
 800e28a:	2203      	movs	r2, #3
 800e28c:	701a      	strb	r2, [r3, #0]
 800e28e:	e02d      	b.n	800e2ec <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800e290:	79fa      	ldrb	r2, [r7, #7]
 800e292:	4923      	ldr	r1, [pc, #140]	; (800e320 <etharp_output_to_arp_index+0x124>)
 800e294:	4613      	mov	r3, r2
 800e296:	005b      	lsls	r3, r3, #1
 800e298:	4413      	add	r3, r2
 800e29a:	00db      	lsls	r3, r3, #3
 800e29c:	440b      	add	r3, r1
 800e29e:	3312      	adds	r3, #18
 800e2a0:	881b      	ldrh	r3, [r3, #0]
 800e2a2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800e2a6:	d321      	bcc.n	800e2ec <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800e2a8:	79fa      	ldrb	r2, [r7, #7]
 800e2aa:	4613      	mov	r3, r2
 800e2ac:	005b      	lsls	r3, r3, #1
 800e2ae:	4413      	add	r3, r2
 800e2b0:	00db      	lsls	r3, r3, #3
 800e2b2:	4a1b      	ldr	r2, [pc, #108]	; (800e320 <etharp_output_to_arp_index+0x124>)
 800e2b4:	4413      	add	r3, r2
 800e2b6:	1d19      	adds	r1, r3, #4
 800e2b8:	79fa      	ldrb	r2, [r7, #7]
 800e2ba:	4613      	mov	r3, r2
 800e2bc:	005b      	lsls	r3, r3, #1
 800e2be:	4413      	add	r3, r2
 800e2c0:	00db      	lsls	r3, r3, #3
 800e2c2:	3308      	adds	r3, #8
 800e2c4:	4a16      	ldr	r2, [pc, #88]	; (800e320 <etharp_output_to_arp_index+0x124>)
 800e2c6:	4413      	add	r3, r2
 800e2c8:	3304      	adds	r3, #4
 800e2ca:	461a      	mov	r2, r3
 800e2cc:	68f8      	ldr	r0, [r7, #12]
 800e2ce:	f000 fafb 	bl	800e8c8 <etharp_request_dst>
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d109      	bne.n	800e2ec <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e2d8:	79fa      	ldrb	r2, [r7, #7]
 800e2da:	4911      	ldr	r1, [pc, #68]	; (800e320 <etharp_output_to_arp_index+0x124>)
 800e2dc:	4613      	mov	r3, r2
 800e2de:	005b      	lsls	r3, r3, #1
 800e2e0:	4413      	add	r3, r2
 800e2e2:	00db      	lsls	r3, r3, #3
 800e2e4:	440b      	add	r3, r1
 800e2e6:	3314      	adds	r3, #20
 800e2e8:	2203      	movs	r2, #3
 800e2ea:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800e2f2:	79fa      	ldrb	r2, [r7, #7]
 800e2f4:	4613      	mov	r3, r2
 800e2f6:	005b      	lsls	r3, r3, #1
 800e2f8:	4413      	add	r3, r2
 800e2fa:	00db      	lsls	r3, r3, #3
 800e2fc:	3308      	adds	r3, #8
 800e2fe:	4a08      	ldr	r2, [pc, #32]	; (800e320 <etharp_output_to_arp_index+0x124>)
 800e300:	4413      	add	r3, r2
 800e302:	3304      	adds	r3, #4
 800e304:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e308:	9200      	str	r2, [sp, #0]
 800e30a:	460a      	mov	r2, r1
 800e30c:	68b9      	ldr	r1, [r7, #8]
 800e30e:	68f8      	ldr	r0, [r7, #12]
 800e310:	f001 fe3a 	bl	800ff88 <ethernet_output>
 800e314:	4603      	mov	r3, r0
}
 800e316:	4618      	mov	r0, r3
 800e318:	3710      	adds	r7, #16
 800e31a:	46bd      	mov	sp, r7
 800e31c:	bd80      	pop	{r7, pc}
 800e31e:	bf00      	nop
 800e320:	20000110 	.word	0x20000110
 800e324:	08013948 	.word	0x08013948
 800e328:	08013ab8 	.word	0x08013ab8
 800e32c:	080139c0 	.word	0x080139c0

0800e330 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b08a      	sub	sp, #40	; 0x28
 800e334:	af02      	add	r7, sp, #8
 800e336:	60f8      	str	r0, [r7, #12]
 800e338:	60b9      	str	r1, [r7, #8]
 800e33a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d106      	bne.n	800e354 <etharp_output+0x24>
 800e346:	4b73      	ldr	r3, [pc, #460]	; (800e514 <etharp_output+0x1e4>)
 800e348:	f240 321e 	movw	r2, #798	; 0x31e
 800e34c:	4972      	ldr	r1, [pc, #456]	; (800e518 <etharp_output+0x1e8>)
 800e34e:	4873      	ldr	r0, [pc, #460]	; (800e51c <etharp_output+0x1ec>)
 800e350:	f001 fec8 	bl	80100e4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800e354:	68bb      	ldr	r3, [r7, #8]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d106      	bne.n	800e368 <etharp_output+0x38>
 800e35a:	4b6e      	ldr	r3, [pc, #440]	; (800e514 <etharp_output+0x1e4>)
 800e35c:	f240 321f 	movw	r2, #799	; 0x31f
 800e360:	496f      	ldr	r1, [pc, #444]	; (800e520 <etharp_output+0x1f0>)
 800e362:	486e      	ldr	r0, [pc, #440]	; (800e51c <etharp_output+0x1ec>)
 800e364:	f001 febe 	bl	80100e4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d106      	bne.n	800e37c <etharp_output+0x4c>
 800e36e:	4b69      	ldr	r3, [pc, #420]	; (800e514 <etharp_output+0x1e4>)
 800e370:	f44f 7248 	mov.w	r2, #800	; 0x320
 800e374:	496b      	ldr	r1, [pc, #428]	; (800e524 <etharp_output+0x1f4>)
 800e376:	4869      	ldr	r0, [pc, #420]	; (800e51c <etharp_output+0x1ec>)
 800e378:	f001 feb4 	bl	80100e4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	68f9      	ldr	r1, [r7, #12]
 800e382:	4618      	mov	r0, r3
 800e384:	f000 fef8 	bl	800f178 <ip4_addr_isbroadcast_u32>
 800e388:	4603      	mov	r3, r0
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d002      	beq.n	800e394 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800e38e:	4b66      	ldr	r3, [pc, #408]	; (800e528 <etharp_output+0x1f8>)
 800e390:	61fb      	str	r3, [r7, #28]
 800e392:	e0af      	b.n	800e4f4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e39c:	2be0      	cmp	r3, #224	; 0xe0
 800e39e:	d118      	bne.n	800e3d2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800e3a0:	2301      	movs	r3, #1
 800e3a2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800e3a8:	235e      	movs	r3, #94	; 0x5e
 800e3aa:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	3301      	adds	r3, #1
 800e3b0:	781b      	ldrb	r3, [r3, #0]
 800e3b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e3b6:	b2db      	uxtb	r3, r3
 800e3b8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	3302      	adds	r3, #2
 800e3be:	781b      	ldrb	r3, [r3, #0]
 800e3c0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	3303      	adds	r3, #3
 800e3c6:	781b      	ldrb	r3, [r3, #0]
 800e3c8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800e3ca:	f107 0310 	add.w	r3, r7, #16
 800e3ce:	61fb      	str	r3, [r7, #28]
 800e3d0:	e090      	b.n	800e4f4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681a      	ldr	r2, [r3, #0]
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	3304      	adds	r3, #4
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	405a      	eors	r2, r3
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	3308      	adds	r3, #8
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	4013      	ands	r3, r2
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d012      	beq.n	800e410 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e3f0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800e3f4:	4293      	cmp	r3, r2
 800e3f6:	d00b      	beq.n	800e410 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	330c      	adds	r3, #12
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d003      	beq.n	800e40a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	330c      	adds	r3, #12
 800e406:	61bb      	str	r3, [r7, #24]
 800e408:	e002      	b.n	800e410 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800e40a:	f06f 0303 	mvn.w	r3, #3
 800e40e:	e07d      	b.n	800e50c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e410:	4b46      	ldr	r3, [pc, #280]	; (800e52c <etharp_output+0x1fc>)
 800e412:	781b      	ldrb	r3, [r3, #0]
 800e414:	4619      	mov	r1, r3
 800e416:	4a46      	ldr	r2, [pc, #280]	; (800e530 <etharp_output+0x200>)
 800e418:	460b      	mov	r3, r1
 800e41a:	005b      	lsls	r3, r3, #1
 800e41c:	440b      	add	r3, r1
 800e41e:	00db      	lsls	r3, r3, #3
 800e420:	4413      	add	r3, r2
 800e422:	3314      	adds	r3, #20
 800e424:	781b      	ldrb	r3, [r3, #0]
 800e426:	2b01      	cmp	r3, #1
 800e428:	d925      	bls.n	800e476 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e42a:	4b40      	ldr	r3, [pc, #256]	; (800e52c <etharp_output+0x1fc>)
 800e42c:	781b      	ldrb	r3, [r3, #0]
 800e42e:	4619      	mov	r1, r3
 800e430:	4a3f      	ldr	r2, [pc, #252]	; (800e530 <etharp_output+0x200>)
 800e432:	460b      	mov	r3, r1
 800e434:	005b      	lsls	r3, r3, #1
 800e436:	440b      	add	r3, r1
 800e438:	00db      	lsls	r3, r3, #3
 800e43a:	4413      	add	r3, r2
 800e43c:	3308      	adds	r3, #8
 800e43e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e440:	68fa      	ldr	r2, [r7, #12]
 800e442:	429a      	cmp	r2, r3
 800e444:	d117      	bne.n	800e476 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800e446:	69bb      	ldr	r3, [r7, #24]
 800e448:	681a      	ldr	r2, [r3, #0]
 800e44a:	4b38      	ldr	r3, [pc, #224]	; (800e52c <etharp_output+0x1fc>)
 800e44c:	781b      	ldrb	r3, [r3, #0]
 800e44e:	4618      	mov	r0, r3
 800e450:	4937      	ldr	r1, [pc, #220]	; (800e530 <etharp_output+0x200>)
 800e452:	4603      	mov	r3, r0
 800e454:	005b      	lsls	r3, r3, #1
 800e456:	4403      	add	r3, r0
 800e458:	00db      	lsls	r3, r3, #3
 800e45a:	440b      	add	r3, r1
 800e45c:	3304      	adds	r3, #4
 800e45e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e460:	429a      	cmp	r2, r3
 800e462:	d108      	bne.n	800e476 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800e464:	4b31      	ldr	r3, [pc, #196]	; (800e52c <etharp_output+0x1fc>)
 800e466:	781b      	ldrb	r3, [r3, #0]
 800e468:	461a      	mov	r2, r3
 800e46a:	68b9      	ldr	r1, [r7, #8]
 800e46c:	68f8      	ldr	r0, [r7, #12]
 800e46e:	f7ff fec5 	bl	800e1fc <etharp_output_to_arp_index>
 800e472:	4603      	mov	r3, r0
 800e474:	e04a      	b.n	800e50c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e476:	2300      	movs	r3, #0
 800e478:	75fb      	strb	r3, [r7, #23]
 800e47a:	e031      	b.n	800e4e0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e47c:	7dfa      	ldrb	r2, [r7, #23]
 800e47e:	492c      	ldr	r1, [pc, #176]	; (800e530 <etharp_output+0x200>)
 800e480:	4613      	mov	r3, r2
 800e482:	005b      	lsls	r3, r3, #1
 800e484:	4413      	add	r3, r2
 800e486:	00db      	lsls	r3, r3, #3
 800e488:	440b      	add	r3, r1
 800e48a:	3314      	adds	r3, #20
 800e48c:	781b      	ldrb	r3, [r3, #0]
 800e48e:	2b01      	cmp	r3, #1
 800e490:	d923      	bls.n	800e4da <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800e492:	7dfa      	ldrb	r2, [r7, #23]
 800e494:	4926      	ldr	r1, [pc, #152]	; (800e530 <etharp_output+0x200>)
 800e496:	4613      	mov	r3, r2
 800e498:	005b      	lsls	r3, r3, #1
 800e49a:	4413      	add	r3, r2
 800e49c:	00db      	lsls	r3, r3, #3
 800e49e:	440b      	add	r3, r1
 800e4a0:	3308      	adds	r3, #8
 800e4a2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e4a4:	68fa      	ldr	r2, [r7, #12]
 800e4a6:	429a      	cmp	r2, r3
 800e4a8:	d117      	bne.n	800e4da <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800e4aa:	69bb      	ldr	r3, [r7, #24]
 800e4ac:	6819      	ldr	r1, [r3, #0]
 800e4ae:	7dfa      	ldrb	r2, [r7, #23]
 800e4b0:	481f      	ldr	r0, [pc, #124]	; (800e530 <etharp_output+0x200>)
 800e4b2:	4613      	mov	r3, r2
 800e4b4:	005b      	lsls	r3, r3, #1
 800e4b6:	4413      	add	r3, r2
 800e4b8:	00db      	lsls	r3, r3, #3
 800e4ba:	4403      	add	r3, r0
 800e4bc:	3304      	adds	r3, #4
 800e4be:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800e4c0:	4299      	cmp	r1, r3
 800e4c2:	d10a      	bne.n	800e4da <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800e4c4:	4a19      	ldr	r2, [pc, #100]	; (800e52c <etharp_output+0x1fc>)
 800e4c6:	7dfb      	ldrb	r3, [r7, #23]
 800e4c8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800e4ca:	7dfb      	ldrb	r3, [r7, #23]
 800e4cc:	461a      	mov	r2, r3
 800e4ce:	68b9      	ldr	r1, [r7, #8]
 800e4d0:	68f8      	ldr	r0, [r7, #12]
 800e4d2:	f7ff fe93 	bl	800e1fc <etharp_output_to_arp_index>
 800e4d6:	4603      	mov	r3, r0
 800e4d8:	e018      	b.n	800e50c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e4da:	7dfb      	ldrb	r3, [r7, #23]
 800e4dc:	3301      	adds	r3, #1
 800e4de:	75fb      	strb	r3, [r7, #23]
 800e4e0:	7dfb      	ldrb	r3, [r7, #23]
 800e4e2:	2b09      	cmp	r3, #9
 800e4e4:	d9ca      	bls.n	800e47c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800e4e6:	68ba      	ldr	r2, [r7, #8]
 800e4e8:	69b9      	ldr	r1, [r7, #24]
 800e4ea:	68f8      	ldr	r0, [r7, #12]
 800e4ec:	f000 f822 	bl	800e534 <etharp_query>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	e00b      	b.n	800e50c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800e4fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e4fe:	9300      	str	r3, [sp, #0]
 800e500:	69fb      	ldr	r3, [r7, #28]
 800e502:	68b9      	ldr	r1, [r7, #8]
 800e504:	68f8      	ldr	r0, [r7, #12]
 800e506:	f001 fd3f 	bl	800ff88 <ethernet_output>
 800e50a:	4603      	mov	r3, r0
}
 800e50c:	4618      	mov	r0, r3
 800e50e:	3720      	adds	r7, #32
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}
 800e514:	08013948 	.word	0x08013948
 800e518:	08013a98 	.word	0x08013a98
 800e51c:	080139c0 	.word	0x080139c0
 800e520:	08013ae8 	.word	0x08013ae8
 800e524:	08013a88 	.word	0x08013a88
 800e528:	080140f8 	.word	0x080140f8
 800e52c:	20000200 	.word	0x20000200
 800e530:	20000110 	.word	0x20000110

0800e534 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b08c      	sub	sp, #48	; 0x30
 800e538:	af02      	add	r7, sp, #8
 800e53a:	60f8      	str	r0, [r7, #12]
 800e53c:	60b9      	str	r1, [r7, #8]
 800e53e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	3326      	adds	r3, #38	; 0x26
 800e544:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800e546:	23ff      	movs	r3, #255	; 0xff
 800e548:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800e54c:	2300      	movs	r3, #0
 800e54e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e550:	68bb      	ldr	r3, [r7, #8]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	68f9      	ldr	r1, [r7, #12]
 800e556:	4618      	mov	r0, r3
 800e558:	f000 fe0e 	bl	800f178 <ip4_addr_isbroadcast_u32>
 800e55c:	4603      	mov	r3, r0
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d10c      	bne.n	800e57c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e562:	68bb      	ldr	r3, [r7, #8]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e56a:	2be0      	cmp	r3, #224	; 0xe0
 800e56c:	d006      	beq.n	800e57c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e56e:	68bb      	ldr	r3, [r7, #8]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d003      	beq.n	800e57c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800e574:	68bb      	ldr	r3, [r7, #8]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d102      	bne.n	800e582 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e57c:	f06f 030f 	mvn.w	r3, #15
 800e580:	e101      	b.n	800e786 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800e582:	68fa      	ldr	r2, [r7, #12]
 800e584:	2101      	movs	r1, #1
 800e586:	68b8      	ldr	r0, [r7, #8]
 800e588:	f7ff fb60 	bl	800dc4c <etharp_find_entry>
 800e58c:	4603      	mov	r3, r0
 800e58e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800e590:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e594:	2b00      	cmp	r3, #0
 800e596:	da02      	bge.n	800e59e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800e598:	8a7b      	ldrh	r3, [r7, #18]
 800e59a:	b25b      	sxtb	r3, r3
 800e59c:	e0f3      	b.n	800e786 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800e59e:	8a7b      	ldrh	r3, [r7, #18]
 800e5a0:	2b7e      	cmp	r3, #126	; 0x7e
 800e5a2:	d906      	bls.n	800e5b2 <etharp_query+0x7e>
 800e5a4:	4b7a      	ldr	r3, [pc, #488]	; (800e790 <etharp_query+0x25c>)
 800e5a6:	f240 32c1 	movw	r2, #961	; 0x3c1
 800e5aa:	497a      	ldr	r1, [pc, #488]	; (800e794 <etharp_query+0x260>)
 800e5ac:	487a      	ldr	r0, [pc, #488]	; (800e798 <etharp_query+0x264>)
 800e5ae:	f001 fd99 	bl	80100e4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800e5b2:	8a7b      	ldrh	r3, [r7, #18]
 800e5b4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800e5b6:	7c7a      	ldrb	r2, [r7, #17]
 800e5b8:	4978      	ldr	r1, [pc, #480]	; (800e79c <etharp_query+0x268>)
 800e5ba:	4613      	mov	r3, r2
 800e5bc:	005b      	lsls	r3, r3, #1
 800e5be:	4413      	add	r3, r2
 800e5c0:	00db      	lsls	r3, r3, #3
 800e5c2:	440b      	add	r3, r1
 800e5c4:	3314      	adds	r3, #20
 800e5c6:	781b      	ldrb	r3, [r3, #0]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d115      	bne.n	800e5f8 <etharp_query+0xc4>
    is_new_entry = 1;
 800e5cc:	2301      	movs	r3, #1
 800e5ce:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800e5d0:	7c7a      	ldrb	r2, [r7, #17]
 800e5d2:	4972      	ldr	r1, [pc, #456]	; (800e79c <etharp_query+0x268>)
 800e5d4:	4613      	mov	r3, r2
 800e5d6:	005b      	lsls	r3, r3, #1
 800e5d8:	4413      	add	r3, r2
 800e5da:	00db      	lsls	r3, r3, #3
 800e5dc:	440b      	add	r3, r1
 800e5de:	3314      	adds	r3, #20
 800e5e0:	2201      	movs	r2, #1
 800e5e2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800e5e4:	7c7a      	ldrb	r2, [r7, #17]
 800e5e6:	496d      	ldr	r1, [pc, #436]	; (800e79c <etharp_query+0x268>)
 800e5e8:	4613      	mov	r3, r2
 800e5ea:	005b      	lsls	r3, r3, #1
 800e5ec:	4413      	add	r3, r2
 800e5ee:	00db      	lsls	r3, r3, #3
 800e5f0:	440b      	add	r3, r1
 800e5f2:	3308      	adds	r3, #8
 800e5f4:	68fa      	ldr	r2, [r7, #12]
 800e5f6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800e5f8:	7c7a      	ldrb	r2, [r7, #17]
 800e5fa:	4968      	ldr	r1, [pc, #416]	; (800e79c <etharp_query+0x268>)
 800e5fc:	4613      	mov	r3, r2
 800e5fe:	005b      	lsls	r3, r3, #1
 800e600:	4413      	add	r3, r2
 800e602:	00db      	lsls	r3, r3, #3
 800e604:	440b      	add	r3, r1
 800e606:	3314      	adds	r3, #20
 800e608:	781b      	ldrb	r3, [r3, #0]
 800e60a:	2b01      	cmp	r3, #1
 800e60c:	d011      	beq.n	800e632 <etharp_query+0xfe>
 800e60e:	7c7a      	ldrb	r2, [r7, #17]
 800e610:	4962      	ldr	r1, [pc, #392]	; (800e79c <etharp_query+0x268>)
 800e612:	4613      	mov	r3, r2
 800e614:	005b      	lsls	r3, r3, #1
 800e616:	4413      	add	r3, r2
 800e618:	00db      	lsls	r3, r3, #3
 800e61a:	440b      	add	r3, r1
 800e61c:	3314      	adds	r3, #20
 800e61e:	781b      	ldrb	r3, [r3, #0]
 800e620:	2b01      	cmp	r3, #1
 800e622:	d806      	bhi.n	800e632 <etharp_query+0xfe>
 800e624:	4b5a      	ldr	r3, [pc, #360]	; (800e790 <etharp_query+0x25c>)
 800e626:	f240 32cd 	movw	r2, #973	; 0x3cd
 800e62a:	495d      	ldr	r1, [pc, #372]	; (800e7a0 <etharp_query+0x26c>)
 800e62c:	485a      	ldr	r0, [pc, #360]	; (800e798 <etharp_query+0x264>)
 800e62e:	f001 fd59 	bl	80100e4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800e632:	6a3b      	ldr	r3, [r7, #32]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d102      	bne.n	800e63e <etharp_query+0x10a>
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d10c      	bne.n	800e658 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800e63e:	68b9      	ldr	r1, [r7, #8]
 800e640:	68f8      	ldr	r0, [r7, #12]
 800e642:	f000 f963 	bl	800e90c <etharp_request>
 800e646:	4603      	mov	r3, r0
 800e648:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d102      	bne.n	800e658 <etharp_query+0x124>
      return result;
 800e652:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e656:	e096      	b.n	800e786 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d106      	bne.n	800e66c <etharp_query+0x138>
 800e65e:	4b4c      	ldr	r3, [pc, #304]	; (800e790 <etharp_query+0x25c>)
 800e660:	f240 32e1 	movw	r2, #993	; 0x3e1
 800e664:	494f      	ldr	r1, [pc, #316]	; (800e7a4 <etharp_query+0x270>)
 800e666:	484c      	ldr	r0, [pc, #304]	; (800e798 <etharp_query+0x264>)
 800e668:	f001 fd3c 	bl	80100e4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800e66c:	7c7a      	ldrb	r2, [r7, #17]
 800e66e:	494b      	ldr	r1, [pc, #300]	; (800e79c <etharp_query+0x268>)
 800e670:	4613      	mov	r3, r2
 800e672:	005b      	lsls	r3, r3, #1
 800e674:	4413      	add	r3, r2
 800e676:	00db      	lsls	r3, r3, #3
 800e678:	440b      	add	r3, r1
 800e67a:	3314      	adds	r3, #20
 800e67c:	781b      	ldrb	r3, [r3, #0]
 800e67e:	2b01      	cmp	r3, #1
 800e680:	d917      	bls.n	800e6b2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800e682:	4a49      	ldr	r2, [pc, #292]	; (800e7a8 <etharp_query+0x274>)
 800e684:	7c7b      	ldrb	r3, [r7, #17]
 800e686:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800e688:	7c7a      	ldrb	r2, [r7, #17]
 800e68a:	4613      	mov	r3, r2
 800e68c:	005b      	lsls	r3, r3, #1
 800e68e:	4413      	add	r3, r2
 800e690:	00db      	lsls	r3, r3, #3
 800e692:	3308      	adds	r3, #8
 800e694:	4a41      	ldr	r2, [pc, #260]	; (800e79c <etharp_query+0x268>)
 800e696:	4413      	add	r3, r2
 800e698:	3304      	adds	r3, #4
 800e69a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e69e:	9200      	str	r2, [sp, #0]
 800e6a0:	697a      	ldr	r2, [r7, #20]
 800e6a2:	6879      	ldr	r1, [r7, #4]
 800e6a4:	68f8      	ldr	r0, [r7, #12]
 800e6a6:	f001 fc6f 	bl	800ff88 <ethernet_output>
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e6b0:	e067      	b.n	800e782 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e6b2:	7c7a      	ldrb	r2, [r7, #17]
 800e6b4:	4939      	ldr	r1, [pc, #228]	; (800e79c <etharp_query+0x268>)
 800e6b6:	4613      	mov	r3, r2
 800e6b8:	005b      	lsls	r3, r3, #1
 800e6ba:	4413      	add	r3, r2
 800e6bc:	00db      	lsls	r3, r3, #3
 800e6be:	440b      	add	r3, r1
 800e6c0:	3314      	adds	r3, #20
 800e6c2:	781b      	ldrb	r3, [r3, #0]
 800e6c4:	2b01      	cmp	r3, #1
 800e6c6:	d15c      	bne.n	800e782 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e6d0:	e01c      	b.n	800e70c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800e6d2:	69fb      	ldr	r3, [r7, #28]
 800e6d4:	895a      	ldrh	r2, [r3, #10]
 800e6d6:	69fb      	ldr	r3, [r7, #28]
 800e6d8:	891b      	ldrh	r3, [r3, #8]
 800e6da:	429a      	cmp	r2, r3
 800e6dc:	d10a      	bne.n	800e6f4 <etharp_query+0x1c0>
 800e6de:	69fb      	ldr	r3, [r7, #28]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d006      	beq.n	800e6f4 <etharp_query+0x1c0>
 800e6e6:	4b2a      	ldr	r3, [pc, #168]	; (800e790 <etharp_query+0x25c>)
 800e6e8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800e6ec:	492f      	ldr	r1, [pc, #188]	; (800e7ac <etharp_query+0x278>)
 800e6ee:	482a      	ldr	r0, [pc, #168]	; (800e798 <etharp_query+0x264>)
 800e6f0:	f001 fcf8 	bl	80100e4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800e6f4:	69fb      	ldr	r3, [r7, #28]
 800e6f6:	7b1b      	ldrb	r3, [r3, #12]
 800e6f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d002      	beq.n	800e706 <etharp_query+0x1d2>
        copy_needed = 1;
 800e700:	2301      	movs	r3, #1
 800e702:	61bb      	str	r3, [r7, #24]
        break;
 800e704:	e005      	b.n	800e712 <etharp_query+0x1de>
      }
      p = p->next;
 800e706:	69fb      	ldr	r3, [r7, #28]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e70c:	69fb      	ldr	r3, [r7, #28]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d1df      	bne.n	800e6d2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800e712:	69bb      	ldr	r3, [r7, #24]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d007      	beq.n	800e728 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800e718:	687a      	ldr	r2, [r7, #4]
 800e71a:	f44f 7120 	mov.w	r1, #640	; 0x280
 800e71e:	200e      	movs	r0, #14
 800e720:	f7f8 feea 	bl	80074f8 <pbuf_clone>
 800e724:	61f8      	str	r0, [r7, #28]
 800e726:	e004      	b.n	800e732 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800e72c:	69f8      	ldr	r0, [r7, #28]
 800e72e:	f7f8 fc95 	bl	800705c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800e732:	69fb      	ldr	r3, [r7, #28]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d021      	beq.n	800e77c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800e738:	7c7a      	ldrb	r2, [r7, #17]
 800e73a:	4918      	ldr	r1, [pc, #96]	; (800e79c <etharp_query+0x268>)
 800e73c:	4613      	mov	r3, r2
 800e73e:	005b      	lsls	r3, r3, #1
 800e740:	4413      	add	r3, r2
 800e742:	00db      	lsls	r3, r3, #3
 800e744:	440b      	add	r3, r1
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d00a      	beq.n	800e762 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800e74c:	7c7a      	ldrb	r2, [r7, #17]
 800e74e:	4913      	ldr	r1, [pc, #76]	; (800e79c <etharp_query+0x268>)
 800e750:	4613      	mov	r3, r2
 800e752:	005b      	lsls	r3, r3, #1
 800e754:	4413      	add	r3, r2
 800e756:	00db      	lsls	r3, r3, #3
 800e758:	440b      	add	r3, r1
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	4618      	mov	r0, r3
 800e75e:	f7f8 fbdd 	bl	8006f1c <pbuf_free>
      }
      arp_table[i].q = p;
 800e762:	7c7a      	ldrb	r2, [r7, #17]
 800e764:	490d      	ldr	r1, [pc, #52]	; (800e79c <etharp_query+0x268>)
 800e766:	4613      	mov	r3, r2
 800e768:	005b      	lsls	r3, r3, #1
 800e76a:	4413      	add	r3, r2
 800e76c:	00db      	lsls	r3, r3, #3
 800e76e:	440b      	add	r3, r1
 800e770:	69fa      	ldr	r2, [r7, #28]
 800e772:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800e774:	2300      	movs	r3, #0
 800e776:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e77a:	e002      	b.n	800e782 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800e77c:	23ff      	movs	r3, #255	; 0xff
 800e77e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800e782:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e786:	4618      	mov	r0, r3
 800e788:	3728      	adds	r7, #40	; 0x28
 800e78a:	46bd      	mov	sp, r7
 800e78c:	bd80      	pop	{r7, pc}
 800e78e:	bf00      	nop
 800e790:	08013948 	.word	0x08013948
 800e794:	08013af4 	.word	0x08013af4
 800e798:	080139c0 	.word	0x080139c0
 800e79c:	20000110 	.word	0x20000110
 800e7a0:	08013b04 	.word	0x08013b04
 800e7a4:	08013ae8 	.word	0x08013ae8
 800e7a8:	20000200 	.word	0x20000200
 800e7ac:	08013b2c 	.word	0x08013b2c

0800e7b0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b08a      	sub	sp, #40	; 0x28
 800e7b4:	af02      	add	r7, sp, #8
 800e7b6:	60f8      	str	r0, [r7, #12]
 800e7b8:	60b9      	str	r1, [r7, #8]
 800e7ba:	607a      	str	r2, [r7, #4]
 800e7bc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800e7be:	2300      	movs	r3, #0
 800e7c0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d106      	bne.n	800e7d6 <etharp_raw+0x26>
 800e7c8:	4b3a      	ldr	r3, [pc, #232]	; (800e8b4 <etharp_raw+0x104>)
 800e7ca:	f240 4257 	movw	r2, #1111	; 0x457
 800e7ce:	493a      	ldr	r1, [pc, #232]	; (800e8b8 <etharp_raw+0x108>)
 800e7d0:	483a      	ldr	r0, [pc, #232]	; (800e8bc <etharp_raw+0x10c>)
 800e7d2:	f001 fc87 	bl	80100e4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800e7d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e7da:	211c      	movs	r1, #28
 800e7dc:	200e      	movs	r0, #14
 800e7de:	f7f8 f8b9 	bl	8006954 <pbuf_alloc>
 800e7e2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800e7e4:	69bb      	ldr	r3, [r7, #24]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d102      	bne.n	800e7f0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800e7ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e7ee:	e05d      	b.n	800e8ac <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800e7f0:	69bb      	ldr	r3, [r7, #24]
 800e7f2:	895b      	ldrh	r3, [r3, #10]
 800e7f4:	2b1b      	cmp	r3, #27
 800e7f6:	d806      	bhi.n	800e806 <etharp_raw+0x56>
 800e7f8:	4b2e      	ldr	r3, [pc, #184]	; (800e8b4 <etharp_raw+0x104>)
 800e7fa:	f240 4262 	movw	r2, #1122	; 0x462
 800e7fe:	4930      	ldr	r1, [pc, #192]	; (800e8c0 <etharp_raw+0x110>)
 800e800:	482e      	ldr	r0, [pc, #184]	; (800e8bc <etharp_raw+0x10c>)
 800e802:	f001 fc6f 	bl	80100e4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800e806:	69bb      	ldr	r3, [r7, #24]
 800e808:	685b      	ldr	r3, [r3, #4]
 800e80a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800e80c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e80e:	4618      	mov	r0, r3
 800e810:	f7f7 f8d0 	bl	80059b4 <lwip_htons>
 800e814:	4603      	mov	r3, r0
 800e816:	461a      	mov	r2, r3
 800e818:	697b      	ldr	r3, [r7, #20]
 800e81a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e822:	2b06      	cmp	r3, #6
 800e824:	d006      	beq.n	800e834 <etharp_raw+0x84>
 800e826:	4b23      	ldr	r3, [pc, #140]	; (800e8b4 <etharp_raw+0x104>)
 800e828:	f240 4269 	movw	r2, #1129	; 0x469
 800e82c:	4925      	ldr	r1, [pc, #148]	; (800e8c4 <etharp_raw+0x114>)
 800e82e:	4823      	ldr	r0, [pc, #140]	; (800e8bc <etharp_raw+0x10c>)
 800e830:	f001 fc58 	bl	80100e4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800e834:	697b      	ldr	r3, [r7, #20]
 800e836:	3308      	adds	r3, #8
 800e838:	2206      	movs	r2, #6
 800e83a:	6839      	ldr	r1, [r7, #0]
 800e83c:	4618      	mov	r0, r3
 800e83e:	f001 fc21 	bl	8010084 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800e842:	697b      	ldr	r3, [r7, #20]
 800e844:	3312      	adds	r3, #18
 800e846:	2206      	movs	r2, #6
 800e848:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e84a:	4618      	mov	r0, r3
 800e84c:	f001 fc1a 	bl	8010084 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800e850:	697b      	ldr	r3, [r7, #20]
 800e852:	330e      	adds	r3, #14
 800e854:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e856:	6812      	ldr	r2, [r2, #0]
 800e858:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800e85a:	697b      	ldr	r3, [r7, #20]
 800e85c:	3318      	adds	r3, #24
 800e85e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e860:	6812      	ldr	r2, [r2, #0]
 800e862:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800e864:	697b      	ldr	r3, [r7, #20]
 800e866:	2200      	movs	r2, #0
 800e868:	701a      	strb	r2, [r3, #0]
 800e86a:	2200      	movs	r2, #0
 800e86c:	f042 0201 	orr.w	r2, r2, #1
 800e870:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800e872:	697b      	ldr	r3, [r7, #20]
 800e874:	2200      	movs	r2, #0
 800e876:	f042 0208 	orr.w	r2, r2, #8
 800e87a:	709a      	strb	r2, [r3, #2]
 800e87c:	2200      	movs	r2, #0
 800e87e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800e880:	697b      	ldr	r3, [r7, #20]
 800e882:	2206      	movs	r2, #6
 800e884:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800e886:	697b      	ldr	r3, [r7, #20]
 800e888:	2204      	movs	r2, #4
 800e88a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800e88c:	f640 0306 	movw	r3, #2054	; 0x806
 800e890:	9300      	str	r3, [sp, #0]
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	68ba      	ldr	r2, [r7, #8]
 800e896:	69b9      	ldr	r1, [r7, #24]
 800e898:	68f8      	ldr	r0, [r7, #12]
 800e89a:	f001 fb75 	bl	800ff88 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800e89e:	69b8      	ldr	r0, [r7, #24]
 800e8a0:	f7f8 fb3c 	bl	8006f1c <pbuf_free>
  p = NULL;
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800e8a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	3720      	adds	r7, #32
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	bd80      	pop	{r7, pc}
 800e8b4:	08013948 	.word	0x08013948
 800e8b8:	08013a98 	.word	0x08013a98
 800e8bc:	080139c0 	.word	0x080139c0
 800e8c0:	08013b48 	.word	0x08013b48
 800e8c4:	08013b7c 	.word	0x08013b7c

0800e8c8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b088      	sub	sp, #32
 800e8cc:	af04      	add	r7, sp, #16
 800e8ce:	60f8      	str	r0, [r7, #12]
 800e8d0:	60b9      	str	r1, [r7, #8]
 800e8d2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e8e4:	2201      	movs	r2, #1
 800e8e6:	9203      	str	r2, [sp, #12]
 800e8e8:	68ba      	ldr	r2, [r7, #8]
 800e8ea:	9202      	str	r2, [sp, #8]
 800e8ec:	4a06      	ldr	r2, [pc, #24]	; (800e908 <etharp_request_dst+0x40>)
 800e8ee:	9201      	str	r2, [sp, #4]
 800e8f0:	9300      	str	r3, [sp, #0]
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	687a      	ldr	r2, [r7, #4]
 800e8f6:	68f8      	ldr	r0, [r7, #12]
 800e8f8:	f7ff ff5a 	bl	800e7b0 <etharp_raw>
 800e8fc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800e8fe:	4618      	mov	r0, r3
 800e900:	3710      	adds	r7, #16
 800e902:	46bd      	mov	sp, r7
 800e904:	bd80      	pop	{r7, pc}
 800e906:	bf00      	nop
 800e908:	08014100 	.word	0x08014100

0800e90c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b082      	sub	sp, #8
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
 800e914:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800e916:	4a05      	ldr	r2, [pc, #20]	; (800e92c <etharp_request+0x20>)
 800e918:	6839      	ldr	r1, [r7, #0]
 800e91a:	6878      	ldr	r0, [r7, #4]
 800e91c:	f7ff ffd4 	bl	800e8c8 <etharp_request_dst>
 800e920:	4603      	mov	r3, r0
}
 800e922:	4618      	mov	r0, r3
 800e924:	3708      	adds	r7, #8
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}
 800e92a:	bf00      	nop
 800e92c:	080140f8 	.word	0x080140f8

0800e930 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b08e      	sub	sp, #56	; 0x38
 800e934:	af04      	add	r7, sp, #16
 800e936:	6078      	str	r0, [r7, #4]
 800e938:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800e93a:	4b79      	ldr	r3, [pc, #484]	; (800eb20 <icmp_input+0x1f0>)
 800e93c:	689b      	ldr	r3, [r3, #8]
 800e93e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800e940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e942:	781b      	ldrb	r3, [r3, #0]
 800e944:	f003 030f 	and.w	r3, r3, #15
 800e948:	b2db      	uxtb	r3, r3
 800e94a:	009b      	lsls	r3, r3, #2
 800e94c:	b2db      	uxtb	r3, r3
 800e94e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800e950:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e952:	2b13      	cmp	r3, #19
 800e954:	f240 80cd 	bls.w	800eaf2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	895b      	ldrh	r3, [r3, #10]
 800e95c:	2b03      	cmp	r3, #3
 800e95e:	f240 80ca 	bls.w	800eaf6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	685b      	ldr	r3, [r3, #4]
 800e966:	781b      	ldrb	r3, [r3, #0]
 800e968:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800e96c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e970:	2b00      	cmp	r3, #0
 800e972:	f000 80b7 	beq.w	800eae4 <icmp_input+0x1b4>
 800e976:	2b08      	cmp	r3, #8
 800e978:	f040 80b7 	bne.w	800eaea <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800e97c:	4b69      	ldr	r3, [pc, #420]	; (800eb24 <icmp_input+0x1f4>)
 800e97e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e980:	4b67      	ldr	r3, [pc, #412]	; (800eb20 <icmp_input+0x1f0>)
 800e982:	695b      	ldr	r3, [r3, #20]
 800e984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e988:	2be0      	cmp	r3, #224	; 0xe0
 800e98a:	f000 80bb 	beq.w	800eb04 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800e98e:	4b64      	ldr	r3, [pc, #400]	; (800eb20 <icmp_input+0x1f0>)
 800e990:	695b      	ldr	r3, [r3, #20]
 800e992:	4a63      	ldr	r2, [pc, #396]	; (800eb20 <icmp_input+0x1f0>)
 800e994:	6812      	ldr	r2, [r2, #0]
 800e996:	4611      	mov	r1, r2
 800e998:	4618      	mov	r0, r3
 800e99a:	f000 fbed 	bl	800f178 <ip4_addr_isbroadcast_u32>
 800e99e:	4603      	mov	r3, r0
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	f040 80b1 	bne.w	800eb08 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	891b      	ldrh	r3, [r3, #8]
 800e9aa:	2b07      	cmp	r3, #7
 800e9ac:	f240 80a5 	bls.w	800eafa <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e9b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e9b2:	330e      	adds	r3, #14
 800e9b4:	4619      	mov	r1, r3
 800e9b6:	6878      	ldr	r0, [r7, #4]
 800e9b8:	f7f8 fa1a 	bl	8006df0 <pbuf_add_header>
 800e9bc:	4603      	mov	r3, r0
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d04b      	beq.n	800ea5a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	891a      	ldrh	r2, [r3, #8]
 800e9c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e9c8:	4413      	add	r3, r2
 800e9ca:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	891b      	ldrh	r3, [r3, #8]
 800e9d0:	8b7a      	ldrh	r2, [r7, #26]
 800e9d2:	429a      	cmp	r2, r3
 800e9d4:	f0c0 809a 	bcc.w	800eb0c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800e9d8:	8b7b      	ldrh	r3, [r7, #26]
 800e9da:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e9de:	4619      	mov	r1, r3
 800e9e0:	200e      	movs	r0, #14
 800e9e2:	f7f7 ffb7 	bl	8006954 <pbuf_alloc>
 800e9e6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800e9e8:	697b      	ldr	r3, [r7, #20]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	f000 8090 	beq.w	800eb10 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800e9f0:	697b      	ldr	r3, [r7, #20]
 800e9f2:	895b      	ldrh	r3, [r3, #10]
 800e9f4:	461a      	mov	r2, r3
 800e9f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e9f8:	3308      	adds	r3, #8
 800e9fa:	429a      	cmp	r2, r3
 800e9fc:	d203      	bcs.n	800ea06 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800e9fe:	6978      	ldr	r0, [r7, #20]
 800ea00:	f7f8 fa8c 	bl	8006f1c <pbuf_free>
          goto icmperr;
 800ea04:	e085      	b.n	800eb12 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800ea06:	697b      	ldr	r3, [r7, #20]
 800ea08:	685b      	ldr	r3, [r3, #4]
 800ea0a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ea0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ea0e:	4618      	mov	r0, r3
 800ea10:	f001 fb38 	bl	8010084 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800ea14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ea16:	4619      	mov	r1, r3
 800ea18:	6978      	ldr	r0, [r7, #20]
 800ea1a:	f7f8 f9f9 	bl	8006e10 <pbuf_remove_header>
 800ea1e:	4603      	mov	r3, r0
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d009      	beq.n	800ea38 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800ea24:	4b40      	ldr	r3, [pc, #256]	; (800eb28 <icmp_input+0x1f8>)
 800ea26:	22b6      	movs	r2, #182	; 0xb6
 800ea28:	4940      	ldr	r1, [pc, #256]	; (800eb2c <icmp_input+0x1fc>)
 800ea2a:	4841      	ldr	r0, [pc, #260]	; (800eb30 <icmp_input+0x200>)
 800ea2c:	f001 fb5a 	bl	80100e4 <iprintf>
          pbuf_free(r);
 800ea30:	6978      	ldr	r0, [r7, #20]
 800ea32:	f7f8 fa73 	bl	8006f1c <pbuf_free>
          goto icmperr;
 800ea36:	e06c      	b.n	800eb12 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800ea38:	6879      	ldr	r1, [r7, #4]
 800ea3a:	6978      	ldr	r0, [r7, #20]
 800ea3c:	f7f8 fb86 	bl	800714c <pbuf_copy>
 800ea40:	4603      	mov	r3, r0
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d003      	beq.n	800ea4e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800ea46:	6978      	ldr	r0, [r7, #20]
 800ea48:	f7f8 fa68 	bl	8006f1c <pbuf_free>
          goto icmperr;
 800ea4c:	e061      	b.n	800eb12 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800ea4e:	6878      	ldr	r0, [r7, #4]
 800ea50:	f7f8 fa64 	bl	8006f1c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800ea54:	697b      	ldr	r3, [r7, #20]
 800ea56:	607b      	str	r3, [r7, #4]
 800ea58:	e00f      	b.n	800ea7a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ea5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ea5c:	330e      	adds	r3, #14
 800ea5e:	4619      	mov	r1, r3
 800ea60:	6878      	ldr	r0, [r7, #4]
 800ea62:	f7f8 f9d5 	bl	8006e10 <pbuf_remove_header>
 800ea66:	4603      	mov	r3, r0
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d006      	beq.n	800ea7a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800ea6c:	4b2e      	ldr	r3, [pc, #184]	; (800eb28 <icmp_input+0x1f8>)
 800ea6e:	22c7      	movs	r2, #199	; 0xc7
 800ea70:	4930      	ldr	r1, [pc, #192]	; (800eb34 <icmp_input+0x204>)
 800ea72:	482f      	ldr	r0, [pc, #188]	; (800eb30 <icmp_input+0x200>)
 800ea74:	f001 fb36 	bl	80100e4 <iprintf>
          goto icmperr;
 800ea78:	e04b      	b.n	800eb12 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	685b      	ldr	r3, [r3, #4]
 800ea7e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800ea80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ea82:	4619      	mov	r1, r3
 800ea84:	6878      	ldr	r0, [r7, #4]
 800ea86:	f7f8 f9b3 	bl	8006df0 <pbuf_add_header>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d12b      	bne.n	800eae8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	685b      	ldr	r3, [r3, #4]
 800ea94:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800ea96:	69fb      	ldr	r3, [r7, #28]
 800ea98:	681a      	ldr	r2, [r3, #0]
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800ea9e:	4b20      	ldr	r3, [pc, #128]	; (800eb20 <icmp_input+0x1f0>)
 800eaa0:	691a      	ldr	r2, [r3, #16]
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800eaa6:	693b      	ldr	r3, [r7, #16]
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800eaac:	693b      	ldr	r3, [r7, #16]
 800eaae:	2200      	movs	r2, #0
 800eab0:	709a      	strb	r2, [r3, #2]
 800eab2:	2200      	movs	r2, #0
 800eab4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	22ff      	movs	r2, #255	; 0xff
 800eaba:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	2200      	movs	r2, #0
 800eac0:	729a      	strb	r2, [r3, #10]
 800eac2:	2200      	movs	r2, #0
 800eac4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800eac6:	683b      	ldr	r3, [r7, #0]
 800eac8:	9302      	str	r3, [sp, #8]
 800eaca:	2301      	movs	r3, #1
 800eacc:	9301      	str	r3, [sp, #4]
 800eace:	2300      	movs	r3, #0
 800ead0:	9300      	str	r3, [sp, #0]
 800ead2:	23ff      	movs	r3, #255	; 0xff
 800ead4:	2200      	movs	r2, #0
 800ead6:	69f9      	ldr	r1, [r7, #28]
 800ead8:	6878      	ldr	r0, [r7, #4]
 800eada:	f000 fa75 	bl	800efc8 <ip4_output_if>
 800eade:	4603      	mov	r3, r0
 800eae0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800eae2:	e001      	b.n	800eae8 <icmp_input+0x1b8>
      break;
 800eae4:	bf00      	nop
 800eae6:	e000      	b.n	800eaea <icmp_input+0x1ba>
      break;
 800eae8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800eaea:	6878      	ldr	r0, [r7, #4]
 800eaec:	f7f8 fa16 	bl	8006f1c <pbuf_free>
  return;
 800eaf0:	e013      	b.n	800eb1a <icmp_input+0x1ea>
    goto lenerr;
 800eaf2:	bf00      	nop
 800eaf4:	e002      	b.n	800eafc <icmp_input+0x1cc>
    goto lenerr;
 800eaf6:	bf00      	nop
 800eaf8:	e000      	b.n	800eafc <icmp_input+0x1cc>
        goto lenerr;
 800eafa:	bf00      	nop
lenerr:
  pbuf_free(p);
 800eafc:	6878      	ldr	r0, [r7, #4]
 800eafe:	f7f8 fa0d 	bl	8006f1c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800eb02:	e00a      	b.n	800eb1a <icmp_input+0x1ea>
        goto icmperr;
 800eb04:	bf00      	nop
 800eb06:	e004      	b.n	800eb12 <icmp_input+0x1e2>
        goto icmperr;
 800eb08:	bf00      	nop
 800eb0a:	e002      	b.n	800eb12 <icmp_input+0x1e2>
          goto icmperr;
 800eb0c:	bf00      	nop
 800eb0e:	e000      	b.n	800eb12 <icmp_input+0x1e2>
          goto icmperr;
 800eb10:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	f7f8 fa02 	bl	8006f1c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800eb18:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800eb1a:	3728      	adds	r7, #40	; 0x28
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	bd80      	pop	{r7, pc}
 800eb20:	200034f0 	.word	0x200034f0
 800eb24:	20003504 	.word	0x20003504
 800eb28:	08013bc0 	.word	0x08013bc0
 800eb2c:	08013bf8 	.word	0x08013bf8
 800eb30:	08013c30 	.word	0x08013c30
 800eb34:	08013c58 	.word	0x08013c58

0800eb38 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b082      	sub	sp, #8
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
 800eb40:	460b      	mov	r3, r1
 800eb42:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800eb44:	78fb      	ldrb	r3, [r7, #3]
 800eb46:	461a      	mov	r2, r3
 800eb48:	2103      	movs	r1, #3
 800eb4a:	6878      	ldr	r0, [r7, #4]
 800eb4c:	f000 f814 	bl	800eb78 <icmp_send_response>
}
 800eb50:	bf00      	nop
 800eb52:	3708      	adds	r7, #8
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}

0800eb58 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b082      	sub	sp, #8
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
 800eb60:	460b      	mov	r3, r1
 800eb62:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800eb64:	78fb      	ldrb	r3, [r7, #3]
 800eb66:	461a      	mov	r2, r3
 800eb68:	210b      	movs	r1, #11
 800eb6a:	6878      	ldr	r0, [r7, #4]
 800eb6c:	f000 f804 	bl	800eb78 <icmp_send_response>
}
 800eb70:	bf00      	nop
 800eb72:	3708      	adds	r7, #8
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}

0800eb78 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b08c      	sub	sp, #48	; 0x30
 800eb7c:	af04      	add	r7, sp, #16
 800eb7e:	6078      	str	r0, [r7, #4]
 800eb80:	460b      	mov	r3, r1
 800eb82:	70fb      	strb	r3, [r7, #3]
 800eb84:	4613      	mov	r3, r2
 800eb86:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800eb88:	f44f 7220 	mov.w	r2, #640	; 0x280
 800eb8c:	2124      	movs	r1, #36	; 0x24
 800eb8e:	2022      	movs	r0, #34	; 0x22
 800eb90:	f7f7 fee0 	bl	8006954 <pbuf_alloc>
 800eb94:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800eb96:	69fb      	ldr	r3, [r7, #28]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d04c      	beq.n	800ec36 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800eb9c:	69fb      	ldr	r3, [r7, #28]
 800eb9e:	895b      	ldrh	r3, [r3, #10]
 800eba0:	2b23      	cmp	r3, #35	; 0x23
 800eba2:	d806      	bhi.n	800ebb2 <icmp_send_response+0x3a>
 800eba4:	4b26      	ldr	r3, [pc, #152]	; (800ec40 <icmp_send_response+0xc8>)
 800eba6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800ebaa:	4926      	ldr	r1, [pc, #152]	; (800ec44 <icmp_send_response+0xcc>)
 800ebac:	4826      	ldr	r0, [pc, #152]	; (800ec48 <icmp_send_response+0xd0>)
 800ebae:	f001 fa99 	bl	80100e4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	685b      	ldr	r3, [r3, #4]
 800ebb6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800ebb8:	69fb      	ldr	r3, [r7, #28]
 800ebba:	685b      	ldr	r3, [r3, #4]
 800ebbc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800ebbe:	697b      	ldr	r3, [r7, #20]
 800ebc0:	78fa      	ldrb	r2, [r7, #3]
 800ebc2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800ebc4:	697b      	ldr	r3, [r7, #20]
 800ebc6:	78ba      	ldrb	r2, [r7, #2]
 800ebc8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800ebca:	697b      	ldr	r3, [r7, #20]
 800ebcc:	2200      	movs	r2, #0
 800ebce:	711a      	strb	r2, [r3, #4]
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800ebd4:	697b      	ldr	r3, [r7, #20]
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	719a      	strb	r2, [r3, #6]
 800ebda:	2200      	movs	r2, #0
 800ebdc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800ebde:	69fb      	ldr	r3, [r7, #28]
 800ebe0:	685b      	ldr	r3, [r3, #4]
 800ebe2:	f103 0008 	add.w	r0, r3, #8
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	685b      	ldr	r3, [r3, #4]
 800ebea:	221c      	movs	r2, #28
 800ebec:	4619      	mov	r1, r3
 800ebee:	f001 fa49 	bl	8010084 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800ebf2:	69bb      	ldr	r3, [r7, #24]
 800ebf4:	68db      	ldr	r3, [r3, #12]
 800ebf6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800ebf8:	f107 030c 	add.w	r3, r7, #12
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	f000 f825 	bl	800ec4c <ip4_route>
 800ec02:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800ec04:	693b      	ldr	r3, [r7, #16]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d011      	beq.n	800ec2e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800ec0a:	697b      	ldr	r3, [r7, #20]
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	709a      	strb	r2, [r3, #2]
 800ec10:	2200      	movs	r2, #0
 800ec12:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800ec14:	f107 020c 	add.w	r2, r7, #12
 800ec18:	693b      	ldr	r3, [r7, #16]
 800ec1a:	9302      	str	r3, [sp, #8]
 800ec1c:	2301      	movs	r3, #1
 800ec1e:	9301      	str	r3, [sp, #4]
 800ec20:	2300      	movs	r3, #0
 800ec22:	9300      	str	r3, [sp, #0]
 800ec24:	23ff      	movs	r3, #255	; 0xff
 800ec26:	2100      	movs	r1, #0
 800ec28:	69f8      	ldr	r0, [r7, #28]
 800ec2a:	f000 f9cd 	bl	800efc8 <ip4_output_if>
  }
  pbuf_free(q);
 800ec2e:	69f8      	ldr	r0, [r7, #28]
 800ec30:	f7f8 f974 	bl	8006f1c <pbuf_free>
 800ec34:	e000      	b.n	800ec38 <icmp_send_response+0xc0>
    return;
 800ec36:	bf00      	nop
}
 800ec38:	3720      	adds	r7, #32
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}
 800ec3e:	bf00      	nop
 800ec40:	08013bc0 	.word	0x08013bc0
 800ec44:	08013c8c 	.word	0x08013c8c
 800ec48:	08013c30 	.word	0x08013c30

0800ec4c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800ec4c:	b480      	push	{r7}
 800ec4e:	b085      	sub	sp, #20
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800ec54:	4b33      	ldr	r3, [pc, #204]	; (800ed24 <ip4_route+0xd8>)
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	60fb      	str	r3, [r7, #12]
 800ec5a:	e036      	b.n	800ecca <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ec62:	f003 0301 	and.w	r3, r3, #1
 800ec66:	b2db      	uxtb	r3, r3
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d02b      	beq.n	800ecc4 <ip4_route+0x78>
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ec72:	089b      	lsrs	r3, r3, #2
 800ec74:	f003 0301 	and.w	r3, r3, #1
 800ec78:	b2db      	uxtb	r3, r3
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d022      	beq.n	800ecc4 <ip4_route+0x78>
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	3304      	adds	r3, #4
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d01d      	beq.n	800ecc4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681a      	ldr	r2, [r3, #0]
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	3304      	adds	r3, #4
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	405a      	eors	r2, r3
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	3308      	adds	r3, #8
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	4013      	ands	r3, r2
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d101      	bne.n	800eca4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	e038      	b.n	800ed16 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ecaa:	f003 0302 	and.w	r3, r3, #2
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d108      	bne.n	800ecc4 <ip4_route+0x78>
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681a      	ldr	r2, [r3, #0]
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	330c      	adds	r3, #12
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	429a      	cmp	r2, r3
 800ecbe:	d101      	bne.n	800ecc4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	e028      	b.n	800ed16 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	60fb      	str	r3, [r7, #12]
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d1c5      	bne.n	800ec5c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ecd0:	4b15      	ldr	r3, [pc, #84]	; (800ed28 <ip4_route+0xdc>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d01a      	beq.n	800ed0e <ip4_route+0xc2>
 800ecd8:	4b13      	ldr	r3, [pc, #76]	; (800ed28 <ip4_route+0xdc>)
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ece0:	f003 0301 	and.w	r3, r3, #1
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d012      	beq.n	800ed0e <ip4_route+0xc2>
 800ece8:	4b0f      	ldr	r3, [pc, #60]	; (800ed28 <ip4_route+0xdc>)
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ecf0:	f003 0304 	and.w	r3, r3, #4
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d00a      	beq.n	800ed0e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ecf8:	4b0b      	ldr	r3, [pc, #44]	; (800ed28 <ip4_route+0xdc>)
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	3304      	adds	r3, #4
 800ecfe:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d004      	beq.n	800ed0e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	b2db      	uxtb	r3, r3
 800ed0a:	2b7f      	cmp	r3, #127	; 0x7f
 800ed0c:	d101      	bne.n	800ed12 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800ed0e:	2300      	movs	r3, #0
 800ed10:	e001      	b.n	800ed16 <ip4_route+0xca>
  }

  return netif_default;
 800ed12:	4b05      	ldr	r3, [pc, #20]	; (800ed28 <ip4_route+0xdc>)
 800ed14:	681b      	ldr	r3, [r3, #0]
}
 800ed16:	4618      	mov	r0, r3
 800ed18:	3714      	adds	r7, #20
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed20:	4770      	bx	lr
 800ed22:	bf00      	nop
 800ed24:	200065e4 	.word	0x200065e4
 800ed28:	200065e8 	.word	0x200065e8

0800ed2c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b082      	sub	sp, #8
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ed3a:	f003 0301 	and.w	r3, r3, #1
 800ed3e:	b2db      	uxtb	r3, r3
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d016      	beq.n	800ed72 <ip4_input_accept+0x46>
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	3304      	adds	r3, #4
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d011      	beq.n	800ed72 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ed4e:	4b0b      	ldr	r3, [pc, #44]	; (800ed7c <ip4_input_accept+0x50>)
 800ed50:	695a      	ldr	r2, [r3, #20]
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	3304      	adds	r3, #4
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	429a      	cmp	r2, r3
 800ed5a:	d008      	beq.n	800ed6e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800ed5c:	4b07      	ldr	r3, [pc, #28]	; (800ed7c <ip4_input_accept+0x50>)
 800ed5e:	695b      	ldr	r3, [r3, #20]
 800ed60:	6879      	ldr	r1, [r7, #4]
 800ed62:	4618      	mov	r0, r3
 800ed64:	f000 fa08 	bl	800f178 <ip4_addr_isbroadcast_u32>
 800ed68:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d001      	beq.n	800ed72 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800ed6e:	2301      	movs	r3, #1
 800ed70:	e000      	b.n	800ed74 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800ed72:	2300      	movs	r3, #0
}
 800ed74:	4618      	mov	r0, r3
 800ed76:	3708      	adds	r7, #8
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	bd80      	pop	{r7, pc}
 800ed7c:	200034f0 	.word	0x200034f0

0800ed80 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b086      	sub	sp, #24
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
 800ed88:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	685b      	ldr	r3, [r3, #4]
 800ed8e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800ed90:	697b      	ldr	r3, [r7, #20]
 800ed92:	781b      	ldrb	r3, [r3, #0]
 800ed94:	091b      	lsrs	r3, r3, #4
 800ed96:	b2db      	uxtb	r3, r3
 800ed98:	2b04      	cmp	r3, #4
 800ed9a:	d004      	beq.n	800eda6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800ed9c:	6878      	ldr	r0, [r7, #4]
 800ed9e:	f7f8 f8bd 	bl	8006f1c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800eda2:	2300      	movs	r3, #0
 800eda4:	e107      	b.n	800efb6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800eda6:	697b      	ldr	r3, [r7, #20]
 800eda8:	781b      	ldrb	r3, [r3, #0]
 800edaa:	f003 030f 	and.w	r3, r3, #15
 800edae:	b2db      	uxtb	r3, r3
 800edb0:	009b      	lsls	r3, r3, #2
 800edb2:	b2db      	uxtb	r3, r3
 800edb4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800edb6:	697b      	ldr	r3, [r7, #20]
 800edb8:	885b      	ldrh	r3, [r3, #2]
 800edba:	b29b      	uxth	r3, r3
 800edbc:	4618      	mov	r0, r3
 800edbe:	f7f6 fdf9 	bl	80059b4 <lwip_htons>
 800edc2:	4603      	mov	r3, r0
 800edc4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	891b      	ldrh	r3, [r3, #8]
 800edca:	89ba      	ldrh	r2, [r7, #12]
 800edcc:	429a      	cmp	r2, r3
 800edce:	d204      	bcs.n	800edda <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800edd0:	89bb      	ldrh	r3, [r7, #12]
 800edd2:	4619      	mov	r1, r3
 800edd4:	6878      	ldr	r0, [r7, #4]
 800edd6:	f7f7 ff1b 	bl	8006c10 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	895b      	ldrh	r3, [r3, #10]
 800edde:	89fa      	ldrh	r2, [r7, #14]
 800ede0:	429a      	cmp	r2, r3
 800ede2:	d807      	bhi.n	800edf4 <ip4_input+0x74>
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	891b      	ldrh	r3, [r3, #8]
 800ede8:	89ba      	ldrh	r2, [r7, #12]
 800edea:	429a      	cmp	r2, r3
 800edec:	d802      	bhi.n	800edf4 <ip4_input+0x74>
 800edee:	89fb      	ldrh	r3, [r7, #14]
 800edf0:	2b13      	cmp	r3, #19
 800edf2:	d804      	bhi.n	800edfe <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800edf4:	6878      	ldr	r0, [r7, #4]
 800edf6:	f7f8 f891 	bl	8006f1c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800edfa:	2300      	movs	r3, #0
 800edfc:	e0db      	b.n	800efb6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800edfe:	697b      	ldr	r3, [r7, #20]
 800ee00:	691b      	ldr	r3, [r3, #16]
 800ee02:	4a6f      	ldr	r2, [pc, #444]	; (800efc0 <ip4_input+0x240>)
 800ee04:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800ee06:	697b      	ldr	r3, [r7, #20]
 800ee08:	68db      	ldr	r3, [r3, #12]
 800ee0a:	4a6d      	ldr	r2, [pc, #436]	; (800efc0 <ip4_input+0x240>)
 800ee0c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ee0e:	4b6c      	ldr	r3, [pc, #432]	; (800efc0 <ip4_input+0x240>)
 800ee10:	695b      	ldr	r3, [r3, #20]
 800ee12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ee16:	2be0      	cmp	r3, #224	; 0xe0
 800ee18:	d112      	bne.n	800ee40 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800ee1a:	683b      	ldr	r3, [r7, #0]
 800ee1c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ee20:	f003 0301 	and.w	r3, r3, #1
 800ee24:	b2db      	uxtb	r3, r3
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d007      	beq.n	800ee3a <ip4_input+0xba>
 800ee2a:	683b      	ldr	r3, [r7, #0]
 800ee2c:	3304      	adds	r3, #4
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d002      	beq.n	800ee3a <ip4_input+0xba>
      netif = inp;
 800ee34:	683b      	ldr	r3, [r7, #0]
 800ee36:	613b      	str	r3, [r7, #16]
 800ee38:	e02a      	b.n	800ee90 <ip4_input+0x110>
    } else {
      netif = NULL;
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	613b      	str	r3, [r7, #16]
 800ee3e:	e027      	b.n	800ee90 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800ee40:	6838      	ldr	r0, [r7, #0]
 800ee42:	f7ff ff73 	bl	800ed2c <ip4_input_accept>
 800ee46:	4603      	mov	r3, r0
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d002      	beq.n	800ee52 <ip4_input+0xd2>
      netif = inp;
 800ee4c:	683b      	ldr	r3, [r7, #0]
 800ee4e:	613b      	str	r3, [r7, #16]
 800ee50:	e01e      	b.n	800ee90 <ip4_input+0x110>
    } else {
      netif = NULL;
 800ee52:	2300      	movs	r3, #0
 800ee54:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800ee56:	4b5a      	ldr	r3, [pc, #360]	; (800efc0 <ip4_input+0x240>)
 800ee58:	695b      	ldr	r3, [r3, #20]
 800ee5a:	b2db      	uxtb	r3, r3
 800ee5c:	2b7f      	cmp	r3, #127	; 0x7f
 800ee5e:	d017      	beq.n	800ee90 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800ee60:	4b58      	ldr	r3, [pc, #352]	; (800efc4 <ip4_input+0x244>)
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	613b      	str	r3, [r7, #16]
 800ee66:	e00e      	b.n	800ee86 <ip4_input+0x106>
          if (netif == inp) {
 800ee68:	693a      	ldr	r2, [r7, #16]
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	429a      	cmp	r2, r3
 800ee6e:	d006      	beq.n	800ee7e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800ee70:	6938      	ldr	r0, [r7, #16]
 800ee72:	f7ff ff5b 	bl	800ed2c <ip4_input_accept>
 800ee76:	4603      	mov	r3, r0
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d108      	bne.n	800ee8e <ip4_input+0x10e>
 800ee7c:	e000      	b.n	800ee80 <ip4_input+0x100>
            continue;
 800ee7e:	bf00      	nop
        NETIF_FOREACH(netif) {
 800ee80:	693b      	ldr	r3, [r7, #16]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	613b      	str	r3, [r7, #16]
 800ee86:	693b      	ldr	r3, [r7, #16]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d1ed      	bne.n	800ee68 <ip4_input+0xe8>
 800ee8c:	e000      	b.n	800ee90 <ip4_input+0x110>
            break;
 800ee8e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ee90:	4b4b      	ldr	r3, [pc, #300]	; (800efc0 <ip4_input+0x240>)
 800ee92:	691b      	ldr	r3, [r3, #16]
 800ee94:	6839      	ldr	r1, [r7, #0]
 800ee96:	4618      	mov	r0, r3
 800ee98:	f000 f96e 	bl	800f178 <ip4_addr_isbroadcast_u32>
 800ee9c:	4603      	mov	r3, r0
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d105      	bne.n	800eeae <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800eea2:	4b47      	ldr	r3, [pc, #284]	; (800efc0 <ip4_input+0x240>)
 800eea4:	691b      	ldr	r3, [r3, #16]
 800eea6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800eeaa:	2be0      	cmp	r3, #224	; 0xe0
 800eeac:	d104      	bne.n	800eeb8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800eeae:	6878      	ldr	r0, [r7, #4]
 800eeb0:	f7f8 f834 	bl	8006f1c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	e07e      	b.n	800efb6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800eeb8:	693b      	ldr	r3, [r7, #16]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d104      	bne.n	800eec8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800eebe:	6878      	ldr	r0, [r7, #4]
 800eec0:	f7f8 f82c 	bl	8006f1c <pbuf_free>
    return ERR_OK;
 800eec4:	2300      	movs	r3, #0
 800eec6:	e076      	b.n	800efb6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800eec8:	697b      	ldr	r3, [r7, #20]
 800eeca:	88db      	ldrh	r3, [r3, #6]
 800eecc:	b29b      	uxth	r3, r3
 800eece:	461a      	mov	r2, r3
 800eed0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800eed4:	4013      	ands	r3, r2
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d00b      	beq.n	800eef2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800eeda:	6878      	ldr	r0, [r7, #4]
 800eedc:	f000 fc92 	bl	800f804 <ip4_reass>
 800eee0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d101      	bne.n	800eeec <ip4_input+0x16c>
      return ERR_OK;
 800eee8:	2300      	movs	r3, #0
 800eeea:	e064      	b.n	800efb6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	685b      	ldr	r3, [r3, #4]
 800eef0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800eef2:	4a33      	ldr	r2, [pc, #204]	; (800efc0 <ip4_input+0x240>)
 800eef4:	693b      	ldr	r3, [r7, #16]
 800eef6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800eef8:	4a31      	ldr	r2, [pc, #196]	; (800efc0 <ip4_input+0x240>)
 800eefa:	683b      	ldr	r3, [r7, #0]
 800eefc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800eefe:	4a30      	ldr	r2, [pc, #192]	; (800efc0 <ip4_input+0x240>)
 800ef00:	697b      	ldr	r3, [r7, #20]
 800ef02:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800ef04:	697b      	ldr	r3, [r7, #20]
 800ef06:	781b      	ldrb	r3, [r3, #0]
 800ef08:	f003 030f 	and.w	r3, r3, #15
 800ef0c:	b2db      	uxtb	r3, r3
 800ef0e:	009b      	lsls	r3, r3, #2
 800ef10:	b2db      	uxtb	r3, r3
 800ef12:	b29a      	uxth	r2, r3
 800ef14:	4b2a      	ldr	r3, [pc, #168]	; (800efc0 <ip4_input+0x240>)
 800ef16:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800ef18:	89fb      	ldrh	r3, [r7, #14]
 800ef1a:	4619      	mov	r1, r3
 800ef1c:	6878      	ldr	r0, [r7, #4]
 800ef1e:	f7f7 ff77 	bl	8006e10 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800ef22:	697b      	ldr	r3, [r7, #20]
 800ef24:	7a5b      	ldrb	r3, [r3, #9]
 800ef26:	2b11      	cmp	r3, #17
 800ef28:	d006      	beq.n	800ef38 <ip4_input+0x1b8>
 800ef2a:	2b11      	cmp	r3, #17
 800ef2c:	dc13      	bgt.n	800ef56 <ip4_input+0x1d6>
 800ef2e:	2b01      	cmp	r3, #1
 800ef30:	d00c      	beq.n	800ef4c <ip4_input+0x1cc>
 800ef32:	2b06      	cmp	r3, #6
 800ef34:	d005      	beq.n	800ef42 <ip4_input+0x1c2>
 800ef36:	e00e      	b.n	800ef56 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800ef38:	6839      	ldr	r1, [r7, #0]
 800ef3a:	6878      	ldr	r0, [r7, #4]
 800ef3c:	f7fe fc68 	bl	800d810 <udp_input>
        break;
 800ef40:	e026      	b.n	800ef90 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800ef42:	6839      	ldr	r1, [r7, #0]
 800ef44:	6878      	ldr	r0, [r7, #4]
 800ef46:	f7fa f88f 	bl	8009068 <tcp_input>
        break;
 800ef4a:	e021      	b.n	800ef90 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800ef4c:	6839      	ldr	r1, [r7, #0]
 800ef4e:	6878      	ldr	r0, [r7, #4]
 800ef50:	f7ff fcee 	bl	800e930 <icmp_input>
        break;
 800ef54:	e01c      	b.n	800ef90 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ef56:	4b1a      	ldr	r3, [pc, #104]	; (800efc0 <ip4_input+0x240>)
 800ef58:	695b      	ldr	r3, [r3, #20]
 800ef5a:	6939      	ldr	r1, [r7, #16]
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	f000 f90b 	bl	800f178 <ip4_addr_isbroadcast_u32>
 800ef62:	4603      	mov	r3, r0
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d10f      	bne.n	800ef88 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ef68:	4b15      	ldr	r3, [pc, #84]	; (800efc0 <ip4_input+0x240>)
 800ef6a:	695b      	ldr	r3, [r3, #20]
 800ef6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ef70:	2be0      	cmp	r3, #224	; 0xe0
 800ef72:	d009      	beq.n	800ef88 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800ef74:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ef78:	4619      	mov	r1, r3
 800ef7a:	6878      	ldr	r0, [r7, #4]
 800ef7c:	f7f7 ffbb 	bl	8006ef6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800ef80:	2102      	movs	r1, #2
 800ef82:	6878      	ldr	r0, [r7, #4]
 800ef84:	f7ff fdd8 	bl	800eb38 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800ef88:	6878      	ldr	r0, [r7, #4]
 800ef8a:	f7f7 ffc7 	bl	8006f1c <pbuf_free>
        break;
 800ef8e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800ef90:	4b0b      	ldr	r3, [pc, #44]	; (800efc0 <ip4_input+0x240>)
 800ef92:	2200      	movs	r2, #0
 800ef94:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800ef96:	4b0a      	ldr	r3, [pc, #40]	; (800efc0 <ip4_input+0x240>)
 800ef98:	2200      	movs	r2, #0
 800ef9a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800ef9c:	4b08      	ldr	r3, [pc, #32]	; (800efc0 <ip4_input+0x240>)
 800ef9e:	2200      	movs	r2, #0
 800efa0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800efa2:	4b07      	ldr	r3, [pc, #28]	; (800efc0 <ip4_input+0x240>)
 800efa4:	2200      	movs	r2, #0
 800efa6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800efa8:	4b05      	ldr	r3, [pc, #20]	; (800efc0 <ip4_input+0x240>)
 800efaa:	2200      	movs	r2, #0
 800efac:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800efae:	4b04      	ldr	r3, [pc, #16]	; (800efc0 <ip4_input+0x240>)
 800efb0:	2200      	movs	r2, #0
 800efb2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800efb4:	2300      	movs	r3, #0
}
 800efb6:	4618      	mov	r0, r3
 800efb8:	3718      	adds	r7, #24
 800efba:	46bd      	mov	sp, r7
 800efbc:	bd80      	pop	{r7, pc}
 800efbe:	bf00      	nop
 800efc0:	200034f0 	.word	0x200034f0
 800efc4:	200065e4 	.word	0x200065e4

0800efc8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b08a      	sub	sp, #40	; 0x28
 800efcc:	af04      	add	r7, sp, #16
 800efce:	60f8      	str	r0, [r7, #12]
 800efd0:	60b9      	str	r1, [r7, #8]
 800efd2:	607a      	str	r2, [r7, #4]
 800efd4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800efd6:	68bb      	ldr	r3, [r7, #8]
 800efd8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d009      	beq.n	800eff4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800efe0:	68bb      	ldr	r3, [r7, #8]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d003      	beq.n	800efee <ip4_output_if+0x26>
 800efe6:	68bb      	ldr	r3, [r7, #8]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d102      	bne.n	800eff4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800efee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eff0:	3304      	adds	r3, #4
 800eff2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800eff4:	78fa      	ldrb	r2, [r7, #3]
 800eff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eff8:	9302      	str	r3, [sp, #8]
 800effa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800effe:	9301      	str	r3, [sp, #4]
 800f000:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f004:	9300      	str	r3, [sp, #0]
 800f006:	4613      	mov	r3, r2
 800f008:	687a      	ldr	r2, [r7, #4]
 800f00a:	6979      	ldr	r1, [r7, #20]
 800f00c:	68f8      	ldr	r0, [r7, #12]
 800f00e:	f000 f805 	bl	800f01c <ip4_output_if_src>
 800f012:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800f014:	4618      	mov	r0, r3
 800f016:	3718      	adds	r7, #24
 800f018:	46bd      	mov	sp, r7
 800f01a:	bd80      	pop	{r7, pc}

0800f01c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b088      	sub	sp, #32
 800f020:	af00      	add	r7, sp, #0
 800f022:	60f8      	str	r0, [r7, #12]
 800f024:	60b9      	str	r1, [r7, #8]
 800f026:	607a      	str	r2, [r7, #4]
 800f028:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	7b9b      	ldrb	r3, [r3, #14]
 800f02e:	2b01      	cmp	r3, #1
 800f030:	d006      	beq.n	800f040 <ip4_output_if_src+0x24>
 800f032:	4b4b      	ldr	r3, [pc, #300]	; (800f160 <ip4_output_if_src+0x144>)
 800f034:	f44f 7255 	mov.w	r2, #852	; 0x354
 800f038:	494a      	ldr	r1, [pc, #296]	; (800f164 <ip4_output_if_src+0x148>)
 800f03a:	484b      	ldr	r0, [pc, #300]	; (800f168 <ip4_output_if_src+0x14c>)
 800f03c:	f001 f852 	bl	80100e4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d060      	beq.n	800f108 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800f046:	2314      	movs	r3, #20
 800f048:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800f04a:	2114      	movs	r1, #20
 800f04c:	68f8      	ldr	r0, [r7, #12]
 800f04e:	f7f7 fecf 	bl	8006df0 <pbuf_add_header>
 800f052:	4603      	mov	r3, r0
 800f054:	2b00      	cmp	r3, #0
 800f056:	d002      	beq.n	800f05e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f058:	f06f 0301 	mvn.w	r3, #1
 800f05c:	e07c      	b.n	800f158 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	685b      	ldr	r3, [r3, #4]
 800f062:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	895b      	ldrh	r3, [r3, #10]
 800f068:	2b13      	cmp	r3, #19
 800f06a:	d806      	bhi.n	800f07a <ip4_output_if_src+0x5e>
 800f06c:	4b3c      	ldr	r3, [pc, #240]	; (800f160 <ip4_output_if_src+0x144>)
 800f06e:	f44f 7262 	mov.w	r2, #904	; 0x388
 800f072:	493e      	ldr	r1, [pc, #248]	; (800f16c <ip4_output_if_src+0x150>)
 800f074:	483c      	ldr	r0, [pc, #240]	; (800f168 <ip4_output_if_src+0x14c>)
 800f076:	f001 f835 	bl	80100e4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800f07a:	69fb      	ldr	r3, [r7, #28]
 800f07c:	78fa      	ldrb	r2, [r7, #3]
 800f07e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800f080:	69fb      	ldr	r3, [r7, #28]
 800f082:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800f086:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681a      	ldr	r2, [r3, #0]
 800f08c:	69fb      	ldr	r3, [r7, #28]
 800f08e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800f090:	8b7b      	ldrh	r3, [r7, #26]
 800f092:	089b      	lsrs	r3, r3, #2
 800f094:	b29b      	uxth	r3, r3
 800f096:	b2db      	uxtb	r3, r3
 800f098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f09c:	b2da      	uxtb	r2, r3
 800f09e:	69fb      	ldr	r3, [r7, #28]
 800f0a0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800f0a2:	69fb      	ldr	r3, [r7, #28]
 800f0a4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f0a8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	891b      	ldrh	r3, [r3, #8]
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	f7f6 fc80 	bl	80059b4 <lwip_htons>
 800f0b4:	4603      	mov	r3, r0
 800f0b6:	461a      	mov	r2, r3
 800f0b8:	69fb      	ldr	r3, [r7, #28]
 800f0ba:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800f0bc:	69fb      	ldr	r3, [r7, #28]
 800f0be:	2200      	movs	r2, #0
 800f0c0:	719a      	strb	r2, [r3, #6]
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800f0c6:	4b2a      	ldr	r3, [pc, #168]	; (800f170 <ip4_output_if_src+0x154>)
 800f0c8:	881b      	ldrh	r3, [r3, #0]
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	f7f6 fc72 	bl	80059b4 <lwip_htons>
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	461a      	mov	r2, r3
 800f0d4:	69fb      	ldr	r3, [r7, #28]
 800f0d6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800f0d8:	4b25      	ldr	r3, [pc, #148]	; (800f170 <ip4_output_if_src+0x154>)
 800f0da:	881b      	ldrh	r3, [r3, #0]
 800f0dc:	3301      	adds	r3, #1
 800f0de:	b29a      	uxth	r2, r3
 800f0e0:	4b23      	ldr	r3, [pc, #140]	; (800f170 <ip4_output_if_src+0x154>)
 800f0e2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800f0e4:	68bb      	ldr	r3, [r7, #8]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d104      	bne.n	800f0f4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800f0ea:	4b22      	ldr	r3, [pc, #136]	; (800f174 <ip4_output_if_src+0x158>)
 800f0ec:	681a      	ldr	r2, [r3, #0]
 800f0ee:	69fb      	ldr	r3, [r7, #28]
 800f0f0:	60da      	str	r2, [r3, #12]
 800f0f2:	e003      	b.n	800f0fc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800f0f4:	68bb      	ldr	r3, [r7, #8]
 800f0f6:	681a      	ldr	r2, [r3, #0]
 800f0f8:	69fb      	ldr	r3, [r7, #28]
 800f0fa:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800f0fc:	69fb      	ldr	r3, [r7, #28]
 800f0fe:	2200      	movs	r2, #0
 800f100:	729a      	strb	r2, [r3, #10]
 800f102:	2200      	movs	r2, #0
 800f104:	72da      	strb	r2, [r3, #11]
 800f106:	e00f      	b.n	800f128 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	895b      	ldrh	r3, [r3, #10]
 800f10c:	2b13      	cmp	r3, #19
 800f10e:	d802      	bhi.n	800f116 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f110:	f06f 0301 	mvn.w	r3, #1
 800f114:	e020      	b.n	800f158 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	685b      	ldr	r3, [r3, #4]
 800f11a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800f11c:	69fb      	ldr	r3, [r7, #28]
 800f11e:	691b      	ldr	r3, [r3, #16]
 800f120:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800f122:	f107 0314 	add.w	r3, r7, #20
 800f126:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800f128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f12a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d00c      	beq.n	800f14a <ip4_output_if_src+0x12e>
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	891a      	ldrh	r2, [r3, #8]
 800f134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f136:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f138:	429a      	cmp	r2, r3
 800f13a:	d906      	bls.n	800f14a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800f13c:	687a      	ldr	r2, [r7, #4]
 800f13e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f140:	68f8      	ldr	r0, [r7, #12]
 800f142:	f000 fd4d 	bl	800fbe0 <ip4_frag>
 800f146:	4603      	mov	r3, r0
 800f148:	e006      	b.n	800f158 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800f14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f14c:	695b      	ldr	r3, [r3, #20]
 800f14e:	687a      	ldr	r2, [r7, #4]
 800f150:	68f9      	ldr	r1, [r7, #12]
 800f152:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f154:	4798      	blx	r3
 800f156:	4603      	mov	r3, r0
}
 800f158:	4618      	mov	r0, r3
 800f15a:	3720      	adds	r7, #32
 800f15c:	46bd      	mov	sp, r7
 800f15e:	bd80      	pop	{r7, pc}
 800f160:	08013cb8 	.word	0x08013cb8
 800f164:	08013cec 	.word	0x08013cec
 800f168:	08013cf8 	.word	0x08013cf8
 800f16c:	08013d20 	.word	0x08013d20
 800f170:	20000202 	.word	0x20000202
 800f174:	080140f4 	.word	0x080140f4

0800f178 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800f178:	b480      	push	{r7}
 800f17a:	b085      	sub	sp, #20
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
 800f180:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f18c:	d002      	beq.n	800f194 <ip4_addr_isbroadcast_u32+0x1c>
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d101      	bne.n	800f198 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800f194:	2301      	movs	r3, #1
 800f196:	e02a      	b.n	800f1ee <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f19e:	f003 0302 	and.w	r3, r3, #2
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d101      	bne.n	800f1aa <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	e021      	b.n	800f1ee <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	3304      	adds	r3, #4
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	687a      	ldr	r2, [r7, #4]
 800f1b2:	429a      	cmp	r2, r3
 800f1b4:	d101      	bne.n	800f1ba <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	e019      	b.n	800f1ee <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800f1ba:	68fa      	ldr	r2, [r7, #12]
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	3304      	adds	r3, #4
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	405a      	eors	r2, r3
 800f1c4:	683b      	ldr	r3, [r7, #0]
 800f1c6:	3308      	adds	r3, #8
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	4013      	ands	r3, r2
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d10d      	bne.n	800f1ec <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	3308      	adds	r3, #8
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	43da      	mvns	r2, r3
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800f1dc:	683b      	ldr	r3, [r7, #0]
 800f1de:	3308      	adds	r3, #8
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f1e4:	429a      	cmp	r2, r3
 800f1e6:	d101      	bne.n	800f1ec <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800f1e8:	2301      	movs	r3, #1
 800f1ea:	e000      	b.n	800f1ee <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800f1ec:	2300      	movs	r3, #0
  }
}
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	3714      	adds	r7, #20
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f8:	4770      	bx	lr
	...

0800f1fc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b084      	sub	sp, #16
 800f200:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800f202:	2300      	movs	r3, #0
 800f204:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800f206:	4b12      	ldr	r3, [pc, #72]	; (800f250 <ip_reass_tmr+0x54>)
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800f20c:	e018      	b.n	800f240 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	7fdb      	ldrb	r3, [r3, #31]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d00b      	beq.n	800f22e <ip_reass_tmr+0x32>
      r->timer--;
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	7fdb      	ldrb	r3, [r3, #31]
 800f21a:	3b01      	subs	r3, #1
 800f21c:	b2da      	uxtb	r2, r3
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	60fb      	str	r3, [r7, #12]
 800f22c:	e008      	b.n	800f240 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800f238:	68b9      	ldr	r1, [r7, #8]
 800f23a:	6878      	ldr	r0, [r7, #4]
 800f23c:	f000 f80a 	bl	800f254 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d1e3      	bne.n	800f20e <ip_reass_tmr+0x12>
    }
  }
}
 800f246:	bf00      	nop
 800f248:	bf00      	nop
 800f24a:	3710      	adds	r7, #16
 800f24c:	46bd      	mov	sp, r7
 800f24e:	bd80      	pop	{r7, pc}
 800f250:	20000204 	.word	0x20000204

0800f254 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b088      	sub	sp, #32
 800f258:	af00      	add	r7, sp, #0
 800f25a:	6078      	str	r0, [r7, #4]
 800f25c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800f25e:	2300      	movs	r3, #0
 800f260:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800f262:	683a      	ldr	r2, [r7, #0]
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	429a      	cmp	r2, r3
 800f268:	d105      	bne.n	800f276 <ip_reass_free_complete_datagram+0x22>
 800f26a:	4b45      	ldr	r3, [pc, #276]	; (800f380 <ip_reass_free_complete_datagram+0x12c>)
 800f26c:	22ab      	movs	r2, #171	; 0xab
 800f26e:	4945      	ldr	r1, [pc, #276]	; (800f384 <ip_reass_free_complete_datagram+0x130>)
 800f270:	4845      	ldr	r0, [pc, #276]	; (800f388 <ip_reass_free_complete_datagram+0x134>)
 800f272:	f000 ff37 	bl	80100e4 <iprintf>
  if (prev != NULL) {
 800f276:	683b      	ldr	r3, [r7, #0]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d00a      	beq.n	800f292 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800f27c:	683b      	ldr	r3, [r7, #0]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	687a      	ldr	r2, [r7, #4]
 800f282:	429a      	cmp	r2, r3
 800f284:	d005      	beq.n	800f292 <ip_reass_free_complete_datagram+0x3e>
 800f286:	4b3e      	ldr	r3, [pc, #248]	; (800f380 <ip_reass_free_complete_datagram+0x12c>)
 800f288:	22ad      	movs	r2, #173	; 0xad
 800f28a:	4940      	ldr	r1, [pc, #256]	; (800f38c <ip_reass_free_complete_datagram+0x138>)
 800f28c:	483e      	ldr	r0, [pc, #248]	; (800f388 <ip_reass_free_complete_datagram+0x134>)
 800f28e:	f000 ff29 	bl	80100e4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	685b      	ldr	r3, [r3, #4]
 800f296:	685b      	ldr	r3, [r3, #4]
 800f298:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800f29a:	697b      	ldr	r3, [r7, #20]
 800f29c:	889b      	ldrh	r3, [r3, #4]
 800f29e:	b29b      	uxth	r3, r3
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d12a      	bne.n	800f2fa <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	685b      	ldr	r3, [r3, #4]
 800f2a8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800f2aa:	697b      	ldr	r3, [r7, #20]
 800f2ac:	681a      	ldr	r2, [r3, #0]
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800f2b2:	69bb      	ldr	r3, [r7, #24]
 800f2b4:	6858      	ldr	r0, [r3, #4]
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	3308      	adds	r3, #8
 800f2ba:	2214      	movs	r2, #20
 800f2bc:	4619      	mov	r1, r3
 800f2be:	f000 fee1 	bl	8010084 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800f2c2:	2101      	movs	r1, #1
 800f2c4:	69b8      	ldr	r0, [r7, #24]
 800f2c6:	f7ff fc47 	bl	800eb58 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800f2ca:	69b8      	ldr	r0, [r7, #24]
 800f2cc:	f7f7 feae 	bl	800702c <pbuf_clen>
 800f2d0:	4603      	mov	r3, r0
 800f2d2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f2d4:	8bfa      	ldrh	r2, [r7, #30]
 800f2d6:	8a7b      	ldrh	r3, [r7, #18]
 800f2d8:	4413      	add	r3, r2
 800f2da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f2de:	db05      	blt.n	800f2ec <ip_reass_free_complete_datagram+0x98>
 800f2e0:	4b27      	ldr	r3, [pc, #156]	; (800f380 <ip_reass_free_complete_datagram+0x12c>)
 800f2e2:	22bc      	movs	r2, #188	; 0xbc
 800f2e4:	492a      	ldr	r1, [pc, #168]	; (800f390 <ip_reass_free_complete_datagram+0x13c>)
 800f2e6:	4828      	ldr	r0, [pc, #160]	; (800f388 <ip_reass_free_complete_datagram+0x134>)
 800f2e8:	f000 fefc 	bl	80100e4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f2ec:	8bfa      	ldrh	r2, [r7, #30]
 800f2ee:	8a7b      	ldrh	r3, [r7, #18]
 800f2f0:	4413      	add	r3, r2
 800f2f2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800f2f4:	69b8      	ldr	r0, [r7, #24]
 800f2f6:	f7f7 fe11 	bl	8006f1c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	685b      	ldr	r3, [r3, #4]
 800f2fe:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800f300:	e01f      	b.n	800f342 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800f302:	69bb      	ldr	r3, [r7, #24]
 800f304:	685b      	ldr	r3, [r3, #4]
 800f306:	617b      	str	r3, [r7, #20]
    pcur = p;
 800f308:	69bb      	ldr	r3, [r7, #24]
 800f30a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800f30c:	697b      	ldr	r3, [r7, #20]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800f312:	68f8      	ldr	r0, [r7, #12]
 800f314:	f7f7 fe8a 	bl	800702c <pbuf_clen>
 800f318:	4603      	mov	r3, r0
 800f31a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f31c:	8bfa      	ldrh	r2, [r7, #30]
 800f31e:	8a7b      	ldrh	r3, [r7, #18]
 800f320:	4413      	add	r3, r2
 800f322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f326:	db05      	blt.n	800f334 <ip_reass_free_complete_datagram+0xe0>
 800f328:	4b15      	ldr	r3, [pc, #84]	; (800f380 <ip_reass_free_complete_datagram+0x12c>)
 800f32a:	22cc      	movs	r2, #204	; 0xcc
 800f32c:	4918      	ldr	r1, [pc, #96]	; (800f390 <ip_reass_free_complete_datagram+0x13c>)
 800f32e:	4816      	ldr	r0, [pc, #88]	; (800f388 <ip_reass_free_complete_datagram+0x134>)
 800f330:	f000 fed8 	bl	80100e4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f334:	8bfa      	ldrh	r2, [r7, #30]
 800f336:	8a7b      	ldrh	r3, [r7, #18]
 800f338:	4413      	add	r3, r2
 800f33a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800f33c:	68f8      	ldr	r0, [r7, #12]
 800f33e:	f7f7 fded 	bl	8006f1c <pbuf_free>
  while (p != NULL) {
 800f342:	69bb      	ldr	r3, [r7, #24]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d1dc      	bne.n	800f302 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800f348:	6839      	ldr	r1, [r7, #0]
 800f34a:	6878      	ldr	r0, [r7, #4]
 800f34c:	f000 f8c2 	bl	800f4d4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800f350:	4b10      	ldr	r3, [pc, #64]	; (800f394 <ip_reass_free_complete_datagram+0x140>)
 800f352:	881b      	ldrh	r3, [r3, #0]
 800f354:	8bfa      	ldrh	r2, [r7, #30]
 800f356:	429a      	cmp	r2, r3
 800f358:	d905      	bls.n	800f366 <ip_reass_free_complete_datagram+0x112>
 800f35a:	4b09      	ldr	r3, [pc, #36]	; (800f380 <ip_reass_free_complete_datagram+0x12c>)
 800f35c:	22d2      	movs	r2, #210	; 0xd2
 800f35e:	490e      	ldr	r1, [pc, #56]	; (800f398 <ip_reass_free_complete_datagram+0x144>)
 800f360:	4809      	ldr	r0, [pc, #36]	; (800f388 <ip_reass_free_complete_datagram+0x134>)
 800f362:	f000 febf 	bl	80100e4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800f366:	4b0b      	ldr	r3, [pc, #44]	; (800f394 <ip_reass_free_complete_datagram+0x140>)
 800f368:	881a      	ldrh	r2, [r3, #0]
 800f36a:	8bfb      	ldrh	r3, [r7, #30]
 800f36c:	1ad3      	subs	r3, r2, r3
 800f36e:	b29a      	uxth	r2, r3
 800f370:	4b08      	ldr	r3, [pc, #32]	; (800f394 <ip_reass_free_complete_datagram+0x140>)
 800f372:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800f374:	8bfb      	ldrh	r3, [r7, #30]
}
 800f376:	4618      	mov	r0, r3
 800f378:	3720      	adds	r7, #32
 800f37a:	46bd      	mov	sp, r7
 800f37c:	bd80      	pop	{r7, pc}
 800f37e:	bf00      	nop
 800f380:	08013d50 	.word	0x08013d50
 800f384:	08013d8c 	.word	0x08013d8c
 800f388:	08013d98 	.word	0x08013d98
 800f38c:	08013dc0 	.word	0x08013dc0
 800f390:	08013dd4 	.word	0x08013dd4
 800f394:	20000208 	.word	0x20000208
 800f398:	08013df4 	.word	0x08013df4

0800f39c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b08a      	sub	sp, #40	; 0x28
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
 800f3a4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800f3ba:	4b28      	ldr	r3, [pc, #160]	; (800f45c <ip_reass_remove_oldest_datagram+0xc0>)
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f3c0:	e030      	b.n	800f424 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800f3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3c4:	695a      	ldr	r2, [r3, #20]
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	68db      	ldr	r3, [r3, #12]
 800f3ca:	429a      	cmp	r2, r3
 800f3cc:	d10c      	bne.n	800f3e8 <ip_reass_remove_oldest_datagram+0x4c>
 800f3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3d0:	699a      	ldr	r2, [r3, #24]
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	691b      	ldr	r3, [r3, #16]
 800f3d6:	429a      	cmp	r2, r3
 800f3d8:	d106      	bne.n	800f3e8 <ip_reass_remove_oldest_datagram+0x4c>
 800f3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3dc:	899a      	ldrh	r2, [r3, #12]
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	889b      	ldrh	r3, [r3, #4]
 800f3e2:	b29b      	uxth	r3, r3
 800f3e4:	429a      	cmp	r2, r3
 800f3e6:	d014      	beq.n	800f412 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800f3e8:	693b      	ldr	r3, [r7, #16]
 800f3ea:	3301      	adds	r3, #1
 800f3ec:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800f3ee:	6a3b      	ldr	r3, [r7, #32]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d104      	bne.n	800f3fe <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800f3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3f6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f3f8:	69fb      	ldr	r3, [r7, #28]
 800f3fa:	61bb      	str	r3, [r7, #24]
 800f3fc:	e009      	b.n	800f412 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800f3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f400:	7fda      	ldrb	r2, [r3, #31]
 800f402:	6a3b      	ldr	r3, [r7, #32]
 800f404:	7fdb      	ldrb	r3, [r3, #31]
 800f406:	429a      	cmp	r2, r3
 800f408:	d803      	bhi.n	800f412 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800f40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f40c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f40e:	69fb      	ldr	r3, [r7, #28]
 800f410:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800f412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d001      	beq.n	800f41e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800f41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f41c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800f41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f426:	2b00      	cmp	r3, #0
 800f428:	d1cb      	bne.n	800f3c2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800f42a:	6a3b      	ldr	r3, [r7, #32]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d008      	beq.n	800f442 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800f430:	69b9      	ldr	r1, [r7, #24]
 800f432:	6a38      	ldr	r0, [r7, #32]
 800f434:	f7ff ff0e 	bl	800f254 <ip_reass_free_complete_datagram>
 800f438:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800f43a:	697a      	ldr	r2, [r7, #20]
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	4413      	add	r3, r2
 800f440:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800f442:	697a      	ldr	r2, [r7, #20]
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	429a      	cmp	r2, r3
 800f448:	da02      	bge.n	800f450 <ip_reass_remove_oldest_datagram+0xb4>
 800f44a:	693b      	ldr	r3, [r7, #16]
 800f44c:	2b01      	cmp	r3, #1
 800f44e:	dcac      	bgt.n	800f3aa <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800f450:	697b      	ldr	r3, [r7, #20]
}
 800f452:	4618      	mov	r0, r3
 800f454:	3728      	adds	r7, #40	; 0x28
 800f456:	46bd      	mov	sp, r7
 800f458:	bd80      	pop	{r7, pc}
 800f45a:	bf00      	nop
 800f45c:	20000204 	.word	0x20000204

0800f460 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800f460:	b580      	push	{r7, lr}
 800f462:	b084      	sub	sp, #16
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]
 800f468:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f46a:	2004      	movs	r0, #4
 800f46c:	f7f6 fef8 	bl	8006260 <memp_malloc>
 800f470:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d110      	bne.n	800f49a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800f478:	6839      	ldr	r1, [r7, #0]
 800f47a:	6878      	ldr	r0, [r7, #4]
 800f47c:	f7ff ff8e 	bl	800f39c <ip_reass_remove_oldest_datagram>
 800f480:	4602      	mov	r2, r0
 800f482:	683b      	ldr	r3, [r7, #0]
 800f484:	4293      	cmp	r3, r2
 800f486:	dc03      	bgt.n	800f490 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f488:	2004      	movs	r0, #4
 800f48a:	f7f6 fee9 	bl	8006260 <memp_malloc>
 800f48e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d101      	bne.n	800f49a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800f496:	2300      	movs	r3, #0
 800f498:	e016      	b.n	800f4c8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800f49a:	2220      	movs	r2, #32
 800f49c:	2100      	movs	r1, #0
 800f49e:	68f8      	ldr	r0, [r7, #12]
 800f4a0:	f000 fe18 	bl	80100d4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	220f      	movs	r2, #15
 800f4a8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800f4aa:	4b09      	ldr	r3, [pc, #36]	; (800f4d0 <ip_reass_enqueue_new_datagram+0x70>)
 800f4ac:	681a      	ldr	r2, [r3, #0]
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800f4b2:	4a07      	ldr	r2, [pc, #28]	; (800f4d0 <ip_reass_enqueue_new_datagram+0x70>)
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	3308      	adds	r3, #8
 800f4bc:	2214      	movs	r2, #20
 800f4be:	6879      	ldr	r1, [r7, #4]
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	f000 fddf 	bl	8010084 <memcpy>
  return ipr;
 800f4c6:	68fb      	ldr	r3, [r7, #12]
}
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	3710      	adds	r7, #16
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	bd80      	pop	{r7, pc}
 800f4d0:	20000204 	.word	0x20000204

0800f4d4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b082      	sub	sp, #8
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
 800f4dc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800f4de:	4b10      	ldr	r3, [pc, #64]	; (800f520 <ip_reass_dequeue_datagram+0x4c>)
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	687a      	ldr	r2, [r7, #4]
 800f4e4:	429a      	cmp	r2, r3
 800f4e6:	d104      	bne.n	800f4f2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	4a0c      	ldr	r2, [pc, #48]	; (800f520 <ip_reass_dequeue_datagram+0x4c>)
 800f4ee:	6013      	str	r3, [r2, #0]
 800f4f0:	e00d      	b.n	800f50e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d106      	bne.n	800f506 <ip_reass_dequeue_datagram+0x32>
 800f4f8:	4b0a      	ldr	r3, [pc, #40]	; (800f524 <ip_reass_dequeue_datagram+0x50>)
 800f4fa:	f240 1245 	movw	r2, #325	; 0x145
 800f4fe:	490a      	ldr	r1, [pc, #40]	; (800f528 <ip_reass_dequeue_datagram+0x54>)
 800f500:	480a      	ldr	r0, [pc, #40]	; (800f52c <ip_reass_dequeue_datagram+0x58>)
 800f502:	f000 fdef 	bl	80100e4 <iprintf>
    prev->next = ipr->next;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	681a      	ldr	r2, [r3, #0]
 800f50a:	683b      	ldr	r3, [r7, #0]
 800f50c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800f50e:	6879      	ldr	r1, [r7, #4]
 800f510:	2004      	movs	r0, #4
 800f512:	f7f6 fef1 	bl	80062f8 <memp_free>
}
 800f516:	bf00      	nop
 800f518:	3708      	adds	r7, #8
 800f51a:	46bd      	mov	sp, r7
 800f51c:	bd80      	pop	{r7, pc}
 800f51e:	bf00      	nop
 800f520:	20000204 	.word	0x20000204
 800f524:	08013d50 	.word	0x08013d50
 800f528:	08013e18 	.word	0x08013e18
 800f52c:	08013d98 	.word	0x08013d98

0800f530 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800f530:	b580      	push	{r7, lr}
 800f532:	b08c      	sub	sp, #48	; 0x30
 800f534:	af00      	add	r7, sp, #0
 800f536:	60f8      	str	r0, [r7, #12]
 800f538:	60b9      	str	r1, [r7, #8]
 800f53a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800f53c:	2300      	movs	r3, #0
 800f53e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800f540:	2301      	movs	r3, #1
 800f542:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800f544:	68bb      	ldr	r3, [r7, #8]
 800f546:	685b      	ldr	r3, [r3, #4]
 800f548:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f54a:	69fb      	ldr	r3, [r7, #28]
 800f54c:	885b      	ldrh	r3, [r3, #2]
 800f54e:	b29b      	uxth	r3, r3
 800f550:	4618      	mov	r0, r3
 800f552:	f7f6 fa2f 	bl	80059b4 <lwip_htons>
 800f556:	4603      	mov	r3, r0
 800f558:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800f55a:	69fb      	ldr	r3, [r7, #28]
 800f55c:	781b      	ldrb	r3, [r3, #0]
 800f55e:	f003 030f 	and.w	r3, r3, #15
 800f562:	b2db      	uxtb	r3, r3
 800f564:	009b      	lsls	r3, r3, #2
 800f566:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800f568:	7e7b      	ldrb	r3, [r7, #25]
 800f56a:	b29b      	uxth	r3, r3
 800f56c:	8b7a      	ldrh	r2, [r7, #26]
 800f56e:	429a      	cmp	r2, r3
 800f570:	d202      	bcs.n	800f578 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f572:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f576:	e135      	b.n	800f7e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800f578:	7e7b      	ldrb	r3, [r7, #25]
 800f57a:	b29b      	uxth	r3, r3
 800f57c:	8b7a      	ldrh	r2, [r7, #26]
 800f57e:	1ad3      	subs	r3, r2, r3
 800f580:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800f582:	69fb      	ldr	r3, [r7, #28]
 800f584:	88db      	ldrh	r3, [r3, #6]
 800f586:	b29b      	uxth	r3, r3
 800f588:	4618      	mov	r0, r3
 800f58a:	f7f6 fa13 	bl	80059b4 <lwip_htons>
 800f58e:	4603      	mov	r3, r0
 800f590:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f594:	b29b      	uxth	r3, r3
 800f596:	00db      	lsls	r3, r3, #3
 800f598:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800f59a:	68bb      	ldr	r3, [r7, #8]
 800f59c:	685b      	ldr	r3, [r3, #4]
 800f59e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800f5a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	701a      	strb	r2, [r3, #0]
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	705a      	strb	r2, [r3, #1]
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	709a      	strb	r2, [r3, #2]
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800f5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5b4:	8afa      	ldrh	r2, [r7, #22]
 800f5b6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800f5b8:	8afa      	ldrh	r2, [r7, #22]
 800f5ba:	8b7b      	ldrh	r3, [r7, #26]
 800f5bc:	4413      	add	r3, r2
 800f5be:	b29a      	uxth	r2, r3
 800f5c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5c2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800f5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5c6:	88db      	ldrh	r3, [r3, #6]
 800f5c8:	b29b      	uxth	r3, r3
 800f5ca:	8afa      	ldrh	r2, [r7, #22]
 800f5cc:	429a      	cmp	r2, r3
 800f5ce:	d902      	bls.n	800f5d6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f5d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f5d4:	e106      	b.n	800f7e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	685b      	ldr	r3, [r3, #4]
 800f5da:	627b      	str	r3, [r7, #36]	; 0x24
 800f5dc:	e068      	b.n	800f6b0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800f5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5e0:	685b      	ldr	r3, [r3, #4]
 800f5e2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800f5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5e6:	889b      	ldrh	r3, [r3, #4]
 800f5e8:	b29a      	uxth	r2, r3
 800f5ea:	693b      	ldr	r3, [r7, #16]
 800f5ec:	889b      	ldrh	r3, [r3, #4]
 800f5ee:	b29b      	uxth	r3, r3
 800f5f0:	429a      	cmp	r2, r3
 800f5f2:	d235      	bcs.n	800f660 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800f5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5f8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800f5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d020      	beq.n	800f642 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800f600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f602:	889b      	ldrh	r3, [r3, #4]
 800f604:	b29a      	uxth	r2, r3
 800f606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f608:	88db      	ldrh	r3, [r3, #6]
 800f60a:	b29b      	uxth	r3, r3
 800f60c:	429a      	cmp	r2, r3
 800f60e:	d307      	bcc.n	800f620 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800f610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f612:	88db      	ldrh	r3, [r3, #6]
 800f614:	b29a      	uxth	r2, r3
 800f616:	693b      	ldr	r3, [r7, #16]
 800f618:	889b      	ldrh	r3, [r3, #4]
 800f61a:	b29b      	uxth	r3, r3
 800f61c:	429a      	cmp	r2, r3
 800f61e:	d902      	bls.n	800f626 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f620:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f624:	e0de      	b.n	800f7e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800f626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f628:	68ba      	ldr	r2, [r7, #8]
 800f62a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800f62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f62e:	88db      	ldrh	r3, [r3, #6]
 800f630:	b29a      	uxth	r2, r3
 800f632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f634:	889b      	ldrh	r3, [r3, #4]
 800f636:	b29b      	uxth	r3, r3
 800f638:	429a      	cmp	r2, r3
 800f63a:	d03d      	beq.n	800f6b8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f63c:	2300      	movs	r3, #0
 800f63e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800f640:	e03a      	b.n	800f6b8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800f642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f644:	88db      	ldrh	r3, [r3, #6]
 800f646:	b29a      	uxth	r2, r3
 800f648:	693b      	ldr	r3, [r7, #16]
 800f64a:	889b      	ldrh	r3, [r3, #4]
 800f64c:	b29b      	uxth	r3, r3
 800f64e:	429a      	cmp	r2, r3
 800f650:	d902      	bls.n	800f658 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f652:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f656:	e0c5      	b.n	800f7e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	68ba      	ldr	r2, [r7, #8]
 800f65c:	605a      	str	r2, [r3, #4]
      break;
 800f65e:	e02b      	b.n	800f6b8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800f660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f662:	889b      	ldrh	r3, [r3, #4]
 800f664:	b29a      	uxth	r2, r3
 800f666:	693b      	ldr	r3, [r7, #16]
 800f668:	889b      	ldrh	r3, [r3, #4]
 800f66a:	b29b      	uxth	r3, r3
 800f66c:	429a      	cmp	r2, r3
 800f66e:	d102      	bne.n	800f676 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f670:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f674:	e0b6      	b.n	800f7e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800f676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f678:	889b      	ldrh	r3, [r3, #4]
 800f67a:	b29a      	uxth	r2, r3
 800f67c:	693b      	ldr	r3, [r7, #16]
 800f67e:	88db      	ldrh	r3, [r3, #6]
 800f680:	b29b      	uxth	r3, r3
 800f682:	429a      	cmp	r2, r3
 800f684:	d202      	bcs.n	800f68c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f686:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f68a:	e0ab      	b.n	800f7e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800f68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d009      	beq.n	800f6a6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800f692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f694:	88db      	ldrh	r3, [r3, #6]
 800f696:	b29a      	uxth	r2, r3
 800f698:	693b      	ldr	r3, [r7, #16]
 800f69a:	889b      	ldrh	r3, [r3, #4]
 800f69c:	b29b      	uxth	r3, r3
 800f69e:	429a      	cmp	r2, r3
 800f6a0:	d001      	beq.n	800f6a6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800f6a6:	693b      	ldr	r3, [r7, #16]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800f6ac:	693b      	ldr	r3, [r7, #16]
 800f6ae:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800f6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d193      	bne.n	800f5de <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800f6b6:	e000      	b.n	800f6ba <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800f6b8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800f6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d12d      	bne.n	800f71c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800f6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d01c      	beq.n	800f700 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800f6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6c8:	88db      	ldrh	r3, [r3, #6]
 800f6ca:	b29a      	uxth	r2, r3
 800f6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ce:	889b      	ldrh	r3, [r3, #4]
 800f6d0:	b29b      	uxth	r3, r3
 800f6d2:	429a      	cmp	r2, r3
 800f6d4:	d906      	bls.n	800f6e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800f6d6:	4b45      	ldr	r3, [pc, #276]	; (800f7ec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f6d8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800f6dc:	4944      	ldr	r1, [pc, #272]	; (800f7f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f6de:	4845      	ldr	r0, [pc, #276]	; (800f7f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f6e0:	f000 fd00 	bl	80100e4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800f6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6e6:	68ba      	ldr	r2, [r7, #8]
 800f6e8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800f6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6ec:	88db      	ldrh	r3, [r3, #6]
 800f6ee:	b29a      	uxth	r2, r3
 800f6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6f2:	889b      	ldrh	r3, [r3, #4]
 800f6f4:	b29b      	uxth	r3, r3
 800f6f6:	429a      	cmp	r2, r3
 800f6f8:	d010      	beq.n	800f71c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	623b      	str	r3, [r7, #32]
 800f6fe:	e00d      	b.n	800f71c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	685b      	ldr	r3, [r3, #4]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d006      	beq.n	800f716 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800f708:	4b38      	ldr	r3, [pc, #224]	; (800f7ec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f70a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800f70e:	493a      	ldr	r1, [pc, #232]	; (800f7f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800f710:	4838      	ldr	r0, [pc, #224]	; (800f7f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f712:	f000 fce7 	bl	80100e4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	68ba      	ldr	r2, [r7, #8]
 800f71a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d105      	bne.n	800f72e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	7f9b      	ldrb	r3, [r3, #30]
 800f726:	f003 0301 	and.w	r3, r3, #1
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d059      	beq.n	800f7e2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800f72e:	6a3b      	ldr	r3, [r7, #32]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d04f      	beq.n	800f7d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	685b      	ldr	r3, [r3, #4]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d006      	beq.n	800f74a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	685b      	ldr	r3, [r3, #4]
 800f740:	685b      	ldr	r3, [r3, #4]
 800f742:	889b      	ldrh	r3, [r3, #4]
 800f744:	b29b      	uxth	r3, r3
 800f746:	2b00      	cmp	r3, #0
 800f748:	d002      	beq.n	800f750 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800f74a:	2300      	movs	r3, #0
 800f74c:	623b      	str	r3, [r7, #32]
 800f74e:	e041      	b.n	800f7d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800f750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f752:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800f754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f75a:	e012      	b.n	800f782 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800f75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f75e:	685b      	ldr	r3, [r3, #4]
 800f760:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800f762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f764:	88db      	ldrh	r3, [r3, #6]
 800f766:	b29a      	uxth	r2, r3
 800f768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f76a:	889b      	ldrh	r3, [r3, #4]
 800f76c:	b29b      	uxth	r3, r3
 800f76e:	429a      	cmp	r2, r3
 800f770:	d002      	beq.n	800f778 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800f772:	2300      	movs	r3, #0
 800f774:	623b      	str	r3, [r7, #32]
            break;
 800f776:	e007      	b.n	800f788 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800f778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f77a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800f77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f784:	2b00      	cmp	r3, #0
 800f786:	d1e9      	bne.n	800f75c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800f788:	6a3b      	ldr	r3, [r7, #32]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d022      	beq.n	800f7d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	685b      	ldr	r3, [r3, #4]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d106      	bne.n	800f7a4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800f796:	4b15      	ldr	r3, [pc, #84]	; (800f7ec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f798:	f240 12df 	movw	r2, #479	; 0x1df
 800f79c:	4917      	ldr	r1, [pc, #92]	; (800f7fc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f79e:	4815      	ldr	r0, [pc, #84]	; (800f7f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f7a0:	f000 fca0 	bl	80100e4 <iprintf>
          LWIP_ASSERT("sanity check",
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	685b      	ldr	r3, [r3, #4]
 800f7a8:	685b      	ldr	r3, [r3, #4]
 800f7aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f7ac:	429a      	cmp	r2, r3
 800f7ae:	d106      	bne.n	800f7be <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800f7b0:	4b0e      	ldr	r3, [pc, #56]	; (800f7ec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f7b2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800f7b6:	4911      	ldr	r1, [pc, #68]	; (800f7fc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f7b8:	480e      	ldr	r0, [pc, #56]	; (800f7f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f7ba:	f000 fc93 	bl	80100e4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800f7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d006      	beq.n	800f7d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800f7c6:	4b09      	ldr	r3, [pc, #36]	; (800f7ec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f7c8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800f7cc:	490c      	ldr	r1, [pc, #48]	; (800f800 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800f7ce:	4809      	ldr	r0, [pc, #36]	; (800f7f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f7d0:	f000 fc88 	bl	80100e4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800f7d4:	6a3b      	ldr	r3, [r7, #32]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	bf14      	ite	ne
 800f7da:	2301      	movne	r3, #1
 800f7dc:	2300      	moveq	r3, #0
 800f7de:	b2db      	uxtb	r3, r3
 800f7e0:	e000      	b.n	800f7e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800f7e2:	2300      	movs	r3, #0
}
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	3730      	adds	r7, #48	; 0x30
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	bd80      	pop	{r7, pc}
 800f7ec:	08013d50 	.word	0x08013d50
 800f7f0:	08013e34 	.word	0x08013e34
 800f7f4:	08013d98 	.word	0x08013d98
 800f7f8:	08013e54 	.word	0x08013e54
 800f7fc:	08013e8c 	.word	0x08013e8c
 800f800:	08013e9c 	.word	0x08013e9c

0800f804 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800f804:	b580      	push	{r7, lr}
 800f806:	b08e      	sub	sp, #56	; 0x38
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	685b      	ldr	r3, [r3, #4]
 800f810:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800f812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f814:	781b      	ldrb	r3, [r3, #0]
 800f816:	f003 030f 	and.w	r3, r3, #15
 800f81a:	b2db      	uxtb	r3, r3
 800f81c:	009b      	lsls	r3, r3, #2
 800f81e:	b2db      	uxtb	r3, r3
 800f820:	2b14      	cmp	r3, #20
 800f822:	f040 8167 	bne.w	800faf4 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800f826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f828:	88db      	ldrh	r3, [r3, #6]
 800f82a:	b29b      	uxth	r3, r3
 800f82c:	4618      	mov	r0, r3
 800f82e:	f7f6 f8c1 	bl	80059b4 <lwip_htons>
 800f832:	4603      	mov	r3, r0
 800f834:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f838:	b29b      	uxth	r3, r3
 800f83a:	00db      	lsls	r3, r3, #3
 800f83c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f840:	885b      	ldrh	r3, [r3, #2]
 800f842:	b29b      	uxth	r3, r3
 800f844:	4618      	mov	r0, r3
 800f846:	f7f6 f8b5 	bl	80059b4 <lwip_htons>
 800f84a:	4603      	mov	r3, r0
 800f84c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800f84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f850:	781b      	ldrb	r3, [r3, #0]
 800f852:	f003 030f 	and.w	r3, r3, #15
 800f856:	b2db      	uxtb	r3, r3
 800f858:	009b      	lsls	r3, r3, #2
 800f85a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800f85e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f862:	b29b      	uxth	r3, r3
 800f864:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f866:	429a      	cmp	r2, r3
 800f868:	f0c0 8146 	bcc.w	800faf8 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800f86c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f870:	b29b      	uxth	r3, r3
 800f872:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f874:	1ad3      	subs	r3, r2, r3
 800f876:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800f878:	6878      	ldr	r0, [r7, #4]
 800f87a:	f7f7 fbd7 	bl	800702c <pbuf_clen>
 800f87e:	4603      	mov	r3, r0
 800f880:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f882:	4b9f      	ldr	r3, [pc, #636]	; (800fb00 <ip4_reass+0x2fc>)
 800f884:	881b      	ldrh	r3, [r3, #0]
 800f886:	461a      	mov	r2, r3
 800f888:	8c3b      	ldrh	r3, [r7, #32]
 800f88a:	4413      	add	r3, r2
 800f88c:	2b0a      	cmp	r3, #10
 800f88e:	dd10      	ble.n	800f8b2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f890:	8c3b      	ldrh	r3, [r7, #32]
 800f892:	4619      	mov	r1, r3
 800f894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f896:	f7ff fd81 	bl	800f39c <ip_reass_remove_oldest_datagram>
 800f89a:	4603      	mov	r3, r0
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	f000 812d 	beq.w	800fafc <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800f8a2:	4b97      	ldr	r3, [pc, #604]	; (800fb00 <ip4_reass+0x2fc>)
 800f8a4:	881b      	ldrh	r3, [r3, #0]
 800f8a6:	461a      	mov	r2, r3
 800f8a8:	8c3b      	ldrh	r3, [r7, #32]
 800f8aa:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f8ac:	2b0a      	cmp	r3, #10
 800f8ae:	f300 8125 	bgt.w	800fafc <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f8b2:	4b94      	ldr	r3, [pc, #592]	; (800fb04 <ip4_reass+0x300>)
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	633b      	str	r3, [r7, #48]	; 0x30
 800f8b8:	e015      	b.n	800f8e6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800f8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8bc:	695a      	ldr	r2, [r3, #20]
 800f8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8c0:	68db      	ldr	r3, [r3, #12]
 800f8c2:	429a      	cmp	r2, r3
 800f8c4:	d10c      	bne.n	800f8e0 <ip4_reass+0xdc>
 800f8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8c8:	699a      	ldr	r2, [r3, #24]
 800f8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8cc:	691b      	ldr	r3, [r3, #16]
 800f8ce:	429a      	cmp	r2, r3
 800f8d0:	d106      	bne.n	800f8e0 <ip4_reass+0xdc>
 800f8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8d4:	899a      	ldrh	r2, [r3, #12]
 800f8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8d8:	889b      	ldrh	r3, [r3, #4]
 800f8da:	b29b      	uxth	r3, r3
 800f8dc:	429a      	cmp	r2, r3
 800f8de:	d006      	beq.n	800f8ee <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	633b      	str	r3, [r7, #48]	; 0x30
 800f8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d1e6      	bne.n	800f8ba <ip4_reass+0xb6>
 800f8ec:	e000      	b.n	800f8f0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800f8ee:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800f8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d109      	bne.n	800f90a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800f8f6:	8c3b      	ldrh	r3, [r7, #32]
 800f8f8:	4619      	mov	r1, r3
 800f8fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f8fc:	f7ff fdb0 	bl	800f460 <ip_reass_enqueue_new_datagram>
 800f900:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800f902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f904:	2b00      	cmp	r3, #0
 800f906:	d11c      	bne.n	800f942 <ip4_reass+0x13e>
      goto nullreturn;
 800f908:	e109      	b.n	800fb1e <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f90c:	88db      	ldrh	r3, [r3, #6]
 800f90e:	b29b      	uxth	r3, r3
 800f910:	4618      	mov	r0, r3
 800f912:	f7f6 f84f 	bl	80059b4 <lwip_htons>
 800f916:	4603      	mov	r3, r0
 800f918:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d110      	bne.n	800f942 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800f920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f922:	89db      	ldrh	r3, [r3, #14]
 800f924:	4618      	mov	r0, r3
 800f926:	f7f6 f845 	bl	80059b4 <lwip_htons>
 800f92a:	4603      	mov	r3, r0
 800f92c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f930:	2b00      	cmp	r3, #0
 800f932:	d006      	beq.n	800f942 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800f934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f936:	3308      	adds	r3, #8
 800f938:	2214      	movs	r2, #20
 800f93a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f93c:	4618      	mov	r0, r3
 800f93e:	f000 fba1 	bl	8010084 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800f942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f944:	88db      	ldrh	r3, [r3, #6]
 800f946:	b29b      	uxth	r3, r3
 800f948:	f003 0320 	and.w	r3, r3, #32
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	bf0c      	ite	eq
 800f950:	2301      	moveq	r3, #1
 800f952:	2300      	movne	r3, #0
 800f954:	b2db      	uxtb	r3, r3
 800f956:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800f958:	69fb      	ldr	r3, [r7, #28]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d00e      	beq.n	800f97c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800f95e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f960:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f962:	4413      	add	r3, r2
 800f964:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800f966:	8b7a      	ldrh	r2, [r7, #26]
 800f968:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f96a:	429a      	cmp	r2, r3
 800f96c:	f0c0 80a0 	bcc.w	800fab0 <ip4_reass+0x2ac>
 800f970:	8b7b      	ldrh	r3, [r7, #26]
 800f972:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800f976:	4293      	cmp	r3, r2
 800f978:	f200 809a 	bhi.w	800fab0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800f97c:	69fa      	ldr	r2, [r7, #28]
 800f97e:	6879      	ldr	r1, [r7, #4]
 800f980:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f982:	f7ff fdd5 	bl	800f530 <ip_reass_chain_frag_into_datagram_and_validate>
 800f986:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800f988:	697b      	ldr	r3, [r7, #20]
 800f98a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f98e:	f000 8091 	beq.w	800fab4 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f992:	4b5b      	ldr	r3, [pc, #364]	; (800fb00 <ip4_reass+0x2fc>)
 800f994:	881a      	ldrh	r2, [r3, #0]
 800f996:	8c3b      	ldrh	r3, [r7, #32]
 800f998:	4413      	add	r3, r2
 800f99a:	b29a      	uxth	r2, r3
 800f99c:	4b58      	ldr	r3, [pc, #352]	; (800fb00 <ip4_reass+0x2fc>)
 800f99e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800f9a0:	69fb      	ldr	r3, [r7, #28]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d00d      	beq.n	800f9c2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800f9a6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f9a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f9aa:	4413      	add	r3, r2
 800f9ac:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800f9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9b0:	8a7a      	ldrh	r2, [r7, #18]
 800f9b2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800f9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9b6:	7f9b      	ldrb	r3, [r3, #30]
 800f9b8:	f043 0301 	orr.w	r3, r3, #1
 800f9bc:	b2da      	uxtb	r2, r3
 800f9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9c0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800f9c2:	697b      	ldr	r3, [r7, #20]
 800f9c4:	2b01      	cmp	r3, #1
 800f9c6:	d171      	bne.n	800faac <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800f9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9ca:	8b9b      	ldrh	r3, [r3, #28]
 800f9cc:	3314      	adds	r3, #20
 800f9ce:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800f9d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9d2:	685b      	ldr	r3, [r3, #4]
 800f9d4:	685b      	ldr	r3, [r3, #4]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800f9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9dc:	685b      	ldr	r3, [r3, #4]
 800f9de:	685b      	ldr	r3, [r3, #4]
 800f9e0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9e4:	3308      	adds	r3, #8
 800f9e6:	2214      	movs	r2, #20
 800f9e8:	4619      	mov	r1, r3
 800f9ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f9ec:	f000 fb4a 	bl	8010084 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800f9f0:	8a3b      	ldrh	r3, [r7, #16]
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	f7f5 ffde 	bl	80059b4 <lwip_htons>
 800f9f8:	4603      	mov	r3, r0
 800f9fa:	461a      	mov	r2, r3
 800f9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9fe:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800fa00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa02:	2200      	movs	r2, #0
 800fa04:	719a      	strb	r2, [r3, #6]
 800fa06:	2200      	movs	r2, #0
 800fa08:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800fa0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	729a      	strb	r2, [r3, #10]
 800fa10:	2200      	movs	r2, #0
 800fa12:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800fa14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa16:	685b      	ldr	r3, [r3, #4]
 800fa18:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800fa1a:	e00d      	b.n	800fa38 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800fa1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa1e:	685b      	ldr	r3, [r3, #4]
 800fa20:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800fa22:	2114      	movs	r1, #20
 800fa24:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fa26:	f7f7 f9f3 	bl	8006e10 <pbuf_remove_header>
      pbuf_cat(p, r);
 800fa2a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fa2c:	6878      	ldr	r0, [r7, #4]
 800fa2e:	f7f7 fb37 	bl	80070a0 <pbuf_cat>
      r = iprh->next_pbuf;
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800fa38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d1ee      	bne.n	800fa1c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800fa3e:	4b31      	ldr	r3, [pc, #196]	; (800fb04 <ip4_reass+0x300>)
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa44:	429a      	cmp	r2, r3
 800fa46:	d102      	bne.n	800fa4e <ip4_reass+0x24a>
      ipr_prev = NULL;
 800fa48:	2300      	movs	r3, #0
 800fa4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fa4c:	e010      	b.n	800fa70 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800fa4e:	4b2d      	ldr	r3, [pc, #180]	; (800fb04 <ip4_reass+0x300>)
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fa54:	e007      	b.n	800fa66 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800fa56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa5c:	429a      	cmp	r2, r3
 800fa5e:	d006      	beq.n	800fa6e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800fa60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fa66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d1f4      	bne.n	800fa56 <ip4_reass+0x252>
 800fa6c:	e000      	b.n	800fa70 <ip4_reass+0x26c>
          break;
 800fa6e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800fa70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fa72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fa74:	f7ff fd2e 	bl	800f4d4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800fa78:	6878      	ldr	r0, [r7, #4]
 800fa7a:	f7f7 fad7 	bl	800702c <pbuf_clen>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800fa82:	4b1f      	ldr	r3, [pc, #124]	; (800fb00 <ip4_reass+0x2fc>)
 800fa84:	881b      	ldrh	r3, [r3, #0]
 800fa86:	8c3a      	ldrh	r2, [r7, #32]
 800fa88:	429a      	cmp	r2, r3
 800fa8a:	d906      	bls.n	800fa9a <ip4_reass+0x296>
 800fa8c:	4b1e      	ldr	r3, [pc, #120]	; (800fb08 <ip4_reass+0x304>)
 800fa8e:	f240 229b 	movw	r2, #667	; 0x29b
 800fa92:	491e      	ldr	r1, [pc, #120]	; (800fb0c <ip4_reass+0x308>)
 800fa94:	481e      	ldr	r0, [pc, #120]	; (800fb10 <ip4_reass+0x30c>)
 800fa96:	f000 fb25 	bl	80100e4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800fa9a:	4b19      	ldr	r3, [pc, #100]	; (800fb00 <ip4_reass+0x2fc>)
 800fa9c:	881a      	ldrh	r2, [r3, #0]
 800fa9e:	8c3b      	ldrh	r3, [r7, #32]
 800faa0:	1ad3      	subs	r3, r2, r3
 800faa2:	b29a      	uxth	r2, r3
 800faa4:	4b16      	ldr	r3, [pc, #88]	; (800fb00 <ip4_reass+0x2fc>)
 800faa6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	e03c      	b.n	800fb26 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800faac:	2300      	movs	r3, #0
 800faae:	e03a      	b.n	800fb26 <ip4_reass+0x322>
      goto nullreturn_ipr;
 800fab0:	bf00      	nop
 800fab2:	e000      	b.n	800fab6 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800fab4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800fab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d106      	bne.n	800faca <ip4_reass+0x2c6>
 800fabc:	4b12      	ldr	r3, [pc, #72]	; (800fb08 <ip4_reass+0x304>)
 800fabe:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800fac2:	4914      	ldr	r1, [pc, #80]	; (800fb14 <ip4_reass+0x310>)
 800fac4:	4812      	ldr	r0, [pc, #72]	; (800fb10 <ip4_reass+0x30c>)
 800fac6:	f000 fb0d 	bl	80100e4 <iprintf>
  if (ipr->p == NULL) {
 800faca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800facc:	685b      	ldr	r3, [r3, #4]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d124      	bne.n	800fb1c <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800fad2:	4b0c      	ldr	r3, [pc, #48]	; (800fb04 <ip4_reass+0x300>)
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fad8:	429a      	cmp	r2, r3
 800fada:	d006      	beq.n	800faea <ip4_reass+0x2e6>
 800fadc:	4b0a      	ldr	r3, [pc, #40]	; (800fb08 <ip4_reass+0x304>)
 800fade:	f240 22ab 	movw	r2, #683	; 0x2ab
 800fae2:	490d      	ldr	r1, [pc, #52]	; (800fb18 <ip4_reass+0x314>)
 800fae4:	480a      	ldr	r0, [pc, #40]	; (800fb10 <ip4_reass+0x30c>)
 800fae6:	f000 fafd 	bl	80100e4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800faea:	2100      	movs	r1, #0
 800faec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800faee:	f7ff fcf1 	bl	800f4d4 <ip_reass_dequeue_datagram>
 800faf2:	e014      	b.n	800fb1e <ip4_reass+0x31a>
    goto nullreturn;
 800faf4:	bf00      	nop
 800faf6:	e012      	b.n	800fb1e <ip4_reass+0x31a>
    goto nullreturn;
 800faf8:	bf00      	nop
 800fafa:	e010      	b.n	800fb1e <ip4_reass+0x31a>
      goto nullreturn;
 800fafc:	bf00      	nop
 800fafe:	e00e      	b.n	800fb1e <ip4_reass+0x31a>
 800fb00:	20000208 	.word	0x20000208
 800fb04:	20000204 	.word	0x20000204
 800fb08:	08013d50 	.word	0x08013d50
 800fb0c:	08013ec0 	.word	0x08013ec0
 800fb10:	08013d98 	.word	0x08013d98
 800fb14:	08013edc 	.word	0x08013edc
 800fb18:	08013ee8 	.word	0x08013ee8
  }

nullreturn:
 800fb1c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800fb1e:	6878      	ldr	r0, [r7, #4]
 800fb20:	f7f7 f9fc 	bl	8006f1c <pbuf_free>
  return NULL;
 800fb24:	2300      	movs	r3, #0
}
 800fb26:	4618      	mov	r0, r3
 800fb28:	3738      	adds	r7, #56	; 0x38
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	bd80      	pop	{r7, pc}
 800fb2e:	bf00      	nop

0800fb30 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800fb34:	2005      	movs	r0, #5
 800fb36:	f7f6 fb93 	bl	8006260 <memp_malloc>
 800fb3a:	4603      	mov	r3, r0
}
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	bd80      	pop	{r7, pc}

0800fb40 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b082      	sub	sp, #8
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d106      	bne.n	800fb5c <ip_frag_free_pbuf_custom_ref+0x1c>
 800fb4e:	4b07      	ldr	r3, [pc, #28]	; (800fb6c <ip_frag_free_pbuf_custom_ref+0x2c>)
 800fb50:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800fb54:	4906      	ldr	r1, [pc, #24]	; (800fb70 <ip_frag_free_pbuf_custom_ref+0x30>)
 800fb56:	4807      	ldr	r0, [pc, #28]	; (800fb74 <ip_frag_free_pbuf_custom_ref+0x34>)
 800fb58:	f000 fac4 	bl	80100e4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800fb5c:	6879      	ldr	r1, [r7, #4]
 800fb5e:	2005      	movs	r0, #5
 800fb60:	f7f6 fbca 	bl	80062f8 <memp_free>
}
 800fb64:	bf00      	nop
 800fb66:	3708      	adds	r7, #8
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	bd80      	pop	{r7, pc}
 800fb6c:	08013d50 	.word	0x08013d50
 800fb70:	08013f08 	.word	0x08013f08
 800fb74:	08013d98 	.word	0x08013d98

0800fb78 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b084      	sub	sp, #16
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d106      	bne.n	800fb98 <ipfrag_free_pbuf_custom+0x20>
 800fb8a:	4b11      	ldr	r3, [pc, #68]	; (800fbd0 <ipfrag_free_pbuf_custom+0x58>)
 800fb8c:	f240 22ce 	movw	r2, #718	; 0x2ce
 800fb90:	4910      	ldr	r1, [pc, #64]	; (800fbd4 <ipfrag_free_pbuf_custom+0x5c>)
 800fb92:	4811      	ldr	r0, [pc, #68]	; (800fbd8 <ipfrag_free_pbuf_custom+0x60>)
 800fb94:	f000 faa6 	bl	80100e4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800fb98:	68fa      	ldr	r2, [r7, #12]
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	429a      	cmp	r2, r3
 800fb9e:	d006      	beq.n	800fbae <ipfrag_free_pbuf_custom+0x36>
 800fba0:	4b0b      	ldr	r3, [pc, #44]	; (800fbd0 <ipfrag_free_pbuf_custom+0x58>)
 800fba2:	f240 22cf 	movw	r2, #719	; 0x2cf
 800fba6:	490d      	ldr	r1, [pc, #52]	; (800fbdc <ipfrag_free_pbuf_custom+0x64>)
 800fba8:	480b      	ldr	r0, [pc, #44]	; (800fbd8 <ipfrag_free_pbuf_custom+0x60>)
 800fbaa:	f000 fa9b 	bl	80100e4 <iprintf>
  if (pcr->original != NULL) {
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	695b      	ldr	r3, [r3, #20]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d004      	beq.n	800fbc0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	695b      	ldr	r3, [r3, #20]
 800fbba:	4618      	mov	r0, r3
 800fbbc:	f7f7 f9ae 	bl	8006f1c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800fbc0:	68f8      	ldr	r0, [r7, #12]
 800fbc2:	f7ff ffbd 	bl	800fb40 <ip_frag_free_pbuf_custom_ref>
}
 800fbc6:	bf00      	nop
 800fbc8:	3710      	adds	r7, #16
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	bd80      	pop	{r7, pc}
 800fbce:	bf00      	nop
 800fbd0:	08013d50 	.word	0x08013d50
 800fbd4:	08013f14 	.word	0x08013f14
 800fbd8:	08013d98 	.word	0x08013d98
 800fbdc:	08013f20 	.word	0x08013f20

0800fbe0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	b094      	sub	sp, #80	; 0x50
 800fbe4:	af02      	add	r7, sp, #8
 800fbe6:	60f8      	str	r0, [r7, #12]
 800fbe8:	60b9      	str	r1, [r7, #8]
 800fbea:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800fbec:	2300      	movs	r3, #0
 800fbee:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800fbf2:	68bb      	ldr	r3, [r7, #8]
 800fbf4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fbf6:	3b14      	subs	r3, #20
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	da00      	bge.n	800fbfe <ip4_frag+0x1e>
 800fbfc:	3307      	adds	r3, #7
 800fbfe:	10db      	asrs	r3, r3, #3
 800fc00:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800fc02:	2314      	movs	r3, #20
 800fc04:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	685b      	ldr	r3, [r3, #4]
 800fc0a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800fc0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc0e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800fc10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc12:	781b      	ldrb	r3, [r3, #0]
 800fc14:	f003 030f 	and.w	r3, r3, #15
 800fc18:	b2db      	uxtb	r3, r3
 800fc1a:	009b      	lsls	r3, r3, #2
 800fc1c:	b2db      	uxtb	r3, r3
 800fc1e:	2b14      	cmp	r3, #20
 800fc20:	d002      	beq.n	800fc28 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800fc22:	f06f 0305 	mvn.w	r3, #5
 800fc26:	e110      	b.n	800fe4a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	895b      	ldrh	r3, [r3, #10]
 800fc2c:	2b13      	cmp	r3, #19
 800fc2e:	d809      	bhi.n	800fc44 <ip4_frag+0x64>
 800fc30:	4b88      	ldr	r3, [pc, #544]	; (800fe54 <ip4_frag+0x274>)
 800fc32:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800fc36:	4988      	ldr	r1, [pc, #544]	; (800fe58 <ip4_frag+0x278>)
 800fc38:	4888      	ldr	r0, [pc, #544]	; (800fe5c <ip4_frag+0x27c>)
 800fc3a:	f000 fa53 	bl	80100e4 <iprintf>
 800fc3e:	f06f 0305 	mvn.w	r3, #5
 800fc42:	e102      	b.n	800fe4a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800fc44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc46:	88db      	ldrh	r3, [r3, #6]
 800fc48:	b29b      	uxth	r3, r3
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	f7f5 feb2 	bl	80059b4 <lwip_htons>
 800fc50:	4603      	mov	r3, r0
 800fc52:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800fc54:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fc56:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fc5a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800fc5e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fc60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fc64:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	891b      	ldrh	r3, [r3, #8]
 800fc6a:	3b14      	subs	r3, #20
 800fc6c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800fc70:	e0e1      	b.n	800fe36 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800fc72:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fc74:	00db      	lsls	r3, r3, #3
 800fc76:	b29b      	uxth	r3, r3
 800fc78:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fc7c:	4293      	cmp	r3, r2
 800fc7e:	bf28      	it	cs
 800fc80:	4613      	movcs	r3, r2
 800fc82:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800fc84:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fc88:	2114      	movs	r1, #20
 800fc8a:	200e      	movs	r0, #14
 800fc8c:	f7f6 fe62 	bl	8006954 <pbuf_alloc>
 800fc90:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800fc92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	f000 80d5 	beq.w	800fe44 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800fc9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc9c:	895b      	ldrh	r3, [r3, #10]
 800fc9e:	2b13      	cmp	r3, #19
 800fca0:	d806      	bhi.n	800fcb0 <ip4_frag+0xd0>
 800fca2:	4b6c      	ldr	r3, [pc, #432]	; (800fe54 <ip4_frag+0x274>)
 800fca4:	f44f 7249 	mov.w	r2, #804	; 0x324
 800fca8:	496d      	ldr	r1, [pc, #436]	; (800fe60 <ip4_frag+0x280>)
 800fcaa:	486c      	ldr	r0, [pc, #432]	; (800fe5c <ip4_frag+0x27c>)
 800fcac:	f000 fa1a 	bl	80100e4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800fcb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcb2:	685b      	ldr	r3, [r3, #4]
 800fcb4:	2214      	movs	r2, #20
 800fcb6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fcb8:	4618      	mov	r0, r3
 800fcba:	f000 f9e3 	bl	8010084 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800fcbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcc0:	685b      	ldr	r3, [r3, #4]
 800fcc2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800fcc4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fcc6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800fcca:	e064      	b.n	800fd96 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	895a      	ldrh	r2, [r3, #10]
 800fcd0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fcd2:	1ad3      	subs	r3, r2, r3
 800fcd4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	895b      	ldrh	r3, [r3, #10]
 800fcda:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800fcdc:	429a      	cmp	r2, r3
 800fcde:	d906      	bls.n	800fcee <ip4_frag+0x10e>
 800fce0:	4b5c      	ldr	r3, [pc, #368]	; (800fe54 <ip4_frag+0x274>)
 800fce2:	f240 322d 	movw	r2, #813	; 0x32d
 800fce6:	495f      	ldr	r1, [pc, #380]	; (800fe64 <ip4_frag+0x284>)
 800fce8:	485c      	ldr	r0, [pc, #368]	; (800fe5c <ip4_frag+0x27c>)
 800fcea:	f000 f9fb 	bl	80100e4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800fcee:	8bfa      	ldrh	r2, [r7, #30]
 800fcf0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800fcf4:	4293      	cmp	r3, r2
 800fcf6:	bf28      	it	cs
 800fcf8:	4613      	movcs	r3, r2
 800fcfa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800fcfe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d105      	bne.n	800fd12 <ip4_frag+0x132>
        poff = 0;
 800fd06:	2300      	movs	r3, #0
 800fd08:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	60fb      	str	r3, [r7, #12]
        continue;
 800fd10:	e041      	b.n	800fd96 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800fd12:	f7ff ff0d 	bl	800fb30 <ip_frag_alloc_pbuf_custom_ref>
 800fd16:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800fd18:	69bb      	ldr	r3, [r7, #24]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d103      	bne.n	800fd26 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800fd1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fd20:	f7f7 f8fc 	bl	8006f1c <pbuf_free>
        goto memerr;
 800fd24:	e08f      	b.n	800fe46 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800fd26:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800fd2c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fd2e:	4413      	add	r3, r2
 800fd30:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800fd34:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800fd38:	9201      	str	r2, [sp, #4]
 800fd3a:	9300      	str	r3, [sp, #0]
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	2241      	movs	r2, #65	; 0x41
 800fd40:	2000      	movs	r0, #0
 800fd42:	f7f6 ff31 	bl	8006ba8 <pbuf_alloced_custom>
 800fd46:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800fd48:	697b      	ldr	r3, [r7, #20]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d106      	bne.n	800fd5c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800fd4e:	69b8      	ldr	r0, [r7, #24]
 800fd50:	f7ff fef6 	bl	800fb40 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800fd54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fd56:	f7f7 f8e1 	bl	8006f1c <pbuf_free>
        goto memerr;
 800fd5a:	e074      	b.n	800fe46 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800fd5c:	68f8      	ldr	r0, [r7, #12]
 800fd5e:	f7f7 f97d 	bl	800705c <pbuf_ref>
      pcr->original = p;
 800fd62:	69bb      	ldr	r3, [r7, #24]
 800fd64:	68fa      	ldr	r2, [r7, #12]
 800fd66:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800fd68:	69bb      	ldr	r3, [r7, #24]
 800fd6a:	4a3f      	ldr	r2, [pc, #252]	; (800fe68 <ip4_frag+0x288>)
 800fd6c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800fd6e:	6979      	ldr	r1, [r7, #20]
 800fd70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fd72:	f7f7 f995 	bl	80070a0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800fd76:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800fd7a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800fd7e:	1ad3      	subs	r3, r2, r3
 800fd80:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800fd84:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d004      	beq.n	800fd96 <ip4_frag+0x1b6>
        poff = 0;
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800fd96:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d196      	bne.n	800fccc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800fd9e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800fda0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800fda4:	4413      	add	r3, r2
 800fda6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800fda8:	68bb      	ldr	r3, [r7, #8]
 800fdaa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fdac:	f1a3 0213 	sub.w	r2, r3, #19
 800fdb0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fdb4:	429a      	cmp	r2, r3
 800fdb6:	bfcc      	ite	gt
 800fdb8:	2301      	movgt	r3, #1
 800fdba:	2300      	movle	r3, #0
 800fdbc:	b2db      	uxtb	r3, r3
 800fdbe:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800fdc0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fdc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fdc8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800fdca:	6a3b      	ldr	r3, [r7, #32]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d002      	beq.n	800fdd6 <ip4_frag+0x1f6>
 800fdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d003      	beq.n	800fdde <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800fdd6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fdd8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800fddc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800fdde:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fde0:	4618      	mov	r0, r3
 800fde2:	f7f5 fde7 	bl	80059b4 <lwip_htons>
 800fde6:	4603      	mov	r3, r0
 800fde8:	461a      	mov	r2, r3
 800fdea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdec:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800fdee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fdf0:	3314      	adds	r3, #20
 800fdf2:	b29b      	uxth	r3, r3
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	f7f5 fddd 	bl	80059b4 <lwip_htons>
 800fdfa:	4603      	mov	r3, r0
 800fdfc:	461a      	mov	r2, r3
 800fdfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe00:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800fe02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe04:	2200      	movs	r2, #0
 800fe06:	729a      	strb	r2, [r3, #10]
 800fe08:	2200      	movs	r2, #0
 800fe0a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800fe0c:	68bb      	ldr	r3, [r7, #8]
 800fe0e:	695b      	ldr	r3, [r3, #20]
 800fe10:	687a      	ldr	r2, [r7, #4]
 800fe12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fe14:	68b8      	ldr	r0, [r7, #8]
 800fe16:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800fe18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fe1a:	f7f7 f87f 	bl	8006f1c <pbuf_free>
    left = (u16_t)(left - fragsize);
 800fe1e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fe22:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fe24:	1ad3      	subs	r3, r2, r3
 800fe26:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800fe2a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800fe2e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fe30:	4413      	add	r3, r2
 800fe32:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800fe36:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	f47f af19 	bne.w	800fc72 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800fe40:	2300      	movs	r3, #0
 800fe42:	e002      	b.n	800fe4a <ip4_frag+0x26a>
      goto memerr;
 800fe44:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800fe46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	3748      	adds	r7, #72	; 0x48
 800fe4e:	46bd      	mov	sp, r7
 800fe50:	bd80      	pop	{r7, pc}
 800fe52:	bf00      	nop
 800fe54:	08013d50 	.word	0x08013d50
 800fe58:	08013f2c 	.word	0x08013f2c
 800fe5c:	08013d98 	.word	0x08013d98
 800fe60:	08013f48 	.word	0x08013f48
 800fe64:	08013f68 	.word	0x08013f68
 800fe68:	0800fb79 	.word	0x0800fb79

0800fe6c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b086      	sub	sp, #24
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
 800fe74:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800fe76:	230e      	movs	r3, #14
 800fe78:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	895b      	ldrh	r3, [r3, #10]
 800fe7e:	2b0e      	cmp	r3, #14
 800fe80:	d96e      	bls.n	800ff60 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	7bdb      	ldrb	r3, [r3, #15]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d106      	bne.n	800fe98 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800fe8a:	683b      	ldr	r3, [r7, #0]
 800fe8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fe90:	3301      	adds	r3, #1
 800fe92:	b2da      	uxtb	r2, r3
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	685b      	ldr	r3, [r3, #4]
 800fe9c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800fe9e:	693b      	ldr	r3, [r7, #16]
 800fea0:	7b1a      	ldrb	r2, [r3, #12]
 800fea2:	7b5b      	ldrb	r3, [r3, #13]
 800fea4:	021b      	lsls	r3, r3, #8
 800fea6:	4313      	orrs	r3, r2
 800fea8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800feaa:	693b      	ldr	r3, [r7, #16]
 800feac:	781b      	ldrb	r3, [r3, #0]
 800feae:	f003 0301 	and.w	r3, r3, #1
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d023      	beq.n	800fefe <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800feb6:	693b      	ldr	r3, [r7, #16]
 800feb8:	781b      	ldrb	r3, [r3, #0]
 800feba:	2b01      	cmp	r3, #1
 800febc:	d10f      	bne.n	800fede <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800febe:	693b      	ldr	r3, [r7, #16]
 800fec0:	785b      	ldrb	r3, [r3, #1]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d11b      	bne.n	800fefe <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800fec6:	693b      	ldr	r3, [r7, #16]
 800fec8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800feca:	2b5e      	cmp	r3, #94	; 0x5e
 800fecc:	d117      	bne.n	800fefe <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	7b5b      	ldrb	r3, [r3, #13]
 800fed2:	f043 0310 	orr.w	r3, r3, #16
 800fed6:	b2da      	uxtb	r2, r3
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	735a      	strb	r2, [r3, #13]
 800fedc:	e00f      	b.n	800fefe <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800fede:	693b      	ldr	r3, [r7, #16]
 800fee0:	2206      	movs	r2, #6
 800fee2:	4928      	ldr	r1, [pc, #160]	; (800ff84 <ethernet_input+0x118>)
 800fee4:	4618      	mov	r0, r3
 800fee6:	f000 f8bf 	bl	8010068 <memcmp>
 800feea:	4603      	mov	r3, r0
 800feec:	2b00      	cmp	r3, #0
 800feee:	d106      	bne.n	800fefe <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	7b5b      	ldrb	r3, [r3, #13]
 800fef4:	f043 0308 	orr.w	r3, r3, #8
 800fef8:	b2da      	uxtb	r2, r3
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800fefe:	89fb      	ldrh	r3, [r7, #14]
 800ff00:	2b08      	cmp	r3, #8
 800ff02:	d003      	beq.n	800ff0c <ethernet_input+0xa0>
 800ff04:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800ff08:	d014      	beq.n	800ff34 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800ff0a:	e032      	b.n	800ff72 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ff0c:	683b      	ldr	r3, [r7, #0]
 800ff0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ff12:	f003 0308 	and.w	r3, r3, #8
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d024      	beq.n	800ff64 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800ff1a:	8afb      	ldrh	r3, [r7, #22]
 800ff1c:	4619      	mov	r1, r3
 800ff1e:	6878      	ldr	r0, [r7, #4]
 800ff20:	f7f6 ff76 	bl	8006e10 <pbuf_remove_header>
 800ff24:	4603      	mov	r3, r0
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d11e      	bne.n	800ff68 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800ff2a:	6839      	ldr	r1, [r7, #0]
 800ff2c:	6878      	ldr	r0, [r7, #4]
 800ff2e:	f7fe ff27 	bl	800ed80 <ip4_input>
      break;
 800ff32:	e013      	b.n	800ff5c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ff3a:	f003 0308 	and.w	r3, r3, #8
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d014      	beq.n	800ff6c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800ff42:	8afb      	ldrh	r3, [r7, #22]
 800ff44:	4619      	mov	r1, r3
 800ff46:	6878      	ldr	r0, [r7, #4]
 800ff48:	f7f6 ff62 	bl	8006e10 <pbuf_remove_header>
 800ff4c:	4603      	mov	r3, r0
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d10e      	bne.n	800ff70 <ethernet_input+0x104>
        etharp_input(p, netif);
 800ff52:	6839      	ldr	r1, [r7, #0]
 800ff54:	6878      	ldr	r0, [r7, #4]
 800ff56:	f7fe f8c7 	bl	800e0e8 <etharp_input>
      break;
 800ff5a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	e00c      	b.n	800ff7a <ethernet_input+0x10e>
    goto free_and_return;
 800ff60:	bf00      	nop
 800ff62:	e006      	b.n	800ff72 <ethernet_input+0x106>
        goto free_and_return;
 800ff64:	bf00      	nop
 800ff66:	e004      	b.n	800ff72 <ethernet_input+0x106>
        goto free_and_return;
 800ff68:	bf00      	nop
 800ff6a:	e002      	b.n	800ff72 <ethernet_input+0x106>
        goto free_and_return;
 800ff6c:	bf00      	nop
 800ff6e:	e000      	b.n	800ff72 <ethernet_input+0x106>
        goto free_and_return;
 800ff70:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800ff72:	6878      	ldr	r0, [r7, #4]
 800ff74:	f7f6 ffd2 	bl	8006f1c <pbuf_free>
  return ERR_OK;
 800ff78:	2300      	movs	r3, #0
}
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	3718      	adds	r7, #24
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	bd80      	pop	{r7, pc}
 800ff82:	bf00      	nop
 800ff84:	080140f8 	.word	0x080140f8

0800ff88 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b086      	sub	sp, #24
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	60f8      	str	r0, [r7, #12]
 800ff90:	60b9      	str	r1, [r7, #8]
 800ff92:	607a      	str	r2, [r7, #4]
 800ff94:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800ff96:	8c3b      	ldrh	r3, [r7, #32]
 800ff98:	4618      	mov	r0, r3
 800ff9a:	f7f5 fd0b 	bl	80059b4 <lwip_htons>
 800ff9e:	4603      	mov	r3, r0
 800ffa0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800ffa2:	210e      	movs	r1, #14
 800ffa4:	68b8      	ldr	r0, [r7, #8]
 800ffa6:	f7f6 ff23 	bl	8006df0 <pbuf_add_header>
 800ffaa:	4603      	mov	r3, r0
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d125      	bne.n	800fffc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800ffb0:	68bb      	ldr	r3, [r7, #8]
 800ffb2:	685b      	ldr	r3, [r3, #4]
 800ffb4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800ffb6:	693b      	ldr	r3, [r7, #16]
 800ffb8:	8afa      	ldrh	r2, [r7, #22]
 800ffba:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800ffbc:	693b      	ldr	r3, [r7, #16]
 800ffbe:	2206      	movs	r2, #6
 800ffc0:	6839      	ldr	r1, [r7, #0]
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	f000 f85e 	bl	8010084 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800ffc8:	693b      	ldr	r3, [r7, #16]
 800ffca:	3306      	adds	r3, #6
 800ffcc:	2206      	movs	r2, #6
 800ffce:	6879      	ldr	r1, [r7, #4]
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f000 f857 	bl	8010084 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ffdc:	2b06      	cmp	r3, #6
 800ffde:	d006      	beq.n	800ffee <ethernet_output+0x66>
 800ffe0:	4b0a      	ldr	r3, [pc, #40]	; (801000c <ethernet_output+0x84>)
 800ffe2:	f44f 7299 	mov.w	r2, #306	; 0x132
 800ffe6:	490a      	ldr	r1, [pc, #40]	; (8010010 <ethernet_output+0x88>)
 800ffe8:	480a      	ldr	r0, [pc, #40]	; (8010014 <ethernet_output+0x8c>)
 800ffea:	f000 f87b 	bl	80100e4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	699b      	ldr	r3, [r3, #24]
 800fff2:	68b9      	ldr	r1, [r7, #8]
 800fff4:	68f8      	ldr	r0, [r7, #12]
 800fff6:	4798      	blx	r3
 800fff8:	4603      	mov	r3, r0
 800fffa:	e002      	b.n	8010002 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800fffc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800fffe:	f06f 0301 	mvn.w	r3, #1
}
 8010002:	4618      	mov	r0, r3
 8010004:	3718      	adds	r7, #24
 8010006:	46bd      	mov	sp, r7
 8010008:	bd80      	pop	{r7, pc}
 801000a:	bf00      	nop
 801000c:	08013f78 	.word	0x08013f78
 8010010:	08013fb0 	.word	0x08013fb0
 8010014:	08013fe4 	.word	0x08013fe4

08010018 <atoi>:
 8010018:	220a      	movs	r2, #10
 801001a:	2100      	movs	r1, #0
 801001c:	f000 b990 	b.w	8010340 <strtol>

08010020 <__libc_init_array>:
 8010020:	b570      	push	{r4, r5, r6, lr}
 8010022:	4d0d      	ldr	r5, [pc, #52]	; (8010058 <__libc_init_array+0x38>)
 8010024:	4c0d      	ldr	r4, [pc, #52]	; (801005c <__libc_init_array+0x3c>)
 8010026:	1b64      	subs	r4, r4, r5
 8010028:	10a4      	asrs	r4, r4, #2
 801002a:	2600      	movs	r6, #0
 801002c:	42a6      	cmp	r6, r4
 801002e:	d109      	bne.n	8010044 <__libc_init_array+0x24>
 8010030:	4d0b      	ldr	r5, [pc, #44]	; (8010060 <__libc_init_array+0x40>)
 8010032:	4c0c      	ldr	r4, [pc, #48]	; (8010064 <__libc_init_array+0x44>)
 8010034:	f001 fae0 	bl	80115f8 <_init>
 8010038:	1b64      	subs	r4, r4, r5
 801003a:	10a4      	asrs	r4, r4, #2
 801003c:	2600      	movs	r6, #0
 801003e:	42a6      	cmp	r6, r4
 8010040:	d105      	bne.n	801004e <__libc_init_array+0x2e>
 8010042:	bd70      	pop	{r4, r5, r6, pc}
 8010044:	f855 3b04 	ldr.w	r3, [r5], #4
 8010048:	4798      	blx	r3
 801004a:	3601      	adds	r6, #1
 801004c:	e7ee      	b.n	801002c <__libc_init_array+0xc>
 801004e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010052:	4798      	blx	r3
 8010054:	3601      	adds	r6, #1
 8010056:	e7f2      	b.n	801003e <__libc_init_array+0x1e>
 8010058:	0801435c 	.word	0x0801435c
 801005c:	0801435c 	.word	0x0801435c
 8010060:	0801435c 	.word	0x0801435c
 8010064:	08014360 	.word	0x08014360

08010068 <memcmp>:
 8010068:	b530      	push	{r4, r5, lr}
 801006a:	3901      	subs	r1, #1
 801006c:	2400      	movs	r4, #0
 801006e:	42a2      	cmp	r2, r4
 8010070:	d101      	bne.n	8010076 <memcmp+0xe>
 8010072:	2000      	movs	r0, #0
 8010074:	e005      	b.n	8010082 <memcmp+0x1a>
 8010076:	5d03      	ldrb	r3, [r0, r4]
 8010078:	3401      	adds	r4, #1
 801007a:	5d0d      	ldrb	r5, [r1, r4]
 801007c:	42ab      	cmp	r3, r5
 801007e:	d0f6      	beq.n	801006e <memcmp+0x6>
 8010080:	1b58      	subs	r0, r3, r5
 8010082:	bd30      	pop	{r4, r5, pc}

08010084 <memcpy>:
 8010084:	440a      	add	r2, r1
 8010086:	4291      	cmp	r1, r2
 8010088:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801008c:	d100      	bne.n	8010090 <memcpy+0xc>
 801008e:	4770      	bx	lr
 8010090:	b510      	push	{r4, lr}
 8010092:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010096:	f803 4f01 	strb.w	r4, [r3, #1]!
 801009a:	4291      	cmp	r1, r2
 801009c:	d1f9      	bne.n	8010092 <memcpy+0xe>
 801009e:	bd10      	pop	{r4, pc}

080100a0 <memmove>:
 80100a0:	4288      	cmp	r0, r1
 80100a2:	b510      	push	{r4, lr}
 80100a4:	eb01 0402 	add.w	r4, r1, r2
 80100a8:	d902      	bls.n	80100b0 <memmove+0x10>
 80100aa:	4284      	cmp	r4, r0
 80100ac:	4623      	mov	r3, r4
 80100ae:	d807      	bhi.n	80100c0 <memmove+0x20>
 80100b0:	1e43      	subs	r3, r0, #1
 80100b2:	42a1      	cmp	r1, r4
 80100b4:	d008      	beq.n	80100c8 <memmove+0x28>
 80100b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80100ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80100be:	e7f8      	b.n	80100b2 <memmove+0x12>
 80100c0:	4402      	add	r2, r0
 80100c2:	4601      	mov	r1, r0
 80100c4:	428a      	cmp	r2, r1
 80100c6:	d100      	bne.n	80100ca <memmove+0x2a>
 80100c8:	bd10      	pop	{r4, pc}
 80100ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80100ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80100d2:	e7f7      	b.n	80100c4 <memmove+0x24>

080100d4 <memset>:
 80100d4:	4402      	add	r2, r0
 80100d6:	4603      	mov	r3, r0
 80100d8:	4293      	cmp	r3, r2
 80100da:	d100      	bne.n	80100de <memset+0xa>
 80100dc:	4770      	bx	lr
 80100de:	f803 1b01 	strb.w	r1, [r3], #1
 80100e2:	e7f9      	b.n	80100d8 <memset+0x4>

080100e4 <iprintf>:
 80100e4:	b40f      	push	{r0, r1, r2, r3}
 80100e6:	4b0a      	ldr	r3, [pc, #40]	; (8010110 <iprintf+0x2c>)
 80100e8:	b513      	push	{r0, r1, r4, lr}
 80100ea:	681c      	ldr	r4, [r3, #0]
 80100ec:	b124      	cbz	r4, 80100f8 <iprintf+0x14>
 80100ee:	69a3      	ldr	r3, [r4, #24]
 80100f0:	b913      	cbnz	r3, 80100f8 <iprintf+0x14>
 80100f2:	4620      	mov	r0, r4
 80100f4:	f000 f9aa 	bl	801044c <__sinit>
 80100f8:	ab05      	add	r3, sp, #20
 80100fa:	9a04      	ldr	r2, [sp, #16]
 80100fc:	68a1      	ldr	r1, [r4, #8]
 80100fe:	9301      	str	r3, [sp, #4]
 8010100:	4620      	mov	r0, r4
 8010102:	f000 fc8d 	bl	8010a20 <_vfiprintf_r>
 8010106:	b002      	add	sp, #8
 8010108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801010c:	b004      	add	sp, #16
 801010e:	4770      	bx	lr
 8010110:	20000014 	.word	0x20000014

08010114 <rand>:
 8010114:	4b17      	ldr	r3, [pc, #92]	; (8010174 <rand+0x60>)
 8010116:	b510      	push	{r4, lr}
 8010118:	681c      	ldr	r4, [r3, #0]
 801011a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801011c:	b9b3      	cbnz	r3, 801014c <rand+0x38>
 801011e:	2018      	movs	r0, #24
 8010120:	f000 fa46 	bl	80105b0 <malloc>
 8010124:	63a0      	str	r0, [r4, #56]	; 0x38
 8010126:	b928      	cbnz	r0, 8010134 <rand+0x20>
 8010128:	4602      	mov	r2, r0
 801012a:	4b13      	ldr	r3, [pc, #76]	; (8010178 <rand+0x64>)
 801012c:	4813      	ldr	r0, [pc, #76]	; (801017c <rand+0x68>)
 801012e:	214e      	movs	r1, #78	; 0x4e
 8010130:	f000 f910 	bl	8010354 <__assert_func>
 8010134:	4a12      	ldr	r2, [pc, #72]	; (8010180 <rand+0x6c>)
 8010136:	4b13      	ldr	r3, [pc, #76]	; (8010184 <rand+0x70>)
 8010138:	e9c0 2300 	strd	r2, r3, [r0]
 801013c:	4b12      	ldr	r3, [pc, #72]	; (8010188 <rand+0x74>)
 801013e:	6083      	str	r3, [r0, #8]
 8010140:	230b      	movs	r3, #11
 8010142:	8183      	strh	r3, [r0, #12]
 8010144:	2201      	movs	r2, #1
 8010146:	2300      	movs	r3, #0
 8010148:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801014c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801014e:	480f      	ldr	r0, [pc, #60]	; (801018c <rand+0x78>)
 8010150:	690a      	ldr	r2, [r1, #16]
 8010152:	694b      	ldr	r3, [r1, #20]
 8010154:	4c0e      	ldr	r4, [pc, #56]	; (8010190 <rand+0x7c>)
 8010156:	4350      	muls	r0, r2
 8010158:	fb04 0003 	mla	r0, r4, r3, r0
 801015c:	fba2 3404 	umull	r3, r4, r2, r4
 8010160:	1c5a      	adds	r2, r3, #1
 8010162:	4404      	add	r4, r0
 8010164:	f144 0000 	adc.w	r0, r4, #0
 8010168:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801016c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8010170:	bd10      	pop	{r4, pc}
 8010172:	bf00      	nop
 8010174:	20000014 	.word	0x20000014
 8010178:	0801420c 	.word	0x0801420c
 801017c:	08014223 	.word	0x08014223
 8010180:	abcd330e 	.word	0xabcd330e
 8010184:	e66d1234 	.word	0xe66d1234
 8010188:	0005deec 	.word	0x0005deec
 801018c:	5851f42d 	.word	0x5851f42d
 8010190:	4c957f2d 	.word	0x4c957f2d

08010194 <siprintf>:
 8010194:	b40e      	push	{r1, r2, r3}
 8010196:	b500      	push	{lr}
 8010198:	b09c      	sub	sp, #112	; 0x70
 801019a:	ab1d      	add	r3, sp, #116	; 0x74
 801019c:	9002      	str	r0, [sp, #8]
 801019e:	9006      	str	r0, [sp, #24]
 80101a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80101a4:	4809      	ldr	r0, [pc, #36]	; (80101cc <siprintf+0x38>)
 80101a6:	9107      	str	r1, [sp, #28]
 80101a8:	9104      	str	r1, [sp, #16]
 80101aa:	4909      	ldr	r1, [pc, #36]	; (80101d0 <siprintf+0x3c>)
 80101ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80101b0:	9105      	str	r1, [sp, #20]
 80101b2:	6800      	ldr	r0, [r0, #0]
 80101b4:	9301      	str	r3, [sp, #4]
 80101b6:	a902      	add	r1, sp, #8
 80101b8:	f000 fb08 	bl	80107cc <_svfiprintf_r>
 80101bc:	9b02      	ldr	r3, [sp, #8]
 80101be:	2200      	movs	r2, #0
 80101c0:	701a      	strb	r2, [r3, #0]
 80101c2:	b01c      	add	sp, #112	; 0x70
 80101c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80101c8:	b003      	add	sp, #12
 80101ca:	4770      	bx	lr
 80101cc:	20000014 	.word	0x20000014
 80101d0:	ffff0208 	.word	0xffff0208

080101d4 <strchr>:
 80101d4:	b2c9      	uxtb	r1, r1
 80101d6:	4603      	mov	r3, r0
 80101d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101dc:	b11a      	cbz	r2, 80101e6 <strchr+0x12>
 80101de:	428a      	cmp	r2, r1
 80101e0:	d1f9      	bne.n	80101d6 <strchr+0x2>
 80101e2:	4618      	mov	r0, r3
 80101e4:	4770      	bx	lr
 80101e6:	2900      	cmp	r1, #0
 80101e8:	bf18      	it	ne
 80101ea:	2300      	movne	r3, #0
 80101ec:	e7f9      	b.n	80101e2 <strchr+0xe>

080101ee <strncmp>:
 80101ee:	b510      	push	{r4, lr}
 80101f0:	b16a      	cbz	r2, 801020e <strncmp+0x20>
 80101f2:	3901      	subs	r1, #1
 80101f4:	1884      	adds	r4, r0, r2
 80101f6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80101fa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80101fe:	4293      	cmp	r3, r2
 8010200:	d103      	bne.n	801020a <strncmp+0x1c>
 8010202:	42a0      	cmp	r0, r4
 8010204:	d001      	beq.n	801020a <strncmp+0x1c>
 8010206:	2b00      	cmp	r3, #0
 8010208:	d1f5      	bne.n	80101f6 <strncmp+0x8>
 801020a:	1a98      	subs	r0, r3, r2
 801020c:	bd10      	pop	{r4, pc}
 801020e:	4610      	mov	r0, r2
 8010210:	e7fc      	b.n	801020c <strncmp+0x1e>

08010212 <strncpy>:
 8010212:	b510      	push	{r4, lr}
 8010214:	3901      	subs	r1, #1
 8010216:	4603      	mov	r3, r0
 8010218:	b132      	cbz	r2, 8010228 <strncpy+0x16>
 801021a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801021e:	f803 4b01 	strb.w	r4, [r3], #1
 8010222:	3a01      	subs	r2, #1
 8010224:	2c00      	cmp	r4, #0
 8010226:	d1f7      	bne.n	8010218 <strncpy+0x6>
 8010228:	441a      	add	r2, r3
 801022a:	2100      	movs	r1, #0
 801022c:	4293      	cmp	r3, r2
 801022e:	d100      	bne.n	8010232 <strncpy+0x20>
 8010230:	bd10      	pop	{r4, pc}
 8010232:	f803 1b01 	strb.w	r1, [r3], #1
 8010236:	e7f9      	b.n	801022c <strncpy+0x1a>

08010238 <_strtol_l.isra.0>:
 8010238:	2b01      	cmp	r3, #1
 801023a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801023e:	d001      	beq.n	8010244 <_strtol_l.isra.0+0xc>
 8010240:	2b24      	cmp	r3, #36	; 0x24
 8010242:	d906      	bls.n	8010252 <_strtol_l.isra.0+0x1a>
 8010244:	f000 f8a4 	bl	8010390 <__errno>
 8010248:	2316      	movs	r3, #22
 801024a:	6003      	str	r3, [r0, #0]
 801024c:	2000      	movs	r0, #0
 801024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010252:	4f3a      	ldr	r7, [pc, #232]	; (801033c <_strtol_l.isra.0+0x104>)
 8010254:	468e      	mov	lr, r1
 8010256:	4676      	mov	r6, lr
 8010258:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801025c:	5de5      	ldrb	r5, [r4, r7]
 801025e:	f015 0508 	ands.w	r5, r5, #8
 8010262:	d1f8      	bne.n	8010256 <_strtol_l.isra.0+0x1e>
 8010264:	2c2d      	cmp	r4, #45	; 0x2d
 8010266:	d134      	bne.n	80102d2 <_strtol_l.isra.0+0x9a>
 8010268:	f89e 4000 	ldrb.w	r4, [lr]
 801026c:	f04f 0801 	mov.w	r8, #1
 8010270:	f106 0e02 	add.w	lr, r6, #2
 8010274:	2b00      	cmp	r3, #0
 8010276:	d05c      	beq.n	8010332 <_strtol_l.isra.0+0xfa>
 8010278:	2b10      	cmp	r3, #16
 801027a:	d10c      	bne.n	8010296 <_strtol_l.isra.0+0x5e>
 801027c:	2c30      	cmp	r4, #48	; 0x30
 801027e:	d10a      	bne.n	8010296 <_strtol_l.isra.0+0x5e>
 8010280:	f89e 4000 	ldrb.w	r4, [lr]
 8010284:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010288:	2c58      	cmp	r4, #88	; 0x58
 801028a:	d14d      	bne.n	8010328 <_strtol_l.isra.0+0xf0>
 801028c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8010290:	2310      	movs	r3, #16
 8010292:	f10e 0e02 	add.w	lr, lr, #2
 8010296:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801029a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801029e:	2600      	movs	r6, #0
 80102a0:	fbbc f9f3 	udiv	r9, ip, r3
 80102a4:	4635      	mov	r5, r6
 80102a6:	fb03 ca19 	mls	sl, r3, r9, ip
 80102aa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80102ae:	2f09      	cmp	r7, #9
 80102b0:	d818      	bhi.n	80102e4 <_strtol_l.isra.0+0xac>
 80102b2:	463c      	mov	r4, r7
 80102b4:	42a3      	cmp	r3, r4
 80102b6:	dd24      	ble.n	8010302 <_strtol_l.isra.0+0xca>
 80102b8:	2e00      	cmp	r6, #0
 80102ba:	db1f      	blt.n	80102fc <_strtol_l.isra.0+0xc4>
 80102bc:	45a9      	cmp	r9, r5
 80102be:	d31d      	bcc.n	80102fc <_strtol_l.isra.0+0xc4>
 80102c0:	d101      	bne.n	80102c6 <_strtol_l.isra.0+0x8e>
 80102c2:	45a2      	cmp	sl, r4
 80102c4:	db1a      	blt.n	80102fc <_strtol_l.isra.0+0xc4>
 80102c6:	fb05 4503 	mla	r5, r5, r3, r4
 80102ca:	2601      	movs	r6, #1
 80102cc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80102d0:	e7eb      	b.n	80102aa <_strtol_l.isra.0+0x72>
 80102d2:	2c2b      	cmp	r4, #43	; 0x2b
 80102d4:	bf08      	it	eq
 80102d6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80102da:	46a8      	mov	r8, r5
 80102dc:	bf08      	it	eq
 80102de:	f106 0e02 	addeq.w	lr, r6, #2
 80102e2:	e7c7      	b.n	8010274 <_strtol_l.isra.0+0x3c>
 80102e4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80102e8:	2f19      	cmp	r7, #25
 80102ea:	d801      	bhi.n	80102f0 <_strtol_l.isra.0+0xb8>
 80102ec:	3c37      	subs	r4, #55	; 0x37
 80102ee:	e7e1      	b.n	80102b4 <_strtol_l.isra.0+0x7c>
 80102f0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80102f4:	2f19      	cmp	r7, #25
 80102f6:	d804      	bhi.n	8010302 <_strtol_l.isra.0+0xca>
 80102f8:	3c57      	subs	r4, #87	; 0x57
 80102fa:	e7db      	b.n	80102b4 <_strtol_l.isra.0+0x7c>
 80102fc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8010300:	e7e4      	b.n	80102cc <_strtol_l.isra.0+0x94>
 8010302:	2e00      	cmp	r6, #0
 8010304:	da05      	bge.n	8010312 <_strtol_l.isra.0+0xda>
 8010306:	2322      	movs	r3, #34	; 0x22
 8010308:	6003      	str	r3, [r0, #0]
 801030a:	4665      	mov	r5, ip
 801030c:	b942      	cbnz	r2, 8010320 <_strtol_l.isra.0+0xe8>
 801030e:	4628      	mov	r0, r5
 8010310:	e79d      	b.n	801024e <_strtol_l.isra.0+0x16>
 8010312:	f1b8 0f00 	cmp.w	r8, #0
 8010316:	d000      	beq.n	801031a <_strtol_l.isra.0+0xe2>
 8010318:	426d      	negs	r5, r5
 801031a:	2a00      	cmp	r2, #0
 801031c:	d0f7      	beq.n	801030e <_strtol_l.isra.0+0xd6>
 801031e:	b10e      	cbz	r6, 8010324 <_strtol_l.isra.0+0xec>
 8010320:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8010324:	6011      	str	r1, [r2, #0]
 8010326:	e7f2      	b.n	801030e <_strtol_l.isra.0+0xd6>
 8010328:	2430      	movs	r4, #48	; 0x30
 801032a:	2b00      	cmp	r3, #0
 801032c:	d1b3      	bne.n	8010296 <_strtol_l.isra.0+0x5e>
 801032e:	2308      	movs	r3, #8
 8010330:	e7b1      	b.n	8010296 <_strtol_l.isra.0+0x5e>
 8010332:	2c30      	cmp	r4, #48	; 0x30
 8010334:	d0a4      	beq.n	8010280 <_strtol_l.isra.0+0x48>
 8010336:	230a      	movs	r3, #10
 8010338:	e7ad      	b.n	8010296 <_strtol_l.isra.0+0x5e>
 801033a:	bf00      	nop
 801033c:	08014107 	.word	0x08014107

08010340 <strtol>:
 8010340:	4613      	mov	r3, r2
 8010342:	460a      	mov	r2, r1
 8010344:	4601      	mov	r1, r0
 8010346:	4802      	ldr	r0, [pc, #8]	; (8010350 <strtol+0x10>)
 8010348:	6800      	ldr	r0, [r0, #0]
 801034a:	f7ff bf75 	b.w	8010238 <_strtol_l.isra.0>
 801034e:	bf00      	nop
 8010350:	20000014 	.word	0x20000014

08010354 <__assert_func>:
 8010354:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010356:	4614      	mov	r4, r2
 8010358:	461a      	mov	r2, r3
 801035a:	4b09      	ldr	r3, [pc, #36]	; (8010380 <__assert_func+0x2c>)
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	4605      	mov	r5, r0
 8010360:	68d8      	ldr	r0, [r3, #12]
 8010362:	b14c      	cbz	r4, 8010378 <__assert_func+0x24>
 8010364:	4b07      	ldr	r3, [pc, #28]	; (8010384 <__assert_func+0x30>)
 8010366:	9100      	str	r1, [sp, #0]
 8010368:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801036c:	4906      	ldr	r1, [pc, #24]	; (8010388 <__assert_func+0x34>)
 801036e:	462b      	mov	r3, r5
 8010370:	f000 f8ea 	bl	8010548 <fiprintf>
 8010374:	f000 ff3e 	bl	80111f4 <abort>
 8010378:	4b04      	ldr	r3, [pc, #16]	; (801038c <__assert_func+0x38>)
 801037a:	461c      	mov	r4, r3
 801037c:	e7f3      	b.n	8010366 <__assert_func+0x12>
 801037e:	bf00      	nop
 8010380:	20000014 	.word	0x20000014
 8010384:	08014282 	.word	0x08014282
 8010388:	0801428f 	.word	0x0801428f
 801038c:	080142bd 	.word	0x080142bd

08010390 <__errno>:
 8010390:	4b01      	ldr	r3, [pc, #4]	; (8010398 <__errno+0x8>)
 8010392:	6818      	ldr	r0, [r3, #0]
 8010394:	4770      	bx	lr
 8010396:	bf00      	nop
 8010398:	20000014 	.word	0x20000014

0801039c <std>:
 801039c:	2300      	movs	r3, #0
 801039e:	b510      	push	{r4, lr}
 80103a0:	4604      	mov	r4, r0
 80103a2:	e9c0 3300 	strd	r3, r3, [r0]
 80103a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80103aa:	6083      	str	r3, [r0, #8]
 80103ac:	8181      	strh	r1, [r0, #12]
 80103ae:	6643      	str	r3, [r0, #100]	; 0x64
 80103b0:	81c2      	strh	r2, [r0, #14]
 80103b2:	6183      	str	r3, [r0, #24]
 80103b4:	4619      	mov	r1, r3
 80103b6:	2208      	movs	r2, #8
 80103b8:	305c      	adds	r0, #92	; 0x5c
 80103ba:	f7ff fe8b 	bl	80100d4 <memset>
 80103be:	4b05      	ldr	r3, [pc, #20]	; (80103d4 <std+0x38>)
 80103c0:	6263      	str	r3, [r4, #36]	; 0x24
 80103c2:	4b05      	ldr	r3, [pc, #20]	; (80103d8 <std+0x3c>)
 80103c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80103c6:	4b05      	ldr	r3, [pc, #20]	; (80103dc <std+0x40>)
 80103c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80103ca:	4b05      	ldr	r3, [pc, #20]	; (80103e0 <std+0x44>)
 80103cc:	6224      	str	r4, [r4, #32]
 80103ce:	6323      	str	r3, [r4, #48]	; 0x30
 80103d0:	bd10      	pop	{r4, pc}
 80103d2:	bf00      	nop
 80103d4:	08010fc9 	.word	0x08010fc9
 80103d8:	08010feb 	.word	0x08010feb
 80103dc:	08011023 	.word	0x08011023
 80103e0:	08011047 	.word	0x08011047

080103e4 <_cleanup_r>:
 80103e4:	4901      	ldr	r1, [pc, #4]	; (80103ec <_cleanup_r+0x8>)
 80103e6:	f000 b8c1 	b.w	801056c <_fwalk_reent>
 80103ea:	bf00      	nop
 80103ec:	08011331 	.word	0x08011331

080103f0 <__sfmoreglue>:
 80103f0:	b570      	push	{r4, r5, r6, lr}
 80103f2:	1e4a      	subs	r2, r1, #1
 80103f4:	2568      	movs	r5, #104	; 0x68
 80103f6:	4355      	muls	r5, r2
 80103f8:	460e      	mov	r6, r1
 80103fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80103fe:	f000 f92f 	bl	8010660 <_malloc_r>
 8010402:	4604      	mov	r4, r0
 8010404:	b140      	cbz	r0, 8010418 <__sfmoreglue+0x28>
 8010406:	2100      	movs	r1, #0
 8010408:	e9c0 1600 	strd	r1, r6, [r0]
 801040c:	300c      	adds	r0, #12
 801040e:	60a0      	str	r0, [r4, #8]
 8010410:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010414:	f7ff fe5e 	bl	80100d4 <memset>
 8010418:	4620      	mov	r0, r4
 801041a:	bd70      	pop	{r4, r5, r6, pc}

0801041c <__sfp_lock_acquire>:
 801041c:	4801      	ldr	r0, [pc, #4]	; (8010424 <__sfp_lock_acquire+0x8>)
 801041e:	f000 b8c5 	b.w	80105ac <__retarget_lock_acquire_recursive>
 8010422:	bf00      	nop
 8010424:	2000661c 	.word	0x2000661c

08010428 <__sfp_lock_release>:
 8010428:	4801      	ldr	r0, [pc, #4]	; (8010430 <__sfp_lock_release+0x8>)
 801042a:	f000 b8c0 	b.w	80105ae <__retarget_lock_release_recursive>
 801042e:	bf00      	nop
 8010430:	2000661c 	.word	0x2000661c

08010434 <__sinit_lock_acquire>:
 8010434:	4801      	ldr	r0, [pc, #4]	; (801043c <__sinit_lock_acquire+0x8>)
 8010436:	f000 b8b9 	b.w	80105ac <__retarget_lock_acquire_recursive>
 801043a:	bf00      	nop
 801043c:	20006617 	.word	0x20006617

08010440 <__sinit_lock_release>:
 8010440:	4801      	ldr	r0, [pc, #4]	; (8010448 <__sinit_lock_release+0x8>)
 8010442:	f000 b8b4 	b.w	80105ae <__retarget_lock_release_recursive>
 8010446:	bf00      	nop
 8010448:	20006617 	.word	0x20006617

0801044c <__sinit>:
 801044c:	b510      	push	{r4, lr}
 801044e:	4604      	mov	r4, r0
 8010450:	f7ff fff0 	bl	8010434 <__sinit_lock_acquire>
 8010454:	69a3      	ldr	r3, [r4, #24]
 8010456:	b11b      	cbz	r3, 8010460 <__sinit+0x14>
 8010458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801045c:	f7ff bff0 	b.w	8010440 <__sinit_lock_release>
 8010460:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010464:	6523      	str	r3, [r4, #80]	; 0x50
 8010466:	4b13      	ldr	r3, [pc, #76]	; (80104b4 <__sinit+0x68>)
 8010468:	4a13      	ldr	r2, [pc, #76]	; (80104b8 <__sinit+0x6c>)
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	62a2      	str	r2, [r4, #40]	; 0x28
 801046e:	42a3      	cmp	r3, r4
 8010470:	bf04      	itt	eq
 8010472:	2301      	moveq	r3, #1
 8010474:	61a3      	streq	r3, [r4, #24]
 8010476:	4620      	mov	r0, r4
 8010478:	f000 f820 	bl	80104bc <__sfp>
 801047c:	6060      	str	r0, [r4, #4]
 801047e:	4620      	mov	r0, r4
 8010480:	f000 f81c 	bl	80104bc <__sfp>
 8010484:	60a0      	str	r0, [r4, #8]
 8010486:	4620      	mov	r0, r4
 8010488:	f000 f818 	bl	80104bc <__sfp>
 801048c:	2200      	movs	r2, #0
 801048e:	60e0      	str	r0, [r4, #12]
 8010490:	2104      	movs	r1, #4
 8010492:	6860      	ldr	r0, [r4, #4]
 8010494:	f7ff ff82 	bl	801039c <std>
 8010498:	68a0      	ldr	r0, [r4, #8]
 801049a:	2201      	movs	r2, #1
 801049c:	2109      	movs	r1, #9
 801049e:	f7ff ff7d 	bl	801039c <std>
 80104a2:	68e0      	ldr	r0, [r4, #12]
 80104a4:	2202      	movs	r2, #2
 80104a6:	2112      	movs	r1, #18
 80104a8:	f7ff ff78 	bl	801039c <std>
 80104ac:	2301      	movs	r3, #1
 80104ae:	61a3      	str	r3, [r4, #24]
 80104b0:	e7d2      	b.n	8010458 <__sinit+0xc>
 80104b2:	bf00      	nop
 80104b4:	08014208 	.word	0x08014208
 80104b8:	080103e5 	.word	0x080103e5

080104bc <__sfp>:
 80104bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104be:	4607      	mov	r7, r0
 80104c0:	f7ff ffac 	bl	801041c <__sfp_lock_acquire>
 80104c4:	4b1e      	ldr	r3, [pc, #120]	; (8010540 <__sfp+0x84>)
 80104c6:	681e      	ldr	r6, [r3, #0]
 80104c8:	69b3      	ldr	r3, [r6, #24]
 80104ca:	b913      	cbnz	r3, 80104d2 <__sfp+0x16>
 80104cc:	4630      	mov	r0, r6
 80104ce:	f7ff ffbd 	bl	801044c <__sinit>
 80104d2:	3648      	adds	r6, #72	; 0x48
 80104d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80104d8:	3b01      	subs	r3, #1
 80104da:	d503      	bpl.n	80104e4 <__sfp+0x28>
 80104dc:	6833      	ldr	r3, [r6, #0]
 80104de:	b30b      	cbz	r3, 8010524 <__sfp+0x68>
 80104e0:	6836      	ldr	r6, [r6, #0]
 80104e2:	e7f7      	b.n	80104d4 <__sfp+0x18>
 80104e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80104e8:	b9d5      	cbnz	r5, 8010520 <__sfp+0x64>
 80104ea:	4b16      	ldr	r3, [pc, #88]	; (8010544 <__sfp+0x88>)
 80104ec:	60e3      	str	r3, [r4, #12]
 80104ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80104f2:	6665      	str	r5, [r4, #100]	; 0x64
 80104f4:	f000 f859 	bl	80105aa <__retarget_lock_init_recursive>
 80104f8:	f7ff ff96 	bl	8010428 <__sfp_lock_release>
 80104fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010500:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010504:	6025      	str	r5, [r4, #0]
 8010506:	61a5      	str	r5, [r4, #24]
 8010508:	2208      	movs	r2, #8
 801050a:	4629      	mov	r1, r5
 801050c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010510:	f7ff fde0 	bl	80100d4 <memset>
 8010514:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010518:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801051c:	4620      	mov	r0, r4
 801051e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010520:	3468      	adds	r4, #104	; 0x68
 8010522:	e7d9      	b.n	80104d8 <__sfp+0x1c>
 8010524:	2104      	movs	r1, #4
 8010526:	4638      	mov	r0, r7
 8010528:	f7ff ff62 	bl	80103f0 <__sfmoreglue>
 801052c:	4604      	mov	r4, r0
 801052e:	6030      	str	r0, [r6, #0]
 8010530:	2800      	cmp	r0, #0
 8010532:	d1d5      	bne.n	80104e0 <__sfp+0x24>
 8010534:	f7ff ff78 	bl	8010428 <__sfp_lock_release>
 8010538:	230c      	movs	r3, #12
 801053a:	603b      	str	r3, [r7, #0]
 801053c:	e7ee      	b.n	801051c <__sfp+0x60>
 801053e:	bf00      	nop
 8010540:	08014208 	.word	0x08014208
 8010544:	ffff0001 	.word	0xffff0001

08010548 <fiprintf>:
 8010548:	b40e      	push	{r1, r2, r3}
 801054a:	b503      	push	{r0, r1, lr}
 801054c:	4601      	mov	r1, r0
 801054e:	ab03      	add	r3, sp, #12
 8010550:	4805      	ldr	r0, [pc, #20]	; (8010568 <fiprintf+0x20>)
 8010552:	f853 2b04 	ldr.w	r2, [r3], #4
 8010556:	6800      	ldr	r0, [r0, #0]
 8010558:	9301      	str	r3, [sp, #4]
 801055a:	f000 fa61 	bl	8010a20 <_vfiprintf_r>
 801055e:	b002      	add	sp, #8
 8010560:	f85d eb04 	ldr.w	lr, [sp], #4
 8010564:	b003      	add	sp, #12
 8010566:	4770      	bx	lr
 8010568:	20000014 	.word	0x20000014

0801056c <_fwalk_reent>:
 801056c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010570:	4606      	mov	r6, r0
 8010572:	4688      	mov	r8, r1
 8010574:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010578:	2700      	movs	r7, #0
 801057a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801057e:	f1b9 0901 	subs.w	r9, r9, #1
 8010582:	d505      	bpl.n	8010590 <_fwalk_reent+0x24>
 8010584:	6824      	ldr	r4, [r4, #0]
 8010586:	2c00      	cmp	r4, #0
 8010588:	d1f7      	bne.n	801057a <_fwalk_reent+0xe>
 801058a:	4638      	mov	r0, r7
 801058c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010590:	89ab      	ldrh	r3, [r5, #12]
 8010592:	2b01      	cmp	r3, #1
 8010594:	d907      	bls.n	80105a6 <_fwalk_reent+0x3a>
 8010596:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801059a:	3301      	adds	r3, #1
 801059c:	d003      	beq.n	80105a6 <_fwalk_reent+0x3a>
 801059e:	4629      	mov	r1, r5
 80105a0:	4630      	mov	r0, r6
 80105a2:	47c0      	blx	r8
 80105a4:	4307      	orrs	r7, r0
 80105a6:	3568      	adds	r5, #104	; 0x68
 80105a8:	e7e9      	b.n	801057e <_fwalk_reent+0x12>

080105aa <__retarget_lock_init_recursive>:
 80105aa:	4770      	bx	lr

080105ac <__retarget_lock_acquire_recursive>:
 80105ac:	4770      	bx	lr

080105ae <__retarget_lock_release_recursive>:
 80105ae:	4770      	bx	lr

080105b0 <malloc>:
 80105b0:	4b02      	ldr	r3, [pc, #8]	; (80105bc <malloc+0xc>)
 80105b2:	4601      	mov	r1, r0
 80105b4:	6818      	ldr	r0, [r3, #0]
 80105b6:	f000 b853 	b.w	8010660 <_malloc_r>
 80105ba:	bf00      	nop
 80105bc:	20000014 	.word	0x20000014

080105c0 <_free_r>:
 80105c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80105c2:	2900      	cmp	r1, #0
 80105c4:	d048      	beq.n	8010658 <_free_r+0x98>
 80105c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80105ca:	9001      	str	r0, [sp, #4]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	f1a1 0404 	sub.w	r4, r1, #4
 80105d2:	bfb8      	it	lt
 80105d4:	18e4      	addlt	r4, r4, r3
 80105d6:	f000 ff5d 	bl	8011494 <__malloc_lock>
 80105da:	4a20      	ldr	r2, [pc, #128]	; (801065c <_free_r+0x9c>)
 80105dc:	9801      	ldr	r0, [sp, #4]
 80105de:	6813      	ldr	r3, [r2, #0]
 80105e0:	4615      	mov	r5, r2
 80105e2:	b933      	cbnz	r3, 80105f2 <_free_r+0x32>
 80105e4:	6063      	str	r3, [r4, #4]
 80105e6:	6014      	str	r4, [r2, #0]
 80105e8:	b003      	add	sp, #12
 80105ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80105ee:	f000 bf57 	b.w	80114a0 <__malloc_unlock>
 80105f2:	42a3      	cmp	r3, r4
 80105f4:	d90b      	bls.n	801060e <_free_r+0x4e>
 80105f6:	6821      	ldr	r1, [r4, #0]
 80105f8:	1862      	adds	r2, r4, r1
 80105fa:	4293      	cmp	r3, r2
 80105fc:	bf04      	itt	eq
 80105fe:	681a      	ldreq	r2, [r3, #0]
 8010600:	685b      	ldreq	r3, [r3, #4]
 8010602:	6063      	str	r3, [r4, #4]
 8010604:	bf04      	itt	eq
 8010606:	1852      	addeq	r2, r2, r1
 8010608:	6022      	streq	r2, [r4, #0]
 801060a:	602c      	str	r4, [r5, #0]
 801060c:	e7ec      	b.n	80105e8 <_free_r+0x28>
 801060e:	461a      	mov	r2, r3
 8010610:	685b      	ldr	r3, [r3, #4]
 8010612:	b10b      	cbz	r3, 8010618 <_free_r+0x58>
 8010614:	42a3      	cmp	r3, r4
 8010616:	d9fa      	bls.n	801060e <_free_r+0x4e>
 8010618:	6811      	ldr	r1, [r2, #0]
 801061a:	1855      	adds	r5, r2, r1
 801061c:	42a5      	cmp	r5, r4
 801061e:	d10b      	bne.n	8010638 <_free_r+0x78>
 8010620:	6824      	ldr	r4, [r4, #0]
 8010622:	4421      	add	r1, r4
 8010624:	1854      	adds	r4, r2, r1
 8010626:	42a3      	cmp	r3, r4
 8010628:	6011      	str	r1, [r2, #0]
 801062a:	d1dd      	bne.n	80105e8 <_free_r+0x28>
 801062c:	681c      	ldr	r4, [r3, #0]
 801062e:	685b      	ldr	r3, [r3, #4]
 8010630:	6053      	str	r3, [r2, #4]
 8010632:	4421      	add	r1, r4
 8010634:	6011      	str	r1, [r2, #0]
 8010636:	e7d7      	b.n	80105e8 <_free_r+0x28>
 8010638:	d902      	bls.n	8010640 <_free_r+0x80>
 801063a:	230c      	movs	r3, #12
 801063c:	6003      	str	r3, [r0, #0]
 801063e:	e7d3      	b.n	80105e8 <_free_r+0x28>
 8010640:	6825      	ldr	r5, [r4, #0]
 8010642:	1961      	adds	r1, r4, r5
 8010644:	428b      	cmp	r3, r1
 8010646:	bf04      	itt	eq
 8010648:	6819      	ldreq	r1, [r3, #0]
 801064a:	685b      	ldreq	r3, [r3, #4]
 801064c:	6063      	str	r3, [r4, #4]
 801064e:	bf04      	itt	eq
 8010650:	1949      	addeq	r1, r1, r5
 8010652:	6021      	streq	r1, [r4, #0]
 8010654:	6054      	str	r4, [r2, #4]
 8010656:	e7c7      	b.n	80105e8 <_free_r+0x28>
 8010658:	b003      	add	sp, #12
 801065a:	bd30      	pop	{r4, r5, pc}
 801065c:	2000020c 	.word	0x2000020c

08010660 <_malloc_r>:
 8010660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010662:	1ccd      	adds	r5, r1, #3
 8010664:	f025 0503 	bic.w	r5, r5, #3
 8010668:	3508      	adds	r5, #8
 801066a:	2d0c      	cmp	r5, #12
 801066c:	bf38      	it	cc
 801066e:	250c      	movcc	r5, #12
 8010670:	2d00      	cmp	r5, #0
 8010672:	4606      	mov	r6, r0
 8010674:	db01      	blt.n	801067a <_malloc_r+0x1a>
 8010676:	42a9      	cmp	r1, r5
 8010678:	d903      	bls.n	8010682 <_malloc_r+0x22>
 801067a:	230c      	movs	r3, #12
 801067c:	6033      	str	r3, [r6, #0]
 801067e:	2000      	movs	r0, #0
 8010680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010682:	f000 ff07 	bl	8011494 <__malloc_lock>
 8010686:	4921      	ldr	r1, [pc, #132]	; (801070c <_malloc_r+0xac>)
 8010688:	680a      	ldr	r2, [r1, #0]
 801068a:	4614      	mov	r4, r2
 801068c:	b99c      	cbnz	r4, 80106b6 <_malloc_r+0x56>
 801068e:	4f20      	ldr	r7, [pc, #128]	; (8010710 <_malloc_r+0xb0>)
 8010690:	683b      	ldr	r3, [r7, #0]
 8010692:	b923      	cbnz	r3, 801069e <_malloc_r+0x3e>
 8010694:	4621      	mov	r1, r4
 8010696:	4630      	mov	r0, r6
 8010698:	f000 fc86 	bl	8010fa8 <_sbrk_r>
 801069c:	6038      	str	r0, [r7, #0]
 801069e:	4629      	mov	r1, r5
 80106a0:	4630      	mov	r0, r6
 80106a2:	f000 fc81 	bl	8010fa8 <_sbrk_r>
 80106a6:	1c43      	adds	r3, r0, #1
 80106a8:	d123      	bne.n	80106f2 <_malloc_r+0x92>
 80106aa:	230c      	movs	r3, #12
 80106ac:	6033      	str	r3, [r6, #0]
 80106ae:	4630      	mov	r0, r6
 80106b0:	f000 fef6 	bl	80114a0 <__malloc_unlock>
 80106b4:	e7e3      	b.n	801067e <_malloc_r+0x1e>
 80106b6:	6823      	ldr	r3, [r4, #0]
 80106b8:	1b5b      	subs	r3, r3, r5
 80106ba:	d417      	bmi.n	80106ec <_malloc_r+0x8c>
 80106bc:	2b0b      	cmp	r3, #11
 80106be:	d903      	bls.n	80106c8 <_malloc_r+0x68>
 80106c0:	6023      	str	r3, [r4, #0]
 80106c2:	441c      	add	r4, r3
 80106c4:	6025      	str	r5, [r4, #0]
 80106c6:	e004      	b.n	80106d2 <_malloc_r+0x72>
 80106c8:	6863      	ldr	r3, [r4, #4]
 80106ca:	42a2      	cmp	r2, r4
 80106cc:	bf0c      	ite	eq
 80106ce:	600b      	streq	r3, [r1, #0]
 80106d0:	6053      	strne	r3, [r2, #4]
 80106d2:	4630      	mov	r0, r6
 80106d4:	f000 fee4 	bl	80114a0 <__malloc_unlock>
 80106d8:	f104 000b 	add.w	r0, r4, #11
 80106dc:	1d23      	adds	r3, r4, #4
 80106de:	f020 0007 	bic.w	r0, r0, #7
 80106e2:	1ac2      	subs	r2, r0, r3
 80106e4:	d0cc      	beq.n	8010680 <_malloc_r+0x20>
 80106e6:	1a1b      	subs	r3, r3, r0
 80106e8:	50a3      	str	r3, [r4, r2]
 80106ea:	e7c9      	b.n	8010680 <_malloc_r+0x20>
 80106ec:	4622      	mov	r2, r4
 80106ee:	6864      	ldr	r4, [r4, #4]
 80106f0:	e7cc      	b.n	801068c <_malloc_r+0x2c>
 80106f2:	1cc4      	adds	r4, r0, #3
 80106f4:	f024 0403 	bic.w	r4, r4, #3
 80106f8:	42a0      	cmp	r0, r4
 80106fa:	d0e3      	beq.n	80106c4 <_malloc_r+0x64>
 80106fc:	1a21      	subs	r1, r4, r0
 80106fe:	4630      	mov	r0, r6
 8010700:	f000 fc52 	bl	8010fa8 <_sbrk_r>
 8010704:	3001      	adds	r0, #1
 8010706:	d1dd      	bne.n	80106c4 <_malloc_r+0x64>
 8010708:	e7cf      	b.n	80106aa <_malloc_r+0x4a>
 801070a:	bf00      	nop
 801070c:	2000020c 	.word	0x2000020c
 8010710:	20000210 	.word	0x20000210

08010714 <__ssputs_r>:
 8010714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010718:	688e      	ldr	r6, [r1, #8]
 801071a:	429e      	cmp	r6, r3
 801071c:	4682      	mov	sl, r0
 801071e:	460c      	mov	r4, r1
 8010720:	4690      	mov	r8, r2
 8010722:	461f      	mov	r7, r3
 8010724:	d838      	bhi.n	8010798 <__ssputs_r+0x84>
 8010726:	898a      	ldrh	r2, [r1, #12]
 8010728:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801072c:	d032      	beq.n	8010794 <__ssputs_r+0x80>
 801072e:	6825      	ldr	r5, [r4, #0]
 8010730:	6909      	ldr	r1, [r1, #16]
 8010732:	eba5 0901 	sub.w	r9, r5, r1
 8010736:	6965      	ldr	r5, [r4, #20]
 8010738:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801073c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010740:	3301      	adds	r3, #1
 8010742:	444b      	add	r3, r9
 8010744:	106d      	asrs	r5, r5, #1
 8010746:	429d      	cmp	r5, r3
 8010748:	bf38      	it	cc
 801074a:	461d      	movcc	r5, r3
 801074c:	0553      	lsls	r3, r2, #21
 801074e:	d531      	bpl.n	80107b4 <__ssputs_r+0xa0>
 8010750:	4629      	mov	r1, r5
 8010752:	f7ff ff85 	bl	8010660 <_malloc_r>
 8010756:	4606      	mov	r6, r0
 8010758:	b950      	cbnz	r0, 8010770 <__ssputs_r+0x5c>
 801075a:	230c      	movs	r3, #12
 801075c:	f8ca 3000 	str.w	r3, [sl]
 8010760:	89a3      	ldrh	r3, [r4, #12]
 8010762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010766:	81a3      	strh	r3, [r4, #12]
 8010768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801076c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010770:	6921      	ldr	r1, [r4, #16]
 8010772:	464a      	mov	r2, r9
 8010774:	f7ff fc86 	bl	8010084 <memcpy>
 8010778:	89a3      	ldrh	r3, [r4, #12]
 801077a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801077e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010782:	81a3      	strh	r3, [r4, #12]
 8010784:	6126      	str	r6, [r4, #16]
 8010786:	6165      	str	r5, [r4, #20]
 8010788:	444e      	add	r6, r9
 801078a:	eba5 0509 	sub.w	r5, r5, r9
 801078e:	6026      	str	r6, [r4, #0]
 8010790:	60a5      	str	r5, [r4, #8]
 8010792:	463e      	mov	r6, r7
 8010794:	42be      	cmp	r6, r7
 8010796:	d900      	bls.n	801079a <__ssputs_r+0x86>
 8010798:	463e      	mov	r6, r7
 801079a:	4632      	mov	r2, r6
 801079c:	6820      	ldr	r0, [r4, #0]
 801079e:	4641      	mov	r1, r8
 80107a0:	f7ff fc7e 	bl	80100a0 <memmove>
 80107a4:	68a3      	ldr	r3, [r4, #8]
 80107a6:	6822      	ldr	r2, [r4, #0]
 80107a8:	1b9b      	subs	r3, r3, r6
 80107aa:	4432      	add	r2, r6
 80107ac:	60a3      	str	r3, [r4, #8]
 80107ae:	6022      	str	r2, [r4, #0]
 80107b0:	2000      	movs	r0, #0
 80107b2:	e7db      	b.n	801076c <__ssputs_r+0x58>
 80107b4:	462a      	mov	r2, r5
 80107b6:	f000 fe79 	bl	80114ac <_realloc_r>
 80107ba:	4606      	mov	r6, r0
 80107bc:	2800      	cmp	r0, #0
 80107be:	d1e1      	bne.n	8010784 <__ssputs_r+0x70>
 80107c0:	6921      	ldr	r1, [r4, #16]
 80107c2:	4650      	mov	r0, sl
 80107c4:	f7ff fefc 	bl	80105c0 <_free_r>
 80107c8:	e7c7      	b.n	801075a <__ssputs_r+0x46>
	...

080107cc <_svfiprintf_r>:
 80107cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107d0:	4698      	mov	r8, r3
 80107d2:	898b      	ldrh	r3, [r1, #12]
 80107d4:	061b      	lsls	r3, r3, #24
 80107d6:	b09d      	sub	sp, #116	; 0x74
 80107d8:	4607      	mov	r7, r0
 80107da:	460d      	mov	r5, r1
 80107dc:	4614      	mov	r4, r2
 80107de:	d50e      	bpl.n	80107fe <_svfiprintf_r+0x32>
 80107e0:	690b      	ldr	r3, [r1, #16]
 80107e2:	b963      	cbnz	r3, 80107fe <_svfiprintf_r+0x32>
 80107e4:	2140      	movs	r1, #64	; 0x40
 80107e6:	f7ff ff3b 	bl	8010660 <_malloc_r>
 80107ea:	6028      	str	r0, [r5, #0]
 80107ec:	6128      	str	r0, [r5, #16]
 80107ee:	b920      	cbnz	r0, 80107fa <_svfiprintf_r+0x2e>
 80107f0:	230c      	movs	r3, #12
 80107f2:	603b      	str	r3, [r7, #0]
 80107f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80107f8:	e0d1      	b.n	801099e <_svfiprintf_r+0x1d2>
 80107fa:	2340      	movs	r3, #64	; 0x40
 80107fc:	616b      	str	r3, [r5, #20]
 80107fe:	2300      	movs	r3, #0
 8010800:	9309      	str	r3, [sp, #36]	; 0x24
 8010802:	2320      	movs	r3, #32
 8010804:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010808:	f8cd 800c 	str.w	r8, [sp, #12]
 801080c:	2330      	movs	r3, #48	; 0x30
 801080e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80109b8 <_svfiprintf_r+0x1ec>
 8010812:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010816:	f04f 0901 	mov.w	r9, #1
 801081a:	4623      	mov	r3, r4
 801081c:	469a      	mov	sl, r3
 801081e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010822:	b10a      	cbz	r2, 8010828 <_svfiprintf_r+0x5c>
 8010824:	2a25      	cmp	r2, #37	; 0x25
 8010826:	d1f9      	bne.n	801081c <_svfiprintf_r+0x50>
 8010828:	ebba 0b04 	subs.w	fp, sl, r4
 801082c:	d00b      	beq.n	8010846 <_svfiprintf_r+0x7a>
 801082e:	465b      	mov	r3, fp
 8010830:	4622      	mov	r2, r4
 8010832:	4629      	mov	r1, r5
 8010834:	4638      	mov	r0, r7
 8010836:	f7ff ff6d 	bl	8010714 <__ssputs_r>
 801083a:	3001      	adds	r0, #1
 801083c:	f000 80aa 	beq.w	8010994 <_svfiprintf_r+0x1c8>
 8010840:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010842:	445a      	add	r2, fp
 8010844:	9209      	str	r2, [sp, #36]	; 0x24
 8010846:	f89a 3000 	ldrb.w	r3, [sl]
 801084a:	2b00      	cmp	r3, #0
 801084c:	f000 80a2 	beq.w	8010994 <_svfiprintf_r+0x1c8>
 8010850:	2300      	movs	r3, #0
 8010852:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010856:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801085a:	f10a 0a01 	add.w	sl, sl, #1
 801085e:	9304      	str	r3, [sp, #16]
 8010860:	9307      	str	r3, [sp, #28]
 8010862:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010866:	931a      	str	r3, [sp, #104]	; 0x68
 8010868:	4654      	mov	r4, sl
 801086a:	2205      	movs	r2, #5
 801086c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010870:	4851      	ldr	r0, [pc, #324]	; (80109b8 <_svfiprintf_r+0x1ec>)
 8010872:	f7ef fcb5 	bl	80001e0 <memchr>
 8010876:	9a04      	ldr	r2, [sp, #16]
 8010878:	b9d8      	cbnz	r0, 80108b2 <_svfiprintf_r+0xe6>
 801087a:	06d0      	lsls	r0, r2, #27
 801087c:	bf44      	itt	mi
 801087e:	2320      	movmi	r3, #32
 8010880:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010884:	0711      	lsls	r1, r2, #28
 8010886:	bf44      	itt	mi
 8010888:	232b      	movmi	r3, #43	; 0x2b
 801088a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801088e:	f89a 3000 	ldrb.w	r3, [sl]
 8010892:	2b2a      	cmp	r3, #42	; 0x2a
 8010894:	d015      	beq.n	80108c2 <_svfiprintf_r+0xf6>
 8010896:	9a07      	ldr	r2, [sp, #28]
 8010898:	4654      	mov	r4, sl
 801089a:	2000      	movs	r0, #0
 801089c:	f04f 0c0a 	mov.w	ip, #10
 80108a0:	4621      	mov	r1, r4
 80108a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80108a6:	3b30      	subs	r3, #48	; 0x30
 80108a8:	2b09      	cmp	r3, #9
 80108aa:	d94e      	bls.n	801094a <_svfiprintf_r+0x17e>
 80108ac:	b1b0      	cbz	r0, 80108dc <_svfiprintf_r+0x110>
 80108ae:	9207      	str	r2, [sp, #28]
 80108b0:	e014      	b.n	80108dc <_svfiprintf_r+0x110>
 80108b2:	eba0 0308 	sub.w	r3, r0, r8
 80108b6:	fa09 f303 	lsl.w	r3, r9, r3
 80108ba:	4313      	orrs	r3, r2
 80108bc:	9304      	str	r3, [sp, #16]
 80108be:	46a2      	mov	sl, r4
 80108c0:	e7d2      	b.n	8010868 <_svfiprintf_r+0x9c>
 80108c2:	9b03      	ldr	r3, [sp, #12]
 80108c4:	1d19      	adds	r1, r3, #4
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	9103      	str	r1, [sp, #12]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	bfbb      	ittet	lt
 80108ce:	425b      	neglt	r3, r3
 80108d0:	f042 0202 	orrlt.w	r2, r2, #2
 80108d4:	9307      	strge	r3, [sp, #28]
 80108d6:	9307      	strlt	r3, [sp, #28]
 80108d8:	bfb8      	it	lt
 80108da:	9204      	strlt	r2, [sp, #16]
 80108dc:	7823      	ldrb	r3, [r4, #0]
 80108de:	2b2e      	cmp	r3, #46	; 0x2e
 80108e0:	d10c      	bne.n	80108fc <_svfiprintf_r+0x130>
 80108e2:	7863      	ldrb	r3, [r4, #1]
 80108e4:	2b2a      	cmp	r3, #42	; 0x2a
 80108e6:	d135      	bne.n	8010954 <_svfiprintf_r+0x188>
 80108e8:	9b03      	ldr	r3, [sp, #12]
 80108ea:	1d1a      	adds	r2, r3, #4
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	9203      	str	r2, [sp, #12]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	bfb8      	it	lt
 80108f4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80108f8:	3402      	adds	r4, #2
 80108fa:	9305      	str	r3, [sp, #20]
 80108fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80109c8 <_svfiprintf_r+0x1fc>
 8010900:	7821      	ldrb	r1, [r4, #0]
 8010902:	2203      	movs	r2, #3
 8010904:	4650      	mov	r0, sl
 8010906:	f7ef fc6b 	bl	80001e0 <memchr>
 801090a:	b140      	cbz	r0, 801091e <_svfiprintf_r+0x152>
 801090c:	2340      	movs	r3, #64	; 0x40
 801090e:	eba0 000a 	sub.w	r0, r0, sl
 8010912:	fa03 f000 	lsl.w	r0, r3, r0
 8010916:	9b04      	ldr	r3, [sp, #16]
 8010918:	4303      	orrs	r3, r0
 801091a:	3401      	adds	r4, #1
 801091c:	9304      	str	r3, [sp, #16]
 801091e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010922:	4826      	ldr	r0, [pc, #152]	; (80109bc <_svfiprintf_r+0x1f0>)
 8010924:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010928:	2206      	movs	r2, #6
 801092a:	f7ef fc59 	bl	80001e0 <memchr>
 801092e:	2800      	cmp	r0, #0
 8010930:	d038      	beq.n	80109a4 <_svfiprintf_r+0x1d8>
 8010932:	4b23      	ldr	r3, [pc, #140]	; (80109c0 <_svfiprintf_r+0x1f4>)
 8010934:	bb1b      	cbnz	r3, 801097e <_svfiprintf_r+0x1b2>
 8010936:	9b03      	ldr	r3, [sp, #12]
 8010938:	3307      	adds	r3, #7
 801093a:	f023 0307 	bic.w	r3, r3, #7
 801093e:	3308      	adds	r3, #8
 8010940:	9303      	str	r3, [sp, #12]
 8010942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010944:	4433      	add	r3, r6
 8010946:	9309      	str	r3, [sp, #36]	; 0x24
 8010948:	e767      	b.n	801081a <_svfiprintf_r+0x4e>
 801094a:	fb0c 3202 	mla	r2, ip, r2, r3
 801094e:	460c      	mov	r4, r1
 8010950:	2001      	movs	r0, #1
 8010952:	e7a5      	b.n	80108a0 <_svfiprintf_r+0xd4>
 8010954:	2300      	movs	r3, #0
 8010956:	3401      	adds	r4, #1
 8010958:	9305      	str	r3, [sp, #20]
 801095a:	4619      	mov	r1, r3
 801095c:	f04f 0c0a 	mov.w	ip, #10
 8010960:	4620      	mov	r0, r4
 8010962:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010966:	3a30      	subs	r2, #48	; 0x30
 8010968:	2a09      	cmp	r2, #9
 801096a:	d903      	bls.n	8010974 <_svfiprintf_r+0x1a8>
 801096c:	2b00      	cmp	r3, #0
 801096e:	d0c5      	beq.n	80108fc <_svfiprintf_r+0x130>
 8010970:	9105      	str	r1, [sp, #20]
 8010972:	e7c3      	b.n	80108fc <_svfiprintf_r+0x130>
 8010974:	fb0c 2101 	mla	r1, ip, r1, r2
 8010978:	4604      	mov	r4, r0
 801097a:	2301      	movs	r3, #1
 801097c:	e7f0      	b.n	8010960 <_svfiprintf_r+0x194>
 801097e:	ab03      	add	r3, sp, #12
 8010980:	9300      	str	r3, [sp, #0]
 8010982:	462a      	mov	r2, r5
 8010984:	4b0f      	ldr	r3, [pc, #60]	; (80109c4 <_svfiprintf_r+0x1f8>)
 8010986:	a904      	add	r1, sp, #16
 8010988:	4638      	mov	r0, r7
 801098a:	f3af 8000 	nop.w
 801098e:	1c42      	adds	r2, r0, #1
 8010990:	4606      	mov	r6, r0
 8010992:	d1d6      	bne.n	8010942 <_svfiprintf_r+0x176>
 8010994:	89ab      	ldrh	r3, [r5, #12]
 8010996:	065b      	lsls	r3, r3, #25
 8010998:	f53f af2c 	bmi.w	80107f4 <_svfiprintf_r+0x28>
 801099c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801099e:	b01d      	add	sp, #116	; 0x74
 80109a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109a4:	ab03      	add	r3, sp, #12
 80109a6:	9300      	str	r3, [sp, #0]
 80109a8:	462a      	mov	r2, r5
 80109aa:	4b06      	ldr	r3, [pc, #24]	; (80109c4 <_svfiprintf_r+0x1f8>)
 80109ac:	a904      	add	r1, sp, #16
 80109ae:	4638      	mov	r0, r7
 80109b0:	f000 f9d4 	bl	8010d5c <_printf_i>
 80109b4:	e7eb      	b.n	801098e <_svfiprintf_r+0x1c2>
 80109b6:	bf00      	nop
 80109b8:	08014320 	.word	0x08014320
 80109bc:	0801432a 	.word	0x0801432a
 80109c0:	00000000 	.word	0x00000000
 80109c4:	08010715 	.word	0x08010715
 80109c8:	08014326 	.word	0x08014326

080109cc <__sfputc_r>:
 80109cc:	6893      	ldr	r3, [r2, #8]
 80109ce:	3b01      	subs	r3, #1
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	b410      	push	{r4}
 80109d4:	6093      	str	r3, [r2, #8]
 80109d6:	da08      	bge.n	80109ea <__sfputc_r+0x1e>
 80109d8:	6994      	ldr	r4, [r2, #24]
 80109da:	42a3      	cmp	r3, r4
 80109dc:	db01      	blt.n	80109e2 <__sfputc_r+0x16>
 80109de:	290a      	cmp	r1, #10
 80109e0:	d103      	bne.n	80109ea <__sfputc_r+0x1e>
 80109e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80109e6:	f000 bb33 	b.w	8011050 <__swbuf_r>
 80109ea:	6813      	ldr	r3, [r2, #0]
 80109ec:	1c58      	adds	r0, r3, #1
 80109ee:	6010      	str	r0, [r2, #0]
 80109f0:	7019      	strb	r1, [r3, #0]
 80109f2:	4608      	mov	r0, r1
 80109f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80109f8:	4770      	bx	lr

080109fa <__sfputs_r>:
 80109fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109fc:	4606      	mov	r6, r0
 80109fe:	460f      	mov	r7, r1
 8010a00:	4614      	mov	r4, r2
 8010a02:	18d5      	adds	r5, r2, r3
 8010a04:	42ac      	cmp	r4, r5
 8010a06:	d101      	bne.n	8010a0c <__sfputs_r+0x12>
 8010a08:	2000      	movs	r0, #0
 8010a0a:	e007      	b.n	8010a1c <__sfputs_r+0x22>
 8010a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a10:	463a      	mov	r2, r7
 8010a12:	4630      	mov	r0, r6
 8010a14:	f7ff ffda 	bl	80109cc <__sfputc_r>
 8010a18:	1c43      	adds	r3, r0, #1
 8010a1a:	d1f3      	bne.n	8010a04 <__sfputs_r+0xa>
 8010a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010a20 <_vfiprintf_r>:
 8010a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a24:	460d      	mov	r5, r1
 8010a26:	b09d      	sub	sp, #116	; 0x74
 8010a28:	4614      	mov	r4, r2
 8010a2a:	4698      	mov	r8, r3
 8010a2c:	4606      	mov	r6, r0
 8010a2e:	b118      	cbz	r0, 8010a38 <_vfiprintf_r+0x18>
 8010a30:	6983      	ldr	r3, [r0, #24]
 8010a32:	b90b      	cbnz	r3, 8010a38 <_vfiprintf_r+0x18>
 8010a34:	f7ff fd0a 	bl	801044c <__sinit>
 8010a38:	4b89      	ldr	r3, [pc, #548]	; (8010c60 <_vfiprintf_r+0x240>)
 8010a3a:	429d      	cmp	r5, r3
 8010a3c:	d11b      	bne.n	8010a76 <_vfiprintf_r+0x56>
 8010a3e:	6875      	ldr	r5, [r6, #4]
 8010a40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010a42:	07d9      	lsls	r1, r3, #31
 8010a44:	d405      	bmi.n	8010a52 <_vfiprintf_r+0x32>
 8010a46:	89ab      	ldrh	r3, [r5, #12]
 8010a48:	059a      	lsls	r2, r3, #22
 8010a4a:	d402      	bmi.n	8010a52 <_vfiprintf_r+0x32>
 8010a4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010a4e:	f7ff fdad 	bl	80105ac <__retarget_lock_acquire_recursive>
 8010a52:	89ab      	ldrh	r3, [r5, #12]
 8010a54:	071b      	lsls	r3, r3, #28
 8010a56:	d501      	bpl.n	8010a5c <_vfiprintf_r+0x3c>
 8010a58:	692b      	ldr	r3, [r5, #16]
 8010a5a:	b9eb      	cbnz	r3, 8010a98 <_vfiprintf_r+0x78>
 8010a5c:	4629      	mov	r1, r5
 8010a5e:	4630      	mov	r0, r6
 8010a60:	f000 fb5a 	bl	8011118 <__swsetup_r>
 8010a64:	b1c0      	cbz	r0, 8010a98 <_vfiprintf_r+0x78>
 8010a66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010a68:	07dc      	lsls	r4, r3, #31
 8010a6a:	d50e      	bpl.n	8010a8a <_vfiprintf_r+0x6a>
 8010a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010a70:	b01d      	add	sp, #116	; 0x74
 8010a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a76:	4b7b      	ldr	r3, [pc, #492]	; (8010c64 <_vfiprintf_r+0x244>)
 8010a78:	429d      	cmp	r5, r3
 8010a7a:	d101      	bne.n	8010a80 <_vfiprintf_r+0x60>
 8010a7c:	68b5      	ldr	r5, [r6, #8]
 8010a7e:	e7df      	b.n	8010a40 <_vfiprintf_r+0x20>
 8010a80:	4b79      	ldr	r3, [pc, #484]	; (8010c68 <_vfiprintf_r+0x248>)
 8010a82:	429d      	cmp	r5, r3
 8010a84:	bf08      	it	eq
 8010a86:	68f5      	ldreq	r5, [r6, #12]
 8010a88:	e7da      	b.n	8010a40 <_vfiprintf_r+0x20>
 8010a8a:	89ab      	ldrh	r3, [r5, #12]
 8010a8c:	0598      	lsls	r0, r3, #22
 8010a8e:	d4ed      	bmi.n	8010a6c <_vfiprintf_r+0x4c>
 8010a90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010a92:	f7ff fd8c 	bl	80105ae <__retarget_lock_release_recursive>
 8010a96:	e7e9      	b.n	8010a6c <_vfiprintf_r+0x4c>
 8010a98:	2300      	movs	r3, #0
 8010a9a:	9309      	str	r3, [sp, #36]	; 0x24
 8010a9c:	2320      	movs	r3, #32
 8010a9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010aa2:	f8cd 800c 	str.w	r8, [sp, #12]
 8010aa6:	2330      	movs	r3, #48	; 0x30
 8010aa8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010c6c <_vfiprintf_r+0x24c>
 8010aac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010ab0:	f04f 0901 	mov.w	r9, #1
 8010ab4:	4623      	mov	r3, r4
 8010ab6:	469a      	mov	sl, r3
 8010ab8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010abc:	b10a      	cbz	r2, 8010ac2 <_vfiprintf_r+0xa2>
 8010abe:	2a25      	cmp	r2, #37	; 0x25
 8010ac0:	d1f9      	bne.n	8010ab6 <_vfiprintf_r+0x96>
 8010ac2:	ebba 0b04 	subs.w	fp, sl, r4
 8010ac6:	d00b      	beq.n	8010ae0 <_vfiprintf_r+0xc0>
 8010ac8:	465b      	mov	r3, fp
 8010aca:	4622      	mov	r2, r4
 8010acc:	4629      	mov	r1, r5
 8010ace:	4630      	mov	r0, r6
 8010ad0:	f7ff ff93 	bl	80109fa <__sfputs_r>
 8010ad4:	3001      	adds	r0, #1
 8010ad6:	f000 80aa 	beq.w	8010c2e <_vfiprintf_r+0x20e>
 8010ada:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010adc:	445a      	add	r2, fp
 8010ade:	9209      	str	r2, [sp, #36]	; 0x24
 8010ae0:	f89a 3000 	ldrb.w	r3, [sl]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	f000 80a2 	beq.w	8010c2e <_vfiprintf_r+0x20e>
 8010aea:	2300      	movs	r3, #0
 8010aec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010af0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010af4:	f10a 0a01 	add.w	sl, sl, #1
 8010af8:	9304      	str	r3, [sp, #16]
 8010afa:	9307      	str	r3, [sp, #28]
 8010afc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010b00:	931a      	str	r3, [sp, #104]	; 0x68
 8010b02:	4654      	mov	r4, sl
 8010b04:	2205      	movs	r2, #5
 8010b06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b0a:	4858      	ldr	r0, [pc, #352]	; (8010c6c <_vfiprintf_r+0x24c>)
 8010b0c:	f7ef fb68 	bl	80001e0 <memchr>
 8010b10:	9a04      	ldr	r2, [sp, #16]
 8010b12:	b9d8      	cbnz	r0, 8010b4c <_vfiprintf_r+0x12c>
 8010b14:	06d1      	lsls	r1, r2, #27
 8010b16:	bf44      	itt	mi
 8010b18:	2320      	movmi	r3, #32
 8010b1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010b1e:	0713      	lsls	r3, r2, #28
 8010b20:	bf44      	itt	mi
 8010b22:	232b      	movmi	r3, #43	; 0x2b
 8010b24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010b28:	f89a 3000 	ldrb.w	r3, [sl]
 8010b2c:	2b2a      	cmp	r3, #42	; 0x2a
 8010b2e:	d015      	beq.n	8010b5c <_vfiprintf_r+0x13c>
 8010b30:	9a07      	ldr	r2, [sp, #28]
 8010b32:	4654      	mov	r4, sl
 8010b34:	2000      	movs	r0, #0
 8010b36:	f04f 0c0a 	mov.w	ip, #10
 8010b3a:	4621      	mov	r1, r4
 8010b3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010b40:	3b30      	subs	r3, #48	; 0x30
 8010b42:	2b09      	cmp	r3, #9
 8010b44:	d94e      	bls.n	8010be4 <_vfiprintf_r+0x1c4>
 8010b46:	b1b0      	cbz	r0, 8010b76 <_vfiprintf_r+0x156>
 8010b48:	9207      	str	r2, [sp, #28]
 8010b4a:	e014      	b.n	8010b76 <_vfiprintf_r+0x156>
 8010b4c:	eba0 0308 	sub.w	r3, r0, r8
 8010b50:	fa09 f303 	lsl.w	r3, r9, r3
 8010b54:	4313      	orrs	r3, r2
 8010b56:	9304      	str	r3, [sp, #16]
 8010b58:	46a2      	mov	sl, r4
 8010b5a:	e7d2      	b.n	8010b02 <_vfiprintf_r+0xe2>
 8010b5c:	9b03      	ldr	r3, [sp, #12]
 8010b5e:	1d19      	adds	r1, r3, #4
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	9103      	str	r1, [sp, #12]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	bfbb      	ittet	lt
 8010b68:	425b      	neglt	r3, r3
 8010b6a:	f042 0202 	orrlt.w	r2, r2, #2
 8010b6e:	9307      	strge	r3, [sp, #28]
 8010b70:	9307      	strlt	r3, [sp, #28]
 8010b72:	bfb8      	it	lt
 8010b74:	9204      	strlt	r2, [sp, #16]
 8010b76:	7823      	ldrb	r3, [r4, #0]
 8010b78:	2b2e      	cmp	r3, #46	; 0x2e
 8010b7a:	d10c      	bne.n	8010b96 <_vfiprintf_r+0x176>
 8010b7c:	7863      	ldrb	r3, [r4, #1]
 8010b7e:	2b2a      	cmp	r3, #42	; 0x2a
 8010b80:	d135      	bne.n	8010bee <_vfiprintf_r+0x1ce>
 8010b82:	9b03      	ldr	r3, [sp, #12]
 8010b84:	1d1a      	adds	r2, r3, #4
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	9203      	str	r2, [sp, #12]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	bfb8      	it	lt
 8010b8e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010b92:	3402      	adds	r4, #2
 8010b94:	9305      	str	r3, [sp, #20]
 8010b96:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010c7c <_vfiprintf_r+0x25c>
 8010b9a:	7821      	ldrb	r1, [r4, #0]
 8010b9c:	2203      	movs	r2, #3
 8010b9e:	4650      	mov	r0, sl
 8010ba0:	f7ef fb1e 	bl	80001e0 <memchr>
 8010ba4:	b140      	cbz	r0, 8010bb8 <_vfiprintf_r+0x198>
 8010ba6:	2340      	movs	r3, #64	; 0x40
 8010ba8:	eba0 000a 	sub.w	r0, r0, sl
 8010bac:	fa03 f000 	lsl.w	r0, r3, r0
 8010bb0:	9b04      	ldr	r3, [sp, #16]
 8010bb2:	4303      	orrs	r3, r0
 8010bb4:	3401      	adds	r4, #1
 8010bb6:	9304      	str	r3, [sp, #16]
 8010bb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010bbc:	482c      	ldr	r0, [pc, #176]	; (8010c70 <_vfiprintf_r+0x250>)
 8010bbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010bc2:	2206      	movs	r2, #6
 8010bc4:	f7ef fb0c 	bl	80001e0 <memchr>
 8010bc8:	2800      	cmp	r0, #0
 8010bca:	d03f      	beq.n	8010c4c <_vfiprintf_r+0x22c>
 8010bcc:	4b29      	ldr	r3, [pc, #164]	; (8010c74 <_vfiprintf_r+0x254>)
 8010bce:	bb1b      	cbnz	r3, 8010c18 <_vfiprintf_r+0x1f8>
 8010bd0:	9b03      	ldr	r3, [sp, #12]
 8010bd2:	3307      	adds	r3, #7
 8010bd4:	f023 0307 	bic.w	r3, r3, #7
 8010bd8:	3308      	adds	r3, #8
 8010bda:	9303      	str	r3, [sp, #12]
 8010bdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010bde:	443b      	add	r3, r7
 8010be0:	9309      	str	r3, [sp, #36]	; 0x24
 8010be2:	e767      	b.n	8010ab4 <_vfiprintf_r+0x94>
 8010be4:	fb0c 3202 	mla	r2, ip, r2, r3
 8010be8:	460c      	mov	r4, r1
 8010bea:	2001      	movs	r0, #1
 8010bec:	e7a5      	b.n	8010b3a <_vfiprintf_r+0x11a>
 8010bee:	2300      	movs	r3, #0
 8010bf0:	3401      	adds	r4, #1
 8010bf2:	9305      	str	r3, [sp, #20]
 8010bf4:	4619      	mov	r1, r3
 8010bf6:	f04f 0c0a 	mov.w	ip, #10
 8010bfa:	4620      	mov	r0, r4
 8010bfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010c00:	3a30      	subs	r2, #48	; 0x30
 8010c02:	2a09      	cmp	r2, #9
 8010c04:	d903      	bls.n	8010c0e <_vfiprintf_r+0x1ee>
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d0c5      	beq.n	8010b96 <_vfiprintf_r+0x176>
 8010c0a:	9105      	str	r1, [sp, #20]
 8010c0c:	e7c3      	b.n	8010b96 <_vfiprintf_r+0x176>
 8010c0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010c12:	4604      	mov	r4, r0
 8010c14:	2301      	movs	r3, #1
 8010c16:	e7f0      	b.n	8010bfa <_vfiprintf_r+0x1da>
 8010c18:	ab03      	add	r3, sp, #12
 8010c1a:	9300      	str	r3, [sp, #0]
 8010c1c:	462a      	mov	r2, r5
 8010c1e:	4b16      	ldr	r3, [pc, #88]	; (8010c78 <_vfiprintf_r+0x258>)
 8010c20:	a904      	add	r1, sp, #16
 8010c22:	4630      	mov	r0, r6
 8010c24:	f3af 8000 	nop.w
 8010c28:	4607      	mov	r7, r0
 8010c2a:	1c78      	adds	r0, r7, #1
 8010c2c:	d1d6      	bne.n	8010bdc <_vfiprintf_r+0x1bc>
 8010c2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010c30:	07d9      	lsls	r1, r3, #31
 8010c32:	d405      	bmi.n	8010c40 <_vfiprintf_r+0x220>
 8010c34:	89ab      	ldrh	r3, [r5, #12]
 8010c36:	059a      	lsls	r2, r3, #22
 8010c38:	d402      	bmi.n	8010c40 <_vfiprintf_r+0x220>
 8010c3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010c3c:	f7ff fcb7 	bl	80105ae <__retarget_lock_release_recursive>
 8010c40:	89ab      	ldrh	r3, [r5, #12]
 8010c42:	065b      	lsls	r3, r3, #25
 8010c44:	f53f af12 	bmi.w	8010a6c <_vfiprintf_r+0x4c>
 8010c48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010c4a:	e711      	b.n	8010a70 <_vfiprintf_r+0x50>
 8010c4c:	ab03      	add	r3, sp, #12
 8010c4e:	9300      	str	r3, [sp, #0]
 8010c50:	462a      	mov	r2, r5
 8010c52:	4b09      	ldr	r3, [pc, #36]	; (8010c78 <_vfiprintf_r+0x258>)
 8010c54:	a904      	add	r1, sp, #16
 8010c56:	4630      	mov	r0, r6
 8010c58:	f000 f880 	bl	8010d5c <_printf_i>
 8010c5c:	e7e4      	b.n	8010c28 <_vfiprintf_r+0x208>
 8010c5e:	bf00      	nop
 8010c60:	080142e0 	.word	0x080142e0
 8010c64:	08014300 	.word	0x08014300
 8010c68:	080142c0 	.word	0x080142c0
 8010c6c:	08014320 	.word	0x08014320
 8010c70:	0801432a 	.word	0x0801432a
 8010c74:	00000000 	.word	0x00000000
 8010c78:	080109fb 	.word	0x080109fb
 8010c7c:	08014326 	.word	0x08014326

08010c80 <_printf_common>:
 8010c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c84:	4616      	mov	r6, r2
 8010c86:	4699      	mov	r9, r3
 8010c88:	688a      	ldr	r2, [r1, #8]
 8010c8a:	690b      	ldr	r3, [r1, #16]
 8010c8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010c90:	4293      	cmp	r3, r2
 8010c92:	bfb8      	it	lt
 8010c94:	4613      	movlt	r3, r2
 8010c96:	6033      	str	r3, [r6, #0]
 8010c98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010c9c:	4607      	mov	r7, r0
 8010c9e:	460c      	mov	r4, r1
 8010ca0:	b10a      	cbz	r2, 8010ca6 <_printf_common+0x26>
 8010ca2:	3301      	adds	r3, #1
 8010ca4:	6033      	str	r3, [r6, #0]
 8010ca6:	6823      	ldr	r3, [r4, #0]
 8010ca8:	0699      	lsls	r1, r3, #26
 8010caa:	bf42      	ittt	mi
 8010cac:	6833      	ldrmi	r3, [r6, #0]
 8010cae:	3302      	addmi	r3, #2
 8010cb0:	6033      	strmi	r3, [r6, #0]
 8010cb2:	6825      	ldr	r5, [r4, #0]
 8010cb4:	f015 0506 	ands.w	r5, r5, #6
 8010cb8:	d106      	bne.n	8010cc8 <_printf_common+0x48>
 8010cba:	f104 0a19 	add.w	sl, r4, #25
 8010cbe:	68e3      	ldr	r3, [r4, #12]
 8010cc0:	6832      	ldr	r2, [r6, #0]
 8010cc2:	1a9b      	subs	r3, r3, r2
 8010cc4:	42ab      	cmp	r3, r5
 8010cc6:	dc26      	bgt.n	8010d16 <_printf_common+0x96>
 8010cc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010ccc:	1e13      	subs	r3, r2, #0
 8010cce:	6822      	ldr	r2, [r4, #0]
 8010cd0:	bf18      	it	ne
 8010cd2:	2301      	movne	r3, #1
 8010cd4:	0692      	lsls	r2, r2, #26
 8010cd6:	d42b      	bmi.n	8010d30 <_printf_common+0xb0>
 8010cd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010cdc:	4649      	mov	r1, r9
 8010cde:	4638      	mov	r0, r7
 8010ce0:	47c0      	blx	r8
 8010ce2:	3001      	adds	r0, #1
 8010ce4:	d01e      	beq.n	8010d24 <_printf_common+0xa4>
 8010ce6:	6823      	ldr	r3, [r4, #0]
 8010ce8:	68e5      	ldr	r5, [r4, #12]
 8010cea:	6832      	ldr	r2, [r6, #0]
 8010cec:	f003 0306 	and.w	r3, r3, #6
 8010cf0:	2b04      	cmp	r3, #4
 8010cf2:	bf08      	it	eq
 8010cf4:	1aad      	subeq	r5, r5, r2
 8010cf6:	68a3      	ldr	r3, [r4, #8]
 8010cf8:	6922      	ldr	r2, [r4, #16]
 8010cfa:	bf0c      	ite	eq
 8010cfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010d00:	2500      	movne	r5, #0
 8010d02:	4293      	cmp	r3, r2
 8010d04:	bfc4      	itt	gt
 8010d06:	1a9b      	subgt	r3, r3, r2
 8010d08:	18ed      	addgt	r5, r5, r3
 8010d0a:	2600      	movs	r6, #0
 8010d0c:	341a      	adds	r4, #26
 8010d0e:	42b5      	cmp	r5, r6
 8010d10:	d11a      	bne.n	8010d48 <_printf_common+0xc8>
 8010d12:	2000      	movs	r0, #0
 8010d14:	e008      	b.n	8010d28 <_printf_common+0xa8>
 8010d16:	2301      	movs	r3, #1
 8010d18:	4652      	mov	r2, sl
 8010d1a:	4649      	mov	r1, r9
 8010d1c:	4638      	mov	r0, r7
 8010d1e:	47c0      	blx	r8
 8010d20:	3001      	adds	r0, #1
 8010d22:	d103      	bne.n	8010d2c <_printf_common+0xac>
 8010d24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d2c:	3501      	adds	r5, #1
 8010d2e:	e7c6      	b.n	8010cbe <_printf_common+0x3e>
 8010d30:	18e1      	adds	r1, r4, r3
 8010d32:	1c5a      	adds	r2, r3, #1
 8010d34:	2030      	movs	r0, #48	; 0x30
 8010d36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010d3a:	4422      	add	r2, r4
 8010d3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010d40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010d44:	3302      	adds	r3, #2
 8010d46:	e7c7      	b.n	8010cd8 <_printf_common+0x58>
 8010d48:	2301      	movs	r3, #1
 8010d4a:	4622      	mov	r2, r4
 8010d4c:	4649      	mov	r1, r9
 8010d4e:	4638      	mov	r0, r7
 8010d50:	47c0      	blx	r8
 8010d52:	3001      	adds	r0, #1
 8010d54:	d0e6      	beq.n	8010d24 <_printf_common+0xa4>
 8010d56:	3601      	adds	r6, #1
 8010d58:	e7d9      	b.n	8010d0e <_printf_common+0x8e>
	...

08010d5c <_printf_i>:
 8010d5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010d60:	460c      	mov	r4, r1
 8010d62:	4691      	mov	r9, r2
 8010d64:	7e27      	ldrb	r7, [r4, #24]
 8010d66:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010d68:	2f78      	cmp	r7, #120	; 0x78
 8010d6a:	4680      	mov	r8, r0
 8010d6c:	469a      	mov	sl, r3
 8010d6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010d72:	d807      	bhi.n	8010d84 <_printf_i+0x28>
 8010d74:	2f62      	cmp	r7, #98	; 0x62
 8010d76:	d80a      	bhi.n	8010d8e <_printf_i+0x32>
 8010d78:	2f00      	cmp	r7, #0
 8010d7a:	f000 80d8 	beq.w	8010f2e <_printf_i+0x1d2>
 8010d7e:	2f58      	cmp	r7, #88	; 0x58
 8010d80:	f000 80a3 	beq.w	8010eca <_printf_i+0x16e>
 8010d84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010d88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010d8c:	e03a      	b.n	8010e04 <_printf_i+0xa8>
 8010d8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010d92:	2b15      	cmp	r3, #21
 8010d94:	d8f6      	bhi.n	8010d84 <_printf_i+0x28>
 8010d96:	a001      	add	r0, pc, #4	; (adr r0, 8010d9c <_printf_i+0x40>)
 8010d98:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010d9c:	08010df5 	.word	0x08010df5
 8010da0:	08010e09 	.word	0x08010e09
 8010da4:	08010d85 	.word	0x08010d85
 8010da8:	08010d85 	.word	0x08010d85
 8010dac:	08010d85 	.word	0x08010d85
 8010db0:	08010d85 	.word	0x08010d85
 8010db4:	08010e09 	.word	0x08010e09
 8010db8:	08010d85 	.word	0x08010d85
 8010dbc:	08010d85 	.word	0x08010d85
 8010dc0:	08010d85 	.word	0x08010d85
 8010dc4:	08010d85 	.word	0x08010d85
 8010dc8:	08010f15 	.word	0x08010f15
 8010dcc:	08010e39 	.word	0x08010e39
 8010dd0:	08010ef7 	.word	0x08010ef7
 8010dd4:	08010d85 	.word	0x08010d85
 8010dd8:	08010d85 	.word	0x08010d85
 8010ddc:	08010f37 	.word	0x08010f37
 8010de0:	08010d85 	.word	0x08010d85
 8010de4:	08010e39 	.word	0x08010e39
 8010de8:	08010d85 	.word	0x08010d85
 8010dec:	08010d85 	.word	0x08010d85
 8010df0:	08010eff 	.word	0x08010eff
 8010df4:	680b      	ldr	r3, [r1, #0]
 8010df6:	1d1a      	adds	r2, r3, #4
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	600a      	str	r2, [r1, #0]
 8010dfc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010e00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010e04:	2301      	movs	r3, #1
 8010e06:	e0a3      	b.n	8010f50 <_printf_i+0x1f4>
 8010e08:	6825      	ldr	r5, [r4, #0]
 8010e0a:	6808      	ldr	r0, [r1, #0]
 8010e0c:	062e      	lsls	r6, r5, #24
 8010e0e:	f100 0304 	add.w	r3, r0, #4
 8010e12:	d50a      	bpl.n	8010e2a <_printf_i+0xce>
 8010e14:	6805      	ldr	r5, [r0, #0]
 8010e16:	600b      	str	r3, [r1, #0]
 8010e18:	2d00      	cmp	r5, #0
 8010e1a:	da03      	bge.n	8010e24 <_printf_i+0xc8>
 8010e1c:	232d      	movs	r3, #45	; 0x2d
 8010e1e:	426d      	negs	r5, r5
 8010e20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010e24:	485e      	ldr	r0, [pc, #376]	; (8010fa0 <_printf_i+0x244>)
 8010e26:	230a      	movs	r3, #10
 8010e28:	e019      	b.n	8010e5e <_printf_i+0x102>
 8010e2a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010e2e:	6805      	ldr	r5, [r0, #0]
 8010e30:	600b      	str	r3, [r1, #0]
 8010e32:	bf18      	it	ne
 8010e34:	b22d      	sxthne	r5, r5
 8010e36:	e7ef      	b.n	8010e18 <_printf_i+0xbc>
 8010e38:	680b      	ldr	r3, [r1, #0]
 8010e3a:	6825      	ldr	r5, [r4, #0]
 8010e3c:	1d18      	adds	r0, r3, #4
 8010e3e:	6008      	str	r0, [r1, #0]
 8010e40:	0628      	lsls	r0, r5, #24
 8010e42:	d501      	bpl.n	8010e48 <_printf_i+0xec>
 8010e44:	681d      	ldr	r5, [r3, #0]
 8010e46:	e002      	b.n	8010e4e <_printf_i+0xf2>
 8010e48:	0669      	lsls	r1, r5, #25
 8010e4a:	d5fb      	bpl.n	8010e44 <_printf_i+0xe8>
 8010e4c:	881d      	ldrh	r5, [r3, #0]
 8010e4e:	4854      	ldr	r0, [pc, #336]	; (8010fa0 <_printf_i+0x244>)
 8010e50:	2f6f      	cmp	r7, #111	; 0x6f
 8010e52:	bf0c      	ite	eq
 8010e54:	2308      	moveq	r3, #8
 8010e56:	230a      	movne	r3, #10
 8010e58:	2100      	movs	r1, #0
 8010e5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010e5e:	6866      	ldr	r6, [r4, #4]
 8010e60:	60a6      	str	r6, [r4, #8]
 8010e62:	2e00      	cmp	r6, #0
 8010e64:	bfa2      	ittt	ge
 8010e66:	6821      	ldrge	r1, [r4, #0]
 8010e68:	f021 0104 	bicge.w	r1, r1, #4
 8010e6c:	6021      	strge	r1, [r4, #0]
 8010e6e:	b90d      	cbnz	r5, 8010e74 <_printf_i+0x118>
 8010e70:	2e00      	cmp	r6, #0
 8010e72:	d04d      	beq.n	8010f10 <_printf_i+0x1b4>
 8010e74:	4616      	mov	r6, r2
 8010e76:	fbb5 f1f3 	udiv	r1, r5, r3
 8010e7a:	fb03 5711 	mls	r7, r3, r1, r5
 8010e7e:	5dc7      	ldrb	r7, [r0, r7]
 8010e80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010e84:	462f      	mov	r7, r5
 8010e86:	42bb      	cmp	r3, r7
 8010e88:	460d      	mov	r5, r1
 8010e8a:	d9f4      	bls.n	8010e76 <_printf_i+0x11a>
 8010e8c:	2b08      	cmp	r3, #8
 8010e8e:	d10b      	bne.n	8010ea8 <_printf_i+0x14c>
 8010e90:	6823      	ldr	r3, [r4, #0]
 8010e92:	07df      	lsls	r7, r3, #31
 8010e94:	d508      	bpl.n	8010ea8 <_printf_i+0x14c>
 8010e96:	6923      	ldr	r3, [r4, #16]
 8010e98:	6861      	ldr	r1, [r4, #4]
 8010e9a:	4299      	cmp	r1, r3
 8010e9c:	bfde      	ittt	le
 8010e9e:	2330      	movle	r3, #48	; 0x30
 8010ea0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010ea4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8010ea8:	1b92      	subs	r2, r2, r6
 8010eaa:	6122      	str	r2, [r4, #16]
 8010eac:	f8cd a000 	str.w	sl, [sp]
 8010eb0:	464b      	mov	r3, r9
 8010eb2:	aa03      	add	r2, sp, #12
 8010eb4:	4621      	mov	r1, r4
 8010eb6:	4640      	mov	r0, r8
 8010eb8:	f7ff fee2 	bl	8010c80 <_printf_common>
 8010ebc:	3001      	adds	r0, #1
 8010ebe:	d14c      	bne.n	8010f5a <_printf_i+0x1fe>
 8010ec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010ec4:	b004      	add	sp, #16
 8010ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010eca:	4835      	ldr	r0, [pc, #212]	; (8010fa0 <_printf_i+0x244>)
 8010ecc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010ed0:	6823      	ldr	r3, [r4, #0]
 8010ed2:	680e      	ldr	r6, [r1, #0]
 8010ed4:	061f      	lsls	r7, r3, #24
 8010ed6:	f856 5b04 	ldr.w	r5, [r6], #4
 8010eda:	600e      	str	r6, [r1, #0]
 8010edc:	d514      	bpl.n	8010f08 <_printf_i+0x1ac>
 8010ede:	07d9      	lsls	r1, r3, #31
 8010ee0:	bf44      	itt	mi
 8010ee2:	f043 0320 	orrmi.w	r3, r3, #32
 8010ee6:	6023      	strmi	r3, [r4, #0]
 8010ee8:	b91d      	cbnz	r5, 8010ef2 <_printf_i+0x196>
 8010eea:	6823      	ldr	r3, [r4, #0]
 8010eec:	f023 0320 	bic.w	r3, r3, #32
 8010ef0:	6023      	str	r3, [r4, #0]
 8010ef2:	2310      	movs	r3, #16
 8010ef4:	e7b0      	b.n	8010e58 <_printf_i+0xfc>
 8010ef6:	6823      	ldr	r3, [r4, #0]
 8010ef8:	f043 0320 	orr.w	r3, r3, #32
 8010efc:	6023      	str	r3, [r4, #0]
 8010efe:	2378      	movs	r3, #120	; 0x78
 8010f00:	4828      	ldr	r0, [pc, #160]	; (8010fa4 <_printf_i+0x248>)
 8010f02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010f06:	e7e3      	b.n	8010ed0 <_printf_i+0x174>
 8010f08:	065e      	lsls	r6, r3, #25
 8010f0a:	bf48      	it	mi
 8010f0c:	b2ad      	uxthmi	r5, r5
 8010f0e:	e7e6      	b.n	8010ede <_printf_i+0x182>
 8010f10:	4616      	mov	r6, r2
 8010f12:	e7bb      	b.n	8010e8c <_printf_i+0x130>
 8010f14:	680b      	ldr	r3, [r1, #0]
 8010f16:	6826      	ldr	r6, [r4, #0]
 8010f18:	6960      	ldr	r0, [r4, #20]
 8010f1a:	1d1d      	adds	r5, r3, #4
 8010f1c:	600d      	str	r5, [r1, #0]
 8010f1e:	0635      	lsls	r5, r6, #24
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	d501      	bpl.n	8010f28 <_printf_i+0x1cc>
 8010f24:	6018      	str	r0, [r3, #0]
 8010f26:	e002      	b.n	8010f2e <_printf_i+0x1d2>
 8010f28:	0671      	lsls	r1, r6, #25
 8010f2a:	d5fb      	bpl.n	8010f24 <_printf_i+0x1c8>
 8010f2c:	8018      	strh	r0, [r3, #0]
 8010f2e:	2300      	movs	r3, #0
 8010f30:	6123      	str	r3, [r4, #16]
 8010f32:	4616      	mov	r6, r2
 8010f34:	e7ba      	b.n	8010eac <_printf_i+0x150>
 8010f36:	680b      	ldr	r3, [r1, #0]
 8010f38:	1d1a      	adds	r2, r3, #4
 8010f3a:	600a      	str	r2, [r1, #0]
 8010f3c:	681e      	ldr	r6, [r3, #0]
 8010f3e:	6862      	ldr	r2, [r4, #4]
 8010f40:	2100      	movs	r1, #0
 8010f42:	4630      	mov	r0, r6
 8010f44:	f7ef f94c 	bl	80001e0 <memchr>
 8010f48:	b108      	cbz	r0, 8010f4e <_printf_i+0x1f2>
 8010f4a:	1b80      	subs	r0, r0, r6
 8010f4c:	6060      	str	r0, [r4, #4]
 8010f4e:	6863      	ldr	r3, [r4, #4]
 8010f50:	6123      	str	r3, [r4, #16]
 8010f52:	2300      	movs	r3, #0
 8010f54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010f58:	e7a8      	b.n	8010eac <_printf_i+0x150>
 8010f5a:	6923      	ldr	r3, [r4, #16]
 8010f5c:	4632      	mov	r2, r6
 8010f5e:	4649      	mov	r1, r9
 8010f60:	4640      	mov	r0, r8
 8010f62:	47d0      	blx	sl
 8010f64:	3001      	adds	r0, #1
 8010f66:	d0ab      	beq.n	8010ec0 <_printf_i+0x164>
 8010f68:	6823      	ldr	r3, [r4, #0]
 8010f6a:	079b      	lsls	r3, r3, #30
 8010f6c:	d413      	bmi.n	8010f96 <_printf_i+0x23a>
 8010f6e:	68e0      	ldr	r0, [r4, #12]
 8010f70:	9b03      	ldr	r3, [sp, #12]
 8010f72:	4298      	cmp	r0, r3
 8010f74:	bfb8      	it	lt
 8010f76:	4618      	movlt	r0, r3
 8010f78:	e7a4      	b.n	8010ec4 <_printf_i+0x168>
 8010f7a:	2301      	movs	r3, #1
 8010f7c:	4632      	mov	r2, r6
 8010f7e:	4649      	mov	r1, r9
 8010f80:	4640      	mov	r0, r8
 8010f82:	47d0      	blx	sl
 8010f84:	3001      	adds	r0, #1
 8010f86:	d09b      	beq.n	8010ec0 <_printf_i+0x164>
 8010f88:	3501      	adds	r5, #1
 8010f8a:	68e3      	ldr	r3, [r4, #12]
 8010f8c:	9903      	ldr	r1, [sp, #12]
 8010f8e:	1a5b      	subs	r3, r3, r1
 8010f90:	42ab      	cmp	r3, r5
 8010f92:	dcf2      	bgt.n	8010f7a <_printf_i+0x21e>
 8010f94:	e7eb      	b.n	8010f6e <_printf_i+0x212>
 8010f96:	2500      	movs	r5, #0
 8010f98:	f104 0619 	add.w	r6, r4, #25
 8010f9c:	e7f5      	b.n	8010f8a <_printf_i+0x22e>
 8010f9e:	bf00      	nop
 8010fa0:	08014331 	.word	0x08014331
 8010fa4:	08014342 	.word	0x08014342

08010fa8 <_sbrk_r>:
 8010fa8:	b538      	push	{r3, r4, r5, lr}
 8010faa:	4d06      	ldr	r5, [pc, #24]	; (8010fc4 <_sbrk_r+0x1c>)
 8010fac:	2300      	movs	r3, #0
 8010fae:	4604      	mov	r4, r0
 8010fb0:	4608      	mov	r0, r1
 8010fb2:	602b      	str	r3, [r5, #0]
 8010fb4:	f7f0 f9f8 	bl	80013a8 <_sbrk>
 8010fb8:	1c43      	adds	r3, r0, #1
 8010fba:	d102      	bne.n	8010fc2 <_sbrk_r+0x1a>
 8010fbc:	682b      	ldr	r3, [r5, #0]
 8010fbe:	b103      	cbz	r3, 8010fc2 <_sbrk_r+0x1a>
 8010fc0:	6023      	str	r3, [r4, #0]
 8010fc2:	bd38      	pop	{r3, r4, r5, pc}
 8010fc4:	20006610 	.word	0x20006610

08010fc8 <__sread>:
 8010fc8:	b510      	push	{r4, lr}
 8010fca:	460c      	mov	r4, r1
 8010fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fd0:	f000 fa92 	bl	80114f8 <_read_r>
 8010fd4:	2800      	cmp	r0, #0
 8010fd6:	bfab      	itete	ge
 8010fd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010fda:	89a3      	ldrhlt	r3, [r4, #12]
 8010fdc:	181b      	addge	r3, r3, r0
 8010fde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010fe2:	bfac      	ite	ge
 8010fe4:	6563      	strge	r3, [r4, #84]	; 0x54
 8010fe6:	81a3      	strhlt	r3, [r4, #12]
 8010fe8:	bd10      	pop	{r4, pc}

08010fea <__swrite>:
 8010fea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fee:	461f      	mov	r7, r3
 8010ff0:	898b      	ldrh	r3, [r1, #12]
 8010ff2:	05db      	lsls	r3, r3, #23
 8010ff4:	4605      	mov	r5, r0
 8010ff6:	460c      	mov	r4, r1
 8010ff8:	4616      	mov	r6, r2
 8010ffa:	d505      	bpl.n	8011008 <__swrite+0x1e>
 8010ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011000:	2302      	movs	r3, #2
 8011002:	2200      	movs	r2, #0
 8011004:	f000 f9d0 	bl	80113a8 <_lseek_r>
 8011008:	89a3      	ldrh	r3, [r4, #12]
 801100a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801100e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011012:	81a3      	strh	r3, [r4, #12]
 8011014:	4632      	mov	r2, r6
 8011016:	463b      	mov	r3, r7
 8011018:	4628      	mov	r0, r5
 801101a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801101e:	f000 b869 	b.w	80110f4 <_write_r>

08011022 <__sseek>:
 8011022:	b510      	push	{r4, lr}
 8011024:	460c      	mov	r4, r1
 8011026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801102a:	f000 f9bd 	bl	80113a8 <_lseek_r>
 801102e:	1c43      	adds	r3, r0, #1
 8011030:	89a3      	ldrh	r3, [r4, #12]
 8011032:	bf15      	itete	ne
 8011034:	6560      	strne	r0, [r4, #84]	; 0x54
 8011036:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801103a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801103e:	81a3      	strheq	r3, [r4, #12]
 8011040:	bf18      	it	ne
 8011042:	81a3      	strhne	r3, [r4, #12]
 8011044:	bd10      	pop	{r4, pc}

08011046 <__sclose>:
 8011046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801104a:	f000 b8db 	b.w	8011204 <_close_r>
	...

08011050 <__swbuf_r>:
 8011050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011052:	460e      	mov	r6, r1
 8011054:	4614      	mov	r4, r2
 8011056:	4605      	mov	r5, r0
 8011058:	b118      	cbz	r0, 8011062 <__swbuf_r+0x12>
 801105a:	6983      	ldr	r3, [r0, #24]
 801105c:	b90b      	cbnz	r3, 8011062 <__swbuf_r+0x12>
 801105e:	f7ff f9f5 	bl	801044c <__sinit>
 8011062:	4b21      	ldr	r3, [pc, #132]	; (80110e8 <__swbuf_r+0x98>)
 8011064:	429c      	cmp	r4, r3
 8011066:	d12b      	bne.n	80110c0 <__swbuf_r+0x70>
 8011068:	686c      	ldr	r4, [r5, #4]
 801106a:	69a3      	ldr	r3, [r4, #24]
 801106c:	60a3      	str	r3, [r4, #8]
 801106e:	89a3      	ldrh	r3, [r4, #12]
 8011070:	071a      	lsls	r2, r3, #28
 8011072:	d52f      	bpl.n	80110d4 <__swbuf_r+0x84>
 8011074:	6923      	ldr	r3, [r4, #16]
 8011076:	b36b      	cbz	r3, 80110d4 <__swbuf_r+0x84>
 8011078:	6923      	ldr	r3, [r4, #16]
 801107a:	6820      	ldr	r0, [r4, #0]
 801107c:	1ac0      	subs	r0, r0, r3
 801107e:	6963      	ldr	r3, [r4, #20]
 8011080:	b2f6      	uxtb	r6, r6
 8011082:	4283      	cmp	r3, r0
 8011084:	4637      	mov	r7, r6
 8011086:	dc04      	bgt.n	8011092 <__swbuf_r+0x42>
 8011088:	4621      	mov	r1, r4
 801108a:	4628      	mov	r0, r5
 801108c:	f000 f950 	bl	8011330 <_fflush_r>
 8011090:	bb30      	cbnz	r0, 80110e0 <__swbuf_r+0x90>
 8011092:	68a3      	ldr	r3, [r4, #8]
 8011094:	3b01      	subs	r3, #1
 8011096:	60a3      	str	r3, [r4, #8]
 8011098:	6823      	ldr	r3, [r4, #0]
 801109a:	1c5a      	adds	r2, r3, #1
 801109c:	6022      	str	r2, [r4, #0]
 801109e:	701e      	strb	r6, [r3, #0]
 80110a0:	6963      	ldr	r3, [r4, #20]
 80110a2:	3001      	adds	r0, #1
 80110a4:	4283      	cmp	r3, r0
 80110a6:	d004      	beq.n	80110b2 <__swbuf_r+0x62>
 80110a8:	89a3      	ldrh	r3, [r4, #12]
 80110aa:	07db      	lsls	r3, r3, #31
 80110ac:	d506      	bpl.n	80110bc <__swbuf_r+0x6c>
 80110ae:	2e0a      	cmp	r6, #10
 80110b0:	d104      	bne.n	80110bc <__swbuf_r+0x6c>
 80110b2:	4621      	mov	r1, r4
 80110b4:	4628      	mov	r0, r5
 80110b6:	f000 f93b 	bl	8011330 <_fflush_r>
 80110ba:	b988      	cbnz	r0, 80110e0 <__swbuf_r+0x90>
 80110bc:	4638      	mov	r0, r7
 80110be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110c0:	4b0a      	ldr	r3, [pc, #40]	; (80110ec <__swbuf_r+0x9c>)
 80110c2:	429c      	cmp	r4, r3
 80110c4:	d101      	bne.n	80110ca <__swbuf_r+0x7a>
 80110c6:	68ac      	ldr	r4, [r5, #8]
 80110c8:	e7cf      	b.n	801106a <__swbuf_r+0x1a>
 80110ca:	4b09      	ldr	r3, [pc, #36]	; (80110f0 <__swbuf_r+0xa0>)
 80110cc:	429c      	cmp	r4, r3
 80110ce:	bf08      	it	eq
 80110d0:	68ec      	ldreq	r4, [r5, #12]
 80110d2:	e7ca      	b.n	801106a <__swbuf_r+0x1a>
 80110d4:	4621      	mov	r1, r4
 80110d6:	4628      	mov	r0, r5
 80110d8:	f000 f81e 	bl	8011118 <__swsetup_r>
 80110dc:	2800      	cmp	r0, #0
 80110de:	d0cb      	beq.n	8011078 <__swbuf_r+0x28>
 80110e0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80110e4:	e7ea      	b.n	80110bc <__swbuf_r+0x6c>
 80110e6:	bf00      	nop
 80110e8:	080142e0 	.word	0x080142e0
 80110ec:	08014300 	.word	0x08014300
 80110f0:	080142c0 	.word	0x080142c0

080110f4 <_write_r>:
 80110f4:	b538      	push	{r3, r4, r5, lr}
 80110f6:	4d07      	ldr	r5, [pc, #28]	; (8011114 <_write_r+0x20>)
 80110f8:	4604      	mov	r4, r0
 80110fa:	4608      	mov	r0, r1
 80110fc:	4611      	mov	r1, r2
 80110fe:	2200      	movs	r2, #0
 8011100:	602a      	str	r2, [r5, #0]
 8011102:	461a      	mov	r2, r3
 8011104:	f7f0 f8ff 	bl	8001306 <_write>
 8011108:	1c43      	adds	r3, r0, #1
 801110a:	d102      	bne.n	8011112 <_write_r+0x1e>
 801110c:	682b      	ldr	r3, [r5, #0]
 801110e:	b103      	cbz	r3, 8011112 <_write_r+0x1e>
 8011110:	6023      	str	r3, [r4, #0]
 8011112:	bd38      	pop	{r3, r4, r5, pc}
 8011114:	20006610 	.word	0x20006610

08011118 <__swsetup_r>:
 8011118:	4b32      	ldr	r3, [pc, #200]	; (80111e4 <__swsetup_r+0xcc>)
 801111a:	b570      	push	{r4, r5, r6, lr}
 801111c:	681d      	ldr	r5, [r3, #0]
 801111e:	4606      	mov	r6, r0
 8011120:	460c      	mov	r4, r1
 8011122:	b125      	cbz	r5, 801112e <__swsetup_r+0x16>
 8011124:	69ab      	ldr	r3, [r5, #24]
 8011126:	b913      	cbnz	r3, 801112e <__swsetup_r+0x16>
 8011128:	4628      	mov	r0, r5
 801112a:	f7ff f98f 	bl	801044c <__sinit>
 801112e:	4b2e      	ldr	r3, [pc, #184]	; (80111e8 <__swsetup_r+0xd0>)
 8011130:	429c      	cmp	r4, r3
 8011132:	d10f      	bne.n	8011154 <__swsetup_r+0x3c>
 8011134:	686c      	ldr	r4, [r5, #4]
 8011136:	89a3      	ldrh	r3, [r4, #12]
 8011138:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801113c:	0719      	lsls	r1, r3, #28
 801113e:	d42c      	bmi.n	801119a <__swsetup_r+0x82>
 8011140:	06dd      	lsls	r5, r3, #27
 8011142:	d411      	bmi.n	8011168 <__swsetup_r+0x50>
 8011144:	2309      	movs	r3, #9
 8011146:	6033      	str	r3, [r6, #0]
 8011148:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801114c:	81a3      	strh	r3, [r4, #12]
 801114e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011152:	e03e      	b.n	80111d2 <__swsetup_r+0xba>
 8011154:	4b25      	ldr	r3, [pc, #148]	; (80111ec <__swsetup_r+0xd4>)
 8011156:	429c      	cmp	r4, r3
 8011158:	d101      	bne.n	801115e <__swsetup_r+0x46>
 801115a:	68ac      	ldr	r4, [r5, #8]
 801115c:	e7eb      	b.n	8011136 <__swsetup_r+0x1e>
 801115e:	4b24      	ldr	r3, [pc, #144]	; (80111f0 <__swsetup_r+0xd8>)
 8011160:	429c      	cmp	r4, r3
 8011162:	bf08      	it	eq
 8011164:	68ec      	ldreq	r4, [r5, #12]
 8011166:	e7e6      	b.n	8011136 <__swsetup_r+0x1e>
 8011168:	0758      	lsls	r0, r3, #29
 801116a:	d512      	bpl.n	8011192 <__swsetup_r+0x7a>
 801116c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801116e:	b141      	cbz	r1, 8011182 <__swsetup_r+0x6a>
 8011170:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011174:	4299      	cmp	r1, r3
 8011176:	d002      	beq.n	801117e <__swsetup_r+0x66>
 8011178:	4630      	mov	r0, r6
 801117a:	f7ff fa21 	bl	80105c0 <_free_r>
 801117e:	2300      	movs	r3, #0
 8011180:	6363      	str	r3, [r4, #52]	; 0x34
 8011182:	89a3      	ldrh	r3, [r4, #12]
 8011184:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011188:	81a3      	strh	r3, [r4, #12]
 801118a:	2300      	movs	r3, #0
 801118c:	6063      	str	r3, [r4, #4]
 801118e:	6923      	ldr	r3, [r4, #16]
 8011190:	6023      	str	r3, [r4, #0]
 8011192:	89a3      	ldrh	r3, [r4, #12]
 8011194:	f043 0308 	orr.w	r3, r3, #8
 8011198:	81a3      	strh	r3, [r4, #12]
 801119a:	6923      	ldr	r3, [r4, #16]
 801119c:	b94b      	cbnz	r3, 80111b2 <__swsetup_r+0x9a>
 801119e:	89a3      	ldrh	r3, [r4, #12]
 80111a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80111a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80111a8:	d003      	beq.n	80111b2 <__swsetup_r+0x9a>
 80111aa:	4621      	mov	r1, r4
 80111ac:	4630      	mov	r0, r6
 80111ae:	f000 f931 	bl	8011414 <__smakebuf_r>
 80111b2:	89a0      	ldrh	r0, [r4, #12]
 80111b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80111b8:	f010 0301 	ands.w	r3, r0, #1
 80111bc:	d00a      	beq.n	80111d4 <__swsetup_r+0xbc>
 80111be:	2300      	movs	r3, #0
 80111c0:	60a3      	str	r3, [r4, #8]
 80111c2:	6963      	ldr	r3, [r4, #20]
 80111c4:	425b      	negs	r3, r3
 80111c6:	61a3      	str	r3, [r4, #24]
 80111c8:	6923      	ldr	r3, [r4, #16]
 80111ca:	b943      	cbnz	r3, 80111de <__swsetup_r+0xc6>
 80111cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80111d0:	d1ba      	bne.n	8011148 <__swsetup_r+0x30>
 80111d2:	bd70      	pop	{r4, r5, r6, pc}
 80111d4:	0781      	lsls	r1, r0, #30
 80111d6:	bf58      	it	pl
 80111d8:	6963      	ldrpl	r3, [r4, #20]
 80111da:	60a3      	str	r3, [r4, #8]
 80111dc:	e7f4      	b.n	80111c8 <__swsetup_r+0xb0>
 80111de:	2000      	movs	r0, #0
 80111e0:	e7f7      	b.n	80111d2 <__swsetup_r+0xba>
 80111e2:	bf00      	nop
 80111e4:	20000014 	.word	0x20000014
 80111e8:	080142e0 	.word	0x080142e0
 80111ec:	08014300 	.word	0x08014300
 80111f0:	080142c0 	.word	0x080142c0

080111f4 <abort>:
 80111f4:	b508      	push	{r3, lr}
 80111f6:	2006      	movs	r0, #6
 80111f8:	f000 f9b8 	bl	801156c <raise>
 80111fc:	2001      	movs	r0, #1
 80111fe:	f7f0 f85b 	bl	80012b8 <_exit>
	...

08011204 <_close_r>:
 8011204:	b538      	push	{r3, r4, r5, lr}
 8011206:	4d06      	ldr	r5, [pc, #24]	; (8011220 <_close_r+0x1c>)
 8011208:	2300      	movs	r3, #0
 801120a:	4604      	mov	r4, r0
 801120c:	4608      	mov	r0, r1
 801120e:	602b      	str	r3, [r5, #0]
 8011210:	f7f0 f895 	bl	800133e <_close>
 8011214:	1c43      	adds	r3, r0, #1
 8011216:	d102      	bne.n	801121e <_close_r+0x1a>
 8011218:	682b      	ldr	r3, [r5, #0]
 801121a:	b103      	cbz	r3, 801121e <_close_r+0x1a>
 801121c:	6023      	str	r3, [r4, #0]
 801121e:	bd38      	pop	{r3, r4, r5, pc}
 8011220:	20006610 	.word	0x20006610

08011224 <__sflush_r>:
 8011224:	898a      	ldrh	r2, [r1, #12]
 8011226:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801122a:	4605      	mov	r5, r0
 801122c:	0710      	lsls	r0, r2, #28
 801122e:	460c      	mov	r4, r1
 8011230:	d458      	bmi.n	80112e4 <__sflush_r+0xc0>
 8011232:	684b      	ldr	r3, [r1, #4]
 8011234:	2b00      	cmp	r3, #0
 8011236:	dc05      	bgt.n	8011244 <__sflush_r+0x20>
 8011238:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801123a:	2b00      	cmp	r3, #0
 801123c:	dc02      	bgt.n	8011244 <__sflush_r+0x20>
 801123e:	2000      	movs	r0, #0
 8011240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011244:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011246:	2e00      	cmp	r6, #0
 8011248:	d0f9      	beq.n	801123e <__sflush_r+0x1a>
 801124a:	2300      	movs	r3, #0
 801124c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011250:	682f      	ldr	r7, [r5, #0]
 8011252:	602b      	str	r3, [r5, #0]
 8011254:	d032      	beq.n	80112bc <__sflush_r+0x98>
 8011256:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011258:	89a3      	ldrh	r3, [r4, #12]
 801125a:	075a      	lsls	r2, r3, #29
 801125c:	d505      	bpl.n	801126a <__sflush_r+0x46>
 801125e:	6863      	ldr	r3, [r4, #4]
 8011260:	1ac0      	subs	r0, r0, r3
 8011262:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011264:	b10b      	cbz	r3, 801126a <__sflush_r+0x46>
 8011266:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011268:	1ac0      	subs	r0, r0, r3
 801126a:	2300      	movs	r3, #0
 801126c:	4602      	mov	r2, r0
 801126e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011270:	6a21      	ldr	r1, [r4, #32]
 8011272:	4628      	mov	r0, r5
 8011274:	47b0      	blx	r6
 8011276:	1c43      	adds	r3, r0, #1
 8011278:	89a3      	ldrh	r3, [r4, #12]
 801127a:	d106      	bne.n	801128a <__sflush_r+0x66>
 801127c:	6829      	ldr	r1, [r5, #0]
 801127e:	291d      	cmp	r1, #29
 8011280:	d82c      	bhi.n	80112dc <__sflush_r+0xb8>
 8011282:	4a2a      	ldr	r2, [pc, #168]	; (801132c <__sflush_r+0x108>)
 8011284:	40ca      	lsrs	r2, r1
 8011286:	07d6      	lsls	r6, r2, #31
 8011288:	d528      	bpl.n	80112dc <__sflush_r+0xb8>
 801128a:	2200      	movs	r2, #0
 801128c:	6062      	str	r2, [r4, #4]
 801128e:	04d9      	lsls	r1, r3, #19
 8011290:	6922      	ldr	r2, [r4, #16]
 8011292:	6022      	str	r2, [r4, #0]
 8011294:	d504      	bpl.n	80112a0 <__sflush_r+0x7c>
 8011296:	1c42      	adds	r2, r0, #1
 8011298:	d101      	bne.n	801129e <__sflush_r+0x7a>
 801129a:	682b      	ldr	r3, [r5, #0]
 801129c:	b903      	cbnz	r3, 80112a0 <__sflush_r+0x7c>
 801129e:	6560      	str	r0, [r4, #84]	; 0x54
 80112a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80112a2:	602f      	str	r7, [r5, #0]
 80112a4:	2900      	cmp	r1, #0
 80112a6:	d0ca      	beq.n	801123e <__sflush_r+0x1a>
 80112a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80112ac:	4299      	cmp	r1, r3
 80112ae:	d002      	beq.n	80112b6 <__sflush_r+0x92>
 80112b0:	4628      	mov	r0, r5
 80112b2:	f7ff f985 	bl	80105c0 <_free_r>
 80112b6:	2000      	movs	r0, #0
 80112b8:	6360      	str	r0, [r4, #52]	; 0x34
 80112ba:	e7c1      	b.n	8011240 <__sflush_r+0x1c>
 80112bc:	6a21      	ldr	r1, [r4, #32]
 80112be:	2301      	movs	r3, #1
 80112c0:	4628      	mov	r0, r5
 80112c2:	47b0      	blx	r6
 80112c4:	1c41      	adds	r1, r0, #1
 80112c6:	d1c7      	bne.n	8011258 <__sflush_r+0x34>
 80112c8:	682b      	ldr	r3, [r5, #0]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d0c4      	beq.n	8011258 <__sflush_r+0x34>
 80112ce:	2b1d      	cmp	r3, #29
 80112d0:	d001      	beq.n	80112d6 <__sflush_r+0xb2>
 80112d2:	2b16      	cmp	r3, #22
 80112d4:	d101      	bne.n	80112da <__sflush_r+0xb6>
 80112d6:	602f      	str	r7, [r5, #0]
 80112d8:	e7b1      	b.n	801123e <__sflush_r+0x1a>
 80112da:	89a3      	ldrh	r3, [r4, #12]
 80112dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80112e0:	81a3      	strh	r3, [r4, #12]
 80112e2:	e7ad      	b.n	8011240 <__sflush_r+0x1c>
 80112e4:	690f      	ldr	r7, [r1, #16]
 80112e6:	2f00      	cmp	r7, #0
 80112e8:	d0a9      	beq.n	801123e <__sflush_r+0x1a>
 80112ea:	0793      	lsls	r3, r2, #30
 80112ec:	680e      	ldr	r6, [r1, #0]
 80112ee:	bf08      	it	eq
 80112f0:	694b      	ldreq	r3, [r1, #20]
 80112f2:	600f      	str	r7, [r1, #0]
 80112f4:	bf18      	it	ne
 80112f6:	2300      	movne	r3, #0
 80112f8:	eba6 0807 	sub.w	r8, r6, r7
 80112fc:	608b      	str	r3, [r1, #8]
 80112fe:	f1b8 0f00 	cmp.w	r8, #0
 8011302:	dd9c      	ble.n	801123e <__sflush_r+0x1a>
 8011304:	6a21      	ldr	r1, [r4, #32]
 8011306:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011308:	4643      	mov	r3, r8
 801130a:	463a      	mov	r2, r7
 801130c:	4628      	mov	r0, r5
 801130e:	47b0      	blx	r6
 8011310:	2800      	cmp	r0, #0
 8011312:	dc06      	bgt.n	8011322 <__sflush_r+0xfe>
 8011314:	89a3      	ldrh	r3, [r4, #12]
 8011316:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801131a:	81a3      	strh	r3, [r4, #12]
 801131c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011320:	e78e      	b.n	8011240 <__sflush_r+0x1c>
 8011322:	4407      	add	r7, r0
 8011324:	eba8 0800 	sub.w	r8, r8, r0
 8011328:	e7e9      	b.n	80112fe <__sflush_r+0xda>
 801132a:	bf00      	nop
 801132c:	20400001 	.word	0x20400001

08011330 <_fflush_r>:
 8011330:	b538      	push	{r3, r4, r5, lr}
 8011332:	690b      	ldr	r3, [r1, #16]
 8011334:	4605      	mov	r5, r0
 8011336:	460c      	mov	r4, r1
 8011338:	b913      	cbnz	r3, 8011340 <_fflush_r+0x10>
 801133a:	2500      	movs	r5, #0
 801133c:	4628      	mov	r0, r5
 801133e:	bd38      	pop	{r3, r4, r5, pc}
 8011340:	b118      	cbz	r0, 801134a <_fflush_r+0x1a>
 8011342:	6983      	ldr	r3, [r0, #24]
 8011344:	b90b      	cbnz	r3, 801134a <_fflush_r+0x1a>
 8011346:	f7ff f881 	bl	801044c <__sinit>
 801134a:	4b14      	ldr	r3, [pc, #80]	; (801139c <_fflush_r+0x6c>)
 801134c:	429c      	cmp	r4, r3
 801134e:	d11b      	bne.n	8011388 <_fflush_r+0x58>
 8011350:	686c      	ldr	r4, [r5, #4]
 8011352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d0ef      	beq.n	801133a <_fflush_r+0xa>
 801135a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801135c:	07d0      	lsls	r0, r2, #31
 801135e:	d404      	bmi.n	801136a <_fflush_r+0x3a>
 8011360:	0599      	lsls	r1, r3, #22
 8011362:	d402      	bmi.n	801136a <_fflush_r+0x3a>
 8011364:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011366:	f7ff f921 	bl	80105ac <__retarget_lock_acquire_recursive>
 801136a:	4628      	mov	r0, r5
 801136c:	4621      	mov	r1, r4
 801136e:	f7ff ff59 	bl	8011224 <__sflush_r>
 8011372:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011374:	07da      	lsls	r2, r3, #31
 8011376:	4605      	mov	r5, r0
 8011378:	d4e0      	bmi.n	801133c <_fflush_r+0xc>
 801137a:	89a3      	ldrh	r3, [r4, #12]
 801137c:	059b      	lsls	r3, r3, #22
 801137e:	d4dd      	bmi.n	801133c <_fflush_r+0xc>
 8011380:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011382:	f7ff f914 	bl	80105ae <__retarget_lock_release_recursive>
 8011386:	e7d9      	b.n	801133c <_fflush_r+0xc>
 8011388:	4b05      	ldr	r3, [pc, #20]	; (80113a0 <_fflush_r+0x70>)
 801138a:	429c      	cmp	r4, r3
 801138c:	d101      	bne.n	8011392 <_fflush_r+0x62>
 801138e:	68ac      	ldr	r4, [r5, #8]
 8011390:	e7df      	b.n	8011352 <_fflush_r+0x22>
 8011392:	4b04      	ldr	r3, [pc, #16]	; (80113a4 <_fflush_r+0x74>)
 8011394:	429c      	cmp	r4, r3
 8011396:	bf08      	it	eq
 8011398:	68ec      	ldreq	r4, [r5, #12]
 801139a:	e7da      	b.n	8011352 <_fflush_r+0x22>
 801139c:	080142e0 	.word	0x080142e0
 80113a0:	08014300 	.word	0x08014300
 80113a4:	080142c0 	.word	0x080142c0

080113a8 <_lseek_r>:
 80113a8:	b538      	push	{r3, r4, r5, lr}
 80113aa:	4d07      	ldr	r5, [pc, #28]	; (80113c8 <_lseek_r+0x20>)
 80113ac:	4604      	mov	r4, r0
 80113ae:	4608      	mov	r0, r1
 80113b0:	4611      	mov	r1, r2
 80113b2:	2200      	movs	r2, #0
 80113b4:	602a      	str	r2, [r5, #0]
 80113b6:	461a      	mov	r2, r3
 80113b8:	f7ef ffe8 	bl	800138c <_lseek>
 80113bc:	1c43      	adds	r3, r0, #1
 80113be:	d102      	bne.n	80113c6 <_lseek_r+0x1e>
 80113c0:	682b      	ldr	r3, [r5, #0]
 80113c2:	b103      	cbz	r3, 80113c6 <_lseek_r+0x1e>
 80113c4:	6023      	str	r3, [r4, #0]
 80113c6:	bd38      	pop	{r3, r4, r5, pc}
 80113c8:	20006610 	.word	0x20006610

080113cc <__swhatbuf_r>:
 80113cc:	b570      	push	{r4, r5, r6, lr}
 80113ce:	460e      	mov	r6, r1
 80113d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80113d4:	2900      	cmp	r1, #0
 80113d6:	b096      	sub	sp, #88	; 0x58
 80113d8:	4614      	mov	r4, r2
 80113da:	461d      	mov	r5, r3
 80113dc:	da07      	bge.n	80113ee <__swhatbuf_r+0x22>
 80113de:	2300      	movs	r3, #0
 80113e0:	602b      	str	r3, [r5, #0]
 80113e2:	89b3      	ldrh	r3, [r6, #12]
 80113e4:	061a      	lsls	r2, r3, #24
 80113e6:	d410      	bmi.n	801140a <__swhatbuf_r+0x3e>
 80113e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80113ec:	e00e      	b.n	801140c <__swhatbuf_r+0x40>
 80113ee:	466a      	mov	r2, sp
 80113f0:	f000 f8d8 	bl	80115a4 <_fstat_r>
 80113f4:	2800      	cmp	r0, #0
 80113f6:	dbf2      	blt.n	80113de <__swhatbuf_r+0x12>
 80113f8:	9a01      	ldr	r2, [sp, #4]
 80113fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80113fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011402:	425a      	negs	r2, r3
 8011404:	415a      	adcs	r2, r3
 8011406:	602a      	str	r2, [r5, #0]
 8011408:	e7ee      	b.n	80113e8 <__swhatbuf_r+0x1c>
 801140a:	2340      	movs	r3, #64	; 0x40
 801140c:	2000      	movs	r0, #0
 801140e:	6023      	str	r3, [r4, #0]
 8011410:	b016      	add	sp, #88	; 0x58
 8011412:	bd70      	pop	{r4, r5, r6, pc}

08011414 <__smakebuf_r>:
 8011414:	898b      	ldrh	r3, [r1, #12]
 8011416:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011418:	079d      	lsls	r5, r3, #30
 801141a:	4606      	mov	r6, r0
 801141c:	460c      	mov	r4, r1
 801141e:	d507      	bpl.n	8011430 <__smakebuf_r+0x1c>
 8011420:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011424:	6023      	str	r3, [r4, #0]
 8011426:	6123      	str	r3, [r4, #16]
 8011428:	2301      	movs	r3, #1
 801142a:	6163      	str	r3, [r4, #20]
 801142c:	b002      	add	sp, #8
 801142e:	bd70      	pop	{r4, r5, r6, pc}
 8011430:	ab01      	add	r3, sp, #4
 8011432:	466a      	mov	r2, sp
 8011434:	f7ff ffca 	bl	80113cc <__swhatbuf_r>
 8011438:	9900      	ldr	r1, [sp, #0]
 801143a:	4605      	mov	r5, r0
 801143c:	4630      	mov	r0, r6
 801143e:	f7ff f90f 	bl	8010660 <_malloc_r>
 8011442:	b948      	cbnz	r0, 8011458 <__smakebuf_r+0x44>
 8011444:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011448:	059a      	lsls	r2, r3, #22
 801144a:	d4ef      	bmi.n	801142c <__smakebuf_r+0x18>
 801144c:	f023 0303 	bic.w	r3, r3, #3
 8011450:	f043 0302 	orr.w	r3, r3, #2
 8011454:	81a3      	strh	r3, [r4, #12]
 8011456:	e7e3      	b.n	8011420 <__smakebuf_r+0xc>
 8011458:	4b0d      	ldr	r3, [pc, #52]	; (8011490 <__smakebuf_r+0x7c>)
 801145a:	62b3      	str	r3, [r6, #40]	; 0x28
 801145c:	89a3      	ldrh	r3, [r4, #12]
 801145e:	6020      	str	r0, [r4, #0]
 8011460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011464:	81a3      	strh	r3, [r4, #12]
 8011466:	9b00      	ldr	r3, [sp, #0]
 8011468:	6163      	str	r3, [r4, #20]
 801146a:	9b01      	ldr	r3, [sp, #4]
 801146c:	6120      	str	r0, [r4, #16]
 801146e:	b15b      	cbz	r3, 8011488 <__smakebuf_r+0x74>
 8011470:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011474:	4630      	mov	r0, r6
 8011476:	f000 f8a7 	bl	80115c8 <_isatty_r>
 801147a:	b128      	cbz	r0, 8011488 <__smakebuf_r+0x74>
 801147c:	89a3      	ldrh	r3, [r4, #12]
 801147e:	f023 0303 	bic.w	r3, r3, #3
 8011482:	f043 0301 	orr.w	r3, r3, #1
 8011486:	81a3      	strh	r3, [r4, #12]
 8011488:	89a0      	ldrh	r0, [r4, #12]
 801148a:	4305      	orrs	r5, r0
 801148c:	81a5      	strh	r5, [r4, #12]
 801148e:	e7cd      	b.n	801142c <__smakebuf_r+0x18>
 8011490:	080103e5 	.word	0x080103e5

08011494 <__malloc_lock>:
 8011494:	4801      	ldr	r0, [pc, #4]	; (801149c <__malloc_lock+0x8>)
 8011496:	f7ff b889 	b.w	80105ac <__retarget_lock_acquire_recursive>
 801149a:	bf00      	nop
 801149c:	20006618 	.word	0x20006618

080114a0 <__malloc_unlock>:
 80114a0:	4801      	ldr	r0, [pc, #4]	; (80114a8 <__malloc_unlock+0x8>)
 80114a2:	f7ff b884 	b.w	80105ae <__retarget_lock_release_recursive>
 80114a6:	bf00      	nop
 80114a8:	20006618 	.word	0x20006618

080114ac <_realloc_r>:
 80114ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114ae:	4607      	mov	r7, r0
 80114b0:	4614      	mov	r4, r2
 80114b2:	460e      	mov	r6, r1
 80114b4:	b921      	cbnz	r1, 80114c0 <_realloc_r+0x14>
 80114b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80114ba:	4611      	mov	r1, r2
 80114bc:	f7ff b8d0 	b.w	8010660 <_malloc_r>
 80114c0:	b922      	cbnz	r2, 80114cc <_realloc_r+0x20>
 80114c2:	f7ff f87d 	bl	80105c0 <_free_r>
 80114c6:	4625      	mov	r5, r4
 80114c8:	4628      	mov	r0, r5
 80114ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114cc:	f000 f88c 	bl	80115e8 <_malloc_usable_size_r>
 80114d0:	42a0      	cmp	r0, r4
 80114d2:	d20f      	bcs.n	80114f4 <_realloc_r+0x48>
 80114d4:	4621      	mov	r1, r4
 80114d6:	4638      	mov	r0, r7
 80114d8:	f7ff f8c2 	bl	8010660 <_malloc_r>
 80114dc:	4605      	mov	r5, r0
 80114de:	2800      	cmp	r0, #0
 80114e0:	d0f2      	beq.n	80114c8 <_realloc_r+0x1c>
 80114e2:	4631      	mov	r1, r6
 80114e4:	4622      	mov	r2, r4
 80114e6:	f7fe fdcd 	bl	8010084 <memcpy>
 80114ea:	4631      	mov	r1, r6
 80114ec:	4638      	mov	r0, r7
 80114ee:	f7ff f867 	bl	80105c0 <_free_r>
 80114f2:	e7e9      	b.n	80114c8 <_realloc_r+0x1c>
 80114f4:	4635      	mov	r5, r6
 80114f6:	e7e7      	b.n	80114c8 <_realloc_r+0x1c>

080114f8 <_read_r>:
 80114f8:	b538      	push	{r3, r4, r5, lr}
 80114fa:	4d07      	ldr	r5, [pc, #28]	; (8011518 <_read_r+0x20>)
 80114fc:	4604      	mov	r4, r0
 80114fe:	4608      	mov	r0, r1
 8011500:	4611      	mov	r1, r2
 8011502:	2200      	movs	r2, #0
 8011504:	602a      	str	r2, [r5, #0]
 8011506:	461a      	mov	r2, r3
 8011508:	f7ef fee0 	bl	80012cc <_read>
 801150c:	1c43      	adds	r3, r0, #1
 801150e:	d102      	bne.n	8011516 <_read_r+0x1e>
 8011510:	682b      	ldr	r3, [r5, #0]
 8011512:	b103      	cbz	r3, 8011516 <_read_r+0x1e>
 8011514:	6023      	str	r3, [r4, #0]
 8011516:	bd38      	pop	{r3, r4, r5, pc}
 8011518:	20006610 	.word	0x20006610

0801151c <_raise_r>:
 801151c:	291f      	cmp	r1, #31
 801151e:	b538      	push	{r3, r4, r5, lr}
 8011520:	4604      	mov	r4, r0
 8011522:	460d      	mov	r5, r1
 8011524:	d904      	bls.n	8011530 <_raise_r+0x14>
 8011526:	2316      	movs	r3, #22
 8011528:	6003      	str	r3, [r0, #0]
 801152a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801152e:	bd38      	pop	{r3, r4, r5, pc}
 8011530:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011532:	b112      	cbz	r2, 801153a <_raise_r+0x1e>
 8011534:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011538:	b94b      	cbnz	r3, 801154e <_raise_r+0x32>
 801153a:	4620      	mov	r0, r4
 801153c:	f000 f830 	bl	80115a0 <_getpid_r>
 8011540:	462a      	mov	r2, r5
 8011542:	4601      	mov	r1, r0
 8011544:	4620      	mov	r0, r4
 8011546:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801154a:	f000 b817 	b.w	801157c <_kill_r>
 801154e:	2b01      	cmp	r3, #1
 8011550:	d00a      	beq.n	8011568 <_raise_r+0x4c>
 8011552:	1c59      	adds	r1, r3, #1
 8011554:	d103      	bne.n	801155e <_raise_r+0x42>
 8011556:	2316      	movs	r3, #22
 8011558:	6003      	str	r3, [r0, #0]
 801155a:	2001      	movs	r0, #1
 801155c:	e7e7      	b.n	801152e <_raise_r+0x12>
 801155e:	2400      	movs	r4, #0
 8011560:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011564:	4628      	mov	r0, r5
 8011566:	4798      	blx	r3
 8011568:	2000      	movs	r0, #0
 801156a:	e7e0      	b.n	801152e <_raise_r+0x12>

0801156c <raise>:
 801156c:	4b02      	ldr	r3, [pc, #8]	; (8011578 <raise+0xc>)
 801156e:	4601      	mov	r1, r0
 8011570:	6818      	ldr	r0, [r3, #0]
 8011572:	f7ff bfd3 	b.w	801151c <_raise_r>
 8011576:	bf00      	nop
 8011578:	20000014 	.word	0x20000014

0801157c <_kill_r>:
 801157c:	b538      	push	{r3, r4, r5, lr}
 801157e:	4d07      	ldr	r5, [pc, #28]	; (801159c <_kill_r+0x20>)
 8011580:	2300      	movs	r3, #0
 8011582:	4604      	mov	r4, r0
 8011584:	4608      	mov	r0, r1
 8011586:	4611      	mov	r1, r2
 8011588:	602b      	str	r3, [r5, #0]
 801158a:	f7ef fe83 	bl	8001294 <_kill>
 801158e:	1c43      	adds	r3, r0, #1
 8011590:	d102      	bne.n	8011598 <_kill_r+0x1c>
 8011592:	682b      	ldr	r3, [r5, #0]
 8011594:	b103      	cbz	r3, 8011598 <_kill_r+0x1c>
 8011596:	6023      	str	r3, [r4, #0]
 8011598:	bd38      	pop	{r3, r4, r5, pc}
 801159a:	bf00      	nop
 801159c:	20006610 	.word	0x20006610

080115a0 <_getpid_r>:
 80115a0:	f7ef be70 	b.w	8001284 <_getpid>

080115a4 <_fstat_r>:
 80115a4:	b538      	push	{r3, r4, r5, lr}
 80115a6:	4d07      	ldr	r5, [pc, #28]	; (80115c4 <_fstat_r+0x20>)
 80115a8:	2300      	movs	r3, #0
 80115aa:	4604      	mov	r4, r0
 80115ac:	4608      	mov	r0, r1
 80115ae:	4611      	mov	r1, r2
 80115b0:	602b      	str	r3, [r5, #0]
 80115b2:	f7ef fed0 	bl	8001356 <_fstat>
 80115b6:	1c43      	adds	r3, r0, #1
 80115b8:	d102      	bne.n	80115c0 <_fstat_r+0x1c>
 80115ba:	682b      	ldr	r3, [r5, #0]
 80115bc:	b103      	cbz	r3, 80115c0 <_fstat_r+0x1c>
 80115be:	6023      	str	r3, [r4, #0]
 80115c0:	bd38      	pop	{r3, r4, r5, pc}
 80115c2:	bf00      	nop
 80115c4:	20006610 	.word	0x20006610

080115c8 <_isatty_r>:
 80115c8:	b538      	push	{r3, r4, r5, lr}
 80115ca:	4d06      	ldr	r5, [pc, #24]	; (80115e4 <_isatty_r+0x1c>)
 80115cc:	2300      	movs	r3, #0
 80115ce:	4604      	mov	r4, r0
 80115d0:	4608      	mov	r0, r1
 80115d2:	602b      	str	r3, [r5, #0]
 80115d4:	f7ef fecf 	bl	8001376 <_isatty>
 80115d8:	1c43      	adds	r3, r0, #1
 80115da:	d102      	bne.n	80115e2 <_isatty_r+0x1a>
 80115dc:	682b      	ldr	r3, [r5, #0]
 80115de:	b103      	cbz	r3, 80115e2 <_isatty_r+0x1a>
 80115e0:	6023      	str	r3, [r4, #0]
 80115e2:	bd38      	pop	{r3, r4, r5, pc}
 80115e4:	20006610 	.word	0x20006610

080115e8 <_malloc_usable_size_r>:
 80115e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80115ec:	1f18      	subs	r0, r3, #4
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	bfbc      	itt	lt
 80115f2:	580b      	ldrlt	r3, [r1, r0]
 80115f4:	18c0      	addlt	r0, r0, r3
 80115f6:	4770      	bx	lr

080115f8 <_init>:
 80115f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115fa:	bf00      	nop
 80115fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80115fe:	bc08      	pop	{r3}
 8011600:	469e      	mov	lr, r3
 8011602:	4770      	bx	lr

08011604 <_fini>:
 8011604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011606:	bf00      	nop
 8011608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801160a:	bc08      	pop	{r3}
 801160c:	469e      	mov	lr, r3
 801160e:	4770      	bx	lr
