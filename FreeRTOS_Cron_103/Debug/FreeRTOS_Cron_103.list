
FreeRTOS_Cron_103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008604  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000578  08008714  08008714  00018714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c8c  08008c8c  000202c0  2**0
                  CONTENTS
  4 .ARM          00000008  08008c8c  08008c8c  00018c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c94  08008c94  000202c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c94  08008c94  00018c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c98  08008c98  00018c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c0  20000000  08008c9c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000136c  200002c0  08008f5c  000202c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000162c  08008f5c  0002162c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000159c4  00000000  00000000  000202e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000378f  00000000  00000000  00035cad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001430  00000000  00000000  00039440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c8  00000000  00000000  0003a870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b36c  00000000  00000000  0003bb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015844  00000000  00000000  00056ea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009739a  00000000  00000000  0006c6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00103a82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006494  00000000  00000000  00103ad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200002c0 	.word	0x200002c0
 800012c:	00000000 	.word	0x00000000
 8000130:	080086fc 	.word	0x080086fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200002c4 	.word	0x200002c4
 800014c:	080086fc 	.word	0x080086fc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <strcmp>:
 8000160:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000164:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000168:	2a01      	cmp	r2, #1
 800016a:	bf28      	it	cs
 800016c:	429a      	cmpcs	r2, r3
 800016e:	d0f7      	beq.n	8000160 <strcmp>
 8000170:	1ad0      	subs	r0, r2, r3
 8000172:	4770      	bx	lr

08000174 <__aeabi_ldivmod>:
 8000174:	b97b      	cbnz	r3, 8000196 <__aeabi_ldivmod+0x22>
 8000176:	b972      	cbnz	r2, 8000196 <__aeabi_ldivmod+0x22>
 8000178:	2900      	cmp	r1, #0
 800017a:	bfbe      	ittt	lt
 800017c:	2000      	movlt	r0, #0
 800017e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000182:	e006      	blt.n	8000192 <__aeabi_ldivmod+0x1e>
 8000184:	bf08      	it	eq
 8000186:	2800      	cmpeq	r0, #0
 8000188:	bf1c      	itt	ne
 800018a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800018e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000192:	f000 b9a9 	b.w	80004e8 <__aeabi_idiv0>
 8000196:	f1ad 0c08 	sub.w	ip, sp, #8
 800019a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019e:	2900      	cmp	r1, #0
 80001a0:	db09      	blt.n	80001b6 <__aeabi_ldivmod+0x42>
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	db1a      	blt.n	80001dc <__aeabi_ldivmod+0x68>
 80001a6:	f000 f835 	bl	8000214 <__udivmoddi4>
 80001aa:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b2:	b004      	add	sp, #16
 80001b4:	4770      	bx	lr
 80001b6:	4240      	negs	r0, r0
 80001b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001bc:	2b00      	cmp	r3, #0
 80001be:	db1b      	blt.n	80001f8 <__aeabi_ldivmod+0x84>
 80001c0:	f000 f828 	bl	8000214 <__udivmoddi4>
 80001c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001cc:	b004      	add	sp, #16
 80001ce:	4240      	negs	r0, r0
 80001d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d4:	4252      	negs	r2, r2
 80001d6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001da:	4770      	bx	lr
 80001dc:	4252      	negs	r2, r2
 80001de:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e2:	f000 f817 	bl	8000214 <__udivmoddi4>
 80001e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ee:	b004      	add	sp, #16
 80001f0:	4240      	negs	r0, r0
 80001f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f6:	4770      	bx	lr
 80001f8:	4252      	negs	r2, r2
 80001fa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001fe:	f000 f809 	bl	8000214 <__udivmoddi4>
 8000202:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000206:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020a:	b004      	add	sp, #16
 800020c:	4252      	negs	r2, r2
 800020e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9e08      	ldr	r6, [sp, #32]
 800021a:	460d      	mov	r5, r1
 800021c:	4604      	mov	r4, r0
 800021e:	4688      	mov	r8, r1
 8000220:	2b00      	cmp	r3, #0
 8000222:	d14d      	bne.n	80002c0 <__udivmoddi4+0xac>
 8000224:	428a      	cmp	r2, r1
 8000226:	4694      	mov	ip, r2
 8000228:	d968      	bls.n	80002fc <__udivmoddi4+0xe8>
 800022a:	fab2 f282 	clz	r2, r2
 800022e:	b152      	cbz	r2, 8000246 <__udivmoddi4+0x32>
 8000230:	fa01 f302 	lsl.w	r3, r1, r2
 8000234:	f1c2 0120 	rsb	r1, r2, #32
 8000238:	fa20 f101 	lsr.w	r1, r0, r1
 800023c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000240:	ea41 0803 	orr.w	r8, r1, r3
 8000244:	4094      	lsls	r4, r2
 8000246:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800024a:	fbb8 f7f1 	udiv	r7, r8, r1
 800024e:	fa1f fe8c 	uxth.w	lr, ip
 8000252:	fb01 8817 	mls	r8, r1, r7, r8
 8000256:	fb07 f00e 	mul.w	r0, r7, lr
 800025a:	0c23      	lsrs	r3, r4, #16
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	4298      	cmp	r0, r3
 8000262:	d90a      	bls.n	800027a <__udivmoddi4+0x66>
 8000264:	eb1c 0303 	adds.w	r3, ip, r3
 8000268:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 800026c:	f080 811e 	bcs.w	80004ac <__udivmoddi4+0x298>
 8000270:	4298      	cmp	r0, r3
 8000272:	f240 811b 	bls.w	80004ac <__udivmoddi4+0x298>
 8000276:	3f02      	subs	r7, #2
 8000278:	4463      	add	r3, ip
 800027a:	1a1b      	subs	r3, r3, r0
 800027c:	fbb3 f0f1 	udiv	r0, r3, r1
 8000280:	fb01 3310 	mls	r3, r1, r0, r3
 8000284:	fb00 fe0e 	mul.w	lr, r0, lr
 8000288:	b2a4      	uxth	r4, r4
 800028a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028e:	45a6      	cmp	lr, r4
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x94>
 8000292:	eb1c 0404 	adds.w	r4, ip, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029a:	f080 8109 	bcs.w	80004b0 <__udivmoddi4+0x29c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8106 	bls.w	80004b0 <__udivmoddi4+0x29c>
 80002a4:	4464      	add	r4, ip
 80002a6:	3802      	subs	r0, #2
 80002a8:	2100      	movs	r1, #0
 80002aa:	eba4 040e 	sub.w	r4, r4, lr
 80002ae:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa8>
 80002b4:	2300      	movs	r3, #0
 80002b6:	40d4      	lsrs	r4, r2
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d908      	bls.n	80002d6 <__udivmoddi4+0xc2>
 80002c4:	2e00      	cmp	r6, #0
 80002c6:	f000 80ee 	beq.w	80004a6 <__udivmoddi4+0x292>
 80002ca:	2100      	movs	r1, #0
 80002cc:	e9c6 0500 	strd	r0, r5, [r6]
 80002d0:	4608      	mov	r0, r1
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d14a      	bne.n	8000374 <__udivmoddi4+0x160>
 80002de:	42ab      	cmp	r3, r5
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd4>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80fc 	bhi.w	80004e0 <__udivmoddi4+0x2cc>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb65 0303 	sbc.w	r3, r5, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4698      	mov	r8, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d0e2      	beq.n	80002bc <__udivmoddi4+0xa8>
 80002f6:	e9c6 4800 	strd	r4, r8, [r6]
 80002fa:	e7df      	b.n	80002bc <__udivmoddi4+0xa8>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xec>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 8091 	bne.w	800042c <__udivmoddi4+0x218>
 800030a:	eba1 000c 	sub.w	r0, r1, ip
 800030e:	2101      	movs	r1, #1
 8000310:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000314:	fa1f fe8c 	uxth.w	lr, ip
 8000318:	fbb0 f3f7 	udiv	r3, r0, r7
 800031c:	fb07 0013 	mls	r0, r7, r3, r0
 8000320:	0c25      	lsrs	r5, r4, #16
 8000322:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000326:	fb0e f003 	mul.w	r0, lr, r3
 800032a:	42a8      	cmp	r0, r5
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x12c>
 800032e:	eb1c 0505 	adds.w	r5, ip, r5
 8000332:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x12a>
 8000338:	42a8      	cmp	r0, r5
 800033a:	f200 80ce 	bhi.w	80004da <__udivmoddi4+0x2c6>
 800033e:	4643      	mov	r3, r8
 8000340:	1a2d      	subs	r5, r5, r0
 8000342:	fbb5 f0f7 	udiv	r0, r5, r7
 8000346:	fb07 5510 	mls	r5, r7, r0, r5
 800034a:	fb0e fe00 	mul.w	lr, lr, r0
 800034e:	b2a4      	uxth	r4, r4
 8000350:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x156>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x154>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80b6 	bhi.w	80004d4 <__udivmoddi4+0x2c0>
 8000368:	4628      	mov	r0, r5
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000372:	e79e      	b.n	80002b2 <__udivmoddi4+0x9e>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa25 fa07 	lsr.w	sl, r5, r7
 8000386:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038a:	fbba f8f9 	udiv	r8, sl, r9
 800038e:	fa20 f307 	lsr.w	r3, r0, r7
 8000392:	fb09 aa18 	mls	sl, r9, r8, sl
 8000396:	408d      	lsls	r5, r1
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	431d      	orrs	r5, r3
 800039e:	fa00 f301 	lsl.w	r3, r0, r1
 80003a2:	fb08 f00e 	mul.w	r0, r8, lr
 80003a6:	0c2c      	lsrs	r4, r5, #16
 80003a8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003ac:	42a0      	cmp	r0, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b8>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2bc>
 80003c0:	42a0      	cmp	r0, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2bc>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1a24      	subs	r4, r4, r0
 80003ce:	fbb4 f0f9 	udiv	r0, r4, r9
 80003d2:	fb09 4410 	mls	r4, r9, r0, r4
 80003d6:	fb00 fe0e 	mul.w	lr, r0, lr
 80003da:	b2ad      	uxth	r5, r5
 80003dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1e2>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2b4>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2b4>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fa:	fba0 9502 	umull	r9, r5, r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x2a4>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x2a0>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2d0>
 8000410:	ebb3 0208 	subs.w	r2, r3, r8
 8000414:	eb64 040e 	sbc.w	r4, r4, lr
 8000418:	fa22 f301 	lsr.w	r3, r2, r1
 800041c:	fa04 f707 	lsl.w	r7, r4, r7
 8000420:	431f      	orrs	r7, r3
 8000422:	40cc      	lsrs	r4, r1
 8000424:	e9c6 7400 	strd	r7, r4, [r6]
 8000428:	2100      	movs	r1, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa8>
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	f1c2 0120 	rsb	r1, r2, #32
 8000434:	fa25 f301 	lsr.w	r3, r5, r1
 8000438:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043c:	fa20 f101 	lsr.w	r1, r0, r1
 8000440:	4095      	lsls	r5, r2
 8000442:	430d      	orrs	r5, r1
 8000444:	fbb3 f1f7 	udiv	r1, r3, r7
 8000448:	fb07 3311 	mls	r3, r7, r1, r3
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	0c28      	lsrs	r0, r5, #16
 8000452:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000456:	fb01 f30e 	mul.w	r3, r1, lr
 800045a:	4283      	cmp	r3, r0
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x260>
 8000462:	eb1c 0000 	adds.w	r0, ip, r0
 8000466:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b8>
 800046c:	4283      	cmp	r3, r0
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b8>
 8000470:	3902      	subs	r1, #2
 8000472:	4460      	add	r0, ip
 8000474:	1ac0      	subs	r0, r0, r3
 8000476:	fbb0 f3f7 	udiv	r3, r0, r7
 800047a:	fb07 0013 	mls	r0, r7, r3, r0
 800047e:	b2ad      	uxth	r5, r5
 8000480:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000484:	fb03 f00e 	mul.w	r0, r3, lr
 8000488:	42a8      	cmp	r0, r5
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x28a>
 800048c:	eb1c 0505 	adds.w	r5, ip, r5
 8000490:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2b0>
 8000496:	42a8      	cmp	r0, r5
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2b0>
 800049a:	3b02      	subs	r3, #2
 800049c:	4465      	add	r5, ip
 800049e:	1a28      	subs	r0, r5, r0
 80004a0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0x104>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e707      	b.n	80002bc <__udivmoddi4+0xa8>
 80004ac:	462f      	mov	r7, r5
 80004ae:	e6e4      	b.n	800027a <__udivmoddi4+0x66>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6f9      	b.n	80002a8 <__udivmoddi4+0x94>
 80004b4:	454b      	cmp	r3, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f8>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3801      	subs	r0, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f8>
 80004c4:	4643      	mov	r3, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x28a>
 80004c8:	4628      	mov	r0, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1e2>
 80004cc:	4641      	mov	r1, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x260>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b8>
 80004d4:	4464      	add	r4, ip
 80004d6:	3802      	subs	r0, #2
 80004d8:	e747      	b.n	800036a <__udivmoddi4+0x156>
 80004da:	3b02      	subs	r3, #2
 80004dc:	4465      	add	r5, ip
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x12c>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e706      	b.n	80002f2 <__udivmoddi4+0xde>
 80004e4:	4631      	mov	r1, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa8>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	60f8      	str	r0, [r7, #12]
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	4a06      	ldr	r2, [pc, #24]	; (8000514 <vApplicationGetIdleTaskMemory+0x28>)
 80004fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004fe:	68bb      	ldr	r3, [r7, #8]
 8000500:	4a05      	ldr	r2, [pc, #20]	; (8000518 <vApplicationGetIdleTaskMemory+0x2c>)
 8000502:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	2280      	movs	r2, #128	; 0x80
 8000508:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800050a:	bf00      	nop
 800050c:	3714      	adds	r7, #20
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr
 8000514:	200002dc 	.word	0x200002dc
 8000518:	20000390 	.word	0x20000390

0800051c <prv_parse_num>:
 *                      as function will only add new value to existing one
 * \param[out]      out_num: Pointer to output number
 * \return          \ref lwdtcOK on success, member of \ref lwdtcr_t otherwise
 */
static lwdtcr_t
prv_parse_num(const char* token, size_t max_len, size_t* index, size_t* out_num) {
 800051c:	b480      	push	{r7}
 800051e:	b087      	sub	sp, #28
 8000520:	af00      	add	r7, sp, #0
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
 8000528:	603b      	str	r3, [r7, #0]
    size_t cnt = 0;
 800052a:	2300      	movs	r3, #0
 800052c:	617b      	str	r3, [r7, #20]

    ASSERT_TOKEN_VALID(CHAR_IS_NUM(*token));
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	2b2f      	cmp	r3, #47	; 0x2f
 8000534:	d903      	bls.n	800053e <prv_parse_num+0x22>
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	2b39      	cmp	r3, #57	; 0x39
 800053c:	d901      	bls.n	8000542 <prv_parse_num+0x26>
 800053e:	2303      	movs	r3, #3
 8000540:	e02c      	b.n	800059c <prv_parse_num+0x80>

    /* Parse number in decimal format */
    *out_num = 0;
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
    while (max_len > 0 && CHAR_IS_NUM(token[cnt])) {
 8000548:	e012      	b.n	8000570 <prv_parse_num+0x54>
        *out_num = (*out_num) * 10 + CHAR_TO_NUM(token[cnt]);
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	4613      	mov	r3, r2
 8000550:	009b      	lsls	r3, r3, #2
 8000552:	4413      	add	r3, r2
 8000554:	005b      	lsls	r3, r3, #1
 8000556:	4619      	mov	r1, r3
 8000558:	68fa      	ldr	r2, [r7, #12]
 800055a:	697b      	ldr	r3, [r7, #20]
 800055c:	4413      	add	r3, r2
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	440b      	add	r3, r1
 8000562:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	601a      	str	r2, [r3, #0]
        ++cnt;
 800056a:	697b      	ldr	r3, [r7, #20]
 800056c:	3301      	adds	r3, #1
 800056e:	617b      	str	r3, [r7, #20]
    while (max_len > 0 && CHAR_IS_NUM(token[cnt])) {
 8000570:	68bb      	ldr	r3, [r7, #8]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d00b      	beq.n	800058e <prv_parse_num+0x72>
 8000576:	68fa      	ldr	r2, [r7, #12]
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	4413      	add	r3, r2
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b2f      	cmp	r3, #47	; 0x2f
 8000580:	d905      	bls.n	800058e <prv_parse_num+0x72>
 8000582:	68fa      	ldr	r2, [r7, #12]
 8000584:	697b      	ldr	r3, [r7, #20]
 8000586:	4413      	add	r3, r2
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	2b39      	cmp	r3, #57	; 0x39
 800058c:	d9dd      	bls.n	800054a <prv_parse_num+0x2e>
    }
    *index += cnt;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	697b      	ldr	r3, [r7, #20]
 8000594:	441a      	add	r2, r3
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	601a      	str	r2, [r3, #0]
    return lwdtcOK;
 800059a:	2300      	movs	r3, #0
}
 800059c:	4618      	mov	r0, r3
 800059e:	371c      	adds	r7, #28
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bc80      	pop	{r7}
 80005a4:	4770      	bx	lr

080005a6 <prv_get_next_token>:
 * \brief           Get start of next token from a list
 * \param[in,out]   parser: Parser structure with all input data
 * \return          \ref lwdtcOK on success, member of \ref lwdtcr_t otherwise
 */
static lwdtcr_t
prv_get_next_token(prv_cron_parser_ctx_t* parser) {
 80005a6:	b480      	push	{r7}
 80005a8:	b085      	sub	sp, #20
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	6078      	str	r0, [r7, #4]
    const char* s = parser->cron_str;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	60fb      	str	r3, [r7, #12]
    size_t len = parser->cron_str_len;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	689b      	ldr	r3, [r3, #8]
 80005b8:	60bb      	str	r3, [r7, #8]

    /* Remove all leading spaces from the string */
    for (; len > 0 && s != NULL && *s == ' ' && *s != '\0'; ++s, --len) {}
 80005ba:	e005      	b.n	80005c8 <prv_get_next_token+0x22>
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	3301      	adds	r3, #1
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	3b01      	subs	r3, #1
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d00a      	beq.n	80005e4 <prv_get_next_token+0x3e>
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d007      	beq.n	80005e4 <prv_get_next_token+0x3e>
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b20      	cmp	r3, #32
 80005da:	d103      	bne.n	80005e4 <prv_get_next_token+0x3e>
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d1eb      	bne.n	80005bc <prv_get_next_token+0x16>
    if (len == 0 || s == NULL || *s == '\0') {
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d006      	beq.n	80005f8 <prv_get_next_token+0x52>
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d003      	beq.n	80005f8 <prv_get_next_token+0x52>
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d101      	bne.n	80005fc <prv_get_next_token+0x56>
        return lwdtcERRTOKEN;
 80005f8:	2303      	movs	r3, #3
 80005fa:	e025      	b.n	8000648 <prv_get_next_token+0xa2>
    }
    parser->new_token = s; /* Set start of the token */
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	68fa      	ldr	r2, [r7, #12]
 8000600:	60da      	str	r2, [r3, #12]

    /* Search for the end of token */
    for (; len > 0 && s != NULL && *s != ' ' && *s != '\0'; ++s, --len) {
 8000602:	e005      	b.n	8000610 <prv_get_next_token+0x6a>
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	3301      	adds	r3, #1
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	3b01      	subs	r3, #1
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d00a      	beq.n	800062c <prv_get_next_token+0x86>
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d007      	beq.n	800062c <prv_get_next_token+0x86>
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b20      	cmp	r3, #32
 8000622:	d003      	beq.n	800062c <prv_get_next_token+0x86>
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d1eb      	bne.n	8000604 <prv_get_next_token+0x5e>
        ;
    }
    parser->new_token_len = s - parser->new_token; /* Get token length */
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	68fa      	ldr	r2, [r7, #12]
 8000632:	1ad3      	subs	r3, r2, r3
 8000634:	461a      	mov	r2, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	611a      	str	r2, [r3, #16]

    parser->cron_str = s;       /* Set position where next token is about to start (with leading spaces) */
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	68fa      	ldr	r2, [r7, #12]
 800063e:	605a      	str	r2, [r3, #4]
    parser->cron_str_len = len; /* Set remaining length of the input string */
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	68ba      	ldr	r2, [r7, #8]
 8000644:	609a      	str	r2, [r3, #8]
    return lwdtcOK;
 8000646:	2300      	movs	r3, #0
}
 8000648:	4618      	mov	r0, r3
 800064a:	3714      	adds	r7, #20
 800064c:	46bd      	mov	sp, r7
 800064e:	bc80      	pop	{r7}
 8000650:	4770      	bx	lr

08000652 <prv_get_and_parse_next_token>:
 * \param[in]       val_min: Minimum allowed value user can input
 * \param[in]       val_max: Maximum allowed value user can input
 * \return          \ref lwdtcOK on success, member of \ref lwdtcr_t otherwise
 */
static lwdtcr_t
prv_get_and_parse_next_token(prv_cron_parser_ctx_t* parser, uint8_t* bit_map, size_t val_min, size_t val_max) {
 8000652:	b580      	push	{r7, lr}
 8000654:	b08c      	sub	sp, #48	; 0x30
 8000656:	af00      	add	r7, sp, #0
 8000658:	60f8      	str	r0, [r7, #12]
 800065a:	60b9      	str	r1, [r7, #8]
 800065c:	607a      	str	r2, [r7, #4]
 800065e:	603b      	str	r3, [r7, #0]
    size_t i = 0, bit_start_pos, bit_end_pos, bit_step;
 8000660:	2300      	movs	r3, #0
 8000662:	61fb      	str	r3, [r7, #28]
    uint8_t is_range, is_opposite;

    /* Get next token from string */
    ASSERT_ACTION(prv_get_next_token(parser) == lwdtcOK);
 8000664:	68f8      	ldr	r0, [r7, #12]
 8000666:	f7ff ff9e 	bl	80005a6 <prv_get_next_token>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <prv_get_and_parse_next_token+0x22>
 8000670:	2301      	movs	r3, #1
 8000672:	e139      	b.n	80008e8 <prv_get_and_parse_next_token+0x296>
     * Process token string in a while loop
     *
     * Use do-while loop to seamlessly process comma separations
     */
    do {
        bit_start_pos = 0;
 8000674:	2300      	movs	r3, #0
 8000676:	61bb      	str	r3, [r7, #24]
        bit_end_pos = SIZE_MAX;
 8000678:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800067c:	617b      	str	r3, [r7, #20]
        bit_step = 1;
 800067e:	2301      	movs	r3, #1
 8000680:	613b      	str	r3, [r7, #16]
        is_range = 0;
 8000682:	2300      	movs	r3, #0
 8000684:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        is_opposite = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        ASSERT_ACTION(i < parser->new_token_len); /* Check token length */
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	691a      	ldr	r2, [r3, #16]
 8000692:	69fb      	ldr	r3, [r7, #28]
 8000694:	429a      	cmp	r2, r3
 8000696:	d801      	bhi.n	800069c <prv_get_and_parse_next_token+0x4a>
 8000698:	2301      	movs	r3, #1
 800069a:	e125      	b.n	80008e8 <prv_get_and_parse_next_token+0x296>
         *          step defined by number
         *          (space between * and / is used to be able to keep it as C comment for this example)
         */

        /* Find start character first */
        if (parser->new_token[i] == '*') {
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	68da      	ldr	r2, [r3, #12]
 80006a0:	69fb      	ldr	r3, [r7, #28]
 80006a2:	4413      	add	r3, r2
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	2b2a      	cmp	r3, #42	; 0x2a
 80006a8:	d107      	bne.n	80006ba <prv_get_and_parse_next_token+0x68>
            i++;
 80006aa:	69fb      	ldr	r3, [r7, #28]
 80006ac:	3301      	adds	r3, #1
 80006ae:	61fb      	str	r3, [r7, #28]
             * Star represents any value between minimum and maximum
             * for specific date & time field.
             *
             * Set start and end positions accordingly
             */
            bit_start_pos = val_min;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	61bb      	str	r3, [r7, #24]
            bit_end_pos = val_max;
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	617b      	str	r3, [r7, #20]
 80006b8:	e014      	b.n	80006e4 <prv_get_and_parse_next_token+0x92>
             * eventually can even set maximum boundary later (when range is used)
             *
             * Since we don't know yet what is following after the number,
             * parse the number and set start and end bits to the same value
             */
            ASSERT_TOKEN_VALID(prv_parse_num(&parser->new_token[i], parser->new_token_len - i, &i, &bit_start_pos)
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	68da      	ldr	r2, [r3, #12]
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	18d0      	adds	r0, r2, r3
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	691a      	ldr	r2, [r3, #16]
 80006c6:	69fb      	ldr	r3, [r7, #28]
 80006c8:	1ad1      	subs	r1, r2, r3
 80006ca:	f107 0318 	add.w	r3, r7, #24
 80006ce:	f107 021c 	add.w	r2, r7, #28
 80006d2:	f7ff ff23 	bl	800051c <prv_parse_num>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <prv_get_and_parse_next_token+0x8e>
 80006dc:	2303      	movs	r3, #3
 80006de:	e103      	b.n	80008e8 <prv_get_and_parse_next_token+0x296>
                               == lwdtcOK);
            bit_end_pos = bit_start_pos;
 80006e0:	69bb      	ldr	r3, [r7, #24]
 80006e2:	617b      	str	r3, [r7, #20]
         * Character "-" defines range between min and max
         *
         * At this moment, step is still "1", indicating
         * every value between min and max is to be set
         */
        if (i < parser->new_token_len && parser->new_token[i] == '-') {
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	691a      	ldr	r2, [r3, #16]
 80006e8:	69fb      	ldr	r3, [r7, #28]
 80006ea:	429a      	cmp	r2, r3
 80006ec:	d939      	bls.n	8000762 <prv_get_and_parse_next_token+0x110>
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	68da      	ldr	r2, [r3, #12]
 80006f2:	69fb      	ldr	r3, [r7, #28]
 80006f4:	4413      	add	r3, r2
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b2d      	cmp	r3, #45	; 0x2d
 80006fa:	d132      	bne.n	8000762 <prv_get_and_parse_next_token+0x110>
            ++i;
 80006fc:	69fb      	ldr	r3, [r7, #28]
 80006fe:	3301      	adds	r3, #1
 8000700:	61fb      	str	r3, [r7, #28]

            /* Parse second part of range */
            ASSERT_ACTION(i < parser->new_token_len);
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	691a      	ldr	r2, [r3, #16]
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	429a      	cmp	r2, r3
 800070a:	d801      	bhi.n	8000710 <prv_get_and_parse_next_token+0xbe>
 800070c:	2301      	movs	r3, #1
 800070e:	e0eb      	b.n	80008e8 <prv_get_and_parse_next_token+0x296>
            ASSERT_TOKEN_VALID(prv_parse_num(&parser->new_token[i], parser->new_token_len - i, &i, &bit_end_pos)
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	68da      	ldr	r2, [r3, #12]
 8000714:	69fb      	ldr	r3, [r7, #28]
 8000716:	18d0      	adds	r0, r2, r3
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	691a      	ldr	r2, [r3, #16]
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	1ad1      	subs	r1, r2, r3
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	f107 021c 	add.w	r2, r7, #28
 8000728:	f7ff fef8 	bl	800051c <prv_parse_num>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <prv_get_and_parse_next_token+0xe4>
 8000732:	2303      	movs	r3, #3
 8000734:	e0d8      	b.n	80008e8 <prv_get_and_parse_next_token+0x296>
                               == lwdtcOK);

            /* Stop bit must be always higher or equal than start bit */
            if (bit_start_pos > bit_end_pos) {
 8000736:	69ba      	ldr	r2, [r7, #24]
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	429a      	cmp	r2, r3
 800073c:	d908      	bls.n	8000750 <prv_get_and_parse_next_token+0xfe>
                size_t tmp = bit_end_pos;
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	623b      	str	r3, [r7, #32]

                /* Change start and stop values */
                bit_end_pos = bit_start_pos;
 8000742:	69bb      	ldr	r3, [r7, #24]
 8000744:	617b      	str	r3, [r7, #20]
                bit_start_pos = tmp;
 8000746:	6a3b      	ldr	r3, [r7, #32]
 8000748:	61bb      	str	r3, [r7, #24]
                /* Mark it as opposite direction */
                is_opposite = 1;
 800074a:	2301      	movs	r3, #1
 800074c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            }
            ASSERT_TOKEN_VALID(bit_end_pos >= bit_start_pos);
 8000750:	697a      	ldr	r2, [r7, #20]
 8000752:	69bb      	ldr	r3, [r7, #24]
 8000754:	429a      	cmp	r2, r3
 8000756:	d201      	bcs.n	800075c <prv_get_and_parse_next_token+0x10a>
 8000758:	2303      	movs	r3, #3
 800075a:	e0c5      	b.n	80008e8 <prv_get_and_parse_next_token+0x296>
            is_range = 1;
 800075c:	2301      	movs	r3, #1
 800075e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
         *
         * A step_bit must be calculated according to input value and
         * end_position must be set to maximum, but only when range is not used,
         * indicating we want to use full range of available value
         */
        if (i < parser->new_token_len && parser->new_token[i] == '/') {
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	691a      	ldr	r2, [r3, #16]
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	429a      	cmp	r2, r3
 800076a:	d923      	bls.n	80007b4 <prv_get_and_parse_next_token+0x162>
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	68da      	ldr	r2, [r3, #12]
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	4413      	add	r3, r2
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b2f      	cmp	r3, #47	; 0x2f
 8000778:	d11c      	bne.n	80007b4 <prv_get_and_parse_next_token+0x162>
            ++i;
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	3301      	adds	r3, #1
 800077e:	61fb      	str	r3, [r7, #28]
            ASSERT_TOKEN_VALID(prv_parse_num(&parser->new_token[i], parser->new_token_len - i, &i, &bit_step)
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	68da      	ldr	r2, [r3, #12]
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	18d0      	adds	r0, r2, r3
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	691a      	ldr	r2, [r3, #16]
 800078c:	69fb      	ldr	r3, [r7, #28]
 800078e:	1ad1      	subs	r1, r2, r3
 8000790:	f107 0310 	add.w	r3, r7, #16
 8000794:	f107 021c 	add.w	r2, r7, #28
 8000798:	f7ff fec0 	bl	800051c <prv_parse_num>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <prv_get_and_parse_next_token+0x154>
 80007a2:	2303      	movs	r3, #3
 80007a4:	e0a0      	b.n	80008e8 <prv_get_and_parse_next_token+0x296>
             * If user did not specify range (min-max) values,
             * then all bits to the end of value are valid.
             *
             * Indicate this by setting end position as being maximum
             */
            if (!is_range) {
 80007a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d102      	bne.n	80007b4 <prv_get_and_parse_next_token+0x162>
                bit_end_pos = SIZE_MAX;
 80007ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007b2:	617b      	str	r3, [r7, #20]
            }
        }

        /* Verify valid user inputs, to make sure min value is lower than max one */
        if (bit_start_pos < val_min) {
 80007b4:	69bb      	ldr	r3, [r7, #24]
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d901      	bls.n	80007c0 <prv_get_and_parse_next_token+0x16e>
            LWDTC_DEBUG("bit_start_pos & is less than minimum: %d/%d\r\n", (int)bit_start_pos, (int)val_min);
            return lwdtcERRTOKEN;
 80007bc:	2303      	movs	r3, #3
 80007be:	e093      	b.n	80008e8 <prv_get_and_parse_next_token+0x296>
        }
        if (bit_end_pos > val_max) {
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	683a      	ldr	r2, [r7, #0]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d207      	bcs.n	80007d8 <prv_get_and_parse_next_token+0x186>
            /* Full value indicates complete range, perform manual strip */
            if (bit_end_pos != (size_t)-1) {
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80007ce:	d001      	beq.n	80007d4 <prv_get_and_parse_next_token+0x182>
                LWDTC_DEBUG("bit_end_pos is greater than maximum: %d/%d\r\n", (int)bit_end_pos, (int)val_max);
                return lwdtcERRTOKEN;
 80007d0:	2303      	movs	r3, #3
 80007d2:	e089      	b.n	80008e8 <prv_get_and_parse_next_token+0x296>
            }
            bit_end_pos = val_max;
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	617b      	str	r3, [r7, #20]
        }

        LWDTC_DEBUG("bit_start_pos: %u, bit_end_pos: %u, bit_step: %u, is_opposite: %u\r\n", (unsigned)bit_start_pos,
                    (unsigned)bit_end_pos, (unsigned)bit_step, (unsigned)is_opposite);

        if (is_opposite) {
 80007d8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d048      	beq.n	8000872 <prv_get_and_parse_next_token+0x220>
            size_t bit;

            /* Set bits in map from stop to the end value and from beginning to start value */
            for (bit = bit_end_pos; bit <= val_max; bit += bit_step) {
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80007e4:	e018      	b.n	8000818 <prv_get_and_parse_next_token+0x1c6>
                BIT_SET(bit_map, bit);
 80007e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007e8:	08db      	lsrs	r3, r3, #3
 80007ea:	68ba      	ldr	r2, [r7, #8]
 80007ec:	4413      	add	r3, r2
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	b25a      	sxtb	r2, r3
 80007f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007f4:	f003 0307 	and.w	r3, r3, #7
 80007f8:	2101      	movs	r1, #1
 80007fa:	fa01 f303 	lsl.w	r3, r1, r3
 80007fe:	b25b      	sxtb	r3, r3
 8000800:	4313      	orrs	r3, r2
 8000802:	b259      	sxtb	r1, r3
 8000804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000806:	08db      	lsrs	r3, r3, #3
 8000808:	68ba      	ldr	r2, [r7, #8]
 800080a:	4413      	add	r3, r2
 800080c:	b2ca      	uxtb	r2, r1
 800080e:	701a      	strb	r2, [r3, #0]
            for (bit = bit_end_pos; bit <= val_max; bit += bit_step) {
 8000810:	693b      	ldr	r3, [r7, #16]
 8000812:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000814:	4413      	add	r3, r2
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
 8000818:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	429a      	cmp	r2, r3
 800081e:	d9e2      	bls.n	80007e6 <prv_get_and_parse_next_token+0x194>
            }
            /* We start at the multiplier of bit_step value */
            for (bit = bit % bit_step + val_min; bit <= bit_start_pos; bit += bit_step) {
 8000820:	693a      	ldr	r2, [r7, #16]
 8000822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000824:	fbb3 f1f2 	udiv	r1, r3, r2
 8000828:	fb01 f202 	mul.w	r2, r1, r2
 800082c:	1a9b      	subs	r3, r3, r2
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	4413      	add	r3, r2
 8000832:	62bb      	str	r3, [r7, #40]	; 0x28
 8000834:	e018      	b.n	8000868 <prv_get_and_parse_next_token+0x216>
                BIT_SET(bit_map, bit);
 8000836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000838:	08db      	lsrs	r3, r3, #3
 800083a:	68ba      	ldr	r2, [r7, #8]
 800083c:	4413      	add	r3, r2
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	b25a      	sxtb	r2, r3
 8000842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000844:	f003 0307 	and.w	r3, r3, #7
 8000848:	2101      	movs	r1, #1
 800084a:	fa01 f303 	lsl.w	r3, r1, r3
 800084e:	b25b      	sxtb	r3, r3
 8000850:	4313      	orrs	r3, r2
 8000852:	b259      	sxtb	r1, r3
 8000854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000856:	08db      	lsrs	r3, r3, #3
 8000858:	68ba      	ldr	r2, [r7, #8]
 800085a:	4413      	add	r3, r2
 800085c:	b2ca      	uxtb	r2, r1
 800085e:	701a      	strb	r2, [r3, #0]
            for (bit = bit % bit_step + val_min; bit <= bit_start_pos; bit += bit_step) {
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000864:	4413      	add	r3, r2
 8000866:	62bb      	str	r3, [r7, #40]	; 0x28
 8000868:	69bb      	ldr	r3, [r7, #24]
 800086a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800086c:	429a      	cmp	r2, r3
 800086e:	d9e2      	bls.n	8000836 <prv_get_and_parse_next_token+0x1e4>
 8000870:	e01f      	b.n	80008b2 <prv_get_and_parse_next_token+0x260>
            }
        } else {
            /* Set bits in map from start to end */
            for (size_t bit = bit_start_pos; bit <= bit_end_pos; bit += bit_step) {
 8000872:	69bb      	ldr	r3, [r7, #24]
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
 8000876:	e018      	b.n	80008aa <prv_get_and_parse_next_token+0x258>
                BIT_SET(bit_map, bit);
 8000878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087a:	08db      	lsrs	r3, r3, #3
 800087c:	68ba      	ldr	r2, [r7, #8]
 800087e:	4413      	add	r3, r2
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	b25a      	sxtb	r2, r3
 8000884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000886:	f003 0307 	and.w	r3, r3, #7
 800088a:	2101      	movs	r1, #1
 800088c:	fa01 f303 	lsl.w	r3, r1, r3
 8000890:	b25b      	sxtb	r3, r3
 8000892:	4313      	orrs	r3, r2
 8000894:	b259      	sxtb	r1, r3
 8000896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000898:	08db      	lsrs	r3, r3, #3
 800089a:	68ba      	ldr	r2, [r7, #8]
 800089c:	4413      	add	r3, r2
 800089e:	b2ca      	uxtb	r2, r1
 80008a0:	701a      	strb	r2, [r3, #0]
            for (size_t bit = bit_start_pos; bit <= bit_end_pos; bit += bit_step) {
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008a6:	4413      	add	r3, r2
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008ae:	429a      	cmp	r2, r3
 80008b0:	d9e2      	bls.n	8000878 <prv_get_and_parse_next_token+0x226>
            }
        }

        /* If we are not at the end, character must be comma */
        if (i == parser->new_token_len) {
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	691a      	ldr	r2, [r3, #16]
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d013      	beq.n	80008e4 <prv_get_and_parse_next_token+0x292>
            break;
        } else if (parser->new_token[i] != ',') {
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	68da      	ldr	r2, [r3, #12]
 80008c0:	69fb      	ldr	r3, [r7, #28]
 80008c2:	4413      	add	r3, r2
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2b2c      	cmp	r3, #44	; 0x2c
 80008c8:	d001      	beq.n	80008ce <prv_get_and_parse_next_token+0x27c>
            return lwdtcERRTOKEN;
 80008ca:	2303      	movs	r3, #3
 80008cc:	e00c      	b.n	80008e8 <prv_get_and_parse_next_token+0x296>
        }
    } while (parser->new_token[i++] == ','); /* Could be replaced by (1) */
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	68da      	ldr	r2, [r3, #12]
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	1c59      	adds	r1, r3, #1
 80008d6:	61f9      	str	r1, [r7, #28]
 80008d8:	4413      	add	r3, r2
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b2c      	cmp	r3, #44	; 0x2c
 80008de:	f43f aec9 	beq.w	8000674 <prv_get_and_parse_next_token+0x22>
 80008e2:	e000      	b.n	80008e6 <prv_get_and_parse_next_token+0x294>
            break;
 80008e4:	bf00      	nop
    return lwdtcOK;
 80008e6:	2300      	movs	r3, #0
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3730      	adds	r7, #48	; 0x30
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <lwdtc_cron_parse_with_len>:
 * \param[in]       cron_str_len: Length of input cron string,
 *                      not counting potential `NULL` termination character
 * \return          \ref lwdtcOK on success, member of \ref lwdtcr_t otherwise
 */
lwdtcr_t
lwdtc_cron_parse_with_len(lwdtc_cron_ctx_t* ctx, const char* cron_str, size_t cron_str_len) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	; 0x28
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	607a      	str	r2, [r7, #4]
    prv_cron_parser_ctx_t parser = {0};
 80008fc:	f107 0310 	add.w	r3, r7, #16
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
    lwdtcr_t res;

    ASSERT_PARAM(ctx != NULL && cron_str != NULL && cron_str_len > 0);
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d005      	beq.n	800091e <lwdtc_cron_parse_with_len+0x2e>
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d002      	beq.n	800091e <lwdtc_cron_parse_with_len+0x2e>
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d101      	bne.n	8000922 <lwdtc_cron_parse_with_len+0x32>
 800091e:	2302      	movs	r3, #2
 8000920:	e090      	b.n	8000a44 <lwdtc_cron_parse_with_len+0x154>
    memset(ctx, 0x00, sizeof(*ctx)); /* Reset structure */
 8000922:	222c      	movs	r2, #44	; 0x2c
 8000924:	2100      	movs	r1, #0
 8000926:	68f8      	ldr	r0, [r7, #12]
 8000928:	f005 fbaa 	bl	8006080 <memset>

    /* Setup parser */
    parser.ctx = ctx;
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	613b      	str	r3, [r7, #16]
    parser.cron_str = cron_str;
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	617b      	str	r3, [r7, #20]
    parser.cron_str_len = cron_str_len;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	61bb      	str	r3, [r7, #24]
    if ((res = (func_call)) != lwdtcOK) {                                                                              \
        return res;                                                                                                    \
    }

    /* Parse seconds field */
    ASSERT_GET_PARSE_TOKEN(prv_get_and_parse_next_token(&parser, ctx->sec, LWDTC_SEC_MIN, LWDTC_SEC_MAX));
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	1d19      	adds	r1, r3, #4
 800093c:	f107 0010 	add.w	r0, r7, #16
 8000940:	233b      	movs	r3, #59	; 0x3b
 8000942:	2200      	movs	r2, #0
 8000944:	f7ff fe85 	bl	8000652 <prv_get_and_parse_next_token>
 8000948:	4603      	mov	r3, r0
 800094a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800094e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000952:	2b00      	cmp	r3, #0
 8000954:	d002      	beq.n	800095c <lwdtc_cron_parse_with_len+0x6c>
 8000956:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800095a:	e073      	b.n	8000a44 <lwdtc_cron_parse_with_len+0x154>
    LWDTC_DEBUG("Seconds token: len: %d, token: %.*s, rem_len: %d\r\n", (int)parser.new_token_len,
                (int)parser.new_token_len, parser.new_token, (int)parser.cron_str_len);

    /* Parse minutes field */
    ASSERT_GET_PARSE_TOKEN(prv_get_and_parse_next_token(&parser, ctx->min, LWDTC_MIN_MIN, LWDTC_MIN_MAX));
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	f103 010c 	add.w	r1, r3, #12
 8000962:	f107 0010 	add.w	r0, r7, #16
 8000966:	233b      	movs	r3, #59	; 0x3b
 8000968:	2200      	movs	r2, #0
 800096a:	f7ff fe72 	bl	8000652 <prv_get_and_parse_next_token>
 800096e:	4603      	mov	r3, r0
 8000970:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000974:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000978:	2b00      	cmp	r3, #0
 800097a:	d002      	beq.n	8000982 <lwdtc_cron_parse_with_len+0x92>
 800097c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000980:	e060      	b.n	8000a44 <lwdtc_cron_parse_with_len+0x154>
    LWDTC_DEBUG("Minutes token: len: %d, token: %.*s, rem_len: %d\r\n", (int)parser.new_token_len,
                (int)parser.new_token_len, parser.new_token, (int)parser.cron_str_len);

    /* Parse hours field */
    ASSERT_GET_PARSE_TOKEN(prv_get_and_parse_next_token(&parser, ctx->hour, LWDTC_HOUR_MIN, LWDTC_HOUR_MAX));
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	f103 0114 	add.w	r1, r3, #20
 8000988:	f107 0010 	add.w	r0, r7, #16
 800098c:	2317      	movs	r3, #23
 800098e:	2200      	movs	r2, #0
 8000990:	f7ff fe5f 	bl	8000652 <prv_get_and_parse_next_token>
 8000994:	4603      	mov	r3, r0
 8000996:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800099a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d002      	beq.n	80009a8 <lwdtc_cron_parse_with_len+0xb8>
 80009a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009a6:	e04d      	b.n	8000a44 <lwdtc_cron_parse_with_len+0x154>
    LWDTC_DEBUG("Hours token: len: %d, token: %.*s, rem_len: %d\r\n", (int)parser.new_token_len,
                (int)parser.new_token_len, parser.new_token, (int)parser.cron_str_len);

    /* Parse day in month field */
    ASSERT_GET_PARSE_TOKEN(prv_get_and_parse_next_token(&parser, ctx->mday, LWDTC_MDAY_MIN, LWDTC_MDAY_MAX));
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	f103 0117 	add.w	r1, r3, #23
 80009ae:	f107 0010 	add.w	r0, r7, #16
 80009b2:	231f      	movs	r3, #31
 80009b4:	2201      	movs	r2, #1
 80009b6:	f7ff fe4c 	bl	8000652 <prv_get_and_parse_next_token>
 80009ba:	4603      	mov	r3, r0
 80009bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80009c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d002      	beq.n	80009ce <lwdtc_cron_parse_with_len+0xde>
 80009c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009cc:	e03a      	b.n	8000a44 <lwdtc_cron_parse_with_len+0x154>
    LWDTC_DEBUG("Mday token: len: %d, token: %.*s, rem_len: %d\r\n", (int)parser.new_token_len,
                (int)parser.new_token_len, parser.new_token, (int)parser.cron_str_len);

    /* Parse month field */
    ASSERT_GET_PARSE_TOKEN(prv_get_and_parse_next_token(&parser, ctx->mon, LWDTC_MON_MIN, LWDTC_MON_MAX));
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	f103 011b 	add.w	r1, r3, #27
 80009d4:	f107 0010 	add.w	r0, r7, #16
 80009d8:	230c      	movs	r3, #12
 80009da:	2201      	movs	r2, #1
 80009dc:	f7ff fe39 	bl	8000652 <prv_get_and_parse_next_token>
 80009e0:	4603      	mov	r3, r0
 80009e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80009e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d002      	beq.n	80009f4 <lwdtc_cron_parse_with_len+0x104>
 80009ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009f2:	e027      	b.n	8000a44 <lwdtc_cron_parse_with_len+0x154>
    LWDTC_DEBUG("Month token: len: %d, token: %.*s, rem_len: %d\r\n", (int)parser.new_token_len,
                (int)parser.new_token_len, parser.new_token, (int)parser.cron_str_len);

    /* Parse day in a week field */
    ASSERT_GET_PARSE_TOKEN(prv_get_and_parse_next_token(&parser, ctx->wday, LWDTC_WDAY_MIN, LWDTC_WDAY_MAX));
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	f103 011d 	add.w	r1, r3, #29
 80009fa:	f107 0010 	add.w	r0, r7, #16
 80009fe:	2306      	movs	r3, #6
 8000a00:	2200      	movs	r2, #0
 8000a02:	f7ff fe26 	bl	8000652 <prv_get_and_parse_next_token>
 8000a06:	4603      	mov	r3, r0
 8000a08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000a0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d002      	beq.n	8000a1a <lwdtc_cron_parse_with_len+0x12a>
 8000a14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a18:	e014      	b.n	8000a44 <lwdtc_cron_parse_with_len+0x154>
    LWDTC_DEBUG("Weekday token: len: %d, token: %.*s, rem_len: %d\r\n", (int)parser.new_token_len,
                (int)parser.new_token_len, parser.new_token, (int)parser.cron_str_len);

    /* Parse year field */
    ASSERT_GET_PARSE_TOKEN(prv_get_and_parse_next_token(&parser, ctx->year, LWDTC_YEAR_MIN, LWDTC_YEAR_MAX));
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	f103 011e 	add.w	r1, r3, #30
 8000a20:	f107 0010 	add.w	r0, r7, #16
 8000a24:	2364      	movs	r3, #100	; 0x64
 8000a26:	2200      	movs	r2, #0
 8000a28:	f7ff fe13 	bl	8000652 <prv_get_and_parse_next_token>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000a32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d002      	beq.n	8000a40 <lwdtc_cron_parse_with_len+0x150>
 8000a3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a3e:	e001      	b.n	8000a44 <lwdtc_cron_parse_with_len+0x154>
    LWDTC_DEBUG("Year token: len: %d, token: %.*s, rem_len: %d\r\n", (int)parser.new_token_len,
                (int)parser.new_token_len, parser.new_token, (int)parser.cron_str_len);
    return res;
 8000a40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3728      	adds	r7, #40	; 0x28
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <lwdtc_cron_parse_multi>:
 *                      Used only if function doesn't return \ref lwdtcOK,
 *                      otherwise pointer doesn't get modified
 * \return          \ref lwdtcOK on success, member of \ref lwdtcr_t otherwise
 */
lwdtcr_t
lwdtc_cron_parse_multi(lwdtc_cron_ctx_t* cron_ctx, struct dcCron dcCrontxt[], size_t ctx_len, size_t* fail_index) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b088      	sub	sp, #32
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
 8000a58:	603b      	str	r3, [r7, #0]
    lwdtcr_t res = lwdtcERR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	77fb      	strb	r3, [r7, #31]
    int x = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	617b      	str	r3, [r7, #20]

    ASSERT_PARAM(cron_ctx != NULL && ctx_len > 0);
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d002      	beq.n	8000a6e <lwdtc_cron_parse_multi+0x22>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d101      	bne.n	8000a72 <lwdtc_cron_parse_multi+0x26>
 8000a6e:	2302      	movs	r3, #2
 8000a70:	e038      	b.n	8000ae4 <lwdtc_cron_parse_multi+0x98>
//

    /* Parse all input strings, each to its own cron context structure */
    for (size_t i = 0; i < ctx_len; ++i) {
 8000a72:	2300      	movs	r3, #0
 8000a74:	61bb      	str	r3, [r7, #24]
 8000a76:	e02e      	b.n	8000ad6 <lwdtc_cron_parse_multi+0x8a>
    	x = strlen(dcCrontxt[i].cron);
 8000a78:	69ba      	ldr	r2, [r7, #24]
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	4413      	add	r3, r2
 8000a80:	011b      	lsls	r3, r3, #4
 8000a82:	461a      	mov	r2, r3
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	4413      	add	r3, r2
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff fb61 	bl	8000150 <strlen>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	617b      	str	r3, [r7, #20]
        if ((res = lwdtc_cron_parse_with_len(&cron_ctx[i], dcCrontxt[i].cron, x)) != lwdtcOK) {
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	222c      	movs	r2, #44	; 0x2c
 8000a96:	fb02 f303 	mul.w	r3, r2, r3
 8000a9a:	68fa      	ldr	r2, [r7, #12]
 8000a9c:	18d0      	adds	r0, r2, r3
 8000a9e:	69ba      	ldr	r2, [r7, #24]
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	4413      	add	r3, r2
 8000aa6:	011b      	lsls	r3, r3, #4
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	4413      	add	r3, r2
 8000aae:	4619      	mov	r1, r3
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	f7ff ff1c 	bl	80008f0 <lwdtc_cron_parse_with_len>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	77fb      	strb	r3, [r7, #31]
 8000abc:	7ffb      	ldrb	r3, [r7, #31]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d006      	beq.n	8000ad0 <lwdtc_cron_parse_multi+0x84>
            if (fail_index != NULL) {
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d00b      	beq.n	8000ae0 <lwdtc_cron_parse_multi+0x94>
                *fail_index = i;
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	69ba      	ldr	r2, [r7, #24]
 8000acc:	601a      	str	r2, [r3, #0]
            }
            break;
 8000ace:	e007      	b.n	8000ae0 <lwdtc_cron_parse_multi+0x94>
    for (size_t i = 0; i < ctx_len; ++i) {
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	61bb      	str	r3, [r7, #24]
 8000ad6:	69ba      	ldr	r2, [r7, #24]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	d3cc      	bcc.n	8000a78 <lwdtc_cron_parse_multi+0x2c>
 8000ade:	e000      	b.n	8000ae2 <lwdtc_cron_parse_multi+0x96>
            break;
 8000ae0:	bf00      	nop
        }
    }
    return res;
 8000ae2:	7ffb      	ldrb	r3, [r7, #31]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3720      	adds	r7, #32
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <lwdtc_cron_is_valid_for_time>:
 *                      and does not perform additional check
 * \param[in]       cron_ctx: Cron context object with valid structure
 * \return          \ref lwdtcOK on success, member of \ref lwdtcr_t otherwise
 */
lwdtcr_t
lwdtc_cron_is_valid_for_time(const struct tm* tm_time, const lwdtc_cron_ctx_t* cron_ctx, int *idtask) {
 8000aec:	b480      	push	{r7}
 8000aee:	b087      	sub	sp, #28
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
    lwdtcr_t res = lwdtcOK;
 8000af8:	2300      	movs	r3, #0
 8000afa:	75fb      	strb	r3, [r7, #23]
    int i = *idtask;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	613b      	str	r3, [r7, #16]

    ASSERT_PARAM(tm_time != NULL && cron_ctx != NULL);
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d002      	beq.n	8000b0e <lwdtc_cron_is_valid_for_time+0x22>
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d101      	bne.n	8000b12 <lwdtc_cron_is_valid_for_time+0x26>
 8000b0e:	2302      	movs	r3, #2
 8000b10:	e09f      	b.n	8000c52 <lwdtc_cron_is_valid_for_time+0x166>
     * - When particular day in month occurs
     * - or when particular day in week occurs, effectively becoming OR operation.
     *
     * Our cron is a valid when bitwise AND-ed between all fields is a pass
     */
    if (!BIT_IS_SET(cron_ctx[i].sec, tm_time->tm_sec) || !BIT_IS_SET(cron_ctx[i].min, tm_time->tm_min)
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	222c      	movs	r2, #44	; 0x2c
 8000b16:	fb02 f303 	mul.w	r3, r2, r3
 8000b1a:	68ba      	ldr	r2, [r7, #8]
 8000b1c:	441a      	add	r2, r3
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	10db      	asrs	r3, r3, #3
 8000b24:	4413      	add	r3, r2
 8000b26:	791b      	ldrb	r3, [r3, #4]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	fa42 f303 	asr.w	r3, r2, r3
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	f000 8086 	beq.w	8000c4c <lwdtc_cron_is_valid_for_time+0x160>
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	222c      	movs	r2, #44	; 0x2c
 8000b44:	fb02 f303 	mul.w	r3, r2, r3
 8000b48:	68ba      	ldr	r2, [r7, #8]
 8000b4a:	441a      	add	r2, r3
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	10db      	asrs	r3, r3, #3
 8000b52:	4413      	add	r3, r2
 8000b54:	7b1b      	ldrb	r3, [r3, #12]
 8000b56:	461a      	mov	r2, r3
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f003 0307 	and.w	r3, r3, #7
 8000b60:	fa42 f303 	asr.w	r3, r2, r3
 8000b64:	f003 0301 	and.w	r3, r3, #1
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d06f      	beq.n	8000c4c <lwdtc_cron_is_valid_for_time+0x160>
        || !BIT_IS_SET(cron_ctx[i].hour, tm_time->tm_hour) || !BIT_IS_SET(cron_ctx[i].mday, tm_time->tm_mday)
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	222c      	movs	r2, #44	; 0x2c
 8000b70:	fb02 f303 	mul.w	r3, r2, r3
 8000b74:	68ba      	ldr	r2, [r7, #8]
 8000b76:	441a      	add	r2, r3
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	689b      	ldr	r3, [r3, #8]
 8000b7c:	10db      	asrs	r3, r3, #3
 8000b7e:	4413      	add	r3, r2
 8000b80:	7d1b      	ldrb	r3, [r3, #20]
 8000b82:	461a      	mov	r2, r3
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	f003 0307 	and.w	r3, r3, #7
 8000b8c:	fa42 f303 	asr.w	r3, r2, r3
 8000b90:	f003 0301 	and.w	r3, r3, #1
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d059      	beq.n	8000c4c <lwdtc_cron_is_valid_for_time+0x160>
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	222c      	movs	r2, #44	; 0x2c
 8000b9c:	fb02 f303 	mul.w	r3, r2, r3
 8000ba0:	68ba      	ldr	r2, [r7, #8]
 8000ba2:	441a      	add	r2, r3
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	10db      	asrs	r3, r3, #3
 8000baa:	4413      	add	r3, r2
 8000bac:	7ddb      	ldrb	r3, [r3, #23]
 8000bae:	461a      	mov	r2, r3
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	f003 0307 	and.w	r3, r3, #7
 8000bb8:	fa42 f303 	asr.w	r3, r2, r3
 8000bbc:	f003 0301 	and.w	r3, r3, #1
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d043      	beq.n	8000c4c <lwdtc_cron_is_valid_for_time+0x160>
        || !BIT_IS_SET(cron_ctx[i].mon, tm_time->tm_mon) || !BIT_IS_SET(cron_ctx[i].wday, tm_time->tm_wday)
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	222c      	movs	r2, #44	; 0x2c
 8000bc8:	fb02 f303 	mul.w	r3, r2, r3
 8000bcc:	68ba      	ldr	r2, [r7, #8]
 8000bce:	441a      	add	r2, r3
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	691b      	ldr	r3, [r3, #16]
 8000bd4:	10db      	asrs	r3, r3, #3
 8000bd6:	4413      	add	r3, r2
 8000bd8:	7edb      	ldrb	r3, [r3, #27]
 8000bda:	461a      	mov	r2, r3
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	691b      	ldr	r3, [r3, #16]
 8000be0:	f003 0307 	and.w	r3, r3, #7
 8000be4:	fa42 f303 	asr.w	r3, r2, r3
 8000be8:	f003 0301 	and.w	r3, r3, #1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d02d      	beq.n	8000c4c <lwdtc_cron_is_valid_for_time+0x160>
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	222c      	movs	r2, #44	; 0x2c
 8000bf4:	fb02 f303 	mul.w	r3, r2, r3
 8000bf8:	68ba      	ldr	r2, [r7, #8]
 8000bfa:	441a      	add	r2, r3
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	10db      	asrs	r3, r3, #3
 8000c02:	4413      	add	r3, r2
 8000c04:	7f5b      	ldrb	r3, [r3, #29]
 8000c06:	461a      	mov	r2, r3
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	f003 0307 	and.w	r3, r3, #7
 8000c10:	fa42 f303 	asr.w	r3, r2, r3
 8000c14:	f003 0301 	and.w	r3, r3, #1
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d017      	beq.n	8000c4c <lwdtc_cron_is_valid_for_time+0x160>
        || !BIT_IS_SET(cron_ctx[i].year, (tm_time->tm_year - 100))) {
 8000c1c:	693b      	ldr	r3, [r7, #16]
 8000c1e:	222c      	movs	r2, #44	; 0x2c
 8000c20:	fb02 f303 	mul.w	r3, r2, r3
 8000c24:	68ba      	ldr	r2, [r7, #8]
 8000c26:	441a      	add	r2, r3
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	695b      	ldr	r3, [r3, #20]
 8000c2c:	3b64      	subs	r3, #100	; 0x64
 8000c2e:	10db      	asrs	r3, r3, #3
 8000c30:	4413      	add	r3, r2
 8000c32:	7f9b      	ldrb	r3, [r3, #30]
 8000c34:	461a      	mov	r2, r3
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	695b      	ldr	r3, [r3, #20]
 8000c3a:	3b64      	subs	r3, #100	; 0x64
 8000c3c:	f003 0307 	and.w	r3, r3, #7
 8000c40:	fa42 f303 	asr.w	r3, r2, r3
 8000c44:	f003 0301 	and.w	r3, r3, #1
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d101      	bne.n	8000c50 <lwdtc_cron_is_valid_for_time+0x164>
        res = lwdtcERR;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	75fb      	strb	r3, [r7, #23]
    }
    return res;
 8000c50:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	371c      	adds	r7, #28
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr

08000c5c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c64:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c68:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000c6c:	f003 0301 	and.w	r3, r3, #1
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d013      	beq.n	8000c9c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000c74:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c78:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000c7c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d00b      	beq.n	8000c9c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000c84:	e000      	b.n	8000c88 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000c86:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000c88:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d0f9      	beq.n	8000c86 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000c92:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	b2d2      	uxtb	r2, r2
 8000c9a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000c9c:	687b      	ldr	r3, [r7, #4]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr

08000ca8 <_write>:
static void MX_USART1_UART_Init(void);
void Start_Cron_Task(void const * argument);
void Start_Action_Task(void const * argument);

/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 50);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	2332      	movs	r3, #50	; 0x32
 8000cba:	68b9      	ldr	r1, [r7, #8]
 8000cbc:	480c      	ldr	r0, [pc, #48]	; (8000cf0 <_write+0x48>)
 8000cbe:	f002 fe5a 	bl	8003976 <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]
 8000cc6:	e009      	b.n	8000cdc <_write+0x34>
		ITM_SendChar(*ptr++);
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	1c5a      	adds	r2, r3, #1
 8000ccc:	60ba      	str	r2, [r7, #8]
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff ffc3 	bl	8000c5c <ITM_SendChar>
	for (i = 0; i < len; i++) {
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	697a      	ldr	r2, [r7, #20]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	dbf1      	blt.n	8000cc8 <_write+0x20>
	}
	return len;
 8000ce4:	687b      	ldr	r3, [r7, #4]
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3718      	adds	r7, #24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200005dc 	.word	0x200005dc

08000cf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf4:	b5b0      	push	{r4, r5, r7, lr}
 8000cf6:	b092      	sub	sp, #72	; 0x48
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cfa:	f000 fd47 	bl	800178c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cfe:	f000 f84d 	bl	8000d9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d02:	f000 f91d 	bl	8000f40 <MX_GPIO_Init>
  MX_RTC_Init();
 8000d06:	f000 f8a7 	bl	8000e58 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000d0a:	f000 f8ef 	bl	8000eec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Hello world! \r\n");
 8000d0e:	481c      	ldr	r0, [pc, #112]	; (8000d80 <main+0x8c>)
 8000d10:	f005 fd92 	bl	8006838 <puts>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue */
  osMessageQStaticDef(myQueue, 32, uint8_t, myQueueBuffer, &myQueueControlBlock);
 8000d14:	4b1b      	ldr	r3, [pc, #108]	; (8000d84 <main+0x90>)
 8000d16:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000d1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueHandle = osMessageCreate(osMessageQ(myQueue), NULL);
 8000d20:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f002 fffa 	bl	8003d20 <osMessageCreate>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	4a16      	ldr	r2, [pc, #88]	; (8000d88 <main+0x94>)
 8000d30:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of my_Cron_Task */
  osThreadDef(my_Cron_Task, Start_Cron_Task, osPriorityNormal, 0, 256);
 8000d32:	4b16      	ldr	r3, [pc, #88]	; (8000d8c <main+0x98>)
 8000d34:	f107 041c 	add.w	r4, r7, #28
 8000d38:	461d      	mov	r5, r3
 8000d3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  my_Cron_TaskHandle = osThreadCreate(osThread(my_Cron_Task), NULL);
 8000d46:	f107 031c 	add.w	r3, r7, #28
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f002 ff9b 	bl	8003c88 <osThreadCreate>
 8000d52:	4603      	mov	r3, r0
 8000d54:	4a0e      	ldr	r2, [pc, #56]	; (8000d90 <main+0x9c>)
 8000d56:	6013      	str	r3, [r2, #0]

  /* definition and creation of my_Action_Task */
  osThreadDef(my_Action_Task, Start_Action_Task, osPriorityNormal, 0, 256);
 8000d58:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <main+0xa0>)
 8000d5a:	463c      	mov	r4, r7
 8000d5c:	461d      	mov	r5, r3
 8000d5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d62:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  my_Action_TaskHandle = osThreadCreate(osThread(my_Action_Task), NULL);
 8000d6a:	463b      	mov	r3, r7
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f002 ff8a 	bl	8003c88 <osThreadCreate>
 8000d74:	4603      	mov	r3, r0
 8000d76:	4a08      	ldr	r2, [pc, #32]	; (8000d98 <main+0xa4>)
 8000d78:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000d7a:	f002 ff7e 	bl	8003c7a <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <main+0x8a>
 8000d80:	08008734 	.word	0x08008734
 8000d84:	08008744 	.word	0x08008744
 8000d88:	20000628 	.word	0x20000628
 8000d8c:	08008754 	.word	0x08008754
 8000d90:	20000620 	.word	0x20000620
 8000d94:	08008770 	.word	0x08008770
 8000d98:	20000624 	.word	0x20000624

08000d9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b094      	sub	sp, #80	; 0x50
 8000da0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000da2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000da6:	2228      	movs	r2, #40	; 0x28
 8000da8:	2100      	movs	r1, #0
 8000daa:	4618      	mov	r0, r3
 8000dac:	f005 f968 	bl	8006080 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000dcc:	2309      	movs	r3, #9
 8000dce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000dde:	2301      	movs	r3, #1
 8000de0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000de2:	2302      	movs	r3, #2
 8000de4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000de6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000dec:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000df0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 ff82 	bl	8001d00 <HAL_RCC_OscConfig>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000e02:	f000 fa95 	bl	8001330 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e06:	230f      	movs	r3, #15
 8000e08:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e16:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	2102      	movs	r1, #2
 8000e22:	4618      	mov	r0, r3
 8000e24:	f001 f9ee 	bl	8002204 <HAL_RCC_ClockConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e2e:	f000 fa7f 	bl	8001330 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e32:	2301      	movs	r3, #1
 8000e34:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e3a:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e3c:	1d3b      	adds	r3, r7, #4
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f001 fba8 	bl	8002594 <HAL_RCCEx_PeriphCLKConfig>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000e4a:	f000 fa71 	bl	8001330 <Error_Handler>
  }
}
 8000e4e:	bf00      	nop
 8000e50:	3750      	adds	r7, #80	; 0x50
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
	...

08000e58 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	2100      	movs	r1, #0
 8000e62:	460a      	mov	r2, r1
 8000e64:	801a      	strh	r2, [r3, #0]
 8000e66:	460a      	mov	r2, r1
 8000e68:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <MX_RTC_Init+0x8c>)
 8000e70:	4a1d      	ldr	r2, [pc, #116]	; (8000ee8 <MX_RTC_Init+0x90>)
 8000e72:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000e74:	4b1b      	ldr	r3, [pc, #108]	; (8000ee4 <MX_RTC_Init+0x8c>)
 8000e76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e7a:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000e7c:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <MX_RTC_Init+0x8c>)
 8000e7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e82:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e84:	4817      	ldr	r0, [pc, #92]	; (8000ee4 <MX_RTC_Init+0x8c>)
 8000e86:	f001 fcfb 	bl	8002880 <HAL_RTC_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8000e90:	f000 fa4e 	bl	8001330 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x15;
 8000e94:	2315      	movs	r3, #21
 8000e96:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x10;
 8000e98:	2310      	movs	r3, #16
 8000e9a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ea0:	1d3b      	adds	r3, r7, #4
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	480f      	ldr	r0, [pc, #60]	; (8000ee4 <MX_RTC_Init+0x8c>)
 8000ea8:	f001 fd80 	bl	80029ac <HAL_RTC_SetTime>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8000eb2:	f000 fa3d 	bl	8001330 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_APRIL;
 8000eba:	2304      	movs	r3, #4
 8000ebc:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x5;
 8000ebe:	2305      	movs	r3, #5
 8000ec0:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x23;
 8000ec2:	2323      	movs	r3, #35	; 0x23
 8000ec4:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000ec6:	463b      	mov	r3, r7
 8000ec8:	2201      	movs	r2, #1
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <MX_RTC_Init+0x8c>)
 8000ece:	f001 fedd 	bl	8002c8c <HAL_RTC_SetDate>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8000ed8:	f000 fa2a 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	200005c8 	.word	0x200005c8
 8000ee8:	40002800 	.word	0x40002800

08000eec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <MX_USART1_UART_Init+0x4c>)
 8000ef2:	4a12      	ldr	r2, [pc, #72]	; (8000f3c <MX_USART1_UART_Init+0x50>)
 8000ef4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <MX_USART1_UART_Init+0x4c>)
 8000ef8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000efc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <MX_USART1_UART_Init+0x4c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <MX_USART1_UART_Init+0x4c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <MX_USART1_UART_Init+0x4c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f10:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <MX_USART1_UART_Init+0x4c>)
 8000f12:	220c      	movs	r2, #12
 8000f14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <MX_USART1_UART_Init+0x4c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <MX_USART1_UART_Init+0x4c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <MX_USART1_UART_Init+0x4c>)
 8000f24:	f002 fcda 	bl	80038dc <HAL_UART_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f2e:	f000 f9ff 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	200005dc 	.word	0x200005dc
 8000f3c:	40013800 	.word	0x40013800

08000f40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f46:	f107 0310 	add.w	r3, r7, #16
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f54:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <MX_GPIO_Init+0x90>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	4a1d      	ldr	r2, [pc, #116]	; (8000fd0 <MX_GPIO_Init+0x90>)
 8000f5a:	f043 0310 	orr.w	r3, r3, #16
 8000f5e:	6193      	str	r3, [r2, #24]
 8000f60:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <MX_GPIO_Init+0x90>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	f003 0310 	and.w	r3, r3, #16
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f6c:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <MX_GPIO_Init+0x90>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	4a17      	ldr	r2, [pc, #92]	; (8000fd0 <MX_GPIO_Init+0x90>)
 8000f72:	f043 0320 	orr.w	r3, r3, #32
 8000f76:	6193      	str	r3, [r2, #24]
 8000f78:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <MX_GPIO_Init+0x90>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	f003 0320 	and.w	r3, r3, #32
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <MX_GPIO_Init+0x90>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	4a11      	ldr	r2, [pc, #68]	; (8000fd0 <MX_GPIO_Init+0x90>)
 8000f8a:	f043 0304 	orr.w	r3, r3, #4
 8000f8e:	6193      	str	r3, [r2, #24]
 8000f90:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <MX_GPIO_Init+0x90>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	f003 0304 	and.w	r3, r3, #4
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fa2:	480c      	ldr	r0, [pc, #48]	; (8000fd4 <MX_GPIO_Init+0x94>)
 8000fa4:	f000 fe88 	bl	8001cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000fa8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000fba:	f107 0310 	add.w	r3, r7, #16
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4804      	ldr	r0, [pc, #16]	; (8000fd4 <MX_GPIO_Init+0x94>)
 8000fc2:	f000 fcf5 	bl	80019b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fc6:	bf00      	nop
 8000fc8:	3720      	adds	r7, #32
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40011000 	.word	0x40011000

08000fd8 <Start_Cron_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Cron_Task */
void Start_Cron_Task(void const * argument)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08c      	sub	sp, #48	; 0x30
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	/* Set array of context objects */
	static lwdtc_cron_ctx_t cron_ctxs[MAXSIZE];

	/* Define context for CRON, used to parse data to */
	size_t fail_index;
	printf("Count task %d\r\n", LWDTC_ARRAYSIZE(dcCrontxt));
 8000fe0:	210a      	movs	r1, #10
 8000fe2:	4844      	ldr	r0, [pc, #272]	; (80010f4 <Start_Cron_Task+0x11c>)
 8000fe4:	f005 fba2 	bl	800672c <iprintf>
	/* Parse all cron strings */
	if (lwdtc_cron_parse_multi(cron_ctxs, dcCrontxt, MAXSIZE, &fail_index)
 8000fe8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fec:	220a      	movs	r2, #10
 8000fee:	4942      	ldr	r1, [pc, #264]	; (80010f8 <Start_Cron_Task+0x120>)
 8000ff0:	4842      	ldr	r0, [pc, #264]	; (80010fc <Start_Cron_Task+0x124>)
 8000ff2:	f7ff fd2b 	bl	8000a4c <lwdtc_cron_parse_multi>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d004      	beq.n	8001006 <Start_Cron_Task+0x2e>
			!= lwdtcOK) {
		printf("Failed to parse cron at index %d\r\n", (int) fail_index);
 8000ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ffe:	4619      	mov	r1, r3
 8001000:	483f      	ldr	r0, [pc, #252]	; (8001100 <Start_Cron_Task+0x128>)
 8001002:	f005 fb93 	bl	800672c <iprintf>
	}
	printf("CRONs parsed and ready to go\r\n");
 8001006:	483f      	ldr	r0, [pc, #252]	; (8001104 <Start_Cron_Task+0x12c>)
 8001008:	f005 fc16 	bl	8006838 <puts>
	/**************************************************/
	struct tm stm;

  for(;;)
  {
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800100c:	2200      	movs	r2, #0
 800100e:	493e      	ldr	r1, [pc, #248]	; (8001108 <Start_Cron_Task+0x130>)
 8001010:	483e      	ldr	r0, [pc, #248]	; (800110c <Start_Cron_Task+0x134>)
 8001012:	f001 fd63 	bl	8002adc <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001016:	2200      	movs	r2, #0
 8001018:	493d      	ldr	r1, [pc, #244]	; (8001110 <Start_Cron_Task+0x138>)
 800101a:	483c      	ldr	r0, [pc, #240]	; (800110c <Start_Cron_Task+0x134>)
 800101c:	f001 feec 	bl	8002df8 <HAL_RTC_GetDate>

		stm.tm_year = sDate.Year + 100; //RTC_Year rang 0-99,but tm_year since 1900
 8001020:	4b3b      	ldr	r3, [pc, #236]	; (8001110 <Start_Cron_Task+0x138>)
 8001022:	78db      	ldrb	r3, [r3, #3]
 8001024:	3364      	adds	r3, #100	; 0x64
 8001026:	61fb      	str	r3, [r7, #28]
		stm.tm_mon = sDate.Month - 1; //RTC_Month rang 1-12,but tm_mon rang 0-11
 8001028:	4b39      	ldr	r3, [pc, #228]	; (8001110 <Start_Cron_Task+0x138>)
 800102a:	785b      	ldrb	r3, [r3, #1]
 800102c:	3b01      	subs	r3, #1
 800102e:	61bb      	str	r3, [r7, #24]
		stm.tm_mday = sDate.Date; //RTC_Date rang 1-31 and tm_mday rang 1-31
 8001030:	4b37      	ldr	r3, [pc, #220]	; (8001110 <Start_Cron_Task+0x138>)
 8001032:	789b      	ldrb	r3, [r3, #2]
 8001034:	617b      	str	r3, [r7, #20]
		stm.tm_hour = sTime.Hours;   //RTC_Hours rang 0-23 and tm_hour rang 0-23
 8001036:	4b34      	ldr	r3, [pc, #208]	; (8001108 <Start_Cron_Task+0x130>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	613b      	str	r3, [r7, #16]
		stm.tm_min = sTime.Minutes; //RTC_Minutes rang 0-59 and tm_min rang 0-59
 800103c:	4b32      	ldr	r3, [pc, #200]	; (8001108 <Start_Cron_Task+0x130>)
 800103e:	785b      	ldrb	r3, [r3, #1]
 8001040:	60fb      	str	r3, [r7, #12]
		stm.tm_sec = sTime.Seconds;
 8001042:	4b31      	ldr	r3, [pc, #196]	; (8001108 <Start_Cron_Task+0x130>)
 8001044:	789b      	ldrb	r3, [r3, #2]
 8001046:	60bb      	str	r3, [r7, #8]
		cronetime = mktime(&stm);
 8001048:	f107 0308 	add.w	r3, r7, #8
 800104c:	4618      	mov	r0, r3
 800104e:	f005 f8f7 	bl	8006240 <mktime>
 8001052:	4602      	mov	r2, r0
 8001054:	460b      	mov	r3, r1
 8001056:	492f      	ldr	r1, [pc, #188]	; (8001114 <Start_Cron_Task+0x13c>)
 8001058:	e9c1 2300 	strd	r2, r3, [r1]
		timestamp= mktime(&stm); //1680707405
 800105c:	f107 0308 	add.w	r3, r7, #8
 8001060:	4618      	mov	r0, r3
 8001062:	f005 f8ed 	bl	8006240 <mktime>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	4b2b      	ldr	r3, [pc, #172]	; (8001118 <Start_Cron_Task+0x140>)
 800106c:	601a      	str	r2, [r3, #0]

		if (cronetime != cronetime_old) {
 800106e:	4b29      	ldr	r3, [pc, #164]	; (8001114 <Start_Cron_Task+0x13c>)
 8001070:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001074:	4b29      	ldr	r3, [pc, #164]	; (800111c <Start_Cron_Task+0x144>)
 8001076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107a:	4299      	cmp	r1, r3
 800107c:	bf08      	it	eq
 800107e:	4290      	cmpeq	r0, r2
 8001080:	d0c4      	beq.n	800100c <Start_Cron_Task+0x34>
			cronetime_old = cronetime;
 8001082:	4b24      	ldr	r3, [pc, #144]	; (8001114 <Start_Cron_Task+0x13c>)
 8001084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001088:	4924      	ldr	r1, [pc, #144]	; (800111c <Start_Cron_Task+0x144>)
 800108a:	e9c1 2300 	strd	r2, r3, [r1]
			timez = localtime(&cronetime);
 800108e:	4821      	ldr	r0, [pc, #132]	; (8001114 <Start_Cron_Task+0x13c>)
 8001090:	f004 fec2 	bl	8005e18 <localtime>
 8001094:	4603      	mov	r3, r0
 8001096:	4a22      	ldr	r2, [pc, #136]	; (8001120 <Start_Cron_Task+0x148>)
 8001098:	6013      	str	r3, [r2, #0]
			i = 0;
 800109a:	4b22      	ldr	r3, [pc, #136]	; (8001124 <Start_Cron_Task+0x14c>)
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]

			/* Check if CRON should execute */
			while (i < LWDTC_ARRAYSIZE(cron_ctxs)) {
 80010a0:	e023      	b.n	80010ea <Start_Cron_Task+0x112>
				if (lwdtc_cron_is_valid_for_time(timez, cron_ctxs, &i)== lwdtcOK) {
 80010a2:	4b1f      	ldr	r3, [pc, #124]	; (8001120 <Start_Cron_Task+0x148>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a1f      	ldr	r2, [pc, #124]	; (8001124 <Start_Cron_Task+0x14c>)
 80010a8:	4914      	ldr	r1, [pc, #80]	; (80010fc <Start_Cron_Task+0x124>)
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fd1e 	bl	8000aec <lwdtc_cron_is_valid_for_time>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d114      	bne.n	80010e0 <Start_Cron_Task+0x108>
					//printf("Executing CRON task %s ACTIVE %s ID %d \r\n",dcCrontxt[i].cron, dcCrontxt[i].activ, i);
					strcpy(str, dcCrontxt[i].activ);
 80010b6:	4b1b      	ldr	r3, [pc, #108]	; (8001124 <Start_Cron_Task+0x14c>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	4613      	mov	r3, r2
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	4413      	add	r3, r2
 80010c0:	011b      	lsls	r3, r3, #4
 80010c2:	3310      	adds	r3, #16
 80010c4:	4a0c      	ldr	r2, [pc, #48]	; (80010f8 <Start_Cron_Task+0x120>)
 80010c6:	4413      	add	r3, r2
 80010c8:	3304      	adds	r3, #4
 80010ca:	4619      	mov	r1, r3
 80010cc:	4816      	ldr	r0, [pc, #88]	; (8001128 <Start_Cron_Task+0x150>)
 80010ce:	f005 fc7a 	bl	80069c6 <strcpy>
//					if(i==0){
//					//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
//					GPIOC->ODR ^= GPIO_PIN_13; // toggle PA1
//					}
//					elmnt[i] = i;
					xQueueSend(myQueueHandle, &i, 0);
 80010d2:	4b16      	ldr	r3, [pc, #88]	; (800112c <Start_Cron_Task+0x154>)
 80010d4:	6818      	ldr	r0, [r3, #0]
 80010d6:	2300      	movs	r3, #0
 80010d8:	2200      	movs	r2, #0
 80010da:	4912      	ldr	r1, [pc, #72]	; (8001124 <Start_Cron_Task+0x14c>)
 80010dc:	f003 f834 	bl	8004148 <xQueueGenericSend>
				}
				i++;
 80010e0:	4b10      	ldr	r3, [pc, #64]	; (8001124 <Start_Cron_Task+0x14c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	3301      	adds	r3, #1
 80010e6:	4a0f      	ldr	r2, [pc, #60]	; (8001124 <Start_Cron_Task+0x14c>)
 80010e8:	6013      	str	r3, [r2, #0]
			while (i < LWDTC_ARRAYSIZE(cron_ctxs)) {
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <Start_Cron_Task+0x14c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2b09      	cmp	r3, #9
 80010f0:	d9d7      	bls.n	80010a2 <Start_Cron_Task+0xca>
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80010f2:	e78b      	b.n	800100c <Start_Cron_Task+0x34>
 80010f4:	0800878c 	.word	0x0800878c
 80010f8:	20000000 	.word	0x20000000
 80010fc:	2000069c 	.word	0x2000069c
 8001100:	0800879c 	.word	0x0800879c
 8001104:	080087c0 	.word	0x080087c0
 8001108:	20000694 	.word	0x20000694
 800110c:	200005c8 	.word	0x200005c8
 8001110:	20000698 	.word	0x20000698
 8001114:	20000598 	.word	0x20000598
 8001118:	200005c0 	.word	0x200005c0
 800111c:	200005a0 	.word	0x200005a0
 8001120:	20000590 	.word	0x20000590
 8001124:	200005a8 	.word	0x200005a8
 8001128:	200005ac 	.word	0x200005ac
 800112c:	20000628 	.word	0x20000628

08001130 <Start_Action_Task>:
* @brief Function implementing the my_Action_Task thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Action_Task */
void Start_Action_Task(void const *argument) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b08c      	sub	sp, #48	; 0x30
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	uint8_t element; // Строка в cron массиве.
//	uint8_t messagesWaiting = uxQueueMessagesWaiting(myQueueHandle);
//	uint8_t emptySpaces = uxQueueSpacesAvailable(myQueueHandle);
	char str[20];
	int i = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (;;) {

		if (xQueueReceive(myQueueHandle, &element, portMAX_DELAY) == pdTRUE) {/* portMAX_DELAY - Если очередь пустая то, Task будет ждать пока не появятся данные!  == pdTRUE - проверка на ошибки при получении!*/
 800113c:	4b67      	ldr	r3, [pc, #412]	; (80012dc <Start_Action_Task+0x1ac>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f107 0123 	add.w	r1, r7, #35	; 0x23
 8001144:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001148:	4618      	mov	r0, r3
 800114a:	f003 f8fb 	bl	8004344 <xQueueReceive>
 800114e:	4603      	mov	r3, r0
 8001150:	2b01      	cmp	r3, #1
 8001152:	d179      	bne.n	8001248 <Start_Action_Task+0x118>
//			printf("Messages waiting: %d \n", messagesWaiting);
//			printf("Empty spaces: %d \n", emptySpaces);
//			printf("Queue value is: %d \n", element);  /*где “%d” смотри Команды форматирования для printf()для с*/
			if (element < 5) {
 8001154:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001158:	2b04      	cmp	r3, #4
 800115a:	d875      	bhi.n	8001248 <Start_Action_Task+0x118>
				printf("element %d \n\r", element);
 800115c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001160:	4619      	mov	r1, r3
 8001162:	485f      	ldr	r0, [pc, #380]	; (80012e0 <Start_Action_Task+0x1b0>)
 8001164:	f005 fae2 	bl	800672c <iprintf>
				strcpy(str, dcCrontxt[element].activ);
 8001168:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800116c:	461a      	mov	r2, r3
 800116e:	4613      	mov	r3, r2
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	4413      	add	r3, r2
 8001174:	011b      	lsls	r3, r3, #4
 8001176:	3310      	adds	r3, #16
 8001178:	4a5a      	ldr	r2, [pc, #360]	; (80012e4 <Start_Action_Task+0x1b4>)
 800117a:	4413      	add	r3, r2
 800117c:	1d1a      	adds	r2, r3, #4
 800117e:	f107 030c 	add.w	r3, r7, #12
 8001182:	4611      	mov	r1, r2
 8001184:	4618      	mov	r0, r3
 8001186:	f005 fc1e 	bl	80069c6 <strcpy>
//				printf("++++++++ %s ------ %s \n\r", dcCrontxt[element].activ,str);
				// парсинг сценария
				k = -1;
 800118a:	4b57      	ldr	r3, [pc, #348]	; (80012e8 <Start_Action_Task+0x1b8>)
 800118c:	22ff      	movs	r2, #255	; 0xff
 800118e:	701a      	strb	r2, [r3, #0]
				char *pch = strtok(str, ";");
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	4955      	ldr	r1, [pc, #340]	; (80012ec <Start_Action_Task+0x1bc>)
 8001196:	4618      	mov	r0, r3
 8001198:	f005 fc1e 	bl	80069d8 <strtok>
 800119c:	62b8      	str	r0, [r7, #40]	; 0x28
				while (pch != NULL) {
 800119e:	e050      	b.n	8001242 <Start_Action_Task+0x112>
					k ++;
 80011a0:	4b51      	ldr	r3, [pc, #324]	; (80012e8 <Start_Action_Task+0x1b8>)
 80011a2:	f993 3000 	ldrsb.w	r3, [r3]
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	3301      	adds	r3, #1
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	b25a      	sxtb	r2, r3
 80011ae:	4b4e      	ldr	r3, [pc, #312]	; (80012e8 <Start_Action_Task+0x1b8>)
 80011b0:	701a      	strb	r2, [r3, #0]
					// если в строке "p" то это пауза
					// делаем паузу
					if (pch[0] == 'p') {
 80011b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b70      	cmp	r3, #112	; 0x70
 80011b8:	d13a      	bne.n	8001230 <Start_Action_Task+0x100>
						char *newstring = pch + 1;
 80011ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011bc:	3301      	adds	r3, #1
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
//						printf("Pause %d seconds & ++ k ++ = %d \r\n", atoi(newstring),k);
						printf("?????????? Start pause... %d\n\r",element);
 80011c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011c4:	4619      	mov	r1, r3
 80011c6:	484a      	ldr	r0, [pc, #296]	; (80012f0 <Start_Action_Task+0x1c0>)
 80011c8:	f005 fab0 	bl	800672c <iprintf>
//						HAL_Delay((atoi(newstring) * 1000));
						dcCrontxt[element].ptime = timestamp + atoi(newstring);
 80011cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011ce:	f004 fcff 	bl	8005bd0 <atoi>
 80011d2:	4603      	mov	r3, r0
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b47      	ldr	r3, [pc, #284]	; (80012f4 <Start_Action_Task+0x1c4>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 80011de:	4608      	mov	r0, r1
 80011e0:	441a      	add	r2, r3
 80011e2:	4940      	ldr	r1, [pc, #256]	; (80012e4 <Start_Action_Task+0x1b4>)
 80011e4:	4603      	mov	r3, r0
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	4403      	add	r3, r0
 80011ea:	011b      	lsls	r3, r3, #4
 80011ec:	440b      	add	r3, r1
 80011ee:	3328      	adds	r3, #40	; 0x28
 80011f0:	601a      	str	r2, [r3, #0]
						dcCrontxt[element].elmnt = k;
 80011f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011f6:	4619      	mov	r1, r3
 80011f8:	4b3b      	ldr	r3, [pc, #236]	; (80012e8 <Start_Action_Task+0x1b8>)
 80011fa:	f993 0000 	ldrsb.w	r0, [r3]
 80011fe:	4a39      	ldr	r2, [pc, #228]	; (80012e4 <Start_Action_Task+0x1b4>)
 8001200:	460b      	mov	r3, r1
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	440b      	add	r3, r1
 8001206:	011b      	lsls	r3, r3, #4
 8001208:	4413      	add	r3, r2
 800120a:	332c      	adds	r3, #44	; 0x2c
 800120c:	4602      	mov	r2, r0
 800120e:	701a      	strb	r2, [r3, #0]
//						printf("ptim - %ld , elmnt = %d\n\r", dcCrontxt[element].ptime,dcCrontxt[element].elmnt);
						printf("dcCrontxt[element].ptime = %ld \n\r", dcCrontxt[element].ptime);
 8001210:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001214:	4619      	mov	r1, r3
 8001216:	4a33      	ldr	r2, [pc, #204]	; (80012e4 <Start_Action_Task+0x1b4>)
 8001218:	460b      	mov	r3, r1
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	440b      	add	r3, r1
 800121e:	011b      	lsls	r3, r3, #4
 8001220:	4413      	add	r3, r2
 8001222:	3328      	adds	r3, #40	; 0x28
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4619      	mov	r1, r3
 8001228:	4833      	ldr	r0, [pc, #204]	; (80012f8 <Start_Action_Task+0x1c8>)
 800122a:	f005 fa7f 	bl	800672c <iprintf>
						break;
 800122e:	e00b      	b.n	8001248 <Start_Action_Task+0x118>
					} else {
						// управляем пинами
						printf("Actions in pins %s \n", pch);
 8001230:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001232:	4832      	ldr	r0, [pc, #200]	; (80012fc <Start_Action_Task+0x1cc>)
 8001234:	f005 fa7a 	bl	800672c <iprintf>
					}
					pch = strtok(NULL, ";");
 8001238:	492c      	ldr	r1, [pc, #176]	; (80012ec <Start_Action_Task+0x1bc>)
 800123a:	2000      	movs	r0, #0
 800123c:	f005 fbcc 	bl	80069d8 <strtok>
 8001240:	62b8      	str	r0, [r7, #40]	; 0x28
				while (pch != NULL) {
 8001242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1ab      	bne.n	80011a0 <Start_Action_Task+0x70>
				}
			}

		}
		if (timestamp != timestampold) {
 8001248:	4b2a      	ldr	r3, [pc, #168]	; (80012f4 <Start_Action_Task+0x1c4>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	4b2c      	ldr	r3, [pc, #176]	; (8001300 <Start_Action_Task+0x1d0>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	429a      	cmp	r2, r3
 8001252:	f43f af73 	beq.w	800113c <Start_Action_Task+0xc>
			timestampold = timestamp;
 8001256:	4b27      	ldr	r3, [pc, #156]	; (80012f4 <Start_Action_Task+0x1c4>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a29      	ldr	r2, [pc, #164]	; (8001300 <Start_Action_Task+0x1d0>)
 800125c:	6013      	str	r3, [r2, #0]
			while (i < LWDTC_ARRAYSIZE(dcCrontxt)) {
 800125e:	e036      	b.n	80012ce <Start_Action_Task+0x19e>
//				printf("i %d \n", i);
//				printf("timestamp %ld &&&&& dcCrontxt[element].ptime ========= %ld \n\r",timestamp, dcCrontxt[i].ptime);
				if(timestampold >= dcCrontxt[i].ptime && dcCrontxt[i].ptime != 0){
 8001260:	4920      	ldr	r1, [pc, #128]	; (80012e4 <Start_Action_Task+0x1b4>)
 8001262:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001264:	4613      	mov	r3, r2
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	4413      	add	r3, r2
 800126a:	011b      	lsls	r3, r3, #4
 800126c:	440b      	add	r3, r1
 800126e:	3328      	adds	r3, #40	; 0x28
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	4b23      	ldr	r3, [pc, #140]	; (8001300 <Start_Action_Task+0x1d0>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	429a      	cmp	r2, r3
 8001278:	d826      	bhi.n	80012c8 <Start_Action_Task+0x198>
 800127a:	491a      	ldr	r1, [pc, #104]	; (80012e4 <Start_Action_Task+0x1b4>)
 800127c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800127e:	4613      	mov	r3, r2
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	4413      	add	r3, r2
 8001284:	011b      	lsls	r3, r3, #4
 8001286:	440b      	add	r3, r1
 8001288:	3328      	adds	r3, #40	; 0x28
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d01b      	beq.n	80012c8 <Start_Action_Task+0x198>
					printf("dcCrontxt[i].elmnt %d \n",dcCrontxt[i].elmnt);
 8001290:	4914      	ldr	r1, [pc, #80]	; (80012e4 <Start_Action_Task+0x1b4>)
 8001292:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001294:	4613      	mov	r3, r2
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	4413      	add	r3, r2
 800129a:	011b      	lsls	r3, r3, #4
 800129c:	440b      	add	r3, r1
 800129e:	332c      	adds	r3, #44	; 0x2c
 80012a0:	f993 3000 	ldrsb.w	r3, [r3]
 80012a4:	4619      	mov	r1, r3
 80012a6:	4817      	ldr	r0, [pc, #92]	; (8001304 <Start_Action_Task+0x1d4>)
 80012a8:	f005 fa40 	bl	800672c <iprintf>
					printf("?????????? END pause! %d\n\r",i);
 80012ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80012ae:	4816      	ldr	r0, [pc, #88]	; (8001308 <Start_Action_Task+0x1d8>)
 80012b0:	f005 fa3c 	bl	800672c <iprintf>
					dcCrontxt[i].ptime = 0;
 80012b4:	490b      	ldr	r1, [pc, #44]	; (80012e4 <Start_Action_Task+0x1b4>)
 80012b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012b8:	4613      	mov	r3, r2
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	4413      	add	r3, r2
 80012be:	011b      	lsls	r3, r3, #4
 80012c0:	440b      	add	r3, r1
 80012c2:	3328      	adds	r3, #40	; 0x28
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
				}
				i++;
 80012c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ca:	3301      	adds	r3, #1
 80012cc:	62fb      	str	r3, [r7, #44]	; 0x2c
			while (i < LWDTC_ARRAYSIZE(dcCrontxt)) {
 80012ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012d0:	2b09      	cmp	r3, #9
 80012d2:	d9c5      	bls.n	8001260 <Start_Action_Task+0x130>
			}
			i=0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (xQueueReceive(myQueueHandle, &element, portMAX_DELAY) == pdTRUE) {/* portMAX_DELAY - Если очередь пустая то, Task будет ждать пока не появятся данные!  == pdTRUE - проверка на ошибки при получении!*/
 80012d8:	e730      	b.n	800113c <Start_Action_Task+0xc>
 80012da:	bf00      	nop
 80012dc:	20000628 	.word	0x20000628
 80012e0:	080087e0 	.word	0x080087e0
 80012e4:	20000000 	.word	0x20000000
 80012e8:	200001e0 	.word	0x200001e0
 80012ec:	080087f0 	.word	0x080087f0
 80012f0:	080087f4 	.word	0x080087f4
 80012f4:	200005c0 	.word	0x200005c0
 80012f8:	08008814 	.word	0x08008814
 80012fc:	08008838 	.word	0x08008838
 8001300:	200005c4 	.word	0x200005c4
 8001304:	08008850 	.word	0x08008850
 8001308:	08008868 	.word	0x08008868

0800130c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a04      	ldr	r2, [pc, #16]	; (800132c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d101      	bne.n	8001322 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800131e:	f000 fa4b 	bl	80017b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40000800 	.word	0x40000800

08001330 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001334:	b672      	cpsid	i
}
 8001336:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001338:	e7fe      	b.n	8001338 <Error_Handler+0x8>
	...

0800133c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001342:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <HAL_MspInit+0x68>)
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	4a17      	ldr	r2, [pc, #92]	; (80013a4 <HAL_MspInit+0x68>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6193      	str	r3, [r2, #24]
 800134e:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <HAL_MspInit+0x68>)
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800135a:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <HAL_MspInit+0x68>)
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	4a11      	ldr	r2, [pc, #68]	; (80013a4 <HAL_MspInit+0x68>)
 8001360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001364:	61d3      	str	r3, [r2, #28]
 8001366:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <HAL_MspInit+0x68>)
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	210f      	movs	r1, #15
 8001376:	f06f 0001 	mvn.w	r0, #1
 800137a:	f000 faee 	bl	800195a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800137e:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <HAL_MspInit+0x6c>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <HAL_MspInit+0x6c>)
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800139a:	bf00      	nop
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40010000 	.word	0x40010000

080013ac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a0f      	ldr	r2, [pc, #60]	; (80013f8 <HAL_RTC_MspInit+0x4c>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d118      	bne.n	80013f0 <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80013be:	f000 fc93 	bl	8001ce8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80013c2:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <HAL_RTC_MspInit+0x50>)
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	4a0d      	ldr	r2, [pc, #52]	; (80013fc <HAL_RTC_MspInit+0x50>)
 80013c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80013cc:	61d3      	str	r3, [r2, #28]
 80013ce:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <HAL_RTC_MspInit+0x50>)
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80013da:	4b09      	ldr	r3, [pc, #36]	; (8001400 <HAL_RTC_MspInit+0x54>)
 80013dc:	2201      	movs	r2, #1
 80013de:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2105      	movs	r1, #5
 80013e4:	2029      	movs	r0, #41	; 0x29
 80013e6:	f000 fab8 	bl	800195a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80013ea:	2029      	movs	r0, #41	; 0x29
 80013ec:	f000 fad1 	bl	8001992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80013f0:	bf00      	nop
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40002800 	.word	0x40002800
 80013fc:	40021000 	.word	0x40021000
 8001400:	4242043c 	.word	0x4242043c

08001404 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	f107 0310 	add.w	r3, r7, #16
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a1c      	ldr	r2, [pc, #112]	; (8001490 <HAL_UART_MspInit+0x8c>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d131      	bne.n	8001488 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001424:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <HAL_UART_MspInit+0x90>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	4a1a      	ldr	r2, [pc, #104]	; (8001494 <HAL_UART_MspInit+0x90>)
 800142a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800142e:	6193      	str	r3, [r2, #24]
 8001430:	4b18      	ldr	r3, [pc, #96]	; (8001494 <HAL_UART_MspInit+0x90>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143c:	4b15      	ldr	r3, [pc, #84]	; (8001494 <HAL_UART_MspInit+0x90>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	4a14      	ldr	r2, [pc, #80]	; (8001494 <HAL_UART_MspInit+0x90>)
 8001442:	f043 0304 	orr.w	r3, r3, #4
 8001446:	6193      	str	r3, [r2, #24]
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <HAL_UART_MspInit+0x90>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	f003 0304 	and.w	r3, r3, #4
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001454:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001458:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800145e:	2303      	movs	r3, #3
 8001460:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001462:	f107 0310 	add.w	r3, r7, #16
 8001466:	4619      	mov	r1, r3
 8001468:	480b      	ldr	r0, [pc, #44]	; (8001498 <HAL_UART_MspInit+0x94>)
 800146a:	f000 faa1 	bl	80019b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800146e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001472:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147c:	f107 0310 	add.w	r3, r7, #16
 8001480:	4619      	mov	r1, r3
 8001482:	4805      	ldr	r0, [pc, #20]	; (8001498 <HAL_UART_MspInit+0x94>)
 8001484:	f000 fa94 	bl	80019b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001488:	bf00      	nop
 800148a:	3720      	adds	r7, #32
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40013800 	.word	0x40013800
 8001494:	40021000 	.word	0x40021000
 8001498:	40010800 	.word	0x40010800

0800149c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08e      	sub	sp, #56	; 0x38
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80014a4:	2300      	movs	r3, #0
 80014a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80014a8:	2300      	movs	r3, #0
 80014aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80014ac:	2300      	movs	r3, #0
 80014ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80014b2:	4b34      	ldr	r3, [pc, #208]	; (8001584 <HAL_InitTick+0xe8>)
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	4a33      	ldr	r2, [pc, #204]	; (8001584 <HAL_InitTick+0xe8>)
 80014b8:	f043 0304 	orr.w	r3, r3, #4
 80014bc:	61d3      	str	r3, [r2, #28]
 80014be:	4b31      	ldr	r3, [pc, #196]	; (8001584 <HAL_InitTick+0xe8>)
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	f003 0304 	and.w	r3, r3, #4
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014ca:	f107 0210 	add.w	r2, r7, #16
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	4611      	mov	r1, r2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f001 f80f 	bl	80024f8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80014da:	6a3b      	ldr	r3, [r7, #32]
 80014dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80014de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d103      	bne.n	80014ec <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80014e4:	f000 ffe0 	bl	80024a8 <HAL_RCC_GetPCLK1Freq>
 80014e8:	6378      	str	r0, [r7, #52]	; 0x34
 80014ea:	e004      	b.n	80014f6 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80014ec:	f000 ffdc 	bl	80024a8 <HAL_RCC_GetPCLK1Freq>
 80014f0:	4603      	mov	r3, r0
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014f8:	4a23      	ldr	r2, [pc, #140]	; (8001588 <HAL_InitTick+0xec>)
 80014fa:	fba2 2303 	umull	r2, r3, r2, r3
 80014fe:	0c9b      	lsrs	r3, r3, #18
 8001500:	3b01      	subs	r3, #1
 8001502:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001504:	4b21      	ldr	r3, [pc, #132]	; (800158c <HAL_InitTick+0xf0>)
 8001506:	4a22      	ldr	r2, [pc, #136]	; (8001590 <HAL_InitTick+0xf4>)
 8001508:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800150a:	4b20      	ldr	r3, [pc, #128]	; (800158c <HAL_InitTick+0xf0>)
 800150c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001510:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001512:	4a1e      	ldr	r2, [pc, #120]	; (800158c <HAL_InitTick+0xf0>)
 8001514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001516:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001518:	4b1c      	ldr	r3, [pc, #112]	; (800158c <HAL_InitTick+0xf0>)
 800151a:	2200      	movs	r2, #0
 800151c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800151e:	4b1b      	ldr	r3, [pc, #108]	; (800158c <HAL_InitTick+0xf0>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <HAL_InitTick+0xf0>)
 8001526:	2200      	movs	r2, #0
 8001528:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800152a:	4818      	ldr	r0, [pc, #96]	; (800158c <HAL_InitTick+0xf0>)
 800152c:	f001 ff8c 	bl	8003448 <HAL_TIM_Base_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001536:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800153a:	2b00      	cmp	r3, #0
 800153c:	d11b      	bne.n	8001576 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800153e:	4813      	ldr	r0, [pc, #76]	; (800158c <HAL_InitTick+0xf0>)
 8001540:	f001 ffda 	bl	80034f8 <HAL_TIM_Base_Start_IT>
 8001544:	4603      	mov	r3, r0
 8001546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800154a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800154e:	2b00      	cmp	r3, #0
 8001550:	d111      	bne.n	8001576 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001552:	201e      	movs	r0, #30
 8001554:	f000 fa1d 	bl	8001992 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b0f      	cmp	r3, #15
 800155c:	d808      	bhi.n	8001570 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800155e:	2200      	movs	r2, #0
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	201e      	movs	r0, #30
 8001564:	f000 f9f9 	bl	800195a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001568:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <HAL_InitTick+0xf8>)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6013      	str	r3, [r2, #0]
 800156e:	e002      	b.n	8001576 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001576:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800157a:	4618      	mov	r0, r3
 800157c:	3738      	adds	r7, #56	; 0x38
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40021000 	.word	0x40021000
 8001588:	431bde83 	.word	0x431bde83
 800158c:	20000854 	.word	0x20000854
 8001590:	40000800 	.word	0x40000800
 8001594:	200001ec 	.word	0x200001ec

08001598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800159c:	e7fe      	b.n	800159c <NMI_Handler+0x4>

0800159e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015a2:	e7fe      	b.n	80015a2 <HardFault_Handler+0x4>

080015a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <MemManage_Handler+0x4>

080015aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ae:	e7fe      	b.n	80015ae <BusFault_Handler+0x4>

080015b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <UsageFault_Handler+0x4>

080015b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr
	...

080015c4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80015c8:	4802      	ldr	r0, [pc, #8]	; (80015d4 <TIM4_IRQHandler+0x10>)
 80015ca:	f001 ffe7 	bl	800359c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000854 	.word	0x20000854

080015d8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80015dc:	4802      	ldr	r0, [pc, #8]	; (80015e8 <RTC_Alarm_IRQHandler+0x10>)
 80015de:	f001 fc5f 	bl	8002ea0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	200005c8 	.word	0x200005c8

080015ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  return 1;
 80015f0:	2301      	movs	r3, #1
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr

080015fa <_kill>:

int _kill(int pid, int sig)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001604:	f004 fae8 	bl	8005bd8 <__errno>
 8001608:	4603      	mov	r3, r0
 800160a:	2216      	movs	r2, #22
 800160c:	601a      	str	r2, [r3, #0]
  return -1;
 800160e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <_exit>:

void _exit (int status)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001622:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff ffe7 	bl	80015fa <_kill>
  while (1) {}    /* Make sure we hang here */
 800162c:	e7fe      	b.n	800162c <_exit+0x12>

0800162e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b086      	sub	sp, #24
 8001632:	af00      	add	r7, sp, #0
 8001634:	60f8      	str	r0, [r7, #12]
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	e00a      	b.n	8001656 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001640:	f3af 8000 	nop.w
 8001644:	4601      	mov	r1, r0
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	1c5a      	adds	r2, r3, #1
 800164a:	60ba      	str	r2, [r7, #8]
 800164c:	b2ca      	uxtb	r2, r1
 800164e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	3301      	adds	r3, #1
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	429a      	cmp	r2, r3
 800165c:	dbf0      	blt.n	8001640 <_read+0x12>
  }

  return len;
 800165e:	687b      	ldr	r3, [r7, #4]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001670:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001674:	4618      	mov	r0, r3
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr

0800167e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800167e:	b480      	push	{r7}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800168e:	605a      	str	r2, [r3, #4]
  return 0;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr

0800169c <_isatty>:

int _isatty(int file)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016a4:	2301      	movs	r3, #1
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr

080016b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr

080016c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016d0:	4a14      	ldr	r2, [pc, #80]	; (8001724 <_sbrk+0x5c>)
 80016d2:	4b15      	ldr	r3, [pc, #84]	; (8001728 <_sbrk+0x60>)
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016dc:	4b13      	ldr	r3, [pc, #76]	; (800172c <_sbrk+0x64>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d102      	bne.n	80016ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016e4:	4b11      	ldr	r3, [pc, #68]	; (800172c <_sbrk+0x64>)
 80016e6:	4a12      	ldr	r2, [pc, #72]	; (8001730 <_sbrk+0x68>)
 80016e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ea:	4b10      	ldr	r3, [pc, #64]	; (800172c <_sbrk+0x64>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4413      	add	r3, r2
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d207      	bcs.n	8001708 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016f8:	f004 fa6e 	bl	8005bd8 <__errno>
 80016fc:	4603      	mov	r3, r0
 80016fe:	220c      	movs	r2, #12
 8001700:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001702:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001706:	e009      	b.n	800171c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001708:	4b08      	ldr	r3, [pc, #32]	; (800172c <_sbrk+0x64>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800170e:	4b07      	ldr	r3, [pc, #28]	; (800172c <_sbrk+0x64>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	4a05      	ldr	r2, [pc, #20]	; (800172c <_sbrk+0x64>)
 8001718:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800171a:	68fb      	ldr	r3, [r7, #12]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20005000 	.word	0x20005000
 8001728:	00000400 	.word	0x00000400
 800172c:	200008a0 	.word	0x200008a0
 8001730:	20001630 	.word	0x20001630

08001734 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr

08001740 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001740:	480c      	ldr	r0, [pc, #48]	; (8001774 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001742:	490d      	ldr	r1, [pc, #52]	; (8001778 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001744:	4a0d      	ldr	r2, [pc, #52]	; (800177c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001746:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001748:	e002      	b.n	8001750 <LoopCopyDataInit>

0800174a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800174a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800174c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800174e:	3304      	adds	r3, #4

08001750 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001750:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001752:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001754:	d3f9      	bcc.n	800174a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001756:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001758:	4c0a      	ldr	r4, [pc, #40]	; (8001784 <LoopFillZerobss+0x22>)
  movs r3, #0
 800175a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800175c:	e001      	b.n	8001762 <LoopFillZerobss>

0800175e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800175e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001760:	3204      	adds	r2, #4

08001762 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001762:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001764:	d3fb      	bcc.n	800175e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001766:	f7ff ffe5 	bl	8001734 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800176a:	f004 fb31 	bl	8005dd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800176e:	f7ff fac1 	bl	8000cf4 <main>
  bx lr
 8001772:	4770      	bx	lr
  ldr r0, =_sdata
 8001774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001778:	200002c0 	.word	0x200002c0
  ldr r2, =_sidata
 800177c:	08008c9c 	.word	0x08008c9c
  ldr r2, =_sbss
 8001780:	200002c0 	.word	0x200002c0
  ldr r4, =_ebss
 8001784:	2000162c 	.word	0x2000162c

08001788 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001788:	e7fe      	b.n	8001788 <ADC1_2_IRQHandler>
	...

0800178c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <HAL_Init+0x28>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a07      	ldr	r2, [pc, #28]	; (80017b4 <HAL_Init+0x28>)
 8001796:	f043 0310 	orr.w	r3, r3, #16
 800179a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800179c:	2003      	movs	r0, #3
 800179e:	f000 f8d1 	bl	8001944 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017a2:	200f      	movs	r0, #15
 80017a4:	f7ff fe7a 	bl	800149c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017a8:	f7ff fdc8 	bl	800133c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40022000 	.word	0x40022000

080017b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <HAL_IncTick+0x1c>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	461a      	mov	r2, r3
 80017c2:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <HAL_IncTick+0x20>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4413      	add	r3, r2
 80017c8:	4a03      	ldr	r2, [pc, #12]	; (80017d8 <HAL_IncTick+0x20>)
 80017ca:	6013      	str	r3, [r2, #0]
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr
 80017d4:	200001f0 	.word	0x200001f0
 80017d8:	200008a4 	.word	0x200008a4

080017dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return uwTick;
 80017e0:	4b02      	ldr	r3, [pc, #8]	; (80017ec <HAL_GetTick+0x10>)
 80017e2:	681b      	ldr	r3, [r3, #0]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr
 80017ec:	200008a4 	.word	0x200008a4

080017f0 <__NVIC_SetPriorityGrouping>:
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001800:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <__NVIC_SetPriorityGrouping+0x44>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800180c:	4013      	ands	r3, r2
 800180e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001818:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800181c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001822:	4a04      	ldr	r2, [pc, #16]	; (8001834 <__NVIC_SetPriorityGrouping+0x44>)
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	60d3      	str	r3, [r2, #12]
}
 8001828:	bf00      	nop
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_GetPriorityGrouping>:
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800183c:	4b04      	ldr	r3, [pc, #16]	; (8001850 <__NVIC_GetPriorityGrouping+0x18>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	0a1b      	lsrs	r3, r3, #8
 8001842:	f003 0307 	and.w	r3, r3, #7
}
 8001846:	4618      	mov	r0, r3
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <__NVIC_EnableIRQ>:
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	2b00      	cmp	r3, #0
 8001864:	db0b      	blt.n	800187e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	f003 021f 	and.w	r2, r3, #31
 800186c:	4906      	ldr	r1, [pc, #24]	; (8001888 <__NVIC_EnableIRQ+0x34>)
 800186e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001872:	095b      	lsrs	r3, r3, #5
 8001874:	2001      	movs	r0, #1
 8001876:	fa00 f202 	lsl.w	r2, r0, r2
 800187a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr
 8001888:	e000e100 	.word	0xe000e100

0800188c <__NVIC_SetPriority>:
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	6039      	str	r1, [r7, #0]
 8001896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189c:	2b00      	cmp	r3, #0
 800189e:	db0a      	blt.n	80018b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	490c      	ldr	r1, [pc, #48]	; (80018d8 <__NVIC_SetPriority+0x4c>)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	0112      	lsls	r2, r2, #4
 80018ac:	b2d2      	uxtb	r2, r2
 80018ae:	440b      	add	r3, r1
 80018b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80018b4:	e00a      	b.n	80018cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	4908      	ldr	r1, [pc, #32]	; (80018dc <__NVIC_SetPriority+0x50>)
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	3b04      	subs	r3, #4
 80018c4:	0112      	lsls	r2, r2, #4
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	440b      	add	r3, r1
 80018ca:	761a      	strb	r2, [r3, #24]
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	e000e100 	.word	0xe000e100
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <NVIC_EncodePriority>:
{
 80018e0:	b480      	push	{r7}
 80018e2:	b089      	sub	sp, #36	; 0x24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f1c3 0307 	rsb	r3, r3, #7
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	bf28      	it	cs
 80018fe:	2304      	movcs	r3, #4
 8001900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3304      	adds	r3, #4
 8001906:	2b06      	cmp	r3, #6
 8001908:	d902      	bls.n	8001910 <NVIC_EncodePriority+0x30>
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3b03      	subs	r3, #3
 800190e:	e000      	b.n	8001912 <NVIC_EncodePriority+0x32>
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001914:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43da      	mvns	r2, r3
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	401a      	ands	r2, r3
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001928:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	fa01 f303 	lsl.w	r3, r1, r3
 8001932:	43d9      	mvns	r1, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001938:	4313      	orrs	r3, r2
}
 800193a:	4618      	mov	r0, r3
 800193c:	3724      	adds	r7, #36	; 0x24
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr

08001944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff ff4f 	bl	80017f0 <__NVIC_SetPriorityGrouping>
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800195a:	b580      	push	{r7, lr}
 800195c:	b086      	sub	sp, #24
 800195e:	af00      	add	r7, sp, #0
 8001960:	4603      	mov	r3, r0
 8001962:	60b9      	str	r1, [r7, #8]
 8001964:	607a      	str	r2, [r7, #4]
 8001966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800196c:	f7ff ff64 	bl	8001838 <__NVIC_GetPriorityGrouping>
 8001970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	68b9      	ldr	r1, [r7, #8]
 8001976:	6978      	ldr	r0, [r7, #20]
 8001978:	f7ff ffb2 	bl	80018e0 <NVIC_EncodePriority>
 800197c:	4602      	mov	r2, r0
 800197e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001982:	4611      	mov	r1, r2
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff81 	bl	800188c <__NVIC_SetPriority>
}
 800198a:	bf00      	nop
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	4603      	mov	r3, r0
 800199a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800199c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff57 	bl	8001854 <__NVIC_EnableIRQ>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b08b      	sub	sp, #44	; 0x2c
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019ba:	2300      	movs	r3, #0
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019be:	2300      	movs	r3, #0
 80019c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019c2:	e169      	b.n	8001c98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019c4:	2201      	movs	r2, #1
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	69fa      	ldr	r2, [r7, #28]
 80019d4:	4013      	ands	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	429a      	cmp	r2, r3
 80019de:	f040 8158 	bne.w	8001c92 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	4a9a      	ldr	r2, [pc, #616]	; (8001c50 <HAL_GPIO_Init+0x2a0>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d05e      	beq.n	8001aaa <HAL_GPIO_Init+0xfa>
 80019ec:	4a98      	ldr	r2, [pc, #608]	; (8001c50 <HAL_GPIO_Init+0x2a0>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d875      	bhi.n	8001ade <HAL_GPIO_Init+0x12e>
 80019f2:	4a98      	ldr	r2, [pc, #608]	; (8001c54 <HAL_GPIO_Init+0x2a4>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d058      	beq.n	8001aaa <HAL_GPIO_Init+0xfa>
 80019f8:	4a96      	ldr	r2, [pc, #600]	; (8001c54 <HAL_GPIO_Init+0x2a4>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d86f      	bhi.n	8001ade <HAL_GPIO_Init+0x12e>
 80019fe:	4a96      	ldr	r2, [pc, #600]	; (8001c58 <HAL_GPIO_Init+0x2a8>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d052      	beq.n	8001aaa <HAL_GPIO_Init+0xfa>
 8001a04:	4a94      	ldr	r2, [pc, #592]	; (8001c58 <HAL_GPIO_Init+0x2a8>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d869      	bhi.n	8001ade <HAL_GPIO_Init+0x12e>
 8001a0a:	4a94      	ldr	r2, [pc, #592]	; (8001c5c <HAL_GPIO_Init+0x2ac>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d04c      	beq.n	8001aaa <HAL_GPIO_Init+0xfa>
 8001a10:	4a92      	ldr	r2, [pc, #584]	; (8001c5c <HAL_GPIO_Init+0x2ac>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d863      	bhi.n	8001ade <HAL_GPIO_Init+0x12e>
 8001a16:	4a92      	ldr	r2, [pc, #584]	; (8001c60 <HAL_GPIO_Init+0x2b0>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d046      	beq.n	8001aaa <HAL_GPIO_Init+0xfa>
 8001a1c:	4a90      	ldr	r2, [pc, #576]	; (8001c60 <HAL_GPIO_Init+0x2b0>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d85d      	bhi.n	8001ade <HAL_GPIO_Init+0x12e>
 8001a22:	2b12      	cmp	r3, #18
 8001a24:	d82a      	bhi.n	8001a7c <HAL_GPIO_Init+0xcc>
 8001a26:	2b12      	cmp	r3, #18
 8001a28:	d859      	bhi.n	8001ade <HAL_GPIO_Init+0x12e>
 8001a2a:	a201      	add	r2, pc, #4	; (adr r2, 8001a30 <HAL_GPIO_Init+0x80>)
 8001a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a30:	08001aab 	.word	0x08001aab
 8001a34:	08001a85 	.word	0x08001a85
 8001a38:	08001a97 	.word	0x08001a97
 8001a3c:	08001ad9 	.word	0x08001ad9
 8001a40:	08001adf 	.word	0x08001adf
 8001a44:	08001adf 	.word	0x08001adf
 8001a48:	08001adf 	.word	0x08001adf
 8001a4c:	08001adf 	.word	0x08001adf
 8001a50:	08001adf 	.word	0x08001adf
 8001a54:	08001adf 	.word	0x08001adf
 8001a58:	08001adf 	.word	0x08001adf
 8001a5c:	08001adf 	.word	0x08001adf
 8001a60:	08001adf 	.word	0x08001adf
 8001a64:	08001adf 	.word	0x08001adf
 8001a68:	08001adf 	.word	0x08001adf
 8001a6c:	08001adf 	.word	0x08001adf
 8001a70:	08001adf 	.word	0x08001adf
 8001a74:	08001a8d 	.word	0x08001a8d
 8001a78:	08001aa1 	.word	0x08001aa1
 8001a7c:	4a79      	ldr	r2, [pc, #484]	; (8001c64 <HAL_GPIO_Init+0x2b4>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d013      	beq.n	8001aaa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a82:	e02c      	b.n	8001ade <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	623b      	str	r3, [r7, #32]
          break;
 8001a8a:	e029      	b.n	8001ae0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	3304      	adds	r3, #4
 8001a92:	623b      	str	r3, [r7, #32]
          break;
 8001a94:	e024      	b.n	8001ae0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	3308      	adds	r3, #8
 8001a9c:	623b      	str	r3, [r7, #32]
          break;
 8001a9e:	e01f      	b.n	8001ae0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	330c      	adds	r3, #12
 8001aa6:	623b      	str	r3, [r7, #32]
          break;
 8001aa8:	e01a      	b.n	8001ae0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d102      	bne.n	8001ab8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ab2:	2304      	movs	r3, #4
 8001ab4:	623b      	str	r3, [r7, #32]
          break;
 8001ab6:	e013      	b.n	8001ae0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d105      	bne.n	8001acc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ac0:	2308      	movs	r3, #8
 8001ac2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	69fa      	ldr	r2, [r7, #28]
 8001ac8:	611a      	str	r2, [r3, #16]
          break;
 8001aca:	e009      	b.n	8001ae0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001acc:	2308      	movs	r3, #8
 8001ace:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	69fa      	ldr	r2, [r7, #28]
 8001ad4:	615a      	str	r2, [r3, #20]
          break;
 8001ad6:	e003      	b.n	8001ae0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	623b      	str	r3, [r7, #32]
          break;
 8001adc:	e000      	b.n	8001ae0 <HAL_GPIO_Init+0x130>
          break;
 8001ade:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	2bff      	cmp	r3, #255	; 0xff
 8001ae4:	d801      	bhi.n	8001aea <HAL_GPIO_Init+0x13a>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	e001      	b.n	8001aee <HAL_GPIO_Init+0x13e>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	3304      	adds	r3, #4
 8001aee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	2bff      	cmp	r3, #255	; 0xff
 8001af4:	d802      	bhi.n	8001afc <HAL_GPIO_Init+0x14c>
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	e002      	b.n	8001b02 <HAL_GPIO_Init+0x152>
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	3b08      	subs	r3, #8
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	210f      	movs	r1, #15
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	401a      	ands	r2, r3
 8001b14:	6a39      	ldr	r1, [r7, #32]
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f000 80b1 	beq.w	8001c92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b30:	4b4d      	ldr	r3, [pc, #308]	; (8001c68 <HAL_GPIO_Init+0x2b8>)
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	4a4c      	ldr	r2, [pc, #304]	; (8001c68 <HAL_GPIO_Init+0x2b8>)
 8001b36:	f043 0301 	orr.w	r3, r3, #1
 8001b3a:	6193      	str	r3, [r2, #24]
 8001b3c:	4b4a      	ldr	r3, [pc, #296]	; (8001c68 <HAL_GPIO_Init+0x2b8>)
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	60bb      	str	r3, [r7, #8]
 8001b46:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b48:	4a48      	ldr	r2, [pc, #288]	; (8001c6c <HAL_GPIO_Init+0x2bc>)
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	089b      	lsrs	r3, r3, #2
 8001b4e:	3302      	adds	r3, #2
 8001b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b54:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b58:	f003 0303 	and.w	r3, r3, #3
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	220f      	movs	r2, #15
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a40      	ldr	r2, [pc, #256]	; (8001c70 <HAL_GPIO_Init+0x2c0>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d013      	beq.n	8001b9c <HAL_GPIO_Init+0x1ec>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a3f      	ldr	r2, [pc, #252]	; (8001c74 <HAL_GPIO_Init+0x2c4>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d00d      	beq.n	8001b98 <HAL_GPIO_Init+0x1e8>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a3e      	ldr	r2, [pc, #248]	; (8001c78 <HAL_GPIO_Init+0x2c8>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d007      	beq.n	8001b94 <HAL_GPIO_Init+0x1e4>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a3d      	ldr	r2, [pc, #244]	; (8001c7c <HAL_GPIO_Init+0x2cc>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d101      	bne.n	8001b90 <HAL_GPIO_Init+0x1e0>
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e006      	b.n	8001b9e <HAL_GPIO_Init+0x1ee>
 8001b90:	2304      	movs	r3, #4
 8001b92:	e004      	b.n	8001b9e <HAL_GPIO_Init+0x1ee>
 8001b94:	2302      	movs	r3, #2
 8001b96:	e002      	b.n	8001b9e <HAL_GPIO_Init+0x1ee>
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e000      	b.n	8001b9e <HAL_GPIO_Init+0x1ee>
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ba0:	f002 0203 	and.w	r2, r2, #3
 8001ba4:	0092      	lsls	r2, r2, #2
 8001ba6:	4093      	lsls	r3, r2
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bae:	492f      	ldr	r1, [pc, #188]	; (8001c6c <HAL_GPIO_Init+0x2bc>)
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb2:	089b      	lsrs	r3, r3, #2
 8001bb4:	3302      	adds	r3, #2
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d006      	beq.n	8001bd6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bc8:	4b2d      	ldr	r3, [pc, #180]	; (8001c80 <HAL_GPIO_Init+0x2d0>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	492c      	ldr	r1, [pc, #176]	; (8001c80 <HAL_GPIO_Init+0x2d0>)
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	600b      	str	r3, [r1, #0]
 8001bd4:	e006      	b.n	8001be4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bd6:	4b2a      	ldr	r3, [pc, #168]	; (8001c80 <HAL_GPIO_Init+0x2d0>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	4928      	ldr	r1, [pc, #160]	; (8001c80 <HAL_GPIO_Init+0x2d0>)
 8001be0:	4013      	ands	r3, r2
 8001be2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d006      	beq.n	8001bfe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bf0:	4b23      	ldr	r3, [pc, #140]	; (8001c80 <HAL_GPIO_Init+0x2d0>)
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	4922      	ldr	r1, [pc, #136]	; (8001c80 <HAL_GPIO_Init+0x2d0>)
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	604b      	str	r3, [r1, #4]
 8001bfc:	e006      	b.n	8001c0c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bfe:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <HAL_GPIO_Init+0x2d0>)
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	43db      	mvns	r3, r3
 8001c06:	491e      	ldr	r1, [pc, #120]	; (8001c80 <HAL_GPIO_Init+0x2d0>)
 8001c08:	4013      	ands	r3, r2
 8001c0a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d006      	beq.n	8001c26 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c18:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <HAL_GPIO_Init+0x2d0>)
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	4918      	ldr	r1, [pc, #96]	; (8001c80 <HAL_GPIO_Init+0x2d0>)
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	608b      	str	r3, [r1, #8]
 8001c24:	e006      	b.n	8001c34 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c26:	4b16      	ldr	r3, [pc, #88]	; (8001c80 <HAL_GPIO_Init+0x2d0>)
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	4914      	ldr	r1, [pc, #80]	; (8001c80 <HAL_GPIO_Init+0x2d0>)
 8001c30:	4013      	ands	r3, r2
 8001c32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d021      	beq.n	8001c84 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c40:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <HAL_GPIO_Init+0x2d0>)
 8001c42:	68da      	ldr	r2, [r3, #12]
 8001c44:	490e      	ldr	r1, [pc, #56]	; (8001c80 <HAL_GPIO_Init+0x2d0>)
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	60cb      	str	r3, [r1, #12]
 8001c4c:	e021      	b.n	8001c92 <HAL_GPIO_Init+0x2e2>
 8001c4e:	bf00      	nop
 8001c50:	10320000 	.word	0x10320000
 8001c54:	10310000 	.word	0x10310000
 8001c58:	10220000 	.word	0x10220000
 8001c5c:	10210000 	.word	0x10210000
 8001c60:	10120000 	.word	0x10120000
 8001c64:	10110000 	.word	0x10110000
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	40010000 	.word	0x40010000
 8001c70:	40010800 	.word	0x40010800
 8001c74:	40010c00 	.word	0x40010c00
 8001c78:	40011000 	.word	0x40011000
 8001c7c:	40011400 	.word	0x40011400
 8001c80:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c84:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <HAL_GPIO_Init+0x304>)
 8001c86:	68da      	ldr	r2, [r3, #12]
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	4909      	ldr	r1, [pc, #36]	; (8001cb4 <HAL_GPIO_Init+0x304>)
 8001c8e:	4013      	ands	r3, r2
 8001c90:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	3301      	adds	r3, #1
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f47f ae8e 	bne.w	80019c4 <HAL_GPIO_Init+0x14>
  }
}
 8001ca8:	bf00      	nop
 8001caa:	bf00      	nop
 8001cac:	372c      	adds	r7, #44	; 0x2c
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	40010400 	.word	0x40010400

08001cb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	807b      	strh	r3, [r7, #2]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cc8:	787b      	ldrb	r3, [r7, #1]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cce:	887a      	ldrh	r2, [r7, #2]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cd4:	e003      	b.n	8001cde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cd6:	887b      	ldrh	r3, [r7, #2]
 8001cd8:	041a      	lsls	r2, r3, #16
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	611a      	str	r2, [r3, #16]
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001cec:	4b03      	ldr	r3, [pc, #12]	; (8001cfc <HAL_PWR_EnableBkUpAccess+0x14>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	601a      	str	r2, [r3, #0]
}
 8001cf2:	bf00      	nop
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	420e0020 	.word	0x420e0020

08001d00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e272      	b.n	80021f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f000 8087 	beq.w	8001e2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d20:	4b92      	ldr	r3, [pc, #584]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 030c 	and.w	r3, r3, #12
 8001d28:	2b04      	cmp	r3, #4
 8001d2a:	d00c      	beq.n	8001d46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d2c:	4b8f      	ldr	r3, [pc, #572]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 030c 	and.w	r3, r3, #12
 8001d34:	2b08      	cmp	r3, #8
 8001d36:	d112      	bne.n	8001d5e <HAL_RCC_OscConfig+0x5e>
 8001d38:	4b8c      	ldr	r3, [pc, #560]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d44:	d10b      	bne.n	8001d5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d46:	4b89      	ldr	r3, [pc, #548]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d06c      	beq.n	8001e2c <HAL_RCC_OscConfig+0x12c>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d168      	bne.n	8001e2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e24c      	b.n	80021f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d66:	d106      	bne.n	8001d76 <HAL_RCC_OscConfig+0x76>
 8001d68:	4b80      	ldr	r3, [pc, #512]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a7f      	ldr	r2, [pc, #508]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001d6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d72:	6013      	str	r3, [r2, #0]
 8001d74:	e02e      	b.n	8001dd4 <HAL_RCC_OscConfig+0xd4>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10c      	bne.n	8001d98 <HAL_RCC_OscConfig+0x98>
 8001d7e:	4b7b      	ldr	r3, [pc, #492]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a7a      	ldr	r2, [pc, #488]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001d84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d88:	6013      	str	r3, [r2, #0]
 8001d8a:	4b78      	ldr	r3, [pc, #480]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a77      	ldr	r2, [pc, #476]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001d90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	e01d      	b.n	8001dd4 <HAL_RCC_OscConfig+0xd4>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001da0:	d10c      	bne.n	8001dbc <HAL_RCC_OscConfig+0xbc>
 8001da2:	4b72      	ldr	r3, [pc, #456]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a71      	ldr	r2, [pc, #452]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001da8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	4b6f      	ldr	r3, [pc, #444]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a6e      	ldr	r2, [pc, #440]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	e00b      	b.n	8001dd4 <HAL_RCC_OscConfig+0xd4>
 8001dbc:	4b6b      	ldr	r3, [pc, #428]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a6a      	ldr	r2, [pc, #424]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	4b68      	ldr	r3, [pc, #416]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a67      	ldr	r2, [pc, #412]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dd2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d013      	beq.n	8001e04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ddc:	f7ff fcfe 	bl	80017dc <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001de4:	f7ff fcfa 	bl	80017dc <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b64      	cmp	r3, #100	; 0x64
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e200      	b.n	80021f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df6:	4b5d      	ldr	r3, [pc, #372]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0f0      	beq.n	8001de4 <HAL_RCC_OscConfig+0xe4>
 8001e02:	e014      	b.n	8001e2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e04:	f7ff fcea 	bl	80017dc <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e0c:	f7ff fce6 	bl	80017dc <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b64      	cmp	r3, #100	; 0x64
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e1ec      	b.n	80021f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e1e:	4b53      	ldr	r3, [pc, #332]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f0      	bne.n	8001e0c <HAL_RCC_OscConfig+0x10c>
 8001e2a:	e000      	b.n	8001e2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d063      	beq.n	8001f02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e3a:	4b4c      	ldr	r3, [pc, #304]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00b      	beq.n	8001e5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e46:	4b49      	ldr	r3, [pc, #292]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f003 030c 	and.w	r3, r3, #12
 8001e4e:	2b08      	cmp	r3, #8
 8001e50:	d11c      	bne.n	8001e8c <HAL_RCC_OscConfig+0x18c>
 8001e52:	4b46      	ldr	r3, [pc, #280]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d116      	bne.n	8001e8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e5e:	4b43      	ldr	r3, [pc, #268]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d005      	beq.n	8001e76 <HAL_RCC_OscConfig+0x176>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d001      	beq.n	8001e76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e1c0      	b.n	80021f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e76:	4b3d      	ldr	r3, [pc, #244]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	4939      	ldr	r1, [pc, #228]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e8a:	e03a      	b.n	8001f02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d020      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e94:	4b36      	ldr	r3, [pc, #216]	; (8001f70 <HAL_RCC_OscConfig+0x270>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9a:	f7ff fc9f 	bl	80017dc <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ea2:	f7ff fc9b 	bl	80017dc <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e1a1      	b.n	80021f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb4:	4b2d      	ldr	r3, [pc, #180]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d0f0      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec0:	4b2a      	ldr	r3, [pc, #168]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	4927      	ldr	r1, [pc, #156]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	600b      	str	r3, [r1, #0]
 8001ed4:	e015      	b.n	8001f02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ed6:	4b26      	ldr	r3, [pc, #152]	; (8001f70 <HAL_RCC_OscConfig+0x270>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001edc:	f7ff fc7e 	bl	80017dc <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee4:	f7ff fc7a 	bl	80017dc <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e180      	b.n	80021f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ef6:	4b1d      	ldr	r3, [pc, #116]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f0      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d03a      	beq.n	8001f84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d019      	beq.n	8001f4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f16:	4b17      	ldr	r3, [pc, #92]	; (8001f74 <HAL_RCC_OscConfig+0x274>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1c:	f7ff fc5e 	bl	80017dc <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f24:	f7ff fc5a 	bl	80017dc <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e160      	b.n	80021f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f36:	4b0d      	ldr	r3, [pc, #52]	; (8001f6c <HAL_RCC_OscConfig+0x26c>)
 8001f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d0f0      	beq.n	8001f24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f42:	2001      	movs	r0, #1
 8001f44:	f000 fb08 	bl	8002558 <RCC_Delay>
 8001f48:	e01c      	b.n	8001f84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <HAL_RCC_OscConfig+0x274>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f50:	f7ff fc44 	bl	80017dc <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f56:	e00f      	b.n	8001f78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f58:	f7ff fc40 	bl	80017dc <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d908      	bls.n	8001f78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e146      	b.n	80021f8 <HAL_RCC_OscConfig+0x4f8>
 8001f6a:	bf00      	nop
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	42420000 	.word	0x42420000
 8001f74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f78:	4b92      	ldr	r3, [pc, #584]	; (80021c4 <HAL_RCC_OscConfig+0x4c4>)
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1e9      	bne.n	8001f58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f000 80a6 	beq.w	80020de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f92:	2300      	movs	r3, #0
 8001f94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f96:	4b8b      	ldr	r3, [pc, #556]	; (80021c4 <HAL_RCC_OscConfig+0x4c4>)
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10d      	bne.n	8001fbe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fa2:	4b88      	ldr	r3, [pc, #544]	; (80021c4 <HAL_RCC_OscConfig+0x4c4>)
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	4a87      	ldr	r2, [pc, #540]	; (80021c4 <HAL_RCC_OscConfig+0x4c4>)
 8001fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fac:	61d3      	str	r3, [r2, #28]
 8001fae:	4b85      	ldr	r3, [pc, #532]	; (80021c4 <HAL_RCC_OscConfig+0x4c4>)
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb6:	60bb      	str	r3, [r7, #8]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fbe:	4b82      	ldr	r3, [pc, #520]	; (80021c8 <HAL_RCC_OscConfig+0x4c8>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d118      	bne.n	8001ffc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fca:	4b7f      	ldr	r3, [pc, #508]	; (80021c8 <HAL_RCC_OscConfig+0x4c8>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a7e      	ldr	r2, [pc, #504]	; (80021c8 <HAL_RCC_OscConfig+0x4c8>)
 8001fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fd6:	f7ff fc01 	bl	80017dc <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fde:	f7ff fbfd 	bl	80017dc <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b64      	cmp	r3, #100	; 0x64
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e103      	b.n	80021f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff0:	4b75      	ldr	r3, [pc, #468]	; (80021c8 <HAL_RCC_OscConfig+0x4c8>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0f0      	beq.n	8001fde <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d106      	bne.n	8002012 <HAL_RCC_OscConfig+0x312>
 8002004:	4b6f      	ldr	r3, [pc, #444]	; (80021c4 <HAL_RCC_OscConfig+0x4c4>)
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	4a6e      	ldr	r2, [pc, #440]	; (80021c4 <HAL_RCC_OscConfig+0x4c4>)
 800200a:	f043 0301 	orr.w	r3, r3, #1
 800200e:	6213      	str	r3, [r2, #32]
 8002010:	e02d      	b.n	800206e <HAL_RCC_OscConfig+0x36e>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10c      	bne.n	8002034 <HAL_RCC_OscConfig+0x334>
 800201a:	4b6a      	ldr	r3, [pc, #424]	; (80021c4 <HAL_RCC_OscConfig+0x4c4>)
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	4a69      	ldr	r2, [pc, #420]	; (80021c4 <HAL_RCC_OscConfig+0x4c4>)
 8002020:	f023 0301 	bic.w	r3, r3, #1
 8002024:	6213      	str	r3, [r2, #32]
 8002026:	4b67      	ldr	r3, [pc, #412]	; (80021c4 <HAL_RCC_OscConfig+0x4c4>)
 8002028:	6a1b      	ldr	r3, [r3, #32]
 800202a:	4a66      	ldr	r2, [pc, #408]	; (80021c4 <HAL_RCC_OscConfig+0x4c4>)
 800202c:	f023 0304 	bic.w	r3, r3, #4
 8002030:	6213      	str	r3, [r2, #32]
 8002032:	e01c      	b.n	800206e <HAL_RCC_OscConfig+0x36e>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	2b05      	cmp	r3, #5
 800203a:	d10c      	bne.n	8002056 <HAL_RCC_OscConfig+0x356>
 800203c:	4b61      	ldr	r3, [pc, #388]	; (80021c4 <HAL_RCC_OscConfig+0x4c4>)
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	4a60      	ldr	r2, [pc, #384]	; (80021c4 <HAL_RCC_OscConfig+0x4c4>)
 8002042:	f043 0304 	orr.w	r3, r3, #4
 8002046:	6213      	str	r3, [r2, #32]
 8002048:	4b5e      	ldr	r3, [pc, #376]	; (80021c4 <HAL_RCC_OscConfig+0x4c4>)
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	4a5d      	ldr	r2, [pc, #372]	; (80021c4 <HAL_RCC_OscConfig+0x4c4>)
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	6213      	str	r3, [r2, #32]
 8002054:	e00b      	b.n	800206e <HAL_RCC_OscConfig+0x36e>
 8002056:	4b5b      	ldr	r3, [pc, #364]	; (80021c4 <HAL_RCC_OscConfig+0x4c4>)
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	4a5a      	ldr	r2, [pc, #360]	; (80021c4 <HAL_RCC_OscConfig+0x4c4>)
 800205c:	f023 0301 	bic.w	r3, r3, #1
 8002060:	6213      	str	r3, [r2, #32]
 8002062:	4b58      	ldr	r3, [pc, #352]	; (80021c4 <HAL_RCC_OscConfig+0x4c4>)
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	4a57      	ldr	r2, [pc, #348]	; (80021c4 <HAL_RCC_OscConfig+0x4c4>)
 8002068:	f023 0304 	bic.w	r3, r3, #4
 800206c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d015      	beq.n	80020a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002076:	f7ff fbb1 	bl	80017dc <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800207c:	e00a      	b.n	8002094 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800207e:	f7ff fbad 	bl	80017dc <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	f241 3288 	movw	r2, #5000	; 0x1388
 800208c:	4293      	cmp	r3, r2
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e0b1      	b.n	80021f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002094:	4b4b      	ldr	r3, [pc, #300]	; (80021c4 <HAL_RCC_OscConfig+0x4c4>)
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0ee      	beq.n	800207e <HAL_RCC_OscConfig+0x37e>
 80020a0:	e014      	b.n	80020cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a2:	f7ff fb9b 	bl	80017dc <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a8:	e00a      	b.n	80020c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020aa:	f7ff fb97 	bl	80017dc <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e09b      	b.n	80021f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020c0:	4b40      	ldr	r3, [pc, #256]	; (80021c4 <HAL_RCC_OscConfig+0x4c4>)
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1ee      	bne.n	80020aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020cc:	7dfb      	ldrb	r3, [r7, #23]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d105      	bne.n	80020de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020d2:	4b3c      	ldr	r3, [pc, #240]	; (80021c4 <HAL_RCC_OscConfig+0x4c4>)
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	4a3b      	ldr	r2, [pc, #236]	; (80021c4 <HAL_RCC_OscConfig+0x4c4>)
 80020d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f000 8087 	beq.w	80021f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020e8:	4b36      	ldr	r3, [pc, #216]	; (80021c4 <HAL_RCC_OscConfig+0x4c4>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 030c 	and.w	r3, r3, #12
 80020f0:	2b08      	cmp	r3, #8
 80020f2:	d061      	beq.n	80021b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	69db      	ldr	r3, [r3, #28]
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d146      	bne.n	800218a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020fc:	4b33      	ldr	r3, [pc, #204]	; (80021cc <HAL_RCC_OscConfig+0x4cc>)
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002102:	f7ff fb6b 	bl	80017dc <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800210a:	f7ff fb67 	bl	80017dc <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e06d      	b.n	80021f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800211c:	4b29      	ldr	r3, [pc, #164]	; (80021c4 <HAL_RCC_OscConfig+0x4c4>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1f0      	bne.n	800210a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002130:	d108      	bne.n	8002144 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002132:	4b24      	ldr	r3, [pc, #144]	; (80021c4 <HAL_RCC_OscConfig+0x4c4>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	4921      	ldr	r1, [pc, #132]	; (80021c4 <HAL_RCC_OscConfig+0x4c4>)
 8002140:	4313      	orrs	r3, r2
 8002142:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002144:	4b1f      	ldr	r3, [pc, #124]	; (80021c4 <HAL_RCC_OscConfig+0x4c4>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a19      	ldr	r1, [r3, #32]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	430b      	orrs	r3, r1
 8002156:	491b      	ldr	r1, [pc, #108]	; (80021c4 <HAL_RCC_OscConfig+0x4c4>)
 8002158:	4313      	orrs	r3, r2
 800215a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800215c:	4b1b      	ldr	r3, [pc, #108]	; (80021cc <HAL_RCC_OscConfig+0x4cc>)
 800215e:	2201      	movs	r2, #1
 8002160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002162:	f7ff fb3b 	bl	80017dc <HAL_GetTick>
 8002166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002168:	e008      	b.n	800217c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800216a:	f7ff fb37 	bl	80017dc <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e03d      	b.n	80021f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800217c:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <HAL_RCC_OscConfig+0x4c4>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d0f0      	beq.n	800216a <HAL_RCC_OscConfig+0x46a>
 8002188:	e035      	b.n	80021f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800218a:	4b10      	ldr	r3, [pc, #64]	; (80021cc <HAL_RCC_OscConfig+0x4cc>)
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002190:	f7ff fb24 	bl	80017dc <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002198:	f7ff fb20 	bl	80017dc <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e026      	b.n	80021f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021aa:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <HAL_RCC_OscConfig+0x4c4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f0      	bne.n	8002198 <HAL_RCC_OscConfig+0x498>
 80021b6:	e01e      	b.n	80021f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	69db      	ldr	r3, [r3, #28]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d107      	bne.n	80021d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e019      	b.n	80021f8 <HAL_RCC_OscConfig+0x4f8>
 80021c4:	40021000 	.word	0x40021000
 80021c8:	40007000 	.word	0x40007000
 80021cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021d0:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <HAL_RCC_OscConfig+0x500>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d106      	bne.n	80021f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d001      	beq.n	80021f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e000      	b.n	80021f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40021000 	.word	0x40021000

08002204 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e0d0      	b.n	80023ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002218:	4b6a      	ldr	r3, [pc, #424]	; (80023c4 <HAL_RCC_ClockConfig+0x1c0>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d910      	bls.n	8002248 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002226:	4b67      	ldr	r3, [pc, #412]	; (80023c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f023 0207 	bic.w	r2, r3, #7
 800222e:	4965      	ldr	r1, [pc, #404]	; (80023c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	4313      	orrs	r3, r2
 8002234:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002236:	4b63      	ldr	r3, [pc, #396]	; (80023c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	429a      	cmp	r2, r3
 8002242:	d001      	beq.n	8002248 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e0b8      	b.n	80023ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d020      	beq.n	8002296 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	d005      	beq.n	800226c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002260:	4b59      	ldr	r3, [pc, #356]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	4a58      	ldr	r2, [pc, #352]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002266:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800226a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0308 	and.w	r3, r3, #8
 8002274:	2b00      	cmp	r3, #0
 8002276:	d005      	beq.n	8002284 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002278:	4b53      	ldr	r3, [pc, #332]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	4a52      	ldr	r2, [pc, #328]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 800227e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002282:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002284:	4b50      	ldr	r3, [pc, #320]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	494d      	ldr	r1, [pc, #308]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002292:	4313      	orrs	r3, r2
 8002294:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d040      	beq.n	8002324 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d107      	bne.n	80022ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022aa:	4b47      	ldr	r3, [pc, #284]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d115      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e07f      	b.n	80023ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d107      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022c2:	4b41      	ldr	r3, [pc, #260]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d109      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e073      	b.n	80023ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d2:	4b3d      	ldr	r3, [pc, #244]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e06b      	b.n	80023ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022e2:	4b39      	ldr	r3, [pc, #228]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f023 0203 	bic.w	r2, r3, #3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	4936      	ldr	r1, [pc, #216]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022f4:	f7ff fa72 	bl	80017dc <HAL_GetTick>
 80022f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022fa:	e00a      	b.n	8002312 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022fc:	f7ff fa6e 	bl	80017dc <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	f241 3288 	movw	r2, #5000	; 0x1388
 800230a:	4293      	cmp	r3, r2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e053      	b.n	80023ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002312:	4b2d      	ldr	r3, [pc, #180]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f003 020c 	and.w	r2, r3, #12
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	429a      	cmp	r2, r3
 8002322:	d1eb      	bne.n	80022fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002324:	4b27      	ldr	r3, [pc, #156]	; (80023c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	429a      	cmp	r2, r3
 8002330:	d210      	bcs.n	8002354 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002332:	4b24      	ldr	r3, [pc, #144]	; (80023c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f023 0207 	bic.w	r2, r3, #7
 800233a:	4922      	ldr	r1, [pc, #136]	; (80023c4 <HAL_RCC_ClockConfig+0x1c0>)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	4313      	orrs	r3, r2
 8002340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002342:	4b20      	ldr	r3, [pc, #128]	; (80023c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	429a      	cmp	r2, r3
 800234e:	d001      	beq.n	8002354 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e032      	b.n	80023ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0304 	and.w	r3, r3, #4
 800235c:	2b00      	cmp	r3, #0
 800235e:	d008      	beq.n	8002372 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002360:	4b19      	ldr	r3, [pc, #100]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	4916      	ldr	r1, [pc, #88]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 800236e:	4313      	orrs	r3, r2
 8002370:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	2b00      	cmp	r3, #0
 800237c:	d009      	beq.n	8002392 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800237e:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	490e      	ldr	r1, [pc, #56]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 800238e:	4313      	orrs	r3, r2
 8002390:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002392:	f000 f821 	bl	80023d8 <HAL_RCC_GetSysClockFreq>
 8002396:	4602      	mov	r2, r0
 8002398:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	091b      	lsrs	r3, r3, #4
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	490a      	ldr	r1, [pc, #40]	; (80023cc <HAL_RCC_ClockConfig+0x1c8>)
 80023a4:	5ccb      	ldrb	r3, [r1, r3]
 80023a6:	fa22 f303 	lsr.w	r3, r2, r3
 80023aa:	4a09      	ldr	r2, [pc, #36]	; (80023d0 <HAL_RCC_ClockConfig+0x1cc>)
 80023ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023ae:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <HAL_RCC_ClockConfig+0x1d0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff f872 	bl	800149c <HAL_InitTick>

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40022000 	.word	0x40022000
 80023c8:	40021000 	.word	0x40021000
 80023cc:	080088b8 	.word	0x080088b8
 80023d0:	200001e8 	.word	0x200001e8
 80023d4:	200001ec 	.word	0x200001ec

080023d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023d8:	b490      	push	{r4, r7}
 80023da:	b08a      	sub	sp, #40	; 0x28
 80023dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023de:	4b29      	ldr	r3, [pc, #164]	; (8002484 <HAL_RCC_GetSysClockFreq+0xac>)
 80023e0:	1d3c      	adds	r4, r7, #4
 80023e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023e8:	f240 2301 	movw	r3, #513	; 0x201
 80023ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023ee:	2300      	movs	r3, #0
 80023f0:	61fb      	str	r3, [r7, #28]
 80023f2:	2300      	movs	r3, #0
 80023f4:	61bb      	str	r3, [r7, #24]
 80023f6:	2300      	movs	r3, #0
 80023f8:	627b      	str	r3, [r7, #36]	; 0x24
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023fe:	2300      	movs	r3, #0
 8002400:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002402:	4b21      	ldr	r3, [pc, #132]	; (8002488 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f003 030c 	and.w	r3, r3, #12
 800240e:	2b04      	cmp	r3, #4
 8002410:	d002      	beq.n	8002418 <HAL_RCC_GetSysClockFreq+0x40>
 8002412:	2b08      	cmp	r3, #8
 8002414:	d003      	beq.n	800241e <HAL_RCC_GetSysClockFreq+0x46>
 8002416:	e02b      	b.n	8002470 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002418:	4b1c      	ldr	r3, [pc, #112]	; (800248c <HAL_RCC_GetSysClockFreq+0xb4>)
 800241a:	623b      	str	r3, [r7, #32]
      break;
 800241c:	e02b      	b.n	8002476 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	0c9b      	lsrs	r3, r3, #18
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	3328      	adds	r3, #40	; 0x28
 8002428:	443b      	add	r3, r7
 800242a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800242e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d012      	beq.n	8002460 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800243a:	4b13      	ldr	r3, [pc, #76]	; (8002488 <HAL_RCC_GetSysClockFreq+0xb0>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	0c5b      	lsrs	r3, r3, #17
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	3328      	adds	r3, #40	; 0x28
 8002446:	443b      	add	r3, r7
 8002448:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800244c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	4a0e      	ldr	r2, [pc, #56]	; (800248c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002452:	fb03 f202 	mul.w	r2, r3, r2
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	fbb2 f3f3 	udiv	r3, r2, r3
 800245c:	627b      	str	r3, [r7, #36]	; 0x24
 800245e:	e004      	b.n	800246a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	4a0b      	ldr	r2, [pc, #44]	; (8002490 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002464:	fb02 f303 	mul.w	r3, r2, r3
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	623b      	str	r3, [r7, #32]
      break;
 800246e:	e002      	b.n	8002476 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002470:	4b06      	ldr	r3, [pc, #24]	; (800248c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002472:	623b      	str	r3, [r7, #32]
      break;
 8002474:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002476:	6a3b      	ldr	r3, [r7, #32]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3728      	adds	r7, #40	; 0x28
 800247c:	46bd      	mov	sp, r7
 800247e:	bc90      	pop	{r4, r7}
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	08008884 	.word	0x08008884
 8002488:	40021000 	.word	0x40021000
 800248c:	007a1200 	.word	0x007a1200
 8002490:	003d0900 	.word	0x003d0900

08002494 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002498:	4b02      	ldr	r3, [pc, #8]	; (80024a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800249a:	681b      	ldr	r3, [r3, #0]
}
 800249c:	4618      	mov	r0, r3
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr
 80024a4:	200001e8 	.word	0x200001e8

080024a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024ac:	f7ff fff2 	bl	8002494 <HAL_RCC_GetHCLKFreq>
 80024b0:	4602      	mov	r2, r0
 80024b2:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	0a1b      	lsrs	r3, r3, #8
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	4903      	ldr	r1, [pc, #12]	; (80024cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80024be:	5ccb      	ldrb	r3, [r1, r3]
 80024c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40021000 	.word	0x40021000
 80024cc:	080088c8 	.word	0x080088c8

080024d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024d4:	f7ff ffde 	bl	8002494 <HAL_RCC_GetHCLKFreq>
 80024d8:	4602      	mov	r2, r0
 80024da:	4b05      	ldr	r3, [pc, #20]	; (80024f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	0adb      	lsrs	r3, r3, #11
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	4903      	ldr	r1, [pc, #12]	; (80024f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024e6:	5ccb      	ldrb	r3, [r1, r3]
 80024e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40021000 	.word	0x40021000
 80024f4:	080088c8 	.word	0x080088c8

080024f8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	220f      	movs	r2, #15
 8002506:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002508:	4b11      	ldr	r3, [pc, #68]	; (8002550 <HAL_RCC_GetClockConfig+0x58>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 0203 	and.w	r2, r3, #3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002514:	4b0e      	ldr	r3, [pc, #56]	; (8002550 <HAL_RCC_GetClockConfig+0x58>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002520:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <HAL_RCC_GetClockConfig+0x58>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800252c:	4b08      	ldr	r3, [pc, #32]	; (8002550 <HAL_RCC_GetClockConfig+0x58>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	08db      	lsrs	r3, r3, #3
 8002532:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800253a:	4b06      	ldr	r3, [pc, #24]	; (8002554 <HAL_RCC_GetClockConfig+0x5c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0207 	and.w	r2, r3, #7
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr
 8002550:	40021000 	.word	0x40021000
 8002554:	40022000 	.word	0x40022000

08002558 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002560:	4b0a      	ldr	r3, [pc, #40]	; (800258c <RCC_Delay+0x34>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a0a      	ldr	r2, [pc, #40]	; (8002590 <RCC_Delay+0x38>)
 8002566:	fba2 2303 	umull	r2, r3, r2, r3
 800256a:	0a5b      	lsrs	r3, r3, #9
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	fb02 f303 	mul.w	r3, r2, r3
 8002572:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002574:	bf00      	nop
  }
  while (Delay --);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	1e5a      	subs	r2, r3, #1
 800257a:	60fa      	str	r2, [r7, #12]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1f9      	bne.n	8002574 <RCC_Delay+0x1c>
}
 8002580:	bf00      	nop
 8002582:	bf00      	nop
 8002584:	3714      	adds	r7, #20
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr
 800258c:	200001e8 	.word	0x200001e8
 8002590:	10624dd3 	.word	0x10624dd3

08002594 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800259c:	2300      	movs	r3, #0
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	2300      	movs	r3, #0
 80025a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d07d      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80025b0:	2300      	movs	r3, #0
 80025b2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025b4:	4b4f      	ldr	r3, [pc, #316]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025b6:	69db      	ldr	r3, [r3, #28]
 80025b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d10d      	bne.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025c0:	4b4c      	ldr	r3, [pc, #304]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025c2:	69db      	ldr	r3, [r3, #28]
 80025c4:	4a4b      	ldr	r2, [pc, #300]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ca:	61d3      	str	r3, [r2, #28]
 80025cc:	4b49      	ldr	r3, [pc, #292]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ce:	69db      	ldr	r3, [r3, #28]
 80025d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d4:	60bb      	str	r3, [r7, #8]
 80025d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025d8:	2301      	movs	r3, #1
 80025da:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025dc:	4b46      	ldr	r3, [pc, #280]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d118      	bne.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025e8:	4b43      	ldr	r3, [pc, #268]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a42      	ldr	r2, [pc, #264]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025f4:	f7ff f8f2 	bl	80017dc <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fa:	e008      	b.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025fc:	f7ff f8ee 	bl	80017dc <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b64      	cmp	r3, #100	; 0x64
 8002608:	d901      	bls.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e06d      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260e:	4b3a      	ldr	r3, [pc, #232]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0f0      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800261a:	4b36      	ldr	r3, [pc, #216]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002622:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d02e      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	429a      	cmp	r2, r3
 8002636:	d027      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002638:	4b2e      	ldr	r3, [pc, #184]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002640:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002642:	4b2e      	ldr	r3, [pc, #184]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002644:	2201      	movs	r2, #1
 8002646:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002648:	4b2c      	ldr	r3, [pc, #176]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800264e:	4a29      	ldr	r2, [pc, #164]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d014      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265e:	f7ff f8bd 	bl	80017dc <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002664:	e00a      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002666:	f7ff f8b9 	bl	80017dc <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	f241 3288 	movw	r2, #5000	; 0x1388
 8002674:	4293      	cmp	r3, r2
 8002676:	d901      	bls.n	800267c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e036      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800267c:	4b1d      	ldr	r3, [pc, #116]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0ee      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002688:	4b1a      	ldr	r3, [pc, #104]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	4917      	ldr	r1, [pc, #92]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002696:	4313      	orrs	r3, r2
 8002698:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800269a:	7dfb      	ldrb	r3, [r7, #23]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d105      	bne.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026a0:	4b14      	ldr	r3, [pc, #80]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026a2:	69db      	ldr	r3, [r3, #28]
 80026a4:	4a13      	ldr	r2, [pc, #76]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026aa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d008      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026b8:	4b0e      	ldr	r3, [pc, #56]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	490b      	ldr	r1, [pc, #44]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0310 	and.w	r3, r3, #16
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d008      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026d6:	4b07      	ldr	r3, [pc, #28]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	4904      	ldr	r1, [pc, #16]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3718      	adds	r7, #24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40021000 	.word	0x40021000
 80026f8:	40007000 	.word	0x40007000
 80026fc:	42420440 	.word	0x42420440

08002700 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002700:	b590      	push	{r4, r7, lr}
 8002702:	b08d      	sub	sp, #52	; 0x34
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002708:	4b58      	ldr	r3, [pc, #352]	; (800286c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800270a:	f107 040c 	add.w	r4, r7, #12
 800270e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002710:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002714:	f240 2301 	movw	r3, #513	; 0x201
 8002718:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800271a:	2300      	movs	r3, #0
 800271c:	627b      	str	r3, [r7, #36]	; 0x24
 800271e:	2300      	movs	r3, #0
 8002720:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002722:	2300      	movs	r3, #0
 8002724:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002726:	2300      	movs	r3, #0
 8002728:	61fb      	str	r3, [r7, #28]
 800272a:	2300      	movs	r3, #0
 800272c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b10      	cmp	r3, #16
 8002732:	d00a      	beq.n	800274a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b10      	cmp	r3, #16
 8002738:	f200 808e 	bhi.w	8002858 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d049      	beq.n	80027d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b02      	cmp	r3, #2
 8002746:	d079      	beq.n	800283c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002748:	e086      	b.n	8002858 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 800274a:	4b49      	ldr	r3, [pc, #292]	; (8002870 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002750:	4b47      	ldr	r3, [pc, #284]	; (8002870 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d07f      	beq.n	800285c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	0c9b      	lsrs	r3, r3, #18
 8002760:	f003 030f 	and.w	r3, r3, #15
 8002764:	3330      	adds	r3, #48	; 0x30
 8002766:	443b      	add	r3, r7
 8002768:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800276c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d017      	beq.n	80027a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002778:	4b3d      	ldr	r3, [pc, #244]	; (8002870 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	0c5b      	lsrs	r3, r3, #17
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	3330      	adds	r3, #48	; 0x30
 8002784:	443b      	add	r3, r7
 8002786:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800278a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00d      	beq.n	80027b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002796:	4a37      	ldr	r2, [pc, #220]	; (8002874 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	fbb2 f2f3 	udiv	r2, r2, r3
 800279e:	6a3b      	ldr	r3, [r7, #32]
 80027a0:	fb02 f303 	mul.w	r3, r2, r3
 80027a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027a6:	e004      	b.n	80027b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	4a33      	ldr	r2, [pc, #204]	; (8002878 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80027ac:	fb02 f303 	mul.w	r3, r2, r3
 80027b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80027b2:	4b2f      	ldr	r3, [pc, #188]	; (8002870 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027be:	d102      	bne.n	80027c6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 80027c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80027c4:	e04a      	b.n	800285c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 80027c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	4a2c      	ldr	r2, [pc, #176]	; (800287c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80027cc:	fba2 2303 	umull	r2, r3, r2, r3
 80027d0:	085b      	lsrs	r3, r3, #1
 80027d2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80027d4:	e042      	b.n	800285c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80027d6:	4b26      	ldr	r3, [pc, #152]	; (8002870 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027e6:	d108      	bne.n	80027fa <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 80027f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80027f8:	e01f      	b.n	800283a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002800:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002804:	d109      	bne.n	800281a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8002806:	4b1a      	ldr	r3, [pc, #104]	; (8002870 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8002812:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002816:	62bb      	str	r3, [r7, #40]	; 0x28
 8002818:	e00f      	b.n	800283a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002820:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002824:	d11c      	bne.n	8002860 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002826:	4b12      	ldr	r3, [pc, #72]	; (8002870 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d016      	beq.n	8002860 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8002832:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002836:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002838:	e012      	b.n	8002860 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800283a:	e011      	b.n	8002860 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800283c:	f7ff fe48 	bl	80024d0 <HAL_RCC_GetPCLK2Freq>
 8002840:	4602      	mov	r2, r0
 8002842:	4b0b      	ldr	r3, [pc, #44]	; (8002870 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	0b9b      	lsrs	r3, r3, #14
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	3301      	adds	r3, #1
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	fbb2 f3f3 	udiv	r3, r2, r3
 8002854:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002856:	e004      	b.n	8002862 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002858:	bf00      	nop
 800285a:	e002      	b.n	8002862 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800285c:	bf00      	nop
 800285e:	e000      	b.n	8002862 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002860:	bf00      	nop
    }
  }
  return (frequency);
 8002862:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002864:	4618      	mov	r0, r3
 8002866:	3734      	adds	r7, #52	; 0x34
 8002868:	46bd      	mov	sp, r7
 800286a:	bd90      	pop	{r4, r7, pc}
 800286c:	08008894 	.word	0x08008894
 8002870:	40021000 	.word	0x40021000
 8002874:	007a1200 	.word	0x007a1200
 8002878:	003d0900 	.word	0x003d0900
 800287c:	aaaaaaab 	.word	0xaaaaaaab

08002880 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e084      	b.n	80029a0 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	7c5b      	ldrb	r3, [r3, #17]
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b00      	cmp	r3, #0
 800289e:	d105      	bne.n	80028ac <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7fe fd80 	bl	80013ac <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2202      	movs	r2, #2
 80028b0:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 fb27 	bl	8002f06 <HAL_RTC_WaitForSynchro>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d004      	beq.n	80028c8 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2204      	movs	r2, #4
 80028c2:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e06b      	b.n	80029a0 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 fbe0 	bl	800308e <RTC_EnterInitMode>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d004      	beq.n	80028de <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2204      	movs	r2, #4
 80028d8:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e060      	b.n	80029a0 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 0207 	bic.w	r2, r2, #7
 80028ec:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d005      	beq.n	8002902 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80028f6:	4b2c      	ldr	r3, [pc, #176]	; (80029a8 <HAL_RTC_Init+0x128>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	4a2b      	ldr	r2, [pc, #172]	; (80029a8 <HAL_RTC_Init+0x128>)
 80028fc:	f023 0301 	bic.w	r3, r3, #1
 8002900:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002902:	4b29      	ldr	r3, [pc, #164]	; (80029a8 <HAL_RTC_Init+0x128>)
 8002904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002906:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	4926      	ldr	r1, [pc, #152]	; (80029a8 <HAL_RTC_Init+0x128>)
 8002910:	4313      	orrs	r3, r2
 8002912:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800291c:	d003      	beq.n	8002926 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	e00e      	b.n	8002944 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002926:	2001      	movs	r0, #1
 8002928:	f7ff feea 	bl	8002700 <HAL_RCCEx_GetPeriphCLKFreq>
 800292c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d104      	bne.n	800293e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2204      	movs	r2, #4
 8002938:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e030      	b.n	80029a0 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	3b01      	subs	r3, #1
 8002942:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f023 010f 	bic.w	r1, r3, #15
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	0c1a      	lsrs	r2, r3, #16
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	0c1b      	lsrs	r3, r3, #16
 8002962:	041b      	lsls	r3, r3, #16
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	b291      	uxth	r1, r2
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	6812      	ldr	r2, [r2, #0]
 800296c:	430b      	orrs	r3, r1
 800296e:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f000 fbb4 	bl	80030de <RTC_ExitInitMode>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d004      	beq.n	8002986 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2204      	movs	r2, #4
 8002980:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e00c      	b.n	80029a0 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800299e:	2300      	movs	r3, #0
  }
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40006c00 	.word	0x40006c00

080029ac <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80029ac:	b590      	push	{r4, r7, lr}
 80029ae:	b087      	sub	sp, #28
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	617b      	str	r3, [r7, #20]
 80029bc:	2300      	movs	r3, #0
 80029be:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d002      	beq.n	80029cc <HAL_RTC_SetTime+0x20>
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e080      	b.n	8002ad2 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	7c1b      	ldrb	r3, [r3, #16]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_RTC_SetTime+0x30>
 80029d8:	2302      	movs	r3, #2
 80029da:	e07a      	b.n	8002ad2 <HAL_RTC_SetTime+0x126>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2201      	movs	r2, #1
 80029e0:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2202      	movs	r2, #2
 80029e6:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d113      	bne.n	8002a16 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	461a      	mov	r2, r3
 80029f4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80029f8:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	785b      	ldrb	r3, [r3, #1]
 8002a00:	4619      	mov	r1, r3
 8002a02:	460b      	mov	r3, r1
 8002a04:	011b      	lsls	r3, r3, #4
 8002a06:	1a5b      	subs	r3, r3, r1
 8002a08:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002a0a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8002a0c:	68ba      	ldr	r2, [r7, #8]
 8002a0e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002a10:	4413      	add	r3, r2
 8002a12:	617b      	str	r3, [r7, #20]
 8002a14:	e01e      	b.n	8002a54 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 fba4 	bl	8003168 <RTC_Bcd2ToByte>
 8002a20:	4603      	mov	r3, r0
 8002a22:	461a      	mov	r2, r3
 8002a24:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002a28:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	785b      	ldrb	r3, [r3, #1]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f000 fb99 	bl	8003168 <RTC_Bcd2ToByte>
 8002a36:	4603      	mov	r3, r0
 8002a38:	461a      	mov	r2, r3
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	011b      	lsls	r3, r3, #4
 8002a3e:	1a9b      	subs	r3, r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002a42:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	789b      	ldrb	r3, [r3, #2]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f000 fb8d 	bl	8003168 <RTC_Bcd2ToByte>
 8002a4e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002a50:	4423      	add	r3, r4
 8002a52:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002a54:	6979      	ldr	r1, [r7, #20]
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 fab2 	bl	8002fc0 <RTC_WriteTimeCounter>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d007      	beq.n	8002a72 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2204      	movs	r2, #4
 8002a66:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e02f      	b.n	8002ad2 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 0205 	bic.w	r2, r2, #5
 8002a80:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 fac3 	bl	800300e <RTC_ReadAlarmCounter>
 8002a88:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a90:	d018      	beq.n	8002ac4 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d214      	bcs.n	8002ac4 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002aa0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002aa4:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002aa6:	6939      	ldr	r1, [r7, #16]
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f000 fac9 	bl	8003040 <RTC_WriteAlarmCounter>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d007      	beq.n	8002ac4 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2204      	movs	r2, #4
 8002ab8:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e006      	b.n	8002ad2 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
  }
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	371c      	adds	r7, #28
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd90      	pop	{r4, r7, pc}
	...

08002adc <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b088      	sub	sp, #32
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61bb      	str	r3, [r7, #24]
 8002aec:	2300      	movs	r3, #0
 8002aee:	61fb      	str	r3, [r7, #28]
 8002af0:	2300      	movs	r3, #0
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	2300      	movs	r3, #0
 8002af6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d002      	beq.n	8002b04 <HAL_RTC_GetTime+0x28>
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e0b5      	b.n	8002c74 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e0ac      	b.n	8002c74 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f000 fa20 	bl	8002f60 <RTC_ReadTimeCounter>
 8002b20:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	4a55      	ldr	r2, [pc, #340]	; (8002c7c <HAL_RTC_GetTime+0x1a0>)
 8002b26:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2a:	0adb      	lsrs	r3, r3, #11
 8002b2c:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4b52      	ldr	r3, [pc, #328]	; (8002c7c <HAL_RTC_GetTime+0x1a0>)
 8002b32:	fba3 1302 	umull	r1, r3, r3, r2
 8002b36:	0adb      	lsrs	r3, r3, #11
 8002b38:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002b3c:	fb01 f303 	mul.w	r3, r1, r3
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	4a4f      	ldr	r2, [pc, #316]	; (8002c80 <HAL_RTC_GetTime+0x1a4>)
 8002b44:	fba2 2303 	umull	r2, r3, r2, r3
 8002b48:	095b      	lsrs	r3, r3, #5
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	4a4a      	ldr	r2, [pc, #296]	; (8002c7c <HAL_RTC_GetTime+0x1a0>)
 8002b54:	fba2 1203 	umull	r1, r2, r2, r3
 8002b58:	0ad2      	lsrs	r2, r2, #11
 8002b5a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002b5e:	fb01 f202 	mul.w	r2, r1, r2
 8002b62:	1a9a      	subs	r2, r3, r2
 8002b64:	4b46      	ldr	r3, [pc, #280]	; (8002c80 <HAL_RTC_GetTime+0x1a4>)
 8002b66:	fba3 1302 	umull	r1, r3, r3, r2
 8002b6a:	0959      	lsrs	r1, r3, #5
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	011b      	lsls	r3, r3, #4
 8002b70:	1a5b      	subs	r3, r3, r1
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	1ad1      	subs	r1, r2, r3
 8002b76:	b2ca      	uxtb	r2, r1
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	2b17      	cmp	r3, #23
 8002b80:	d955      	bls.n	8002c2e <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	4a3f      	ldr	r2, [pc, #252]	; (8002c84 <HAL_RTC_GetTime+0x1a8>)
 8002b86:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8a:	091b      	lsrs	r3, r3, #4
 8002b8c:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8002b8e:	6939      	ldr	r1, [r7, #16]
 8002b90:	4b3c      	ldr	r3, [pc, #240]	; (8002c84 <HAL_RTC_GetTime+0x1a8>)
 8002b92:	fba3 2301 	umull	r2, r3, r3, r1
 8002b96:	091a      	lsrs	r2, r3, #4
 8002b98:	4613      	mov	r3, r2
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	4413      	add	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	1aca      	subs	r2, r1, r3
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 fa30 	bl	800300e <RTC_ReadAlarmCounter>
 8002bae:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bb6:	d008      	beq.n	8002bca <HAL_RTC_GetTime+0xee>
 8002bb8:	69fa      	ldr	r2, [r7, #28]
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d904      	bls.n	8002bca <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8002bc0:	69fa      	ldr	r2, [r7, #28]
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	61fb      	str	r3, [r7, #28]
 8002bc8:	e002      	b.n	8002bd0 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8002bca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bce:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	4a2d      	ldr	r2, [pc, #180]	; (8002c88 <HAL_RTC_GetTime+0x1ac>)
 8002bd4:	fb02 f303 	mul.w	r3, r2, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002bde:	69b9      	ldr	r1, [r7, #24]
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f000 f9ed 	bl	8002fc0 <RTC_WriteTimeCounter>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e041      	b.n	8002c74 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bf6:	d00c      	beq.n	8002c12 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8002bf8:	69fa      	ldr	r2, [r7, #28]
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002c00:	69f9      	ldr	r1, [r7, #28]
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 fa1c 	bl	8003040 <RTC_WriteAlarmCounter>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00a      	beq.n	8002c24 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e030      	b.n	8002c74 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002c12:	69f9      	ldr	r1, [r7, #28]
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f000 fa13 	bl	8003040 <RTC_WriteAlarmCounter>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e027      	b.n	8002c74 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8002c24:	6979      	ldr	r1, [r7, #20]
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f000 fabb 	bl	80031a2 <RTC_DateUpdate>
 8002c2c:	e003      	b.n	8002c36 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d01a      	beq.n	8002c72 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f000 fa74 	bl	800312e <RTC_ByteToBcd2>
 8002c46:	4603      	mov	r3, r0
 8002c48:	461a      	mov	r2, r3
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	785b      	ldrb	r3, [r3, #1]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 fa6b 	bl	800312e <RTC_ByteToBcd2>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	789b      	ldrb	r3, [r3, #2]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 fa62 	bl	800312e <RTC_ByteToBcd2>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3720      	adds	r7, #32
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	91a2b3c5 	.word	0x91a2b3c5
 8002c80:	88888889 	.word	0x88888889
 8002c84:	aaaaaaab 	.word	0xaaaaaaab
 8002c88:	00015180 	.word	0x00015180

08002c8c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	61fb      	str	r3, [r7, #28]
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	61bb      	str	r3, [r7, #24]
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d002      	beq.n	8002cb0 <HAL_RTC_SetDate+0x24>
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e097      	b.n	8002de4 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	7c1b      	ldrb	r3, [r3, #16]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d101      	bne.n	8002cc0 <HAL_RTC_SetDate+0x34>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e091      	b.n	8002de4 <HAL_RTC_SetDate+0x158>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2202      	movs	r2, #2
 8002cca:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10c      	bne.n	8002cec <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	78da      	ldrb	r2, [r3, #3]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	785a      	ldrb	r2, [r3, #1]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	789a      	ldrb	r2, [r3, #2]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	739a      	strb	r2, [r3, #14]
 8002cea:	e01a      	b.n	8002d22 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	78db      	ldrb	r3, [r3, #3]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f000 fa39 	bl	8003168 <RTC_Bcd2ToByte>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	785b      	ldrb	r3, [r3, #1]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 fa30 	bl	8003168 <RTC_Bcd2ToByte>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	789b      	ldrb	r3, [r3, #2]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f000 fa27 	bl	8003168 <RTC_Bcd2ToByte>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	7bdb      	ldrb	r3, [r3, #15]
 8002d26:	4618      	mov	r0, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	7b59      	ldrb	r1, [r3, #13]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	7b9b      	ldrb	r3, [r3, #14]
 8002d30:	461a      	mov	r2, r3
 8002d32:	f000 fb11 	bl	8003358 <RTC_WeekDayNum>
 8002d36:	4603      	mov	r3, r0
 8002d38:	461a      	mov	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	7b1a      	ldrb	r2, [r3, #12]
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f000 f90a 	bl	8002f60 <RTC_ReadTimeCounter>
 8002d4c:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	4a26      	ldr	r2, [pc, #152]	; (8002dec <HAL_RTC_SetDate+0x160>)
 8002d52:	fba2 2303 	umull	r2, r3, r2, r3
 8002d56:	0adb      	lsrs	r3, r3, #11
 8002d58:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	2b18      	cmp	r3, #24
 8002d5e:	d93a      	bls.n	8002dd6 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	4a23      	ldr	r2, [pc, #140]	; (8002df0 <HAL_RTC_SetDate+0x164>)
 8002d64:	fba2 2303 	umull	r2, r3, r2, r3
 8002d68:	091b      	lsrs	r3, r3, #4
 8002d6a:	4a22      	ldr	r2, [pc, #136]	; (8002df4 <HAL_RTC_SetDate+0x168>)
 8002d6c:	fb02 f303 	mul.w	r3, r2, r3
 8002d70:	69fa      	ldr	r2, [r7, #28]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002d76:	69f9      	ldr	r1, [r7, #28]
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f000 f921 	bl	8002fc0 <RTC_WriteTimeCounter>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d007      	beq.n	8002d94 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2204      	movs	r2, #4
 8002d88:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e027      	b.n	8002de4 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f000 f93a 	bl	800300e <RTC_ReadAlarmCounter>
 8002d9a:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002da2:	d018      	beq.n	8002dd6 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d214      	bcs.n	8002dd6 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002db2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002db6:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002db8:	69b9      	ldr	r1, [r7, #24]
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f000 f940 	bl	8003040 <RTC_WriteAlarmCounter>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d007      	beq.n	8002dd6 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2204      	movs	r2, #4
 8002dca:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e006      	b.n	8002de4 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3720      	adds	r7, #32
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	91a2b3c5 	.word	0x91a2b3c5
 8002df0:	aaaaaaab 	.word	0xaaaaaaab
 8002df4:	00015180 	.word	0x00015180

08002df8 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8002e04:	f107 0314 	add.w	r3, r7, #20
 8002e08:	2100      	movs	r1, #0
 8002e0a:	460a      	mov	r2, r1
 8002e0c:	801a      	strh	r2, [r3, #0]
 8002e0e:	460a      	mov	r2, r1
 8002e10:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d002      	beq.n	8002e1e <HAL_RTC_GetDate+0x26>
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e03a      	b.n	8002e98 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8002e22:	f107 0314 	add.w	r3, r7, #20
 8002e26:	2200      	movs	r2, #0
 8002e28:	4619      	mov	r1, r3
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f7ff fe56 	bl	8002adc <HAL_RTC_GetTime>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e02e      	b.n	8002e98 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	7b1a      	ldrb	r2, [r3, #12]
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	7bda      	ldrb	r2, [r3, #15]
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	7b5a      	ldrb	r2, [r3, #13]
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	7b9a      	ldrb	r2, [r3, #14]
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d01a      	beq.n	8002e96 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	78db      	ldrb	r3, [r3, #3]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f000 f962 	bl	800312e <RTC_ByteToBcd2>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	785b      	ldrb	r3, [r3, #1]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f000 f959 	bl	800312e <RTC_ByteToBcd2>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	461a      	mov	r2, r3
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	789b      	ldrb	r3, [r3, #2]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f000 f950 	bl	800312e <RTC_ByteToBcd2>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	461a      	mov	r2, r3
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3718      	adds	r7, #24
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d011      	beq.n	8002eda <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00a      	beq.n	8002eda <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f815 	bl	8002ef4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 0202 	bic.w	r2, r2, #2
 8002ed8:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002eda:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <HAL_RTC_AlarmIRQHandler+0x50>)
 8002edc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ee0:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	745a      	strb	r2, [r3, #17]
}
 8002ee8:	bf00      	nop
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40010400 	.word	0x40010400

08002ef4 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bc80      	pop	{r7}
 8002f04:	4770      	bx	lr

08002f06 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b084      	sub	sp, #16
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e01d      	b.n	8002f58 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 0208 	bic.w	r2, r2, #8
 8002f2a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002f2c:	f7fe fc56 	bl	80017dc <HAL_GetTick>
 8002f30:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002f32:	e009      	b.n	8002f48 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002f34:	f7fe fc52 	bl	80017dc <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f42:	d901      	bls.n	8002f48 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e007      	b.n	8002f58 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0ee      	beq.n	8002f34 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b087      	sub	sp, #28
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	827b      	strh	r3, [r7, #18]
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	823b      	strh	r3, [r7, #16]
 8002f70:	2300      	movs	r3, #0
 8002f72:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8002f90:	8a7a      	ldrh	r2, [r7, #18]
 8002f92:	8a3b      	ldrh	r3, [r7, #16]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d008      	beq.n	8002faa <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8002f98:	8a3b      	ldrh	r3, [r7, #16]
 8002f9a:	041a      	lsls	r2, r3, #16
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	617b      	str	r3, [r7, #20]
 8002fa8:	e004      	b.n	8002fb4 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8002faa:	8a7b      	ldrh	r3, [r7, #18]
 8002fac:	041a      	lsls	r2, r3, #16
 8002fae:	89fb      	ldrh	r3, [r7, #14]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8002fb4:	697b      	ldr	r3, [r7, #20]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	371c      	adds	r7, #28
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr

08002fc0 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f85d 	bl	800308e <RTC_EnterInitMode>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d002      	beq.n	8002fe0 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	73fb      	strb	r3, [r7, #15]
 8002fde:	e011      	b.n	8003004 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	0c12      	lsrs	r2, r2, #16
 8002fe8:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	b292      	uxth	r2, r2
 8002ff2:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 f872 	bl	80030de <RTC_ExitInitMode>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003004:	7bfb      	ldrb	r3, [r7, #15]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800300e:	b480      	push	{r7}
 8003010:	b085      	sub	sp, #20
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8003016:	2300      	movs	r3, #0
 8003018:	81fb      	strh	r3, [r7, #14]
 800301a:	2300      	movs	r3, #0
 800301c:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302c:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800302e:	89fb      	ldrh	r3, [r7, #14]
 8003030:	041a      	lsls	r2, r3, #16
 8003032:	89bb      	ldrh	r3, [r7, #12]
 8003034:	4313      	orrs	r3, r2
}
 8003036:	4618      	mov	r0, r3
 8003038:	3714      	adds	r7, #20
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr

08003040 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800304a:	2300      	movs	r3, #0
 800304c:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f81d 	bl	800308e <RTC_EnterInitMode>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d002      	beq.n	8003060 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	73fb      	strb	r3, [r7, #15]
 800305e:	e011      	b.n	8003084 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	0c12      	lsrs	r2, r2, #16
 8003068:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	b292      	uxth	r2, r2
 8003072:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f832 	bl	80030de <RTC_ExitInitMode>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003084:	7bfb      	ldrb	r3, [r7, #15]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b084      	sub	sp, #16
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003096:	2300      	movs	r3, #0
 8003098:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800309a:	f7fe fb9f 	bl	80017dc <HAL_GetTick>
 800309e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80030a0:	e009      	b.n	80030b6 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80030a2:	f7fe fb9b 	bl	80017dc <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030b0:	d901      	bls.n	80030b6 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e00f      	b.n	80030d6 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f003 0320 	and.w	r3, r3, #32
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0ee      	beq.n	80030a2 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	685a      	ldr	r2, [r3, #4]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f042 0210 	orr.w	r2, r2, #16
 80030d2:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b084      	sub	sp, #16
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030e6:	2300      	movs	r3, #0
 80030e8:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 0210 	bic.w	r2, r2, #16
 80030f8:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80030fa:	f7fe fb6f 	bl	80017dc <HAL_GetTick>
 80030fe:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003100:	e009      	b.n	8003116 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003102:	f7fe fb6b 	bl	80017dc <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003110:	d901      	bls.n	8003116 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e007      	b.n	8003126 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f003 0320 	and.w	r3, r3, #32
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0ee      	beq.n	8003102 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800312e:	b480      	push	{r7}
 8003130:	b085      	sub	sp, #20
 8003132:	af00      	add	r7, sp, #0
 8003134:	4603      	mov	r3, r0
 8003136:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003138:	2300      	movs	r3, #0
 800313a:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800313c:	e005      	b.n	800314a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	3301      	adds	r3, #1
 8003142:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003144:	79fb      	ldrb	r3, [r7, #7]
 8003146:	3b0a      	subs	r3, #10
 8003148:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 800314a:	79fb      	ldrb	r3, [r7, #7]
 800314c:	2b09      	cmp	r3, #9
 800314e:	d8f6      	bhi.n	800313e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	b2db      	uxtb	r3, r3
 8003154:	011b      	lsls	r3, r3, #4
 8003156:	b2da      	uxtb	r2, r3
 8003158:	79fb      	ldrb	r3, [r7, #7]
 800315a:	4313      	orrs	r3, r2
 800315c:	b2db      	uxtb	r3, r3
}
 800315e:	4618      	mov	r0, r3
 8003160:	3714      	adds	r7, #20
 8003162:	46bd      	mov	sp, r7
 8003164:	bc80      	pop	{r7}
 8003166:	4770      	bx	lr

08003168 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	4603      	mov	r3, r0
 8003170:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003172:	2300      	movs	r3, #0
 8003174:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003176:	79fb      	ldrb	r3, [r7, #7]
 8003178:	091b      	lsrs	r3, r3, #4
 800317a:	b2db      	uxtb	r3, r3
 800317c:	461a      	mov	r2, r3
 800317e:	4613      	mov	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003188:	79fb      	ldrb	r3, [r7, #7]
 800318a:	f003 030f 	and.w	r3, r3, #15
 800318e:	b2da      	uxtb	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	b2db      	uxtb	r3, r3
 8003194:	4413      	add	r3, r2
 8003196:	b2db      	uxtb	r3, r3
}
 8003198:	4618      	mov	r0, r3
 800319a:	3714      	adds	r7, #20
 800319c:	46bd      	mov	sp, r7
 800319e:	bc80      	pop	{r7}
 80031a0:	4770      	bx	lr

080031a2 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b086      	sub	sp, #24
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
 80031aa:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	617b      	str	r3, [r7, #20]
 80031b0:	2300      	movs	r3, #0
 80031b2:	613b      	str	r3, [r7, #16]
 80031b4:	2300      	movs	r3, #0
 80031b6:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80031b8:	2300      	movs	r3, #0
 80031ba:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	7bdb      	ldrb	r3, [r3, #15]
 80031c0:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	7b5b      	ldrb	r3, [r3, #13]
 80031c6:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	7b9b      	ldrb	r3, [r3, #14]
 80031cc:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80031ce:	2300      	movs	r3, #0
 80031d0:	60bb      	str	r3, [r7, #8]
 80031d2:	e06f      	b.n	80032b4 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d011      	beq.n	80031fe <RTC_DateUpdate+0x5c>
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	2b03      	cmp	r3, #3
 80031de:	d00e      	beq.n	80031fe <RTC_DateUpdate+0x5c>
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	2b05      	cmp	r3, #5
 80031e4:	d00b      	beq.n	80031fe <RTC_DateUpdate+0x5c>
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	2b07      	cmp	r3, #7
 80031ea:	d008      	beq.n	80031fe <RTC_DateUpdate+0x5c>
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	2b08      	cmp	r3, #8
 80031f0:	d005      	beq.n	80031fe <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	2b0a      	cmp	r3, #10
 80031f6:	d002      	beq.n	80031fe <RTC_DateUpdate+0x5c>
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	2b0c      	cmp	r3, #12
 80031fc:	d117      	bne.n	800322e <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2b1e      	cmp	r3, #30
 8003202:	d803      	bhi.n	800320c <RTC_DateUpdate+0x6a>
      {
        day++;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	3301      	adds	r3, #1
 8003208:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800320a:	e050      	b.n	80032ae <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	2b0c      	cmp	r3, #12
 8003210:	d005      	beq.n	800321e <RTC_DateUpdate+0x7c>
        {
          month++;
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	3301      	adds	r3, #1
 8003216:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003218:	2301      	movs	r3, #1
 800321a:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800321c:	e047      	b.n	80032ae <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 800321e:	2301      	movs	r3, #1
 8003220:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003222:	2301      	movs	r3, #1
 8003224:	60fb      	str	r3, [r7, #12]
          year++;
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	3301      	adds	r3, #1
 800322a:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800322c:	e03f      	b.n	80032ae <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	2b04      	cmp	r3, #4
 8003232:	d008      	beq.n	8003246 <RTC_DateUpdate+0xa4>
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	2b06      	cmp	r3, #6
 8003238:	d005      	beq.n	8003246 <RTC_DateUpdate+0xa4>
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	2b09      	cmp	r3, #9
 800323e:	d002      	beq.n	8003246 <RTC_DateUpdate+0xa4>
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	2b0b      	cmp	r3, #11
 8003244:	d10c      	bne.n	8003260 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2b1d      	cmp	r3, #29
 800324a:	d803      	bhi.n	8003254 <RTC_DateUpdate+0xb2>
      {
        day++;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	3301      	adds	r3, #1
 8003250:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003252:	e02c      	b.n	80032ae <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	3301      	adds	r3, #1
 8003258:	613b      	str	r3, [r7, #16]
        day = 1U;
 800325a:	2301      	movs	r3, #1
 800325c:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800325e:	e026      	b.n	80032ae <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	2b02      	cmp	r3, #2
 8003264:	d123      	bne.n	80032ae <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2b1b      	cmp	r3, #27
 800326a:	d803      	bhi.n	8003274 <RTC_DateUpdate+0xd2>
      {
        day++;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	3301      	adds	r3, #1
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	e01c      	b.n	80032ae <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2b1c      	cmp	r3, #28
 8003278:	d111      	bne.n	800329e <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	b29b      	uxth	r3, r3
 800327e:	4618      	mov	r0, r3
 8003280:	f000 f838 	bl	80032f4 <RTC_IsLeapYear>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <RTC_DateUpdate+0xf0>
        {
          day++;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	3301      	adds	r3, #1
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	e00d      	b.n	80032ae <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	3301      	adds	r3, #1
 8003296:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003298:	2301      	movs	r3, #1
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	e007      	b.n	80032ae <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2b1d      	cmp	r3, #29
 80032a2:	d104      	bne.n	80032ae <RTC_DateUpdate+0x10c>
      {
        month++;
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	3301      	adds	r3, #1
 80032a8:	613b      	str	r3, [r7, #16]
        day = 1U;
 80032aa:	2301      	movs	r3, #1
 80032ac:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	3301      	adds	r3, #1
 80032b2:	60bb      	str	r3, [r7, #8]
 80032b4:	68ba      	ldr	r2, [r7, #8]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d38b      	bcc.n	80031d4 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	b2da      	uxtb	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	b2d2      	uxtb	r2, r2
 80032dc:	4619      	mov	r1, r3
 80032de:	6978      	ldr	r0, [r7, #20]
 80032e0:	f000 f83a 	bl	8003358 <RTC_WeekDayNum>
 80032e4:	4603      	mov	r3, r0
 80032e6:	461a      	mov	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	731a      	strb	r2, [r3, #12]
}
 80032ec:	bf00      	nop
 80032ee:	3718      	adds	r7, #24
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	4603      	mov	r3, r0
 80032fc:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80032fe:	88fb      	ldrh	r3, [r7, #6]
 8003300:	f003 0303 	and.w	r3, r3, #3
 8003304:	b29b      	uxth	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800330a:	2300      	movs	r3, #0
 800330c:	e01d      	b.n	800334a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800330e:	88fb      	ldrh	r3, [r7, #6]
 8003310:	4a10      	ldr	r2, [pc, #64]	; (8003354 <RTC_IsLeapYear+0x60>)
 8003312:	fba2 1203 	umull	r1, r2, r2, r3
 8003316:	0952      	lsrs	r2, r2, #5
 8003318:	2164      	movs	r1, #100	; 0x64
 800331a:	fb01 f202 	mul.w	r2, r1, r2
 800331e:	1a9b      	subs	r3, r3, r2
 8003320:	b29b      	uxth	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8003326:	2301      	movs	r3, #1
 8003328:	e00f      	b.n	800334a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800332a:	88fb      	ldrh	r3, [r7, #6]
 800332c:	4a09      	ldr	r2, [pc, #36]	; (8003354 <RTC_IsLeapYear+0x60>)
 800332e:	fba2 1203 	umull	r1, r2, r2, r3
 8003332:	09d2      	lsrs	r2, r2, #7
 8003334:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003338:	fb01 f202 	mul.w	r2, r1, r2
 800333c:	1a9b      	subs	r3, r3, r2
 800333e:	b29b      	uxth	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	d101      	bne.n	8003348 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8003344:	2301      	movs	r3, #1
 8003346:	e000      	b.n	800334a <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8003348:	2300      	movs	r3, #0
  }
}
 800334a:	4618      	mov	r0, r3
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr
 8003354:	51eb851f 	.word	0x51eb851f

08003358 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	460b      	mov	r3, r1
 8003362:	70fb      	strb	r3, [r7, #3]
 8003364:	4613      	mov	r3, r2
 8003366:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	60bb      	str	r3, [r7, #8]
 800336c:	2300      	movs	r3, #0
 800336e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003376:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003378:	78fb      	ldrb	r3, [r7, #3]
 800337a:	2b02      	cmp	r3, #2
 800337c:	d82d      	bhi.n	80033da <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800337e:	78fa      	ldrb	r2, [r7, #3]
 8003380:	4613      	mov	r3, r2
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	4413      	add	r3, r2
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	1a9b      	subs	r3, r3, r2
 800338a:	4a2c      	ldr	r2, [pc, #176]	; (800343c <RTC_WeekDayNum+0xe4>)
 800338c:	fba2 2303 	umull	r2, r3, r2, r3
 8003390:	085a      	lsrs	r2, r3, #1
 8003392:	78bb      	ldrb	r3, [r7, #2]
 8003394:	441a      	add	r2, r3
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	441a      	add	r2, r3
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	3b01      	subs	r3, #1
 800339e:	089b      	lsrs	r3, r3, #2
 80033a0:	441a      	add	r2, r3
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	3b01      	subs	r3, #1
 80033a6:	4926      	ldr	r1, [pc, #152]	; (8003440 <RTC_WeekDayNum+0xe8>)
 80033a8:	fba1 1303 	umull	r1, r3, r1, r3
 80033ac:	095b      	lsrs	r3, r3, #5
 80033ae:	1ad2      	subs	r2, r2, r3
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	3b01      	subs	r3, #1
 80033b4:	4922      	ldr	r1, [pc, #136]	; (8003440 <RTC_WeekDayNum+0xe8>)
 80033b6:	fba1 1303 	umull	r1, r3, r1, r3
 80033ba:	09db      	lsrs	r3, r3, #7
 80033bc:	4413      	add	r3, r2
 80033be:	1d1a      	adds	r2, r3, #4
 80033c0:	4b20      	ldr	r3, [pc, #128]	; (8003444 <RTC_WeekDayNum+0xec>)
 80033c2:	fba3 1302 	umull	r1, r3, r3, r2
 80033c6:	1ad1      	subs	r1, r2, r3
 80033c8:	0849      	lsrs	r1, r1, #1
 80033ca:	440b      	add	r3, r1
 80033cc:	0899      	lsrs	r1, r3, #2
 80033ce:	460b      	mov	r3, r1
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	1a5b      	subs	r3, r3, r1
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	e029      	b.n	800342e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80033da:	78fa      	ldrb	r2, [r7, #3]
 80033dc:	4613      	mov	r3, r2
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	4413      	add	r3, r2
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	1a9b      	subs	r3, r3, r2
 80033e6:	4a15      	ldr	r2, [pc, #84]	; (800343c <RTC_WeekDayNum+0xe4>)
 80033e8:	fba2 2303 	umull	r2, r3, r2, r3
 80033ec:	085a      	lsrs	r2, r3, #1
 80033ee:	78bb      	ldrb	r3, [r7, #2]
 80033f0:	441a      	add	r2, r3
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	441a      	add	r2, r3
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	089b      	lsrs	r3, r3, #2
 80033fa:	441a      	add	r2, r3
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	4910      	ldr	r1, [pc, #64]	; (8003440 <RTC_WeekDayNum+0xe8>)
 8003400:	fba1 1303 	umull	r1, r3, r1, r3
 8003404:	095b      	lsrs	r3, r3, #5
 8003406:	1ad2      	subs	r2, r2, r3
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	490d      	ldr	r1, [pc, #52]	; (8003440 <RTC_WeekDayNum+0xe8>)
 800340c:	fba1 1303 	umull	r1, r3, r1, r3
 8003410:	09db      	lsrs	r3, r3, #7
 8003412:	4413      	add	r3, r2
 8003414:	1c9a      	adds	r2, r3, #2
 8003416:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <RTC_WeekDayNum+0xec>)
 8003418:	fba3 1302 	umull	r1, r3, r3, r2
 800341c:	1ad1      	subs	r1, r2, r3
 800341e:	0849      	lsrs	r1, r1, #1
 8003420:	440b      	add	r3, r1
 8003422:	0899      	lsrs	r1, r3, #2
 8003424:	460b      	mov	r3, r1
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	1a5b      	subs	r3, r3, r1
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	b2db      	uxtb	r3, r3
}
 8003432:	4618      	mov	r0, r3
 8003434:	3714      	adds	r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	bc80      	pop	{r7}
 800343a:	4770      	bx	lr
 800343c:	38e38e39 	.word	0x38e38e39
 8003440:	51eb851f 	.word	0x51eb851f
 8003444:	24924925 	.word	0x24924925

08003448 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e041      	b.n	80034de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d106      	bne.n	8003474 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f839 	bl	80034e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2202      	movs	r2, #2
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3304      	adds	r3, #4
 8003484:	4619      	mov	r1, r3
 8003486:	4610      	mov	r0, r2
 8003488:	f000 f9b4 	bl	80037f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b083      	sub	sp, #12
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80034ee:	bf00      	nop
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bc80      	pop	{r7}
 80034f6:	4770      	bx	lr

080034f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b01      	cmp	r3, #1
 800350a:	d001      	beq.n	8003510 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e03a      	b.n	8003586 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2202      	movs	r2, #2
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68da      	ldr	r2, [r3, #12]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f042 0201 	orr.w	r2, r2, #1
 8003526:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a18      	ldr	r2, [pc, #96]	; (8003590 <HAL_TIM_Base_Start_IT+0x98>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d00e      	beq.n	8003550 <HAL_TIM_Base_Start_IT+0x58>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800353a:	d009      	beq.n	8003550 <HAL_TIM_Base_Start_IT+0x58>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a14      	ldr	r2, [pc, #80]	; (8003594 <HAL_TIM_Base_Start_IT+0x9c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d004      	beq.n	8003550 <HAL_TIM_Base_Start_IT+0x58>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a13      	ldr	r2, [pc, #76]	; (8003598 <HAL_TIM_Base_Start_IT+0xa0>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d111      	bne.n	8003574 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2b06      	cmp	r3, #6
 8003560:	d010      	beq.n	8003584 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f042 0201 	orr.w	r2, r2, #1
 8003570:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003572:	e007      	b.n	8003584 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0201 	orr.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	bc80      	pop	{r7}
 800358e:	4770      	bx	lr
 8003590:	40012c00 	.word	0x40012c00
 8003594:	40000400 	.word	0x40000400
 8003598:	40000800 	.word	0x40000800

0800359c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d122      	bne.n	80035f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d11b      	bne.n	80035f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f06f 0202 	mvn.w	r2, #2
 80035c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	f003 0303 	and.w	r3, r3, #3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f8ed 	bl	80037be <HAL_TIM_IC_CaptureCallback>
 80035e4:	e005      	b.n	80035f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f8e0 	bl	80037ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 f8ef 	bl	80037d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	f003 0304 	and.w	r3, r3, #4
 8003602:	2b04      	cmp	r3, #4
 8003604:	d122      	bne.n	800364c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	2b04      	cmp	r3, #4
 8003612:	d11b      	bne.n	800364c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f06f 0204 	mvn.w	r2, #4
 800361c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2202      	movs	r2, #2
 8003622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f8c3 	bl	80037be <HAL_TIM_IC_CaptureCallback>
 8003638:	e005      	b.n	8003646 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f8b6 	bl	80037ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f8c5 	bl	80037d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	f003 0308 	and.w	r3, r3, #8
 8003656:	2b08      	cmp	r3, #8
 8003658:	d122      	bne.n	80036a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f003 0308 	and.w	r3, r3, #8
 8003664:	2b08      	cmp	r3, #8
 8003666:	d11b      	bne.n	80036a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f06f 0208 	mvn.w	r2, #8
 8003670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2204      	movs	r2, #4
 8003676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	f003 0303 	and.w	r3, r3, #3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f899 	bl	80037be <HAL_TIM_IC_CaptureCallback>
 800368c:	e005      	b.n	800369a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f88c 	bl	80037ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f89b 	bl	80037d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	f003 0310 	and.w	r3, r3, #16
 80036aa:	2b10      	cmp	r3, #16
 80036ac:	d122      	bne.n	80036f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f003 0310 	and.w	r3, r3, #16
 80036b8:	2b10      	cmp	r3, #16
 80036ba:	d11b      	bne.n	80036f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f06f 0210 	mvn.w	r2, #16
 80036c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2208      	movs	r2, #8
 80036ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f86f 	bl	80037be <HAL_TIM_IC_CaptureCallback>
 80036e0:	e005      	b.n	80036ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f862 	bl	80037ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f871 	bl	80037d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d10e      	bne.n	8003720 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b01      	cmp	r3, #1
 800370e:	d107      	bne.n	8003720 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f06f 0201 	mvn.w	r2, #1
 8003718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7fd fdf6 	bl	800130c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800372a:	2b80      	cmp	r3, #128	; 0x80
 800372c:	d10e      	bne.n	800374c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003738:	2b80      	cmp	r3, #128	; 0x80
 800373a:	d107      	bne.n	800374c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f8bf 	bl	80038ca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003756:	2b40      	cmp	r3, #64	; 0x40
 8003758:	d10e      	bne.n	8003778 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003764:	2b40      	cmp	r3, #64	; 0x40
 8003766:	d107      	bne.n	8003778 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f835 	bl	80037e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f003 0320 	and.w	r3, r3, #32
 8003782:	2b20      	cmp	r3, #32
 8003784:	d10e      	bne.n	80037a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	f003 0320 	and.w	r3, r3, #32
 8003790:	2b20      	cmp	r3, #32
 8003792:	d107      	bne.n	80037a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f06f 0220 	mvn.w	r2, #32
 800379c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f88a 	bl	80038b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037a4:	bf00      	nop
 80037a6:	3708      	adds	r7, #8
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bc80      	pop	{r7}
 80037bc:	4770      	bx	lr

080037be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037be:	b480      	push	{r7}
 80037c0:	b083      	sub	sp, #12
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037c6:	bf00      	nop
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bc80      	pop	{r7}
 80037ce:	4770      	bx	lr

080037d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	bc80      	pop	{r7}
 80037e0:	4770      	bx	lr

080037e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bc80      	pop	{r7}
 80037f2:	4770      	bx	lr

080037f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a29      	ldr	r2, [pc, #164]	; (80038ac <TIM_Base_SetConfig+0xb8>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d00b      	beq.n	8003824 <TIM_Base_SetConfig+0x30>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003812:	d007      	beq.n	8003824 <TIM_Base_SetConfig+0x30>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a26      	ldr	r2, [pc, #152]	; (80038b0 <TIM_Base_SetConfig+0xbc>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d003      	beq.n	8003824 <TIM_Base_SetConfig+0x30>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a25      	ldr	r2, [pc, #148]	; (80038b4 <TIM_Base_SetConfig+0xc0>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d108      	bne.n	8003836 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800382a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	4313      	orrs	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a1c      	ldr	r2, [pc, #112]	; (80038ac <TIM_Base_SetConfig+0xb8>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d00b      	beq.n	8003856 <TIM_Base_SetConfig+0x62>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003844:	d007      	beq.n	8003856 <TIM_Base_SetConfig+0x62>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a19      	ldr	r2, [pc, #100]	; (80038b0 <TIM_Base_SetConfig+0xbc>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d003      	beq.n	8003856 <TIM_Base_SetConfig+0x62>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a18      	ldr	r2, [pc, #96]	; (80038b4 <TIM_Base_SetConfig+0xc0>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d108      	bne.n	8003868 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800385c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	4313      	orrs	r3, r2
 8003866:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	4313      	orrs	r3, r2
 8003874:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a07      	ldr	r2, [pc, #28]	; (80038ac <TIM_Base_SetConfig+0xb8>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d103      	bne.n	800389c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	691a      	ldr	r2, [r3, #16]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	615a      	str	r2, [r3, #20]
}
 80038a2:	bf00      	nop
 80038a4:	3714      	adds	r7, #20
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bc80      	pop	{r7}
 80038aa:	4770      	bx	lr
 80038ac:	40012c00 	.word	0x40012c00
 80038b0:	40000400 	.word	0x40000400
 80038b4:	40000800 	.word	0x40000800

080038b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bc80      	pop	{r7}
 80038c8:	4770      	bx	lr

080038ca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038d2:	bf00      	nop
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bc80      	pop	{r7}
 80038da:	4770      	bx	lr

080038dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e03f      	b.n	800396e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d106      	bne.n	8003908 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f7fd fd7e 	bl	8001404 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2224      	movs	r2, #36	; 0x24
 800390c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68da      	ldr	r2, [r3, #12]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800391e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 f905 	bl	8003b30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	691a      	ldr	r2, [r3, #16]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003934:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	695a      	ldr	r2, [r3, #20]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003944:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68da      	ldr	r2, [r3, #12]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003954:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2220      	movs	r2, #32
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b08a      	sub	sp, #40	; 0x28
 800397a:	af02      	add	r7, sp, #8
 800397c:	60f8      	str	r0, [r7, #12]
 800397e:	60b9      	str	r1, [r7, #8]
 8003980:	603b      	str	r3, [r7, #0]
 8003982:	4613      	mov	r3, r2
 8003984:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003986:	2300      	movs	r3, #0
 8003988:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b20      	cmp	r3, #32
 8003994:	d17c      	bne.n	8003a90 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d002      	beq.n	80039a2 <HAL_UART_Transmit+0x2c>
 800399c:	88fb      	ldrh	r3, [r7, #6]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e075      	b.n	8003a92 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d101      	bne.n	80039b4 <HAL_UART_Transmit+0x3e>
 80039b0:	2302      	movs	r3, #2
 80039b2:	e06e      	b.n	8003a92 <HAL_UART_Transmit+0x11c>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2221      	movs	r2, #33	; 0x21
 80039c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039ca:	f7fd ff07 	bl	80017dc <HAL_GetTick>
 80039ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	88fa      	ldrh	r2, [r7, #6]
 80039d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	88fa      	ldrh	r2, [r7, #6]
 80039da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039e4:	d108      	bne.n	80039f8 <HAL_UART_Transmit+0x82>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d104      	bne.n	80039f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80039ee:	2300      	movs	r3, #0
 80039f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	61bb      	str	r3, [r7, #24]
 80039f6:	e003      	b.n	8003a00 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039fc:	2300      	movs	r3, #0
 80039fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003a08:	e02a      	b.n	8003a60 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	2200      	movs	r2, #0
 8003a12:	2180      	movs	r1, #128	; 0x80
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 f840 	bl	8003a9a <UART_WaitOnFlagUntilTimeout>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e036      	b.n	8003a92 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10b      	bne.n	8003a42 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	3302      	adds	r3, #2
 8003a3e:	61bb      	str	r3, [r7, #24]
 8003a40:	e007      	b.n	8003a52 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	781a      	ldrb	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	3301      	adds	r3, #1
 8003a50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1cf      	bne.n	8003a0a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2200      	movs	r2, #0
 8003a72:	2140      	movs	r1, #64	; 0x40
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f000 f810 	bl	8003a9a <UART_WaitOnFlagUntilTimeout>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e006      	b.n	8003a92 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2220      	movs	r2, #32
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	e000      	b.n	8003a92 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003a90:	2302      	movs	r3, #2
  }
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3720      	adds	r7, #32
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b084      	sub	sp, #16
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	60f8      	str	r0, [r7, #12]
 8003aa2:	60b9      	str	r1, [r7, #8]
 8003aa4:	603b      	str	r3, [r7, #0]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aaa:	e02c      	b.n	8003b06 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ab2:	d028      	beq.n	8003b06 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d007      	beq.n	8003aca <UART_WaitOnFlagUntilTimeout+0x30>
 8003aba:	f7fd fe8f 	bl	80017dc <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d21d      	bcs.n	8003b06 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68da      	ldr	r2, [r3, #12]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ad8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	695a      	ldr	r2, [r3, #20]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 0201 	bic.w	r2, r2, #1
 8003ae8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2220      	movs	r2, #32
 8003aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2220      	movs	r2, #32
 8003af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e00f      	b.n	8003b26 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	68ba      	ldr	r2, [r7, #8]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	bf0c      	ite	eq
 8003b16:	2301      	moveq	r3, #1
 8003b18:	2300      	movne	r3, #0
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	79fb      	ldrb	r3, [r7, #7]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d0c3      	beq.n	8003aac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
	...

08003b30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68da      	ldr	r2, [r3, #12]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689a      	ldr	r2, [r3, #8]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	431a      	orrs	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003b6a:	f023 030c 	bic.w	r3, r3, #12
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6812      	ldr	r2, [r2, #0]
 8003b72:	68b9      	ldr	r1, [r7, #8]
 8003b74:	430b      	orrs	r3, r1
 8003b76:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699a      	ldr	r2, [r3, #24]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a2c      	ldr	r2, [pc, #176]	; (8003c44 <UART_SetConfig+0x114>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d103      	bne.n	8003ba0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b98:	f7fe fc9a 	bl	80024d0 <HAL_RCC_GetPCLK2Freq>
 8003b9c:	60f8      	str	r0, [r7, #12]
 8003b9e:	e002      	b.n	8003ba6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ba0:	f7fe fc82 	bl	80024a8 <HAL_RCC_GetPCLK1Freq>
 8003ba4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	4413      	add	r3, r2
 8003bae:	009a      	lsls	r2, r3, #2
 8003bb0:	441a      	add	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bbc:	4a22      	ldr	r2, [pc, #136]	; (8003c48 <UART_SetConfig+0x118>)
 8003bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc2:	095b      	lsrs	r3, r3, #5
 8003bc4:	0119      	lsls	r1, r3, #4
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	4413      	add	r3, r2
 8003bce:	009a      	lsls	r2, r3, #2
 8003bd0:	441a      	add	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bdc:	4b1a      	ldr	r3, [pc, #104]	; (8003c48 <UART_SetConfig+0x118>)
 8003bde:	fba3 0302 	umull	r0, r3, r3, r2
 8003be2:	095b      	lsrs	r3, r3, #5
 8003be4:	2064      	movs	r0, #100	; 0x64
 8003be6:	fb00 f303 	mul.w	r3, r0, r3
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	011b      	lsls	r3, r3, #4
 8003bee:	3332      	adds	r3, #50	; 0x32
 8003bf0:	4a15      	ldr	r2, [pc, #84]	; (8003c48 <UART_SetConfig+0x118>)
 8003bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf6:	095b      	lsrs	r3, r3, #5
 8003bf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bfc:	4419      	add	r1, r3
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	4613      	mov	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	009a      	lsls	r2, r3, #2
 8003c08:	441a      	add	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c14:	4b0c      	ldr	r3, [pc, #48]	; (8003c48 <UART_SetConfig+0x118>)
 8003c16:	fba3 0302 	umull	r0, r3, r3, r2
 8003c1a:	095b      	lsrs	r3, r3, #5
 8003c1c:	2064      	movs	r0, #100	; 0x64
 8003c1e:	fb00 f303 	mul.w	r3, r0, r3
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	011b      	lsls	r3, r3, #4
 8003c26:	3332      	adds	r3, #50	; 0x32
 8003c28:	4a07      	ldr	r2, [pc, #28]	; (8003c48 <UART_SetConfig+0x118>)
 8003c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2e:	095b      	lsrs	r3, r3, #5
 8003c30:	f003 020f 	and.w	r2, r3, #15
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	440a      	add	r2, r1
 8003c3a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c3c:	bf00      	nop
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	40013800 	.word	0x40013800
 8003c48:	51eb851f 	.word	0x51eb851f

08003c4c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	4603      	mov	r3, r0
 8003c54:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003c56:	2300      	movs	r3, #0
 8003c58:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003c5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c5e:	2b84      	cmp	r3, #132	; 0x84
 8003c60:	d005      	beq.n	8003c6e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003c62:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	4413      	add	r3, r2
 8003c6a:	3303      	adds	r3, #3
 8003c6c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3714      	adds	r7, #20
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bc80      	pop	{r7}
 8003c78:	4770      	bx	lr

08003c7a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003c7e:	f000 fef3 	bl	8004a68 <vTaskStartScheduler>
  
  return osOK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c8a:	b089      	sub	sp, #36	; 0x24
 8003c8c:	af04      	add	r7, sp, #16
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d020      	beq.n	8003cdc <osThreadCreate+0x54>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d01c      	beq.n	8003cdc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685c      	ldr	r4, [r3, #4]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681d      	ldr	r5, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	691e      	ldr	r6, [r3, #16]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7ff ffc9 	bl	8003c4c <makeFreeRtosPriority>
 8003cba:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003cc4:	9202      	str	r2, [sp, #8]
 8003cc6:	9301      	str	r3, [sp, #4]
 8003cc8:	9100      	str	r1, [sp, #0]
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	4632      	mov	r2, r6
 8003cce:	4629      	mov	r1, r5
 8003cd0:	4620      	mov	r0, r4
 8003cd2:	f000 fd27 	bl	8004724 <xTaskCreateStatic>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	60fb      	str	r3, [r7, #12]
 8003cda:	e01c      	b.n	8003d16 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685c      	ldr	r4, [r3, #4]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ce8:	b29e      	uxth	r6, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7ff ffab 	bl	8003c4c <makeFreeRtosPriority>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	f107 030c 	add.w	r3, r7, #12
 8003cfc:	9301      	str	r3, [sp, #4]
 8003cfe:	9200      	str	r2, [sp, #0]
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	4632      	mov	r2, r6
 8003d04:	4629      	mov	r1, r5
 8003d06:	4620      	mov	r0, r4
 8003d08:	f000 fd68 	bl	80047dc <xTaskCreate>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d001      	beq.n	8003d16 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003d12:	2300      	movs	r3, #0
 8003d14:	e000      	b.n	8003d18 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003d16:	68fb      	ldr	r3, [r7, #12]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3714      	adds	r7, #20
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d20 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8003d20:	b590      	push	{r4, r7, lr}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af02      	add	r7, sp, #8
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d011      	beq.n	8003d56 <osMessageCreate+0x36>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00d      	beq.n	8003d56 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6818      	ldr	r0, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6859      	ldr	r1, [r3, #4]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	689a      	ldr	r2, [r3, #8]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	2400      	movs	r4, #0
 8003d4c:	9400      	str	r4, [sp, #0]
 8003d4e:	f000 f927 	bl	8003fa0 <xQueueGenericCreateStatic>
 8003d52:	4603      	mov	r3, r0
 8003d54:	e008      	b.n	8003d68 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6818      	ldr	r0, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	4619      	mov	r1, r3
 8003d62:	f000 f994 	bl	800408e <xQueueGenericCreate>
 8003d66:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd90      	pop	{r4, r7, pc}

08003d70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f103 0208 	add.w	r2, r3, #8
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f103 0208 	add.w	r2, r3, #8
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f103 0208 	add.w	r2, r3, #8
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bc80      	pop	{r7}
 8003dac:	4770      	bx	lr

08003dae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003dae:	b480      	push	{r7}
 8003db0:	b083      	sub	sp, #12
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bc80      	pop	{r7}
 8003dc4:	4770      	bx	lr

08003dc6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b085      	sub	sp, #20
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
 8003dce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	1c5a      	adds	r2, r3, #1
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	601a      	str	r2, [r3, #0]
}
 8003e02:	bf00      	nop
 8003e04:	3714      	adds	r7, #20
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bc80      	pop	{r7}
 8003e0a:	4770      	bx	lr

08003e0c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e22:	d103      	bne.n	8003e2c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	e00c      	b.n	8003e46 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	3308      	adds	r3, #8
 8003e30:	60fb      	str	r3, [r7, #12]
 8003e32:	e002      	b.n	8003e3a <vListInsert+0x2e>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68ba      	ldr	r2, [r7, #8]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d2f6      	bcs.n	8003e34 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	1c5a      	adds	r2, r3, #1
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	601a      	str	r2, [r3, #0]
}
 8003e72:	bf00      	nop
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bc80      	pop	{r7}
 8003e7a:	4770      	bx	lr

08003e7c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6892      	ldr	r2, [r2, #8]
 8003e92:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	6852      	ldr	r2, [r2, #4]
 8003e9c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d103      	bne.n	8003eb0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689a      	ldr	r2, [r3, #8]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	1e5a      	subs	r2, r3, #1
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3714      	adds	r7, #20
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bc80      	pop	{r7}
 8003ecc:	4770      	bx	lr
	...

08003ed0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10a      	bne.n	8003efa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee8:	f383 8811 	msr	BASEPRI, r3
 8003eec:	f3bf 8f6f 	isb	sy
 8003ef0:	f3bf 8f4f 	dsb	sy
 8003ef4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003ef6:	bf00      	nop
 8003ef8:	e7fe      	b.n	8003ef8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003efa:	f001 fbcf 	bl	800569c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f06:	68f9      	ldr	r1, [r7, #12]
 8003f08:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f0a:	fb01 f303 	mul.w	r3, r1, r3
 8003f0e:	441a      	add	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	68f9      	ldr	r1, [r7, #12]
 8003f2e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f30:	fb01 f303 	mul.w	r3, r1, r3
 8003f34:	441a      	add	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	22ff      	movs	r2, #255	; 0xff
 8003f3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	22ff      	movs	r2, #255	; 0xff
 8003f46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d114      	bne.n	8003f7a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d01a      	beq.n	8003f8e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	3310      	adds	r3, #16
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f000 ffdb 	bl	8004f18 <xTaskRemoveFromEventList>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d012      	beq.n	8003f8e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003f68:	4b0c      	ldr	r3, [pc, #48]	; (8003f9c <xQueueGenericReset+0xcc>)
 8003f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	f3bf 8f4f 	dsb	sy
 8003f74:	f3bf 8f6f 	isb	sy
 8003f78:	e009      	b.n	8003f8e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	3310      	adds	r3, #16
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7ff fef6 	bl	8003d70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	3324      	adds	r3, #36	; 0x24
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7ff fef1 	bl	8003d70 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003f8e:	f001 fbb5 	bl	80056fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003f92:	2301      	movs	r3, #1
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	e000ed04 	.word	0xe000ed04

08003fa0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b08e      	sub	sp, #56	; 0x38
 8003fa4:	af02      	add	r7, sp, #8
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
 8003fac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10a      	bne.n	8003fca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb8:	f383 8811 	msr	BASEPRI, r3
 8003fbc:	f3bf 8f6f 	isb	sy
 8003fc0:	f3bf 8f4f 	dsb	sy
 8003fc4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003fc6:	bf00      	nop
 8003fc8:	e7fe      	b.n	8003fc8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10a      	bne.n	8003fe6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd4:	f383 8811 	msr	BASEPRI, r3
 8003fd8:	f3bf 8f6f 	isb	sy
 8003fdc:	f3bf 8f4f 	dsb	sy
 8003fe0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003fe2:	bf00      	nop
 8003fe4:	e7fe      	b.n	8003fe4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d002      	beq.n	8003ff2 <xQueueGenericCreateStatic+0x52>
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <xQueueGenericCreateStatic+0x56>
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e000      	b.n	8003ff8 <xQueueGenericCreateStatic+0x58>
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d10a      	bne.n	8004012 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004000:	f383 8811 	msr	BASEPRI, r3
 8004004:	f3bf 8f6f 	isb	sy
 8004008:	f3bf 8f4f 	dsb	sy
 800400c:	623b      	str	r3, [r7, #32]
}
 800400e:	bf00      	nop
 8004010:	e7fe      	b.n	8004010 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d102      	bne.n	800401e <xQueueGenericCreateStatic+0x7e>
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <xQueueGenericCreateStatic+0x82>
 800401e:	2301      	movs	r3, #1
 8004020:	e000      	b.n	8004024 <xQueueGenericCreateStatic+0x84>
 8004022:	2300      	movs	r3, #0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10a      	bne.n	800403e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402c:	f383 8811 	msr	BASEPRI, r3
 8004030:	f3bf 8f6f 	isb	sy
 8004034:	f3bf 8f4f 	dsb	sy
 8004038:	61fb      	str	r3, [r7, #28]
}
 800403a:	bf00      	nop
 800403c:	e7fe      	b.n	800403c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800403e:	2348      	movs	r3, #72	; 0x48
 8004040:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	2b48      	cmp	r3, #72	; 0x48
 8004046:	d00a      	beq.n	800405e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404c:	f383 8811 	msr	BASEPRI, r3
 8004050:	f3bf 8f6f 	isb	sy
 8004054:	f3bf 8f4f 	dsb	sy
 8004058:	61bb      	str	r3, [r7, #24]
}
 800405a:	bf00      	nop
 800405c:	e7fe      	b.n	800405c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00d      	beq.n	8004084 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004070:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	4613      	mov	r3, r2
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	68b9      	ldr	r1, [r7, #8]
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f000 f843 	bl	800410a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004086:	4618      	mov	r0, r3
 8004088:	3730      	adds	r7, #48	; 0x30
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800408e:	b580      	push	{r7, lr}
 8004090:	b08a      	sub	sp, #40	; 0x28
 8004092:	af02      	add	r7, sp, #8
 8004094:	60f8      	str	r0, [r7, #12]
 8004096:	60b9      	str	r1, [r7, #8]
 8004098:	4613      	mov	r3, r2
 800409a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10a      	bne.n	80040b8 <xQueueGenericCreate+0x2a>
	__asm volatile
 80040a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a6:	f383 8811 	msr	BASEPRI, r3
 80040aa:	f3bf 8f6f 	isb	sy
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	613b      	str	r3, [r7, #16]
}
 80040b4:	bf00      	nop
 80040b6:	e7fe      	b.n	80040b6 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d102      	bne.n	80040c4 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80040be:	2300      	movs	r3, #0
 80040c0:	61fb      	str	r3, [r7, #28]
 80040c2:	e004      	b.n	80040ce <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	fb02 f303 	mul.w	r3, r2, r3
 80040cc:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	3348      	adds	r3, #72	; 0x48
 80040d2:	4618      	mov	r0, r3
 80040d4:	f001 fba4 	bl	8005820 <pvPortMalloc>
 80040d8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00f      	beq.n	8004100 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	3348      	adds	r3, #72	; 0x48
 80040e4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040ee:	79fa      	ldrb	r2, [r7, #7]
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	9300      	str	r3, [sp, #0]
 80040f4:	4613      	mov	r3, r2
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	68b9      	ldr	r1, [r7, #8]
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f000 f805 	bl	800410a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004100:	69bb      	ldr	r3, [r7, #24]
	}
 8004102:	4618      	mov	r0, r3
 8004104:	3720      	adds	r7, #32
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b084      	sub	sp, #16
 800410e:	af00      	add	r7, sp, #0
 8004110:	60f8      	str	r0, [r7, #12]
 8004112:	60b9      	str	r1, [r7, #8]
 8004114:	607a      	str	r2, [r7, #4]
 8004116:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d103      	bne.n	8004126 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	e002      	b.n	800412c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004138:	2101      	movs	r1, #1
 800413a:	69b8      	ldr	r0, [r7, #24]
 800413c:	f7ff fec8 	bl	8003ed0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004140:	bf00      	nop
 8004142:	3710      	adds	r7, #16
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b08e      	sub	sp, #56	; 0x38
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
 8004154:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004156:	2300      	movs	r3, #0
 8004158:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800415e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10a      	bne.n	800417a <xQueueGenericSend+0x32>
	__asm volatile
 8004164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004168:	f383 8811 	msr	BASEPRI, r3
 800416c:	f3bf 8f6f 	isb	sy
 8004170:	f3bf 8f4f 	dsb	sy
 8004174:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004176:	bf00      	nop
 8004178:	e7fe      	b.n	8004178 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d103      	bne.n	8004188 <xQueueGenericSend+0x40>
 8004180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004184:	2b00      	cmp	r3, #0
 8004186:	d101      	bne.n	800418c <xQueueGenericSend+0x44>
 8004188:	2301      	movs	r3, #1
 800418a:	e000      	b.n	800418e <xQueueGenericSend+0x46>
 800418c:	2300      	movs	r3, #0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10a      	bne.n	80041a8 <xQueueGenericSend+0x60>
	__asm volatile
 8004192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004196:	f383 8811 	msr	BASEPRI, r3
 800419a:	f3bf 8f6f 	isb	sy
 800419e:	f3bf 8f4f 	dsb	sy
 80041a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80041a4:	bf00      	nop
 80041a6:	e7fe      	b.n	80041a6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d103      	bne.n	80041b6 <xQueueGenericSend+0x6e>
 80041ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d101      	bne.n	80041ba <xQueueGenericSend+0x72>
 80041b6:	2301      	movs	r3, #1
 80041b8:	e000      	b.n	80041bc <xQueueGenericSend+0x74>
 80041ba:	2300      	movs	r3, #0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10a      	bne.n	80041d6 <xQueueGenericSend+0x8e>
	__asm volatile
 80041c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c4:	f383 8811 	msr	BASEPRI, r3
 80041c8:	f3bf 8f6f 	isb	sy
 80041cc:	f3bf 8f4f 	dsb	sy
 80041d0:	623b      	str	r3, [r7, #32]
}
 80041d2:	bf00      	nop
 80041d4:	e7fe      	b.n	80041d4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041d6:	f001 f863 	bl	80052a0 <xTaskGetSchedulerState>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d102      	bne.n	80041e6 <xQueueGenericSend+0x9e>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <xQueueGenericSend+0xa2>
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <xQueueGenericSend+0xa4>
 80041ea:	2300      	movs	r3, #0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10a      	bne.n	8004206 <xQueueGenericSend+0xbe>
	__asm volatile
 80041f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f4:	f383 8811 	msr	BASEPRI, r3
 80041f8:	f3bf 8f6f 	isb	sy
 80041fc:	f3bf 8f4f 	dsb	sy
 8004200:	61fb      	str	r3, [r7, #28]
}
 8004202:	bf00      	nop
 8004204:	e7fe      	b.n	8004204 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004206:	f001 fa49 	bl	800569c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800420a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800420e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004212:	429a      	cmp	r2, r3
 8004214:	d302      	bcc.n	800421c <xQueueGenericSend+0xd4>
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	2b02      	cmp	r3, #2
 800421a:	d129      	bne.n	8004270 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	68b9      	ldr	r1, [r7, #8]
 8004220:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004222:	f000 f96f 	bl	8004504 <prvCopyDataToQueue>
 8004226:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	2b00      	cmp	r3, #0
 800422e:	d010      	beq.n	8004252 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004232:	3324      	adds	r3, #36	; 0x24
 8004234:	4618      	mov	r0, r3
 8004236:	f000 fe6f 	bl	8004f18 <xTaskRemoveFromEventList>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d013      	beq.n	8004268 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004240:	4b3f      	ldr	r3, [pc, #252]	; (8004340 <xQueueGenericSend+0x1f8>)
 8004242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	f3bf 8f6f 	isb	sy
 8004250:	e00a      	b.n	8004268 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004254:	2b00      	cmp	r3, #0
 8004256:	d007      	beq.n	8004268 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004258:	4b39      	ldr	r3, [pc, #228]	; (8004340 <xQueueGenericSend+0x1f8>)
 800425a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800425e:	601a      	str	r2, [r3, #0]
 8004260:	f3bf 8f4f 	dsb	sy
 8004264:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004268:	f001 fa48 	bl	80056fc <vPortExitCritical>
				return pdPASS;
 800426c:	2301      	movs	r3, #1
 800426e:	e063      	b.n	8004338 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d103      	bne.n	800427e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004276:	f001 fa41 	bl	80056fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800427a:	2300      	movs	r3, #0
 800427c:	e05c      	b.n	8004338 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800427e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004280:	2b00      	cmp	r3, #0
 8004282:	d106      	bne.n	8004292 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004284:	f107 0314 	add.w	r3, r7, #20
 8004288:	4618      	mov	r0, r3
 800428a:	f000 fea7 	bl	8004fdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800428e:	2301      	movs	r3, #1
 8004290:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004292:	f001 fa33 	bl	80056fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004296:	f000 fc51 	bl	8004b3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800429a:	f001 f9ff 	bl	800569c <vPortEnterCritical>
 800429e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042a4:	b25b      	sxtb	r3, r3
 80042a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042aa:	d103      	bne.n	80042b4 <xQueueGenericSend+0x16c>
 80042ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042ba:	b25b      	sxtb	r3, r3
 80042bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042c0:	d103      	bne.n	80042ca <xQueueGenericSend+0x182>
 80042c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042ca:	f001 fa17 	bl	80056fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042ce:	1d3a      	adds	r2, r7, #4
 80042d0:	f107 0314 	add.w	r3, r7, #20
 80042d4:	4611      	mov	r1, r2
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 fe96 	bl	8005008 <xTaskCheckForTimeOut>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d124      	bne.n	800432c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80042e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042e4:	f000 fa06 	bl	80046f4 <prvIsQueueFull>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d018      	beq.n	8004320 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80042ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f0:	3310      	adds	r3, #16
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	4611      	mov	r1, r2
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 fdea 	bl	8004ed0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80042fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042fe:	f000 f991 	bl	8004624 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004302:	f000 fc29 	bl	8004b58 <xTaskResumeAll>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	f47f af7c 	bne.w	8004206 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800430e:	4b0c      	ldr	r3, [pc, #48]	; (8004340 <xQueueGenericSend+0x1f8>)
 8004310:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004314:	601a      	str	r2, [r3, #0]
 8004316:	f3bf 8f4f 	dsb	sy
 800431a:	f3bf 8f6f 	isb	sy
 800431e:	e772      	b.n	8004206 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004320:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004322:	f000 f97f 	bl	8004624 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004326:	f000 fc17 	bl	8004b58 <xTaskResumeAll>
 800432a:	e76c      	b.n	8004206 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800432c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800432e:	f000 f979 	bl	8004624 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004332:	f000 fc11 	bl	8004b58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004336:	2300      	movs	r3, #0
		}
	}
}
 8004338:	4618      	mov	r0, r3
 800433a:	3738      	adds	r7, #56	; 0x38
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	e000ed04 	.word	0xe000ed04

08004344 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b08c      	sub	sp, #48	; 0x30
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004350:	2300      	movs	r3, #0
 8004352:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10a      	bne.n	8004374 <xQueueReceive+0x30>
	__asm volatile
 800435e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004362:	f383 8811 	msr	BASEPRI, r3
 8004366:	f3bf 8f6f 	isb	sy
 800436a:	f3bf 8f4f 	dsb	sy
 800436e:	623b      	str	r3, [r7, #32]
}
 8004370:	bf00      	nop
 8004372:	e7fe      	b.n	8004372 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d103      	bne.n	8004382 <xQueueReceive+0x3e>
 800437a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <xQueueReceive+0x42>
 8004382:	2301      	movs	r3, #1
 8004384:	e000      	b.n	8004388 <xQueueReceive+0x44>
 8004386:	2300      	movs	r3, #0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10a      	bne.n	80043a2 <xQueueReceive+0x5e>
	__asm volatile
 800438c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004390:	f383 8811 	msr	BASEPRI, r3
 8004394:	f3bf 8f6f 	isb	sy
 8004398:	f3bf 8f4f 	dsb	sy
 800439c:	61fb      	str	r3, [r7, #28]
}
 800439e:	bf00      	nop
 80043a0:	e7fe      	b.n	80043a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043a2:	f000 ff7d 	bl	80052a0 <xTaskGetSchedulerState>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d102      	bne.n	80043b2 <xQueueReceive+0x6e>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <xQueueReceive+0x72>
 80043b2:	2301      	movs	r3, #1
 80043b4:	e000      	b.n	80043b8 <xQueueReceive+0x74>
 80043b6:	2300      	movs	r3, #0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10a      	bne.n	80043d2 <xQueueReceive+0x8e>
	__asm volatile
 80043bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c0:	f383 8811 	msr	BASEPRI, r3
 80043c4:	f3bf 8f6f 	isb	sy
 80043c8:	f3bf 8f4f 	dsb	sy
 80043cc:	61bb      	str	r3, [r7, #24]
}
 80043ce:	bf00      	nop
 80043d0:	e7fe      	b.n	80043d0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80043d2:	f001 f963 	bl	800569c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80043dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d01f      	beq.n	8004422 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80043e2:	68b9      	ldr	r1, [r7, #8]
 80043e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043e6:	f000 f8f7 	bl	80045d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ec:	1e5a      	subs	r2, r3, #1
 80043ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00f      	beq.n	800441a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fc:	3310      	adds	r3, #16
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 fd8a 	bl	8004f18 <xTaskRemoveFromEventList>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d007      	beq.n	800441a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800440a:	4b3d      	ldr	r3, [pc, #244]	; (8004500 <xQueueReceive+0x1bc>)
 800440c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004410:	601a      	str	r2, [r3, #0]
 8004412:	f3bf 8f4f 	dsb	sy
 8004416:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800441a:	f001 f96f 	bl	80056fc <vPortExitCritical>
				return pdPASS;
 800441e:	2301      	movs	r3, #1
 8004420:	e069      	b.n	80044f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d103      	bne.n	8004430 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004428:	f001 f968 	bl	80056fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800442c:	2300      	movs	r3, #0
 800442e:	e062      	b.n	80044f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004432:	2b00      	cmp	r3, #0
 8004434:	d106      	bne.n	8004444 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004436:	f107 0310 	add.w	r3, r7, #16
 800443a:	4618      	mov	r0, r3
 800443c:	f000 fdce 	bl	8004fdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004440:	2301      	movs	r3, #1
 8004442:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004444:	f001 f95a 	bl	80056fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004448:	f000 fb78 	bl	8004b3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800444c:	f001 f926 	bl	800569c <vPortEnterCritical>
 8004450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004452:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004456:	b25b      	sxtb	r3, r3
 8004458:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800445c:	d103      	bne.n	8004466 <xQueueReceive+0x122>
 800445e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004460:	2200      	movs	r2, #0
 8004462:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004468:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800446c:	b25b      	sxtb	r3, r3
 800446e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004472:	d103      	bne.n	800447c <xQueueReceive+0x138>
 8004474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004476:	2200      	movs	r2, #0
 8004478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800447c:	f001 f93e 	bl	80056fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004480:	1d3a      	adds	r2, r7, #4
 8004482:	f107 0310 	add.w	r3, r7, #16
 8004486:	4611      	mov	r1, r2
 8004488:	4618      	mov	r0, r3
 800448a:	f000 fdbd 	bl	8005008 <xTaskCheckForTimeOut>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d123      	bne.n	80044dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004494:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004496:	f000 f917 	bl	80046c8 <prvIsQueueEmpty>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d017      	beq.n	80044d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80044a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a2:	3324      	adds	r3, #36	; 0x24
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	4611      	mov	r1, r2
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 fd11 	bl	8004ed0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80044ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044b0:	f000 f8b8 	bl	8004624 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80044b4:	f000 fb50 	bl	8004b58 <xTaskResumeAll>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d189      	bne.n	80043d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80044be:	4b10      	ldr	r3, [pc, #64]	; (8004500 <xQueueReceive+0x1bc>)
 80044c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044c4:	601a      	str	r2, [r3, #0]
 80044c6:	f3bf 8f4f 	dsb	sy
 80044ca:	f3bf 8f6f 	isb	sy
 80044ce:	e780      	b.n	80043d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80044d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044d2:	f000 f8a7 	bl	8004624 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80044d6:	f000 fb3f 	bl	8004b58 <xTaskResumeAll>
 80044da:	e77a      	b.n	80043d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80044dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044de:	f000 f8a1 	bl	8004624 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044e2:	f000 fb39 	bl	8004b58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044e8:	f000 f8ee 	bl	80046c8 <prvIsQueueEmpty>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f43f af6f 	beq.w	80043d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80044f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3730      	adds	r7, #48	; 0x30
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	e000ed04 	.word	0xe000ed04

08004504 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004510:	2300      	movs	r3, #0
 8004512:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004518:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10d      	bne.n	800453e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d14d      	bne.n	80045c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	4618      	mov	r0, r3
 8004530:	f000 fed4 	bl	80052dc <xTaskPriorityDisinherit>
 8004534:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	605a      	str	r2, [r3, #4]
 800453c:	e043      	b.n	80045c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d119      	bne.n	8004578 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6898      	ldr	r0, [r3, #8]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454c:	461a      	mov	r2, r3
 800454e:	68b9      	ldr	r1, [r7, #8]
 8004550:	f001 fd88 	bl	8006064 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	689a      	ldr	r2, [r3, #8]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455c:	441a      	add	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	689a      	ldr	r2, [r3, #8]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	429a      	cmp	r2, r3
 800456c:	d32b      	bcc.n	80045c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	609a      	str	r2, [r3, #8]
 8004576:	e026      	b.n	80045c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	68d8      	ldr	r0, [r3, #12]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004580:	461a      	mov	r2, r3
 8004582:	68b9      	ldr	r1, [r7, #8]
 8004584:	f001 fd6e 	bl	8006064 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	68da      	ldr	r2, [r3, #12]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004590:	425b      	negs	r3, r3
 8004592:	441a      	add	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	68da      	ldr	r2, [r3, #12]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d207      	bcs.n	80045b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ac:	425b      	negs	r3, r3
 80045ae:	441a      	add	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d105      	bne.n	80045c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d002      	beq.n	80045c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	3b01      	subs	r3, #1
 80045c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	1c5a      	adds	r2, r3, #1
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80045ce:	697b      	ldr	r3, [r7, #20]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3718      	adds	r7, #24
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d018      	beq.n	800461c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68da      	ldr	r2, [r3, #12]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	441a      	add	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68da      	ldr	r2, [r3, #12]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	429a      	cmp	r2, r3
 8004602:	d303      	bcc.n	800460c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68d9      	ldr	r1, [r3, #12]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004614:	461a      	mov	r2, r3
 8004616:	6838      	ldr	r0, [r7, #0]
 8004618:	f001 fd24 	bl	8006064 <memcpy>
	}
}
 800461c:	bf00      	nop
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800462c:	f001 f836 	bl	800569c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004636:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004638:	e011      	b.n	800465e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463e:	2b00      	cmp	r3, #0
 8004640:	d012      	beq.n	8004668 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	3324      	adds	r3, #36	; 0x24
 8004646:	4618      	mov	r0, r3
 8004648:	f000 fc66 	bl	8004f18 <xTaskRemoveFromEventList>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004652:	f000 fd3b 	bl	80050cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004656:	7bfb      	ldrb	r3, [r7, #15]
 8004658:	3b01      	subs	r3, #1
 800465a:	b2db      	uxtb	r3, r3
 800465c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800465e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004662:	2b00      	cmp	r3, #0
 8004664:	dce9      	bgt.n	800463a <prvUnlockQueue+0x16>
 8004666:	e000      	b.n	800466a <prvUnlockQueue+0x46>
					break;
 8004668:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	22ff      	movs	r2, #255	; 0xff
 800466e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004672:	f001 f843 	bl	80056fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004676:	f001 f811 	bl	800569c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004680:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004682:	e011      	b.n	80046a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d012      	beq.n	80046b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	3310      	adds	r3, #16
 8004690:	4618      	mov	r0, r3
 8004692:	f000 fc41 	bl	8004f18 <xTaskRemoveFromEventList>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d001      	beq.n	80046a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800469c:	f000 fd16 	bl	80050cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80046a0:	7bbb      	ldrb	r3, [r7, #14]
 80046a2:	3b01      	subs	r3, #1
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80046a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	dce9      	bgt.n	8004684 <prvUnlockQueue+0x60>
 80046b0:	e000      	b.n	80046b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80046b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	22ff      	movs	r2, #255	; 0xff
 80046b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80046bc:	f001 f81e 	bl	80056fc <vPortExitCritical>
}
 80046c0:	bf00      	nop
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80046d0:	f000 ffe4 	bl	800569c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d102      	bne.n	80046e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80046dc:	2301      	movs	r3, #1
 80046de:	60fb      	str	r3, [r7, #12]
 80046e0:	e001      	b.n	80046e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80046e2:	2300      	movs	r3, #0
 80046e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80046e6:	f001 f809 	bl	80056fc <vPortExitCritical>

	return xReturn;
 80046ea:	68fb      	ldr	r3, [r7, #12]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80046fc:	f000 ffce 	bl	800569c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004708:	429a      	cmp	r2, r3
 800470a:	d102      	bne.n	8004712 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800470c:	2301      	movs	r3, #1
 800470e:	60fb      	str	r3, [r7, #12]
 8004710:	e001      	b.n	8004716 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004712:	2300      	movs	r3, #0
 8004714:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004716:	f000 fff1 	bl	80056fc <vPortExitCritical>

	return xReturn;
 800471a:	68fb      	ldr	r3, [r7, #12]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004724:	b580      	push	{r7, lr}
 8004726:	b08e      	sub	sp, #56	; 0x38
 8004728:	af04      	add	r7, sp, #16
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
 8004730:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10a      	bne.n	800474e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473c:	f383 8811 	msr	BASEPRI, r3
 8004740:	f3bf 8f6f 	isb	sy
 8004744:	f3bf 8f4f 	dsb	sy
 8004748:	623b      	str	r3, [r7, #32]
}
 800474a:	bf00      	nop
 800474c:	e7fe      	b.n	800474c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800474e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10a      	bne.n	800476a <xTaskCreateStatic+0x46>
	__asm volatile
 8004754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004758:	f383 8811 	msr	BASEPRI, r3
 800475c:	f3bf 8f6f 	isb	sy
 8004760:	f3bf 8f4f 	dsb	sy
 8004764:	61fb      	str	r3, [r7, #28]
}
 8004766:	bf00      	nop
 8004768:	e7fe      	b.n	8004768 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800476a:	23b4      	movs	r3, #180	; 0xb4
 800476c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	2bb4      	cmp	r3, #180	; 0xb4
 8004772:	d00a      	beq.n	800478a <xTaskCreateStatic+0x66>
	__asm volatile
 8004774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004778:	f383 8811 	msr	BASEPRI, r3
 800477c:	f3bf 8f6f 	isb	sy
 8004780:	f3bf 8f4f 	dsb	sy
 8004784:	61bb      	str	r3, [r7, #24]
}
 8004786:	bf00      	nop
 8004788:	e7fe      	b.n	8004788 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800478a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800478c:	2b00      	cmp	r3, #0
 800478e:	d01e      	beq.n	80047ce <xTaskCreateStatic+0xaa>
 8004790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004792:	2b00      	cmp	r3, #0
 8004794:	d01b      	beq.n	80047ce <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004798:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800479e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80047a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a2:	2202      	movs	r2, #2
 80047a4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80047a8:	2300      	movs	r3, #0
 80047aa:	9303      	str	r3, [sp, #12]
 80047ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ae:	9302      	str	r3, [sp, #8]
 80047b0:	f107 0314 	add.w	r3, r7, #20
 80047b4:	9301      	str	r3, [sp, #4]
 80047b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	68b9      	ldr	r1, [r7, #8]
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f000 f851 	bl	8004868 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80047c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047c8:	f000 f8e4 	bl	8004994 <prvAddNewTaskToReadyList>
 80047cc:	e001      	b.n	80047d2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80047ce:	2300      	movs	r3, #0
 80047d0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80047d2:	697b      	ldr	r3, [r7, #20]
	}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3728      	adds	r7, #40	; 0x28
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b08c      	sub	sp, #48	; 0x30
 80047e0:	af04      	add	r7, sp, #16
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	603b      	str	r3, [r7, #0]
 80047e8:	4613      	mov	r3, r2
 80047ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047ec:	88fb      	ldrh	r3, [r7, #6]
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4618      	mov	r0, r3
 80047f2:	f001 f815 	bl	8005820 <pvPortMalloc>
 80047f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00e      	beq.n	800481c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80047fe:	20b4      	movs	r0, #180	; 0xb4
 8004800:	f001 f80e 	bl	8005820 <pvPortMalloc>
 8004804:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d003      	beq.n	8004814 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	631a      	str	r2, [r3, #48]	; 0x30
 8004812:	e005      	b.n	8004820 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004814:	6978      	ldr	r0, [r7, #20]
 8004816:	f001 f8c7 	bl	80059a8 <vPortFree>
 800481a:	e001      	b.n	8004820 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800481c:	2300      	movs	r3, #0
 800481e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d017      	beq.n	8004856 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800482e:	88fa      	ldrh	r2, [r7, #6]
 8004830:	2300      	movs	r3, #0
 8004832:	9303      	str	r3, [sp, #12]
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	9302      	str	r3, [sp, #8]
 8004838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800483a:	9301      	str	r3, [sp, #4]
 800483c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	68b9      	ldr	r1, [r7, #8]
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f000 f80f 	bl	8004868 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800484a:	69f8      	ldr	r0, [r7, #28]
 800484c:	f000 f8a2 	bl	8004994 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004850:	2301      	movs	r3, #1
 8004852:	61bb      	str	r3, [r7, #24]
 8004854:	e002      	b.n	800485c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004856:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800485a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800485c:	69bb      	ldr	r3, [r7, #24]
	}
 800485e:	4618      	mov	r0, r3
 8004860:	3720      	adds	r7, #32
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
	...

08004868 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b088      	sub	sp, #32
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
 8004874:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004878:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004880:	3b01      	subs	r3, #1
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4413      	add	r3, r2
 8004886:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	f023 0307 	bic.w	r3, r3, #7
 800488e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	f003 0307 	and.w	r3, r3, #7
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00a      	beq.n	80048b0 <prvInitialiseNewTask+0x48>
	__asm volatile
 800489a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489e:	f383 8811 	msr	BASEPRI, r3
 80048a2:	f3bf 8f6f 	isb	sy
 80048a6:	f3bf 8f4f 	dsb	sy
 80048aa:	617b      	str	r3, [r7, #20]
}
 80048ac:	bf00      	nop
 80048ae:	e7fe      	b.n	80048ae <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048b0:	2300      	movs	r3, #0
 80048b2:	61fb      	str	r3, [r7, #28]
 80048b4:	e012      	b.n	80048dc <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	4413      	add	r3, r2
 80048bc:	7819      	ldrb	r1, [r3, #0]
 80048be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	4413      	add	r3, r2
 80048c4:	3334      	adds	r3, #52	; 0x34
 80048c6:	460a      	mov	r2, r1
 80048c8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	4413      	add	r3, r2
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d006      	beq.n	80048e4 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	3301      	adds	r3, #1
 80048da:	61fb      	str	r3, [r7, #28]
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	2b0f      	cmp	r3, #15
 80048e0:	d9e9      	bls.n	80048b6 <prvInitialiseNewTask+0x4e>
 80048e2:	e000      	b.n	80048e6 <prvInitialiseNewTask+0x7e>
		{
			break;
 80048e4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80048e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80048ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f0:	2b06      	cmp	r3, #6
 80048f2:	d901      	bls.n	80048f8 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80048f4:	2306      	movs	r3, #6
 80048f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80048f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80048fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004900:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004902:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004906:	2200      	movs	r2, #0
 8004908:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800490a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490c:	3304      	adds	r3, #4
 800490e:	4618      	mov	r0, r3
 8004910:	f7ff fa4d 	bl	8003dae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004916:	3318      	adds	r3, #24
 8004918:	4618      	mov	r0, r3
 800491a:	f7ff fa48 	bl	8003dae <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800491e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004922:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004926:	f1c3 0207 	rsb	r2, r3, #7
 800492a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800492e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004932:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004936:	2200      	movs	r2, #0
 8004938:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800493c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493e:	2200      	movs	r2, #0
 8004940:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004946:	334c      	adds	r3, #76	; 0x4c
 8004948:	2260      	movs	r2, #96	; 0x60
 800494a:	2100      	movs	r1, #0
 800494c:	4618      	mov	r0, r3
 800494e:	f001 fb97 	bl	8006080 <memset>
 8004952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004954:	4a0c      	ldr	r2, [pc, #48]	; (8004988 <prvInitialiseNewTask+0x120>)
 8004956:	651a      	str	r2, [r3, #80]	; 0x50
 8004958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495a:	4a0c      	ldr	r2, [pc, #48]	; (800498c <prvInitialiseNewTask+0x124>)
 800495c:	655a      	str	r2, [r3, #84]	; 0x54
 800495e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004960:	4a0b      	ldr	r2, [pc, #44]	; (8004990 <prvInitialiseNewTask+0x128>)
 8004962:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	68f9      	ldr	r1, [r7, #12]
 8004968:	69b8      	ldr	r0, [r7, #24]
 800496a:	f000 fda3 	bl	80054b4 <pxPortInitialiseStack>
 800496e:	4602      	mov	r2, r0
 8004970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004972:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004976:	2b00      	cmp	r3, #0
 8004978:	d002      	beq.n	8004980 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800497a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800497e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004980:	bf00      	nop
 8004982:	3720      	adds	r7, #32
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	080088f0 	.word	0x080088f0
 800498c:	08008910 	.word	0x08008910
 8004990:	080088d0 	.word	0x080088d0

08004994 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800499c:	f000 fe7e 	bl	800569c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80049a0:	4b2a      	ldr	r3, [pc, #168]	; (8004a4c <prvAddNewTaskToReadyList+0xb8>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	3301      	adds	r3, #1
 80049a6:	4a29      	ldr	r2, [pc, #164]	; (8004a4c <prvAddNewTaskToReadyList+0xb8>)
 80049a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80049aa:	4b29      	ldr	r3, [pc, #164]	; (8004a50 <prvAddNewTaskToReadyList+0xbc>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d109      	bne.n	80049c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80049b2:	4a27      	ldr	r2, [pc, #156]	; (8004a50 <prvAddNewTaskToReadyList+0xbc>)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80049b8:	4b24      	ldr	r3, [pc, #144]	; (8004a4c <prvAddNewTaskToReadyList+0xb8>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d110      	bne.n	80049e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80049c0:	f000 fba8 	bl	8005114 <prvInitialiseTaskLists>
 80049c4:	e00d      	b.n	80049e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80049c6:	4b23      	ldr	r3, [pc, #140]	; (8004a54 <prvAddNewTaskToReadyList+0xc0>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d109      	bne.n	80049e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80049ce:	4b20      	ldr	r3, [pc, #128]	; (8004a50 <prvAddNewTaskToReadyList+0xbc>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d8:	429a      	cmp	r2, r3
 80049da:	d802      	bhi.n	80049e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80049dc:	4a1c      	ldr	r2, [pc, #112]	; (8004a50 <prvAddNewTaskToReadyList+0xbc>)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80049e2:	4b1d      	ldr	r3, [pc, #116]	; (8004a58 <prvAddNewTaskToReadyList+0xc4>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	3301      	adds	r3, #1
 80049e8:	4a1b      	ldr	r2, [pc, #108]	; (8004a58 <prvAddNewTaskToReadyList+0xc4>)
 80049ea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f0:	2201      	movs	r2, #1
 80049f2:	409a      	lsls	r2, r3
 80049f4:	4b19      	ldr	r3, [pc, #100]	; (8004a5c <prvAddNewTaskToReadyList+0xc8>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	4a18      	ldr	r2, [pc, #96]	; (8004a5c <prvAddNewTaskToReadyList+0xc8>)
 80049fc:	6013      	str	r3, [r2, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a02:	4613      	mov	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4413      	add	r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4a15      	ldr	r2, [pc, #84]	; (8004a60 <prvAddNewTaskToReadyList+0xcc>)
 8004a0c:	441a      	add	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	3304      	adds	r3, #4
 8004a12:	4619      	mov	r1, r3
 8004a14:	4610      	mov	r0, r2
 8004a16:	f7ff f9d6 	bl	8003dc6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004a1a:	f000 fe6f 	bl	80056fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004a1e:	4b0d      	ldr	r3, [pc, #52]	; (8004a54 <prvAddNewTaskToReadyList+0xc0>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00e      	beq.n	8004a44 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a26:	4b0a      	ldr	r3, [pc, #40]	; (8004a50 <prvAddNewTaskToReadyList+0xbc>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d207      	bcs.n	8004a44 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004a34:	4b0b      	ldr	r3, [pc, #44]	; (8004a64 <prvAddNewTaskToReadyList+0xd0>)
 8004a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a3a:	601a      	str	r2, [r3, #0]
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a44:	bf00      	nop
 8004a46:	3708      	adds	r7, #8
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	200009a8 	.word	0x200009a8
 8004a50:	200008a8 	.word	0x200008a8
 8004a54:	200009b4 	.word	0x200009b4
 8004a58:	200009c4 	.word	0x200009c4
 8004a5c:	200009b0 	.word	0x200009b0
 8004a60:	200008ac 	.word	0x200008ac
 8004a64:	e000ed04 	.word	0xe000ed04

08004a68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b08a      	sub	sp, #40	; 0x28
 8004a6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004a72:	2300      	movs	r3, #0
 8004a74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004a76:	463a      	mov	r2, r7
 8004a78:	1d39      	adds	r1, r7, #4
 8004a7a:	f107 0308 	add.w	r3, r7, #8
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7fb fd34 	bl	80004ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004a84:	6839      	ldr	r1, [r7, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	9202      	str	r2, [sp, #8]
 8004a8c:	9301      	str	r3, [sp, #4]
 8004a8e:	2300      	movs	r3, #0
 8004a90:	9300      	str	r3, [sp, #0]
 8004a92:	2300      	movs	r3, #0
 8004a94:	460a      	mov	r2, r1
 8004a96:	4921      	ldr	r1, [pc, #132]	; (8004b1c <vTaskStartScheduler+0xb4>)
 8004a98:	4821      	ldr	r0, [pc, #132]	; (8004b20 <vTaskStartScheduler+0xb8>)
 8004a9a:	f7ff fe43 	bl	8004724 <xTaskCreateStatic>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	4a20      	ldr	r2, [pc, #128]	; (8004b24 <vTaskStartScheduler+0xbc>)
 8004aa2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004aa4:	4b1f      	ldr	r3, [pc, #124]	; (8004b24 <vTaskStartScheduler+0xbc>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d002      	beq.n	8004ab2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004aac:	2301      	movs	r3, #1
 8004aae:	617b      	str	r3, [r7, #20]
 8004ab0:	e001      	b.n	8004ab6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d11b      	bne.n	8004af4 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac0:	f383 8811 	msr	BASEPRI, r3
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	f3bf 8f4f 	dsb	sy
 8004acc:	613b      	str	r3, [r7, #16]
}
 8004ace:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004ad0:	4b15      	ldr	r3, [pc, #84]	; (8004b28 <vTaskStartScheduler+0xc0>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	334c      	adds	r3, #76	; 0x4c
 8004ad6:	4a15      	ldr	r2, [pc, #84]	; (8004b2c <vTaskStartScheduler+0xc4>)
 8004ad8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004ada:	4b15      	ldr	r3, [pc, #84]	; (8004b30 <vTaskStartScheduler+0xc8>)
 8004adc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ae0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004ae2:	4b14      	ldr	r3, [pc, #80]	; (8004b34 <vTaskStartScheduler+0xcc>)
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004ae8:	4b13      	ldr	r3, [pc, #76]	; (8004b38 <vTaskStartScheduler+0xd0>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004aee:	f000 fd63 	bl	80055b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004af2:	e00e      	b.n	8004b12 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004afa:	d10a      	bne.n	8004b12 <vTaskStartScheduler+0xaa>
	__asm volatile
 8004afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b00:	f383 8811 	msr	BASEPRI, r3
 8004b04:	f3bf 8f6f 	isb	sy
 8004b08:	f3bf 8f4f 	dsb	sy
 8004b0c:	60fb      	str	r3, [r7, #12]
}
 8004b0e:	bf00      	nop
 8004b10:	e7fe      	b.n	8004b10 <vTaskStartScheduler+0xa8>
}
 8004b12:	bf00      	nop
 8004b14:	3718      	adds	r7, #24
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	080088a4 	.word	0x080088a4
 8004b20:	080050e5 	.word	0x080050e5
 8004b24:	200009cc 	.word	0x200009cc
 8004b28:	200008a8 	.word	0x200008a8
 8004b2c:	200001f8 	.word	0x200001f8
 8004b30:	200009c8 	.word	0x200009c8
 8004b34:	200009b4 	.word	0x200009b4
 8004b38:	200009ac 	.word	0x200009ac

08004b3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004b40:	4b04      	ldr	r3, [pc, #16]	; (8004b54 <vTaskSuspendAll+0x18>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	3301      	adds	r3, #1
 8004b46:	4a03      	ldr	r2, [pc, #12]	; (8004b54 <vTaskSuspendAll+0x18>)
 8004b48:	6013      	str	r3, [r2, #0]
}
 8004b4a:	bf00      	nop
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bc80      	pop	{r7}
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	200009d0 	.word	0x200009d0

08004b58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004b62:	2300      	movs	r3, #0
 8004b64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004b66:	4b41      	ldr	r3, [pc, #260]	; (8004c6c <xTaskResumeAll+0x114>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10a      	bne.n	8004b84 <xTaskResumeAll+0x2c>
	__asm volatile
 8004b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b72:	f383 8811 	msr	BASEPRI, r3
 8004b76:	f3bf 8f6f 	isb	sy
 8004b7a:	f3bf 8f4f 	dsb	sy
 8004b7e:	603b      	str	r3, [r7, #0]
}
 8004b80:	bf00      	nop
 8004b82:	e7fe      	b.n	8004b82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004b84:	f000 fd8a 	bl	800569c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004b88:	4b38      	ldr	r3, [pc, #224]	; (8004c6c <xTaskResumeAll+0x114>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	4a37      	ldr	r2, [pc, #220]	; (8004c6c <xTaskResumeAll+0x114>)
 8004b90:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b92:	4b36      	ldr	r3, [pc, #216]	; (8004c6c <xTaskResumeAll+0x114>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d161      	bne.n	8004c5e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004b9a:	4b35      	ldr	r3, [pc, #212]	; (8004c70 <xTaskResumeAll+0x118>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d05d      	beq.n	8004c5e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ba2:	e02e      	b.n	8004c02 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004ba4:	4b33      	ldr	r3, [pc, #204]	; (8004c74 <xTaskResumeAll+0x11c>)
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	3318      	adds	r3, #24
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7ff f963 	bl	8003e7c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	3304      	adds	r3, #4
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7ff f95e 	bl	8003e7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	409a      	lsls	r2, r3
 8004bc8:	4b2b      	ldr	r3, [pc, #172]	; (8004c78 <xTaskResumeAll+0x120>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	4a2a      	ldr	r2, [pc, #168]	; (8004c78 <xTaskResumeAll+0x120>)
 8004bd0:	6013      	str	r3, [r2, #0]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	4413      	add	r3, r2
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	4a27      	ldr	r2, [pc, #156]	; (8004c7c <xTaskResumeAll+0x124>)
 8004be0:	441a      	add	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	3304      	adds	r3, #4
 8004be6:	4619      	mov	r1, r3
 8004be8:	4610      	mov	r0, r2
 8004bea:	f7ff f8ec 	bl	8003dc6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bf2:	4b23      	ldr	r3, [pc, #140]	; (8004c80 <xTaskResumeAll+0x128>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d302      	bcc.n	8004c02 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004bfc:	4b21      	ldr	r3, [pc, #132]	; (8004c84 <xTaskResumeAll+0x12c>)
 8004bfe:	2201      	movs	r2, #1
 8004c00:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c02:	4b1c      	ldr	r3, [pc, #112]	; (8004c74 <xTaskResumeAll+0x11c>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1cc      	bne.n	8004ba4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d001      	beq.n	8004c14 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004c10:	f000 fb22 	bl	8005258 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004c14:	4b1c      	ldr	r3, [pc, #112]	; (8004c88 <xTaskResumeAll+0x130>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d010      	beq.n	8004c42 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004c20:	f000 f836 	bl	8004c90 <xTaskIncrementTick>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d002      	beq.n	8004c30 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004c2a:	4b16      	ldr	r3, [pc, #88]	; (8004c84 <xTaskResumeAll+0x12c>)
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	3b01      	subs	r3, #1
 8004c34:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1f1      	bne.n	8004c20 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004c3c:	4b12      	ldr	r3, [pc, #72]	; (8004c88 <xTaskResumeAll+0x130>)
 8004c3e:	2200      	movs	r2, #0
 8004c40:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004c42:	4b10      	ldr	r3, [pc, #64]	; (8004c84 <xTaskResumeAll+0x12c>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d009      	beq.n	8004c5e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004c4e:	4b0f      	ldr	r3, [pc, #60]	; (8004c8c <xTaskResumeAll+0x134>)
 8004c50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c54:	601a      	str	r2, [r3, #0]
 8004c56:	f3bf 8f4f 	dsb	sy
 8004c5a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c5e:	f000 fd4d 	bl	80056fc <vPortExitCritical>

	return xAlreadyYielded;
 8004c62:	68bb      	ldr	r3, [r7, #8]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	200009d0 	.word	0x200009d0
 8004c70:	200009a8 	.word	0x200009a8
 8004c74:	20000968 	.word	0x20000968
 8004c78:	200009b0 	.word	0x200009b0
 8004c7c:	200008ac 	.word	0x200008ac
 8004c80:	200008a8 	.word	0x200008a8
 8004c84:	200009bc 	.word	0x200009bc
 8004c88:	200009b8 	.word	0x200009b8
 8004c8c:	e000ed04 	.word	0xe000ed04

08004c90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004c96:	2300      	movs	r3, #0
 8004c98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c9a:	4b51      	ldr	r3, [pc, #324]	; (8004de0 <xTaskIncrementTick+0x150>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f040 808d 	bne.w	8004dbe <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ca4:	4b4f      	ldr	r3, [pc, #316]	; (8004de4 <xTaskIncrementTick+0x154>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004cac:	4a4d      	ldr	r2, [pc, #308]	; (8004de4 <xTaskIncrementTick+0x154>)
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d120      	bne.n	8004cfa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004cb8:	4b4b      	ldr	r3, [pc, #300]	; (8004de8 <xTaskIncrementTick+0x158>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00a      	beq.n	8004cd8 <xTaskIncrementTick+0x48>
	__asm volatile
 8004cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc6:	f383 8811 	msr	BASEPRI, r3
 8004cca:	f3bf 8f6f 	isb	sy
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	603b      	str	r3, [r7, #0]
}
 8004cd4:	bf00      	nop
 8004cd6:	e7fe      	b.n	8004cd6 <xTaskIncrementTick+0x46>
 8004cd8:	4b43      	ldr	r3, [pc, #268]	; (8004de8 <xTaskIncrementTick+0x158>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	60fb      	str	r3, [r7, #12]
 8004cde:	4b43      	ldr	r3, [pc, #268]	; (8004dec <xTaskIncrementTick+0x15c>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a41      	ldr	r2, [pc, #260]	; (8004de8 <xTaskIncrementTick+0x158>)
 8004ce4:	6013      	str	r3, [r2, #0]
 8004ce6:	4a41      	ldr	r2, [pc, #260]	; (8004dec <xTaskIncrementTick+0x15c>)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6013      	str	r3, [r2, #0]
 8004cec:	4b40      	ldr	r3, [pc, #256]	; (8004df0 <xTaskIncrementTick+0x160>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	4a3f      	ldr	r2, [pc, #252]	; (8004df0 <xTaskIncrementTick+0x160>)
 8004cf4:	6013      	str	r3, [r2, #0]
 8004cf6:	f000 faaf 	bl	8005258 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004cfa:	4b3e      	ldr	r3, [pc, #248]	; (8004df4 <xTaskIncrementTick+0x164>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d34d      	bcc.n	8004da0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d04:	4b38      	ldr	r3, [pc, #224]	; (8004de8 <xTaskIncrementTick+0x158>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d101      	bne.n	8004d12 <xTaskIncrementTick+0x82>
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e000      	b.n	8004d14 <xTaskIncrementTick+0x84>
 8004d12:	2300      	movs	r3, #0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d004      	beq.n	8004d22 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d18:	4b36      	ldr	r3, [pc, #216]	; (8004df4 <xTaskIncrementTick+0x164>)
 8004d1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d1e:	601a      	str	r2, [r3, #0]
					break;
 8004d20:	e03e      	b.n	8004da0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004d22:	4b31      	ldr	r3, [pc, #196]	; (8004de8 <xTaskIncrementTick+0x158>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d203      	bcs.n	8004d42 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004d3a:	4a2e      	ldr	r2, [pc, #184]	; (8004df4 <xTaskIncrementTick+0x164>)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6013      	str	r3, [r2, #0]
						break;
 8004d40:	e02e      	b.n	8004da0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	3304      	adds	r3, #4
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7ff f898 	bl	8003e7c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d004      	beq.n	8004d5e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	3318      	adds	r3, #24
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7ff f88f 	bl	8003e7c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d62:	2201      	movs	r2, #1
 8004d64:	409a      	lsls	r2, r3
 8004d66:	4b24      	ldr	r3, [pc, #144]	; (8004df8 <xTaskIncrementTick+0x168>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	4a22      	ldr	r2, [pc, #136]	; (8004df8 <xTaskIncrementTick+0x168>)
 8004d6e:	6013      	str	r3, [r2, #0]
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d74:	4613      	mov	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	4a1f      	ldr	r2, [pc, #124]	; (8004dfc <xTaskIncrementTick+0x16c>)
 8004d7e:	441a      	add	r2, r3
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	3304      	adds	r3, #4
 8004d84:	4619      	mov	r1, r3
 8004d86:	4610      	mov	r0, r2
 8004d88:	f7ff f81d 	bl	8003dc6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d90:	4b1b      	ldr	r3, [pc, #108]	; (8004e00 <xTaskIncrementTick+0x170>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d3b4      	bcc.n	8004d04 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d9e:	e7b1      	b.n	8004d04 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004da0:	4b17      	ldr	r3, [pc, #92]	; (8004e00 <xTaskIncrementTick+0x170>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004da6:	4915      	ldr	r1, [pc, #84]	; (8004dfc <xTaskIncrementTick+0x16c>)
 8004da8:	4613      	mov	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	4413      	add	r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	440b      	add	r3, r1
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d907      	bls.n	8004dc8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004db8:	2301      	movs	r3, #1
 8004dba:	617b      	str	r3, [r7, #20]
 8004dbc:	e004      	b.n	8004dc8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004dbe:	4b11      	ldr	r3, [pc, #68]	; (8004e04 <xTaskIncrementTick+0x174>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	4a0f      	ldr	r2, [pc, #60]	; (8004e04 <xTaskIncrementTick+0x174>)
 8004dc6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004dc8:	4b0f      	ldr	r3, [pc, #60]	; (8004e08 <xTaskIncrementTick+0x178>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004dd4:	697b      	ldr	r3, [r7, #20]
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3718      	adds	r7, #24
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	200009d0 	.word	0x200009d0
 8004de4:	200009ac 	.word	0x200009ac
 8004de8:	20000960 	.word	0x20000960
 8004dec:	20000964 	.word	0x20000964
 8004df0:	200009c0 	.word	0x200009c0
 8004df4:	200009c8 	.word	0x200009c8
 8004df8:	200009b0 	.word	0x200009b0
 8004dfc:	200008ac 	.word	0x200008ac
 8004e00:	200008a8 	.word	0x200008a8
 8004e04:	200009b8 	.word	0x200009b8
 8004e08:	200009bc 	.word	0x200009bc

08004e0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b087      	sub	sp, #28
 8004e10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004e12:	4b29      	ldr	r3, [pc, #164]	; (8004eb8 <vTaskSwitchContext+0xac>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004e1a:	4b28      	ldr	r3, [pc, #160]	; (8004ebc <vTaskSwitchContext+0xb0>)
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004e20:	e044      	b.n	8004eac <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004e22:	4b26      	ldr	r3, [pc, #152]	; (8004ebc <vTaskSwitchContext+0xb0>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004e28:	4b25      	ldr	r3, [pc, #148]	; (8004ec0 <vTaskSwitchContext+0xb4>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	fab3 f383 	clz	r3, r3
 8004e34:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004e36:	7afb      	ldrb	r3, [r7, #11]
 8004e38:	f1c3 031f 	rsb	r3, r3, #31
 8004e3c:	617b      	str	r3, [r7, #20]
 8004e3e:	4921      	ldr	r1, [pc, #132]	; (8004ec4 <vTaskSwitchContext+0xb8>)
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	4613      	mov	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4413      	add	r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	440b      	add	r3, r1
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10a      	bne.n	8004e68 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e56:	f383 8811 	msr	BASEPRI, r3
 8004e5a:	f3bf 8f6f 	isb	sy
 8004e5e:	f3bf 8f4f 	dsb	sy
 8004e62:	607b      	str	r3, [r7, #4]
}
 8004e64:	bf00      	nop
 8004e66:	e7fe      	b.n	8004e66 <vTaskSwitchContext+0x5a>
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4413      	add	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4a14      	ldr	r2, [pc, #80]	; (8004ec4 <vTaskSwitchContext+0xb8>)
 8004e74:	4413      	add	r3, r2
 8004e76:	613b      	str	r3, [r7, #16]
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	605a      	str	r2, [r3, #4]
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	3308      	adds	r3, #8
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d104      	bne.n	8004e98 <vTaskSwitchContext+0x8c>
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	685a      	ldr	r2, [r3, #4]
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	605a      	str	r2, [r3, #4]
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	4a0a      	ldr	r2, [pc, #40]	; (8004ec8 <vTaskSwitchContext+0xbc>)
 8004ea0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004ea2:	4b09      	ldr	r3, [pc, #36]	; (8004ec8 <vTaskSwitchContext+0xbc>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	334c      	adds	r3, #76	; 0x4c
 8004ea8:	4a08      	ldr	r2, [pc, #32]	; (8004ecc <vTaskSwitchContext+0xc0>)
 8004eaa:	6013      	str	r3, [r2, #0]
}
 8004eac:	bf00      	nop
 8004eae:	371c      	adds	r7, #28
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bc80      	pop	{r7}
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	200009d0 	.word	0x200009d0
 8004ebc:	200009bc 	.word	0x200009bc
 8004ec0:	200009b0 	.word	0x200009b0
 8004ec4:	200008ac 	.word	0x200008ac
 8004ec8:	200008a8 	.word	0x200008a8
 8004ecc:	200001f8 	.word	0x200001f8

08004ed0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10a      	bne.n	8004ef6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee4:	f383 8811 	msr	BASEPRI, r3
 8004ee8:	f3bf 8f6f 	isb	sy
 8004eec:	f3bf 8f4f 	dsb	sy
 8004ef0:	60fb      	str	r3, [r7, #12]
}
 8004ef2:	bf00      	nop
 8004ef4:	e7fe      	b.n	8004ef4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ef6:	4b07      	ldr	r3, [pc, #28]	; (8004f14 <vTaskPlaceOnEventList+0x44>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	3318      	adds	r3, #24
 8004efc:	4619      	mov	r1, r3
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7fe ff84 	bl	8003e0c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004f04:	2101      	movs	r1, #1
 8004f06:	6838      	ldr	r0, [r7, #0]
 8004f08:	f000 fa6e 	bl	80053e8 <prvAddCurrentTaskToDelayedList>
}
 8004f0c:	bf00      	nop
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	200008a8 	.word	0x200008a8

08004f18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10a      	bne.n	8004f44 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f32:	f383 8811 	msr	BASEPRI, r3
 8004f36:	f3bf 8f6f 	isb	sy
 8004f3a:	f3bf 8f4f 	dsb	sy
 8004f3e:	60fb      	str	r3, [r7, #12]
}
 8004f40:	bf00      	nop
 8004f42:	e7fe      	b.n	8004f42 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	3318      	adds	r3, #24
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7fe ff97 	bl	8003e7c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f4e:	4b1d      	ldr	r3, [pc, #116]	; (8004fc4 <xTaskRemoveFromEventList+0xac>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d11c      	bne.n	8004f90 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	3304      	adds	r3, #4
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7fe ff8e 	bl	8003e7c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f64:	2201      	movs	r2, #1
 8004f66:	409a      	lsls	r2, r3
 8004f68:	4b17      	ldr	r3, [pc, #92]	; (8004fc8 <xTaskRemoveFromEventList+0xb0>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	4a16      	ldr	r2, [pc, #88]	; (8004fc8 <xTaskRemoveFromEventList+0xb0>)
 8004f70:	6013      	str	r3, [r2, #0]
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f76:	4613      	mov	r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4413      	add	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4a13      	ldr	r2, [pc, #76]	; (8004fcc <xTaskRemoveFromEventList+0xb4>)
 8004f80:	441a      	add	r2, r3
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	3304      	adds	r3, #4
 8004f86:	4619      	mov	r1, r3
 8004f88:	4610      	mov	r0, r2
 8004f8a:	f7fe ff1c 	bl	8003dc6 <vListInsertEnd>
 8004f8e:	e005      	b.n	8004f9c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	3318      	adds	r3, #24
 8004f94:	4619      	mov	r1, r3
 8004f96:	480e      	ldr	r0, [pc, #56]	; (8004fd0 <xTaskRemoveFromEventList+0xb8>)
 8004f98:	f7fe ff15 	bl	8003dc6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa0:	4b0c      	ldr	r3, [pc, #48]	; (8004fd4 <xTaskRemoveFromEventList+0xbc>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d905      	bls.n	8004fb6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004faa:	2301      	movs	r3, #1
 8004fac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004fae:	4b0a      	ldr	r3, [pc, #40]	; (8004fd8 <xTaskRemoveFromEventList+0xc0>)
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	601a      	str	r2, [r3, #0]
 8004fb4:	e001      	b.n	8004fba <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004fba:	697b      	ldr	r3, [r7, #20]
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3718      	adds	r7, #24
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	200009d0 	.word	0x200009d0
 8004fc8:	200009b0 	.word	0x200009b0
 8004fcc:	200008ac 	.word	0x200008ac
 8004fd0:	20000968 	.word	0x20000968
 8004fd4:	200008a8 	.word	0x200008a8
 8004fd8:	200009bc 	.word	0x200009bc

08004fdc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004fe4:	4b06      	ldr	r3, [pc, #24]	; (8005000 <vTaskInternalSetTimeOutState+0x24>)
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004fec:	4b05      	ldr	r3, [pc, #20]	; (8005004 <vTaskInternalSetTimeOutState+0x28>)
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	605a      	str	r2, [r3, #4]
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bc80      	pop	{r7}
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	200009c0 	.word	0x200009c0
 8005004:	200009ac 	.word	0x200009ac

08005008 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b088      	sub	sp, #32
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10a      	bne.n	800502e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501c:	f383 8811 	msr	BASEPRI, r3
 8005020:	f3bf 8f6f 	isb	sy
 8005024:	f3bf 8f4f 	dsb	sy
 8005028:	613b      	str	r3, [r7, #16]
}
 800502a:	bf00      	nop
 800502c:	e7fe      	b.n	800502c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10a      	bne.n	800504a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005038:	f383 8811 	msr	BASEPRI, r3
 800503c:	f3bf 8f6f 	isb	sy
 8005040:	f3bf 8f4f 	dsb	sy
 8005044:	60fb      	str	r3, [r7, #12]
}
 8005046:	bf00      	nop
 8005048:	e7fe      	b.n	8005048 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800504a:	f000 fb27 	bl	800569c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800504e:	4b1d      	ldr	r3, [pc, #116]	; (80050c4 <xTaskCheckForTimeOut+0xbc>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	69ba      	ldr	r2, [r7, #24]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005066:	d102      	bne.n	800506e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005068:	2300      	movs	r3, #0
 800506a:	61fb      	str	r3, [r7, #28]
 800506c:	e023      	b.n	80050b6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	4b15      	ldr	r3, [pc, #84]	; (80050c8 <xTaskCheckForTimeOut+0xc0>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	429a      	cmp	r2, r3
 8005078:	d007      	beq.n	800508a <xTaskCheckForTimeOut+0x82>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	69ba      	ldr	r2, [r7, #24]
 8005080:	429a      	cmp	r2, r3
 8005082:	d302      	bcc.n	800508a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005084:	2301      	movs	r3, #1
 8005086:	61fb      	str	r3, [r7, #28]
 8005088:	e015      	b.n	80050b6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	429a      	cmp	r2, r3
 8005092:	d20b      	bcs.n	80050ac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	1ad2      	subs	r2, r2, r3
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f7ff ff9b 	bl	8004fdc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80050a6:	2300      	movs	r3, #0
 80050a8:	61fb      	str	r3, [r7, #28]
 80050aa:	e004      	b.n	80050b6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	2200      	movs	r2, #0
 80050b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80050b2:	2301      	movs	r3, #1
 80050b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80050b6:	f000 fb21 	bl	80056fc <vPortExitCritical>

	return xReturn;
 80050ba:	69fb      	ldr	r3, [r7, #28]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3720      	adds	r7, #32
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	200009ac 	.word	0x200009ac
 80050c8:	200009c0 	.word	0x200009c0

080050cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80050cc:	b480      	push	{r7}
 80050ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80050d0:	4b03      	ldr	r3, [pc, #12]	; (80050e0 <vTaskMissedYield+0x14>)
 80050d2:	2201      	movs	r2, #1
 80050d4:	601a      	str	r2, [r3, #0]
}
 80050d6:	bf00      	nop
 80050d8:	46bd      	mov	sp, r7
 80050da:	bc80      	pop	{r7}
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	200009bc 	.word	0x200009bc

080050e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80050ec:	f000 f852 	bl	8005194 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80050f0:	4b06      	ldr	r3, [pc, #24]	; (800510c <prvIdleTask+0x28>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d9f9      	bls.n	80050ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80050f8:	4b05      	ldr	r3, [pc, #20]	; (8005110 <prvIdleTask+0x2c>)
 80050fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050fe:	601a      	str	r2, [r3, #0]
 8005100:	f3bf 8f4f 	dsb	sy
 8005104:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005108:	e7f0      	b.n	80050ec <prvIdleTask+0x8>
 800510a:	bf00      	nop
 800510c:	200008ac 	.word	0x200008ac
 8005110:	e000ed04 	.word	0xe000ed04

08005114 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800511a:	2300      	movs	r3, #0
 800511c:	607b      	str	r3, [r7, #4]
 800511e:	e00c      	b.n	800513a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	4613      	mov	r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4413      	add	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4a12      	ldr	r2, [pc, #72]	; (8005174 <prvInitialiseTaskLists+0x60>)
 800512c:	4413      	add	r3, r2
 800512e:	4618      	mov	r0, r3
 8005130:	f7fe fe1e 	bl	8003d70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	3301      	adds	r3, #1
 8005138:	607b      	str	r3, [r7, #4]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2b06      	cmp	r3, #6
 800513e:	d9ef      	bls.n	8005120 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005140:	480d      	ldr	r0, [pc, #52]	; (8005178 <prvInitialiseTaskLists+0x64>)
 8005142:	f7fe fe15 	bl	8003d70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005146:	480d      	ldr	r0, [pc, #52]	; (800517c <prvInitialiseTaskLists+0x68>)
 8005148:	f7fe fe12 	bl	8003d70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800514c:	480c      	ldr	r0, [pc, #48]	; (8005180 <prvInitialiseTaskLists+0x6c>)
 800514e:	f7fe fe0f 	bl	8003d70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005152:	480c      	ldr	r0, [pc, #48]	; (8005184 <prvInitialiseTaskLists+0x70>)
 8005154:	f7fe fe0c 	bl	8003d70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005158:	480b      	ldr	r0, [pc, #44]	; (8005188 <prvInitialiseTaskLists+0x74>)
 800515a:	f7fe fe09 	bl	8003d70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800515e:	4b0b      	ldr	r3, [pc, #44]	; (800518c <prvInitialiseTaskLists+0x78>)
 8005160:	4a05      	ldr	r2, [pc, #20]	; (8005178 <prvInitialiseTaskLists+0x64>)
 8005162:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005164:	4b0a      	ldr	r3, [pc, #40]	; (8005190 <prvInitialiseTaskLists+0x7c>)
 8005166:	4a05      	ldr	r2, [pc, #20]	; (800517c <prvInitialiseTaskLists+0x68>)
 8005168:	601a      	str	r2, [r3, #0]
}
 800516a:	bf00      	nop
 800516c:	3708      	adds	r7, #8
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	200008ac 	.word	0x200008ac
 8005178:	20000938 	.word	0x20000938
 800517c:	2000094c 	.word	0x2000094c
 8005180:	20000968 	.word	0x20000968
 8005184:	2000097c 	.word	0x2000097c
 8005188:	20000994 	.word	0x20000994
 800518c:	20000960 	.word	0x20000960
 8005190:	20000964 	.word	0x20000964

08005194 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800519a:	e019      	b.n	80051d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800519c:	f000 fa7e 	bl	800569c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80051a0:	4b10      	ldr	r3, [pc, #64]	; (80051e4 <prvCheckTasksWaitingTermination+0x50>)
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	3304      	adds	r3, #4
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7fe fe65 	bl	8003e7c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80051b2:	4b0d      	ldr	r3, [pc, #52]	; (80051e8 <prvCheckTasksWaitingTermination+0x54>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	3b01      	subs	r3, #1
 80051b8:	4a0b      	ldr	r2, [pc, #44]	; (80051e8 <prvCheckTasksWaitingTermination+0x54>)
 80051ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80051bc:	4b0b      	ldr	r3, [pc, #44]	; (80051ec <prvCheckTasksWaitingTermination+0x58>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	3b01      	subs	r3, #1
 80051c2:	4a0a      	ldr	r2, [pc, #40]	; (80051ec <prvCheckTasksWaitingTermination+0x58>)
 80051c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80051c6:	f000 fa99 	bl	80056fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 f810 	bl	80051f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80051d0:	4b06      	ldr	r3, [pc, #24]	; (80051ec <prvCheckTasksWaitingTermination+0x58>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1e1      	bne.n	800519c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80051d8:	bf00      	nop
 80051da:	bf00      	nop
 80051dc:	3708      	adds	r7, #8
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	2000097c 	.word	0x2000097c
 80051e8:	200009a8 	.word	0x200009a8
 80051ec:	20000990 	.word	0x20000990

080051f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	334c      	adds	r3, #76	; 0x4c
 80051fc:	4618      	mov	r0, r3
 80051fe:	f001 fb31 	bl	8006864 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005208:	2b00      	cmp	r3, #0
 800520a:	d108      	bne.n	800521e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005210:	4618      	mov	r0, r3
 8005212:	f000 fbc9 	bl	80059a8 <vPortFree>
				vPortFree( pxTCB );
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 fbc6 	bl	80059a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800521c:	e018      	b.n	8005250 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005224:	2b01      	cmp	r3, #1
 8005226:	d103      	bne.n	8005230 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 fbbd 	bl	80059a8 <vPortFree>
	}
 800522e:	e00f      	b.n	8005250 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005236:	2b02      	cmp	r3, #2
 8005238:	d00a      	beq.n	8005250 <prvDeleteTCB+0x60>
	__asm volatile
 800523a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523e:	f383 8811 	msr	BASEPRI, r3
 8005242:	f3bf 8f6f 	isb	sy
 8005246:	f3bf 8f4f 	dsb	sy
 800524a:	60fb      	str	r3, [r7, #12]
}
 800524c:	bf00      	nop
 800524e:	e7fe      	b.n	800524e <prvDeleteTCB+0x5e>
	}
 8005250:	bf00      	nop
 8005252:	3710      	adds	r7, #16
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800525e:	4b0e      	ldr	r3, [pc, #56]	; (8005298 <prvResetNextTaskUnblockTime+0x40>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d101      	bne.n	800526c <prvResetNextTaskUnblockTime+0x14>
 8005268:	2301      	movs	r3, #1
 800526a:	e000      	b.n	800526e <prvResetNextTaskUnblockTime+0x16>
 800526c:	2300      	movs	r3, #0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d004      	beq.n	800527c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005272:	4b0a      	ldr	r3, [pc, #40]	; (800529c <prvResetNextTaskUnblockTime+0x44>)
 8005274:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005278:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800527a:	e008      	b.n	800528e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800527c:	4b06      	ldr	r3, [pc, #24]	; (8005298 <prvResetNextTaskUnblockTime+0x40>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	4a04      	ldr	r2, [pc, #16]	; (800529c <prvResetNextTaskUnblockTime+0x44>)
 800528c:	6013      	str	r3, [r2, #0]
}
 800528e:	bf00      	nop
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	bc80      	pop	{r7}
 8005296:	4770      	bx	lr
 8005298:	20000960 	.word	0x20000960
 800529c:	200009c8 	.word	0x200009c8

080052a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80052a6:	4b0b      	ldr	r3, [pc, #44]	; (80052d4 <xTaskGetSchedulerState+0x34>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d102      	bne.n	80052b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80052ae:	2301      	movs	r3, #1
 80052b0:	607b      	str	r3, [r7, #4]
 80052b2:	e008      	b.n	80052c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052b4:	4b08      	ldr	r3, [pc, #32]	; (80052d8 <xTaskGetSchedulerState+0x38>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d102      	bne.n	80052c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80052bc:	2302      	movs	r3, #2
 80052be:	607b      	str	r3, [r7, #4]
 80052c0:	e001      	b.n	80052c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80052c2:	2300      	movs	r3, #0
 80052c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80052c6:	687b      	ldr	r3, [r7, #4]
	}
 80052c8:	4618      	mov	r0, r3
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bc80      	pop	{r7}
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	200009b4 	.word	0x200009b4
 80052d8:	200009d0 	.word	0x200009d0

080052dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b086      	sub	sp, #24
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80052e8:	2300      	movs	r3, #0
 80052ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d06e      	beq.n	80053d0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80052f2:	4b3a      	ldr	r3, [pc, #232]	; (80053dc <xTaskPriorityDisinherit+0x100>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d00a      	beq.n	8005312 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80052fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005300:	f383 8811 	msr	BASEPRI, r3
 8005304:	f3bf 8f6f 	isb	sy
 8005308:	f3bf 8f4f 	dsb	sy
 800530c:	60fb      	str	r3, [r7, #12]
}
 800530e:	bf00      	nop
 8005310:	e7fe      	b.n	8005310 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10a      	bne.n	8005330 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800531a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531e:	f383 8811 	msr	BASEPRI, r3
 8005322:	f3bf 8f6f 	isb	sy
 8005326:	f3bf 8f4f 	dsb	sy
 800532a:	60bb      	str	r3, [r7, #8]
}
 800532c:	bf00      	nop
 800532e:	e7fe      	b.n	800532e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005334:	1e5a      	subs	r2, r3, #1
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005342:	429a      	cmp	r2, r3
 8005344:	d044      	beq.n	80053d0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800534a:	2b00      	cmp	r3, #0
 800534c:	d140      	bne.n	80053d0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	3304      	adds	r3, #4
 8005352:	4618      	mov	r0, r3
 8005354:	f7fe fd92 	bl	8003e7c <uxListRemove>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d115      	bne.n	800538a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005362:	491f      	ldr	r1, [pc, #124]	; (80053e0 <xTaskPriorityDisinherit+0x104>)
 8005364:	4613      	mov	r3, r2
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	4413      	add	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	440b      	add	r3, r1
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10a      	bne.n	800538a <xTaskPriorityDisinherit+0xae>
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005378:	2201      	movs	r2, #1
 800537a:	fa02 f303 	lsl.w	r3, r2, r3
 800537e:	43da      	mvns	r2, r3
 8005380:	4b18      	ldr	r3, [pc, #96]	; (80053e4 <xTaskPriorityDisinherit+0x108>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4013      	ands	r3, r2
 8005386:	4a17      	ldr	r2, [pc, #92]	; (80053e4 <xTaskPriorityDisinherit+0x108>)
 8005388:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005396:	f1c3 0207 	rsb	r2, r3, #7
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a2:	2201      	movs	r2, #1
 80053a4:	409a      	lsls	r2, r3
 80053a6:	4b0f      	ldr	r3, [pc, #60]	; (80053e4 <xTaskPriorityDisinherit+0x108>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	4a0d      	ldr	r2, [pc, #52]	; (80053e4 <xTaskPriorityDisinherit+0x108>)
 80053ae:	6013      	str	r3, [r2, #0]
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b4:	4613      	mov	r3, r2
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	4413      	add	r3, r2
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	4a08      	ldr	r2, [pc, #32]	; (80053e0 <xTaskPriorityDisinherit+0x104>)
 80053be:	441a      	add	r2, r3
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	3304      	adds	r3, #4
 80053c4:	4619      	mov	r1, r3
 80053c6:	4610      	mov	r0, r2
 80053c8:	f7fe fcfd 	bl	8003dc6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80053cc:	2301      	movs	r3, #1
 80053ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80053d0:	697b      	ldr	r3, [r7, #20]
	}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3718      	adds	r7, #24
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	200008a8 	.word	0x200008a8
 80053e0:	200008ac 	.word	0x200008ac
 80053e4:	200009b0 	.word	0x200009b0

080053e8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80053f2:	4b29      	ldr	r3, [pc, #164]	; (8005498 <prvAddCurrentTaskToDelayedList+0xb0>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053f8:	4b28      	ldr	r3, [pc, #160]	; (800549c <prvAddCurrentTaskToDelayedList+0xb4>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	3304      	adds	r3, #4
 80053fe:	4618      	mov	r0, r3
 8005400:	f7fe fd3c 	bl	8003e7c <uxListRemove>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10b      	bne.n	8005422 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800540a:	4b24      	ldr	r3, [pc, #144]	; (800549c <prvAddCurrentTaskToDelayedList+0xb4>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005410:	2201      	movs	r2, #1
 8005412:	fa02 f303 	lsl.w	r3, r2, r3
 8005416:	43da      	mvns	r2, r3
 8005418:	4b21      	ldr	r3, [pc, #132]	; (80054a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4013      	ands	r3, r2
 800541e:	4a20      	ldr	r2, [pc, #128]	; (80054a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005420:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005428:	d10a      	bne.n	8005440 <prvAddCurrentTaskToDelayedList+0x58>
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d007      	beq.n	8005440 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005430:	4b1a      	ldr	r3, [pc, #104]	; (800549c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	3304      	adds	r3, #4
 8005436:	4619      	mov	r1, r3
 8005438:	481a      	ldr	r0, [pc, #104]	; (80054a4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800543a:	f7fe fcc4 	bl	8003dc6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800543e:	e026      	b.n	800548e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4413      	add	r3, r2
 8005446:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005448:	4b14      	ldr	r3, [pc, #80]	; (800549c <prvAddCurrentTaskToDelayedList+0xb4>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	429a      	cmp	r2, r3
 8005456:	d209      	bcs.n	800546c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005458:	4b13      	ldr	r3, [pc, #76]	; (80054a8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	4b0f      	ldr	r3, [pc, #60]	; (800549c <prvAddCurrentTaskToDelayedList+0xb4>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	3304      	adds	r3, #4
 8005462:	4619      	mov	r1, r3
 8005464:	4610      	mov	r0, r2
 8005466:	f7fe fcd1 	bl	8003e0c <vListInsert>
}
 800546a:	e010      	b.n	800548e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800546c:	4b0f      	ldr	r3, [pc, #60]	; (80054ac <prvAddCurrentTaskToDelayedList+0xc4>)
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	4b0a      	ldr	r3, [pc, #40]	; (800549c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	3304      	adds	r3, #4
 8005476:	4619      	mov	r1, r3
 8005478:	4610      	mov	r0, r2
 800547a:	f7fe fcc7 	bl	8003e0c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800547e:	4b0c      	ldr	r3, [pc, #48]	; (80054b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	429a      	cmp	r2, r3
 8005486:	d202      	bcs.n	800548e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005488:	4a09      	ldr	r2, [pc, #36]	; (80054b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	6013      	str	r3, [r2, #0]
}
 800548e:	bf00      	nop
 8005490:	3710      	adds	r7, #16
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	200009ac 	.word	0x200009ac
 800549c:	200008a8 	.word	0x200008a8
 80054a0:	200009b0 	.word	0x200009b0
 80054a4:	20000994 	.word	0x20000994
 80054a8:	20000964 	.word	0x20000964
 80054ac:	20000960 	.word	0x20000960
 80054b0:	200009c8 	.word	0x200009c8

080054b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80054b4:	b480      	push	{r7}
 80054b6:	b085      	sub	sp, #20
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	3b04      	subs	r3, #4
 80054c4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80054cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	3b04      	subs	r3, #4
 80054d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	f023 0201 	bic.w	r2, r3, #1
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	3b04      	subs	r3, #4
 80054e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80054e4:	4a08      	ldr	r2, [pc, #32]	; (8005508 <pxPortInitialiseStack+0x54>)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	3b14      	subs	r3, #20
 80054ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	3b20      	subs	r3, #32
 80054fa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80054fc:	68fb      	ldr	r3, [r7, #12]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3714      	adds	r7, #20
 8005502:	46bd      	mov	sp, r7
 8005504:	bc80      	pop	{r7}
 8005506:	4770      	bx	lr
 8005508:	0800550d 	.word	0x0800550d

0800550c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005512:	2300      	movs	r3, #0
 8005514:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005516:	4b12      	ldr	r3, [pc, #72]	; (8005560 <prvTaskExitError+0x54>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800551e:	d00a      	beq.n	8005536 <prvTaskExitError+0x2a>
	__asm volatile
 8005520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005524:	f383 8811 	msr	BASEPRI, r3
 8005528:	f3bf 8f6f 	isb	sy
 800552c:	f3bf 8f4f 	dsb	sy
 8005530:	60fb      	str	r3, [r7, #12]
}
 8005532:	bf00      	nop
 8005534:	e7fe      	b.n	8005534 <prvTaskExitError+0x28>
	__asm volatile
 8005536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553a:	f383 8811 	msr	BASEPRI, r3
 800553e:	f3bf 8f6f 	isb	sy
 8005542:	f3bf 8f4f 	dsb	sy
 8005546:	60bb      	str	r3, [r7, #8]
}
 8005548:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800554a:	bf00      	nop
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d0fc      	beq.n	800554c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005552:	bf00      	nop
 8005554:	bf00      	nop
 8005556:	3714      	adds	r7, #20
 8005558:	46bd      	mov	sp, r7
 800555a:	bc80      	pop	{r7}
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	200001f4 	.word	0x200001f4
	...

08005570 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005570:	4b07      	ldr	r3, [pc, #28]	; (8005590 <pxCurrentTCBConst2>)
 8005572:	6819      	ldr	r1, [r3, #0]
 8005574:	6808      	ldr	r0, [r1, #0]
 8005576:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800557a:	f380 8809 	msr	PSP, r0
 800557e:	f3bf 8f6f 	isb	sy
 8005582:	f04f 0000 	mov.w	r0, #0
 8005586:	f380 8811 	msr	BASEPRI, r0
 800558a:	f04e 0e0d 	orr.w	lr, lr, #13
 800558e:	4770      	bx	lr

08005590 <pxCurrentTCBConst2>:
 8005590:	200008a8 	.word	0x200008a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005594:	bf00      	nop
 8005596:	bf00      	nop

08005598 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005598:	4806      	ldr	r0, [pc, #24]	; (80055b4 <prvPortStartFirstTask+0x1c>)
 800559a:	6800      	ldr	r0, [r0, #0]
 800559c:	6800      	ldr	r0, [r0, #0]
 800559e:	f380 8808 	msr	MSP, r0
 80055a2:	b662      	cpsie	i
 80055a4:	b661      	cpsie	f
 80055a6:	f3bf 8f4f 	dsb	sy
 80055aa:	f3bf 8f6f 	isb	sy
 80055ae:	df00      	svc	0
 80055b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80055b2:	bf00      	nop
 80055b4:	e000ed08 	.word	0xe000ed08

080055b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80055be:	4b32      	ldr	r3, [pc, #200]	; (8005688 <xPortStartScheduler+0xd0>)
 80055c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	22ff      	movs	r2, #255	; 0xff
 80055ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80055d8:	78fb      	ldrb	r3, [r7, #3]
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80055e0:	b2da      	uxtb	r2, r3
 80055e2:	4b2a      	ldr	r3, [pc, #168]	; (800568c <xPortStartScheduler+0xd4>)
 80055e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80055e6:	4b2a      	ldr	r3, [pc, #168]	; (8005690 <xPortStartScheduler+0xd8>)
 80055e8:	2207      	movs	r2, #7
 80055ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80055ec:	e009      	b.n	8005602 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80055ee:	4b28      	ldr	r3, [pc, #160]	; (8005690 <xPortStartScheduler+0xd8>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	3b01      	subs	r3, #1
 80055f4:	4a26      	ldr	r2, [pc, #152]	; (8005690 <xPortStartScheduler+0xd8>)
 80055f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80055f8:	78fb      	ldrb	r3, [r7, #3]
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	005b      	lsls	r3, r3, #1
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005602:	78fb      	ldrb	r3, [r7, #3]
 8005604:	b2db      	uxtb	r3, r3
 8005606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800560a:	2b80      	cmp	r3, #128	; 0x80
 800560c:	d0ef      	beq.n	80055ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800560e:	4b20      	ldr	r3, [pc, #128]	; (8005690 <xPortStartScheduler+0xd8>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f1c3 0307 	rsb	r3, r3, #7
 8005616:	2b04      	cmp	r3, #4
 8005618:	d00a      	beq.n	8005630 <xPortStartScheduler+0x78>
	__asm volatile
 800561a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561e:	f383 8811 	msr	BASEPRI, r3
 8005622:	f3bf 8f6f 	isb	sy
 8005626:	f3bf 8f4f 	dsb	sy
 800562a:	60bb      	str	r3, [r7, #8]
}
 800562c:	bf00      	nop
 800562e:	e7fe      	b.n	800562e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005630:	4b17      	ldr	r3, [pc, #92]	; (8005690 <xPortStartScheduler+0xd8>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	021b      	lsls	r3, r3, #8
 8005636:	4a16      	ldr	r2, [pc, #88]	; (8005690 <xPortStartScheduler+0xd8>)
 8005638:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800563a:	4b15      	ldr	r3, [pc, #84]	; (8005690 <xPortStartScheduler+0xd8>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005642:	4a13      	ldr	r2, [pc, #76]	; (8005690 <xPortStartScheduler+0xd8>)
 8005644:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	b2da      	uxtb	r2, r3
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800564e:	4b11      	ldr	r3, [pc, #68]	; (8005694 <xPortStartScheduler+0xdc>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a10      	ldr	r2, [pc, #64]	; (8005694 <xPortStartScheduler+0xdc>)
 8005654:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005658:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800565a:	4b0e      	ldr	r3, [pc, #56]	; (8005694 <xPortStartScheduler+0xdc>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a0d      	ldr	r2, [pc, #52]	; (8005694 <xPortStartScheduler+0xdc>)
 8005660:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005664:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005666:	f000 f8b9 	bl	80057dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800566a:	4b0b      	ldr	r3, [pc, #44]	; (8005698 <xPortStartScheduler+0xe0>)
 800566c:	2200      	movs	r2, #0
 800566e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005670:	f7ff ff92 	bl	8005598 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005674:	f7ff fbca 	bl	8004e0c <vTaskSwitchContext>
	prvTaskExitError();
 8005678:	f7ff ff48 	bl	800550c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	e000e400 	.word	0xe000e400
 800568c:	200009d4 	.word	0x200009d4
 8005690:	200009d8 	.word	0x200009d8
 8005694:	e000ed20 	.word	0xe000ed20
 8005698:	200001f4 	.word	0x200001f4

0800569c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
	__asm volatile
 80056a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a6:	f383 8811 	msr	BASEPRI, r3
 80056aa:	f3bf 8f6f 	isb	sy
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	607b      	str	r3, [r7, #4]
}
 80056b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80056b6:	4b0f      	ldr	r3, [pc, #60]	; (80056f4 <vPortEnterCritical+0x58>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	3301      	adds	r3, #1
 80056bc:	4a0d      	ldr	r2, [pc, #52]	; (80056f4 <vPortEnterCritical+0x58>)
 80056be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80056c0:	4b0c      	ldr	r3, [pc, #48]	; (80056f4 <vPortEnterCritical+0x58>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d10f      	bne.n	80056e8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80056c8:	4b0b      	ldr	r3, [pc, #44]	; (80056f8 <vPortEnterCritical+0x5c>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00a      	beq.n	80056e8 <vPortEnterCritical+0x4c>
	__asm volatile
 80056d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d6:	f383 8811 	msr	BASEPRI, r3
 80056da:	f3bf 8f6f 	isb	sy
 80056de:	f3bf 8f4f 	dsb	sy
 80056e2:	603b      	str	r3, [r7, #0]
}
 80056e4:	bf00      	nop
 80056e6:	e7fe      	b.n	80056e6 <vPortEnterCritical+0x4a>
	}
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bc80      	pop	{r7}
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	200001f4 	.word	0x200001f4
 80056f8:	e000ed04 	.word	0xe000ed04

080056fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005702:	4b11      	ldr	r3, [pc, #68]	; (8005748 <vPortExitCritical+0x4c>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10a      	bne.n	8005720 <vPortExitCritical+0x24>
	__asm volatile
 800570a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570e:	f383 8811 	msr	BASEPRI, r3
 8005712:	f3bf 8f6f 	isb	sy
 8005716:	f3bf 8f4f 	dsb	sy
 800571a:	607b      	str	r3, [r7, #4]
}
 800571c:	bf00      	nop
 800571e:	e7fe      	b.n	800571e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005720:	4b09      	ldr	r3, [pc, #36]	; (8005748 <vPortExitCritical+0x4c>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	3b01      	subs	r3, #1
 8005726:	4a08      	ldr	r2, [pc, #32]	; (8005748 <vPortExitCritical+0x4c>)
 8005728:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800572a:	4b07      	ldr	r3, [pc, #28]	; (8005748 <vPortExitCritical+0x4c>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d105      	bne.n	800573e <vPortExitCritical+0x42>
 8005732:	2300      	movs	r3, #0
 8005734:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800573c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800573e:	bf00      	nop
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	bc80      	pop	{r7}
 8005746:	4770      	bx	lr
 8005748:	200001f4 	.word	0x200001f4
 800574c:	00000000 	.word	0x00000000

08005750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005750:	f3ef 8009 	mrs	r0, PSP
 8005754:	f3bf 8f6f 	isb	sy
 8005758:	4b0d      	ldr	r3, [pc, #52]	; (8005790 <pxCurrentTCBConst>)
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005760:	6010      	str	r0, [r2, #0]
 8005762:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005766:	f04f 0050 	mov.w	r0, #80	; 0x50
 800576a:	f380 8811 	msr	BASEPRI, r0
 800576e:	f7ff fb4d 	bl	8004e0c <vTaskSwitchContext>
 8005772:	f04f 0000 	mov.w	r0, #0
 8005776:	f380 8811 	msr	BASEPRI, r0
 800577a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800577e:	6819      	ldr	r1, [r3, #0]
 8005780:	6808      	ldr	r0, [r1, #0]
 8005782:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005786:	f380 8809 	msr	PSP, r0
 800578a:	f3bf 8f6f 	isb	sy
 800578e:	4770      	bx	lr

08005790 <pxCurrentTCBConst>:
 8005790:	200008a8 	.word	0x200008a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005794:	bf00      	nop
 8005796:	bf00      	nop

08005798 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
	__asm volatile
 800579e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a2:	f383 8811 	msr	BASEPRI, r3
 80057a6:	f3bf 8f6f 	isb	sy
 80057aa:	f3bf 8f4f 	dsb	sy
 80057ae:	607b      	str	r3, [r7, #4]
}
 80057b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80057b2:	f7ff fa6d 	bl	8004c90 <xTaskIncrementTick>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d003      	beq.n	80057c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80057bc:	4b06      	ldr	r3, [pc, #24]	; (80057d8 <SysTick_Handler+0x40>)
 80057be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057c2:	601a      	str	r2, [r3, #0]
 80057c4:	2300      	movs	r3, #0
 80057c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	f383 8811 	msr	BASEPRI, r3
}
 80057ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80057d0:	bf00      	nop
 80057d2:	3708      	adds	r7, #8
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	e000ed04 	.word	0xe000ed04

080057dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80057dc:	b480      	push	{r7}
 80057de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80057e0:	4b0a      	ldr	r3, [pc, #40]	; (800580c <vPortSetupTimerInterrupt+0x30>)
 80057e2:	2200      	movs	r2, #0
 80057e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80057e6:	4b0a      	ldr	r3, [pc, #40]	; (8005810 <vPortSetupTimerInterrupt+0x34>)
 80057e8:	2200      	movs	r2, #0
 80057ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80057ec:	4b09      	ldr	r3, [pc, #36]	; (8005814 <vPortSetupTimerInterrupt+0x38>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a09      	ldr	r2, [pc, #36]	; (8005818 <vPortSetupTimerInterrupt+0x3c>)
 80057f2:	fba2 2303 	umull	r2, r3, r2, r3
 80057f6:	099b      	lsrs	r3, r3, #6
 80057f8:	4a08      	ldr	r2, [pc, #32]	; (800581c <vPortSetupTimerInterrupt+0x40>)
 80057fa:	3b01      	subs	r3, #1
 80057fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80057fe:	4b03      	ldr	r3, [pc, #12]	; (800580c <vPortSetupTimerInterrupt+0x30>)
 8005800:	2207      	movs	r2, #7
 8005802:	601a      	str	r2, [r3, #0]
}
 8005804:	bf00      	nop
 8005806:	46bd      	mov	sp, r7
 8005808:	bc80      	pop	{r7}
 800580a:	4770      	bx	lr
 800580c:	e000e010 	.word	0xe000e010
 8005810:	e000e018 	.word	0xe000e018
 8005814:	200001e8 	.word	0x200001e8
 8005818:	10624dd3 	.word	0x10624dd3
 800581c:	e000e014 	.word	0xe000e014

08005820 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b08a      	sub	sp, #40	; 0x28
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005828:	2300      	movs	r3, #0
 800582a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800582c:	f7ff f986 	bl	8004b3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005830:	4b58      	ldr	r3, [pc, #352]	; (8005994 <pvPortMalloc+0x174>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d101      	bne.n	800583c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005838:	f000 f910 	bl	8005a5c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800583c:	4b56      	ldr	r3, [pc, #344]	; (8005998 <pvPortMalloc+0x178>)
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4013      	ands	r3, r2
 8005844:	2b00      	cmp	r3, #0
 8005846:	f040 808e 	bne.w	8005966 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d01d      	beq.n	800588c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005850:	2208      	movs	r2, #8
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4413      	add	r3, r2
 8005856:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f003 0307 	and.w	r3, r3, #7
 800585e:	2b00      	cmp	r3, #0
 8005860:	d014      	beq.n	800588c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f023 0307 	bic.w	r3, r3, #7
 8005868:	3308      	adds	r3, #8
 800586a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f003 0307 	and.w	r3, r3, #7
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00a      	beq.n	800588c <pvPortMalloc+0x6c>
	__asm volatile
 8005876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587a:	f383 8811 	msr	BASEPRI, r3
 800587e:	f3bf 8f6f 	isb	sy
 8005882:	f3bf 8f4f 	dsb	sy
 8005886:	617b      	str	r3, [r7, #20]
}
 8005888:	bf00      	nop
 800588a:	e7fe      	b.n	800588a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d069      	beq.n	8005966 <pvPortMalloc+0x146>
 8005892:	4b42      	ldr	r3, [pc, #264]	; (800599c <pvPortMalloc+0x17c>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	429a      	cmp	r2, r3
 800589a:	d864      	bhi.n	8005966 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800589c:	4b40      	ldr	r3, [pc, #256]	; (80059a0 <pvPortMalloc+0x180>)
 800589e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80058a0:	4b3f      	ldr	r3, [pc, #252]	; (80059a0 <pvPortMalloc+0x180>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058a6:	e004      	b.n	80058b2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80058a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058aa:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d903      	bls.n	80058c4 <pvPortMalloc+0xa4>
 80058bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1f1      	bne.n	80058a8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80058c4:	4b33      	ldr	r3, [pc, #204]	; (8005994 <pvPortMalloc+0x174>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d04b      	beq.n	8005966 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80058ce:	6a3b      	ldr	r3, [r7, #32]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2208      	movs	r2, #8
 80058d4:	4413      	add	r3, r2
 80058d6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80058d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	6a3b      	ldr	r3, [r7, #32]
 80058de:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80058e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e2:	685a      	ldr	r2, [r3, #4]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	1ad2      	subs	r2, r2, r3
 80058e8:	2308      	movs	r3, #8
 80058ea:	005b      	lsls	r3, r3, #1
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d91f      	bls.n	8005930 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80058f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4413      	add	r3, r2
 80058f6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	f003 0307 	and.w	r3, r3, #7
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00a      	beq.n	8005918 <pvPortMalloc+0xf8>
	__asm volatile
 8005902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005906:	f383 8811 	msr	BASEPRI, r3
 800590a:	f3bf 8f6f 	isb	sy
 800590e:	f3bf 8f4f 	dsb	sy
 8005912:	613b      	str	r3, [r7, #16]
}
 8005914:	bf00      	nop
 8005916:	e7fe      	b.n	8005916 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	1ad2      	subs	r2, r2, r3
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800592a:	69b8      	ldr	r0, [r7, #24]
 800592c:	f000 f8f8 	bl	8005b20 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005930:	4b1a      	ldr	r3, [pc, #104]	; (800599c <pvPortMalloc+0x17c>)
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	4a18      	ldr	r2, [pc, #96]	; (800599c <pvPortMalloc+0x17c>)
 800593c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800593e:	4b17      	ldr	r3, [pc, #92]	; (800599c <pvPortMalloc+0x17c>)
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	4b18      	ldr	r3, [pc, #96]	; (80059a4 <pvPortMalloc+0x184>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	429a      	cmp	r2, r3
 8005948:	d203      	bcs.n	8005952 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800594a:	4b14      	ldr	r3, [pc, #80]	; (800599c <pvPortMalloc+0x17c>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a15      	ldr	r2, [pc, #84]	; (80059a4 <pvPortMalloc+0x184>)
 8005950:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	685a      	ldr	r2, [r3, #4]
 8005956:	4b10      	ldr	r3, [pc, #64]	; (8005998 <pvPortMalloc+0x178>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	431a      	orrs	r2, r3
 800595c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005962:	2200      	movs	r2, #0
 8005964:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005966:	f7ff f8f7 	bl	8004b58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	f003 0307 	and.w	r3, r3, #7
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00a      	beq.n	800598a <pvPortMalloc+0x16a>
	__asm volatile
 8005974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005978:	f383 8811 	msr	BASEPRI, r3
 800597c:	f3bf 8f6f 	isb	sy
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	60fb      	str	r3, [r7, #12]
}
 8005986:	bf00      	nop
 8005988:	e7fe      	b.n	8005988 <pvPortMalloc+0x168>
	return pvReturn;
 800598a:	69fb      	ldr	r3, [r7, #28]
}
 800598c:	4618      	mov	r0, r3
 800598e:	3728      	adds	r7, #40	; 0x28
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	200015e4 	.word	0x200015e4
 8005998:	200015f0 	.word	0x200015f0
 800599c:	200015e8 	.word	0x200015e8
 80059a0:	200015dc 	.word	0x200015dc
 80059a4:	200015ec 	.word	0x200015ec

080059a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b086      	sub	sp, #24
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d048      	beq.n	8005a4c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80059ba:	2308      	movs	r3, #8
 80059bc:	425b      	negs	r3, r3
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	4413      	add	r3, r2
 80059c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	4b21      	ldr	r3, [pc, #132]	; (8005a54 <vPortFree+0xac>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4013      	ands	r3, r2
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d10a      	bne.n	80059ec <vPortFree+0x44>
	__asm volatile
 80059d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059da:	f383 8811 	msr	BASEPRI, r3
 80059de:	f3bf 8f6f 	isb	sy
 80059e2:	f3bf 8f4f 	dsb	sy
 80059e6:	60fb      	str	r3, [r7, #12]
}
 80059e8:	bf00      	nop
 80059ea:	e7fe      	b.n	80059ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00a      	beq.n	8005a0a <vPortFree+0x62>
	__asm volatile
 80059f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f8:	f383 8811 	msr	BASEPRI, r3
 80059fc:	f3bf 8f6f 	isb	sy
 8005a00:	f3bf 8f4f 	dsb	sy
 8005a04:	60bb      	str	r3, [r7, #8]
}
 8005a06:	bf00      	nop
 8005a08:	e7fe      	b.n	8005a08 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	685a      	ldr	r2, [r3, #4]
 8005a0e:	4b11      	ldr	r3, [pc, #68]	; (8005a54 <vPortFree+0xac>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4013      	ands	r3, r2
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d019      	beq.n	8005a4c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d115      	bne.n	8005a4c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	685a      	ldr	r2, [r3, #4]
 8005a24:	4b0b      	ldr	r3, [pc, #44]	; (8005a54 <vPortFree+0xac>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	43db      	mvns	r3, r3
 8005a2a:	401a      	ands	r2, r3
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005a30:	f7ff f884 	bl	8004b3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	4b07      	ldr	r3, [pc, #28]	; (8005a58 <vPortFree+0xb0>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	4a06      	ldr	r2, [pc, #24]	; (8005a58 <vPortFree+0xb0>)
 8005a40:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005a42:	6938      	ldr	r0, [r7, #16]
 8005a44:	f000 f86c 	bl	8005b20 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005a48:	f7ff f886 	bl	8004b58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005a4c:	bf00      	nop
 8005a4e:	3718      	adds	r7, #24
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	200015f0 	.word	0x200015f0
 8005a58:	200015e8 	.word	0x200015e8

08005a5c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a62:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005a66:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005a68:	4b27      	ldr	r3, [pc, #156]	; (8005b08 <prvHeapInit+0xac>)
 8005a6a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f003 0307 	and.w	r3, r3, #7
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00c      	beq.n	8005a90 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	3307      	adds	r3, #7
 8005a7a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f023 0307 	bic.w	r3, r3, #7
 8005a82:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a84:	68ba      	ldr	r2, [r7, #8]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	4a1f      	ldr	r2, [pc, #124]	; (8005b08 <prvHeapInit+0xac>)
 8005a8c:	4413      	add	r3, r2
 8005a8e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a94:	4a1d      	ldr	r2, [pc, #116]	; (8005b0c <prvHeapInit+0xb0>)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a9a:	4b1c      	ldr	r3, [pc, #112]	; (8005b0c <prvHeapInit+0xb0>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005aa8:	2208      	movs	r2, #8
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	1a9b      	subs	r3, r3, r2
 8005aae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f023 0307 	bic.w	r3, r3, #7
 8005ab6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	4a15      	ldr	r2, [pc, #84]	; (8005b10 <prvHeapInit+0xb4>)
 8005abc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005abe:	4b14      	ldr	r3, [pc, #80]	; (8005b10 <prvHeapInit+0xb4>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005ac6:	4b12      	ldr	r3, [pc, #72]	; (8005b10 <prvHeapInit+0xb4>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2200      	movs	r2, #0
 8005acc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	1ad2      	subs	r2, r2, r3
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005adc:	4b0c      	ldr	r3, [pc, #48]	; (8005b10 <prvHeapInit+0xb4>)
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	4a0a      	ldr	r2, [pc, #40]	; (8005b14 <prvHeapInit+0xb8>)
 8005aea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	4a09      	ldr	r2, [pc, #36]	; (8005b18 <prvHeapInit+0xbc>)
 8005af2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005af4:	4b09      	ldr	r3, [pc, #36]	; (8005b1c <prvHeapInit+0xc0>)
 8005af6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005afa:	601a      	str	r2, [r3, #0]
}
 8005afc:	bf00      	nop
 8005afe:	3714      	adds	r7, #20
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bc80      	pop	{r7}
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	200009dc 	.word	0x200009dc
 8005b0c:	200015dc 	.word	0x200015dc
 8005b10:	200015e4 	.word	0x200015e4
 8005b14:	200015ec 	.word	0x200015ec
 8005b18:	200015e8 	.word	0x200015e8
 8005b1c:	200015f0 	.word	0x200015f0

08005b20 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005b28:	4b27      	ldr	r3, [pc, #156]	; (8005bc8 <prvInsertBlockIntoFreeList+0xa8>)
 8005b2a:	60fb      	str	r3, [r7, #12]
 8005b2c:	e002      	b.n	8005b34 <prvInsertBlockIntoFreeList+0x14>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	60fb      	str	r3, [r7, #12]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d8f7      	bhi.n	8005b2e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	68ba      	ldr	r2, [r7, #8]
 8005b48:	4413      	add	r3, r2
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d108      	bne.n	8005b62 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	685a      	ldr	r2, [r3, #4]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	441a      	add	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	68ba      	ldr	r2, [r7, #8]
 8005b6c:	441a      	add	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d118      	bne.n	8005ba8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	4b14      	ldr	r3, [pc, #80]	; (8005bcc <prvInsertBlockIntoFreeList+0xac>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d00d      	beq.n	8005b9e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685a      	ldr	r2, [r3, #4]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	441a      	add	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	601a      	str	r2, [r3, #0]
 8005b9c:	e008      	b.n	8005bb0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b9e:	4b0b      	ldr	r3, [pc, #44]	; (8005bcc <prvInsertBlockIntoFreeList+0xac>)
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	601a      	str	r2, [r3, #0]
 8005ba6:	e003      	b.n	8005bb0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d002      	beq.n	8005bbe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bbe:	bf00      	nop
 8005bc0:	3714      	adds	r7, #20
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bc80      	pop	{r7}
 8005bc6:	4770      	bx	lr
 8005bc8:	200015dc 	.word	0x200015dc
 8005bcc:	200015e4 	.word	0x200015e4

08005bd0 <atoi>:
 8005bd0:	220a      	movs	r2, #10
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	f000 bfda 	b.w	8006b8c <strtol>

08005bd8 <__errno>:
 8005bd8:	4b01      	ldr	r3, [pc, #4]	; (8005be0 <__errno+0x8>)
 8005bda:	6818      	ldr	r0, [r3, #0]
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	200001f8 	.word	0x200001f8

08005be4 <std>:
 8005be4:	2300      	movs	r3, #0
 8005be6:	b510      	push	{r4, lr}
 8005be8:	4604      	mov	r4, r0
 8005bea:	e9c0 3300 	strd	r3, r3, [r0]
 8005bee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005bf2:	6083      	str	r3, [r0, #8]
 8005bf4:	8181      	strh	r1, [r0, #12]
 8005bf6:	6643      	str	r3, [r0, #100]	; 0x64
 8005bf8:	81c2      	strh	r2, [r0, #14]
 8005bfa:	6183      	str	r3, [r0, #24]
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	2208      	movs	r2, #8
 8005c00:	305c      	adds	r0, #92	; 0x5c
 8005c02:	f000 fa3d 	bl	8006080 <memset>
 8005c06:	4b05      	ldr	r3, [pc, #20]	; (8005c1c <std+0x38>)
 8005c08:	6224      	str	r4, [r4, #32]
 8005c0a:	6263      	str	r3, [r4, #36]	; 0x24
 8005c0c:	4b04      	ldr	r3, [pc, #16]	; (8005c20 <std+0x3c>)
 8005c0e:	62a3      	str	r3, [r4, #40]	; 0x28
 8005c10:	4b04      	ldr	r3, [pc, #16]	; (8005c24 <std+0x40>)
 8005c12:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005c14:	4b04      	ldr	r3, [pc, #16]	; (8005c28 <std+0x44>)
 8005c16:	6323      	str	r3, [r4, #48]	; 0x30
 8005c18:	bd10      	pop	{r4, pc}
 8005c1a:	bf00      	nop
 8005c1c:	0800693d 	.word	0x0800693d
 8005c20:	08006963 	.word	0x08006963
 8005c24:	0800699b 	.word	0x0800699b
 8005c28:	080069bf 	.word	0x080069bf

08005c2c <_cleanup_r>:
 8005c2c:	4901      	ldr	r1, [pc, #4]	; (8005c34 <_cleanup_r+0x8>)
 8005c2e:	f000 b8af 	b.w	8005d90 <_fwalk_reent>
 8005c32:	bf00      	nop
 8005c34:	08007349 	.word	0x08007349

08005c38 <__sfmoreglue>:
 8005c38:	2268      	movs	r2, #104	; 0x68
 8005c3a:	b570      	push	{r4, r5, r6, lr}
 8005c3c:	1e4d      	subs	r5, r1, #1
 8005c3e:	4355      	muls	r5, r2
 8005c40:	460e      	mov	r6, r1
 8005c42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005c46:	f000 fcfd 	bl	8006644 <_malloc_r>
 8005c4a:	4604      	mov	r4, r0
 8005c4c:	b140      	cbz	r0, 8005c60 <__sfmoreglue+0x28>
 8005c4e:	2100      	movs	r1, #0
 8005c50:	e9c0 1600 	strd	r1, r6, [r0]
 8005c54:	300c      	adds	r0, #12
 8005c56:	60a0      	str	r0, [r4, #8]
 8005c58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005c5c:	f000 fa10 	bl	8006080 <memset>
 8005c60:	4620      	mov	r0, r4
 8005c62:	bd70      	pop	{r4, r5, r6, pc}

08005c64 <__sfp_lock_acquire>:
 8005c64:	4801      	ldr	r0, [pc, #4]	; (8005c6c <__sfp_lock_acquire+0x8>)
 8005c66:	f000 b9e9 	b.w	800603c <__retarget_lock_acquire_recursive>
 8005c6a:	bf00      	nop
 8005c6c:	200015f6 	.word	0x200015f6

08005c70 <__sfp_lock_release>:
 8005c70:	4801      	ldr	r0, [pc, #4]	; (8005c78 <__sfp_lock_release+0x8>)
 8005c72:	f000 b9e5 	b.w	8006040 <__retarget_lock_release_recursive>
 8005c76:	bf00      	nop
 8005c78:	200015f6 	.word	0x200015f6

08005c7c <__sinit_lock_acquire>:
 8005c7c:	4801      	ldr	r0, [pc, #4]	; (8005c84 <__sinit_lock_acquire+0x8>)
 8005c7e:	f000 b9dd 	b.w	800603c <__retarget_lock_acquire_recursive>
 8005c82:	bf00      	nop
 8005c84:	200015f7 	.word	0x200015f7

08005c88 <__sinit_lock_release>:
 8005c88:	4801      	ldr	r0, [pc, #4]	; (8005c90 <__sinit_lock_release+0x8>)
 8005c8a:	f000 b9d9 	b.w	8006040 <__retarget_lock_release_recursive>
 8005c8e:	bf00      	nop
 8005c90:	200015f7 	.word	0x200015f7

08005c94 <__sinit>:
 8005c94:	b510      	push	{r4, lr}
 8005c96:	4604      	mov	r4, r0
 8005c98:	f7ff fff0 	bl	8005c7c <__sinit_lock_acquire>
 8005c9c:	69a3      	ldr	r3, [r4, #24]
 8005c9e:	b11b      	cbz	r3, 8005ca8 <__sinit+0x14>
 8005ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ca4:	f7ff bff0 	b.w	8005c88 <__sinit_lock_release>
 8005ca8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005cac:	6523      	str	r3, [r4, #80]	; 0x50
 8005cae:	4b13      	ldr	r3, [pc, #76]	; (8005cfc <__sinit+0x68>)
 8005cb0:	4a13      	ldr	r2, [pc, #76]	; (8005d00 <__sinit+0x6c>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	62a2      	str	r2, [r4, #40]	; 0x28
 8005cb6:	42a3      	cmp	r3, r4
 8005cb8:	bf08      	it	eq
 8005cba:	2301      	moveq	r3, #1
 8005cbc:	4620      	mov	r0, r4
 8005cbe:	bf08      	it	eq
 8005cc0:	61a3      	streq	r3, [r4, #24]
 8005cc2:	f000 f81f 	bl	8005d04 <__sfp>
 8005cc6:	6060      	str	r0, [r4, #4]
 8005cc8:	4620      	mov	r0, r4
 8005cca:	f000 f81b 	bl	8005d04 <__sfp>
 8005cce:	60a0      	str	r0, [r4, #8]
 8005cd0:	4620      	mov	r0, r4
 8005cd2:	f000 f817 	bl	8005d04 <__sfp>
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	2104      	movs	r1, #4
 8005cda:	60e0      	str	r0, [r4, #12]
 8005cdc:	6860      	ldr	r0, [r4, #4]
 8005cde:	f7ff ff81 	bl	8005be4 <std>
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	2109      	movs	r1, #9
 8005ce6:	68a0      	ldr	r0, [r4, #8]
 8005ce8:	f7ff ff7c 	bl	8005be4 <std>
 8005cec:	2202      	movs	r2, #2
 8005cee:	2112      	movs	r1, #18
 8005cf0:	68e0      	ldr	r0, [r4, #12]
 8005cf2:	f7ff ff77 	bl	8005be4 <std>
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	61a3      	str	r3, [r4, #24]
 8005cfa:	e7d1      	b.n	8005ca0 <__sinit+0xc>
 8005cfc:	08008930 	.word	0x08008930
 8005d00:	08005c2d 	.word	0x08005c2d

08005d04 <__sfp>:
 8005d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d06:	4607      	mov	r7, r0
 8005d08:	f7ff ffac 	bl	8005c64 <__sfp_lock_acquire>
 8005d0c:	4b1e      	ldr	r3, [pc, #120]	; (8005d88 <__sfp+0x84>)
 8005d0e:	681e      	ldr	r6, [r3, #0]
 8005d10:	69b3      	ldr	r3, [r6, #24]
 8005d12:	b913      	cbnz	r3, 8005d1a <__sfp+0x16>
 8005d14:	4630      	mov	r0, r6
 8005d16:	f7ff ffbd 	bl	8005c94 <__sinit>
 8005d1a:	3648      	adds	r6, #72	; 0x48
 8005d1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005d20:	3b01      	subs	r3, #1
 8005d22:	d503      	bpl.n	8005d2c <__sfp+0x28>
 8005d24:	6833      	ldr	r3, [r6, #0]
 8005d26:	b30b      	cbz	r3, 8005d6c <__sfp+0x68>
 8005d28:	6836      	ldr	r6, [r6, #0]
 8005d2a:	e7f7      	b.n	8005d1c <__sfp+0x18>
 8005d2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005d30:	b9d5      	cbnz	r5, 8005d68 <__sfp+0x64>
 8005d32:	4b16      	ldr	r3, [pc, #88]	; (8005d8c <__sfp+0x88>)
 8005d34:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005d38:	60e3      	str	r3, [r4, #12]
 8005d3a:	6665      	str	r5, [r4, #100]	; 0x64
 8005d3c:	f000 f97c 	bl	8006038 <__retarget_lock_init_recursive>
 8005d40:	f7ff ff96 	bl	8005c70 <__sfp_lock_release>
 8005d44:	2208      	movs	r2, #8
 8005d46:	4629      	mov	r1, r5
 8005d48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005d4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005d50:	6025      	str	r5, [r4, #0]
 8005d52:	61a5      	str	r5, [r4, #24]
 8005d54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005d58:	f000 f992 	bl	8006080 <memset>
 8005d5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005d60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005d64:	4620      	mov	r0, r4
 8005d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d68:	3468      	adds	r4, #104	; 0x68
 8005d6a:	e7d9      	b.n	8005d20 <__sfp+0x1c>
 8005d6c:	2104      	movs	r1, #4
 8005d6e:	4638      	mov	r0, r7
 8005d70:	f7ff ff62 	bl	8005c38 <__sfmoreglue>
 8005d74:	4604      	mov	r4, r0
 8005d76:	6030      	str	r0, [r6, #0]
 8005d78:	2800      	cmp	r0, #0
 8005d7a:	d1d5      	bne.n	8005d28 <__sfp+0x24>
 8005d7c:	f7ff ff78 	bl	8005c70 <__sfp_lock_release>
 8005d80:	230c      	movs	r3, #12
 8005d82:	603b      	str	r3, [r7, #0]
 8005d84:	e7ee      	b.n	8005d64 <__sfp+0x60>
 8005d86:	bf00      	nop
 8005d88:	08008930 	.word	0x08008930
 8005d8c:	ffff0001 	.word	0xffff0001

08005d90 <_fwalk_reent>:
 8005d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d94:	4606      	mov	r6, r0
 8005d96:	4688      	mov	r8, r1
 8005d98:	2700      	movs	r7, #0
 8005d9a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005d9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005da2:	f1b9 0901 	subs.w	r9, r9, #1
 8005da6:	d505      	bpl.n	8005db4 <_fwalk_reent+0x24>
 8005da8:	6824      	ldr	r4, [r4, #0]
 8005daa:	2c00      	cmp	r4, #0
 8005dac:	d1f7      	bne.n	8005d9e <_fwalk_reent+0xe>
 8005dae:	4638      	mov	r0, r7
 8005db0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005db4:	89ab      	ldrh	r3, [r5, #12]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d907      	bls.n	8005dca <_fwalk_reent+0x3a>
 8005dba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	d003      	beq.n	8005dca <_fwalk_reent+0x3a>
 8005dc2:	4629      	mov	r1, r5
 8005dc4:	4630      	mov	r0, r6
 8005dc6:	47c0      	blx	r8
 8005dc8:	4307      	orrs	r7, r0
 8005dca:	3568      	adds	r5, #104	; 0x68
 8005dcc:	e7e9      	b.n	8005da2 <_fwalk_reent+0x12>
	...

08005dd0 <__libc_init_array>:
 8005dd0:	b570      	push	{r4, r5, r6, lr}
 8005dd2:	2600      	movs	r6, #0
 8005dd4:	4d0c      	ldr	r5, [pc, #48]	; (8005e08 <__libc_init_array+0x38>)
 8005dd6:	4c0d      	ldr	r4, [pc, #52]	; (8005e0c <__libc_init_array+0x3c>)
 8005dd8:	1b64      	subs	r4, r4, r5
 8005dda:	10a4      	asrs	r4, r4, #2
 8005ddc:	42a6      	cmp	r6, r4
 8005dde:	d109      	bne.n	8005df4 <__libc_init_array+0x24>
 8005de0:	f002 fc8c 	bl	80086fc <_init>
 8005de4:	2600      	movs	r6, #0
 8005de6:	4d0a      	ldr	r5, [pc, #40]	; (8005e10 <__libc_init_array+0x40>)
 8005de8:	4c0a      	ldr	r4, [pc, #40]	; (8005e14 <__libc_init_array+0x44>)
 8005dea:	1b64      	subs	r4, r4, r5
 8005dec:	10a4      	asrs	r4, r4, #2
 8005dee:	42a6      	cmp	r6, r4
 8005df0:	d105      	bne.n	8005dfe <__libc_init_array+0x2e>
 8005df2:	bd70      	pop	{r4, r5, r6, pc}
 8005df4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005df8:	4798      	blx	r3
 8005dfa:	3601      	adds	r6, #1
 8005dfc:	e7ee      	b.n	8005ddc <__libc_init_array+0xc>
 8005dfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e02:	4798      	blx	r3
 8005e04:	3601      	adds	r6, #1
 8005e06:	e7f2      	b.n	8005dee <__libc_init_array+0x1e>
 8005e08:	08008c94 	.word	0x08008c94
 8005e0c:	08008c94 	.word	0x08008c94
 8005e10:	08008c94 	.word	0x08008c94
 8005e14:	08008c98 	.word	0x08008c98

08005e18 <localtime>:
 8005e18:	b538      	push	{r3, r4, r5, lr}
 8005e1a:	4b0b      	ldr	r3, [pc, #44]	; (8005e48 <localtime+0x30>)
 8005e1c:	4604      	mov	r4, r0
 8005e1e:	681d      	ldr	r5, [r3, #0]
 8005e20:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8005e22:	b953      	cbnz	r3, 8005e3a <localtime+0x22>
 8005e24:	2024      	movs	r0, #36	; 0x24
 8005e26:	f000 f90d 	bl	8006044 <malloc>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	63e8      	str	r0, [r5, #60]	; 0x3c
 8005e2e:	b920      	cbnz	r0, 8005e3a <localtime+0x22>
 8005e30:	2132      	movs	r1, #50	; 0x32
 8005e32:	4b06      	ldr	r3, [pc, #24]	; (8005e4c <localtime+0x34>)
 8005e34:	4806      	ldr	r0, [pc, #24]	; (8005e50 <localtime+0x38>)
 8005e36:	f001 f9c3 	bl	80071c0 <__assert_func>
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8005e3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e42:	f000 b807 	b.w	8005e54 <localtime_r>
 8005e46:	bf00      	nop
 8005e48:	200001f8 	.word	0x200001f8
 8005e4c:	08008934 	.word	0x08008934
 8005e50:	0800894b 	.word	0x0800894b

08005e54 <localtime_r>:
 8005e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e58:	460c      	mov	r4, r1
 8005e5a:	4680      	mov	r8, r0
 8005e5c:	f001 fb06 	bl	800746c <__gettzinfo>
 8005e60:	4621      	mov	r1, r4
 8005e62:	4605      	mov	r5, r0
 8005e64:	4640      	mov	r0, r8
 8005e66:	f001 fb05 	bl	8007474 <gmtime_r>
 8005e6a:	6943      	ldr	r3, [r0, #20]
 8005e6c:	4604      	mov	r4, r0
 8005e6e:	0799      	lsls	r1, r3, #30
 8005e70:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 8005e74:	d105      	bne.n	8005e82 <localtime_r+0x2e>
 8005e76:	2264      	movs	r2, #100	; 0x64
 8005e78:	fb97 f3f2 	sdiv	r3, r7, r2
 8005e7c:	fb02 7313 	mls	r3, r2, r3, r7
 8005e80:	bb73      	cbnz	r3, 8005ee0 <localtime_r+0x8c>
 8005e82:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8005e86:	fb97 f6f3 	sdiv	r6, r7, r3
 8005e8a:	fb03 7616 	mls	r6, r3, r6, r7
 8005e8e:	fab6 f386 	clz	r3, r6
 8005e92:	095b      	lsrs	r3, r3, #5
 8005e94:	2230      	movs	r2, #48	; 0x30
 8005e96:	4e66      	ldr	r6, [pc, #408]	; (8006030 <localtime_r+0x1dc>)
 8005e98:	fb02 6603 	mla	r6, r2, r3, r6
 8005e9c:	f000 ff2a 	bl	8006cf4 <__tz_lock>
 8005ea0:	f000 ff34 	bl	8006d0c <_tzset_unlocked>
 8005ea4:	4b63      	ldr	r3, [pc, #396]	; (8006034 <localtime_r+0x1e0>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	b34b      	cbz	r3, 8005efe <localtime_r+0xaa>
 8005eaa:	686b      	ldr	r3, [r5, #4]
 8005eac:	42bb      	cmp	r3, r7
 8005eae:	d119      	bne.n	8005ee4 <localtime_r+0x90>
 8005eb0:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005eb4:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8005eb8:	682f      	ldr	r7, [r5, #0]
 8005eba:	b9df      	cbnz	r7, 8005ef4 <localtime_r+0xa0>
 8005ebc:	4282      	cmp	r2, r0
 8005ebe:	eb73 0101 	sbcs.w	r1, r3, r1
 8005ec2:	da23      	bge.n	8005f0c <localtime_r+0xb8>
 8005ec4:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8005ec8:	4282      	cmp	r2, r0
 8005eca:	eb73 0701 	sbcs.w	r7, r3, r1
 8005ece:	bfb4      	ite	lt
 8005ed0:	2701      	movlt	r7, #1
 8005ed2:	2700      	movge	r7, #0
 8005ed4:	4282      	cmp	r2, r0
 8005ed6:	418b      	sbcs	r3, r1
 8005ed8:	6227      	str	r7, [r4, #32]
 8005eda:	db19      	blt.n	8005f10 <localtime_r+0xbc>
 8005edc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005ede:	e018      	b.n	8005f12 <localtime_r+0xbe>
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e7d7      	b.n	8005e94 <localtime_r+0x40>
 8005ee4:	4638      	mov	r0, r7
 8005ee6:	f000 fe5b 	bl	8006ba0 <__tzcalc_limits>
 8005eea:	2800      	cmp	r0, #0
 8005eec:	d1e0      	bne.n	8005eb0 <localtime_r+0x5c>
 8005eee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ef2:	e004      	b.n	8005efe <localtime_r+0xaa>
 8005ef4:	4282      	cmp	r2, r0
 8005ef6:	eb73 0101 	sbcs.w	r1, r3, r1
 8005efa:	da02      	bge.n	8005f02 <localtime_r+0xae>
 8005efc:	2300      	movs	r3, #0
 8005efe:	6223      	str	r3, [r4, #32]
 8005f00:	e7ec      	b.n	8005edc <localtime_r+0x88>
 8005f02:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8005f06:	4282      	cmp	r2, r0
 8005f08:	418b      	sbcs	r3, r1
 8005f0a:	daf7      	bge.n	8005efc <localtime_r+0xa8>
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	6223      	str	r3, [r4, #32]
 8005f10:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8005f12:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8005f16:	fb93 f5f2 	sdiv	r5, r3, r2
 8005f1a:	203c      	movs	r0, #60	; 0x3c
 8005f1c:	fb02 3315 	mls	r3, r2, r5, r3
 8005f20:	fb93 f2f0 	sdiv	r2, r3, r0
 8005f24:	fb00 3012 	mls	r0, r0, r2, r3
 8005f28:	6861      	ldr	r1, [r4, #4]
 8005f2a:	6823      	ldr	r3, [r4, #0]
 8005f2c:	1a89      	subs	r1, r1, r2
 8005f2e:	68a2      	ldr	r2, [r4, #8]
 8005f30:	1a1b      	subs	r3, r3, r0
 8005f32:	1b52      	subs	r2, r2, r5
 8005f34:	2b3b      	cmp	r3, #59	; 0x3b
 8005f36:	6023      	str	r3, [r4, #0]
 8005f38:	6061      	str	r1, [r4, #4]
 8005f3a:	60a2      	str	r2, [r4, #8]
 8005f3c:	dd34      	ble.n	8005fa8 <localtime_r+0x154>
 8005f3e:	3101      	adds	r1, #1
 8005f40:	6061      	str	r1, [r4, #4]
 8005f42:	3b3c      	subs	r3, #60	; 0x3c
 8005f44:	6023      	str	r3, [r4, #0]
 8005f46:	6863      	ldr	r3, [r4, #4]
 8005f48:	2b3b      	cmp	r3, #59	; 0x3b
 8005f4a:	dd33      	ble.n	8005fb4 <localtime_r+0x160>
 8005f4c:	3201      	adds	r2, #1
 8005f4e:	60a2      	str	r2, [r4, #8]
 8005f50:	3b3c      	subs	r3, #60	; 0x3c
 8005f52:	6063      	str	r3, [r4, #4]
 8005f54:	68a3      	ldr	r3, [r4, #8]
 8005f56:	2b17      	cmp	r3, #23
 8005f58:	dd32      	ble.n	8005fc0 <localtime_r+0x16c>
 8005f5a:	69e2      	ldr	r2, [r4, #28]
 8005f5c:	3b18      	subs	r3, #24
 8005f5e:	3201      	adds	r2, #1
 8005f60:	61e2      	str	r2, [r4, #28]
 8005f62:	69a2      	ldr	r2, [r4, #24]
 8005f64:	60a3      	str	r3, [r4, #8]
 8005f66:	3201      	adds	r2, #1
 8005f68:	2a06      	cmp	r2, #6
 8005f6a:	bfc8      	it	gt
 8005f6c:	2200      	movgt	r2, #0
 8005f6e:	61a2      	str	r2, [r4, #24]
 8005f70:	68e2      	ldr	r2, [r4, #12]
 8005f72:	6923      	ldr	r3, [r4, #16]
 8005f74:	3201      	adds	r2, #1
 8005f76:	60e2      	str	r2, [r4, #12]
 8005f78:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8005f7c:	428a      	cmp	r2, r1
 8005f7e:	dd0e      	ble.n	8005f9e <localtime_r+0x14a>
 8005f80:	2b0b      	cmp	r3, #11
 8005f82:	eba2 0201 	sub.w	r2, r2, r1
 8005f86:	60e2      	str	r2, [r4, #12]
 8005f88:	f103 0201 	add.w	r2, r3, #1
 8005f8c:	bf05      	ittet	eq
 8005f8e:	2200      	moveq	r2, #0
 8005f90:	6963      	ldreq	r3, [r4, #20]
 8005f92:	6122      	strne	r2, [r4, #16]
 8005f94:	3301      	addeq	r3, #1
 8005f96:	bf02      	ittt	eq
 8005f98:	6122      	streq	r2, [r4, #16]
 8005f9a:	6163      	streq	r3, [r4, #20]
 8005f9c:	61e2      	streq	r2, [r4, #28]
 8005f9e:	f000 feaf 	bl	8006d00 <__tz_unlock>
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	dacc      	bge.n	8005f46 <localtime_r+0xf2>
 8005fac:	3901      	subs	r1, #1
 8005fae:	6061      	str	r1, [r4, #4]
 8005fb0:	333c      	adds	r3, #60	; 0x3c
 8005fb2:	e7c7      	b.n	8005f44 <localtime_r+0xf0>
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	dacd      	bge.n	8005f54 <localtime_r+0x100>
 8005fb8:	3a01      	subs	r2, #1
 8005fba:	60a2      	str	r2, [r4, #8]
 8005fbc:	333c      	adds	r3, #60	; 0x3c
 8005fbe:	e7c8      	b.n	8005f52 <localtime_r+0xfe>
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	daec      	bge.n	8005f9e <localtime_r+0x14a>
 8005fc4:	69e2      	ldr	r2, [r4, #28]
 8005fc6:	3318      	adds	r3, #24
 8005fc8:	3a01      	subs	r2, #1
 8005fca:	61e2      	str	r2, [r4, #28]
 8005fcc:	69a2      	ldr	r2, [r4, #24]
 8005fce:	60a3      	str	r3, [r4, #8]
 8005fd0:	3a01      	subs	r2, #1
 8005fd2:	bf48      	it	mi
 8005fd4:	2206      	movmi	r2, #6
 8005fd6:	61a2      	str	r2, [r4, #24]
 8005fd8:	68e2      	ldr	r2, [r4, #12]
 8005fda:	3a01      	subs	r2, #1
 8005fdc:	60e2      	str	r2, [r4, #12]
 8005fde:	2a00      	cmp	r2, #0
 8005fe0:	d1dd      	bne.n	8005f9e <localtime_r+0x14a>
 8005fe2:	6923      	ldr	r3, [r4, #16]
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	d405      	bmi.n	8005ff4 <localtime_r+0x1a0>
 8005fe8:	6123      	str	r3, [r4, #16]
 8005fea:	6923      	ldr	r3, [r4, #16]
 8005fec:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8005ff0:	60e3      	str	r3, [r4, #12]
 8005ff2:	e7d4      	b.n	8005f9e <localtime_r+0x14a>
 8005ff4:	230b      	movs	r3, #11
 8005ff6:	6123      	str	r3, [r4, #16]
 8005ff8:	6963      	ldr	r3, [r4, #20]
 8005ffa:	1e5a      	subs	r2, r3, #1
 8005ffc:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8006000:	6162      	str	r2, [r4, #20]
 8006002:	079a      	lsls	r2, r3, #30
 8006004:	d105      	bne.n	8006012 <localtime_r+0x1be>
 8006006:	2164      	movs	r1, #100	; 0x64
 8006008:	fb93 f2f1 	sdiv	r2, r3, r1
 800600c:	fb01 3212 	mls	r2, r1, r2, r3
 8006010:	b962      	cbnz	r2, 800602c <localtime_r+0x1d8>
 8006012:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006016:	fb93 f1f2 	sdiv	r1, r3, r2
 800601a:	fb02 3311 	mls	r3, r2, r1, r3
 800601e:	fab3 f383 	clz	r3, r3
 8006022:	095b      	lsrs	r3, r3, #5
 8006024:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8006028:	61e3      	str	r3, [r4, #28]
 800602a:	e7de      	b.n	8005fea <localtime_r+0x196>
 800602c:	2301      	movs	r3, #1
 800602e:	e7f9      	b.n	8006024 <localtime_r+0x1d0>
 8006030:	08008a08 	.word	0x08008a08
 8006034:	20001624 	.word	0x20001624

08006038 <__retarget_lock_init_recursive>:
 8006038:	4770      	bx	lr

0800603a <__retarget_lock_acquire>:
 800603a:	4770      	bx	lr

0800603c <__retarget_lock_acquire_recursive>:
 800603c:	4770      	bx	lr

0800603e <__retarget_lock_release>:
 800603e:	4770      	bx	lr

08006040 <__retarget_lock_release_recursive>:
 8006040:	4770      	bx	lr
	...

08006044 <malloc>:
 8006044:	4b02      	ldr	r3, [pc, #8]	; (8006050 <malloc+0xc>)
 8006046:	4601      	mov	r1, r0
 8006048:	6818      	ldr	r0, [r3, #0]
 800604a:	f000 bafb 	b.w	8006644 <_malloc_r>
 800604e:	bf00      	nop
 8006050:	200001f8 	.word	0x200001f8

08006054 <free>:
 8006054:	4b02      	ldr	r3, [pc, #8]	; (8006060 <free+0xc>)
 8006056:	4601      	mov	r1, r0
 8006058:	6818      	ldr	r0, [r3, #0]
 800605a:	f000 ba8b 	b.w	8006574 <_free_r>
 800605e:	bf00      	nop
 8006060:	200001f8 	.word	0x200001f8

08006064 <memcpy>:
 8006064:	440a      	add	r2, r1
 8006066:	4291      	cmp	r1, r2
 8006068:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800606c:	d100      	bne.n	8006070 <memcpy+0xc>
 800606e:	4770      	bx	lr
 8006070:	b510      	push	{r4, lr}
 8006072:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006076:	4291      	cmp	r1, r2
 8006078:	f803 4f01 	strb.w	r4, [r3, #1]!
 800607c:	d1f9      	bne.n	8006072 <memcpy+0xe>
 800607e:	bd10      	pop	{r4, pc}

08006080 <memset>:
 8006080:	4603      	mov	r3, r0
 8006082:	4402      	add	r2, r0
 8006084:	4293      	cmp	r3, r2
 8006086:	d100      	bne.n	800608a <memset+0xa>
 8006088:	4770      	bx	lr
 800608a:	f803 1b01 	strb.w	r1, [r3], #1
 800608e:	e7f9      	b.n	8006084 <memset+0x4>

08006090 <validate_structure>:
 8006090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006092:	6801      	ldr	r1, [r0, #0]
 8006094:	4604      	mov	r4, r0
 8006096:	293b      	cmp	r1, #59	; 0x3b
 8006098:	d911      	bls.n	80060be <validate_structure+0x2e>
 800609a:	223c      	movs	r2, #60	; 0x3c
 800609c:	4668      	mov	r0, sp
 800609e:	f001 f8bd 	bl	800721c <div>
 80060a2:	9a01      	ldr	r2, [sp, #4]
 80060a4:	6863      	ldr	r3, [r4, #4]
 80060a6:	9900      	ldr	r1, [sp, #0]
 80060a8:	2a00      	cmp	r2, #0
 80060aa:	440b      	add	r3, r1
 80060ac:	6063      	str	r3, [r4, #4]
 80060ae:	bfbb      	ittet	lt
 80060b0:	323c      	addlt	r2, #60	; 0x3c
 80060b2:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 80060b6:	6022      	strge	r2, [r4, #0]
 80060b8:	6022      	strlt	r2, [r4, #0]
 80060ba:	bfb8      	it	lt
 80060bc:	6063      	strlt	r3, [r4, #4]
 80060be:	6861      	ldr	r1, [r4, #4]
 80060c0:	293b      	cmp	r1, #59	; 0x3b
 80060c2:	d911      	bls.n	80060e8 <validate_structure+0x58>
 80060c4:	223c      	movs	r2, #60	; 0x3c
 80060c6:	4668      	mov	r0, sp
 80060c8:	f001 f8a8 	bl	800721c <div>
 80060cc:	9a01      	ldr	r2, [sp, #4]
 80060ce:	68a3      	ldr	r3, [r4, #8]
 80060d0:	9900      	ldr	r1, [sp, #0]
 80060d2:	2a00      	cmp	r2, #0
 80060d4:	440b      	add	r3, r1
 80060d6:	60a3      	str	r3, [r4, #8]
 80060d8:	bfbb      	ittet	lt
 80060da:	323c      	addlt	r2, #60	; 0x3c
 80060dc:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 80060e0:	6062      	strge	r2, [r4, #4]
 80060e2:	6062      	strlt	r2, [r4, #4]
 80060e4:	bfb8      	it	lt
 80060e6:	60a3      	strlt	r3, [r4, #8]
 80060e8:	68a1      	ldr	r1, [r4, #8]
 80060ea:	2917      	cmp	r1, #23
 80060ec:	d911      	bls.n	8006112 <validate_structure+0x82>
 80060ee:	2218      	movs	r2, #24
 80060f0:	4668      	mov	r0, sp
 80060f2:	f001 f893 	bl	800721c <div>
 80060f6:	9a01      	ldr	r2, [sp, #4]
 80060f8:	68e3      	ldr	r3, [r4, #12]
 80060fa:	9900      	ldr	r1, [sp, #0]
 80060fc:	2a00      	cmp	r2, #0
 80060fe:	440b      	add	r3, r1
 8006100:	60e3      	str	r3, [r4, #12]
 8006102:	bfbb      	ittet	lt
 8006104:	3218      	addlt	r2, #24
 8006106:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 800610a:	60a2      	strge	r2, [r4, #8]
 800610c:	60a2      	strlt	r2, [r4, #8]
 800610e:	bfb8      	it	lt
 8006110:	60e3      	strlt	r3, [r4, #12]
 8006112:	6921      	ldr	r1, [r4, #16]
 8006114:	290b      	cmp	r1, #11
 8006116:	d911      	bls.n	800613c <validate_structure+0xac>
 8006118:	220c      	movs	r2, #12
 800611a:	4668      	mov	r0, sp
 800611c:	f001 f87e 	bl	800721c <div>
 8006120:	9a01      	ldr	r2, [sp, #4]
 8006122:	6963      	ldr	r3, [r4, #20]
 8006124:	9900      	ldr	r1, [sp, #0]
 8006126:	2a00      	cmp	r2, #0
 8006128:	440b      	add	r3, r1
 800612a:	6163      	str	r3, [r4, #20]
 800612c:	bfbb      	ittet	lt
 800612e:	320c      	addlt	r2, #12
 8006130:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 8006134:	6122      	strge	r2, [r4, #16]
 8006136:	6122      	strlt	r2, [r4, #16]
 8006138:	bfb8      	it	lt
 800613a:	6163      	strlt	r3, [r4, #20]
 800613c:	6963      	ldr	r3, [r4, #20]
 800613e:	0798      	lsls	r0, r3, #30
 8006140:	d120      	bne.n	8006184 <validate_structure+0xf4>
 8006142:	2164      	movs	r1, #100	; 0x64
 8006144:	fb93 f2f1 	sdiv	r2, r3, r1
 8006148:	fb01 3212 	mls	r2, r1, r2, r3
 800614c:	b9e2      	cbnz	r2, 8006188 <validate_structure+0xf8>
 800614e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006152:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8006156:	fb93 f1f2 	sdiv	r1, r3, r2
 800615a:	fb02 3311 	mls	r3, r2, r1, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	bf14      	ite	ne
 8006162:	231c      	movne	r3, #28
 8006164:	231d      	moveq	r3, #29
 8006166:	68e2      	ldr	r2, [r4, #12]
 8006168:	2a00      	cmp	r2, #0
 800616a:	dc0f      	bgt.n	800618c <validate_structure+0xfc>
 800616c:	260b      	movs	r6, #11
 800616e:	2064      	movs	r0, #100	; 0x64
 8006170:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8006174:	4f31      	ldr	r7, [pc, #196]	; (800623c <validate_structure+0x1ac>)
 8006176:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800617a:	f1bc 0f00 	cmp.w	ip, #0
 800617e:	dd31      	ble.n	80061e4 <validate_structure+0x154>
 8006180:	b003      	add	sp, #12
 8006182:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006184:	231c      	movs	r3, #28
 8006186:	e7ee      	b.n	8006166 <validate_structure+0xd6>
 8006188:	231d      	movs	r3, #29
 800618a:	e7ec      	b.n	8006166 <validate_structure+0xd6>
 800618c:	2700      	movs	r7, #0
 800618e:	2064      	movs	r0, #100	; 0x64
 8006190:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8006194:	4e29      	ldr	r6, [pc, #164]	; (800623c <validate_structure+0x1ac>)
 8006196:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800619a:	2a01      	cmp	r2, #1
 800619c:	bf0c      	ite	eq
 800619e:	469c      	moveq	ip, r3
 80061a0:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 80061a4:	4561      	cmp	r1, ip
 80061a6:	ddeb      	ble.n	8006180 <validate_structure+0xf0>
 80061a8:	3201      	adds	r2, #1
 80061aa:	eba1 010c 	sub.w	r1, r1, ip
 80061ae:	2a0c      	cmp	r2, #12
 80061b0:	60e1      	str	r1, [r4, #12]
 80061b2:	6122      	str	r2, [r4, #16]
 80061b4:	d1ef      	bne.n	8006196 <validate_structure+0x106>
 80061b6:	6963      	ldr	r3, [r4, #20]
 80061b8:	1c5a      	adds	r2, r3, #1
 80061ba:	0791      	lsls	r1, r2, #30
 80061bc:	e9c4 7204 	strd	r7, r2, [r4, #16]
 80061c0:	d137      	bne.n	8006232 <validate_structure+0x1a2>
 80061c2:	fb92 f1f0 	sdiv	r1, r2, r0
 80061c6:	fb00 2211 	mls	r2, r0, r1, r2
 80061ca:	2a00      	cmp	r2, #0
 80061cc:	d133      	bne.n	8006236 <validate_structure+0x1a6>
 80061ce:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 80061d2:	fb93 f2f5 	sdiv	r2, r3, r5
 80061d6:	fb05 3312 	mls	r3, r5, r2, r3
 80061da:	2b00      	cmp	r3, #0
 80061dc:	bf14      	ite	ne
 80061de:	231c      	movne	r3, #28
 80061e0:	231d      	moveq	r3, #29
 80061e2:	e7d8      	b.n	8006196 <validate_structure+0x106>
 80061e4:	6921      	ldr	r1, [r4, #16]
 80061e6:	3901      	subs	r1, #1
 80061e8:	6121      	str	r1, [r4, #16]
 80061ea:	3101      	adds	r1, #1
 80061ec:	d114      	bne.n	8006218 <validate_structure+0x188>
 80061ee:	6963      	ldr	r3, [r4, #20]
 80061f0:	1e5a      	subs	r2, r3, #1
 80061f2:	0791      	lsls	r1, r2, #30
 80061f4:	e9c4 6204 	strd	r6, r2, [r4, #16]
 80061f8:	d117      	bne.n	800622a <validate_structure+0x19a>
 80061fa:	fb92 f1f0 	sdiv	r1, r2, r0
 80061fe:	fb00 2211 	mls	r2, r0, r1, r2
 8006202:	b9a2      	cbnz	r2, 800622e <validate_structure+0x19e>
 8006204:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8006208:	fb93 f2f5 	sdiv	r2, r3, r5
 800620c:	fb05 3312 	mls	r3, r5, r2, r3
 8006210:	2b00      	cmp	r3, #0
 8006212:	bf14      	ite	ne
 8006214:	231c      	movne	r3, #28
 8006216:	231d      	moveq	r3, #29
 8006218:	6922      	ldr	r2, [r4, #16]
 800621a:	2a01      	cmp	r2, #1
 800621c:	bf0c      	ite	eq
 800621e:	461a      	moveq	r2, r3
 8006220:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8006224:	4462      	add	r2, ip
 8006226:	60e2      	str	r2, [r4, #12]
 8006228:	e7a5      	b.n	8006176 <validate_structure+0xe6>
 800622a:	231c      	movs	r3, #28
 800622c:	e7f4      	b.n	8006218 <validate_structure+0x188>
 800622e:	231d      	movs	r3, #29
 8006230:	e7f2      	b.n	8006218 <validate_structure+0x188>
 8006232:	231c      	movs	r3, #28
 8006234:	e7af      	b.n	8006196 <validate_structure+0x106>
 8006236:	231d      	movs	r3, #29
 8006238:	e7ad      	b.n	8006196 <validate_structure+0x106>
 800623a:	bf00      	nop
 800623c:	080089a8 	.word	0x080089a8

08006240 <mktime>:
 8006240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006244:	b085      	sub	sp, #20
 8006246:	4607      	mov	r7, r0
 8006248:	f001 f910 	bl	800746c <__gettzinfo>
 800624c:	4681      	mov	r9, r0
 800624e:	4638      	mov	r0, r7
 8006250:	f7ff ff1e 	bl	8006090 <validate_structure>
 8006254:	e9d7 4000 	ldrd	r4, r0, [r7]
 8006258:	233c      	movs	r3, #60	; 0x3c
 800625a:	fb03 4400 	mla	r4, r3, r0, r4
 800625e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006262:	68b8      	ldr	r0, [r7, #8]
 8006264:	4abc      	ldr	r2, [pc, #752]	; (8006558 <mktime+0x318>)
 8006266:	fb03 4400 	mla	r4, r3, r0, r4
 800626a:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 800626e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006272:	3d01      	subs	r5, #1
 8006274:	2b01      	cmp	r3, #1
 8006276:	697e      	ldr	r6, [r7, #20]
 8006278:	4415      	add	r5, r2
 800627a:	dd11      	ble.n	80062a0 <mktime+0x60>
 800627c:	07b1      	lsls	r1, r6, #30
 800627e:	d10f      	bne.n	80062a0 <mktime+0x60>
 8006280:	2264      	movs	r2, #100	; 0x64
 8006282:	fb96 f3f2 	sdiv	r3, r6, r2
 8006286:	fb02 6313 	mls	r3, r2, r3, r6
 800628a:	b943      	cbnz	r3, 800629e <mktime+0x5e>
 800628c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006290:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8006294:	fb93 f1f2 	sdiv	r1, r3, r2
 8006298:	fb02 3311 	mls	r3, r2, r1, r3
 800629c:	b903      	cbnz	r3, 80062a0 <mktime+0x60>
 800629e:	3501      	adds	r5, #1
 80062a0:	f644 6220 	movw	r2, #20000	; 0x4e20
 80062a4:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 80062a8:	3310      	adds	r3, #16
 80062aa:	4293      	cmp	r3, r2
 80062ac:	61fd      	str	r5, [r7, #28]
 80062ae:	f200 815c 	bhi.w	800656a <mktime+0x32a>
 80062b2:	2e46      	cmp	r6, #70	; 0x46
 80062b4:	dd71      	ble.n	800639a <mktime+0x15a>
 80062b6:	2346      	movs	r3, #70	; 0x46
 80062b8:	f240 1c6d 	movw	ip, #365	; 0x16d
 80062bc:	2164      	movs	r1, #100	; 0x64
 80062be:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80062c2:	079a      	lsls	r2, r3, #30
 80062c4:	d163      	bne.n	800638e <mktime+0x14e>
 80062c6:	fb93 f2f1 	sdiv	r2, r3, r1
 80062ca:	fb01 3212 	mls	r2, r1, r2, r3
 80062ce:	2a00      	cmp	r2, #0
 80062d0:	d160      	bne.n	8006394 <mktime+0x154>
 80062d2:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 80062d6:	fb92 fef0 	sdiv	lr, r2, r0
 80062da:	fb00 221e 	mls	r2, r0, lr, r2
 80062de:	2a00      	cmp	r2, #0
 80062e0:	bf14      	ite	ne
 80062e2:	4662      	movne	r2, ip
 80062e4:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80062e8:	3301      	adds	r3, #1
 80062ea:	429e      	cmp	r6, r3
 80062ec:	4415      	add	r5, r2
 80062ee:	d1e8      	bne.n	80062c2 <mktime+0x82>
 80062f0:	4b9a      	ldr	r3, [pc, #616]	; (800655c <mktime+0x31c>)
 80062f2:	ea4f 78e4 	mov.w	r8, r4, asr #31
 80062f6:	fbc5 4803 	smlal	r4, r8, r5, r3
 80062fa:	f000 fcfb 	bl	8006cf4 <__tz_lock>
 80062fe:	f000 fd05 	bl	8006d0c <_tzset_unlocked>
 8006302:	4b97      	ldr	r3, [pc, #604]	; (8006560 <mktime+0x320>)
 8006304:	f8d3 b000 	ldr.w	fp, [r3]
 8006308:	f1bb 0f00 	cmp.w	fp, #0
 800630c:	d039      	beq.n	8006382 <mktime+0x142>
 800630e:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8006312:	6978      	ldr	r0, [r7, #20]
 8006314:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006318:	f1bb 0f01 	cmp.w	fp, #1
 800631c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8006320:	46da      	mov	sl, fp
 8006322:	bfa8      	it	ge
 8006324:	f04f 0a01 	movge.w	sl, #1
 8006328:	4283      	cmp	r3, r0
 800632a:	d178      	bne.n	800641e <mktime+0x1de>
 800632c:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 8006330:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8006334:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 8006338:	1a5b      	subs	r3, r3, r1
 800633a:	9302      	str	r3, [sp, #8]
 800633c:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 8006340:	9303      	str	r3, [sp, #12]
 8006342:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 8006346:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 800634a:	ebb3 0c02 	subs.w	ip, r3, r2
 800634e:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 8006352:	4564      	cmp	r4, ip
 8006354:	9301      	str	r3, [sp, #4]
 8006356:	eb78 0300 	sbcs.w	r3, r8, r0
 800635a:	da66      	bge.n	800642a <mktime+0x1ea>
 800635c:	f8d9 3000 	ldr.w	r3, [r9]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d06f      	beq.n	8006444 <mktime+0x204>
 8006364:	9b02      	ldr	r3, [sp, #8]
 8006366:	429c      	cmp	r4, r3
 8006368:	9b03      	ldr	r3, [sp, #12]
 800636a:	eb78 0303 	sbcs.w	r3, r8, r3
 800636e:	db03      	blt.n	8006378 <mktime+0x138>
 8006370:	4564      	cmp	r4, ip
 8006372:	eb78 0300 	sbcs.w	r3, r8, r0
 8006376:	db6b      	blt.n	8006450 <mktime+0x210>
 8006378:	f1bb 0f00 	cmp.w	fp, #0
 800637c:	f04f 0b00 	mov.w	fp, #0
 8006380:	da6b      	bge.n	800645a <mktime+0x21a>
 8006382:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 8006386:	190c      	adds	r4, r1, r4
 8006388:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 800638c:	e0a9      	b.n	80064e2 <mktime+0x2a2>
 800638e:	f240 126d 	movw	r2, #365	; 0x16d
 8006392:	e7a9      	b.n	80062e8 <mktime+0xa8>
 8006394:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8006398:	e7a6      	b.n	80062e8 <mktime+0xa8>
 800639a:	d0a9      	beq.n	80062f0 <mktime+0xb0>
 800639c:	2345      	movs	r3, #69	; 0x45
 800639e:	f240 1c6d 	movw	ip, #365	; 0x16d
 80063a2:	2164      	movs	r1, #100	; 0x64
 80063a4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80063a8:	e012      	b.n	80063d0 <mktime+0x190>
 80063aa:	bb62      	cbnz	r2, 8006406 <mktime+0x1c6>
 80063ac:	fb93 f2f1 	sdiv	r2, r3, r1
 80063b0:	fb01 3212 	mls	r2, r1, r2, r3
 80063b4:	bb52      	cbnz	r2, 800640c <mktime+0x1cc>
 80063b6:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 80063ba:	fb92 fef0 	sdiv	lr, r2, r0
 80063be:	fb00 221e 	mls	r2, r0, lr, r2
 80063c2:	2a00      	cmp	r2, #0
 80063c4:	bf14      	ite	ne
 80063c6:	4662      	movne	r2, ip
 80063c8:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80063cc:	1aad      	subs	r5, r5, r2
 80063ce:	3b01      	subs	r3, #1
 80063d0:	429e      	cmp	r6, r3
 80063d2:	f003 0203 	and.w	r2, r3, #3
 80063d6:	dbe8      	blt.n	80063aa <mktime+0x16a>
 80063d8:	b9da      	cbnz	r2, 8006412 <mktime+0x1d2>
 80063da:	2264      	movs	r2, #100	; 0x64
 80063dc:	fb96 f3f2 	sdiv	r3, r6, r2
 80063e0:	fb02 6313 	mls	r3, r2, r3, r6
 80063e4:	b9c3      	cbnz	r3, 8006418 <mktime+0x1d8>
 80063e6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80063ea:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 80063ee:	fb93 f1f2 	sdiv	r1, r3, r2
 80063f2:	fb02 3311 	mls	r3, r2, r1, r3
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	f240 136d 	movw	r3, #365	; 0x16d
 80063fc:	bf08      	it	eq
 80063fe:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8006402:	1aed      	subs	r5, r5, r3
 8006404:	e774      	b.n	80062f0 <mktime+0xb0>
 8006406:	f240 126d 	movw	r2, #365	; 0x16d
 800640a:	e7df      	b.n	80063cc <mktime+0x18c>
 800640c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8006410:	e7dc      	b.n	80063cc <mktime+0x18c>
 8006412:	f240 136d 	movw	r3, #365	; 0x16d
 8006416:	e7f4      	b.n	8006402 <mktime+0x1c2>
 8006418:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800641c:	e7f1      	b.n	8006402 <mktime+0x1c2>
 800641e:	f000 fbbf 	bl	8006ba0 <__tzcalc_limits>
 8006422:	2800      	cmp	r0, #0
 8006424:	d182      	bne.n	800632c <mktime+0xec>
 8006426:	46d3      	mov	fp, sl
 8006428:	e050      	b.n	80064cc <mktime+0x28c>
 800642a:	9b01      	ldr	r3, [sp, #4]
 800642c:	1a5b      	subs	r3, r3, r1
 800642e:	9301      	str	r3, [sp, #4]
 8006430:	ea4f 73e1 	mov.w	r3, r1, asr #31
 8006434:	eb6e 0e03 	sbc.w	lr, lr, r3
 8006438:	9b01      	ldr	r3, [sp, #4]
 800643a:	429c      	cmp	r4, r3
 800643c:	eb78 030e 	sbcs.w	r3, r8, lr
 8006440:	dbf1      	blt.n	8006426 <mktime+0x1e6>
 8006442:	e78b      	b.n	800635c <mktime+0x11c>
 8006444:	9b02      	ldr	r3, [sp, #8]
 8006446:	429c      	cmp	r4, r3
 8006448:	9b03      	ldr	r3, [sp, #12]
 800644a:	eb78 0303 	sbcs.w	r3, r8, r3
 800644e:	db8f      	blt.n	8006370 <mktime+0x130>
 8006450:	f1bb 0f00 	cmp.w	fp, #0
 8006454:	db3e      	blt.n	80064d4 <mktime+0x294>
 8006456:	f04f 0b01 	mov.w	fp, #1
 800645a:	ea8a 0a0b 	eor.w	sl, sl, fp
 800645e:	f1ba 0f01 	cmp.w	sl, #1
 8006462:	d133      	bne.n	80064cc <mktime+0x28c>
 8006464:	f1bb 0f00 	cmp.w	fp, #0
 8006468:	d04e      	beq.n	8006508 <mktime+0x2c8>
 800646a:	1a52      	subs	r2, r2, r1
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	1914      	adds	r4, r2, r4
 8006470:	4413      	add	r3, r2
 8006472:	4638      	mov	r0, r7
 8006474:	603b      	str	r3, [r7, #0]
 8006476:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 800647a:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800647e:	f7ff fe07 	bl	8006090 <validate_structure>
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	ebb2 020a 	subs.w	r2, r2, sl
 8006488:	d020      	beq.n	80064cc <mktime+0x28c>
 800648a:	2a01      	cmp	r2, #1
 800648c:	dc3e      	bgt.n	800650c <mktime+0x2cc>
 800648e:	1c90      	adds	r0, r2, #2
 8006490:	bfd8      	it	le
 8006492:	2201      	movle	r2, #1
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	4415      	add	r5, r2
 8006498:	18d3      	adds	r3, r2, r3
 800649a:	d540      	bpl.n	800651e <mktime+0x2de>
 800649c:	1e73      	subs	r3, r6, #1
 800649e:	0799      	lsls	r1, r3, #30
 80064a0:	d137      	bne.n	8006512 <mktime+0x2d2>
 80064a2:	2264      	movs	r2, #100	; 0x64
 80064a4:	fb93 f1f2 	sdiv	r1, r3, r2
 80064a8:	fb02 3311 	mls	r3, r2, r1, r3
 80064ac:	bba3      	cbnz	r3, 8006518 <mktime+0x2d8>
 80064ae:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80064b2:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 80064b6:	fb96 f2f3 	sdiv	r2, r6, r3
 80064ba:	fb03 6612 	mls	r6, r3, r2, r6
 80064be:	2e00      	cmp	r6, #0
 80064c0:	f240 136d 	movw	r3, #365	; 0x16d
 80064c4:	bf18      	it	ne
 80064c6:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 80064ca:	61fb      	str	r3, [r7, #28]
 80064cc:	f1bb 0f01 	cmp.w	fp, #1
 80064d0:	f47f af57 	bne.w	8006382 <mktime+0x142>
 80064d4:	f04f 0b01 	mov.w	fp, #1
 80064d8:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 80064dc:	190c      	adds	r4, r1, r4
 80064de:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 80064e2:	f000 fc0d 	bl	8006d00 <__tz_unlock>
 80064e6:	2307      	movs	r3, #7
 80064e8:	3504      	adds	r5, #4
 80064ea:	fb95 f3f3 	sdiv	r3, r5, r3
 80064ee:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80064f2:	1aed      	subs	r5, r5, r3
 80064f4:	bf48      	it	mi
 80064f6:	3507      	addmi	r5, #7
 80064f8:	f8c7 b020 	str.w	fp, [r7, #32]
 80064fc:	61bd      	str	r5, [r7, #24]
 80064fe:	4620      	mov	r0, r4
 8006500:	4641      	mov	r1, r8
 8006502:	b005      	add	sp, #20
 8006504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006508:	1a8a      	subs	r2, r1, r2
 800650a:	e7af      	b.n	800646c <mktime+0x22c>
 800650c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006510:	e7c0      	b.n	8006494 <mktime+0x254>
 8006512:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8006516:	e7d8      	b.n	80064ca <mktime+0x28a>
 8006518:	f240 136d 	movw	r3, #365	; 0x16d
 800651c:	e7d5      	b.n	80064ca <mktime+0x28a>
 800651e:	07b2      	lsls	r2, r6, #30
 8006520:	d117      	bne.n	8006552 <mktime+0x312>
 8006522:	2164      	movs	r1, #100	; 0x64
 8006524:	fb96 f2f1 	sdiv	r2, r6, r1
 8006528:	fb01 6212 	mls	r2, r1, r2, r6
 800652c:	b9d2      	cbnz	r2, 8006564 <mktime+0x324>
 800652e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006532:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8006536:	fb96 f1f2 	sdiv	r1, r6, r2
 800653a:	fb02 6611 	mls	r6, r2, r1, r6
 800653e:	2e00      	cmp	r6, #0
 8006540:	f240 126d 	movw	r2, #365	; 0x16d
 8006544:	bf08      	it	eq
 8006546:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800654a:	4293      	cmp	r3, r2
 800654c:	bfa8      	it	ge
 800654e:	1a9b      	subge	r3, r3, r2
 8006550:	e7bb      	b.n	80064ca <mktime+0x28a>
 8006552:	f240 126d 	movw	r2, #365	; 0x16d
 8006556:	e7f8      	b.n	800654a <mktime+0x30a>
 8006558:	080089d8 	.word	0x080089d8
 800655c:	00015180 	.word	0x00015180
 8006560:	20001624 	.word	0x20001624
 8006564:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8006568:	e7ef      	b.n	800654a <mktime+0x30a>
 800656a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800656e:	46a0      	mov	r8, r4
 8006570:	e7c5      	b.n	80064fe <mktime+0x2be>
 8006572:	bf00      	nop

08006574 <_free_r>:
 8006574:	b538      	push	{r3, r4, r5, lr}
 8006576:	4605      	mov	r5, r0
 8006578:	2900      	cmp	r1, #0
 800657a:	d040      	beq.n	80065fe <_free_r+0x8a>
 800657c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006580:	1f0c      	subs	r4, r1, #4
 8006582:	2b00      	cmp	r3, #0
 8006584:	bfb8      	it	lt
 8006586:	18e4      	addlt	r4, r4, r3
 8006588:	f001 f89a 	bl	80076c0 <__malloc_lock>
 800658c:	4a1c      	ldr	r2, [pc, #112]	; (8006600 <_free_r+0x8c>)
 800658e:	6813      	ldr	r3, [r2, #0]
 8006590:	b933      	cbnz	r3, 80065a0 <_free_r+0x2c>
 8006592:	6063      	str	r3, [r4, #4]
 8006594:	6014      	str	r4, [r2, #0]
 8006596:	4628      	mov	r0, r5
 8006598:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800659c:	f001 b896 	b.w	80076cc <__malloc_unlock>
 80065a0:	42a3      	cmp	r3, r4
 80065a2:	d908      	bls.n	80065b6 <_free_r+0x42>
 80065a4:	6820      	ldr	r0, [r4, #0]
 80065a6:	1821      	adds	r1, r4, r0
 80065a8:	428b      	cmp	r3, r1
 80065aa:	bf01      	itttt	eq
 80065ac:	6819      	ldreq	r1, [r3, #0]
 80065ae:	685b      	ldreq	r3, [r3, #4]
 80065b0:	1809      	addeq	r1, r1, r0
 80065b2:	6021      	streq	r1, [r4, #0]
 80065b4:	e7ed      	b.n	8006592 <_free_r+0x1e>
 80065b6:	461a      	mov	r2, r3
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	b10b      	cbz	r3, 80065c0 <_free_r+0x4c>
 80065bc:	42a3      	cmp	r3, r4
 80065be:	d9fa      	bls.n	80065b6 <_free_r+0x42>
 80065c0:	6811      	ldr	r1, [r2, #0]
 80065c2:	1850      	adds	r0, r2, r1
 80065c4:	42a0      	cmp	r0, r4
 80065c6:	d10b      	bne.n	80065e0 <_free_r+0x6c>
 80065c8:	6820      	ldr	r0, [r4, #0]
 80065ca:	4401      	add	r1, r0
 80065cc:	1850      	adds	r0, r2, r1
 80065ce:	4283      	cmp	r3, r0
 80065d0:	6011      	str	r1, [r2, #0]
 80065d2:	d1e0      	bne.n	8006596 <_free_r+0x22>
 80065d4:	6818      	ldr	r0, [r3, #0]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	4401      	add	r1, r0
 80065da:	6011      	str	r1, [r2, #0]
 80065dc:	6053      	str	r3, [r2, #4]
 80065de:	e7da      	b.n	8006596 <_free_r+0x22>
 80065e0:	d902      	bls.n	80065e8 <_free_r+0x74>
 80065e2:	230c      	movs	r3, #12
 80065e4:	602b      	str	r3, [r5, #0]
 80065e6:	e7d6      	b.n	8006596 <_free_r+0x22>
 80065e8:	6820      	ldr	r0, [r4, #0]
 80065ea:	1821      	adds	r1, r4, r0
 80065ec:	428b      	cmp	r3, r1
 80065ee:	bf01      	itttt	eq
 80065f0:	6819      	ldreq	r1, [r3, #0]
 80065f2:	685b      	ldreq	r3, [r3, #4]
 80065f4:	1809      	addeq	r1, r1, r0
 80065f6:	6021      	streq	r1, [r4, #0]
 80065f8:	6063      	str	r3, [r4, #4]
 80065fa:	6054      	str	r4, [r2, #4]
 80065fc:	e7cb      	b.n	8006596 <_free_r+0x22>
 80065fe:	bd38      	pop	{r3, r4, r5, pc}
 8006600:	200015fc 	.word	0x200015fc

08006604 <sbrk_aligned>:
 8006604:	b570      	push	{r4, r5, r6, lr}
 8006606:	4e0e      	ldr	r6, [pc, #56]	; (8006640 <sbrk_aligned+0x3c>)
 8006608:	460c      	mov	r4, r1
 800660a:	6831      	ldr	r1, [r6, #0]
 800660c:	4605      	mov	r5, r0
 800660e:	b911      	cbnz	r1, 8006616 <sbrk_aligned+0x12>
 8006610:	f000 f984 	bl	800691c <_sbrk_r>
 8006614:	6030      	str	r0, [r6, #0]
 8006616:	4621      	mov	r1, r4
 8006618:	4628      	mov	r0, r5
 800661a:	f000 f97f 	bl	800691c <_sbrk_r>
 800661e:	1c43      	adds	r3, r0, #1
 8006620:	d00a      	beq.n	8006638 <sbrk_aligned+0x34>
 8006622:	1cc4      	adds	r4, r0, #3
 8006624:	f024 0403 	bic.w	r4, r4, #3
 8006628:	42a0      	cmp	r0, r4
 800662a:	d007      	beq.n	800663c <sbrk_aligned+0x38>
 800662c:	1a21      	subs	r1, r4, r0
 800662e:	4628      	mov	r0, r5
 8006630:	f000 f974 	bl	800691c <_sbrk_r>
 8006634:	3001      	adds	r0, #1
 8006636:	d101      	bne.n	800663c <sbrk_aligned+0x38>
 8006638:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800663c:	4620      	mov	r0, r4
 800663e:	bd70      	pop	{r4, r5, r6, pc}
 8006640:	20001600 	.word	0x20001600

08006644 <_malloc_r>:
 8006644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006648:	1ccd      	adds	r5, r1, #3
 800664a:	f025 0503 	bic.w	r5, r5, #3
 800664e:	3508      	adds	r5, #8
 8006650:	2d0c      	cmp	r5, #12
 8006652:	bf38      	it	cc
 8006654:	250c      	movcc	r5, #12
 8006656:	2d00      	cmp	r5, #0
 8006658:	4607      	mov	r7, r0
 800665a:	db01      	blt.n	8006660 <_malloc_r+0x1c>
 800665c:	42a9      	cmp	r1, r5
 800665e:	d905      	bls.n	800666c <_malloc_r+0x28>
 8006660:	230c      	movs	r3, #12
 8006662:	2600      	movs	r6, #0
 8006664:	603b      	str	r3, [r7, #0]
 8006666:	4630      	mov	r0, r6
 8006668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800666c:	4e2e      	ldr	r6, [pc, #184]	; (8006728 <_malloc_r+0xe4>)
 800666e:	f001 f827 	bl	80076c0 <__malloc_lock>
 8006672:	6833      	ldr	r3, [r6, #0]
 8006674:	461c      	mov	r4, r3
 8006676:	bb34      	cbnz	r4, 80066c6 <_malloc_r+0x82>
 8006678:	4629      	mov	r1, r5
 800667a:	4638      	mov	r0, r7
 800667c:	f7ff ffc2 	bl	8006604 <sbrk_aligned>
 8006680:	1c43      	adds	r3, r0, #1
 8006682:	4604      	mov	r4, r0
 8006684:	d14d      	bne.n	8006722 <_malloc_r+0xde>
 8006686:	6834      	ldr	r4, [r6, #0]
 8006688:	4626      	mov	r6, r4
 800668a:	2e00      	cmp	r6, #0
 800668c:	d140      	bne.n	8006710 <_malloc_r+0xcc>
 800668e:	6823      	ldr	r3, [r4, #0]
 8006690:	4631      	mov	r1, r6
 8006692:	4638      	mov	r0, r7
 8006694:	eb04 0803 	add.w	r8, r4, r3
 8006698:	f000 f940 	bl	800691c <_sbrk_r>
 800669c:	4580      	cmp	r8, r0
 800669e:	d13a      	bne.n	8006716 <_malloc_r+0xd2>
 80066a0:	6821      	ldr	r1, [r4, #0]
 80066a2:	3503      	adds	r5, #3
 80066a4:	1a6d      	subs	r5, r5, r1
 80066a6:	f025 0503 	bic.w	r5, r5, #3
 80066aa:	3508      	adds	r5, #8
 80066ac:	2d0c      	cmp	r5, #12
 80066ae:	bf38      	it	cc
 80066b0:	250c      	movcc	r5, #12
 80066b2:	4638      	mov	r0, r7
 80066b4:	4629      	mov	r1, r5
 80066b6:	f7ff ffa5 	bl	8006604 <sbrk_aligned>
 80066ba:	3001      	adds	r0, #1
 80066bc:	d02b      	beq.n	8006716 <_malloc_r+0xd2>
 80066be:	6823      	ldr	r3, [r4, #0]
 80066c0:	442b      	add	r3, r5
 80066c2:	6023      	str	r3, [r4, #0]
 80066c4:	e00e      	b.n	80066e4 <_malloc_r+0xa0>
 80066c6:	6822      	ldr	r2, [r4, #0]
 80066c8:	1b52      	subs	r2, r2, r5
 80066ca:	d41e      	bmi.n	800670a <_malloc_r+0xc6>
 80066cc:	2a0b      	cmp	r2, #11
 80066ce:	d916      	bls.n	80066fe <_malloc_r+0xba>
 80066d0:	1961      	adds	r1, r4, r5
 80066d2:	42a3      	cmp	r3, r4
 80066d4:	6025      	str	r5, [r4, #0]
 80066d6:	bf18      	it	ne
 80066d8:	6059      	strne	r1, [r3, #4]
 80066da:	6863      	ldr	r3, [r4, #4]
 80066dc:	bf08      	it	eq
 80066de:	6031      	streq	r1, [r6, #0]
 80066e0:	5162      	str	r2, [r4, r5]
 80066e2:	604b      	str	r3, [r1, #4]
 80066e4:	4638      	mov	r0, r7
 80066e6:	f104 060b 	add.w	r6, r4, #11
 80066ea:	f000 ffef 	bl	80076cc <__malloc_unlock>
 80066ee:	f026 0607 	bic.w	r6, r6, #7
 80066f2:	1d23      	adds	r3, r4, #4
 80066f4:	1af2      	subs	r2, r6, r3
 80066f6:	d0b6      	beq.n	8006666 <_malloc_r+0x22>
 80066f8:	1b9b      	subs	r3, r3, r6
 80066fa:	50a3      	str	r3, [r4, r2]
 80066fc:	e7b3      	b.n	8006666 <_malloc_r+0x22>
 80066fe:	6862      	ldr	r2, [r4, #4]
 8006700:	42a3      	cmp	r3, r4
 8006702:	bf0c      	ite	eq
 8006704:	6032      	streq	r2, [r6, #0]
 8006706:	605a      	strne	r2, [r3, #4]
 8006708:	e7ec      	b.n	80066e4 <_malloc_r+0xa0>
 800670a:	4623      	mov	r3, r4
 800670c:	6864      	ldr	r4, [r4, #4]
 800670e:	e7b2      	b.n	8006676 <_malloc_r+0x32>
 8006710:	4634      	mov	r4, r6
 8006712:	6876      	ldr	r6, [r6, #4]
 8006714:	e7b9      	b.n	800668a <_malloc_r+0x46>
 8006716:	230c      	movs	r3, #12
 8006718:	4638      	mov	r0, r7
 800671a:	603b      	str	r3, [r7, #0]
 800671c:	f000 ffd6 	bl	80076cc <__malloc_unlock>
 8006720:	e7a1      	b.n	8006666 <_malloc_r+0x22>
 8006722:	6025      	str	r5, [r4, #0]
 8006724:	e7de      	b.n	80066e4 <_malloc_r+0xa0>
 8006726:	bf00      	nop
 8006728:	200015fc 	.word	0x200015fc

0800672c <iprintf>:
 800672c:	b40f      	push	{r0, r1, r2, r3}
 800672e:	4b0a      	ldr	r3, [pc, #40]	; (8006758 <iprintf+0x2c>)
 8006730:	b513      	push	{r0, r1, r4, lr}
 8006732:	681c      	ldr	r4, [r3, #0]
 8006734:	b124      	cbz	r4, 8006740 <iprintf+0x14>
 8006736:	69a3      	ldr	r3, [r4, #24]
 8006738:	b913      	cbnz	r3, 8006740 <iprintf+0x14>
 800673a:	4620      	mov	r0, r4
 800673c:	f7ff faaa 	bl	8005c94 <__sinit>
 8006740:	ab05      	add	r3, sp, #20
 8006742:	4620      	mov	r0, r4
 8006744:	9a04      	ldr	r2, [sp, #16]
 8006746:	68a1      	ldr	r1, [r4, #8]
 8006748:	9301      	str	r3, [sp, #4]
 800674a:	f000 ffed 	bl	8007728 <_vfiprintf_r>
 800674e:	b002      	add	sp, #8
 8006750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006754:	b004      	add	sp, #16
 8006756:	4770      	bx	lr
 8006758:	200001f8 	.word	0x200001f8

0800675c <_puts_r>:
 800675c:	b570      	push	{r4, r5, r6, lr}
 800675e:	460e      	mov	r6, r1
 8006760:	4605      	mov	r5, r0
 8006762:	b118      	cbz	r0, 800676c <_puts_r+0x10>
 8006764:	6983      	ldr	r3, [r0, #24]
 8006766:	b90b      	cbnz	r3, 800676c <_puts_r+0x10>
 8006768:	f7ff fa94 	bl	8005c94 <__sinit>
 800676c:	69ab      	ldr	r3, [r5, #24]
 800676e:	68ac      	ldr	r4, [r5, #8]
 8006770:	b913      	cbnz	r3, 8006778 <_puts_r+0x1c>
 8006772:	4628      	mov	r0, r5
 8006774:	f7ff fa8e 	bl	8005c94 <__sinit>
 8006778:	4b2c      	ldr	r3, [pc, #176]	; (800682c <_puts_r+0xd0>)
 800677a:	429c      	cmp	r4, r3
 800677c:	d120      	bne.n	80067c0 <_puts_r+0x64>
 800677e:	686c      	ldr	r4, [r5, #4]
 8006780:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006782:	07db      	lsls	r3, r3, #31
 8006784:	d405      	bmi.n	8006792 <_puts_r+0x36>
 8006786:	89a3      	ldrh	r3, [r4, #12]
 8006788:	0598      	lsls	r0, r3, #22
 800678a:	d402      	bmi.n	8006792 <_puts_r+0x36>
 800678c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800678e:	f7ff fc55 	bl	800603c <__retarget_lock_acquire_recursive>
 8006792:	89a3      	ldrh	r3, [r4, #12]
 8006794:	0719      	lsls	r1, r3, #28
 8006796:	d51d      	bpl.n	80067d4 <_puts_r+0x78>
 8006798:	6923      	ldr	r3, [r4, #16]
 800679a:	b1db      	cbz	r3, 80067d4 <_puts_r+0x78>
 800679c:	3e01      	subs	r6, #1
 800679e:	68a3      	ldr	r3, [r4, #8]
 80067a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80067a4:	3b01      	subs	r3, #1
 80067a6:	60a3      	str	r3, [r4, #8]
 80067a8:	bb39      	cbnz	r1, 80067fa <_puts_r+0x9e>
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	da38      	bge.n	8006820 <_puts_r+0xc4>
 80067ae:	4622      	mov	r2, r4
 80067b0:	210a      	movs	r1, #10
 80067b2:	4628      	mov	r0, r5
 80067b4:	f000 fc32 	bl	800701c <__swbuf_r>
 80067b8:	3001      	adds	r0, #1
 80067ba:	d011      	beq.n	80067e0 <_puts_r+0x84>
 80067bc:	250a      	movs	r5, #10
 80067be:	e011      	b.n	80067e4 <_puts_r+0x88>
 80067c0:	4b1b      	ldr	r3, [pc, #108]	; (8006830 <_puts_r+0xd4>)
 80067c2:	429c      	cmp	r4, r3
 80067c4:	d101      	bne.n	80067ca <_puts_r+0x6e>
 80067c6:	68ac      	ldr	r4, [r5, #8]
 80067c8:	e7da      	b.n	8006780 <_puts_r+0x24>
 80067ca:	4b1a      	ldr	r3, [pc, #104]	; (8006834 <_puts_r+0xd8>)
 80067cc:	429c      	cmp	r4, r3
 80067ce:	bf08      	it	eq
 80067d0:	68ec      	ldreq	r4, [r5, #12]
 80067d2:	e7d5      	b.n	8006780 <_puts_r+0x24>
 80067d4:	4621      	mov	r1, r4
 80067d6:	4628      	mov	r0, r5
 80067d8:	f000 fc84 	bl	80070e4 <__swsetup_r>
 80067dc:	2800      	cmp	r0, #0
 80067de:	d0dd      	beq.n	800679c <_puts_r+0x40>
 80067e0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80067e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067e6:	07da      	lsls	r2, r3, #31
 80067e8:	d405      	bmi.n	80067f6 <_puts_r+0x9a>
 80067ea:	89a3      	ldrh	r3, [r4, #12]
 80067ec:	059b      	lsls	r3, r3, #22
 80067ee:	d402      	bmi.n	80067f6 <_puts_r+0x9a>
 80067f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067f2:	f7ff fc25 	bl	8006040 <__retarget_lock_release_recursive>
 80067f6:	4628      	mov	r0, r5
 80067f8:	bd70      	pop	{r4, r5, r6, pc}
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	da04      	bge.n	8006808 <_puts_r+0xac>
 80067fe:	69a2      	ldr	r2, [r4, #24]
 8006800:	429a      	cmp	r2, r3
 8006802:	dc06      	bgt.n	8006812 <_puts_r+0xb6>
 8006804:	290a      	cmp	r1, #10
 8006806:	d004      	beq.n	8006812 <_puts_r+0xb6>
 8006808:	6823      	ldr	r3, [r4, #0]
 800680a:	1c5a      	adds	r2, r3, #1
 800680c:	6022      	str	r2, [r4, #0]
 800680e:	7019      	strb	r1, [r3, #0]
 8006810:	e7c5      	b.n	800679e <_puts_r+0x42>
 8006812:	4622      	mov	r2, r4
 8006814:	4628      	mov	r0, r5
 8006816:	f000 fc01 	bl	800701c <__swbuf_r>
 800681a:	3001      	adds	r0, #1
 800681c:	d1bf      	bne.n	800679e <_puts_r+0x42>
 800681e:	e7df      	b.n	80067e0 <_puts_r+0x84>
 8006820:	250a      	movs	r5, #10
 8006822:	6823      	ldr	r3, [r4, #0]
 8006824:	1c5a      	adds	r2, r3, #1
 8006826:	6022      	str	r2, [r4, #0]
 8006828:	701d      	strb	r5, [r3, #0]
 800682a:	e7db      	b.n	80067e4 <_puts_r+0x88>
 800682c:	080088f0 	.word	0x080088f0
 8006830:	08008910 	.word	0x08008910
 8006834:	080088d0 	.word	0x080088d0

08006838 <puts>:
 8006838:	4b02      	ldr	r3, [pc, #8]	; (8006844 <puts+0xc>)
 800683a:	4601      	mov	r1, r0
 800683c:	6818      	ldr	r0, [r3, #0]
 800683e:	f7ff bf8d 	b.w	800675c <_puts_r>
 8006842:	bf00      	nop
 8006844:	200001f8 	.word	0x200001f8

08006848 <cleanup_glue>:
 8006848:	b538      	push	{r3, r4, r5, lr}
 800684a:	460c      	mov	r4, r1
 800684c:	6809      	ldr	r1, [r1, #0]
 800684e:	4605      	mov	r5, r0
 8006850:	b109      	cbz	r1, 8006856 <cleanup_glue+0xe>
 8006852:	f7ff fff9 	bl	8006848 <cleanup_glue>
 8006856:	4621      	mov	r1, r4
 8006858:	4628      	mov	r0, r5
 800685a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800685e:	f7ff be89 	b.w	8006574 <_free_r>
	...

08006864 <_reclaim_reent>:
 8006864:	4b2c      	ldr	r3, [pc, #176]	; (8006918 <_reclaim_reent+0xb4>)
 8006866:	b570      	push	{r4, r5, r6, lr}
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4604      	mov	r4, r0
 800686c:	4283      	cmp	r3, r0
 800686e:	d051      	beq.n	8006914 <_reclaim_reent+0xb0>
 8006870:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006872:	b143      	cbz	r3, 8006886 <_reclaim_reent+0x22>
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d14a      	bne.n	8006910 <_reclaim_reent+0xac>
 800687a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800687c:	6819      	ldr	r1, [r3, #0]
 800687e:	b111      	cbz	r1, 8006886 <_reclaim_reent+0x22>
 8006880:	4620      	mov	r0, r4
 8006882:	f7ff fe77 	bl	8006574 <_free_r>
 8006886:	6961      	ldr	r1, [r4, #20]
 8006888:	b111      	cbz	r1, 8006890 <_reclaim_reent+0x2c>
 800688a:	4620      	mov	r0, r4
 800688c:	f7ff fe72 	bl	8006574 <_free_r>
 8006890:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006892:	b111      	cbz	r1, 800689a <_reclaim_reent+0x36>
 8006894:	4620      	mov	r0, r4
 8006896:	f7ff fe6d 	bl	8006574 <_free_r>
 800689a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800689c:	b111      	cbz	r1, 80068a4 <_reclaim_reent+0x40>
 800689e:	4620      	mov	r0, r4
 80068a0:	f7ff fe68 	bl	8006574 <_free_r>
 80068a4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80068a6:	b111      	cbz	r1, 80068ae <_reclaim_reent+0x4a>
 80068a8:	4620      	mov	r0, r4
 80068aa:	f7ff fe63 	bl	8006574 <_free_r>
 80068ae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80068b0:	b111      	cbz	r1, 80068b8 <_reclaim_reent+0x54>
 80068b2:	4620      	mov	r0, r4
 80068b4:	f7ff fe5e 	bl	8006574 <_free_r>
 80068b8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80068ba:	b111      	cbz	r1, 80068c2 <_reclaim_reent+0x5e>
 80068bc:	4620      	mov	r0, r4
 80068be:	f7ff fe59 	bl	8006574 <_free_r>
 80068c2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80068c4:	b111      	cbz	r1, 80068cc <_reclaim_reent+0x68>
 80068c6:	4620      	mov	r0, r4
 80068c8:	f7ff fe54 	bl	8006574 <_free_r>
 80068cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068ce:	b111      	cbz	r1, 80068d6 <_reclaim_reent+0x72>
 80068d0:	4620      	mov	r0, r4
 80068d2:	f7ff fe4f 	bl	8006574 <_free_r>
 80068d6:	69a3      	ldr	r3, [r4, #24]
 80068d8:	b1e3      	cbz	r3, 8006914 <_reclaim_reent+0xb0>
 80068da:	4620      	mov	r0, r4
 80068dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80068de:	4798      	blx	r3
 80068e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80068e2:	b1b9      	cbz	r1, 8006914 <_reclaim_reent+0xb0>
 80068e4:	4620      	mov	r0, r4
 80068e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80068ea:	f7ff bfad 	b.w	8006848 <cleanup_glue>
 80068ee:	5949      	ldr	r1, [r1, r5]
 80068f0:	b941      	cbnz	r1, 8006904 <_reclaim_reent+0xa0>
 80068f2:	3504      	adds	r5, #4
 80068f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068f6:	2d80      	cmp	r5, #128	; 0x80
 80068f8:	68d9      	ldr	r1, [r3, #12]
 80068fa:	d1f8      	bne.n	80068ee <_reclaim_reent+0x8a>
 80068fc:	4620      	mov	r0, r4
 80068fe:	f7ff fe39 	bl	8006574 <_free_r>
 8006902:	e7ba      	b.n	800687a <_reclaim_reent+0x16>
 8006904:	680e      	ldr	r6, [r1, #0]
 8006906:	4620      	mov	r0, r4
 8006908:	f7ff fe34 	bl	8006574 <_free_r>
 800690c:	4631      	mov	r1, r6
 800690e:	e7ef      	b.n	80068f0 <_reclaim_reent+0x8c>
 8006910:	2500      	movs	r5, #0
 8006912:	e7ef      	b.n	80068f4 <_reclaim_reent+0x90>
 8006914:	bd70      	pop	{r4, r5, r6, pc}
 8006916:	bf00      	nop
 8006918:	200001f8 	.word	0x200001f8

0800691c <_sbrk_r>:
 800691c:	b538      	push	{r3, r4, r5, lr}
 800691e:	2300      	movs	r3, #0
 8006920:	4d05      	ldr	r5, [pc, #20]	; (8006938 <_sbrk_r+0x1c>)
 8006922:	4604      	mov	r4, r0
 8006924:	4608      	mov	r0, r1
 8006926:	602b      	str	r3, [r5, #0]
 8006928:	f7fa fece 	bl	80016c8 <_sbrk>
 800692c:	1c43      	adds	r3, r0, #1
 800692e:	d102      	bne.n	8006936 <_sbrk_r+0x1a>
 8006930:	682b      	ldr	r3, [r5, #0]
 8006932:	b103      	cbz	r3, 8006936 <_sbrk_r+0x1a>
 8006934:	6023      	str	r3, [r4, #0]
 8006936:	bd38      	pop	{r3, r4, r5, pc}
 8006938:	20001604 	.word	0x20001604

0800693c <__sread>:
 800693c:	b510      	push	{r4, lr}
 800693e:	460c      	mov	r4, r1
 8006940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006944:	f001 f9b6 	bl	8007cb4 <_read_r>
 8006948:	2800      	cmp	r0, #0
 800694a:	bfab      	itete	ge
 800694c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800694e:	89a3      	ldrhlt	r3, [r4, #12]
 8006950:	181b      	addge	r3, r3, r0
 8006952:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006956:	bfac      	ite	ge
 8006958:	6563      	strge	r3, [r4, #84]	; 0x54
 800695a:	81a3      	strhlt	r3, [r4, #12]
 800695c:	bd10      	pop	{r4, pc}

0800695e <__seofread>:
 800695e:	2000      	movs	r0, #0
 8006960:	4770      	bx	lr

08006962 <__swrite>:
 8006962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006966:	461f      	mov	r7, r3
 8006968:	898b      	ldrh	r3, [r1, #12]
 800696a:	4605      	mov	r5, r0
 800696c:	05db      	lsls	r3, r3, #23
 800696e:	460c      	mov	r4, r1
 8006970:	4616      	mov	r6, r2
 8006972:	d505      	bpl.n	8006980 <__swrite+0x1e>
 8006974:	2302      	movs	r3, #2
 8006976:	2200      	movs	r2, #0
 8006978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800697c:	f000 fe28 	bl	80075d0 <_lseek_r>
 8006980:	89a3      	ldrh	r3, [r4, #12]
 8006982:	4632      	mov	r2, r6
 8006984:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006988:	81a3      	strh	r3, [r4, #12]
 800698a:	4628      	mov	r0, r5
 800698c:	463b      	mov	r3, r7
 800698e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006996:	f000 bb93 	b.w	80070c0 <_write_r>

0800699a <__sseek>:
 800699a:	b510      	push	{r4, lr}
 800699c:	460c      	mov	r4, r1
 800699e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069a2:	f000 fe15 	bl	80075d0 <_lseek_r>
 80069a6:	1c43      	adds	r3, r0, #1
 80069a8:	89a3      	ldrh	r3, [r4, #12]
 80069aa:	bf15      	itete	ne
 80069ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80069ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80069b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80069b6:	81a3      	strheq	r3, [r4, #12]
 80069b8:	bf18      	it	ne
 80069ba:	81a3      	strhne	r3, [r4, #12]
 80069bc:	bd10      	pop	{r4, pc}

080069be <__sclose>:
 80069be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069c2:	f000 bc1b 	b.w	80071fc <_close_r>

080069c6 <strcpy>:
 80069c6:	4603      	mov	r3, r0
 80069c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069cc:	f803 2b01 	strb.w	r2, [r3], #1
 80069d0:	2a00      	cmp	r2, #0
 80069d2:	d1f9      	bne.n	80069c8 <strcpy+0x2>
 80069d4:	4770      	bx	lr
	...

080069d8 <strtok>:
 80069d8:	4b16      	ldr	r3, [pc, #88]	; (8006a34 <strtok+0x5c>)
 80069da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069de:	681f      	ldr	r7, [r3, #0]
 80069e0:	4605      	mov	r5, r0
 80069e2:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80069e4:	460e      	mov	r6, r1
 80069e6:	b9ec      	cbnz	r4, 8006a24 <strtok+0x4c>
 80069e8:	2050      	movs	r0, #80	; 0x50
 80069ea:	f7ff fb2b 	bl	8006044 <malloc>
 80069ee:	4602      	mov	r2, r0
 80069f0:	65b8      	str	r0, [r7, #88]	; 0x58
 80069f2:	b920      	cbnz	r0, 80069fe <strtok+0x26>
 80069f4:	2157      	movs	r1, #87	; 0x57
 80069f6:	4b10      	ldr	r3, [pc, #64]	; (8006a38 <strtok+0x60>)
 80069f8:	4810      	ldr	r0, [pc, #64]	; (8006a3c <strtok+0x64>)
 80069fa:	f000 fbe1 	bl	80071c0 <__assert_func>
 80069fe:	e9c0 4400 	strd	r4, r4, [r0]
 8006a02:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006a06:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006a0a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006a0e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006a12:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006a16:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006a1a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006a1e:	6184      	str	r4, [r0, #24]
 8006a20:	7704      	strb	r4, [r0, #28]
 8006a22:	6244      	str	r4, [r0, #36]	; 0x24
 8006a24:	4631      	mov	r1, r6
 8006a26:	4628      	mov	r0, r5
 8006a28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a30:	f000 b806 	b.w	8006a40 <__strtok_r>
 8006a34:	200001f8 	.word	0x200001f8
 8006a38:	08008934 	.word	0x08008934
 8006a3c:	08008a68 	.word	0x08008a68

08006a40 <__strtok_r>:
 8006a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a42:	b908      	cbnz	r0, 8006a48 <__strtok_r+0x8>
 8006a44:	6810      	ldr	r0, [r2, #0]
 8006a46:	b188      	cbz	r0, 8006a6c <__strtok_r+0x2c>
 8006a48:	4604      	mov	r4, r0
 8006a4a:	460f      	mov	r7, r1
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006a52:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006a56:	b91e      	cbnz	r6, 8006a60 <__strtok_r+0x20>
 8006a58:	b965      	cbnz	r5, 8006a74 <__strtok_r+0x34>
 8006a5a:	4628      	mov	r0, r5
 8006a5c:	6015      	str	r5, [r2, #0]
 8006a5e:	e005      	b.n	8006a6c <__strtok_r+0x2c>
 8006a60:	42b5      	cmp	r5, r6
 8006a62:	d1f6      	bne.n	8006a52 <__strtok_r+0x12>
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1f0      	bne.n	8006a4a <__strtok_r+0xa>
 8006a68:	6014      	str	r4, [r2, #0]
 8006a6a:	7003      	strb	r3, [r0, #0]
 8006a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a6e:	461c      	mov	r4, r3
 8006a70:	e00c      	b.n	8006a8c <__strtok_r+0x4c>
 8006a72:	b915      	cbnz	r5, 8006a7a <__strtok_r+0x3a>
 8006a74:	460e      	mov	r6, r1
 8006a76:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006a7a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006a7e:	42ab      	cmp	r3, r5
 8006a80:	d1f7      	bne.n	8006a72 <__strtok_r+0x32>
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d0f3      	beq.n	8006a6e <__strtok_r+0x2e>
 8006a86:	2300      	movs	r3, #0
 8006a88:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006a8c:	6014      	str	r4, [r2, #0]
 8006a8e:	e7ed      	b.n	8006a6c <__strtok_r+0x2c>

08006a90 <_strtol_l.constprop.0>:
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a96:	4680      	mov	r8, r0
 8006a98:	d001      	beq.n	8006a9e <_strtol_l.constprop.0+0xe>
 8006a9a:	2b24      	cmp	r3, #36	; 0x24
 8006a9c:	d906      	bls.n	8006aac <_strtol_l.constprop.0+0x1c>
 8006a9e:	f7ff f89b 	bl	8005bd8 <__errno>
 8006aa2:	2316      	movs	r3, #22
 8006aa4:	6003      	str	r3, [r0, #0]
 8006aa6:	2000      	movs	r0, #0
 8006aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aac:	460d      	mov	r5, r1
 8006aae:	4f35      	ldr	r7, [pc, #212]	; (8006b84 <_strtol_l.constprop.0+0xf4>)
 8006ab0:	4628      	mov	r0, r5
 8006ab2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ab6:	5de6      	ldrb	r6, [r4, r7]
 8006ab8:	f016 0608 	ands.w	r6, r6, #8
 8006abc:	d1f8      	bne.n	8006ab0 <_strtol_l.constprop.0+0x20>
 8006abe:	2c2d      	cmp	r4, #45	; 0x2d
 8006ac0:	d12f      	bne.n	8006b22 <_strtol_l.constprop.0+0x92>
 8006ac2:	2601      	movs	r6, #1
 8006ac4:	782c      	ldrb	r4, [r5, #0]
 8006ac6:	1c85      	adds	r5, r0, #2
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d057      	beq.n	8006b7c <_strtol_l.constprop.0+0xec>
 8006acc:	2b10      	cmp	r3, #16
 8006ace:	d109      	bne.n	8006ae4 <_strtol_l.constprop.0+0x54>
 8006ad0:	2c30      	cmp	r4, #48	; 0x30
 8006ad2:	d107      	bne.n	8006ae4 <_strtol_l.constprop.0+0x54>
 8006ad4:	7828      	ldrb	r0, [r5, #0]
 8006ad6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006ada:	2858      	cmp	r0, #88	; 0x58
 8006adc:	d149      	bne.n	8006b72 <_strtol_l.constprop.0+0xe2>
 8006ade:	2310      	movs	r3, #16
 8006ae0:	786c      	ldrb	r4, [r5, #1]
 8006ae2:	3502      	adds	r5, #2
 8006ae4:	2700      	movs	r7, #0
 8006ae6:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8006aea:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8006aee:	fbbe f9f3 	udiv	r9, lr, r3
 8006af2:	4638      	mov	r0, r7
 8006af4:	fb03 ea19 	mls	sl, r3, r9, lr
 8006af8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006afc:	f1bc 0f09 	cmp.w	ip, #9
 8006b00:	d814      	bhi.n	8006b2c <_strtol_l.constprop.0+0x9c>
 8006b02:	4664      	mov	r4, ip
 8006b04:	42a3      	cmp	r3, r4
 8006b06:	dd22      	ble.n	8006b4e <_strtol_l.constprop.0+0xbe>
 8006b08:	2f00      	cmp	r7, #0
 8006b0a:	db1d      	blt.n	8006b48 <_strtol_l.constprop.0+0xb8>
 8006b0c:	4581      	cmp	r9, r0
 8006b0e:	d31b      	bcc.n	8006b48 <_strtol_l.constprop.0+0xb8>
 8006b10:	d101      	bne.n	8006b16 <_strtol_l.constprop.0+0x86>
 8006b12:	45a2      	cmp	sl, r4
 8006b14:	db18      	blt.n	8006b48 <_strtol_l.constprop.0+0xb8>
 8006b16:	2701      	movs	r7, #1
 8006b18:	fb00 4003 	mla	r0, r0, r3, r4
 8006b1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b20:	e7ea      	b.n	8006af8 <_strtol_l.constprop.0+0x68>
 8006b22:	2c2b      	cmp	r4, #43	; 0x2b
 8006b24:	bf04      	itt	eq
 8006b26:	782c      	ldrbeq	r4, [r5, #0]
 8006b28:	1c85      	addeq	r5, r0, #2
 8006b2a:	e7cd      	b.n	8006ac8 <_strtol_l.constprop.0+0x38>
 8006b2c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006b30:	f1bc 0f19 	cmp.w	ip, #25
 8006b34:	d801      	bhi.n	8006b3a <_strtol_l.constprop.0+0xaa>
 8006b36:	3c37      	subs	r4, #55	; 0x37
 8006b38:	e7e4      	b.n	8006b04 <_strtol_l.constprop.0+0x74>
 8006b3a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006b3e:	f1bc 0f19 	cmp.w	ip, #25
 8006b42:	d804      	bhi.n	8006b4e <_strtol_l.constprop.0+0xbe>
 8006b44:	3c57      	subs	r4, #87	; 0x57
 8006b46:	e7dd      	b.n	8006b04 <_strtol_l.constprop.0+0x74>
 8006b48:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006b4c:	e7e6      	b.n	8006b1c <_strtol_l.constprop.0+0x8c>
 8006b4e:	2f00      	cmp	r7, #0
 8006b50:	da07      	bge.n	8006b62 <_strtol_l.constprop.0+0xd2>
 8006b52:	2322      	movs	r3, #34	; 0x22
 8006b54:	4670      	mov	r0, lr
 8006b56:	f8c8 3000 	str.w	r3, [r8]
 8006b5a:	2a00      	cmp	r2, #0
 8006b5c:	d0a4      	beq.n	8006aa8 <_strtol_l.constprop.0+0x18>
 8006b5e:	1e69      	subs	r1, r5, #1
 8006b60:	e005      	b.n	8006b6e <_strtol_l.constprop.0+0xde>
 8006b62:	b106      	cbz	r6, 8006b66 <_strtol_l.constprop.0+0xd6>
 8006b64:	4240      	negs	r0, r0
 8006b66:	2a00      	cmp	r2, #0
 8006b68:	d09e      	beq.n	8006aa8 <_strtol_l.constprop.0+0x18>
 8006b6a:	2f00      	cmp	r7, #0
 8006b6c:	d1f7      	bne.n	8006b5e <_strtol_l.constprop.0+0xce>
 8006b6e:	6011      	str	r1, [r2, #0]
 8006b70:	e79a      	b.n	8006aa8 <_strtol_l.constprop.0+0x18>
 8006b72:	2430      	movs	r4, #48	; 0x30
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d1b5      	bne.n	8006ae4 <_strtol_l.constprop.0+0x54>
 8006b78:	2308      	movs	r3, #8
 8006b7a:	e7b3      	b.n	8006ae4 <_strtol_l.constprop.0+0x54>
 8006b7c:	2c30      	cmp	r4, #48	; 0x30
 8006b7e:	d0a9      	beq.n	8006ad4 <_strtol_l.constprop.0+0x44>
 8006b80:	230a      	movs	r3, #10
 8006b82:	e7af      	b.n	8006ae4 <_strtol_l.constprop.0+0x54>
 8006b84:	08008b3e 	.word	0x08008b3e

08006b88 <_strtol_r>:
 8006b88:	f7ff bf82 	b.w	8006a90 <_strtol_l.constprop.0>

08006b8c <strtol>:
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	460a      	mov	r2, r1
 8006b90:	4601      	mov	r1, r0
 8006b92:	4802      	ldr	r0, [pc, #8]	; (8006b9c <strtol+0x10>)
 8006b94:	6800      	ldr	r0, [r0, #0]
 8006b96:	f7ff bf7b 	b.w	8006a90 <_strtol_l.constprop.0>
 8006b9a:	bf00      	nop
 8006b9c:	200001f8 	.word	0x200001f8

08006ba0 <__tzcalc_limits>:
 8006ba0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ba4:	4605      	mov	r5, r0
 8006ba6:	f000 fc61 	bl	800746c <__gettzinfo>
 8006baa:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8006bae:	429d      	cmp	r5, r3
 8006bb0:	f340 809a 	ble.w	8006ce8 <__tzcalc_limits+0x148>
 8006bb4:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8006bb8:	18ac      	adds	r4, r5, r2
 8006bba:	f240 126d 	movw	r2, #365	; 0x16d
 8006bbe:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 8006bc2:	10a4      	asrs	r4, r4, #2
 8006bc4:	fb02 4403 	mla	r4, r2, r3, r4
 8006bc8:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8006bcc:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 8006bd0:	fb93 f3f2 	sdiv	r3, r3, r2
 8006bd4:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 8006bd8:	441c      	add	r4, r3
 8006bda:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006bde:	186a      	adds	r2, r5, r1
 8006be0:	fbb2 f2f3 	udiv	r2, r2, r3
 8006be4:	fb95 fcf3 	sdiv	ip, r5, r3
 8006be8:	4414      	add	r4, r2
 8006bea:	2264      	movs	r2, #100	; 0x64
 8006bec:	fb03 5c1c 	mls	ip, r3, ip, r5
 8006bf0:	fb95 f7f2 	sdiv	r7, r5, r2
 8006bf4:	fabc f68c 	clz	r6, ip
 8006bf8:	4601      	mov	r1, r0
 8006bfa:	fb02 5717 	mls	r7, r2, r7, r5
 8006bfe:	6045      	str	r5, [r0, #4]
 8006c00:	0976      	lsrs	r6, r6, #5
 8006c02:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8006c06:	f005 0203 	and.w	r2, r5, #3
 8006c0a:	7a0d      	ldrb	r5, [r1, #8]
 8006c0c:	694b      	ldr	r3, [r1, #20]
 8006c0e:	2d4a      	cmp	r5, #74	; 0x4a
 8006c10:	d12d      	bne.n	8006c6e <__tzcalc_limits+0xce>
 8006c12:	eb04 0e03 	add.w	lr, r4, r3
 8006c16:	b902      	cbnz	r2, 8006c1a <__tzcalc_limits+0x7a>
 8006c18:	b917      	cbnz	r7, 8006c20 <__tzcalc_limits+0x80>
 8006c1a:	f1bc 0f00 	cmp.w	ip, #0
 8006c1e:	d124      	bne.n	8006c6a <__tzcalc_limits+0xca>
 8006c20:	2b3b      	cmp	r3, #59	; 0x3b
 8006c22:	bfd4      	ite	le
 8006c24:	2300      	movle	r3, #0
 8006c26:	2301      	movgt	r3, #1
 8006c28:	4473      	add	r3, lr
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	698d      	ldr	r5, [r1, #24]
 8006c2e:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8006cec <__tzcalc_limits+0x14c>
 8006c32:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 8006c36:	fbc3 5e08 	smlal	r5, lr, r3, r8
 8006c3a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8006c3c:	18ed      	adds	r5, r5, r3
 8006c3e:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 8006c42:	e9c1 5308 	strd	r5, r3, [r1, #32]
 8006c46:	3128      	adds	r1, #40	; 0x28
 8006c48:	458b      	cmp	fp, r1
 8006c4a:	d1de      	bne.n	8006c0a <__tzcalc_limits+0x6a>
 8006c4c:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 8006c50:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 8006c54:	428c      	cmp	r4, r1
 8006c56:	eb72 0303 	sbcs.w	r3, r2, r3
 8006c5a:	bfb4      	ite	lt
 8006c5c:	2301      	movlt	r3, #1
 8006c5e:	2300      	movge	r3, #0
 8006c60:	6003      	str	r3, [r0, #0]
 8006c62:	2001      	movs	r0, #1
 8006c64:	b003      	add	sp, #12
 8006c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	e7dc      	b.n	8006c28 <__tzcalc_limits+0x88>
 8006c6e:	2d44      	cmp	r5, #68	; 0x44
 8006c70:	d101      	bne.n	8006c76 <__tzcalc_limits+0xd6>
 8006c72:	4423      	add	r3, r4
 8006c74:	e7da      	b.n	8006c2c <__tzcalc_limits+0x8c>
 8006c76:	bb8a      	cbnz	r2, 8006cdc <__tzcalc_limits+0x13c>
 8006c78:	2f00      	cmp	r7, #0
 8006c7a:	bf0c      	ite	eq
 8006c7c:	4635      	moveq	r5, r6
 8006c7e:	2501      	movne	r5, #1
 8006c80:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8006c84:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8006c88:	f04f 0800 	mov.w	r8, #0
 8006c8c:	f8cd e004 	str.w	lr, [sp, #4]
 8006c90:	46a6      	mov	lr, r4
 8006c92:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8006cf0 <__tzcalc_limits+0x150>
 8006c96:	fb0a 9505 	mla	r5, sl, r5, r9
 8006c9a:	3d04      	subs	r5, #4
 8006c9c:	f8dd a004 	ldr.w	sl, [sp, #4]
 8006ca0:	f108 0801 	add.w	r8, r8, #1
 8006ca4:	45c2      	cmp	sl, r8
 8006ca6:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 8006caa:	dc19      	bgt.n	8006ce0 <__tzcalc_limits+0x140>
 8006cac:	f04f 0807 	mov.w	r8, #7
 8006cb0:	f10e 0504 	add.w	r5, lr, #4
 8006cb4:	fb95 f8f8 	sdiv	r8, r5, r8
 8006cb8:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8006cbc:	eba5 0808 	sub.w	r8, r5, r8
 8006cc0:	ebb3 0808 	subs.w	r8, r3, r8
 8006cc4:	690b      	ldr	r3, [r1, #16]
 8006cc6:	bf48      	it	mi
 8006cc8:	f108 0807 	addmi.w	r8, r8, #7
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006cd2:	4443      	add	r3, r8
 8006cd4:	454b      	cmp	r3, r9
 8006cd6:	da05      	bge.n	8006ce4 <__tzcalc_limits+0x144>
 8006cd8:	4473      	add	r3, lr
 8006cda:	e7a7      	b.n	8006c2c <__tzcalc_limits+0x8c>
 8006cdc:	4635      	mov	r5, r6
 8006cde:	e7cf      	b.n	8006c80 <__tzcalc_limits+0xe0>
 8006ce0:	44ce      	add	lr, r9
 8006ce2:	e7db      	b.n	8006c9c <__tzcalc_limits+0xfc>
 8006ce4:	3b07      	subs	r3, #7
 8006ce6:	e7f5      	b.n	8006cd4 <__tzcalc_limits+0x134>
 8006ce8:	2000      	movs	r0, #0
 8006cea:	e7bb      	b.n	8006c64 <__tzcalc_limits+0xc4>
 8006cec:	00015180 	.word	0x00015180
 8006cf0:	08008a08 	.word	0x08008a08

08006cf4 <__tz_lock>:
 8006cf4:	4801      	ldr	r0, [pc, #4]	; (8006cfc <__tz_lock+0x8>)
 8006cf6:	f7ff b9a0 	b.w	800603a <__retarget_lock_acquire>
 8006cfa:	bf00      	nop
 8006cfc:	200015f8 	.word	0x200015f8

08006d00 <__tz_unlock>:
 8006d00:	4801      	ldr	r0, [pc, #4]	; (8006d08 <__tz_unlock+0x8>)
 8006d02:	f7ff b99c 	b.w	800603e <__retarget_lock_release>
 8006d06:	bf00      	nop
 8006d08:	200015f8 	.word	0x200015f8

08006d0c <_tzset_unlocked>:
 8006d0c:	4b01      	ldr	r3, [pc, #4]	; (8006d14 <_tzset_unlocked+0x8>)
 8006d0e:	6818      	ldr	r0, [r3, #0]
 8006d10:	f000 b802 	b.w	8006d18 <_tzset_unlocked_r>
 8006d14:	200001f8 	.word	0x200001f8

08006d18 <_tzset_unlocked_r>:
 8006d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d1c:	b08d      	sub	sp, #52	; 0x34
 8006d1e:	4607      	mov	r7, r0
 8006d20:	f000 fba4 	bl	800746c <__gettzinfo>
 8006d24:	49b1      	ldr	r1, [pc, #708]	; (8006fec <_tzset_unlocked_r+0x2d4>)
 8006d26:	4605      	mov	r5, r0
 8006d28:	4638      	mov	r0, r7
 8006d2a:	f000 fb97 	bl	800745c <_getenv_r>
 8006d2e:	4eb0      	ldr	r6, [pc, #704]	; (8006ff0 <_tzset_unlocked_r+0x2d8>)
 8006d30:	4604      	mov	r4, r0
 8006d32:	b970      	cbnz	r0, 8006d52 <_tzset_unlocked_r+0x3a>
 8006d34:	4baf      	ldr	r3, [pc, #700]	; (8006ff4 <_tzset_unlocked_r+0x2dc>)
 8006d36:	4ab0      	ldr	r2, [pc, #704]	; (8006ff8 <_tzset_unlocked_r+0x2e0>)
 8006d38:	6018      	str	r0, [r3, #0]
 8006d3a:	4bb0      	ldr	r3, [pc, #704]	; (8006ffc <_tzset_unlocked_r+0x2e4>)
 8006d3c:	6018      	str	r0, [r3, #0]
 8006d3e:	4bb0      	ldr	r3, [pc, #704]	; (8007000 <_tzset_unlocked_r+0x2e8>)
 8006d40:	6830      	ldr	r0, [r6, #0]
 8006d42:	e9c3 2200 	strd	r2, r2, [r3]
 8006d46:	f7ff f985 	bl	8006054 <free>
 8006d4a:	6034      	str	r4, [r6, #0]
 8006d4c:	b00d      	add	sp, #52	; 0x34
 8006d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d52:	6831      	ldr	r1, [r6, #0]
 8006d54:	2900      	cmp	r1, #0
 8006d56:	d162      	bne.n	8006e1e <_tzset_unlocked_r+0x106>
 8006d58:	6830      	ldr	r0, [r6, #0]
 8006d5a:	f7ff f97b 	bl	8006054 <free>
 8006d5e:	4620      	mov	r0, r4
 8006d60:	f7f9 f9f6 	bl	8000150 <strlen>
 8006d64:	1c41      	adds	r1, r0, #1
 8006d66:	4638      	mov	r0, r7
 8006d68:	f7ff fc6c 	bl	8006644 <_malloc_r>
 8006d6c:	6030      	str	r0, [r6, #0]
 8006d6e:	2800      	cmp	r0, #0
 8006d70:	d15a      	bne.n	8006e28 <_tzset_unlocked_r+0x110>
 8006d72:	7823      	ldrb	r3, [r4, #0]
 8006d74:	ae0a      	add	r6, sp, #40	; 0x28
 8006d76:	2b3a      	cmp	r3, #58	; 0x3a
 8006d78:	bf08      	it	eq
 8006d7a:	3401      	addeq	r4, #1
 8006d7c:	4633      	mov	r3, r6
 8006d7e:	4620      	mov	r0, r4
 8006d80:	4aa0      	ldr	r2, [pc, #640]	; (8007004 <_tzset_unlocked_r+0x2ec>)
 8006d82:	49a1      	ldr	r1, [pc, #644]	; (8007008 <_tzset_unlocked_r+0x2f0>)
 8006d84:	f000 ffa8 	bl	8007cd8 <siscanf>
 8006d88:	2800      	cmp	r0, #0
 8006d8a:	dddf      	ble.n	8006d4c <_tzset_unlocked_r+0x34>
 8006d8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d8e:	18e7      	adds	r7, r4, r3
 8006d90:	5ce3      	ldrb	r3, [r4, r3]
 8006d92:	2b2d      	cmp	r3, #45	; 0x2d
 8006d94:	d14c      	bne.n	8006e30 <_tzset_unlocked_r+0x118>
 8006d96:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8006d9a:	3701      	adds	r7, #1
 8006d9c:	2400      	movs	r4, #0
 8006d9e:	f10d 0a20 	add.w	sl, sp, #32
 8006da2:	f10d 0b1e 	add.w	fp, sp, #30
 8006da6:	4633      	mov	r3, r6
 8006da8:	4638      	mov	r0, r7
 8006daa:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8006dae:	4997      	ldr	r1, [pc, #604]	; (800700c <_tzset_unlocked_r+0x2f4>)
 8006db0:	9603      	str	r6, [sp, #12]
 8006db2:	f8cd b000 	str.w	fp, [sp]
 8006db6:	aa07      	add	r2, sp, #28
 8006db8:	f8ad 401e 	strh.w	r4, [sp, #30]
 8006dbc:	f8ad 4020 	strh.w	r4, [sp, #32]
 8006dc0:	f000 ff8a 	bl	8007cd8 <siscanf>
 8006dc4:	42a0      	cmp	r0, r4
 8006dc6:	ddc1      	ble.n	8006d4c <_tzset_unlocked_r+0x34>
 8006dc8:	213c      	movs	r1, #60	; 0x3c
 8006dca:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8006dce:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8006dd2:	f8df 923c 	ldr.w	r9, [pc, #572]	; 8007010 <_tzset_unlocked_r+0x2f8>
 8006dd6:	fb01 3302 	mla	r3, r1, r2, r3
 8006dda:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8006dde:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8006de2:	fb01 3302 	mla	r3, r1, r2, r3
 8006de6:	fb08 f303 	mul.w	r3, r8, r3
 8006dea:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8007000 <_tzset_unlocked_r+0x2e8>
 8006dee:	62ab      	str	r3, [r5, #40]	; 0x28
 8006df0:	4b84      	ldr	r3, [pc, #528]	; (8007004 <_tzset_unlocked_r+0x2ec>)
 8006df2:	464a      	mov	r2, r9
 8006df4:	f8c8 3000 	str.w	r3, [r8]
 8006df8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dfa:	4983      	ldr	r1, [pc, #524]	; (8007008 <_tzset_unlocked_r+0x2f0>)
 8006dfc:	441f      	add	r7, r3
 8006dfe:	4638      	mov	r0, r7
 8006e00:	4633      	mov	r3, r6
 8006e02:	f000 ff69 	bl	8007cd8 <siscanf>
 8006e06:	42a0      	cmp	r0, r4
 8006e08:	dc18      	bgt.n	8006e3c <_tzset_unlocked_r+0x124>
 8006e0a:	f8d8 3000 	ldr.w	r3, [r8]
 8006e0e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8006e10:	f8c8 3004 	str.w	r3, [r8, #4]
 8006e14:	4b77      	ldr	r3, [pc, #476]	; (8006ff4 <_tzset_unlocked_r+0x2dc>)
 8006e16:	601a      	str	r2, [r3, #0]
 8006e18:	4b78      	ldr	r3, [pc, #480]	; (8006ffc <_tzset_unlocked_r+0x2e4>)
 8006e1a:	601c      	str	r4, [r3, #0]
 8006e1c:	e796      	b.n	8006d4c <_tzset_unlocked_r+0x34>
 8006e1e:	f7f9 f99f 	bl	8000160 <strcmp>
 8006e22:	2800      	cmp	r0, #0
 8006e24:	d198      	bne.n	8006d58 <_tzset_unlocked_r+0x40>
 8006e26:	e791      	b.n	8006d4c <_tzset_unlocked_r+0x34>
 8006e28:	4621      	mov	r1, r4
 8006e2a:	f7ff fdcc 	bl	80069c6 <strcpy>
 8006e2e:	e7a0      	b.n	8006d72 <_tzset_unlocked_r+0x5a>
 8006e30:	2b2b      	cmp	r3, #43	; 0x2b
 8006e32:	f04f 0801 	mov.w	r8, #1
 8006e36:	bf08      	it	eq
 8006e38:	3701      	addeq	r7, #1
 8006e3a:	e7af      	b.n	8006d9c <_tzset_unlocked_r+0x84>
 8006e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e3e:	f8c8 9004 	str.w	r9, [r8, #4]
 8006e42:	18fc      	adds	r4, r7, r3
 8006e44:	5cfb      	ldrb	r3, [r7, r3]
 8006e46:	2b2d      	cmp	r3, #45	; 0x2d
 8006e48:	f040 808c 	bne.w	8006f64 <_tzset_unlocked_r+0x24c>
 8006e4c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006e50:	3401      	adds	r4, #1
 8006e52:	2300      	movs	r3, #0
 8006e54:	4620      	mov	r0, r4
 8006e56:	f8ad 301c 	strh.w	r3, [sp, #28]
 8006e5a:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006e5e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8006e62:	930a      	str	r3, [sp, #40]	; 0x28
 8006e64:	e9cd a602 	strd	sl, r6, [sp, #8]
 8006e68:	4633      	mov	r3, r6
 8006e6a:	e9cd b600 	strd	fp, r6, [sp]
 8006e6e:	4967      	ldr	r1, [pc, #412]	; (800700c <_tzset_unlocked_r+0x2f4>)
 8006e70:	aa07      	add	r2, sp, #28
 8006e72:	f000 ff31 	bl	8007cd8 <siscanf>
 8006e76:	2800      	cmp	r0, #0
 8006e78:	dc7a      	bgt.n	8006f70 <_tzset_unlocked_r+0x258>
 8006e7a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006e7c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8006e80:	462f      	mov	r7, r5
 8006e82:	f04f 0900 	mov.w	r9, #0
 8006e86:	652b      	str	r3, [r5, #80]	; 0x50
 8006e88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e8a:	441c      	add	r4, r3
 8006e8c:	7823      	ldrb	r3, [r4, #0]
 8006e8e:	2b2c      	cmp	r3, #44	; 0x2c
 8006e90:	bf08      	it	eq
 8006e92:	3401      	addeq	r4, #1
 8006e94:	f894 8000 	ldrb.w	r8, [r4]
 8006e98:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8006e9c:	d17a      	bne.n	8006f94 <_tzset_unlocked_r+0x27c>
 8006e9e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8006ea2:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8006ea6:	ab09      	add	r3, sp, #36	; 0x24
 8006ea8:	9300      	str	r3, [sp, #0]
 8006eaa:	4620      	mov	r0, r4
 8006eac:	4633      	mov	r3, r6
 8006eae:	4959      	ldr	r1, [pc, #356]	; (8007014 <_tzset_unlocked_r+0x2fc>)
 8006eb0:	9603      	str	r6, [sp, #12]
 8006eb2:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8006eb6:	f000 ff0f 	bl	8007cd8 <siscanf>
 8006eba:	2803      	cmp	r0, #3
 8006ebc:	f47f af46 	bne.w	8006d4c <_tzset_unlocked_r+0x34>
 8006ec0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8006ec4:	1e4b      	subs	r3, r1, #1
 8006ec6:	2b0b      	cmp	r3, #11
 8006ec8:	f63f af40 	bhi.w	8006d4c <_tzset_unlocked_r+0x34>
 8006ecc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8006ed0:	1e53      	subs	r3, r2, #1
 8006ed2:	2b04      	cmp	r3, #4
 8006ed4:	f63f af3a 	bhi.w	8006d4c <_tzset_unlocked_r+0x34>
 8006ed8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8006edc:	2b06      	cmp	r3, #6
 8006ede:	f63f af35 	bhi.w	8006d4c <_tzset_unlocked_r+0x34>
 8006ee2:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8006ee6:	f887 8008 	strb.w	r8, [r7, #8]
 8006eea:	617b      	str	r3, [r7, #20]
 8006eec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eee:	eb04 0803 	add.w	r8, r4, r3
 8006ef2:	2302      	movs	r3, #2
 8006ef4:	f8ad 301c 	strh.w	r3, [sp, #28]
 8006ef8:	2300      	movs	r3, #0
 8006efa:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006efe:	f8ad 3020 	strh.w	r3, [sp, #32]
 8006f02:	930a      	str	r3, [sp, #40]	; 0x28
 8006f04:	f898 3000 	ldrb.w	r3, [r8]
 8006f08:	2b2f      	cmp	r3, #47	; 0x2f
 8006f0a:	d109      	bne.n	8006f20 <_tzset_unlocked_r+0x208>
 8006f0c:	4633      	mov	r3, r6
 8006f0e:	4640      	mov	r0, r8
 8006f10:	e9cd a602 	strd	sl, r6, [sp, #8]
 8006f14:	e9cd b600 	strd	fp, r6, [sp]
 8006f18:	493f      	ldr	r1, [pc, #252]	; (8007018 <_tzset_unlocked_r+0x300>)
 8006f1a:	aa07      	add	r2, sp, #28
 8006f1c:	f000 fedc 	bl	8007cd8 <siscanf>
 8006f20:	213c      	movs	r1, #60	; 0x3c
 8006f22:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8006f26:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8006f2a:	3728      	adds	r7, #40	; 0x28
 8006f2c:	fb01 3302 	mla	r3, r1, r2, r3
 8006f30:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8006f34:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8006f38:	fb01 3302 	mla	r3, r1, r2, r3
 8006f3c:	f847 3c10 	str.w	r3, [r7, #-16]
 8006f40:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006f42:	4444      	add	r4, r8
 8006f44:	f1b9 0f00 	cmp.w	r9, #0
 8006f48:	d021      	beq.n	8006f8e <_tzset_unlocked_r+0x276>
 8006f4a:	6868      	ldr	r0, [r5, #4]
 8006f4c:	f7ff fe28 	bl	8006ba0 <__tzcalc_limits>
 8006f50:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8006f52:	4b28      	ldr	r3, [pc, #160]	; (8006ff4 <_tzset_unlocked_r+0x2dc>)
 8006f54:	601a      	str	r2, [r3, #0]
 8006f56:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8006f58:	1a9b      	subs	r3, r3, r2
 8006f5a:	bf18      	it	ne
 8006f5c:	2301      	movne	r3, #1
 8006f5e:	4a27      	ldr	r2, [pc, #156]	; (8006ffc <_tzset_unlocked_r+0x2e4>)
 8006f60:	6013      	str	r3, [r2, #0]
 8006f62:	e6f3      	b.n	8006d4c <_tzset_unlocked_r+0x34>
 8006f64:	2b2b      	cmp	r3, #43	; 0x2b
 8006f66:	f04f 0701 	mov.w	r7, #1
 8006f6a:	bf08      	it	eq
 8006f6c:	3401      	addeq	r4, #1
 8006f6e:	e770      	b.n	8006e52 <_tzset_unlocked_r+0x13a>
 8006f70:	213c      	movs	r1, #60	; 0x3c
 8006f72:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8006f76:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8006f7a:	fb01 3302 	mla	r3, r1, r2, r3
 8006f7e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8006f82:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8006f86:	fb01 3302 	mla	r3, r1, r2, r3
 8006f8a:	437b      	muls	r3, r7
 8006f8c:	e778      	b.n	8006e80 <_tzset_unlocked_r+0x168>
 8006f8e:	f04f 0901 	mov.w	r9, #1
 8006f92:	e77b      	b.n	8006e8c <_tzset_unlocked_r+0x174>
 8006f94:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8006f98:	bf0a      	itet	eq
 8006f9a:	4643      	moveq	r3, r8
 8006f9c:	2344      	movne	r3, #68	; 0x44
 8006f9e:	3401      	addeq	r4, #1
 8006fa0:	220a      	movs	r2, #10
 8006fa2:	4620      	mov	r0, r4
 8006fa4:	a90b      	add	r1, sp, #44	; 0x2c
 8006fa6:	9305      	str	r3, [sp, #20]
 8006fa8:	f000 ff48 	bl	8007e3c <strtoul>
 8006fac:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8006fb0:	9b05      	ldr	r3, [sp, #20]
 8006fb2:	45a0      	cmp	r8, r4
 8006fb4:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8006fb8:	d114      	bne.n	8006fe4 <_tzset_unlocked_r+0x2cc>
 8006fba:	234d      	movs	r3, #77	; 0x4d
 8006fbc:	f1b9 0f00 	cmp.w	r9, #0
 8006fc0:	d107      	bne.n	8006fd2 <_tzset_unlocked_r+0x2ba>
 8006fc2:	2103      	movs	r1, #3
 8006fc4:	722b      	strb	r3, [r5, #8]
 8006fc6:	2302      	movs	r3, #2
 8006fc8:	f8c5 9014 	str.w	r9, [r5, #20]
 8006fcc:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8006fd0:	e78f      	b.n	8006ef2 <_tzset_unlocked_r+0x1da>
 8006fd2:	220b      	movs	r2, #11
 8006fd4:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8006fde:	2300      	movs	r3, #0
 8006fe0:	63eb      	str	r3, [r5, #60]	; 0x3c
 8006fe2:	e786      	b.n	8006ef2 <_tzset_unlocked_r+0x1da>
 8006fe4:	b280      	uxth	r0, r0
 8006fe6:	723b      	strb	r3, [r7, #8]
 8006fe8:	6178      	str	r0, [r7, #20]
 8006fea:	e782      	b.n	8006ef2 <_tzset_unlocked_r+0x1da>
 8006fec:	08008ac5 	.word	0x08008ac5
 8006ff0:	20001620 	.word	0x20001620
 8006ff4:	20001628 	.word	0x20001628
 8006ff8:	08008ac8 	.word	0x08008ac8
 8006ffc:	20001624 	.word	0x20001624
 8007000:	2000025c 	.word	0x2000025c
 8007004:	20001613 	.word	0x20001613
 8007008:	08008acc 	.word	0x08008acc
 800700c:	08008aef 	.word	0x08008aef
 8007010:	20001608 	.word	0x20001608
 8007014:	08008adb 	.word	0x08008adb
 8007018:	08008aee 	.word	0x08008aee

0800701c <__swbuf_r>:
 800701c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800701e:	460e      	mov	r6, r1
 8007020:	4614      	mov	r4, r2
 8007022:	4605      	mov	r5, r0
 8007024:	b118      	cbz	r0, 800702e <__swbuf_r+0x12>
 8007026:	6983      	ldr	r3, [r0, #24]
 8007028:	b90b      	cbnz	r3, 800702e <__swbuf_r+0x12>
 800702a:	f7fe fe33 	bl	8005c94 <__sinit>
 800702e:	4b21      	ldr	r3, [pc, #132]	; (80070b4 <__swbuf_r+0x98>)
 8007030:	429c      	cmp	r4, r3
 8007032:	d12b      	bne.n	800708c <__swbuf_r+0x70>
 8007034:	686c      	ldr	r4, [r5, #4]
 8007036:	69a3      	ldr	r3, [r4, #24]
 8007038:	60a3      	str	r3, [r4, #8]
 800703a:	89a3      	ldrh	r3, [r4, #12]
 800703c:	071a      	lsls	r2, r3, #28
 800703e:	d52f      	bpl.n	80070a0 <__swbuf_r+0x84>
 8007040:	6923      	ldr	r3, [r4, #16]
 8007042:	b36b      	cbz	r3, 80070a0 <__swbuf_r+0x84>
 8007044:	6923      	ldr	r3, [r4, #16]
 8007046:	6820      	ldr	r0, [r4, #0]
 8007048:	b2f6      	uxtb	r6, r6
 800704a:	1ac0      	subs	r0, r0, r3
 800704c:	6963      	ldr	r3, [r4, #20]
 800704e:	4637      	mov	r7, r6
 8007050:	4283      	cmp	r3, r0
 8007052:	dc04      	bgt.n	800705e <__swbuf_r+0x42>
 8007054:	4621      	mov	r1, r4
 8007056:	4628      	mov	r0, r5
 8007058:	f000 f976 	bl	8007348 <_fflush_r>
 800705c:	bb30      	cbnz	r0, 80070ac <__swbuf_r+0x90>
 800705e:	68a3      	ldr	r3, [r4, #8]
 8007060:	3001      	adds	r0, #1
 8007062:	3b01      	subs	r3, #1
 8007064:	60a3      	str	r3, [r4, #8]
 8007066:	6823      	ldr	r3, [r4, #0]
 8007068:	1c5a      	adds	r2, r3, #1
 800706a:	6022      	str	r2, [r4, #0]
 800706c:	701e      	strb	r6, [r3, #0]
 800706e:	6963      	ldr	r3, [r4, #20]
 8007070:	4283      	cmp	r3, r0
 8007072:	d004      	beq.n	800707e <__swbuf_r+0x62>
 8007074:	89a3      	ldrh	r3, [r4, #12]
 8007076:	07db      	lsls	r3, r3, #31
 8007078:	d506      	bpl.n	8007088 <__swbuf_r+0x6c>
 800707a:	2e0a      	cmp	r6, #10
 800707c:	d104      	bne.n	8007088 <__swbuf_r+0x6c>
 800707e:	4621      	mov	r1, r4
 8007080:	4628      	mov	r0, r5
 8007082:	f000 f961 	bl	8007348 <_fflush_r>
 8007086:	b988      	cbnz	r0, 80070ac <__swbuf_r+0x90>
 8007088:	4638      	mov	r0, r7
 800708a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800708c:	4b0a      	ldr	r3, [pc, #40]	; (80070b8 <__swbuf_r+0x9c>)
 800708e:	429c      	cmp	r4, r3
 8007090:	d101      	bne.n	8007096 <__swbuf_r+0x7a>
 8007092:	68ac      	ldr	r4, [r5, #8]
 8007094:	e7cf      	b.n	8007036 <__swbuf_r+0x1a>
 8007096:	4b09      	ldr	r3, [pc, #36]	; (80070bc <__swbuf_r+0xa0>)
 8007098:	429c      	cmp	r4, r3
 800709a:	bf08      	it	eq
 800709c:	68ec      	ldreq	r4, [r5, #12]
 800709e:	e7ca      	b.n	8007036 <__swbuf_r+0x1a>
 80070a0:	4621      	mov	r1, r4
 80070a2:	4628      	mov	r0, r5
 80070a4:	f000 f81e 	bl	80070e4 <__swsetup_r>
 80070a8:	2800      	cmp	r0, #0
 80070aa:	d0cb      	beq.n	8007044 <__swbuf_r+0x28>
 80070ac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80070b0:	e7ea      	b.n	8007088 <__swbuf_r+0x6c>
 80070b2:	bf00      	nop
 80070b4:	080088f0 	.word	0x080088f0
 80070b8:	08008910 	.word	0x08008910
 80070bc:	080088d0 	.word	0x080088d0

080070c0 <_write_r>:
 80070c0:	b538      	push	{r3, r4, r5, lr}
 80070c2:	4604      	mov	r4, r0
 80070c4:	4608      	mov	r0, r1
 80070c6:	4611      	mov	r1, r2
 80070c8:	2200      	movs	r2, #0
 80070ca:	4d05      	ldr	r5, [pc, #20]	; (80070e0 <_write_r+0x20>)
 80070cc:	602a      	str	r2, [r5, #0]
 80070ce:	461a      	mov	r2, r3
 80070d0:	f7f9 fdea 	bl	8000ca8 <_write>
 80070d4:	1c43      	adds	r3, r0, #1
 80070d6:	d102      	bne.n	80070de <_write_r+0x1e>
 80070d8:	682b      	ldr	r3, [r5, #0]
 80070da:	b103      	cbz	r3, 80070de <_write_r+0x1e>
 80070dc:	6023      	str	r3, [r4, #0]
 80070de:	bd38      	pop	{r3, r4, r5, pc}
 80070e0:	20001604 	.word	0x20001604

080070e4 <__swsetup_r>:
 80070e4:	4b32      	ldr	r3, [pc, #200]	; (80071b0 <__swsetup_r+0xcc>)
 80070e6:	b570      	push	{r4, r5, r6, lr}
 80070e8:	681d      	ldr	r5, [r3, #0]
 80070ea:	4606      	mov	r6, r0
 80070ec:	460c      	mov	r4, r1
 80070ee:	b125      	cbz	r5, 80070fa <__swsetup_r+0x16>
 80070f0:	69ab      	ldr	r3, [r5, #24]
 80070f2:	b913      	cbnz	r3, 80070fa <__swsetup_r+0x16>
 80070f4:	4628      	mov	r0, r5
 80070f6:	f7fe fdcd 	bl	8005c94 <__sinit>
 80070fa:	4b2e      	ldr	r3, [pc, #184]	; (80071b4 <__swsetup_r+0xd0>)
 80070fc:	429c      	cmp	r4, r3
 80070fe:	d10f      	bne.n	8007120 <__swsetup_r+0x3c>
 8007100:	686c      	ldr	r4, [r5, #4]
 8007102:	89a3      	ldrh	r3, [r4, #12]
 8007104:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007108:	0719      	lsls	r1, r3, #28
 800710a:	d42c      	bmi.n	8007166 <__swsetup_r+0x82>
 800710c:	06dd      	lsls	r5, r3, #27
 800710e:	d411      	bmi.n	8007134 <__swsetup_r+0x50>
 8007110:	2309      	movs	r3, #9
 8007112:	6033      	str	r3, [r6, #0]
 8007114:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800711c:	81a3      	strh	r3, [r4, #12]
 800711e:	e03e      	b.n	800719e <__swsetup_r+0xba>
 8007120:	4b25      	ldr	r3, [pc, #148]	; (80071b8 <__swsetup_r+0xd4>)
 8007122:	429c      	cmp	r4, r3
 8007124:	d101      	bne.n	800712a <__swsetup_r+0x46>
 8007126:	68ac      	ldr	r4, [r5, #8]
 8007128:	e7eb      	b.n	8007102 <__swsetup_r+0x1e>
 800712a:	4b24      	ldr	r3, [pc, #144]	; (80071bc <__swsetup_r+0xd8>)
 800712c:	429c      	cmp	r4, r3
 800712e:	bf08      	it	eq
 8007130:	68ec      	ldreq	r4, [r5, #12]
 8007132:	e7e6      	b.n	8007102 <__swsetup_r+0x1e>
 8007134:	0758      	lsls	r0, r3, #29
 8007136:	d512      	bpl.n	800715e <__swsetup_r+0x7a>
 8007138:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800713a:	b141      	cbz	r1, 800714e <__swsetup_r+0x6a>
 800713c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007140:	4299      	cmp	r1, r3
 8007142:	d002      	beq.n	800714a <__swsetup_r+0x66>
 8007144:	4630      	mov	r0, r6
 8007146:	f7ff fa15 	bl	8006574 <_free_r>
 800714a:	2300      	movs	r3, #0
 800714c:	6363      	str	r3, [r4, #52]	; 0x34
 800714e:	89a3      	ldrh	r3, [r4, #12]
 8007150:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007154:	81a3      	strh	r3, [r4, #12]
 8007156:	2300      	movs	r3, #0
 8007158:	6063      	str	r3, [r4, #4]
 800715a:	6923      	ldr	r3, [r4, #16]
 800715c:	6023      	str	r3, [r4, #0]
 800715e:	89a3      	ldrh	r3, [r4, #12]
 8007160:	f043 0308 	orr.w	r3, r3, #8
 8007164:	81a3      	strh	r3, [r4, #12]
 8007166:	6923      	ldr	r3, [r4, #16]
 8007168:	b94b      	cbnz	r3, 800717e <__swsetup_r+0x9a>
 800716a:	89a3      	ldrh	r3, [r4, #12]
 800716c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007174:	d003      	beq.n	800717e <__swsetup_r+0x9a>
 8007176:	4621      	mov	r1, r4
 8007178:	4630      	mov	r0, r6
 800717a:	f000 fa61 	bl	8007640 <__smakebuf_r>
 800717e:	89a0      	ldrh	r0, [r4, #12]
 8007180:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007184:	f010 0301 	ands.w	r3, r0, #1
 8007188:	d00a      	beq.n	80071a0 <__swsetup_r+0xbc>
 800718a:	2300      	movs	r3, #0
 800718c:	60a3      	str	r3, [r4, #8]
 800718e:	6963      	ldr	r3, [r4, #20]
 8007190:	425b      	negs	r3, r3
 8007192:	61a3      	str	r3, [r4, #24]
 8007194:	6923      	ldr	r3, [r4, #16]
 8007196:	b943      	cbnz	r3, 80071aa <__swsetup_r+0xc6>
 8007198:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800719c:	d1ba      	bne.n	8007114 <__swsetup_r+0x30>
 800719e:	bd70      	pop	{r4, r5, r6, pc}
 80071a0:	0781      	lsls	r1, r0, #30
 80071a2:	bf58      	it	pl
 80071a4:	6963      	ldrpl	r3, [r4, #20]
 80071a6:	60a3      	str	r3, [r4, #8]
 80071a8:	e7f4      	b.n	8007194 <__swsetup_r+0xb0>
 80071aa:	2000      	movs	r0, #0
 80071ac:	e7f7      	b.n	800719e <__swsetup_r+0xba>
 80071ae:	bf00      	nop
 80071b0:	200001f8 	.word	0x200001f8
 80071b4:	080088f0 	.word	0x080088f0
 80071b8:	08008910 	.word	0x08008910
 80071bc:	080088d0 	.word	0x080088d0

080071c0 <__assert_func>:
 80071c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80071c2:	4614      	mov	r4, r2
 80071c4:	461a      	mov	r2, r3
 80071c6:	4b09      	ldr	r3, [pc, #36]	; (80071ec <__assert_func+0x2c>)
 80071c8:	4605      	mov	r5, r0
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	68d8      	ldr	r0, [r3, #12]
 80071ce:	b14c      	cbz	r4, 80071e4 <__assert_func+0x24>
 80071d0:	4b07      	ldr	r3, [pc, #28]	; (80071f0 <__assert_func+0x30>)
 80071d2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80071d6:	9100      	str	r1, [sp, #0]
 80071d8:	462b      	mov	r3, r5
 80071da:	4906      	ldr	r1, [pc, #24]	; (80071f4 <__assert_func+0x34>)
 80071dc:	f000 f8f0 	bl	80073c0 <fiprintf>
 80071e0:	f000 fe36 	bl	8007e50 <abort>
 80071e4:	4b04      	ldr	r3, [pc, #16]	; (80071f8 <__assert_func+0x38>)
 80071e6:	461c      	mov	r4, r3
 80071e8:	e7f3      	b.n	80071d2 <__assert_func+0x12>
 80071ea:	bf00      	nop
 80071ec:	200001f8 	.word	0x200001f8
 80071f0:	08008b01 	.word	0x08008b01
 80071f4:	08008b0e 	.word	0x08008b0e
 80071f8:	08008b3c 	.word	0x08008b3c

080071fc <_close_r>:
 80071fc:	b538      	push	{r3, r4, r5, lr}
 80071fe:	2300      	movs	r3, #0
 8007200:	4d05      	ldr	r5, [pc, #20]	; (8007218 <_close_r+0x1c>)
 8007202:	4604      	mov	r4, r0
 8007204:	4608      	mov	r0, r1
 8007206:	602b      	str	r3, [r5, #0]
 8007208:	f7fa fa2e 	bl	8001668 <_close>
 800720c:	1c43      	adds	r3, r0, #1
 800720e:	d102      	bne.n	8007216 <_close_r+0x1a>
 8007210:	682b      	ldr	r3, [r5, #0]
 8007212:	b103      	cbz	r3, 8007216 <_close_r+0x1a>
 8007214:	6023      	str	r3, [r4, #0]
 8007216:	bd38      	pop	{r3, r4, r5, pc}
 8007218:	20001604 	.word	0x20001604

0800721c <div>:
 800721c:	b510      	push	{r4, lr}
 800721e:	fb91 f4f2 	sdiv	r4, r1, r2
 8007222:	2900      	cmp	r1, #0
 8007224:	fb02 1314 	mls	r3, r2, r4, r1
 8007228:	db06      	blt.n	8007238 <div+0x1c>
 800722a:	2b00      	cmp	r3, #0
 800722c:	da01      	bge.n	8007232 <div+0x16>
 800722e:	3401      	adds	r4, #1
 8007230:	1a9b      	subs	r3, r3, r2
 8007232:	e9c0 4300 	strd	r4, r3, [r0]
 8007236:	bd10      	pop	{r4, pc}
 8007238:	2b00      	cmp	r3, #0
 800723a:	bfc4      	itt	gt
 800723c:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
 8007240:	189b      	addgt	r3, r3, r2
 8007242:	e7f6      	b.n	8007232 <div+0x16>

08007244 <__sflush_r>:
 8007244:	898a      	ldrh	r2, [r1, #12]
 8007246:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007248:	4605      	mov	r5, r0
 800724a:	0710      	lsls	r0, r2, #28
 800724c:	460c      	mov	r4, r1
 800724e:	d457      	bmi.n	8007300 <__sflush_r+0xbc>
 8007250:	684b      	ldr	r3, [r1, #4]
 8007252:	2b00      	cmp	r3, #0
 8007254:	dc04      	bgt.n	8007260 <__sflush_r+0x1c>
 8007256:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007258:	2b00      	cmp	r3, #0
 800725a:	dc01      	bgt.n	8007260 <__sflush_r+0x1c>
 800725c:	2000      	movs	r0, #0
 800725e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007260:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007262:	2e00      	cmp	r6, #0
 8007264:	d0fa      	beq.n	800725c <__sflush_r+0x18>
 8007266:	2300      	movs	r3, #0
 8007268:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800726c:	682f      	ldr	r7, [r5, #0]
 800726e:	602b      	str	r3, [r5, #0]
 8007270:	d032      	beq.n	80072d8 <__sflush_r+0x94>
 8007272:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007274:	89a3      	ldrh	r3, [r4, #12]
 8007276:	075a      	lsls	r2, r3, #29
 8007278:	d505      	bpl.n	8007286 <__sflush_r+0x42>
 800727a:	6863      	ldr	r3, [r4, #4]
 800727c:	1ac0      	subs	r0, r0, r3
 800727e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007280:	b10b      	cbz	r3, 8007286 <__sflush_r+0x42>
 8007282:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007284:	1ac0      	subs	r0, r0, r3
 8007286:	2300      	movs	r3, #0
 8007288:	4602      	mov	r2, r0
 800728a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800728c:	4628      	mov	r0, r5
 800728e:	6a21      	ldr	r1, [r4, #32]
 8007290:	47b0      	blx	r6
 8007292:	1c43      	adds	r3, r0, #1
 8007294:	89a3      	ldrh	r3, [r4, #12]
 8007296:	d106      	bne.n	80072a6 <__sflush_r+0x62>
 8007298:	6829      	ldr	r1, [r5, #0]
 800729a:	291d      	cmp	r1, #29
 800729c:	d82c      	bhi.n	80072f8 <__sflush_r+0xb4>
 800729e:	4a29      	ldr	r2, [pc, #164]	; (8007344 <__sflush_r+0x100>)
 80072a0:	40ca      	lsrs	r2, r1
 80072a2:	07d6      	lsls	r6, r2, #31
 80072a4:	d528      	bpl.n	80072f8 <__sflush_r+0xb4>
 80072a6:	2200      	movs	r2, #0
 80072a8:	6062      	str	r2, [r4, #4]
 80072aa:	6922      	ldr	r2, [r4, #16]
 80072ac:	04d9      	lsls	r1, r3, #19
 80072ae:	6022      	str	r2, [r4, #0]
 80072b0:	d504      	bpl.n	80072bc <__sflush_r+0x78>
 80072b2:	1c42      	adds	r2, r0, #1
 80072b4:	d101      	bne.n	80072ba <__sflush_r+0x76>
 80072b6:	682b      	ldr	r3, [r5, #0]
 80072b8:	b903      	cbnz	r3, 80072bc <__sflush_r+0x78>
 80072ba:	6560      	str	r0, [r4, #84]	; 0x54
 80072bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072be:	602f      	str	r7, [r5, #0]
 80072c0:	2900      	cmp	r1, #0
 80072c2:	d0cb      	beq.n	800725c <__sflush_r+0x18>
 80072c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072c8:	4299      	cmp	r1, r3
 80072ca:	d002      	beq.n	80072d2 <__sflush_r+0x8e>
 80072cc:	4628      	mov	r0, r5
 80072ce:	f7ff f951 	bl	8006574 <_free_r>
 80072d2:	2000      	movs	r0, #0
 80072d4:	6360      	str	r0, [r4, #52]	; 0x34
 80072d6:	e7c2      	b.n	800725e <__sflush_r+0x1a>
 80072d8:	6a21      	ldr	r1, [r4, #32]
 80072da:	2301      	movs	r3, #1
 80072dc:	4628      	mov	r0, r5
 80072de:	47b0      	blx	r6
 80072e0:	1c41      	adds	r1, r0, #1
 80072e2:	d1c7      	bne.n	8007274 <__sflush_r+0x30>
 80072e4:	682b      	ldr	r3, [r5, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d0c4      	beq.n	8007274 <__sflush_r+0x30>
 80072ea:	2b1d      	cmp	r3, #29
 80072ec:	d001      	beq.n	80072f2 <__sflush_r+0xae>
 80072ee:	2b16      	cmp	r3, #22
 80072f0:	d101      	bne.n	80072f6 <__sflush_r+0xb2>
 80072f2:	602f      	str	r7, [r5, #0]
 80072f4:	e7b2      	b.n	800725c <__sflush_r+0x18>
 80072f6:	89a3      	ldrh	r3, [r4, #12]
 80072f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072fc:	81a3      	strh	r3, [r4, #12]
 80072fe:	e7ae      	b.n	800725e <__sflush_r+0x1a>
 8007300:	690f      	ldr	r7, [r1, #16]
 8007302:	2f00      	cmp	r7, #0
 8007304:	d0aa      	beq.n	800725c <__sflush_r+0x18>
 8007306:	0793      	lsls	r3, r2, #30
 8007308:	bf18      	it	ne
 800730a:	2300      	movne	r3, #0
 800730c:	680e      	ldr	r6, [r1, #0]
 800730e:	bf08      	it	eq
 8007310:	694b      	ldreq	r3, [r1, #20]
 8007312:	1bf6      	subs	r6, r6, r7
 8007314:	600f      	str	r7, [r1, #0]
 8007316:	608b      	str	r3, [r1, #8]
 8007318:	2e00      	cmp	r6, #0
 800731a:	dd9f      	ble.n	800725c <__sflush_r+0x18>
 800731c:	4633      	mov	r3, r6
 800731e:	463a      	mov	r2, r7
 8007320:	4628      	mov	r0, r5
 8007322:	6a21      	ldr	r1, [r4, #32]
 8007324:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007328:	47e0      	blx	ip
 800732a:	2800      	cmp	r0, #0
 800732c:	dc06      	bgt.n	800733c <__sflush_r+0xf8>
 800732e:	89a3      	ldrh	r3, [r4, #12]
 8007330:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007338:	81a3      	strh	r3, [r4, #12]
 800733a:	e790      	b.n	800725e <__sflush_r+0x1a>
 800733c:	4407      	add	r7, r0
 800733e:	1a36      	subs	r6, r6, r0
 8007340:	e7ea      	b.n	8007318 <__sflush_r+0xd4>
 8007342:	bf00      	nop
 8007344:	20400001 	.word	0x20400001

08007348 <_fflush_r>:
 8007348:	b538      	push	{r3, r4, r5, lr}
 800734a:	690b      	ldr	r3, [r1, #16]
 800734c:	4605      	mov	r5, r0
 800734e:	460c      	mov	r4, r1
 8007350:	b913      	cbnz	r3, 8007358 <_fflush_r+0x10>
 8007352:	2500      	movs	r5, #0
 8007354:	4628      	mov	r0, r5
 8007356:	bd38      	pop	{r3, r4, r5, pc}
 8007358:	b118      	cbz	r0, 8007362 <_fflush_r+0x1a>
 800735a:	6983      	ldr	r3, [r0, #24]
 800735c:	b90b      	cbnz	r3, 8007362 <_fflush_r+0x1a>
 800735e:	f7fe fc99 	bl	8005c94 <__sinit>
 8007362:	4b14      	ldr	r3, [pc, #80]	; (80073b4 <_fflush_r+0x6c>)
 8007364:	429c      	cmp	r4, r3
 8007366:	d11b      	bne.n	80073a0 <_fflush_r+0x58>
 8007368:	686c      	ldr	r4, [r5, #4]
 800736a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d0ef      	beq.n	8007352 <_fflush_r+0xa>
 8007372:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007374:	07d0      	lsls	r0, r2, #31
 8007376:	d404      	bmi.n	8007382 <_fflush_r+0x3a>
 8007378:	0599      	lsls	r1, r3, #22
 800737a:	d402      	bmi.n	8007382 <_fflush_r+0x3a>
 800737c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800737e:	f7fe fe5d 	bl	800603c <__retarget_lock_acquire_recursive>
 8007382:	4628      	mov	r0, r5
 8007384:	4621      	mov	r1, r4
 8007386:	f7ff ff5d 	bl	8007244 <__sflush_r>
 800738a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800738c:	4605      	mov	r5, r0
 800738e:	07da      	lsls	r2, r3, #31
 8007390:	d4e0      	bmi.n	8007354 <_fflush_r+0xc>
 8007392:	89a3      	ldrh	r3, [r4, #12]
 8007394:	059b      	lsls	r3, r3, #22
 8007396:	d4dd      	bmi.n	8007354 <_fflush_r+0xc>
 8007398:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800739a:	f7fe fe51 	bl	8006040 <__retarget_lock_release_recursive>
 800739e:	e7d9      	b.n	8007354 <_fflush_r+0xc>
 80073a0:	4b05      	ldr	r3, [pc, #20]	; (80073b8 <_fflush_r+0x70>)
 80073a2:	429c      	cmp	r4, r3
 80073a4:	d101      	bne.n	80073aa <_fflush_r+0x62>
 80073a6:	68ac      	ldr	r4, [r5, #8]
 80073a8:	e7df      	b.n	800736a <_fflush_r+0x22>
 80073aa:	4b04      	ldr	r3, [pc, #16]	; (80073bc <_fflush_r+0x74>)
 80073ac:	429c      	cmp	r4, r3
 80073ae:	bf08      	it	eq
 80073b0:	68ec      	ldreq	r4, [r5, #12]
 80073b2:	e7da      	b.n	800736a <_fflush_r+0x22>
 80073b4:	080088f0 	.word	0x080088f0
 80073b8:	08008910 	.word	0x08008910
 80073bc:	080088d0 	.word	0x080088d0

080073c0 <fiprintf>:
 80073c0:	b40e      	push	{r1, r2, r3}
 80073c2:	b503      	push	{r0, r1, lr}
 80073c4:	4601      	mov	r1, r0
 80073c6:	ab03      	add	r3, sp, #12
 80073c8:	4805      	ldr	r0, [pc, #20]	; (80073e0 <fiprintf+0x20>)
 80073ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80073ce:	6800      	ldr	r0, [r0, #0]
 80073d0:	9301      	str	r3, [sp, #4]
 80073d2:	f000 f9a9 	bl	8007728 <_vfiprintf_r>
 80073d6:	b002      	add	sp, #8
 80073d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80073dc:	b003      	add	sp, #12
 80073de:	4770      	bx	lr
 80073e0:	200001f8 	.word	0x200001f8

080073e4 <_findenv_r>:
 80073e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073e8:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8007458 <_findenv_r+0x74>
 80073ec:	4607      	mov	r7, r0
 80073ee:	4689      	mov	r9, r1
 80073f0:	4616      	mov	r6, r2
 80073f2:	f000 fd35 	bl	8007e60 <__env_lock>
 80073f6:	f8da 4000 	ldr.w	r4, [sl]
 80073fa:	b134      	cbz	r4, 800740a <_findenv_r+0x26>
 80073fc:	464b      	mov	r3, r9
 80073fe:	4698      	mov	r8, r3
 8007400:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007404:	b13a      	cbz	r2, 8007416 <_findenv_r+0x32>
 8007406:	2a3d      	cmp	r2, #61	; 0x3d
 8007408:	d1f9      	bne.n	80073fe <_findenv_r+0x1a>
 800740a:	4638      	mov	r0, r7
 800740c:	f000 fd2e 	bl	8007e6c <__env_unlock>
 8007410:	2000      	movs	r0, #0
 8007412:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007416:	eba8 0809 	sub.w	r8, r8, r9
 800741a:	46a3      	mov	fp, r4
 800741c:	f854 0b04 	ldr.w	r0, [r4], #4
 8007420:	2800      	cmp	r0, #0
 8007422:	d0f2      	beq.n	800740a <_findenv_r+0x26>
 8007424:	4642      	mov	r2, r8
 8007426:	4649      	mov	r1, r9
 8007428:	f000 fc80 	bl	8007d2c <strncmp>
 800742c:	2800      	cmp	r0, #0
 800742e:	d1f4      	bne.n	800741a <_findenv_r+0x36>
 8007430:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007434:	eb03 0508 	add.w	r5, r3, r8
 8007438:	f813 3008 	ldrb.w	r3, [r3, r8]
 800743c:	2b3d      	cmp	r3, #61	; 0x3d
 800743e:	d1ec      	bne.n	800741a <_findenv_r+0x36>
 8007440:	f8da 3000 	ldr.w	r3, [sl]
 8007444:	4638      	mov	r0, r7
 8007446:	ebab 0303 	sub.w	r3, fp, r3
 800744a:	109b      	asrs	r3, r3, #2
 800744c:	6033      	str	r3, [r6, #0]
 800744e:	f000 fd0d 	bl	8007e6c <__env_unlock>
 8007452:	1c68      	adds	r0, r5, #1
 8007454:	e7dd      	b.n	8007412 <_findenv_r+0x2e>
 8007456:	bf00      	nop
 8007458:	200001e4 	.word	0x200001e4

0800745c <_getenv_r>:
 800745c:	b507      	push	{r0, r1, r2, lr}
 800745e:	aa01      	add	r2, sp, #4
 8007460:	f7ff ffc0 	bl	80073e4 <_findenv_r>
 8007464:	b003      	add	sp, #12
 8007466:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800746c <__gettzinfo>:
 800746c:	4800      	ldr	r0, [pc, #0]	; (8007470 <__gettzinfo+0x4>)
 800746e:	4770      	bx	lr
 8007470:	20000268 	.word	0x20000268

08007474 <gmtime_r>:
 8007474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007478:	e9d0 6700 	ldrd	r6, r7, [r0]
 800747c:	460c      	mov	r4, r1
 800747e:	2300      	movs	r3, #0
 8007480:	4630      	mov	r0, r6
 8007482:	4639      	mov	r1, r7
 8007484:	4a4e      	ldr	r2, [pc, #312]	; (80075c0 <gmtime_r+0x14c>)
 8007486:	f7f8 fe75 	bl	8000174 <__aeabi_ldivmod>
 800748a:	4639      	mov	r1, r7
 800748c:	4605      	mov	r5, r0
 800748e:	2300      	movs	r3, #0
 8007490:	4630      	mov	r0, r6
 8007492:	4a4b      	ldr	r2, [pc, #300]	; (80075c0 <gmtime_r+0x14c>)
 8007494:	f7f8 fe6e 	bl	8000174 <__aeabi_ldivmod>
 8007498:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800749c:	2a00      	cmp	r2, #0
 800749e:	bfbc      	itt	lt
 80074a0:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80074a4:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80074a8:	fbb2 f1f0 	udiv	r1, r2, r0
 80074ac:	fb00 2211 	mls	r2, r0, r1, r2
 80074b0:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80074b4:	60a1      	str	r1, [r4, #8]
 80074b6:	fbb2 f1f0 	udiv	r1, r2, r0
 80074ba:	fb00 2211 	mls	r2, r0, r1, r2
 80074be:	6061      	str	r1, [r4, #4]
 80074c0:	f04f 0107 	mov.w	r1, #7
 80074c4:	f505 232f 	add.w	r3, r5, #716800	; 0xaf000
 80074c8:	bfac      	ite	ge
 80074ca:	f603 236c 	addwge	r3, r3, #2668	; 0xa6c
 80074ce:	f603 236b 	addwlt	r3, r3, #2667	; 0xa6b
 80074d2:	6022      	str	r2, [r4, #0]
 80074d4:	1cda      	adds	r2, r3, #3
 80074d6:	fb92 f1f1 	sdiv	r1, r2, r1
 80074da:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80074de:	1a52      	subs	r2, r2, r1
 80074e0:	bf48      	it	mi
 80074e2:	3207      	addmi	r2, #7
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	4d37      	ldr	r5, [pc, #220]	; (80075c4 <gmtime_r+0x150>)
 80074e8:	61a2      	str	r2, [r4, #24]
 80074ea:	bfbd      	ittte	lt
 80074ec:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 80074f0:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 80074f4:	fb92 f5f5 	sdivlt	r5, r2, r5
 80074f8:	fb93 f5f5 	sdivge	r5, r3, r5
 80074fc:	4832      	ldr	r0, [pc, #200]	; (80075c8 <gmtime_r+0x154>)
 80074fe:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8007502:	fb00 3005 	mla	r0, r0, r5, r3
 8007506:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800750a:	fbb0 f2f2 	udiv	r2, r0, r2
 800750e:	fbb0 f1f3 	udiv	r1, r0, r3
 8007512:	4402      	add	r2, r0
 8007514:	1a52      	subs	r2, r2, r1
 8007516:	492d      	ldr	r1, [pc, #180]	; (80075cc <gmtime_r+0x158>)
 8007518:	f240 1c6d 	movw	ip, #365	; 0x16d
 800751c:	fbb0 f1f1 	udiv	r1, r0, r1
 8007520:	1a52      	subs	r2, r2, r1
 8007522:	fbb2 f1fc 	udiv	r1, r2, ip
 8007526:	2764      	movs	r7, #100	; 0x64
 8007528:	fbb2 f3f3 	udiv	r3, r2, r3
 800752c:	fbb1 f6f7 	udiv	r6, r1, r7
 8007530:	2299      	movs	r2, #153	; 0x99
 8007532:	1af3      	subs	r3, r6, r3
 8007534:	4403      	add	r3, r0
 8007536:	fb0c 3311 	mls	r3, ip, r1, r3
 800753a:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800753e:	f10e 0e02 	add.w	lr, lr, #2
 8007542:	fbbe f0f2 	udiv	r0, lr, r2
 8007546:	f04f 0805 	mov.w	r8, #5
 800754a:	4342      	muls	r2, r0
 800754c:	3202      	adds	r2, #2
 800754e:	fbb2 f2f8 	udiv	r2, r2, r8
 8007552:	f103 0c01 	add.w	ip, r3, #1
 8007556:	ebac 0c02 	sub.w	ip, ip, r2
 800755a:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800755e:	4596      	cmp	lr, r2
 8007560:	bf94      	ite	ls
 8007562:	2202      	movls	r2, #2
 8007564:	f06f 0209 	mvnhi.w	r2, #9
 8007568:	4410      	add	r0, r2
 800756a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800756e:	fb02 1505 	mla	r5, r2, r5, r1
 8007572:	2801      	cmp	r0, #1
 8007574:	bf98      	it	ls
 8007576:	3501      	addls	r5, #1
 8007578:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800757c:	d30d      	bcc.n	800759a <gmtime_r+0x126>
 800757e:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8007582:	61e3      	str	r3, [r4, #28]
 8007584:	2300      	movs	r3, #0
 8007586:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800758a:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800758e:	f8c4 c00c 	str.w	ip, [r4, #12]
 8007592:	4620      	mov	r0, r4
 8007594:	6223      	str	r3, [r4, #32]
 8007596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800759a:	078a      	lsls	r2, r1, #30
 800759c:	d102      	bne.n	80075a4 <gmtime_r+0x130>
 800759e:	fb07 1616 	mls	r6, r7, r6, r1
 80075a2:	b95e      	cbnz	r6, 80075bc <gmtime_r+0x148>
 80075a4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80075a8:	fbb1 f6f2 	udiv	r6, r1, r2
 80075ac:	fb02 1216 	mls	r2, r2, r6, r1
 80075b0:	fab2 f282 	clz	r2, r2
 80075b4:	0952      	lsrs	r2, r2, #5
 80075b6:	333b      	adds	r3, #59	; 0x3b
 80075b8:	4413      	add	r3, r2
 80075ba:	e7e2      	b.n	8007582 <gmtime_r+0x10e>
 80075bc:	2201      	movs	r2, #1
 80075be:	e7fa      	b.n	80075b6 <gmtime_r+0x142>
 80075c0:	00015180 	.word	0x00015180
 80075c4:	00023ab1 	.word	0x00023ab1
 80075c8:	fffdc54f 	.word	0xfffdc54f
 80075cc:	00023ab0 	.word	0x00023ab0

080075d0 <_lseek_r>:
 80075d0:	b538      	push	{r3, r4, r5, lr}
 80075d2:	4604      	mov	r4, r0
 80075d4:	4608      	mov	r0, r1
 80075d6:	4611      	mov	r1, r2
 80075d8:	2200      	movs	r2, #0
 80075da:	4d05      	ldr	r5, [pc, #20]	; (80075f0 <_lseek_r+0x20>)
 80075dc:	602a      	str	r2, [r5, #0]
 80075de:	461a      	mov	r2, r3
 80075e0:	f7fa f866 	bl	80016b0 <_lseek>
 80075e4:	1c43      	adds	r3, r0, #1
 80075e6:	d102      	bne.n	80075ee <_lseek_r+0x1e>
 80075e8:	682b      	ldr	r3, [r5, #0]
 80075ea:	b103      	cbz	r3, 80075ee <_lseek_r+0x1e>
 80075ec:	6023      	str	r3, [r4, #0]
 80075ee:	bd38      	pop	{r3, r4, r5, pc}
 80075f0:	20001604 	.word	0x20001604

080075f4 <__swhatbuf_r>:
 80075f4:	b570      	push	{r4, r5, r6, lr}
 80075f6:	460e      	mov	r6, r1
 80075f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075fc:	4614      	mov	r4, r2
 80075fe:	2900      	cmp	r1, #0
 8007600:	461d      	mov	r5, r3
 8007602:	b096      	sub	sp, #88	; 0x58
 8007604:	da08      	bge.n	8007618 <__swhatbuf_r+0x24>
 8007606:	2200      	movs	r2, #0
 8007608:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800760c:	602a      	str	r2, [r5, #0]
 800760e:	061a      	lsls	r2, r3, #24
 8007610:	d410      	bmi.n	8007634 <__swhatbuf_r+0x40>
 8007612:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007616:	e00e      	b.n	8007636 <__swhatbuf_r+0x42>
 8007618:	466a      	mov	r2, sp
 800761a:	f000 fc2d 	bl	8007e78 <_fstat_r>
 800761e:	2800      	cmp	r0, #0
 8007620:	dbf1      	blt.n	8007606 <__swhatbuf_r+0x12>
 8007622:	9a01      	ldr	r2, [sp, #4]
 8007624:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007628:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800762c:	425a      	negs	r2, r3
 800762e:	415a      	adcs	r2, r3
 8007630:	602a      	str	r2, [r5, #0]
 8007632:	e7ee      	b.n	8007612 <__swhatbuf_r+0x1e>
 8007634:	2340      	movs	r3, #64	; 0x40
 8007636:	2000      	movs	r0, #0
 8007638:	6023      	str	r3, [r4, #0]
 800763a:	b016      	add	sp, #88	; 0x58
 800763c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007640 <__smakebuf_r>:
 8007640:	898b      	ldrh	r3, [r1, #12]
 8007642:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007644:	079d      	lsls	r5, r3, #30
 8007646:	4606      	mov	r6, r0
 8007648:	460c      	mov	r4, r1
 800764a:	d507      	bpl.n	800765c <__smakebuf_r+0x1c>
 800764c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007650:	6023      	str	r3, [r4, #0]
 8007652:	6123      	str	r3, [r4, #16]
 8007654:	2301      	movs	r3, #1
 8007656:	6163      	str	r3, [r4, #20]
 8007658:	b002      	add	sp, #8
 800765a:	bd70      	pop	{r4, r5, r6, pc}
 800765c:	466a      	mov	r2, sp
 800765e:	ab01      	add	r3, sp, #4
 8007660:	f7ff ffc8 	bl	80075f4 <__swhatbuf_r>
 8007664:	9900      	ldr	r1, [sp, #0]
 8007666:	4605      	mov	r5, r0
 8007668:	4630      	mov	r0, r6
 800766a:	f7fe ffeb 	bl	8006644 <_malloc_r>
 800766e:	b948      	cbnz	r0, 8007684 <__smakebuf_r+0x44>
 8007670:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007674:	059a      	lsls	r2, r3, #22
 8007676:	d4ef      	bmi.n	8007658 <__smakebuf_r+0x18>
 8007678:	f023 0303 	bic.w	r3, r3, #3
 800767c:	f043 0302 	orr.w	r3, r3, #2
 8007680:	81a3      	strh	r3, [r4, #12]
 8007682:	e7e3      	b.n	800764c <__smakebuf_r+0xc>
 8007684:	4b0d      	ldr	r3, [pc, #52]	; (80076bc <__smakebuf_r+0x7c>)
 8007686:	62b3      	str	r3, [r6, #40]	; 0x28
 8007688:	89a3      	ldrh	r3, [r4, #12]
 800768a:	6020      	str	r0, [r4, #0]
 800768c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007690:	81a3      	strh	r3, [r4, #12]
 8007692:	9b00      	ldr	r3, [sp, #0]
 8007694:	6120      	str	r0, [r4, #16]
 8007696:	6163      	str	r3, [r4, #20]
 8007698:	9b01      	ldr	r3, [sp, #4]
 800769a:	b15b      	cbz	r3, 80076b4 <__smakebuf_r+0x74>
 800769c:	4630      	mov	r0, r6
 800769e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076a2:	f000 fbfb 	bl	8007e9c <_isatty_r>
 80076a6:	b128      	cbz	r0, 80076b4 <__smakebuf_r+0x74>
 80076a8:	89a3      	ldrh	r3, [r4, #12]
 80076aa:	f023 0303 	bic.w	r3, r3, #3
 80076ae:	f043 0301 	orr.w	r3, r3, #1
 80076b2:	81a3      	strh	r3, [r4, #12]
 80076b4:	89a0      	ldrh	r0, [r4, #12]
 80076b6:	4305      	orrs	r5, r0
 80076b8:	81a5      	strh	r5, [r4, #12]
 80076ba:	e7cd      	b.n	8007658 <__smakebuf_r+0x18>
 80076bc:	08005c2d 	.word	0x08005c2d

080076c0 <__malloc_lock>:
 80076c0:	4801      	ldr	r0, [pc, #4]	; (80076c8 <__malloc_lock+0x8>)
 80076c2:	f7fe bcbb 	b.w	800603c <__retarget_lock_acquire_recursive>
 80076c6:	bf00      	nop
 80076c8:	200015f5 	.word	0x200015f5

080076cc <__malloc_unlock>:
 80076cc:	4801      	ldr	r0, [pc, #4]	; (80076d4 <__malloc_unlock+0x8>)
 80076ce:	f7fe bcb7 	b.w	8006040 <__retarget_lock_release_recursive>
 80076d2:	bf00      	nop
 80076d4:	200015f5 	.word	0x200015f5

080076d8 <__sfputc_r>:
 80076d8:	6893      	ldr	r3, [r2, #8]
 80076da:	b410      	push	{r4}
 80076dc:	3b01      	subs	r3, #1
 80076de:	2b00      	cmp	r3, #0
 80076e0:	6093      	str	r3, [r2, #8]
 80076e2:	da07      	bge.n	80076f4 <__sfputc_r+0x1c>
 80076e4:	6994      	ldr	r4, [r2, #24]
 80076e6:	42a3      	cmp	r3, r4
 80076e8:	db01      	blt.n	80076ee <__sfputc_r+0x16>
 80076ea:	290a      	cmp	r1, #10
 80076ec:	d102      	bne.n	80076f4 <__sfputc_r+0x1c>
 80076ee:	bc10      	pop	{r4}
 80076f0:	f7ff bc94 	b.w	800701c <__swbuf_r>
 80076f4:	6813      	ldr	r3, [r2, #0]
 80076f6:	1c58      	adds	r0, r3, #1
 80076f8:	6010      	str	r0, [r2, #0]
 80076fa:	7019      	strb	r1, [r3, #0]
 80076fc:	4608      	mov	r0, r1
 80076fe:	bc10      	pop	{r4}
 8007700:	4770      	bx	lr

08007702 <__sfputs_r>:
 8007702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007704:	4606      	mov	r6, r0
 8007706:	460f      	mov	r7, r1
 8007708:	4614      	mov	r4, r2
 800770a:	18d5      	adds	r5, r2, r3
 800770c:	42ac      	cmp	r4, r5
 800770e:	d101      	bne.n	8007714 <__sfputs_r+0x12>
 8007710:	2000      	movs	r0, #0
 8007712:	e007      	b.n	8007724 <__sfputs_r+0x22>
 8007714:	463a      	mov	r2, r7
 8007716:	4630      	mov	r0, r6
 8007718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800771c:	f7ff ffdc 	bl	80076d8 <__sfputc_r>
 8007720:	1c43      	adds	r3, r0, #1
 8007722:	d1f3      	bne.n	800770c <__sfputs_r+0xa>
 8007724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007728 <_vfiprintf_r>:
 8007728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800772c:	460d      	mov	r5, r1
 800772e:	4614      	mov	r4, r2
 8007730:	4698      	mov	r8, r3
 8007732:	4606      	mov	r6, r0
 8007734:	b09d      	sub	sp, #116	; 0x74
 8007736:	b118      	cbz	r0, 8007740 <_vfiprintf_r+0x18>
 8007738:	6983      	ldr	r3, [r0, #24]
 800773a:	b90b      	cbnz	r3, 8007740 <_vfiprintf_r+0x18>
 800773c:	f7fe faaa 	bl	8005c94 <__sinit>
 8007740:	4b89      	ldr	r3, [pc, #548]	; (8007968 <_vfiprintf_r+0x240>)
 8007742:	429d      	cmp	r5, r3
 8007744:	d11b      	bne.n	800777e <_vfiprintf_r+0x56>
 8007746:	6875      	ldr	r5, [r6, #4]
 8007748:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800774a:	07d9      	lsls	r1, r3, #31
 800774c:	d405      	bmi.n	800775a <_vfiprintf_r+0x32>
 800774e:	89ab      	ldrh	r3, [r5, #12]
 8007750:	059a      	lsls	r2, r3, #22
 8007752:	d402      	bmi.n	800775a <_vfiprintf_r+0x32>
 8007754:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007756:	f7fe fc71 	bl	800603c <__retarget_lock_acquire_recursive>
 800775a:	89ab      	ldrh	r3, [r5, #12]
 800775c:	071b      	lsls	r3, r3, #28
 800775e:	d501      	bpl.n	8007764 <_vfiprintf_r+0x3c>
 8007760:	692b      	ldr	r3, [r5, #16]
 8007762:	b9eb      	cbnz	r3, 80077a0 <_vfiprintf_r+0x78>
 8007764:	4629      	mov	r1, r5
 8007766:	4630      	mov	r0, r6
 8007768:	f7ff fcbc 	bl	80070e4 <__swsetup_r>
 800776c:	b1c0      	cbz	r0, 80077a0 <_vfiprintf_r+0x78>
 800776e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007770:	07dc      	lsls	r4, r3, #31
 8007772:	d50e      	bpl.n	8007792 <_vfiprintf_r+0x6a>
 8007774:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007778:	b01d      	add	sp, #116	; 0x74
 800777a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800777e:	4b7b      	ldr	r3, [pc, #492]	; (800796c <_vfiprintf_r+0x244>)
 8007780:	429d      	cmp	r5, r3
 8007782:	d101      	bne.n	8007788 <_vfiprintf_r+0x60>
 8007784:	68b5      	ldr	r5, [r6, #8]
 8007786:	e7df      	b.n	8007748 <_vfiprintf_r+0x20>
 8007788:	4b79      	ldr	r3, [pc, #484]	; (8007970 <_vfiprintf_r+0x248>)
 800778a:	429d      	cmp	r5, r3
 800778c:	bf08      	it	eq
 800778e:	68f5      	ldreq	r5, [r6, #12]
 8007790:	e7da      	b.n	8007748 <_vfiprintf_r+0x20>
 8007792:	89ab      	ldrh	r3, [r5, #12]
 8007794:	0598      	lsls	r0, r3, #22
 8007796:	d4ed      	bmi.n	8007774 <_vfiprintf_r+0x4c>
 8007798:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800779a:	f7fe fc51 	bl	8006040 <__retarget_lock_release_recursive>
 800779e:	e7e9      	b.n	8007774 <_vfiprintf_r+0x4c>
 80077a0:	2300      	movs	r3, #0
 80077a2:	9309      	str	r3, [sp, #36]	; 0x24
 80077a4:	2320      	movs	r3, #32
 80077a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077aa:	2330      	movs	r3, #48	; 0x30
 80077ac:	f04f 0901 	mov.w	r9, #1
 80077b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80077b4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007974 <_vfiprintf_r+0x24c>
 80077b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077bc:	4623      	mov	r3, r4
 80077be:	469a      	mov	sl, r3
 80077c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077c4:	b10a      	cbz	r2, 80077ca <_vfiprintf_r+0xa2>
 80077c6:	2a25      	cmp	r2, #37	; 0x25
 80077c8:	d1f9      	bne.n	80077be <_vfiprintf_r+0x96>
 80077ca:	ebba 0b04 	subs.w	fp, sl, r4
 80077ce:	d00b      	beq.n	80077e8 <_vfiprintf_r+0xc0>
 80077d0:	465b      	mov	r3, fp
 80077d2:	4622      	mov	r2, r4
 80077d4:	4629      	mov	r1, r5
 80077d6:	4630      	mov	r0, r6
 80077d8:	f7ff ff93 	bl	8007702 <__sfputs_r>
 80077dc:	3001      	adds	r0, #1
 80077de:	f000 80aa 	beq.w	8007936 <_vfiprintf_r+0x20e>
 80077e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077e4:	445a      	add	r2, fp
 80077e6:	9209      	str	r2, [sp, #36]	; 0x24
 80077e8:	f89a 3000 	ldrb.w	r3, [sl]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f000 80a2 	beq.w	8007936 <_vfiprintf_r+0x20e>
 80077f2:	2300      	movs	r3, #0
 80077f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077fc:	f10a 0a01 	add.w	sl, sl, #1
 8007800:	9304      	str	r3, [sp, #16]
 8007802:	9307      	str	r3, [sp, #28]
 8007804:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007808:	931a      	str	r3, [sp, #104]	; 0x68
 800780a:	4654      	mov	r4, sl
 800780c:	2205      	movs	r2, #5
 800780e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007812:	4858      	ldr	r0, [pc, #352]	; (8007974 <_vfiprintf_r+0x24c>)
 8007814:	f000 fb52 	bl	8007ebc <memchr>
 8007818:	9a04      	ldr	r2, [sp, #16]
 800781a:	b9d8      	cbnz	r0, 8007854 <_vfiprintf_r+0x12c>
 800781c:	06d1      	lsls	r1, r2, #27
 800781e:	bf44      	itt	mi
 8007820:	2320      	movmi	r3, #32
 8007822:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007826:	0713      	lsls	r3, r2, #28
 8007828:	bf44      	itt	mi
 800782a:	232b      	movmi	r3, #43	; 0x2b
 800782c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007830:	f89a 3000 	ldrb.w	r3, [sl]
 8007834:	2b2a      	cmp	r3, #42	; 0x2a
 8007836:	d015      	beq.n	8007864 <_vfiprintf_r+0x13c>
 8007838:	4654      	mov	r4, sl
 800783a:	2000      	movs	r0, #0
 800783c:	f04f 0c0a 	mov.w	ip, #10
 8007840:	9a07      	ldr	r2, [sp, #28]
 8007842:	4621      	mov	r1, r4
 8007844:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007848:	3b30      	subs	r3, #48	; 0x30
 800784a:	2b09      	cmp	r3, #9
 800784c:	d94e      	bls.n	80078ec <_vfiprintf_r+0x1c4>
 800784e:	b1b0      	cbz	r0, 800787e <_vfiprintf_r+0x156>
 8007850:	9207      	str	r2, [sp, #28]
 8007852:	e014      	b.n	800787e <_vfiprintf_r+0x156>
 8007854:	eba0 0308 	sub.w	r3, r0, r8
 8007858:	fa09 f303 	lsl.w	r3, r9, r3
 800785c:	4313      	orrs	r3, r2
 800785e:	46a2      	mov	sl, r4
 8007860:	9304      	str	r3, [sp, #16]
 8007862:	e7d2      	b.n	800780a <_vfiprintf_r+0xe2>
 8007864:	9b03      	ldr	r3, [sp, #12]
 8007866:	1d19      	adds	r1, r3, #4
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	9103      	str	r1, [sp, #12]
 800786c:	2b00      	cmp	r3, #0
 800786e:	bfbb      	ittet	lt
 8007870:	425b      	neglt	r3, r3
 8007872:	f042 0202 	orrlt.w	r2, r2, #2
 8007876:	9307      	strge	r3, [sp, #28]
 8007878:	9307      	strlt	r3, [sp, #28]
 800787a:	bfb8      	it	lt
 800787c:	9204      	strlt	r2, [sp, #16]
 800787e:	7823      	ldrb	r3, [r4, #0]
 8007880:	2b2e      	cmp	r3, #46	; 0x2e
 8007882:	d10c      	bne.n	800789e <_vfiprintf_r+0x176>
 8007884:	7863      	ldrb	r3, [r4, #1]
 8007886:	2b2a      	cmp	r3, #42	; 0x2a
 8007888:	d135      	bne.n	80078f6 <_vfiprintf_r+0x1ce>
 800788a:	9b03      	ldr	r3, [sp, #12]
 800788c:	3402      	adds	r4, #2
 800788e:	1d1a      	adds	r2, r3, #4
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	9203      	str	r2, [sp, #12]
 8007894:	2b00      	cmp	r3, #0
 8007896:	bfb8      	it	lt
 8007898:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800789c:	9305      	str	r3, [sp, #20]
 800789e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007978 <_vfiprintf_r+0x250>
 80078a2:	2203      	movs	r2, #3
 80078a4:	4650      	mov	r0, sl
 80078a6:	7821      	ldrb	r1, [r4, #0]
 80078a8:	f000 fb08 	bl	8007ebc <memchr>
 80078ac:	b140      	cbz	r0, 80078c0 <_vfiprintf_r+0x198>
 80078ae:	2340      	movs	r3, #64	; 0x40
 80078b0:	eba0 000a 	sub.w	r0, r0, sl
 80078b4:	fa03 f000 	lsl.w	r0, r3, r0
 80078b8:	9b04      	ldr	r3, [sp, #16]
 80078ba:	3401      	adds	r4, #1
 80078bc:	4303      	orrs	r3, r0
 80078be:	9304      	str	r3, [sp, #16]
 80078c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078c4:	2206      	movs	r2, #6
 80078c6:	482d      	ldr	r0, [pc, #180]	; (800797c <_vfiprintf_r+0x254>)
 80078c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078cc:	f000 faf6 	bl	8007ebc <memchr>
 80078d0:	2800      	cmp	r0, #0
 80078d2:	d03f      	beq.n	8007954 <_vfiprintf_r+0x22c>
 80078d4:	4b2a      	ldr	r3, [pc, #168]	; (8007980 <_vfiprintf_r+0x258>)
 80078d6:	bb1b      	cbnz	r3, 8007920 <_vfiprintf_r+0x1f8>
 80078d8:	9b03      	ldr	r3, [sp, #12]
 80078da:	3307      	adds	r3, #7
 80078dc:	f023 0307 	bic.w	r3, r3, #7
 80078e0:	3308      	adds	r3, #8
 80078e2:	9303      	str	r3, [sp, #12]
 80078e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078e6:	443b      	add	r3, r7
 80078e8:	9309      	str	r3, [sp, #36]	; 0x24
 80078ea:	e767      	b.n	80077bc <_vfiprintf_r+0x94>
 80078ec:	460c      	mov	r4, r1
 80078ee:	2001      	movs	r0, #1
 80078f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80078f4:	e7a5      	b.n	8007842 <_vfiprintf_r+0x11a>
 80078f6:	2300      	movs	r3, #0
 80078f8:	f04f 0c0a 	mov.w	ip, #10
 80078fc:	4619      	mov	r1, r3
 80078fe:	3401      	adds	r4, #1
 8007900:	9305      	str	r3, [sp, #20]
 8007902:	4620      	mov	r0, r4
 8007904:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007908:	3a30      	subs	r2, #48	; 0x30
 800790a:	2a09      	cmp	r2, #9
 800790c:	d903      	bls.n	8007916 <_vfiprintf_r+0x1ee>
 800790e:	2b00      	cmp	r3, #0
 8007910:	d0c5      	beq.n	800789e <_vfiprintf_r+0x176>
 8007912:	9105      	str	r1, [sp, #20]
 8007914:	e7c3      	b.n	800789e <_vfiprintf_r+0x176>
 8007916:	4604      	mov	r4, r0
 8007918:	2301      	movs	r3, #1
 800791a:	fb0c 2101 	mla	r1, ip, r1, r2
 800791e:	e7f0      	b.n	8007902 <_vfiprintf_r+0x1da>
 8007920:	ab03      	add	r3, sp, #12
 8007922:	9300      	str	r3, [sp, #0]
 8007924:	462a      	mov	r2, r5
 8007926:	4630      	mov	r0, r6
 8007928:	4b16      	ldr	r3, [pc, #88]	; (8007984 <_vfiprintf_r+0x25c>)
 800792a:	a904      	add	r1, sp, #16
 800792c:	f3af 8000 	nop.w
 8007930:	4607      	mov	r7, r0
 8007932:	1c78      	adds	r0, r7, #1
 8007934:	d1d6      	bne.n	80078e4 <_vfiprintf_r+0x1bc>
 8007936:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007938:	07d9      	lsls	r1, r3, #31
 800793a:	d405      	bmi.n	8007948 <_vfiprintf_r+0x220>
 800793c:	89ab      	ldrh	r3, [r5, #12]
 800793e:	059a      	lsls	r2, r3, #22
 8007940:	d402      	bmi.n	8007948 <_vfiprintf_r+0x220>
 8007942:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007944:	f7fe fb7c 	bl	8006040 <__retarget_lock_release_recursive>
 8007948:	89ab      	ldrh	r3, [r5, #12]
 800794a:	065b      	lsls	r3, r3, #25
 800794c:	f53f af12 	bmi.w	8007774 <_vfiprintf_r+0x4c>
 8007950:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007952:	e711      	b.n	8007778 <_vfiprintf_r+0x50>
 8007954:	ab03      	add	r3, sp, #12
 8007956:	9300      	str	r3, [sp, #0]
 8007958:	462a      	mov	r2, r5
 800795a:	4630      	mov	r0, r6
 800795c:	4b09      	ldr	r3, [pc, #36]	; (8007984 <_vfiprintf_r+0x25c>)
 800795e:	a904      	add	r1, sp, #16
 8007960:	f000 f882 	bl	8007a68 <_printf_i>
 8007964:	e7e4      	b.n	8007930 <_vfiprintf_r+0x208>
 8007966:	bf00      	nop
 8007968:	080088f0 	.word	0x080088f0
 800796c:	08008910 	.word	0x08008910
 8007970:	080088d0 	.word	0x080088d0
 8007974:	08008c3e 	.word	0x08008c3e
 8007978:	08008c44 	.word	0x08008c44
 800797c:	08008c48 	.word	0x08008c48
 8007980:	00000000 	.word	0x00000000
 8007984:	08007703 	.word	0x08007703

08007988 <_printf_common>:
 8007988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800798c:	4616      	mov	r6, r2
 800798e:	4699      	mov	r9, r3
 8007990:	688a      	ldr	r2, [r1, #8]
 8007992:	690b      	ldr	r3, [r1, #16]
 8007994:	4607      	mov	r7, r0
 8007996:	4293      	cmp	r3, r2
 8007998:	bfb8      	it	lt
 800799a:	4613      	movlt	r3, r2
 800799c:	6033      	str	r3, [r6, #0]
 800799e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079a2:	460c      	mov	r4, r1
 80079a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079a8:	b10a      	cbz	r2, 80079ae <_printf_common+0x26>
 80079aa:	3301      	adds	r3, #1
 80079ac:	6033      	str	r3, [r6, #0]
 80079ae:	6823      	ldr	r3, [r4, #0]
 80079b0:	0699      	lsls	r1, r3, #26
 80079b2:	bf42      	ittt	mi
 80079b4:	6833      	ldrmi	r3, [r6, #0]
 80079b6:	3302      	addmi	r3, #2
 80079b8:	6033      	strmi	r3, [r6, #0]
 80079ba:	6825      	ldr	r5, [r4, #0]
 80079bc:	f015 0506 	ands.w	r5, r5, #6
 80079c0:	d106      	bne.n	80079d0 <_printf_common+0x48>
 80079c2:	f104 0a19 	add.w	sl, r4, #25
 80079c6:	68e3      	ldr	r3, [r4, #12]
 80079c8:	6832      	ldr	r2, [r6, #0]
 80079ca:	1a9b      	subs	r3, r3, r2
 80079cc:	42ab      	cmp	r3, r5
 80079ce:	dc28      	bgt.n	8007a22 <_printf_common+0x9a>
 80079d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80079d4:	1e13      	subs	r3, r2, #0
 80079d6:	6822      	ldr	r2, [r4, #0]
 80079d8:	bf18      	it	ne
 80079da:	2301      	movne	r3, #1
 80079dc:	0692      	lsls	r2, r2, #26
 80079de:	d42d      	bmi.n	8007a3c <_printf_common+0xb4>
 80079e0:	4649      	mov	r1, r9
 80079e2:	4638      	mov	r0, r7
 80079e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079e8:	47c0      	blx	r8
 80079ea:	3001      	adds	r0, #1
 80079ec:	d020      	beq.n	8007a30 <_printf_common+0xa8>
 80079ee:	6823      	ldr	r3, [r4, #0]
 80079f0:	68e5      	ldr	r5, [r4, #12]
 80079f2:	f003 0306 	and.w	r3, r3, #6
 80079f6:	2b04      	cmp	r3, #4
 80079f8:	bf18      	it	ne
 80079fa:	2500      	movne	r5, #0
 80079fc:	6832      	ldr	r2, [r6, #0]
 80079fe:	f04f 0600 	mov.w	r6, #0
 8007a02:	68a3      	ldr	r3, [r4, #8]
 8007a04:	bf08      	it	eq
 8007a06:	1aad      	subeq	r5, r5, r2
 8007a08:	6922      	ldr	r2, [r4, #16]
 8007a0a:	bf08      	it	eq
 8007a0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a10:	4293      	cmp	r3, r2
 8007a12:	bfc4      	itt	gt
 8007a14:	1a9b      	subgt	r3, r3, r2
 8007a16:	18ed      	addgt	r5, r5, r3
 8007a18:	341a      	adds	r4, #26
 8007a1a:	42b5      	cmp	r5, r6
 8007a1c:	d11a      	bne.n	8007a54 <_printf_common+0xcc>
 8007a1e:	2000      	movs	r0, #0
 8007a20:	e008      	b.n	8007a34 <_printf_common+0xac>
 8007a22:	2301      	movs	r3, #1
 8007a24:	4652      	mov	r2, sl
 8007a26:	4649      	mov	r1, r9
 8007a28:	4638      	mov	r0, r7
 8007a2a:	47c0      	blx	r8
 8007a2c:	3001      	adds	r0, #1
 8007a2e:	d103      	bne.n	8007a38 <_printf_common+0xb0>
 8007a30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a38:	3501      	adds	r5, #1
 8007a3a:	e7c4      	b.n	80079c6 <_printf_common+0x3e>
 8007a3c:	2030      	movs	r0, #48	; 0x30
 8007a3e:	18e1      	adds	r1, r4, r3
 8007a40:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a44:	1c5a      	adds	r2, r3, #1
 8007a46:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a4a:	4422      	add	r2, r4
 8007a4c:	3302      	adds	r3, #2
 8007a4e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a52:	e7c5      	b.n	80079e0 <_printf_common+0x58>
 8007a54:	2301      	movs	r3, #1
 8007a56:	4622      	mov	r2, r4
 8007a58:	4649      	mov	r1, r9
 8007a5a:	4638      	mov	r0, r7
 8007a5c:	47c0      	blx	r8
 8007a5e:	3001      	adds	r0, #1
 8007a60:	d0e6      	beq.n	8007a30 <_printf_common+0xa8>
 8007a62:	3601      	adds	r6, #1
 8007a64:	e7d9      	b.n	8007a1a <_printf_common+0x92>
	...

08007a68 <_printf_i>:
 8007a68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a6c:	7e0f      	ldrb	r7, [r1, #24]
 8007a6e:	4691      	mov	r9, r2
 8007a70:	2f78      	cmp	r7, #120	; 0x78
 8007a72:	4680      	mov	r8, r0
 8007a74:	460c      	mov	r4, r1
 8007a76:	469a      	mov	sl, r3
 8007a78:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a7e:	d807      	bhi.n	8007a90 <_printf_i+0x28>
 8007a80:	2f62      	cmp	r7, #98	; 0x62
 8007a82:	d80a      	bhi.n	8007a9a <_printf_i+0x32>
 8007a84:	2f00      	cmp	r7, #0
 8007a86:	f000 80d9 	beq.w	8007c3c <_printf_i+0x1d4>
 8007a8a:	2f58      	cmp	r7, #88	; 0x58
 8007a8c:	f000 80a4 	beq.w	8007bd8 <_printf_i+0x170>
 8007a90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a98:	e03a      	b.n	8007b10 <_printf_i+0xa8>
 8007a9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a9e:	2b15      	cmp	r3, #21
 8007aa0:	d8f6      	bhi.n	8007a90 <_printf_i+0x28>
 8007aa2:	a101      	add	r1, pc, #4	; (adr r1, 8007aa8 <_printf_i+0x40>)
 8007aa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007aa8:	08007b01 	.word	0x08007b01
 8007aac:	08007b15 	.word	0x08007b15
 8007ab0:	08007a91 	.word	0x08007a91
 8007ab4:	08007a91 	.word	0x08007a91
 8007ab8:	08007a91 	.word	0x08007a91
 8007abc:	08007a91 	.word	0x08007a91
 8007ac0:	08007b15 	.word	0x08007b15
 8007ac4:	08007a91 	.word	0x08007a91
 8007ac8:	08007a91 	.word	0x08007a91
 8007acc:	08007a91 	.word	0x08007a91
 8007ad0:	08007a91 	.word	0x08007a91
 8007ad4:	08007c23 	.word	0x08007c23
 8007ad8:	08007b45 	.word	0x08007b45
 8007adc:	08007c05 	.word	0x08007c05
 8007ae0:	08007a91 	.word	0x08007a91
 8007ae4:	08007a91 	.word	0x08007a91
 8007ae8:	08007c45 	.word	0x08007c45
 8007aec:	08007a91 	.word	0x08007a91
 8007af0:	08007b45 	.word	0x08007b45
 8007af4:	08007a91 	.word	0x08007a91
 8007af8:	08007a91 	.word	0x08007a91
 8007afc:	08007c0d 	.word	0x08007c0d
 8007b00:	682b      	ldr	r3, [r5, #0]
 8007b02:	1d1a      	adds	r2, r3, #4
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	602a      	str	r2, [r5, #0]
 8007b08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b10:	2301      	movs	r3, #1
 8007b12:	e0a4      	b.n	8007c5e <_printf_i+0x1f6>
 8007b14:	6820      	ldr	r0, [r4, #0]
 8007b16:	6829      	ldr	r1, [r5, #0]
 8007b18:	0606      	lsls	r6, r0, #24
 8007b1a:	f101 0304 	add.w	r3, r1, #4
 8007b1e:	d50a      	bpl.n	8007b36 <_printf_i+0xce>
 8007b20:	680e      	ldr	r6, [r1, #0]
 8007b22:	602b      	str	r3, [r5, #0]
 8007b24:	2e00      	cmp	r6, #0
 8007b26:	da03      	bge.n	8007b30 <_printf_i+0xc8>
 8007b28:	232d      	movs	r3, #45	; 0x2d
 8007b2a:	4276      	negs	r6, r6
 8007b2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b30:	230a      	movs	r3, #10
 8007b32:	485e      	ldr	r0, [pc, #376]	; (8007cac <_printf_i+0x244>)
 8007b34:	e019      	b.n	8007b6a <_printf_i+0x102>
 8007b36:	680e      	ldr	r6, [r1, #0]
 8007b38:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007b3c:	602b      	str	r3, [r5, #0]
 8007b3e:	bf18      	it	ne
 8007b40:	b236      	sxthne	r6, r6
 8007b42:	e7ef      	b.n	8007b24 <_printf_i+0xbc>
 8007b44:	682b      	ldr	r3, [r5, #0]
 8007b46:	6820      	ldr	r0, [r4, #0]
 8007b48:	1d19      	adds	r1, r3, #4
 8007b4a:	6029      	str	r1, [r5, #0]
 8007b4c:	0601      	lsls	r1, r0, #24
 8007b4e:	d501      	bpl.n	8007b54 <_printf_i+0xec>
 8007b50:	681e      	ldr	r6, [r3, #0]
 8007b52:	e002      	b.n	8007b5a <_printf_i+0xf2>
 8007b54:	0646      	lsls	r6, r0, #25
 8007b56:	d5fb      	bpl.n	8007b50 <_printf_i+0xe8>
 8007b58:	881e      	ldrh	r6, [r3, #0]
 8007b5a:	2f6f      	cmp	r7, #111	; 0x6f
 8007b5c:	bf0c      	ite	eq
 8007b5e:	2308      	moveq	r3, #8
 8007b60:	230a      	movne	r3, #10
 8007b62:	4852      	ldr	r0, [pc, #328]	; (8007cac <_printf_i+0x244>)
 8007b64:	2100      	movs	r1, #0
 8007b66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b6a:	6865      	ldr	r5, [r4, #4]
 8007b6c:	2d00      	cmp	r5, #0
 8007b6e:	bfa8      	it	ge
 8007b70:	6821      	ldrge	r1, [r4, #0]
 8007b72:	60a5      	str	r5, [r4, #8]
 8007b74:	bfa4      	itt	ge
 8007b76:	f021 0104 	bicge.w	r1, r1, #4
 8007b7a:	6021      	strge	r1, [r4, #0]
 8007b7c:	b90e      	cbnz	r6, 8007b82 <_printf_i+0x11a>
 8007b7e:	2d00      	cmp	r5, #0
 8007b80:	d04d      	beq.n	8007c1e <_printf_i+0x1b6>
 8007b82:	4615      	mov	r5, r2
 8007b84:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b88:	fb03 6711 	mls	r7, r3, r1, r6
 8007b8c:	5dc7      	ldrb	r7, [r0, r7]
 8007b8e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b92:	4637      	mov	r7, r6
 8007b94:	42bb      	cmp	r3, r7
 8007b96:	460e      	mov	r6, r1
 8007b98:	d9f4      	bls.n	8007b84 <_printf_i+0x11c>
 8007b9a:	2b08      	cmp	r3, #8
 8007b9c:	d10b      	bne.n	8007bb6 <_printf_i+0x14e>
 8007b9e:	6823      	ldr	r3, [r4, #0]
 8007ba0:	07de      	lsls	r6, r3, #31
 8007ba2:	d508      	bpl.n	8007bb6 <_printf_i+0x14e>
 8007ba4:	6923      	ldr	r3, [r4, #16]
 8007ba6:	6861      	ldr	r1, [r4, #4]
 8007ba8:	4299      	cmp	r1, r3
 8007baa:	bfde      	ittt	le
 8007bac:	2330      	movle	r3, #48	; 0x30
 8007bae:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007bb2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007bb6:	1b52      	subs	r2, r2, r5
 8007bb8:	6122      	str	r2, [r4, #16]
 8007bba:	464b      	mov	r3, r9
 8007bbc:	4621      	mov	r1, r4
 8007bbe:	4640      	mov	r0, r8
 8007bc0:	f8cd a000 	str.w	sl, [sp]
 8007bc4:	aa03      	add	r2, sp, #12
 8007bc6:	f7ff fedf 	bl	8007988 <_printf_common>
 8007bca:	3001      	adds	r0, #1
 8007bcc:	d14c      	bne.n	8007c68 <_printf_i+0x200>
 8007bce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007bd2:	b004      	add	sp, #16
 8007bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bd8:	4834      	ldr	r0, [pc, #208]	; (8007cac <_printf_i+0x244>)
 8007bda:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007bde:	6829      	ldr	r1, [r5, #0]
 8007be0:	6823      	ldr	r3, [r4, #0]
 8007be2:	f851 6b04 	ldr.w	r6, [r1], #4
 8007be6:	6029      	str	r1, [r5, #0]
 8007be8:	061d      	lsls	r5, r3, #24
 8007bea:	d514      	bpl.n	8007c16 <_printf_i+0x1ae>
 8007bec:	07df      	lsls	r7, r3, #31
 8007bee:	bf44      	itt	mi
 8007bf0:	f043 0320 	orrmi.w	r3, r3, #32
 8007bf4:	6023      	strmi	r3, [r4, #0]
 8007bf6:	b91e      	cbnz	r6, 8007c00 <_printf_i+0x198>
 8007bf8:	6823      	ldr	r3, [r4, #0]
 8007bfa:	f023 0320 	bic.w	r3, r3, #32
 8007bfe:	6023      	str	r3, [r4, #0]
 8007c00:	2310      	movs	r3, #16
 8007c02:	e7af      	b.n	8007b64 <_printf_i+0xfc>
 8007c04:	6823      	ldr	r3, [r4, #0]
 8007c06:	f043 0320 	orr.w	r3, r3, #32
 8007c0a:	6023      	str	r3, [r4, #0]
 8007c0c:	2378      	movs	r3, #120	; 0x78
 8007c0e:	4828      	ldr	r0, [pc, #160]	; (8007cb0 <_printf_i+0x248>)
 8007c10:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c14:	e7e3      	b.n	8007bde <_printf_i+0x176>
 8007c16:	0659      	lsls	r1, r3, #25
 8007c18:	bf48      	it	mi
 8007c1a:	b2b6      	uxthmi	r6, r6
 8007c1c:	e7e6      	b.n	8007bec <_printf_i+0x184>
 8007c1e:	4615      	mov	r5, r2
 8007c20:	e7bb      	b.n	8007b9a <_printf_i+0x132>
 8007c22:	682b      	ldr	r3, [r5, #0]
 8007c24:	6826      	ldr	r6, [r4, #0]
 8007c26:	1d18      	adds	r0, r3, #4
 8007c28:	6961      	ldr	r1, [r4, #20]
 8007c2a:	6028      	str	r0, [r5, #0]
 8007c2c:	0635      	lsls	r5, r6, #24
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	d501      	bpl.n	8007c36 <_printf_i+0x1ce>
 8007c32:	6019      	str	r1, [r3, #0]
 8007c34:	e002      	b.n	8007c3c <_printf_i+0x1d4>
 8007c36:	0670      	lsls	r0, r6, #25
 8007c38:	d5fb      	bpl.n	8007c32 <_printf_i+0x1ca>
 8007c3a:	8019      	strh	r1, [r3, #0]
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	4615      	mov	r5, r2
 8007c40:	6123      	str	r3, [r4, #16]
 8007c42:	e7ba      	b.n	8007bba <_printf_i+0x152>
 8007c44:	682b      	ldr	r3, [r5, #0]
 8007c46:	2100      	movs	r1, #0
 8007c48:	1d1a      	adds	r2, r3, #4
 8007c4a:	602a      	str	r2, [r5, #0]
 8007c4c:	681d      	ldr	r5, [r3, #0]
 8007c4e:	6862      	ldr	r2, [r4, #4]
 8007c50:	4628      	mov	r0, r5
 8007c52:	f000 f933 	bl	8007ebc <memchr>
 8007c56:	b108      	cbz	r0, 8007c5c <_printf_i+0x1f4>
 8007c58:	1b40      	subs	r0, r0, r5
 8007c5a:	6060      	str	r0, [r4, #4]
 8007c5c:	6863      	ldr	r3, [r4, #4]
 8007c5e:	6123      	str	r3, [r4, #16]
 8007c60:	2300      	movs	r3, #0
 8007c62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c66:	e7a8      	b.n	8007bba <_printf_i+0x152>
 8007c68:	462a      	mov	r2, r5
 8007c6a:	4649      	mov	r1, r9
 8007c6c:	4640      	mov	r0, r8
 8007c6e:	6923      	ldr	r3, [r4, #16]
 8007c70:	47d0      	blx	sl
 8007c72:	3001      	adds	r0, #1
 8007c74:	d0ab      	beq.n	8007bce <_printf_i+0x166>
 8007c76:	6823      	ldr	r3, [r4, #0]
 8007c78:	079b      	lsls	r3, r3, #30
 8007c7a:	d413      	bmi.n	8007ca4 <_printf_i+0x23c>
 8007c7c:	68e0      	ldr	r0, [r4, #12]
 8007c7e:	9b03      	ldr	r3, [sp, #12]
 8007c80:	4298      	cmp	r0, r3
 8007c82:	bfb8      	it	lt
 8007c84:	4618      	movlt	r0, r3
 8007c86:	e7a4      	b.n	8007bd2 <_printf_i+0x16a>
 8007c88:	2301      	movs	r3, #1
 8007c8a:	4632      	mov	r2, r6
 8007c8c:	4649      	mov	r1, r9
 8007c8e:	4640      	mov	r0, r8
 8007c90:	47d0      	blx	sl
 8007c92:	3001      	adds	r0, #1
 8007c94:	d09b      	beq.n	8007bce <_printf_i+0x166>
 8007c96:	3501      	adds	r5, #1
 8007c98:	68e3      	ldr	r3, [r4, #12]
 8007c9a:	9903      	ldr	r1, [sp, #12]
 8007c9c:	1a5b      	subs	r3, r3, r1
 8007c9e:	42ab      	cmp	r3, r5
 8007ca0:	dcf2      	bgt.n	8007c88 <_printf_i+0x220>
 8007ca2:	e7eb      	b.n	8007c7c <_printf_i+0x214>
 8007ca4:	2500      	movs	r5, #0
 8007ca6:	f104 0619 	add.w	r6, r4, #25
 8007caa:	e7f5      	b.n	8007c98 <_printf_i+0x230>
 8007cac:	08008c4f 	.word	0x08008c4f
 8007cb0:	08008c60 	.word	0x08008c60

08007cb4 <_read_r>:
 8007cb4:	b538      	push	{r3, r4, r5, lr}
 8007cb6:	4604      	mov	r4, r0
 8007cb8:	4608      	mov	r0, r1
 8007cba:	4611      	mov	r1, r2
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	4d05      	ldr	r5, [pc, #20]	; (8007cd4 <_read_r+0x20>)
 8007cc0:	602a      	str	r2, [r5, #0]
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	f7f9 fcb3 	bl	800162e <_read>
 8007cc8:	1c43      	adds	r3, r0, #1
 8007cca:	d102      	bne.n	8007cd2 <_read_r+0x1e>
 8007ccc:	682b      	ldr	r3, [r5, #0]
 8007cce:	b103      	cbz	r3, 8007cd2 <_read_r+0x1e>
 8007cd0:	6023      	str	r3, [r4, #0]
 8007cd2:	bd38      	pop	{r3, r4, r5, pc}
 8007cd4:	20001604 	.word	0x20001604

08007cd8 <siscanf>:
 8007cd8:	b40e      	push	{r1, r2, r3}
 8007cda:	f44f 7201 	mov.w	r2, #516	; 0x204
 8007cde:	b530      	push	{r4, r5, lr}
 8007ce0:	b09c      	sub	sp, #112	; 0x70
 8007ce2:	ac1f      	add	r4, sp, #124	; 0x7c
 8007ce4:	f854 5b04 	ldr.w	r5, [r4], #4
 8007ce8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007cec:	9002      	str	r0, [sp, #8]
 8007cee:	9006      	str	r0, [sp, #24]
 8007cf0:	f7f8 fa2e 	bl	8000150 <strlen>
 8007cf4:	4b0b      	ldr	r3, [pc, #44]	; (8007d24 <siscanf+0x4c>)
 8007cf6:	9003      	str	r0, [sp, #12]
 8007cf8:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	930f      	str	r3, [sp, #60]	; 0x3c
 8007cfe:	9314      	str	r3, [sp, #80]	; 0x50
 8007d00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007d04:	9007      	str	r0, [sp, #28]
 8007d06:	4808      	ldr	r0, [pc, #32]	; (8007d28 <siscanf+0x50>)
 8007d08:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007d0c:	462a      	mov	r2, r5
 8007d0e:	4623      	mov	r3, r4
 8007d10:	a902      	add	r1, sp, #8
 8007d12:	6800      	ldr	r0, [r0, #0]
 8007d14:	9401      	str	r4, [sp, #4]
 8007d16:	f000 f969 	bl	8007fec <__ssvfiscanf_r>
 8007d1a:	b01c      	add	sp, #112	; 0x70
 8007d1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d20:	b003      	add	sp, #12
 8007d22:	4770      	bx	lr
 8007d24:	0800695f 	.word	0x0800695f
 8007d28:	200001f8 	.word	0x200001f8

08007d2c <strncmp>:
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	b510      	push	{r4, lr}
 8007d30:	b172      	cbz	r2, 8007d50 <strncmp+0x24>
 8007d32:	3901      	subs	r1, #1
 8007d34:	1884      	adds	r4, r0, r2
 8007d36:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007d3a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007d3e:	4290      	cmp	r0, r2
 8007d40:	d101      	bne.n	8007d46 <strncmp+0x1a>
 8007d42:	42a3      	cmp	r3, r4
 8007d44:	d101      	bne.n	8007d4a <strncmp+0x1e>
 8007d46:	1a80      	subs	r0, r0, r2
 8007d48:	bd10      	pop	{r4, pc}
 8007d4a:	2800      	cmp	r0, #0
 8007d4c:	d1f3      	bne.n	8007d36 <strncmp+0xa>
 8007d4e:	e7fa      	b.n	8007d46 <strncmp+0x1a>
 8007d50:	4610      	mov	r0, r2
 8007d52:	e7f9      	b.n	8007d48 <strncmp+0x1c>

08007d54 <_strtoul_l.constprop.0>:
 8007d54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d58:	4686      	mov	lr, r0
 8007d5a:	460d      	mov	r5, r1
 8007d5c:	4f35      	ldr	r7, [pc, #212]	; (8007e34 <_strtoul_l.constprop.0+0xe0>)
 8007d5e:	4628      	mov	r0, r5
 8007d60:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d64:	5de6      	ldrb	r6, [r4, r7]
 8007d66:	f016 0608 	ands.w	r6, r6, #8
 8007d6a:	d1f8      	bne.n	8007d5e <_strtoul_l.constprop.0+0xa>
 8007d6c:	2c2d      	cmp	r4, #45	; 0x2d
 8007d6e:	d12f      	bne.n	8007dd0 <_strtoul_l.constprop.0+0x7c>
 8007d70:	2601      	movs	r6, #1
 8007d72:	782c      	ldrb	r4, [r5, #0]
 8007d74:	1c85      	adds	r5, r0, #2
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d057      	beq.n	8007e2a <_strtoul_l.constprop.0+0xd6>
 8007d7a:	2b10      	cmp	r3, #16
 8007d7c:	d109      	bne.n	8007d92 <_strtoul_l.constprop.0+0x3e>
 8007d7e:	2c30      	cmp	r4, #48	; 0x30
 8007d80:	d107      	bne.n	8007d92 <_strtoul_l.constprop.0+0x3e>
 8007d82:	7828      	ldrb	r0, [r5, #0]
 8007d84:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007d88:	2858      	cmp	r0, #88	; 0x58
 8007d8a:	d149      	bne.n	8007e20 <_strtoul_l.constprop.0+0xcc>
 8007d8c:	2310      	movs	r3, #16
 8007d8e:	786c      	ldrb	r4, [r5, #1]
 8007d90:	3502      	adds	r5, #2
 8007d92:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8007d96:	fbb8 f8f3 	udiv	r8, r8, r3
 8007d9a:	2700      	movs	r7, #0
 8007d9c:	fb03 f908 	mul.w	r9, r3, r8
 8007da0:	4638      	mov	r0, r7
 8007da2:	ea6f 0909 	mvn.w	r9, r9
 8007da6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007daa:	f1bc 0f09 	cmp.w	ip, #9
 8007dae:	d814      	bhi.n	8007dda <_strtoul_l.constprop.0+0x86>
 8007db0:	4664      	mov	r4, ip
 8007db2:	42a3      	cmp	r3, r4
 8007db4:	dd22      	ble.n	8007dfc <_strtoul_l.constprop.0+0xa8>
 8007db6:	2f00      	cmp	r7, #0
 8007db8:	db1d      	blt.n	8007df6 <_strtoul_l.constprop.0+0xa2>
 8007dba:	4580      	cmp	r8, r0
 8007dbc:	d31b      	bcc.n	8007df6 <_strtoul_l.constprop.0+0xa2>
 8007dbe:	d101      	bne.n	8007dc4 <_strtoul_l.constprop.0+0x70>
 8007dc0:	45a1      	cmp	r9, r4
 8007dc2:	db18      	blt.n	8007df6 <_strtoul_l.constprop.0+0xa2>
 8007dc4:	2701      	movs	r7, #1
 8007dc6:	fb00 4003 	mla	r0, r0, r3, r4
 8007dca:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007dce:	e7ea      	b.n	8007da6 <_strtoul_l.constprop.0+0x52>
 8007dd0:	2c2b      	cmp	r4, #43	; 0x2b
 8007dd2:	bf04      	itt	eq
 8007dd4:	782c      	ldrbeq	r4, [r5, #0]
 8007dd6:	1c85      	addeq	r5, r0, #2
 8007dd8:	e7cd      	b.n	8007d76 <_strtoul_l.constprop.0+0x22>
 8007dda:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007dde:	f1bc 0f19 	cmp.w	ip, #25
 8007de2:	d801      	bhi.n	8007de8 <_strtoul_l.constprop.0+0x94>
 8007de4:	3c37      	subs	r4, #55	; 0x37
 8007de6:	e7e4      	b.n	8007db2 <_strtoul_l.constprop.0+0x5e>
 8007de8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007dec:	f1bc 0f19 	cmp.w	ip, #25
 8007df0:	d804      	bhi.n	8007dfc <_strtoul_l.constprop.0+0xa8>
 8007df2:	3c57      	subs	r4, #87	; 0x57
 8007df4:	e7dd      	b.n	8007db2 <_strtoul_l.constprop.0+0x5e>
 8007df6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007dfa:	e7e6      	b.n	8007dca <_strtoul_l.constprop.0+0x76>
 8007dfc:	2f00      	cmp	r7, #0
 8007dfe:	da07      	bge.n	8007e10 <_strtoul_l.constprop.0+0xbc>
 8007e00:	2322      	movs	r3, #34	; 0x22
 8007e02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e06:	f8ce 3000 	str.w	r3, [lr]
 8007e0a:	b932      	cbnz	r2, 8007e1a <_strtoul_l.constprop.0+0xc6>
 8007e0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e10:	b106      	cbz	r6, 8007e14 <_strtoul_l.constprop.0+0xc0>
 8007e12:	4240      	negs	r0, r0
 8007e14:	2a00      	cmp	r2, #0
 8007e16:	d0f9      	beq.n	8007e0c <_strtoul_l.constprop.0+0xb8>
 8007e18:	b107      	cbz	r7, 8007e1c <_strtoul_l.constprop.0+0xc8>
 8007e1a:	1e69      	subs	r1, r5, #1
 8007e1c:	6011      	str	r1, [r2, #0]
 8007e1e:	e7f5      	b.n	8007e0c <_strtoul_l.constprop.0+0xb8>
 8007e20:	2430      	movs	r4, #48	; 0x30
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d1b5      	bne.n	8007d92 <_strtoul_l.constprop.0+0x3e>
 8007e26:	2308      	movs	r3, #8
 8007e28:	e7b3      	b.n	8007d92 <_strtoul_l.constprop.0+0x3e>
 8007e2a:	2c30      	cmp	r4, #48	; 0x30
 8007e2c:	d0a9      	beq.n	8007d82 <_strtoul_l.constprop.0+0x2e>
 8007e2e:	230a      	movs	r3, #10
 8007e30:	e7af      	b.n	8007d92 <_strtoul_l.constprop.0+0x3e>
 8007e32:	bf00      	nop
 8007e34:	08008b3e 	.word	0x08008b3e

08007e38 <_strtoul_r>:
 8007e38:	f7ff bf8c 	b.w	8007d54 <_strtoul_l.constprop.0>

08007e3c <strtoul>:
 8007e3c:	4613      	mov	r3, r2
 8007e3e:	460a      	mov	r2, r1
 8007e40:	4601      	mov	r1, r0
 8007e42:	4802      	ldr	r0, [pc, #8]	; (8007e4c <strtoul+0x10>)
 8007e44:	6800      	ldr	r0, [r0, #0]
 8007e46:	f7ff bf85 	b.w	8007d54 <_strtoul_l.constprop.0>
 8007e4a:	bf00      	nop
 8007e4c:	200001f8 	.word	0x200001f8

08007e50 <abort>:
 8007e50:	2006      	movs	r0, #6
 8007e52:	b508      	push	{r3, lr}
 8007e54:	f000 fbf6 	bl	8008644 <raise>
 8007e58:	2001      	movs	r0, #1
 8007e5a:	f7f9 fbde 	bl	800161a <_exit>
	...

08007e60 <__env_lock>:
 8007e60:	4801      	ldr	r0, [pc, #4]	; (8007e68 <__env_lock+0x8>)
 8007e62:	f7fe b8eb 	b.w	800603c <__retarget_lock_acquire_recursive>
 8007e66:	bf00      	nop
 8007e68:	200015f4 	.word	0x200015f4

08007e6c <__env_unlock>:
 8007e6c:	4801      	ldr	r0, [pc, #4]	; (8007e74 <__env_unlock+0x8>)
 8007e6e:	f7fe b8e7 	b.w	8006040 <__retarget_lock_release_recursive>
 8007e72:	bf00      	nop
 8007e74:	200015f4 	.word	0x200015f4

08007e78 <_fstat_r>:
 8007e78:	b538      	push	{r3, r4, r5, lr}
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	4d06      	ldr	r5, [pc, #24]	; (8007e98 <_fstat_r+0x20>)
 8007e7e:	4604      	mov	r4, r0
 8007e80:	4608      	mov	r0, r1
 8007e82:	4611      	mov	r1, r2
 8007e84:	602b      	str	r3, [r5, #0]
 8007e86:	f7f9 fbfa 	bl	800167e <_fstat>
 8007e8a:	1c43      	adds	r3, r0, #1
 8007e8c:	d102      	bne.n	8007e94 <_fstat_r+0x1c>
 8007e8e:	682b      	ldr	r3, [r5, #0]
 8007e90:	b103      	cbz	r3, 8007e94 <_fstat_r+0x1c>
 8007e92:	6023      	str	r3, [r4, #0]
 8007e94:	bd38      	pop	{r3, r4, r5, pc}
 8007e96:	bf00      	nop
 8007e98:	20001604 	.word	0x20001604

08007e9c <_isatty_r>:
 8007e9c:	b538      	push	{r3, r4, r5, lr}
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	4d05      	ldr	r5, [pc, #20]	; (8007eb8 <_isatty_r+0x1c>)
 8007ea2:	4604      	mov	r4, r0
 8007ea4:	4608      	mov	r0, r1
 8007ea6:	602b      	str	r3, [r5, #0]
 8007ea8:	f7f9 fbf8 	bl	800169c <_isatty>
 8007eac:	1c43      	adds	r3, r0, #1
 8007eae:	d102      	bne.n	8007eb6 <_isatty_r+0x1a>
 8007eb0:	682b      	ldr	r3, [r5, #0]
 8007eb2:	b103      	cbz	r3, 8007eb6 <_isatty_r+0x1a>
 8007eb4:	6023      	str	r3, [r4, #0]
 8007eb6:	bd38      	pop	{r3, r4, r5, pc}
 8007eb8:	20001604 	.word	0x20001604

08007ebc <memchr>:
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	b510      	push	{r4, lr}
 8007ec0:	b2c9      	uxtb	r1, r1
 8007ec2:	4402      	add	r2, r0
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	d101      	bne.n	8007ece <memchr+0x12>
 8007eca:	2000      	movs	r0, #0
 8007ecc:	e003      	b.n	8007ed6 <memchr+0x1a>
 8007ece:	7804      	ldrb	r4, [r0, #0]
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	428c      	cmp	r4, r1
 8007ed4:	d1f6      	bne.n	8007ec4 <memchr+0x8>
 8007ed6:	bd10      	pop	{r4, pc}

08007ed8 <_realloc_r>:
 8007ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007edc:	4680      	mov	r8, r0
 8007ede:	4614      	mov	r4, r2
 8007ee0:	460e      	mov	r6, r1
 8007ee2:	b921      	cbnz	r1, 8007eee <_realloc_r+0x16>
 8007ee4:	4611      	mov	r1, r2
 8007ee6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007eea:	f7fe bbab 	b.w	8006644 <_malloc_r>
 8007eee:	b92a      	cbnz	r2, 8007efc <_realloc_r+0x24>
 8007ef0:	f7fe fb40 	bl	8006574 <_free_r>
 8007ef4:	4625      	mov	r5, r4
 8007ef6:	4628      	mov	r0, r5
 8007ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007efc:	f000 fbf6 	bl	80086ec <_malloc_usable_size_r>
 8007f00:	4284      	cmp	r4, r0
 8007f02:	4607      	mov	r7, r0
 8007f04:	d802      	bhi.n	8007f0c <_realloc_r+0x34>
 8007f06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007f0a:	d812      	bhi.n	8007f32 <_realloc_r+0x5a>
 8007f0c:	4621      	mov	r1, r4
 8007f0e:	4640      	mov	r0, r8
 8007f10:	f7fe fb98 	bl	8006644 <_malloc_r>
 8007f14:	4605      	mov	r5, r0
 8007f16:	2800      	cmp	r0, #0
 8007f18:	d0ed      	beq.n	8007ef6 <_realloc_r+0x1e>
 8007f1a:	42bc      	cmp	r4, r7
 8007f1c:	4622      	mov	r2, r4
 8007f1e:	4631      	mov	r1, r6
 8007f20:	bf28      	it	cs
 8007f22:	463a      	movcs	r2, r7
 8007f24:	f7fe f89e 	bl	8006064 <memcpy>
 8007f28:	4631      	mov	r1, r6
 8007f2a:	4640      	mov	r0, r8
 8007f2c:	f7fe fb22 	bl	8006574 <_free_r>
 8007f30:	e7e1      	b.n	8007ef6 <_realloc_r+0x1e>
 8007f32:	4635      	mov	r5, r6
 8007f34:	e7df      	b.n	8007ef6 <_realloc_r+0x1e>

08007f36 <_sungetc_r>:
 8007f36:	b538      	push	{r3, r4, r5, lr}
 8007f38:	1c4b      	adds	r3, r1, #1
 8007f3a:	4614      	mov	r4, r2
 8007f3c:	d103      	bne.n	8007f46 <_sungetc_r+0x10>
 8007f3e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007f42:	4628      	mov	r0, r5
 8007f44:	bd38      	pop	{r3, r4, r5, pc}
 8007f46:	8993      	ldrh	r3, [r2, #12]
 8007f48:	b2cd      	uxtb	r5, r1
 8007f4a:	f023 0320 	bic.w	r3, r3, #32
 8007f4e:	8193      	strh	r3, [r2, #12]
 8007f50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f52:	6852      	ldr	r2, [r2, #4]
 8007f54:	b18b      	cbz	r3, 8007f7a <_sungetc_r+0x44>
 8007f56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	dd08      	ble.n	8007f6e <_sungetc_r+0x38>
 8007f5c:	6823      	ldr	r3, [r4, #0]
 8007f5e:	1e5a      	subs	r2, r3, #1
 8007f60:	6022      	str	r2, [r4, #0]
 8007f62:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007f66:	6863      	ldr	r3, [r4, #4]
 8007f68:	3301      	adds	r3, #1
 8007f6a:	6063      	str	r3, [r4, #4]
 8007f6c:	e7e9      	b.n	8007f42 <_sungetc_r+0xc>
 8007f6e:	4621      	mov	r1, r4
 8007f70:	f000 fb84 	bl	800867c <__submore>
 8007f74:	2800      	cmp	r0, #0
 8007f76:	d0f1      	beq.n	8007f5c <_sungetc_r+0x26>
 8007f78:	e7e1      	b.n	8007f3e <_sungetc_r+0x8>
 8007f7a:	6921      	ldr	r1, [r4, #16]
 8007f7c:	6823      	ldr	r3, [r4, #0]
 8007f7e:	b151      	cbz	r1, 8007f96 <_sungetc_r+0x60>
 8007f80:	4299      	cmp	r1, r3
 8007f82:	d208      	bcs.n	8007f96 <_sungetc_r+0x60>
 8007f84:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8007f88:	42a9      	cmp	r1, r5
 8007f8a:	d104      	bne.n	8007f96 <_sungetc_r+0x60>
 8007f8c:	3b01      	subs	r3, #1
 8007f8e:	3201      	adds	r2, #1
 8007f90:	6023      	str	r3, [r4, #0]
 8007f92:	6062      	str	r2, [r4, #4]
 8007f94:	e7d5      	b.n	8007f42 <_sungetc_r+0xc>
 8007f96:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007f9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f9e:	6363      	str	r3, [r4, #52]	; 0x34
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	63a3      	str	r3, [r4, #56]	; 0x38
 8007fa4:	4623      	mov	r3, r4
 8007fa6:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007faa:	6023      	str	r3, [r4, #0]
 8007fac:	2301      	movs	r3, #1
 8007fae:	e7dc      	b.n	8007f6a <_sungetc_r+0x34>

08007fb0 <__ssrefill_r>:
 8007fb0:	b510      	push	{r4, lr}
 8007fb2:	460c      	mov	r4, r1
 8007fb4:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007fb6:	b169      	cbz	r1, 8007fd4 <__ssrefill_r+0x24>
 8007fb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fbc:	4299      	cmp	r1, r3
 8007fbe:	d001      	beq.n	8007fc4 <__ssrefill_r+0x14>
 8007fc0:	f7fe fad8 	bl	8006574 <_free_r>
 8007fc4:	2000      	movs	r0, #0
 8007fc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007fc8:	6360      	str	r0, [r4, #52]	; 0x34
 8007fca:	6063      	str	r3, [r4, #4]
 8007fcc:	b113      	cbz	r3, 8007fd4 <__ssrefill_r+0x24>
 8007fce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007fd0:	6023      	str	r3, [r4, #0]
 8007fd2:	bd10      	pop	{r4, pc}
 8007fd4:	6923      	ldr	r3, [r4, #16]
 8007fd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fda:	6023      	str	r3, [r4, #0]
 8007fdc:	2300      	movs	r3, #0
 8007fde:	6063      	str	r3, [r4, #4]
 8007fe0:	89a3      	ldrh	r3, [r4, #12]
 8007fe2:	f043 0320 	orr.w	r3, r3, #32
 8007fe6:	81a3      	strh	r3, [r4, #12]
 8007fe8:	e7f3      	b.n	8007fd2 <__ssrefill_r+0x22>
	...

08007fec <__ssvfiscanf_r>:
 8007fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ff0:	460c      	mov	r4, r1
 8007ff2:	2100      	movs	r1, #0
 8007ff4:	4606      	mov	r6, r0
 8007ff6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8007ffa:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8007ffe:	49a7      	ldr	r1, [pc, #668]	; (800829c <__ssvfiscanf_r+0x2b0>)
 8008000:	f10d 0804 	add.w	r8, sp, #4
 8008004:	91a0      	str	r1, [sp, #640]	; 0x280
 8008006:	49a6      	ldr	r1, [pc, #664]	; (80082a0 <__ssvfiscanf_r+0x2b4>)
 8008008:	4fa6      	ldr	r7, [pc, #664]	; (80082a4 <__ssvfiscanf_r+0x2b8>)
 800800a:	f8df 929c 	ldr.w	r9, [pc, #668]	; 80082a8 <__ssvfiscanf_r+0x2bc>
 800800e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008012:	91a1      	str	r1, [sp, #644]	; 0x284
 8008014:	9300      	str	r3, [sp, #0]
 8008016:	7813      	ldrb	r3, [r2, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	f000 815c 	beq.w	80082d6 <__ssvfiscanf_r+0x2ea>
 800801e:	5dd9      	ldrb	r1, [r3, r7]
 8008020:	1c55      	adds	r5, r2, #1
 8008022:	f011 0108 	ands.w	r1, r1, #8
 8008026:	d019      	beq.n	800805c <__ssvfiscanf_r+0x70>
 8008028:	6863      	ldr	r3, [r4, #4]
 800802a:	2b00      	cmp	r3, #0
 800802c:	dd0f      	ble.n	800804e <__ssvfiscanf_r+0x62>
 800802e:	6823      	ldr	r3, [r4, #0]
 8008030:	781a      	ldrb	r2, [r3, #0]
 8008032:	5cba      	ldrb	r2, [r7, r2]
 8008034:	0712      	lsls	r2, r2, #28
 8008036:	d401      	bmi.n	800803c <__ssvfiscanf_r+0x50>
 8008038:	462a      	mov	r2, r5
 800803a:	e7ec      	b.n	8008016 <__ssvfiscanf_r+0x2a>
 800803c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800803e:	3301      	adds	r3, #1
 8008040:	3201      	adds	r2, #1
 8008042:	9245      	str	r2, [sp, #276]	; 0x114
 8008044:	6862      	ldr	r2, [r4, #4]
 8008046:	6023      	str	r3, [r4, #0]
 8008048:	3a01      	subs	r2, #1
 800804a:	6062      	str	r2, [r4, #4]
 800804c:	e7ec      	b.n	8008028 <__ssvfiscanf_r+0x3c>
 800804e:	4621      	mov	r1, r4
 8008050:	4630      	mov	r0, r6
 8008052:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008054:	4798      	blx	r3
 8008056:	2800      	cmp	r0, #0
 8008058:	d0e9      	beq.n	800802e <__ssvfiscanf_r+0x42>
 800805a:	e7ed      	b.n	8008038 <__ssvfiscanf_r+0x4c>
 800805c:	2b25      	cmp	r3, #37	; 0x25
 800805e:	d012      	beq.n	8008086 <__ssvfiscanf_r+0x9a>
 8008060:	469a      	mov	sl, r3
 8008062:	6863      	ldr	r3, [r4, #4]
 8008064:	2b00      	cmp	r3, #0
 8008066:	f340 8094 	ble.w	8008192 <__ssvfiscanf_r+0x1a6>
 800806a:	6822      	ldr	r2, [r4, #0]
 800806c:	7813      	ldrb	r3, [r2, #0]
 800806e:	4553      	cmp	r3, sl
 8008070:	f040 8131 	bne.w	80082d6 <__ssvfiscanf_r+0x2ea>
 8008074:	6863      	ldr	r3, [r4, #4]
 8008076:	3201      	adds	r2, #1
 8008078:	3b01      	subs	r3, #1
 800807a:	6063      	str	r3, [r4, #4]
 800807c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800807e:	6022      	str	r2, [r4, #0]
 8008080:	3301      	adds	r3, #1
 8008082:	9345      	str	r3, [sp, #276]	; 0x114
 8008084:	e7d8      	b.n	8008038 <__ssvfiscanf_r+0x4c>
 8008086:	9141      	str	r1, [sp, #260]	; 0x104
 8008088:	9143      	str	r1, [sp, #268]	; 0x10c
 800808a:	7853      	ldrb	r3, [r2, #1]
 800808c:	2b2a      	cmp	r3, #42	; 0x2a
 800808e:	bf04      	itt	eq
 8008090:	2310      	moveq	r3, #16
 8008092:	1c95      	addeq	r5, r2, #2
 8008094:	f04f 020a 	mov.w	r2, #10
 8008098:	bf08      	it	eq
 800809a:	9341      	streq	r3, [sp, #260]	; 0x104
 800809c:	46aa      	mov	sl, r5
 800809e:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80080a2:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80080a6:	2b09      	cmp	r3, #9
 80080a8:	d91d      	bls.n	80080e6 <__ssvfiscanf_r+0xfa>
 80080aa:	2203      	movs	r2, #3
 80080ac:	487e      	ldr	r0, [pc, #504]	; (80082a8 <__ssvfiscanf_r+0x2bc>)
 80080ae:	f7ff ff05 	bl	8007ebc <memchr>
 80080b2:	b140      	cbz	r0, 80080c6 <__ssvfiscanf_r+0xda>
 80080b4:	2301      	movs	r3, #1
 80080b6:	4655      	mov	r5, sl
 80080b8:	eba0 0009 	sub.w	r0, r0, r9
 80080bc:	fa03 f000 	lsl.w	r0, r3, r0
 80080c0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80080c2:	4318      	orrs	r0, r3
 80080c4:	9041      	str	r0, [sp, #260]	; 0x104
 80080c6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80080ca:	2b78      	cmp	r3, #120	; 0x78
 80080cc:	d806      	bhi.n	80080dc <__ssvfiscanf_r+0xf0>
 80080ce:	2b57      	cmp	r3, #87	; 0x57
 80080d0:	d810      	bhi.n	80080f4 <__ssvfiscanf_r+0x108>
 80080d2:	2b25      	cmp	r3, #37	; 0x25
 80080d4:	d0c4      	beq.n	8008060 <__ssvfiscanf_r+0x74>
 80080d6:	d857      	bhi.n	8008188 <__ssvfiscanf_r+0x19c>
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d065      	beq.n	80081a8 <__ssvfiscanf_r+0x1bc>
 80080dc:	2303      	movs	r3, #3
 80080de:	9347      	str	r3, [sp, #284]	; 0x11c
 80080e0:	230a      	movs	r3, #10
 80080e2:	9342      	str	r3, [sp, #264]	; 0x108
 80080e4:	e072      	b.n	80081cc <__ssvfiscanf_r+0x1e0>
 80080e6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80080e8:	4655      	mov	r5, sl
 80080ea:	fb02 1103 	mla	r1, r2, r3, r1
 80080ee:	3930      	subs	r1, #48	; 0x30
 80080f0:	9143      	str	r1, [sp, #268]	; 0x10c
 80080f2:	e7d3      	b.n	800809c <__ssvfiscanf_r+0xb0>
 80080f4:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80080f8:	2a20      	cmp	r2, #32
 80080fa:	d8ef      	bhi.n	80080dc <__ssvfiscanf_r+0xf0>
 80080fc:	a101      	add	r1, pc, #4	; (adr r1, 8008104 <__ssvfiscanf_r+0x118>)
 80080fe:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008102:	bf00      	nop
 8008104:	080081b7 	.word	0x080081b7
 8008108:	080080dd 	.word	0x080080dd
 800810c:	080080dd 	.word	0x080080dd
 8008110:	08008215 	.word	0x08008215
 8008114:	080080dd 	.word	0x080080dd
 8008118:	080080dd 	.word	0x080080dd
 800811c:	080080dd 	.word	0x080080dd
 8008120:	080080dd 	.word	0x080080dd
 8008124:	080080dd 	.word	0x080080dd
 8008128:	080080dd 	.word	0x080080dd
 800812c:	080080dd 	.word	0x080080dd
 8008130:	0800822b 	.word	0x0800822b
 8008134:	08008201 	.word	0x08008201
 8008138:	0800818f 	.word	0x0800818f
 800813c:	0800818f 	.word	0x0800818f
 8008140:	0800818f 	.word	0x0800818f
 8008144:	080080dd 	.word	0x080080dd
 8008148:	08008205 	.word	0x08008205
 800814c:	080080dd 	.word	0x080080dd
 8008150:	080080dd 	.word	0x080080dd
 8008154:	080080dd 	.word	0x080080dd
 8008158:	080080dd 	.word	0x080080dd
 800815c:	0800823b 	.word	0x0800823b
 8008160:	0800820d 	.word	0x0800820d
 8008164:	080081af 	.word	0x080081af
 8008168:	080080dd 	.word	0x080080dd
 800816c:	080080dd 	.word	0x080080dd
 8008170:	08008237 	.word	0x08008237
 8008174:	080080dd 	.word	0x080080dd
 8008178:	08008201 	.word	0x08008201
 800817c:	080080dd 	.word	0x080080dd
 8008180:	080080dd 	.word	0x080080dd
 8008184:	080081b7 	.word	0x080081b7
 8008188:	3b45      	subs	r3, #69	; 0x45
 800818a:	2b02      	cmp	r3, #2
 800818c:	d8a6      	bhi.n	80080dc <__ssvfiscanf_r+0xf0>
 800818e:	2305      	movs	r3, #5
 8008190:	e01b      	b.n	80081ca <__ssvfiscanf_r+0x1de>
 8008192:	4621      	mov	r1, r4
 8008194:	4630      	mov	r0, r6
 8008196:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008198:	4798      	blx	r3
 800819a:	2800      	cmp	r0, #0
 800819c:	f43f af65 	beq.w	800806a <__ssvfiscanf_r+0x7e>
 80081a0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80081a2:	2800      	cmp	r0, #0
 80081a4:	f040 808d 	bne.w	80082c2 <__ssvfiscanf_r+0x2d6>
 80081a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081ac:	e08f      	b.n	80082ce <__ssvfiscanf_r+0x2e2>
 80081ae:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80081b0:	f042 0220 	orr.w	r2, r2, #32
 80081b4:	9241      	str	r2, [sp, #260]	; 0x104
 80081b6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80081b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081bc:	9241      	str	r2, [sp, #260]	; 0x104
 80081be:	2210      	movs	r2, #16
 80081c0:	2b6f      	cmp	r3, #111	; 0x6f
 80081c2:	bf34      	ite	cc
 80081c4:	2303      	movcc	r3, #3
 80081c6:	2304      	movcs	r3, #4
 80081c8:	9242      	str	r2, [sp, #264]	; 0x108
 80081ca:	9347      	str	r3, [sp, #284]	; 0x11c
 80081cc:	6863      	ldr	r3, [r4, #4]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	dd42      	ble.n	8008258 <__ssvfiscanf_r+0x26c>
 80081d2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80081d4:	0659      	lsls	r1, r3, #25
 80081d6:	d404      	bmi.n	80081e2 <__ssvfiscanf_r+0x1f6>
 80081d8:	6823      	ldr	r3, [r4, #0]
 80081da:	781a      	ldrb	r2, [r3, #0]
 80081dc:	5cba      	ldrb	r2, [r7, r2]
 80081de:	0712      	lsls	r2, r2, #28
 80081e0:	d441      	bmi.n	8008266 <__ssvfiscanf_r+0x27a>
 80081e2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80081e4:	2b02      	cmp	r3, #2
 80081e6:	dc50      	bgt.n	800828a <__ssvfiscanf_r+0x29e>
 80081e8:	466b      	mov	r3, sp
 80081ea:	4622      	mov	r2, r4
 80081ec:	4630      	mov	r0, r6
 80081ee:	a941      	add	r1, sp, #260	; 0x104
 80081f0:	f000 f876 	bl	80082e0 <_scanf_chars>
 80081f4:	2801      	cmp	r0, #1
 80081f6:	d06e      	beq.n	80082d6 <__ssvfiscanf_r+0x2ea>
 80081f8:	2802      	cmp	r0, #2
 80081fa:	f47f af1d 	bne.w	8008038 <__ssvfiscanf_r+0x4c>
 80081fe:	e7cf      	b.n	80081a0 <__ssvfiscanf_r+0x1b4>
 8008200:	220a      	movs	r2, #10
 8008202:	e7dd      	b.n	80081c0 <__ssvfiscanf_r+0x1d4>
 8008204:	2300      	movs	r3, #0
 8008206:	9342      	str	r3, [sp, #264]	; 0x108
 8008208:	2303      	movs	r3, #3
 800820a:	e7de      	b.n	80081ca <__ssvfiscanf_r+0x1de>
 800820c:	2308      	movs	r3, #8
 800820e:	9342      	str	r3, [sp, #264]	; 0x108
 8008210:	2304      	movs	r3, #4
 8008212:	e7da      	b.n	80081ca <__ssvfiscanf_r+0x1de>
 8008214:	4629      	mov	r1, r5
 8008216:	4640      	mov	r0, r8
 8008218:	f000 f9b4 	bl	8008584 <__sccl>
 800821c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800821e:	4605      	mov	r5, r0
 8008220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008224:	9341      	str	r3, [sp, #260]	; 0x104
 8008226:	2301      	movs	r3, #1
 8008228:	e7cf      	b.n	80081ca <__ssvfiscanf_r+0x1de>
 800822a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800822c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008230:	9341      	str	r3, [sp, #260]	; 0x104
 8008232:	2300      	movs	r3, #0
 8008234:	e7c9      	b.n	80081ca <__ssvfiscanf_r+0x1de>
 8008236:	2302      	movs	r3, #2
 8008238:	e7c7      	b.n	80081ca <__ssvfiscanf_r+0x1de>
 800823a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800823c:	06c3      	lsls	r3, r0, #27
 800823e:	f53f aefb 	bmi.w	8008038 <__ssvfiscanf_r+0x4c>
 8008242:	9b00      	ldr	r3, [sp, #0]
 8008244:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008246:	1d19      	adds	r1, r3, #4
 8008248:	9100      	str	r1, [sp, #0]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f010 0f01 	tst.w	r0, #1
 8008250:	bf14      	ite	ne
 8008252:	801a      	strhne	r2, [r3, #0]
 8008254:	601a      	streq	r2, [r3, #0]
 8008256:	e6ef      	b.n	8008038 <__ssvfiscanf_r+0x4c>
 8008258:	4621      	mov	r1, r4
 800825a:	4630      	mov	r0, r6
 800825c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800825e:	4798      	blx	r3
 8008260:	2800      	cmp	r0, #0
 8008262:	d0b6      	beq.n	80081d2 <__ssvfiscanf_r+0x1e6>
 8008264:	e79c      	b.n	80081a0 <__ssvfiscanf_r+0x1b4>
 8008266:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008268:	3201      	adds	r2, #1
 800826a:	9245      	str	r2, [sp, #276]	; 0x114
 800826c:	6862      	ldr	r2, [r4, #4]
 800826e:	3a01      	subs	r2, #1
 8008270:	2a00      	cmp	r2, #0
 8008272:	6062      	str	r2, [r4, #4]
 8008274:	dd02      	ble.n	800827c <__ssvfiscanf_r+0x290>
 8008276:	3301      	adds	r3, #1
 8008278:	6023      	str	r3, [r4, #0]
 800827a:	e7ad      	b.n	80081d8 <__ssvfiscanf_r+0x1ec>
 800827c:	4621      	mov	r1, r4
 800827e:	4630      	mov	r0, r6
 8008280:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008282:	4798      	blx	r3
 8008284:	2800      	cmp	r0, #0
 8008286:	d0a7      	beq.n	80081d8 <__ssvfiscanf_r+0x1ec>
 8008288:	e78a      	b.n	80081a0 <__ssvfiscanf_r+0x1b4>
 800828a:	2b04      	cmp	r3, #4
 800828c:	dc0e      	bgt.n	80082ac <__ssvfiscanf_r+0x2c0>
 800828e:	466b      	mov	r3, sp
 8008290:	4622      	mov	r2, r4
 8008292:	4630      	mov	r0, r6
 8008294:	a941      	add	r1, sp, #260	; 0x104
 8008296:	f000 f87d 	bl	8008394 <_scanf_i>
 800829a:	e7ab      	b.n	80081f4 <__ssvfiscanf_r+0x208>
 800829c:	08007f37 	.word	0x08007f37
 80082a0:	08007fb1 	.word	0x08007fb1
 80082a4:	08008b3e 	.word	0x08008b3e
 80082a8:	08008c44 	.word	0x08008c44
 80082ac:	4b0b      	ldr	r3, [pc, #44]	; (80082dc <__ssvfiscanf_r+0x2f0>)
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	f43f aec2 	beq.w	8008038 <__ssvfiscanf_r+0x4c>
 80082b4:	466b      	mov	r3, sp
 80082b6:	4622      	mov	r2, r4
 80082b8:	4630      	mov	r0, r6
 80082ba:	a941      	add	r1, sp, #260	; 0x104
 80082bc:	f3af 8000 	nop.w
 80082c0:	e798      	b.n	80081f4 <__ssvfiscanf_r+0x208>
 80082c2:	89a3      	ldrh	r3, [r4, #12]
 80082c4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80082c8:	bf18      	it	ne
 80082ca:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80082ce:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80082d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082d6:	9844      	ldr	r0, [sp, #272]	; 0x110
 80082d8:	e7f9      	b.n	80082ce <__ssvfiscanf_r+0x2e2>
 80082da:	bf00      	nop
 80082dc:	00000000 	.word	0x00000000

080082e0 <_scanf_chars>:
 80082e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082e4:	4615      	mov	r5, r2
 80082e6:	688a      	ldr	r2, [r1, #8]
 80082e8:	4680      	mov	r8, r0
 80082ea:	460c      	mov	r4, r1
 80082ec:	b932      	cbnz	r2, 80082fc <_scanf_chars+0x1c>
 80082ee:	698a      	ldr	r2, [r1, #24]
 80082f0:	2a00      	cmp	r2, #0
 80082f2:	bf0c      	ite	eq
 80082f4:	2201      	moveq	r2, #1
 80082f6:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 80082fa:	608a      	str	r2, [r1, #8]
 80082fc:	2700      	movs	r7, #0
 80082fe:	6822      	ldr	r2, [r4, #0]
 8008300:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8008390 <_scanf_chars+0xb0>
 8008304:	06d1      	lsls	r1, r2, #27
 8008306:	bf5f      	itttt	pl
 8008308:	681a      	ldrpl	r2, [r3, #0]
 800830a:	1d11      	addpl	r1, r2, #4
 800830c:	6019      	strpl	r1, [r3, #0]
 800830e:	6816      	ldrpl	r6, [r2, #0]
 8008310:	69a0      	ldr	r0, [r4, #24]
 8008312:	b188      	cbz	r0, 8008338 <_scanf_chars+0x58>
 8008314:	2801      	cmp	r0, #1
 8008316:	d107      	bne.n	8008328 <_scanf_chars+0x48>
 8008318:	682b      	ldr	r3, [r5, #0]
 800831a:	781a      	ldrb	r2, [r3, #0]
 800831c:	6963      	ldr	r3, [r4, #20]
 800831e:	5c9b      	ldrb	r3, [r3, r2]
 8008320:	b953      	cbnz	r3, 8008338 <_scanf_chars+0x58>
 8008322:	2f00      	cmp	r7, #0
 8008324:	d031      	beq.n	800838a <_scanf_chars+0xaa>
 8008326:	e022      	b.n	800836e <_scanf_chars+0x8e>
 8008328:	2802      	cmp	r0, #2
 800832a:	d120      	bne.n	800836e <_scanf_chars+0x8e>
 800832c:	682b      	ldr	r3, [r5, #0]
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	f813 3009 	ldrb.w	r3, [r3, r9]
 8008334:	071b      	lsls	r3, r3, #28
 8008336:	d41a      	bmi.n	800836e <_scanf_chars+0x8e>
 8008338:	6823      	ldr	r3, [r4, #0]
 800833a:	3701      	adds	r7, #1
 800833c:	06da      	lsls	r2, r3, #27
 800833e:	bf5e      	ittt	pl
 8008340:	682b      	ldrpl	r3, [r5, #0]
 8008342:	781b      	ldrbpl	r3, [r3, #0]
 8008344:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008348:	682a      	ldr	r2, [r5, #0]
 800834a:	686b      	ldr	r3, [r5, #4]
 800834c:	3201      	adds	r2, #1
 800834e:	602a      	str	r2, [r5, #0]
 8008350:	68a2      	ldr	r2, [r4, #8]
 8008352:	3b01      	subs	r3, #1
 8008354:	3a01      	subs	r2, #1
 8008356:	606b      	str	r3, [r5, #4]
 8008358:	60a2      	str	r2, [r4, #8]
 800835a:	b142      	cbz	r2, 800836e <_scanf_chars+0x8e>
 800835c:	2b00      	cmp	r3, #0
 800835e:	dcd7      	bgt.n	8008310 <_scanf_chars+0x30>
 8008360:	4629      	mov	r1, r5
 8008362:	4640      	mov	r0, r8
 8008364:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008368:	4798      	blx	r3
 800836a:	2800      	cmp	r0, #0
 800836c:	d0d0      	beq.n	8008310 <_scanf_chars+0x30>
 800836e:	6823      	ldr	r3, [r4, #0]
 8008370:	f013 0310 	ands.w	r3, r3, #16
 8008374:	d105      	bne.n	8008382 <_scanf_chars+0xa2>
 8008376:	68e2      	ldr	r2, [r4, #12]
 8008378:	3201      	adds	r2, #1
 800837a:	60e2      	str	r2, [r4, #12]
 800837c:	69a2      	ldr	r2, [r4, #24]
 800837e:	b102      	cbz	r2, 8008382 <_scanf_chars+0xa2>
 8008380:	7033      	strb	r3, [r6, #0]
 8008382:	2000      	movs	r0, #0
 8008384:	6923      	ldr	r3, [r4, #16]
 8008386:	443b      	add	r3, r7
 8008388:	6123      	str	r3, [r4, #16]
 800838a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800838e:	bf00      	nop
 8008390:	08008b3e 	.word	0x08008b3e

08008394 <_scanf_i>:
 8008394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008398:	460c      	mov	r4, r1
 800839a:	4698      	mov	r8, r3
 800839c:	4b75      	ldr	r3, [pc, #468]	; (8008574 <_scanf_i+0x1e0>)
 800839e:	b087      	sub	sp, #28
 80083a0:	4682      	mov	sl, r0
 80083a2:	4616      	mov	r6, r2
 80083a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80083a8:	ab03      	add	r3, sp, #12
 80083aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80083ae:	4b72      	ldr	r3, [pc, #456]	; (8008578 <_scanf_i+0x1e4>)
 80083b0:	69a1      	ldr	r1, [r4, #24]
 80083b2:	4a72      	ldr	r2, [pc, #456]	; (800857c <_scanf_i+0x1e8>)
 80083b4:	4627      	mov	r7, r4
 80083b6:	2903      	cmp	r1, #3
 80083b8:	bf18      	it	ne
 80083ba:	461a      	movne	r2, r3
 80083bc:	68a3      	ldr	r3, [r4, #8]
 80083be:	9201      	str	r2, [sp, #4]
 80083c0:	1e5a      	subs	r2, r3, #1
 80083c2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80083c6:	bf81      	itttt	hi
 80083c8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80083cc:	eb03 0905 	addhi.w	r9, r3, r5
 80083d0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80083d4:	60a3      	strhi	r3, [r4, #8]
 80083d6:	f857 3b1c 	ldr.w	r3, [r7], #28
 80083da:	bf98      	it	ls
 80083dc:	f04f 0900 	movls.w	r9, #0
 80083e0:	463d      	mov	r5, r7
 80083e2:	f04f 0b00 	mov.w	fp, #0
 80083e6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80083ea:	6023      	str	r3, [r4, #0]
 80083ec:	6831      	ldr	r1, [r6, #0]
 80083ee:	ab03      	add	r3, sp, #12
 80083f0:	2202      	movs	r2, #2
 80083f2:	7809      	ldrb	r1, [r1, #0]
 80083f4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80083f8:	f7ff fd60 	bl	8007ebc <memchr>
 80083fc:	b328      	cbz	r0, 800844a <_scanf_i+0xb6>
 80083fe:	f1bb 0f01 	cmp.w	fp, #1
 8008402:	d159      	bne.n	80084b8 <_scanf_i+0x124>
 8008404:	6862      	ldr	r2, [r4, #4]
 8008406:	b92a      	cbnz	r2, 8008414 <_scanf_i+0x80>
 8008408:	2308      	movs	r3, #8
 800840a:	6822      	ldr	r2, [r4, #0]
 800840c:	6063      	str	r3, [r4, #4]
 800840e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008412:	6022      	str	r2, [r4, #0]
 8008414:	6822      	ldr	r2, [r4, #0]
 8008416:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800841a:	6022      	str	r2, [r4, #0]
 800841c:	68a2      	ldr	r2, [r4, #8]
 800841e:	1e51      	subs	r1, r2, #1
 8008420:	60a1      	str	r1, [r4, #8]
 8008422:	b192      	cbz	r2, 800844a <_scanf_i+0xb6>
 8008424:	6832      	ldr	r2, [r6, #0]
 8008426:	1c51      	adds	r1, r2, #1
 8008428:	6031      	str	r1, [r6, #0]
 800842a:	7812      	ldrb	r2, [r2, #0]
 800842c:	f805 2b01 	strb.w	r2, [r5], #1
 8008430:	6872      	ldr	r2, [r6, #4]
 8008432:	3a01      	subs	r2, #1
 8008434:	2a00      	cmp	r2, #0
 8008436:	6072      	str	r2, [r6, #4]
 8008438:	dc07      	bgt.n	800844a <_scanf_i+0xb6>
 800843a:	4631      	mov	r1, r6
 800843c:	4650      	mov	r0, sl
 800843e:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008442:	4790      	blx	r2
 8008444:	2800      	cmp	r0, #0
 8008446:	f040 8085 	bne.w	8008554 <_scanf_i+0x1c0>
 800844a:	f10b 0b01 	add.w	fp, fp, #1
 800844e:	f1bb 0f03 	cmp.w	fp, #3
 8008452:	d1cb      	bne.n	80083ec <_scanf_i+0x58>
 8008454:	6863      	ldr	r3, [r4, #4]
 8008456:	b90b      	cbnz	r3, 800845c <_scanf_i+0xc8>
 8008458:	230a      	movs	r3, #10
 800845a:	6063      	str	r3, [r4, #4]
 800845c:	6863      	ldr	r3, [r4, #4]
 800845e:	4948      	ldr	r1, [pc, #288]	; (8008580 <_scanf_i+0x1ec>)
 8008460:	6960      	ldr	r0, [r4, #20]
 8008462:	1ac9      	subs	r1, r1, r3
 8008464:	f000 f88e 	bl	8008584 <__sccl>
 8008468:	f04f 0b00 	mov.w	fp, #0
 800846c:	68a3      	ldr	r3, [r4, #8]
 800846e:	6822      	ldr	r2, [r4, #0]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d03d      	beq.n	80084f0 <_scanf_i+0x15c>
 8008474:	6831      	ldr	r1, [r6, #0]
 8008476:	6960      	ldr	r0, [r4, #20]
 8008478:	f891 c000 	ldrb.w	ip, [r1]
 800847c:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008480:	2800      	cmp	r0, #0
 8008482:	d035      	beq.n	80084f0 <_scanf_i+0x15c>
 8008484:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008488:	d124      	bne.n	80084d4 <_scanf_i+0x140>
 800848a:	0510      	lsls	r0, r2, #20
 800848c:	d522      	bpl.n	80084d4 <_scanf_i+0x140>
 800848e:	f10b 0b01 	add.w	fp, fp, #1
 8008492:	f1b9 0f00 	cmp.w	r9, #0
 8008496:	d003      	beq.n	80084a0 <_scanf_i+0x10c>
 8008498:	3301      	adds	r3, #1
 800849a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800849e:	60a3      	str	r3, [r4, #8]
 80084a0:	6873      	ldr	r3, [r6, #4]
 80084a2:	3b01      	subs	r3, #1
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	6073      	str	r3, [r6, #4]
 80084a8:	dd1b      	ble.n	80084e2 <_scanf_i+0x14e>
 80084aa:	6833      	ldr	r3, [r6, #0]
 80084ac:	3301      	adds	r3, #1
 80084ae:	6033      	str	r3, [r6, #0]
 80084b0:	68a3      	ldr	r3, [r4, #8]
 80084b2:	3b01      	subs	r3, #1
 80084b4:	60a3      	str	r3, [r4, #8]
 80084b6:	e7d9      	b.n	800846c <_scanf_i+0xd8>
 80084b8:	f1bb 0f02 	cmp.w	fp, #2
 80084bc:	d1ae      	bne.n	800841c <_scanf_i+0x88>
 80084be:	6822      	ldr	r2, [r4, #0]
 80084c0:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80084c4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80084c8:	d1bf      	bne.n	800844a <_scanf_i+0xb6>
 80084ca:	2310      	movs	r3, #16
 80084cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084d0:	6063      	str	r3, [r4, #4]
 80084d2:	e7a2      	b.n	800841a <_scanf_i+0x86>
 80084d4:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80084d8:	6022      	str	r2, [r4, #0]
 80084da:	780b      	ldrb	r3, [r1, #0]
 80084dc:	f805 3b01 	strb.w	r3, [r5], #1
 80084e0:	e7de      	b.n	80084a0 <_scanf_i+0x10c>
 80084e2:	4631      	mov	r1, r6
 80084e4:	4650      	mov	r0, sl
 80084e6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80084ea:	4798      	blx	r3
 80084ec:	2800      	cmp	r0, #0
 80084ee:	d0df      	beq.n	80084b0 <_scanf_i+0x11c>
 80084f0:	6823      	ldr	r3, [r4, #0]
 80084f2:	05db      	lsls	r3, r3, #23
 80084f4:	d50d      	bpl.n	8008512 <_scanf_i+0x17e>
 80084f6:	42bd      	cmp	r5, r7
 80084f8:	d909      	bls.n	800850e <_scanf_i+0x17a>
 80084fa:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80084fe:	4632      	mov	r2, r6
 8008500:	4650      	mov	r0, sl
 8008502:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008506:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800850a:	4798      	blx	r3
 800850c:	464d      	mov	r5, r9
 800850e:	42bd      	cmp	r5, r7
 8008510:	d02d      	beq.n	800856e <_scanf_i+0x1da>
 8008512:	6822      	ldr	r2, [r4, #0]
 8008514:	f012 0210 	ands.w	r2, r2, #16
 8008518:	d113      	bne.n	8008542 <_scanf_i+0x1ae>
 800851a:	702a      	strb	r2, [r5, #0]
 800851c:	4639      	mov	r1, r7
 800851e:	6863      	ldr	r3, [r4, #4]
 8008520:	4650      	mov	r0, sl
 8008522:	9e01      	ldr	r6, [sp, #4]
 8008524:	47b0      	blx	r6
 8008526:	6821      	ldr	r1, [r4, #0]
 8008528:	f8d8 3000 	ldr.w	r3, [r8]
 800852c:	f011 0f20 	tst.w	r1, #32
 8008530:	d013      	beq.n	800855a <_scanf_i+0x1c6>
 8008532:	1d1a      	adds	r2, r3, #4
 8008534:	f8c8 2000 	str.w	r2, [r8]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	6018      	str	r0, [r3, #0]
 800853c:	68e3      	ldr	r3, [r4, #12]
 800853e:	3301      	adds	r3, #1
 8008540:	60e3      	str	r3, [r4, #12]
 8008542:	2000      	movs	r0, #0
 8008544:	1bed      	subs	r5, r5, r7
 8008546:	44ab      	add	fp, r5
 8008548:	6925      	ldr	r5, [r4, #16]
 800854a:	445d      	add	r5, fp
 800854c:	6125      	str	r5, [r4, #16]
 800854e:	b007      	add	sp, #28
 8008550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008554:	f04f 0b00 	mov.w	fp, #0
 8008558:	e7ca      	b.n	80084f0 <_scanf_i+0x15c>
 800855a:	1d1a      	adds	r2, r3, #4
 800855c:	f8c8 2000 	str.w	r2, [r8]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f011 0f01 	tst.w	r1, #1
 8008566:	bf14      	ite	ne
 8008568:	8018      	strhne	r0, [r3, #0]
 800856a:	6018      	streq	r0, [r3, #0]
 800856c:	e7e6      	b.n	800853c <_scanf_i+0x1a8>
 800856e:	2001      	movs	r0, #1
 8008570:	e7ed      	b.n	800854e <_scanf_i+0x1ba>
 8008572:	bf00      	nop
 8008574:	080088ac 	.word	0x080088ac
 8008578:	08007e39 	.word	0x08007e39
 800857c:	08006b89 	.word	0x08006b89
 8008580:	08008c8a 	.word	0x08008c8a

08008584 <__sccl>:
 8008584:	b570      	push	{r4, r5, r6, lr}
 8008586:	780b      	ldrb	r3, [r1, #0]
 8008588:	4604      	mov	r4, r0
 800858a:	2b5e      	cmp	r3, #94	; 0x5e
 800858c:	bf13      	iteet	ne
 800858e:	2200      	movne	r2, #0
 8008590:	2201      	moveq	r2, #1
 8008592:	784b      	ldrbeq	r3, [r1, #1]
 8008594:	1c48      	addne	r0, r1, #1
 8008596:	bf08      	it	eq
 8008598:	1c88      	addeq	r0, r1, #2
 800859a:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800859e:	1e61      	subs	r1, r4, #1
 80085a0:	f801 2f01 	strb.w	r2, [r1, #1]!
 80085a4:	42a9      	cmp	r1, r5
 80085a6:	d1fb      	bne.n	80085a0 <__sccl+0x1c>
 80085a8:	b90b      	cbnz	r3, 80085ae <__sccl+0x2a>
 80085aa:	3801      	subs	r0, #1
 80085ac:	bd70      	pop	{r4, r5, r6, pc}
 80085ae:	f082 0201 	eor.w	r2, r2, #1
 80085b2:	4605      	mov	r5, r0
 80085b4:	54e2      	strb	r2, [r4, r3]
 80085b6:	4628      	mov	r0, r5
 80085b8:	f810 1b01 	ldrb.w	r1, [r0], #1
 80085bc:	292d      	cmp	r1, #45	; 0x2d
 80085be:	d006      	beq.n	80085ce <__sccl+0x4a>
 80085c0:	295d      	cmp	r1, #93	; 0x5d
 80085c2:	d0f3      	beq.n	80085ac <__sccl+0x28>
 80085c4:	b909      	cbnz	r1, 80085ca <__sccl+0x46>
 80085c6:	4628      	mov	r0, r5
 80085c8:	e7f0      	b.n	80085ac <__sccl+0x28>
 80085ca:	460b      	mov	r3, r1
 80085cc:	e7f1      	b.n	80085b2 <__sccl+0x2e>
 80085ce:	786e      	ldrb	r6, [r5, #1]
 80085d0:	2e5d      	cmp	r6, #93	; 0x5d
 80085d2:	d0fa      	beq.n	80085ca <__sccl+0x46>
 80085d4:	42b3      	cmp	r3, r6
 80085d6:	dcf8      	bgt.n	80085ca <__sccl+0x46>
 80085d8:	4619      	mov	r1, r3
 80085da:	3502      	adds	r5, #2
 80085dc:	3101      	adds	r1, #1
 80085de:	428e      	cmp	r6, r1
 80085e0:	5462      	strb	r2, [r4, r1]
 80085e2:	dcfb      	bgt.n	80085dc <__sccl+0x58>
 80085e4:	1af1      	subs	r1, r6, r3
 80085e6:	3901      	subs	r1, #1
 80085e8:	42b3      	cmp	r3, r6
 80085ea:	bfa8      	it	ge
 80085ec:	2100      	movge	r1, #0
 80085ee:	1c58      	adds	r0, r3, #1
 80085f0:	1843      	adds	r3, r0, r1
 80085f2:	e7e0      	b.n	80085b6 <__sccl+0x32>

080085f4 <_raise_r>:
 80085f4:	291f      	cmp	r1, #31
 80085f6:	b538      	push	{r3, r4, r5, lr}
 80085f8:	4604      	mov	r4, r0
 80085fa:	460d      	mov	r5, r1
 80085fc:	d904      	bls.n	8008608 <_raise_r+0x14>
 80085fe:	2316      	movs	r3, #22
 8008600:	6003      	str	r3, [r0, #0]
 8008602:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008606:	bd38      	pop	{r3, r4, r5, pc}
 8008608:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800860a:	b112      	cbz	r2, 8008612 <_raise_r+0x1e>
 800860c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008610:	b94b      	cbnz	r3, 8008626 <_raise_r+0x32>
 8008612:	4620      	mov	r0, r4
 8008614:	f000 f830 	bl	8008678 <_getpid_r>
 8008618:	462a      	mov	r2, r5
 800861a:	4601      	mov	r1, r0
 800861c:	4620      	mov	r0, r4
 800861e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008622:	f000 b817 	b.w	8008654 <_kill_r>
 8008626:	2b01      	cmp	r3, #1
 8008628:	d00a      	beq.n	8008640 <_raise_r+0x4c>
 800862a:	1c59      	adds	r1, r3, #1
 800862c:	d103      	bne.n	8008636 <_raise_r+0x42>
 800862e:	2316      	movs	r3, #22
 8008630:	6003      	str	r3, [r0, #0]
 8008632:	2001      	movs	r0, #1
 8008634:	e7e7      	b.n	8008606 <_raise_r+0x12>
 8008636:	2400      	movs	r4, #0
 8008638:	4628      	mov	r0, r5
 800863a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800863e:	4798      	blx	r3
 8008640:	2000      	movs	r0, #0
 8008642:	e7e0      	b.n	8008606 <_raise_r+0x12>

08008644 <raise>:
 8008644:	4b02      	ldr	r3, [pc, #8]	; (8008650 <raise+0xc>)
 8008646:	4601      	mov	r1, r0
 8008648:	6818      	ldr	r0, [r3, #0]
 800864a:	f7ff bfd3 	b.w	80085f4 <_raise_r>
 800864e:	bf00      	nop
 8008650:	200001f8 	.word	0x200001f8

08008654 <_kill_r>:
 8008654:	b538      	push	{r3, r4, r5, lr}
 8008656:	2300      	movs	r3, #0
 8008658:	4d06      	ldr	r5, [pc, #24]	; (8008674 <_kill_r+0x20>)
 800865a:	4604      	mov	r4, r0
 800865c:	4608      	mov	r0, r1
 800865e:	4611      	mov	r1, r2
 8008660:	602b      	str	r3, [r5, #0]
 8008662:	f7f8 ffca 	bl	80015fa <_kill>
 8008666:	1c43      	adds	r3, r0, #1
 8008668:	d102      	bne.n	8008670 <_kill_r+0x1c>
 800866a:	682b      	ldr	r3, [r5, #0]
 800866c:	b103      	cbz	r3, 8008670 <_kill_r+0x1c>
 800866e:	6023      	str	r3, [r4, #0]
 8008670:	bd38      	pop	{r3, r4, r5, pc}
 8008672:	bf00      	nop
 8008674:	20001604 	.word	0x20001604

08008678 <_getpid_r>:
 8008678:	f7f8 bfb8 	b.w	80015ec <_getpid>

0800867c <__submore>:
 800867c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008680:	460c      	mov	r4, r1
 8008682:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008684:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008688:	4299      	cmp	r1, r3
 800868a:	d11b      	bne.n	80086c4 <__submore+0x48>
 800868c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008690:	f7fd ffd8 	bl	8006644 <_malloc_r>
 8008694:	b918      	cbnz	r0, 800869e <__submore+0x22>
 8008696:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800869a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800869e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086a2:	63a3      	str	r3, [r4, #56]	; 0x38
 80086a4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80086a8:	6360      	str	r0, [r4, #52]	; 0x34
 80086aa:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80086ae:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80086b2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80086b6:	7043      	strb	r3, [r0, #1]
 80086b8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80086bc:	7003      	strb	r3, [r0, #0]
 80086be:	6020      	str	r0, [r4, #0]
 80086c0:	2000      	movs	r0, #0
 80086c2:	e7ea      	b.n	800869a <__submore+0x1e>
 80086c4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80086c6:	0077      	lsls	r7, r6, #1
 80086c8:	463a      	mov	r2, r7
 80086ca:	f7ff fc05 	bl	8007ed8 <_realloc_r>
 80086ce:	4605      	mov	r5, r0
 80086d0:	2800      	cmp	r0, #0
 80086d2:	d0e0      	beq.n	8008696 <__submore+0x1a>
 80086d4:	eb00 0806 	add.w	r8, r0, r6
 80086d8:	4601      	mov	r1, r0
 80086da:	4632      	mov	r2, r6
 80086dc:	4640      	mov	r0, r8
 80086de:	f7fd fcc1 	bl	8006064 <memcpy>
 80086e2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80086e6:	f8c4 8000 	str.w	r8, [r4]
 80086ea:	e7e9      	b.n	80086c0 <__submore+0x44>

080086ec <_malloc_usable_size_r>:
 80086ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086f0:	1f18      	subs	r0, r3, #4
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	bfbc      	itt	lt
 80086f6:	580b      	ldrlt	r3, [r1, r0]
 80086f8:	18c0      	addlt	r0, r0, r3
 80086fa:	4770      	bx	lr

080086fc <_init>:
 80086fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086fe:	bf00      	nop
 8008700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008702:	bc08      	pop	{r3}
 8008704:	469e      	mov	lr, r3
 8008706:	4770      	bx	lr

08008708 <_fini>:
 8008708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800870a:	bf00      	nop
 800870c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800870e:	bc08      	pop	{r3}
 8008710:	469e      	mov	lr, r3
 8008712:	4770      	bx	lr
