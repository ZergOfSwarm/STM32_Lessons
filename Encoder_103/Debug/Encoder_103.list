
Encoder_103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002978  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08002a84  08002a84  00012a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b24  08002b24  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002b24  08002b24  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b24  08002b24  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b24  08002b24  00012b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b28  08002b28  00012b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002b2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000070  08002b9c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08002b9c  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c94f  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d37  00000000  00000000  0002c9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c40  00000000  00000000  0002e720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b88  00000000  00000000  0002f360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185b0  00000000  00000000  0002fee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d1fb  00000000  00000000  00048498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ba9e  00000000  00000000  00055693  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e1131  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003944  00000000  00000000  000e1184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a6c 	.word	0x08002a6c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002a6c 	.word	0x08002a6c

0800014c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000154:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000158:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800015c:	f003 0301 	and.w	r3, r3, #1
 8000160:	2b00      	cmp	r3, #0
 8000162:	d013      	beq.n	800018c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000168:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800016c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000170:	2b00      	cmp	r3, #0
 8000172:	d00b      	beq.n	800018c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000174:	e000      	b.n	8000178 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000176:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000178:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d0f9      	beq.n	8000176 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000182:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000186:	687a      	ldr	r2, [r7, #4]
 8000188:	b2d2      	uxtb	r2, r2
 800018a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800018c:	687b      	ldr	r3, [r7, #4]
}
 800018e:	4618      	mov	r0, r3
 8000190:	370c      	adds	r7, #12
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr

08000198 <_write>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000198:	b580      	push	{r7, lr}
 800019a:	b086      	sub	sp, #24
 800019c:	af00      	add	r7, sp, #0
 800019e:	60f8      	str	r0, [r7, #12]
 80001a0:	60b9      	str	r1, [r7, #8]
 80001a2:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 50);
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	b29a      	uxth	r2, r3
 80001a8:	2332      	movs	r3, #50	; 0x32
 80001aa:	68b9      	ldr	r1, [r7, #8]
 80001ac:	480c      	ldr	r0, [pc, #48]	; (80001e0 <_write+0x48>)
 80001ae:	f001 fdb5 	bl	8001d1c <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 80001b2:	2300      	movs	r3, #0
 80001b4:	617b      	str	r3, [r7, #20]
 80001b6:	e009      	b.n	80001cc <_write+0x34>
		ITM_SendChar(*ptr++);
 80001b8:	68bb      	ldr	r3, [r7, #8]
 80001ba:	1c5a      	adds	r2, r3, #1
 80001bc:	60ba      	str	r2, [r7, #8]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	4618      	mov	r0, r3
 80001c2:	f7ff ffc3 	bl	800014c <ITM_SendChar>
	for (i = 0; i < len; i++) {
 80001c6:	697b      	ldr	r3, [r7, #20]
 80001c8:	3301      	adds	r3, #1
 80001ca:	617b      	str	r3, [r7, #20]
 80001cc:	697a      	ldr	r2, [r7, #20]
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	429a      	cmp	r2, r3
 80001d2:	dbf1      	blt.n	80001b8 <_write+0x20>
	}
	return len;
 80001d4:	687b      	ldr	r3, [r7, #4]
}
 80001d6:	4618      	mov	r0, r3
 80001d8:	3718      	adds	r7, #24
 80001da:	46bd      	mov	sp, r7
 80001dc:	bd80      	pop	{r7, pc}
 80001de:	bf00      	nop
 80001e0:	2000009c 	.word	0x2000009c

080001e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e8:	f000 fbbc 	bl	8000964 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ec:	f000 f8e8 	bl	80003c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f0:	f000 f956 	bl	80004a0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001f4:	f000 f92a 	bl	800044c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  lastUpdateTime = HAL_GetTick();
 80001f8:	f000 fbdc 	bl	80009b4 <HAL_GetTick>
 80001fc:	4603      	mov	r3, r0
 80001fe:	4a67      	ldr	r2, [pc, #412]	; (800039c <main+0x1b8>)
 8000200:	6013      	str	r3, [r2, #0]
  time1click = HAL_GetTick();
 8000202:	f000 fbd7 	bl	80009b4 <HAL_GetTick>
 8000206:	4603      	mov	r3, r0
 8000208:	461a      	mov	r2, r3
 800020a:	4b65      	ldr	r3, [pc, #404]	; (80003a0 <main+0x1bc>)
 800020c:	601a      	str	r2, [r3, #0]

  printf("Hello world! \r\n");
 800020e:	4865      	ldr	r0, [pc, #404]	; (80003a4 <main+0x1c0>)
 8000210:	f001 ffa4 	bl	800215c <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (HAL_GPIO_ReadPin(A_GPIO_Port, A_Pin) == GPIO_PIN_RESET) { // If the OUTA is RESET
 8000214:	2102      	movs	r1, #2
 8000216:	4864      	ldr	r0, [pc, #400]	; (80003a8 <main+0x1c4>)
 8000218:	f000 fe5e 	bl	8000ed8 <HAL_GPIO_ReadPin>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	f040 808f 	bne.w	8000342 <main+0x15e>
			if (HAL_GPIO_ReadPin(B_GPIO_Port, B_Pin) == GPIO_PIN_RESET) { // If OUTB is also reset... CCK
 8000224:	2104      	movs	r1, #4
 8000226:	4860      	ldr	r0, [pc, #384]	; (80003a8 <main+0x1c4>)
 8000228:	f000 fe56 	bl	8000ed8 <HAL_GPIO_ReadPin>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d134      	bne.n	800029c <main+0xb8>
				while (HAL_GPIO_ReadPin(B_GPIO_Port, B_Pin) == GPIO_PIN_RESET) {};  // wait for the OUTB to go high
 8000232:	bf00      	nop
 8000234:	2104      	movs	r1, #4
 8000236:	485c      	ldr	r0, [pc, #368]	; (80003a8 <main+0x1c4>)
 8000238:	f000 fe4e 	bl	8000ed8 <HAL_GPIO_ReadPin>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d0f8      	beq.n	8000234 <main+0x50>

				if ((HAL_GetTick() - time1click) <= 50) { // Подбери необходимые значения!
 8000242:	f000 fbb7 	bl	80009b4 <HAL_GetTick>
 8000246:	4603      	mov	r3, r0
 8000248:	4a55      	ldr	r2, [pc, #340]	; (80003a0 <main+0x1bc>)
 800024a:	6812      	ldr	r2, [r2, #0]
 800024c:	1a9b      	subs	r3, r3, r2
 800024e:	2b32      	cmp	r3, #50	; 0x32
 8000250:	d809      	bhi.n	8000266 <main+0x82>
					counter = counter - 5;  // Подбери необходимые значения!
 8000252:	4b56      	ldr	r3, [pc, #344]	; (80003ac <main+0x1c8>)
 8000254:	f993 3000 	ldrsb.w	r3, [r3]
 8000258:	b2db      	uxtb	r3, r3
 800025a:	3b05      	subs	r3, #5
 800025c:	b2db      	uxtb	r3, r3
 800025e:	b25a      	sxtb	r2, r3
 8000260:	4b52      	ldr	r3, [pc, #328]	; (80003ac <main+0x1c8>)
 8000262:	701a      	strb	r2, [r3, #0]
 8000264:	e008      	b.n	8000278 <main+0x94>
				} else {
					counter--;
 8000266:	4b51      	ldr	r3, [pc, #324]	; (80003ac <main+0x1c8>)
 8000268:	f993 3000 	ldrsb.w	r3, [r3]
 800026c:	b2db      	uxtb	r3, r3
 800026e:	3b01      	subs	r3, #1
 8000270:	b2db      	uxtb	r3, r3
 8000272:	b25a      	sxtb	r2, r3
 8000274:	4b4d      	ldr	r3, [pc, #308]	; (80003ac <main+0x1c8>)
 8000276:	701a      	strb	r2, [r3, #0]
				}
				time1click = HAL_GetTick();
 8000278:	f000 fb9c 	bl	80009b4 <HAL_GetTick>
 800027c:	4603      	mov	r3, r0
 800027e:	461a      	mov	r2, r3
 8000280:	4b47      	ldr	r3, [pc, #284]	; (80003a0 <main+0x1bc>)
 8000282:	601a      	str	r2, [r3, #0]
				while (HAL_GPIO_ReadPin(A_GPIO_Port, A_Pin) == GPIO_PIN_RESET) {};  // wait for the OUTA to go high
 8000284:	bf00      	nop
 8000286:	2102      	movs	r1, #2
 8000288:	4847      	ldr	r0, [pc, #284]	; (80003a8 <main+0x1c4>)
 800028a:	f000 fe25 	bl	8000ed8 <HAL_GPIO_ReadPin>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d0f8      	beq.n	8000286 <main+0xa2>
				HAL_Delay(5);  // Защита от дребезга
 8000294:	2005      	movs	r0, #5
 8000296:	f000 fb97 	bl	80009c8 <HAL_Delay>
 800029a:	e042      	b.n	8000322 <main+0x13e>
			}

			else if (HAL_GPIO_ReadPin(B_GPIO_Port, B_Pin) == GPIO_PIN_SET) // If OUTB is also set
 800029c:	2104      	movs	r1, #4
 800029e:	4842      	ldr	r0, [pc, #264]	; (80003a8 <main+0x1c4>)
 80002a0:	f000 fe1a 	bl	8000ed8 <HAL_GPIO_ReadPin>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b01      	cmp	r3, #1
 80002a8:	d13b      	bne.n	8000322 <main+0x13e>
					{
				while (HAL_GPIO_ReadPin(B_GPIO_Port, B_Pin) == GPIO_PIN_SET) {};  // wait for the OUTB to go LOW.. CK
 80002aa:	bf00      	nop
 80002ac:	2104      	movs	r1, #4
 80002ae:	483e      	ldr	r0, [pc, #248]	; (80003a8 <main+0x1c4>)
 80002b0:	f000 fe12 	bl	8000ed8 <HAL_GPIO_ReadPin>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b01      	cmp	r3, #1
 80002b8:	d0f8      	beq.n	80002ac <main+0xc8>

				if ((HAL_GetTick() - time1click) <= 50) { // Подбери необходимые значения!
 80002ba:	f000 fb7b 	bl	80009b4 <HAL_GetTick>
 80002be:	4603      	mov	r3, r0
 80002c0:	4a37      	ldr	r2, [pc, #220]	; (80003a0 <main+0x1bc>)
 80002c2:	6812      	ldr	r2, [r2, #0]
 80002c4:	1a9b      	subs	r3, r3, r2
 80002c6:	2b32      	cmp	r3, #50	; 0x32
 80002c8:	d809      	bhi.n	80002de <main+0xfa>
					counter = counter + 5; // Подбери необходимые значения!
 80002ca:	4b38      	ldr	r3, [pc, #224]	; (80003ac <main+0x1c8>)
 80002cc:	f993 3000 	ldrsb.w	r3, [r3]
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	3305      	adds	r3, #5
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	b25a      	sxtb	r2, r3
 80002d8:	4b34      	ldr	r3, [pc, #208]	; (80003ac <main+0x1c8>)
 80002da:	701a      	strb	r2, [r3, #0]
 80002dc:	e008      	b.n	80002f0 <main+0x10c>
				} else {
					counter++;
 80002de:	4b33      	ldr	r3, [pc, #204]	; (80003ac <main+0x1c8>)
 80002e0:	f993 3000 	ldrsb.w	r3, [r3]
 80002e4:	b2db      	uxtb	r3, r3
 80002e6:	3301      	adds	r3, #1
 80002e8:	b2db      	uxtb	r3, r3
 80002ea:	b25a      	sxtb	r2, r3
 80002ec:	4b2f      	ldr	r3, [pc, #188]	; (80003ac <main+0x1c8>)
 80002ee:	701a      	strb	r2, [r3, #0]
				}
				time1click = HAL_GetTick();
 80002f0:	f000 fb60 	bl	80009b4 <HAL_GetTick>
 80002f4:	4603      	mov	r3, r0
 80002f6:	461a      	mov	r2, r3
 80002f8:	4b29      	ldr	r3, [pc, #164]	; (80003a0 <main+0x1bc>)
 80002fa:	601a      	str	r2, [r3, #0]

				while (HAL_GPIO_ReadPin(A_GPIO_Port, A_Pin) == GPIO_PIN_RESET) {};  // wait for the OUTA to go high
 80002fc:	bf00      	nop
 80002fe:	2102      	movs	r1, #2
 8000300:	4829      	ldr	r0, [pc, #164]	; (80003a8 <main+0x1c4>)
 8000302:	f000 fde9 	bl	8000ed8 <HAL_GPIO_ReadPin>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0f8      	beq.n	80002fe <main+0x11a>
				while (HAL_GPIO_ReadPin(B_GPIO_Port, B_Pin) == GPIO_PIN_RESET) {};  // wait for the OUTB to go high
 800030c:	bf00      	nop
 800030e:	2104      	movs	r1, #4
 8000310:	4825      	ldr	r0, [pc, #148]	; (80003a8 <main+0x1c4>)
 8000312:	f000 fde1 	bl	8000ed8 <HAL_GPIO_ReadPin>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d0f8      	beq.n	800030e <main+0x12a>
				HAL_Delay(5);  // Защита от дребезга
 800031c:	2005      	movs	r0, #5
 800031e:	f000 fb53 	bl	80009c8 <HAL_Delay>
			}

			if (counter < 0)
 8000322:	4b22      	ldr	r3, [pc, #136]	; (80003ac <main+0x1c8>)
 8000324:	f993 3000 	ldrsb.w	r3, [r3]
 8000328:	2b00      	cmp	r3, #0
 800032a:	da02      	bge.n	8000332 <main+0x14e>
				counter = 0;
 800032c:	4b1f      	ldr	r3, [pc, #124]	; (80003ac <main+0x1c8>)
 800032e:	2200      	movs	r2, #0
 8000330:	701a      	strb	r2, [r3, #0]
			if (counter > 100)
 8000332:	4b1e      	ldr	r3, [pc, #120]	; (80003ac <main+0x1c8>)
 8000334:	f993 3000 	ldrsb.w	r3, [r3]
 8000338:	2b64      	cmp	r3, #100	; 0x64
 800033a:	dd02      	ble.n	8000342 <main+0x15e>
				counter = 100;
 800033c:	4b1b      	ldr	r3, [pc, #108]	; (80003ac <main+0x1c8>)
 800033e:	2264      	movs	r2, #100	; 0x64
 8000340:	701a      	strb	r2, [r3, #0]
		}
		/******************************** BTN **************************************/
		btn_cur = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8000342:	2108      	movs	r1, #8
 8000344:	4818      	ldr	r0, [pc, #96]	; (80003a8 <main+0x1c4>)
 8000346:	f000 fdc7 	bl	8000ed8 <HAL_GPIO_ReadPin>
 800034a:	4603      	mov	r3, r0
 800034c:	b25a      	sxtb	r2, r3
 800034e:	4b18      	ldr	r3, [pc, #96]	; (80003b0 <main+0x1cc>)
 8000350:	701a      	strb	r2, [r3, #0]
		if ((btn_prev == 0) && (btn_cur != 0)) {  //т.е. кнопка нажата
 8000352:	4b18      	ldr	r3, [pc, #96]	; (80003b4 <main+0x1d0>)
 8000354:	f993 3000 	ldrsb.w	r3, [r3]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d118      	bne.n	800038e <main+0x1aa>
 800035c:	4b14      	ldr	r3, [pc, #80]	; (80003b0 <main+0x1cc>)
 800035e:	f993 3000 	ldrsb.w	r3, [r3]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d013      	beq.n	800038e <main+0x1aa>
			if (HAL_GetTick() - Tbtn >= 300) {
 8000366:	f000 fb25 	bl	80009b4 <HAL_GetTick>
 800036a:	4603      	mov	r3, r0
 800036c:	4a12      	ldr	r2, [pc, #72]	; (80003b8 <main+0x1d4>)
 800036e:	6812      	ldr	r2, [r2, #0]
 8000370:	1a9b      	subs	r3, r3, r2
 8000372:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000376:	d30a      	bcc.n	800038e <main+0x1aa>
				HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000378:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800037c:	480f      	ldr	r0, [pc, #60]	; (80003bc <main+0x1d8>)
 800037e:	f000 fdda 	bl	8000f36 <HAL_GPIO_TogglePin>
				Tbtn = HAL_GetTick();
 8000382:	f000 fb17 	bl	80009b4 <HAL_GetTick>
 8000386:	4603      	mov	r3, r0
 8000388:	461a      	mov	r2, r3
 800038a:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <main+0x1d4>)
 800038c:	601a      	str	r2, [r3, #0]
			}
		}
		btn_prev = btn_cur;
 800038e:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <main+0x1cc>)
 8000390:	f993 2000 	ldrsb.w	r2, [r3]
 8000394:	4b07      	ldr	r3, [pc, #28]	; (80003b4 <main+0x1d0>)
 8000396:	701a      	strb	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(A_GPIO_Port, A_Pin) == GPIO_PIN_RESET) { // If the OUTA is RESET
 8000398:	e73c      	b.n	8000214 <main+0x30>
 800039a:	bf00      	nop
 800039c:	2000008c 	.word	0x2000008c
 80003a0:	20000090 	.word	0x20000090
 80003a4:	08002a84 	.word	0x08002a84
 80003a8:	40010800 	.word	0x40010800
 80003ac:	20000094 	.word	0x20000094
 80003b0:	20000095 	.word	0x20000095
 80003b4:	20000096 	.word	0x20000096
 80003b8:	20000098 	.word	0x20000098
 80003bc:	40011000 	.word	0x40011000

080003c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b090      	sub	sp, #64	; 0x40
 80003c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c6:	f107 0318 	add.w	r3, r7, #24
 80003ca:	2228      	movs	r2, #40	; 0x28
 80003cc:	2100      	movs	r1, #0
 80003ce:	4618      	mov	r0, r3
 80003d0:	f001 fe4e 	bl	8002070 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
 80003da:	605a      	str	r2, [r3, #4]
 80003dc:	609a      	str	r2, [r3, #8]
 80003de:	60da      	str	r2, [r3, #12]
 80003e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003e2:	2301      	movs	r3, #1
 80003e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003ec:	2300      	movs	r3, #0
 80003ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003f0:	2301      	movs	r3, #1
 80003f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003f4:	2302      	movs	r3, #2
 80003f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003fe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000402:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000404:	f107 0318 	add.w	r3, r7, #24
 8000408:	4618      	mov	r0, r3
 800040a:	f000 fdad 	bl	8000f68 <HAL_RCC_OscConfig>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000414:	f000 f8c2 	bl	800059c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000418:	230f      	movs	r3, #15
 800041a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800041c:	2302      	movs	r3, #2
 800041e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000420:	2300      	movs	r3, #0
 8000422:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000424:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000428:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800042a:	2300      	movs	r3, #0
 800042c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	2102      	movs	r1, #2
 8000432:	4618      	mov	r0, r3
 8000434:	f001 f81a 	bl	800146c <HAL_RCC_ClockConfig>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800043e:	f000 f8ad 	bl	800059c <Error_Handler>
  }
}
 8000442:	bf00      	nop
 8000444:	3740      	adds	r7, #64	; 0x40
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
	...

0800044c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000450:	4b11      	ldr	r3, [pc, #68]	; (8000498 <MX_USART1_UART_Init+0x4c>)
 8000452:	4a12      	ldr	r2, [pc, #72]	; (800049c <MX_USART1_UART_Init+0x50>)
 8000454:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000456:	4b10      	ldr	r3, [pc, #64]	; (8000498 <MX_USART1_UART_Init+0x4c>)
 8000458:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800045c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800045e:	4b0e      	ldr	r3, [pc, #56]	; (8000498 <MX_USART1_UART_Init+0x4c>)
 8000460:	2200      	movs	r2, #0
 8000462:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000464:	4b0c      	ldr	r3, [pc, #48]	; (8000498 <MX_USART1_UART_Init+0x4c>)
 8000466:	2200      	movs	r2, #0
 8000468:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800046a:	4b0b      	ldr	r3, [pc, #44]	; (8000498 <MX_USART1_UART_Init+0x4c>)
 800046c:	2200      	movs	r2, #0
 800046e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000470:	4b09      	ldr	r3, [pc, #36]	; (8000498 <MX_USART1_UART_Init+0x4c>)
 8000472:	220c      	movs	r2, #12
 8000474:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000476:	4b08      	ldr	r3, [pc, #32]	; (8000498 <MX_USART1_UART_Init+0x4c>)
 8000478:	2200      	movs	r2, #0
 800047a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800047c:	4b06      	ldr	r3, [pc, #24]	; (8000498 <MX_USART1_UART_Init+0x4c>)
 800047e:	2200      	movs	r2, #0
 8000480:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000482:	4805      	ldr	r0, [pc, #20]	; (8000498 <MX_USART1_UART_Init+0x4c>)
 8000484:	f001 fbfa 	bl	8001c7c <HAL_UART_Init>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800048e:	f000 f885 	bl	800059c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	2000009c 	.word	0x2000009c
 800049c:	40013800 	.word	0x40013800

080004a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b088      	sub	sp, #32
 80004a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a6:	f107 0310 	add.w	r3, r7, #16
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	609a      	str	r2, [r3, #8]
 80004b2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004b4:	4b2d      	ldr	r3, [pc, #180]	; (800056c <MX_GPIO_Init+0xcc>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	4a2c      	ldr	r2, [pc, #176]	; (800056c <MX_GPIO_Init+0xcc>)
 80004ba:	f043 0310 	orr.w	r3, r3, #16
 80004be:	6193      	str	r3, [r2, #24]
 80004c0:	4b2a      	ldr	r3, [pc, #168]	; (800056c <MX_GPIO_Init+0xcc>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	f003 0310 	and.w	r3, r3, #16
 80004c8:	60fb      	str	r3, [r7, #12]
 80004ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004cc:	4b27      	ldr	r3, [pc, #156]	; (800056c <MX_GPIO_Init+0xcc>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	4a26      	ldr	r2, [pc, #152]	; (800056c <MX_GPIO_Init+0xcc>)
 80004d2:	f043 0320 	orr.w	r3, r3, #32
 80004d6:	6193      	str	r3, [r2, #24]
 80004d8:	4b24      	ldr	r3, [pc, #144]	; (800056c <MX_GPIO_Init+0xcc>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	f003 0320 	and.w	r3, r3, #32
 80004e0:	60bb      	str	r3, [r7, #8]
 80004e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e4:	4b21      	ldr	r3, [pc, #132]	; (800056c <MX_GPIO_Init+0xcc>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	4a20      	ldr	r2, [pc, #128]	; (800056c <MX_GPIO_Init+0xcc>)
 80004ea:	f043 0304 	orr.w	r3, r3, #4
 80004ee:	6193      	str	r3, [r2, #24]
 80004f0:	4b1e      	ldr	r3, [pc, #120]	; (800056c <MX_GPIO_Init+0xcc>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	f003 0304 	and.w	r3, r3, #4
 80004f8:	607b      	str	r3, [r7, #4]
 80004fa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004fc:	2200      	movs	r2, #0
 80004fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000502:	481b      	ldr	r0, [pc, #108]	; (8000570 <MX_GPIO_Init+0xd0>)
 8000504:	f000 fcff 	bl	8000f06 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_GPIO_Port, BTN_Pin, GPIO_PIN_RESET);
 8000508:	2200      	movs	r2, #0
 800050a:	2108      	movs	r1, #8
 800050c:	4819      	ldr	r0, [pc, #100]	; (8000574 <MX_GPIO_Init+0xd4>)
 800050e:	f000 fcfa 	bl	8000f06 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000512:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000516:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000518:	2301      	movs	r3, #1
 800051a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051c:	2300      	movs	r3, #0
 800051e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000520:	2302      	movs	r3, #2
 8000522:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000524:	f107 0310 	add.w	r3, r7, #16
 8000528:	4619      	mov	r1, r3
 800052a:	4811      	ldr	r0, [pc, #68]	; (8000570 <MX_GPIO_Init+0xd0>)
 800052c:	f000 fb50 	bl	8000bd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_Pin B_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin;
 8000530:	2306      	movs	r3, #6
 8000532:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000534:	2300      	movs	r3, #0
 8000536:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000538:	2300      	movs	r3, #0
 800053a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800053c:	f107 0310 	add.w	r3, r7, #16
 8000540:	4619      	mov	r1, r3
 8000542:	480c      	ldr	r0, [pc, #48]	; (8000574 <MX_GPIO_Init+0xd4>)
 8000544:	f000 fb44 	bl	8000bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000548:	2308      	movs	r3, #8
 800054a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054c:	2301      	movs	r3, #1
 800054e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000550:	2301      	movs	r3, #1
 8000552:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000554:	2302      	movs	r3, #2
 8000556:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000558:	f107 0310 	add.w	r3, r7, #16
 800055c:	4619      	mov	r1, r3
 800055e:	4805      	ldr	r0, [pc, #20]	; (8000574 <MX_GPIO_Init+0xd4>)
 8000560:	f000 fb36 	bl	8000bd0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000564:	bf00      	nop
 8000566:	3720      	adds	r7, #32
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40021000 	.word	0x40021000
 8000570:	40011000 	.word	0x40011000
 8000574:	40010800 	.word	0x40010800

08000578 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a04      	ldr	r2, [pc, #16]	; (8000598 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d101      	bne.n	800058e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800058a:	f000 fa01 	bl	8000990 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40000800 	.word	0x40000800

0800059c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a0:	b672      	cpsid	i
}
 80005a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a4:	e7fe      	b.n	80005a4 <Error_Handler+0x8>
	...

080005a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ae:	4b15      	ldr	r3, [pc, #84]	; (8000604 <HAL_MspInit+0x5c>)
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	4a14      	ldr	r2, [pc, #80]	; (8000604 <HAL_MspInit+0x5c>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	6193      	str	r3, [r2, #24]
 80005ba:	4b12      	ldr	r3, [pc, #72]	; (8000604 <HAL_MspInit+0x5c>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c6:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <HAL_MspInit+0x5c>)
 80005c8:	69db      	ldr	r3, [r3, #28]
 80005ca:	4a0e      	ldr	r2, [pc, #56]	; (8000604 <HAL_MspInit+0x5c>)
 80005cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d0:	61d3      	str	r3, [r2, #28]
 80005d2:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <HAL_MspInit+0x5c>)
 80005d4:	69db      	ldr	r3, [r3, #28]
 80005d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005de:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <HAL_MspInit+0x60>)
 80005e0:	685b      	ldr	r3, [r3, #4]
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	4a04      	ldr	r2, [pc, #16]	; (8000608 <HAL_MspInit+0x60>)
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr
 8000604:	40021000 	.word	0x40021000
 8000608:	40010000 	.word	0x40010000

0800060c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000614:	f107 0310 	add.w	r3, r7, #16
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a1c      	ldr	r2, [pc, #112]	; (8000698 <HAL_UART_MspInit+0x8c>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d131      	bne.n	8000690 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800062c:	4b1b      	ldr	r3, [pc, #108]	; (800069c <HAL_UART_MspInit+0x90>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	4a1a      	ldr	r2, [pc, #104]	; (800069c <HAL_UART_MspInit+0x90>)
 8000632:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000636:	6193      	str	r3, [r2, #24]
 8000638:	4b18      	ldr	r3, [pc, #96]	; (800069c <HAL_UART_MspInit+0x90>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000644:	4b15      	ldr	r3, [pc, #84]	; (800069c <HAL_UART_MspInit+0x90>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	4a14      	ldr	r2, [pc, #80]	; (800069c <HAL_UART_MspInit+0x90>)
 800064a:	f043 0304 	orr.w	r3, r3, #4
 800064e:	6193      	str	r3, [r2, #24]
 8000650:	4b12      	ldr	r3, [pc, #72]	; (800069c <HAL_UART_MspInit+0x90>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	f003 0304 	and.w	r3, r3, #4
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800065c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000660:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000662:	2302      	movs	r3, #2
 8000664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000666:	2303      	movs	r3, #3
 8000668:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066a:	f107 0310 	add.w	r3, r7, #16
 800066e:	4619      	mov	r1, r3
 8000670:	480b      	ldr	r0, [pc, #44]	; (80006a0 <HAL_UART_MspInit+0x94>)
 8000672:	f000 faad 	bl	8000bd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800067a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000684:	f107 0310 	add.w	r3, r7, #16
 8000688:	4619      	mov	r1, r3
 800068a:	4805      	ldr	r0, [pc, #20]	; (80006a0 <HAL_UART_MspInit+0x94>)
 800068c:	f000 faa0 	bl	8000bd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000690:	bf00      	nop
 8000692:	3720      	adds	r7, #32
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40013800 	.word	0x40013800
 800069c:	40021000 	.word	0x40021000
 80006a0:	40010800 	.word	0x40010800

080006a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08e      	sub	sp, #56	; 0x38
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80006ac:	2300      	movs	r3, #0
 80006ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80006b0:	2300      	movs	r3, #0
 80006b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80006b4:	2300      	movs	r3, #0
 80006b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80006ba:	4b34      	ldr	r3, [pc, #208]	; (800078c <HAL_InitTick+0xe8>)
 80006bc:	69db      	ldr	r3, [r3, #28]
 80006be:	4a33      	ldr	r2, [pc, #204]	; (800078c <HAL_InitTick+0xe8>)
 80006c0:	f043 0304 	orr.w	r3, r3, #4
 80006c4:	61d3      	str	r3, [r2, #28]
 80006c6:	4b31      	ldr	r3, [pc, #196]	; (800078c <HAL_InitTick+0xe8>)
 80006c8:	69db      	ldr	r3, [r3, #28]
 80006ca:	f003 0304 	and.w	r3, r3, #4
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006d2:	f107 0210 	add.w	r2, r7, #16
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	4611      	mov	r1, r2
 80006dc:	4618      	mov	r0, r3
 80006de:	f001 f835 	bl	800174c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80006e2:	6a3b      	ldr	r3, [r7, #32]
 80006e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80006e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d103      	bne.n	80006f4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80006ec:	f001 f806 	bl	80016fc <HAL_RCC_GetPCLK1Freq>
 80006f0:	6378      	str	r0, [r7, #52]	; 0x34
 80006f2:	e004      	b.n	80006fe <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80006f4:	f001 f802 	bl	80016fc <HAL_RCC_GetPCLK1Freq>
 80006f8:	4603      	mov	r3, r0
 80006fa:	005b      	lsls	r3, r3, #1
 80006fc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000700:	4a23      	ldr	r2, [pc, #140]	; (8000790 <HAL_InitTick+0xec>)
 8000702:	fba2 2303 	umull	r2, r3, r2, r3
 8000706:	0c9b      	lsrs	r3, r3, #18
 8000708:	3b01      	subs	r3, #1
 800070a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800070c:	4b21      	ldr	r3, [pc, #132]	; (8000794 <HAL_InitTick+0xf0>)
 800070e:	4a22      	ldr	r2, [pc, #136]	; (8000798 <HAL_InitTick+0xf4>)
 8000710:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000712:	4b20      	ldr	r3, [pc, #128]	; (8000794 <HAL_InitTick+0xf0>)
 8000714:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000718:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800071a:	4a1e      	ldr	r2, [pc, #120]	; (8000794 <HAL_InitTick+0xf0>)
 800071c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800071e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000720:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <HAL_InitTick+0xf0>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000726:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <HAL_InitTick+0xf0>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800072c:	4b19      	ldr	r3, [pc, #100]	; (8000794 <HAL_InitTick+0xf0>)
 800072e:	2200      	movs	r2, #0
 8000730:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000732:	4818      	ldr	r0, [pc, #96]	; (8000794 <HAL_InitTick+0xf0>)
 8000734:	f001 f858 	bl	80017e8 <HAL_TIM_Base_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800073e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000742:	2b00      	cmp	r3, #0
 8000744:	d11b      	bne.n	800077e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000746:	4813      	ldr	r0, [pc, #76]	; (8000794 <HAL_InitTick+0xf0>)
 8000748:	f001 f8a6 	bl	8001898 <HAL_TIM_Base_Start_IT>
 800074c:	4603      	mov	r3, r0
 800074e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000752:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000756:	2b00      	cmp	r3, #0
 8000758:	d111      	bne.n	800077e <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800075a:	201e      	movs	r0, #30
 800075c:	f000 fa29 	bl	8000bb2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2b0f      	cmp	r3, #15
 8000764:	d808      	bhi.n	8000778 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000766:	2200      	movs	r2, #0
 8000768:	6879      	ldr	r1, [r7, #4]
 800076a:	201e      	movs	r0, #30
 800076c:	f000 fa05 	bl	8000b7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000770:	4a0a      	ldr	r2, [pc, #40]	; (800079c <HAL_InitTick+0xf8>)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	6013      	str	r3, [r2, #0]
 8000776:	e002      	b.n	800077e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000778:	2301      	movs	r3, #1
 800077a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800077e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000782:	4618      	mov	r0, r3
 8000784:	3738      	adds	r7, #56	; 0x38
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40021000 	.word	0x40021000
 8000790:	431bde83 	.word	0x431bde83
 8000794:	200000e4 	.word	0x200000e4
 8000798:	40000800 	.word	0x40000800
 800079c:	20000004 	.word	0x20000004

080007a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <NMI_Handler+0x4>

080007a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007aa:	e7fe      	b.n	80007aa <HardFault_Handler+0x4>

080007ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <MemManage_Handler+0x4>

080007b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <BusFault_Handler+0x4>

080007b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <UsageFault_Handler+0x4>

080007be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr

080007ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr

080007d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	bc80      	pop	{r7}
 80007e0:	4770      	bx	lr

080007e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bc80      	pop	{r7}
 80007ec:	4770      	bx	lr
	...

080007f0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80007f4:	4802      	ldr	r0, [pc, #8]	; (8000800 <TIM4_IRQHandler+0x10>)
 80007f6:	f001 f8a1 	bl	800193c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	200000e4 	.word	0x200000e4

08000804 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	e00a      	b.n	800082c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000816:	f3af 8000 	nop.w
 800081a:	4601      	mov	r1, r0
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	1c5a      	adds	r2, r3, #1
 8000820:	60ba      	str	r2, [r7, #8]
 8000822:	b2ca      	uxtb	r2, r1
 8000824:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	3301      	adds	r3, #1
 800082a:	617b      	str	r3, [r7, #20]
 800082c:	697a      	ldr	r2, [r7, #20]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	429a      	cmp	r2, r3
 8000832:	dbf0      	blt.n	8000816 <_read+0x12>
  }

  return len;
 8000834:	687b      	ldr	r3, [r7, #4]
}
 8000836:	4618      	mov	r0, r3
 8000838:	3718      	adds	r7, #24
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <_close>:
  }
  return len;
}

int _close(int file)
{
 800083e:	b480      	push	{r7}
 8000840:	b083      	sub	sp, #12
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000846:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800084a:	4618      	mov	r0, r3
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr

08000854 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000864:	605a      	str	r2, [r3, #4]
  return 0;
 8000866:	2300      	movs	r3, #0
}
 8000868:	4618      	mov	r0, r3
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	bc80      	pop	{r7}
 8000870:	4770      	bx	lr

08000872 <_isatty>:

int _isatty(int file)
{
 8000872:	b480      	push	{r7}
 8000874:	b083      	sub	sp, #12
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800087a:	2301      	movs	r3, #1
}
 800087c:	4618      	mov	r0, r3
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr

08000886 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000886:	b480      	push	{r7}
 8000888:	b085      	sub	sp, #20
 800088a:	af00      	add	r7, sp, #0
 800088c:	60f8      	str	r0, [r7, #12]
 800088e:	60b9      	str	r1, [r7, #8]
 8000890:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000892:	2300      	movs	r3, #0
}
 8000894:	4618      	mov	r0, r3
 8000896:	3714      	adds	r7, #20
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr
	...

080008a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008a8:	4a14      	ldr	r2, [pc, #80]	; (80008fc <_sbrk+0x5c>)
 80008aa:	4b15      	ldr	r3, [pc, #84]	; (8000900 <_sbrk+0x60>)
 80008ac:	1ad3      	subs	r3, r2, r3
 80008ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008b4:	4b13      	ldr	r3, [pc, #76]	; (8000904 <_sbrk+0x64>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d102      	bne.n	80008c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008bc:	4b11      	ldr	r3, [pc, #68]	; (8000904 <_sbrk+0x64>)
 80008be:	4a12      	ldr	r2, [pc, #72]	; (8000908 <_sbrk+0x68>)
 80008c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <_sbrk+0x64>)
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4413      	add	r3, r2
 80008ca:	693a      	ldr	r2, [r7, #16]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d207      	bcs.n	80008e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008d0:	f001 fba4 	bl	800201c <__errno>
 80008d4:	4603      	mov	r3, r0
 80008d6:	220c      	movs	r2, #12
 80008d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008de:	e009      	b.n	80008f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <_sbrk+0x64>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008e6:	4b07      	ldr	r3, [pc, #28]	; (8000904 <_sbrk+0x64>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4413      	add	r3, r2
 80008ee:	4a05      	ldr	r2, [pc, #20]	; (8000904 <_sbrk+0x64>)
 80008f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008f2:	68fb      	ldr	r3, [r7, #12]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3718      	adds	r7, #24
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20005000 	.word	0x20005000
 8000900:	00000400 	.word	0x00000400
 8000904:	2000012c 	.word	0x2000012c
 8000908:	20000148 	.word	0x20000148

0800090c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr

08000918 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000918:	f7ff fff8 	bl	800090c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800091c:	480b      	ldr	r0, [pc, #44]	; (800094c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800091e:	490c      	ldr	r1, [pc, #48]	; (8000950 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000920:	4a0c      	ldr	r2, [pc, #48]	; (8000954 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000924:	e002      	b.n	800092c <LoopCopyDataInit>

08000926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092a:	3304      	adds	r3, #4

0800092c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800092c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800092e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000930:	d3f9      	bcc.n	8000926 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000932:	4a09      	ldr	r2, [pc, #36]	; (8000958 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000934:	4c09      	ldr	r4, [pc, #36]	; (800095c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000938:	e001      	b.n	800093e <LoopFillZerobss>

0800093a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800093c:	3204      	adds	r2, #4

0800093e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800093e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000940:	d3fb      	bcc.n	800093a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000942:	f001 fb71 	bl	8002028 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000946:	f7ff fc4d 	bl	80001e4 <main>
  bx lr
 800094a:	4770      	bx	lr
  ldr r0, =_sdata
 800094c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000950:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000954:	08002b2c 	.word	0x08002b2c
  ldr r2, =_sbss
 8000958:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800095c:	20000144 	.word	0x20000144

08000960 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000960:	e7fe      	b.n	8000960 <ADC1_2_IRQHandler>
	...

08000964 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <HAL_Init+0x28>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a07      	ldr	r2, [pc, #28]	; (800098c <HAL_Init+0x28>)
 800096e:	f043 0310 	orr.w	r3, r3, #16
 8000972:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000974:	2003      	movs	r0, #3
 8000976:	f000 f8f5 	bl	8000b64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800097a:	200f      	movs	r0, #15
 800097c:	f7ff fe92 	bl	80006a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000980:	f7ff fe12 	bl	80005a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000984:	2300      	movs	r3, #0
}
 8000986:	4618      	mov	r0, r3
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40022000 	.word	0x40022000

08000990 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000994:	4b05      	ldr	r3, [pc, #20]	; (80009ac <HAL_IncTick+0x1c>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	461a      	mov	r2, r3
 800099a:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <HAL_IncTick+0x20>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4413      	add	r3, r2
 80009a0:	4a03      	ldr	r2, [pc, #12]	; (80009b0 <HAL_IncTick+0x20>)
 80009a2:	6013      	str	r3, [r2, #0]
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr
 80009ac:	20000008 	.word	0x20000008
 80009b0:	20000130 	.word	0x20000130

080009b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  return uwTick;
 80009b8:	4b02      	ldr	r3, [pc, #8]	; (80009c4 <HAL_GetTick+0x10>)
 80009ba:	681b      	ldr	r3, [r3, #0]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr
 80009c4:	20000130 	.word	0x20000130

080009c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009d0:	f7ff fff0 	bl	80009b4 <HAL_GetTick>
 80009d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009e0:	d005      	beq.n	80009ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009e2:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <HAL_Delay+0x44>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	461a      	mov	r2, r3
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	4413      	add	r3, r2
 80009ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009ee:	bf00      	nop
 80009f0:	f7ff ffe0 	bl	80009b4 <HAL_GetTick>
 80009f4:	4602      	mov	r2, r0
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	68fa      	ldr	r2, [r7, #12]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d8f7      	bhi.n	80009f0 <HAL_Delay+0x28>
  {
  }
}
 8000a00:	bf00      	nop
 8000a02:	bf00      	nop
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000008 	.word	0x20000008

08000a10 <__NVIC_SetPriorityGrouping>:
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f003 0307 	and.w	r3, r3, #7
 8000a1e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <__NVIC_SetPriorityGrouping+0x44>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a26:	68ba      	ldr	r2, [r7, #8]
 8000a28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a42:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <__NVIC_SetPriorityGrouping+0x44>)
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	60d3      	str	r3, [r2, #12]
}
 8000a48:	bf00      	nop
 8000a4a:	3714      	adds	r7, #20
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <__NVIC_GetPriorityGrouping>:
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a5c:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <__NVIC_GetPriorityGrouping+0x18>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	0a1b      	lsrs	r3, r3, #8
 8000a62:	f003 0307 	and.w	r3, r3, #7
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <__NVIC_EnableIRQ>:
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	db0b      	blt.n	8000a9e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	f003 021f 	and.w	r2, r3, #31
 8000a8c:	4906      	ldr	r1, [pc, #24]	; (8000aa8 <__NVIC_EnableIRQ+0x34>)
 8000a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a92:	095b      	lsrs	r3, r3, #5
 8000a94:	2001      	movs	r0, #1
 8000a96:	fa00 f202 	lsl.w	r2, r0, r2
 8000a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr
 8000aa8:	e000e100 	.word	0xe000e100

08000aac <__NVIC_SetPriority>:
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	6039      	str	r1, [r7, #0]
 8000ab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	db0a      	blt.n	8000ad6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	490c      	ldr	r1, [pc, #48]	; (8000af8 <__NVIC_SetPriority+0x4c>)
 8000ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aca:	0112      	lsls	r2, r2, #4
 8000acc:	b2d2      	uxtb	r2, r2
 8000ace:	440b      	add	r3, r1
 8000ad0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ad4:	e00a      	b.n	8000aec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	4908      	ldr	r1, [pc, #32]	; (8000afc <__NVIC_SetPriority+0x50>)
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	f003 030f 	and.w	r3, r3, #15
 8000ae2:	3b04      	subs	r3, #4
 8000ae4:	0112      	lsls	r2, r2, #4
 8000ae6:	b2d2      	uxtb	r2, r2
 8000ae8:	440b      	add	r3, r1
 8000aea:	761a      	strb	r2, [r3, #24]
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000e100 	.word	0xe000e100
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <NVIC_EncodePriority>:
{
 8000b00:	b480      	push	{r7}
 8000b02:	b089      	sub	sp, #36	; 0x24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	f1c3 0307 	rsb	r3, r3, #7
 8000b1a:	2b04      	cmp	r3, #4
 8000b1c:	bf28      	it	cs
 8000b1e:	2304      	movcs	r3, #4
 8000b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	3304      	adds	r3, #4
 8000b26:	2b06      	cmp	r3, #6
 8000b28:	d902      	bls.n	8000b30 <NVIC_EncodePriority+0x30>
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	3b03      	subs	r3, #3
 8000b2e:	e000      	b.n	8000b32 <NVIC_EncodePriority+0x32>
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	43da      	mvns	r2, r3
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	401a      	ands	r2, r3
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b52:	43d9      	mvns	r1, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b58:	4313      	orrs	r3, r2
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3724      	adds	r7, #36	; 0x24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr

08000b64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff ff4f 	bl	8000a10 <__NVIC_SetPriorityGrouping>
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b086      	sub	sp, #24
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	4603      	mov	r3, r0
 8000b82:	60b9      	str	r1, [r7, #8]
 8000b84:	607a      	str	r2, [r7, #4]
 8000b86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b8c:	f7ff ff64 	bl	8000a58 <__NVIC_GetPriorityGrouping>
 8000b90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	68b9      	ldr	r1, [r7, #8]
 8000b96:	6978      	ldr	r0, [r7, #20]
 8000b98:	f7ff ffb2 	bl	8000b00 <NVIC_EncodePriority>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ba2:	4611      	mov	r1, r2
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ff81 	bl	8000aac <__NVIC_SetPriority>
}
 8000baa:	bf00      	nop
 8000bac:	3718      	adds	r7, #24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b082      	sub	sp, #8
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	4603      	mov	r3, r0
 8000bba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff ff57 	bl	8000a74 <__NVIC_EnableIRQ>
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b08b      	sub	sp, #44	; 0x2c
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bde:	2300      	movs	r3, #0
 8000be0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000be2:	e169      	b.n	8000eb8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000be4:	2201      	movs	r2, #1
 8000be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	69fa      	ldr	r2, [r7, #28]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bf8:	69ba      	ldr	r2, [r7, #24]
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	f040 8158 	bne.w	8000eb2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	4a9a      	ldr	r2, [pc, #616]	; (8000e70 <HAL_GPIO_Init+0x2a0>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d05e      	beq.n	8000cca <HAL_GPIO_Init+0xfa>
 8000c0c:	4a98      	ldr	r2, [pc, #608]	; (8000e70 <HAL_GPIO_Init+0x2a0>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d875      	bhi.n	8000cfe <HAL_GPIO_Init+0x12e>
 8000c12:	4a98      	ldr	r2, [pc, #608]	; (8000e74 <HAL_GPIO_Init+0x2a4>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d058      	beq.n	8000cca <HAL_GPIO_Init+0xfa>
 8000c18:	4a96      	ldr	r2, [pc, #600]	; (8000e74 <HAL_GPIO_Init+0x2a4>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d86f      	bhi.n	8000cfe <HAL_GPIO_Init+0x12e>
 8000c1e:	4a96      	ldr	r2, [pc, #600]	; (8000e78 <HAL_GPIO_Init+0x2a8>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d052      	beq.n	8000cca <HAL_GPIO_Init+0xfa>
 8000c24:	4a94      	ldr	r2, [pc, #592]	; (8000e78 <HAL_GPIO_Init+0x2a8>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d869      	bhi.n	8000cfe <HAL_GPIO_Init+0x12e>
 8000c2a:	4a94      	ldr	r2, [pc, #592]	; (8000e7c <HAL_GPIO_Init+0x2ac>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d04c      	beq.n	8000cca <HAL_GPIO_Init+0xfa>
 8000c30:	4a92      	ldr	r2, [pc, #584]	; (8000e7c <HAL_GPIO_Init+0x2ac>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d863      	bhi.n	8000cfe <HAL_GPIO_Init+0x12e>
 8000c36:	4a92      	ldr	r2, [pc, #584]	; (8000e80 <HAL_GPIO_Init+0x2b0>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d046      	beq.n	8000cca <HAL_GPIO_Init+0xfa>
 8000c3c:	4a90      	ldr	r2, [pc, #576]	; (8000e80 <HAL_GPIO_Init+0x2b0>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d85d      	bhi.n	8000cfe <HAL_GPIO_Init+0x12e>
 8000c42:	2b12      	cmp	r3, #18
 8000c44:	d82a      	bhi.n	8000c9c <HAL_GPIO_Init+0xcc>
 8000c46:	2b12      	cmp	r3, #18
 8000c48:	d859      	bhi.n	8000cfe <HAL_GPIO_Init+0x12e>
 8000c4a:	a201      	add	r2, pc, #4	; (adr r2, 8000c50 <HAL_GPIO_Init+0x80>)
 8000c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c50:	08000ccb 	.word	0x08000ccb
 8000c54:	08000ca5 	.word	0x08000ca5
 8000c58:	08000cb7 	.word	0x08000cb7
 8000c5c:	08000cf9 	.word	0x08000cf9
 8000c60:	08000cff 	.word	0x08000cff
 8000c64:	08000cff 	.word	0x08000cff
 8000c68:	08000cff 	.word	0x08000cff
 8000c6c:	08000cff 	.word	0x08000cff
 8000c70:	08000cff 	.word	0x08000cff
 8000c74:	08000cff 	.word	0x08000cff
 8000c78:	08000cff 	.word	0x08000cff
 8000c7c:	08000cff 	.word	0x08000cff
 8000c80:	08000cff 	.word	0x08000cff
 8000c84:	08000cff 	.word	0x08000cff
 8000c88:	08000cff 	.word	0x08000cff
 8000c8c:	08000cff 	.word	0x08000cff
 8000c90:	08000cff 	.word	0x08000cff
 8000c94:	08000cad 	.word	0x08000cad
 8000c98:	08000cc1 	.word	0x08000cc1
 8000c9c:	4a79      	ldr	r2, [pc, #484]	; (8000e84 <HAL_GPIO_Init+0x2b4>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d013      	beq.n	8000cca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ca2:	e02c      	b.n	8000cfe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	623b      	str	r3, [r7, #32]
          break;
 8000caa:	e029      	b.n	8000d00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	3304      	adds	r3, #4
 8000cb2:	623b      	str	r3, [r7, #32]
          break;
 8000cb4:	e024      	b.n	8000d00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	68db      	ldr	r3, [r3, #12]
 8000cba:	3308      	adds	r3, #8
 8000cbc:	623b      	str	r3, [r7, #32]
          break;
 8000cbe:	e01f      	b.n	8000d00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	330c      	adds	r3, #12
 8000cc6:	623b      	str	r3, [r7, #32]
          break;
 8000cc8:	e01a      	b.n	8000d00 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d102      	bne.n	8000cd8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cd2:	2304      	movs	r3, #4
 8000cd4:	623b      	str	r3, [r7, #32]
          break;
 8000cd6:	e013      	b.n	8000d00 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d105      	bne.n	8000cec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ce0:	2308      	movs	r3, #8
 8000ce2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	69fa      	ldr	r2, [r7, #28]
 8000ce8:	611a      	str	r2, [r3, #16]
          break;
 8000cea:	e009      	b.n	8000d00 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cec:	2308      	movs	r3, #8
 8000cee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	69fa      	ldr	r2, [r7, #28]
 8000cf4:	615a      	str	r2, [r3, #20]
          break;
 8000cf6:	e003      	b.n	8000d00 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	623b      	str	r3, [r7, #32]
          break;
 8000cfc:	e000      	b.n	8000d00 <HAL_GPIO_Init+0x130>
          break;
 8000cfe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	2bff      	cmp	r3, #255	; 0xff
 8000d04:	d801      	bhi.n	8000d0a <HAL_GPIO_Init+0x13a>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	e001      	b.n	8000d0e <HAL_GPIO_Init+0x13e>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	2bff      	cmp	r3, #255	; 0xff
 8000d14:	d802      	bhi.n	8000d1c <HAL_GPIO_Init+0x14c>
 8000d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	e002      	b.n	8000d22 <HAL_GPIO_Init+0x152>
 8000d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1e:	3b08      	subs	r3, #8
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	210f      	movs	r1, #15
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	401a      	ands	r2, r3
 8000d34:	6a39      	ldr	r1, [r7, #32]
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3c:	431a      	orrs	r2, r3
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	f000 80b1 	beq.w	8000eb2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d50:	4b4d      	ldr	r3, [pc, #308]	; (8000e88 <HAL_GPIO_Init+0x2b8>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	4a4c      	ldr	r2, [pc, #304]	; (8000e88 <HAL_GPIO_Init+0x2b8>)
 8000d56:	f043 0301 	orr.w	r3, r3, #1
 8000d5a:	6193      	str	r3, [r2, #24]
 8000d5c:	4b4a      	ldr	r3, [pc, #296]	; (8000e88 <HAL_GPIO_Init+0x2b8>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	60bb      	str	r3, [r7, #8]
 8000d66:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d68:	4a48      	ldr	r2, [pc, #288]	; (8000e8c <HAL_GPIO_Init+0x2bc>)
 8000d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6c:	089b      	lsrs	r3, r3, #2
 8000d6e:	3302      	adds	r3, #2
 8000d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d74:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d78:	f003 0303 	and.w	r3, r3, #3
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	220f      	movs	r2, #15
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	68fa      	ldr	r2, [r7, #12]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a40      	ldr	r2, [pc, #256]	; (8000e90 <HAL_GPIO_Init+0x2c0>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d013      	beq.n	8000dbc <HAL_GPIO_Init+0x1ec>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4a3f      	ldr	r2, [pc, #252]	; (8000e94 <HAL_GPIO_Init+0x2c4>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d00d      	beq.n	8000db8 <HAL_GPIO_Init+0x1e8>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4a3e      	ldr	r2, [pc, #248]	; (8000e98 <HAL_GPIO_Init+0x2c8>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d007      	beq.n	8000db4 <HAL_GPIO_Init+0x1e4>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4a3d      	ldr	r2, [pc, #244]	; (8000e9c <HAL_GPIO_Init+0x2cc>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d101      	bne.n	8000db0 <HAL_GPIO_Init+0x1e0>
 8000dac:	2303      	movs	r3, #3
 8000dae:	e006      	b.n	8000dbe <HAL_GPIO_Init+0x1ee>
 8000db0:	2304      	movs	r3, #4
 8000db2:	e004      	b.n	8000dbe <HAL_GPIO_Init+0x1ee>
 8000db4:	2302      	movs	r3, #2
 8000db6:	e002      	b.n	8000dbe <HAL_GPIO_Init+0x1ee>
 8000db8:	2301      	movs	r3, #1
 8000dba:	e000      	b.n	8000dbe <HAL_GPIO_Init+0x1ee>
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dc0:	f002 0203 	and.w	r2, r2, #3
 8000dc4:	0092      	lsls	r2, r2, #2
 8000dc6:	4093      	lsls	r3, r2
 8000dc8:	68fa      	ldr	r2, [r7, #12]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dce:	492f      	ldr	r1, [pc, #188]	; (8000e8c <HAL_GPIO_Init+0x2bc>)
 8000dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd2:	089b      	lsrs	r3, r3, #2
 8000dd4:	3302      	adds	r3, #2
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d006      	beq.n	8000df6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000de8:	4b2d      	ldr	r3, [pc, #180]	; (8000ea0 <HAL_GPIO_Init+0x2d0>)
 8000dea:	689a      	ldr	r2, [r3, #8]
 8000dec:	492c      	ldr	r1, [pc, #176]	; (8000ea0 <HAL_GPIO_Init+0x2d0>)
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	608b      	str	r3, [r1, #8]
 8000df4:	e006      	b.n	8000e04 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000df6:	4b2a      	ldr	r3, [pc, #168]	; (8000ea0 <HAL_GPIO_Init+0x2d0>)
 8000df8:	689a      	ldr	r2, [r3, #8]
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	4928      	ldr	r1, [pc, #160]	; (8000ea0 <HAL_GPIO_Init+0x2d0>)
 8000e00:	4013      	ands	r3, r2
 8000e02:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d006      	beq.n	8000e1e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e10:	4b23      	ldr	r3, [pc, #140]	; (8000ea0 <HAL_GPIO_Init+0x2d0>)
 8000e12:	68da      	ldr	r2, [r3, #12]
 8000e14:	4922      	ldr	r1, [pc, #136]	; (8000ea0 <HAL_GPIO_Init+0x2d0>)
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	60cb      	str	r3, [r1, #12]
 8000e1c:	e006      	b.n	8000e2c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e1e:	4b20      	ldr	r3, [pc, #128]	; (8000ea0 <HAL_GPIO_Init+0x2d0>)
 8000e20:	68da      	ldr	r2, [r3, #12]
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	43db      	mvns	r3, r3
 8000e26:	491e      	ldr	r1, [pc, #120]	; (8000ea0 <HAL_GPIO_Init+0x2d0>)
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d006      	beq.n	8000e46 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e38:	4b19      	ldr	r3, [pc, #100]	; (8000ea0 <HAL_GPIO_Init+0x2d0>)
 8000e3a:	685a      	ldr	r2, [r3, #4]
 8000e3c:	4918      	ldr	r1, [pc, #96]	; (8000ea0 <HAL_GPIO_Init+0x2d0>)
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	604b      	str	r3, [r1, #4]
 8000e44:	e006      	b.n	8000e54 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e46:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <HAL_GPIO_Init+0x2d0>)
 8000e48:	685a      	ldr	r2, [r3, #4]
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	4914      	ldr	r1, [pc, #80]	; (8000ea0 <HAL_GPIO_Init+0x2d0>)
 8000e50:	4013      	ands	r3, r2
 8000e52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d021      	beq.n	8000ea4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e60:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <HAL_GPIO_Init+0x2d0>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	490e      	ldr	r1, [pc, #56]	; (8000ea0 <HAL_GPIO_Init+0x2d0>)
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	600b      	str	r3, [r1, #0]
 8000e6c:	e021      	b.n	8000eb2 <HAL_GPIO_Init+0x2e2>
 8000e6e:	bf00      	nop
 8000e70:	10320000 	.word	0x10320000
 8000e74:	10310000 	.word	0x10310000
 8000e78:	10220000 	.word	0x10220000
 8000e7c:	10210000 	.word	0x10210000
 8000e80:	10120000 	.word	0x10120000
 8000e84:	10110000 	.word	0x10110000
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	40010000 	.word	0x40010000
 8000e90:	40010800 	.word	0x40010800
 8000e94:	40010c00 	.word	0x40010c00
 8000e98:	40011000 	.word	0x40011000
 8000e9c:	40011400 	.word	0x40011400
 8000ea0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <HAL_GPIO_Init+0x304>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	4909      	ldr	r1, [pc, #36]	; (8000ed4 <HAL_GPIO_Init+0x304>)
 8000eae:	4013      	ands	r3, r2
 8000eb0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	f47f ae8e 	bne.w	8000be4 <HAL_GPIO_Init+0x14>
  }
}
 8000ec8:	bf00      	nop
 8000eca:	bf00      	nop
 8000ecc:	372c      	adds	r7, #44	; 0x2c
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr
 8000ed4:	40010400 	.word	0x40010400

08000ed8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	689a      	ldr	r2, [r3, #8]
 8000ee8:	887b      	ldrh	r3, [r7, #2]
 8000eea:	4013      	ands	r3, r2
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d002      	beq.n	8000ef6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	73fb      	strb	r3, [r7, #15]
 8000ef4:	e001      	b.n	8000efa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr

08000f06 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b083      	sub	sp, #12
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
 8000f0e:	460b      	mov	r3, r1
 8000f10:	807b      	strh	r3, [r7, #2]
 8000f12:	4613      	mov	r3, r2
 8000f14:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f16:	787b      	ldrb	r3, [r7, #1]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d003      	beq.n	8000f24 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f1c:	887a      	ldrh	r2, [r7, #2]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f22:	e003      	b.n	8000f2c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f24:	887b      	ldrh	r3, [r7, #2]
 8000f26:	041a      	lsls	r2, r3, #16
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	611a      	str	r2, [r3, #16]
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr

08000f36 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b085      	sub	sp, #20
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
 8000f3e:	460b      	mov	r3, r1
 8000f40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f48:	887a      	ldrh	r2, [r7, #2]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	041a      	lsls	r2, r3, #16
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	43d9      	mvns	r1, r3
 8000f54:	887b      	ldrh	r3, [r7, #2]
 8000f56:	400b      	ands	r3, r1
 8000f58:	431a      	orrs	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	611a      	str	r2, [r3, #16]
}
 8000f5e:	bf00      	nop
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr

08000f68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d101      	bne.n	8000f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e272      	b.n	8001460 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f000 8087 	beq.w	8001096 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f88:	4b92      	ldr	r3, [pc, #584]	; (80011d4 <HAL_RCC_OscConfig+0x26c>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 030c 	and.w	r3, r3, #12
 8000f90:	2b04      	cmp	r3, #4
 8000f92:	d00c      	beq.n	8000fae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f94:	4b8f      	ldr	r3, [pc, #572]	; (80011d4 <HAL_RCC_OscConfig+0x26c>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 030c 	and.w	r3, r3, #12
 8000f9c:	2b08      	cmp	r3, #8
 8000f9e:	d112      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x5e>
 8000fa0:	4b8c      	ldr	r3, [pc, #560]	; (80011d4 <HAL_RCC_OscConfig+0x26c>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fac:	d10b      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fae:	4b89      	ldr	r3, [pc, #548]	; (80011d4 <HAL_RCC_OscConfig+0x26c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d06c      	beq.n	8001094 <HAL_RCC_OscConfig+0x12c>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d168      	bne.n	8001094 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e24c      	b.n	8001460 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fce:	d106      	bne.n	8000fde <HAL_RCC_OscConfig+0x76>
 8000fd0:	4b80      	ldr	r3, [pc, #512]	; (80011d4 <HAL_RCC_OscConfig+0x26c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a7f      	ldr	r2, [pc, #508]	; (80011d4 <HAL_RCC_OscConfig+0x26c>)
 8000fd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fda:	6013      	str	r3, [r2, #0]
 8000fdc:	e02e      	b.n	800103c <HAL_RCC_OscConfig+0xd4>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d10c      	bne.n	8001000 <HAL_RCC_OscConfig+0x98>
 8000fe6:	4b7b      	ldr	r3, [pc, #492]	; (80011d4 <HAL_RCC_OscConfig+0x26c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a7a      	ldr	r2, [pc, #488]	; (80011d4 <HAL_RCC_OscConfig+0x26c>)
 8000fec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ff0:	6013      	str	r3, [r2, #0]
 8000ff2:	4b78      	ldr	r3, [pc, #480]	; (80011d4 <HAL_RCC_OscConfig+0x26c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a77      	ldr	r2, [pc, #476]	; (80011d4 <HAL_RCC_OscConfig+0x26c>)
 8000ff8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ffc:	6013      	str	r3, [r2, #0]
 8000ffe:	e01d      	b.n	800103c <HAL_RCC_OscConfig+0xd4>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001008:	d10c      	bne.n	8001024 <HAL_RCC_OscConfig+0xbc>
 800100a:	4b72      	ldr	r3, [pc, #456]	; (80011d4 <HAL_RCC_OscConfig+0x26c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a71      	ldr	r2, [pc, #452]	; (80011d4 <HAL_RCC_OscConfig+0x26c>)
 8001010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001014:	6013      	str	r3, [r2, #0]
 8001016:	4b6f      	ldr	r3, [pc, #444]	; (80011d4 <HAL_RCC_OscConfig+0x26c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a6e      	ldr	r2, [pc, #440]	; (80011d4 <HAL_RCC_OscConfig+0x26c>)
 800101c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001020:	6013      	str	r3, [r2, #0]
 8001022:	e00b      	b.n	800103c <HAL_RCC_OscConfig+0xd4>
 8001024:	4b6b      	ldr	r3, [pc, #428]	; (80011d4 <HAL_RCC_OscConfig+0x26c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a6a      	ldr	r2, [pc, #424]	; (80011d4 <HAL_RCC_OscConfig+0x26c>)
 800102a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800102e:	6013      	str	r3, [r2, #0]
 8001030:	4b68      	ldr	r3, [pc, #416]	; (80011d4 <HAL_RCC_OscConfig+0x26c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a67      	ldr	r2, [pc, #412]	; (80011d4 <HAL_RCC_OscConfig+0x26c>)
 8001036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800103a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d013      	beq.n	800106c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001044:	f7ff fcb6 	bl	80009b4 <HAL_GetTick>
 8001048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800104a:	e008      	b.n	800105e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800104c:	f7ff fcb2 	bl	80009b4 <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	2b64      	cmp	r3, #100	; 0x64
 8001058:	d901      	bls.n	800105e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800105a:	2303      	movs	r3, #3
 800105c:	e200      	b.n	8001460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800105e:	4b5d      	ldr	r3, [pc, #372]	; (80011d4 <HAL_RCC_OscConfig+0x26c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d0f0      	beq.n	800104c <HAL_RCC_OscConfig+0xe4>
 800106a:	e014      	b.n	8001096 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800106c:	f7ff fca2 	bl	80009b4 <HAL_GetTick>
 8001070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001072:	e008      	b.n	8001086 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001074:	f7ff fc9e 	bl	80009b4 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b64      	cmp	r3, #100	; 0x64
 8001080:	d901      	bls.n	8001086 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e1ec      	b.n	8001460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001086:	4b53      	ldr	r3, [pc, #332]	; (80011d4 <HAL_RCC_OscConfig+0x26c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1f0      	bne.n	8001074 <HAL_RCC_OscConfig+0x10c>
 8001092:	e000      	b.n	8001096 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d063      	beq.n	800116a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010a2:	4b4c      	ldr	r3, [pc, #304]	; (80011d4 <HAL_RCC_OscConfig+0x26c>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f003 030c 	and.w	r3, r3, #12
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d00b      	beq.n	80010c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010ae:	4b49      	ldr	r3, [pc, #292]	; (80011d4 <HAL_RCC_OscConfig+0x26c>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 030c 	and.w	r3, r3, #12
 80010b6:	2b08      	cmp	r3, #8
 80010b8:	d11c      	bne.n	80010f4 <HAL_RCC_OscConfig+0x18c>
 80010ba:	4b46      	ldr	r3, [pc, #280]	; (80011d4 <HAL_RCC_OscConfig+0x26c>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d116      	bne.n	80010f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010c6:	4b43      	ldr	r3, [pc, #268]	; (80011d4 <HAL_RCC_OscConfig+0x26c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d005      	beq.n	80010de <HAL_RCC_OscConfig+0x176>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	691b      	ldr	r3, [r3, #16]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d001      	beq.n	80010de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e1c0      	b.n	8001460 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010de:	4b3d      	ldr	r3, [pc, #244]	; (80011d4 <HAL_RCC_OscConfig+0x26c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	4939      	ldr	r1, [pc, #228]	; (80011d4 <HAL_RCC_OscConfig+0x26c>)
 80010ee:	4313      	orrs	r3, r2
 80010f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010f2:	e03a      	b.n	800116a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	691b      	ldr	r3, [r3, #16]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d020      	beq.n	800113e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010fc:	4b36      	ldr	r3, [pc, #216]	; (80011d8 <HAL_RCC_OscConfig+0x270>)
 80010fe:	2201      	movs	r2, #1
 8001100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001102:	f7ff fc57 	bl	80009b4 <HAL_GetTick>
 8001106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001108:	e008      	b.n	800111c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800110a:	f7ff fc53 	bl	80009b4 <HAL_GetTick>
 800110e:	4602      	mov	r2, r0
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	2b02      	cmp	r3, #2
 8001116:	d901      	bls.n	800111c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001118:	2303      	movs	r3, #3
 800111a:	e1a1      	b.n	8001460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800111c:	4b2d      	ldr	r3, [pc, #180]	; (80011d4 <HAL_RCC_OscConfig+0x26c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0302 	and.w	r3, r3, #2
 8001124:	2b00      	cmp	r3, #0
 8001126:	d0f0      	beq.n	800110a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001128:	4b2a      	ldr	r3, [pc, #168]	; (80011d4 <HAL_RCC_OscConfig+0x26c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	695b      	ldr	r3, [r3, #20]
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	4927      	ldr	r1, [pc, #156]	; (80011d4 <HAL_RCC_OscConfig+0x26c>)
 8001138:	4313      	orrs	r3, r2
 800113a:	600b      	str	r3, [r1, #0]
 800113c:	e015      	b.n	800116a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800113e:	4b26      	ldr	r3, [pc, #152]	; (80011d8 <HAL_RCC_OscConfig+0x270>)
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001144:	f7ff fc36 	bl	80009b4 <HAL_GetTick>
 8001148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800114a:	e008      	b.n	800115e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800114c:	f7ff fc32 	bl	80009b4 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b02      	cmp	r3, #2
 8001158:	d901      	bls.n	800115e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e180      	b.n	8001460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800115e:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <HAL_RCC_OscConfig+0x26c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d1f0      	bne.n	800114c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0308 	and.w	r3, r3, #8
 8001172:	2b00      	cmp	r3, #0
 8001174:	d03a      	beq.n	80011ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d019      	beq.n	80011b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800117e:	4b17      	ldr	r3, [pc, #92]	; (80011dc <HAL_RCC_OscConfig+0x274>)
 8001180:	2201      	movs	r2, #1
 8001182:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001184:	f7ff fc16 	bl	80009b4 <HAL_GetTick>
 8001188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800118a:	e008      	b.n	800119e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800118c:	f7ff fc12 	bl	80009b4 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b02      	cmp	r3, #2
 8001198:	d901      	bls.n	800119e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e160      	b.n	8001460 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800119e:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <HAL_RCC_OscConfig+0x26c>)
 80011a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d0f0      	beq.n	800118c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011aa:	2001      	movs	r0, #1
 80011ac:	f000 fafe 	bl	80017ac <RCC_Delay>
 80011b0:	e01c      	b.n	80011ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011b2:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <HAL_RCC_OscConfig+0x274>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011b8:	f7ff fbfc 	bl	80009b4 <HAL_GetTick>
 80011bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011be:	e00f      	b.n	80011e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011c0:	f7ff fbf8 	bl	80009b4 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d908      	bls.n	80011e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e146      	b.n	8001460 <HAL_RCC_OscConfig+0x4f8>
 80011d2:	bf00      	nop
 80011d4:	40021000 	.word	0x40021000
 80011d8:	42420000 	.word	0x42420000
 80011dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011e0:	4b92      	ldr	r3, [pc, #584]	; (800142c <HAL_RCC_OscConfig+0x4c4>)
 80011e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e4:	f003 0302 	and.w	r3, r3, #2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1e9      	bne.n	80011c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0304 	and.w	r3, r3, #4
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	f000 80a6 	beq.w	8001346 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011fa:	2300      	movs	r3, #0
 80011fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011fe:	4b8b      	ldr	r3, [pc, #556]	; (800142c <HAL_RCC_OscConfig+0x4c4>)
 8001200:	69db      	ldr	r3, [r3, #28]
 8001202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d10d      	bne.n	8001226 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800120a:	4b88      	ldr	r3, [pc, #544]	; (800142c <HAL_RCC_OscConfig+0x4c4>)
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	4a87      	ldr	r2, [pc, #540]	; (800142c <HAL_RCC_OscConfig+0x4c4>)
 8001210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001214:	61d3      	str	r3, [r2, #28]
 8001216:	4b85      	ldr	r3, [pc, #532]	; (800142c <HAL_RCC_OscConfig+0x4c4>)
 8001218:	69db      	ldr	r3, [r3, #28]
 800121a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001222:	2301      	movs	r3, #1
 8001224:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001226:	4b82      	ldr	r3, [pc, #520]	; (8001430 <HAL_RCC_OscConfig+0x4c8>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800122e:	2b00      	cmp	r3, #0
 8001230:	d118      	bne.n	8001264 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001232:	4b7f      	ldr	r3, [pc, #508]	; (8001430 <HAL_RCC_OscConfig+0x4c8>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a7e      	ldr	r2, [pc, #504]	; (8001430 <HAL_RCC_OscConfig+0x4c8>)
 8001238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800123c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800123e:	f7ff fbb9 	bl	80009b4 <HAL_GetTick>
 8001242:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001244:	e008      	b.n	8001258 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001246:	f7ff fbb5 	bl	80009b4 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b64      	cmp	r3, #100	; 0x64
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e103      	b.n	8001460 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001258:	4b75      	ldr	r3, [pc, #468]	; (8001430 <HAL_RCC_OscConfig+0x4c8>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001260:	2b00      	cmp	r3, #0
 8001262:	d0f0      	beq.n	8001246 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d106      	bne.n	800127a <HAL_RCC_OscConfig+0x312>
 800126c:	4b6f      	ldr	r3, [pc, #444]	; (800142c <HAL_RCC_OscConfig+0x4c4>)
 800126e:	6a1b      	ldr	r3, [r3, #32]
 8001270:	4a6e      	ldr	r2, [pc, #440]	; (800142c <HAL_RCC_OscConfig+0x4c4>)
 8001272:	f043 0301 	orr.w	r3, r3, #1
 8001276:	6213      	str	r3, [r2, #32]
 8001278:	e02d      	b.n	80012d6 <HAL_RCC_OscConfig+0x36e>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d10c      	bne.n	800129c <HAL_RCC_OscConfig+0x334>
 8001282:	4b6a      	ldr	r3, [pc, #424]	; (800142c <HAL_RCC_OscConfig+0x4c4>)
 8001284:	6a1b      	ldr	r3, [r3, #32]
 8001286:	4a69      	ldr	r2, [pc, #420]	; (800142c <HAL_RCC_OscConfig+0x4c4>)
 8001288:	f023 0301 	bic.w	r3, r3, #1
 800128c:	6213      	str	r3, [r2, #32]
 800128e:	4b67      	ldr	r3, [pc, #412]	; (800142c <HAL_RCC_OscConfig+0x4c4>)
 8001290:	6a1b      	ldr	r3, [r3, #32]
 8001292:	4a66      	ldr	r2, [pc, #408]	; (800142c <HAL_RCC_OscConfig+0x4c4>)
 8001294:	f023 0304 	bic.w	r3, r3, #4
 8001298:	6213      	str	r3, [r2, #32]
 800129a:	e01c      	b.n	80012d6 <HAL_RCC_OscConfig+0x36e>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	2b05      	cmp	r3, #5
 80012a2:	d10c      	bne.n	80012be <HAL_RCC_OscConfig+0x356>
 80012a4:	4b61      	ldr	r3, [pc, #388]	; (800142c <HAL_RCC_OscConfig+0x4c4>)
 80012a6:	6a1b      	ldr	r3, [r3, #32]
 80012a8:	4a60      	ldr	r2, [pc, #384]	; (800142c <HAL_RCC_OscConfig+0x4c4>)
 80012aa:	f043 0304 	orr.w	r3, r3, #4
 80012ae:	6213      	str	r3, [r2, #32]
 80012b0:	4b5e      	ldr	r3, [pc, #376]	; (800142c <HAL_RCC_OscConfig+0x4c4>)
 80012b2:	6a1b      	ldr	r3, [r3, #32]
 80012b4:	4a5d      	ldr	r2, [pc, #372]	; (800142c <HAL_RCC_OscConfig+0x4c4>)
 80012b6:	f043 0301 	orr.w	r3, r3, #1
 80012ba:	6213      	str	r3, [r2, #32]
 80012bc:	e00b      	b.n	80012d6 <HAL_RCC_OscConfig+0x36e>
 80012be:	4b5b      	ldr	r3, [pc, #364]	; (800142c <HAL_RCC_OscConfig+0x4c4>)
 80012c0:	6a1b      	ldr	r3, [r3, #32]
 80012c2:	4a5a      	ldr	r2, [pc, #360]	; (800142c <HAL_RCC_OscConfig+0x4c4>)
 80012c4:	f023 0301 	bic.w	r3, r3, #1
 80012c8:	6213      	str	r3, [r2, #32]
 80012ca:	4b58      	ldr	r3, [pc, #352]	; (800142c <HAL_RCC_OscConfig+0x4c4>)
 80012cc:	6a1b      	ldr	r3, [r3, #32]
 80012ce:	4a57      	ldr	r2, [pc, #348]	; (800142c <HAL_RCC_OscConfig+0x4c4>)
 80012d0:	f023 0304 	bic.w	r3, r3, #4
 80012d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d015      	beq.n	800130a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012de:	f7ff fb69 	bl	80009b4 <HAL_GetTick>
 80012e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012e4:	e00a      	b.n	80012fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012e6:	f7ff fb65 	bl	80009b4 <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e0b1      	b.n	8001460 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012fc:	4b4b      	ldr	r3, [pc, #300]	; (800142c <HAL_RCC_OscConfig+0x4c4>)
 80012fe:	6a1b      	ldr	r3, [r3, #32]
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d0ee      	beq.n	80012e6 <HAL_RCC_OscConfig+0x37e>
 8001308:	e014      	b.n	8001334 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800130a:	f7ff fb53 	bl	80009b4 <HAL_GetTick>
 800130e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001310:	e00a      	b.n	8001328 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001312:	f7ff fb4f 	bl	80009b4 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001320:	4293      	cmp	r3, r2
 8001322:	d901      	bls.n	8001328 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e09b      	b.n	8001460 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001328:	4b40      	ldr	r3, [pc, #256]	; (800142c <HAL_RCC_OscConfig+0x4c4>)
 800132a:	6a1b      	ldr	r3, [r3, #32]
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d1ee      	bne.n	8001312 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001334:	7dfb      	ldrb	r3, [r7, #23]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d105      	bne.n	8001346 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800133a:	4b3c      	ldr	r3, [pc, #240]	; (800142c <HAL_RCC_OscConfig+0x4c4>)
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	4a3b      	ldr	r2, [pc, #236]	; (800142c <HAL_RCC_OscConfig+0x4c4>)
 8001340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001344:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	2b00      	cmp	r3, #0
 800134c:	f000 8087 	beq.w	800145e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001350:	4b36      	ldr	r3, [pc, #216]	; (800142c <HAL_RCC_OscConfig+0x4c4>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 030c 	and.w	r3, r3, #12
 8001358:	2b08      	cmp	r3, #8
 800135a:	d061      	beq.n	8001420 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	69db      	ldr	r3, [r3, #28]
 8001360:	2b02      	cmp	r3, #2
 8001362:	d146      	bne.n	80013f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001364:	4b33      	ldr	r3, [pc, #204]	; (8001434 <HAL_RCC_OscConfig+0x4cc>)
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136a:	f7ff fb23 	bl	80009b4 <HAL_GetTick>
 800136e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001370:	e008      	b.n	8001384 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001372:	f7ff fb1f 	bl	80009b4 <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d901      	bls.n	8001384 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e06d      	b.n	8001460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001384:	4b29      	ldr	r3, [pc, #164]	; (800142c <HAL_RCC_OscConfig+0x4c4>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1f0      	bne.n	8001372 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a1b      	ldr	r3, [r3, #32]
 8001394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001398:	d108      	bne.n	80013ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800139a:	4b24      	ldr	r3, [pc, #144]	; (800142c <HAL_RCC_OscConfig+0x4c4>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	4921      	ldr	r1, [pc, #132]	; (800142c <HAL_RCC_OscConfig+0x4c4>)
 80013a8:	4313      	orrs	r3, r2
 80013aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013ac:	4b1f      	ldr	r3, [pc, #124]	; (800142c <HAL_RCC_OscConfig+0x4c4>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a19      	ldr	r1, [r3, #32]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013bc:	430b      	orrs	r3, r1
 80013be:	491b      	ldr	r1, [pc, #108]	; (800142c <HAL_RCC_OscConfig+0x4c4>)
 80013c0:	4313      	orrs	r3, r2
 80013c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013c4:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <HAL_RCC_OscConfig+0x4cc>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ca:	f7ff faf3 	bl	80009b4 <HAL_GetTick>
 80013ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013d0:	e008      	b.n	80013e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013d2:	f7ff faef 	bl	80009b4 <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e03d      	b.n	8001460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013e4:	4b11      	ldr	r3, [pc, #68]	; (800142c <HAL_RCC_OscConfig+0x4c4>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d0f0      	beq.n	80013d2 <HAL_RCC_OscConfig+0x46a>
 80013f0:	e035      	b.n	800145e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <HAL_RCC_OscConfig+0x4cc>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f8:	f7ff fadc 	bl	80009b4 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001400:	f7ff fad8 	bl	80009b4 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e026      	b.n	8001460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <HAL_RCC_OscConfig+0x4c4>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1f0      	bne.n	8001400 <HAL_RCC_OscConfig+0x498>
 800141e:	e01e      	b.n	800145e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	69db      	ldr	r3, [r3, #28]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d107      	bne.n	8001438 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e019      	b.n	8001460 <HAL_RCC_OscConfig+0x4f8>
 800142c:	40021000 	.word	0x40021000
 8001430:	40007000 	.word	0x40007000
 8001434:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001438:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <HAL_RCC_OscConfig+0x500>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	429a      	cmp	r2, r3
 800144a:	d106      	bne.n	800145a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001456:	429a      	cmp	r2, r3
 8001458:	d001      	beq.n	800145e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e000      	b.n	8001460 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	3718      	adds	r7, #24
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40021000 	.word	0x40021000

0800146c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d101      	bne.n	8001480 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e0d0      	b.n	8001622 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001480:	4b6a      	ldr	r3, [pc, #424]	; (800162c <HAL_RCC_ClockConfig+0x1c0>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0307 	and.w	r3, r3, #7
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	429a      	cmp	r2, r3
 800148c:	d910      	bls.n	80014b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800148e:	4b67      	ldr	r3, [pc, #412]	; (800162c <HAL_RCC_ClockConfig+0x1c0>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f023 0207 	bic.w	r2, r3, #7
 8001496:	4965      	ldr	r1, [pc, #404]	; (800162c <HAL_RCC_ClockConfig+0x1c0>)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	4313      	orrs	r3, r2
 800149c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800149e:	4b63      	ldr	r3, [pc, #396]	; (800162c <HAL_RCC_ClockConfig+0x1c0>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d001      	beq.n	80014b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e0b8      	b.n	8001622 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d020      	beq.n	80014fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0304 	and.w	r3, r3, #4
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d005      	beq.n	80014d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014c8:	4b59      	ldr	r3, [pc, #356]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	4a58      	ldr	r2, [pc, #352]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 80014ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80014d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0308 	and.w	r3, r3, #8
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d005      	beq.n	80014ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014e0:	4b53      	ldr	r3, [pc, #332]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	4a52      	ldr	r2, [pc, #328]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 80014e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80014ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014ec:	4b50      	ldr	r3, [pc, #320]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	494d      	ldr	r1, [pc, #308]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	2b00      	cmp	r3, #0
 8001508:	d040      	beq.n	800158c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d107      	bne.n	8001522 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001512:	4b47      	ldr	r3, [pc, #284]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d115      	bne.n	800154a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e07f      	b.n	8001622 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	2b02      	cmp	r3, #2
 8001528:	d107      	bne.n	800153a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800152a:	4b41      	ldr	r3, [pc, #260]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d109      	bne.n	800154a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e073      	b.n	8001622 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800153a:	4b3d      	ldr	r3, [pc, #244]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e06b      	b.n	8001622 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800154a:	4b39      	ldr	r3, [pc, #228]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f023 0203 	bic.w	r2, r3, #3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	4936      	ldr	r1, [pc, #216]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 8001558:	4313      	orrs	r3, r2
 800155a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800155c:	f7ff fa2a 	bl	80009b4 <HAL_GetTick>
 8001560:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001562:	e00a      	b.n	800157a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001564:	f7ff fa26 	bl	80009b4 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001572:	4293      	cmp	r3, r2
 8001574:	d901      	bls.n	800157a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e053      	b.n	8001622 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800157a:	4b2d      	ldr	r3, [pc, #180]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f003 020c 	and.w	r2, r3, #12
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	429a      	cmp	r2, r3
 800158a:	d1eb      	bne.n	8001564 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800158c:	4b27      	ldr	r3, [pc, #156]	; (800162c <HAL_RCC_ClockConfig+0x1c0>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0307 	and.w	r3, r3, #7
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	429a      	cmp	r2, r3
 8001598:	d210      	bcs.n	80015bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800159a:	4b24      	ldr	r3, [pc, #144]	; (800162c <HAL_RCC_ClockConfig+0x1c0>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f023 0207 	bic.w	r2, r3, #7
 80015a2:	4922      	ldr	r1, [pc, #136]	; (800162c <HAL_RCC_ClockConfig+0x1c0>)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015aa:	4b20      	ldr	r3, [pc, #128]	; (800162c <HAL_RCC_ClockConfig+0x1c0>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d001      	beq.n	80015bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e032      	b.n	8001622 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d008      	beq.n	80015da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015c8:	4b19      	ldr	r3, [pc, #100]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	4916      	ldr	r1, [pc, #88]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0308 	and.w	r3, r3, #8
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d009      	beq.n	80015fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015e6:	4b12      	ldr	r3, [pc, #72]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	490e      	ldr	r1, [pc, #56]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015fa:	f000 f821 	bl	8001640 <HAL_RCC_GetSysClockFreq>
 80015fe:	4602      	mov	r2, r0
 8001600:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	091b      	lsrs	r3, r3, #4
 8001606:	f003 030f 	and.w	r3, r3, #15
 800160a:	490a      	ldr	r1, [pc, #40]	; (8001634 <HAL_RCC_ClockConfig+0x1c8>)
 800160c:	5ccb      	ldrb	r3, [r1, r3]
 800160e:	fa22 f303 	lsr.w	r3, r2, r3
 8001612:	4a09      	ldr	r2, [pc, #36]	; (8001638 <HAL_RCC_ClockConfig+0x1cc>)
 8001614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <HAL_RCC_ClockConfig+0x1d0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff f842 	bl	80006a4 <HAL_InitTick>

  return HAL_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40022000 	.word	0x40022000
 8001630:	40021000 	.word	0x40021000
 8001634:	08002a94 	.word	0x08002a94
 8001638:	20000000 	.word	0x20000000
 800163c:	20000004 	.word	0x20000004

08001640 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001640:	b480      	push	{r7}
 8001642:	b087      	sub	sp, #28
 8001644:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	2300      	movs	r3, #0
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	2300      	movs	r3, #0
 8001650:	617b      	str	r3, [r7, #20]
 8001652:	2300      	movs	r3, #0
 8001654:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001656:	2300      	movs	r3, #0
 8001658:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800165a:	4b1e      	ldr	r3, [pc, #120]	; (80016d4 <HAL_RCC_GetSysClockFreq+0x94>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f003 030c 	and.w	r3, r3, #12
 8001666:	2b04      	cmp	r3, #4
 8001668:	d002      	beq.n	8001670 <HAL_RCC_GetSysClockFreq+0x30>
 800166a:	2b08      	cmp	r3, #8
 800166c:	d003      	beq.n	8001676 <HAL_RCC_GetSysClockFreq+0x36>
 800166e:	e027      	b.n	80016c0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001670:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001672:	613b      	str	r3, [r7, #16]
      break;
 8001674:	e027      	b.n	80016c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	0c9b      	lsrs	r3, r3, #18
 800167a:	f003 030f 	and.w	r3, r3, #15
 800167e:	4a17      	ldr	r2, [pc, #92]	; (80016dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001680:	5cd3      	ldrb	r3, [r2, r3]
 8001682:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d010      	beq.n	80016b0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800168e:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	0c5b      	lsrs	r3, r3, #17
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	4a11      	ldr	r2, [pc, #68]	; (80016e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800169a:	5cd3      	ldrb	r3, [r2, r3]
 800169c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a0d      	ldr	r2, [pc, #52]	; (80016d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80016a2:	fb03 f202 	mul.w	r2, r3, r2
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	e004      	b.n	80016ba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a0c      	ldr	r2, [pc, #48]	; (80016e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80016b4:	fb02 f303 	mul.w	r3, r2, r3
 80016b8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	613b      	str	r3, [r7, #16]
      break;
 80016be:	e002      	b.n	80016c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016c0:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80016c2:	613b      	str	r3, [r7, #16]
      break;
 80016c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016c6:	693b      	ldr	r3, [r7, #16]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	371c      	adds	r7, #28
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	40021000 	.word	0x40021000
 80016d8:	007a1200 	.word	0x007a1200
 80016dc:	08002aac 	.word	0x08002aac
 80016e0:	08002abc 	.word	0x08002abc
 80016e4:	003d0900 	.word	0x003d0900

080016e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016ec:	4b02      	ldr	r3, [pc, #8]	; (80016f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80016ee:	681b      	ldr	r3, [r3, #0]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr
 80016f8:	20000000 	.word	0x20000000

080016fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001700:	f7ff fff2 	bl	80016e8 <HAL_RCC_GetHCLKFreq>
 8001704:	4602      	mov	r2, r0
 8001706:	4b05      	ldr	r3, [pc, #20]	; (800171c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	0a1b      	lsrs	r3, r3, #8
 800170c:	f003 0307 	and.w	r3, r3, #7
 8001710:	4903      	ldr	r1, [pc, #12]	; (8001720 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001712:	5ccb      	ldrb	r3, [r1, r3]
 8001714:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001718:	4618      	mov	r0, r3
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40021000 	.word	0x40021000
 8001720:	08002aa4 	.word	0x08002aa4

08001724 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001728:	f7ff ffde 	bl	80016e8 <HAL_RCC_GetHCLKFreq>
 800172c:	4602      	mov	r2, r0
 800172e:	4b05      	ldr	r3, [pc, #20]	; (8001744 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	0adb      	lsrs	r3, r3, #11
 8001734:	f003 0307 	and.w	r3, r3, #7
 8001738:	4903      	ldr	r1, [pc, #12]	; (8001748 <HAL_RCC_GetPCLK2Freq+0x24>)
 800173a:	5ccb      	ldrb	r3, [r1, r3]
 800173c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001740:	4618      	mov	r0, r3
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40021000 	.word	0x40021000
 8001748:	08002aa4 	.word	0x08002aa4

0800174c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	220f      	movs	r2, #15
 800175a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800175c:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <HAL_RCC_GetClockConfig+0x58>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 0203 	and.w	r2, r3, #3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001768:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <HAL_RCC_GetClockConfig+0x58>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001774:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <HAL_RCC_GetClockConfig+0x58>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001780:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <HAL_RCC_GetClockConfig+0x58>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	08db      	lsrs	r3, r3, #3
 8001786:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800178e:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_RCC_GetClockConfig+0x5c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0207 	and.w	r2, r3, #7
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40022000 	.word	0x40022000

080017ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017b4:	4b0a      	ldr	r3, [pc, #40]	; (80017e0 <RCC_Delay+0x34>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a0a      	ldr	r2, [pc, #40]	; (80017e4 <RCC_Delay+0x38>)
 80017ba:	fba2 2303 	umull	r2, r3, r2, r3
 80017be:	0a5b      	lsrs	r3, r3, #9
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	fb02 f303 	mul.w	r3, r2, r3
 80017c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80017c8:	bf00      	nop
  }
  while (Delay --);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	1e5a      	subs	r2, r3, #1
 80017ce:	60fa      	str	r2, [r7, #12]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1f9      	bne.n	80017c8 <RCC_Delay+0x1c>
}
 80017d4:	bf00      	nop
 80017d6:	bf00      	nop
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr
 80017e0:	20000000 	.word	0x20000000
 80017e4:	10624dd3 	.word	0x10624dd3

080017e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e041      	b.n	800187e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d106      	bne.n	8001814 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 f839 	bl	8001886 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2202      	movs	r2, #2
 8001818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3304      	adds	r3, #4
 8001824:	4619      	mov	r1, r3
 8001826:	4610      	mov	r0, r2
 8001828:	f000 f9b4 	bl	8001b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2201      	movs	r2, #1
 8001830:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2201      	movs	r2, #1
 8001840:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2201      	movs	r2, #1
 8001858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2201      	movs	r2, #1
 8001860:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr

08001898 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d001      	beq.n	80018b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e03a      	b.n	8001926 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2202      	movs	r2, #2
 80018b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	68da      	ldr	r2, [r3, #12]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f042 0201 	orr.w	r2, r2, #1
 80018c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a18      	ldr	r2, [pc, #96]	; (8001930 <HAL_TIM_Base_Start_IT+0x98>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d00e      	beq.n	80018f0 <HAL_TIM_Base_Start_IT+0x58>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018da:	d009      	beq.n	80018f0 <HAL_TIM_Base_Start_IT+0x58>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a14      	ldr	r2, [pc, #80]	; (8001934 <HAL_TIM_Base_Start_IT+0x9c>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d004      	beq.n	80018f0 <HAL_TIM_Base_Start_IT+0x58>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a13      	ldr	r2, [pc, #76]	; (8001938 <HAL_TIM_Base_Start_IT+0xa0>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d111      	bne.n	8001914 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2b06      	cmp	r3, #6
 8001900:	d010      	beq.n	8001924 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f042 0201 	orr.w	r2, r2, #1
 8001910:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001912:	e007      	b.n	8001924 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f042 0201 	orr.w	r2, r2, #1
 8001922:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3714      	adds	r7, #20
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr
 8001930:	40012c00 	.word	0x40012c00
 8001934:	40000400 	.word	0x40000400
 8001938:	40000800 	.word	0x40000800

0800193c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b02      	cmp	r3, #2
 8001950:	d122      	bne.n	8001998 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b02      	cmp	r3, #2
 800195e:	d11b      	bne.n	8001998 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f06f 0202 	mvn.w	r2, #2
 8001968:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2201      	movs	r2, #1
 800196e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d003      	beq.n	8001986 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 f8ed 	bl	8001b5e <HAL_TIM_IC_CaptureCallback>
 8001984:	e005      	b.n	8001992 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 f8e0 	bl	8001b4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f000 f8ef 	bl	8001b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	691b      	ldr	r3, [r3, #16]
 800199e:	f003 0304 	and.w	r3, r3, #4
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	d122      	bne.n	80019ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	f003 0304 	and.w	r3, r3, #4
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	d11b      	bne.n	80019ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f06f 0204 	mvn.w	r2, #4
 80019bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2202      	movs	r2, #2
 80019c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d003      	beq.n	80019da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 f8c3 	bl	8001b5e <HAL_TIM_IC_CaptureCallback>
 80019d8:	e005      	b.n	80019e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 f8b6 	bl	8001b4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f000 f8c5 	bl	8001b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	f003 0308 	and.w	r3, r3, #8
 80019f6:	2b08      	cmp	r3, #8
 80019f8:	d122      	bne.n	8001a40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	f003 0308 	and.w	r3, r3, #8
 8001a04:	2b08      	cmp	r3, #8
 8001a06:	d11b      	bne.n	8001a40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f06f 0208 	mvn.w	r2, #8
 8001a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2204      	movs	r2, #4
 8001a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	f003 0303 	and.w	r3, r3, #3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f000 f899 	bl	8001b5e <HAL_TIM_IC_CaptureCallback>
 8001a2c:	e005      	b.n	8001a3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 f88c 	bl	8001b4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 f89b 	bl	8001b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	f003 0310 	and.w	r3, r3, #16
 8001a4a:	2b10      	cmp	r3, #16
 8001a4c:	d122      	bne.n	8001a94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	f003 0310 	and.w	r3, r3, #16
 8001a58:	2b10      	cmp	r3, #16
 8001a5a:	d11b      	bne.n	8001a94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f06f 0210 	mvn.w	r2, #16
 8001a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2208      	movs	r2, #8
 8001a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f86f 	bl	8001b5e <HAL_TIM_IC_CaptureCallback>
 8001a80:	e005      	b.n	8001a8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 f862 	bl	8001b4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 f871 	bl	8001b70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d10e      	bne.n	8001ac0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d107      	bne.n	8001ac0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f06f 0201 	mvn.w	r2, #1
 8001ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7fe fd5c 	bl	8000578 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aca:	2b80      	cmp	r3, #128	; 0x80
 8001acc:	d10e      	bne.n	8001aec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ad8:	2b80      	cmp	r3, #128	; 0x80
 8001ada:	d107      	bne.n	8001aec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f8bf 	bl	8001c6a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001af6:	2b40      	cmp	r3, #64	; 0x40
 8001af8:	d10e      	bne.n	8001b18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b04:	2b40      	cmp	r3, #64	; 0x40
 8001b06:	d107      	bne.n	8001b18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 f835 	bl	8001b82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	f003 0320 	and.w	r3, r3, #32
 8001b22:	2b20      	cmp	r3, #32
 8001b24:	d10e      	bne.n	8001b44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	f003 0320 	and.w	r3, r3, #32
 8001b30:	2b20      	cmp	r3, #32
 8001b32:	d107      	bne.n	8001b44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f06f 0220 	mvn.w	r2, #32
 8001b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 f88a 	bl	8001c58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b44:	bf00      	nop
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr

08001b5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr

08001b70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bc80      	pop	{r7}
 8001b80:	4770      	bx	lr

08001b82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr

08001b94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4a29      	ldr	r2, [pc, #164]	; (8001c4c <TIM_Base_SetConfig+0xb8>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d00b      	beq.n	8001bc4 <TIM_Base_SetConfig+0x30>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bb2:	d007      	beq.n	8001bc4 <TIM_Base_SetConfig+0x30>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a26      	ldr	r2, [pc, #152]	; (8001c50 <TIM_Base_SetConfig+0xbc>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d003      	beq.n	8001bc4 <TIM_Base_SetConfig+0x30>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a25      	ldr	r2, [pc, #148]	; (8001c54 <TIM_Base_SetConfig+0xc0>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d108      	bne.n	8001bd6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a1c      	ldr	r2, [pc, #112]	; (8001c4c <TIM_Base_SetConfig+0xb8>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d00b      	beq.n	8001bf6 <TIM_Base_SetConfig+0x62>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001be4:	d007      	beq.n	8001bf6 <TIM_Base_SetConfig+0x62>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a19      	ldr	r2, [pc, #100]	; (8001c50 <TIM_Base_SetConfig+0xbc>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d003      	beq.n	8001bf6 <TIM_Base_SetConfig+0x62>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a18      	ldr	r2, [pc, #96]	; (8001c54 <TIM_Base_SetConfig+0xc0>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d108      	bne.n	8001c08 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a07      	ldr	r2, [pc, #28]	; (8001c4c <TIM_Base_SetConfig+0xb8>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d103      	bne.n	8001c3c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	691a      	ldr	r2, [r3, #16]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	615a      	str	r2, [r3, #20]
}
 8001c42:	bf00      	nop
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr
 8001c4c:	40012c00 	.word	0x40012c00
 8001c50:	40000400 	.word	0x40000400
 8001c54:	40000800 	.word	0x40000800

08001c58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bc80      	pop	{r7}
 8001c68:	4770      	bx	lr

08001c6a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr

08001c7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e042      	b.n	8001d14 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d106      	bne.n	8001ca8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7fe fcb2 	bl	800060c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2224      	movs	r2, #36	; 0x24
 8001cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68da      	ldr	r2, [r3, #12]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 f91d 	bl	8001f00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	691a      	ldr	r2, [r3, #16]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001cd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	695a      	ldr	r2, [r3, #20]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ce4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68da      	ldr	r2, [r3, #12]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cf4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2220      	movs	r2, #32
 8001d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2220      	movs	r2, #32
 8001d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08a      	sub	sp, #40	; 0x28
 8001d20:	af02      	add	r7, sp, #8
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	603b      	str	r3, [r7, #0]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b20      	cmp	r3, #32
 8001d3a:	d16d      	bne.n	8001e18 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d002      	beq.n	8001d48 <HAL_UART_Transmit+0x2c>
 8001d42:	88fb      	ldrh	r3, [r7, #6]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d101      	bne.n	8001d4c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e066      	b.n	8001e1a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2221      	movs	r2, #33	; 0x21
 8001d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d5a:	f7fe fe2b 	bl	80009b4 <HAL_GetTick>
 8001d5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	88fa      	ldrh	r2, [r7, #6]
 8001d64:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	88fa      	ldrh	r2, [r7, #6]
 8001d6a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d74:	d108      	bne.n	8001d88 <HAL_UART_Transmit+0x6c>
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d104      	bne.n	8001d88 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	61bb      	str	r3, [r7, #24]
 8001d86:	e003      	b.n	8001d90 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001d90:	e02a      	b.n	8001de8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2180      	movs	r1, #128	; 0x80
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f000 f840 	bl	8001e22 <UART_WaitOnFlagUntilTimeout>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e036      	b.n	8001e1a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10b      	bne.n	8001dca <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	881b      	ldrh	r3, [r3, #0]
 8001db6:	461a      	mov	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001dc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	3302      	adds	r3, #2
 8001dc6:	61bb      	str	r3, [r7, #24]
 8001dc8:	e007      	b.n	8001dda <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	781a      	ldrb	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	3b01      	subs	r3, #1
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1cf      	bne.n	8001d92 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	2140      	movs	r1, #64	; 0x40
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	f000 f810 	bl	8001e22 <UART_WaitOnFlagUntilTimeout>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e006      	b.n	8001e1a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2220      	movs	r2, #32
 8001e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001e14:	2300      	movs	r3, #0
 8001e16:	e000      	b.n	8001e1a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001e18:	2302      	movs	r3, #2
  }
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3720      	adds	r7, #32
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b090      	sub	sp, #64	; 0x40
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	60f8      	str	r0, [r7, #12]
 8001e2a:	60b9      	str	r1, [r7, #8]
 8001e2c:	603b      	str	r3, [r7, #0]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e32:	e050      	b.n	8001ed6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e3a:	d04c      	beq.n	8001ed6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d007      	beq.n	8001e52 <UART_WaitOnFlagUntilTimeout+0x30>
 8001e42:	f7fe fdb7 	bl	80009b4 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d241      	bcs.n	8001ed6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	330c      	adds	r3, #12
 8001e58:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e5c:	e853 3f00 	ldrex	r3, [r3]
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001e68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	330c      	adds	r3, #12
 8001e70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e72:	637a      	str	r2, [r7, #52]	; 0x34
 8001e74:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e7a:	e841 2300 	strex	r3, r2, [r1]
 8001e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1e5      	bne.n	8001e52 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	3314      	adds	r3, #20
 8001e8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	e853 3f00 	ldrex	r3, [r3]
 8001e94:	613b      	str	r3, [r7, #16]
   return(result);
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	f023 0301 	bic.w	r3, r3, #1
 8001e9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	3314      	adds	r3, #20
 8001ea4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ea6:	623a      	str	r2, [r7, #32]
 8001ea8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001eaa:	69f9      	ldr	r1, [r7, #28]
 8001eac:	6a3a      	ldr	r2, [r7, #32]
 8001eae:	e841 2300 	strex	r3, r2, [r1]
 8001eb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1e5      	bne.n	8001e86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2220      	movs	r2, #32
 8001ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2220      	movs	r2, #32
 8001ec6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e00f      	b.n	8001ef6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	68ba      	ldr	r2, [r7, #8]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	bf0c      	ite	eq
 8001ee6:	2301      	moveq	r3, #1
 8001ee8:	2300      	movne	r3, #0
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	461a      	mov	r2, r3
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d09f      	beq.n	8001e34 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3740      	adds	r7, #64	; 0x40
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
	...

08001f00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68da      	ldr	r2, [r3, #12]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689a      	ldr	r2, [r3, #8]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	431a      	orrs	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	695b      	ldr	r3, [r3, #20]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001f3a:	f023 030c 	bic.w	r3, r3, #12
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6812      	ldr	r2, [r2, #0]
 8001f42:	68b9      	ldr	r1, [r7, #8]
 8001f44:	430b      	orrs	r3, r1
 8001f46:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	699a      	ldr	r2, [r3, #24]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a2c      	ldr	r2, [pc, #176]	; (8002014 <UART_SetConfig+0x114>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d103      	bne.n	8001f70 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001f68:	f7ff fbdc 	bl	8001724 <HAL_RCC_GetPCLK2Freq>
 8001f6c:	60f8      	str	r0, [r7, #12]
 8001f6e:	e002      	b.n	8001f76 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001f70:	f7ff fbc4 	bl	80016fc <HAL_RCC_GetPCLK1Freq>
 8001f74:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	009a      	lsls	r2, r3, #2
 8001f80:	441a      	add	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8c:	4a22      	ldr	r2, [pc, #136]	; (8002018 <UART_SetConfig+0x118>)
 8001f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f92:	095b      	lsrs	r3, r3, #5
 8001f94:	0119      	lsls	r1, r3, #4
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	009a      	lsls	r2, r3, #2
 8001fa0:	441a      	add	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fac:	4b1a      	ldr	r3, [pc, #104]	; (8002018 <UART_SetConfig+0x118>)
 8001fae:	fba3 0302 	umull	r0, r3, r3, r2
 8001fb2:	095b      	lsrs	r3, r3, #5
 8001fb4:	2064      	movs	r0, #100	; 0x64
 8001fb6:	fb00 f303 	mul.w	r3, r0, r3
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	011b      	lsls	r3, r3, #4
 8001fbe:	3332      	adds	r3, #50	; 0x32
 8001fc0:	4a15      	ldr	r2, [pc, #84]	; (8002018 <UART_SetConfig+0x118>)
 8001fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc6:	095b      	lsrs	r3, r3, #5
 8001fc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fcc:	4419      	add	r1, r3
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	009a      	lsls	r2, r3, #2
 8001fd8:	441a      	add	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fe4:	4b0c      	ldr	r3, [pc, #48]	; (8002018 <UART_SetConfig+0x118>)
 8001fe6:	fba3 0302 	umull	r0, r3, r3, r2
 8001fea:	095b      	lsrs	r3, r3, #5
 8001fec:	2064      	movs	r0, #100	; 0x64
 8001fee:	fb00 f303 	mul.w	r3, r0, r3
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	011b      	lsls	r3, r3, #4
 8001ff6:	3332      	adds	r3, #50	; 0x32
 8001ff8:	4a07      	ldr	r2, [pc, #28]	; (8002018 <UART_SetConfig+0x118>)
 8001ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffe:	095b      	lsrs	r3, r3, #5
 8002000:	f003 020f 	and.w	r2, r3, #15
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	440a      	add	r2, r1
 800200a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800200c:	bf00      	nop
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40013800 	.word	0x40013800
 8002018:	51eb851f 	.word	0x51eb851f

0800201c <__errno>:
 800201c:	4b01      	ldr	r3, [pc, #4]	; (8002024 <__errno+0x8>)
 800201e:	6818      	ldr	r0, [r3, #0]
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	2000000c 	.word	0x2000000c

08002028 <__libc_init_array>:
 8002028:	b570      	push	{r4, r5, r6, lr}
 800202a:	2600      	movs	r6, #0
 800202c:	4d0c      	ldr	r5, [pc, #48]	; (8002060 <__libc_init_array+0x38>)
 800202e:	4c0d      	ldr	r4, [pc, #52]	; (8002064 <__libc_init_array+0x3c>)
 8002030:	1b64      	subs	r4, r4, r5
 8002032:	10a4      	asrs	r4, r4, #2
 8002034:	42a6      	cmp	r6, r4
 8002036:	d109      	bne.n	800204c <__libc_init_array+0x24>
 8002038:	f000 fd18 	bl	8002a6c <_init>
 800203c:	2600      	movs	r6, #0
 800203e:	4d0a      	ldr	r5, [pc, #40]	; (8002068 <__libc_init_array+0x40>)
 8002040:	4c0a      	ldr	r4, [pc, #40]	; (800206c <__libc_init_array+0x44>)
 8002042:	1b64      	subs	r4, r4, r5
 8002044:	10a4      	asrs	r4, r4, #2
 8002046:	42a6      	cmp	r6, r4
 8002048:	d105      	bne.n	8002056 <__libc_init_array+0x2e>
 800204a:	bd70      	pop	{r4, r5, r6, pc}
 800204c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002050:	4798      	blx	r3
 8002052:	3601      	adds	r6, #1
 8002054:	e7ee      	b.n	8002034 <__libc_init_array+0xc>
 8002056:	f855 3b04 	ldr.w	r3, [r5], #4
 800205a:	4798      	blx	r3
 800205c:	3601      	adds	r6, #1
 800205e:	e7f2      	b.n	8002046 <__libc_init_array+0x1e>
 8002060:	08002b24 	.word	0x08002b24
 8002064:	08002b24 	.word	0x08002b24
 8002068:	08002b24 	.word	0x08002b24
 800206c:	08002b28 	.word	0x08002b28

08002070 <memset>:
 8002070:	4603      	mov	r3, r0
 8002072:	4402      	add	r2, r0
 8002074:	4293      	cmp	r3, r2
 8002076:	d100      	bne.n	800207a <memset+0xa>
 8002078:	4770      	bx	lr
 800207a:	f803 1b01 	strb.w	r1, [r3], #1
 800207e:	e7f9      	b.n	8002074 <memset+0x4>

08002080 <_puts_r>:
 8002080:	b570      	push	{r4, r5, r6, lr}
 8002082:	460e      	mov	r6, r1
 8002084:	4605      	mov	r5, r0
 8002086:	b118      	cbz	r0, 8002090 <_puts_r+0x10>
 8002088:	6983      	ldr	r3, [r0, #24]
 800208a:	b90b      	cbnz	r3, 8002090 <_puts_r+0x10>
 800208c:	f000 fa44 	bl	8002518 <__sinit>
 8002090:	69ab      	ldr	r3, [r5, #24]
 8002092:	68ac      	ldr	r4, [r5, #8]
 8002094:	b913      	cbnz	r3, 800209c <_puts_r+0x1c>
 8002096:	4628      	mov	r0, r5
 8002098:	f000 fa3e 	bl	8002518 <__sinit>
 800209c:	4b2c      	ldr	r3, [pc, #176]	; (8002150 <_puts_r+0xd0>)
 800209e:	429c      	cmp	r4, r3
 80020a0:	d120      	bne.n	80020e4 <_puts_r+0x64>
 80020a2:	686c      	ldr	r4, [r5, #4]
 80020a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80020a6:	07db      	lsls	r3, r3, #31
 80020a8:	d405      	bmi.n	80020b6 <_puts_r+0x36>
 80020aa:	89a3      	ldrh	r3, [r4, #12]
 80020ac:	0598      	lsls	r0, r3, #22
 80020ae:	d402      	bmi.n	80020b6 <_puts_r+0x36>
 80020b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80020b2:	f000 facf 	bl	8002654 <__retarget_lock_acquire_recursive>
 80020b6:	89a3      	ldrh	r3, [r4, #12]
 80020b8:	0719      	lsls	r1, r3, #28
 80020ba:	d51d      	bpl.n	80020f8 <_puts_r+0x78>
 80020bc:	6923      	ldr	r3, [r4, #16]
 80020be:	b1db      	cbz	r3, 80020f8 <_puts_r+0x78>
 80020c0:	3e01      	subs	r6, #1
 80020c2:	68a3      	ldr	r3, [r4, #8]
 80020c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80020c8:	3b01      	subs	r3, #1
 80020ca:	60a3      	str	r3, [r4, #8]
 80020cc:	bb39      	cbnz	r1, 800211e <_puts_r+0x9e>
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	da38      	bge.n	8002144 <_puts_r+0xc4>
 80020d2:	4622      	mov	r2, r4
 80020d4:	210a      	movs	r1, #10
 80020d6:	4628      	mov	r0, r5
 80020d8:	f000 f848 	bl	800216c <__swbuf_r>
 80020dc:	3001      	adds	r0, #1
 80020de:	d011      	beq.n	8002104 <_puts_r+0x84>
 80020e0:	250a      	movs	r5, #10
 80020e2:	e011      	b.n	8002108 <_puts_r+0x88>
 80020e4:	4b1b      	ldr	r3, [pc, #108]	; (8002154 <_puts_r+0xd4>)
 80020e6:	429c      	cmp	r4, r3
 80020e8:	d101      	bne.n	80020ee <_puts_r+0x6e>
 80020ea:	68ac      	ldr	r4, [r5, #8]
 80020ec:	e7da      	b.n	80020a4 <_puts_r+0x24>
 80020ee:	4b1a      	ldr	r3, [pc, #104]	; (8002158 <_puts_r+0xd8>)
 80020f0:	429c      	cmp	r4, r3
 80020f2:	bf08      	it	eq
 80020f4:	68ec      	ldreq	r4, [r5, #12]
 80020f6:	e7d5      	b.n	80020a4 <_puts_r+0x24>
 80020f8:	4621      	mov	r1, r4
 80020fa:	4628      	mov	r0, r5
 80020fc:	f000 f888 	bl	8002210 <__swsetup_r>
 8002100:	2800      	cmp	r0, #0
 8002102:	d0dd      	beq.n	80020c0 <_puts_r+0x40>
 8002104:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002108:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800210a:	07da      	lsls	r2, r3, #31
 800210c:	d405      	bmi.n	800211a <_puts_r+0x9a>
 800210e:	89a3      	ldrh	r3, [r4, #12]
 8002110:	059b      	lsls	r3, r3, #22
 8002112:	d402      	bmi.n	800211a <_puts_r+0x9a>
 8002114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002116:	f000 fa9e 	bl	8002656 <__retarget_lock_release_recursive>
 800211a:	4628      	mov	r0, r5
 800211c:	bd70      	pop	{r4, r5, r6, pc}
 800211e:	2b00      	cmp	r3, #0
 8002120:	da04      	bge.n	800212c <_puts_r+0xac>
 8002122:	69a2      	ldr	r2, [r4, #24]
 8002124:	429a      	cmp	r2, r3
 8002126:	dc06      	bgt.n	8002136 <_puts_r+0xb6>
 8002128:	290a      	cmp	r1, #10
 800212a:	d004      	beq.n	8002136 <_puts_r+0xb6>
 800212c:	6823      	ldr	r3, [r4, #0]
 800212e:	1c5a      	adds	r2, r3, #1
 8002130:	6022      	str	r2, [r4, #0]
 8002132:	7019      	strb	r1, [r3, #0]
 8002134:	e7c5      	b.n	80020c2 <_puts_r+0x42>
 8002136:	4622      	mov	r2, r4
 8002138:	4628      	mov	r0, r5
 800213a:	f000 f817 	bl	800216c <__swbuf_r>
 800213e:	3001      	adds	r0, #1
 8002140:	d1bf      	bne.n	80020c2 <_puts_r+0x42>
 8002142:	e7df      	b.n	8002104 <_puts_r+0x84>
 8002144:	250a      	movs	r5, #10
 8002146:	6823      	ldr	r3, [r4, #0]
 8002148:	1c5a      	adds	r2, r3, #1
 800214a:	6022      	str	r2, [r4, #0]
 800214c:	701d      	strb	r5, [r3, #0]
 800214e:	e7db      	b.n	8002108 <_puts_r+0x88>
 8002150:	08002ae4 	.word	0x08002ae4
 8002154:	08002b04 	.word	0x08002b04
 8002158:	08002ac4 	.word	0x08002ac4

0800215c <puts>:
 800215c:	4b02      	ldr	r3, [pc, #8]	; (8002168 <puts+0xc>)
 800215e:	4601      	mov	r1, r0
 8002160:	6818      	ldr	r0, [r3, #0]
 8002162:	f7ff bf8d 	b.w	8002080 <_puts_r>
 8002166:	bf00      	nop
 8002168:	2000000c 	.word	0x2000000c

0800216c <__swbuf_r>:
 800216c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800216e:	460e      	mov	r6, r1
 8002170:	4614      	mov	r4, r2
 8002172:	4605      	mov	r5, r0
 8002174:	b118      	cbz	r0, 800217e <__swbuf_r+0x12>
 8002176:	6983      	ldr	r3, [r0, #24]
 8002178:	b90b      	cbnz	r3, 800217e <__swbuf_r+0x12>
 800217a:	f000 f9cd 	bl	8002518 <__sinit>
 800217e:	4b21      	ldr	r3, [pc, #132]	; (8002204 <__swbuf_r+0x98>)
 8002180:	429c      	cmp	r4, r3
 8002182:	d12b      	bne.n	80021dc <__swbuf_r+0x70>
 8002184:	686c      	ldr	r4, [r5, #4]
 8002186:	69a3      	ldr	r3, [r4, #24]
 8002188:	60a3      	str	r3, [r4, #8]
 800218a:	89a3      	ldrh	r3, [r4, #12]
 800218c:	071a      	lsls	r2, r3, #28
 800218e:	d52f      	bpl.n	80021f0 <__swbuf_r+0x84>
 8002190:	6923      	ldr	r3, [r4, #16]
 8002192:	b36b      	cbz	r3, 80021f0 <__swbuf_r+0x84>
 8002194:	6923      	ldr	r3, [r4, #16]
 8002196:	6820      	ldr	r0, [r4, #0]
 8002198:	b2f6      	uxtb	r6, r6
 800219a:	1ac0      	subs	r0, r0, r3
 800219c:	6963      	ldr	r3, [r4, #20]
 800219e:	4637      	mov	r7, r6
 80021a0:	4283      	cmp	r3, r0
 80021a2:	dc04      	bgt.n	80021ae <__swbuf_r+0x42>
 80021a4:	4621      	mov	r1, r4
 80021a6:	4628      	mov	r0, r5
 80021a8:	f000 f922 	bl	80023f0 <_fflush_r>
 80021ac:	bb30      	cbnz	r0, 80021fc <__swbuf_r+0x90>
 80021ae:	68a3      	ldr	r3, [r4, #8]
 80021b0:	3001      	adds	r0, #1
 80021b2:	3b01      	subs	r3, #1
 80021b4:	60a3      	str	r3, [r4, #8]
 80021b6:	6823      	ldr	r3, [r4, #0]
 80021b8:	1c5a      	adds	r2, r3, #1
 80021ba:	6022      	str	r2, [r4, #0]
 80021bc:	701e      	strb	r6, [r3, #0]
 80021be:	6963      	ldr	r3, [r4, #20]
 80021c0:	4283      	cmp	r3, r0
 80021c2:	d004      	beq.n	80021ce <__swbuf_r+0x62>
 80021c4:	89a3      	ldrh	r3, [r4, #12]
 80021c6:	07db      	lsls	r3, r3, #31
 80021c8:	d506      	bpl.n	80021d8 <__swbuf_r+0x6c>
 80021ca:	2e0a      	cmp	r6, #10
 80021cc:	d104      	bne.n	80021d8 <__swbuf_r+0x6c>
 80021ce:	4621      	mov	r1, r4
 80021d0:	4628      	mov	r0, r5
 80021d2:	f000 f90d 	bl	80023f0 <_fflush_r>
 80021d6:	b988      	cbnz	r0, 80021fc <__swbuf_r+0x90>
 80021d8:	4638      	mov	r0, r7
 80021da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021dc:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <__swbuf_r+0x9c>)
 80021de:	429c      	cmp	r4, r3
 80021e0:	d101      	bne.n	80021e6 <__swbuf_r+0x7a>
 80021e2:	68ac      	ldr	r4, [r5, #8]
 80021e4:	e7cf      	b.n	8002186 <__swbuf_r+0x1a>
 80021e6:	4b09      	ldr	r3, [pc, #36]	; (800220c <__swbuf_r+0xa0>)
 80021e8:	429c      	cmp	r4, r3
 80021ea:	bf08      	it	eq
 80021ec:	68ec      	ldreq	r4, [r5, #12]
 80021ee:	e7ca      	b.n	8002186 <__swbuf_r+0x1a>
 80021f0:	4621      	mov	r1, r4
 80021f2:	4628      	mov	r0, r5
 80021f4:	f000 f80c 	bl	8002210 <__swsetup_r>
 80021f8:	2800      	cmp	r0, #0
 80021fa:	d0cb      	beq.n	8002194 <__swbuf_r+0x28>
 80021fc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002200:	e7ea      	b.n	80021d8 <__swbuf_r+0x6c>
 8002202:	bf00      	nop
 8002204:	08002ae4 	.word	0x08002ae4
 8002208:	08002b04 	.word	0x08002b04
 800220c:	08002ac4 	.word	0x08002ac4

08002210 <__swsetup_r>:
 8002210:	4b32      	ldr	r3, [pc, #200]	; (80022dc <__swsetup_r+0xcc>)
 8002212:	b570      	push	{r4, r5, r6, lr}
 8002214:	681d      	ldr	r5, [r3, #0]
 8002216:	4606      	mov	r6, r0
 8002218:	460c      	mov	r4, r1
 800221a:	b125      	cbz	r5, 8002226 <__swsetup_r+0x16>
 800221c:	69ab      	ldr	r3, [r5, #24]
 800221e:	b913      	cbnz	r3, 8002226 <__swsetup_r+0x16>
 8002220:	4628      	mov	r0, r5
 8002222:	f000 f979 	bl	8002518 <__sinit>
 8002226:	4b2e      	ldr	r3, [pc, #184]	; (80022e0 <__swsetup_r+0xd0>)
 8002228:	429c      	cmp	r4, r3
 800222a:	d10f      	bne.n	800224c <__swsetup_r+0x3c>
 800222c:	686c      	ldr	r4, [r5, #4]
 800222e:	89a3      	ldrh	r3, [r4, #12]
 8002230:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002234:	0719      	lsls	r1, r3, #28
 8002236:	d42c      	bmi.n	8002292 <__swsetup_r+0x82>
 8002238:	06dd      	lsls	r5, r3, #27
 800223a:	d411      	bmi.n	8002260 <__swsetup_r+0x50>
 800223c:	2309      	movs	r3, #9
 800223e:	6033      	str	r3, [r6, #0]
 8002240:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002244:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002248:	81a3      	strh	r3, [r4, #12]
 800224a:	e03e      	b.n	80022ca <__swsetup_r+0xba>
 800224c:	4b25      	ldr	r3, [pc, #148]	; (80022e4 <__swsetup_r+0xd4>)
 800224e:	429c      	cmp	r4, r3
 8002250:	d101      	bne.n	8002256 <__swsetup_r+0x46>
 8002252:	68ac      	ldr	r4, [r5, #8]
 8002254:	e7eb      	b.n	800222e <__swsetup_r+0x1e>
 8002256:	4b24      	ldr	r3, [pc, #144]	; (80022e8 <__swsetup_r+0xd8>)
 8002258:	429c      	cmp	r4, r3
 800225a:	bf08      	it	eq
 800225c:	68ec      	ldreq	r4, [r5, #12]
 800225e:	e7e6      	b.n	800222e <__swsetup_r+0x1e>
 8002260:	0758      	lsls	r0, r3, #29
 8002262:	d512      	bpl.n	800228a <__swsetup_r+0x7a>
 8002264:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002266:	b141      	cbz	r1, 800227a <__swsetup_r+0x6a>
 8002268:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800226c:	4299      	cmp	r1, r3
 800226e:	d002      	beq.n	8002276 <__swsetup_r+0x66>
 8002270:	4630      	mov	r0, r6
 8002272:	f000 fa57 	bl	8002724 <_free_r>
 8002276:	2300      	movs	r3, #0
 8002278:	6363      	str	r3, [r4, #52]	; 0x34
 800227a:	89a3      	ldrh	r3, [r4, #12]
 800227c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002280:	81a3      	strh	r3, [r4, #12]
 8002282:	2300      	movs	r3, #0
 8002284:	6063      	str	r3, [r4, #4]
 8002286:	6923      	ldr	r3, [r4, #16]
 8002288:	6023      	str	r3, [r4, #0]
 800228a:	89a3      	ldrh	r3, [r4, #12]
 800228c:	f043 0308 	orr.w	r3, r3, #8
 8002290:	81a3      	strh	r3, [r4, #12]
 8002292:	6923      	ldr	r3, [r4, #16]
 8002294:	b94b      	cbnz	r3, 80022aa <__swsetup_r+0x9a>
 8002296:	89a3      	ldrh	r3, [r4, #12]
 8002298:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800229c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022a0:	d003      	beq.n	80022aa <__swsetup_r+0x9a>
 80022a2:	4621      	mov	r1, r4
 80022a4:	4630      	mov	r0, r6
 80022a6:	f000 f9fd 	bl	80026a4 <__smakebuf_r>
 80022aa:	89a0      	ldrh	r0, [r4, #12]
 80022ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80022b0:	f010 0301 	ands.w	r3, r0, #1
 80022b4:	d00a      	beq.n	80022cc <__swsetup_r+0xbc>
 80022b6:	2300      	movs	r3, #0
 80022b8:	60a3      	str	r3, [r4, #8]
 80022ba:	6963      	ldr	r3, [r4, #20]
 80022bc:	425b      	negs	r3, r3
 80022be:	61a3      	str	r3, [r4, #24]
 80022c0:	6923      	ldr	r3, [r4, #16]
 80022c2:	b943      	cbnz	r3, 80022d6 <__swsetup_r+0xc6>
 80022c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80022c8:	d1ba      	bne.n	8002240 <__swsetup_r+0x30>
 80022ca:	bd70      	pop	{r4, r5, r6, pc}
 80022cc:	0781      	lsls	r1, r0, #30
 80022ce:	bf58      	it	pl
 80022d0:	6963      	ldrpl	r3, [r4, #20]
 80022d2:	60a3      	str	r3, [r4, #8]
 80022d4:	e7f4      	b.n	80022c0 <__swsetup_r+0xb0>
 80022d6:	2000      	movs	r0, #0
 80022d8:	e7f7      	b.n	80022ca <__swsetup_r+0xba>
 80022da:	bf00      	nop
 80022dc:	2000000c 	.word	0x2000000c
 80022e0:	08002ae4 	.word	0x08002ae4
 80022e4:	08002b04 	.word	0x08002b04
 80022e8:	08002ac4 	.word	0x08002ac4

080022ec <__sflush_r>:
 80022ec:	898a      	ldrh	r2, [r1, #12]
 80022ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022f0:	4605      	mov	r5, r0
 80022f2:	0710      	lsls	r0, r2, #28
 80022f4:	460c      	mov	r4, r1
 80022f6:	d457      	bmi.n	80023a8 <__sflush_r+0xbc>
 80022f8:	684b      	ldr	r3, [r1, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	dc04      	bgt.n	8002308 <__sflush_r+0x1c>
 80022fe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002300:	2b00      	cmp	r3, #0
 8002302:	dc01      	bgt.n	8002308 <__sflush_r+0x1c>
 8002304:	2000      	movs	r0, #0
 8002306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002308:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800230a:	2e00      	cmp	r6, #0
 800230c:	d0fa      	beq.n	8002304 <__sflush_r+0x18>
 800230e:	2300      	movs	r3, #0
 8002310:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002314:	682f      	ldr	r7, [r5, #0]
 8002316:	602b      	str	r3, [r5, #0]
 8002318:	d032      	beq.n	8002380 <__sflush_r+0x94>
 800231a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800231c:	89a3      	ldrh	r3, [r4, #12]
 800231e:	075a      	lsls	r2, r3, #29
 8002320:	d505      	bpl.n	800232e <__sflush_r+0x42>
 8002322:	6863      	ldr	r3, [r4, #4]
 8002324:	1ac0      	subs	r0, r0, r3
 8002326:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002328:	b10b      	cbz	r3, 800232e <__sflush_r+0x42>
 800232a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800232c:	1ac0      	subs	r0, r0, r3
 800232e:	2300      	movs	r3, #0
 8002330:	4602      	mov	r2, r0
 8002332:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002334:	4628      	mov	r0, r5
 8002336:	6a21      	ldr	r1, [r4, #32]
 8002338:	47b0      	blx	r6
 800233a:	1c43      	adds	r3, r0, #1
 800233c:	89a3      	ldrh	r3, [r4, #12]
 800233e:	d106      	bne.n	800234e <__sflush_r+0x62>
 8002340:	6829      	ldr	r1, [r5, #0]
 8002342:	291d      	cmp	r1, #29
 8002344:	d82c      	bhi.n	80023a0 <__sflush_r+0xb4>
 8002346:	4a29      	ldr	r2, [pc, #164]	; (80023ec <__sflush_r+0x100>)
 8002348:	40ca      	lsrs	r2, r1
 800234a:	07d6      	lsls	r6, r2, #31
 800234c:	d528      	bpl.n	80023a0 <__sflush_r+0xb4>
 800234e:	2200      	movs	r2, #0
 8002350:	6062      	str	r2, [r4, #4]
 8002352:	6922      	ldr	r2, [r4, #16]
 8002354:	04d9      	lsls	r1, r3, #19
 8002356:	6022      	str	r2, [r4, #0]
 8002358:	d504      	bpl.n	8002364 <__sflush_r+0x78>
 800235a:	1c42      	adds	r2, r0, #1
 800235c:	d101      	bne.n	8002362 <__sflush_r+0x76>
 800235e:	682b      	ldr	r3, [r5, #0]
 8002360:	b903      	cbnz	r3, 8002364 <__sflush_r+0x78>
 8002362:	6560      	str	r0, [r4, #84]	; 0x54
 8002364:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002366:	602f      	str	r7, [r5, #0]
 8002368:	2900      	cmp	r1, #0
 800236a:	d0cb      	beq.n	8002304 <__sflush_r+0x18>
 800236c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002370:	4299      	cmp	r1, r3
 8002372:	d002      	beq.n	800237a <__sflush_r+0x8e>
 8002374:	4628      	mov	r0, r5
 8002376:	f000 f9d5 	bl	8002724 <_free_r>
 800237a:	2000      	movs	r0, #0
 800237c:	6360      	str	r0, [r4, #52]	; 0x34
 800237e:	e7c2      	b.n	8002306 <__sflush_r+0x1a>
 8002380:	6a21      	ldr	r1, [r4, #32]
 8002382:	2301      	movs	r3, #1
 8002384:	4628      	mov	r0, r5
 8002386:	47b0      	blx	r6
 8002388:	1c41      	adds	r1, r0, #1
 800238a:	d1c7      	bne.n	800231c <__sflush_r+0x30>
 800238c:	682b      	ldr	r3, [r5, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d0c4      	beq.n	800231c <__sflush_r+0x30>
 8002392:	2b1d      	cmp	r3, #29
 8002394:	d001      	beq.n	800239a <__sflush_r+0xae>
 8002396:	2b16      	cmp	r3, #22
 8002398:	d101      	bne.n	800239e <__sflush_r+0xb2>
 800239a:	602f      	str	r7, [r5, #0]
 800239c:	e7b2      	b.n	8002304 <__sflush_r+0x18>
 800239e:	89a3      	ldrh	r3, [r4, #12]
 80023a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023a4:	81a3      	strh	r3, [r4, #12]
 80023a6:	e7ae      	b.n	8002306 <__sflush_r+0x1a>
 80023a8:	690f      	ldr	r7, [r1, #16]
 80023aa:	2f00      	cmp	r7, #0
 80023ac:	d0aa      	beq.n	8002304 <__sflush_r+0x18>
 80023ae:	0793      	lsls	r3, r2, #30
 80023b0:	bf18      	it	ne
 80023b2:	2300      	movne	r3, #0
 80023b4:	680e      	ldr	r6, [r1, #0]
 80023b6:	bf08      	it	eq
 80023b8:	694b      	ldreq	r3, [r1, #20]
 80023ba:	1bf6      	subs	r6, r6, r7
 80023bc:	600f      	str	r7, [r1, #0]
 80023be:	608b      	str	r3, [r1, #8]
 80023c0:	2e00      	cmp	r6, #0
 80023c2:	dd9f      	ble.n	8002304 <__sflush_r+0x18>
 80023c4:	4633      	mov	r3, r6
 80023c6:	463a      	mov	r2, r7
 80023c8:	4628      	mov	r0, r5
 80023ca:	6a21      	ldr	r1, [r4, #32]
 80023cc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80023d0:	47e0      	blx	ip
 80023d2:	2800      	cmp	r0, #0
 80023d4:	dc06      	bgt.n	80023e4 <__sflush_r+0xf8>
 80023d6:	89a3      	ldrh	r3, [r4, #12]
 80023d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023e0:	81a3      	strh	r3, [r4, #12]
 80023e2:	e790      	b.n	8002306 <__sflush_r+0x1a>
 80023e4:	4407      	add	r7, r0
 80023e6:	1a36      	subs	r6, r6, r0
 80023e8:	e7ea      	b.n	80023c0 <__sflush_r+0xd4>
 80023ea:	bf00      	nop
 80023ec:	20400001 	.word	0x20400001

080023f0 <_fflush_r>:
 80023f0:	b538      	push	{r3, r4, r5, lr}
 80023f2:	690b      	ldr	r3, [r1, #16]
 80023f4:	4605      	mov	r5, r0
 80023f6:	460c      	mov	r4, r1
 80023f8:	b913      	cbnz	r3, 8002400 <_fflush_r+0x10>
 80023fa:	2500      	movs	r5, #0
 80023fc:	4628      	mov	r0, r5
 80023fe:	bd38      	pop	{r3, r4, r5, pc}
 8002400:	b118      	cbz	r0, 800240a <_fflush_r+0x1a>
 8002402:	6983      	ldr	r3, [r0, #24]
 8002404:	b90b      	cbnz	r3, 800240a <_fflush_r+0x1a>
 8002406:	f000 f887 	bl	8002518 <__sinit>
 800240a:	4b14      	ldr	r3, [pc, #80]	; (800245c <_fflush_r+0x6c>)
 800240c:	429c      	cmp	r4, r3
 800240e:	d11b      	bne.n	8002448 <_fflush_r+0x58>
 8002410:	686c      	ldr	r4, [r5, #4]
 8002412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0ef      	beq.n	80023fa <_fflush_r+0xa>
 800241a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800241c:	07d0      	lsls	r0, r2, #31
 800241e:	d404      	bmi.n	800242a <_fflush_r+0x3a>
 8002420:	0599      	lsls	r1, r3, #22
 8002422:	d402      	bmi.n	800242a <_fflush_r+0x3a>
 8002424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002426:	f000 f915 	bl	8002654 <__retarget_lock_acquire_recursive>
 800242a:	4628      	mov	r0, r5
 800242c:	4621      	mov	r1, r4
 800242e:	f7ff ff5d 	bl	80022ec <__sflush_r>
 8002432:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002434:	4605      	mov	r5, r0
 8002436:	07da      	lsls	r2, r3, #31
 8002438:	d4e0      	bmi.n	80023fc <_fflush_r+0xc>
 800243a:	89a3      	ldrh	r3, [r4, #12]
 800243c:	059b      	lsls	r3, r3, #22
 800243e:	d4dd      	bmi.n	80023fc <_fflush_r+0xc>
 8002440:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002442:	f000 f908 	bl	8002656 <__retarget_lock_release_recursive>
 8002446:	e7d9      	b.n	80023fc <_fflush_r+0xc>
 8002448:	4b05      	ldr	r3, [pc, #20]	; (8002460 <_fflush_r+0x70>)
 800244a:	429c      	cmp	r4, r3
 800244c:	d101      	bne.n	8002452 <_fflush_r+0x62>
 800244e:	68ac      	ldr	r4, [r5, #8]
 8002450:	e7df      	b.n	8002412 <_fflush_r+0x22>
 8002452:	4b04      	ldr	r3, [pc, #16]	; (8002464 <_fflush_r+0x74>)
 8002454:	429c      	cmp	r4, r3
 8002456:	bf08      	it	eq
 8002458:	68ec      	ldreq	r4, [r5, #12]
 800245a:	e7da      	b.n	8002412 <_fflush_r+0x22>
 800245c:	08002ae4 	.word	0x08002ae4
 8002460:	08002b04 	.word	0x08002b04
 8002464:	08002ac4 	.word	0x08002ac4

08002468 <std>:
 8002468:	2300      	movs	r3, #0
 800246a:	b510      	push	{r4, lr}
 800246c:	4604      	mov	r4, r0
 800246e:	e9c0 3300 	strd	r3, r3, [r0]
 8002472:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002476:	6083      	str	r3, [r0, #8]
 8002478:	8181      	strh	r1, [r0, #12]
 800247a:	6643      	str	r3, [r0, #100]	; 0x64
 800247c:	81c2      	strh	r2, [r0, #14]
 800247e:	6183      	str	r3, [r0, #24]
 8002480:	4619      	mov	r1, r3
 8002482:	2208      	movs	r2, #8
 8002484:	305c      	adds	r0, #92	; 0x5c
 8002486:	f7ff fdf3 	bl	8002070 <memset>
 800248a:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <std+0x38>)
 800248c:	6224      	str	r4, [r4, #32]
 800248e:	6263      	str	r3, [r4, #36]	; 0x24
 8002490:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <std+0x3c>)
 8002492:	62a3      	str	r3, [r4, #40]	; 0x28
 8002494:	4b04      	ldr	r3, [pc, #16]	; (80024a8 <std+0x40>)
 8002496:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002498:	4b04      	ldr	r3, [pc, #16]	; (80024ac <std+0x44>)
 800249a:	6323      	str	r3, [r4, #48]	; 0x30
 800249c:	bd10      	pop	{r4, pc}
 800249e:	bf00      	nop
 80024a0:	080028fd 	.word	0x080028fd
 80024a4:	0800291f 	.word	0x0800291f
 80024a8:	08002957 	.word	0x08002957
 80024ac:	0800297b 	.word	0x0800297b

080024b0 <_cleanup_r>:
 80024b0:	4901      	ldr	r1, [pc, #4]	; (80024b8 <_cleanup_r+0x8>)
 80024b2:	f000 b8af 	b.w	8002614 <_fwalk_reent>
 80024b6:	bf00      	nop
 80024b8:	080023f1 	.word	0x080023f1

080024bc <__sfmoreglue>:
 80024bc:	2268      	movs	r2, #104	; 0x68
 80024be:	b570      	push	{r4, r5, r6, lr}
 80024c0:	1e4d      	subs	r5, r1, #1
 80024c2:	4355      	muls	r5, r2
 80024c4:	460e      	mov	r6, r1
 80024c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80024ca:	f000 f993 	bl	80027f4 <_malloc_r>
 80024ce:	4604      	mov	r4, r0
 80024d0:	b140      	cbz	r0, 80024e4 <__sfmoreglue+0x28>
 80024d2:	2100      	movs	r1, #0
 80024d4:	e9c0 1600 	strd	r1, r6, [r0]
 80024d8:	300c      	adds	r0, #12
 80024da:	60a0      	str	r0, [r4, #8]
 80024dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80024e0:	f7ff fdc6 	bl	8002070 <memset>
 80024e4:	4620      	mov	r0, r4
 80024e6:	bd70      	pop	{r4, r5, r6, pc}

080024e8 <__sfp_lock_acquire>:
 80024e8:	4801      	ldr	r0, [pc, #4]	; (80024f0 <__sfp_lock_acquire+0x8>)
 80024ea:	f000 b8b3 	b.w	8002654 <__retarget_lock_acquire_recursive>
 80024ee:	bf00      	nop
 80024f0:	20000135 	.word	0x20000135

080024f4 <__sfp_lock_release>:
 80024f4:	4801      	ldr	r0, [pc, #4]	; (80024fc <__sfp_lock_release+0x8>)
 80024f6:	f000 b8ae 	b.w	8002656 <__retarget_lock_release_recursive>
 80024fa:	bf00      	nop
 80024fc:	20000135 	.word	0x20000135

08002500 <__sinit_lock_acquire>:
 8002500:	4801      	ldr	r0, [pc, #4]	; (8002508 <__sinit_lock_acquire+0x8>)
 8002502:	f000 b8a7 	b.w	8002654 <__retarget_lock_acquire_recursive>
 8002506:	bf00      	nop
 8002508:	20000136 	.word	0x20000136

0800250c <__sinit_lock_release>:
 800250c:	4801      	ldr	r0, [pc, #4]	; (8002514 <__sinit_lock_release+0x8>)
 800250e:	f000 b8a2 	b.w	8002656 <__retarget_lock_release_recursive>
 8002512:	bf00      	nop
 8002514:	20000136 	.word	0x20000136

08002518 <__sinit>:
 8002518:	b510      	push	{r4, lr}
 800251a:	4604      	mov	r4, r0
 800251c:	f7ff fff0 	bl	8002500 <__sinit_lock_acquire>
 8002520:	69a3      	ldr	r3, [r4, #24]
 8002522:	b11b      	cbz	r3, 800252c <__sinit+0x14>
 8002524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002528:	f7ff bff0 	b.w	800250c <__sinit_lock_release>
 800252c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002530:	6523      	str	r3, [r4, #80]	; 0x50
 8002532:	4b13      	ldr	r3, [pc, #76]	; (8002580 <__sinit+0x68>)
 8002534:	4a13      	ldr	r2, [pc, #76]	; (8002584 <__sinit+0x6c>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	62a2      	str	r2, [r4, #40]	; 0x28
 800253a:	42a3      	cmp	r3, r4
 800253c:	bf08      	it	eq
 800253e:	2301      	moveq	r3, #1
 8002540:	4620      	mov	r0, r4
 8002542:	bf08      	it	eq
 8002544:	61a3      	streq	r3, [r4, #24]
 8002546:	f000 f81f 	bl	8002588 <__sfp>
 800254a:	6060      	str	r0, [r4, #4]
 800254c:	4620      	mov	r0, r4
 800254e:	f000 f81b 	bl	8002588 <__sfp>
 8002552:	60a0      	str	r0, [r4, #8]
 8002554:	4620      	mov	r0, r4
 8002556:	f000 f817 	bl	8002588 <__sfp>
 800255a:	2200      	movs	r2, #0
 800255c:	2104      	movs	r1, #4
 800255e:	60e0      	str	r0, [r4, #12]
 8002560:	6860      	ldr	r0, [r4, #4]
 8002562:	f7ff ff81 	bl	8002468 <std>
 8002566:	2201      	movs	r2, #1
 8002568:	2109      	movs	r1, #9
 800256a:	68a0      	ldr	r0, [r4, #8]
 800256c:	f7ff ff7c 	bl	8002468 <std>
 8002570:	2202      	movs	r2, #2
 8002572:	2112      	movs	r1, #18
 8002574:	68e0      	ldr	r0, [r4, #12]
 8002576:	f7ff ff77 	bl	8002468 <std>
 800257a:	2301      	movs	r3, #1
 800257c:	61a3      	str	r3, [r4, #24]
 800257e:	e7d1      	b.n	8002524 <__sinit+0xc>
 8002580:	08002ac0 	.word	0x08002ac0
 8002584:	080024b1 	.word	0x080024b1

08002588 <__sfp>:
 8002588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800258a:	4607      	mov	r7, r0
 800258c:	f7ff ffac 	bl	80024e8 <__sfp_lock_acquire>
 8002590:	4b1e      	ldr	r3, [pc, #120]	; (800260c <__sfp+0x84>)
 8002592:	681e      	ldr	r6, [r3, #0]
 8002594:	69b3      	ldr	r3, [r6, #24]
 8002596:	b913      	cbnz	r3, 800259e <__sfp+0x16>
 8002598:	4630      	mov	r0, r6
 800259a:	f7ff ffbd 	bl	8002518 <__sinit>
 800259e:	3648      	adds	r6, #72	; 0x48
 80025a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80025a4:	3b01      	subs	r3, #1
 80025a6:	d503      	bpl.n	80025b0 <__sfp+0x28>
 80025a8:	6833      	ldr	r3, [r6, #0]
 80025aa:	b30b      	cbz	r3, 80025f0 <__sfp+0x68>
 80025ac:	6836      	ldr	r6, [r6, #0]
 80025ae:	e7f7      	b.n	80025a0 <__sfp+0x18>
 80025b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80025b4:	b9d5      	cbnz	r5, 80025ec <__sfp+0x64>
 80025b6:	4b16      	ldr	r3, [pc, #88]	; (8002610 <__sfp+0x88>)
 80025b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80025bc:	60e3      	str	r3, [r4, #12]
 80025be:	6665      	str	r5, [r4, #100]	; 0x64
 80025c0:	f000 f847 	bl	8002652 <__retarget_lock_init_recursive>
 80025c4:	f7ff ff96 	bl	80024f4 <__sfp_lock_release>
 80025c8:	2208      	movs	r2, #8
 80025ca:	4629      	mov	r1, r5
 80025cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80025d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80025d4:	6025      	str	r5, [r4, #0]
 80025d6:	61a5      	str	r5, [r4, #24]
 80025d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80025dc:	f7ff fd48 	bl	8002070 <memset>
 80025e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80025e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80025e8:	4620      	mov	r0, r4
 80025ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025ec:	3468      	adds	r4, #104	; 0x68
 80025ee:	e7d9      	b.n	80025a4 <__sfp+0x1c>
 80025f0:	2104      	movs	r1, #4
 80025f2:	4638      	mov	r0, r7
 80025f4:	f7ff ff62 	bl	80024bc <__sfmoreglue>
 80025f8:	4604      	mov	r4, r0
 80025fa:	6030      	str	r0, [r6, #0]
 80025fc:	2800      	cmp	r0, #0
 80025fe:	d1d5      	bne.n	80025ac <__sfp+0x24>
 8002600:	f7ff ff78 	bl	80024f4 <__sfp_lock_release>
 8002604:	230c      	movs	r3, #12
 8002606:	603b      	str	r3, [r7, #0]
 8002608:	e7ee      	b.n	80025e8 <__sfp+0x60>
 800260a:	bf00      	nop
 800260c:	08002ac0 	.word	0x08002ac0
 8002610:	ffff0001 	.word	0xffff0001

08002614 <_fwalk_reent>:
 8002614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002618:	4606      	mov	r6, r0
 800261a:	4688      	mov	r8, r1
 800261c:	2700      	movs	r7, #0
 800261e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002622:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002626:	f1b9 0901 	subs.w	r9, r9, #1
 800262a:	d505      	bpl.n	8002638 <_fwalk_reent+0x24>
 800262c:	6824      	ldr	r4, [r4, #0]
 800262e:	2c00      	cmp	r4, #0
 8002630:	d1f7      	bne.n	8002622 <_fwalk_reent+0xe>
 8002632:	4638      	mov	r0, r7
 8002634:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002638:	89ab      	ldrh	r3, [r5, #12]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d907      	bls.n	800264e <_fwalk_reent+0x3a>
 800263e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002642:	3301      	adds	r3, #1
 8002644:	d003      	beq.n	800264e <_fwalk_reent+0x3a>
 8002646:	4629      	mov	r1, r5
 8002648:	4630      	mov	r0, r6
 800264a:	47c0      	blx	r8
 800264c:	4307      	orrs	r7, r0
 800264e:	3568      	adds	r5, #104	; 0x68
 8002650:	e7e9      	b.n	8002626 <_fwalk_reent+0x12>

08002652 <__retarget_lock_init_recursive>:
 8002652:	4770      	bx	lr

08002654 <__retarget_lock_acquire_recursive>:
 8002654:	4770      	bx	lr

08002656 <__retarget_lock_release_recursive>:
 8002656:	4770      	bx	lr

08002658 <__swhatbuf_r>:
 8002658:	b570      	push	{r4, r5, r6, lr}
 800265a:	460e      	mov	r6, r1
 800265c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002660:	4614      	mov	r4, r2
 8002662:	2900      	cmp	r1, #0
 8002664:	461d      	mov	r5, r3
 8002666:	b096      	sub	sp, #88	; 0x58
 8002668:	da08      	bge.n	800267c <__swhatbuf_r+0x24>
 800266a:	2200      	movs	r2, #0
 800266c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002670:	602a      	str	r2, [r5, #0]
 8002672:	061a      	lsls	r2, r3, #24
 8002674:	d410      	bmi.n	8002698 <__swhatbuf_r+0x40>
 8002676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800267a:	e00e      	b.n	800269a <__swhatbuf_r+0x42>
 800267c:	466a      	mov	r2, sp
 800267e:	f000 f9a3 	bl	80029c8 <_fstat_r>
 8002682:	2800      	cmp	r0, #0
 8002684:	dbf1      	blt.n	800266a <__swhatbuf_r+0x12>
 8002686:	9a01      	ldr	r2, [sp, #4]
 8002688:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800268c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002690:	425a      	negs	r2, r3
 8002692:	415a      	adcs	r2, r3
 8002694:	602a      	str	r2, [r5, #0]
 8002696:	e7ee      	b.n	8002676 <__swhatbuf_r+0x1e>
 8002698:	2340      	movs	r3, #64	; 0x40
 800269a:	2000      	movs	r0, #0
 800269c:	6023      	str	r3, [r4, #0]
 800269e:	b016      	add	sp, #88	; 0x58
 80026a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080026a4 <__smakebuf_r>:
 80026a4:	898b      	ldrh	r3, [r1, #12]
 80026a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80026a8:	079d      	lsls	r5, r3, #30
 80026aa:	4606      	mov	r6, r0
 80026ac:	460c      	mov	r4, r1
 80026ae:	d507      	bpl.n	80026c0 <__smakebuf_r+0x1c>
 80026b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80026b4:	6023      	str	r3, [r4, #0]
 80026b6:	6123      	str	r3, [r4, #16]
 80026b8:	2301      	movs	r3, #1
 80026ba:	6163      	str	r3, [r4, #20]
 80026bc:	b002      	add	sp, #8
 80026be:	bd70      	pop	{r4, r5, r6, pc}
 80026c0:	466a      	mov	r2, sp
 80026c2:	ab01      	add	r3, sp, #4
 80026c4:	f7ff ffc8 	bl	8002658 <__swhatbuf_r>
 80026c8:	9900      	ldr	r1, [sp, #0]
 80026ca:	4605      	mov	r5, r0
 80026cc:	4630      	mov	r0, r6
 80026ce:	f000 f891 	bl	80027f4 <_malloc_r>
 80026d2:	b948      	cbnz	r0, 80026e8 <__smakebuf_r+0x44>
 80026d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026d8:	059a      	lsls	r2, r3, #22
 80026da:	d4ef      	bmi.n	80026bc <__smakebuf_r+0x18>
 80026dc:	f023 0303 	bic.w	r3, r3, #3
 80026e0:	f043 0302 	orr.w	r3, r3, #2
 80026e4:	81a3      	strh	r3, [r4, #12]
 80026e6:	e7e3      	b.n	80026b0 <__smakebuf_r+0xc>
 80026e8:	4b0d      	ldr	r3, [pc, #52]	; (8002720 <__smakebuf_r+0x7c>)
 80026ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80026ec:	89a3      	ldrh	r3, [r4, #12]
 80026ee:	6020      	str	r0, [r4, #0]
 80026f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026f4:	81a3      	strh	r3, [r4, #12]
 80026f6:	9b00      	ldr	r3, [sp, #0]
 80026f8:	6120      	str	r0, [r4, #16]
 80026fa:	6163      	str	r3, [r4, #20]
 80026fc:	9b01      	ldr	r3, [sp, #4]
 80026fe:	b15b      	cbz	r3, 8002718 <__smakebuf_r+0x74>
 8002700:	4630      	mov	r0, r6
 8002702:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002706:	f000 f971 	bl	80029ec <_isatty_r>
 800270a:	b128      	cbz	r0, 8002718 <__smakebuf_r+0x74>
 800270c:	89a3      	ldrh	r3, [r4, #12]
 800270e:	f023 0303 	bic.w	r3, r3, #3
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	81a3      	strh	r3, [r4, #12]
 8002718:	89a0      	ldrh	r0, [r4, #12]
 800271a:	4305      	orrs	r5, r0
 800271c:	81a5      	strh	r5, [r4, #12]
 800271e:	e7cd      	b.n	80026bc <__smakebuf_r+0x18>
 8002720:	080024b1 	.word	0x080024b1

08002724 <_free_r>:
 8002724:	b538      	push	{r3, r4, r5, lr}
 8002726:	4605      	mov	r5, r0
 8002728:	2900      	cmp	r1, #0
 800272a:	d040      	beq.n	80027ae <_free_r+0x8a>
 800272c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002730:	1f0c      	subs	r4, r1, #4
 8002732:	2b00      	cmp	r3, #0
 8002734:	bfb8      	it	lt
 8002736:	18e4      	addlt	r4, r4, r3
 8002738:	f000 f97a 	bl	8002a30 <__malloc_lock>
 800273c:	4a1c      	ldr	r2, [pc, #112]	; (80027b0 <_free_r+0x8c>)
 800273e:	6813      	ldr	r3, [r2, #0]
 8002740:	b933      	cbnz	r3, 8002750 <_free_r+0x2c>
 8002742:	6063      	str	r3, [r4, #4]
 8002744:	6014      	str	r4, [r2, #0]
 8002746:	4628      	mov	r0, r5
 8002748:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800274c:	f000 b976 	b.w	8002a3c <__malloc_unlock>
 8002750:	42a3      	cmp	r3, r4
 8002752:	d908      	bls.n	8002766 <_free_r+0x42>
 8002754:	6820      	ldr	r0, [r4, #0]
 8002756:	1821      	adds	r1, r4, r0
 8002758:	428b      	cmp	r3, r1
 800275a:	bf01      	itttt	eq
 800275c:	6819      	ldreq	r1, [r3, #0]
 800275e:	685b      	ldreq	r3, [r3, #4]
 8002760:	1809      	addeq	r1, r1, r0
 8002762:	6021      	streq	r1, [r4, #0]
 8002764:	e7ed      	b.n	8002742 <_free_r+0x1e>
 8002766:	461a      	mov	r2, r3
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	b10b      	cbz	r3, 8002770 <_free_r+0x4c>
 800276c:	42a3      	cmp	r3, r4
 800276e:	d9fa      	bls.n	8002766 <_free_r+0x42>
 8002770:	6811      	ldr	r1, [r2, #0]
 8002772:	1850      	adds	r0, r2, r1
 8002774:	42a0      	cmp	r0, r4
 8002776:	d10b      	bne.n	8002790 <_free_r+0x6c>
 8002778:	6820      	ldr	r0, [r4, #0]
 800277a:	4401      	add	r1, r0
 800277c:	1850      	adds	r0, r2, r1
 800277e:	4283      	cmp	r3, r0
 8002780:	6011      	str	r1, [r2, #0]
 8002782:	d1e0      	bne.n	8002746 <_free_r+0x22>
 8002784:	6818      	ldr	r0, [r3, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	4401      	add	r1, r0
 800278a:	6011      	str	r1, [r2, #0]
 800278c:	6053      	str	r3, [r2, #4]
 800278e:	e7da      	b.n	8002746 <_free_r+0x22>
 8002790:	d902      	bls.n	8002798 <_free_r+0x74>
 8002792:	230c      	movs	r3, #12
 8002794:	602b      	str	r3, [r5, #0]
 8002796:	e7d6      	b.n	8002746 <_free_r+0x22>
 8002798:	6820      	ldr	r0, [r4, #0]
 800279a:	1821      	adds	r1, r4, r0
 800279c:	428b      	cmp	r3, r1
 800279e:	bf01      	itttt	eq
 80027a0:	6819      	ldreq	r1, [r3, #0]
 80027a2:	685b      	ldreq	r3, [r3, #4]
 80027a4:	1809      	addeq	r1, r1, r0
 80027a6:	6021      	streq	r1, [r4, #0]
 80027a8:	6063      	str	r3, [r4, #4]
 80027aa:	6054      	str	r4, [r2, #4]
 80027ac:	e7cb      	b.n	8002746 <_free_r+0x22>
 80027ae:	bd38      	pop	{r3, r4, r5, pc}
 80027b0:	20000138 	.word	0x20000138

080027b4 <sbrk_aligned>:
 80027b4:	b570      	push	{r4, r5, r6, lr}
 80027b6:	4e0e      	ldr	r6, [pc, #56]	; (80027f0 <sbrk_aligned+0x3c>)
 80027b8:	460c      	mov	r4, r1
 80027ba:	6831      	ldr	r1, [r6, #0]
 80027bc:	4605      	mov	r5, r0
 80027be:	b911      	cbnz	r1, 80027c6 <sbrk_aligned+0x12>
 80027c0:	f000 f88c 	bl	80028dc <_sbrk_r>
 80027c4:	6030      	str	r0, [r6, #0]
 80027c6:	4621      	mov	r1, r4
 80027c8:	4628      	mov	r0, r5
 80027ca:	f000 f887 	bl	80028dc <_sbrk_r>
 80027ce:	1c43      	adds	r3, r0, #1
 80027d0:	d00a      	beq.n	80027e8 <sbrk_aligned+0x34>
 80027d2:	1cc4      	adds	r4, r0, #3
 80027d4:	f024 0403 	bic.w	r4, r4, #3
 80027d8:	42a0      	cmp	r0, r4
 80027da:	d007      	beq.n	80027ec <sbrk_aligned+0x38>
 80027dc:	1a21      	subs	r1, r4, r0
 80027de:	4628      	mov	r0, r5
 80027e0:	f000 f87c 	bl	80028dc <_sbrk_r>
 80027e4:	3001      	adds	r0, #1
 80027e6:	d101      	bne.n	80027ec <sbrk_aligned+0x38>
 80027e8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80027ec:	4620      	mov	r0, r4
 80027ee:	bd70      	pop	{r4, r5, r6, pc}
 80027f0:	2000013c 	.word	0x2000013c

080027f4 <_malloc_r>:
 80027f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027f8:	1ccd      	adds	r5, r1, #3
 80027fa:	f025 0503 	bic.w	r5, r5, #3
 80027fe:	3508      	adds	r5, #8
 8002800:	2d0c      	cmp	r5, #12
 8002802:	bf38      	it	cc
 8002804:	250c      	movcc	r5, #12
 8002806:	2d00      	cmp	r5, #0
 8002808:	4607      	mov	r7, r0
 800280a:	db01      	blt.n	8002810 <_malloc_r+0x1c>
 800280c:	42a9      	cmp	r1, r5
 800280e:	d905      	bls.n	800281c <_malloc_r+0x28>
 8002810:	230c      	movs	r3, #12
 8002812:	2600      	movs	r6, #0
 8002814:	603b      	str	r3, [r7, #0]
 8002816:	4630      	mov	r0, r6
 8002818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800281c:	4e2e      	ldr	r6, [pc, #184]	; (80028d8 <_malloc_r+0xe4>)
 800281e:	f000 f907 	bl	8002a30 <__malloc_lock>
 8002822:	6833      	ldr	r3, [r6, #0]
 8002824:	461c      	mov	r4, r3
 8002826:	bb34      	cbnz	r4, 8002876 <_malloc_r+0x82>
 8002828:	4629      	mov	r1, r5
 800282a:	4638      	mov	r0, r7
 800282c:	f7ff ffc2 	bl	80027b4 <sbrk_aligned>
 8002830:	1c43      	adds	r3, r0, #1
 8002832:	4604      	mov	r4, r0
 8002834:	d14d      	bne.n	80028d2 <_malloc_r+0xde>
 8002836:	6834      	ldr	r4, [r6, #0]
 8002838:	4626      	mov	r6, r4
 800283a:	2e00      	cmp	r6, #0
 800283c:	d140      	bne.n	80028c0 <_malloc_r+0xcc>
 800283e:	6823      	ldr	r3, [r4, #0]
 8002840:	4631      	mov	r1, r6
 8002842:	4638      	mov	r0, r7
 8002844:	eb04 0803 	add.w	r8, r4, r3
 8002848:	f000 f848 	bl	80028dc <_sbrk_r>
 800284c:	4580      	cmp	r8, r0
 800284e:	d13a      	bne.n	80028c6 <_malloc_r+0xd2>
 8002850:	6821      	ldr	r1, [r4, #0]
 8002852:	3503      	adds	r5, #3
 8002854:	1a6d      	subs	r5, r5, r1
 8002856:	f025 0503 	bic.w	r5, r5, #3
 800285a:	3508      	adds	r5, #8
 800285c:	2d0c      	cmp	r5, #12
 800285e:	bf38      	it	cc
 8002860:	250c      	movcc	r5, #12
 8002862:	4638      	mov	r0, r7
 8002864:	4629      	mov	r1, r5
 8002866:	f7ff ffa5 	bl	80027b4 <sbrk_aligned>
 800286a:	3001      	adds	r0, #1
 800286c:	d02b      	beq.n	80028c6 <_malloc_r+0xd2>
 800286e:	6823      	ldr	r3, [r4, #0]
 8002870:	442b      	add	r3, r5
 8002872:	6023      	str	r3, [r4, #0]
 8002874:	e00e      	b.n	8002894 <_malloc_r+0xa0>
 8002876:	6822      	ldr	r2, [r4, #0]
 8002878:	1b52      	subs	r2, r2, r5
 800287a:	d41e      	bmi.n	80028ba <_malloc_r+0xc6>
 800287c:	2a0b      	cmp	r2, #11
 800287e:	d916      	bls.n	80028ae <_malloc_r+0xba>
 8002880:	1961      	adds	r1, r4, r5
 8002882:	42a3      	cmp	r3, r4
 8002884:	6025      	str	r5, [r4, #0]
 8002886:	bf18      	it	ne
 8002888:	6059      	strne	r1, [r3, #4]
 800288a:	6863      	ldr	r3, [r4, #4]
 800288c:	bf08      	it	eq
 800288e:	6031      	streq	r1, [r6, #0]
 8002890:	5162      	str	r2, [r4, r5]
 8002892:	604b      	str	r3, [r1, #4]
 8002894:	4638      	mov	r0, r7
 8002896:	f104 060b 	add.w	r6, r4, #11
 800289a:	f000 f8cf 	bl	8002a3c <__malloc_unlock>
 800289e:	f026 0607 	bic.w	r6, r6, #7
 80028a2:	1d23      	adds	r3, r4, #4
 80028a4:	1af2      	subs	r2, r6, r3
 80028a6:	d0b6      	beq.n	8002816 <_malloc_r+0x22>
 80028a8:	1b9b      	subs	r3, r3, r6
 80028aa:	50a3      	str	r3, [r4, r2]
 80028ac:	e7b3      	b.n	8002816 <_malloc_r+0x22>
 80028ae:	6862      	ldr	r2, [r4, #4]
 80028b0:	42a3      	cmp	r3, r4
 80028b2:	bf0c      	ite	eq
 80028b4:	6032      	streq	r2, [r6, #0]
 80028b6:	605a      	strne	r2, [r3, #4]
 80028b8:	e7ec      	b.n	8002894 <_malloc_r+0xa0>
 80028ba:	4623      	mov	r3, r4
 80028bc:	6864      	ldr	r4, [r4, #4]
 80028be:	e7b2      	b.n	8002826 <_malloc_r+0x32>
 80028c0:	4634      	mov	r4, r6
 80028c2:	6876      	ldr	r6, [r6, #4]
 80028c4:	e7b9      	b.n	800283a <_malloc_r+0x46>
 80028c6:	230c      	movs	r3, #12
 80028c8:	4638      	mov	r0, r7
 80028ca:	603b      	str	r3, [r7, #0]
 80028cc:	f000 f8b6 	bl	8002a3c <__malloc_unlock>
 80028d0:	e7a1      	b.n	8002816 <_malloc_r+0x22>
 80028d2:	6025      	str	r5, [r4, #0]
 80028d4:	e7de      	b.n	8002894 <_malloc_r+0xa0>
 80028d6:	bf00      	nop
 80028d8:	20000138 	.word	0x20000138

080028dc <_sbrk_r>:
 80028dc:	b538      	push	{r3, r4, r5, lr}
 80028de:	2300      	movs	r3, #0
 80028e0:	4d05      	ldr	r5, [pc, #20]	; (80028f8 <_sbrk_r+0x1c>)
 80028e2:	4604      	mov	r4, r0
 80028e4:	4608      	mov	r0, r1
 80028e6:	602b      	str	r3, [r5, #0]
 80028e8:	f7fd ffda 	bl	80008a0 <_sbrk>
 80028ec:	1c43      	adds	r3, r0, #1
 80028ee:	d102      	bne.n	80028f6 <_sbrk_r+0x1a>
 80028f0:	682b      	ldr	r3, [r5, #0]
 80028f2:	b103      	cbz	r3, 80028f6 <_sbrk_r+0x1a>
 80028f4:	6023      	str	r3, [r4, #0]
 80028f6:	bd38      	pop	{r3, r4, r5, pc}
 80028f8:	20000140 	.word	0x20000140

080028fc <__sread>:
 80028fc:	b510      	push	{r4, lr}
 80028fe:	460c      	mov	r4, r1
 8002900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002904:	f000 f8a0 	bl	8002a48 <_read_r>
 8002908:	2800      	cmp	r0, #0
 800290a:	bfab      	itete	ge
 800290c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800290e:	89a3      	ldrhlt	r3, [r4, #12]
 8002910:	181b      	addge	r3, r3, r0
 8002912:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002916:	bfac      	ite	ge
 8002918:	6563      	strge	r3, [r4, #84]	; 0x54
 800291a:	81a3      	strhlt	r3, [r4, #12]
 800291c:	bd10      	pop	{r4, pc}

0800291e <__swrite>:
 800291e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002922:	461f      	mov	r7, r3
 8002924:	898b      	ldrh	r3, [r1, #12]
 8002926:	4605      	mov	r5, r0
 8002928:	05db      	lsls	r3, r3, #23
 800292a:	460c      	mov	r4, r1
 800292c:	4616      	mov	r6, r2
 800292e:	d505      	bpl.n	800293c <__swrite+0x1e>
 8002930:	2302      	movs	r3, #2
 8002932:	2200      	movs	r2, #0
 8002934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002938:	f000 f868 	bl	8002a0c <_lseek_r>
 800293c:	89a3      	ldrh	r3, [r4, #12]
 800293e:	4632      	mov	r2, r6
 8002940:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002944:	81a3      	strh	r3, [r4, #12]
 8002946:	4628      	mov	r0, r5
 8002948:	463b      	mov	r3, r7
 800294a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800294e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002952:	f000 b817 	b.w	8002984 <_write_r>

08002956 <__sseek>:
 8002956:	b510      	push	{r4, lr}
 8002958:	460c      	mov	r4, r1
 800295a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800295e:	f000 f855 	bl	8002a0c <_lseek_r>
 8002962:	1c43      	adds	r3, r0, #1
 8002964:	89a3      	ldrh	r3, [r4, #12]
 8002966:	bf15      	itete	ne
 8002968:	6560      	strne	r0, [r4, #84]	; 0x54
 800296a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800296e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002972:	81a3      	strheq	r3, [r4, #12]
 8002974:	bf18      	it	ne
 8002976:	81a3      	strhne	r3, [r4, #12]
 8002978:	bd10      	pop	{r4, pc}

0800297a <__sclose>:
 800297a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800297e:	f000 b813 	b.w	80029a8 <_close_r>
	...

08002984 <_write_r>:
 8002984:	b538      	push	{r3, r4, r5, lr}
 8002986:	4604      	mov	r4, r0
 8002988:	4608      	mov	r0, r1
 800298a:	4611      	mov	r1, r2
 800298c:	2200      	movs	r2, #0
 800298e:	4d05      	ldr	r5, [pc, #20]	; (80029a4 <_write_r+0x20>)
 8002990:	602a      	str	r2, [r5, #0]
 8002992:	461a      	mov	r2, r3
 8002994:	f7fd fc00 	bl	8000198 <_write>
 8002998:	1c43      	adds	r3, r0, #1
 800299a:	d102      	bne.n	80029a2 <_write_r+0x1e>
 800299c:	682b      	ldr	r3, [r5, #0]
 800299e:	b103      	cbz	r3, 80029a2 <_write_r+0x1e>
 80029a0:	6023      	str	r3, [r4, #0]
 80029a2:	bd38      	pop	{r3, r4, r5, pc}
 80029a4:	20000140 	.word	0x20000140

080029a8 <_close_r>:
 80029a8:	b538      	push	{r3, r4, r5, lr}
 80029aa:	2300      	movs	r3, #0
 80029ac:	4d05      	ldr	r5, [pc, #20]	; (80029c4 <_close_r+0x1c>)
 80029ae:	4604      	mov	r4, r0
 80029b0:	4608      	mov	r0, r1
 80029b2:	602b      	str	r3, [r5, #0]
 80029b4:	f7fd ff43 	bl	800083e <_close>
 80029b8:	1c43      	adds	r3, r0, #1
 80029ba:	d102      	bne.n	80029c2 <_close_r+0x1a>
 80029bc:	682b      	ldr	r3, [r5, #0]
 80029be:	b103      	cbz	r3, 80029c2 <_close_r+0x1a>
 80029c0:	6023      	str	r3, [r4, #0]
 80029c2:	bd38      	pop	{r3, r4, r5, pc}
 80029c4:	20000140 	.word	0x20000140

080029c8 <_fstat_r>:
 80029c8:	b538      	push	{r3, r4, r5, lr}
 80029ca:	2300      	movs	r3, #0
 80029cc:	4d06      	ldr	r5, [pc, #24]	; (80029e8 <_fstat_r+0x20>)
 80029ce:	4604      	mov	r4, r0
 80029d0:	4608      	mov	r0, r1
 80029d2:	4611      	mov	r1, r2
 80029d4:	602b      	str	r3, [r5, #0]
 80029d6:	f7fd ff3d 	bl	8000854 <_fstat>
 80029da:	1c43      	adds	r3, r0, #1
 80029dc:	d102      	bne.n	80029e4 <_fstat_r+0x1c>
 80029de:	682b      	ldr	r3, [r5, #0]
 80029e0:	b103      	cbz	r3, 80029e4 <_fstat_r+0x1c>
 80029e2:	6023      	str	r3, [r4, #0]
 80029e4:	bd38      	pop	{r3, r4, r5, pc}
 80029e6:	bf00      	nop
 80029e8:	20000140 	.word	0x20000140

080029ec <_isatty_r>:
 80029ec:	b538      	push	{r3, r4, r5, lr}
 80029ee:	2300      	movs	r3, #0
 80029f0:	4d05      	ldr	r5, [pc, #20]	; (8002a08 <_isatty_r+0x1c>)
 80029f2:	4604      	mov	r4, r0
 80029f4:	4608      	mov	r0, r1
 80029f6:	602b      	str	r3, [r5, #0]
 80029f8:	f7fd ff3b 	bl	8000872 <_isatty>
 80029fc:	1c43      	adds	r3, r0, #1
 80029fe:	d102      	bne.n	8002a06 <_isatty_r+0x1a>
 8002a00:	682b      	ldr	r3, [r5, #0]
 8002a02:	b103      	cbz	r3, 8002a06 <_isatty_r+0x1a>
 8002a04:	6023      	str	r3, [r4, #0]
 8002a06:	bd38      	pop	{r3, r4, r5, pc}
 8002a08:	20000140 	.word	0x20000140

08002a0c <_lseek_r>:
 8002a0c:	b538      	push	{r3, r4, r5, lr}
 8002a0e:	4604      	mov	r4, r0
 8002a10:	4608      	mov	r0, r1
 8002a12:	4611      	mov	r1, r2
 8002a14:	2200      	movs	r2, #0
 8002a16:	4d05      	ldr	r5, [pc, #20]	; (8002a2c <_lseek_r+0x20>)
 8002a18:	602a      	str	r2, [r5, #0]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	f7fd ff33 	bl	8000886 <_lseek>
 8002a20:	1c43      	adds	r3, r0, #1
 8002a22:	d102      	bne.n	8002a2a <_lseek_r+0x1e>
 8002a24:	682b      	ldr	r3, [r5, #0]
 8002a26:	b103      	cbz	r3, 8002a2a <_lseek_r+0x1e>
 8002a28:	6023      	str	r3, [r4, #0]
 8002a2a:	bd38      	pop	{r3, r4, r5, pc}
 8002a2c:	20000140 	.word	0x20000140

08002a30 <__malloc_lock>:
 8002a30:	4801      	ldr	r0, [pc, #4]	; (8002a38 <__malloc_lock+0x8>)
 8002a32:	f7ff be0f 	b.w	8002654 <__retarget_lock_acquire_recursive>
 8002a36:	bf00      	nop
 8002a38:	20000134 	.word	0x20000134

08002a3c <__malloc_unlock>:
 8002a3c:	4801      	ldr	r0, [pc, #4]	; (8002a44 <__malloc_unlock+0x8>)
 8002a3e:	f7ff be0a 	b.w	8002656 <__retarget_lock_release_recursive>
 8002a42:	bf00      	nop
 8002a44:	20000134 	.word	0x20000134

08002a48 <_read_r>:
 8002a48:	b538      	push	{r3, r4, r5, lr}
 8002a4a:	4604      	mov	r4, r0
 8002a4c:	4608      	mov	r0, r1
 8002a4e:	4611      	mov	r1, r2
 8002a50:	2200      	movs	r2, #0
 8002a52:	4d05      	ldr	r5, [pc, #20]	; (8002a68 <_read_r+0x20>)
 8002a54:	602a      	str	r2, [r5, #0]
 8002a56:	461a      	mov	r2, r3
 8002a58:	f7fd fed4 	bl	8000804 <_read>
 8002a5c:	1c43      	adds	r3, r0, #1
 8002a5e:	d102      	bne.n	8002a66 <_read_r+0x1e>
 8002a60:	682b      	ldr	r3, [r5, #0]
 8002a62:	b103      	cbz	r3, 8002a66 <_read_r+0x1e>
 8002a64:	6023      	str	r3, [r4, #0]
 8002a66:	bd38      	pop	{r3, r4, r5, pc}
 8002a68:	20000140 	.word	0x20000140

08002a6c <_init>:
 8002a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a6e:	bf00      	nop
 8002a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a72:	bc08      	pop	{r3}
 8002a74:	469e      	mov	lr, r3
 8002a76:	4770      	bx	lr

08002a78 <_fini>:
 8002a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a7a:	bf00      	nop
 8002a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a7e:	bc08      	pop	{r3}
 8002a80:	469e      	mov	lr, r3
 8002a82:	4770      	bx	lr
