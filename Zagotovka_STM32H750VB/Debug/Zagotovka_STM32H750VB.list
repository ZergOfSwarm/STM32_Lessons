
Zagotovka_STM32H750VB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  90000000  90000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016e94  900002a0  900002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a268  90017134  90017134  00027134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  9002139c  9002139c  0003139c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  900213a0  900213a0  000313a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000594  24000000  900213a4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0001ef80  24000594  90021938  00040594  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2401f514  90021938  0004f514  2**0
                  ALLOC
  8 .lwip_sec     00000200  30000000  30000000  00010000  2**2
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00040594  2**0
                  CONTENTS, READONLY
 10 .debug_info   000332ae  00000000  00000000  000405c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000744d  00000000  00000000  00073870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000020f0  00000000  00000000  0007acc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001fa8  00000000  00000000  0007cdb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00047e78  00000000  00000000  0007ed58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00034d81  00000000  00000000  000c6bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001835ad  00000000  00000000  000fb951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0027eefe  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000093c4  00000000  00000000  0027ef50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

900002a0 <__do_global_dtors_aux>:
900002a0:	b510      	push	{r4, lr}
900002a2:	4c05      	ldr	r4, [pc, #20]	; (900002b8 <__do_global_dtors_aux+0x18>)
900002a4:	7823      	ldrb	r3, [r4, #0]
900002a6:	b933      	cbnz	r3, 900002b6 <__do_global_dtors_aux+0x16>
900002a8:	4b04      	ldr	r3, [pc, #16]	; (900002bc <__do_global_dtors_aux+0x1c>)
900002aa:	b113      	cbz	r3, 900002b2 <__do_global_dtors_aux+0x12>
900002ac:	4804      	ldr	r0, [pc, #16]	; (900002c0 <__do_global_dtors_aux+0x20>)
900002ae:	f3af 8000 	nop.w
900002b2:	2301      	movs	r3, #1
900002b4:	7023      	strb	r3, [r4, #0]
900002b6:	bd10      	pop	{r4, pc}
900002b8:	24000594 	.word	0x24000594
900002bc:	00000000 	.word	0x00000000
900002c0:	9001711c 	.word	0x9001711c

900002c4 <frame_dummy>:
900002c4:	b508      	push	{r3, lr}
900002c6:	4b03      	ldr	r3, [pc, #12]	; (900002d4 <frame_dummy+0x10>)
900002c8:	b11b      	cbz	r3, 900002d2 <frame_dummy+0xe>
900002ca:	4903      	ldr	r1, [pc, #12]	; (900002d8 <frame_dummy+0x14>)
900002cc:	4803      	ldr	r0, [pc, #12]	; (900002dc <frame_dummy+0x18>)
900002ce:	f3af 8000 	nop.w
900002d2:	bd08      	pop	{r3, pc}
900002d4:	00000000 	.word	0x00000000
900002d8:	24000598 	.word	0x24000598
900002dc:	9001711c 	.word	0x9001711c

900002e0 <strcmp>:
900002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
900002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
900002e8:	2a01      	cmp	r2, #1
900002ea:	bf28      	it	cs
900002ec:	429a      	cmpcs	r2, r3
900002ee:	d0f7      	beq.n	900002e0 <strcmp>
900002f0:	1ad0      	subs	r0, r2, r3
900002f2:	4770      	bx	lr

900002f4 <strlen>:
900002f4:	4603      	mov	r3, r0
900002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
900002fa:	2a00      	cmp	r2, #0
900002fc:	d1fb      	bne.n	900002f6 <strlen+0x2>
900002fe:	1a18      	subs	r0, r3, r0
90000300:	3801      	subs	r0, #1
90000302:	4770      	bx	lr
	...

90000310 <memchr>:
90000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
90000314:	2a10      	cmp	r2, #16
90000316:	db2b      	blt.n	90000370 <memchr+0x60>
90000318:	f010 0f07 	tst.w	r0, #7
9000031c:	d008      	beq.n	90000330 <memchr+0x20>
9000031e:	f810 3b01 	ldrb.w	r3, [r0], #1
90000322:	3a01      	subs	r2, #1
90000324:	428b      	cmp	r3, r1
90000326:	d02d      	beq.n	90000384 <memchr+0x74>
90000328:	f010 0f07 	tst.w	r0, #7
9000032c:	b342      	cbz	r2, 90000380 <memchr+0x70>
9000032e:	d1f6      	bne.n	9000031e <memchr+0xe>
90000330:	b4f0      	push	{r4, r5, r6, r7}
90000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
90000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
9000033a:	f022 0407 	bic.w	r4, r2, #7
9000033e:	f07f 0700 	mvns.w	r7, #0
90000342:	2300      	movs	r3, #0
90000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
90000348:	3c08      	subs	r4, #8
9000034a:	ea85 0501 	eor.w	r5, r5, r1
9000034e:	ea86 0601 	eor.w	r6, r6, r1
90000352:	fa85 f547 	uadd8	r5, r5, r7
90000356:	faa3 f587 	sel	r5, r3, r7
9000035a:	fa86 f647 	uadd8	r6, r6, r7
9000035e:	faa5 f687 	sel	r6, r5, r7
90000362:	b98e      	cbnz	r6, 90000388 <memchr+0x78>
90000364:	d1ee      	bne.n	90000344 <memchr+0x34>
90000366:	bcf0      	pop	{r4, r5, r6, r7}
90000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
9000036c:	f002 0207 	and.w	r2, r2, #7
90000370:	b132      	cbz	r2, 90000380 <memchr+0x70>
90000372:	f810 3b01 	ldrb.w	r3, [r0], #1
90000376:	3a01      	subs	r2, #1
90000378:	ea83 0301 	eor.w	r3, r3, r1
9000037c:	b113      	cbz	r3, 90000384 <memchr+0x74>
9000037e:	d1f8      	bne.n	90000372 <memchr+0x62>
90000380:	2000      	movs	r0, #0
90000382:	4770      	bx	lr
90000384:	3801      	subs	r0, #1
90000386:	4770      	bx	lr
90000388:	2d00      	cmp	r5, #0
9000038a:	bf06      	itte	eq
9000038c:	4635      	moveq	r5, r6
9000038e:	3803      	subeq	r0, #3
90000390:	3807      	subne	r0, #7
90000392:	f015 0f01 	tst.w	r5, #1
90000396:	d107      	bne.n	900003a8 <memchr+0x98>
90000398:	3001      	adds	r0, #1
9000039a:	f415 7f80 	tst.w	r5, #256	; 0x100
9000039e:	bf02      	ittt	eq
900003a0:	3001      	addeq	r0, #1
900003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
900003a6:	3001      	addeq	r0, #1
900003a8:	bcf0      	pop	{r4, r5, r6, r7}
900003aa:	3801      	subs	r0, #1
900003ac:	4770      	bx	lr
900003ae:	bf00      	nop

900003b0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
900003b0:	b480      	push	{r7}
900003b2:	b085      	sub	sp, #20
900003b4:	af00      	add	r7, sp, #0
900003b6:	60f8      	str	r0, [r7, #12]
900003b8:	60b9      	str	r1, [r7, #8]
900003ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
900003bc:	68fb      	ldr	r3, [r7, #12]
900003be:	4a07      	ldr	r2, [pc, #28]	; (900003dc <vApplicationGetIdleTaskMemory+0x2c>)
900003c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
900003c2:	68bb      	ldr	r3, [r7, #8]
900003c4:	4a06      	ldr	r2, [pc, #24]	; (900003e0 <vApplicationGetIdleTaskMemory+0x30>)
900003c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
900003c8:	687b      	ldr	r3, [r7, #4]
900003ca:	2280      	movs	r2, #128	; 0x80
900003cc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
900003ce:	bf00      	nop
900003d0:	3714      	adds	r7, #20
900003d2:	46bd      	mov	sp, r7
900003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
900003d8:	4770      	bx	lr
900003da:	bf00      	nop
900003dc:	240005b0 	.word	0x240005b0
900003e0:	24000664 	.word	0x24000664

900003e4 <ssi_handler>:
//



uint16_t ssi_handler (int iIndex, char *pcInsert, int iInsertLen, u16_t current_tag_part, u16_t *next_tag_part)
{
900003e4:	b5f0      	push	{r4, r5, r6, r7, lr}
900003e6:	b097      	sub	sp, #92	; 0x5c
900003e8:	af0c      	add	r7, sp, #48	; 0x30
900003ea:	6278      	str	r0, [r7, #36]	; 0x24
900003ec:	6239      	str	r1, [r7, #32]
900003ee:	61fa      	str	r2, [r7, #28]
900003f0:	837b      	strh	r3, [r7, #26]

	printf("%d \n", jsongo);
900003f2:	4b12      	ldr	r3, [pc, #72]	; (9000043c <ssi_handler+0x58>)
900003f4:	681b      	ldr	r3, [r3, #0]
900003f6:	4619      	mov	r1, r3
900003f8:	4811      	ldr	r0, [pc, #68]	; (90000440 <ssi_handler+0x5c>)
900003fa:	f015 fbfb 	bl	90015bf4 <iprintf>
	switch (iIndex) {
900003fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90000400:	2b02      	cmp	r3, #2
90000402:	f000 85d0 	beq.w	90000fa6 <ssi_handler+0xbc2>
90000406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90000408:	2b02      	cmp	r3, #2
9000040a:	f300 85d6 	bgt.w	90000fba <ssi_handler+0xbd6>
9000040e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90000410:	2b00      	cmp	r3, #0
90000412:	d005      	beq.n	90000420 <ssi_handler+0x3c>
90000414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90000416:	2b01      	cmp	r3, #1
90000418:	f000 8450 	beq.w	90000cbc <ssi_handler+0x8d8>
		case 2:
			sprintf(pcInsert,"<a href=\"index.shtml\">Home</a> | <a href=\"tab1.shtml\">Buttom pin</a> | <a href=\"tab2.shtml\">Relay pin</a> | <a href=\"tab3.shtml\">Connection</a> | <a href=\"select.shtml\">Select pin</a>");
			return strlen(pcInsert);
			break;
		default :
			break;
9000041c:	f000 bdcd 	b.w	90000fba <ssi_handler+0xbd6>
		if (variable == numpin) {
90000420:	4b08      	ldr	r3, [pc, #32]	; (90000444 <ssi_handler+0x60>)
90000422:	681b      	ldr	r3, [r3, #0]
90000424:	2b3f      	cmp	r3, #63	; 0x3f
90000426:	d104      	bne.n	90000432 <ssi_handler+0x4e>
			variable = 0;
90000428:	4b06      	ldr	r3, [pc, #24]	; (90000444 <ssi_handler+0x60>)
9000042a:	2200      	movs	r2, #0
9000042c:	601a      	str	r2, [r3, #0]
			break;
9000042e:	f000 bdc5 	b.w	90000fbc <ssi_handler+0xbd8>
			if(jsongo == 1){
90000432:	4b02      	ldr	r3, [pc, #8]	; (9000043c <ssi_handler+0x58>)
90000434:	681b      	ldr	r3, [r3, #0]
90000436:	2b01      	cmp	r3, #1
90000438:	d17f      	bne.n	9000053a <ssi_handler+0x156>
				while(variable3 <= numpintopin-1){
9000043a:	e077      	b.n	9000052c <ssi_handler+0x148>
9000043c:	240059c4 	.word	0x240059c4
90000440:	90017150 	.word	0x90017150
90000444:	240059c0 	.word	0x240059c0
						if(variable3 == 0) {
90000448:	4ba7      	ldr	r3, [pc, #668]	; (900006e8 <ssi_handler+0x304>)
9000044a:	681b      	ldr	r3, [r3, #0]
9000044c:	2b00      	cmp	r3, #0
9000044e:	d10b      	bne.n	90000468 <ssi_handler+0x84>
							strcat(listaction, "{");
90000450:	48a6      	ldr	r0, [pc, #664]	; (900006ec <ssi_handler+0x308>)
90000452:	f7ff ff4f 	bl	900002f4 <strlen>
90000456:	4603      	mov	r3, r0
90000458:	461a      	mov	r2, r3
9000045a:	4ba4      	ldr	r3, [pc, #656]	; (900006ec <ssi_handler+0x308>)
9000045c:	4413      	add	r3, r2
9000045e:	49a4      	ldr	r1, [pc, #656]	; (900006f0 <ssi_handler+0x30c>)
90000460:	461a      	mov	r2, r3
90000462:	460b      	mov	r3, r1
90000464:	881b      	ldrh	r3, [r3, #0]
90000466:	8013      	strh	r3, [r2, #0]
						if(variable == TO[variable3].idin && TO[variable3].flag == 1){
90000468:	4b9f      	ldr	r3, [pc, #636]	; (900006e8 <ssi_handler+0x304>)
9000046a:	681a      	ldr	r2, [r3, #0]
9000046c:	49a1      	ldr	r1, [pc, #644]	; (900006f4 <ssi_handler+0x310>)
9000046e:	4613      	mov	r3, r2
90000470:	005b      	lsls	r3, r3, #1
90000472:	4413      	add	r3, r2
90000474:	009b      	lsls	r3, r3, #2
90000476:	440b      	add	r3, r1
90000478:	681a      	ldr	r2, [r3, #0]
9000047a:	4b9f      	ldr	r3, [pc, #636]	; (900006f8 <ssi_handler+0x314>)
9000047c:	681b      	ldr	r3, [r3, #0]
9000047e:	429a      	cmp	r2, r3
90000480:	d125      	bne.n	900004ce <ssi_handler+0xea>
90000482:	4b99      	ldr	r3, [pc, #612]	; (900006e8 <ssi_handler+0x304>)
90000484:	681a      	ldr	r2, [r3, #0]
90000486:	499b      	ldr	r1, [pc, #620]	; (900006f4 <ssi_handler+0x310>)
90000488:	4613      	mov	r3, r2
9000048a:	005b      	lsls	r3, r3, #1
9000048c:	4413      	add	r3, r2
9000048e:	009b      	lsls	r3, r3, #2
90000490:	440b      	add	r3, r1
90000492:	3308      	adds	r3, #8
90000494:	681b      	ldr	r3, [r3, #0]
90000496:	2b01      	cmp	r3, #1
90000498:	d119      	bne.n	900004ce <ssi_handler+0xea>
							sprintf(name3, "\"%s\":%d,",tp[TO[variable3].idout].pins, variable3);
9000049a:	4b93      	ldr	r3, [pc, #588]	; (900006e8 <ssi_handler+0x304>)
9000049c:	681a      	ldr	r2, [r3, #0]
9000049e:	4995      	ldr	r1, [pc, #596]	; (900006f4 <ssi_handler+0x310>)
900004a0:	4613      	mov	r3, r2
900004a2:	005b      	lsls	r3, r3, #1
900004a4:	4413      	add	r3, r2
900004a6:	009b      	lsls	r3, r3, #2
900004a8:	440b      	add	r3, r1
900004aa:	3304      	adds	r3, #4
900004ac:	681a      	ldr	r2, [r3, #0]
900004ae:	4613      	mov	r3, r2
900004b0:	009b      	lsls	r3, r3, #2
900004b2:	4413      	add	r3, r2
900004b4:	009b      	lsls	r3, r3, #2
900004b6:	4a91      	ldr	r2, [pc, #580]	; (900006fc <ssi_handler+0x318>)
900004b8:	441a      	add	r2, r3
900004ba:	4b8b      	ldr	r3, [pc, #556]	; (900006e8 <ssi_handler+0x304>)
900004bc:	681b      	ldr	r3, [r3, #0]
900004be:	4990      	ldr	r1, [pc, #576]	; (90000700 <ssi_handler+0x31c>)
900004c0:	4890      	ldr	r0, [pc, #576]	; (90000704 <ssi_handler+0x320>)
900004c2:	f015 fd11 	bl	90015ee8 <siprintf>
							strcat(listaction, name3);
900004c6:	498f      	ldr	r1, [pc, #572]	; (90000704 <ssi_handler+0x320>)
900004c8:	4888      	ldr	r0, [pc, #544]	; (900006ec <ssi_handler+0x308>)
900004ca:	f015 fd70 	bl	90015fae <strcat>
						if(variable3 == numpintopin-1 &&  strcmp(listaction[strlen(listaction)-1], '{') > 0){
900004ce:	4b86      	ldr	r3, [pc, #536]	; (900006e8 <ssi_handler+0x304>)
900004d0:	681b      	ldr	r3, [r3, #0]
900004d2:	2b3e      	cmp	r3, #62	; 0x3e
900004d4:	d115      	bne.n	90000502 <ssi_handler+0x11e>
900004d6:	4885      	ldr	r0, [pc, #532]	; (900006ec <ssi_handler+0x308>)
900004d8:	f7ff ff0c 	bl	900002f4 <strlen>
900004dc:	4603      	mov	r3, r0
900004de:	3b01      	subs	r3, #1
900004e0:	4a82      	ldr	r2, [pc, #520]	; (900006ec <ssi_handler+0x308>)
900004e2:	5cd3      	ldrb	r3, [r2, r3]
900004e4:	217b      	movs	r1, #123	; 0x7b
900004e6:	4618      	mov	r0, r3
900004e8:	f7ff fefa 	bl	900002e0 <strcmp>
900004ec:	4603      	mov	r3, r0
900004ee:	2b00      	cmp	r3, #0
900004f0:	dd07      	ble.n	90000502 <ssi_handler+0x11e>
							listaction[strlen(listaction)-1] = '\0';
900004f2:	487e      	ldr	r0, [pc, #504]	; (900006ec <ssi_handler+0x308>)
900004f4:	f7ff fefe 	bl	900002f4 <strlen>
900004f8:	4603      	mov	r3, r0
900004fa:	3b01      	subs	r3, #1
900004fc:	4a7b      	ldr	r2, [pc, #492]	; (900006ec <ssi_handler+0x308>)
900004fe:	2100      	movs	r1, #0
90000500:	54d1      	strb	r1, [r2, r3]
						if(variable3 == numpintopin-1) {
90000502:	4b79      	ldr	r3, [pc, #484]	; (900006e8 <ssi_handler+0x304>)
90000504:	681b      	ldr	r3, [r3, #0]
90000506:	2b3e      	cmp	r3, #62	; 0x3e
90000508:	d10b      	bne.n	90000522 <ssi_handler+0x13e>
							strcat(listaction, "}");
9000050a:	4878      	ldr	r0, [pc, #480]	; (900006ec <ssi_handler+0x308>)
9000050c:	f7ff fef2 	bl	900002f4 <strlen>
90000510:	4603      	mov	r3, r0
90000512:	461a      	mov	r2, r3
90000514:	4b75      	ldr	r3, [pc, #468]	; (900006ec <ssi_handler+0x308>)
90000516:	4413      	add	r3, r2
90000518:	497b      	ldr	r1, [pc, #492]	; (90000708 <ssi_handler+0x324>)
9000051a:	461a      	mov	r2, r3
9000051c:	460b      	mov	r3, r1
9000051e:	881b      	ldrh	r3, [r3, #0]
90000520:	8013      	strh	r3, [r2, #0]
						variable3++;
90000522:	4b71      	ldr	r3, [pc, #452]	; (900006e8 <ssi_handler+0x304>)
90000524:	681b      	ldr	r3, [r3, #0]
90000526:	3301      	adds	r3, #1
90000528:	4a6f      	ldr	r2, [pc, #444]	; (900006e8 <ssi_handler+0x304>)
9000052a:	6013      	str	r3, [r2, #0]
				while(variable3 <= numpintopin-1){
9000052c:	4b6e      	ldr	r3, [pc, #440]	; (900006e8 <ssi_handler+0x304>)
9000052e:	681b      	ldr	r3, [r3, #0]
90000530:	2b3e      	cmp	r3, #62	; 0x3e
90000532:	dd89      	ble.n	90000448 <ssi_handler+0x64>
				variable3 = 0;
90000534:	4b6c      	ldr	r3, [pc, #432]	; (900006e8 <ssi_handler+0x304>)
90000536:	2200      	movs	r2, #0
90000538:	601a      	str	r2, [r3, #0]
			if (variable == 0) {
9000053a:	4b6f      	ldr	r3, [pc, #444]	; (900006f8 <ssi_handler+0x314>)
9000053c:	681b      	ldr	r3, [r3, #0]
9000053e:	2b00      	cmp	r3, #0
90000540:	f040 8146 	bne.w	900007d0 <ssi_handler+0x3ec>
				if(jsongo == 1){
90000544:	4b71      	ldr	r3, [pc, #452]	; (9000070c <ssi_handler+0x328>)
90000546:	681b      	ldr	r3, [r3, #0]
90000548:	2b01      	cmp	r3, #1
9000054a:	d17e      	bne.n	9000064a <ssi_handler+0x266>
				sprintf(pcInsert,
9000054c:	4b6a      	ldr	r3, [pc, #424]	; (900006f8 <ssi_handler+0x314>)
9000054e:	681b      	ldr	r3, [r3, #0]
90000550:	4a6f      	ldr	r2, [pc, #444]	; (90000710 <ssi_handler+0x32c>)
90000552:	2168      	movs	r1, #104	; 0x68
90000554:	fb01 f303 	mul.w	r3, r1, r3
90000558:	4413      	add	r3, r2
9000055a:	681b      	ldr	r3, [r3, #0]
9000055c:	617b      	str	r3, [r7, #20]
9000055e:	4b66      	ldr	r3, [pc, #408]	; (900006f8 <ssi_handler+0x314>)
90000560:	6819      	ldr	r1, [r3, #0]
90000562:	6139      	str	r1, [r7, #16]
						tp[variable].pins,
90000564:	4b64      	ldr	r3, [pc, #400]	; (900006f8 <ssi_handler+0x314>)
90000566:	681a      	ldr	r2, [r3, #0]
90000568:	4613      	mov	r3, r2
9000056a:	009b      	lsls	r3, r3, #2
9000056c:	4413      	add	r3, r2
9000056e:	009b      	lsls	r3, r3, #2
90000570:	4a62      	ldr	r2, [pc, #392]	; (900006fc <ssi_handler+0x318>)
90000572:	1899      	adds	r1, r3, r2
90000574:	60f9      	str	r1, [r7, #12]
						T[variable].ptype,
90000576:	4b60      	ldr	r3, [pc, #384]	; (900006f8 <ssi_handler+0x314>)
90000578:	681b      	ldr	r3, [r3, #0]
9000057a:	2268      	movs	r2, #104	; 0x68
9000057c:	fb02 f303 	mul.w	r3, r2, r3
90000580:	3318      	adds	r3, #24
90000582:	4a63      	ldr	r2, [pc, #396]	; (90000710 <ssi_handler+0x32c>)
90000584:	189c      	adds	r4, r3, r2
				sprintf(pcInsert,
90000586:	4b5c      	ldr	r3, [pc, #368]	; (900006f8 <ssi_handler+0x314>)
90000588:	681b      	ldr	r3, [r3, #0]
9000058a:	4a61      	ldr	r2, [pc, #388]	; (90000710 <ssi_handler+0x32c>)
9000058c:	2168      	movs	r1, #104	; 0x68
9000058e:	fb01 f303 	mul.w	r3, r1, r3
90000592:	4413      	add	r3, r2
90000594:	332c      	adds	r3, #44	; 0x2c
90000596:	681d      	ldr	r5, [r3, #0]
90000598:	4b57      	ldr	r3, [pc, #348]	; (900006f8 <ssi_handler+0x314>)
9000059a:	681b      	ldr	r3, [r3, #0]
9000059c:	4a5c      	ldr	r2, [pc, #368]	; (90000710 <ssi_handler+0x32c>)
9000059e:	2168      	movs	r1, #104	; 0x68
900005a0:	fb01 f303 	mul.w	r3, r1, r3
900005a4:	4413      	add	r3, r2
900005a6:	3330      	adds	r3, #48	; 0x30
900005a8:	681e      	ldr	r6, [r3, #0]
900005aa:	4b53      	ldr	r3, [pc, #332]	; (900006f8 <ssi_handler+0x314>)
900005ac:	681b      	ldr	r3, [r3, #0]
900005ae:	4a58      	ldr	r2, [pc, #352]	; (90000710 <ssi_handler+0x32c>)
900005b0:	2168      	movs	r1, #104	; 0x68
900005b2:	fb01 f303 	mul.w	r3, r1, r3
900005b6:	4413      	add	r3, r2
900005b8:	3334      	adds	r3, #52	; 0x34
900005ba:	681a      	ldr	r2, [r3, #0]
900005bc:	60ba      	str	r2, [r7, #8]
900005be:	4b4e      	ldr	r3, [pc, #312]	; (900006f8 <ssi_handler+0x314>)
900005c0:	681b      	ldr	r3, [r3, #0]
900005c2:	4a53      	ldr	r2, [pc, #332]	; (90000710 <ssi_handler+0x32c>)
900005c4:	2168      	movs	r1, #104	; 0x68
900005c6:	fb01 f303 	mul.w	r3, r1, r3
900005ca:	4413      	add	r3, r2
900005cc:	3338      	adds	r3, #56	; 0x38
900005ce:	6819      	ldr	r1, [r3, #0]
900005d0:	6079      	str	r1, [r7, #4]
900005d2:	4b49      	ldr	r3, [pc, #292]	; (900006f8 <ssi_handler+0x314>)
900005d4:	681b      	ldr	r3, [r3, #0]
900005d6:	4a4e      	ldr	r2, [pc, #312]	; (90000710 <ssi_handler+0x32c>)
900005d8:	2168      	movs	r1, #104	; 0x68
900005da:	fb01 f303 	mul.w	r3, r1, r3
900005de:	4413      	add	r3, r2
900005e0:	333c      	adds	r3, #60	; 0x3c
900005e2:	681b      	ldr	r3, [r3, #0]
900005e4:	603b      	str	r3, [r7, #0]
900005e6:	4b44      	ldr	r3, [pc, #272]	; (900006f8 <ssi_handler+0x314>)
900005e8:	681b      	ldr	r3, [r3, #0]
900005ea:	4a49      	ldr	r2, [pc, #292]	; (90000710 <ssi_handler+0x32c>)
900005ec:	2168      	movs	r1, #104	; 0x68
900005ee:	fb01 f303 	mul.w	r3, r1, r3
900005f2:	4413      	add	r3, r2
900005f4:	3340      	adds	r3, #64	; 0x40
900005f6:	6819      	ldr	r1, [r3, #0]
						T[variable].info,
900005f8:	4b3f      	ldr	r3, [pc, #252]	; (900006f8 <ssi_handler+0x314>)
900005fa:	681b      	ldr	r3, [r3, #0]
900005fc:	2268      	movs	r2, #104	; 0x68
900005fe:	fb02 f303 	mul.w	r3, r2, r3
90000602:	3340      	adds	r3, #64	; 0x40
90000604:	4a42      	ldr	r2, [pc, #264]	; (90000710 <ssi_handler+0x32c>)
90000606:	4413      	add	r3, r2
90000608:	1d1a      	adds	r2, r3, #4
				sprintf(pcInsert,
9000060a:	4b3b      	ldr	r3, [pc, #236]	; (900006f8 <ssi_handler+0x314>)
9000060c:	681b      	ldr	r3, [r3, #0]
9000060e:	4840      	ldr	r0, [pc, #256]	; (90000710 <ssi_handler+0x32c>)
90000610:	f04f 0c68 	mov.w	ip, #104	; 0x68
90000614:	fb0c f303 	mul.w	r3, ip, r3
90000618:	4403      	add	r3, r0
9000061a:	3364      	adds	r3, #100	; 0x64
9000061c:	681b      	ldr	r3, [r3, #0]
9000061e:	930a      	str	r3, [sp, #40]	; 0x28
90000620:	9209      	str	r2, [sp, #36]	; 0x24
90000622:	4b32      	ldr	r3, [pc, #200]	; (900006ec <ssi_handler+0x308>)
90000624:	9308      	str	r3, [sp, #32]
90000626:	9107      	str	r1, [sp, #28]
90000628:	683b      	ldr	r3, [r7, #0]
9000062a:	9306      	str	r3, [sp, #24]
9000062c:	6879      	ldr	r1, [r7, #4]
9000062e:	9105      	str	r1, [sp, #20]
90000630:	68ba      	ldr	r2, [r7, #8]
90000632:	9204      	str	r2, [sp, #16]
90000634:	9603      	str	r6, [sp, #12]
90000636:	9502      	str	r5, [sp, #8]
90000638:	9401      	str	r4, [sp, #4]
9000063a:	68f9      	ldr	r1, [r7, #12]
9000063c:	9100      	str	r1, [sp, #0]
9000063e:	693b      	ldr	r3, [r7, #16]
90000640:	697a      	ldr	r2, [r7, #20]
90000642:	4934      	ldr	r1, [pc, #208]	; (90000714 <ssi_handler+0x330>)
90000644:	6a38      	ldr	r0, [r7, #32]
90000646:	f015 fc4f 	bl	90015ee8 <siprintf>
				if(jsongo == 2){
9000064a:	4b30      	ldr	r3, [pc, #192]	; (9000070c <ssi_handler+0x328>)
9000064c:	681b      	ldr	r3, [r3, #0]
9000064e:	2b02      	cmp	r3, #2
90000650:	f040 8092 	bne.w	90000778 <ssi_handler+0x394>
				sprintf(pcInsert,
90000654:	4b28      	ldr	r3, [pc, #160]	; (900006f8 <ssi_handler+0x314>)
90000656:	681b      	ldr	r3, [r3, #0]
90000658:	4a2d      	ldr	r2, [pc, #180]	; (90000710 <ssi_handler+0x32c>)
9000065a:	2168      	movs	r1, #104	; 0x68
9000065c:	fb01 f303 	mul.w	r3, r1, r3
90000660:	4413      	add	r3, r2
90000662:	681b      	ldr	r3, [r3, #0]
90000664:	617b      	str	r3, [r7, #20]
90000666:	4b24      	ldr	r3, [pc, #144]	; (900006f8 <ssi_handler+0x314>)
90000668:	6819      	ldr	r1, [r3, #0]
9000066a:	6139      	str	r1, [r7, #16]
						tp[variable].pins,
9000066c:	4b22      	ldr	r3, [pc, #136]	; (900006f8 <ssi_handler+0x314>)
9000066e:	681a      	ldr	r2, [r3, #0]
90000670:	4613      	mov	r3, r2
90000672:	009b      	lsls	r3, r3, #2
90000674:	4413      	add	r3, r2
90000676:	009b      	lsls	r3, r3, #2
90000678:	4a20      	ldr	r2, [pc, #128]	; (900006fc <ssi_handler+0x318>)
9000067a:	4413      	add	r3, r2
						T[variable].ptype,
9000067c:	4a1e      	ldr	r2, [pc, #120]	; (900006f8 <ssi_handler+0x314>)
9000067e:	6812      	ldr	r2, [r2, #0]
90000680:	2168      	movs	r1, #104	; 0x68
90000682:	fb01 f202 	mul.w	r2, r1, r2
90000686:	3218      	adds	r2, #24
90000688:	4921      	ldr	r1, [pc, #132]	; (90000710 <ssi_handler+0x32c>)
9000068a:	440a      	add	r2, r1
				sprintf(pcInsert,
9000068c:	491a      	ldr	r1, [pc, #104]	; (900006f8 <ssi_handler+0x314>)
9000068e:	6809      	ldr	r1, [r1, #0]
90000690:	481f      	ldr	r0, [pc, #124]	; (90000710 <ssi_handler+0x32c>)
90000692:	2468      	movs	r4, #104	; 0x68
90000694:	fb04 f101 	mul.w	r1, r4, r1
90000698:	4401      	add	r1, r0
9000069a:	3104      	adds	r1, #4
9000069c:	6809      	ldr	r1, [r1, #0]
9000069e:	4816      	ldr	r0, [pc, #88]	; (900006f8 <ssi_handler+0x314>)
900006a0:	6800      	ldr	r0, [r0, #0]
900006a2:	4c1b      	ldr	r4, [pc, #108]	; (90000710 <ssi_handler+0x32c>)
900006a4:	2568      	movs	r5, #104	; 0x68
900006a6:	fb05 f000 	mul.w	r0, r5, r0
900006aa:	4420      	add	r0, r4
900006ac:	3008      	adds	r0, #8
900006ae:	6800      	ldr	r0, [r0, #0]
900006b0:	60f8      	str	r0, [r7, #12]
900006b2:	4c11      	ldr	r4, [pc, #68]	; (900006f8 <ssi_handler+0x314>)
900006b4:	6824      	ldr	r4, [r4, #0]
900006b6:	4d16      	ldr	r5, [pc, #88]	; (90000710 <ssi_handler+0x32c>)
900006b8:	2668      	movs	r6, #104	; 0x68
900006ba:	fb06 f404 	mul.w	r4, r6, r4
900006be:	442c      	add	r4, r5
900006c0:	340c      	adds	r4, #12
900006c2:	6820      	ldr	r0, [r4, #0]
900006c4:	60b8      	str	r0, [r7, #8]
900006c6:	4d0c      	ldr	r5, [pc, #48]	; (900006f8 <ssi_handler+0x314>)
900006c8:	682d      	ldr	r5, [r5, #0]
900006ca:	4e11      	ldr	r6, [pc, #68]	; (90000710 <ssi_handler+0x32c>)
900006cc:	f04f 0c68 	mov.w	ip, #104	; 0x68
900006d0:	fb0c f505 	mul.w	r5, ip, r5
900006d4:	4435      	add	r5, r6
900006d6:	3510      	adds	r5, #16
900006d8:	682d      	ldr	r5, [r5, #0]
900006da:	4e07      	ldr	r6, [pc, #28]	; (900006f8 <ssi_handler+0x314>)
900006dc:	6836      	ldr	r6, [r6, #0]
900006de:	480c      	ldr	r0, [pc, #48]	; (90000710 <ssi_handler+0x32c>)
900006e0:	f04f 0c68 	mov.w	ip, #104	; 0x68
900006e4:	e018      	b.n	90000718 <ssi_handler+0x334>
900006e6:	bf00      	nop
900006e8:	240059b0 	.word	0x240059b0
900006ec:	24005a34 	.word	0x24005a34
900006f0:	90017158 	.word	0x90017158
900006f4:	240021fc 	.word	0x240021fc
900006f8:	240059c0 	.word	0x240059c0
900006fc:	24000000 	.word	0x24000000
90000700:	9001715c 	.word	0x9001715c
90000704:	240059b4 	.word	0x240059b4
90000708:	90017168 	.word	0x90017168
9000070c:	240059c4 	.word	0x240059c4
90000710:	24000864 	.word	0x24000864
90000714:	9001716c 	.word	0x9001716c
90000718:	fb0c f606 	mul.w	r6, ip, r6
9000071c:	4406      	add	r6, r0
9000071e:	3614      	adds	r6, #20
90000720:	6836      	ldr	r6, [r6, #0]
						T[variable].info,
90000722:	4825      	ldr	r0, [pc, #148]	; (900007b8 <ssi_handler+0x3d4>)
90000724:	6800      	ldr	r0, [r0, #0]
90000726:	f04f 0c68 	mov.w	ip, #104	; 0x68
9000072a:	fb0c fc00 	mul.w	ip, ip, r0
9000072e:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
90000732:	4822      	ldr	r0, [pc, #136]	; (900007bc <ssi_handler+0x3d8>)
90000734:	4484      	add	ip, r0
90000736:	f10c 0004 	add.w	r0, ip, #4
9000073a:	6078      	str	r0, [r7, #4]
				sprintf(pcInsert,
9000073c:	481e      	ldr	r0, [pc, #120]	; (900007b8 <ssi_handler+0x3d4>)
9000073e:	6800      	ldr	r0, [r0, #0]
90000740:	4c1e      	ldr	r4, [pc, #120]	; (900007bc <ssi_handler+0x3d8>)
90000742:	f04f 0c68 	mov.w	ip, #104	; 0x68
90000746:	fb0c fc00 	mul.w	ip, ip, r0
9000074a:	44a4      	add	ip, r4
9000074c:	f10c 0c64 	add.w	ip, ip, #100	; 0x64
90000750:	f8dc 0000 	ldr.w	r0, [ip]
90000754:	9008      	str	r0, [sp, #32]
90000756:	6878      	ldr	r0, [r7, #4]
90000758:	9007      	str	r0, [sp, #28]
9000075a:	9606      	str	r6, [sp, #24]
9000075c:	9505      	str	r5, [sp, #20]
9000075e:	68b8      	ldr	r0, [r7, #8]
90000760:	9004      	str	r0, [sp, #16]
90000762:	68f8      	ldr	r0, [r7, #12]
90000764:	9003      	str	r0, [sp, #12]
90000766:	9102      	str	r1, [sp, #8]
90000768:	9201      	str	r2, [sp, #4]
9000076a:	9300      	str	r3, [sp, #0]
9000076c:	693b      	ldr	r3, [r7, #16]
9000076e:	697a      	ldr	r2, [r7, #20]
90000770:	4913      	ldr	r1, [pc, #76]	; (900007c0 <ssi_handler+0x3dc>)
90000772:	6a38      	ldr	r0, [r7, #32]
90000774:	f015 fbb8 	bl	90015ee8 <siprintf>
				if(jsongo == 3){
90000778:	4b12      	ldr	r3, [pc, #72]	; (900007c4 <ssi_handler+0x3e0>)
9000077a:	681b      	ldr	r3, [r3, #0]
9000077c:	2b03      	cmp	r3, #3
9000077e:	f040 8277 	bne.w	90000c70 <ssi_handler+0x88c>
					sprintf(pcInsert,
90000782:	4b0d      	ldr	r3, [pc, #52]	; (900007b8 <ssi_handler+0x3d4>)
90000784:	6819      	ldr	r1, [r3, #0]
							tp[variable].pins,
90000786:	4b0c      	ldr	r3, [pc, #48]	; (900007b8 <ssi_handler+0x3d4>)
90000788:	681a      	ldr	r2, [r3, #0]
9000078a:	4613      	mov	r3, r2
9000078c:	009b      	lsls	r3, r3, #2
9000078e:	4413      	add	r3, r2
90000790:	009b      	lsls	r3, r3, #2
90000792:	4a0d      	ldr	r2, [pc, #52]	; (900007c8 <ssi_handler+0x3e4>)
90000794:	441a      	add	r2, r3
					sprintf(pcInsert,
90000796:	4b08      	ldr	r3, [pc, #32]	; (900007b8 <ssi_handler+0x3d4>)
90000798:	681b      	ldr	r3, [r3, #0]
9000079a:	4808      	ldr	r0, [pc, #32]	; (900007bc <ssi_handler+0x3d8>)
9000079c:	2468      	movs	r4, #104	; 0x68
9000079e:	fb04 f303 	mul.w	r3, r4, r3
900007a2:	4403      	add	r3, r0
900007a4:	681b      	ldr	r3, [r3, #0]
900007a6:	9300      	str	r3, [sp, #0]
900007a8:	4613      	mov	r3, r2
900007aa:	460a      	mov	r2, r1
900007ac:	4907      	ldr	r1, [pc, #28]	; (900007cc <ssi_handler+0x3e8>)
900007ae:	6a38      	ldr	r0, [r7, #32]
900007b0:	f015 fb9a 	bl	90015ee8 <siprintf>
900007b4:	e25c      	b.n	90000c70 <ssi_handler+0x88c>
900007b6:	bf00      	nop
900007b8:	240059c0 	.word	0x240059c0
900007bc:	24000864 	.word	0x24000864
900007c0:	90017208 	.word	0x90017208
900007c4:	240059c4 	.word	0x240059c4
900007c8:	24000000 	.word	0x24000000
900007cc:	90017284 	.word	0x90017284
			} else if (variable == numpin-1) {
900007d0:	4b91      	ldr	r3, [pc, #580]	; (90000a18 <ssi_handler+0x634>)
900007d2:	681b      	ldr	r3, [r3, #0]
900007d4:	2b3e      	cmp	r3, #62	; 0x3e
900007d6:	f040 812f 	bne.w	90000a38 <ssi_handler+0x654>
				if(jsongo == 1){
900007da:	4b90      	ldr	r3, [pc, #576]	; (90000a1c <ssi_handler+0x638>)
900007dc:	681b      	ldr	r3, [r3, #0]
900007de:	2b01      	cmp	r3, #1
900007e0:	d17e      	bne.n	900008e0 <ssi_handler+0x4fc>
				sprintf(pcInsert,
900007e2:	4b8d      	ldr	r3, [pc, #564]	; (90000a18 <ssi_handler+0x634>)
900007e4:	681b      	ldr	r3, [r3, #0]
900007e6:	4a8e      	ldr	r2, [pc, #568]	; (90000a20 <ssi_handler+0x63c>)
900007e8:	2168      	movs	r1, #104	; 0x68
900007ea:	fb01 f303 	mul.w	r3, r1, r3
900007ee:	4413      	add	r3, r2
900007f0:	681b      	ldr	r3, [r3, #0]
900007f2:	617b      	str	r3, [r7, #20]
900007f4:	4b88      	ldr	r3, [pc, #544]	; (90000a18 <ssi_handler+0x634>)
900007f6:	6819      	ldr	r1, [r3, #0]
900007f8:	6139      	str	r1, [r7, #16]
						tp[variable].pins,
900007fa:	4b87      	ldr	r3, [pc, #540]	; (90000a18 <ssi_handler+0x634>)
900007fc:	681a      	ldr	r2, [r3, #0]
900007fe:	4613      	mov	r3, r2
90000800:	009b      	lsls	r3, r3, #2
90000802:	4413      	add	r3, r2
90000804:	009b      	lsls	r3, r3, #2
90000806:	4a87      	ldr	r2, [pc, #540]	; (90000a24 <ssi_handler+0x640>)
90000808:	1899      	adds	r1, r3, r2
9000080a:	60f9      	str	r1, [r7, #12]
						T[variable].ptype,
9000080c:	4b82      	ldr	r3, [pc, #520]	; (90000a18 <ssi_handler+0x634>)
9000080e:	681b      	ldr	r3, [r3, #0]
90000810:	2268      	movs	r2, #104	; 0x68
90000812:	fb02 f303 	mul.w	r3, r2, r3
90000816:	3318      	adds	r3, #24
90000818:	4a81      	ldr	r2, [pc, #516]	; (90000a20 <ssi_handler+0x63c>)
9000081a:	189c      	adds	r4, r3, r2
				sprintf(pcInsert,
9000081c:	4b7e      	ldr	r3, [pc, #504]	; (90000a18 <ssi_handler+0x634>)
9000081e:	681b      	ldr	r3, [r3, #0]
90000820:	4a7f      	ldr	r2, [pc, #508]	; (90000a20 <ssi_handler+0x63c>)
90000822:	2168      	movs	r1, #104	; 0x68
90000824:	fb01 f303 	mul.w	r3, r1, r3
90000828:	4413      	add	r3, r2
9000082a:	332c      	adds	r3, #44	; 0x2c
9000082c:	681d      	ldr	r5, [r3, #0]
9000082e:	4b7a      	ldr	r3, [pc, #488]	; (90000a18 <ssi_handler+0x634>)
90000830:	681b      	ldr	r3, [r3, #0]
90000832:	4a7b      	ldr	r2, [pc, #492]	; (90000a20 <ssi_handler+0x63c>)
90000834:	2168      	movs	r1, #104	; 0x68
90000836:	fb01 f303 	mul.w	r3, r1, r3
9000083a:	4413      	add	r3, r2
9000083c:	3330      	adds	r3, #48	; 0x30
9000083e:	681e      	ldr	r6, [r3, #0]
90000840:	4b75      	ldr	r3, [pc, #468]	; (90000a18 <ssi_handler+0x634>)
90000842:	681b      	ldr	r3, [r3, #0]
90000844:	4a76      	ldr	r2, [pc, #472]	; (90000a20 <ssi_handler+0x63c>)
90000846:	2168      	movs	r1, #104	; 0x68
90000848:	fb01 f303 	mul.w	r3, r1, r3
9000084c:	4413      	add	r3, r2
9000084e:	3334      	adds	r3, #52	; 0x34
90000850:	681a      	ldr	r2, [r3, #0]
90000852:	60ba      	str	r2, [r7, #8]
90000854:	4b70      	ldr	r3, [pc, #448]	; (90000a18 <ssi_handler+0x634>)
90000856:	681b      	ldr	r3, [r3, #0]
90000858:	4a71      	ldr	r2, [pc, #452]	; (90000a20 <ssi_handler+0x63c>)
9000085a:	2168      	movs	r1, #104	; 0x68
9000085c:	fb01 f303 	mul.w	r3, r1, r3
90000860:	4413      	add	r3, r2
90000862:	3338      	adds	r3, #56	; 0x38
90000864:	6819      	ldr	r1, [r3, #0]
90000866:	6079      	str	r1, [r7, #4]
90000868:	4b6b      	ldr	r3, [pc, #428]	; (90000a18 <ssi_handler+0x634>)
9000086a:	681b      	ldr	r3, [r3, #0]
9000086c:	4a6c      	ldr	r2, [pc, #432]	; (90000a20 <ssi_handler+0x63c>)
9000086e:	2168      	movs	r1, #104	; 0x68
90000870:	fb01 f303 	mul.w	r3, r1, r3
90000874:	4413      	add	r3, r2
90000876:	333c      	adds	r3, #60	; 0x3c
90000878:	681b      	ldr	r3, [r3, #0]
9000087a:	603b      	str	r3, [r7, #0]
9000087c:	4b66      	ldr	r3, [pc, #408]	; (90000a18 <ssi_handler+0x634>)
9000087e:	681b      	ldr	r3, [r3, #0]
90000880:	4a67      	ldr	r2, [pc, #412]	; (90000a20 <ssi_handler+0x63c>)
90000882:	2168      	movs	r1, #104	; 0x68
90000884:	fb01 f303 	mul.w	r3, r1, r3
90000888:	4413      	add	r3, r2
9000088a:	3340      	adds	r3, #64	; 0x40
9000088c:	6819      	ldr	r1, [r3, #0]
						T[variable].info,
9000088e:	4b62      	ldr	r3, [pc, #392]	; (90000a18 <ssi_handler+0x634>)
90000890:	681b      	ldr	r3, [r3, #0]
90000892:	2268      	movs	r2, #104	; 0x68
90000894:	fb02 f303 	mul.w	r3, r2, r3
90000898:	3340      	adds	r3, #64	; 0x40
9000089a:	4a61      	ldr	r2, [pc, #388]	; (90000a20 <ssi_handler+0x63c>)
9000089c:	4413      	add	r3, r2
9000089e:	1d1a      	adds	r2, r3, #4
				sprintf(pcInsert,
900008a0:	4b5d      	ldr	r3, [pc, #372]	; (90000a18 <ssi_handler+0x634>)
900008a2:	681b      	ldr	r3, [r3, #0]
900008a4:	485e      	ldr	r0, [pc, #376]	; (90000a20 <ssi_handler+0x63c>)
900008a6:	f04f 0c68 	mov.w	ip, #104	; 0x68
900008aa:	fb0c f303 	mul.w	r3, ip, r3
900008ae:	4403      	add	r3, r0
900008b0:	3364      	adds	r3, #100	; 0x64
900008b2:	681b      	ldr	r3, [r3, #0]
900008b4:	930a      	str	r3, [sp, #40]	; 0x28
900008b6:	9209      	str	r2, [sp, #36]	; 0x24
900008b8:	4b5b      	ldr	r3, [pc, #364]	; (90000a28 <ssi_handler+0x644>)
900008ba:	9308      	str	r3, [sp, #32]
900008bc:	9107      	str	r1, [sp, #28]
900008be:	683b      	ldr	r3, [r7, #0]
900008c0:	9306      	str	r3, [sp, #24]
900008c2:	6879      	ldr	r1, [r7, #4]
900008c4:	9105      	str	r1, [sp, #20]
900008c6:	68ba      	ldr	r2, [r7, #8]
900008c8:	9204      	str	r2, [sp, #16]
900008ca:	9603      	str	r6, [sp, #12]
900008cc:	9502      	str	r5, [sp, #8]
900008ce:	9401      	str	r4, [sp, #4]
900008d0:	68f9      	ldr	r1, [r7, #12]
900008d2:	9100      	str	r1, [sp, #0]
900008d4:	693b      	ldr	r3, [r7, #16]
900008d6:	697a      	ldr	r2, [r7, #20]
900008d8:	4954      	ldr	r1, [pc, #336]	; (90000a2c <ssi_handler+0x648>)
900008da:	6a38      	ldr	r0, [r7, #32]
900008dc:	f015 fb04 	bl	90015ee8 <siprintf>
				if(jsongo == 2){
900008e0:	4b4e      	ldr	r3, [pc, #312]	; (90000a1c <ssi_handler+0x638>)
900008e2:	681b      	ldr	r3, [r3, #0]
900008e4:	2b02      	cmp	r3, #2
900008e6:	d177      	bne.n	900009d8 <ssi_handler+0x5f4>
					sprintf(pcInsert,
900008e8:	4b4b      	ldr	r3, [pc, #300]	; (90000a18 <ssi_handler+0x634>)
900008ea:	681b      	ldr	r3, [r3, #0]
900008ec:	4a4c      	ldr	r2, [pc, #304]	; (90000a20 <ssi_handler+0x63c>)
900008ee:	2168      	movs	r1, #104	; 0x68
900008f0:	fb01 f303 	mul.w	r3, r1, r3
900008f4:	4413      	add	r3, r2
900008f6:	681b      	ldr	r3, [r3, #0]
900008f8:	617b      	str	r3, [r7, #20]
900008fa:	4b47      	ldr	r3, [pc, #284]	; (90000a18 <ssi_handler+0x634>)
900008fc:	6819      	ldr	r1, [r3, #0]
900008fe:	6139      	str	r1, [r7, #16]
							tp[variable].pins,
90000900:	4b45      	ldr	r3, [pc, #276]	; (90000a18 <ssi_handler+0x634>)
90000902:	681a      	ldr	r2, [r3, #0]
90000904:	4613      	mov	r3, r2
90000906:	009b      	lsls	r3, r3, #2
90000908:	4413      	add	r3, r2
9000090a:	009b      	lsls	r3, r3, #2
9000090c:	4a45      	ldr	r2, [pc, #276]	; (90000a24 <ssi_handler+0x640>)
9000090e:	4413      	add	r3, r2
							T[variable].ptype,
90000910:	4a41      	ldr	r2, [pc, #260]	; (90000a18 <ssi_handler+0x634>)
90000912:	6812      	ldr	r2, [r2, #0]
90000914:	2168      	movs	r1, #104	; 0x68
90000916:	fb01 f202 	mul.w	r2, r1, r2
9000091a:	3218      	adds	r2, #24
9000091c:	4940      	ldr	r1, [pc, #256]	; (90000a20 <ssi_handler+0x63c>)
9000091e:	440a      	add	r2, r1
					sprintf(pcInsert,
90000920:	493d      	ldr	r1, [pc, #244]	; (90000a18 <ssi_handler+0x634>)
90000922:	6809      	ldr	r1, [r1, #0]
90000924:	483e      	ldr	r0, [pc, #248]	; (90000a20 <ssi_handler+0x63c>)
90000926:	2468      	movs	r4, #104	; 0x68
90000928:	fb04 f101 	mul.w	r1, r4, r1
9000092c:	4401      	add	r1, r0
9000092e:	3104      	adds	r1, #4
90000930:	6809      	ldr	r1, [r1, #0]
90000932:	4839      	ldr	r0, [pc, #228]	; (90000a18 <ssi_handler+0x634>)
90000934:	6800      	ldr	r0, [r0, #0]
90000936:	4c3a      	ldr	r4, [pc, #232]	; (90000a20 <ssi_handler+0x63c>)
90000938:	2568      	movs	r5, #104	; 0x68
9000093a:	fb05 f000 	mul.w	r0, r5, r0
9000093e:	4420      	add	r0, r4
90000940:	3008      	adds	r0, #8
90000942:	6800      	ldr	r0, [r0, #0]
90000944:	60f8      	str	r0, [r7, #12]
90000946:	4c34      	ldr	r4, [pc, #208]	; (90000a18 <ssi_handler+0x634>)
90000948:	6824      	ldr	r4, [r4, #0]
9000094a:	4d35      	ldr	r5, [pc, #212]	; (90000a20 <ssi_handler+0x63c>)
9000094c:	2668      	movs	r6, #104	; 0x68
9000094e:	fb06 f404 	mul.w	r4, r6, r4
90000952:	442c      	add	r4, r5
90000954:	340c      	adds	r4, #12
90000956:	6820      	ldr	r0, [r4, #0]
90000958:	60b8      	str	r0, [r7, #8]
9000095a:	4d2f      	ldr	r5, [pc, #188]	; (90000a18 <ssi_handler+0x634>)
9000095c:	682d      	ldr	r5, [r5, #0]
9000095e:	4e30      	ldr	r6, [pc, #192]	; (90000a20 <ssi_handler+0x63c>)
90000960:	f04f 0c68 	mov.w	ip, #104	; 0x68
90000964:	fb0c f505 	mul.w	r5, ip, r5
90000968:	4435      	add	r5, r6
9000096a:	3510      	adds	r5, #16
9000096c:	682d      	ldr	r5, [r5, #0]
9000096e:	4e2a      	ldr	r6, [pc, #168]	; (90000a18 <ssi_handler+0x634>)
90000970:	6836      	ldr	r6, [r6, #0]
90000972:	482b      	ldr	r0, [pc, #172]	; (90000a20 <ssi_handler+0x63c>)
90000974:	f04f 0c68 	mov.w	ip, #104	; 0x68
90000978:	fb0c f606 	mul.w	r6, ip, r6
9000097c:	4406      	add	r6, r0
9000097e:	3614      	adds	r6, #20
90000980:	6836      	ldr	r6, [r6, #0]
							T[variable].info,
90000982:	4825      	ldr	r0, [pc, #148]	; (90000a18 <ssi_handler+0x634>)
90000984:	6800      	ldr	r0, [r0, #0]
90000986:	f04f 0c68 	mov.w	ip, #104	; 0x68
9000098a:	fb0c fc00 	mul.w	ip, ip, r0
9000098e:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
90000992:	4823      	ldr	r0, [pc, #140]	; (90000a20 <ssi_handler+0x63c>)
90000994:	4484      	add	ip, r0
90000996:	f10c 0004 	add.w	r0, ip, #4
9000099a:	6078      	str	r0, [r7, #4]
					sprintf(pcInsert,
9000099c:	481e      	ldr	r0, [pc, #120]	; (90000a18 <ssi_handler+0x634>)
9000099e:	6800      	ldr	r0, [r0, #0]
900009a0:	4c1f      	ldr	r4, [pc, #124]	; (90000a20 <ssi_handler+0x63c>)
900009a2:	f04f 0c68 	mov.w	ip, #104	; 0x68
900009a6:	fb0c fc00 	mul.w	ip, ip, r0
900009aa:	44a4      	add	ip, r4
900009ac:	f10c 0c64 	add.w	ip, ip, #100	; 0x64
900009b0:	f8dc 0000 	ldr.w	r0, [ip]
900009b4:	9008      	str	r0, [sp, #32]
900009b6:	6878      	ldr	r0, [r7, #4]
900009b8:	9007      	str	r0, [sp, #28]
900009ba:	9606      	str	r6, [sp, #24]
900009bc:	9505      	str	r5, [sp, #20]
900009be:	68b8      	ldr	r0, [r7, #8]
900009c0:	9004      	str	r0, [sp, #16]
900009c2:	68f8      	ldr	r0, [r7, #12]
900009c4:	9003      	str	r0, [sp, #12]
900009c6:	9102      	str	r1, [sp, #8]
900009c8:	9201      	str	r2, [sp, #4]
900009ca:	9300      	str	r3, [sp, #0]
900009cc:	693b      	ldr	r3, [r7, #16]
900009ce:	697a      	ldr	r2, [r7, #20]
900009d0:	4917      	ldr	r1, [pc, #92]	; (90000a30 <ssi_handler+0x64c>)
900009d2:	6a38      	ldr	r0, [r7, #32]
900009d4:	f015 fa88 	bl	90015ee8 <siprintf>
				if(jsongo == 3){
900009d8:	4b10      	ldr	r3, [pc, #64]	; (90000a1c <ssi_handler+0x638>)
900009da:	681b      	ldr	r3, [r3, #0]
900009dc:	2b03      	cmp	r3, #3
900009de:	f040 8147 	bne.w	90000c70 <ssi_handler+0x88c>
					sprintf(pcInsert,
900009e2:	4b0d      	ldr	r3, [pc, #52]	; (90000a18 <ssi_handler+0x634>)
900009e4:	6819      	ldr	r1, [r3, #0]
							tp[variable].pins,
900009e6:	4b0c      	ldr	r3, [pc, #48]	; (90000a18 <ssi_handler+0x634>)
900009e8:	681a      	ldr	r2, [r3, #0]
900009ea:	4613      	mov	r3, r2
900009ec:	009b      	lsls	r3, r3, #2
900009ee:	4413      	add	r3, r2
900009f0:	009b      	lsls	r3, r3, #2
900009f2:	4a0c      	ldr	r2, [pc, #48]	; (90000a24 <ssi_handler+0x640>)
900009f4:	441a      	add	r2, r3
					sprintf(pcInsert,
900009f6:	4b08      	ldr	r3, [pc, #32]	; (90000a18 <ssi_handler+0x634>)
900009f8:	681b      	ldr	r3, [r3, #0]
900009fa:	4809      	ldr	r0, [pc, #36]	; (90000a20 <ssi_handler+0x63c>)
900009fc:	2468      	movs	r4, #104	; 0x68
900009fe:	fb04 f303 	mul.w	r3, r4, r3
90000a02:	4403      	add	r3, r0
90000a04:	681b      	ldr	r3, [r3, #0]
90000a06:	9300      	str	r3, [sp, #0]
90000a08:	4613      	mov	r3, r2
90000a0a:	460a      	mov	r2, r1
90000a0c:	4909      	ldr	r1, [pc, #36]	; (90000a34 <ssi_handler+0x650>)
90000a0e:	6a38      	ldr	r0, [r7, #32]
90000a10:	f015 fa6a 	bl	90015ee8 <siprintf>
90000a14:	e12c      	b.n	90000c70 <ssi_handler+0x88c>
90000a16:	bf00      	nop
90000a18:	240059c0 	.word	0x240059c0
90000a1c:	240059c4 	.word	0x240059c4
90000a20:	24000864 	.word	0x24000864
90000a24:	24000000 	.word	0x24000000
90000a28:	24005a34 	.word	0x24005a34
90000a2c:	900172a8 	.word	0x900172a8
90000a30:	90017344 	.word	0x90017344
90000a34:	900173c0 	.word	0x900173c0
				if(jsongo == 1){
90000a38:	4b98      	ldr	r3, [pc, #608]	; (90000c9c <ssi_handler+0x8b8>)
90000a3a:	681b      	ldr	r3, [r3, #0]
90000a3c:	2b01      	cmp	r3, #1
90000a3e:	d17e      	bne.n	90000b3e <ssi_handler+0x75a>
				sprintf(pcInsert,
90000a40:	4b97      	ldr	r3, [pc, #604]	; (90000ca0 <ssi_handler+0x8bc>)
90000a42:	681b      	ldr	r3, [r3, #0]
90000a44:	4a97      	ldr	r2, [pc, #604]	; (90000ca4 <ssi_handler+0x8c0>)
90000a46:	2168      	movs	r1, #104	; 0x68
90000a48:	fb01 f303 	mul.w	r3, r1, r3
90000a4c:	4413      	add	r3, r2
90000a4e:	681b      	ldr	r3, [r3, #0]
90000a50:	617b      	str	r3, [r7, #20]
90000a52:	4b93      	ldr	r3, [pc, #588]	; (90000ca0 <ssi_handler+0x8bc>)
90000a54:	6819      	ldr	r1, [r3, #0]
90000a56:	6139      	str	r1, [r7, #16]
						tp[variable].pins,
90000a58:	4b91      	ldr	r3, [pc, #580]	; (90000ca0 <ssi_handler+0x8bc>)
90000a5a:	681a      	ldr	r2, [r3, #0]
90000a5c:	4613      	mov	r3, r2
90000a5e:	009b      	lsls	r3, r3, #2
90000a60:	4413      	add	r3, r2
90000a62:	009b      	lsls	r3, r3, #2
90000a64:	4a90      	ldr	r2, [pc, #576]	; (90000ca8 <ssi_handler+0x8c4>)
90000a66:	1899      	adds	r1, r3, r2
90000a68:	60f9      	str	r1, [r7, #12]
						T[variable].ptype,
90000a6a:	4b8d      	ldr	r3, [pc, #564]	; (90000ca0 <ssi_handler+0x8bc>)
90000a6c:	681b      	ldr	r3, [r3, #0]
90000a6e:	2268      	movs	r2, #104	; 0x68
90000a70:	fb02 f303 	mul.w	r3, r2, r3
90000a74:	3318      	adds	r3, #24
90000a76:	4a8b      	ldr	r2, [pc, #556]	; (90000ca4 <ssi_handler+0x8c0>)
90000a78:	189c      	adds	r4, r3, r2
				sprintf(pcInsert,
90000a7a:	4b89      	ldr	r3, [pc, #548]	; (90000ca0 <ssi_handler+0x8bc>)
90000a7c:	681b      	ldr	r3, [r3, #0]
90000a7e:	4a89      	ldr	r2, [pc, #548]	; (90000ca4 <ssi_handler+0x8c0>)
90000a80:	2168      	movs	r1, #104	; 0x68
90000a82:	fb01 f303 	mul.w	r3, r1, r3
90000a86:	4413      	add	r3, r2
90000a88:	332c      	adds	r3, #44	; 0x2c
90000a8a:	681d      	ldr	r5, [r3, #0]
90000a8c:	4b84      	ldr	r3, [pc, #528]	; (90000ca0 <ssi_handler+0x8bc>)
90000a8e:	681b      	ldr	r3, [r3, #0]
90000a90:	4a84      	ldr	r2, [pc, #528]	; (90000ca4 <ssi_handler+0x8c0>)
90000a92:	2168      	movs	r1, #104	; 0x68
90000a94:	fb01 f303 	mul.w	r3, r1, r3
90000a98:	4413      	add	r3, r2
90000a9a:	3330      	adds	r3, #48	; 0x30
90000a9c:	681e      	ldr	r6, [r3, #0]
90000a9e:	4b80      	ldr	r3, [pc, #512]	; (90000ca0 <ssi_handler+0x8bc>)
90000aa0:	681b      	ldr	r3, [r3, #0]
90000aa2:	4a80      	ldr	r2, [pc, #512]	; (90000ca4 <ssi_handler+0x8c0>)
90000aa4:	2168      	movs	r1, #104	; 0x68
90000aa6:	fb01 f303 	mul.w	r3, r1, r3
90000aaa:	4413      	add	r3, r2
90000aac:	3334      	adds	r3, #52	; 0x34
90000aae:	681a      	ldr	r2, [r3, #0]
90000ab0:	60ba      	str	r2, [r7, #8]
90000ab2:	4b7b      	ldr	r3, [pc, #492]	; (90000ca0 <ssi_handler+0x8bc>)
90000ab4:	681b      	ldr	r3, [r3, #0]
90000ab6:	4a7b      	ldr	r2, [pc, #492]	; (90000ca4 <ssi_handler+0x8c0>)
90000ab8:	2168      	movs	r1, #104	; 0x68
90000aba:	fb01 f303 	mul.w	r3, r1, r3
90000abe:	4413      	add	r3, r2
90000ac0:	3338      	adds	r3, #56	; 0x38
90000ac2:	6819      	ldr	r1, [r3, #0]
90000ac4:	6079      	str	r1, [r7, #4]
90000ac6:	4b76      	ldr	r3, [pc, #472]	; (90000ca0 <ssi_handler+0x8bc>)
90000ac8:	681b      	ldr	r3, [r3, #0]
90000aca:	4a76      	ldr	r2, [pc, #472]	; (90000ca4 <ssi_handler+0x8c0>)
90000acc:	2168      	movs	r1, #104	; 0x68
90000ace:	fb01 f303 	mul.w	r3, r1, r3
90000ad2:	4413      	add	r3, r2
90000ad4:	333c      	adds	r3, #60	; 0x3c
90000ad6:	681b      	ldr	r3, [r3, #0]
90000ad8:	603b      	str	r3, [r7, #0]
90000ada:	4b71      	ldr	r3, [pc, #452]	; (90000ca0 <ssi_handler+0x8bc>)
90000adc:	681b      	ldr	r3, [r3, #0]
90000ade:	4a71      	ldr	r2, [pc, #452]	; (90000ca4 <ssi_handler+0x8c0>)
90000ae0:	2168      	movs	r1, #104	; 0x68
90000ae2:	fb01 f303 	mul.w	r3, r1, r3
90000ae6:	4413      	add	r3, r2
90000ae8:	3340      	adds	r3, #64	; 0x40
90000aea:	6819      	ldr	r1, [r3, #0]
						T[variable].info,
90000aec:	4b6c      	ldr	r3, [pc, #432]	; (90000ca0 <ssi_handler+0x8bc>)
90000aee:	681b      	ldr	r3, [r3, #0]
90000af0:	2268      	movs	r2, #104	; 0x68
90000af2:	fb02 f303 	mul.w	r3, r2, r3
90000af6:	3340      	adds	r3, #64	; 0x40
90000af8:	4a6a      	ldr	r2, [pc, #424]	; (90000ca4 <ssi_handler+0x8c0>)
90000afa:	4413      	add	r3, r2
90000afc:	1d1a      	adds	r2, r3, #4
				sprintf(pcInsert,
90000afe:	4b68      	ldr	r3, [pc, #416]	; (90000ca0 <ssi_handler+0x8bc>)
90000b00:	681b      	ldr	r3, [r3, #0]
90000b02:	4868      	ldr	r0, [pc, #416]	; (90000ca4 <ssi_handler+0x8c0>)
90000b04:	f04f 0c68 	mov.w	ip, #104	; 0x68
90000b08:	fb0c f303 	mul.w	r3, ip, r3
90000b0c:	4403      	add	r3, r0
90000b0e:	3364      	adds	r3, #100	; 0x64
90000b10:	681b      	ldr	r3, [r3, #0]
90000b12:	930a      	str	r3, [sp, #40]	; 0x28
90000b14:	9209      	str	r2, [sp, #36]	; 0x24
90000b16:	4b65      	ldr	r3, [pc, #404]	; (90000cac <ssi_handler+0x8c8>)
90000b18:	9308      	str	r3, [sp, #32]
90000b1a:	9107      	str	r1, [sp, #28]
90000b1c:	683b      	ldr	r3, [r7, #0]
90000b1e:	9306      	str	r3, [sp, #24]
90000b20:	6879      	ldr	r1, [r7, #4]
90000b22:	9105      	str	r1, [sp, #20]
90000b24:	68ba      	ldr	r2, [r7, #8]
90000b26:	9204      	str	r2, [sp, #16]
90000b28:	9603      	str	r6, [sp, #12]
90000b2a:	9502      	str	r5, [sp, #8]
90000b2c:	9401      	str	r4, [sp, #4]
90000b2e:	68f9      	ldr	r1, [r7, #12]
90000b30:	9100      	str	r1, [sp, #0]
90000b32:	693b      	ldr	r3, [r7, #16]
90000b34:	697a      	ldr	r2, [r7, #20]
90000b36:	495e      	ldr	r1, [pc, #376]	; (90000cb0 <ssi_handler+0x8cc>)
90000b38:	6a38      	ldr	r0, [r7, #32]
90000b3a:	f015 f9d5 	bl	90015ee8 <siprintf>
				if(jsongo == 2){
90000b3e:	4b57      	ldr	r3, [pc, #348]	; (90000c9c <ssi_handler+0x8b8>)
90000b40:	681b      	ldr	r3, [r3, #0]
90000b42:	2b02      	cmp	r3, #2
90000b44:	d177      	bne.n	90000c36 <ssi_handler+0x852>
					sprintf(pcInsert,
90000b46:	4b56      	ldr	r3, [pc, #344]	; (90000ca0 <ssi_handler+0x8bc>)
90000b48:	681b      	ldr	r3, [r3, #0]
90000b4a:	4a56      	ldr	r2, [pc, #344]	; (90000ca4 <ssi_handler+0x8c0>)
90000b4c:	2168      	movs	r1, #104	; 0x68
90000b4e:	fb01 f303 	mul.w	r3, r1, r3
90000b52:	4413      	add	r3, r2
90000b54:	681b      	ldr	r3, [r3, #0]
90000b56:	617b      	str	r3, [r7, #20]
90000b58:	4b51      	ldr	r3, [pc, #324]	; (90000ca0 <ssi_handler+0x8bc>)
90000b5a:	6819      	ldr	r1, [r3, #0]
90000b5c:	6139      	str	r1, [r7, #16]
							tp[variable].pins,
90000b5e:	4b50      	ldr	r3, [pc, #320]	; (90000ca0 <ssi_handler+0x8bc>)
90000b60:	681a      	ldr	r2, [r3, #0]
90000b62:	4613      	mov	r3, r2
90000b64:	009b      	lsls	r3, r3, #2
90000b66:	4413      	add	r3, r2
90000b68:	009b      	lsls	r3, r3, #2
90000b6a:	4a4f      	ldr	r2, [pc, #316]	; (90000ca8 <ssi_handler+0x8c4>)
90000b6c:	4413      	add	r3, r2
							T[variable].ptype,
90000b6e:	4a4c      	ldr	r2, [pc, #304]	; (90000ca0 <ssi_handler+0x8bc>)
90000b70:	6812      	ldr	r2, [r2, #0]
90000b72:	2168      	movs	r1, #104	; 0x68
90000b74:	fb01 f202 	mul.w	r2, r1, r2
90000b78:	3218      	adds	r2, #24
90000b7a:	494a      	ldr	r1, [pc, #296]	; (90000ca4 <ssi_handler+0x8c0>)
90000b7c:	440a      	add	r2, r1
					sprintf(pcInsert,
90000b7e:	4948      	ldr	r1, [pc, #288]	; (90000ca0 <ssi_handler+0x8bc>)
90000b80:	6809      	ldr	r1, [r1, #0]
90000b82:	4848      	ldr	r0, [pc, #288]	; (90000ca4 <ssi_handler+0x8c0>)
90000b84:	2468      	movs	r4, #104	; 0x68
90000b86:	fb04 f101 	mul.w	r1, r4, r1
90000b8a:	4401      	add	r1, r0
90000b8c:	3104      	adds	r1, #4
90000b8e:	6809      	ldr	r1, [r1, #0]
90000b90:	4843      	ldr	r0, [pc, #268]	; (90000ca0 <ssi_handler+0x8bc>)
90000b92:	6800      	ldr	r0, [r0, #0]
90000b94:	4c43      	ldr	r4, [pc, #268]	; (90000ca4 <ssi_handler+0x8c0>)
90000b96:	2568      	movs	r5, #104	; 0x68
90000b98:	fb05 f000 	mul.w	r0, r5, r0
90000b9c:	4420      	add	r0, r4
90000b9e:	3008      	adds	r0, #8
90000ba0:	6800      	ldr	r0, [r0, #0]
90000ba2:	60f8      	str	r0, [r7, #12]
90000ba4:	4c3e      	ldr	r4, [pc, #248]	; (90000ca0 <ssi_handler+0x8bc>)
90000ba6:	6824      	ldr	r4, [r4, #0]
90000ba8:	4d3e      	ldr	r5, [pc, #248]	; (90000ca4 <ssi_handler+0x8c0>)
90000baa:	2668      	movs	r6, #104	; 0x68
90000bac:	fb06 f404 	mul.w	r4, r6, r4
90000bb0:	442c      	add	r4, r5
90000bb2:	340c      	adds	r4, #12
90000bb4:	6820      	ldr	r0, [r4, #0]
90000bb6:	60b8      	str	r0, [r7, #8]
90000bb8:	4d39      	ldr	r5, [pc, #228]	; (90000ca0 <ssi_handler+0x8bc>)
90000bba:	682d      	ldr	r5, [r5, #0]
90000bbc:	4e39      	ldr	r6, [pc, #228]	; (90000ca4 <ssi_handler+0x8c0>)
90000bbe:	f04f 0c68 	mov.w	ip, #104	; 0x68
90000bc2:	fb0c f505 	mul.w	r5, ip, r5
90000bc6:	4435      	add	r5, r6
90000bc8:	3510      	adds	r5, #16
90000bca:	682d      	ldr	r5, [r5, #0]
90000bcc:	4e34      	ldr	r6, [pc, #208]	; (90000ca0 <ssi_handler+0x8bc>)
90000bce:	6836      	ldr	r6, [r6, #0]
90000bd0:	4834      	ldr	r0, [pc, #208]	; (90000ca4 <ssi_handler+0x8c0>)
90000bd2:	f04f 0c68 	mov.w	ip, #104	; 0x68
90000bd6:	fb0c f606 	mul.w	r6, ip, r6
90000bda:	4406      	add	r6, r0
90000bdc:	3614      	adds	r6, #20
90000bde:	6836      	ldr	r6, [r6, #0]
							T[variable].info,
90000be0:	482f      	ldr	r0, [pc, #188]	; (90000ca0 <ssi_handler+0x8bc>)
90000be2:	6800      	ldr	r0, [r0, #0]
90000be4:	f04f 0c68 	mov.w	ip, #104	; 0x68
90000be8:	fb0c fc00 	mul.w	ip, ip, r0
90000bec:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
90000bf0:	482c      	ldr	r0, [pc, #176]	; (90000ca4 <ssi_handler+0x8c0>)
90000bf2:	4484      	add	ip, r0
90000bf4:	f10c 0004 	add.w	r0, ip, #4
90000bf8:	6078      	str	r0, [r7, #4]
					sprintf(pcInsert,
90000bfa:	4829      	ldr	r0, [pc, #164]	; (90000ca0 <ssi_handler+0x8bc>)
90000bfc:	6800      	ldr	r0, [r0, #0]
90000bfe:	4c29      	ldr	r4, [pc, #164]	; (90000ca4 <ssi_handler+0x8c0>)
90000c00:	f04f 0c68 	mov.w	ip, #104	; 0x68
90000c04:	fb0c fc00 	mul.w	ip, ip, r0
90000c08:	44a4      	add	ip, r4
90000c0a:	f10c 0c64 	add.w	ip, ip, #100	; 0x64
90000c0e:	f8dc 0000 	ldr.w	r0, [ip]
90000c12:	9008      	str	r0, [sp, #32]
90000c14:	6878      	ldr	r0, [r7, #4]
90000c16:	9007      	str	r0, [sp, #28]
90000c18:	9606      	str	r6, [sp, #24]
90000c1a:	9505      	str	r5, [sp, #20]
90000c1c:	68b8      	ldr	r0, [r7, #8]
90000c1e:	9004      	str	r0, [sp, #16]
90000c20:	68f8      	ldr	r0, [r7, #12]
90000c22:	9003      	str	r0, [sp, #12]
90000c24:	9102      	str	r1, [sp, #8]
90000c26:	9201      	str	r2, [sp, #4]
90000c28:	9300      	str	r3, [sp, #0]
90000c2a:	693b      	ldr	r3, [r7, #16]
90000c2c:	697a      	ldr	r2, [r7, #20]
90000c2e:	4921      	ldr	r1, [pc, #132]	; (90000cb4 <ssi_handler+0x8d0>)
90000c30:	6a38      	ldr	r0, [r7, #32]
90000c32:	f015 f959 	bl	90015ee8 <siprintf>
				if(jsongo == 3){
90000c36:	4b19      	ldr	r3, [pc, #100]	; (90000c9c <ssi_handler+0x8b8>)
90000c38:	681b      	ldr	r3, [r3, #0]
90000c3a:	2b03      	cmp	r3, #3
90000c3c:	d118      	bne.n	90000c70 <ssi_handler+0x88c>
					sprintf(pcInsert,
90000c3e:	4b18      	ldr	r3, [pc, #96]	; (90000ca0 <ssi_handler+0x8bc>)
90000c40:	6819      	ldr	r1, [r3, #0]
							tp[variable].pins,
90000c42:	4b17      	ldr	r3, [pc, #92]	; (90000ca0 <ssi_handler+0x8bc>)
90000c44:	681a      	ldr	r2, [r3, #0]
90000c46:	4613      	mov	r3, r2
90000c48:	009b      	lsls	r3, r3, #2
90000c4a:	4413      	add	r3, r2
90000c4c:	009b      	lsls	r3, r3, #2
90000c4e:	4a16      	ldr	r2, [pc, #88]	; (90000ca8 <ssi_handler+0x8c4>)
90000c50:	441a      	add	r2, r3
					sprintf(pcInsert,
90000c52:	4b13      	ldr	r3, [pc, #76]	; (90000ca0 <ssi_handler+0x8bc>)
90000c54:	681b      	ldr	r3, [r3, #0]
90000c56:	4813      	ldr	r0, [pc, #76]	; (90000ca4 <ssi_handler+0x8c0>)
90000c58:	2468      	movs	r4, #104	; 0x68
90000c5a:	fb04 f303 	mul.w	r3, r4, r3
90000c5e:	4403      	add	r3, r0
90000c60:	681b      	ldr	r3, [r3, #0]
90000c62:	9300      	str	r3, [sp, #0]
90000c64:	4613      	mov	r3, r2
90000c66:	460a      	mov	r2, r1
90000c68:	4913      	ldr	r1, [pc, #76]	; (90000cb8 <ssi_handler+0x8d4>)
90000c6a:	6a38      	ldr	r0, [r7, #32]
90000c6c:	f015 f93c 	bl	90015ee8 <siprintf>
			memset(listaction, '\0', sizeof(listaction));
90000c70:	f44f 72c8 	mov.w	r2, #400	; 0x190
90000c74:	2100      	movs	r1, #0
90000c76:	480d      	ldr	r0, [pc, #52]	; (90000cac <ssi_handler+0x8c8>)
90000c78:	f014 ff1f 	bl	90015aba <memset>
			*next_tag_part = variable;
90000c7c:	4b08      	ldr	r3, [pc, #32]	; (90000ca0 <ssi_handler+0x8bc>)
90000c7e:	681b      	ldr	r3, [r3, #0]
90000c80:	b29a      	uxth	r2, r3
90000c82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
90000c84:	801a      	strh	r2, [r3, #0]
			variable++;
90000c86:	4b06      	ldr	r3, [pc, #24]	; (90000ca0 <ssi_handler+0x8bc>)
90000c88:	681b      	ldr	r3, [r3, #0]
90000c8a:	3301      	adds	r3, #1
90000c8c:	4a04      	ldr	r2, [pc, #16]	; (90000ca0 <ssi_handler+0x8bc>)
90000c8e:	6013      	str	r3, [r2, #0]
			return strlen(pcInsert);
90000c90:	6a38      	ldr	r0, [r7, #32]
90000c92:	f7ff fb2f 	bl	900002f4 <strlen>
90000c96:	4603      	mov	r3, r0
90000c98:	b29b      	uxth	r3, r3
90000c9a:	e190      	b.n	90000fbe <ssi_handler+0xbda>
90000c9c:	240059c4 	.word	0x240059c4
90000ca0:	240059c0 	.word	0x240059c0
90000ca4:	24000864 	.word	0x24000864
90000ca8:	24000000 	.word	0x24000000
90000cac:	24005a34 	.word	0x24005a34
90000cb0:	900173e4 	.word	0x900173e4
90000cb4:	90017480 	.word	0x90017480
90000cb8:	900174fc 	.word	0x900174fc
			if(idtab == 1){
90000cbc:	4b84      	ldr	r3, [pc, #528]	; (90000ed0 <ssi_handler+0xaec>)
90000cbe:	681b      	ldr	r3, [r3, #0]
90000cc0:	2b01      	cmp	r3, #1
90000cc2:	d17c      	bne.n	90000dbe <ssi_handler+0x9da>
			sprintf(pcInsert,
90000cc4:	4b83      	ldr	r3, [pc, #524]	; (90000ed4 <ssi_handler+0xaf0>)
90000cc6:	681b      	ldr	r3, [r3, #0]
90000cc8:	4a83      	ldr	r2, [pc, #524]	; (90000ed8 <ssi_handler+0xaf4>)
90000cca:	2168      	movs	r1, #104	; 0x68
90000ccc:	fb01 f303 	mul.w	r3, r1, r3
90000cd0:	4413      	add	r3, r2
90000cd2:	681b      	ldr	r3, [r3, #0]
90000cd4:	617b      	str	r3, [r7, #20]
90000cd6:	4b7f      	ldr	r3, [pc, #508]	; (90000ed4 <ssi_handler+0xaf0>)
90000cd8:	6819      	ldr	r1, [r3, #0]
90000cda:	6139      	str	r1, [r7, #16]
					tp[id].pins,
90000cdc:	4b7d      	ldr	r3, [pc, #500]	; (90000ed4 <ssi_handler+0xaf0>)
90000cde:	681a      	ldr	r2, [r3, #0]
90000ce0:	4613      	mov	r3, r2
90000ce2:	009b      	lsls	r3, r3, #2
90000ce4:	4413      	add	r3, r2
90000ce6:	009b      	lsls	r3, r3, #2
90000ce8:	4a7c      	ldr	r2, [pc, #496]	; (90000edc <ssi_handler+0xaf8>)
90000cea:	1899      	adds	r1, r3, r2
90000cec:	60f9      	str	r1, [r7, #12]
					T[id].ptype,
90000cee:	4b79      	ldr	r3, [pc, #484]	; (90000ed4 <ssi_handler+0xaf0>)
90000cf0:	681b      	ldr	r3, [r3, #0]
90000cf2:	2268      	movs	r2, #104	; 0x68
90000cf4:	fb02 f303 	mul.w	r3, r2, r3
90000cf8:	3318      	adds	r3, #24
90000cfa:	4a77      	ldr	r2, [pc, #476]	; (90000ed8 <ssi_handler+0xaf4>)
90000cfc:	189c      	adds	r4, r3, r2
			sprintf(pcInsert,
90000cfe:	4b75      	ldr	r3, [pc, #468]	; (90000ed4 <ssi_handler+0xaf0>)
90000d00:	681b      	ldr	r3, [r3, #0]
90000d02:	4a75      	ldr	r2, [pc, #468]	; (90000ed8 <ssi_handler+0xaf4>)
90000d04:	2168      	movs	r1, #104	; 0x68
90000d06:	fb01 f303 	mul.w	r3, r1, r3
90000d0a:	4413      	add	r3, r2
90000d0c:	332c      	adds	r3, #44	; 0x2c
90000d0e:	681d      	ldr	r5, [r3, #0]
90000d10:	4b70      	ldr	r3, [pc, #448]	; (90000ed4 <ssi_handler+0xaf0>)
90000d12:	681b      	ldr	r3, [r3, #0]
90000d14:	4a70      	ldr	r2, [pc, #448]	; (90000ed8 <ssi_handler+0xaf4>)
90000d16:	2168      	movs	r1, #104	; 0x68
90000d18:	fb01 f303 	mul.w	r3, r1, r3
90000d1c:	4413      	add	r3, r2
90000d1e:	3330      	adds	r3, #48	; 0x30
90000d20:	681e      	ldr	r6, [r3, #0]
90000d22:	4b6c      	ldr	r3, [pc, #432]	; (90000ed4 <ssi_handler+0xaf0>)
90000d24:	681b      	ldr	r3, [r3, #0]
90000d26:	4a6c      	ldr	r2, [pc, #432]	; (90000ed8 <ssi_handler+0xaf4>)
90000d28:	2168      	movs	r1, #104	; 0x68
90000d2a:	fb01 f303 	mul.w	r3, r1, r3
90000d2e:	4413      	add	r3, r2
90000d30:	3334      	adds	r3, #52	; 0x34
90000d32:	681a      	ldr	r2, [r3, #0]
90000d34:	60ba      	str	r2, [r7, #8]
90000d36:	4b67      	ldr	r3, [pc, #412]	; (90000ed4 <ssi_handler+0xaf0>)
90000d38:	681b      	ldr	r3, [r3, #0]
90000d3a:	4a67      	ldr	r2, [pc, #412]	; (90000ed8 <ssi_handler+0xaf4>)
90000d3c:	2168      	movs	r1, #104	; 0x68
90000d3e:	fb01 f303 	mul.w	r3, r1, r3
90000d42:	4413      	add	r3, r2
90000d44:	3338      	adds	r3, #56	; 0x38
90000d46:	6819      	ldr	r1, [r3, #0]
90000d48:	6079      	str	r1, [r7, #4]
90000d4a:	4b62      	ldr	r3, [pc, #392]	; (90000ed4 <ssi_handler+0xaf0>)
90000d4c:	681b      	ldr	r3, [r3, #0]
90000d4e:	4a62      	ldr	r2, [pc, #392]	; (90000ed8 <ssi_handler+0xaf4>)
90000d50:	2168      	movs	r1, #104	; 0x68
90000d52:	fb01 f303 	mul.w	r3, r1, r3
90000d56:	4413      	add	r3, r2
90000d58:	333c      	adds	r3, #60	; 0x3c
90000d5a:	681b      	ldr	r3, [r3, #0]
90000d5c:	603b      	str	r3, [r7, #0]
90000d5e:	4b5d      	ldr	r3, [pc, #372]	; (90000ed4 <ssi_handler+0xaf0>)
90000d60:	681b      	ldr	r3, [r3, #0]
90000d62:	4a5d      	ldr	r2, [pc, #372]	; (90000ed8 <ssi_handler+0xaf4>)
90000d64:	2168      	movs	r1, #104	; 0x68
90000d66:	fb01 f303 	mul.w	r3, r1, r3
90000d6a:	4413      	add	r3, r2
90000d6c:	3340      	adds	r3, #64	; 0x40
90000d6e:	6819      	ldr	r1, [r3, #0]
					T[id].info,
90000d70:	4b58      	ldr	r3, [pc, #352]	; (90000ed4 <ssi_handler+0xaf0>)
90000d72:	681b      	ldr	r3, [r3, #0]
90000d74:	2268      	movs	r2, #104	; 0x68
90000d76:	fb02 f303 	mul.w	r3, r2, r3
90000d7a:	3340      	adds	r3, #64	; 0x40
90000d7c:	4a56      	ldr	r2, [pc, #344]	; (90000ed8 <ssi_handler+0xaf4>)
90000d7e:	4413      	add	r3, r2
90000d80:	1d1a      	adds	r2, r3, #4
			sprintf(pcInsert,
90000d82:	4b54      	ldr	r3, [pc, #336]	; (90000ed4 <ssi_handler+0xaf0>)
90000d84:	681b      	ldr	r3, [r3, #0]
90000d86:	4854      	ldr	r0, [pc, #336]	; (90000ed8 <ssi_handler+0xaf4>)
90000d88:	f04f 0c68 	mov.w	ip, #104	; 0x68
90000d8c:	fb0c f303 	mul.w	r3, ip, r3
90000d90:	4403      	add	r3, r0
90000d92:	3364      	adds	r3, #100	; 0x64
90000d94:	681b      	ldr	r3, [r3, #0]
90000d96:	9309      	str	r3, [sp, #36]	; 0x24
90000d98:	9208      	str	r2, [sp, #32]
90000d9a:	9107      	str	r1, [sp, #28]
90000d9c:	683b      	ldr	r3, [r7, #0]
90000d9e:	9306      	str	r3, [sp, #24]
90000da0:	6879      	ldr	r1, [r7, #4]
90000da2:	9105      	str	r1, [sp, #20]
90000da4:	68ba      	ldr	r2, [r7, #8]
90000da6:	9204      	str	r2, [sp, #16]
90000da8:	9603      	str	r6, [sp, #12]
90000daa:	9502      	str	r5, [sp, #8]
90000dac:	9401      	str	r4, [sp, #4]
90000dae:	68f9      	ldr	r1, [r7, #12]
90000db0:	9100      	str	r1, [sp, #0]
90000db2:	693b      	ldr	r3, [r7, #16]
90000db4:	697a      	ldr	r2, [r7, #20]
90000db6:	494a      	ldr	r1, [pc, #296]	; (90000ee0 <ssi_handler+0xafc>)
90000db8:	6a38      	ldr	r0, [r7, #32]
90000dba:	f015 f895 	bl	90015ee8 <siprintf>
			if(idtab == 2){
90000dbe:	4b44      	ldr	r3, [pc, #272]	; (90000ed0 <ssi_handler+0xaec>)
90000dc0:	681b      	ldr	r3, [r3, #0]
90000dc2:	2b02      	cmp	r3, #2
90000dc4:	d177      	bne.n	90000eb6 <ssi_handler+0xad2>
			sprintf(pcInsert,
90000dc6:	4b43      	ldr	r3, [pc, #268]	; (90000ed4 <ssi_handler+0xaf0>)
90000dc8:	681b      	ldr	r3, [r3, #0]
90000dca:	4a43      	ldr	r2, [pc, #268]	; (90000ed8 <ssi_handler+0xaf4>)
90000dcc:	2168      	movs	r1, #104	; 0x68
90000dce:	fb01 f303 	mul.w	r3, r1, r3
90000dd2:	4413      	add	r3, r2
90000dd4:	681b      	ldr	r3, [r3, #0]
90000dd6:	617b      	str	r3, [r7, #20]
90000dd8:	4b3e      	ldr	r3, [pc, #248]	; (90000ed4 <ssi_handler+0xaf0>)
90000dda:	6819      	ldr	r1, [r3, #0]
90000ddc:	6139      	str	r1, [r7, #16]
					tp[id].pins,
90000dde:	4b3d      	ldr	r3, [pc, #244]	; (90000ed4 <ssi_handler+0xaf0>)
90000de0:	681a      	ldr	r2, [r3, #0]
90000de2:	4613      	mov	r3, r2
90000de4:	009b      	lsls	r3, r3, #2
90000de6:	4413      	add	r3, r2
90000de8:	009b      	lsls	r3, r3, #2
90000dea:	4a3c      	ldr	r2, [pc, #240]	; (90000edc <ssi_handler+0xaf8>)
90000dec:	4413      	add	r3, r2
					T[id].ptype,
90000dee:	4a39      	ldr	r2, [pc, #228]	; (90000ed4 <ssi_handler+0xaf0>)
90000df0:	6812      	ldr	r2, [r2, #0]
90000df2:	2168      	movs	r1, #104	; 0x68
90000df4:	fb01 f202 	mul.w	r2, r1, r2
90000df8:	3218      	adds	r2, #24
90000dfa:	4937      	ldr	r1, [pc, #220]	; (90000ed8 <ssi_handler+0xaf4>)
90000dfc:	440a      	add	r2, r1
			sprintf(pcInsert,
90000dfe:	4935      	ldr	r1, [pc, #212]	; (90000ed4 <ssi_handler+0xaf0>)
90000e00:	6809      	ldr	r1, [r1, #0]
90000e02:	4835      	ldr	r0, [pc, #212]	; (90000ed8 <ssi_handler+0xaf4>)
90000e04:	2468      	movs	r4, #104	; 0x68
90000e06:	fb04 f101 	mul.w	r1, r4, r1
90000e0a:	4401      	add	r1, r0
90000e0c:	3104      	adds	r1, #4
90000e0e:	6809      	ldr	r1, [r1, #0]
90000e10:	4830      	ldr	r0, [pc, #192]	; (90000ed4 <ssi_handler+0xaf0>)
90000e12:	6800      	ldr	r0, [r0, #0]
90000e14:	4c30      	ldr	r4, [pc, #192]	; (90000ed8 <ssi_handler+0xaf4>)
90000e16:	2568      	movs	r5, #104	; 0x68
90000e18:	fb05 f000 	mul.w	r0, r5, r0
90000e1c:	4420      	add	r0, r4
90000e1e:	3008      	adds	r0, #8
90000e20:	6800      	ldr	r0, [r0, #0]
90000e22:	60f8      	str	r0, [r7, #12]
90000e24:	4c2b      	ldr	r4, [pc, #172]	; (90000ed4 <ssi_handler+0xaf0>)
90000e26:	6824      	ldr	r4, [r4, #0]
90000e28:	4d2b      	ldr	r5, [pc, #172]	; (90000ed8 <ssi_handler+0xaf4>)
90000e2a:	2668      	movs	r6, #104	; 0x68
90000e2c:	fb06 f404 	mul.w	r4, r6, r4
90000e30:	442c      	add	r4, r5
90000e32:	340c      	adds	r4, #12
90000e34:	6820      	ldr	r0, [r4, #0]
90000e36:	60b8      	str	r0, [r7, #8]
90000e38:	4d26      	ldr	r5, [pc, #152]	; (90000ed4 <ssi_handler+0xaf0>)
90000e3a:	682d      	ldr	r5, [r5, #0]
90000e3c:	4e26      	ldr	r6, [pc, #152]	; (90000ed8 <ssi_handler+0xaf4>)
90000e3e:	f04f 0c68 	mov.w	ip, #104	; 0x68
90000e42:	fb0c f505 	mul.w	r5, ip, r5
90000e46:	4435      	add	r5, r6
90000e48:	3510      	adds	r5, #16
90000e4a:	682d      	ldr	r5, [r5, #0]
90000e4c:	4e21      	ldr	r6, [pc, #132]	; (90000ed4 <ssi_handler+0xaf0>)
90000e4e:	6836      	ldr	r6, [r6, #0]
90000e50:	4821      	ldr	r0, [pc, #132]	; (90000ed8 <ssi_handler+0xaf4>)
90000e52:	f04f 0c68 	mov.w	ip, #104	; 0x68
90000e56:	fb0c f606 	mul.w	r6, ip, r6
90000e5a:	4406      	add	r6, r0
90000e5c:	3614      	adds	r6, #20
90000e5e:	6836      	ldr	r6, [r6, #0]
					T[id].info,
90000e60:	481c      	ldr	r0, [pc, #112]	; (90000ed4 <ssi_handler+0xaf0>)
90000e62:	6800      	ldr	r0, [r0, #0]
90000e64:	f04f 0c68 	mov.w	ip, #104	; 0x68
90000e68:	fb0c fc00 	mul.w	ip, ip, r0
90000e6c:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
90000e70:	4819      	ldr	r0, [pc, #100]	; (90000ed8 <ssi_handler+0xaf4>)
90000e72:	4484      	add	ip, r0
90000e74:	f10c 0004 	add.w	r0, ip, #4
90000e78:	6078      	str	r0, [r7, #4]
			sprintf(pcInsert,
90000e7a:	4816      	ldr	r0, [pc, #88]	; (90000ed4 <ssi_handler+0xaf0>)
90000e7c:	6800      	ldr	r0, [r0, #0]
90000e7e:	4c16      	ldr	r4, [pc, #88]	; (90000ed8 <ssi_handler+0xaf4>)
90000e80:	f04f 0c68 	mov.w	ip, #104	; 0x68
90000e84:	fb0c fc00 	mul.w	ip, ip, r0
90000e88:	44a4      	add	ip, r4
90000e8a:	f10c 0c64 	add.w	ip, ip, #100	; 0x64
90000e8e:	f8dc 0000 	ldr.w	r0, [ip]
90000e92:	9008      	str	r0, [sp, #32]
90000e94:	6878      	ldr	r0, [r7, #4]
90000e96:	9007      	str	r0, [sp, #28]
90000e98:	9606      	str	r6, [sp, #24]
90000e9a:	9505      	str	r5, [sp, #20]
90000e9c:	68b8      	ldr	r0, [r7, #8]
90000e9e:	9004      	str	r0, [sp, #16]
90000ea0:	68f8      	ldr	r0, [r7, #12]
90000ea2:	9003      	str	r0, [sp, #12]
90000ea4:	9102      	str	r1, [sp, #8]
90000ea6:	9201      	str	r2, [sp, #4]
90000ea8:	9300      	str	r3, [sp, #0]
90000eaa:	693b      	ldr	r3, [r7, #16]
90000eac:	697a      	ldr	r2, [r7, #20]
90000eae:	490d      	ldr	r1, [pc, #52]	; (90000ee4 <ssi_handler+0xb00>)
90000eb0:	6a38      	ldr	r0, [r7, #32]
90000eb2:	f015 f819 	bl	90015ee8 <siprintf>
			if(idtab == 3){
90000eb6:	4b06      	ldr	r3, [pc, #24]	; (90000ed0 <ssi_handler+0xaec>)
90000eb8:	681b      	ldr	r3, [r3, #0]
90000eba:	2b03      	cmp	r3, #3
90000ebc:	d167      	bne.n	90000f8e <ssi_handler+0xbaa>
				sprintf(jsonrp, "{");
90000ebe:	490a      	ldr	r1, [pc, #40]	; (90000ee8 <ssi_handler+0xb04>)
90000ec0:	480a      	ldr	r0, [pc, #40]	; (90000eec <ssi_handler+0xb08>)
90000ec2:	f015 f811 	bl	90015ee8 <siprintf>
				strcat(bufervar, jsonrp);
90000ec6:	4909      	ldr	r1, [pc, #36]	; (90000eec <ssi_handler+0xb08>)
90000ec8:	4809      	ldr	r0, [pc, #36]	; (90000ef0 <ssi_handler+0xb0c>)
90000eca:	f015 f870 	bl	90015fae <strcat>
			while(variable <= numpin-1){
90000ece:	e036      	b.n	90000f3e <ssi_handler+0xb5a>
90000ed0:	240059cc 	.word	0x240059cc
90000ed4:	240059c8 	.word	0x240059c8
90000ed8:	24000864 	.word	0x24000864
90000edc:	24000000 	.word	0x24000000
90000ee0:	90017520 	.word	0x90017520
90000ee4:	900175b0 	.word	0x900175b0
90000ee8:	90017158 	.word	0x90017158
90000eec:	240059d0 	.word	0x240059d0
90000ef0:	240024f4 	.word	0x240024f4
				if(T[variable].topin == 2){
90000ef4:	4b34      	ldr	r3, [pc, #208]	; (90000fc8 <ssi_handler+0xbe4>)
90000ef6:	681b      	ldr	r3, [r3, #0]
90000ef8:	4a34      	ldr	r2, [pc, #208]	; (90000fcc <ssi_handler+0xbe8>)
90000efa:	2168      	movs	r1, #104	; 0x68
90000efc:	fb01 f303 	mul.w	r3, r1, r3
90000f00:	4413      	add	r3, r2
90000f02:	681b      	ldr	r3, [r3, #0]
90000f04:	2b02      	cmp	r3, #2
90000f06:	d115      	bne.n	90000f34 <ssi_handler+0xb50>
					sprintf(jsonrp, "\"%s\":%d,", tp[variable].pins, variable);
90000f08:	4b2f      	ldr	r3, [pc, #188]	; (90000fc8 <ssi_handler+0xbe4>)
90000f0a:	681a      	ldr	r2, [r3, #0]
90000f0c:	4613      	mov	r3, r2
90000f0e:	009b      	lsls	r3, r3, #2
90000f10:	4413      	add	r3, r2
90000f12:	009b      	lsls	r3, r3, #2
90000f14:	4a2e      	ldr	r2, [pc, #184]	; (90000fd0 <ssi_handler+0xbec>)
90000f16:	441a      	add	r2, r3
90000f18:	4b2b      	ldr	r3, [pc, #172]	; (90000fc8 <ssi_handler+0xbe4>)
90000f1a:	681b      	ldr	r3, [r3, #0]
90000f1c:	492d      	ldr	r1, [pc, #180]	; (90000fd4 <ssi_handler+0xbf0>)
90000f1e:	482e      	ldr	r0, [pc, #184]	; (90000fd8 <ssi_handler+0xbf4>)
90000f20:	f014 ffe2 	bl	90015ee8 <siprintf>
				    strcat(bufervar, jsonrp);
90000f24:	492c      	ldr	r1, [pc, #176]	; (90000fd8 <ssi_handler+0xbf4>)
90000f26:	482d      	ldr	r0, [pc, #180]	; (90000fdc <ssi_handler+0xbf8>)
90000f28:	f015 f841 	bl	90015fae <strcat>
					printf("%s \r\n",  jsonrp);
90000f2c:	492a      	ldr	r1, [pc, #168]	; (90000fd8 <ssi_handler+0xbf4>)
90000f2e:	482c      	ldr	r0, [pc, #176]	; (90000fe0 <ssi_handler+0xbfc>)
90000f30:	f014 fe60 	bl	90015bf4 <iprintf>
				variable++;
90000f34:	4b24      	ldr	r3, [pc, #144]	; (90000fc8 <ssi_handler+0xbe4>)
90000f36:	681b      	ldr	r3, [r3, #0]
90000f38:	3301      	adds	r3, #1
90000f3a:	4a23      	ldr	r2, [pc, #140]	; (90000fc8 <ssi_handler+0xbe4>)
90000f3c:	6013      	str	r3, [r2, #0]
			while(variable <= numpin-1){
90000f3e:	4b22      	ldr	r3, [pc, #136]	; (90000fc8 <ssi_handler+0xbe4>)
90000f40:	681b      	ldr	r3, [r3, #0]
90000f42:	2b3e      	cmp	r3, #62	; 0x3e
90000f44:	ddd6      	ble.n	90000ef4 <ssi_handler+0xb10>
				bufervar[strlen(bufervar)-1] = '\0';
90000f46:	4825      	ldr	r0, [pc, #148]	; (90000fdc <ssi_handler+0xbf8>)
90000f48:	f7ff f9d4 	bl	900002f4 <strlen>
90000f4c:	4603      	mov	r3, r0
90000f4e:	3b01      	subs	r3, #1
90000f50:	4a22      	ldr	r2, [pc, #136]	; (90000fdc <ssi_handler+0xbf8>)
90000f52:	2100      	movs	r1, #0
90000f54:	54d1      	strb	r1, [r2, r3]
				sprintf(jsonrp, "}");
90000f56:	4923      	ldr	r1, [pc, #140]	; (90000fe4 <ssi_handler+0xc00>)
90000f58:	481f      	ldr	r0, [pc, #124]	; (90000fd8 <ssi_handler+0xbf4>)
90000f5a:	f014 ffc5 	bl	90015ee8 <siprintf>
				strcat(bufervar, jsonrp);
90000f5e:	491e      	ldr	r1, [pc, #120]	; (90000fd8 <ssi_handler+0xbf4>)
90000f60:	481e      	ldr	r0, [pc, #120]	; (90000fdc <ssi_handler+0xbf8>)
90000f62:	f015 f824 	bl	90015fae <strcat>
				variable = 0;
90000f66:	4b18      	ldr	r3, [pc, #96]	; (90000fc8 <ssi_handler+0xbe4>)
90000f68:	2200      	movs	r2, #0
90000f6a:	601a      	str	r2, [r3, #0]
				sprintf(pcInsert,"{\"id\":%d,\"pins\":\"%s\",\"rpins\":%s}",	id, tp[id].pins, bufervar);
90000f6c:	4b1e      	ldr	r3, [pc, #120]	; (90000fe8 <ssi_handler+0xc04>)
90000f6e:	6819      	ldr	r1, [r3, #0]
90000f70:	4b1d      	ldr	r3, [pc, #116]	; (90000fe8 <ssi_handler+0xc04>)
90000f72:	681a      	ldr	r2, [r3, #0]
90000f74:	4613      	mov	r3, r2
90000f76:	009b      	lsls	r3, r3, #2
90000f78:	4413      	add	r3, r2
90000f7a:	009b      	lsls	r3, r3, #2
90000f7c:	4a14      	ldr	r2, [pc, #80]	; (90000fd0 <ssi_handler+0xbec>)
90000f7e:	4413      	add	r3, r2
90000f80:	4a16      	ldr	r2, [pc, #88]	; (90000fdc <ssi_handler+0xbf8>)
90000f82:	9200      	str	r2, [sp, #0]
90000f84:	460a      	mov	r2, r1
90000f86:	4919      	ldr	r1, [pc, #100]	; (90000fec <ssi_handler+0xc08>)
90000f88:	6a38      	ldr	r0, [r7, #32]
90000f8a:	f014 ffad 	bl	90015ee8 <siprintf>
			memset(bufervar, '\0', sizeof(bufervar));
90000f8e:	f243 02d4 	movw	r2, #12500	; 0x30d4
90000f92:	2100      	movs	r1, #0
90000f94:	4811      	ldr	r0, [pc, #68]	; (90000fdc <ssi_handler+0xbf8>)
90000f96:	f014 fd90 	bl	90015aba <memset>
			return strlen(pcInsert);
90000f9a:	6a38      	ldr	r0, [r7, #32]
90000f9c:	f7ff f9aa 	bl	900002f4 <strlen>
90000fa0:	4603      	mov	r3, r0
90000fa2:	b29b      	uxth	r3, r3
90000fa4:	e00b      	b.n	90000fbe <ssi_handler+0xbda>
			sprintf(pcInsert,"<a href=\"index.shtml\">Home</a> | <a href=\"tab1.shtml\">Buttom pin</a> | <a href=\"tab2.shtml\">Relay pin</a> | <a href=\"tab3.shtml\">Connection</a> | <a href=\"select.shtml\">Select pin</a>");
90000fa6:	4912      	ldr	r1, [pc, #72]	; (90000ff0 <ssi_handler+0xc0c>)
90000fa8:	6a38      	ldr	r0, [r7, #32]
90000faa:	f014 ff9d 	bl	90015ee8 <siprintf>
			return strlen(pcInsert);
90000fae:	6a38      	ldr	r0, [r7, #32]
90000fb0:	f7ff f9a0 	bl	900002f4 <strlen>
90000fb4:	4603      	mov	r3, r0
90000fb6:	b29b      	uxth	r3, r3
90000fb8:	e001      	b.n	90000fbe <ssi_handler+0xbda>
			break;
90000fba:	bf00      	nop
	}

	return 0;
90000fbc:	2300      	movs	r3, #0
}
90000fbe:	4618      	mov	r0, r3
90000fc0:	372c      	adds	r7, #44	; 0x2c
90000fc2:	46bd      	mov	sp, r7
90000fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
90000fc6:	bf00      	nop
90000fc8:	240059c0 	.word	0x240059c0
90000fcc:	24000864 	.word	0x24000864
90000fd0:	24000000 	.word	0x24000000
90000fd4:	9001715c 	.word	0x9001715c
90000fd8:	240059d0 	.word	0x240059d0
90000fdc:	240024f4 	.word	0x240024f4
90000fe0:	90017628 	.word	0x90017628
90000fe4:	90017168 	.word	0x90017168
90000fe8:	240059c8 	.word	0x240059c8
90000fec:	90017630 	.word	0x90017630
90000ff0:	90017654 	.word	0x90017654

90000ff4 <CGIForm_Handler>:


//tCGI CGI_TAB[3]; // 3. For LED создадим массив для LED CGI

const char *CGIForm_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
90000ff4:	b580      	push	{r7, lr}
90000ff6:	b086      	sub	sp, #24
90000ff8:	af00      	add	r7, sp, #0
90000ffa:	60f8      	str	r0, [r7, #12]
90000ffc:	60b9      	str	r1, [r7, #8]
90000ffe:	607a      	str	r2, [r7, #4]
90001000:	603b      	str	r3, [r7, #0]
	printf("GET OK 1 \n");
90001002:	4816      	ldr	r0, [pc, #88]	; (9000105c <CGIForm_Handler+0x68>)
90001004:	f014 fe7c 	bl	90015d00 <puts>
	if (iIndex == 0)
90001008:	68fb      	ldr	r3, [r7, #12]
9000100a:	2b00      	cmp	r3, #0
9000100c:	d120      	bne.n	90001050 <CGIForm_Handler+0x5c>
	{
		for (int i=0; i<iNumParams; i++)
9000100e:	2300      	movs	r3, #0
90001010:	617b      	str	r3, [r7, #20]
90001012:	e019      	b.n	90001048 <CGIForm_Handler+0x54>
		{
			if (strcmp(pcParam[i], "jsongo") == 0)  // if the fname string is found
90001014:	697b      	ldr	r3, [r7, #20]
90001016:	009b      	lsls	r3, r3, #2
90001018:	687a      	ldr	r2, [r7, #4]
9000101a:	4413      	add	r3, r2
9000101c:	681b      	ldr	r3, [r3, #0]
9000101e:	4910      	ldr	r1, [pc, #64]	; (90001060 <CGIForm_Handler+0x6c>)
90001020:	4618      	mov	r0, r3
90001022:	f7ff f95d 	bl	900002e0 <strcmp>
90001026:	4603      	mov	r3, r0
90001028:	2b00      	cmp	r3, #0
9000102a:	d10a      	bne.n	90001042 <CGIForm_Handler+0x4e>
			{
				//memset(name, '\0', 30);  // Очищаем массив перед записью новых данных.
				//strcpy(name, pcValue[i]); // Сохраняем значение в переменную.
				jsongo = atoi(pcValue[i]);
9000102c:	697b      	ldr	r3, [r7, #20]
9000102e:	009b      	lsls	r3, r3, #2
90001030:	683a      	ldr	r2, [r7, #0]
90001032:	4413      	add	r3, r2
90001034:	681b      	ldr	r3, [r3, #0]
90001036:	4618      	mov	r0, r3
90001038:	f014 fbe6 	bl	90015808 <atoi>
9000103c:	4603      	mov	r3, r0
9000103e:	4a09      	ldr	r2, [pc, #36]	; (90001064 <CGIForm_Handler+0x70>)
90001040:	6013      	str	r3, [r2, #0]
		for (int i=0; i<iNumParams; i++)
90001042:	697b      	ldr	r3, [r7, #20]
90001044:	3301      	adds	r3, #1
90001046:	617b      	str	r3, [r7, #20]
90001048:	697a      	ldr	r2, [r7, #20]
9000104a:	68bb      	ldr	r3, [r7, #8]
9000104c:	429a      	cmp	r2, r3
9000104e:	dbe1      	blt.n	90001014 <CGIForm_Handler+0x20>
			}
		}
	}

	return "/json.shtml"; //
90001050:	4b05      	ldr	r3, [pc, #20]	; (90001068 <CGIForm_Handler+0x74>)
}
90001052:	4618      	mov	r0, r3
90001054:	3718      	adds	r7, #24
90001056:	46bd      	mov	sp, r7
90001058:	bd80      	pop	{r7, pc}
9000105a:	bf00      	nop
9000105c:	90017754 	.word	0x90017754
90001060:	90017760 	.word	0x90017760
90001064:	240059c4 	.word	0x240059c4
90001068:	9001770c 	.word	0x9001770c

9000106c <CGIForm_Handler1>:

const char *CGIForm_Handler1(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
9000106c:	b580      	push	{r7, lr}
9000106e:	b086      	sub	sp, #24
90001070:	af00      	add	r7, sp, #0
90001072:	60f8      	str	r0, [r7, #12]
90001074:	60b9      	str	r1, [r7, #8]
90001076:	607a      	str	r2, [r7, #4]
90001078:	603b      	str	r3, [r7, #0]
	printf("GET 1 OK  \n");
9000107a:	482c      	ldr	r0, [pc, #176]	; (9000112c <CGIForm_Handler1+0xc0>)
9000107c:	f014 fe40 	bl	90015d00 <puts>
	if (iIndex == 1 || iIndex == 2  || iIndex == 3){
90001080:	68fb      	ldr	r3, [r7, #12]
90001082:	2b01      	cmp	r3, #1
90001084:	d005      	beq.n	90001092 <CGIForm_Handler1+0x26>
90001086:	68fb      	ldr	r3, [r7, #12]
90001088:	2b02      	cmp	r3, #2
9000108a:	d002      	beq.n	90001092 <CGIForm_Handler1+0x26>
9000108c:	68fb      	ldr	r3, [r7, #12]
9000108e:	2b03      	cmp	r3, #3
90001090:	d137      	bne.n	90001102 <CGIForm_Handler1+0x96>

		for (int i=0; i<iNumParams; i++)
90001092:	2300      	movs	r3, #0
90001094:	617b      	str	r3, [r7, #20]
90001096:	e030      	b.n	900010fa <CGIForm_Handler1+0x8e>
		{

			if (strcmp(pcParam[i], "id") == 0)  // if the fname string is found
90001098:	697b      	ldr	r3, [r7, #20]
9000109a:	009b      	lsls	r3, r3, #2
9000109c:	687a      	ldr	r2, [r7, #4]
9000109e:	4413      	add	r3, r2
900010a0:	681b      	ldr	r3, [r3, #0]
900010a2:	4923      	ldr	r1, [pc, #140]	; (90001130 <CGIForm_Handler1+0xc4>)
900010a4:	4618      	mov	r0, r3
900010a6:	f7ff f91b 	bl	900002e0 <strcmp>
900010aa:	4603      	mov	r3, r0
900010ac:	2b00      	cmp	r3, #0
900010ae:	d10a      	bne.n	900010c6 <CGIForm_Handler1+0x5a>
			{

				id = atoi(pcValue[i]);
900010b0:	697b      	ldr	r3, [r7, #20]
900010b2:	009b      	lsls	r3, r3, #2
900010b4:	683a      	ldr	r2, [r7, #0]
900010b6:	4413      	add	r3, r2
900010b8:	681b      	ldr	r3, [r3, #0]
900010ba:	4618      	mov	r0, r3
900010bc:	f014 fba4 	bl	90015808 <atoi>
900010c0:	4603      	mov	r3, r0
900010c2:	4a1c      	ldr	r2, [pc, #112]	; (90001134 <CGIForm_Handler1+0xc8>)
900010c4:	6013      	str	r3, [r2, #0]
				//printf("+++++++++ %d \n", id);
			}
			if (strcmp(pcParam[i], "tab") == 0)  // if the fname string is found
900010c6:	697b      	ldr	r3, [r7, #20]
900010c8:	009b      	lsls	r3, r3, #2
900010ca:	687a      	ldr	r2, [r7, #4]
900010cc:	4413      	add	r3, r2
900010ce:	681b      	ldr	r3, [r3, #0]
900010d0:	4919      	ldr	r1, [pc, #100]	; (90001138 <CGIForm_Handler1+0xcc>)
900010d2:	4618      	mov	r0, r3
900010d4:	f7ff f904 	bl	900002e0 <strcmp>
900010d8:	4603      	mov	r3, r0
900010da:	2b00      	cmp	r3, #0
900010dc:	d10a      	bne.n	900010f4 <CGIForm_Handler1+0x88>
			{
				idtab = atoi(pcValue[i]);
900010de:	697b      	ldr	r3, [r7, #20]
900010e0:	009b      	lsls	r3, r3, #2
900010e2:	683a      	ldr	r2, [r7, #0]
900010e4:	4413      	add	r3, r2
900010e6:	681b      	ldr	r3, [r3, #0]
900010e8:	4618      	mov	r0, r3
900010ea:	f014 fb8d 	bl	90015808 <atoi>
900010ee:	4603      	mov	r3, r0
900010f0:	4a12      	ldr	r2, [pc, #72]	; (9000113c <CGIForm_Handler1+0xd0>)
900010f2:	6013      	str	r3, [r2, #0]
		for (int i=0; i<iNumParams; i++)
900010f4:	697b      	ldr	r3, [r7, #20]
900010f6:	3301      	adds	r3, #1
900010f8:	617b      	str	r3, [r7, #20]
900010fa:	697a      	ldr	r2, [r7, #20]
900010fc:	68bb      	ldr	r3, [r7, #8]
900010fe:	429a      	cmp	r2, r3
90001100:	dbca      	blt.n	90001098 <CGIForm_Handler1+0x2c>
				//printf("+++++++++ %d \n", idtab);
			}
		}
	}
	if (iIndex == 1){
90001102:	68fb      	ldr	r3, [r7, #12]
90001104:	2b01      	cmp	r3, #1
90001106:	d101      	bne.n	9000110c <CGIForm_Handler1+0xa0>
		return "/form1.shtml"; //
90001108:	4b0d      	ldr	r3, [pc, #52]	; (90001140 <CGIForm_Handler1+0xd4>)
9000110a:	e00a      	b.n	90001122 <CGIForm_Handler1+0xb6>
	}else if(iIndex == 2){
9000110c:	68fb      	ldr	r3, [r7, #12]
9000110e:	2b02      	cmp	r3, #2
90001110:	d101      	bne.n	90001116 <CGIForm_Handler1+0xaa>
		return "/form2.shtml";
90001112:	4b0c      	ldr	r3, [pc, #48]	; (90001144 <CGIForm_Handler1+0xd8>)
90001114:	e005      	b.n	90001122 <CGIForm_Handler1+0xb6>
	}else if(iIndex == 3){
90001116:	68fb      	ldr	r3, [r7, #12]
90001118:	2b03      	cmp	r3, #3
9000111a:	d101      	bne.n	90001120 <CGIForm_Handler1+0xb4>
		return "/form3.shtml";
9000111c:	4b0a      	ldr	r3, [pc, #40]	; (90001148 <CGIForm_Handler1+0xdc>)
9000111e:	e000      	b.n	90001122 <CGIForm_Handler1+0xb6>
	} else {
		return "/404.html";
90001120:	4b0a      	ldr	r3, [pc, #40]	; (9000114c <CGIForm_Handler1+0xe0>)
	}

}
90001122:	4618      	mov	r0, r3
90001124:	3718      	adds	r7, #24
90001126:	46bd      	mov	sp, r7
90001128:	bd80      	pop	{r7, pc}
9000112a:	bf00      	nop
9000112c:	90017768 	.word	0x90017768
90001130:	90017774 	.word	0x90017774
90001134:	240059c8 	.word	0x240059c8
90001138:	90017778 	.word	0x90017778
9000113c:	240059cc 	.word	0x240059cc
90001140:	90017718 	.word	0x90017718
90001144:	90017728 	.word	0x90017728
90001148:	90017738 	.word	0x90017738
9000114c:	9001777c 	.word	0x9001777c

90001150 <CGIForm_Handler2>:


const char *CGIForm_Handler2(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
90001150:	b580      	push	{r7, lr}
90001152:	b086      	sub	sp, #24
90001154:	af00      	add	r7, sp, #0
90001156:	60f8      	str	r0, [r7, #12]
90001158:	60b9      	str	r1, [r7, #8]
9000115a:	607a      	str	r2, [r7, #4]
9000115c:	603b      	str	r3, [r7, #0]
	printf("GET OK 1 \n");
9000115e:	4826      	ldr	r0, [pc, #152]	; (900011f8 <CGIForm_Handler2+0xa8>)
90001160:	f014 fdce 	bl	90015d00 <puts>
	if (iIndex == 4)
90001164:	68fb      	ldr	r3, [r7, #12]
90001166:	2b04      	cmp	r3, #4
90001168:	d140      	bne.n	900011ec <CGIForm_Handler2+0x9c>
	{
		for (int i=0; i<iNumParams; i++)
9000116a:	2300      	movs	r3, #0
9000116c:	617b      	str	r3, [r7, #20]
9000116e:	e039      	b.n	900011e4 <CGIForm_Handler2+0x94>
		{
			if (strcmp(pcParam[i], "del") == 0)  // if the fname string is found
90001170:	697b      	ldr	r3, [r7, #20]
90001172:	009b      	lsls	r3, r3, #2
90001174:	687a      	ldr	r2, [r7, #4]
90001176:	4413      	add	r3, r2
90001178:	681b      	ldr	r3, [r3, #0]
9000117a:	4920      	ldr	r1, [pc, #128]	; (900011fc <CGIForm_Handler2+0xac>)
9000117c:	4618      	mov	r0, r3
9000117e:	f7ff f8af 	bl	900002e0 <strcmp>
90001182:	4603      	mov	r3, r0
90001184:	2b00      	cmp	r3, #0
90001186:	d12a      	bne.n	900011de <CGIForm_Handler2+0x8e>
			{
				id = atoi(pcValue[i]);
90001188:	697b      	ldr	r3, [r7, #20]
9000118a:	009b      	lsls	r3, r3, #2
9000118c:	683a      	ldr	r2, [r7, #0]
9000118e:	4413      	add	r3, r2
90001190:	681b      	ldr	r3, [r3, #0]
90001192:	4618      	mov	r0, r3
90001194:	f014 fb38 	bl	90015808 <atoi>
90001198:	4603      	mov	r3, r0
9000119a:	4a19      	ldr	r2, [pc, #100]	; (90001200 <CGIForm_Handler2+0xb0>)
9000119c:	6013      	str	r3, [r2, #0]
				TO[id].idout = 0;
9000119e:	4b18      	ldr	r3, [pc, #96]	; (90001200 <CGIForm_Handler2+0xb0>)
900011a0:	681a      	ldr	r2, [r3, #0]
900011a2:	4918      	ldr	r1, [pc, #96]	; (90001204 <CGIForm_Handler2+0xb4>)
900011a4:	4613      	mov	r3, r2
900011a6:	005b      	lsls	r3, r3, #1
900011a8:	4413      	add	r3, r2
900011aa:	009b      	lsls	r3, r3, #2
900011ac:	440b      	add	r3, r1
900011ae:	3304      	adds	r3, #4
900011b0:	2200      	movs	r2, #0
900011b2:	601a      	str	r2, [r3, #0]
				TO[id].idin = 0;
900011b4:	4b12      	ldr	r3, [pc, #72]	; (90001200 <CGIForm_Handler2+0xb0>)
900011b6:	681a      	ldr	r2, [r3, #0]
900011b8:	4912      	ldr	r1, [pc, #72]	; (90001204 <CGIForm_Handler2+0xb4>)
900011ba:	4613      	mov	r3, r2
900011bc:	005b      	lsls	r3, r3, #1
900011be:	4413      	add	r3, r2
900011c0:	009b      	lsls	r3, r3, #2
900011c2:	440b      	add	r3, r1
900011c4:	2200      	movs	r2, #0
900011c6:	601a      	str	r2, [r3, #0]
				TO[id].flag = 0;
900011c8:	4b0d      	ldr	r3, [pc, #52]	; (90001200 <CGIForm_Handler2+0xb0>)
900011ca:	681a      	ldr	r2, [r3, #0]
900011cc:	490d      	ldr	r1, [pc, #52]	; (90001204 <CGIForm_Handler2+0xb4>)
900011ce:	4613      	mov	r3, r2
900011d0:	005b      	lsls	r3, r3, #1
900011d2:	4413      	add	r3, r2
900011d4:	009b      	lsls	r3, r3, #2
900011d6:	440b      	add	r3, r1
900011d8:	3308      	adds	r3, #8
900011da:	2200      	movs	r2, #0
900011dc:	601a      	str	r2, [r3, #0]
		for (int i=0; i<iNumParams; i++)
900011de:	697b      	ldr	r3, [r7, #20]
900011e0:	3301      	adds	r3, #1
900011e2:	617b      	str	r3, [r7, #20]
900011e4:	697a      	ldr	r2, [r7, #20]
900011e6:	68bb      	ldr	r3, [r7, #8]
900011e8:	429a      	cmp	r2, r3
900011ea:	dbc1      	blt.n	90001170 <CGIForm_Handler2+0x20>

			}
		}
	}

	return "/tab1.shtml"; // Здесь пропишем имя файла из которого берем переменные.
900011ec:	4b06      	ldr	r3, [pc, #24]	; (90001208 <CGIForm_Handler2+0xb8>)
}
900011ee:	4618      	mov	r0, r3
900011f0:	3718      	adds	r7, #24
900011f2:	46bd      	mov	sp, r7
900011f4:	bd80      	pop	{r7, pc}
900011f6:	bf00      	nop
900011f8:	90017754 	.word	0x90017754
900011fc:	90017788 	.word	0x90017788
90001200:	240059c8 	.word	0x240059c8
90001204:	240021fc 	.word	0x240021fc
90001208:	90017748 	.word	0x90017748

9000120c <httpd_post_begin>:
int http_post_content_len;
char urls[30]= {0};

err_t httpd_post_begin(void *connection, const char *uri,
		const char *http_request, uint16_t http_request_len, int content_len,
		char *response_uri, uint16_t response_uri_len, uint8_t *post_auto_wnd) {
9000120c:	b580      	push	{r7, lr}
9000120e:	b084      	sub	sp, #16
90001210:	af00      	add	r7, sp, #0
90001212:	60f8      	str	r0, [r7, #12]
90001214:	60b9      	str	r1, [r7, #8]
90001216:	607a      	str	r2, [r7, #4]
90001218:	807b      	strh	r3, [r7, #2]


	http_post_content_len = content_len;
9000121a:	4a13      	ldr	r2, [pc, #76]	; (90001268 <httpd_post_begin+0x5c>)
9000121c:	69bb      	ldr	r3, [r7, #24]
9000121e:	6013      	str	r3, [r2, #0]
	strncpy(urls, uri, 15);  // ???????????????????????????????????????????????????
90001220:	220f      	movs	r2, #15
90001222:	68b9      	ldr	r1, [r7, #8]
90001224:	4811      	ldr	r0, [pc, #68]	; (9000126c <httpd_post_begin+0x60>)
90001226:	f014 fefa 	bl	9001601e <strncpy>

	memset(bufervar, '\0', sizeof(bufervar));
9000122a:	f243 02d4 	movw	r2, #12500	; 0x30d4
9000122e:	2100      	movs	r1, #0
90001230:	480f      	ldr	r0, [pc, #60]	; (90001270 <httpd_post_begin+0x64>)
90001232:	f014 fc42 	bl	90015aba <memset>
	memset(readvar, '\0', sizeof(readvar));
90001236:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
9000123a:	2100      	movs	r1, #0
9000123c:	480d      	ldr	r0, [pc, #52]	; (90001274 <httpd_post_begin+0x68>)
9000123e:	f014 fc3c 	bl	90015aba <memset>

	if (current_connection != connection) {
90001242:	4b0d      	ldr	r3, [pc, #52]	; (90001278 <httpd_post_begin+0x6c>)
90001244:	681b      	ldr	r3, [r3, #0]
90001246:	68fa      	ldr	r2, [r7, #12]
90001248:	429a      	cmp	r2, r3
9000124a:	d007      	beq.n	9000125c <httpd_post_begin+0x50>

		current_connection = connection;
9000124c:	4a0a      	ldr	r2, [pc, #40]	; (90001278 <httpd_post_begin+0x6c>)
9000124e:	68fb      	ldr	r3, [r7, #12]
90001250:	6013      	str	r3, [r2, #0]
		valid_connection = NULL;
90001252:	4b0a      	ldr	r3, [pc, #40]	; (9000127c <httpd_post_begin+0x70>)
90001254:	2200      	movs	r2, #0
90001256:	601a      	str	r2, [r3, #0]
		//snprintf(response_uri, response_uri_len, "/cgi_leds.html");
		/* e.g. for large uploads to slow flash over a fast connection, you should
		 manually update the rx window. That way, a sender can only send a full
		 tcp window at a time. If this is required, set 'post_aut_wnd' to 0.
		 We do not need to throttle upload speed here, so: */
		return ERR_OK;
90001258:	2300      	movs	r3, #0
9000125a:	e001      	b.n	90001260 <httpd_post_begin+0x54>
	}

	return ERR_VAL;
9000125c:	f06f 0305 	mvn.w	r3, #5
}
90001260:	4618      	mov	r0, r3
90001262:	3710      	adds	r7, #16
90001264:	46bd      	mov	sp, r7
90001266:	bd80      	pop	{r7, pc}
90001268:	24005bcc 	.word	0x24005bcc
9000126c:	24005bd0 	.word	0x24005bd0
90001270:	240024f4 	.word	0x240024f4
90001274:	240055c8 	.word	0x240055c8
90001278:	24005bc4 	.word	0x24005bc4
9000127c:	24005bc8 	.word	0x24005bc8

90001280 <httpd_post_receive_data>:



err_t httpd_post_receive_data(void *connection, struct pbuf *p) {
90001280:	b580      	push	{r7, lr}
90001282:	b082      	sub	sp, #8
90001284:	af00      	add	r7, sp, #0
90001286:	6078      	str	r0, [r7, #4]
90001288:	6039      	str	r1, [r7, #0]

	printf("OK POST 2 \r\n");
9000128a:	481a      	ldr	r0, [pc, #104]	; (900012f4 <httpd_post_receive_data+0x74>)
9000128c:	f014 fd38 	bl	90015d00 <puts>
	//char *data;


	if (current_connection == connection && p != NULL) {
90001290:	4b19      	ldr	r3, [pc, #100]	; (900012f8 <httpd_post_receive_data+0x78>)
90001292:	681b      	ldr	r3, [r3, #0]
90001294:	687a      	ldr	r2, [r7, #4]
90001296:	429a      	cmp	r2, r3
90001298:	d11d      	bne.n	900012d6 <httpd_post_receive_data+0x56>
9000129a:	683b      	ldr	r3, [r7, #0]
9000129c:	2b00      	cmp	r3, #0
9000129e:	d01a      	beq.n	900012d6 <httpd_post_receive_data+0x56>
		//data = p->payload;
		//printf("DATA %s \r\n", data);
		//strcat(bufervar, p->payload);

		//strncpy(readvar, p->payload, p->tot_len);
		strncpy(readvar, p->payload, p->len);
900012a0:	683b      	ldr	r3, [r7, #0]
900012a2:	6859      	ldr	r1, [r3, #4]
900012a4:	683b      	ldr	r3, [r7, #0]
900012a6:	895b      	ldrh	r3, [r3, #10]
900012a8:	461a      	mov	r2, r3
900012aa:	4814      	ldr	r0, [pc, #80]	; (900012fc <httpd_post_receive_data+0x7c>)
900012ac:	f014 feb7 	bl	9001601e <strncpy>
		//strcpy(readvar, p->payload);
		printf("DATA %s \r\n", readvar);
900012b0:	4912      	ldr	r1, [pc, #72]	; (900012fc <httpd_post_receive_data+0x7c>)
900012b2:	4813      	ldr	r0, [pc, #76]	; (90001300 <httpd_post_receive_data+0x80>)
900012b4:	f014 fc9e 	bl	90015bf4 <iprintf>
		printf("num %d \r\n", p->len);
900012b8:	683b      	ldr	r3, [r7, #0]
900012ba:	895b      	ldrh	r3, [r3, #10]
900012bc:	4619      	mov	r1, r3
900012be:	4811      	ldr	r0, [pc, #68]	; (90001304 <httpd_post_receive_data+0x84>)
900012c0:	f014 fc98 	bl	90015bf4 <iprintf>

		strcat(bufervar, readvar);
900012c4:	490d      	ldr	r1, [pc, #52]	; (900012fc <httpd_post_receive_data+0x7c>)
900012c6:	4810      	ldr	r0, [pc, #64]	; (90001308 <httpd_post_receive_data+0x88>)
900012c8:	f014 fe71 	bl	90015fae <strcat>

        pbuf_free(p);
900012cc:	6838      	ldr	r0, [r7, #0]
900012ce:	f00b f871 	bl	9000c3b4 <pbuf_free>
        //memset(data, '\0', sizeof(*data));

		return ERR_OK;
900012d2:	2300      	movs	r3, #0
900012d4:	e00a      	b.n	900012ec <httpd_post_receive_data+0x6c>
	}

    if (p != NULL) {
900012d6:	683b      	ldr	r3, [r7, #0]
900012d8:	2b00      	cmp	r3, #0
900012da:	d005      	beq.n	900012e8 <httpd_post_receive_data+0x68>
    	printf("END \r\n");
900012dc:	480b      	ldr	r0, [pc, #44]	; (9000130c <httpd_post_receive_data+0x8c>)
900012de:	f014 fd0f 	bl	90015d00 <puts>
        pbuf_free(p);
900012e2:	6838      	ldr	r0, [r7, #0]
900012e4:	f00b f866 	bl	9000c3b4 <pbuf_free>
    }

	return ERR_VAL;
900012e8:	f06f 0305 	mvn.w	r3, #5
}
900012ec:	4618      	mov	r0, r3
900012ee:	3708      	adds	r7, #8
900012f0:	46bd      	mov	sp, r7
900012f2:	bd80      	pop	{r7, pc}
900012f4:	9001778c 	.word	0x9001778c
900012f8:	24005bc4 	.word	0x24005bc4
900012fc:	240055c8 	.word	0x240055c8
90001300:	90017798 	.word	0x90017798
90001304:	900177a4 	.word	0x900177a4
90001308:	240024f4 	.word	0x240024f4
9000130c:	900177b0 	.word	0x900177b0

90001310 <httpd_post_finished>:


void httpd_post_finished(void *connection, char *response_uri,
		u16_t response_uri_len) {
90001310:	b580      	push	{r7, lr}
90001312:	f5ad 6d92 	sub.w	sp, sp, #1168	; 0x490
90001316:	af00      	add	r7, sp, #0
90001318:	f507 6392 	add.w	r3, r7, #1168	; 0x490
9000131c:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
90001320:	6018      	str	r0, [r3, #0]
90001322:	f507 6392 	add.w	r3, r7, #1168	; 0x490
90001326:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
9000132a:	6019      	str	r1, [r3, #0]
9000132c:	f507 6392 	add.w	r3, r7, #1168	; 0x490
90001330:	f2a3 438a 	subw	r3, r3, #1162	; 0x48a
90001334:	801a      	strh	r2, [r3, #0]
	printf("OK POST 3 \r\n");
90001336:	48ca      	ldr	r0, [pc, #808]	; (90001660 <httpd_post_finished+0x350>)
90001338:	f014 fce2 	bl	90015d00 <puts>

	char *token;
	char *token1;
	char *token2;
	char *name1;
	int z = 0;
9000133c:	2300      	movs	r3, #0
9000133e:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
	int id;
	int variable1 = 0;
90001342:	2300      	movs	r3, #0
90001344:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
	int variable2;
	//char urlline[http_post_content_len];
	char urlline[1000] = {0};
90001348:	f507 6392 	add.w	r3, r7, #1168	; 0x490
9000134c:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
90001350:	2200      	movs	r2, #0
90001352:	601a      	str	r2, [r3, #0]
90001354:	3304      	adds	r3, #4
90001356:	f44f 7279 	mov.w	r2, #996	; 0x3e4
9000135a:	2100      	movs	r1, #0
9000135c:	4618      	mov	r0, r3
9000135e:	f014 fbac 	bl	90015aba <memset>

	char name0[50] = {0};
90001362:	f507 6392 	add.w	r3, r7, #1168	; 0x490
90001366:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
9000136a:	2200      	movs	r2, #0
9000136c:	601a      	str	r2, [r3, #0]
9000136e:	3304      	adds	r3, #4
90001370:	222e      	movs	r2, #46	; 0x2e
90001372:	2100      	movs	r1, #0
90001374:	4618      	mov	r0, r3
90001376:	f014 fba0 	bl	90015aba <memset>
	char nametoken[50] = {0};
9000137a:	f507 6392 	add.w	r3, r7, #1168	; 0x490
9000137e:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
90001382:	2200      	movs	r2, #0
90001384:	601a      	str	r2, [r3, #0]
90001386:	3304      	adds	r3, #4
90001388:	222e      	movs	r2, #46	; 0x2e
9000138a:	2100      	movs	r1, #0
9000138c:	4618      	mov	r0, r3
9000138e:	f014 fb94 	bl	90015aba <memset>

	memset(name0, '\0', sizeof(name0));
90001392:	f107 0354 	add.w	r3, r7, #84	; 0x54
90001396:	2232      	movs	r2, #50	; 0x32
90001398:	2100      	movs	r1, #0
9000139a:	4618      	mov	r0, r3
9000139c:	f014 fb8d 	bl	90015aba <memset>
	//memset(urlline, '\0', sizeof(urlline));

	strncpy(urlline, bufervar, http_post_content_len);
900013a0:	4bb0      	ldr	r3, [pc, #704]	; (90001664 <httpd_post_finished+0x354>)
900013a2:	681b      	ldr	r3, [r3, #0]
900013a4:	461a      	mov	r2, r3
900013a6:	f107 0388 	add.w	r3, r7, #136	; 0x88
900013aa:	49af      	ldr	r1, [pc, #700]	; (90001668 <httpd_post_finished+0x358>)
900013ac:	4618      	mov	r0, r3
900013ae:	f014 fe36 	bl	9001601e <strncpy>

	printf("++ %s \r\n", urlline);
900013b2:	f107 0388 	add.w	r3, r7, #136	; 0x88
900013b6:	4619      	mov	r1, r3
900013b8:	48ac      	ldr	r0, [pc, #688]	; (9000166c <httpd_post_finished+0x35c>)
900013ba:	f014 fc1b 	bl	90015bf4 <iprintf>
//	printf("COUNT %d \r\n", http_post_content_len);


			char *rest = urlline;
900013be:	f507 6392 	add.w	r3, r7, #1168	; 0x490
900013c2:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
900013c6:	f107 0288 	add.w	r2, r7, #136	; 0x88
900013ca:	601a      	str	r2, [r3, #0]

			while ((token = strtok_r(rest, "&", &rest))){
900013cc:	e26f      	b.n	900018ae <httpd_post_finished+0x59e>
				//printf("%s\n", token);

				char *rest1 = token;
900013ce:	f507 6392 	add.w	r3, r7, #1168	; 0x490
900013d2:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
900013d6:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
900013da:	601a      	str	r2, [r3, #0]
				strcat(name0, token); // решение с пустой строкой
900013dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
900013e0:	f8d7 1478 	ldr.w	r1, [r7, #1144]	; 0x478
900013e4:	4618      	mov	r0, r3
900013e6:	f014 fde2 	bl	90015fae <strcat>

				y = 0;
900013ea:	4ba1      	ldr	r3, [pc, #644]	; (90001670 <httpd_post_finished+0x360>)
900013ec:	2200      	movs	r2, #0
900013ee:	601a      	str	r2, [r3, #0]

				while ((token1 = strtok_r(rest1, "=", &rest1))) {
900013f0:	e217      	b.n	90001822 <httpd_post_finished+0x512>
					z = 0;
900013f2:	2300      	movs	r3, #0
900013f4:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488

					if(y == 0){
900013f8:	4b9d      	ldr	r3, [pc, #628]	; (90001670 <httpd_post_finished+0x360>)
900013fa:	681b      	ldr	r3, [r3, #0]
900013fc:	2b00      	cmp	r3, #0
900013fe:	d12f      	bne.n	90001460 <httpd_post_finished+0x150>

						//printf("NAME %s\n", token1);

						// получение id
						char *rest2 = token1;
90001400:	f507 6392 	add.w	r3, r7, #1168	; 0x490
90001404:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
90001408:	f8d7 2474 	ldr.w	r2, [r7, #1140]	; 0x474
9000140c:	601a      	str	r2, [r3, #0]
						while ((token2 = strtok_r(rest2, "_", &rest2))){
9000140e:	e016      	b.n	9000143e <httpd_post_finished+0x12e>
							if(z == 0){
90001410:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
90001414:	2b00      	cmp	r3, #0
90001416:	d103      	bne.n	90001420 <httpd_post_finished+0x110>
								name1 = token2;
90001418:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
9000141c:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
							}
							if(z == 1){
90001420:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
90001424:	2b01      	cmp	r3, #1
90001426:	d105      	bne.n	90001434 <httpd_post_finished+0x124>
								id = atoi(token2);
90001428:	f8d7 0470 	ldr.w	r0, [r7, #1136]	; 0x470
9000142c:	f014 f9ec 	bl	90015808 <atoi>
90001430:	f8c7 0484 	str.w	r0, [r7, #1156]	; 0x484
								//printf("ID %d\n", id);
								///
							}
							//

							z++;
90001434:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
90001438:	3301      	adds	r3, #1
9000143a:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
						while ((token2 = strtok_r(rest2, "_", &rest2))){
9000143e:	f507 6392 	add.w	r3, r7, #1168	; 0x490
90001442:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
90001446:	681b      	ldr	r3, [r3, #0]
90001448:	f107 0214 	add.w	r2, r7, #20
9000144c:	4989      	ldr	r1, [pc, #548]	; (90001674 <httpd_post_finished+0x364>)
9000144e:	4618      	mov	r0, r3
90001450:	f014 fe20 	bl	90016094 <strtok_r>
90001454:	f8c7 0470 	str.w	r0, [r7, #1136]	; 0x470
90001458:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
9000145c:	2b00      	cmp	r3, #0
9000145e:	d1d7      	bne.n	90001410 <httpd_post_finished+0x100>
						}

					}
					if(y == 1){
90001460:	4b83      	ldr	r3, [pc, #524]	; (90001670 <httpd_post_finished+0x360>)
90001462:	681b      	ldr	r3, [r3, #0]
90001464:	2b01      	cmp	r3, #1
90001466:	f040 81d7 	bne.w	90001818 <httpd_post_finished+0x508>
						// значение переменной
						//printf("VAL %s\n", token1);

						// пишем в структуру
						if (strcmp(name1, "ptype") == 0) {
9000146a:	4983      	ldr	r1, [pc, #524]	; (90001678 <httpd_post_finished+0x368>)
9000146c:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
90001470:	f7fe ff36 	bl	900002e0 <strcmp>
90001474:	4603      	mov	r3, r0
90001476:	2b00      	cmp	r3, #0
90001478:	d10d      	bne.n	90001496 <httpd_post_finished+0x186>
							strcpy(T[id].ptype, token1);
9000147a:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
9000147e:	2268      	movs	r2, #104	; 0x68
90001480:	fb02 f303 	mul.w	r3, r2, r3
90001484:	3318      	adds	r3, #24
90001486:	4a7d      	ldr	r2, [pc, #500]	; (9000167c <httpd_post_finished+0x36c>)
90001488:	4413      	add	r3, r2
9000148a:	f8d7 1474 	ldr.w	r1, [r7, #1140]	; 0x474
9000148e:	4618      	mov	r0, r3
90001490:	f014 fda9 	bl	90015fe6 <strcpy>
90001494:	e1c0      	b.n	90001818 <httpd_post_finished+0x508>
						} else if (strcmp(name1, "topin") == 0) {
90001496:	497a      	ldr	r1, [pc, #488]	; (90001680 <httpd_post_finished+0x370>)
90001498:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
9000149c:	f7fe ff20 	bl	900002e0 <strcmp>
900014a0:	4603      	mov	r3, r0
900014a2:	2b00      	cmp	r3, #0
900014a4:	d10d      	bne.n	900014c2 <httpd_post_finished+0x1b2>
							T[id].topin = atoi(token1);
900014a6:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
900014aa:	f014 f9ad 	bl	90015808 <atoi>
900014ae:	4602      	mov	r2, r0
900014b0:	4972      	ldr	r1, [pc, #456]	; (9000167c <httpd_post_finished+0x36c>)
900014b2:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
900014b6:	2068      	movs	r0, #104	; 0x68
900014b8:	fb00 f303 	mul.w	r3, r0, r3
900014bc:	440b      	add	r3, r1
900014be:	601a      	str	r2, [r3, #0]
900014c0:	e1aa      	b.n	90001818 <httpd_post_finished+0x508>
						} else if (strcmp(name1, "binter") == 0) {
900014c2:	4970      	ldr	r1, [pc, #448]	; (90001684 <httpd_post_finished+0x374>)
900014c4:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
900014c8:	f7fe ff0a 	bl	900002e0 <strcmp>
900014cc:	4603      	mov	r3, r0
900014ce:	2b00      	cmp	r3, #0
900014d0:	d10e      	bne.n	900014f0 <httpd_post_finished+0x1e0>
							T[id].binter = atoi(token1);
900014d2:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
900014d6:	f014 f997 	bl	90015808 <atoi>
900014da:	4602      	mov	r2, r0
900014dc:	4967      	ldr	r1, [pc, #412]	; (9000167c <httpd_post_finished+0x36c>)
900014de:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
900014e2:	2068      	movs	r0, #104	; 0x68
900014e4:	fb00 f303 	mul.w	r3, r0, r3
900014e8:	440b      	add	r3, r1
900014ea:	332c      	adds	r3, #44	; 0x2c
900014ec:	601a      	str	r2, [r3, #0]
900014ee:	e193      	b.n	90001818 <httpd_post_finished+0x508>
						} else if (strcmp(name1, "hinter") == 0) {
900014f0:	4965      	ldr	r1, [pc, #404]	; (90001688 <httpd_post_finished+0x378>)
900014f2:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
900014f6:	f7fe fef3 	bl	900002e0 <strcmp>
900014fa:	4603      	mov	r3, r0
900014fc:	2b00      	cmp	r3, #0
900014fe:	d10e      	bne.n	9000151e <httpd_post_finished+0x20e>
							T[id].hinter = atoi(token1);
90001500:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
90001504:	f014 f980 	bl	90015808 <atoi>
90001508:	4602      	mov	r2, r0
9000150a:	495c      	ldr	r1, [pc, #368]	; (9000167c <httpd_post_finished+0x36c>)
9000150c:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
90001510:	2068      	movs	r0, #104	; 0x68
90001512:	fb00 f303 	mul.w	r3, r0, r3
90001516:	440b      	add	r3, r1
90001518:	3330      	adds	r3, #48	; 0x30
9000151a:	601a      	str	r2, [r3, #0]
9000151c:	e17c      	b.n	90001818 <httpd_post_finished+0x508>
						} else if (strcmp(name1, "repeat") == 0) {
9000151e:	495b      	ldr	r1, [pc, #364]	; (9000168c <httpd_post_finished+0x37c>)
90001520:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
90001524:	f7fe fedc 	bl	900002e0 <strcmp>
90001528:	4603      	mov	r3, r0
9000152a:	2b00      	cmp	r3, #0
9000152c:	d10e      	bne.n	9000154c <httpd_post_finished+0x23c>
							T[id].repeat = atoi(token1);
9000152e:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
90001532:	f014 f969 	bl	90015808 <atoi>
90001536:	4602      	mov	r2, r0
90001538:	4950      	ldr	r1, [pc, #320]	; (9000167c <httpd_post_finished+0x36c>)
9000153a:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
9000153e:	2068      	movs	r0, #104	; 0x68
90001540:	fb00 f303 	mul.w	r3, r0, r3
90001544:	440b      	add	r3, r1
90001546:	3334      	adds	r3, #52	; 0x34
90001548:	601a      	str	r2, [r3, #0]
9000154a:	e165      	b.n	90001818 <httpd_post_finished+0x508>
						} else if (strcmp(name1, "rinter") == 0) {
9000154c:	4950      	ldr	r1, [pc, #320]	; (90001690 <httpd_post_finished+0x380>)
9000154e:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
90001552:	f7fe fec5 	bl	900002e0 <strcmp>
90001556:	4603      	mov	r3, r0
90001558:	2b00      	cmp	r3, #0
9000155a:	d10e      	bne.n	9000157a <httpd_post_finished+0x26a>
							T[id].rinter = atoi(token1);
9000155c:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
90001560:	f014 f952 	bl	90015808 <atoi>
90001564:	4602      	mov	r2, r0
90001566:	4945      	ldr	r1, [pc, #276]	; (9000167c <httpd_post_finished+0x36c>)
90001568:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
9000156c:	2068      	movs	r0, #104	; 0x68
9000156e:	fb00 f303 	mul.w	r3, r0, r3
90001572:	440b      	add	r3, r1
90001574:	3338      	adds	r3, #56	; 0x38
90001576:	601a      	str	r2, [r3, #0]
90001578:	e14e      	b.n	90001818 <httpd_post_finished+0x508>
						} else if (strcmp(name1, "dcinter") == 0) {
9000157a:	4946      	ldr	r1, [pc, #280]	; (90001694 <httpd_post_finished+0x384>)
9000157c:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
90001580:	f7fe feae 	bl	900002e0 <strcmp>
90001584:	4603      	mov	r3, r0
90001586:	2b00      	cmp	r3, #0
90001588:	d10e      	bne.n	900015a8 <httpd_post_finished+0x298>
							T[id].dcinter = atoi(token1);
9000158a:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
9000158e:	f014 f93b 	bl	90015808 <atoi>
90001592:	4602      	mov	r2, r0
90001594:	4939      	ldr	r1, [pc, #228]	; (9000167c <httpd_post_finished+0x36c>)
90001596:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
9000159a:	2068      	movs	r0, #104	; 0x68
9000159c:	fb00 f303 	mul.w	r3, r0, r3
900015a0:	440b      	add	r3, r1
900015a2:	333c      	adds	r3, #60	; 0x3c
900015a4:	601a      	str	r2, [r3, #0]
900015a6:	e137      	b.n	90001818 <httpd_post_finished+0x508>
						} else if (strcmp(name1, "pclick") == 0) {
900015a8:	493b      	ldr	r1, [pc, #236]	; (90001698 <httpd_post_finished+0x388>)
900015aa:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
900015ae:	f7fe fe97 	bl	900002e0 <strcmp>
900015b2:	4603      	mov	r3, r0
900015b4:	2b00      	cmp	r3, #0
900015b6:	d10e      	bne.n	900015d6 <httpd_post_finished+0x2c6>
							T[id].pclick = atoi(token1);
900015b8:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
900015bc:	f014 f924 	bl	90015808 <atoi>
900015c0:	4602      	mov	r2, r0
900015c2:	492e      	ldr	r1, [pc, #184]	; (9000167c <httpd_post_finished+0x36c>)
900015c4:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
900015c8:	2068      	movs	r0, #104	; 0x68
900015ca:	fb00 f303 	mul.w	r3, r0, r3
900015ce:	440b      	add	r3, r1
900015d0:	3340      	adds	r3, #64	; 0x40
900015d2:	601a      	str	r2, [r3, #0]
900015d4:	e120      	b.n	90001818 <httpd_post_finished+0x508>
						} else if (strcmp(name1, "info") == 0) {
900015d6:	4931      	ldr	r1, [pc, #196]	; (9000169c <httpd_post_finished+0x38c>)
900015d8:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
900015dc:	f7fe fe80 	bl	900002e0 <strcmp>
900015e0:	4603      	mov	r3, r0
900015e2:	2b00      	cmp	r3, #0
900015e4:	d10e      	bne.n	90001604 <httpd_post_finished+0x2f4>
							//memset(T[id].info, '\0', sizeof(T[id].info));
							strcpy(T[id].info, token1);
900015e6:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
900015ea:	2268      	movs	r2, #104	; 0x68
900015ec:	fb02 f303 	mul.w	r3, r2, r3
900015f0:	3340      	adds	r3, #64	; 0x40
900015f2:	4a22      	ldr	r2, [pc, #136]	; (9000167c <httpd_post_finished+0x36c>)
900015f4:	4413      	add	r3, r2
900015f6:	3304      	adds	r3, #4
900015f8:	f8d7 1474 	ldr.w	r1, [r7, #1140]	; 0x474
900015fc:	4618      	mov	r0, r3
900015fe:	f014 fcf2 	bl	90015fe6 <strcpy>
90001602:	e109      	b.n	90001818 <httpd_post_finished+0x508>
						} else if (strcmp(name1, "onoff") == 0) {
90001604:	4926      	ldr	r1, [pc, #152]	; (900016a0 <httpd_post_finished+0x390>)
90001606:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
9000160a:	f7fe fe69 	bl	900002e0 <strcmp>
9000160e:	4603      	mov	r3, r0
90001610:	2b00      	cmp	r3, #0
90001612:	d10e      	bne.n	90001632 <httpd_post_finished+0x322>
							T[id].onoff = atoi(token1);
90001614:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
90001618:	f014 f8f6 	bl	90015808 <atoi>
9000161c:	4602      	mov	r2, r0
9000161e:	4917      	ldr	r1, [pc, #92]	; (9000167c <httpd_post_finished+0x36c>)
90001620:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
90001624:	2068      	movs	r0, #104	; 0x68
90001626:	fb00 f303 	mul.w	r3, r0, r3
9000162a:	440b      	add	r3, r1
9000162c:	3364      	adds	r3, #100	; 0x64
9000162e:	601a      	str	r2, [r3, #0]
90001630:	e0f2      	b.n	90001818 <httpd_post_finished+0x508>
						} else if (strcmp(name1, "pwm") == 0) {
90001632:	491c      	ldr	r1, [pc, #112]	; (900016a4 <httpd_post_finished+0x394>)
90001634:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
90001638:	f7fe fe52 	bl	900002e0 <strcmp>
9000163c:	4603      	mov	r3, r0
9000163e:	2b00      	cmp	r3, #0
90001640:	d132      	bne.n	900016a8 <httpd_post_finished+0x398>
							T[id].pwm = atoi(token1);
90001642:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
90001646:	f014 f8df 	bl	90015808 <atoi>
9000164a:	4602      	mov	r2, r0
9000164c:	490b      	ldr	r1, [pc, #44]	; (9000167c <httpd_post_finished+0x36c>)
9000164e:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
90001652:	2068      	movs	r0, #104	; 0x68
90001654:	fb00 f303 	mul.w	r3, r0, r3
90001658:	440b      	add	r3, r1
9000165a:	3304      	adds	r3, #4
9000165c:	601a      	str	r2, [r3, #0]
9000165e:	e0db      	b.n	90001818 <httpd_post_finished+0x508>
90001660:	900177b8 	.word	0x900177b8
90001664:	24005bcc 	.word	0x24005bcc
90001668:	240024f4 	.word	0x240024f4
9000166c:	900177c4 	.word	0x900177c4
90001670:	240024f0 	.word	0x240024f0
90001674:	900177d0 	.word	0x900177d0
90001678:	900177d4 	.word	0x900177d4
9000167c:	24000864 	.word	0x24000864
90001680:	900177dc 	.word	0x900177dc
90001684:	900177e4 	.word	0x900177e4
90001688:	900177ec 	.word	0x900177ec
9000168c:	900177f4 	.word	0x900177f4
90001690:	900177fc 	.word	0x900177fc
90001694:	90017804 	.word	0x90017804
90001698:	9001780c 	.word	0x9001780c
9000169c:	90017814 	.word	0x90017814
900016a0:	9001781c 	.word	0x9001781c
900016a4:	90017824 	.word	0x90017824
						} else if (strcmp(name1, "on") == 0) {
900016a8:	49af      	ldr	r1, [pc, #700]	; (90001968 <httpd_post_finished+0x658>)
900016aa:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
900016ae:	f7fe fe17 	bl	900002e0 <strcmp>
900016b2:	4603      	mov	r3, r0
900016b4:	2b00      	cmp	r3, #0
900016b6:	d10e      	bne.n	900016d6 <httpd_post_finished+0x3c6>
							T[id].on = atoi(token1);
900016b8:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
900016bc:	f014 f8a4 	bl	90015808 <atoi>
900016c0:	4602      	mov	r2, r0
900016c2:	49aa      	ldr	r1, [pc, #680]	; (9000196c <httpd_post_finished+0x65c>)
900016c4:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
900016c8:	2068      	movs	r0, #104	; 0x68
900016ca:	fb00 f303 	mul.w	r3, r0, r3
900016ce:	440b      	add	r3, r1
900016d0:	3308      	adds	r3, #8
900016d2:	601a      	str	r2, [r3, #0]
900016d4:	e0a0      	b.n	90001818 <httpd_post_finished+0x508>
						} else if (strcmp(name1, "istate") == 0) {
900016d6:	49a6      	ldr	r1, [pc, #664]	; (90001970 <httpd_post_finished+0x660>)
900016d8:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
900016dc:	f7fe fe00 	bl	900002e0 <strcmp>
900016e0:	4603      	mov	r3, r0
900016e2:	2b00      	cmp	r3, #0
900016e4:	d10e      	bne.n	90001704 <httpd_post_finished+0x3f4>
							T[id].istate = atoi(token1);
900016e6:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
900016ea:	f014 f88d 	bl	90015808 <atoi>
900016ee:	4602      	mov	r2, r0
900016f0:	499e      	ldr	r1, [pc, #632]	; (9000196c <httpd_post_finished+0x65c>)
900016f2:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
900016f6:	2068      	movs	r0, #104	; 0x68
900016f8:	fb00 f303 	mul.w	r3, r0, r3
900016fc:	440b      	add	r3, r1
900016fe:	330c      	adds	r3, #12
90001700:	601a      	str	r2, [r3, #0]
90001702:	e089      	b.n	90001818 <httpd_post_finished+0x508>
						} else if (strcmp(name1, "dvalue") == 0) {
90001704:	499b      	ldr	r1, [pc, #620]	; (90001974 <httpd_post_finished+0x664>)
90001706:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
9000170a:	f7fe fde9 	bl	900002e0 <strcmp>
9000170e:	4603      	mov	r3, r0
90001710:	2b00      	cmp	r3, #0
90001712:	d10e      	bne.n	90001732 <httpd_post_finished+0x422>
							T[id].dvalue = atoi(token1);
90001714:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
90001718:	f014 f876 	bl	90015808 <atoi>
9000171c:	4602      	mov	r2, r0
9000171e:	4993      	ldr	r1, [pc, #588]	; (9000196c <httpd_post_finished+0x65c>)
90001720:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
90001724:	2068      	movs	r0, #104	; 0x68
90001726:	fb00 f303 	mul.w	r3, r0, r3
9000172a:	440b      	add	r3, r1
9000172c:	3310      	adds	r3, #16
9000172e:	601a      	str	r2, [r3, #0]
90001730:	e072      	b.n	90001818 <httpd_post_finished+0x508>
						} else if (strcmp(name1, "ponr") == 0) {
90001732:	4991      	ldr	r1, [pc, #580]	; (90001978 <httpd_post_finished+0x668>)
90001734:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
90001738:	f7fe fdd2 	bl	900002e0 <strcmp>
9000173c:	4603      	mov	r3, r0
9000173e:	2b00      	cmp	r3, #0
90001740:	d10e      	bne.n	90001760 <httpd_post_finished+0x450>
							T[id].ponr = atoi(token1);
90001742:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
90001746:	f014 f85f 	bl	90015808 <atoi>
9000174a:	4602      	mov	r2, r0
9000174c:	4987      	ldr	r1, [pc, #540]	; (9000196c <httpd_post_finished+0x65c>)
9000174e:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
90001752:	2068      	movs	r0, #104	; 0x68
90001754:	fb00 f303 	mul.w	r3, r0, r3
90001758:	440b      	add	r3, r1
9000175a:	3314      	adds	r3, #20
9000175c:	601a      	str	r2, [r3, #0]
9000175e:	e05b      	b.n	90001818 <httpd_post_finished+0x508>
						} else if (strcmp(name1, "idin") == 0) {
90001760:	4986      	ldr	r1, [pc, #536]	; (9000197c <httpd_post_finished+0x66c>)
90001762:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
90001766:	f7fe fdbb 	bl	900002e0 <strcmp>
9000176a:	4603      	mov	r3, r0
9000176c:	2b00      	cmp	r3, #0
9000176e:	d139      	bne.n	900017e4 <httpd_post_finished+0x4d4>
							//printf("idin------- %d \r\n", atoi(token1));
							while(variable1 <= numpintopin-1){
90001770:	e030      	b.n	900017d4 <httpd_post_finished+0x4c4>
								if(TO[variable1].flag == 0){
90001772:	4983      	ldr	r1, [pc, #524]	; (90001980 <httpd_post_finished+0x670>)
90001774:	f8d7 2480 	ldr.w	r2, [r7, #1152]	; 0x480
90001778:	4613      	mov	r3, r2
9000177a:	005b      	lsls	r3, r3, #1
9000177c:	4413      	add	r3, r2
9000177e:	009b      	lsls	r3, r3, #2
90001780:	440b      	add	r3, r1
90001782:	3308      	adds	r3, #8
90001784:	681b      	ldr	r3, [r3, #0]
90001786:	2b00      	cmp	r3, #0
90001788:	d11f      	bne.n	900017ca <httpd_post_finished+0x4ba>
									TO[variable1].idin = atoi(token1);
9000178a:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
9000178e:	f014 f83b 	bl	90015808 <atoi>
90001792:	4601      	mov	r1, r0
90001794:	487a      	ldr	r0, [pc, #488]	; (90001980 <httpd_post_finished+0x670>)
90001796:	f8d7 2480 	ldr.w	r2, [r7, #1152]	; 0x480
9000179a:	4613      	mov	r3, r2
9000179c:	005b      	lsls	r3, r3, #1
9000179e:	4413      	add	r3, r2
900017a0:	009b      	lsls	r3, r3, #2
900017a2:	4403      	add	r3, r0
900017a4:	6019      	str	r1, [r3, #0]
									variable2 = variable1;
900017a6:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
900017aa:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
									TO[variable1].flag = 1;
900017ae:	4974      	ldr	r1, [pc, #464]	; (90001980 <httpd_post_finished+0x670>)
900017b0:	f8d7 2480 	ldr.w	r2, [r7, #1152]	; 0x480
900017b4:	4613      	mov	r3, r2
900017b6:	005b      	lsls	r3, r3, #1
900017b8:	4413      	add	r3, r2
900017ba:	009b      	lsls	r3, r3, #2
900017bc:	440b      	add	r3, r1
900017be:	3308      	adds	r3, #8
900017c0:	2201      	movs	r2, #1
900017c2:	601a      	str	r2, [r3, #0]
									variable1 = numpintopin;
900017c4:	233f      	movs	r3, #63	; 0x3f
900017c6:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
								}
								variable1++;
900017ca:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
900017ce:	3301      	adds	r3, #1
900017d0:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
							while(variable1 <= numpintopin-1){
900017d4:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
900017d8:	2b3e      	cmp	r3, #62	; 0x3e
900017da:	ddca      	ble.n	90001772 <httpd_post_finished+0x462>
							}
							variable1 = 0;
900017dc:	2300      	movs	r3, #0
900017de:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
900017e2:	e019      	b.n	90001818 <httpd_post_finished+0x508>
						} else if (strcmp(name1, "idout") == 0) {
900017e4:	4967      	ldr	r1, [pc, #412]	; (90001984 <httpd_post_finished+0x674>)
900017e6:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
900017ea:	f7fe fd79 	bl	900002e0 <strcmp>
900017ee:	4603      	mov	r3, r0
900017f0:	2b00      	cmp	r3, #0
900017f2:	d111      	bne.n	90001818 <httpd_post_finished+0x508>
							TO[variable2].idout = atoi(token1);
900017f4:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
900017f8:	f014 f806 	bl	90015808 <atoi>
900017fc:	4601      	mov	r1, r0
900017fe:	4860      	ldr	r0, [pc, #384]	; (90001980 <httpd_post_finished+0x670>)
90001800:	f8d7 247c 	ldr.w	r2, [r7, #1148]	; 0x47c
90001804:	4613      	mov	r3, r2
90001806:	005b      	lsls	r3, r3, #1
90001808:	4413      	add	r3, r2
9000180a:	009b      	lsls	r3, r3, #2
9000180c:	4403      	add	r3, r0
9000180e:	3304      	adds	r3, #4
90001810:	6019      	str	r1, [r3, #0]

							variable2 = 0;
90001812:	2300      	movs	r3, #0
90001814:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
//							}
//							variable1 = 0;
							//////////////
						}
					}
					y++;
90001818:	4b5b      	ldr	r3, [pc, #364]	; (90001988 <httpd_post_finished+0x678>)
9000181a:	681b      	ldr	r3, [r3, #0]
9000181c:	3301      	adds	r3, #1
9000181e:	4a5a      	ldr	r2, [pc, #360]	; (90001988 <httpd_post_finished+0x678>)
90001820:	6013      	str	r3, [r2, #0]
				while ((token1 = strtok_r(rest1, "=", &rest1))) {
90001822:	f507 6392 	add.w	r3, r7, #1168	; 0x490
90001826:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
9000182a:	681b      	ldr	r3, [r3, #0]
9000182c:	f107 0218 	add.w	r2, r7, #24
90001830:	4956      	ldr	r1, [pc, #344]	; (9000198c <httpd_post_finished+0x67c>)
90001832:	4618      	mov	r0, r3
90001834:	f014 fc2e 	bl	90016094 <strtok_r>
90001838:	f8c7 0474 	str.w	r0, [r7, #1140]	; 0x474
9000183c:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
90001840:	2b00      	cmp	r3, #0
90001842:	f47f add6 	bne.w	900013f2 <httpd_post_finished+0xe2>
				}

				// решение с пустой строкой
				sprintf(nametoken, "infofield_%d=", id); // Если поле пустое то его заполняем "null".
90001846:	f107 0320 	add.w	r3, r7, #32
9000184a:	f8d7 2484 	ldr.w	r2, [r7, #1156]	; 0x484
9000184e:	4950      	ldr	r1, [pc, #320]	; (90001990 <httpd_post_finished+0x680>)
90001850:	4618      	mov	r0, r3
90001852:	f014 fb49 	bl	90015ee8 <siprintf>
				if (strcmp(name0, nametoken) == 0) {
90001856:	f107 0220 	add.w	r2, r7, #32
9000185a:	f107 0354 	add.w	r3, r7, #84	; 0x54
9000185e:	4611      	mov	r1, r2
90001860:	4618      	mov	r0, r3
90001862:	f7fe fd3d 	bl	900002e0 <strcmp>
90001866:	4603      	mov	r3, r0
90001868:	2b00      	cmp	r3, #0
9000186a:	d10d      	bne.n	90001888 <httpd_post_finished+0x578>
					strcpy(T[id].info, "null");
9000186c:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
90001870:	2268      	movs	r2, #104	; 0x68
90001872:	fb02 f303 	mul.w	r3, r2, r3
90001876:	3340      	adds	r3, #64	; 0x40
90001878:	4a3c      	ldr	r2, [pc, #240]	; (9000196c <httpd_post_finished+0x65c>)
9000187a:	4413      	add	r3, r2
9000187c:	3304      	adds	r3, #4
9000187e:	4a45      	ldr	r2, [pc, #276]	; (90001994 <httpd_post_finished+0x684>)
90001880:	6810      	ldr	r0, [r2, #0]
90001882:	6018      	str	r0, [r3, #0]
90001884:	7912      	ldrb	r2, [r2, #4]
90001886:	711a      	strb	r2, [r3, #4]
					//printf("Yes \n");
				}

				memset(name0, '\0', sizeof(name0));
90001888:	f107 0354 	add.w	r3, r7, #84	; 0x54
9000188c:	2232      	movs	r2, #50	; 0x32
9000188e:	2100      	movs	r1, #0
90001890:	4618      	mov	r0, r3
90001892:	f014 f912 	bl	90015aba <memset>
				memset(nametoken, '\0', sizeof(nametoken));
90001896:	f107 0320 	add.w	r3, r7, #32
9000189a:	2232      	movs	r2, #50	; 0x32
9000189c:	2100      	movs	r1, #0
9000189e:	4618      	mov	r0, r3
900018a0:	f014 f90b 	bl	90015aba <memset>

	           z++;
900018a4:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
900018a8:	3301      	adds	r3, #1
900018aa:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
			while ((token = strtok_r(rest, "&", &rest))){
900018ae:	f507 6392 	add.w	r3, r7, #1168	; 0x490
900018b2:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
900018b6:	681b      	ldr	r3, [r3, #0]
900018b8:	f107 021c 	add.w	r2, r7, #28
900018bc:	4936      	ldr	r1, [pc, #216]	; (90001998 <httpd_post_finished+0x688>)
900018be:	4618      	mov	r0, r3
900018c0:	f014 fbe8 	bl	90016094 <strtok_r>
900018c4:	f8c7 0478 	str.w	r0, [r7, #1144]	; 0x478
900018c8:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
900018cc:	2b00      	cmp	r3, #0
900018ce:	f47f ad7e 	bne.w	900013ce <httpd_post_finished+0xbe>
			}

	//
	memset(urlline, '\0', sizeof(urlline));
900018d2:	f107 0388 	add.w	r3, r7, #136	; 0x88
900018d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
900018da:	2100      	movs	r1, #0
900018dc:	4618      	mov	r0, r3
900018de:	f014 f8ec 	bl	90015aba <memset>
	memset(bufervar, '\0', sizeof(bufervar));
900018e2:	f243 02d4 	movw	r2, #12500	; 0x30d4
900018e6:	2100      	movs	r1, #0
900018e8:	482c      	ldr	r0, [pc, #176]	; (9000199c <httpd_post_finished+0x68c>)
900018ea:	f014 f8e6 	bl	90015aba <memset>
	//memset(json, '\0', sizeof(json));

	//printf("httpd_post_finished! \r\n");
	/* default page is "login failed" */
	//snprintf(response_uri, response_uri_len, "/tab.shtml");
	snprintf(response_uri, response_uri_len, urls);
900018ee:	f507 6392 	add.w	r3, r7, #1168	; 0x490
900018f2:	f2a3 438a 	subw	r3, r3, #1162	; 0x48a
900018f6:	8819      	ldrh	r1, [r3, #0]
900018f8:	f507 6392 	add.w	r3, r7, #1168	; 0x490
900018fc:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
90001900:	4a27      	ldr	r2, [pc, #156]	; (900019a0 <httpd_post_finished+0x690>)
90001902:	6818      	ldr	r0, [r3, #0]
90001904:	f014 fabc 	bl	90015e80 <sniprintf>
	if (current_connection == connection) {
90001908:	4b26      	ldr	r3, [pc, #152]	; (900019a4 <httpd_post_finished+0x694>)
9000190a:	681b      	ldr	r3, [r3, #0]
9000190c:	f507 6292 	add.w	r2, r7, #1168	; 0x490
90001910:	f2a2 4284 	subw	r2, r2, #1156	; 0x484
90001914:	6812      	ldr	r2, [r2, #0]
90001916:	429a      	cmp	r2, r3
90001918:	d11b      	bne.n	90001952 <httpd_post_finished+0x642>
		if (valid_connection == connection) {
9000191a:	4b23      	ldr	r3, [pc, #140]	; (900019a8 <httpd_post_finished+0x698>)
9000191c:	681b      	ldr	r3, [r3, #0]
9000191e:	f507 6292 	add.w	r2, r7, #1168	; 0x490
90001922:	f2a2 4284 	subw	r2, r2, #1156	; 0x484
90001926:	6812      	ldr	r2, [r2, #0]
90001928:	429a      	cmp	r2, r3
9000192a:	d10c      	bne.n	90001946 <httpd_post_finished+0x636>
			/* login succeeded */
			//snprintf(response_uri, response_uri_len, "/tab.shtml");
			snprintf(response_uri, response_uri_len, urls);
9000192c:	f507 6392 	add.w	r3, r7, #1168	; 0x490
90001930:	f2a3 438a 	subw	r3, r3, #1162	; 0x48a
90001934:	8819      	ldrh	r1, [r3, #0]
90001936:	f507 6392 	add.w	r3, r7, #1168	; 0x490
9000193a:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
9000193e:	4a18      	ldr	r2, [pc, #96]	; (900019a0 <httpd_post_finished+0x690>)
90001940:	6818      	ldr	r0, [r3, #0]
90001942:	f014 fa9d 	bl	90015e80 <sniprintf>
		}
		current_connection = NULL;
90001946:	4b17      	ldr	r3, [pc, #92]	; (900019a4 <httpd_post_finished+0x694>)
90001948:	2200      	movs	r2, #0
9000194a:	601a      	str	r2, [r3, #0]
		valid_connection = NULL;
9000194c:	4b16      	ldr	r3, [pc, #88]	; (900019a8 <httpd_post_finished+0x698>)
9000194e:	2200      	movs	r2, #0
90001950:	601a      	str	r2, [r3, #0]
	}
	connection = NULL;
90001952:	f507 6392 	add.w	r3, r7, #1168	; 0x490
90001956:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
9000195a:	2200      	movs	r2, #0
9000195c:	601a      	str	r2, [r3, #0]
}
9000195e:	bf00      	nop
90001960:	f507 6792 	add.w	r7, r7, #1168	; 0x490
90001964:	46bd      	mov	sp, r7
90001966:	bd80      	pop	{r7, pc}
90001968:	90017828 	.word	0x90017828
9000196c:	24000864 	.word	0x24000864
90001970:	9001782c 	.word	0x9001782c
90001974:	90017834 	.word	0x90017834
90001978:	9001783c 	.word	0x9001783c
9000197c:	90017844 	.word	0x90017844
90001980:	240021fc 	.word	0x240021fc
90001984:	9001784c 	.word	0x9001784c
90001988:	240024f0 	.word	0x240024f0
9000198c:	90017854 	.word	0x90017854
90001990:	90017858 	.word	0x90017858
90001994:	90017868 	.word	0x90017868
90001998:	90017870 	.word	0x90017870
9000199c:	240024f4 	.word	0x240024f4
900019a0:	24005bd0 	.word	0x24005bd0
900019a4:	24005bc4 	.word	0x24005bc4
900019a8:	24005bc8 	.word	0x24005bc8

900019ac <http_server_init>:

//////////////////// POST  END ////////////////////////


void http_server_init (void)
{
900019ac:	b580      	push	{r7, lr}
900019ae:	af00      	add	r7, sp, #0
	httpd_init();
900019b0:	f008 ff5a 	bl	9000a868 <httpd_init>

	http_set_ssi_handler(ssi_handler, (char const**) TAGS, 3);
900019b4:	4b06      	ldr	r3, [pc, #24]	; (900019d0 <http_server_init+0x24>)
900019b6:	681b      	ldr	r3, [r3, #0]
900019b8:	2203      	movs	r2, #3
900019ba:	4619      	mov	r1, r3
900019bc:	4805      	ldr	r0, [pc, #20]	; (900019d4 <http_server_init+0x28>)
900019be:	f008 ff73 	bl	9000a8a8 <http_set_ssi_handler>
	// 4. For LED Перед созданиме CGI_handle нам нужно назначить
	//CGI_TAB[0] = FORM_CGI; // CGI структуру


	//http_set_cgi_handlers (&FORM_CGI, 1); // Это пример когда у нас всего один "Handler" пример из видео.
	http_set_cgi_handlers (URL_TABLES, CGI_URL_NUM); // 5. И теперь мы передадим структуру массива в CGI_handle!
900019c2:	2305      	movs	r3, #5
900019c4:	4619      	mov	r1, r3
900019c6:	4804      	ldr	r0, [pc, #16]	; (900019d8 <http_server_init+0x2c>)
900019c8:	f008 ffb0 	bl	9000a92c <http_set_cgi_handlers>

}
900019cc:	bf00      	nop
900019ce:	bd80      	pop	{r7, pc}
900019d0:	240004f8 	.word	0x240004f8
900019d4:	900003e5 	.word	0x900003e5
900019d8:	9001a73c 	.word	0x9001a73c

900019dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
900019dc:	b5b0      	push	{r4, r5, r7, lr}
900019de:	b092      	sub	sp, #72	; 0x48
900019e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
900019e2:	f000 f925 	bl	90001c30 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
900019e6:	4b47      	ldr	r3, [pc, #284]	; (90001b04 <main+0x128>)
900019e8:	695b      	ldr	r3, [r3, #20]
900019ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
900019ee:	2b00      	cmp	r3, #0
900019f0:	d11b      	bne.n	90001a2a <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
900019f2:	f3bf 8f4f 	dsb	sy
}
900019f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
900019f8:	f3bf 8f6f 	isb	sy
}
900019fc:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
900019fe:	4b41      	ldr	r3, [pc, #260]	; (90001b04 <main+0x128>)
90001a00:	2200      	movs	r2, #0
90001a02:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
90001a06:	f3bf 8f4f 	dsb	sy
}
90001a0a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90001a0c:	f3bf 8f6f 	isb	sy
}
90001a10:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
90001a12:	4b3c      	ldr	r3, [pc, #240]	; (90001b04 <main+0x128>)
90001a14:	695b      	ldr	r3, [r3, #20]
90001a16:	4a3b      	ldr	r2, [pc, #236]	; (90001b04 <main+0x128>)
90001a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90001a1c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90001a1e:	f3bf 8f4f 	dsb	sy
}
90001a22:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90001a24:	f3bf 8f6f 	isb	sy
}
90001a28:	e000      	b.n	90001a2c <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
90001a2a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
90001a2c:	4b35      	ldr	r3, [pc, #212]	; (90001b04 <main+0x128>)
90001a2e:	695b      	ldr	r3, [r3, #20]
90001a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
90001a34:	2b00      	cmp	r3, #0
90001a36:	d138      	bne.n	90001aaa <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
90001a38:	4b32      	ldr	r3, [pc, #200]	; (90001b04 <main+0x128>)
90001a3a:	2200      	movs	r2, #0
90001a3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
90001a40:	f3bf 8f4f 	dsb	sy
}
90001a44:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
90001a46:	4b2f      	ldr	r3, [pc, #188]	; (90001b04 <main+0x128>)
90001a48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90001a4c:	647b      	str	r3, [r7, #68]	; 0x44

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90001a4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
90001a50:	0b5b      	lsrs	r3, r3, #13
90001a52:	f3c3 030e 	ubfx	r3, r3, #0, #15
90001a56:	643b      	str	r3, [r7, #64]	; 0x40
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90001a58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
90001a5a:	08db      	lsrs	r3, r3, #3
90001a5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
90001a60:	63fb      	str	r3, [r7, #60]	; 0x3c
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90001a62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
90001a64:	015a      	lsls	r2, r3, #5
90001a66:	f643 73e0 	movw	r3, #16352	; 0x3fe0
90001a6a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
90001a6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
90001a6e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90001a70:	4924      	ldr	r1, [pc, #144]	; (90001b04 <main+0x128>)
90001a72:	4313      	orrs	r3, r2
90001a74:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
90001a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90001a7a:	1e5a      	subs	r2, r3, #1
90001a7c:	63fa      	str	r2, [r7, #60]	; 0x3c
90001a7e:	2b00      	cmp	r3, #0
90001a80:	d1ef      	bne.n	90001a62 <main+0x86>
    } while(sets-- != 0U);
90001a82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
90001a84:	1e5a      	subs	r2, r3, #1
90001a86:	643a      	str	r2, [r7, #64]	; 0x40
90001a88:	2b00      	cmp	r3, #0
90001a8a:	d1e5      	bne.n	90001a58 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
90001a8c:	f3bf 8f4f 	dsb	sy
}
90001a90:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
90001a92:	4b1c      	ldr	r3, [pc, #112]	; (90001b04 <main+0x128>)
90001a94:	695b      	ldr	r3, [r3, #20]
90001a96:	4a1b      	ldr	r2, [pc, #108]	; (90001b04 <main+0x128>)
90001a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90001a9c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90001a9e:	f3bf 8f4f 	dsb	sy
}
90001aa2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90001aa4:	f3bf 8f6f 	isb	sy
}
90001aa8:	e000      	b.n	90001aac <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
90001aaa:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
90001aac:	f000 fcb4 	bl	90002418 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
90001ab0:	f000 f832 	bl	90001b18 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 5000, defaultTaskBuffer, &defaultTaskControlBlock);
90001ab4:	4b14      	ldr	r3, [pc, #80]	; (90001b08 <main+0x12c>)
90001ab6:	f107 0420 	add.w	r4, r7, #32
90001aba:	461d      	mov	r5, r3
90001abc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90001abe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90001ac0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90001ac4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
90001ac8:	f107 0320 	add.w	r3, r7, #32
90001acc:	2100      	movs	r1, #0
90001ace:	4618      	mov	r0, r3
90001ad0:	f004 f950 	bl	90005d74 <osThreadCreate>
90001ad4:	4603      	mov	r3, r0
90001ad6:	4a0d      	ldr	r2, [pc, #52]	; (90001b0c <main+0x130>)
90001ad8:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadStaticDef(myTask02, StartTask02, osPriorityAboveNormal, 0, 128, myTask02Buffer, &myTask02ControlBlock);
90001ada:	4b0d      	ldr	r3, [pc, #52]	; (90001b10 <main+0x134>)
90001adc:	1d3c      	adds	r4, r7, #4
90001ade:	461d      	mov	r5, r3
90001ae0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90001ae2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90001ae4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90001ae8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
90001aec:	1d3b      	adds	r3, r7, #4
90001aee:	2100      	movs	r1, #0
90001af0:	4618      	mov	r0, r3
90001af2:	f004 f93f 	bl	90005d74 <osThreadCreate>
90001af6:	4603      	mov	r3, r0
90001af8:	4a06      	ldr	r2, [pc, #24]	; (90001b14 <main+0x138>)
90001afa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
90001afc:	f004 f923 	bl	90005d46 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
90001b00:	e7fe      	b.n	90001b00 <main+0x124>
90001b02:	bf00      	nop
90001b04:	e000ed00 	.word	0xe000ed00
90001b08:	9001788c 	.word	0x9001788c
90001b0c:	24005bf0 	.word	0x24005bf0
90001b10:	900178a8 	.word	0x900178a8
90001b14:	2400aac8 	.word	0x2400aac8

90001b18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
90001b18:	b580      	push	{r7, lr}
90001b1a:	b08a      	sub	sp, #40	; 0x28
90001b1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90001b1e:	f107 0314 	add.w	r3, r7, #20
90001b22:	2200      	movs	r2, #0
90001b24:	601a      	str	r2, [r3, #0]
90001b26:	605a      	str	r2, [r3, #4]
90001b28:	609a      	str	r2, [r3, #8]
90001b2a:	60da      	str	r2, [r3, #12]
90001b2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
90001b2e:	4b31      	ldr	r3, [pc, #196]	; (90001bf4 <MX_GPIO_Init+0xdc>)
90001b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001b34:	4a2f      	ldr	r2, [pc, #188]	; (90001bf4 <MX_GPIO_Init+0xdc>)
90001b36:	f043 0310 	orr.w	r3, r3, #16
90001b3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90001b3e:	4b2d      	ldr	r3, [pc, #180]	; (90001bf4 <MX_GPIO_Init+0xdc>)
90001b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001b44:	f003 0310 	and.w	r3, r3, #16
90001b48:	613b      	str	r3, [r7, #16]
90001b4a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
90001b4c:	4b29      	ldr	r3, [pc, #164]	; (90001bf4 <MX_GPIO_Init+0xdc>)
90001b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001b52:	4a28      	ldr	r2, [pc, #160]	; (90001bf4 <MX_GPIO_Init+0xdc>)
90001b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90001b58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90001b5c:	4b25      	ldr	r3, [pc, #148]	; (90001bf4 <MX_GPIO_Init+0xdc>)
90001b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
90001b66:	60fb      	str	r3, [r7, #12]
90001b68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
90001b6a:	4b22      	ldr	r3, [pc, #136]	; (90001bf4 <MX_GPIO_Init+0xdc>)
90001b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001b70:	4a20      	ldr	r2, [pc, #128]	; (90001bf4 <MX_GPIO_Init+0xdc>)
90001b72:	f043 0304 	orr.w	r3, r3, #4
90001b76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90001b7a:	4b1e      	ldr	r3, [pc, #120]	; (90001bf4 <MX_GPIO_Init+0xdc>)
90001b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001b80:	f003 0304 	and.w	r3, r3, #4
90001b84:	60bb      	str	r3, [r7, #8]
90001b86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
90001b88:	4b1a      	ldr	r3, [pc, #104]	; (90001bf4 <MX_GPIO_Init+0xdc>)
90001b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001b8e:	4a19      	ldr	r2, [pc, #100]	; (90001bf4 <MX_GPIO_Init+0xdc>)
90001b90:	f043 0301 	orr.w	r3, r3, #1
90001b94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90001b98:	4b16      	ldr	r3, [pc, #88]	; (90001bf4 <MX_GPIO_Init+0xdc>)
90001b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001b9e:	f003 0301 	and.w	r3, r3, #1
90001ba2:	607b      	str	r3, [r7, #4]
90001ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
90001ba6:	4b13      	ldr	r3, [pc, #76]	; (90001bf4 <MX_GPIO_Init+0xdc>)
90001ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001bac:	4a11      	ldr	r2, [pc, #68]	; (90001bf4 <MX_GPIO_Init+0xdc>)
90001bae:	f043 0302 	orr.w	r3, r3, #2
90001bb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90001bb6:	4b0f      	ldr	r3, [pc, #60]	; (90001bf4 <MX_GPIO_Init+0xdc>)
90001bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90001bbc:	f003 0302 	and.w	r3, r3, #2
90001bc0:	603b      	str	r3, [r7, #0]
90001bc2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
90001bc4:	2200      	movs	r2, #0
90001bc6:	2108      	movs	r1, #8
90001bc8:	480b      	ldr	r0, [pc, #44]	; (90001bf8 <MX_GPIO_Init+0xe0>)
90001bca:	f002 fd65 	bl	90004698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
90001bce:	2308      	movs	r3, #8
90001bd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90001bd2:	2301      	movs	r3, #1
90001bd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90001bd6:	2300      	movs	r3, #0
90001bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90001bda:	2300      	movs	r3, #0
90001bdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90001bde:	f107 0314 	add.w	r3, r7, #20
90001be2:	4619      	mov	r1, r3
90001be4:	4804      	ldr	r0, [pc, #16]	; (90001bf8 <MX_GPIO_Init+0xe0>)
90001be6:	f002 fba7 	bl	90004338 <HAL_GPIO_Init>

}
90001bea:	bf00      	nop
90001bec:	3728      	adds	r7, #40	; 0x28
90001bee:	46bd      	mov	sp, r7
90001bf0:	bd80      	pop	{r7, pc}
90001bf2:	bf00      	nop
90001bf4:	58024400 	.word	0x58024400
90001bf8:	58021000 	.word	0x58021000

90001bfc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
90001bfc:	b580      	push	{r7, lr}
90001bfe:	b082      	sub	sp, #8
90001c00:	af00      	add	r7, sp, #0
90001c02:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
90001c04:	f003 fa58 	bl	900050b8 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  http_server_init();
90001c08:	f7ff fed0 	bl	900019ac <http_server_init>
  /* Infinite loop */
  for(;;)
90001c0c:	e7fe      	b.n	90001c0c <StartDefaultTask+0x10>
	...

90001c10 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
90001c10:	b580      	push	{r7, lr}
90001c12:	b082      	sub	sp, #8
90001c14:	af00      	add	r7, sp, #0
90001c16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
90001c18:	2108      	movs	r1, #8
90001c1a:	4804      	ldr	r0, [pc, #16]	; (90001c2c <StartTask02+0x1c>)
90001c1c:	f002 fd55 	bl	900046ca <HAL_GPIO_TogglePin>
	osDelay(500);
90001c20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
90001c24:	f004 f8f2 	bl	90005e0c <osDelay>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
90001c28:	e7f6      	b.n	90001c18 <StartTask02+0x8>
90001c2a:	bf00      	nop
90001c2c:	58021000 	.word	0x58021000

90001c30 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
90001c30:	b580      	push	{r7, lr}
90001c32:	b084      	sub	sp, #16
90001c34:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
90001c36:	463b      	mov	r3, r7
90001c38:	2200      	movs	r2, #0
90001c3a:	601a      	str	r2, [r3, #0]
90001c3c:	605a      	str	r2, [r3, #4]
90001c3e:	609a      	str	r2, [r3, #8]
90001c40:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
90001c42:	f000 fd39 	bl	900026b8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
90001c46:	2301      	movs	r3, #1
90001c48:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
90001c4a:	2300      	movs	r3, #0
90001c4c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
90001c4e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
90001c52:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
90001c54:	230e      	movs	r3, #14
90001c56:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
90001c58:	2300      	movs	r3, #0
90001c5a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
90001c5c:	2301      	movs	r3, #1
90001c5e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
90001c60:	2303      	movs	r3, #3
90001c62:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
90001c64:	2301      	movs	r3, #1
90001c66:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
90001c68:	2300      	movs	r3, #0
90001c6a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
90001c6c:	2300      	movs	r3, #0
90001c6e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
90001c70:	2300      	movs	r3, #0
90001c72:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90001c74:	463b      	mov	r3, r7
90001c76:	4618      	mov	r0, r3
90001c78:	f000 fd56 	bl	90002728 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
90001c7c:	2301      	movs	r3, #1
90001c7e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
90001c80:	2307      	movs	r3, #7
90001c82:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
90001c84:	2300      	movs	r3, #0
90001c86:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
90001c88:	2301      	movs	r3, #1
90001c8a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
90001c8c:	2301      	movs	r3, #1
90001c8e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90001c90:	463b      	mov	r3, r7
90001c92:	4618      	mov	r0, r3
90001c94:	f000 fd48 	bl	90002728 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
90001c98:	2302      	movs	r3, #2
90001c9a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
90001c9c:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
90001ca0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
90001ca2:	2316      	movs	r3, #22
90001ca4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
90001ca6:	2300      	movs	r3, #0
90001ca8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
90001caa:	2301      	movs	r3, #1
90001cac:	73bb      	strb	r3, [r7, #14]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90001cae:	463b      	mov	r3, r7
90001cb0:	4618      	mov	r0, r3
90001cb2:	f000 fd39 	bl	90002728 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
90001cb6:	2303      	movs	r3, #3
90001cb8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
90001cba:	2313      	movs	r3, #19
90001cbc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
90001cbe:	2300      	movs	r3, #0
90001cc0:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90001cc2:	463b      	mov	r3, r7
90001cc4:	4618      	mov	r0, r3
90001cc6:	f000 fd2f 	bl	90002728 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
90001cca:	2004      	movs	r0, #4
90001ccc:	f000 fd0c 	bl	900026e8 <HAL_MPU_Enable>

}
90001cd0:	bf00      	nop
90001cd2:	3710      	adds	r7, #16
90001cd4:	46bd      	mov	sp, r7
90001cd6:	bd80      	pop	{r7, pc}

90001cd8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
90001cd8:	b580      	push	{r7, lr}
90001cda:	b082      	sub	sp, #8
90001cdc:	af00      	add	r7, sp, #0
90001cde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
90001ce0:	687b      	ldr	r3, [r7, #4]
90001ce2:	681b      	ldr	r3, [r3, #0]
90001ce4:	4a04      	ldr	r2, [pc, #16]	; (90001cf8 <HAL_TIM_PeriodElapsedCallback+0x20>)
90001ce6:	4293      	cmp	r3, r2
90001ce8:	d101      	bne.n	90001cee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
90001cea:	f000 fbd1 	bl	90002490 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
90001cee:	bf00      	nop
90001cf0:	3708      	adds	r7, #8
90001cf2:	46bd      	mov	sp, r7
90001cf4:	bd80      	pop	{r7, pc}
90001cf6:	bf00      	nop
90001cf8:	40014800 	.word	0x40014800

90001cfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
90001cfc:	b480      	push	{r7}
90001cfe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
90001d00:	b672      	cpsid	i
}
90001d02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
90001d04:	e7fe      	b.n	90001d04 <Error_Handler+0x8>
	...

90001d08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
90001d08:	b580      	push	{r7, lr}
90001d0a:	b082      	sub	sp, #8
90001d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
90001d0e:	4b0c      	ldr	r3, [pc, #48]	; (90001d40 <HAL_MspInit+0x38>)
90001d10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
90001d14:	4a0a      	ldr	r2, [pc, #40]	; (90001d40 <HAL_MspInit+0x38>)
90001d16:	f043 0302 	orr.w	r3, r3, #2
90001d1a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
90001d1e:	4b08      	ldr	r3, [pc, #32]	; (90001d40 <HAL_MspInit+0x38>)
90001d20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
90001d24:	f003 0302 	and.w	r3, r3, #2
90001d28:	607b      	str	r3, [r7, #4]
90001d2a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
90001d2c:	2200      	movs	r2, #0
90001d2e:	210f      	movs	r1, #15
90001d30:	f06f 0001 	mvn.w	r0, #1
90001d34:	f000 fc98 	bl	90002668 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
90001d38:	bf00      	nop
90001d3a:	3708      	adds	r7, #8
90001d3c:	46bd      	mov	sp, r7
90001d3e:	bd80      	pop	{r7, pc}
90001d40:	58024400 	.word	0x58024400

90001d44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
90001d44:	b580      	push	{r7, lr}
90001d46:	b08e      	sub	sp, #56	; 0x38
90001d48:	af00      	add	r7, sp, #0
90001d4a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
90001d4c:	687b      	ldr	r3, [r7, #4]
90001d4e:	2b0f      	cmp	r3, #15
90001d50:	d842      	bhi.n	90001dd8 <HAL_InitTick+0x94>
  {
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0U);
90001d52:	2200      	movs	r2, #0
90001d54:	6879      	ldr	r1, [r7, #4]
90001d56:	2076      	movs	r0, #118	; 0x76
90001d58:	f000 fc86 	bl	90002668 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
90001d5c:	2076      	movs	r0, #118	; 0x76
90001d5e:	f000 fc9d 	bl	9000269c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
90001d62:	4a23      	ldr	r2, [pc, #140]	; (90001df0 <HAL_InitTick+0xac>)
90001d64:	687b      	ldr	r3, [r7, #4]
90001d66:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
90001d68:	4b22      	ldr	r3, [pc, #136]	; (90001df4 <HAL_InitTick+0xb0>)
90001d6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
90001d6e:	4a21      	ldr	r2, [pc, #132]	; (90001df4 <HAL_InitTick+0xb0>)
90001d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
90001d74:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
90001d78:	4b1e      	ldr	r3, [pc, #120]	; (90001df4 <HAL_InitTick+0xb0>)
90001d7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
90001d7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
90001d82:	60bb      	str	r3, [r7, #8]
90001d84:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
90001d86:	f107 020c 	add.w	r2, r7, #12
90001d8a:	f107 0310 	add.w	r3, r7, #16
90001d8e:	4611      	mov	r1, r2
90001d90:	4618      	mov	r0, r3
90001d92:	f002 fe75 	bl	90004a80 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
90001d96:	f002 fe5d 	bl	90004a54 <HAL_RCC_GetPCLK2Freq>
90001d9a:	6378      	str	r0, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90001d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90001d9e:	4a16      	ldr	r2, [pc, #88]	; (90001df8 <HAL_InitTick+0xb4>)
90001da0:	fba2 2303 	umull	r2, r3, r2, r3
90001da4:	0c9b      	lsrs	r3, r3, #18
90001da6:	3b01      	subs	r3, #1
90001da8:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
90001daa:	4b14      	ldr	r3, [pc, #80]	; (90001dfc <HAL_InitTick+0xb8>)
90001dac:	4a14      	ldr	r2, [pc, #80]	; (90001e00 <HAL_InitTick+0xbc>)
90001dae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
90001db0:	4b12      	ldr	r3, [pc, #72]	; (90001dfc <HAL_InitTick+0xb8>)
90001db2:	f240 32e7 	movw	r2, #999	; 0x3e7
90001db6:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
90001db8:	4a10      	ldr	r2, [pc, #64]	; (90001dfc <HAL_InitTick+0xb8>)
90001dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90001dbc:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
90001dbe:	4b0f      	ldr	r3, [pc, #60]	; (90001dfc <HAL_InitTick+0xb8>)
90001dc0:	2200      	movs	r2, #0
90001dc2:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
90001dc4:	4b0d      	ldr	r3, [pc, #52]	; (90001dfc <HAL_InitTick+0xb8>)
90001dc6:	2200      	movs	r2, #0
90001dc8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
90001dca:	480c      	ldr	r0, [pc, #48]	; (90001dfc <HAL_InitTick+0xb8>)
90001dcc:	f002 fe9a 	bl	90004b04 <HAL_TIM_Base_Init>
90001dd0:	4603      	mov	r3, r0
90001dd2:	2b00      	cmp	r3, #0
90001dd4:	d107      	bne.n	90001de6 <HAL_InitTick+0xa2>
90001dd6:	e001      	b.n	90001ddc <HAL_InitTick+0x98>
    return HAL_ERROR;
90001dd8:	2301      	movs	r3, #1
90001dda:	e005      	b.n	90001de8 <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
90001ddc:	4807      	ldr	r0, [pc, #28]	; (90001dfc <HAL_InitTick+0xb8>)
90001dde:	f002 fef3 	bl	90004bc8 <HAL_TIM_Base_Start_IT>
90001de2:	4603      	mov	r3, r0
90001de4:	e000      	b.n	90001de8 <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
90001de6:	2301      	movs	r3, #1
}
90001de8:	4618      	mov	r0, r3
90001dea:	3738      	adds	r7, #56	; 0x38
90001dec:	46bd      	mov	sp, r7
90001dee:	bd80      	pop	{r7, pc}
90001df0:	24000504 	.word	0x24000504
90001df4:	58024400 	.word	0x58024400
90001df8:	431bde83 	.word	0x431bde83
90001dfc:	2400ad80 	.word	0x2400ad80
90001e00:	40014800 	.word	0x40014800

90001e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
90001e04:	b480      	push	{r7}
90001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
90001e08:	e7fe      	b.n	90001e08 <NMI_Handler+0x4>

90001e0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
90001e0a:	b480      	push	{r7}
90001e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
90001e0e:	e7fe      	b.n	90001e0e <HardFault_Handler+0x4>

90001e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
90001e10:	b480      	push	{r7}
90001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
90001e14:	e7fe      	b.n	90001e14 <MemManage_Handler+0x4>

90001e16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
90001e16:	b480      	push	{r7}
90001e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
90001e1a:	e7fe      	b.n	90001e1a <BusFault_Handler+0x4>

90001e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
90001e1c:	b480      	push	{r7}
90001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
90001e20:	e7fe      	b.n	90001e20 <UsageFault_Handler+0x4>

90001e22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
90001e22:	b480      	push	{r7}
90001e24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
90001e26:	bf00      	nop
90001e28:	46bd      	mov	sp, r7
90001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
90001e2e:	4770      	bx	lr

90001e30 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
90001e30:	b580      	push	{r7, lr}
90001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
90001e34:	4802      	ldr	r0, [pc, #8]	; (90001e40 <ETH_IRQHandler+0x10>)
90001e36:	f001 f8e1 	bl	90002ffc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
90001e3a:	bf00      	nop
90001e3c:	bd80      	pop	{r7, pc}
90001e3e:	bf00      	nop
90001e40:	2400f7b4 	.word	0x2400f7b4

90001e44 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
90001e44:	b580      	push	{r7, lr}
90001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
90001e48:	4802      	ldr	r0, [pc, #8]	; (90001e54 <TIM17_IRQHandler+0x10>)
90001e4a:	f002 ff35 	bl	90004cb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
90001e4e:	bf00      	nop
90001e50:	bd80      	pop	{r7, pc}
90001e52:	bf00      	nop
90001e54:	2400ad80 	.word	0x2400ad80

90001e58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
90001e58:	b480      	push	{r7}
90001e5a:	af00      	add	r7, sp, #0
	return 1;
90001e5c:	2301      	movs	r3, #1
}
90001e5e:	4618      	mov	r0, r3
90001e60:	46bd      	mov	sp, r7
90001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
90001e66:	4770      	bx	lr

90001e68 <_kill>:

int _kill(int pid, int sig)
{
90001e68:	b480      	push	{r7}
90001e6a:	b083      	sub	sp, #12
90001e6c:	af00      	add	r7, sp, #0
90001e6e:	6078      	str	r0, [r7, #4]
90001e70:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
90001e72:	4b05      	ldr	r3, [pc, #20]	; (90001e88 <_kill+0x20>)
90001e74:	2216      	movs	r2, #22
90001e76:	601a      	str	r2, [r3, #0]
	return -1;
90001e78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
90001e7c:	4618      	mov	r0, r3
90001e7e:	370c      	adds	r7, #12
90001e80:	46bd      	mov	sp, r7
90001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
90001e86:	4770      	bx	lr
90001e88:	2401f510 	.word	0x2401f510

90001e8c <_exit>:

void _exit (int status)
{
90001e8c:	b580      	push	{r7, lr}
90001e8e:	b082      	sub	sp, #8
90001e90:	af00      	add	r7, sp, #0
90001e92:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
90001e94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
90001e98:	6878      	ldr	r0, [r7, #4]
90001e9a:	f7ff ffe5 	bl	90001e68 <_kill>
	while (1) {}		/* Make sure we hang here */
90001e9e:	e7fe      	b.n	90001e9e <_exit+0x12>

90001ea0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
90001ea0:	b580      	push	{r7, lr}
90001ea2:	b086      	sub	sp, #24
90001ea4:	af00      	add	r7, sp, #0
90001ea6:	60f8      	str	r0, [r7, #12]
90001ea8:	60b9      	str	r1, [r7, #8]
90001eaa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
90001eac:	2300      	movs	r3, #0
90001eae:	617b      	str	r3, [r7, #20]
90001eb0:	e00a      	b.n	90001ec8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
90001eb2:	f3af 8000 	nop.w
90001eb6:	4601      	mov	r1, r0
90001eb8:	68bb      	ldr	r3, [r7, #8]
90001eba:	1c5a      	adds	r2, r3, #1
90001ebc:	60ba      	str	r2, [r7, #8]
90001ebe:	b2ca      	uxtb	r2, r1
90001ec0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
90001ec2:	697b      	ldr	r3, [r7, #20]
90001ec4:	3301      	adds	r3, #1
90001ec6:	617b      	str	r3, [r7, #20]
90001ec8:	697a      	ldr	r2, [r7, #20]
90001eca:	687b      	ldr	r3, [r7, #4]
90001ecc:	429a      	cmp	r2, r3
90001ece:	dbf0      	blt.n	90001eb2 <_read+0x12>
	}

return len;
90001ed0:	687b      	ldr	r3, [r7, #4]
}
90001ed2:	4618      	mov	r0, r3
90001ed4:	3718      	adds	r7, #24
90001ed6:	46bd      	mov	sp, r7
90001ed8:	bd80      	pop	{r7, pc}

90001eda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
90001eda:	b580      	push	{r7, lr}
90001edc:	b086      	sub	sp, #24
90001ede:	af00      	add	r7, sp, #0
90001ee0:	60f8      	str	r0, [r7, #12]
90001ee2:	60b9      	str	r1, [r7, #8]
90001ee4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
90001ee6:	2300      	movs	r3, #0
90001ee8:	617b      	str	r3, [r7, #20]
90001eea:	e009      	b.n	90001f00 <_write+0x26>
	{
		__io_putchar(*ptr++);
90001eec:	68bb      	ldr	r3, [r7, #8]
90001eee:	1c5a      	adds	r2, r3, #1
90001ef0:	60ba      	str	r2, [r7, #8]
90001ef2:	781b      	ldrb	r3, [r3, #0]
90001ef4:	4618      	mov	r0, r3
90001ef6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
90001efa:	697b      	ldr	r3, [r7, #20]
90001efc:	3301      	adds	r3, #1
90001efe:	617b      	str	r3, [r7, #20]
90001f00:	697a      	ldr	r2, [r7, #20]
90001f02:	687b      	ldr	r3, [r7, #4]
90001f04:	429a      	cmp	r2, r3
90001f06:	dbf1      	blt.n	90001eec <_write+0x12>
	}
	return len;
90001f08:	687b      	ldr	r3, [r7, #4]
}
90001f0a:	4618      	mov	r0, r3
90001f0c:	3718      	adds	r7, #24
90001f0e:	46bd      	mov	sp, r7
90001f10:	bd80      	pop	{r7, pc}

90001f12 <_close>:

int _close(int file)
{
90001f12:	b480      	push	{r7}
90001f14:	b083      	sub	sp, #12
90001f16:	af00      	add	r7, sp, #0
90001f18:	6078      	str	r0, [r7, #4]
	return -1;
90001f1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
90001f1e:	4618      	mov	r0, r3
90001f20:	370c      	adds	r7, #12
90001f22:	46bd      	mov	sp, r7
90001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
90001f28:	4770      	bx	lr

90001f2a <_fstat>:


int _fstat(int file, struct stat *st)
{
90001f2a:	b480      	push	{r7}
90001f2c:	b083      	sub	sp, #12
90001f2e:	af00      	add	r7, sp, #0
90001f30:	6078      	str	r0, [r7, #4]
90001f32:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
90001f34:	683b      	ldr	r3, [r7, #0]
90001f36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
90001f3a:	605a      	str	r2, [r3, #4]
	return 0;
90001f3c:	2300      	movs	r3, #0
}
90001f3e:	4618      	mov	r0, r3
90001f40:	370c      	adds	r7, #12
90001f42:	46bd      	mov	sp, r7
90001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
90001f48:	4770      	bx	lr

90001f4a <_isatty>:

int _isatty(int file)
{
90001f4a:	b480      	push	{r7}
90001f4c:	b083      	sub	sp, #12
90001f4e:	af00      	add	r7, sp, #0
90001f50:	6078      	str	r0, [r7, #4]
	return 1;
90001f52:	2301      	movs	r3, #1
}
90001f54:	4618      	mov	r0, r3
90001f56:	370c      	adds	r7, #12
90001f58:	46bd      	mov	sp, r7
90001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
90001f5e:	4770      	bx	lr

90001f60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
90001f60:	b480      	push	{r7}
90001f62:	b085      	sub	sp, #20
90001f64:	af00      	add	r7, sp, #0
90001f66:	60f8      	str	r0, [r7, #12]
90001f68:	60b9      	str	r1, [r7, #8]
90001f6a:	607a      	str	r2, [r7, #4]
	return 0;
90001f6c:	2300      	movs	r3, #0
}
90001f6e:	4618      	mov	r0, r3
90001f70:	3714      	adds	r7, #20
90001f72:	46bd      	mov	sp, r7
90001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
90001f78:	4770      	bx	lr
	...

90001f7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
90001f7c:	b480      	push	{r7}
90001f7e:	b087      	sub	sp, #28
90001f80:	af00      	add	r7, sp, #0
90001f82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
90001f84:	4a14      	ldr	r2, [pc, #80]	; (90001fd8 <_sbrk+0x5c>)
90001f86:	4b15      	ldr	r3, [pc, #84]	; (90001fdc <_sbrk+0x60>)
90001f88:	1ad3      	subs	r3, r2, r3
90001f8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
90001f8c:	697b      	ldr	r3, [r7, #20]
90001f8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
90001f90:	4b13      	ldr	r3, [pc, #76]	; (90001fe0 <_sbrk+0x64>)
90001f92:	681b      	ldr	r3, [r3, #0]
90001f94:	2b00      	cmp	r3, #0
90001f96:	d102      	bne.n	90001f9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
90001f98:	4b11      	ldr	r3, [pc, #68]	; (90001fe0 <_sbrk+0x64>)
90001f9a:	4a12      	ldr	r2, [pc, #72]	; (90001fe4 <_sbrk+0x68>)
90001f9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
90001f9e:	4b10      	ldr	r3, [pc, #64]	; (90001fe0 <_sbrk+0x64>)
90001fa0:	681a      	ldr	r2, [r3, #0]
90001fa2:	687b      	ldr	r3, [r7, #4]
90001fa4:	4413      	add	r3, r2
90001fa6:	693a      	ldr	r2, [r7, #16]
90001fa8:	429a      	cmp	r2, r3
90001faa:	d205      	bcs.n	90001fb8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
90001fac:	4b0e      	ldr	r3, [pc, #56]	; (90001fe8 <_sbrk+0x6c>)
90001fae:	220c      	movs	r2, #12
90001fb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
90001fb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90001fb6:	e009      	b.n	90001fcc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
90001fb8:	4b09      	ldr	r3, [pc, #36]	; (90001fe0 <_sbrk+0x64>)
90001fba:	681b      	ldr	r3, [r3, #0]
90001fbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
90001fbe:	4b08      	ldr	r3, [pc, #32]	; (90001fe0 <_sbrk+0x64>)
90001fc0:	681a      	ldr	r2, [r3, #0]
90001fc2:	687b      	ldr	r3, [r7, #4]
90001fc4:	4413      	add	r3, r2
90001fc6:	4a06      	ldr	r2, [pc, #24]	; (90001fe0 <_sbrk+0x64>)
90001fc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
90001fca:	68fb      	ldr	r3, [r7, #12]
}
90001fcc:	4618      	mov	r0, r3
90001fce:	371c      	adds	r7, #28
90001fd0:	46bd      	mov	sp, r7
90001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
90001fd6:	4770      	bx	lr
90001fd8:	24080000 	.word	0x24080000
90001fdc:	00000400 	.word	0x00000400
90001fe0:	2400adcc 	.word	0x2400adcc
90001fe4:	2401f518 	.word	0x2401f518
90001fe8:	2401f510 	.word	0x2401f510

90001fec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
90001fec:	b480      	push	{r7}
90001fee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
90001ff0:	4b39      	ldr	r3, [pc, #228]	; (900020d8 <SystemInit+0xec>)
90001ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90001ff6:	4a38      	ldr	r2, [pc, #224]	; (900020d8 <SystemInit+0xec>)
90001ff8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
90001ffc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
90002000:	4b36      	ldr	r3, [pc, #216]	; (900020dc <SystemInit+0xf0>)
90002002:	681b      	ldr	r3, [r3, #0]
90002004:	f003 030f 	and.w	r3, r3, #15
90002008:	2b06      	cmp	r3, #6
9000200a:	d807      	bhi.n	9000201c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
9000200c:	4b33      	ldr	r3, [pc, #204]	; (900020dc <SystemInit+0xf0>)
9000200e:	681b      	ldr	r3, [r3, #0]
90002010:	f023 030f 	bic.w	r3, r3, #15
90002014:	4a31      	ldr	r2, [pc, #196]	; (900020dc <SystemInit+0xf0>)
90002016:	f043 0307 	orr.w	r3, r3, #7
9000201a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
9000201c:	4b30      	ldr	r3, [pc, #192]	; (900020e0 <SystemInit+0xf4>)
9000201e:	681b      	ldr	r3, [r3, #0]
90002020:	4a2f      	ldr	r2, [pc, #188]	; (900020e0 <SystemInit+0xf4>)
90002022:	f043 0301 	orr.w	r3, r3, #1
90002026:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
90002028:	4b2d      	ldr	r3, [pc, #180]	; (900020e0 <SystemInit+0xf4>)
9000202a:	2200      	movs	r2, #0
9000202c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
9000202e:	4b2c      	ldr	r3, [pc, #176]	; (900020e0 <SystemInit+0xf4>)
90002030:	681a      	ldr	r2, [r3, #0]
90002032:	492b      	ldr	r1, [pc, #172]	; (900020e0 <SystemInit+0xf4>)
90002034:	4b2b      	ldr	r3, [pc, #172]	; (900020e4 <SystemInit+0xf8>)
90002036:	4013      	ands	r3, r2
90002038:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
9000203a:	4b28      	ldr	r3, [pc, #160]	; (900020dc <SystemInit+0xf0>)
9000203c:	681b      	ldr	r3, [r3, #0]
9000203e:	f003 0308 	and.w	r3, r3, #8
90002042:	2b00      	cmp	r3, #0
90002044:	d007      	beq.n	90002056 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
90002046:	4b25      	ldr	r3, [pc, #148]	; (900020dc <SystemInit+0xf0>)
90002048:	681b      	ldr	r3, [r3, #0]
9000204a:	f023 030f 	bic.w	r3, r3, #15
9000204e:	4a23      	ldr	r2, [pc, #140]	; (900020dc <SystemInit+0xf0>)
90002050:	f043 0307 	orr.w	r3, r3, #7
90002054:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
90002056:	4b22      	ldr	r3, [pc, #136]	; (900020e0 <SystemInit+0xf4>)
90002058:	2200      	movs	r2, #0
9000205a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
9000205c:	4b20      	ldr	r3, [pc, #128]	; (900020e0 <SystemInit+0xf4>)
9000205e:	2200      	movs	r2, #0
90002060:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
90002062:	4b1f      	ldr	r3, [pc, #124]	; (900020e0 <SystemInit+0xf4>)
90002064:	2200      	movs	r2, #0
90002066:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
90002068:	4b1d      	ldr	r3, [pc, #116]	; (900020e0 <SystemInit+0xf4>)
9000206a:	4a1f      	ldr	r2, [pc, #124]	; (900020e8 <SystemInit+0xfc>)
9000206c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
9000206e:	4b1c      	ldr	r3, [pc, #112]	; (900020e0 <SystemInit+0xf4>)
90002070:	4a1e      	ldr	r2, [pc, #120]	; (900020ec <SystemInit+0x100>)
90002072:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
90002074:	4b1a      	ldr	r3, [pc, #104]	; (900020e0 <SystemInit+0xf4>)
90002076:	4a1e      	ldr	r2, [pc, #120]	; (900020f0 <SystemInit+0x104>)
90002078:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
9000207a:	4b19      	ldr	r3, [pc, #100]	; (900020e0 <SystemInit+0xf4>)
9000207c:	2200      	movs	r2, #0
9000207e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
90002080:	4b17      	ldr	r3, [pc, #92]	; (900020e0 <SystemInit+0xf4>)
90002082:	4a1b      	ldr	r2, [pc, #108]	; (900020f0 <SystemInit+0x104>)
90002084:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
90002086:	4b16      	ldr	r3, [pc, #88]	; (900020e0 <SystemInit+0xf4>)
90002088:	2200      	movs	r2, #0
9000208a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
9000208c:	4b14      	ldr	r3, [pc, #80]	; (900020e0 <SystemInit+0xf4>)
9000208e:	4a18      	ldr	r2, [pc, #96]	; (900020f0 <SystemInit+0x104>)
90002090:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
90002092:	4b13      	ldr	r3, [pc, #76]	; (900020e0 <SystemInit+0xf4>)
90002094:	2200      	movs	r2, #0
90002096:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
90002098:	4b11      	ldr	r3, [pc, #68]	; (900020e0 <SystemInit+0xf4>)
9000209a:	681b      	ldr	r3, [r3, #0]
9000209c:	4a10      	ldr	r2, [pc, #64]	; (900020e0 <SystemInit+0xf4>)
9000209e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
900020a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
900020a4:	4b0e      	ldr	r3, [pc, #56]	; (900020e0 <SystemInit+0xf4>)
900020a6:	2200      	movs	r2, #0
900020a8:	661a      	str	r2, [r3, #96]	; 0x60

  SCB->VTOR = QSPI_BASE; /* Я добавил */
900020aa:	4b0b      	ldr	r3, [pc, #44]	; (900020d8 <SystemInit+0xec>)
900020ac:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
900020b0:	609a      	str	r2, [r3, #8]

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
900020b2:	4b10      	ldr	r3, [pc, #64]	; (900020f4 <SystemInit+0x108>)
900020b4:	681a      	ldr	r2, [r3, #0]
900020b6:	4b10      	ldr	r3, [pc, #64]	; (900020f8 <SystemInit+0x10c>)
900020b8:	4013      	ands	r3, r2
900020ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
900020be:	d202      	bcs.n	900020c6 <SystemInit+0xda>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
900020c0:	4b0e      	ldr	r3, [pc, #56]	; (900020fc <SystemInit+0x110>)
900020c2:	2201      	movs	r2, #1
900020c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
900020c6:	4b0e      	ldr	r3, [pc, #56]	; (90002100 <SystemInit+0x114>)
900020c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
900020cc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
900020ce:	bf00      	nop
900020d0:	46bd      	mov	sp, r7
900020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
900020d6:	4770      	bx	lr
900020d8:	e000ed00 	.word	0xe000ed00
900020dc:	52002000 	.word	0x52002000
900020e0:	58024400 	.word	0x58024400
900020e4:	eaf6ed7f 	.word	0xeaf6ed7f
900020e8:	02020200 	.word	0x02020200
900020ec:	01ff0000 	.word	0x01ff0000
900020f0:	01010280 	.word	0x01010280
900020f4:	5c001000 	.word	0x5c001000
900020f8:	ffff0000 	.word	0xffff0000
900020fc:	51008108 	.word	0x51008108
90002100:	52004000 	.word	0x52004000

90002104 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
90002104:	f8df d034 	ldr.w	sp, [pc, #52]	; 9000213c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
90002108:	f7ff ff70 	bl	90001fec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
9000210c:	480c      	ldr	r0, [pc, #48]	; (90002140 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
9000210e:	490d      	ldr	r1, [pc, #52]	; (90002144 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
90002110:	4a0d      	ldr	r2, [pc, #52]	; (90002148 <LoopFillZerobss+0x1a>)
  movs r3, #0
90002112:	2300      	movs	r3, #0
  b LoopCopyDataInit
90002114:	e002      	b.n	9000211c <LoopCopyDataInit>

90002116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
90002116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
90002118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
9000211a:	3304      	adds	r3, #4

9000211c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
9000211c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
9000211e:	428c      	cmp	r4, r1
  bcc CopyDataInit
90002120:	d3f9      	bcc.n	90002116 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
90002122:	4a0a      	ldr	r2, [pc, #40]	; (9000214c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
90002124:	4c0a      	ldr	r4, [pc, #40]	; (90002150 <LoopFillZerobss+0x22>)
  movs r3, #0
90002126:	2300      	movs	r3, #0
  b LoopFillZerobss
90002128:	e001      	b.n	9000212e <LoopFillZerobss>

9000212a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
9000212a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
9000212c:	3204      	adds	r2, #4

9000212e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
9000212e:	42a2      	cmp	r2, r4
  bcc FillZerobss
90002130:	d3fb      	bcc.n	9000212a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
90002132:	f013 fc63 	bl	900159fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
90002136:	f7ff fc51 	bl	900019dc <main>
  bx  lr
9000213a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
9000213c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
90002140:	24000000 	.word	0x24000000
  ldr r1, =_edata
90002144:	24000594 	.word	0x24000594
  ldr r2, =_sidata
90002148:	900213a4 	.word	0x900213a4
  ldr r2, =_sbss
9000214c:	24000594 	.word	0x24000594
  ldr r4, =_ebss
90002150:	2401f514 	.word	0x2401f514

90002154 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
90002154:	e7fe      	b.n	90002154 <ADC3_IRQHandler>

90002156 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
90002156:	b480      	push	{r7}
90002158:	b083      	sub	sp, #12
9000215a:	af00      	add	r7, sp, #0
9000215c:	6078      	str	r0, [r7, #4]
9000215e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
90002160:	687b      	ldr	r3, [r7, #4]
90002162:	2b00      	cmp	r3, #0
90002164:	d00b      	beq.n	9000217e <LAN8742_RegisterBusIO+0x28>
90002166:	683b      	ldr	r3, [r7, #0]
90002168:	68db      	ldr	r3, [r3, #12]
9000216a:	2b00      	cmp	r3, #0
9000216c:	d007      	beq.n	9000217e <LAN8742_RegisterBusIO+0x28>
9000216e:	683b      	ldr	r3, [r7, #0]
90002170:	689b      	ldr	r3, [r3, #8]
90002172:	2b00      	cmp	r3, #0
90002174:	d003      	beq.n	9000217e <LAN8742_RegisterBusIO+0x28>
90002176:	683b      	ldr	r3, [r7, #0]
90002178:	691b      	ldr	r3, [r3, #16]
9000217a:	2b00      	cmp	r3, #0
9000217c:	d102      	bne.n	90002184 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
9000217e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90002182:	e014      	b.n	900021ae <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
90002184:	683b      	ldr	r3, [r7, #0]
90002186:	681a      	ldr	r2, [r3, #0]
90002188:	687b      	ldr	r3, [r7, #4]
9000218a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
9000218c:	683b      	ldr	r3, [r7, #0]
9000218e:	685a      	ldr	r2, [r3, #4]
90002190:	687b      	ldr	r3, [r7, #4]
90002192:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
90002194:	683b      	ldr	r3, [r7, #0]
90002196:	68da      	ldr	r2, [r3, #12]
90002198:	687b      	ldr	r3, [r7, #4]
9000219a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
9000219c:	683b      	ldr	r3, [r7, #0]
9000219e:	689a      	ldr	r2, [r3, #8]
900021a0:	687b      	ldr	r3, [r7, #4]
900021a2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
900021a4:	683b      	ldr	r3, [r7, #0]
900021a6:	691a      	ldr	r2, [r3, #16]
900021a8:	687b      	ldr	r3, [r7, #4]
900021aa:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
900021ac:	2300      	movs	r3, #0
}
900021ae:	4618      	mov	r0, r3
900021b0:	370c      	adds	r7, #12
900021b2:	46bd      	mov	sp, r7
900021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
900021b8:	4770      	bx	lr

900021ba <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
900021ba:	b580      	push	{r7, lr}
900021bc:	b086      	sub	sp, #24
900021be:	af00      	add	r7, sp, #0
900021c0:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
900021c2:	2300      	movs	r3, #0
900021c4:	60fb      	str	r3, [r7, #12]
900021c6:	2300      	movs	r3, #0
900021c8:	60bb      	str	r3, [r7, #8]
900021ca:	2300      	movs	r3, #0
900021cc:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
900021ce:	2300      	movs	r3, #0
900021d0:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
900021d2:	687b      	ldr	r3, [r7, #4]
900021d4:	685b      	ldr	r3, [r3, #4]
900021d6:	2b00      	cmp	r3, #0
900021d8:	d17c      	bne.n	900022d4 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
900021da:	687b      	ldr	r3, [r7, #4]
900021dc:	689b      	ldr	r3, [r3, #8]
900021de:	2b00      	cmp	r3, #0
900021e0:	d002      	beq.n	900021e8 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
900021e2:	687b      	ldr	r3, [r7, #4]
900021e4:	689b      	ldr	r3, [r3, #8]
900021e6:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
900021e8:	687b      	ldr	r3, [r7, #4]
900021ea:	2220      	movs	r2, #32
900021ec:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
900021ee:	2300      	movs	r3, #0
900021f0:	617b      	str	r3, [r7, #20]
900021f2:	e01c      	b.n	9000222e <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
900021f4:	687b      	ldr	r3, [r7, #4]
900021f6:	695b      	ldr	r3, [r3, #20]
900021f8:	f107 0208 	add.w	r2, r7, #8
900021fc:	2112      	movs	r1, #18
900021fe:	6978      	ldr	r0, [r7, #20]
90002200:	4798      	blx	r3
90002202:	4603      	mov	r3, r0
90002204:	2b00      	cmp	r3, #0
90002206:	da03      	bge.n	90002210 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
90002208:	f06f 0304 	mvn.w	r3, #4
9000220c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
9000220e:	e00b      	b.n	90002228 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
90002210:	68bb      	ldr	r3, [r7, #8]
90002212:	f003 031f 	and.w	r3, r3, #31
90002216:	697a      	ldr	r2, [r7, #20]
90002218:	429a      	cmp	r2, r3
9000221a:	d105      	bne.n	90002228 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
9000221c:	687b      	ldr	r3, [r7, #4]
9000221e:	697a      	ldr	r2, [r7, #20]
90002220:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
90002222:	2300      	movs	r3, #0
90002224:	613b      	str	r3, [r7, #16]
         break;
90002226:	e005      	b.n	90002234 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
90002228:	697b      	ldr	r3, [r7, #20]
9000222a:	3301      	adds	r3, #1
9000222c:	617b      	str	r3, [r7, #20]
9000222e:	697b      	ldr	r3, [r7, #20]
90002230:	2b1f      	cmp	r3, #31
90002232:	d9df      	bls.n	900021f4 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
90002234:	687b      	ldr	r3, [r7, #4]
90002236:	681b      	ldr	r3, [r3, #0]
90002238:	2b1f      	cmp	r3, #31
9000223a:	d902      	bls.n	90002242 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
9000223c:	f06f 0302 	mvn.w	r3, #2
90002240:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
90002242:	693b      	ldr	r3, [r7, #16]
90002244:	2b00      	cmp	r3, #0
90002246:	d145      	bne.n	900022d4 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
90002248:	687b      	ldr	r3, [r7, #4]
9000224a:	691b      	ldr	r3, [r3, #16]
9000224c:	687a      	ldr	r2, [r7, #4]
9000224e:	6810      	ldr	r0, [r2, #0]
90002250:	f44f 4200 	mov.w	r2, #32768	; 0x8000
90002254:	2100      	movs	r1, #0
90002256:	4798      	blx	r3
90002258:	4603      	mov	r3, r0
9000225a:	2b00      	cmp	r3, #0
9000225c:	db37      	blt.n	900022ce <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
9000225e:	687b      	ldr	r3, [r7, #4]
90002260:	695b      	ldr	r3, [r3, #20]
90002262:	687a      	ldr	r2, [r7, #4]
90002264:	6810      	ldr	r0, [r2, #0]
90002266:	f107 0208 	add.w	r2, r7, #8
9000226a:	2100      	movs	r1, #0
9000226c:	4798      	blx	r3
9000226e:	4603      	mov	r3, r0
90002270:	2b00      	cmp	r3, #0
90002272:	db28      	blt.n	900022c6 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
90002274:	687b      	ldr	r3, [r7, #4]
90002276:	699b      	ldr	r3, [r3, #24]
90002278:	4798      	blx	r3
9000227a:	4603      	mov	r3, r0
9000227c:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
9000227e:	e01c      	b.n	900022ba <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
90002280:	687b      	ldr	r3, [r7, #4]
90002282:	699b      	ldr	r3, [r3, #24]
90002284:	4798      	blx	r3
90002286:	4603      	mov	r3, r0
90002288:	461a      	mov	r2, r3
9000228a:	68fb      	ldr	r3, [r7, #12]
9000228c:	1ad3      	subs	r3, r2, r3
9000228e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
90002292:	d80e      	bhi.n	900022b2 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
90002294:	687b      	ldr	r3, [r7, #4]
90002296:	695b      	ldr	r3, [r3, #20]
90002298:	687a      	ldr	r2, [r7, #4]
9000229a:	6810      	ldr	r0, [r2, #0]
9000229c:	f107 0208 	add.w	r2, r7, #8
900022a0:	2100      	movs	r1, #0
900022a2:	4798      	blx	r3
900022a4:	4603      	mov	r3, r0
900022a6:	2b00      	cmp	r3, #0
900022a8:	da07      	bge.n	900022ba <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
900022aa:	f06f 0304 	mvn.w	r3, #4
900022ae:	613b      	str	r3, [r7, #16]
                 break;
900022b0:	e010      	b.n	900022d4 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
900022b2:	f06f 0301 	mvn.w	r3, #1
900022b6:	613b      	str	r3, [r7, #16]
               break;
900022b8:	e00c      	b.n	900022d4 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
900022ba:	68bb      	ldr	r3, [r7, #8]
900022bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
900022c0:	2b00      	cmp	r3, #0
900022c2:	d1dd      	bne.n	90002280 <LAN8742_Init+0xc6>
900022c4:	e006      	b.n	900022d4 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
900022c6:	f06f 0304 	mvn.w	r3, #4
900022ca:	613b      	str	r3, [r7, #16]
900022cc:	e002      	b.n	900022d4 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
900022ce:	f06f 0303 	mvn.w	r3, #3
900022d2:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
900022d4:	693b      	ldr	r3, [r7, #16]
900022d6:	2b00      	cmp	r3, #0
900022d8:	d112      	bne.n	90002300 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
900022da:	687b      	ldr	r3, [r7, #4]
900022dc:	699b      	ldr	r3, [r3, #24]
900022de:	4798      	blx	r3
900022e0:	4603      	mov	r3, r0
900022e2:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
900022e4:	bf00      	nop
900022e6:	687b      	ldr	r3, [r7, #4]
900022e8:	699b      	ldr	r3, [r3, #24]
900022ea:	4798      	blx	r3
900022ec:	4603      	mov	r3, r0
900022ee:	461a      	mov	r2, r3
900022f0:	68fb      	ldr	r3, [r7, #12]
900022f2:	1ad3      	subs	r3, r2, r3
900022f4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
900022f8:	d9f5      	bls.n	900022e6 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
900022fa:	687b      	ldr	r3, [r7, #4]
900022fc:	2201      	movs	r2, #1
900022fe:	605a      	str	r2, [r3, #4]
   }
   
   return status;
90002300:	693b      	ldr	r3, [r7, #16]
 }
90002302:	4618      	mov	r0, r3
90002304:	3718      	adds	r7, #24
90002306:	46bd      	mov	sp, r7
90002308:	bd80      	pop	{r7, pc}

9000230a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
9000230a:	b580      	push	{r7, lr}
9000230c:	b084      	sub	sp, #16
9000230e:	af00      	add	r7, sp, #0
90002310:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
90002312:	2300      	movs	r3, #0
90002314:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
90002316:	687b      	ldr	r3, [r7, #4]
90002318:	695b      	ldr	r3, [r3, #20]
9000231a:	687a      	ldr	r2, [r7, #4]
9000231c:	6810      	ldr	r0, [r2, #0]
9000231e:	f107 020c 	add.w	r2, r7, #12
90002322:	2101      	movs	r1, #1
90002324:	4798      	blx	r3
90002326:	4603      	mov	r3, r0
90002328:	2b00      	cmp	r3, #0
9000232a:	da02      	bge.n	90002332 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
9000232c:	f06f 0304 	mvn.w	r3, #4
90002330:	e06e      	b.n	90002410 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
90002332:	687b      	ldr	r3, [r7, #4]
90002334:	695b      	ldr	r3, [r3, #20]
90002336:	687a      	ldr	r2, [r7, #4]
90002338:	6810      	ldr	r0, [r2, #0]
9000233a:	f107 020c 	add.w	r2, r7, #12
9000233e:	2101      	movs	r1, #1
90002340:	4798      	blx	r3
90002342:	4603      	mov	r3, r0
90002344:	2b00      	cmp	r3, #0
90002346:	da02      	bge.n	9000234e <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
90002348:	f06f 0304 	mvn.w	r3, #4
9000234c:	e060      	b.n	90002410 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
9000234e:	68fb      	ldr	r3, [r7, #12]
90002350:	f003 0304 	and.w	r3, r3, #4
90002354:	2b00      	cmp	r3, #0
90002356:	d101      	bne.n	9000235c <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
90002358:	2301      	movs	r3, #1
9000235a:	e059      	b.n	90002410 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
9000235c:	687b      	ldr	r3, [r7, #4]
9000235e:	695b      	ldr	r3, [r3, #20]
90002360:	687a      	ldr	r2, [r7, #4]
90002362:	6810      	ldr	r0, [r2, #0]
90002364:	f107 020c 	add.w	r2, r7, #12
90002368:	2100      	movs	r1, #0
9000236a:	4798      	blx	r3
9000236c:	4603      	mov	r3, r0
9000236e:	2b00      	cmp	r3, #0
90002370:	da02      	bge.n	90002378 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
90002372:	f06f 0304 	mvn.w	r3, #4
90002376:	e04b      	b.n	90002410 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
90002378:	68fb      	ldr	r3, [r7, #12]
9000237a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
9000237e:	2b00      	cmp	r3, #0
90002380:	d11b      	bne.n	900023ba <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
90002382:	68fb      	ldr	r3, [r7, #12]
90002384:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
90002388:	2b00      	cmp	r3, #0
9000238a:	d006      	beq.n	9000239a <LAN8742_GetLinkState+0x90>
9000238c:	68fb      	ldr	r3, [r7, #12]
9000238e:	f403 7380 	and.w	r3, r3, #256	; 0x100
90002392:	2b00      	cmp	r3, #0
90002394:	d001      	beq.n	9000239a <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
90002396:	2302      	movs	r3, #2
90002398:	e03a      	b.n	90002410 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
9000239a:	68fb      	ldr	r3, [r7, #12]
9000239c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
900023a0:	2b00      	cmp	r3, #0
900023a2:	d001      	beq.n	900023a8 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
900023a4:	2303      	movs	r3, #3
900023a6:	e033      	b.n	90002410 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
900023a8:	68fb      	ldr	r3, [r7, #12]
900023aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
900023ae:	2b00      	cmp	r3, #0
900023b0:	d001      	beq.n	900023b6 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
900023b2:	2304      	movs	r3, #4
900023b4:	e02c      	b.n	90002410 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
900023b6:	2305      	movs	r3, #5
900023b8:	e02a      	b.n	90002410 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
900023ba:	687b      	ldr	r3, [r7, #4]
900023bc:	695b      	ldr	r3, [r3, #20]
900023be:	687a      	ldr	r2, [r7, #4]
900023c0:	6810      	ldr	r0, [r2, #0]
900023c2:	f107 020c 	add.w	r2, r7, #12
900023c6:	211f      	movs	r1, #31
900023c8:	4798      	blx	r3
900023ca:	4603      	mov	r3, r0
900023cc:	2b00      	cmp	r3, #0
900023ce:	da02      	bge.n	900023d6 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
900023d0:	f06f 0304 	mvn.w	r3, #4
900023d4:	e01c      	b.n	90002410 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
900023d6:	68fb      	ldr	r3, [r7, #12]
900023d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
900023dc:	2b00      	cmp	r3, #0
900023de:	d101      	bne.n	900023e4 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
900023e0:	2306      	movs	r3, #6
900023e2:	e015      	b.n	90002410 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
900023e4:	68fb      	ldr	r3, [r7, #12]
900023e6:	f003 031c 	and.w	r3, r3, #28
900023ea:	2b18      	cmp	r3, #24
900023ec:	d101      	bne.n	900023f2 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
900023ee:	2302      	movs	r3, #2
900023f0:	e00e      	b.n	90002410 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
900023f2:	68fb      	ldr	r3, [r7, #12]
900023f4:	f003 031c 	and.w	r3, r3, #28
900023f8:	2b08      	cmp	r3, #8
900023fa:	d101      	bne.n	90002400 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
900023fc:	2303      	movs	r3, #3
900023fe:	e007      	b.n	90002410 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
90002400:	68fb      	ldr	r3, [r7, #12]
90002402:	f003 031c 	and.w	r3, r3, #28
90002406:	2b14      	cmp	r3, #20
90002408:	d101      	bne.n	9000240e <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
9000240a:	2304      	movs	r3, #4
9000240c:	e000      	b.n	90002410 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
9000240e:	2305      	movs	r3, #5
    }				
  }
}
90002410:	4618      	mov	r0, r3
90002412:	3710      	adds	r7, #16
90002414:	46bd      	mov	sp, r7
90002416:	bd80      	pop	{r7, pc}

90002418 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
90002418:	b580      	push	{r7, lr}
9000241a:	b082      	sub	sp, #8
9000241c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
9000241e:	2003      	movs	r0, #3
90002420:	f000 f917 	bl	90002652 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90002424:	f002 f96c 	bl	90004700 <HAL_RCC_GetSysClockFreq>
90002428:	4602      	mov	r2, r0
9000242a:	4b15      	ldr	r3, [pc, #84]	; (90002480 <HAL_Init+0x68>)
9000242c:	699b      	ldr	r3, [r3, #24]
9000242e:	0a1b      	lsrs	r3, r3, #8
90002430:	f003 030f 	and.w	r3, r3, #15
90002434:	4913      	ldr	r1, [pc, #76]	; (90002484 <HAL_Init+0x6c>)
90002436:	5ccb      	ldrb	r3, [r1, r3]
90002438:	f003 031f 	and.w	r3, r3, #31
9000243c:	fa22 f303 	lsr.w	r3, r2, r3
90002440:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90002442:	4b0f      	ldr	r3, [pc, #60]	; (90002480 <HAL_Init+0x68>)
90002444:	699b      	ldr	r3, [r3, #24]
90002446:	f003 030f 	and.w	r3, r3, #15
9000244a:	4a0e      	ldr	r2, [pc, #56]	; (90002484 <HAL_Init+0x6c>)
9000244c:	5cd3      	ldrb	r3, [r2, r3]
9000244e:	f003 031f 	and.w	r3, r3, #31
90002452:	687a      	ldr	r2, [r7, #4]
90002454:	fa22 f303 	lsr.w	r3, r2, r3
90002458:	4a0b      	ldr	r2, [pc, #44]	; (90002488 <HAL_Init+0x70>)
9000245a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
9000245c:	4a0b      	ldr	r2, [pc, #44]	; (9000248c <HAL_Init+0x74>)
9000245e:	687b      	ldr	r3, [r7, #4]
90002460:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
90002462:	200f      	movs	r0, #15
90002464:	f7ff fc6e 	bl	90001d44 <HAL_InitTick>
90002468:	4603      	mov	r3, r0
9000246a:	2b00      	cmp	r3, #0
9000246c:	d001      	beq.n	90002472 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
9000246e:	2301      	movs	r3, #1
90002470:	e002      	b.n	90002478 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
90002472:	f7ff fc49 	bl	90001d08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
90002476:	2300      	movs	r3, #0
}
90002478:	4618      	mov	r0, r3
9000247a:	3708      	adds	r7, #8
9000247c:	46bd      	mov	sp, r7
9000247e:	bd80      	pop	{r7, pc}
90002480:	58024400 	.word	0x58024400
90002484:	9001a764 	.word	0x9001a764
90002488:	24000500 	.word	0x24000500
9000248c:	240004fc 	.word	0x240004fc

90002490 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
90002490:	b480      	push	{r7}
90002492:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
90002494:	4b06      	ldr	r3, [pc, #24]	; (900024b0 <HAL_IncTick+0x20>)
90002496:	781b      	ldrb	r3, [r3, #0]
90002498:	461a      	mov	r2, r3
9000249a:	4b06      	ldr	r3, [pc, #24]	; (900024b4 <HAL_IncTick+0x24>)
9000249c:	681b      	ldr	r3, [r3, #0]
9000249e:	4413      	add	r3, r2
900024a0:	4a04      	ldr	r2, [pc, #16]	; (900024b4 <HAL_IncTick+0x24>)
900024a2:	6013      	str	r3, [r2, #0]
}
900024a4:	bf00      	nop
900024a6:	46bd      	mov	sp, r7
900024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
900024ac:	4770      	bx	lr
900024ae:	bf00      	nop
900024b0:	24000508 	.word	0x24000508
900024b4:	2400add0 	.word	0x2400add0

900024b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
900024b8:	b480      	push	{r7}
900024ba:	af00      	add	r7, sp, #0
  return uwTick;
900024bc:	4b03      	ldr	r3, [pc, #12]	; (900024cc <HAL_GetTick+0x14>)
900024be:	681b      	ldr	r3, [r3, #0]
}
900024c0:	4618      	mov	r0, r3
900024c2:	46bd      	mov	sp, r7
900024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
900024c8:	4770      	bx	lr
900024ca:	bf00      	nop
900024cc:	2400add0 	.word	0x2400add0

900024d0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
900024d0:	b480      	push	{r7}
900024d2:	b083      	sub	sp, #12
900024d4:	af00      	add	r7, sp, #0
900024d6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
900024d8:	4b06      	ldr	r3, [pc, #24]	; (900024f4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
900024da:	685b      	ldr	r3, [r3, #4]
900024dc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
900024e0:	4904      	ldr	r1, [pc, #16]	; (900024f4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
900024e2:	687b      	ldr	r3, [r7, #4]
900024e4:	4313      	orrs	r3, r2
900024e6:	604b      	str	r3, [r1, #4]
}
900024e8:	bf00      	nop
900024ea:	370c      	adds	r7, #12
900024ec:	46bd      	mov	sp, r7
900024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
900024f2:	4770      	bx	lr
900024f4:	58000400 	.word	0x58000400

900024f8 <__NVIC_SetPriorityGrouping>:
{
900024f8:	b480      	push	{r7}
900024fa:	b085      	sub	sp, #20
900024fc:	af00      	add	r7, sp, #0
900024fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
90002500:	687b      	ldr	r3, [r7, #4]
90002502:	f003 0307 	and.w	r3, r3, #7
90002506:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
90002508:	4b0b      	ldr	r3, [pc, #44]	; (90002538 <__NVIC_SetPriorityGrouping+0x40>)
9000250a:	68db      	ldr	r3, [r3, #12]
9000250c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
9000250e:	68ba      	ldr	r2, [r7, #8]
90002510:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
90002514:	4013      	ands	r3, r2
90002516:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
90002518:	68fb      	ldr	r3, [r7, #12]
9000251a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
9000251c:	68bb      	ldr	r3, [r7, #8]
9000251e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
90002520:	4b06      	ldr	r3, [pc, #24]	; (9000253c <__NVIC_SetPriorityGrouping+0x44>)
90002522:	4313      	orrs	r3, r2
90002524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
90002526:	4a04      	ldr	r2, [pc, #16]	; (90002538 <__NVIC_SetPriorityGrouping+0x40>)
90002528:	68bb      	ldr	r3, [r7, #8]
9000252a:	60d3      	str	r3, [r2, #12]
}
9000252c:	bf00      	nop
9000252e:	3714      	adds	r7, #20
90002530:	46bd      	mov	sp, r7
90002532:	f85d 7b04 	ldr.w	r7, [sp], #4
90002536:	4770      	bx	lr
90002538:	e000ed00 	.word	0xe000ed00
9000253c:	05fa0000 	.word	0x05fa0000

90002540 <__NVIC_GetPriorityGrouping>:
{
90002540:	b480      	push	{r7}
90002542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
90002544:	4b04      	ldr	r3, [pc, #16]	; (90002558 <__NVIC_GetPriorityGrouping+0x18>)
90002546:	68db      	ldr	r3, [r3, #12]
90002548:	0a1b      	lsrs	r3, r3, #8
9000254a:	f003 0307 	and.w	r3, r3, #7
}
9000254e:	4618      	mov	r0, r3
90002550:	46bd      	mov	sp, r7
90002552:	f85d 7b04 	ldr.w	r7, [sp], #4
90002556:	4770      	bx	lr
90002558:	e000ed00 	.word	0xe000ed00

9000255c <__NVIC_EnableIRQ>:
{
9000255c:	b480      	push	{r7}
9000255e:	b083      	sub	sp, #12
90002560:	af00      	add	r7, sp, #0
90002562:	4603      	mov	r3, r0
90002564:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
90002566:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
9000256a:	2b00      	cmp	r3, #0
9000256c:	db0b      	blt.n	90002586 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
9000256e:	88fb      	ldrh	r3, [r7, #6]
90002570:	f003 021f 	and.w	r2, r3, #31
90002574:	4907      	ldr	r1, [pc, #28]	; (90002594 <__NVIC_EnableIRQ+0x38>)
90002576:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
9000257a:	095b      	lsrs	r3, r3, #5
9000257c:	2001      	movs	r0, #1
9000257e:	fa00 f202 	lsl.w	r2, r0, r2
90002582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
90002586:	bf00      	nop
90002588:	370c      	adds	r7, #12
9000258a:	46bd      	mov	sp, r7
9000258c:	f85d 7b04 	ldr.w	r7, [sp], #4
90002590:	4770      	bx	lr
90002592:	bf00      	nop
90002594:	e000e100 	.word	0xe000e100

90002598 <__NVIC_SetPriority>:
{
90002598:	b480      	push	{r7}
9000259a:	b083      	sub	sp, #12
9000259c:	af00      	add	r7, sp, #0
9000259e:	4603      	mov	r3, r0
900025a0:	6039      	str	r1, [r7, #0]
900025a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
900025a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
900025a8:	2b00      	cmp	r3, #0
900025aa:	db0a      	blt.n	900025c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
900025ac:	683b      	ldr	r3, [r7, #0]
900025ae:	b2da      	uxtb	r2, r3
900025b0:	490c      	ldr	r1, [pc, #48]	; (900025e4 <__NVIC_SetPriority+0x4c>)
900025b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
900025b6:	0112      	lsls	r2, r2, #4
900025b8:	b2d2      	uxtb	r2, r2
900025ba:	440b      	add	r3, r1
900025bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
900025c0:	e00a      	b.n	900025d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
900025c2:	683b      	ldr	r3, [r7, #0]
900025c4:	b2da      	uxtb	r2, r3
900025c6:	4908      	ldr	r1, [pc, #32]	; (900025e8 <__NVIC_SetPriority+0x50>)
900025c8:	88fb      	ldrh	r3, [r7, #6]
900025ca:	f003 030f 	and.w	r3, r3, #15
900025ce:	3b04      	subs	r3, #4
900025d0:	0112      	lsls	r2, r2, #4
900025d2:	b2d2      	uxtb	r2, r2
900025d4:	440b      	add	r3, r1
900025d6:	761a      	strb	r2, [r3, #24]
}
900025d8:	bf00      	nop
900025da:	370c      	adds	r7, #12
900025dc:	46bd      	mov	sp, r7
900025de:	f85d 7b04 	ldr.w	r7, [sp], #4
900025e2:	4770      	bx	lr
900025e4:	e000e100 	.word	0xe000e100
900025e8:	e000ed00 	.word	0xe000ed00

900025ec <NVIC_EncodePriority>:
{
900025ec:	b480      	push	{r7}
900025ee:	b089      	sub	sp, #36	; 0x24
900025f0:	af00      	add	r7, sp, #0
900025f2:	60f8      	str	r0, [r7, #12]
900025f4:	60b9      	str	r1, [r7, #8]
900025f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
900025f8:	68fb      	ldr	r3, [r7, #12]
900025fa:	f003 0307 	and.w	r3, r3, #7
900025fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
90002600:	69fb      	ldr	r3, [r7, #28]
90002602:	f1c3 0307 	rsb	r3, r3, #7
90002606:	2b04      	cmp	r3, #4
90002608:	bf28      	it	cs
9000260a:	2304      	movcs	r3, #4
9000260c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
9000260e:	69fb      	ldr	r3, [r7, #28]
90002610:	3304      	adds	r3, #4
90002612:	2b06      	cmp	r3, #6
90002614:	d902      	bls.n	9000261c <NVIC_EncodePriority+0x30>
90002616:	69fb      	ldr	r3, [r7, #28]
90002618:	3b03      	subs	r3, #3
9000261a:	e000      	b.n	9000261e <NVIC_EncodePriority+0x32>
9000261c:	2300      	movs	r3, #0
9000261e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90002620:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
90002624:	69bb      	ldr	r3, [r7, #24]
90002626:	fa02 f303 	lsl.w	r3, r2, r3
9000262a:	43da      	mvns	r2, r3
9000262c:	68bb      	ldr	r3, [r7, #8]
9000262e:	401a      	ands	r2, r3
90002630:	697b      	ldr	r3, [r7, #20]
90002632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
90002634:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
90002638:	697b      	ldr	r3, [r7, #20]
9000263a:	fa01 f303 	lsl.w	r3, r1, r3
9000263e:	43d9      	mvns	r1, r3
90002640:	687b      	ldr	r3, [r7, #4]
90002642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90002644:	4313      	orrs	r3, r2
}
90002646:	4618      	mov	r0, r3
90002648:	3724      	adds	r7, #36	; 0x24
9000264a:	46bd      	mov	sp, r7
9000264c:	f85d 7b04 	ldr.w	r7, [sp], #4
90002650:	4770      	bx	lr

90002652 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
90002652:	b580      	push	{r7, lr}
90002654:	b082      	sub	sp, #8
90002656:	af00      	add	r7, sp, #0
90002658:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
9000265a:	6878      	ldr	r0, [r7, #4]
9000265c:	f7ff ff4c 	bl	900024f8 <__NVIC_SetPriorityGrouping>
}
90002660:	bf00      	nop
90002662:	3708      	adds	r7, #8
90002664:	46bd      	mov	sp, r7
90002666:	bd80      	pop	{r7, pc}

90002668 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
90002668:	b580      	push	{r7, lr}
9000266a:	b086      	sub	sp, #24
9000266c:	af00      	add	r7, sp, #0
9000266e:	4603      	mov	r3, r0
90002670:	60b9      	str	r1, [r7, #8]
90002672:	607a      	str	r2, [r7, #4]
90002674:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
90002676:	f7ff ff63 	bl	90002540 <__NVIC_GetPriorityGrouping>
9000267a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
9000267c:	687a      	ldr	r2, [r7, #4]
9000267e:	68b9      	ldr	r1, [r7, #8]
90002680:	6978      	ldr	r0, [r7, #20]
90002682:	f7ff ffb3 	bl	900025ec <NVIC_EncodePriority>
90002686:	4602      	mov	r2, r0
90002688:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
9000268c:	4611      	mov	r1, r2
9000268e:	4618      	mov	r0, r3
90002690:	f7ff ff82 	bl	90002598 <__NVIC_SetPriority>
}
90002694:	bf00      	nop
90002696:	3718      	adds	r7, #24
90002698:	46bd      	mov	sp, r7
9000269a:	bd80      	pop	{r7, pc}

9000269c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
9000269c:	b580      	push	{r7, lr}
9000269e:	b082      	sub	sp, #8
900026a0:	af00      	add	r7, sp, #0
900026a2:	4603      	mov	r3, r0
900026a4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
900026a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
900026aa:	4618      	mov	r0, r3
900026ac:	f7ff ff56 	bl	9000255c <__NVIC_EnableIRQ>
}
900026b0:	bf00      	nop
900026b2:	3708      	adds	r7, #8
900026b4:	46bd      	mov	sp, r7
900026b6:	bd80      	pop	{r7, pc}

900026b8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
900026b8:	b480      	push	{r7}
900026ba:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
900026bc:	f3bf 8f5f 	dmb	sy
}
900026c0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
900026c2:	4b07      	ldr	r3, [pc, #28]	; (900026e0 <HAL_MPU_Disable+0x28>)
900026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900026c6:	4a06      	ldr	r2, [pc, #24]	; (900026e0 <HAL_MPU_Disable+0x28>)
900026c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
900026cc:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
900026ce:	4b05      	ldr	r3, [pc, #20]	; (900026e4 <HAL_MPU_Disable+0x2c>)
900026d0:	2200      	movs	r2, #0
900026d2:	605a      	str	r2, [r3, #4]
}
900026d4:	bf00      	nop
900026d6:	46bd      	mov	sp, r7
900026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
900026dc:	4770      	bx	lr
900026de:	bf00      	nop
900026e0:	e000ed00 	.word	0xe000ed00
900026e4:	e000ed90 	.word	0xe000ed90

900026e8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
900026e8:	b480      	push	{r7}
900026ea:	b083      	sub	sp, #12
900026ec:	af00      	add	r7, sp, #0
900026ee:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
900026f0:	4a0b      	ldr	r2, [pc, #44]	; (90002720 <HAL_MPU_Enable+0x38>)
900026f2:	687b      	ldr	r3, [r7, #4]
900026f4:	f043 0301 	orr.w	r3, r3, #1
900026f8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
900026fa:	4b0a      	ldr	r3, [pc, #40]	; (90002724 <HAL_MPU_Enable+0x3c>)
900026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900026fe:	4a09      	ldr	r2, [pc, #36]	; (90002724 <HAL_MPU_Enable+0x3c>)
90002700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90002704:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
90002706:	f3bf 8f4f 	dsb	sy
}
9000270a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
9000270c:	f3bf 8f6f 	isb	sy
}
90002710:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
90002712:	bf00      	nop
90002714:	370c      	adds	r7, #12
90002716:	46bd      	mov	sp, r7
90002718:	f85d 7b04 	ldr.w	r7, [sp], #4
9000271c:	4770      	bx	lr
9000271e:	bf00      	nop
90002720:	e000ed90 	.word	0xe000ed90
90002724:	e000ed00 	.word	0xe000ed00

90002728 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
90002728:	b480      	push	{r7}
9000272a:	b083      	sub	sp, #12
9000272c:	af00      	add	r7, sp, #0
9000272e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
90002730:	687b      	ldr	r3, [r7, #4]
90002732:	785a      	ldrb	r2, [r3, #1]
90002734:	4b1d      	ldr	r3, [pc, #116]	; (900027ac <HAL_MPU_ConfigRegion+0x84>)
90002736:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
90002738:	687b      	ldr	r3, [r7, #4]
9000273a:	781b      	ldrb	r3, [r3, #0]
9000273c:	2b00      	cmp	r3, #0
9000273e:	d029      	beq.n	90002794 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
90002740:	4a1a      	ldr	r2, [pc, #104]	; (900027ac <HAL_MPU_ConfigRegion+0x84>)
90002742:	687b      	ldr	r3, [r7, #4]
90002744:	685b      	ldr	r3, [r3, #4]
90002746:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90002748:	687b      	ldr	r3, [r7, #4]
9000274a:	7b1b      	ldrb	r3, [r3, #12]
9000274c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
9000274e:	687b      	ldr	r3, [r7, #4]
90002750:	7adb      	ldrb	r3, [r3, #11]
90002752:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90002754:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
90002756:	687b      	ldr	r3, [r7, #4]
90002758:	7a9b      	ldrb	r3, [r3, #10]
9000275a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
9000275c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
9000275e:	687b      	ldr	r3, [r7, #4]
90002760:	7b5b      	ldrb	r3, [r3, #13]
90002762:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
90002764:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
90002766:	687b      	ldr	r3, [r7, #4]
90002768:	7b9b      	ldrb	r3, [r3, #14]
9000276a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
9000276c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
9000276e:	687b      	ldr	r3, [r7, #4]
90002770:	7bdb      	ldrb	r3, [r3, #15]
90002772:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
90002774:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
90002776:	687b      	ldr	r3, [r7, #4]
90002778:	7a5b      	ldrb	r3, [r3, #9]
9000277a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
9000277c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
9000277e:	687b      	ldr	r3, [r7, #4]
90002780:	7a1b      	ldrb	r3, [r3, #8]
90002782:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
90002784:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
90002786:	687a      	ldr	r2, [r7, #4]
90002788:	7812      	ldrb	r2, [r2, #0]
9000278a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
9000278c:	4a07      	ldr	r2, [pc, #28]	; (900027ac <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
9000278e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90002790:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
90002792:	e005      	b.n	900027a0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
90002794:	4b05      	ldr	r3, [pc, #20]	; (900027ac <HAL_MPU_ConfigRegion+0x84>)
90002796:	2200      	movs	r2, #0
90002798:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
9000279a:	4b04      	ldr	r3, [pc, #16]	; (900027ac <HAL_MPU_ConfigRegion+0x84>)
9000279c:	2200      	movs	r2, #0
9000279e:	611a      	str	r2, [r3, #16]
}
900027a0:	bf00      	nop
900027a2:	370c      	adds	r7, #12
900027a4:	46bd      	mov	sp, r7
900027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
900027aa:	4770      	bx	lr
900027ac:	e000ed90 	.word	0xe000ed90

900027b0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
900027b0:	b580      	push	{r7, lr}
900027b2:	b084      	sub	sp, #16
900027b4:	af00      	add	r7, sp, #0
900027b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
900027b8:	687b      	ldr	r3, [r7, #4]
900027ba:	2b00      	cmp	r3, #0
900027bc:	d101      	bne.n	900027c2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
900027be:	2301      	movs	r3, #1
900027c0:	e0cf      	b.n	90002962 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
900027c2:	687b      	ldr	r3, [r7, #4]
900027c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
900027c8:	2b00      	cmp	r3, #0
900027ca:	d106      	bne.n	900027da <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
900027cc:	687b      	ldr	r3, [r7, #4]
900027ce:	2223      	movs	r2, #35	; 0x23
900027d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
900027d4:	6878      	ldr	r0, [r7, #4]
900027d6:	f003 f859 	bl	9000588c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
900027da:	4b64      	ldr	r3, [pc, #400]	; (9000296c <HAL_ETH_Init+0x1bc>)
900027dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
900027e0:	4a62      	ldr	r2, [pc, #392]	; (9000296c <HAL_ETH_Init+0x1bc>)
900027e2:	f043 0302 	orr.w	r3, r3, #2
900027e6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
900027ea:	4b60      	ldr	r3, [pc, #384]	; (9000296c <HAL_ETH_Init+0x1bc>)
900027ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
900027f0:	f003 0302 	and.w	r3, r3, #2
900027f4:	60bb      	str	r3, [r7, #8]
900027f6:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
900027f8:	687b      	ldr	r3, [r7, #4]
900027fa:	7a1b      	ldrb	r3, [r3, #8]
900027fc:	2b00      	cmp	r3, #0
900027fe:	d103      	bne.n	90002808 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
90002800:	2000      	movs	r0, #0
90002802:	f7ff fe65 	bl	900024d0 <HAL_SYSCFG_ETHInterfaceSelect>
90002806:	e003      	b.n	90002810 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
90002808:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
9000280c:	f7ff fe60 	bl	900024d0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
90002810:	4b57      	ldr	r3, [pc, #348]	; (90002970 <HAL_ETH_Init+0x1c0>)
90002812:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
90002814:	687b      	ldr	r3, [r7, #4]
90002816:	681b      	ldr	r3, [r3, #0]
90002818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
9000281c:	681b      	ldr	r3, [r3, #0]
9000281e:	687a      	ldr	r2, [r7, #4]
90002820:	6812      	ldr	r2, [r2, #0]
90002822:	f043 0301 	orr.w	r3, r3, #1
90002826:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
9000282a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
9000282c:	f7ff fe44 	bl	900024b8 <HAL_GetTick>
90002830:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
90002832:	e011      	b.n	90002858 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
90002834:	f7ff fe40 	bl	900024b8 <HAL_GetTick>
90002838:	4602      	mov	r2, r0
9000283a:	68fb      	ldr	r3, [r7, #12]
9000283c:	1ad3      	subs	r3, r2, r3
9000283e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
90002842:	d909      	bls.n	90002858 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
90002844:	687b      	ldr	r3, [r7, #4]
90002846:	2204      	movs	r2, #4
90002848:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
9000284c:	687b      	ldr	r3, [r7, #4]
9000284e:	22e0      	movs	r2, #224	; 0xe0
90002850:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
90002854:	2301      	movs	r3, #1
90002856:	e084      	b.n	90002962 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
90002858:	687b      	ldr	r3, [r7, #4]
9000285a:	681b      	ldr	r3, [r3, #0]
9000285c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90002860:	681b      	ldr	r3, [r3, #0]
90002862:	f003 0301 	and.w	r3, r3, #1
90002866:	2b00      	cmp	r3, #0
90002868:	d1e4      	bne.n	90002834 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
9000286a:	6878      	ldr	r0, [r7, #4]
9000286c:	f000 ff8a 	bl	90003784 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
90002870:	f002 f8c0 	bl	900049f4 <HAL_RCC_GetHCLKFreq>
90002874:	4603      	mov	r3, r0
90002876:	4a3f      	ldr	r2, [pc, #252]	; (90002974 <HAL_ETH_Init+0x1c4>)
90002878:	fba2 2303 	umull	r2, r3, r2, r3
9000287c:	0c9a      	lsrs	r2, r3, #18
9000287e:	687b      	ldr	r3, [r7, #4]
90002880:	681b      	ldr	r3, [r3, #0]
90002882:	3a01      	subs	r2, #1
90002884:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
90002888:	6878      	ldr	r0, [r7, #4]
9000288a:	f001 f983 	bl	90003b94 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
9000288e:	687b      	ldr	r3, [r7, #4]
90002890:	681b      	ldr	r3, [r3, #0]
90002892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90002896:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
9000289a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
9000289e:	687a      	ldr	r2, [r7, #4]
900028a0:	6812      	ldr	r2, [r2, #0]
900028a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
900028a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
900028aa:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
900028ae:	687b      	ldr	r3, [r7, #4]
900028b0:	695b      	ldr	r3, [r3, #20]
900028b2:	f003 0303 	and.w	r3, r3, #3
900028b6:	2b00      	cmp	r3, #0
900028b8:	d009      	beq.n	900028ce <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
900028ba:	687b      	ldr	r3, [r7, #4]
900028bc:	2201      	movs	r2, #1
900028be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
900028c2:	687b      	ldr	r3, [r7, #4]
900028c4:	22e0      	movs	r2, #224	; 0xe0
900028c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
900028ca:	2301      	movs	r3, #1
900028cc:	e049      	b.n	90002962 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
900028ce:	687b      	ldr	r3, [r7, #4]
900028d0:	681b      	ldr	r3, [r3, #0]
900028d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
900028d6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
900028da:	4b27      	ldr	r3, [pc, #156]	; (90002978 <HAL_ETH_Init+0x1c8>)
900028dc:	4013      	ands	r3, r2
900028de:	687a      	ldr	r2, [r7, #4]
900028e0:	6952      	ldr	r2, [r2, #20]
900028e2:	0051      	lsls	r1, r2, #1
900028e4:	687a      	ldr	r2, [r7, #4]
900028e6:	6812      	ldr	r2, [r2, #0]
900028e8:	430b      	orrs	r3, r1
900028ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
900028ee:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
900028f2:	6878      	ldr	r0, [r7, #4]
900028f4:	f001 f9eb 	bl	90003cce <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
900028f8:	6878      	ldr	r0, [r7, #4]
900028fa:	f001 fa31 	bl	90003d60 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
900028fe:	687b      	ldr	r3, [r7, #4]
90002900:	685b      	ldr	r3, [r3, #4]
90002902:	3305      	adds	r3, #5
90002904:	781b      	ldrb	r3, [r3, #0]
90002906:	021a      	lsls	r2, r3, #8
90002908:	687b      	ldr	r3, [r7, #4]
9000290a:	685b      	ldr	r3, [r3, #4]
9000290c:	3304      	adds	r3, #4
9000290e:	781b      	ldrb	r3, [r3, #0]
90002910:	4619      	mov	r1, r3
90002912:	687b      	ldr	r3, [r7, #4]
90002914:	681b      	ldr	r3, [r3, #0]
90002916:	430a      	orrs	r2, r1
90002918:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
9000291c:	687b      	ldr	r3, [r7, #4]
9000291e:	685b      	ldr	r3, [r3, #4]
90002920:	3303      	adds	r3, #3
90002922:	781b      	ldrb	r3, [r3, #0]
90002924:	061a      	lsls	r2, r3, #24
90002926:	687b      	ldr	r3, [r7, #4]
90002928:	685b      	ldr	r3, [r3, #4]
9000292a:	3302      	adds	r3, #2
9000292c:	781b      	ldrb	r3, [r3, #0]
9000292e:	041b      	lsls	r3, r3, #16
90002930:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
90002932:	687b      	ldr	r3, [r7, #4]
90002934:	685b      	ldr	r3, [r3, #4]
90002936:	3301      	adds	r3, #1
90002938:	781b      	ldrb	r3, [r3, #0]
9000293a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
9000293c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
9000293e:	687b      	ldr	r3, [r7, #4]
90002940:	685b      	ldr	r3, [r3, #4]
90002942:	781b      	ldrb	r3, [r3, #0]
90002944:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
90002946:	687b      	ldr	r3, [r7, #4]
90002948:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
9000294a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
9000294c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
90002950:	687b      	ldr	r3, [r7, #4]
90002952:	2200      	movs	r2, #0
90002954:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
90002958:	687b      	ldr	r3, [r7, #4]
9000295a:	2210      	movs	r2, #16
9000295c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
90002960:	2300      	movs	r3, #0
}
90002962:	4618      	mov	r0, r3
90002964:	3710      	adds	r7, #16
90002966:	46bd      	mov	sp, r7
90002968:	bd80      	pop	{r7, pc}
9000296a:	bf00      	nop
9000296c:	58024400 	.word	0x58024400
90002970:	58000400 	.word	0x58000400
90002974:	431bde83 	.word	0x431bde83
90002978:	ffff8001 	.word	0xffff8001

9000297c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
9000297c:	b580      	push	{r7, lr}
9000297e:	b082      	sub	sp, #8
90002980:	af00      	add	r7, sp, #0
90002982:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
90002984:	687b      	ldr	r3, [r7, #4]
90002986:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000298a:	2b10      	cmp	r3, #16
9000298c:	d153      	bne.n	90002a36 <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
9000298e:	687b      	ldr	r3, [r7, #4]
90002990:	2223      	movs	r2, #35	; 0x23
90002992:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
90002996:	687b      	ldr	r3, [r7, #4]
90002998:	2204      	movs	r2, #4
9000299a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
9000299c:	6878      	ldr	r0, [r7, #4]
9000299e:	f000 fa64 	bl	90002e6a <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
900029a2:	687b      	ldr	r3, [r7, #4]
900029a4:	681b      	ldr	r3, [r3, #0]
900029a6:	681a      	ldr	r2, [r3, #0]
900029a8:	687b      	ldr	r3, [r7, #4]
900029aa:	681b      	ldr	r3, [r3, #0]
900029ac:	f042 0202 	orr.w	r2, r2, #2
900029b0:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
900029b2:	687b      	ldr	r3, [r7, #4]
900029b4:	681b      	ldr	r3, [r3, #0]
900029b6:	681a      	ldr	r2, [r3, #0]
900029b8:	687b      	ldr	r3, [r7, #4]
900029ba:	681b      	ldr	r3, [r3, #0]
900029bc:	f042 0201 	orr.w	r2, r2, #1
900029c0:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
900029c2:	687b      	ldr	r3, [r7, #4]
900029c4:	681b      	ldr	r3, [r3, #0]
900029c6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
900029ca:	687b      	ldr	r3, [r7, #4]
900029cc:	681b      	ldr	r3, [r3, #0]
900029ce:	f042 0201 	orr.w	r2, r2, #1
900029d2:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
900029d6:	687b      	ldr	r3, [r7, #4]
900029d8:	681b      	ldr	r3, [r3, #0]
900029da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
900029de:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
900029e2:	687a      	ldr	r2, [r7, #4]
900029e4:	6812      	ldr	r2, [r2, #0]
900029e6:	f043 0301 	orr.w	r3, r3, #1
900029ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
900029ee:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
900029f2:	687b      	ldr	r3, [r7, #4]
900029f4:	681b      	ldr	r3, [r3, #0]
900029f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
900029fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
900029fe:	687a      	ldr	r2, [r7, #4]
90002a00:	6812      	ldr	r2, [r2, #0]
90002a02:	f043 0301 	orr.w	r3, r3, #1
90002a06:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
90002a0a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
90002a0e:	687b      	ldr	r3, [r7, #4]
90002a10:	681b      	ldr	r3, [r3, #0]
90002a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90002a16:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
90002a1a:	687a      	ldr	r2, [r7, #4]
90002a1c:	6812      	ldr	r2, [r2, #0]
90002a1e:	f443 7381 	orr.w	r3, r3, #258	; 0x102
90002a22:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
90002a26:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
90002a2a:	687b      	ldr	r3, [r7, #4]
90002a2c:	2223      	movs	r2, #35	; 0x23
90002a2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
90002a32:	2300      	movs	r3, #0
90002a34:	e000      	b.n	90002a38 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
90002a36:	2301      	movs	r3, #1
  }
}
90002a38:	4618      	mov	r0, r3
90002a3a:	3708      	adds	r7, #8
90002a3c:	46bd      	mov	sp, r7
90002a3e:	bd80      	pop	{r7, pc}

90002a40 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
90002a40:	b580      	push	{r7, lr}
90002a42:	b082      	sub	sp, #8
90002a44:	af00      	add	r7, sp, #0
90002a46:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
90002a48:	687b      	ldr	r3, [r7, #4]
90002a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90002a4e:	2b10      	cmp	r3, #16
90002a50:	d179      	bne.n	90002b46 <HAL_ETH_Start_IT+0x106>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
90002a52:	687b      	ldr	r3, [r7, #4]
90002a54:	2223      	movs	r2, #35	; 0x23
90002a56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
90002a5a:	687b      	ldr	r3, [r7, #4]
90002a5c:	2201      	movs	r2, #1
90002a5e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
90002a60:	687b      	ldr	r3, [r7, #4]
90002a62:	681b      	ldr	r3, [r3, #0]
90002a64:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
90002a68:	687b      	ldr	r3, [r7, #4]
90002a6a:	681a      	ldr	r2, [r3, #0]
90002a6c:	4b38      	ldr	r3, [pc, #224]	; (90002b50 <HAL_ETH_Start_IT+0x110>)
90002a6e:	430b      	orrs	r3, r1
90002a70:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
            ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
90002a74:	687b      	ldr	r3, [r7, #4]
90002a76:	681b      	ldr	r3, [r3, #0]
90002a78:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
90002a7c:	687b      	ldr	r3, [r7, #4]
90002a7e:	681a      	ldr	r2, [r3, #0]
90002a80:	4b34      	ldr	r3, [pc, #208]	; (90002b54 <HAL_ETH_Start_IT+0x114>)
90002a82:	430b      	orrs	r3, r1
90002a84:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
            ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
90002a88:	687b      	ldr	r3, [r7, #4]
90002a8a:	2204      	movs	r2, #4
90002a8c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
90002a8e:	6878      	ldr	r0, [r7, #4]
90002a90:	f000 f9eb 	bl	90002e6a <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
90002a94:	687b      	ldr	r3, [r7, #4]
90002a96:	681b      	ldr	r3, [r3, #0]
90002a98:	681a      	ldr	r2, [r3, #0]
90002a9a:	687b      	ldr	r3, [r7, #4]
90002a9c:	681b      	ldr	r3, [r3, #0]
90002a9e:	f042 0202 	orr.w	r2, r2, #2
90002aa2:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
90002aa4:	687b      	ldr	r3, [r7, #4]
90002aa6:	681b      	ldr	r3, [r3, #0]
90002aa8:	681a      	ldr	r2, [r3, #0]
90002aaa:	687b      	ldr	r3, [r7, #4]
90002aac:	681b      	ldr	r3, [r3, #0]
90002aae:	f042 0201 	orr.w	r2, r2, #1
90002ab2:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
90002ab4:	687b      	ldr	r3, [r7, #4]
90002ab6:	681b      	ldr	r3, [r3, #0]
90002ab8:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
90002abc:	687b      	ldr	r3, [r7, #4]
90002abe:	681b      	ldr	r3, [r3, #0]
90002ac0:	f042 0201 	orr.w	r2, r2, #1
90002ac4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
90002ac8:	687b      	ldr	r3, [r7, #4]
90002aca:	681b      	ldr	r3, [r3, #0]
90002acc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90002ad0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
90002ad4:	687a      	ldr	r2, [r7, #4]
90002ad6:	6812      	ldr	r2, [r2, #0]
90002ad8:	f043 0301 	orr.w	r3, r3, #1
90002adc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
90002ae0:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
90002ae4:	687b      	ldr	r3, [r7, #4]
90002ae6:	681b      	ldr	r3, [r3, #0]
90002ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90002aec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
90002af0:	687a      	ldr	r2, [r7, #4]
90002af2:	6812      	ldr	r2, [r2, #0]
90002af4:	f043 0301 	orr.w	r3, r3, #1
90002af8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
90002afc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
90002b00:	687b      	ldr	r3, [r7, #4]
90002b02:	681b      	ldr	r3, [r3, #0]
90002b04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90002b08:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
90002b0c:	687a      	ldr	r2, [r7, #4]
90002b0e:	6812      	ldr	r2, [r2, #0]
90002b10:	f443 7381 	orr.w	r3, r3, #258	; 0x102
90002b14:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
90002b18:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
90002b1c:	687b      	ldr	r3, [r7, #4]
90002b1e:	681b      	ldr	r3, [r3, #0]
90002b20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90002b24:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
90002b28:	687b      	ldr	r3, [r7, #4]
90002b2a:	681a      	ldr	r2, [r3, #0]
90002b2c:	f24d 03c1 	movw	r3, #53441	; 0xd0c1
90002b30:	430b      	orrs	r3, r1
90002b32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
90002b36:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
90002b3a:	687b      	ldr	r3, [r7, #4]
90002b3c:	2223      	movs	r2, #35	; 0x23
90002b3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
90002b42:	2300      	movs	r3, #0
90002b44:	e000      	b.n	90002b48 <HAL_ETH_Start_IT+0x108>
  }
  else
  {
    return HAL_ERROR;
90002b46:	2301      	movs	r3, #1
  }
}
90002b48:	4618      	mov	r0, r3
90002b4a:	3708      	adds	r7, #8
90002b4c:	46bd      	mov	sp, r7
90002b4e:	bd80      	pop	{r7, pc}
90002b50:	0c020060 	.word	0x0c020060
90002b54:	0c20c000 	.word	0x0c20c000

90002b58 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
90002b58:	b480      	push	{r7}
90002b5a:	b085      	sub	sp, #20
90002b5c:	af00      	add	r7, sp, #0
90002b5e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
90002b60:	687b      	ldr	r3, [r7, #4]
90002b62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90002b66:	2b23      	cmp	r3, #35	; 0x23
90002b68:	d165      	bne.n	90002c36 <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
90002b6a:	687b      	ldr	r3, [r7, #4]
90002b6c:	2223      	movs	r2, #35	; 0x23
90002b6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
90002b72:	687b      	ldr	r3, [r7, #4]
90002b74:	681b      	ldr	r3, [r3, #0]
90002b76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90002b7a:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
90002b7e:	687b      	ldr	r3, [r7, #4]
90002b80:	681a      	ldr	r2, [r3, #0]
90002b82:	4b30      	ldr	r3, [pc, #192]	; (90002c44 <HAL_ETH_Stop_IT+0xec>)
90002b84:	400b      	ands	r3, r1
90002b86:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
90002b8a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
90002b8e:	687b      	ldr	r3, [r7, #4]
90002b90:	681b      	ldr	r3, [r3, #0]
90002b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90002b96:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
90002b9a:	687a      	ldr	r2, [r7, #4]
90002b9c:	6812      	ldr	r2, [r2, #0]
90002b9e:	f023 0301 	bic.w	r3, r3, #1
90002ba2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
90002ba6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
90002baa:	687b      	ldr	r3, [r7, #4]
90002bac:	681b      	ldr	r3, [r3, #0]
90002bae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90002bb2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
90002bb6:	687a      	ldr	r2, [r7, #4]
90002bb8:	6812      	ldr	r2, [r2, #0]
90002bba:	f023 0301 	bic.w	r3, r3, #1
90002bbe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
90002bc2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
90002bc6:	687b      	ldr	r3, [r7, #4]
90002bc8:	681b      	ldr	r3, [r3, #0]
90002bca:	681a      	ldr	r2, [r3, #0]
90002bcc:	687b      	ldr	r3, [r7, #4]
90002bce:	681b      	ldr	r3, [r3, #0]
90002bd0:	f022 0201 	bic.w	r2, r2, #1
90002bd4:	601a      	str	r2, [r3, #0]
    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
90002bd6:	687b      	ldr	r3, [r7, #4]
90002bd8:	681b      	ldr	r3, [r3, #0]
90002bda:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
90002bde:	687b      	ldr	r3, [r7, #4]
90002be0:	681b      	ldr	r3, [r3, #0]
90002be2:	f042 0201 	orr.w	r2, r2, #1
90002be6:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
90002bea:	687b      	ldr	r3, [r7, #4]
90002bec:	681b      	ldr	r3, [r3, #0]
90002bee:	681a      	ldr	r2, [r3, #0]
90002bf0:	687b      	ldr	r3, [r7, #4]
90002bf2:	681b      	ldr	r3, [r3, #0]
90002bf4:	f022 0202 	bic.w	r2, r2, #2
90002bf8:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
90002bfa:	2300      	movs	r3, #0
90002bfc:	60fb      	str	r3, [r7, #12]
90002bfe:	e00e      	b.n	90002c1e <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
90002c00:	687b      	ldr	r3, [r7, #4]
90002c02:	68fa      	ldr	r2, [r7, #12]
90002c04:	3212      	adds	r2, #18
90002c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90002c0a:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
90002c0c:	68bb      	ldr	r3, [r7, #8]
90002c0e:	68db      	ldr	r3, [r3, #12]
90002c10:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
90002c14:	68bb      	ldr	r3, [r7, #8]
90002c16:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
90002c18:	68fb      	ldr	r3, [r7, #12]
90002c1a:	3301      	adds	r3, #1
90002c1c:	60fb      	str	r3, [r7, #12]
90002c1e:	68fb      	ldr	r3, [r7, #12]
90002c20:	2b03      	cmp	r3, #3
90002c22:	d9ed      	bls.n	90002c00 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
90002c24:	687b      	ldr	r3, [r7, #4]
90002c26:	2200      	movs	r2, #0
90002c28:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
90002c2a:	687b      	ldr	r3, [r7, #4]
90002c2c:	2210      	movs	r2, #16
90002c2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
90002c32:	2300      	movs	r3, #0
90002c34:	e000      	b.n	90002c38 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
90002c36:	2301      	movs	r3, #1
  }
}
90002c38:	4618      	mov	r0, r3
90002c3a:	3714      	adds	r7, #20
90002c3c:	46bd      	mov	sp, r7
90002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
90002c42:	4770      	bx	lr
90002c44:	ffff2f3e 	.word	0xffff2f3e

90002c48 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
90002c48:	b580      	push	{r7, lr}
90002c4a:	b082      	sub	sp, #8
90002c4c:	af00      	add	r7, sp, #0
90002c4e:	6078      	str	r0, [r7, #4]
90002c50:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
90002c52:	683b      	ldr	r3, [r7, #0]
90002c54:	2b00      	cmp	r3, #0
90002c56:	d109      	bne.n	90002c6c <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
90002c58:	687b      	ldr	r3, [r7, #4]
90002c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90002c5e:	f043 0201 	orr.w	r2, r3, #1
90002c62:	687b      	ldr	r3, [r7, #4]
90002c64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
90002c68:	2301      	movs	r3, #1
90002c6a:	e03a      	b.n	90002ce2 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
90002c6c:	687b      	ldr	r3, [r7, #4]
90002c6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90002c72:	2b23      	cmp	r3, #35	; 0x23
90002c74:	d134      	bne.n	90002ce0 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
90002c76:	683b      	ldr	r3, [r7, #0]
90002c78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90002c7a:	687b      	ldr	r3, [r7, #4]
90002c7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
90002c7e:	2201      	movs	r2, #1
90002c80:	6839      	ldr	r1, [r7, #0]
90002c82:	6878      	ldr	r0, [r7, #4]
90002c84:	f001 f8ca 	bl	90003e1c <ETH_Prepare_Tx_Descriptors>
90002c88:	4603      	mov	r3, r0
90002c8a:	2b00      	cmp	r3, #0
90002c8c:	d009      	beq.n	90002ca2 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
90002c8e:	687b      	ldr	r3, [r7, #4]
90002c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90002c94:	f043 0202 	orr.w	r2, r3, #2
90002c98:	687b      	ldr	r3, [r7, #4]
90002c9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
90002c9e:	2301      	movs	r3, #1
90002ca0:	e01f      	b.n	90002ce2 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
90002ca2:	f3bf 8f4f 	dsb	sy
}
90002ca6:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
90002ca8:	687b      	ldr	r3, [r7, #4]
90002caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90002cac:	1c5a      	adds	r2, r3, #1
90002cae:	687b      	ldr	r3, [r7, #4]
90002cb0:	629a      	str	r2, [r3, #40]	; 0x28
90002cb2:	687b      	ldr	r3, [r7, #4]
90002cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90002cb6:	2b03      	cmp	r3, #3
90002cb8:	d904      	bls.n	90002cc4 <HAL_ETH_Transmit_IT+0x7c>
90002cba:	687b      	ldr	r3, [r7, #4]
90002cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90002cbe:	1f1a      	subs	r2, r3, #4
90002cc0:	687b      	ldr	r3, [r7, #4]
90002cc2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
90002cc4:	687b      	ldr	r3, [r7, #4]
90002cc6:	6a99      	ldr	r1, [r3, #40]	; 0x28
90002cc8:	687b      	ldr	r3, [r7, #4]
90002cca:	681a      	ldr	r2, [r3, #0]
90002ccc:	687b      	ldr	r3, [r7, #4]
90002cce:	3106      	adds	r1, #6
90002cd0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
90002cd4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
90002cd8:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    return HAL_OK;
90002cdc:	2300      	movs	r3, #0
90002cde:	e000      	b.n	90002ce2 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
90002ce0:	2301      	movs	r3, #1
  }
}
90002ce2:	4618      	mov	r0, r3
90002ce4:	3708      	adds	r7, #8
90002ce6:	46bd      	mov	sp, r7
90002ce8:	bd80      	pop	{r7, pc}

90002cea <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
90002cea:	b580      	push	{r7, lr}
90002cec:	b088      	sub	sp, #32
90002cee:	af00      	add	r7, sp, #0
90002cf0:	6078      	str	r0, [r7, #4]
90002cf2:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
90002cf4:	2300      	movs	r3, #0
90002cf6:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
90002cf8:	2300      	movs	r3, #0
90002cfa:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
90002cfc:	683b      	ldr	r3, [r7, #0]
90002cfe:	2b00      	cmp	r3, #0
90002d00:	d109      	bne.n	90002d16 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
90002d02:	687b      	ldr	r3, [r7, #4]
90002d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90002d08:	f043 0201 	orr.w	r2, r3, #1
90002d0c:	687b      	ldr	r3, [r7, #4]
90002d0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
90002d12:	2301      	movs	r3, #1
90002d14:	e0a5      	b.n	90002e62 <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
90002d16:	687b      	ldr	r3, [r7, #4]
90002d18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90002d1c:	2b23      	cmp	r3, #35	; 0x23
90002d1e:	d001      	beq.n	90002d24 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
90002d20:	2301      	movs	r3, #1
90002d22:	e09e      	b.n	90002e62 <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
90002d24:	687b      	ldr	r3, [r7, #4]
90002d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90002d28:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
90002d2a:	687b      	ldr	r3, [r7, #4]
90002d2c:	69fa      	ldr	r2, [r7, #28]
90002d2e:	3212      	adds	r2, #18
90002d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90002d34:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
90002d36:	687b      	ldr	r3, [r7, #4]
90002d38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90002d3a:	f1c3 0304 	rsb	r3, r3, #4
90002d3e:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
90002d40:	e067      	b.n	90002e12 <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
90002d42:	69bb      	ldr	r3, [r7, #24]
90002d44:	68db      	ldr	r3, [r3, #12]
90002d46:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
90002d4a:	2b00      	cmp	r3, #0
90002d4c:	d007      	beq.n	90002d5e <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
90002d4e:	69bb      	ldr	r3, [r7, #24]
90002d50:	685a      	ldr	r2, [r3, #4]
90002d52:	687b      	ldr	r3, [r7, #4]
90002d54:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
90002d56:	69bb      	ldr	r3, [r7, #24]
90002d58:	681a      	ldr	r2, [r3, #0]
90002d5a:	687b      	ldr	r3, [r7, #4]
90002d5c:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
90002d5e:	69bb      	ldr	r3, [r7, #24]
90002d60:	68db      	ldr	r3, [r3, #12]
90002d62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
90002d66:	2b00      	cmp	r3, #0
90002d68:	d103      	bne.n	90002d72 <HAL_ETH_ReadData+0x88>
90002d6a:	687b      	ldr	r3, [r7, #4]
90002d6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90002d6e:	2b00      	cmp	r3, #0
90002d70:	d03d      	beq.n	90002dee <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
90002d72:	69bb      	ldr	r3, [r7, #24]
90002d74:	68db      	ldr	r3, [r3, #12]
90002d76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
90002d7a:	2b00      	cmp	r3, #0
90002d7c:	d005      	beq.n	90002d8a <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
90002d7e:	687b      	ldr	r3, [r7, #4]
90002d80:	2200      	movs	r2, #0
90002d82:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
90002d84:	687b      	ldr	r3, [r7, #4]
90002d86:	2200      	movs	r2, #0
90002d88:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
90002d8a:	687b      	ldr	r3, [r7, #4]
90002d8c:	695b      	ldr	r3, [r3, #20]
90002d8e:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
90002d90:	69bb      	ldr	r3, [r7, #24]
90002d92:	68db      	ldr	r3, [r3, #12]
90002d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
90002d98:	2b00      	cmp	r3, #0
90002d9a:	d00d      	beq.n	90002db8 <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
90002d9c:	69bb      	ldr	r3, [r7, #24]
90002d9e:	68db      	ldr	r3, [r3, #12]
90002da0:	f3c3 020e 	ubfx	r2, r3, #0, #15
90002da4:	687b      	ldr	r3, [r7, #4]
90002da6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
90002da8:	1ad3      	subs	r3, r2, r3
90002daa:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
90002dac:	69bb      	ldr	r3, [r7, #24]
90002dae:	68da      	ldr	r2, [r3, #12]
90002db0:	687b      	ldr	r3, [r7, #4]
90002db2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
90002db4:	2301      	movs	r3, #1
90002db6:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
90002db8:	687b      	ldr	r3, [r7, #4]
90002dba:	f103 007c 	add.w	r0, r3, #124	; 0x7c
90002dbe:	687b      	ldr	r3, [r7, #4]
90002dc0:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
90002dc4:	69bb      	ldr	r3, [r7, #24]
90002dc6:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
90002dc8:	461a      	mov	r2, r3
90002dca:	693b      	ldr	r3, [r7, #16]
90002dcc:	b29b      	uxth	r3, r3
90002dce:	f002 ff1d 	bl	90005c0c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
90002dd2:	687b      	ldr	r3, [r7, #4]
90002dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
90002dd6:	1c5a      	adds	r2, r3, #1
90002dd8:	687b      	ldr	r3, [r7, #4]
90002dda:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
90002ddc:	687b      	ldr	r3, [r7, #4]
90002dde:	6e5a      	ldr	r2, [r3, #100]	; 0x64
90002de0:	693b      	ldr	r3, [r7, #16]
90002de2:	441a      	add	r2, r3
90002de4:	687b      	ldr	r3, [r7, #4]
90002de6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
90002de8:	69bb      	ldr	r3, [r7, #24]
90002dea:	2200      	movs	r2, #0
90002dec:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
90002dee:	69fb      	ldr	r3, [r7, #28]
90002df0:	3301      	adds	r3, #1
90002df2:	61fb      	str	r3, [r7, #28]
90002df4:	69fb      	ldr	r3, [r7, #28]
90002df6:	2b03      	cmp	r3, #3
90002df8:	d902      	bls.n	90002e00 <HAL_ETH_ReadData+0x116>
90002dfa:	69fb      	ldr	r3, [r7, #28]
90002dfc:	3b04      	subs	r3, #4
90002dfe:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
90002e00:	687b      	ldr	r3, [r7, #4]
90002e02:	69fa      	ldr	r2, [r7, #28]
90002e04:	3212      	adds	r2, #18
90002e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90002e0a:	61bb      	str	r3, [r7, #24]
    desccnt++;
90002e0c:	697b      	ldr	r3, [r7, #20]
90002e0e:	3301      	adds	r3, #1
90002e10:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
90002e12:	69bb      	ldr	r3, [r7, #24]
90002e14:	68db      	ldr	r3, [r3, #12]
90002e16:	2b00      	cmp	r3, #0
90002e18:	db06      	blt.n	90002e28 <HAL_ETH_ReadData+0x13e>
90002e1a:	697a      	ldr	r2, [r7, #20]
90002e1c:	68bb      	ldr	r3, [r7, #8]
90002e1e:	429a      	cmp	r2, r3
90002e20:	d202      	bcs.n	90002e28 <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
90002e22:	7bfb      	ldrb	r3, [r7, #15]
90002e24:	2b00      	cmp	r3, #0
90002e26:	d08c      	beq.n	90002d42 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
90002e28:	687b      	ldr	r3, [r7, #4]
90002e2a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
90002e2c:	697b      	ldr	r3, [r7, #20]
90002e2e:	441a      	add	r2, r3
90002e30:	687b      	ldr	r3, [r7, #4]
90002e32:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
90002e34:	687b      	ldr	r3, [r7, #4]
90002e36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90002e38:	2b00      	cmp	r3, #0
90002e3a:	d002      	beq.n	90002e42 <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
90002e3c:	6878      	ldr	r0, [r7, #4]
90002e3e:	f000 f814 	bl	90002e6a <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
90002e42:	687b      	ldr	r3, [r7, #4]
90002e44:	69fa      	ldr	r2, [r7, #28]
90002e46:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
90002e48:	7bfb      	ldrb	r3, [r7, #15]
90002e4a:	2b01      	cmp	r3, #1
90002e4c:	d108      	bne.n	90002e60 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
90002e4e:	687b      	ldr	r3, [r7, #4]
90002e50:	6fda      	ldr	r2, [r3, #124]	; 0x7c
90002e52:	683b      	ldr	r3, [r7, #0]
90002e54:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
90002e56:	687b      	ldr	r3, [r7, #4]
90002e58:	2200      	movs	r2, #0
90002e5a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
90002e5c:	2300      	movs	r3, #0
90002e5e:	e000      	b.n	90002e62 <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
90002e60:	2301      	movs	r3, #1
}
90002e62:	4618      	mov	r0, r3
90002e64:	3720      	adds	r7, #32
90002e66:	46bd      	mov	sp, r7
90002e68:	bd80      	pop	{r7, pc}

90002e6a <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
90002e6a:	b580      	push	{r7, lr}
90002e6c:	b088      	sub	sp, #32
90002e6e:	af00      	add	r7, sp, #0
90002e70:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
90002e72:	2300      	movs	r3, #0
90002e74:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
90002e76:	2301      	movs	r3, #1
90002e78:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
90002e7a:	687b      	ldr	r3, [r7, #4]
90002e7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
90002e7e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
90002e80:	687b      	ldr	r3, [r7, #4]
90002e82:	69fa      	ldr	r2, [r7, #28]
90002e84:	3212      	adds	r2, #18
90002e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90002e8a:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
90002e8c:	687b      	ldr	r3, [r7, #4]
90002e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90002e90:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
90002e92:	e03b      	b.n	90002f0c <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
90002e94:	697b      	ldr	r3, [r7, #20]
90002e96:	691b      	ldr	r3, [r3, #16]
90002e98:	2b00      	cmp	r3, #0
90002e9a:	d112      	bne.n	90002ec2 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
90002e9c:	f107 030c 	add.w	r3, r7, #12
90002ea0:	4618      	mov	r0, r3
90002ea2:	f002 fe83 	bl	90005bac <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
90002ea6:	68fb      	ldr	r3, [r7, #12]
90002ea8:	2b00      	cmp	r3, #0
90002eaa:	d102      	bne.n	90002eb2 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
90002eac:	2300      	movs	r3, #0
90002eae:	74fb      	strb	r3, [r7, #19]
90002eb0:	e007      	b.n	90002ec2 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
90002eb2:	68fb      	ldr	r3, [r7, #12]
90002eb4:	461a      	mov	r2, r3
90002eb6:	697b      	ldr	r3, [r7, #20]
90002eb8:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
90002eba:	68fb      	ldr	r3, [r7, #12]
90002ebc:	461a      	mov	r2, r3
90002ebe:	697b      	ldr	r3, [r7, #20]
90002ec0:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
90002ec2:	7cfb      	ldrb	r3, [r7, #19]
90002ec4:	2b00      	cmp	r3, #0
90002ec6:	d021      	beq.n	90002f0c <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
90002ec8:	f3bf 8f5f 	dmb	sy
}
90002ecc:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
90002ece:	687b      	ldr	r3, [r7, #4]
90002ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90002ed2:	2b00      	cmp	r3, #0
90002ed4:	d004      	beq.n	90002ee0 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
90002ed6:	697b      	ldr	r3, [r7, #20]
90002ed8:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
90002edc:	60da      	str	r2, [r3, #12]
90002ede:	e003      	b.n	90002ee8 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
90002ee0:	697b      	ldr	r3, [r7, #20]
90002ee2:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
90002ee6:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
90002ee8:	69fb      	ldr	r3, [r7, #28]
90002eea:	3301      	adds	r3, #1
90002eec:	61fb      	str	r3, [r7, #28]
90002eee:	69fb      	ldr	r3, [r7, #28]
90002ef0:	2b03      	cmp	r3, #3
90002ef2:	d902      	bls.n	90002efa <ETH_UpdateDescriptor+0x90>
90002ef4:	69fb      	ldr	r3, [r7, #28]
90002ef6:	3b04      	subs	r3, #4
90002ef8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
90002efa:	687b      	ldr	r3, [r7, #4]
90002efc:	69fa      	ldr	r2, [r7, #28]
90002efe:	3212      	adds	r2, #18
90002f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90002f04:	617b      	str	r3, [r7, #20]
      desccount--;
90002f06:	69bb      	ldr	r3, [r7, #24]
90002f08:	3b01      	subs	r3, #1
90002f0a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
90002f0c:	69bb      	ldr	r3, [r7, #24]
90002f0e:	2b00      	cmp	r3, #0
90002f10:	d002      	beq.n	90002f18 <ETH_UpdateDescriptor+0xae>
90002f12:	7cfb      	ldrb	r3, [r7, #19]
90002f14:	2b00      	cmp	r3, #0
90002f16:	d1bd      	bne.n	90002e94 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
90002f18:	687b      	ldr	r3, [r7, #4]
90002f1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90002f1c:	69ba      	ldr	r2, [r7, #24]
90002f1e:	429a      	cmp	r2, r3
90002f20:	d00d      	beq.n	90002f3e <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
90002f22:	687b      	ldr	r3, [r7, #4]
90002f24:	681b      	ldr	r3, [r3, #0]
90002f26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90002f2a:	461a      	mov	r2, r3
90002f2c:	2300      	movs	r3, #0
90002f2e:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
90002f32:	687b      	ldr	r3, [r7, #4]
90002f34:	69fa      	ldr	r2, [r7, #28]
90002f36:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
90002f38:	687b      	ldr	r3, [r7, #4]
90002f3a:	69ba      	ldr	r2, [r7, #24]
90002f3c:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
90002f3e:	bf00      	nop
90002f40:	3720      	adds	r7, #32
90002f42:	46bd      	mov	sp, r7
90002f44:	bd80      	pop	{r7, pc}

90002f46 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
90002f46:	b580      	push	{r7, lr}
90002f48:	b086      	sub	sp, #24
90002f4a:	af00      	add	r7, sp, #0
90002f4c:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
90002f4e:	687b      	ldr	r3, [r7, #4]
90002f50:	3318      	adds	r3, #24
90002f52:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
90002f54:	68bb      	ldr	r3, [r7, #8]
90002f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90002f58:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
90002f5a:	68bb      	ldr	r3, [r7, #8]
90002f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90002f5e:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
90002f60:	2301      	movs	r3, #1
90002f62:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
90002f64:	e03f      	b.n	90002fe6 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
90002f66:	2301      	movs	r3, #1
90002f68:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
90002f6a:	697b      	ldr	r3, [r7, #20]
90002f6c:	3b01      	subs	r3, #1
90002f6e:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
90002f70:	68ba      	ldr	r2, [r7, #8]
90002f72:	693b      	ldr	r3, [r7, #16]
90002f74:	3304      	adds	r3, #4
90002f76:	009b      	lsls	r3, r3, #2
90002f78:	4413      	add	r3, r2
90002f7a:	685b      	ldr	r3, [r3, #4]
90002f7c:	2b00      	cmp	r3, #0
90002f7e:	d106      	bne.n	90002f8e <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
90002f80:	693b      	ldr	r3, [r7, #16]
90002f82:	3301      	adds	r3, #1
90002f84:	f003 0303 	and.w	r3, r3, #3
90002f88:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
90002f8a:	2300      	movs	r3, #0
90002f8c:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
90002f8e:	7bbb      	ldrb	r3, [r7, #14]
90002f90:	2b00      	cmp	r3, #0
90002f92:	d028      	beq.n	90002fe6 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
90002f94:	687b      	ldr	r3, [r7, #4]
90002f96:	68d9      	ldr	r1, [r3, #12]
90002f98:	693a      	ldr	r2, [r7, #16]
90002f9a:	4613      	mov	r3, r2
90002f9c:	005b      	lsls	r3, r3, #1
90002f9e:	4413      	add	r3, r2
90002fa0:	00db      	lsls	r3, r3, #3
90002fa2:	440b      	add	r3, r1
90002fa4:	68db      	ldr	r3, [r3, #12]
90002fa6:	2b00      	cmp	r3, #0
90002fa8:	db1b      	blt.n	90002fe2 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
90002faa:	68ba      	ldr	r2, [r7, #8]
90002fac:	693b      	ldr	r3, [r7, #16]
90002fae:	3304      	adds	r3, #4
90002fb0:	009b      	lsls	r3, r3, #2
90002fb2:	4413      	add	r3, r2
90002fb4:	685b      	ldr	r3, [r3, #4]
90002fb6:	4618      	mov	r0, r3
90002fb8:	f002 fe90 	bl	90005cdc <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
90002fbc:	68ba      	ldr	r2, [r7, #8]
90002fbe:	693b      	ldr	r3, [r7, #16]
90002fc0:	3304      	adds	r3, #4
90002fc2:	009b      	lsls	r3, r3, #2
90002fc4:	4413      	add	r3, r2
90002fc6:	2200      	movs	r2, #0
90002fc8:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
90002fca:	693b      	ldr	r3, [r7, #16]
90002fcc:	3301      	adds	r3, #1
90002fce:	f003 0303 	and.w	r3, r3, #3
90002fd2:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
90002fd4:	68bb      	ldr	r3, [r7, #8]
90002fd6:	697a      	ldr	r2, [r7, #20]
90002fd8:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
90002fda:	68bb      	ldr	r3, [r7, #8]
90002fdc:	693a      	ldr	r2, [r7, #16]
90002fde:	62da      	str	r2, [r3, #44]	; 0x2c
90002fe0:	e001      	b.n	90002fe6 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
90002fe2:	2300      	movs	r3, #0
90002fe4:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
90002fe6:	697b      	ldr	r3, [r7, #20]
90002fe8:	2b00      	cmp	r3, #0
90002fea:	d002      	beq.n	90002ff2 <HAL_ETH_ReleaseTxPacket+0xac>
90002fec:	7bfb      	ldrb	r3, [r7, #15]
90002fee:	2b00      	cmp	r3, #0
90002ff0:	d1b9      	bne.n	90002f66 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
90002ff2:	2300      	movs	r3, #0
}
90002ff4:	4618      	mov	r0, r3
90002ff6:	3718      	adds	r7, #24
90002ff8:	46bd      	mov	sp, r7
90002ffa:	bd80      	pop	{r7, pc}

90002ffc <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
90002ffc:	b580      	push	{r7, lr}
90002ffe:	b084      	sub	sp, #16
90003000:	af00      	add	r7, sp, #0
90003002:	6078      	str	r0, [r7, #4]
  uint32_t macirqenable;
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
90003004:	687b      	ldr	r3, [r7, #4]
90003006:	681b      	ldr	r3, [r3, #0]
90003008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
9000300c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
90003010:	f003 0340 	and.w	r3, r3, #64	; 0x40
90003014:	2b40      	cmp	r3, #64	; 0x40
90003016:	d115      	bne.n	90003044 <HAL_ETH_IRQHandler+0x48>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
90003018:	687b      	ldr	r3, [r7, #4]
9000301a:	681b      	ldr	r3, [r3, #0]
9000301c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90003020:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
90003024:	f003 0340 	and.w	r3, r3, #64	; 0x40
90003028:	2b40      	cmp	r3, #64	; 0x40
9000302a:	d10b      	bne.n	90003044 <HAL_ETH_IRQHandler+0x48>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
9000302c:	687b      	ldr	r3, [r7, #4]
9000302e:	681b      	ldr	r3, [r3, #0]
90003030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90003034:	461a      	mov	r2, r3
90003036:	f248 0340 	movw	r3, #32832	; 0x8040
9000303a:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
9000303e:	6878      	ldr	r0, [r7, #4]
90003040:	f002 f98a 	bl	90005358 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
90003044:	687b      	ldr	r3, [r7, #4]
90003046:	681b      	ldr	r3, [r3, #0]
90003048:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
9000304c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
90003050:	f003 0301 	and.w	r3, r3, #1
90003054:	2b01      	cmp	r3, #1
90003056:	d115      	bne.n	90003084 <HAL_ETH_IRQHandler+0x88>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
90003058:	687b      	ldr	r3, [r7, #4]
9000305a:	681b      	ldr	r3, [r3, #0]
9000305c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90003060:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
90003064:	f003 0301 	and.w	r3, r3, #1
90003068:	2b01      	cmp	r3, #1
9000306a:	d10b      	bne.n	90003084 <HAL_ETH_IRQHandler+0x88>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
9000306c:	687b      	ldr	r3, [r7, #4]
9000306e:	681b      	ldr	r3, [r3, #0]
90003070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90003074:	461a      	mov	r2, r3
90003076:	f248 0301 	movw	r3, #32769	; 0x8001
9000307a:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
9000307e:	6878      	ldr	r0, [r7, #4]
90003080:	f002 f97a 	bl	90005378 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
90003084:	687b      	ldr	r3, [r7, #4]
90003086:	681b      	ldr	r3, [r3, #0]
90003088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
9000308c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
90003090:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
90003094:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
90003098:	d153      	bne.n	90003142 <HAL_ETH_IRQHandler+0x146>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
9000309a:	687b      	ldr	r3, [r7, #4]
9000309c:	681b      	ldr	r3, [r3, #0]
9000309e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
900030a2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
900030a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
900030aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
900030ae:	d148      	bne.n	90003142 <HAL_ETH_IRQHandler+0x146>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
900030b0:	687b      	ldr	r3, [r7, #4]
900030b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
900030b6:	f043 0208 	orr.w	r2, r3, #8
900030ba:	687b      	ldr	r3, [r7, #4]
900030bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
900030c0:	687b      	ldr	r3, [r7, #4]
900030c2:	681b      	ldr	r3, [r3, #0]
900030c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
900030c8:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
900030cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
900030d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
900030d4:	d11e      	bne.n	90003114 <HAL_ETH_IRQHandler+0x118>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
900030d6:	687b      	ldr	r3, [r7, #4]
900030d8:	681b      	ldr	r3, [r3, #0]
900030da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
900030de:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
900030e2:	f241 1302 	movw	r3, #4354	; 0x1102
900030e6:	4013      	ands	r3, r2
900030e8:	687a      	ldr	r2, [r7, #4]
900030ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
900030ee:	687b      	ldr	r3, [r7, #4]
900030f0:	681b      	ldr	r3, [r3, #0]
900030f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
900030f6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
900030fa:	687a      	ldr	r2, [r7, #4]
900030fc:	6812      	ldr	r2, [r2, #0]
900030fe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
90003102:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
90003106:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
9000310a:	687b      	ldr	r3, [r7, #4]
9000310c:	22e0      	movs	r2, #224	; 0xe0
9000310e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
90003112:	e013      	b.n	9000313c <HAL_ETH_IRQHandler+0x140>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
90003114:	687b      	ldr	r3, [r7, #4]
90003116:	681b      	ldr	r3, [r3, #0]
90003118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
9000311c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
90003120:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
90003124:	687b      	ldr	r3, [r7, #4]
90003126:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                                               ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
9000312a:	687b      	ldr	r3, [r7, #4]
9000312c:	681b      	ldr	r3, [r3, #0]
9000312e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90003132:	461a      	mov	r2, r3
90003134:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
90003138:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
9000313c:	6878      	ldr	r0, [r7, #4]
9000313e:	f002 f92b 	bl	90005398 <HAL_ETH_ErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  macirqenable = heth->Instance->MACIER;
90003142:	687b      	ldr	r3, [r7, #4]
90003144:	681b      	ldr	r3, [r3, #0]
90003146:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
9000314a:	60fb      	str	r3, [r7, #12]
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
9000314c:	68fb      	ldr	r3, [r7, #12]
9000314e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
90003152:	2b00      	cmp	r3, #0
90003154:	d104      	bne.n	90003160 <HAL_ETH_IRQHandler+0x164>
      ((macirqenable & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
90003156:	68fb      	ldr	r3, [r7, #12]
90003158:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
9000315c:	2b00      	cmp	r3, #0
9000315e:	d019      	beq.n	90003194 <HAL_ETH_IRQHandler+0x198>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
90003160:	687b      	ldr	r3, [r7, #4]
90003162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90003166:	f043 0210 	orr.w	r2, r3, #16
9000316a:	687b      	ldr	r3, [r7, #4]
9000316c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
90003170:	687b      	ldr	r3, [r7, #4]
90003172:	681b      	ldr	r3, [r3, #0]
90003174:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
90003178:	687b      	ldr	r3, [r7, #4]
9000317a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
9000317e:	687b      	ldr	r3, [r7, #4]
90003180:	22e0      	movs	r2, #224	; 0xe0
90003182:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
90003186:	6878      	ldr	r0, [r7, #4]
90003188:	f002 f906 	bl	90005398 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
9000318c:	687b      	ldr	r3, [r7, #4]
9000318e:	2200      	movs	r2, #0
90003190:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }

  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
90003194:	687b      	ldr	r3, [r7, #4]
90003196:	681b      	ldr	r3, [r3, #0]
90003198:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
9000319c:	f003 0310 	and.w	r3, r3, #16
900031a0:	2b10      	cmp	r3, #16
900031a2:	d10f      	bne.n	900031c4 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
900031a4:	687b      	ldr	r3, [r7, #4]
900031a6:	681b      	ldr	r3, [r3, #0]
900031a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
900031ac:	f003 0260 	and.w	r2, r3, #96	; 0x60
900031b0:	687b      	ldr	r3, [r7, #4]
900031b2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
900031b6:	6878      	ldr	r0, [r7, #4]
900031b8:	f000 f830 	bl	9000321c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
900031bc:	687b      	ldr	r3, [r7, #4]
900031be:	2200      	movs	r2, #0
900031c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  /* ETH EEE IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
900031c4:	687b      	ldr	r3, [r7, #4]
900031c6:	681b      	ldr	r3, [r3, #0]
900031c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
900031cc:	f003 0320 	and.w	r3, r3, #32
900031d0:	2b20      	cmp	r3, #32
900031d2:	d10f      	bne.n	900031f4 <HAL_ETH_IRQHandler+0x1f8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
900031d4:	687b      	ldr	r3, [r7, #4]
900031d6:	681b      	ldr	r3, [r3, #0]
900031d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
900031dc:	f003 020f 	and.w	r2, r3, #15
900031e0:	687b      	ldr	r3, [r7, #4]
900031e2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
900031e6:	6878      	ldr	r0, [r7, #4]
900031e8:	f000 f822 	bl	90003230 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
900031ec:	687b      	ldr	r3, [r7, #4]
900031ee:	2200      	movs	r2, #0
900031f0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* USE_HAL_ETH_REGISTER_CALLBACKS */
  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
900031f4:	4b08      	ldr	r3, [pc, #32]	; (90003218 <HAL_ETH_IRQHandler+0x21c>)
900031f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900031f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
900031fc:	2b00      	cmp	r3, #0
900031fe:	d006      	beq.n	9000320e <HAL_ETH_IRQHandler+0x212>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
90003200:	4b05      	ldr	r3, [pc, #20]	; (90003218 <HAL_ETH_IRQHandler+0x21c>)
90003202:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
90003206:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
90003208:	6878      	ldr	r0, [r7, #4]
9000320a:	f000 f81b 	bl	90003244 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
}
9000320e:	bf00      	nop
90003210:	3710      	adds	r7, #16
90003212:	46bd      	mov	sp, r7
90003214:	bd80      	pop	{r7, pc}
90003216:	bf00      	nop
90003218:	58000080 	.word	0x58000080

9000321c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
9000321c:	b480      	push	{r7}
9000321e:	b083      	sub	sp, #12
90003220:	af00      	add	r7, sp, #0
90003222:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
90003224:	bf00      	nop
90003226:	370c      	adds	r7, #12
90003228:	46bd      	mov	sp, r7
9000322a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000322e:	4770      	bx	lr

90003230 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
90003230:	b480      	push	{r7}
90003232:	b083      	sub	sp, #12
90003234:	af00      	add	r7, sp, #0
90003236:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
90003238:	bf00      	nop
9000323a:	370c      	adds	r7, #12
9000323c:	46bd      	mov	sp, r7
9000323e:	f85d 7b04 	ldr.w	r7, [sp], #4
90003242:	4770      	bx	lr

90003244 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
90003244:	b480      	push	{r7}
90003246:	b083      	sub	sp, #12
90003248:	af00      	add	r7, sp, #0
9000324a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
9000324c:	bf00      	nop
9000324e:	370c      	adds	r7, #12
90003250:	46bd      	mov	sp, r7
90003252:	f85d 7b04 	ldr.w	r7, [sp], #4
90003256:	4770      	bx	lr

90003258 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
90003258:	b580      	push	{r7, lr}
9000325a:	b086      	sub	sp, #24
9000325c:	af00      	add	r7, sp, #0
9000325e:	60f8      	str	r0, [r7, #12]
90003260:	60b9      	str	r1, [r7, #8]
90003262:	607a      	str	r2, [r7, #4]
90003264:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
90003266:	68fb      	ldr	r3, [r7, #12]
90003268:	681b      	ldr	r3, [r3, #0]
9000326a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
9000326e:	f003 0301 	and.w	r3, r3, #1
90003272:	2b00      	cmp	r3, #0
90003274:	d001      	beq.n	9000327a <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
90003276:	2301      	movs	r3, #1
90003278:	e03e      	b.n	900032f8 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
9000327a:	68fb      	ldr	r3, [r7, #12]
9000327c:	681b      	ldr	r3, [r3, #0]
9000327e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
90003282:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
90003284:	697b      	ldr	r3, [r7, #20]
90003286:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
9000328a:	68bb      	ldr	r3, [r7, #8]
9000328c:	055b      	lsls	r3, r3, #21
9000328e:	4313      	orrs	r3, r2
90003290:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
90003292:	697b      	ldr	r3, [r7, #20]
90003294:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
90003298:	687b      	ldr	r3, [r7, #4]
9000329a:	041b      	lsls	r3, r3, #16
9000329c:	4313      	orrs	r3, r2
9000329e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
900032a0:	697b      	ldr	r3, [r7, #20]
900032a2:	f043 030c 	orr.w	r3, r3, #12
900032a6:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
900032a8:	697b      	ldr	r3, [r7, #20]
900032aa:	f043 0301 	orr.w	r3, r3, #1
900032ae:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
900032b0:	68fb      	ldr	r3, [r7, #12]
900032b2:	681b      	ldr	r3, [r3, #0]
900032b4:	697a      	ldr	r2, [r7, #20]
900032b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
900032ba:	f7ff f8fd 	bl	900024b8 <HAL_GetTick>
900032be:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
900032c0:	e009      	b.n	900032d6 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
900032c2:	f7ff f8f9 	bl	900024b8 <HAL_GetTick>
900032c6:	4602      	mov	r2, r0
900032c8:	693b      	ldr	r3, [r7, #16]
900032ca:	1ad3      	subs	r3, r2, r3
900032cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
900032d0:	d901      	bls.n	900032d6 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
900032d2:	2301      	movs	r3, #1
900032d4:	e010      	b.n	900032f8 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
900032d6:	68fb      	ldr	r3, [r7, #12]
900032d8:	681b      	ldr	r3, [r3, #0]
900032da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
900032de:	f003 0301 	and.w	r3, r3, #1
900032e2:	2b00      	cmp	r3, #0
900032e4:	d1ed      	bne.n	900032c2 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
900032e6:	68fb      	ldr	r3, [r7, #12]
900032e8:	681b      	ldr	r3, [r3, #0]
900032ea:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
900032ee:	b29b      	uxth	r3, r3
900032f0:	461a      	mov	r2, r3
900032f2:	683b      	ldr	r3, [r7, #0]
900032f4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
900032f6:	2300      	movs	r3, #0
}
900032f8:	4618      	mov	r0, r3
900032fa:	3718      	adds	r7, #24
900032fc:	46bd      	mov	sp, r7
900032fe:	bd80      	pop	{r7, pc}

90003300 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
90003300:	b580      	push	{r7, lr}
90003302:	b086      	sub	sp, #24
90003304:	af00      	add	r7, sp, #0
90003306:	60f8      	str	r0, [r7, #12]
90003308:	60b9      	str	r1, [r7, #8]
9000330a:	607a      	str	r2, [r7, #4]
9000330c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
9000330e:	68fb      	ldr	r3, [r7, #12]
90003310:	681b      	ldr	r3, [r3, #0]
90003312:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
90003316:	f003 0301 	and.w	r3, r3, #1
9000331a:	2b00      	cmp	r3, #0
9000331c:	d001      	beq.n	90003322 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
9000331e:	2301      	movs	r3, #1
90003320:	e03c      	b.n	9000339c <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
90003322:	68fb      	ldr	r3, [r7, #12]
90003324:	681b      	ldr	r3, [r3, #0]
90003326:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
9000332a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
9000332c:	697b      	ldr	r3, [r7, #20]
9000332e:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
90003332:	68bb      	ldr	r3, [r7, #8]
90003334:	055b      	lsls	r3, r3, #21
90003336:	4313      	orrs	r3, r2
90003338:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
9000333a:	697b      	ldr	r3, [r7, #20]
9000333c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
90003340:	687b      	ldr	r3, [r7, #4]
90003342:	041b      	lsls	r3, r3, #16
90003344:	4313      	orrs	r3, r2
90003346:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
90003348:	697b      	ldr	r3, [r7, #20]
9000334a:	f023 030c 	bic.w	r3, r3, #12
9000334e:	f043 0304 	orr.w	r3, r3, #4
90003352:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
90003354:	697b      	ldr	r3, [r7, #20]
90003356:	f043 0301 	orr.w	r3, r3, #1
9000335a:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
9000335c:	683b      	ldr	r3, [r7, #0]
9000335e:	b29a      	uxth	r2, r3
90003360:	4b10      	ldr	r3, [pc, #64]	; (900033a4 <HAL_ETH_WritePHYRegister+0xa4>)
90003362:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
90003366:	4a0f      	ldr	r2, [pc, #60]	; (900033a4 <HAL_ETH_WritePHYRegister+0xa4>)
90003368:	697b      	ldr	r3, [r7, #20]
9000336a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
9000336e:	f7ff f8a3 	bl	900024b8 <HAL_GetTick>
90003372:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
90003374:	e009      	b.n	9000338a <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
90003376:	f7ff f89f 	bl	900024b8 <HAL_GetTick>
9000337a:	4602      	mov	r2, r0
9000337c:	693b      	ldr	r3, [r7, #16]
9000337e:	1ad3      	subs	r3, r2, r3
90003380:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
90003384:	d901      	bls.n	9000338a <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
90003386:	2301      	movs	r3, #1
90003388:	e008      	b.n	9000339c <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
9000338a:	68fb      	ldr	r3, [r7, #12]
9000338c:	681b      	ldr	r3, [r3, #0]
9000338e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
90003392:	f003 0301 	and.w	r3, r3, #1
90003396:	2b00      	cmp	r3, #0
90003398:	d1ed      	bne.n	90003376 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
9000339a:	2300      	movs	r3, #0
}
9000339c:	4618      	mov	r0, r3
9000339e:	3718      	adds	r7, #24
900033a0:	46bd      	mov	sp, r7
900033a2:	bd80      	pop	{r7, pc}
900033a4:	40028000 	.word	0x40028000

900033a8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
900033a8:	b480      	push	{r7}
900033aa:	b083      	sub	sp, #12
900033ac:	af00      	add	r7, sp, #0
900033ae:	6078      	str	r0, [r7, #4]
900033b0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
900033b2:	683b      	ldr	r3, [r7, #0]
900033b4:	2b00      	cmp	r3, #0
900033b6:	d101      	bne.n	900033bc <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
900033b8:	2301      	movs	r3, #1
900033ba:	e1c3      	b.n	90003744 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
900033bc:	687b      	ldr	r3, [r7, #4]
900033be:	681b      	ldr	r3, [r3, #0]
900033c0:	681b      	ldr	r3, [r3, #0]
900033c2:	f003 020c 	and.w	r2, r3, #12
900033c6:	683b      	ldr	r3, [r7, #0]
900033c8:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
900033ca:	687b      	ldr	r3, [r7, #4]
900033cc:	681b      	ldr	r3, [r3, #0]
900033ce:	681b      	ldr	r3, [r3, #0]
900033d0:	f003 0310 	and.w	r3, r3, #16
900033d4:	2b00      	cmp	r3, #0
900033d6:	bf14      	ite	ne
900033d8:	2301      	movne	r3, #1
900033da:	2300      	moveq	r3, #0
900033dc:	b2db      	uxtb	r3, r3
900033de:	461a      	mov	r2, r3
900033e0:	683b      	ldr	r3, [r7, #0]
900033e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
900033e6:	687b      	ldr	r3, [r7, #4]
900033e8:	681b      	ldr	r3, [r3, #0]
900033ea:	681b      	ldr	r3, [r3, #0]
900033ec:	f003 0260 	and.w	r2, r3, #96	; 0x60
900033f0:	683b      	ldr	r3, [r7, #0]
900033f2:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
900033f4:	687b      	ldr	r3, [r7, #4]
900033f6:	681b      	ldr	r3, [r3, #0]
900033f8:	681b      	ldr	r3, [r3, #0]
900033fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
900033fe:	2b00      	cmp	r3, #0
90003400:	bf0c      	ite	eq
90003402:	2301      	moveq	r3, #1
90003404:	2300      	movne	r3, #0
90003406:	b2db      	uxtb	r3, r3
90003408:	461a      	mov	r2, r3
9000340a:	683b      	ldr	r3, [r7, #0]
9000340c:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
90003410:	687b      	ldr	r3, [r7, #4]
90003412:	681b      	ldr	r3, [r3, #0]
90003414:	681b      	ldr	r3, [r3, #0]
90003416:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
9000341a:	2b00      	cmp	r3, #0
9000341c:	bf14      	ite	ne
9000341e:	2301      	movne	r3, #1
90003420:	2300      	moveq	r3, #0
90003422:	b2db      	uxtb	r3, r3
90003424:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
90003426:	683b      	ldr	r3, [r7, #0]
90003428:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
9000342a:	687b      	ldr	r3, [r7, #4]
9000342c:	681b      	ldr	r3, [r3, #0]
9000342e:	681b      	ldr	r3, [r3, #0]
90003430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
90003434:	2b00      	cmp	r3, #0
90003436:	bf0c      	ite	eq
90003438:	2301      	moveq	r3, #1
9000343a:	2300      	movne	r3, #0
9000343c:	b2db      	uxtb	r3, r3
9000343e:	461a      	mov	r2, r3
90003440:	683b      	ldr	r3, [r7, #0]
90003442:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
90003444:	687b      	ldr	r3, [r7, #4]
90003446:	681b      	ldr	r3, [r3, #0]
90003448:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
9000344a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
9000344e:	2b00      	cmp	r3, #0
90003450:	bf14      	ite	ne
90003452:	2301      	movne	r3, #1
90003454:	2300      	moveq	r3, #0
90003456:	b2db      	uxtb	r3, r3
90003458:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
9000345a:	683b      	ldr	r3, [r7, #0]
9000345c:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
9000345e:	687b      	ldr	r3, [r7, #4]
90003460:	681b      	ldr	r3, [r3, #0]
90003462:	681b      	ldr	r3, [r3, #0]
90003464:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
90003468:	2b00      	cmp	r3, #0
9000346a:	bf14      	ite	ne
9000346c:	2301      	movne	r3, #1
9000346e:	2300      	moveq	r3, #0
90003470:	b2db      	uxtb	r3, r3
90003472:	461a      	mov	r2, r3
90003474:	683b      	ldr	r3, [r7, #0]
90003476:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
90003478:	687b      	ldr	r3, [r7, #4]
9000347a:	681b      	ldr	r3, [r3, #0]
9000347c:	681b      	ldr	r3, [r3, #0]
9000347e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
90003482:	683b      	ldr	r3, [r7, #0]
90003484:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
90003486:	687b      	ldr	r3, [r7, #4]
90003488:	681b      	ldr	r3, [r3, #0]
9000348a:	681b      	ldr	r3, [r3, #0]
9000348c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
90003490:	683b      	ldr	r3, [r7, #0]
90003492:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
90003494:	687b      	ldr	r3, [r7, #4]
90003496:	681b      	ldr	r3, [r3, #0]
90003498:	681b      	ldr	r3, [r3, #0]
9000349a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
9000349e:	2b00      	cmp	r3, #0
900034a0:	bf14      	ite	ne
900034a2:	2301      	movne	r3, #1
900034a4:	2300      	moveq	r3, #0
900034a6:	b2db      	uxtb	r3, r3
900034a8:	461a      	mov	r2, r3
900034aa:	683b      	ldr	r3, [r7, #0]
900034ac:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
900034ae:	687b      	ldr	r3, [r7, #4]
900034b0:	681b      	ldr	r3, [r3, #0]
900034b2:	681b      	ldr	r3, [r3, #0]
900034b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
900034b8:	2b00      	cmp	r3, #0
900034ba:	bf0c      	ite	eq
900034bc:	2301      	moveq	r3, #1
900034be:	2300      	movne	r3, #0
900034c0:	b2db      	uxtb	r3, r3
900034c2:	461a      	mov	r2, r3
900034c4:	683b      	ldr	r3, [r7, #0]
900034c6:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
900034c8:	687b      	ldr	r3, [r7, #4]
900034ca:	681b      	ldr	r3, [r3, #0]
900034cc:	681b      	ldr	r3, [r3, #0]
900034ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
900034d2:	2b00      	cmp	r3, #0
900034d4:	bf0c      	ite	eq
900034d6:	2301      	moveq	r3, #1
900034d8:	2300      	movne	r3, #0
900034da:	b2db      	uxtb	r3, r3
900034dc:	461a      	mov	r2, r3
900034de:	683b      	ldr	r3, [r7, #0]
900034e0:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
900034e2:	687b      	ldr	r3, [r7, #4]
900034e4:	681b      	ldr	r3, [r3, #0]
900034e6:	681b      	ldr	r3, [r3, #0]
900034e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
900034ec:	2b00      	cmp	r3, #0
900034ee:	bf14      	ite	ne
900034f0:	2301      	movne	r3, #1
900034f2:	2300      	moveq	r3, #0
900034f4:	b2db      	uxtb	r3, r3
900034f6:	461a      	mov	r2, r3
900034f8:	683b      	ldr	r3, [r7, #0]
900034fa:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
900034fc:	687b      	ldr	r3, [r7, #4]
900034fe:	681b      	ldr	r3, [r3, #0]
90003500:	681b      	ldr	r3, [r3, #0]
90003502:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
90003506:	2b00      	cmp	r3, #0
90003508:	bf14      	ite	ne
9000350a:	2301      	movne	r3, #1
9000350c:	2300      	moveq	r3, #0
9000350e:	b2db      	uxtb	r3, r3
90003510:	461a      	mov	r2, r3
90003512:	683b      	ldr	r3, [r7, #0]
90003514:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
90003516:	687b      	ldr	r3, [r7, #4]
90003518:	681b      	ldr	r3, [r3, #0]
9000351a:	681b      	ldr	r3, [r3, #0]
9000351c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
90003520:	2b00      	cmp	r3, #0
90003522:	bf14      	ite	ne
90003524:	2301      	movne	r3, #1
90003526:	2300      	moveq	r3, #0
90003528:	b2db      	uxtb	r3, r3
9000352a:	461a      	mov	r2, r3
9000352c:	683b      	ldr	r3, [r7, #0]
9000352e:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
90003530:	687b      	ldr	r3, [r7, #4]
90003532:	681b      	ldr	r3, [r3, #0]
90003534:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
90003536:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
9000353a:	2b00      	cmp	r3, #0
9000353c:	bf14      	ite	ne
9000353e:	2301      	movne	r3, #1
90003540:	2300      	moveq	r3, #0
90003542:	b2db      	uxtb	r3, r3
90003544:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
90003546:	683b      	ldr	r3, [r7, #0]
90003548:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
9000354a:	687b      	ldr	r3, [r7, #4]
9000354c:	681b      	ldr	r3, [r3, #0]
9000354e:	681b      	ldr	r3, [r3, #0]
90003550:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
90003554:	683b      	ldr	r3, [r7, #0]
90003556:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
90003558:	687b      	ldr	r3, [r7, #4]
9000355a:	681b      	ldr	r3, [r3, #0]
9000355c:	681b      	ldr	r3, [r3, #0]
9000355e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
90003562:	2b00      	cmp	r3, #0
90003564:	bf14      	ite	ne
90003566:	2301      	movne	r3, #1
90003568:	2300      	moveq	r3, #0
9000356a:	b2db      	uxtb	r3, r3
9000356c:	461a      	mov	r2, r3
9000356e:	683b      	ldr	r3, [r7, #0]
90003570:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
90003572:	687b      	ldr	r3, [r7, #4]
90003574:	681b      	ldr	r3, [r3, #0]
90003576:	681b      	ldr	r3, [r3, #0]
90003578:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
9000357c:	683b      	ldr	r3, [r7, #0]
9000357e:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
90003580:	687b      	ldr	r3, [r7, #4]
90003582:	681b      	ldr	r3, [r3, #0]
90003584:	685b      	ldr	r3, [r3, #4]
90003586:	f3c3 020d 	ubfx	r2, r3, #0, #14
9000358a:	683b      	ldr	r3, [r7, #0]
9000358c:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
9000358e:	687b      	ldr	r3, [r7, #4]
90003590:	681b      	ldr	r3, [r3, #0]
90003592:	685b      	ldr	r3, [r3, #4]
90003594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
90003598:	2b00      	cmp	r3, #0
9000359a:	bf0c      	ite	eq
9000359c:	2301      	moveq	r3, #1
9000359e:	2300      	movne	r3, #0
900035a0:	b2db      	uxtb	r3, r3
900035a2:	461a      	mov	r2, r3
900035a4:	683b      	ldr	r3, [r7, #0]
900035a6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
900035aa:	687b      	ldr	r3, [r7, #4]
900035ac:	681b      	ldr	r3, [r3, #0]
900035ae:	685b      	ldr	r3, [r3, #4]
900035b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
900035b4:	2b00      	cmp	r3, #0
900035b6:	bf14      	ite	ne
900035b8:	2301      	movne	r3, #1
900035ba:	2300      	moveq	r3, #0
900035bc:	b2db      	uxtb	r3, r3
900035be:	461a      	mov	r2, r3
900035c0:	683b      	ldr	r3, [r7, #0]
900035c2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
900035c6:	687b      	ldr	r3, [r7, #4]
900035c8:	681b      	ldr	r3, [r3, #0]
900035ca:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
900035cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
900035d0:	2b00      	cmp	r3, #0
900035d2:	bf14      	ite	ne
900035d4:	2301      	movne	r3, #1
900035d6:	2300      	moveq	r3, #0
900035d8:	b2db      	uxtb	r3, r3
900035da:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
900035dc:	683b      	ldr	r3, [r7, #0]
900035de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
900035e2:	687b      	ldr	r3, [r7, #4]
900035e4:	681b      	ldr	r3, [r3, #0]
900035e6:	685b      	ldr	r3, [r3, #4]
900035e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
900035ec:	2b00      	cmp	r3, #0
900035ee:	bf14      	ite	ne
900035f0:	2301      	movne	r3, #1
900035f2:	2300      	moveq	r3, #0
900035f4:	b2db      	uxtb	r3, r3
900035f6:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
900035f8:	683b      	ldr	r3, [r7, #0]
900035fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
900035fe:	687b      	ldr	r3, [r7, #4]
90003600:	681b      	ldr	r3, [r3, #0]
90003602:	685b      	ldr	r3, [r3, #4]
90003604:	0e5b      	lsrs	r3, r3, #25
90003606:	f003 021f 	and.w	r2, r3, #31
9000360a:	683b      	ldr	r3, [r7, #0]
9000360c:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
9000360e:	687b      	ldr	r3, [r7, #4]
90003610:	681b      	ldr	r3, [r3, #0]
90003612:	68db      	ldr	r3, [r3, #12]
90003614:	f403 7380 	and.w	r3, r3, #256	; 0x100
90003618:	2b00      	cmp	r3, #0
9000361a:	bf14      	ite	ne
9000361c:	2301      	movne	r3, #1
9000361e:	2300      	moveq	r3, #0
90003620:	b2db      	uxtb	r3, r3
90003622:	461a      	mov	r2, r3
90003624:	683b      	ldr	r3, [r7, #0]
90003626:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
9000362a:	687b      	ldr	r3, [r7, #4]
9000362c:	681b      	ldr	r3, [r3, #0]
9000362e:	68db      	ldr	r3, [r3, #12]
90003630:	f003 020f 	and.w	r2, r3, #15
90003634:	683b      	ldr	r3, [r7, #0]
90003636:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
90003638:	687b      	ldr	r3, [r7, #4]
9000363a:	681b      	ldr	r3, [r3, #0]
9000363c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000363e:	f003 0302 	and.w	r3, r3, #2
90003642:	2b00      	cmp	r3, #0
90003644:	bf14      	ite	ne
90003646:	2301      	movne	r3, #1
90003648:	2300      	moveq	r3, #0
9000364a:	b2db      	uxtb	r3, r3
9000364c:	461a      	mov	r2, r3
9000364e:	683b      	ldr	r3, [r7, #0]
90003650:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
90003654:	687b      	ldr	r3, [r7, #4]
90003656:	681b      	ldr	r3, [r3, #0]
90003658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000365a:	f003 0380 	and.w	r3, r3, #128	; 0x80
9000365e:	2b00      	cmp	r3, #0
90003660:	bf0c      	ite	eq
90003662:	2301      	moveq	r3, #1
90003664:	2300      	movne	r3, #0
90003666:	b2db      	uxtb	r3, r3
90003668:	461a      	mov	r2, r3
9000366a:	683b      	ldr	r3, [r7, #0]
9000366c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
90003670:	687b      	ldr	r3, [r7, #4]
90003672:	681b      	ldr	r3, [r3, #0]
90003674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90003676:	f003 0270 	and.w	r2, r3, #112	; 0x70
9000367a:	683b      	ldr	r3, [r7, #0]
9000367c:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
9000367e:	687b      	ldr	r3, [r7, #4]
90003680:	681b      	ldr	r3, [r3, #0]
90003682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90003684:	0c1b      	lsrs	r3, r3, #16
90003686:	b29a      	uxth	r2, r3
90003688:	683b      	ldr	r3, [r7, #0]
9000368a:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
9000368c:	687b      	ldr	r3, [r7, #4]
9000368e:	681b      	ldr	r3, [r3, #0]
90003690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90003694:	f003 0301 	and.w	r3, r3, #1
90003698:	2b00      	cmp	r3, #0
9000369a:	bf14      	ite	ne
9000369c:	2301      	movne	r3, #1
9000369e:	2300      	moveq	r3, #0
900036a0:	b2db      	uxtb	r3, r3
900036a2:	461a      	mov	r2, r3
900036a4:	683b      	ldr	r3, [r7, #0]
900036a6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
900036aa:	687b      	ldr	r3, [r7, #4]
900036ac:	681b      	ldr	r3, [r3, #0]
900036ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
900036b2:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
900036b6:	2b00      	cmp	r3, #0
900036b8:	bf14      	ite	ne
900036ba:	2301      	movne	r3, #1
900036bc:	2300      	moveq	r3, #0
900036be:	b2db      	uxtb	r3, r3
900036c0:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
900036c2:	683b      	ldr	r3, [r7, #0]
900036c4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
900036c8:	687b      	ldr	r3, [r7, #4]
900036ca:	681b      	ldr	r3, [r3, #0]
900036cc:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
900036d0:	f003 0272 	and.w	r2, r3, #114	; 0x72
900036d4:	683b      	ldr	r3, [r7, #0]
900036d6:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
900036d8:	687b      	ldr	r3, [r7, #4]
900036da:	681b      	ldr	r3, [r3, #0]
900036dc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
900036e0:	f003 0223 	and.w	r2, r3, #35	; 0x23
900036e4:	683b      	ldr	r3, [r7, #0]
900036e6:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
900036e8:	687b      	ldr	r3, [r7, #4]
900036ea:	681b      	ldr	r3, [r3, #0]
900036ec:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
900036f0:	f003 0308 	and.w	r3, r3, #8
900036f4:	2b00      	cmp	r3, #0
900036f6:	bf14      	ite	ne
900036f8:	2301      	movne	r3, #1
900036fa:	2300      	moveq	r3, #0
900036fc:	b2db      	uxtb	r3, r3
900036fe:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
90003700:	683b      	ldr	r3, [r7, #0]
90003702:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
90003706:	687b      	ldr	r3, [r7, #4]
90003708:	681b      	ldr	r3, [r3, #0]
9000370a:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
9000370e:	f003 0310 	and.w	r3, r3, #16
90003712:	2b00      	cmp	r3, #0
90003714:	bf14      	ite	ne
90003716:	2301      	movne	r3, #1
90003718:	2300      	moveq	r3, #0
9000371a:	b2db      	uxtb	r3, r3
9000371c:	461a      	mov	r2, r3
9000371e:	683b      	ldr	r3, [r7, #0]
90003720:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
90003724:	687b      	ldr	r3, [r7, #4]
90003726:	681b      	ldr	r3, [r3, #0]
90003728:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
9000372c:	f003 0340 	and.w	r3, r3, #64	; 0x40
90003730:	2b00      	cmp	r3, #0
90003732:	bf0c      	ite	eq
90003734:	2301      	moveq	r3, #1
90003736:	2300      	movne	r3, #0
90003738:	b2db      	uxtb	r3, r3
9000373a:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
9000373c:	683b      	ldr	r3, [r7, #0]
9000373e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
90003742:	2300      	movs	r3, #0
}
90003744:	4618      	mov	r0, r3
90003746:	370c      	adds	r7, #12
90003748:	46bd      	mov	sp, r7
9000374a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000374e:	4770      	bx	lr

90003750 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
90003750:	b580      	push	{r7, lr}
90003752:	b082      	sub	sp, #8
90003754:	af00      	add	r7, sp, #0
90003756:	6078      	str	r0, [r7, #4]
90003758:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
9000375a:	683b      	ldr	r3, [r7, #0]
9000375c:	2b00      	cmp	r3, #0
9000375e:	d101      	bne.n	90003764 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
90003760:	2301      	movs	r3, #1
90003762:	e00b      	b.n	9000377c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
90003764:	687b      	ldr	r3, [r7, #4]
90003766:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000376a:	2b10      	cmp	r3, #16
9000376c:	d105      	bne.n	9000377a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
9000376e:	6839      	ldr	r1, [r7, #0]
90003770:	6878      	ldr	r0, [r7, #4]
90003772:	f000 f86d 	bl	90003850 <ETH_SetMACConfig>

    return HAL_OK;
90003776:	2300      	movs	r3, #0
90003778:	e000      	b.n	9000377c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
9000377a:	2301      	movs	r3, #1
  }
}
9000377c:	4618      	mov	r0, r3
9000377e:	3708      	adds	r7, #8
90003780:	46bd      	mov	sp, r7
90003782:	bd80      	pop	{r7, pc}

90003784 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
90003784:	b580      	push	{r7, lr}
90003786:	b084      	sub	sp, #16
90003788:	af00      	add	r7, sp, #0
9000378a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
9000378c:	687b      	ldr	r3, [r7, #4]
9000378e:	681b      	ldr	r3, [r3, #0]
90003790:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
90003794:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
90003796:	68fb      	ldr	r3, [r7, #12]
90003798:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
9000379c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
9000379e:	f001 f929 	bl	900049f4 <HAL_RCC_GetHCLKFreq>
900037a2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
900037a4:	68bb      	ldr	r3, [r7, #8]
900037a6:	4a1e      	ldr	r2, [pc, #120]	; (90003820 <HAL_ETH_SetMDIOClockRange+0x9c>)
900037a8:	4293      	cmp	r3, r2
900037aa:	d908      	bls.n	900037be <HAL_ETH_SetMDIOClockRange+0x3a>
900037ac:	68bb      	ldr	r3, [r7, #8]
900037ae:	4a1d      	ldr	r2, [pc, #116]	; (90003824 <HAL_ETH_SetMDIOClockRange+0xa0>)
900037b0:	4293      	cmp	r3, r2
900037b2:	d804      	bhi.n	900037be <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
900037b4:	68fb      	ldr	r3, [r7, #12]
900037b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
900037ba:	60fb      	str	r3, [r7, #12]
900037bc:	e027      	b.n	9000380e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
900037be:	68bb      	ldr	r3, [r7, #8]
900037c0:	4a18      	ldr	r2, [pc, #96]	; (90003824 <HAL_ETH_SetMDIOClockRange+0xa0>)
900037c2:	4293      	cmp	r3, r2
900037c4:	d908      	bls.n	900037d8 <HAL_ETH_SetMDIOClockRange+0x54>
900037c6:	68bb      	ldr	r3, [r7, #8]
900037c8:	4a17      	ldr	r2, [pc, #92]	; (90003828 <HAL_ETH_SetMDIOClockRange+0xa4>)
900037ca:	4293      	cmp	r3, r2
900037cc:	d204      	bcs.n	900037d8 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
900037ce:	68fb      	ldr	r3, [r7, #12]
900037d0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
900037d4:	60fb      	str	r3, [r7, #12]
900037d6:	e01a      	b.n	9000380e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
900037d8:	68bb      	ldr	r3, [r7, #8]
900037da:	4a13      	ldr	r2, [pc, #76]	; (90003828 <HAL_ETH_SetMDIOClockRange+0xa4>)
900037dc:	4293      	cmp	r3, r2
900037de:	d303      	bcc.n	900037e8 <HAL_ETH_SetMDIOClockRange+0x64>
900037e0:	68bb      	ldr	r3, [r7, #8]
900037e2:	4a12      	ldr	r2, [pc, #72]	; (9000382c <HAL_ETH_SetMDIOClockRange+0xa8>)
900037e4:	4293      	cmp	r3, r2
900037e6:	d911      	bls.n	9000380c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
900037e8:	68bb      	ldr	r3, [r7, #8]
900037ea:	4a10      	ldr	r2, [pc, #64]	; (9000382c <HAL_ETH_SetMDIOClockRange+0xa8>)
900037ec:	4293      	cmp	r3, r2
900037ee:	d908      	bls.n	90003802 <HAL_ETH_SetMDIOClockRange+0x7e>
900037f0:	68bb      	ldr	r3, [r7, #8]
900037f2:	4a0f      	ldr	r2, [pc, #60]	; (90003830 <HAL_ETH_SetMDIOClockRange+0xac>)
900037f4:	4293      	cmp	r3, r2
900037f6:	d804      	bhi.n	90003802 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
900037f8:	68fb      	ldr	r3, [r7, #12]
900037fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900037fe:	60fb      	str	r3, [r7, #12]
90003800:	e005      	b.n	9000380e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
90003802:	68fb      	ldr	r3, [r7, #12]
90003804:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
90003808:	60fb      	str	r3, [r7, #12]
9000380a:	e000      	b.n	9000380e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
9000380c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
9000380e:	687b      	ldr	r3, [r7, #4]
90003810:	681b      	ldr	r3, [r3, #0]
90003812:	68fa      	ldr	r2, [r7, #12]
90003814:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
90003818:	bf00      	nop
9000381a:	3710      	adds	r7, #16
9000381c:	46bd      	mov	sp, r7
9000381e:	bd80      	pop	{r7, pc}
90003820:	01312cff 	.word	0x01312cff
90003824:	02160ebf 	.word	0x02160ebf
90003828:	03938700 	.word	0x03938700
9000382c:	05f5e0ff 	.word	0x05f5e0ff
90003830:	08f0d17f 	.word	0x08f0d17f

90003834 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
90003834:	b480      	push	{r7}
90003836:	b083      	sub	sp, #12
90003838:	af00      	add	r7, sp, #0
9000383a:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
9000383c:	687b      	ldr	r3, [r7, #4]
9000383e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
90003842:	4618      	mov	r0, r3
90003844:	370c      	adds	r7, #12
90003846:	46bd      	mov	sp, r7
90003848:	f85d 7b04 	ldr.w	r7, [sp], #4
9000384c:	4770      	bx	lr
	...

90003850 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
90003850:	b480      	push	{r7}
90003852:	b085      	sub	sp, #20
90003854:	af00      	add	r7, sp, #0
90003856:	6078      	str	r0, [r7, #4]
90003858:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
9000385a:	683b      	ldr	r3, [r7, #0]
9000385c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
9000385e:	683b      	ldr	r3, [r7, #0]
90003860:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
90003862:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
90003864:	683b      	ldr	r3, [r7, #0]
90003866:	791b      	ldrb	r3, [r3, #4]
90003868:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
9000386a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
9000386c:	683b      	ldr	r3, [r7, #0]
9000386e:	7b1b      	ldrb	r3, [r3, #12]
90003870:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
90003872:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
90003874:	683b      	ldr	r3, [r7, #0]
90003876:	7b5b      	ldrb	r3, [r3, #13]
90003878:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
9000387a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
9000387c:	683b      	ldr	r3, [r7, #0]
9000387e:	7b9b      	ldrb	r3, [r3, #14]
90003880:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
90003882:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
90003884:	683b      	ldr	r3, [r7, #0]
90003886:	7bdb      	ldrb	r3, [r3, #15]
90003888:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
9000388a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
9000388c:	683a      	ldr	r2, [r7, #0]
9000388e:	7c12      	ldrb	r2, [r2, #16]
90003890:	2a00      	cmp	r2, #0
90003892:	d102      	bne.n	9000389a <ETH_SetMACConfig+0x4a>
90003894:	f44f 2200 	mov.w	r2, #524288	; 0x80000
90003898:	e000      	b.n	9000389c <ETH_SetMACConfig+0x4c>
9000389a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
9000389c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
9000389e:	683a      	ldr	r2, [r7, #0]
900038a0:	7c52      	ldrb	r2, [r2, #17]
900038a2:	2a00      	cmp	r2, #0
900038a4:	d102      	bne.n	900038ac <ETH_SetMACConfig+0x5c>
900038a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
900038aa:	e000      	b.n	900038ae <ETH_SetMACConfig+0x5e>
900038ac:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
900038ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
900038b0:	683b      	ldr	r3, [r7, #0]
900038b2:	7c9b      	ldrb	r3, [r3, #18]
900038b4:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
900038b6:	431a      	orrs	r2, r3
               macconf->Speed |
900038b8:	683b      	ldr	r3, [r7, #0]
900038ba:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
900038bc:	431a      	orrs	r2, r3
               macconf->DuplexMode |
900038be:	683b      	ldr	r3, [r7, #0]
900038c0:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
900038c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
900038c4:	683b      	ldr	r3, [r7, #0]
900038c6:	7f1b      	ldrb	r3, [r3, #28]
900038c8:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
900038ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
900038cc:	683b      	ldr	r3, [r7, #0]
900038ce:	7f5b      	ldrb	r3, [r3, #29]
900038d0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
900038d2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
900038d4:	683a      	ldr	r2, [r7, #0]
900038d6:	7f92      	ldrb	r2, [r2, #30]
900038d8:	2a00      	cmp	r2, #0
900038da:	d102      	bne.n	900038e2 <ETH_SetMACConfig+0x92>
900038dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
900038e0:	e000      	b.n	900038e4 <ETH_SetMACConfig+0x94>
900038e2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
900038e4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
900038e6:	683b      	ldr	r3, [r7, #0]
900038e8:	7fdb      	ldrb	r3, [r3, #31]
900038ea:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
900038ec:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
900038ee:	683a      	ldr	r2, [r7, #0]
900038f0:	f892 2020 	ldrb.w	r2, [r2, #32]
900038f4:	2a00      	cmp	r2, #0
900038f6:	d102      	bne.n	900038fe <ETH_SetMACConfig+0xae>
900038f8:	f44f 7280 	mov.w	r2, #256	; 0x100
900038fc:	e000      	b.n	90003900 <ETH_SetMACConfig+0xb0>
900038fe:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
90003900:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
90003902:	683b      	ldr	r3, [r7, #0]
90003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
90003906:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
90003908:	683b      	ldr	r3, [r7, #0]
9000390a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
9000390e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
90003910:	431a      	orrs	r2, r3
               macconf->PreambleLength);
90003912:	683b      	ldr	r3, [r7, #0]
90003914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
90003916:	4313      	orrs	r3, r2
90003918:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
9000391a:	687b      	ldr	r3, [r7, #4]
9000391c:	681b      	ldr	r3, [r3, #0]
9000391e:	681a      	ldr	r2, [r3, #0]
90003920:	4b56      	ldr	r3, [pc, #344]	; (90003a7c <ETH_SetMACConfig+0x22c>)
90003922:	4013      	ands	r3, r2
90003924:	687a      	ldr	r2, [r7, #4]
90003926:	6812      	ldr	r2, [r2, #0]
90003928:	68f9      	ldr	r1, [r7, #12]
9000392a:	430b      	orrs	r3, r1
9000392c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
9000392e:	683b      	ldr	r3, [r7, #0]
90003930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90003932:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
90003934:	683b      	ldr	r3, [r7, #0]
90003936:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
9000393a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
9000393c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
9000393e:	683b      	ldr	r3, [r7, #0]
90003940:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
90003944:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
90003946:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
90003948:	683b      	ldr	r3, [r7, #0]
9000394a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
9000394e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
90003950:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
90003952:	683a      	ldr	r2, [r7, #0]
90003954:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
90003958:	2a00      	cmp	r2, #0
9000395a:	d102      	bne.n	90003962 <ETH_SetMACConfig+0x112>
9000395c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
90003960:	e000      	b.n	90003964 <ETH_SetMACConfig+0x114>
90003962:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
90003964:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
90003966:	683b      	ldr	r3, [r7, #0]
90003968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
9000396a:	4313      	orrs	r3, r2
9000396c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
9000396e:	687b      	ldr	r3, [r7, #4]
90003970:	681b      	ldr	r3, [r3, #0]
90003972:	685a      	ldr	r2, [r3, #4]
90003974:	4b42      	ldr	r3, [pc, #264]	; (90003a80 <ETH_SetMACConfig+0x230>)
90003976:	4013      	ands	r3, r2
90003978:	687a      	ldr	r2, [r7, #4]
9000397a:	6812      	ldr	r2, [r2, #0]
9000397c:	68f9      	ldr	r1, [r7, #12]
9000397e:	430b      	orrs	r3, r1
90003980:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
90003982:	683b      	ldr	r3, [r7, #0]
90003984:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
90003988:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
9000398a:	683b      	ldr	r3, [r7, #0]
9000398c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
9000398e:	4313      	orrs	r3, r2
90003990:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
90003992:	687b      	ldr	r3, [r7, #4]
90003994:	681b      	ldr	r3, [r3, #0]
90003996:	68da      	ldr	r2, [r3, #12]
90003998:	4b3a      	ldr	r3, [pc, #232]	; (90003a84 <ETH_SetMACConfig+0x234>)
9000399a:	4013      	ands	r3, r2
9000399c:	687a      	ldr	r2, [r7, #4]
9000399e:	6812      	ldr	r2, [r2, #0]
900039a0:	68f9      	ldr	r1, [r7, #12]
900039a2:	430b      	orrs	r3, r1
900039a4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
900039a6:	683b      	ldr	r3, [r7, #0]
900039a8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
900039ac:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
900039ae:	683b      	ldr	r3, [r7, #0]
900039b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
900039b2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
900039b4:	683a      	ldr	r2, [r7, #0]
900039b6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
900039ba:	2a00      	cmp	r2, #0
900039bc:	d101      	bne.n	900039c2 <ETH_SetMACConfig+0x172>
900039be:	2280      	movs	r2, #128	; 0x80
900039c0:	e000      	b.n	900039c4 <ETH_SetMACConfig+0x174>
900039c2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
900039c4:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
900039c6:	683b      	ldr	r3, [r7, #0]
900039c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
900039ca:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
900039cc:	4313      	orrs	r3, r2
900039ce:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
900039d0:	687b      	ldr	r3, [r7, #4]
900039d2:	681b      	ldr	r3, [r3, #0]
900039d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
900039d6:	f64f 730d 	movw	r3, #65293	; 0xff0d
900039da:	4013      	ands	r3, r2
900039dc:	687a      	ldr	r2, [r7, #4]
900039de:	6812      	ldr	r2, [r2, #0]
900039e0:	68f9      	ldr	r1, [r7, #12]
900039e2:	430b      	orrs	r3, r1
900039e4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
900039e6:	683b      	ldr	r3, [r7, #0]
900039e8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
900039ec:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
900039ee:	683b      	ldr	r3, [r7, #0]
900039f0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
900039f4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
900039f6:	4313      	orrs	r3, r2
900039f8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
900039fa:	687b      	ldr	r3, [r7, #4]
900039fc:	681b      	ldr	r3, [r3, #0]
900039fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
90003a02:	f023 0103 	bic.w	r1, r3, #3
90003a06:	687b      	ldr	r3, [r7, #4]
90003a08:	681b      	ldr	r3, [r3, #0]
90003a0a:	68fa      	ldr	r2, [r7, #12]
90003a0c:	430a      	orrs	r2, r1
90003a0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
90003a12:	687b      	ldr	r3, [r7, #4]
90003a14:	681b      	ldr	r3, [r3, #0]
90003a16:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
90003a1a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
90003a1e:	683b      	ldr	r3, [r7, #0]
90003a20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
90003a22:	687b      	ldr	r3, [r7, #4]
90003a24:	681b      	ldr	r3, [r3, #0]
90003a26:	430a      	orrs	r2, r1
90003a28:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
90003a2c:	683b      	ldr	r3, [r7, #0]
90003a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
90003a30:	683a      	ldr	r2, [r7, #0]
90003a32:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
90003a36:	2a00      	cmp	r2, #0
90003a38:	d101      	bne.n	90003a3e <ETH_SetMACConfig+0x1ee>
90003a3a:	2240      	movs	r2, #64	; 0x40
90003a3c:	e000      	b.n	90003a40 <ETH_SetMACConfig+0x1f0>
90003a3e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
90003a40:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
90003a42:	683b      	ldr	r3, [r7, #0]
90003a44:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
90003a48:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
90003a4a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
90003a4c:	683b      	ldr	r3, [r7, #0]
90003a4e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
90003a52:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
90003a54:	4313      	orrs	r3, r2
90003a56:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
90003a58:	687b      	ldr	r3, [r7, #4]
90003a5a:	681b      	ldr	r3, [r3, #0]
90003a5c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
90003a60:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
90003a64:	687b      	ldr	r3, [r7, #4]
90003a66:	681b      	ldr	r3, [r3, #0]
90003a68:	68fa      	ldr	r2, [r7, #12]
90003a6a:	430a      	orrs	r2, r1
90003a6c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
90003a70:	bf00      	nop
90003a72:	3714      	adds	r7, #20
90003a74:	46bd      	mov	sp, r7
90003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
90003a7a:	4770      	bx	lr
90003a7c:	00048083 	.word	0x00048083
90003a80:	c0f88000 	.word	0xc0f88000
90003a84:	fffffef0 	.word	0xfffffef0

90003a88 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
90003a88:	b480      	push	{r7}
90003a8a:	b085      	sub	sp, #20
90003a8c:	af00      	add	r7, sp, #0
90003a8e:	6078      	str	r0, [r7, #4]
90003a90:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
90003a92:	687b      	ldr	r3, [r7, #4]
90003a94:	681b      	ldr	r3, [r3, #0]
90003a96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90003a9a:	681a      	ldr	r2, [r3, #0]
90003a9c:	4b38      	ldr	r3, [pc, #224]	; (90003b80 <ETH_SetDMAConfig+0xf8>)
90003a9e:	4013      	ands	r3, r2
90003aa0:	683a      	ldr	r2, [r7, #0]
90003aa2:	6811      	ldr	r1, [r2, #0]
90003aa4:	687a      	ldr	r2, [r7, #4]
90003aa6:	6812      	ldr	r2, [r2, #0]
90003aa8:	430b      	orrs	r3, r1
90003aaa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
90003aae:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
90003ab0:	683b      	ldr	r3, [r7, #0]
90003ab2:	791b      	ldrb	r3, [r3, #4]
90003ab4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
90003ab6:	683b      	ldr	r3, [r7, #0]
90003ab8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
90003aba:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
90003abc:	683b      	ldr	r3, [r7, #0]
90003abe:	7b1b      	ldrb	r3, [r3, #12]
90003ac0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
90003ac2:	4313      	orrs	r3, r2
90003ac4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
90003ac6:	687b      	ldr	r3, [r7, #4]
90003ac8:	681b      	ldr	r3, [r3, #0]
90003aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90003ace:	685a      	ldr	r2, [r3, #4]
90003ad0:	4b2c      	ldr	r3, [pc, #176]	; (90003b84 <ETH_SetDMAConfig+0xfc>)
90003ad2:	4013      	ands	r3, r2
90003ad4:	687a      	ldr	r2, [r7, #4]
90003ad6:	6812      	ldr	r2, [r2, #0]
90003ad8:	68f9      	ldr	r1, [r7, #12]
90003ada:	430b      	orrs	r3, r1
90003adc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
90003ae0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
90003ae2:	683b      	ldr	r3, [r7, #0]
90003ae4:	7b5b      	ldrb	r3, [r3, #13]
90003ae6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
90003ae8:	683b      	ldr	r3, [r7, #0]
90003aea:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
90003aec:	4313      	orrs	r3, r2
90003aee:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
90003af0:	687b      	ldr	r3, [r7, #4]
90003af2:	681b      	ldr	r3, [r3, #0]
90003af4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90003af8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
90003afc:	4b22      	ldr	r3, [pc, #136]	; (90003b88 <ETH_SetDMAConfig+0x100>)
90003afe:	4013      	ands	r3, r2
90003b00:	687a      	ldr	r2, [r7, #4]
90003b02:	6812      	ldr	r2, [r2, #0]
90003b04:	68f9      	ldr	r1, [r7, #12]
90003b06:	430b      	orrs	r3, r1
90003b08:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
90003b0c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
90003b10:	683b      	ldr	r3, [r7, #0]
90003b12:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
90003b14:	683b      	ldr	r3, [r7, #0]
90003b16:	7d1b      	ldrb	r3, [r3, #20]
90003b18:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
90003b1a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
90003b1c:	683b      	ldr	r3, [r7, #0]
90003b1e:	7f5b      	ldrb	r3, [r3, #29]
90003b20:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
90003b22:	4313      	orrs	r3, r2
90003b24:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
90003b26:	687b      	ldr	r3, [r7, #4]
90003b28:	681b      	ldr	r3, [r3, #0]
90003b2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90003b2e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
90003b32:	4b16      	ldr	r3, [pc, #88]	; (90003b8c <ETH_SetDMAConfig+0x104>)
90003b34:	4013      	ands	r3, r2
90003b36:	687a      	ldr	r2, [r7, #4]
90003b38:	6812      	ldr	r2, [r2, #0]
90003b3a:	68f9      	ldr	r1, [r7, #12]
90003b3c:	430b      	orrs	r3, r1
90003b3e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
90003b42:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
90003b46:	683b      	ldr	r3, [r7, #0]
90003b48:	7f1b      	ldrb	r3, [r3, #28]
90003b4a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
90003b4c:	683b      	ldr	r3, [r7, #0]
90003b4e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
90003b50:	4313      	orrs	r3, r2
90003b52:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
90003b54:	687b      	ldr	r3, [r7, #4]
90003b56:	681b      	ldr	r3, [r3, #0]
90003b58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90003b5c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
90003b60:	4b0b      	ldr	r3, [pc, #44]	; (90003b90 <ETH_SetDMAConfig+0x108>)
90003b62:	4013      	ands	r3, r2
90003b64:	687a      	ldr	r2, [r7, #4]
90003b66:	6812      	ldr	r2, [r2, #0]
90003b68:	68f9      	ldr	r1, [r7, #12]
90003b6a:	430b      	orrs	r3, r1
90003b6c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
90003b70:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
90003b74:	bf00      	nop
90003b76:	3714      	adds	r7, #20
90003b78:	46bd      	mov	sp, r7
90003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
90003b7e:	4770      	bx	lr
90003b80:	ffff87fd 	.word	0xffff87fd
90003b84:	ffff2ffe 	.word	0xffff2ffe
90003b88:	fffec000 	.word	0xfffec000
90003b8c:	ffc0efef 	.word	0xffc0efef
90003b90:	7fc0ffff 	.word	0x7fc0ffff

90003b94 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
90003b94:	b580      	push	{r7, lr}
90003b96:	b0a4      	sub	sp, #144	; 0x90
90003b98:	af00      	add	r7, sp, #0
90003b9a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
90003b9c:	2301      	movs	r3, #1
90003b9e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
90003ba2:	2300      	movs	r3, #0
90003ba4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
90003ba6:	2300      	movs	r3, #0
90003ba8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
90003bac:	2300      	movs	r3, #0
90003bae:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
90003bb2:	2301      	movs	r3, #1
90003bb4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
90003bb8:	2301      	movs	r3, #1
90003bba:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
90003bbe:	2301      	movs	r3, #1
90003bc0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
90003bc4:	2300      	movs	r3, #0
90003bc6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
90003bca:	2301      	movs	r3, #1
90003bcc:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
90003bd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
90003bd4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
90003bd6:	2300      	movs	r3, #0
90003bd8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
90003bdc:	2300      	movs	r3, #0
90003bde:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
90003be0:	2300      	movs	r3, #0
90003be2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
90003be6:	2300      	movs	r3, #0
90003be8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
90003bec:	f44f 63c3 	mov.w	r3, #1560	; 0x618
90003bf0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
90003bf2:	2300      	movs	r3, #0
90003bf4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
90003bf8:	2300      	movs	r3, #0
90003bfa:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
90003bfc:	2301      	movs	r3, #1
90003bfe:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
90003c02:	2300      	movs	r3, #0
90003c04:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
90003c08:	2300      	movs	r3, #0
90003c0a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
90003c0e:	2300      	movs	r3, #0
90003c10:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
90003c12:	2300      	movs	r3, #0
90003c14:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
90003c16:	2300      	movs	r3, #0
90003c18:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
90003c1a:	2300      	movs	r3, #0
90003c1c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
90003c20:	2300      	movs	r3, #0
90003c22:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
90003c26:	2301      	movs	r3, #1
90003c28:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
90003c2c:	2320      	movs	r3, #32
90003c2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
90003c32:	2301      	movs	r3, #1
90003c34:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
90003c38:	2300      	movs	r3, #0
90003c3a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
90003c3e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
90003c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
90003c44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
90003c48:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
90003c4a:	2300      	movs	r3, #0
90003c4c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
90003c50:	2302      	movs	r3, #2
90003c52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
90003c56:	2300      	movs	r3, #0
90003c58:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
90003c5c:	2300      	movs	r3, #0
90003c5e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
90003c62:	2300      	movs	r3, #0
90003c64:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
90003c68:	2301      	movs	r3, #1
90003c6a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
90003c6e:	2300      	movs	r3, #0
90003c70:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
90003c72:	2301      	movs	r3, #1
90003c74:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
90003c78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
90003c7c:	4619      	mov	r1, r3
90003c7e:	6878      	ldr	r0, [r7, #4]
90003c80:	f7ff fde6 	bl	90003850 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
90003c84:	2301      	movs	r3, #1
90003c86:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
90003c88:	2301      	movs	r3, #1
90003c8a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
90003c8c:	2300      	movs	r3, #0
90003c8e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
90003c90:	2300      	movs	r3, #0
90003c92:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
90003c96:	2300      	movs	r3, #0
90003c98:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
90003c9a:	2300      	movs	r3, #0
90003c9c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
90003c9e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
90003ca2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
90003ca4:	2300      	movs	r3, #0
90003ca6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
90003ca8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
90003cac:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
90003cae:	2300      	movs	r3, #0
90003cb0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
90003cb4:	f44f 7306 	mov.w	r3, #536	; 0x218
90003cb8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
90003cba:	f107 0308 	add.w	r3, r7, #8
90003cbe:	4619      	mov	r1, r3
90003cc0:	6878      	ldr	r0, [r7, #4]
90003cc2:	f7ff fee1 	bl	90003a88 <ETH_SetDMAConfig>
}
90003cc6:	bf00      	nop
90003cc8:	3790      	adds	r7, #144	; 0x90
90003cca:	46bd      	mov	sp, r7
90003ccc:	bd80      	pop	{r7, pc}

90003cce <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
90003cce:	b480      	push	{r7}
90003cd0:	b085      	sub	sp, #20
90003cd2:	af00      	add	r7, sp, #0
90003cd4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
90003cd6:	2300      	movs	r3, #0
90003cd8:	60fb      	str	r3, [r7, #12]
90003cda:	e01d      	b.n	90003d18 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
90003cdc:	687b      	ldr	r3, [r7, #4]
90003cde:	68d9      	ldr	r1, [r3, #12]
90003ce0:	68fa      	ldr	r2, [r7, #12]
90003ce2:	4613      	mov	r3, r2
90003ce4:	005b      	lsls	r3, r3, #1
90003ce6:	4413      	add	r3, r2
90003ce8:	00db      	lsls	r3, r3, #3
90003cea:	440b      	add	r3, r1
90003cec:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
90003cee:	68bb      	ldr	r3, [r7, #8]
90003cf0:	2200      	movs	r2, #0
90003cf2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
90003cf4:	68bb      	ldr	r3, [r7, #8]
90003cf6:	2200      	movs	r2, #0
90003cf8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
90003cfa:	68bb      	ldr	r3, [r7, #8]
90003cfc:	2200      	movs	r2, #0
90003cfe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
90003d00:	68bb      	ldr	r3, [r7, #8]
90003d02:	2200      	movs	r2, #0
90003d04:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
90003d06:	68b9      	ldr	r1, [r7, #8]
90003d08:	687b      	ldr	r3, [r7, #4]
90003d0a:	68fa      	ldr	r2, [r7, #12]
90003d0c:	3206      	adds	r2, #6
90003d0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
90003d12:	68fb      	ldr	r3, [r7, #12]
90003d14:	3301      	adds	r3, #1
90003d16:	60fb      	str	r3, [r7, #12]
90003d18:	68fb      	ldr	r3, [r7, #12]
90003d1a:	2b03      	cmp	r3, #3
90003d1c:	d9de      	bls.n	90003cdc <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
90003d1e:	687b      	ldr	r3, [r7, #4]
90003d20:	2200      	movs	r2, #0
90003d22:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
90003d24:	687b      	ldr	r3, [r7, #4]
90003d26:	681b      	ldr	r3, [r3, #0]
90003d28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90003d2c:	461a      	mov	r2, r3
90003d2e:	2303      	movs	r3, #3
90003d30:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
90003d34:	687b      	ldr	r3, [r7, #4]
90003d36:	68da      	ldr	r2, [r3, #12]
90003d38:	687b      	ldr	r3, [r7, #4]
90003d3a:	681b      	ldr	r3, [r3, #0]
90003d3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90003d40:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
90003d44:	687b      	ldr	r3, [r7, #4]
90003d46:	68da      	ldr	r2, [r3, #12]
90003d48:	687b      	ldr	r3, [r7, #4]
90003d4a:	681b      	ldr	r3, [r3, #0]
90003d4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90003d50:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
90003d54:	bf00      	nop
90003d56:	3714      	adds	r7, #20
90003d58:	46bd      	mov	sp, r7
90003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
90003d5e:	4770      	bx	lr

90003d60 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
90003d60:	b480      	push	{r7}
90003d62:	b085      	sub	sp, #20
90003d64:	af00      	add	r7, sp, #0
90003d66:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
90003d68:	2300      	movs	r3, #0
90003d6a:	60fb      	str	r3, [r7, #12]
90003d6c:	e023      	b.n	90003db6 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
90003d6e:	687b      	ldr	r3, [r7, #4]
90003d70:	6919      	ldr	r1, [r3, #16]
90003d72:	68fa      	ldr	r2, [r7, #12]
90003d74:	4613      	mov	r3, r2
90003d76:	005b      	lsls	r3, r3, #1
90003d78:	4413      	add	r3, r2
90003d7a:	00db      	lsls	r3, r3, #3
90003d7c:	440b      	add	r3, r1
90003d7e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
90003d80:	68bb      	ldr	r3, [r7, #8]
90003d82:	2200      	movs	r2, #0
90003d84:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
90003d86:	68bb      	ldr	r3, [r7, #8]
90003d88:	2200      	movs	r2, #0
90003d8a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
90003d8c:	68bb      	ldr	r3, [r7, #8]
90003d8e:	2200      	movs	r2, #0
90003d90:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
90003d92:	68bb      	ldr	r3, [r7, #8]
90003d94:	2200      	movs	r2, #0
90003d96:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
90003d98:	68bb      	ldr	r3, [r7, #8]
90003d9a:	2200      	movs	r2, #0
90003d9c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
90003d9e:	68bb      	ldr	r3, [r7, #8]
90003da0:	2200      	movs	r2, #0
90003da2:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
90003da4:	68b9      	ldr	r1, [r7, #8]
90003da6:	687b      	ldr	r3, [r7, #4]
90003da8:	68fa      	ldr	r2, [r7, #12]
90003daa:	3212      	adds	r2, #18
90003dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
90003db0:	68fb      	ldr	r3, [r7, #12]
90003db2:	3301      	adds	r3, #1
90003db4:	60fb      	str	r3, [r7, #12]
90003db6:	68fb      	ldr	r3, [r7, #12]
90003db8:	2b03      	cmp	r3, #3
90003dba:	d9d8      	bls.n	90003d6e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
90003dbc:	687b      	ldr	r3, [r7, #4]
90003dbe:	2200      	movs	r2, #0
90003dc0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
90003dc2:	687b      	ldr	r3, [r7, #4]
90003dc4:	2200      	movs	r2, #0
90003dc6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
90003dc8:	687b      	ldr	r3, [r7, #4]
90003dca:	2200      	movs	r2, #0
90003dcc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
90003dce:	687b      	ldr	r3, [r7, #4]
90003dd0:	2200      	movs	r2, #0
90003dd2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
90003dd4:	687b      	ldr	r3, [r7, #4]
90003dd6:	2200      	movs	r2, #0
90003dd8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
90003dda:	687b      	ldr	r3, [r7, #4]
90003ddc:	681b      	ldr	r3, [r3, #0]
90003dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90003de2:	461a      	mov	r2, r3
90003de4:	2303      	movs	r3, #3
90003de6:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
90003dea:	687b      	ldr	r3, [r7, #4]
90003dec:	691a      	ldr	r2, [r3, #16]
90003dee:	687b      	ldr	r3, [r7, #4]
90003df0:	681b      	ldr	r3, [r3, #0]
90003df2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90003df6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
90003dfa:	687b      	ldr	r3, [r7, #4]
90003dfc:	691b      	ldr	r3, [r3, #16]
90003dfe:	f103 0248 	add.w	r2, r3, #72	; 0x48
90003e02:	687b      	ldr	r3, [r7, #4]
90003e04:	681b      	ldr	r3, [r3, #0]
90003e06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
90003e0a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
90003e0e:	bf00      	nop
90003e10:	3714      	adds	r7, #20
90003e12:	46bd      	mov	sp, r7
90003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
90003e18:	4770      	bx	lr
	...

90003e1c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
90003e1c:	b480      	push	{r7}
90003e1e:	b08d      	sub	sp, #52	; 0x34
90003e20:	af00      	add	r7, sp, #0
90003e22:	60f8      	str	r0, [r7, #12]
90003e24:	60b9      	str	r1, [r7, #8]
90003e26:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
90003e28:	68fb      	ldr	r3, [r7, #12]
90003e2a:	3318      	adds	r3, #24
90003e2c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
90003e2e:	697b      	ldr	r3, [r7, #20]
90003e30:	691b      	ldr	r3, [r3, #16]
90003e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
90003e34:	697b      	ldr	r3, [r7, #20]
90003e36:	691b      	ldr	r3, [r3, #16]
90003e38:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
90003e3a:	2300      	movs	r3, #0
90003e3c:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
90003e3e:	697b      	ldr	r3, [r7, #20]
90003e40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
90003e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90003e46:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
90003e48:	68bb      	ldr	r3, [r7, #8]
90003e4a:	689b      	ldr	r3, [r3, #8]
90003e4c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
90003e4e:	2300      	movs	r3, #0
90003e50:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
90003e52:	6a3b      	ldr	r3, [r7, #32]
90003e54:	68db      	ldr	r3, [r3, #12]
90003e56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
90003e5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
90003e5e:	d007      	beq.n	90003e70 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
90003e60:	697a      	ldr	r2, [r7, #20]
90003e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90003e64:	3304      	adds	r3, #4
90003e66:	009b      	lsls	r3, r3, #2
90003e68:	4413      	add	r3, r2
90003e6a:	685b      	ldr	r3, [r3, #4]
90003e6c:	2b00      	cmp	r3, #0
90003e6e:	d001      	beq.n	90003e74 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
90003e70:	2302      	movs	r3, #2
90003e72:	e259      	b.n	90004328 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
90003e74:	68bb      	ldr	r3, [r7, #8]
90003e76:	681b      	ldr	r3, [r3, #0]
90003e78:	f003 0304 	and.w	r3, r3, #4
90003e7c:	2b00      	cmp	r3, #0
90003e7e:	d044      	beq.n	90003f0a <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
90003e80:	6a3b      	ldr	r3, [r7, #32]
90003e82:	68da      	ldr	r2, [r3, #12]
90003e84:	4b75      	ldr	r3, [pc, #468]	; (9000405c <ETH_Prepare_Tx_Descriptors+0x240>)
90003e86:	4013      	ands	r3, r2
90003e88:	68ba      	ldr	r2, [r7, #8]
90003e8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
90003e8c:	431a      	orrs	r2, r3
90003e8e:	6a3b      	ldr	r3, [r7, #32]
90003e90:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
90003e92:	6a3b      	ldr	r3, [r7, #32]
90003e94:	68db      	ldr	r3, [r3, #12]
90003e96:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
90003e9a:	6a3b      	ldr	r3, [r7, #32]
90003e9c:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
90003e9e:	68fb      	ldr	r3, [r7, #12]
90003ea0:	681b      	ldr	r3, [r3, #0]
90003ea2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
90003ea4:	68fb      	ldr	r3, [r7, #12]
90003ea6:	681b      	ldr	r3, [r3, #0]
90003ea8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
90003eac:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
90003eae:	68bb      	ldr	r3, [r7, #8]
90003eb0:	681b      	ldr	r3, [r3, #0]
90003eb2:	f003 0308 	and.w	r3, r3, #8
90003eb6:	2b00      	cmp	r3, #0
90003eb8:	d027      	beq.n	90003f0a <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
90003eba:	6a3b      	ldr	r3, [r7, #32]
90003ebc:	689b      	ldr	r3, [r3, #8]
90003ebe:	b29a      	uxth	r2, r3
90003ec0:	68bb      	ldr	r3, [r7, #8]
90003ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003ec4:	041b      	lsls	r3, r3, #16
90003ec6:	431a      	orrs	r2, r3
90003ec8:	6a3b      	ldr	r3, [r7, #32]
90003eca:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
90003ecc:	6a3b      	ldr	r3, [r7, #32]
90003ece:	68db      	ldr	r3, [r3, #12]
90003ed0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
90003ed4:	6a3b      	ldr	r3, [r7, #32]
90003ed6:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
90003ed8:	6a3b      	ldr	r3, [r7, #32]
90003eda:	68db      	ldr	r3, [r3, #12]
90003edc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
90003ee0:	68bb      	ldr	r3, [r7, #8]
90003ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90003ee4:	431a      	orrs	r2, r3
90003ee6:	6a3b      	ldr	r3, [r7, #32]
90003ee8:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
90003eea:	68fb      	ldr	r3, [r7, #12]
90003eec:	681b      	ldr	r3, [r3, #0]
90003eee:	6e5a      	ldr	r2, [r3, #100]	; 0x64
90003ef0:	68fb      	ldr	r3, [r7, #12]
90003ef2:	681b      	ldr	r3, [r3, #0]
90003ef4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
90003ef8:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
90003efa:	68fb      	ldr	r3, [r7, #12]
90003efc:	681b      	ldr	r3, [r3, #0]
90003efe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
90003f00:	68fb      	ldr	r3, [r7, #12]
90003f02:	681b      	ldr	r3, [r3, #0]
90003f04:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
90003f08:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
90003f0a:	68bb      	ldr	r3, [r7, #8]
90003f0c:	681b      	ldr	r3, [r3, #0]
90003f0e:	f003 0310 	and.w	r3, r3, #16
90003f12:	2b00      	cmp	r3, #0
90003f14:	d00e      	beq.n	90003f34 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
90003f16:	6a3b      	ldr	r3, [r7, #32]
90003f18:	689a      	ldr	r2, [r3, #8]
90003f1a:	4b51      	ldr	r3, [pc, #324]	; (90004060 <ETH_Prepare_Tx_Descriptors+0x244>)
90003f1c:	4013      	ands	r3, r2
90003f1e:	68ba      	ldr	r2, [r7, #8]
90003f20:	6992      	ldr	r2, [r2, #24]
90003f22:	431a      	orrs	r2, r3
90003f24:	6a3b      	ldr	r3, [r7, #32]
90003f26:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
90003f28:	6a3b      	ldr	r3, [r7, #32]
90003f2a:	68db      	ldr	r3, [r3, #12]
90003f2c:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
90003f30:	6a3b      	ldr	r3, [r7, #32]
90003f32:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
90003f34:	68bb      	ldr	r3, [r7, #8]
90003f36:	681b      	ldr	r3, [r3, #0]
90003f38:	f003 0304 	and.w	r3, r3, #4
90003f3c:	2b00      	cmp	r3, #0
90003f3e:	d105      	bne.n	90003f4c <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
90003f40:	68bb      	ldr	r3, [r7, #8]
90003f42:	681b      	ldr	r3, [r3, #0]
90003f44:	f003 0310 	and.w	r3, r3, #16
90003f48:	2b00      	cmp	r3, #0
90003f4a:	d036      	beq.n	90003fba <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
90003f4c:	6a3b      	ldr	r3, [r7, #32]
90003f4e:	68db      	ldr	r3, [r3, #12]
90003f50:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
90003f54:	6a3b      	ldr	r3, [r7, #32]
90003f56:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
90003f58:	f3bf 8f5f 	dmb	sy
}
90003f5c:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
90003f5e:	6a3b      	ldr	r3, [r7, #32]
90003f60:	68db      	ldr	r3, [r3, #12]
90003f62:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
90003f66:	6a3b      	ldr	r3, [r7, #32]
90003f68:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
90003f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90003f6c:	3301      	adds	r3, #1
90003f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
90003f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90003f72:	2b03      	cmp	r3, #3
90003f74:	d902      	bls.n	90003f7c <ETH_Prepare_Tx_Descriptors+0x160>
90003f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90003f78:	3b04      	subs	r3, #4
90003f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
90003f7c:	697b      	ldr	r3, [r7, #20]
90003f7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
90003f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90003f84:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
90003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90003f88:	3301      	adds	r3, #1
90003f8a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
90003f8c:	6a3b      	ldr	r3, [r7, #32]
90003f8e:	68db      	ldr	r3, [r3, #12]
90003f90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
90003f94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
90003f98:	d10f      	bne.n	90003fba <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
90003f9a:	697b      	ldr	r3, [r7, #20]
90003f9c:	693a      	ldr	r2, [r7, #16]
90003f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90003fa2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
90003fa4:	f3bf 8f5f 	dmb	sy
}
90003fa8:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
90003faa:	6a3b      	ldr	r3, [r7, #32]
90003fac:	68db      	ldr	r3, [r3, #12]
90003fae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
90003fb2:	6a3b      	ldr	r3, [r7, #32]
90003fb4:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
90003fb6:	2302      	movs	r3, #2
90003fb8:	e1b6      	b.n	90004328 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
90003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90003fbc:	3301      	adds	r3, #1
90003fbe:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
90003fc0:	69fb      	ldr	r3, [r7, #28]
90003fc2:	681b      	ldr	r3, [r3, #0]
90003fc4:	461a      	mov	r2, r3
90003fc6:	6a3b      	ldr	r3, [r7, #32]
90003fc8:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
90003fca:	6a3b      	ldr	r3, [r7, #32]
90003fcc:	689a      	ldr	r2, [r3, #8]
90003fce:	4b24      	ldr	r3, [pc, #144]	; (90004060 <ETH_Prepare_Tx_Descriptors+0x244>)
90003fd0:	4013      	ands	r3, r2
90003fd2:	69fa      	ldr	r2, [r7, #28]
90003fd4:	6852      	ldr	r2, [r2, #4]
90003fd6:	431a      	orrs	r2, r3
90003fd8:	6a3b      	ldr	r3, [r7, #32]
90003fda:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
90003fdc:	69fb      	ldr	r3, [r7, #28]
90003fde:	689b      	ldr	r3, [r3, #8]
90003fe0:	2b00      	cmp	r3, #0
90003fe2:	d012      	beq.n	9000400a <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
90003fe4:	69fb      	ldr	r3, [r7, #28]
90003fe6:	689b      	ldr	r3, [r3, #8]
90003fe8:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
90003fea:	69fb      	ldr	r3, [r7, #28]
90003fec:	681b      	ldr	r3, [r3, #0]
90003fee:	461a      	mov	r2, r3
90003ff0:	6a3b      	ldr	r3, [r7, #32]
90003ff2:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
90003ff4:	6a3b      	ldr	r3, [r7, #32]
90003ff6:	689a      	ldr	r2, [r3, #8]
90003ff8:	4b1a      	ldr	r3, [pc, #104]	; (90004064 <ETH_Prepare_Tx_Descriptors+0x248>)
90003ffa:	4013      	ands	r3, r2
90003ffc:	69fa      	ldr	r2, [r7, #28]
90003ffe:	6852      	ldr	r2, [r2, #4]
90004000:	0412      	lsls	r2, r2, #16
90004002:	431a      	orrs	r2, r3
90004004:	6a3b      	ldr	r3, [r7, #32]
90004006:	609a      	str	r2, [r3, #8]
90004008:	e008      	b.n	9000401c <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
9000400a:	6a3b      	ldr	r3, [r7, #32]
9000400c:	2200      	movs	r2, #0
9000400e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
90004010:	6a3b      	ldr	r3, [r7, #32]
90004012:	689a      	ldr	r2, [r3, #8]
90004014:	4b13      	ldr	r3, [pc, #76]	; (90004064 <ETH_Prepare_Tx_Descriptors+0x248>)
90004016:	4013      	ands	r3, r2
90004018:	6a3a      	ldr	r2, [r7, #32]
9000401a:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
9000401c:	68bb      	ldr	r3, [r7, #8]
9000401e:	681b      	ldr	r3, [r3, #0]
90004020:	f003 0310 	and.w	r3, r3, #16
90004024:	2b00      	cmp	r3, #0
90004026:	d021      	beq.n	9000406c <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
90004028:	6a3b      	ldr	r3, [r7, #32]
9000402a:	68db      	ldr	r3, [r3, #12]
9000402c:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
90004030:	68bb      	ldr	r3, [r7, #8]
90004032:	6a1b      	ldr	r3, [r3, #32]
90004034:	04db      	lsls	r3, r3, #19
90004036:	431a      	orrs	r2, r3
90004038:	6a3b      	ldr	r3, [r7, #32]
9000403a:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
9000403c:	6a3b      	ldr	r3, [r7, #32]
9000403e:	68da      	ldr	r2, [r3, #12]
90004040:	4b09      	ldr	r3, [pc, #36]	; (90004068 <ETH_Prepare_Tx_Descriptors+0x24c>)
90004042:	4013      	ands	r3, r2
90004044:	68ba      	ldr	r2, [r7, #8]
90004046:	69d2      	ldr	r2, [r2, #28]
90004048:	431a      	orrs	r2, r3
9000404a:	6a3b      	ldr	r3, [r7, #32]
9000404c:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
9000404e:	6a3b      	ldr	r3, [r7, #32]
90004050:	68db      	ldr	r3, [r3, #12]
90004052:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
90004056:	6a3b      	ldr	r3, [r7, #32]
90004058:	60da      	str	r2, [r3, #12]
9000405a:	e02e      	b.n	900040ba <ETH_Prepare_Tx_Descriptors+0x29e>
9000405c:	ffff0000 	.word	0xffff0000
90004060:	ffffc000 	.word	0xffffc000
90004064:	c000ffff 	.word	0xc000ffff
90004068:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
9000406c:	6a3b      	ldr	r3, [r7, #32]
9000406e:	68da      	ldr	r2, [r3, #12]
90004070:	4b7b      	ldr	r3, [pc, #492]	; (90004260 <ETH_Prepare_Tx_Descriptors+0x444>)
90004072:	4013      	ands	r3, r2
90004074:	68ba      	ldr	r2, [r7, #8]
90004076:	6852      	ldr	r2, [r2, #4]
90004078:	431a      	orrs	r2, r3
9000407a:	6a3b      	ldr	r3, [r7, #32]
9000407c:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
9000407e:	68bb      	ldr	r3, [r7, #8]
90004080:	681b      	ldr	r3, [r3, #0]
90004082:	f003 0301 	and.w	r3, r3, #1
90004086:	2b00      	cmp	r3, #0
90004088:	d008      	beq.n	9000409c <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
9000408a:	6a3b      	ldr	r3, [r7, #32]
9000408c:	68db      	ldr	r3, [r3, #12]
9000408e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
90004092:	68bb      	ldr	r3, [r7, #8]
90004094:	695b      	ldr	r3, [r3, #20]
90004096:	431a      	orrs	r2, r3
90004098:	6a3b      	ldr	r3, [r7, #32]
9000409a:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
9000409c:	68bb      	ldr	r3, [r7, #8]
9000409e:	681b      	ldr	r3, [r3, #0]
900040a0:	f003 0320 	and.w	r3, r3, #32
900040a4:	2b00      	cmp	r3, #0
900040a6:	d008      	beq.n	900040ba <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
900040a8:	6a3b      	ldr	r3, [r7, #32]
900040aa:	68db      	ldr	r3, [r3, #12]
900040ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
900040b0:	68bb      	ldr	r3, [r7, #8]
900040b2:	691b      	ldr	r3, [r3, #16]
900040b4:	431a      	orrs	r2, r3
900040b6:	6a3b      	ldr	r3, [r7, #32]
900040b8:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
900040ba:	68bb      	ldr	r3, [r7, #8]
900040bc:	681b      	ldr	r3, [r3, #0]
900040be:	f003 0304 	and.w	r3, r3, #4
900040c2:	2b00      	cmp	r3, #0
900040c4:	d008      	beq.n	900040d8 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
900040c6:	6a3b      	ldr	r3, [r7, #32]
900040c8:	689b      	ldr	r3, [r3, #8]
900040ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
900040ce:	68bb      	ldr	r3, [r7, #8]
900040d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900040d2:	431a      	orrs	r2, r3
900040d4:	6a3b      	ldr	r3, [r7, #32]
900040d6:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
900040d8:	6a3b      	ldr	r3, [r7, #32]
900040da:	68db      	ldr	r3, [r3, #12]
900040dc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
900040e0:	6a3b      	ldr	r3, [r7, #32]
900040e2:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
900040e4:	6a3b      	ldr	r3, [r7, #32]
900040e6:	68db      	ldr	r3, [r3, #12]
900040e8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
900040ec:	6a3b      	ldr	r3, [r7, #32]
900040ee:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
900040f0:	f3bf 8f5f 	dmb	sy
}
900040f4:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
900040f6:	6a3b      	ldr	r3, [r7, #32]
900040f8:	68db      	ldr	r3, [r3, #12]
900040fa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
900040fe:	6a3b      	ldr	r3, [r7, #32]
90004100:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
90004102:	68bb      	ldr	r3, [r7, #8]
90004104:	681b      	ldr	r3, [r3, #0]
90004106:	f003 0302 	and.w	r3, r3, #2
9000410a:	2b00      	cmp	r3, #0
9000410c:	f000 80da 	beq.w	900042c4 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
90004110:	6a3b      	ldr	r3, [r7, #32]
90004112:	68db      	ldr	r3, [r3, #12]
90004114:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
90004118:	68bb      	ldr	r3, [r7, #8]
9000411a:	68db      	ldr	r3, [r3, #12]
9000411c:	431a      	orrs	r2, r3
9000411e:	6a3b      	ldr	r3, [r7, #32]
90004120:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
90004122:	e0cf      	b.n	900042c4 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
90004124:	6a3b      	ldr	r3, [r7, #32]
90004126:	68db      	ldr	r3, [r3, #12]
90004128:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
9000412c:	6a3b      	ldr	r3, [r7, #32]
9000412e:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
90004130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90004132:	3301      	adds	r3, #1
90004134:	62fb      	str	r3, [r7, #44]	; 0x2c
90004136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90004138:	2b03      	cmp	r3, #3
9000413a:	d902      	bls.n	90004142 <ETH_Prepare_Tx_Descriptors+0x326>
9000413c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000413e:	3b04      	subs	r3, #4
90004140:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
90004142:	697b      	ldr	r3, [r7, #20]
90004144:	6afa      	ldr	r2, [r7, #44]	; 0x2c
90004146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
9000414a:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
9000414c:	6a3b      	ldr	r3, [r7, #32]
9000414e:	68db      	ldr	r3, [r3, #12]
90004150:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
90004154:	6a3b      	ldr	r3, [r7, #32]
90004156:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
90004158:	6a3b      	ldr	r3, [r7, #32]
9000415a:	68db      	ldr	r3, [r3, #12]
9000415c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
90004160:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
90004164:	d007      	beq.n	90004176 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
90004166:	697a      	ldr	r2, [r7, #20]
90004168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000416a:	3304      	adds	r3, #4
9000416c:	009b      	lsls	r3, r3, #2
9000416e:	4413      	add	r3, r2
90004170:	685b      	ldr	r3, [r3, #4]
90004172:	2b00      	cmp	r3, #0
90004174:	d029      	beq.n	900041ca <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
90004176:	693b      	ldr	r3, [r7, #16]
90004178:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
9000417a:	697b      	ldr	r3, [r7, #20]
9000417c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
9000417e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90004182:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
90004184:	2300      	movs	r3, #0
90004186:	62bb      	str	r3, [r7, #40]	; 0x28
90004188:	e019      	b.n	900041be <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
9000418a:	f3bf 8f5f 	dmb	sy
}
9000418e:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
90004190:	6a3b      	ldr	r3, [r7, #32]
90004192:	68db      	ldr	r3, [r3, #12]
90004194:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
90004198:	6a3b      	ldr	r3, [r7, #32]
9000419a:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
9000419c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000419e:	3301      	adds	r3, #1
900041a0:	62fb      	str	r3, [r7, #44]	; 0x2c
900041a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900041a4:	2b03      	cmp	r3, #3
900041a6:	d902      	bls.n	900041ae <ETH_Prepare_Tx_Descriptors+0x392>
900041a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900041aa:	3b04      	subs	r3, #4
900041ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
900041ae:	697b      	ldr	r3, [r7, #20]
900041b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
900041b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
900041b6:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
900041b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
900041ba:	3301      	adds	r3, #1
900041bc:	62bb      	str	r3, [r7, #40]	; 0x28
900041be:	6aba      	ldr	r2, [r7, #40]	; 0x28
900041c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900041c2:	429a      	cmp	r2, r3
900041c4:	d3e1      	bcc.n	9000418a <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
900041c6:	2302      	movs	r3, #2
900041c8:	e0ae      	b.n	90004328 <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
900041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900041cc:	3301      	adds	r3, #1
900041ce:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
900041d0:	69fb      	ldr	r3, [r7, #28]
900041d2:	689b      	ldr	r3, [r3, #8]
900041d4:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
900041d6:	69fb      	ldr	r3, [r7, #28]
900041d8:	681b      	ldr	r3, [r3, #0]
900041da:	461a      	mov	r2, r3
900041dc:	6a3b      	ldr	r3, [r7, #32]
900041de:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
900041e0:	6a3b      	ldr	r3, [r7, #32]
900041e2:	689a      	ldr	r2, [r3, #8]
900041e4:	4b1f      	ldr	r3, [pc, #124]	; (90004264 <ETH_Prepare_Tx_Descriptors+0x448>)
900041e6:	4013      	ands	r3, r2
900041e8:	69fa      	ldr	r2, [r7, #28]
900041ea:	6852      	ldr	r2, [r2, #4]
900041ec:	431a      	orrs	r2, r3
900041ee:	6a3b      	ldr	r3, [r7, #32]
900041f0:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
900041f2:	69fb      	ldr	r3, [r7, #28]
900041f4:	689b      	ldr	r3, [r3, #8]
900041f6:	2b00      	cmp	r3, #0
900041f8:	d012      	beq.n	90004220 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
900041fa:	69fb      	ldr	r3, [r7, #28]
900041fc:	689b      	ldr	r3, [r3, #8]
900041fe:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
90004200:	69fb      	ldr	r3, [r7, #28]
90004202:	681b      	ldr	r3, [r3, #0]
90004204:	461a      	mov	r2, r3
90004206:	6a3b      	ldr	r3, [r7, #32]
90004208:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
9000420a:	6a3b      	ldr	r3, [r7, #32]
9000420c:	689a      	ldr	r2, [r3, #8]
9000420e:	4b16      	ldr	r3, [pc, #88]	; (90004268 <ETH_Prepare_Tx_Descriptors+0x44c>)
90004210:	4013      	ands	r3, r2
90004212:	69fa      	ldr	r2, [r7, #28]
90004214:	6852      	ldr	r2, [r2, #4]
90004216:	0412      	lsls	r2, r2, #16
90004218:	431a      	orrs	r2, r3
9000421a:	6a3b      	ldr	r3, [r7, #32]
9000421c:	609a      	str	r2, [r3, #8]
9000421e:	e008      	b.n	90004232 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
90004220:	6a3b      	ldr	r3, [r7, #32]
90004222:	2200      	movs	r2, #0
90004224:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
90004226:	6a3b      	ldr	r3, [r7, #32]
90004228:	689a      	ldr	r2, [r3, #8]
9000422a:	4b0f      	ldr	r3, [pc, #60]	; (90004268 <ETH_Prepare_Tx_Descriptors+0x44c>)
9000422c:	4013      	ands	r3, r2
9000422e:	6a3a      	ldr	r2, [r7, #32]
90004230:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
90004232:	68bb      	ldr	r3, [r7, #8]
90004234:	681b      	ldr	r3, [r3, #0]
90004236:	f003 0310 	and.w	r3, r3, #16
9000423a:	2b00      	cmp	r3, #0
9000423c:	d018      	beq.n	90004270 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
9000423e:	6a3b      	ldr	r3, [r7, #32]
90004240:	68da      	ldr	r2, [r3, #12]
90004242:	4b0a      	ldr	r3, [pc, #40]	; (9000426c <ETH_Prepare_Tx_Descriptors+0x450>)
90004244:	4013      	ands	r3, r2
90004246:	68ba      	ldr	r2, [r7, #8]
90004248:	69d2      	ldr	r2, [r2, #28]
9000424a:	431a      	orrs	r2, r3
9000424c:	6a3b      	ldr	r3, [r7, #32]
9000424e:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
90004250:	6a3b      	ldr	r3, [r7, #32]
90004252:	68db      	ldr	r3, [r3, #12]
90004254:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
90004258:	6a3b      	ldr	r3, [r7, #32]
9000425a:	60da      	str	r2, [r3, #12]
9000425c:	e020      	b.n	900042a0 <ETH_Prepare_Tx_Descriptors+0x484>
9000425e:	bf00      	nop
90004260:	ffff8000 	.word	0xffff8000
90004264:	ffffc000 	.word	0xffffc000
90004268:	c000ffff 	.word	0xc000ffff
9000426c:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
90004270:	6a3b      	ldr	r3, [r7, #32]
90004272:	68da      	ldr	r2, [r3, #12]
90004274:	4b2f      	ldr	r3, [pc, #188]	; (90004334 <ETH_Prepare_Tx_Descriptors+0x518>)
90004276:	4013      	ands	r3, r2
90004278:	68ba      	ldr	r2, [r7, #8]
9000427a:	6852      	ldr	r2, [r2, #4]
9000427c:	431a      	orrs	r2, r3
9000427e:	6a3b      	ldr	r3, [r7, #32]
90004280:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
90004282:	68bb      	ldr	r3, [r7, #8]
90004284:	681b      	ldr	r3, [r3, #0]
90004286:	f003 0301 	and.w	r3, r3, #1
9000428a:	2b00      	cmp	r3, #0
9000428c:	d008      	beq.n	900042a0 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
9000428e:	6a3b      	ldr	r3, [r7, #32]
90004290:	68db      	ldr	r3, [r3, #12]
90004292:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
90004296:	68bb      	ldr	r3, [r7, #8]
90004298:	695b      	ldr	r3, [r3, #20]
9000429a:	431a      	orrs	r2, r3
9000429c:	6a3b      	ldr	r3, [r7, #32]
9000429e:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
900042a0:	69bb      	ldr	r3, [r7, #24]
900042a2:	3301      	adds	r3, #1
900042a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
900042a6:	f3bf 8f5f 	dmb	sy
}
900042aa:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
900042ac:	6a3b      	ldr	r3, [r7, #32]
900042ae:	68db      	ldr	r3, [r3, #12]
900042b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
900042b4:	6a3b      	ldr	r3, [r7, #32]
900042b6:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
900042b8:	6a3b      	ldr	r3, [r7, #32]
900042ba:	68db      	ldr	r3, [r3, #12]
900042bc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
900042c0:	6a3b      	ldr	r3, [r7, #32]
900042c2:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
900042c4:	69fb      	ldr	r3, [r7, #28]
900042c6:	689b      	ldr	r3, [r3, #8]
900042c8:	2b00      	cmp	r3, #0
900042ca:	f47f af2b 	bne.w	90004124 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
900042ce:	687b      	ldr	r3, [r7, #4]
900042d0:	2b00      	cmp	r3, #0
900042d2:	d006      	beq.n	900042e2 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
900042d4:	6a3b      	ldr	r3, [r7, #32]
900042d6:	689b      	ldr	r3, [r3, #8]
900042d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
900042dc:	6a3b      	ldr	r3, [r7, #32]
900042de:	609a      	str	r2, [r3, #8]
900042e0:	e005      	b.n	900042ee <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
900042e2:	6a3b      	ldr	r3, [r7, #32]
900042e4:	689b      	ldr	r3, [r3, #8]
900042e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
900042ea:	6a3b      	ldr	r3, [r7, #32]
900042ec:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
900042ee:	6a3b      	ldr	r3, [r7, #32]
900042f0:	68db      	ldr	r3, [r3, #12]
900042f2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
900042f6:	6a3b      	ldr	r3, [r7, #32]
900042f8:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
900042fa:	697b      	ldr	r3, [r7, #20]
900042fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
900042fe:	6979      	ldr	r1, [r7, #20]
90004300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90004302:	3304      	adds	r3, #4
90004304:	009b      	lsls	r3, r3, #2
90004306:	440b      	add	r3, r1
90004308:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
9000430a:	697b      	ldr	r3, [r7, #20]
9000430c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
9000430e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
90004310:	b672      	cpsid	i
}
90004312:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
90004314:	697b      	ldr	r3, [r7, #20]
90004316:	6a9a      	ldr	r2, [r3, #40]	; 0x28
90004318:	69bb      	ldr	r3, [r7, #24]
9000431a:	4413      	add	r3, r2
9000431c:	1c5a      	adds	r2, r3, #1
9000431e:	697b      	ldr	r3, [r7, #20]
90004320:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
90004322:	b662      	cpsie	i
}
90004324:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
90004326:	2300      	movs	r3, #0
}
90004328:	4618      	mov	r0, r3
9000432a:	3734      	adds	r7, #52	; 0x34
9000432c:	46bd      	mov	sp, r7
9000432e:	f85d 7b04 	ldr.w	r7, [sp], #4
90004332:	4770      	bx	lr
90004334:	ffff8000 	.word	0xffff8000

90004338 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
90004338:	b480      	push	{r7}
9000433a:	b089      	sub	sp, #36	; 0x24
9000433c:	af00      	add	r7, sp, #0
9000433e:	6078      	str	r0, [r7, #4]
90004340:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
90004342:	2300      	movs	r3, #0
90004344:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
90004346:	4b89      	ldr	r3, [pc, #548]	; (9000456c <HAL_GPIO_Init+0x234>)
90004348:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
9000434a:	e194      	b.n	90004676 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
9000434c:	683b      	ldr	r3, [r7, #0]
9000434e:	681a      	ldr	r2, [r3, #0]
90004350:	2101      	movs	r1, #1
90004352:	69fb      	ldr	r3, [r7, #28]
90004354:	fa01 f303 	lsl.w	r3, r1, r3
90004358:	4013      	ands	r3, r2
9000435a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
9000435c:	693b      	ldr	r3, [r7, #16]
9000435e:	2b00      	cmp	r3, #0
90004360:	f000 8186 	beq.w	90004670 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
90004364:	683b      	ldr	r3, [r7, #0]
90004366:	685b      	ldr	r3, [r3, #4]
90004368:	f003 0303 	and.w	r3, r3, #3
9000436c:	2b01      	cmp	r3, #1
9000436e:	d005      	beq.n	9000437c <HAL_GPIO_Init+0x44>
90004370:	683b      	ldr	r3, [r7, #0]
90004372:	685b      	ldr	r3, [r3, #4]
90004374:	f003 0303 	and.w	r3, r3, #3
90004378:	2b02      	cmp	r3, #2
9000437a:	d130      	bne.n	900043de <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
9000437c:	687b      	ldr	r3, [r7, #4]
9000437e:	689b      	ldr	r3, [r3, #8]
90004380:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
90004382:	69fb      	ldr	r3, [r7, #28]
90004384:	005b      	lsls	r3, r3, #1
90004386:	2203      	movs	r2, #3
90004388:	fa02 f303 	lsl.w	r3, r2, r3
9000438c:	43db      	mvns	r3, r3
9000438e:	69ba      	ldr	r2, [r7, #24]
90004390:	4013      	ands	r3, r2
90004392:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
90004394:	683b      	ldr	r3, [r7, #0]
90004396:	68da      	ldr	r2, [r3, #12]
90004398:	69fb      	ldr	r3, [r7, #28]
9000439a:	005b      	lsls	r3, r3, #1
9000439c:	fa02 f303 	lsl.w	r3, r2, r3
900043a0:	69ba      	ldr	r2, [r7, #24]
900043a2:	4313      	orrs	r3, r2
900043a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
900043a6:	687b      	ldr	r3, [r7, #4]
900043a8:	69ba      	ldr	r2, [r7, #24]
900043aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
900043ac:	687b      	ldr	r3, [r7, #4]
900043ae:	685b      	ldr	r3, [r3, #4]
900043b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
900043b2:	2201      	movs	r2, #1
900043b4:	69fb      	ldr	r3, [r7, #28]
900043b6:	fa02 f303 	lsl.w	r3, r2, r3
900043ba:	43db      	mvns	r3, r3
900043bc:	69ba      	ldr	r2, [r7, #24]
900043be:	4013      	ands	r3, r2
900043c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
900043c2:	683b      	ldr	r3, [r7, #0]
900043c4:	685b      	ldr	r3, [r3, #4]
900043c6:	091b      	lsrs	r3, r3, #4
900043c8:	f003 0201 	and.w	r2, r3, #1
900043cc:	69fb      	ldr	r3, [r7, #28]
900043ce:	fa02 f303 	lsl.w	r3, r2, r3
900043d2:	69ba      	ldr	r2, [r7, #24]
900043d4:	4313      	orrs	r3, r2
900043d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
900043d8:	687b      	ldr	r3, [r7, #4]
900043da:	69ba      	ldr	r2, [r7, #24]
900043dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
900043de:	683b      	ldr	r3, [r7, #0]
900043e0:	685b      	ldr	r3, [r3, #4]
900043e2:	f003 0303 	and.w	r3, r3, #3
900043e6:	2b03      	cmp	r3, #3
900043e8:	d017      	beq.n	9000441a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
900043ea:	687b      	ldr	r3, [r7, #4]
900043ec:	68db      	ldr	r3, [r3, #12]
900043ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
900043f0:	69fb      	ldr	r3, [r7, #28]
900043f2:	005b      	lsls	r3, r3, #1
900043f4:	2203      	movs	r2, #3
900043f6:	fa02 f303 	lsl.w	r3, r2, r3
900043fa:	43db      	mvns	r3, r3
900043fc:	69ba      	ldr	r2, [r7, #24]
900043fe:	4013      	ands	r3, r2
90004400:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
90004402:	683b      	ldr	r3, [r7, #0]
90004404:	689a      	ldr	r2, [r3, #8]
90004406:	69fb      	ldr	r3, [r7, #28]
90004408:	005b      	lsls	r3, r3, #1
9000440a:	fa02 f303 	lsl.w	r3, r2, r3
9000440e:	69ba      	ldr	r2, [r7, #24]
90004410:	4313      	orrs	r3, r2
90004412:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
90004414:	687b      	ldr	r3, [r7, #4]
90004416:	69ba      	ldr	r2, [r7, #24]
90004418:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
9000441a:	683b      	ldr	r3, [r7, #0]
9000441c:	685b      	ldr	r3, [r3, #4]
9000441e:	f003 0303 	and.w	r3, r3, #3
90004422:	2b02      	cmp	r3, #2
90004424:	d123      	bne.n	9000446e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
90004426:	69fb      	ldr	r3, [r7, #28]
90004428:	08da      	lsrs	r2, r3, #3
9000442a:	687b      	ldr	r3, [r7, #4]
9000442c:	3208      	adds	r2, #8
9000442e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
90004432:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90004434:	69fb      	ldr	r3, [r7, #28]
90004436:	f003 0307 	and.w	r3, r3, #7
9000443a:	009b      	lsls	r3, r3, #2
9000443c:	220f      	movs	r2, #15
9000443e:	fa02 f303 	lsl.w	r3, r2, r3
90004442:	43db      	mvns	r3, r3
90004444:	69ba      	ldr	r2, [r7, #24]
90004446:	4013      	ands	r3, r2
90004448:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
9000444a:	683b      	ldr	r3, [r7, #0]
9000444c:	691a      	ldr	r2, [r3, #16]
9000444e:	69fb      	ldr	r3, [r7, #28]
90004450:	f003 0307 	and.w	r3, r3, #7
90004454:	009b      	lsls	r3, r3, #2
90004456:	fa02 f303 	lsl.w	r3, r2, r3
9000445a:	69ba      	ldr	r2, [r7, #24]
9000445c:	4313      	orrs	r3, r2
9000445e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
90004460:	69fb      	ldr	r3, [r7, #28]
90004462:	08da      	lsrs	r2, r3, #3
90004464:	687b      	ldr	r3, [r7, #4]
90004466:	3208      	adds	r2, #8
90004468:	69b9      	ldr	r1, [r7, #24]
9000446a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
9000446e:	687b      	ldr	r3, [r7, #4]
90004470:	681b      	ldr	r3, [r3, #0]
90004472:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
90004474:	69fb      	ldr	r3, [r7, #28]
90004476:	005b      	lsls	r3, r3, #1
90004478:	2203      	movs	r2, #3
9000447a:	fa02 f303 	lsl.w	r3, r2, r3
9000447e:	43db      	mvns	r3, r3
90004480:	69ba      	ldr	r2, [r7, #24]
90004482:	4013      	ands	r3, r2
90004484:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
90004486:	683b      	ldr	r3, [r7, #0]
90004488:	685b      	ldr	r3, [r3, #4]
9000448a:	f003 0203 	and.w	r2, r3, #3
9000448e:	69fb      	ldr	r3, [r7, #28]
90004490:	005b      	lsls	r3, r3, #1
90004492:	fa02 f303 	lsl.w	r3, r2, r3
90004496:	69ba      	ldr	r2, [r7, #24]
90004498:	4313      	orrs	r3, r2
9000449a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
9000449c:	687b      	ldr	r3, [r7, #4]
9000449e:	69ba      	ldr	r2, [r7, #24]
900044a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
900044a2:	683b      	ldr	r3, [r7, #0]
900044a4:	685b      	ldr	r3, [r3, #4]
900044a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
900044aa:	2b00      	cmp	r3, #0
900044ac:	f000 80e0 	beq.w	90004670 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
900044b0:	4b2f      	ldr	r3, [pc, #188]	; (90004570 <HAL_GPIO_Init+0x238>)
900044b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
900044b6:	4a2e      	ldr	r2, [pc, #184]	; (90004570 <HAL_GPIO_Init+0x238>)
900044b8:	f043 0302 	orr.w	r3, r3, #2
900044bc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
900044c0:	4b2b      	ldr	r3, [pc, #172]	; (90004570 <HAL_GPIO_Init+0x238>)
900044c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
900044c6:	f003 0302 	and.w	r3, r3, #2
900044ca:	60fb      	str	r3, [r7, #12]
900044cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
900044ce:	4a29      	ldr	r2, [pc, #164]	; (90004574 <HAL_GPIO_Init+0x23c>)
900044d0:	69fb      	ldr	r3, [r7, #28]
900044d2:	089b      	lsrs	r3, r3, #2
900044d4:	3302      	adds	r3, #2
900044d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
900044da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
900044dc:	69fb      	ldr	r3, [r7, #28]
900044de:	f003 0303 	and.w	r3, r3, #3
900044e2:	009b      	lsls	r3, r3, #2
900044e4:	220f      	movs	r2, #15
900044e6:	fa02 f303 	lsl.w	r3, r2, r3
900044ea:	43db      	mvns	r3, r3
900044ec:	69ba      	ldr	r2, [r7, #24]
900044ee:	4013      	ands	r3, r2
900044f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
900044f2:	687b      	ldr	r3, [r7, #4]
900044f4:	4a20      	ldr	r2, [pc, #128]	; (90004578 <HAL_GPIO_Init+0x240>)
900044f6:	4293      	cmp	r3, r2
900044f8:	d052      	beq.n	900045a0 <HAL_GPIO_Init+0x268>
900044fa:	687b      	ldr	r3, [r7, #4]
900044fc:	4a1f      	ldr	r2, [pc, #124]	; (9000457c <HAL_GPIO_Init+0x244>)
900044fe:	4293      	cmp	r3, r2
90004500:	d031      	beq.n	90004566 <HAL_GPIO_Init+0x22e>
90004502:	687b      	ldr	r3, [r7, #4]
90004504:	4a1e      	ldr	r2, [pc, #120]	; (90004580 <HAL_GPIO_Init+0x248>)
90004506:	4293      	cmp	r3, r2
90004508:	d02b      	beq.n	90004562 <HAL_GPIO_Init+0x22a>
9000450a:	687b      	ldr	r3, [r7, #4]
9000450c:	4a1d      	ldr	r2, [pc, #116]	; (90004584 <HAL_GPIO_Init+0x24c>)
9000450e:	4293      	cmp	r3, r2
90004510:	d025      	beq.n	9000455e <HAL_GPIO_Init+0x226>
90004512:	687b      	ldr	r3, [r7, #4]
90004514:	4a1c      	ldr	r2, [pc, #112]	; (90004588 <HAL_GPIO_Init+0x250>)
90004516:	4293      	cmp	r3, r2
90004518:	d01f      	beq.n	9000455a <HAL_GPIO_Init+0x222>
9000451a:	687b      	ldr	r3, [r7, #4]
9000451c:	4a1b      	ldr	r2, [pc, #108]	; (9000458c <HAL_GPIO_Init+0x254>)
9000451e:	4293      	cmp	r3, r2
90004520:	d019      	beq.n	90004556 <HAL_GPIO_Init+0x21e>
90004522:	687b      	ldr	r3, [r7, #4]
90004524:	4a1a      	ldr	r2, [pc, #104]	; (90004590 <HAL_GPIO_Init+0x258>)
90004526:	4293      	cmp	r3, r2
90004528:	d013      	beq.n	90004552 <HAL_GPIO_Init+0x21a>
9000452a:	687b      	ldr	r3, [r7, #4]
9000452c:	4a19      	ldr	r2, [pc, #100]	; (90004594 <HAL_GPIO_Init+0x25c>)
9000452e:	4293      	cmp	r3, r2
90004530:	d00d      	beq.n	9000454e <HAL_GPIO_Init+0x216>
90004532:	687b      	ldr	r3, [r7, #4]
90004534:	4a18      	ldr	r2, [pc, #96]	; (90004598 <HAL_GPIO_Init+0x260>)
90004536:	4293      	cmp	r3, r2
90004538:	d007      	beq.n	9000454a <HAL_GPIO_Init+0x212>
9000453a:	687b      	ldr	r3, [r7, #4]
9000453c:	4a17      	ldr	r2, [pc, #92]	; (9000459c <HAL_GPIO_Init+0x264>)
9000453e:	4293      	cmp	r3, r2
90004540:	d101      	bne.n	90004546 <HAL_GPIO_Init+0x20e>
90004542:	2309      	movs	r3, #9
90004544:	e02d      	b.n	900045a2 <HAL_GPIO_Init+0x26a>
90004546:	230a      	movs	r3, #10
90004548:	e02b      	b.n	900045a2 <HAL_GPIO_Init+0x26a>
9000454a:	2308      	movs	r3, #8
9000454c:	e029      	b.n	900045a2 <HAL_GPIO_Init+0x26a>
9000454e:	2307      	movs	r3, #7
90004550:	e027      	b.n	900045a2 <HAL_GPIO_Init+0x26a>
90004552:	2306      	movs	r3, #6
90004554:	e025      	b.n	900045a2 <HAL_GPIO_Init+0x26a>
90004556:	2305      	movs	r3, #5
90004558:	e023      	b.n	900045a2 <HAL_GPIO_Init+0x26a>
9000455a:	2304      	movs	r3, #4
9000455c:	e021      	b.n	900045a2 <HAL_GPIO_Init+0x26a>
9000455e:	2303      	movs	r3, #3
90004560:	e01f      	b.n	900045a2 <HAL_GPIO_Init+0x26a>
90004562:	2302      	movs	r3, #2
90004564:	e01d      	b.n	900045a2 <HAL_GPIO_Init+0x26a>
90004566:	2301      	movs	r3, #1
90004568:	e01b      	b.n	900045a2 <HAL_GPIO_Init+0x26a>
9000456a:	bf00      	nop
9000456c:	58000080 	.word	0x58000080
90004570:	58024400 	.word	0x58024400
90004574:	58000400 	.word	0x58000400
90004578:	58020000 	.word	0x58020000
9000457c:	58020400 	.word	0x58020400
90004580:	58020800 	.word	0x58020800
90004584:	58020c00 	.word	0x58020c00
90004588:	58021000 	.word	0x58021000
9000458c:	58021400 	.word	0x58021400
90004590:	58021800 	.word	0x58021800
90004594:	58021c00 	.word	0x58021c00
90004598:	58022000 	.word	0x58022000
9000459c:	58022400 	.word	0x58022400
900045a0:	2300      	movs	r3, #0
900045a2:	69fa      	ldr	r2, [r7, #28]
900045a4:	f002 0203 	and.w	r2, r2, #3
900045a8:	0092      	lsls	r2, r2, #2
900045aa:	4093      	lsls	r3, r2
900045ac:	69ba      	ldr	r2, [r7, #24]
900045ae:	4313      	orrs	r3, r2
900045b0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
900045b2:	4938      	ldr	r1, [pc, #224]	; (90004694 <HAL_GPIO_Init+0x35c>)
900045b4:	69fb      	ldr	r3, [r7, #28]
900045b6:	089b      	lsrs	r3, r3, #2
900045b8:	3302      	adds	r3, #2
900045ba:	69ba      	ldr	r2, [r7, #24]
900045bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
900045c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
900045c4:	681b      	ldr	r3, [r3, #0]
900045c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
900045c8:	693b      	ldr	r3, [r7, #16]
900045ca:	43db      	mvns	r3, r3
900045cc:	69ba      	ldr	r2, [r7, #24]
900045ce:	4013      	ands	r3, r2
900045d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
900045d2:	683b      	ldr	r3, [r7, #0]
900045d4:	685b      	ldr	r3, [r3, #4]
900045d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
900045da:	2b00      	cmp	r3, #0
900045dc:	d003      	beq.n	900045e6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
900045de:	69ba      	ldr	r2, [r7, #24]
900045e0:	693b      	ldr	r3, [r7, #16]
900045e2:	4313      	orrs	r3, r2
900045e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
900045e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
900045ea:	69bb      	ldr	r3, [r7, #24]
900045ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
900045ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
900045f2:	685b      	ldr	r3, [r3, #4]
900045f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
900045f6:	693b      	ldr	r3, [r7, #16]
900045f8:	43db      	mvns	r3, r3
900045fa:	69ba      	ldr	r2, [r7, #24]
900045fc:	4013      	ands	r3, r2
900045fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
90004600:	683b      	ldr	r3, [r7, #0]
90004602:	685b      	ldr	r3, [r3, #4]
90004604:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
90004608:	2b00      	cmp	r3, #0
9000460a:	d003      	beq.n	90004614 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
9000460c:	69ba      	ldr	r2, [r7, #24]
9000460e:	693b      	ldr	r3, [r7, #16]
90004610:	4313      	orrs	r3, r2
90004612:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
90004614:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
90004618:	69bb      	ldr	r3, [r7, #24]
9000461a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
9000461c:	697b      	ldr	r3, [r7, #20]
9000461e:	685b      	ldr	r3, [r3, #4]
90004620:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
90004622:	693b      	ldr	r3, [r7, #16]
90004624:	43db      	mvns	r3, r3
90004626:	69ba      	ldr	r2, [r7, #24]
90004628:	4013      	ands	r3, r2
9000462a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
9000462c:	683b      	ldr	r3, [r7, #0]
9000462e:	685b      	ldr	r3, [r3, #4]
90004630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90004634:	2b00      	cmp	r3, #0
90004636:	d003      	beq.n	90004640 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
90004638:	69ba      	ldr	r2, [r7, #24]
9000463a:	693b      	ldr	r3, [r7, #16]
9000463c:	4313      	orrs	r3, r2
9000463e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
90004640:	697b      	ldr	r3, [r7, #20]
90004642:	69ba      	ldr	r2, [r7, #24]
90004644:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
90004646:	697b      	ldr	r3, [r7, #20]
90004648:	681b      	ldr	r3, [r3, #0]
9000464a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
9000464c:	693b      	ldr	r3, [r7, #16]
9000464e:	43db      	mvns	r3, r3
90004650:	69ba      	ldr	r2, [r7, #24]
90004652:	4013      	ands	r3, r2
90004654:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
90004656:	683b      	ldr	r3, [r7, #0]
90004658:	685b      	ldr	r3, [r3, #4]
9000465a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
9000465e:	2b00      	cmp	r3, #0
90004660:	d003      	beq.n	9000466a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
90004662:	69ba      	ldr	r2, [r7, #24]
90004664:	693b      	ldr	r3, [r7, #16]
90004666:	4313      	orrs	r3, r2
90004668:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
9000466a:	697b      	ldr	r3, [r7, #20]
9000466c:	69ba      	ldr	r2, [r7, #24]
9000466e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
90004670:	69fb      	ldr	r3, [r7, #28]
90004672:	3301      	adds	r3, #1
90004674:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90004676:	683b      	ldr	r3, [r7, #0]
90004678:	681a      	ldr	r2, [r3, #0]
9000467a:	69fb      	ldr	r3, [r7, #28]
9000467c:	fa22 f303 	lsr.w	r3, r2, r3
90004680:	2b00      	cmp	r3, #0
90004682:	f47f ae63 	bne.w	9000434c <HAL_GPIO_Init+0x14>
  }
}
90004686:	bf00      	nop
90004688:	bf00      	nop
9000468a:	3724      	adds	r7, #36	; 0x24
9000468c:	46bd      	mov	sp, r7
9000468e:	f85d 7b04 	ldr.w	r7, [sp], #4
90004692:	4770      	bx	lr
90004694:	58000400 	.word	0x58000400

90004698 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
90004698:	b480      	push	{r7}
9000469a:	b083      	sub	sp, #12
9000469c:	af00      	add	r7, sp, #0
9000469e:	6078      	str	r0, [r7, #4]
900046a0:	460b      	mov	r3, r1
900046a2:	807b      	strh	r3, [r7, #2]
900046a4:	4613      	mov	r3, r2
900046a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
900046a8:	787b      	ldrb	r3, [r7, #1]
900046aa:	2b00      	cmp	r3, #0
900046ac:	d003      	beq.n	900046b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
900046ae:	887a      	ldrh	r2, [r7, #2]
900046b0:	687b      	ldr	r3, [r7, #4]
900046b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
900046b4:	e003      	b.n	900046be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
900046b6:	887b      	ldrh	r3, [r7, #2]
900046b8:	041a      	lsls	r2, r3, #16
900046ba:	687b      	ldr	r3, [r7, #4]
900046bc:	619a      	str	r2, [r3, #24]
}
900046be:	bf00      	nop
900046c0:	370c      	adds	r7, #12
900046c2:	46bd      	mov	sp, r7
900046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
900046c8:	4770      	bx	lr

900046ca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
900046ca:	b480      	push	{r7}
900046cc:	b085      	sub	sp, #20
900046ce:	af00      	add	r7, sp, #0
900046d0:	6078      	str	r0, [r7, #4]
900046d2:	460b      	mov	r3, r1
900046d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
900046d6:	687b      	ldr	r3, [r7, #4]
900046d8:	695b      	ldr	r3, [r3, #20]
900046da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
900046dc:	887a      	ldrh	r2, [r7, #2]
900046de:	68fb      	ldr	r3, [r7, #12]
900046e0:	4013      	ands	r3, r2
900046e2:	041a      	lsls	r2, r3, #16
900046e4:	68fb      	ldr	r3, [r7, #12]
900046e6:	43d9      	mvns	r1, r3
900046e8:	887b      	ldrh	r3, [r7, #2]
900046ea:	400b      	ands	r3, r1
900046ec:	431a      	orrs	r2, r3
900046ee:	687b      	ldr	r3, [r7, #4]
900046f0:	619a      	str	r2, [r3, #24]
}
900046f2:	bf00      	nop
900046f4:	3714      	adds	r7, #20
900046f6:	46bd      	mov	sp, r7
900046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
900046fc:	4770      	bx	lr
	...

90004700 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
90004700:	b480      	push	{r7}
90004702:	b089      	sub	sp, #36	; 0x24
90004704:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
90004706:	4bb3      	ldr	r3, [pc, #716]	; (900049d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
90004708:	691b      	ldr	r3, [r3, #16]
9000470a:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000470e:	2b18      	cmp	r3, #24
90004710:	f200 8155 	bhi.w	900049be <HAL_RCC_GetSysClockFreq+0x2be>
90004714:	a201      	add	r2, pc, #4	; (adr r2, 9000471c <HAL_RCC_GetSysClockFreq+0x1c>)
90004716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000471a:	bf00      	nop
9000471c:	90004781 	.word	0x90004781
90004720:	900049bf 	.word	0x900049bf
90004724:	900049bf 	.word	0x900049bf
90004728:	900049bf 	.word	0x900049bf
9000472c:	900049bf 	.word	0x900049bf
90004730:	900049bf 	.word	0x900049bf
90004734:	900049bf 	.word	0x900049bf
90004738:	900049bf 	.word	0x900049bf
9000473c:	900047a7 	.word	0x900047a7
90004740:	900049bf 	.word	0x900049bf
90004744:	900049bf 	.word	0x900049bf
90004748:	900049bf 	.word	0x900049bf
9000474c:	900049bf 	.word	0x900049bf
90004750:	900049bf 	.word	0x900049bf
90004754:	900049bf 	.word	0x900049bf
90004758:	900049bf 	.word	0x900049bf
9000475c:	900047ad 	.word	0x900047ad
90004760:	900049bf 	.word	0x900049bf
90004764:	900049bf 	.word	0x900049bf
90004768:	900049bf 	.word	0x900049bf
9000476c:	900049bf 	.word	0x900049bf
90004770:	900049bf 	.word	0x900049bf
90004774:	900049bf 	.word	0x900049bf
90004778:	900049bf 	.word	0x900049bf
9000477c:	900047b3 	.word	0x900047b3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90004780:	4b94      	ldr	r3, [pc, #592]	; (900049d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
90004782:	681b      	ldr	r3, [r3, #0]
90004784:	f003 0320 	and.w	r3, r3, #32
90004788:	2b00      	cmp	r3, #0
9000478a:	d009      	beq.n	900047a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
9000478c:	4b91      	ldr	r3, [pc, #580]	; (900049d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000478e:	681b      	ldr	r3, [r3, #0]
90004790:	08db      	lsrs	r3, r3, #3
90004792:	f003 0303 	and.w	r3, r3, #3
90004796:	4a90      	ldr	r2, [pc, #576]	; (900049d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
90004798:	fa22 f303 	lsr.w	r3, r2, r3
9000479c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
9000479e:	e111      	b.n	900049c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
900047a0:	4b8d      	ldr	r3, [pc, #564]	; (900049d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
900047a2:	61bb      	str	r3, [r7, #24]
    break;
900047a4:	e10e      	b.n	900049c4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
900047a6:	4b8d      	ldr	r3, [pc, #564]	; (900049dc <HAL_RCC_GetSysClockFreq+0x2dc>)
900047a8:	61bb      	str	r3, [r7, #24]
    break;
900047aa:	e10b      	b.n	900049c4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
900047ac:	4b8c      	ldr	r3, [pc, #560]	; (900049e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
900047ae:	61bb      	str	r3, [r7, #24]
    break;
900047b0:	e108      	b.n	900049c4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
900047b2:	4b88      	ldr	r3, [pc, #544]	; (900049d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
900047b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900047b6:	f003 0303 	and.w	r3, r3, #3
900047ba:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
900047bc:	4b85      	ldr	r3, [pc, #532]	; (900049d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
900047be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900047c0:	091b      	lsrs	r3, r3, #4
900047c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
900047c6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
900047c8:	4b82      	ldr	r3, [pc, #520]	; (900049d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
900047ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900047cc:	f003 0301 	and.w	r3, r3, #1
900047d0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
900047d2:	4b80      	ldr	r3, [pc, #512]	; (900049d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
900047d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
900047d6:	08db      	lsrs	r3, r3, #3
900047d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
900047dc:	68fa      	ldr	r2, [r7, #12]
900047de:	fb02 f303 	mul.w	r3, r2, r3
900047e2:	ee07 3a90 	vmov	s15, r3
900047e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
900047ea:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
900047ee:	693b      	ldr	r3, [r7, #16]
900047f0:	2b00      	cmp	r3, #0
900047f2:	f000 80e1 	beq.w	900049b8 <HAL_RCC_GetSysClockFreq+0x2b8>
900047f6:	697b      	ldr	r3, [r7, #20]
900047f8:	2b02      	cmp	r3, #2
900047fa:	f000 8083 	beq.w	90004904 <HAL_RCC_GetSysClockFreq+0x204>
900047fe:	697b      	ldr	r3, [r7, #20]
90004800:	2b02      	cmp	r3, #2
90004802:	f200 80a1 	bhi.w	90004948 <HAL_RCC_GetSysClockFreq+0x248>
90004806:	697b      	ldr	r3, [r7, #20]
90004808:	2b00      	cmp	r3, #0
9000480a:	d003      	beq.n	90004814 <HAL_RCC_GetSysClockFreq+0x114>
9000480c:	697b      	ldr	r3, [r7, #20]
9000480e:	2b01      	cmp	r3, #1
90004810:	d056      	beq.n	900048c0 <HAL_RCC_GetSysClockFreq+0x1c0>
90004812:	e099      	b.n	90004948 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90004814:	4b6f      	ldr	r3, [pc, #444]	; (900049d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
90004816:	681b      	ldr	r3, [r3, #0]
90004818:	f003 0320 	and.w	r3, r3, #32
9000481c:	2b00      	cmp	r3, #0
9000481e:	d02d      	beq.n	9000487c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
90004820:	4b6c      	ldr	r3, [pc, #432]	; (900049d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
90004822:	681b      	ldr	r3, [r3, #0]
90004824:	08db      	lsrs	r3, r3, #3
90004826:	f003 0303 	and.w	r3, r3, #3
9000482a:	4a6b      	ldr	r2, [pc, #428]	; (900049d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
9000482c:	fa22 f303 	lsr.w	r3, r2, r3
90004830:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
90004832:	687b      	ldr	r3, [r7, #4]
90004834:	ee07 3a90 	vmov	s15, r3
90004838:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000483c:	693b      	ldr	r3, [r7, #16]
9000483e:	ee07 3a90 	vmov	s15, r3
90004842:	eef8 7a67 	vcvt.f32.u32	s15, s15
90004846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000484a:	4b62      	ldr	r3, [pc, #392]	; (900049d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000484c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000484e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90004852:	ee07 3a90 	vmov	s15, r3
90004856:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000485a:	ed97 6a02 	vldr	s12, [r7, #8]
9000485e:	eddf 5a61 	vldr	s11, [pc, #388]	; 900049e4 <HAL_RCC_GetSysClockFreq+0x2e4>
90004862:	eec6 7a25 	vdiv.f32	s15, s12, s11
90004866:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000486a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9000486e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90004872:	ee67 7a27 	vmul.f32	s15, s14, s15
90004876:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
9000487a:	e087      	b.n	9000498c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
9000487c:	693b      	ldr	r3, [r7, #16]
9000487e:	ee07 3a90 	vmov	s15, r3
90004882:	eef8 7a67 	vcvt.f32.u32	s15, s15
90004886:	eddf 6a58 	vldr	s13, [pc, #352]	; 900049e8 <HAL_RCC_GetSysClockFreq+0x2e8>
9000488a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000488e:	4b51      	ldr	r3, [pc, #324]	; (900049d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
90004890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90004892:	f3c3 0308 	ubfx	r3, r3, #0, #9
90004896:	ee07 3a90 	vmov	s15, r3
9000489a:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000489e:	ed97 6a02 	vldr	s12, [r7, #8]
900048a2:	eddf 5a50 	vldr	s11, [pc, #320]	; 900049e4 <HAL_RCC_GetSysClockFreq+0x2e4>
900048a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
900048aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
900048ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900048b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
900048b6:	ee67 7a27 	vmul.f32	s15, s14, s15
900048ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
900048be:	e065      	b.n	9000498c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
900048c0:	693b      	ldr	r3, [r7, #16]
900048c2:	ee07 3a90 	vmov	s15, r3
900048c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
900048ca:	eddf 6a48 	vldr	s13, [pc, #288]	; 900049ec <HAL_RCC_GetSysClockFreq+0x2ec>
900048ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
900048d2:	4b40      	ldr	r3, [pc, #256]	; (900049d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
900048d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900048d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
900048da:	ee07 3a90 	vmov	s15, r3
900048de:	eef8 6a67 	vcvt.f32.u32	s13, s15
900048e2:	ed97 6a02 	vldr	s12, [r7, #8]
900048e6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 900049e4 <HAL_RCC_GetSysClockFreq+0x2e4>
900048ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
900048ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
900048f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900048f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
900048fa:	ee67 7a27 	vmul.f32	s15, s14, s15
900048fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90004902:	e043      	b.n	9000498c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
90004904:	693b      	ldr	r3, [r7, #16]
90004906:	ee07 3a90 	vmov	s15, r3
9000490a:	eef8 7a67 	vcvt.f32.u32	s15, s15
9000490e:	eddf 6a38 	vldr	s13, [pc, #224]	; 900049f0 <HAL_RCC_GetSysClockFreq+0x2f0>
90004912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
90004916:	4b2f      	ldr	r3, [pc, #188]	; (900049d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
90004918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000491a:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000491e:	ee07 3a90 	vmov	s15, r3
90004922:	eef8 6a67 	vcvt.f32.u32	s13, s15
90004926:	ed97 6a02 	vldr	s12, [r7, #8]
9000492a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 900049e4 <HAL_RCC_GetSysClockFreq+0x2e4>
9000492e:	eec6 7a25 	vdiv.f32	s15, s12, s11
90004932:	ee76 7aa7 	vadd.f32	s15, s13, s15
90004936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9000493a:	ee77 7aa6 	vadd.f32	s15, s15, s13
9000493e:	ee67 7a27 	vmul.f32	s15, s14, s15
90004942:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
90004946:	e021      	b.n	9000498c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
90004948:	693b      	ldr	r3, [r7, #16]
9000494a:	ee07 3a90 	vmov	s15, r3
9000494e:	eef8 7a67 	vcvt.f32.u32	s15, s15
90004952:	eddf 6a26 	vldr	s13, [pc, #152]	; 900049ec <HAL_RCC_GetSysClockFreq+0x2ec>
90004956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000495a:	4b1e      	ldr	r3, [pc, #120]	; (900049d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000495c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000495e:	f3c3 0308 	ubfx	r3, r3, #0, #9
90004962:	ee07 3a90 	vmov	s15, r3
90004966:	eef8 6a67 	vcvt.f32.u32	s13, s15
9000496a:	ed97 6a02 	vldr	s12, [r7, #8]
9000496e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 900049e4 <HAL_RCC_GetSysClockFreq+0x2e4>
90004972:	eec6 7a25 	vdiv.f32	s15, s12, s11
90004976:	ee76 7aa7 	vadd.f32	s15, s13, s15
9000497a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9000497e:	ee77 7aa6 	vadd.f32	s15, s15, s13
90004982:	ee67 7a27 	vmul.f32	s15, s14, s15
90004986:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
9000498a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
9000498c:	4b11      	ldr	r3, [pc, #68]	; (900049d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
9000498e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90004990:	0a5b      	lsrs	r3, r3, #9
90004992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90004996:	3301      	adds	r3, #1
90004998:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
9000499a:	683b      	ldr	r3, [r7, #0]
9000499c:	ee07 3a90 	vmov	s15, r3
900049a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
900049a4:	edd7 6a07 	vldr	s13, [r7, #28]
900049a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
900049ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
900049b0:	ee17 3a90 	vmov	r3, s15
900049b4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
900049b6:	e005      	b.n	900049c4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
900049b8:	2300      	movs	r3, #0
900049ba:	61bb      	str	r3, [r7, #24]
    break;
900049bc:	e002      	b.n	900049c4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
900049be:	4b07      	ldr	r3, [pc, #28]	; (900049dc <HAL_RCC_GetSysClockFreq+0x2dc>)
900049c0:	61bb      	str	r3, [r7, #24]
    break;
900049c2:	bf00      	nop
  }

  return sysclockfreq;
900049c4:	69bb      	ldr	r3, [r7, #24]
}
900049c6:	4618      	mov	r0, r3
900049c8:	3724      	adds	r7, #36	; 0x24
900049ca:	46bd      	mov	sp, r7
900049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
900049d0:	4770      	bx	lr
900049d2:	bf00      	nop
900049d4:	58024400 	.word	0x58024400
900049d8:	03d09000 	.word	0x03d09000
900049dc:	003d0900 	.word	0x003d0900
900049e0:	017d7840 	.word	0x017d7840
900049e4:	46000000 	.word	0x46000000
900049e8:	4c742400 	.word	0x4c742400
900049ec:	4a742400 	.word	0x4a742400
900049f0:	4bbebc20 	.word	0x4bbebc20

900049f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
900049f4:	b580      	push	{r7, lr}
900049f6:	b082      	sub	sp, #8
900049f8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
900049fa:	f7ff fe81 	bl	90004700 <HAL_RCC_GetSysClockFreq>
900049fe:	4602      	mov	r2, r0
90004a00:	4b10      	ldr	r3, [pc, #64]	; (90004a44 <HAL_RCC_GetHCLKFreq+0x50>)
90004a02:	699b      	ldr	r3, [r3, #24]
90004a04:	0a1b      	lsrs	r3, r3, #8
90004a06:	f003 030f 	and.w	r3, r3, #15
90004a0a:	490f      	ldr	r1, [pc, #60]	; (90004a48 <HAL_RCC_GetHCLKFreq+0x54>)
90004a0c:	5ccb      	ldrb	r3, [r1, r3]
90004a0e:	f003 031f 	and.w	r3, r3, #31
90004a12:	fa22 f303 	lsr.w	r3, r2, r3
90004a16:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90004a18:	4b0a      	ldr	r3, [pc, #40]	; (90004a44 <HAL_RCC_GetHCLKFreq+0x50>)
90004a1a:	699b      	ldr	r3, [r3, #24]
90004a1c:	f003 030f 	and.w	r3, r3, #15
90004a20:	4a09      	ldr	r2, [pc, #36]	; (90004a48 <HAL_RCC_GetHCLKFreq+0x54>)
90004a22:	5cd3      	ldrb	r3, [r2, r3]
90004a24:	f003 031f 	and.w	r3, r3, #31
90004a28:	687a      	ldr	r2, [r7, #4]
90004a2a:	fa22 f303 	lsr.w	r3, r2, r3
90004a2e:	4a07      	ldr	r2, [pc, #28]	; (90004a4c <HAL_RCC_GetHCLKFreq+0x58>)
90004a30:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90004a32:	4a07      	ldr	r2, [pc, #28]	; (90004a50 <HAL_RCC_GetHCLKFreq+0x5c>)
90004a34:	687b      	ldr	r3, [r7, #4]
90004a36:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
90004a38:	4b04      	ldr	r3, [pc, #16]	; (90004a4c <HAL_RCC_GetHCLKFreq+0x58>)
90004a3a:	681b      	ldr	r3, [r3, #0]
}
90004a3c:	4618      	mov	r0, r3
90004a3e:	3708      	adds	r7, #8
90004a40:	46bd      	mov	sp, r7
90004a42:	bd80      	pop	{r7, pc}
90004a44:	58024400 	.word	0x58024400
90004a48:	9001a764 	.word	0x9001a764
90004a4c:	24000500 	.word	0x24000500
90004a50:	240004fc 	.word	0x240004fc

90004a54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
90004a54:	b580      	push	{r7, lr}
90004a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
90004a58:	f7ff ffcc 	bl	900049f4 <HAL_RCC_GetHCLKFreq>
90004a5c:	4602      	mov	r2, r0
90004a5e:	4b06      	ldr	r3, [pc, #24]	; (90004a78 <HAL_RCC_GetPCLK2Freq+0x24>)
90004a60:	69db      	ldr	r3, [r3, #28]
90004a62:	0a1b      	lsrs	r3, r3, #8
90004a64:	f003 0307 	and.w	r3, r3, #7
90004a68:	4904      	ldr	r1, [pc, #16]	; (90004a7c <HAL_RCC_GetPCLK2Freq+0x28>)
90004a6a:	5ccb      	ldrb	r3, [r1, r3]
90004a6c:	f003 031f 	and.w	r3, r3, #31
90004a70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
90004a74:	4618      	mov	r0, r3
90004a76:	bd80      	pop	{r7, pc}
90004a78:	58024400 	.word	0x58024400
90004a7c:	9001a764 	.word	0x9001a764

90004a80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
90004a80:	b480      	push	{r7}
90004a82:	b083      	sub	sp, #12
90004a84:	af00      	add	r7, sp, #0
90004a86:	6078      	str	r0, [r7, #4]
90004a88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
90004a8a:	687b      	ldr	r3, [r7, #4]
90004a8c:	223f      	movs	r2, #63	; 0x3f
90004a8e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
90004a90:	4b1a      	ldr	r3, [pc, #104]	; (90004afc <HAL_RCC_GetClockConfig+0x7c>)
90004a92:	691b      	ldr	r3, [r3, #16]
90004a94:	f003 0207 	and.w	r2, r3, #7
90004a98:	687b      	ldr	r3, [r7, #4]
90004a9a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
90004a9c:	4b17      	ldr	r3, [pc, #92]	; (90004afc <HAL_RCC_GetClockConfig+0x7c>)
90004a9e:	699b      	ldr	r3, [r3, #24]
90004aa0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
90004aa4:	687b      	ldr	r3, [r7, #4]
90004aa6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
90004aa8:	4b14      	ldr	r3, [pc, #80]	; (90004afc <HAL_RCC_GetClockConfig+0x7c>)
90004aaa:	699b      	ldr	r3, [r3, #24]
90004aac:	f003 020f 	and.w	r2, r3, #15
90004ab0:	687b      	ldr	r3, [r7, #4]
90004ab2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
90004ab4:	4b11      	ldr	r3, [pc, #68]	; (90004afc <HAL_RCC_GetClockConfig+0x7c>)
90004ab6:	699b      	ldr	r3, [r3, #24]
90004ab8:	f003 0270 	and.w	r2, r3, #112	; 0x70
90004abc:	687b      	ldr	r3, [r7, #4]
90004abe:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
90004ac0:	4b0e      	ldr	r3, [pc, #56]	; (90004afc <HAL_RCC_GetClockConfig+0x7c>)
90004ac2:	69db      	ldr	r3, [r3, #28]
90004ac4:	f003 0270 	and.w	r2, r3, #112	; 0x70
90004ac8:	687b      	ldr	r3, [r7, #4]
90004aca:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
90004acc:	4b0b      	ldr	r3, [pc, #44]	; (90004afc <HAL_RCC_GetClockConfig+0x7c>)
90004ace:	69db      	ldr	r3, [r3, #28]
90004ad0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
90004ad4:	687b      	ldr	r3, [r7, #4]
90004ad6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
90004ad8:	4b08      	ldr	r3, [pc, #32]	; (90004afc <HAL_RCC_GetClockConfig+0x7c>)
90004ada:	6a1b      	ldr	r3, [r3, #32]
90004adc:	f003 0270 	and.w	r2, r3, #112	; 0x70
90004ae0:	687b      	ldr	r3, [r7, #4]
90004ae2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
90004ae4:	4b06      	ldr	r3, [pc, #24]	; (90004b00 <HAL_RCC_GetClockConfig+0x80>)
90004ae6:	681b      	ldr	r3, [r3, #0]
90004ae8:	f003 020f 	and.w	r2, r3, #15
90004aec:	683b      	ldr	r3, [r7, #0]
90004aee:	601a      	str	r2, [r3, #0]
}
90004af0:	bf00      	nop
90004af2:	370c      	adds	r7, #12
90004af4:	46bd      	mov	sp, r7
90004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
90004afa:	4770      	bx	lr
90004afc:	58024400 	.word	0x58024400
90004b00:	52002000 	.word	0x52002000

90004b04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
90004b04:	b580      	push	{r7, lr}
90004b06:	b082      	sub	sp, #8
90004b08:	af00      	add	r7, sp, #0
90004b0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
90004b0c:	687b      	ldr	r3, [r7, #4]
90004b0e:	2b00      	cmp	r3, #0
90004b10:	d101      	bne.n	90004b16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
90004b12:	2301      	movs	r3, #1
90004b14:	e049      	b.n	90004baa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
90004b16:	687b      	ldr	r3, [r7, #4]
90004b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
90004b1c:	b2db      	uxtb	r3, r3
90004b1e:	2b00      	cmp	r3, #0
90004b20:	d106      	bne.n	90004b30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
90004b22:	687b      	ldr	r3, [r7, #4]
90004b24:	2200      	movs	r2, #0
90004b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
90004b2a:	6878      	ldr	r0, [r7, #4]
90004b2c:	f000 f841 	bl	90004bb2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
90004b30:	687b      	ldr	r3, [r7, #4]
90004b32:	2202      	movs	r2, #2
90004b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
90004b38:	687b      	ldr	r3, [r7, #4]
90004b3a:	681a      	ldr	r2, [r3, #0]
90004b3c:	687b      	ldr	r3, [r7, #4]
90004b3e:	3304      	adds	r3, #4
90004b40:	4619      	mov	r1, r3
90004b42:	4610      	mov	r0, r2
90004b44:	f000 fa00 	bl	90004f48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
90004b48:	687b      	ldr	r3, [r7, #4]
90004b4a:	2201      	movs	r2, #1
90004b4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
90004b50:	687b      	ldr	r3, [r7, #4]
90004b52:	2201      	movs	r2, #1
90004b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
90004b58:	687b      	ldr	r3, [r7, #4]
90004b5a:	2201      	movs	r2, #1
90004b5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
90004b60:	687b      	ldr	r3, [r7, #4]
90004b62:	2201      	movs	r2, #1
90004b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
90004b68:	687b      	ldr	r3, [r7, #4]
90004b6a:	2201      	movs	r2, #1
90004b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
90004b70:	687b      	ldr	r3, [r7, #4]
90004b72:	2201      	movs	r2, #1
90004b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
90004b78:	687b      	ldr	r3, [r7, #4]
90004b7a:	2201      	movs	r2, #1
90004b7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
90004b80:	687b      	ldr	r3, [r7, #4]
90004b82:	2201      	movs	r2, #1
90004b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
90004b88:	687b      	ldr	r3, [r7, #4]
90004b8a:	2201      	movs	r2, #1
90004b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
90004b90:	687b      	ldr	r3, [r7, #4]
90004b92:	2201      	movs	r2, #1
90004b94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
90004b98:	687b      	ldr	r3, [r7, #4]
90004b9a:	2201      	movs	r2, #1
90004b9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
90004ba0:	687b      	ldr	r3, [r7, #4]
90004ba2:	2201      	movs	r2, #1
90004ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
90004ba8:	2300      	movs	r3, #0
}
90004baa:	4618      	mov	r0, r3
90004bac:	3708      	adds	r7, #8
90004bae:	46bd      	mov	sp, r7
90004bb0:	bd80      	pop	{r7, pc}

90004bb2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
90004bb2:	b480      	push	{r7}
90004bb4:	b083      	sub	sp, #12
90004bb6:	af00      	add	r7, sp, #0
90004bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
90004bba:	bf00      	nop
90004bbc:	370c      	adds	r7, #12
90004bbe:	46bd      	mov	sp, r7
90004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
90004bc4:	4770      	bx	lr
	...

90004bc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
90004bc8:	b480      	push	{r7}
90004bca:	b085      	sub	sp, #20
90004bcc:	af00      	add	r7, sp, #0
90004bce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
90004bd0:	687b      	ldr	r3, [r7, #4]
90004bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
90004bd6:	b2db      	uxtb	r3, r3
90004bd8:	2b01      	cmp	r3, #1
90004bda:	d001      	beq.n	90004be0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
90004bdc:	2301      	movs	r3, #1
90004bde:	e054      	b.n	90004c8a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
90004be0:	687b      	ldr	r3, [r7, #4]
90004be2:	2202      	movs	r2, #2
90004be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
90004be8:	687b      	ldr	r3, [r7, #4]
90004bea:	681b      	ldr	r3, [r3, #0]
90004bec:	68da      	ldr	r2, [r3, #12]
90004bee:	687b      	ldr	r3, [r7, #4]
90004bf0:	681b      	ldr	r3, [r3, #0]
90004bf2:	f042 0201 	orr.w	r2, r2, #1
90004bf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
90004bf8:	687b      	ldr	r3, [r7, #4]
90004bfa:	681b      	ldr	r3, [r3, #0]
90004bfc:	4a26      	ldr	r2, [pc, #152]	; (90004c98 <HAL_TIM_Base_Start_IT+0xd0>)
90004bfe:	4293      	cmp	r3, r2
90004c00:	d022      	beq.n	90004c48 <HAL_TIM_Base_Start_IT+0x80>
90004c02:	687b      	ldr	r3, [r7, #4]
90004c04:	681b      	ldr	r3, [r3, #0]
90004c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
90004c0a:	d01d      	beq.n	90004c48 <HAL_TIM_Base_Start_IT+0x80>
90004c0c:	687b      	ldr	r3, [r7, #4]
90004c0e:	681b      	ldr	r3, [r3, #0]
90004c10:	4a22      	ldr	r2, [pc, #136]	; (90004c9c <HAL_TIM_Base_Start_IT+0xd4>)
90004c12:	4293      	cmp	r3, r2
90004c14:	d018      	beq.n	90004c48 <HAL_TIM_Base_Start_IT+0x80>
90004c16:	687b      	ldr	r3, [r7, #4]
90004c18:	681b      	ldr	r3, [r3, #0]
90004c1a:	4a21      	ldr	r2, [pc, #132]	; (90004ca0 <HAL_TIM_Base_Start_IT+0xd8>)
90004c1c:	4293      	cmp	r3, r2
90004c1e:	d013      	beq.n	90004c48 <HAL_TIM_Base_Start_IT+0x80>
90004c20:	687b      	ldr	r3, [r7, #4]
90004c22:	681b      	ldr	r3, [r3, #0]
90004c24:	4a1f      	ldr	r2, [pc, #124]	; (90004ca4 <HAL_TIM_Base_Start_IT+0xdc>)
90004c26:	4293      	cmp	r3, r2
90004c28:	d00e      	beq.n	90004c48 <HAL_TIM_Base_Start_IT+0x80>
90004c2a:	687b      	ldr	r3, [r7, #4]
90004c2c:	681b      	ldr	r3, [r3, #0]
90004c2e:	4a1e      	ldr	r2, [pc, #120]	; (90004ca8 <HAL_TIM_Base_Start_IT+0xe0>)
90004c30:	4293      	cmp	r3, r2
90004c32:	d009      	beq.n	90004c48 <HAL_TIM_Base_Start_IT+0x80>
90004c34:	687b      	ldr	r3, [r7, #4]
90004c36:	681b      	ldr	r3, [r3, #0]
90004c38:	4a1c      	ldr	r2, [pc, #112]	; (90004cac <HAL_TIM_Base_Start_IT+0xe4>)
90004c3a:	4293      	cmp	r3, r2
90004c3c:	d004      	beq.n	90004c48 <HAL_TIM_Base_Start_IT+0x80>
90004c3e:	687b      	ldr	r3, [r7, #4]
90004c40:	681b      	ldr	r3, [r3, #0]
90004c42:	4a1b      	ldr	r2, [pc, #108]	; (90004cb0 <HAL_TIM_Base_Start_IT+0xe8>)
90004c44:	4293      	cmp	r3, r2
90004c46:	d115      	bne.n	90004c74 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
90004c48:	687b      	ldr	r3, [r7, #4]
90004c4a:	681b      	ldr	r3, [r3, #0]
90004c4c:	689a      	ldr	r2, [r3, #8]
90004c4e:	4b19      	ldr	r3, [pc, #100]	; (90004cb4 <HAL_TIM_Base_Start_IT+0xec>)
90004c50:	4013      	ands	r3, r2
90004c52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
90004c54:	68fb      	ldr	r3, [r7, #12]
90004c56:	2b06      	cmp	r3, #6
90004c58:	d015      	beq.n	90004c86 <HAL_TIM_Base_Start_IT+0xbe>
90004c5a:	68fb      	ldr	r3, [r7, #12]
90004c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90004c60:	d011      	beq.n	90004c86 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
90004c62:	687b      	ldr	r3, [r7, #4]
90004c64:	681b      	ldr	r3, [r3, #0]
90004c66:	681a      	ldr	r2, [r3, #0]
90004c68:	687b      	ldr	r3, [r7, #4]
90004c6a:	681b      	ldr	r3, [r3, #0]
90004c6c:	f042 0201 	orr.w	r2, r2, #1
90004c70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
90004c72:	e008      	b.n	90004c86 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
90004c74:	687b      	ldr	r3, [r7, #4]
90004c76:	681b      	ldr	r3, [r3, #0]
90004c78:	681a      	ldr	r2, [r3, #0]
90004c7a:	687b      	ldr	r3, [r7, #4]
90004c7c:	681b      	ldr	r3, [r3, #0]
90004c7e:	f042 0201 	orr.w	r2, r2, #1
90004c82:	601a      	str	r2, [r3, #0]
90004c84:	e000      	b.n	90004c88 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
90004c86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
90004c88:	2300      	movs	r3, #0
}
90004c8a:	4618      	mov	r0, r3
90004c8c:	3714      	adds	r7, #20
90004c8e:	46bd      	mov	sp, r7
90004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
90004c94:	4770      	bx	lr
90004c96:	bf00      	nop
90004c98:	40010000 	.word	0x40010000
90004c9c:	40000400 	.word	0x40000400
90004ca0:	40000800 	.word	0x40000800
90004ca4:	40000c00 	.word	0x40000c00
90004ca8:	40010400 	.word	0x40010400
90004cac:	40001800 	.word	0x40001800
90004cb0:	40014000 	.word	0x40014000
90004cb4:	00010007 	.word	0x00010007

90004cb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
90004cb8:	b580      	push	{r7, lr}
90004cba:	b082      	sub	sp, #8
90004cbc:	af00      	add	r7, sp, #0
90004cbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
90004cc0:	687b      	ldr	r3, [r7, #4]
90004cc2:	681b      	ldr	r3, [r3, #0]
90004cc4:	691b      	ldr	r3, [r3, #16]
90004cc6:	f003 0302 	and.w	r3, r3, #2
90004cca:	2b02      	cmp	r3, #2
90004ccc:	d122      	bne.n	90004d14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
90004cce:	687b      	ldr	r3, [r7, #4]
90004cd0:	681b      	ldr	r3, [r3, #0]
90004cd2:	68db      	ldr	r3, [r3, #12]
90004cd4:	f003 0302 	and.w	r3, r3, #2
90004cd8:	2b02      	cmp	r3, #2
90004cda:	d11b      	bne.n	90004d14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
90004cdc:	687b      	ldr	r3, [r7, #4]
90004cde:	681b      	ldr	r3, [r3, #0]
90004ce0:	f06f 0202 	mvn.w	r2, #2
90004ce4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
90004ce6:	687b      	ldr	r3, [r7, #4]
90004ce8:	2201      	movs	r2, #1
90004cea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
90004cec:	687b      	ldr	r3, [r7, #4]
90004cee:	681b      	ldr	r3, [r3, #0]
90004cf0:	699b      	ldr	r3, [r3, #24]
90004cf2:	f003 0303 	and.w	r3, r3, #3
90004cf6:	2b00      	cmp	r3, #0
90004cf8:	d003      	beq.n	90004d02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
90004cfa:	6878      	ldr	r0, [r7, #4]
90004cfc:	f000 f905 	bl	90004f0a <HAL_TIM_IC_CaptureCallback>
90004d00:	e005      	b.n	90004d0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
90004d02:	6878      	ldr	r0, [r7, #4]
90004d04:	f000 f8f7 	bl	90004ef6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
90004d08:	6878      	ldr	r0, [r7, #4]
90004d0a:	f000 f908 	bl	90004f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
90004d0e:	687b      	ldr	r3, [r7, #4]
90004d10:	2200      	movs	r2, #0
90004d12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
90004d14:	687b      	ldr	r3, [r7, #4]
90004d16:	681b      	ldr	r3, [r3, #0]
90004d18:	691b      	ldr	r3, [r3, #16]
90004d1a:	f003 0304 	and.w	r3, r3, #4
90004d1e:	2b04      	cmp	r3, #4
90004d20:	d122      	bne.n	90004d68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
90004d22:	687b      	ldr	r3, [r7, #4]
90004d24:	681b      	ldr	r3, [r3, #0]
90004d26:	68db      	ldr	r3, [r3, #12]
90004d28:	f003 0304 	and.w	r3, r3, #4
90004d2c:	2b04      	cmp	r3, #4
90004d2e:	d11b      	bne.n	90004d68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
90004d30:	687b      	ldr	r3, [r7, #4]
90004d32:	681b      	ldr	r3, [r3, #0]
90004d34:	f06f 0204 	mvn.w	r2, #4
90004d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
90004d3a:	687b      	ldr	r3, [r7, #4]
90004d3c:	2202      	movs	r2, #2
90004d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
90004d40:	687b      	ldr	r3, [r7, #4]
90004d42:	681b      	ldr	r3, [r3, #0]
90004d44:	699b      	ldr	r3, [r3, #24]
90004d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
90004d4a:	2b00      	cmp	r3, #0
90004d4c:	d003      	beq.n	90004d56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
90004d4e:	6878      	ldr	r0, [r7, #4]
90004d50:	f000 f8db 	bl	90004f0a <HAL_TIM_IC_CaptureCallback>
90004d54:	e005      	b.n	90004d62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
90004d56:	6878      	ldr	r0, [r7, #4]
90004d58:	f000 f8cd 	bl	90004ef6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
90004d5c:	6878      	ldr	r0, [r7, #4]
90004d5e:	f000 f8de 	bl	90004f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
90004d62:	687b      	ldr	r3, [r7, #4]
90004d64:	2200      	movs	r2, #0
90004d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
90004d68:	687b      	ldr	r3, [r7, #4]
90004d6a:	681b      	ldr	r3, [r3, #0]
90004d6c:	691b      	ldr	r3, [r3, #16]
90004d6e:	f003 0308 	and.w	r3, r3, #8
90004d72:	2b08      	cmp	r3, #8
90004d74:	d122      	bne.n	90004dbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
90004d76:	687b      	ldr	r3, [r7, #4]
90004d78:	681b      	ldr	r3, [r3, #0]
90004d7a:	68db      	ldr	r3, [r3, #12]
90004d7c:	f003 0308 	and.w	r3, r3, #8
90004d80:	2b08      	cmp	r3, #8
90004d82:	d11b      	bne.n	90004dbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
90004d84:	687b      	ldr	r3, [r7, #4]
90004d86:	681b      	ldr	r3, [r3, #0]
90004d88:	f06f 0208 	mvn.w	r2, #8
90004d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
90004d8e:	687b      	ldr	r3, [r7, #4]
90004d90:	2204      	movs	r2, #4
90004d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
90004d94:	687b      	ldr	r3, [r7, #4]
90004d96:	681b      	ldr	r3, [r3, #0]
90004d98:	69db      	ldr	r3, [r3, #28]
90004d9a:	f003 0303 	and.w	r3, r3, #3
90004d9e:	2b00      	cmp	r3, #0
90004da0:	d003      	beq.n	90004daa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
90004da2:	6878      	ldr	r0, [r7, #4]
90004da4:	f000 f8b1 	bl	90004f0a <HAL_TIM_IC_CaptureCallback>
90004da8:	e005      	b.n	90004db6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
90004daa:	6878      	ldr	r0, [r7, #4]
90004dac:	f000 f8a3 	bl	90004ef6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
90004db0:	6878      	ldr	r0, [r7, #4]
90004db2:	f000 f8b4 	bl	90004f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
90004db6:	687b      	ldr	r3, [r7, #4]
90004db8:	2200      	movs	r2, #0
90004dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
90004dbc:	687b      	ldr	r3, [r7, #4]
90004dbe:	681b      	ldr	r3, [r3, #0]
90004dc0:	691b      	ldr	r3, [r3, #16]
90004dc2:	f003 0310 	and.w	r3, r3, #16
90004dc6:	2b10      	cmp	r3, #16
90004dc8:	d122      	bne.n	90004e10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
90004dca:	687b      	ldr	r3, [r7, #4]
90004dcc:	681b      	ldr	r3, [r3, #0]
90004dce:	68db      	ldr	r3, [r3, #12]
90004dd0:	f003 0310 	and.w	r3, r3, #16
90004dd4:	2b10      	cmp	r3, #16
90004dd6:	d11b      	bne.n	90004e10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
90004dd8:	687b      	ldr	r3, [r7, #4]
90004dda:	681b      	ldr	r3, [r3, #0]
90004ddc:	f06f 0210 	mvn.w	r2, #16
90004de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
90004de2:	687b      	ldr	r3, [r7, #4]
90004de4:	2208      	movs	r2, #8
90004de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
90004de8:	687b      	ldr	r3, [r7, #4]
90004dea:	681b      	ldr	r3, [r3, #0]
90004dec:	69db      	ldr	r3, [r3, #28]
90004dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
90004df2:	2b00      	cmp	r3, #0
90004df4:	d003      	beq.n	90004dfe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
90004df6:	6878      	ldr	r0, [r7, #4]
90004df8:	f000 f887 	bl	90004f0a <HAL_TIM_IC_CaptureCallback>
90004dfc:	e005      	b.n	90004e0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
90004dfe:	6878      	ldr	r0, [r7, #4]
90004e00:	f000 f879 	bl	90004ef6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
90004e04:	6878      	ldr	r0, [r7, #4]
90004e06:	f000 f88a 	bl	90004f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
90004e0a:	687b      	ldr	r3, [r7, #4]
90004e0c:	2200      	movs	r2, #0
90004e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
90004e10:	687b      	ldr	r3, [r7, #4]
90004e12:	681b      	ldr	r3, [r3, #0]
90004e14:	691b      	ldr	r3, [r3, #16]
90004e16:	f003 0301 	and.w	r3, r3, #1
90004e1a:	2b01      	cmp	r3, #1
90004e1c:	d10e      	bne.n	90004e3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
90004e1e:	687b      	ldr	r3, [r7, #4]
90004e20:	681b      	ldr	r3, [r3, #0]
90004e22:	68db      	ldr	r3, [r3, #12]
90004e24:	f003 0301 	and.w	r3, r3, #1
90004e28:	2b01      	cmp	r3, #1
90004e2a:	d107      	bne.n	90004e3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
90004e2c:	687b      	ldr	r3, [r7, #4]
90004e2e:	681b      	ldr	r3, [r3, #0]
90004e30:	f06f 0201 	mvn.w	r2, #1
90004e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
90004e36:	6878      	ldr	r0, [r7, #4]
90004e38:	f7fc ff4e 	bl	90001cd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
90004e3c:	687b      	ldr	r3, [r7, #4]
90004e3e:	681b      	ldr	r3, [r3, #0]
90004e40:	691b      	ldr	r3, [r3, #16]
90004e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
90004e46:	2b80      	cmp	r3, #128	; 0x80
90004e48:	d10e      	bne.n	90004e68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
90004e4a:	687b      	ldr	r3, [r7, #4]
90004e4c:	681b      	ldr	r3, [r3, #0]
90004e4e:	68db      	ldr	r3, [r3, #12]
90004e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
90004e54:	2b80      	cmp	r3, #128	; 0x80
90004e56:	d107      	bne.n	90004e68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
90004e58:	687b      	ldr	r3, [r7, #4]
90004e5a:	681b      	ldr	r3, [r3, #0]
90004e5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
90004e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
90004e62:	6878      	ldr	r0, [r7, #4]
90004e64:	f000 f914 	bl	90005090 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
90004e68:	687b      	ldr	r3, [r7, #4]
90004e6a:	681b      	ldr	r3, [r3, #0]
90004e6c:	691b      	ldr	r3, [r3, #16]
90004e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
90004e72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90004e76:	d10e      	bne.n	90004e96 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
90004e78:	687b      	ldr	r3, [r7, #4]
90004e7a:	681b      	ldr	r3, [r3, #0]
90004e7c:	68db      	ldr	r3, [r3, #12]
90004e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
90004e82:	2b80      	cmp	r3, #128	; 0x80
90004e84:	d107      	bne.n	90004e96 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
90004e86:	687b      	ldr	r3, [r7, #4]
90004e88:	681b      	ldr	r3, [r3, #0]
90004e8a:	f46f 7280 	mvn.w	r2, #256	; 0x100
90004e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
90004e90:	6878      	ldr	r0, [r7, #4]
90004e92:	f000 f907 	bl	900050a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
90004e96:	687b      	ldr	r3, [r7, #4]
90004e98:	681b      	ldr	r3, [r3, #0]
90004e9a:	691b      	ldr	r3, [r3, #16]
90004e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
90004ea0:	2b40      	cmp	r3, #64	; 0x40
90004ea2:	d10e      	bne.n	90004ec2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
90004ea4:	687b      	ldr	r3, [r7, #4]
90004ea6:	681b      	ldr	r3, [r3, #0]
90004ea8:	68db      	ldr	r3, [r3, #12]
90004eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
90004eae:	2b40      	cmp	r3, #64	; 0x40
90004eb0:	d107      	bne.n	90004ec2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
90004eb2:	687b      	ldr	r3, [r7, #4]
90004eb4:	681b      	ldr	r3, [r3, #0]
90004eb6:	f06f 0240 	mvn.w	r2, #64	; 0x40
90004eba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
90004ebc:	6878      	ldr	r0, [r7, #4]
90004ebe:	f000 f838 	bl	90004f32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
90004ec2:	687b      	ldr	r3, [r7, #4]
90004ec4:	681b      	ldr	r3, [r3, #0]
90004ec6:	691b      	ldr	r3, [r3, #16]
90004ec8:	f003 0320 	and.w	r3, r3, #32
90004ecc:	2b20      	cmp	r3, #32
90004ece:	d10e      	bne.n	90004eee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
90004ed0:	687b      	ldr	r3, [r7, #4]
90004ed2:	681b      	ldr	r3, [r3, #0]
90004ed4:	68db      	ldr	r3, [r3, #12]
90004ed6:	f003 0320 	and.w	r3, r3, #32
90004eda:	2b20      	cmp	r3, #32
90004edc:	d107      	bne.n	90004eee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
90004ede:	687b      	ldr	r3, [r7, #4]
90004ee0:	681b      	ldr	r3, [r3, #0]
90004ee2:	f06f 0220 	mvn.w	r2, #32
90004ee6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
90004ee8:	6878      	ldr	r0, [r7, #4]
90004eea:	f000 f8c7 	bl	9000507c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
90004eee:	bf00      	nop
90004ef0:	3708      	adds	r7, #8
90004ef2:	46bd      	mov	sp, r7
90004ef4:	bd80      	pop	{r7, pc}

90004ef6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
90004ef6:	b480      	push	{r7}
90004ef8:	b083      	sub	sp, #12
90004efa:	af00      	add	r7, sp, #0
90004efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
90004efe:	bf00      	nop
90004f00:	370c      	adds	r7, #12
90004f02:	46bd      	mov	sp, r7
90004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
90004f08:	4770      	bx	lr

90004f0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
90004f0a:	b480      	push	{r7}
90004f0c:	b083      	sub	sp, #12
90004f0e:	af00      	add	r7, sp, #0
90004f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
90004f12:	bf00      	nop
90004f14:	370c      	adds	r7, #12
90004f16:	46bd      	mov	sp, r7
90004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
90004f1c:	4770      	bx	lr

90004f1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
90004f1e:	b480      	push	{r7}
90004f20:	b083      	sub	sp, #12
90004f22:	af00      	add	r7, sp, #0
90004f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
90004f26:	bf00      	nop
90004f28:	370c      	adds	r7, #12
90004f2a:	46bd      	mov	sp, r7
90004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
90004f30:	4770      	bx	lr

90004f32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
90004f32:	b480      	push	{r7}
90004f34:	b083      	sub	sp, #12
90004f36:	af00      	add	r7, sp, #0
90004f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
90004f3a:	bf00      	nop
90004f3c:	370c      	adds	r7, #12
90004f3e:	46bd      	mov	sp, r7
90004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
90004f44:	4770      	bx	lr
	...

90004f48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
90004f48:	b480      	push	{r7}
90004f4a:	b085      	sub	sp, #20
90004f4c:	af00      	add	r7, sp, #0
90004f4e:	6078      	str	r0, [r7, #4]
90004f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
90004f52:	687b      	ldr	r3, [r7, #4]
90004f54:	681b      	ldr	r3, [r3, #0]
90004f56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
90004f58:	687b      	ldr	r3, [r7, #4]
90004f5a:	4a40      	ldr	r2, [pc, #256]	; (9000505c <TIM_Base_SetConfig+0x114>)
90004f5c:	4293      	cmp	r3, r2
90004f5e:	d013      	beq.n	90004f88 <TIM_Base_SetConfig+0x40>
90004f60:	687b      	ldr	r3, [r7, #4]
90004f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
90004f66:	d00f      	beq.n	90004f88 <TIM_Base_SetConfig+0x40>
90004f68:	687b      	ldr	r3, [r7, #4]
90004f6a:	4a3d      	ldr	r2, [pc, #244]	; (90005060 <TIM_Base_SetConfig+0x118>)
90004f6c:	4293      	cmp	r3, r2
90004f6e:	d00b      	beq.n	90004f88 <TIM_Base_SetConfig+0x40>
90004f70:	687b      	ldr	r3, [r7, #4]
90004f72:	4a3c      	ldr	r2, [pc, #240]	; (90005064 <TIM_Base_SetConfig+0x11c>)
90004f74:	4293      	cmp	r3, r2
90004f76:	d007      	beq.n	90004f88 <TIM_Base_SetConfig+0x40>
90004f78:	687b      	ldr	r3, [r7, #4]
90004f7a:	4a3b      	ldr	r2, [pc, #236]	; (90005068 <TIM_Base_SetConfig+0x120>)
90004f7c:	4293      	cmp	r3, r2
90004f7e:	d003      	beq.n	90004f88 <TIM_Base_SetConfig+0x40>
90004f80:	687b      	ldr	r3, [r7, #4]
90004f82:	4a3a      	ldr	r2, [pc, #232]	; (9000506c <TIM_Base_SetConfig+0x124>)
90004f84:	4293      	cmp	r3, r2
90004f86:	d108      	bne.n	90004f9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
90004f88:	68fb      	ldr	r3, [r7, #12]
90004f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
90004f8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
90004f90:	683b      	ldr	r3, [r7, #0]
90004f92:	685b      	ldr	r3, [r3, #4]
90004f94:	68fa      	ldr	r2, [r7, #12]
90004f96:	4313      	orrs	r3, r2
90004f98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
90004f9a:	687b      	ldr	r3, [r7, #4]
90004f9c:	4a2f      	ldr	r2, [pc, #188]	; (9000505c <TIM_Base_SetConfig+0x114>)
90004f9e:	4293      	cmp	r3, r2
90004fa0:	d01f      	beq.n	90004fe2 <TIM_Base_SetConfig+0x9a>
90004fa2:	687b      	ldr	r3, [r7, #4]
90004fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
90004fa8:	d01b      	beq.n	90004fe2 <TIM_Base_SetConfig+0x9a>
90004faa:	687b      	ldr	r3, [r7, #4]
90004fac:	4a2c      	ldr	r2, [pc, #176]	; (90005060 <TIM_Base_SetConfig+0x118>)
90004fae:	4293      	cmp	r3, r2
90004fb0:	d017      	beq.n	90004fe2 <TIM_Base_SetConfig+0x9a>
90004fb2:	687b      	ldr	r3, [r7, #4]
90004fb4:	4a2b      	ldr	r2, [pc, #172]	; (90005064 <TIM_Base_SetConfig+0x11c>)
90004fb6:	4293      	cmp	r3, r2
90004fb8:	d013      	beq.n	90004fe2 <TIM_Base_SetConfig+0x9a>
90004fba:	687b      	ldr	r3, [r7, #4]
90004fbc:	4a2a      	ldr	r2, [pc, #168]	; (90005068 <TIM_Base_SetConfig+0x120>)
90004fbe:	4293      	cmp	r3, r2
90004fc0:	d00f      	beq.n	90004fe2 <TIM_Base_SetConfig+0x9a>
90004fc2:	687b      	ldr	r3, [r7, #4]
90004fc4:	4a29      	ldr	r2, [pc, #164]	; (9000506c <TIM_Base_SetConfig+0x124>)
90004fc6:	4293      	cmp	r3, r2
90004fc8:	d00b      	beq.n	90004fe2 <TIM_Base_SetConfig+0x9a>
90004fca:	687b      	ldr	r3, [r7, #4]
90004fcc:	4a28      	ldr	r2, [pc, #160]	; (90005070 <TIM_Base_SetConfig+0x128>)
90004fce:	4293      	cmp	r3, r2
90004fd0:	d007      	beq.n	90004fe2 <TIM_Base_SetConfig+0x9a>
90004fd2:	687b      	ldr	r3, [r7, #4]
90004fd4:	4a27      	ldr	r2, [pc, #156]	; (90005074 <TIM_Base_SetConfig+0x12c>)
90004fd6:	4293      	cmp	r3, r2
90004fd8:	d003      	beq.n	90004fe2 <TIM_Base_SetConfig+0x9a>
90004fda:	687b      	ldr	r3, [r7, #4]
90004fdc:	4a26      	ldr	r2, [pc, #152]	; (90005078 <TIM_Base_SetConfig+0x130>)
90004fde:	4293      	cmp	r3, r2
90004fe0:	d108      	bne.n	90004ff4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
90004fe2:	68fb      	ldr	r3, [r7, #12]
90004fe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
90004fe8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
90004fea:	683b      	ldr	r3, [r7, #0]
90004fec:	68db      	ldr	r3, [r3, #12]
90004fee:	68fa      	ldr	r2, [r7, #12]
90004ff0:	4313      	orrs	r3, r2
90004ff2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
90004ff4:	68fb      	ldr	r3, [r7, #12]
90004ff6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
90004ffa:	683b      	ldr	r3, [r7, #0]
90004ffc:	695b      	ldr	r3, [r3, #20]
90004ffe:	4313      	orrs	r3, r2
90005000:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
90005002:	687b      	ldr	r3, [r7, #4]
90005004:	68fa      	ldr	r2, [r7, #12]
90005006:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
90005008:	683b      	ldr	r3, [r7, #0]
9000500a:	689a      	ldr	r2, [r3, #8]
9000500c:	687b      	ldr	r3, [r7, #4]
9000500e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
90005010:	683b      	ldr	r3, [r7, #0]
90005012:	681a      	ldr	r2, [r3, #0]
90005014:	687b      	ldr	r3, [r7, #4]
90005016:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
90005018:	687b      	ldr	r3, [r7, #4]
9000501a:	4a10      	ldr	r2, [pc, #64]	; (9000505c <TIM_Base_SetConfig+0x114>)
9000501c:	4293      	cmp	r3, r2
9000501e:	d00f      	beq.n	90005040 <TIM_Base_SetConfig+0xf8>
90005020:	687b      	ldr	r3, [r7, #4]
90005022:	4a12      	ldr	r2, [pc, #72]	; (9000506c <TIM_Base_SetConfig+0x124>)
90005024:	4293      	cmp	r3, r2
90005026:	d00b      	beq.n	90005040 <TIM_Base_SetConfig+0xf8>
90005028:	687b      	ldr	r3, [r7, #4]
9000502a:	4a11      	ldr	r2, [pc, #68]	; (90005070 <TIM_Base_SetConfig+0x128>)
9000502c:	4293      	cmp	r3, r2
9000502e:	d007      	beq.n	90005040 <TIM_Base_SetConfig+0xf8>
90005030:	687b      	ldr	r3, [r7, #4]
90005032:	4a10      	ldr	r2, [pc, #64]	; (90005074 <TIM_Base_SetConfig+0x12c>)
90005034:	4293      	cmp	r3, r2
90005036:	d003      	beq.n	90005040 <TIM_Base_SetConfig+0xf8>
90005038:	687b      	ldr	r3, [r7, #4]
9000503a:	4a0f      	ldr	r2, [pc, #60]	; (90005078 <TIM_Base_SetConfig+0x130>)
9000503c:	4293      	cmp	r3, r2
9000503e:	d103      	bne.n	90005048 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
90005040:	683b      	ldr	r3, [r7, #0]
90005042:	691a      	ldr	r2, [r3, #16]
90005044:	687b      	ldr	r3, [r7, #4]
90005046:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
90005048:	687b      	ldr	r3, [r7, #4]
9000504a:	2201      	movs	r2, #1
9000504c:	615a      	str	r2, [r3, #20]
}
9000504e:	bf00      	nop
90005050:	3714      	adds	r7, #20
90005052:	46bd      	mov	sp, r7
90005054:	f85d 7b04 	ldr.w	r7, [sp], #4
90005058:	4770      	bx	lr
9000505a:	bf00      	nop
9000505c:	40010000 	.word	0x40010000
90005060:	40000400 	.word	0x40000400
90005064:	40000800 	.word	0x40000800
90005068:	40000c00 	.word	0x40000c00
9000506c:	40010400 	.word	0x40010400
90005070:	40014000 	.word	0x40014000
90005074:	40014400 	.word	0x40014400
90005078:	40014800 	.word	0x40014800

9000507c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
9000507c:	b480      	push	{r7}
9000507e:	b083      	sub	sp, #12
90005080:	af00      	add	r7, sp, #0
90005082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
90005084:	bf00      	nop
90005086:	370c      	adds	r7, #12
90005088:	46bd      	mov	sp, r7
9000508a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000508e:	4770      	bx	lr

90005090 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
90005090:	b480      	push	{r7}
90005092:	b083      	sub	sp, #12
90005094:	af00      	add	r7, sp, #0
90005096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
90005098:	bf00      	nop
9000509a:	370c      	adds	r7, #12
9000509c:	46bd      	mov	sp, r7
9000509e:	f85d 7b04 	ldr.w	r7, [sp], #4
900050a2:	4770      	bx	lr

900050a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
900050a4:	b480      	push	{r7}
900050a6:	b083      	sub	sp, #12
900050a8:	af00      	add	r7, sp, #0
900050aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
900050ac:	bf00      	nop
900050ae:	370c      	adds	r7, #12
900050b0:	46bd      	mov	sp, r7
900050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
900050b6:	4770      	bx	lr

900050b8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
900050b8:	b5b0      	push	{r4, r5, r7, lr}
900050ba:	b08c      	sub	sp, #48	; 0x30
900050bc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
900050be:	4b96      	ldr	r3, [pc, #600]	; (90005318 <MX_LWIP_Init+0x260>)
900050c0:	22c0      	movs	r2, #192	; 0xc0
900050c2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
900050c4:	4b94      	ldr	r3, [pc, #592]	; (90005318 <MX_LWIP_Init+0x260>)
900050c6:	22a8      	movs	r2, #168	; 0xa8
900050c8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 18;
900050ca:	4b93      	ldr	r3, [pc, #588]	; (90005318 <MX_LWIP_Init+0x260>)
900050cc:	2212      	movs	r2, #18
900050ce:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 115;
900050d0:	4b91      	ldr	r3, [pc, #580]	; (90005318 <MX_LWIP_Init+0x260>)
900050d2:	2273      	movs	r2, #115	; 0x73
900050d4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
900050d6:	4b91      	ldr	r3, [pc, #580]	; (9000531c <MX_LWIP_Init+0x264>)
900050d8:	22ff      	movs	r2, #255	; 0xff
900050da:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
900050dc:	4b8f      	ldr	r3, [pc, #572]	; (9000531c <MX_LWIP_Init+0x264>)
900050de:	22ff      	movs	r2, #255	; 0xff
900050e0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
900050e2:	4b8e      	ldr	r3, [pc, #568]	; (9000531c <MX_LWIP_Init+0x264>)
900050e4:	22ff      	movs	r2, #255	; 0xff
900050e6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
900050e8:	4b8c      	ldr	r3, [pc, #560]	; (9000531c <MX_LWIP_Init+0x264>)
900050ea:	2200      	movs	r2, #0
900050ec:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 195;
900050ee:	4b8c      	ldr	r3, [pc, #560]	; (90005320 <MX_LWIP_Init+0x268>)
900050f0:	22c3      	movs	r2, #195	; 0xc3
900050f2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
900050f4:	4b8a      	ldr	r3, [pc, #552]	; (90005320 <MX_LWIP_Init+0x268>)
900050f6:	22a8      	movs	r2, #168	; 0xa8
900050f8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 18;
900050fa:	4b89      	ldr	r3, [pc, #548]	; (90005320 <MX_LWIP_Init+0x268>)
900050fc:	2212      	movs	r2, #18
900050fe:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
90005100:	4b87      	ldr	r3, [pc, #540]	; (90005320 <MX_LWIP_Init+0x268>)
90005102:	2201      	movs	r2, #1
90005104:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
90005106:	2100      	movs	r1, #0
90005108:	2000      	movs	r0, #0
9000510a:	f003 fe47 	bl	90008d9c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
9000510e:	4b82      	ldr	r3, [pc, #520]	; (90005318 <MX_LWIP_Init+0x260>)
90005110:	781b      	ldrb	r3, [r3, #0]
90005112:	061a      	lsls	r2, r3, #24
90005114:	4b80      	ldr	r3, [pc, #512]	; (90005318 <MX_LWIP_Init+0x260>)
90005116:	785b      	ldrb	r3, [r3, #1]
90005118:	041b      	lsls	r3, r3, #16
9000511a:	431a      	orrs	r2, r3
9000511c:	4b7e      	ldr	r3, [pc, #504]	; (90005318 <MX_LWIP_Init+0x260>)
9000511e:	789b      	ldrb	r3, [r3, #2]
90005120:	021b      	lsls	r3, r3, #8
90005122:	4313      	orrs	r3, r2
90005124:	4a7c      	ldr	r2, [pc, #496]	; (90005318 <MX_LWIP_Init+0x260>)
90005126:	78d2      	ldrb	r2, [r2, #3]
90005128:	4313      	orrs	r3, r2
9000512a:	061a      	lsls	r2, r3, #24
9000512c:	4b7a      	ldr	r3, [pc, #488]	; (90005318 <MX_LWIP_Init+0x260>)
9000512e:	781b      	ldrb	r3, [r3, #0]
90005130:	0619      	lsls	r1, r3, #24
90005132:	4b79      	ldr	r3, [pc, #484]	; (90005318 <MX_LWIP_Init+0x260>)
90005134:	785b      	ldrb	r3, [r3, #1]
90005136:	041b      	lsls	r3, r3, #16
90005138:	4319      	orrs	r1, r3
9000513a:	4b77      	ldr	r3, [pc, #476]	; (90005318 <MX_LWIP_Init+0x260>)
9000513c:	789b      	ldrb	r3, [r3, #2]
9000513e:	021b      	lsls	r3, r3, #8
90005140:	430b      	orrs	r3, r1
90005142:	4975      	ldr	r1, [pc, #468]	; (90005318 <MX_LWIP_Init+0x260>)
90005144:	78c9      	ldrb	r1, [r1, #3]
90005146:	430b      	orrs	r3, r1
90005148:	021b      	lsls	r3, r3, #8
9000514a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
9000514e:	431a      	orrs	r2, r3
90005150:	4b71      	ldr	r3, [pc, #452]	; (90005318 <MX_LWIP_Init+0x260>)
90005152:	781b      	ldrb	r3, [r3, #0]
90005154:	0619      	lsls	r1, r3, #24
90005156:	4b70      	ldr	r3, [pc, #448]	; (90005318 <MX_LWIP_Init+0x260>)
90005158:	785b      	ldrb	r3, [r3, #1]
9000515a:	041b      	lsls	r3, r3, #16
9000515c:	4319      	orrs	r1, r3
9000515e:	4b6e      	ldr	r3, [pc, #440]	; (90005318 <MX_LWIP_Init+0x260>)
90005160:	789b      	ldrb	r3, [r3, #2]
90005162:	021b      	lsls	r3, r3, #8
90005164:	430b      	orrs	r3, r1
90005166:	496c      	ldr	r1, [pc, #432]	; (90005318 <MX_LWIP_Init+0x260>)
90005168:	78c9      	ldrb	r1, [r1, #3]
9000516a:	430b      	orrs	r3, r1
9000516c:	0a1b      	lsrs	r3, r3, #8
9000516e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90005172:	431a      	orrs	r2, r3
90005174:	4b68      	ldr	r3, [pc, #416]	; (90005318 <MX_LWIP_Init+0x260>)
90005176:	781b      	ldrb	r3, [r3, #0]
90005178:	0619      	lsls	r1, r3, #24
9000517a:	4b67      	ldr	r3, [pc, #412]	; (90005318 <MX_LWIP_Init+0x260>)
9000517c:	785b      	ldrb	r3, [r3, #1]
9000517e:	041b      	lsls	r3, r3, #16
90005180:	4319      	orrs	r1, r3
90005182:	4b65      	ldr	r3, [pc, #404]	; (90005318 <MX_LWIP_Init+0x260>)
90005184:	789b      	ldrb	r3, [r3, #2]
90005186:	021b      	lsls	r3, r3, #8
90005188:	430b      	orrs	r3, r1
9000518a:	4963      	ldr	r1, [pc, #396]	; (90005318 <MX_LWIP_Init+0x260>)
9000518c:	78c9      	ldrb	r1, [r1, #3]
9000518e:	430b      	orrs	r3, r1
90005190:	0e1b      	lsrs	r3, r3, #24
90005192:	4313      	orrs	r3, r2
90005194:	4a63      	ldr	r2, [pc, #396]	; (90005324 <MX_LWIP_Init+0x26c>)
90005196:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
90005198:	4b60      	ldr	r3, [pc, #384]	; (9000531c <MX_LWIP_Init+0x264>)
9000519a:	781b      	ldrb	r3, [r3, #0]
9000519c:	061a      	lsls	r2, r3, #24
9000519e:	4b5f      	ldr	r3, [pc, #380]	; (9000531c <MX_LWIP_Init+0x264>)
900051a0:	785b      	ldrb	r3, [r3, #1]
900051a2:	041b      	lsls	r3, r3, #16
900051a4:	431a      	orrs	r2, r3
900051a6:	4b5d      	ldr	r3, [pc, #372]	; (9000531c <MX_LWIP_Init+0x264>)
900051a8:	789b      	ldrb	r3, [r3, #2]
900051aa:	021b      	lsls	r3, r3, #8
900051ac:	4313      	orrs	r3, r2
900051ae:	4a5b      	ldr	r2, [pc, #364]	; (9000531c <MX_LWIP_Init+0x264>)
900051b0:	78d2      	ldrb	r2, [r2, #3]
900051b2:	4313      	orrs	r3, r2
900051b4:	061a      	lsls	r2, r3, #24
900051b6:	4b59      	ldr	r3, [pc, #356]	; (9000531c <MX_LWIP_Init+0x264>)
900051b8:	781b      	ldrb	r3, [r3, #0]
900051ba:	0619      	lsls	r1, r3, #24
900051bc:	4b57      	ldr	r3, [pc, #348]	; (9000531c <MX_LWIP_Init+0x264>)
900051be:	785b      	ldrb	r3, [r3, #1]
900051c0:	041b      	lsls	r3, r3, #16
900051c2:	4319      	orrs	r1, r3
900051c4:	4b55      	ldr	r3, [pc, #340]	; (9000531c <MX_LWIP_Init+0x264>)
900051c6:	789b      	ldrb	r3, [r3, #2]
900051c8:	021b      	lsls	r3, r3, #8
900051ca:	430b      	orrs	r3, r1
900051cc:	4953      	ldr	r1, [pc, #332]	; (9000531c <MX_LWIP_Init+0x264>)
900051ce:	78c9      	ldrb	r1, [r1, #3]
900051d0:	430b      	orrs	r3, r1
900051d2:	021b      	lsls	r3, r3, #8
900051d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
900051d8:	431a      	orrs	r2, r3
900051da:	4b50      	ldr	r3, [pc, #320]	; (9000531c <MX_LWIP_Init+0x264>)
900051dc:	781b      	ldrb	r3, [r3, #0]
900051de:	0619      	lsls	r1, r3, #24
900051e0:	4b4e      	ldr	r3, [pc, #312]	; (9000531c <MX_LWIP_Init+0x264>)
900051e2:	785b      	ldrb	r3, [r3, #1]
900051e4:	041b      	lsls	r3, r3, #16
900051e6:	4319      	orrs	r1, r3
900051e8:	4b4c      	ldr	r3, [pc, #304]	; (9000531c <MX_LWIP_Init+0x264>)
900051ea:	789b      	ldrb	r3, [r3, #2]
900051ec:	021b      	lsls	r3, r3, #8
900051ee:	430b      	orrs	r3, r1
900051f0:	494a      	ldr	r1, [pc, #296]	; (9000531c <MX_LWIP_Init+0x264>)
900051f2:	78c9      	ldrb	r1, [r1, #3]
900051f4:	430b      	orrs	r3, r1
900051f6:	0a1b      	lsrs	r3, r3, #8
900051f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
900051fc:	431a      	orrs	r2, r3
900051fe:	4b47      	ldr	r3, [pc, #284]	; (9000531c <MX_LWIP_Init+0x264>)
90005200:	781b      	ldrb	r3, [r3, #0]
90005202:	0619      	lsls	r1, r3, #24
90005204:	4b45      	ldr	r3, [pc, #276]	; (9000531c <MX_LWIP_Init+0x264>)
90005206:	785b      	ldrb	r3, [r3, #1]
90005208:	041b      	lsls	r3, r3, #16
9000520a:	4319      	orrs	r1, r3
9000520c:	4b43      	ldr	r3, [pc, #268]	; (9000531c <MX_LWIP_Init+0x264>)
9000520e:	789b      	ldrb	r3, [r3, #2]
90005210:	021b      	lsls	r3, r3, #8
90005212:	430b      	orrs	r3, r1
90005214:	4941      	ldr	r1, [pc, #260]	; (9000531c <MX_LWIP_Init+0x264>)
90005216:	78c9      	ldrb	r1, [r1, #3]
90005218:	430b      	orrs	r3, r1
9000521a:	0e1b      	lsrs	r3, r3, #24
9000521c:	4313      	orrs	r3, r2
9000521e:	4a42      	ldr	r2, [pc, #264]	; (90005328 <MX_LWIP_Init+0x270>)
90005220:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
90005222:	4b3f      	ldr	r3, [pc, #252]	; (90005320 <MX_LWIP_Init+0x268>)
90005224:	781b      	ldrb	r3, [r3, #0]
90005226:	061a      	lsls	r2, r3, #24
90005228:	4b3d      	ldr	r3, [pc, #244]	; (90005320 <MX_LWIP_Init+0x268>)
9000522a:	785b      	ldrb	r3, [r3, #1]
9000522c:	041b      	lsls	r3, r3, #16
9000522e:	431a      	orrs	r2, r3
90005230:	4b3b      	ldr	r3, [pc, #236]	; (90005320 <MX_LWIP_Init+0x268>)
90005232:	789b      	ldrb	r3, [r3, #2]
90005234:	021b      	lsls	r3, r3, #8
90005236:	4313      	orrs	r3, r2
90005238:	4a39      	ldr	r2, [pc, #228]	; (90005320 <MX_LWIP_Init+0x268>)
9000523a:	78d2      	ldrb	r2, [r2, #3]
9000523c:	4313      	orrs	r3, r2
9000523e:	061a      	lsls	r2, r3, #24
90005240:	4b37      	ldr	r3, [pc, #220]	; (90005320 <MX_LWIP_Init+0x268>)
90005242:	781b      	ldrb	r3, [r3, #0]
90005244:	0619      	lsls	r1, r3, #24
90005246:	4b36      	ldr	r3, [pc, #216]	; (90005320 <MX_LWIP_Init+0x268>)
90005248:	785b      	ldrb	r3, [r3, #1]
9000524a:	041b      	lsls	r3, r3, #16
9000524c:	4319      	orrs	r1, r3
9000524e:	4b34      	ldr	r3, [pc, #208]	; (90005320 <MX_LWIP_Init+0x268>)
90005250:	789b      	ldrb	r3, [r3, #2]
90005252:	021b      	lsls	r3, r3, #8
90005254:	430b      	orrs	r3, r1
90005256:	4932      	ldr	r1, [pc, #200]	; (90005320 <MX_LWIP_Init+0x268>)
90005258:	78c9      	ldrb	r1, [r1, #3]
9000525a:	430b      	orrs	r3, r1
9000525c:	021b      	lsls	r3, r3, #8
9000525e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
90005262:	431a      	orrs	r2, r3
90005264:	4b2e      	ldr	r3, [pc, #184]	; (90005320 <MX_LWIP_Init+0x268>)
90005266:	781b      	ldrb	r3, [r3, #0]
90005268:	0619      	lsls	r1, r3, #24
9000526a:	4b2d      	ldr	r3, [pc, #180]	; (90005320 <MX_LWIP_Init+0x268>)
9000526c:	785b      	ldrb	r3, [r3, #1]
9000526e:	041b      	lsls	r3, r3, #16
90005270:	4319      	orrs	r1, r3
90005272:	4b2b      	ldr	r3, [pc, #172]	; (90005320 <MX_LWIP_Init+0x268>)
90005274:	789b      	ldrb	r3, [r3, #2]
90005276:	021b      	lsls	r3, r3, #8
90005278:	430b      	orrs	r3, r1
9000527a:	4929      	ldr	r1, [pc, #164]	; (90005320 <MX_LWIP_Init+0x268>)
9000527c:	78c9      	ldrb	r1, [r1, #3]
9000527e:	430b      	orrs	r3, r1
90005280:	0a1b      	lsrs	r3, r3, #8
90005282:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90005286:	431a      	orrs	r2, r3
90005288:	4b25      	ldr	r3, [pc, #148]	; (90005320 <MX_LWIP_Init+0x268>)
9000528a:	781b      	ldrb	r3, [r3, #0]
9000528c:	0619      	lsls	r1, r3, #24
9000528e:	4b24      	ldr	r3, [pc, #144]	; (90005320 <MX_LWIP_Init+0x268>)
90005290:	785b      	ldrb	r3, [r3, #1]
90005292:	041b      	lsls	r3, r3, #16
90005294:	4319      	orrs	r1, r3
90005296:	4b22      	ldr	r3, [pc, #136]	; (90005320 <MX_LWIP_Init+0x268>)
90005298:	789b      	ldrb	r3, [r3, #2]
9000529a:	021b      	lsls	r3, r3, #8
9000529c:	430b      	orrs	r3, r1
9000529e:	4920      	ldr	r1, [pc, #128]	; (90005320 <MX_LWIP_Init+0x268>)
900052a0:	78c9      	ldrb	r1, [r1, #3]
900052a2:	430b      	orrs	r3, r1
900052a4:	0e1b      	lsrs	r3, r3, #24
900052a6:	4313      	orrs	r3, r2
900052a8:	4a20      	ldr	r2, [pc, #128]	; (9000532c <MX_LWIP_Init+0x274>)
900052aa:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
900052ac:	4b20      	ldr	r3, [pc, #128]	; (90005330 <MX_LWIP_Init+0x278>)
900052ae:	9302      	str	r3, [sp, #8]
900052b0:	4b20      	ldr	r3, [pc, #128]	; (90005334 <MX_LWIP_Init+0x27c>)
900052b2:	9301      	str	r3, [sp, #4]
900052b4:	2300      	movs	r3, #0
900052b6:	9300      	str	r3, [sp, #0]
900052b8:	4b1c      	ldr	r3, [pc, #112]	; (9000532c <MX_LWIP_Init+0x274>)
900052ba:	4a1b      	ldr	r2, [pc, #108]	; (90005328 <MX_LWIP_Init+0x270>)
900052bc:	4919      	ldr	r1, [pc, #100]	; (90005324 <MX_LWIP_Init+0x26c>)
900052be:	481e      	ldr	r0, [pc, #120]	; (90005338 <MX_LWIP_Init+0x280>)
900052c0:	f006 fa06 	bl	9000b6d0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
900052c4:	481c      	ldr	r0, [pc, #112]	; (90005338 <MX_LWIP_Init+0x280>)
900052c6:	f006 fbb5 	bl	9000ba34 <netif_set_default>

  if (netif_is_link_up(&gnetif))
900052ca:	4b1b      	ldr	r3, [pc, #108]	; (90005338 <MX_LWIP_Init+0x280>)
900052cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
900052d0:	089b      	lsrs	r3, r3, #2
900052d2:	f003 0301 	and.w	r3, r3, #1
900052d6:	b2db      	uxtb	r3, r3
900052d8:	2b00      	cmp	r3, #0
900052da:	d003      	beq.n	900052e4 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
900052dc:	4816      	ldr	r0, [pc, #88]	; (90005338 <MX_LWIP_Init+0x280>)
900052de:	f006 fbb9 	bl	9000ba54 <netif_set_up>
900052e2:	e002      	b.n	900052ea <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
900052e4:	4814      	ldr	r0, [pc, #80]	; (90005338 <MX_LWIP_Init+0x280>)
900052e6:	f006 fc21 	bl	9000bb2c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
900052ea:	4914      	ldr	r1, [pc, #80]	; (9000533c <MX_LWIP_Init+0x284>)
900052ec:	4812      	ldr	r0, [pc, #72]	; (90005338 <MX_LWIP_Init+0x280>)
900052ee:	f006 fcb3 	bl	9000bc58 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
900052f2:	4b13      	ldr	r3, [pc, #76]	; (90005340 <MX_LWIP_Init+0x288>)
900052f4:	1d3c      	adds	r4, r7, #4
900052f6:	461d      	mov	r5, r3
900052f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
900052fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
900052fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90005300:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
90005304:	1d3b      	adds	r3, r7, #4
90005306:	490c      	ldr	r1, [pc, #48]	; (90005338 <MX_LWIP_Init+0x280>)
90005308:	4618      	mov	r0, r3
9000530a:	f000 fd33 	bl	90005d74 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
9000530e:	bf00      	nop
90005310:	3720      	adds	r7, #32
90005312:	46bd      	mov	sp, r7
90005314:	bdb0      	pop	{r4, r5, r7, pc}
90005316:	bf00      	nop
90005318:	2400ae14 	.word	0x2400ae14
9000531c:	2400ae18 	.word	0x2400ae18
90005320:	2400ae1c 	.word	0x2400ae1c
90005324:	2400ae08 	.word	0x2400ae08
90005328:	2400ae0c 	.word	0x2400ae0c
9000532c:	2400ae10 	.word	0x2400ae10
90005330:	90008cd9 	.word	0x90008cd9
90005334:	900057e1 	.word	0x900057e1
90005338:	2400add4 	.word	0x2400add4
9000533c:	90005345 	.word	0x90005345
90005340:	900178cc 	.word	0x900178cc

90005344 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
90005344:	b480      	push	{r7}
90005346:	b083      	sub	sp, #12
90005348:	af00      	add	r7, sp, #0
9000534a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
9000534c:	bf00      	nop
9000534e:	370c      	adds	r7, #12
90005350:	46bd      	mov	sp, r7
90005352:	f85d 7b04 	ldr.w	r7, [sp], #4
90005356:	4770      	bx	lr

90005358 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
90005358:	b580      	push	{r7, lr}
9000535a:	b082      	sub	sp, #8
9000535c:	af00      	add	r7, sp, #0
9000535e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
90005360:	4b04      	ldr	r3, [pc, #16]	; (90005374 <HAL_ETH_RxCpltCallback+0x1c>)
90005362:	681b      	ldr	r3, [r3, #0]
90005364:	4618      	mov	r0, r3
90005366:	f000 fe4f 	bl	90006008 <osSemaphoreRelease>
}
9000536a:	bf00      	nop
9000536c:	3708      	adds	r7, #8
9000536e:	46bd      	mov	sp, r7
90005370:	bd80      	pop	{r7, pc}
90005372:	bf00      	nop
90005374:	2400f7ac 	.word	0x2400f7ac

90005378 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
90005378:	b580      	push	{r7, lr}
9000537a:	b082      	sub	sp, #8
9000537c:	af00      	add	r7, sp, #0
9000537e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
90005380:	4b04      	ldr	r3, [pc, #16]	; (90005394 <HAL_ETH_TxCpltCallback+0x1c>)
90005382:	681b      	ldr	r3, [r3, #0]
90005384:	4618      	mov	r0, r3
90005386:	f000 fe3f 	bl	90006008 <osSemaphoreRelease>
}
9000538a:	bf00      	nop
9000538c:	3708      	adds	r7, #8
9000538e:	46bd      	mov	sp, r7
90005390:	bd80      	pop	{r7, pc}
90005392:	bf00      	nop
90005394:	2400f7b0 	.word	0x2400f7b0

90005398 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
90005398:	b580      	push	{r7, lr}
9000539a:	b082      	sub	sp, #8
9000539c:	af00      	add	r7, sp, #0
9000539e:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
900053a0:	6878      	ldr	r0, [r7, #4]
900053a2:	f7fe fa47 	bl	90003834 <HAL_ETH_GetDMAError>
900053a6:	4603      	mov	r3, r0
900053a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
900053ac:	2b80      	cmp	r3, #128	; 0x80
900053ae:	d104      	bne.n	900053ba <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
900053b0:	4b04      	ldr	r3, [pc, #16]	; (900053c4 <HAL_ETH_ErrorCallback+0x2c>)
900053b2:	681b      	ldr	r3, [r3, #0]
900053b4:	4618      	mov	r0, r3
900053b6:	f000 fe27 	bl	90006008 <osSemaphoreRelease>
  }
}
900053ba:	bf00      	nop
900053bc:	3708      	adds	r7, #8
900053be:	46bd      	mov	sp, r7
900053c0:	bd80      	pop	{r7, pc}
900053c2:	bf00      	nop
900053c4:	2400f7ac 	.word	0x2400f7ac

900053c8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
900053c8:	b5b0      	push	{r4, r5, r7, lr}
900053ca:	b0a8      	sub	sp, #160	; 0xa0
900053cc:	af00      	add	r7, sp, #0
900053ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
900053d0:	2300      	movs	r3, #0
900053d2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
900053d6:	2300      	movs	r3, #0
900053d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
900053dc:	2300      	movs	r3, #0
900053de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
900053e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
900053e6:	2264      	movs	r2, #100	; 0x64
900053e8:	2100      	movs	r1, #0
900053ea:	4618      	mov	r0, r3
900053ec:	f010 fb65 	bl	90015aba <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
900053f0:	4b84      	ldr	r3, [pc, #528]	; (90005604 <low_level_init+0x23c>)
900053f2:	4a85      	ldr	r2, [pc, #532]	; (90005608 <low_level_init+0x240>)
900053f4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
900053f6:	2300      	movs	r3, #0
900053f8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
900053fc:	2380      	movs	r3, #128	; 0x80
900053fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
90005402:	23e1      	movs	r3, #225	; 0xe1
90005404:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
90005408:	2300      	movs	r3, #0
9000540a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
9000540e:	2300      	movs	r3, #0
90005410:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
90005414:	2300      	movs	r3, #0
90005416:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
9000541a:	4a7a      	ldr	r2, [pc, #488]	; (90005604 <low_level_init+0x23c>)
9000541c:	f107 0324 	add.w	r3, r7, #36	; 0x24
90005420:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
90005422:	4b78      	ldr	r3, [pc, #480]	; (90005604 <low_level_init+0x23c>)
90005424:	2201      	movs	r2, #1
90005426:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
90005428:	4b76      	ldr	r3, [pc, #472]	; (90005604 <low_level_init+0x23c>)
9000542a:	4a78      	ldr	r2, [pc, #480]	; (9000560c <low_level_init+0x244>)
9000542c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
9000542e:	4b75      	ldr	r3, [pc, #468]	; (90005604 <low_level_init+0x23c>)
90005430:	4a77      	ldr	r2, [pc, #476]	; (90005610 <low_level_init+0x248>)
90005432:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
90005434:	4b73      	ldr	r3, [pc, #460]	; (90005604 <low_level_init+0x23c>)
90005436:	f44f 62c0 	mov.w	r2, #1536	; 0x600
9000543a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
9000543c:	4871      	ldr	r0, [pc, #452]	; (90005604 <low_level_init+0x23c>)
9000543e:	f7fd f9b7 	bl	900027b0 <HAL_ETH_Init>
90005442:	4603      	mov	r3, r0
90005444:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
90005448:	2238      	movs	r2, #56	; 0x38
9000544a:	2100      	movs	r1, #0
9000544c:	4871      	ldr	r0, [pc, #452]	; (90005614 <low_level_init+0x24c>)
9000544e:	f010 fb34 	bl	90015aba <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
90005452:	4b70      	ldr	r3, [pc, #448]	; (90005614 <low_level_init+0x24c>)
90005454:	2221      	movs	r2, #33	; 0x21
90005456:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
90005458:	4b6e      	ldr	r3, [pc, #440]	; (90005614 <low_level_init+0x24c>)
9000545a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
9000545e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
90005460:	4b6c      	ldr	r3, [pc, #432]	; (90005614 <low_level_init+0x24c>)
90005462:	2200      	movs	r2, #0
90005464:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
90005466:	486c      	ldr	r0, [pc, #432]	; (90005618 <low_level_init+0x250>)
90005468:	f005 ffec 	bl	9000b444 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
9000546c:	687b      	ldr	r3, [r7, #4]
9000546e:	2206      	movs	r2, #6
90005470:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
90005474:	4b63      	ldr	r3, [pc, #396]	; (90005604 <low_level_init+0x23c>)
90005476:	685b      	ldr	r3, [r3, #4]
90005478:	781a      	ldrb	r2, [r3, #0]
9000547a:	687b      	ldr	r3, [r7, #4]
9000547c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
90005480:	4b60      	ldr	r3, [pc, #384]	; (90005604 <low_level_init+0x23c>)
90005482:	685b      	ldr	r3, [r3, #4]
90005484:	785a      	ldrb	r2, [r3, #1]
90005486:	687b      	ldr	r3, [r7, #4]
90005488:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
9000548c:	4b5d      	ldr	r3, [pc, #372]	; (90005604 <low_level_init+0x23c>)
9000548e:	685b      	ldr	r3, [r3, #4]
90005490:	789a      	ldrb	r2, [r3, #2]
90005492:	687b      	ldr	r3, [r7, #4]
90005494:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
90005498:	4b5a      	ldr	r3, [pc, #360]	; (90005604 <low_level_init+0x23c>)
9000549a:	685b      	ldr	r3, [r3, #4]
9000549c:	78da      	ldrb	r2, [r3, #3]
9000549e:	687b      	ldr	r3, [r7, #4]
900054a0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
900054a4:	4b57      	ldr	r3, [pc, #348]	; (90005604 <low_level_init+0x23c>)
900054a6:	685b      	ldr	r3, [r3, #4]
900054a8:	791a      	ldrb	r2, [r3, #4]
900054aa:	687b      	ldr	r3, [r7, #4]
900054ac:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
900054b0:	4b54      	ldr	r3, [pc, #336]	; (90005604 <low_level_init+0x23c>)
900054b2:	685b      	ldr	r3, [r3, #4]
900054b4:	795a      	ldrb	r2, [r3, #5]
900054b6:	687b      	ldr	r3, [r7, #4]
900054b8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
900054bc:	687b      	ldr	r3, [r7, #4]
900054be:	f240 52dc 	movw	r2, #1500	; 0x5dc
900054c2:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
900054c4:	687b      	ldr	r3, [r7, #4]
900054c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
900054ca:	f043 030a 	orr.w	r3, r3, #10
900054ce:	b2da      	uxtb	r2, r3
900054d0:	687b      	ldr	r3, [r7, #4]
900054d2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
900054d6:	2203      	movs	r2, #3
900054d8:	2100      	movs	r1, #0
900054da:	2001      	movs	r0, #1
900054dc:	f001 f83a 	bl	90006554 <xQueueGenericCreate>
900054e0:	4603      	mov	r3, r0
900054e2:	4a4e      	ldr	r2, [pc, #312]	; (9000561c <low_level_init+0x254>)
900054e4:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
900054e6:	2203      	movs	r2, #3
900054e8:	2100      	movs	r1, #0
900054ea:	2001      	movs	r0, #1
900054ec:	f001 f832 	bl	90006554 <xQueueGenericCreate>
900054f0:	4603      	mov	r3, r0
900054f2:	4a4b      	ldr	r2, [pc, #300]	; (90005620 <low_level_init+0x258>)
900054f4:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
900054f6:	4b4b      	ldr	r3, [pc, #300]	; (90005624 <low_level_init+0x25c>)
900054f8:	f107 0408 	add.w	r4, r7, #8
900054fc:	461d      	mov	r5, r3
900054fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
90005500:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90005502:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90005506:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
9000550a:	f107 0308 	add.w	r3, r7, #8
9000550e:	6879      	ldr	r1, [r7, #4]
90005510:	4618      	mov	r0, r3
90005512:	f000 fc2f 	bl	90005d74 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
90005516:	4944      	ldr	r1, [pc, #272]	; (90005628 <low_level_init+0x260>)
90005518:	4844      	ldr	r0, [pc, #272]	; (9000562c <low_level_init+0x264>)
9000551a:	f7fc fe1c 	bl	90002156 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
9000551e:	4843      	ldr	r0, [pc, #268]	; (9000562c <low_level_init+0x264>)
90005520:	f7fc fe4b 	bl	900021ba <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
90005524:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
90005528:	2b00      	cmp	r3, #0
9000552a:	d164      	bne.n	900055f6 <low_level_init+0x22e>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
9000552c:	483f      	ldr	r0, [pc, #252]	; (9000562c <low_level_init+0x264>)
9000552e:	f7fc feec 	bl	9000230a <LAN8742_GetLinkState>
90005532:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
90005536:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
9000553a:	2b01      	cmp	r3, #1
9000553c:	dc06      	bgt.n	9000554c <low_level_init+0x184>
    {
      netif_set_link_down(netif);
9000553e:	6878      	ldr	r0, [r7, #4]
90005540:	f006 fb5a 	bl	9000bbf8 <netif_set_link_down>
      netif_set_down(netif);
90005544:	6878      	ldr	r0, [r7, #4]
90005546:	f006 faf1 	bl	9000bb2c <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
9000554a:	e056      	b.n	900055fa <low_level_init+0x232>
      switch (PHYLinkState)
9000554c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
90005550:	3b02      	subs	r3, #2
90005552:	2b03      	cmp	r3, #3
90005554:	d82a      	bhi.n	900055ac <low_level_init+0x1e4>
90005556:	a201      	add	r2, pc, #4	; (adr r2, 9000555c <low_level_init+0x194>)
90005558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000555c:	9000556d 	.word	0x9000556d
90005560:	9000557f 	.word	0x9000557f
90005564:	9000558f 	.word	0x9000558f
90005568:	9000559f 	.word	0x9000559f
        duplex = ETH_FULLDUPLEX_MODE;
9000556c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
90005570:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
90005574:	f44f 4380 	mov.w	r3, #16384	; 0x4000
90005578:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
9000557c:	e01f      	b.n	900055be <low_level_init+0x1f6>
        duplex = ETH_HALFDUPLEX_MODE;
9000557e:	2300      	movs	r3, #0
90005580:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
90005584:	f44f 4380 	mov.w	r3, #16384	; 0x4000
90005588:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
9000558c:	e017      	b.n	900055be <low_level_init+0x1f6>
        duplex = ETH_FULLDUPLEX_MODE;
9000558e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
90005592:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
90005596:	2300      	movs	r3, #0
90005598:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
9000559c:	e00f      	b.n	900055be <low_level_init+0x1f6>
        duplex = ETH_HALFDUPLEX_MODE;
9000559e:	2300      	movs	r3, #0
900055a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
900055a4:	2300      	movs	r3, #0
900055a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
900055aa:	e008      	b.n	900055be <low_level_init+0x1f6>
        duplex = ETH_FULLDUPLEX_MODE;
900055ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
900055b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
900055b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
900055b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
900055bc:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
900055be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
900055c2:	4619      	mov	r1, r3
900055c4:	480f      	ldr	r0, [pc, #60]	; (90005604 <low_level_init+0x23c>)
900055c6:	f7fd feef 	bl	900033a8 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
900055ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
900055ce:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
900055d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
900055d4:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
900055d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
900055da:	4619      	mov	r1, r3
900055dc:	4809      	ldr	r0, [pc, #36]	; (90005604 <low_level_init+0x23c>)
900055de:	f7fe f8b7 	bl	90003750 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
900055e2:	4808      	ldr	r0, [pc, #32]	; (90005604 <low_level_init+0x23c>)
900055e4:	f7fd fa2c 	bl	90002a40 <HAL_ETH_Start_IT>
    netif_set_up(netif);
900055e8:	6878      	ldr	r0, [r7, #4]
900055ea:	f006 fa33 	bl	9000ba54 <netif_set_up>
    netif_set_link_up(netif);
900055ee:	6878      	ldr	r0, [r7, #4]
900055f0:	f006 face 	bl	9000bb90 <netif_set_link_up>
}
900055f4:	e001      	b.n	900055fa <low_level_init+0x232>
    Error_Handler();
900055f6:	f7fc fb81 	bl	90001cfc <Error_Handler>
}
900055fa:	bf00      	nop
900055fc:	37a0      	adds	r7, #160	; 0xa0
900055fe:	46bd      	mov	sp, r7
90005600:	bdb0      	pop	{r4, r5, r7, pc}
90005602:	bf00      	nop
90005604:	2400f7b4 	.word	0x2400f7b4
90005608:	40028000 	.word	0x40028000
9000560c:	30000060 	.word	0x30000060
90005610:	30000000 	.word	0x30000000
90005614:	2400f864 	.word	0x2400f864
90005618:	9001a774 	.word	0x9001a774
9000561c:	2400f7ac 	.word	0x2400f7ac
90005620:	2400f7b0 	.word	0x2400f7b0
90005624:	900178f0 	.word	0x900178f0
90005628:	2400050c 	.word	0x2400050c
9000562c:	2400f89c 	.word	0x2400f89c

90005630 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
90005630:	b580      	push	{r7, lr}
90005632:	b092      	sub	sp, #72	; 0x48
90005634:	af00      	add	r7, sp, #0
90005636:	6078      	str	r0, [r7, #4]
90005638:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
9000563a:	2300      	movs	r3, #0
9000563c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
9000563e:	2300      	movs	r3, #0
90005640:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
90005642:	2300      	movs	r3, #0
90005644:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
90005648:	f107 030c 	add.w	r3, r7, #12
9000564c:	2230      	movs	r2, #48	; 0x30
9000564e:	2100      	movs	r1, #0
90005650:	4618      	mov	r0, r3
90005652:	f010 fa32 	bl	90015aba <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
90005656:	f107 030c 	add.w	r3, r7, #12
9000565a:	2230      	movs	r2, #48	; 0x30
9000565c:	2100      	movs	r1, #0
9000565e:	4618      	mov	r0, r3
90005660:	f010 fa2b 	bl	90015aba <memset>

  for(q = p; q != NULL; q = q->next)
90005664:	683b      	ldr	r3, [r7, #0]
90005666:	643b      	str	r3, [r7, #64]	; 0x40
90005668:	e045      	b.n	900056f6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
9000566a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
9000566c:	2b03      	cmp	r3, #3
9000566e:	d902      	bls.n	90005676 <low_level_output+0x46>
      return ERR_IF;
90005670:	f06f 030b 	mvn.w	r3, #11
90005674:	e065      	b.n	90005742 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
90005676:	6c3b      	ldr	r3, [r7, #64]	; 0x40
90005678:	6859      	ldr	r1, [r3, #4]
9000567a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
9000567c:	4613      	mov	r3, r2
9000567e:	005b      	lsls	r3, r3, #1
90005680:	4413      	add	r3, r2
90005682:	009b      	lsls	r3, r3, #2
90005684:	3348      	adds	r3, #72	; 0x48
90005686:	443b      	add	r3, r7
90005688:	3b3c      	subs	r3, #60	; 0x3c
9000568a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
9000568c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
9000568e:	895b      	ldrh	r3, [r3, #10]
90005690:	4619      	mov	r1, r3
90005692:	6c7a      	ldr	r2, [r7, #68]	; 0x44
90005694:	4613      	mov	r3, r2
90005696:	005b      	lsls	r3, r3, #1
90005698:	4413      	add	r3, r2
9000569a:	009b      	lsls	r3, r3, #2
9000569c:	3348      	adds	r3, #72	; 0x48
9000569e:	443b      	add	r3, r7
900056a0:	3b38      	subs	r3, #56	; 0x38
900056a2:	6019      	str	r1, [r3, #0]

    if(i>0)
900056a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
900056a6:	2b00      	cmp	r3, #0
900056a8:	d011      	beq.n	900056ce <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
900056aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
900056ac:	1e5a      	subs	r2, r3, #1
900056ae:	f107 000c 	add.w	r0, r7, #12
900056b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
900056b4:	460b      	mov	r3, r1
900056b6:	005b      	lsls	r3, r3, #1
900056b8:	440b      	add	r3, r1
900056ba:	009b      	lsls	r3, r3, #2
900056bc:	18c1      	adds	r1, r0, r3
900056be:	4613      	mov	r3, r2
900056c0:	005b      	lsls	r3, r3, #1
900056c2:	4413      	add	r3, r2
900056c4:	009b      	lsls	r3, r3, #2
900056c6:	3348      	adds	r3, #72	; 0x48
900056c8:	443b      	add	r3, r7
900056ca:	3b34      	subs	r3, #52	; 0x34
900056cc:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
900056ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
900056d0:	681b      	ldr	r3, [r3, #0]
900056d2:	2b00      	cmp	r3, #0
900056d4:	d109      	bne.n	900056ea <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
900056d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
900056d8:	4613      	mov	r3, r2
900056da:	005b      	lsls	r3, r3, #1
900056dc:	4413      	add	r3, r2
900056de:	009b      	lsls	r3, r3, #2
900056e0:	3348      	adds	r3, #72	; 0x48
900056e2:	443b      	add	r3, r7
900056e4:	3b34      	subs	r3, #52	; 0x34
900056e6:	2200      	movs	r2, #0
900056e8:	601a      	str	r2, [r3, #0]
    }

    i++;
900056ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
900056ec:	3301      	adds	r3, #1
900056ee:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
900056f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
900056f2:	681b      	ldr	r3, [r3, #0]
900056f4:	643b      	str	r3, [r7, #64]	; 0x40
900056f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
900056f8:	2b00      	cmp	r3, #0
900056fa:	d1b6      	bne.n	9000566a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
900056fc:	683b      	ldr	r3, [r7, #0]
900056fe:	891b      	ldrh	r3, [r3, #8]
90005700:	461a      	mov	r2, r3
90005702:	4b12      	ldr	r3, [pc, #72]	; (9000574c <low_level_output+0x11c>)
90005704:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
90005706:	4a11      	ldr	r2, [pc, #68]	; (9000574c <low_level_output+0x11c>)
90005708:	f107 030c 	add.w	r3, r7, #12
9000570c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
9000570e:	4a0f      	ldr	r2, [pc, #60]	; (9000574c <low_level_output+0x11c>)
90005710:	683b      	ldr	r3, [r7, #0]
90005712:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
90005714:	6838      	ldr	r0, [r7, #0]
90005716:	f006 fef3 	bl	9000c500 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
9000571a:	490c      	ldr	r1, [pc, #48]	; (9000574c <low_level_output+0x11c>)
9000571c:	480c      	ldr	r0, [pc, #48]	; (90005750 <low_level_output+0x120>)
9000571e:	f7fd fa93 	bl	90002c48 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
90005722:	bf00      	nop
90005724:	4b0b      	ldr	r3, [pc, #44]	; (90005754 <low_level_output+0x124>)
90005726:	681b      	ldr	r3, [r3, #0]
90005728:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
9000572c:	4618      	mov	r0, r3
9000572e:	f000 fc1d 	bl	90005f6c <osSemaphoreWait>
90005732:	4603      	mov	r3, r0
90005734:	2b00      	cmp	r3, #0
90005736:	d1f5      	bne.n	90005724 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
90005738:	4805      	ldr	r0, [pc, #20]	; (90005750 <low_level_output+0x120>)
9000573a:	f7fd fc04 	bl	90002f46 <HAL_ETH_ReleaseTxPacket>

  return errval;
9000573e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
90005742:	4618      	mov	r0, r3
90005744:	3748      	adds	r7, #72	; 0x48
90005746:	46bd      	mov	sp, r7
90005748:	bd80      	pop	{r7, pc}
9000574a:	bf00      	nop
9000574c:	2400f864 	.word	0x2400f864
90005750:	2400f7b4 	.word	0x2400f7b4
90005754:	2400f7b0 	.word	0x2400f7b0

90005758 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
90005758:	b580      	push	{r7, lr}
9000575a:	b084      	sub	sp, #16
9000575c:	af00      	add	r7, sp, #0
9000575e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
90005760:	2300      	movs	r3, #0
90005762:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
90005764:	4b07      	ldr	r3, [pc, #28]	; (90005784 <low_level_input+0x2c>)
90005766:	781b      	ldrb	r3, [r3, #0]
90005768:	2b00      	cmp	r3, #0
9000576a:	d105      	bne.n	90005778 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
9000576c:	f107 030c 	add.w	r3, r7, #12
90005770:	4619      	mov	r1, r3
90005772:	4805      	ldr	r0, [pc, #20]	; (90005788 <low_level_input+0x30>)
90005774:	f7fd fab9 	bl	90002cea <HAL_ETH_ReadData>
  }

  return p;
90005778:	68fb      	ldr	r3, [r7, #12]
}
9000577a:	4618      	mov	r0, r3
9000577c:	3710      	adds	r7, #16
9000577e:	46bd      	mov	sp, r7
90005780:	bd80      	pop	{r7, pc}
90005782:	bf00      	nop
90005784:	2400f7a8 	.word	0x2400f7a8
90005788:	2400f7b4 	.word	0x2400f7b4

9000578c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
9000578c:	b580      	push	{r7, lr}
9000578e:	b084      	sub	sp, #16
90005790:	af00      	add	r7, sp, #0
90005792:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
90005794:	2300      	movs	r3, #0
90005796:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
90005798:	687b      	ldr	r3, [r7, #4]
9000579a:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
9000579c:	4b0f      	ldr	r3, [pc, #60]	; (900057dc <ethernetif_input+0x50>)
9000579e:	681b      	ldr	r3, [r3, #0]
900057a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
900057a4:	4618      	mov	r0, r3
900057a6:	f000 fbe1 	bl	90005f6c <osSemaphoreWait>
900057aa:	4603      	mov	r3, r0
900057ac:	2b00      	cmp	r3, #0
900057ae:	d1f5      	bne.n	9000579c <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
900057b0:	68b8      	ldr	r0, [r7, #8]
900057b2:	f7ff ffd1 	bl	90005758 <low_level_input>
900057b6:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
900057b8:	68fb      	ldr	r3, [r7, #12]
900057ba:	2b00      	cmp	r3, #0
900057bc:	d00a      	beq.n	900057d4 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
900057be:	68bb      	ldr	r3, [r7, #8]
900057c0:	691b      	ldr	r3, [r3, #16]
900057c2:	68b9      	ldr	r1, [r7, #8]
900057c4:	68f8      	ldr	r0, [r7, #12]
900057c6:	4798      	blx	r3
900057c8:	4603      	mov	r3, r0
900057ca:	2b00      	cmp	r3, #0
900057cc:	d002      	beq.n	900057d4 <ethernetif_input+0x48>
          {
            pbuf_free(p);
900057ce:	68f8      	ldr	r0, [r7, #12]
900057d0:	f006 fdf0 	bl	9000c3b4 <pbuf_free>
          }
        }
      } while(p!=NULL);
900057d4:	68fb      	ldr	r3, [r7, #12]
900057d6:	2b00      	cmp	r3, #0
900057d8:	d1ea      	bne.n	900057b0 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
900057da:	e7df      	b.n	9000579c <ethernetif_input+0x10>
900057dc:	2400f7ac 	.word	0x2400f7ac

900057e0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
900057e0:	b580      	push	{r7, lr}
900057e2:	b082      	sub	sp, #8
900057e4:	af00      	add	r7, sp, #0
900057e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
900057e8:	687b      	ldr	r3, [r7, #4]
900057ea:	2b00      	cmp	r3, #0
900057ec:	d106      	bne.n	900057fc <ethernetif_init+0x1c>
900057ee:	4b0e      	ldr	r3, [pc, #56]	; (90005828 <ethernetif_init+0x48>)
900057f0:	f240 12ef 	movw	r2, #495	; 0x1ef
900057f4:	490d      	ldr	r1, [pc, #52]	; (9000582c <ethernetif_init+0x4c>)
900057f6:	480e      	ldr	r0, [pc, #56]	; (90005830 <ethernetif_init+0x50>)
900057f8:	f010 f9fc 	bl	90015bf4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
900057fc:	687b      	ldr	r3, [r7, #4]
900057fe:	2273      	movs	r2, #115	; 0x73
90005800:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
90005804:	687b      	ldr	r3, [r7, #4]
90005806:	2274      	movs	r2, #116	; 0x74
90005808:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
9000580c:	687b      	ldr	r3, [r7, #4]
9000580e:	4a09      	ldr	r2, [pc, #36]	; (90005834 <ethernetif_init+0x54>)
90005810:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
90005812:	687b      	ldr	r3, [r7, #4]
90005814:	4a08      	ldr	r2, [pc, #32]	; (90005838 <ethernetif_init+0x58>)
90005816:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
90005818:	6878      	ldr	r0, [r7, #4]
9000581a:	f7ff fdd5 	bl	900053c8 <low_level_init>

  return ERR_OK;
9000581e:	2300      	movs	r3, #0
}
90005820:	4618      	mov	r0, r3
90005822:	3708      	adds	r7, #8
90005824:	46bd      	mov	sp, r7
90005826:	bd80      	pop	{r7, pc}
90005828:	9001790c 	.word	0x9001790c
9000582c:	90017928 	.word	0x90017928
90005830:	90017938 	.word	0x90017938
90005834:	9001389d 	.word	0x9001389d
90005838:	90005631 	.word	0x90005631

9000583c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
9000583c:	b580      	push	{r7, lr}
9000583e:	b084      	sub	sp, #16
90005840:	af00      	add	r7, sp, #0
90005842:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
90005844:	687b      	ldr	r3, [r7, #4]
90005846:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
90005848:	68f9      	ldr	r1, [r7, #12]
9000584a:	4809      	ldr	r0, [pc, #36]	; (90005870 <pbuf_free_custom+0x34>)
9000584c:	f005 feea 	bl	9000b624 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
90005850:	4b08      	ldr	r3, [pc, #32]	; (90005874 <pbuf_free_custom+0x38>)
90005852:	781b      	ldrb	r3, [r3, #0]
90005854:	2b01      	cmp	r3, #1
90005856:	d107      	bne.n	90005868 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
90005858:	4b06      	ldr	r3, [pc, #24]	; (90005874 <pbuf_free_custom+0x38>)
9000585a:	2200      	movs	r2, #0
9000585c:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
9000585e:	4b06      	ldr	r3, [pc, #24]	; (90005878 <pbuf_free_custom+0x3c>)
90005860:	681b      	ldr	r3, [r3, #0]
90005862:	4618      	mov	r0, r3
90005864:	f000 fbd0 	bl	90006008 <osSemaphoreRelease>
  }
}
90005868:	bf00      	nop
9000586a:	3710      	adds	r7, #16
9000586c:	46bd      	mov	sp, r7
9000586e:	bd80      	pop	{r7, pc}
90005870:	9001a774 	.word	0x9001a774
90005874:	2400f7a8 	.word	0x2400f7a8
90005878:	2400f7ac 	.word	0x2400f7ac

9000587c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
9000587c:	b580      	push	{r7, lr}
9000587e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
90005880:	f7fc fe1a 	bl	900024b8 <HAL_GetTick>
90005884:	4603      	mov	r3, r0
}
90005886:	4618      	mov	r0, r3
90005888:	bd80      	pop	{r7, pc}
	...

9000588c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
9000588c:	b580      	push	{r7, lr}
9000588e:	b08e      	sub	sp, #56	; 0x38
90005890:	af00      	add	r7, sp, #0
90005892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90005894:	f107 0324 	add.w	r3, r7, #36	; 0x24
90005898:	2200      	movs	r2, #0
9000589a:	601a      	str	r2, [r3, #0]
9000589c:	605a      	str	r2, [r3, #4]
9000589e:	609a      	str	r2, [r3, #8]
900058a0:	60da      	str	r2, [r3, #12]
900058a2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
900058a4:	687b      	ldr	r3, [r7, #4]
900058a6:	681b      	ldr	r3, [r3, #0]
900058a8:	4a4d      	ldr	r2, [pc, #308]	; (900059e0 <HAL_ETH_MspInit+0x154>)
900058aa:	4293      	cmp	r3, r2
900058ac:	f040 8093 	bne.w	900059d6 <HAL_ETH_MspInit+0x14a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
900058b0:	4b4c      	ldr	r3, [pc, #304]	; (900059e4 <HAL_ETH_MspInit+0x158>)
900058b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
900058b6:	4a4b      	ldr	r2, [pc, #300]	; (900059e4 <HAL_ETH_MspInit+0x158>)
900058b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
900058bc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
900058c0:	4b48      	ldr	r3, [pc, #288]	; (900059e4 <HAL_ETH_MspInit+0x158>)
900058c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
900058c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
900058ca:	623b      	str	r3, [r7, #32]
900058cc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
900058ce:	4b45      	ldr	r3, [pc, #276]	; (900059e4 <HAL_ETH_MspInit+0x158>)
900058d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
900058d4:	4a43      	ldr	r2, [pc, #268]	; (900059e4 <HAL_ETH_MspInit+0x158>)
900058d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
900058da:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
900058de:	4b41      	ldr	r3, [pc, #260]	; (900059e4 <HAL_ETH_MspInit+0x158>)
900058e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
900058e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
900058e8:	61fb      	str	r3, [r7, #28]
900058ea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
900058ec:	4b3d      	ldr	r3, [pc, #244]	; (900059e4 <HAL_ETH_MspInit+0x158>)
900058ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
900058f2:	4a3c      	ldr	r2, [pc, #240]	; (900059e4 <HAL_ETH_MspInit+0x158>)
900058f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900058f8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
900058fc:	4b39      	ldr	r3, [pc, #228]	; (900059e4 <HAL_ETH_MspInit+0x158>)
900058fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
90005902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
90005906:	61bb      	str	r3, [r7, #24]
90005908:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
9000590a:	4b36      	ldr	r3, [pc, #216]	; (900059e4 <HAL_ETH_MspInit+0x158>)
9000590c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90005910:	4a34      	ldr	r2, [pc, #208]	; (900059e4 <HAL_ETH_MspInit+0x158>)
90005912:	f043 0304 	orr.w	r3, r3, #4
90005916:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
9000591a:	4b32      	ldr	r3, [pc, #200]	; (900059e4 <HAL_ETH_MspInit+0x158>)
9000591c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90005920:	f003 0304 	and.w	r3, r3, #4
90005924:	617b      	str	r3, [r7, #20]
90005926:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
90005928:	4b2e      	ldr	r3, [pc, #184]	; (900059e4 <HAL_ETH_MspInit+0x158>)
9000592a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
9000592e:	4a2d      	ldr	r2, [pc, #180]	; (900059e4 <HAL_ETH_MspInit+0x158>)
90005930:	f043 0301 	orr.w	r3, r3, #1
90005934:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90005938:	4b2a      	ldr	r3, [pc, #168]	; (900059e4 <HAL_ETH_MspInit+0x158>)
9000593a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
9000593e:	f003 0301 	and.w	r3, r3, #1
90005942:	613b      	str	r3, [r7, #16]
90005944:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
90005946:	4b27      	ldr	r3, [pc, #156]	; (900059e4 <HAL_ETH_MspInit+0x158>)
90005948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
9000594c:	4a25      	ldr	r2, [pc, #148]	; (900059e4 <HAL_ETH_MspInit+0x158>)
9000594e:	f043 0302 	orr.w	r3, r3, #2
90005952:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
90005956:	4b23      	ldr	r3, [pc, #140]	; (900059e4 <HAL_ETH_MspInit+0x158>)
90005958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
9000595c:	f003 0302 	and.w	r3, r3, #2
90005960:	60fb      	str	r3, [r7, #12]
90005962:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
90005964:	2332      	movs	r3, #50	; 0x32
90005966:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90005968:	2302      	movs	r3, #2
9000596a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
9000596c:	2300      	movs	r3, #0
9000596e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90005970:	2303      	movs	r3, #3
90005972:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
90005974:	230b      	movs	r3, #11
90005976:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
90005978:	f107 0324 	add.w	r3, r7, #36	; 0x24
9000597c:	4619      	mov	r1, r3
9000597e:	481a      	ldr	r0, [pc, #104]	; (900059e8 <HAL_ETH_MspInit+0x15c>)
90005980:	f7fe fcda 	bl	90004338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
90005984:	2386      	movs	r3, #134	; 0x86
90005986:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90005988:	2302      	movs	r3, #2
9000598a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
9000598c:	2300      	movs	r3, #0
9000598e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90005990:	2303      	movs	r3, #3
90005992:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
90005994:	230b      	movs	r3, #11
90005996:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
90005998:	f107 0324 	add.w	r3, r7, #36	; 0x24
9000599c:	4619      	mov	r1, r3
9000599e:	4813      	ldr	r0, [pc, #76]	; (900059ec <HAL_ETH_MspInit+0x160>)
900059a0:	f7fe fcca 	bl	90004338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
900059a4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
900059a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
900059aa:	2302      	movs	r3, #2
900059ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
900059ae:	2300      	movs	r3, #0
900059b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
900059b2:	2303      	movs	r3, #3
900059b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
900059b6:	230b      	movs	r3, #11
900059b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
900059ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
900059be:	4619      	mov	r1, r3
900059c0:	480b      	ldr	r0, [pc, #44]	; (900059f0 <HAL_ETH_MspInit+0x164>)
900059c2:	f7fe fcb9 	bl	90004338 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
900059c6:	2200      	movs	r2, #0
900059c8:	2105      	movs	r1, #5
900059ca:	203d      	movs	r0, #61	; 0x3d
900059cc:	f7fc fe4c 	bl	90002668 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
900059d0:	203d      	movs	r0, #61	; 0x3d
900059d2:	f7fc fe63 	bl	9000269c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
900059d6:	bf00      	nop
900059d8:	3738      	adds	r7, #56	; 0x38
900059da:	46bd      	mov	sp, r7
900059dc:	bd80      	pop	{r7, pc}
900059de:	bf00      	nop
900059e0:	40028000 	.word	0x40028000
900059e4:	58024400 	.word	0x58024400
900059e8:	58020800 	.word	0x58020800
900059ec:	58020000 	.word	0x58020000
900059f0:	58020400 	.word	0x58020400

900059f4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
900059f4:	b580      	push	{r7, lr}
900059f6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
900059f8:	4802      	ldr	r0, [pc, #8]	; (90005a04 <ETH_PHY_IO_Init+0x10>)
900059fa:	f7fd fec3 	bl	90003784 <HAL_ETH_SetMDIOClockRange>

  return 0;
900059fe:	2300      	movs	r3, #0
}
90005a00:	4618      	mov	r0, r3
90005a02:	bd80      	pop	{r7, pc}
90005a04:	2400f7b4 	.word	0x2400f7b4

90005a08 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
90005a08:	b480      	push	{r7}
90005a0a:	af00      	add	r7, sp, #0
  return 0;
90005a0c:	2300      	movs	r3, #0
}
90005a0e:	4618      	mov	r0, r3
90005a10:	46bd      	mov	sp, r7
90005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
90005a16:	4770      	bx	lr

90005a18 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
90005a18:	b580      	push	{r7, lr}
90005a1a:	b084      	sub	sp, #16
90005a1c:	af00      	add	r7, sp, #0
90005a1e:	60f8      	str	r0, [r7, #12]
90005a20:	60b9      	str	r1, [r7, #8]
90005a22:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
90005a24:	687b      	ldr	r3, [r7, #4]
90005a26:	68ba      	ldr	r2, [r7, #8]
90005a28:	68f9      	ldr	r1, [r7, #12]
90005a2a:	4807      	ldr	r0, [pc, #28]	; (90005a48 <ETH_PHY_IO_ReadReg+0x30>)
90005a2c:	f7fd fc14 	bl	90003258 <HAL_ETH_ReadPHYRegister>
90005a30:	4603      	mov	r3, r0
90005a32:	2b00      	cmp	r3, #0
90005a34:	d002      	beq.n	90005a3c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
90005a36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90005a3a:	e000      	b.n	90005a3e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
90005a3c:	2300      	movs	r3, #0
}
90005a3e:	4618      	mov	r0, r3
90005a40:	3710      	adds	r7, #16
90005a42:	46bd      	mov	sp, r7
90005a44:	bd80      	pop	{r7, pc}
90005a46:	bf00      	nop
90005a48:	2400f7b4 	.word	0x2400f7b4

90005a4c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
90005a4c:	b580      	push	{r7, lr}
90005a4e:	b084      	sub	sp, #16
90005a50:	af00      	add	r7, sp, #0
90005a52:	60f8      	str	r0, [r7, #12]
90005a54:	60b9      	str	r1, [r7, #8]
90005a56:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
90005a58:	687b      	ldr	r3, [r7, #4]
90005a5a:	68ba      	ldr	r2, [r7, #8]
90005a5c:	68f9      	ldr	r1, [r7, #12]
90005a5e:	4807      	ldr	r0, [pc, #28]	; (90005a7c <ETH_PHY_IO_WriteReg+0x30>)
90005a60:	f7fd fc4e 	bl	90003300 <HAL_ETH_WritePHYRegister>
90005a64:	4603      	mov	r3, r0
90005a66:	2b00      	cmp	r3, #0
90005a68:	d002      	beq.n	90005a70 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
90005a6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90005a6e:	e000      	b.n	90005a72 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
90005a70:	2300      	movs	r3, #0
}
90005a72:	4618      	mov	r0, r3
90005a74:	3710      	adds	r7, #16
90005a76:	46bd      	mov	sp, r7
90005a78:	bd80      	pop	{r7, pc}
90005a7a:	bf00      	nop
90005a7c:	2400f7b4 	.word	0x2400f7b4

90005a80 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
90005a80:	b580      	push	{r7, lr}
90005a82:	af00      	add	r7, sp, #0
  return HAL_GetTick();
90005a84:	f7fc fd18 	bl	900024b8 <HAL_GetTick>
90005a88:	4603      	mov	r3, r0
}
90005a8a:	4618      	mov	r0, r3
90005a8c:	bd80      	pop	{r7, pc}
	...

90005a90 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
90005a90:	b580      	push	{r7, lr}
90005a92:	b0a0      	sub	sp, #128	; 0x80
90005a94:	af00      	add	r7, sp, #0
90005a96:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
90005a98:	f107 0308 	add.w	r3, r7, #8
90005a9c:	2264      	movs	r2, #100	; 0x64
90005a9e:	2100      	movs	r1, #0
90005aa0:	4618      	mov	r0, r3
90005aa2:	f010 f80a 	bl	90015aba <memset>
  int32_t PHYLinkState = 0;
90005aa6:	2300      	movs	r3, #0
90005aa8:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
90005aaa:	2300      	movs	r3, #0
90005aac:	67fb      	str	r3, [r7, #124]	; 0x7c
90005aae:	2300      	movs	r3, #0
90005ab0:	67bb      	str	r3, [r7, #120]	; 0x78
90005ab2:	2300      	movs	r3, #0
90005ab4:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
90005ab6:	687b      	ldr	r3, [r7, #4]
90005ab8:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
90005aba:	483a      	ldr	r0, [pc, #232]	; (90005ba4 <ethernet_link_thread+0x114>)
90005abc:	f7fc fc25 	bl	9000230a <LAN8742_GetLinkState>
90005ac0:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
90005ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
90005ac4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90005ac8:	089b      	lsrs	r3, r3, #2
90005aca:	f003 0301 	and.w	r3, r3, #1
90005ace:	b2db      	uxtb	r3, r3
90005ad0:	2b00      	cmp	r3, #0
90005ad2:	d00c      	beq.n	90005aee <ethernet_link_thread+0x5e>
90005ad4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
90005ad6:	2b01      	cmp	r3, #1
90005ad8:	dc09      	bgt.n	90005aee <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
90005ada:	4833      	ldr	r0, [pc, #204]	; (90005ba8 <ethernet_link_thread+0x118>)
90005adc:	f7fd f83c 	bl	90002b58 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
90005ae0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
90005ae2:	f006 f823 	bl	9000bb2c <netif_set_down>
    netif_set_link_down(netif);
90005ae6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
90005ae8:	f006 f886 	bl	9000bbf8 <netif_set_link_down>
90005aec:	e055      	b.n	90005b9a <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
90005aee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
90005af0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90005af4:	f003 0304 	and.w	r3, r3, #4
90005af8:	2b00      	cmp	r3, #0
90005afa:	d14e      	bne.n	90005b9a <ethernet_link_thread+0x10a>
90005afc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
90005afe:	2b01      	cmp	r3, #1
90005b00:	dd4b      	ble.n	90005b9a <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
90005b02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
90005b04:	3b02      	subs	r3, #2
90005b06:	2b03      	cmp	r3, #3
90005b08:	d82a      	bhi.n	90005b60 <ethernet_link_thread+0xd0>
90005b0a:	a201      	add	r2, pc, #4	; (adr r2, 90005b10 <ethernet_link_thread+0x80>)
90005b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90005b10:	90005b21 	.word	0x90005b21
90005b14:	90005b33 	.word	0x90005b33
90005b18:	90005b43 	.word	0x90005b43
90005b1c:	90005b53 	.word	0x90005b53
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
90005b20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
90005b24:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
90005b26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
90005b2a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
90005b2c:	2301      	movs	r3, #1
90005b2e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
90005b30:	e017      	b.n	90005b62 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
90005b32:	2300      	movs	r3, #0
90005b34:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
90005b36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
90005b3a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
90005b3c:	2301      	movs	r3, #1
90005b3e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
90005b40:	e00f      	b.n	90005b62 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
90005b42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
90005b46:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
90005b48:	2300      	movs	r3, #0
90005b4a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
90005b4c:	2301      	movs	r3, #1
90005b4e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
90005b50:	e007      	b.n	90005b62 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
90005b52:	2300      	movs	r3, #0
90005b54:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
90005b56:	2300      	movs	r3, #0
90005b58:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
90005b5a:	2301      	movs	r3, #1
90005b5c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
90005b5e:	e000      	b.n	90005b62 <ethernet_link_thread+0xd2>
    default:
      break;
90005b60:	bf00      	nop
    }

    if(linkchanged)
90005b62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
90005b64:	2b00      	cmp	r3, #0
90005b66:	d018      	beq.n	90005b9a <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
90005b68:	f107 0308 	add.w	r3, r7, #8
90005b6c:	4619      	mov	r1, r3
90005b6e:	480e      	ldr	r0, [pc, #56]	; (90005ba8 <ethernet_link_thread+0x118>)
90005b70:	f7fd fc1a 	bl	900033a8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
90005b74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
90005b76:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
90005b78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
90005b7a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
90005b7c:	f107 0308 	add.w	r3, r7, #8
90005b80:	4619      	mov	r1, r3
90005b82:	4809      	ldr	r0, [pc, #36]	; (90005ba8 <ethernet_link_thread+0x118>)
90005b84:	f7fd fde4 	bl	90003750 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
90005b88:	4807      	ldr	r0, [pc, #28]	; (90005ba8 <ethernet_link_thread+0x118>)
90005b8a:	f7fc fef7 	bl	9000297c <HAL_ETH_Start>
      netif_set_up(netif);
90005b8e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
90005b90:	f005 ff60 	bl	9000ba54 <netif_set_up>
      netif_set_link_up(netif);
90005b94:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
90005b96:	f005 fffb 	bl	9000bb90 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
90005b9a:	2064      	movs	r0, #100	; 0x64
90005b9c:	f000 f936 	bl	90005e0c <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
90005ba0:	e78b      	b.n	90005aba <ethernet_link_thread+0x2a>
90005ba2:	bf00      	nop
90005ba4:	2400f89c 	.word	0x2400f89c
90005ba8:	2400f7b4 	.word	0x2400f7b4

90005bac <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
90005bac:	b580      	push	{r7, lr}
90005bae:	b086      	sub	sp, #24
90005bb0:	af02      	add	r7, sp, #8
90005bb2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
90005bb4:	4812      	ldr	r0, [pc, #72]	; (90005c00 <HAL_ETH_RxAllocateCallback+0x54>)
90005bb6:	f005 fcc1 	bl	9000b53c <memp_malloc_pool>
90005bba:	60f8      	str	r0, [r7, #12]
  if (p)
90005bbc:	68fb      	ldr	r3, [r7, #12]
90005bbe:	2b00      	cmp	r3, #0
90005bc0:	d014      	beq.n	90005bec <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
90005bc2:	68fb      	ldr	r3, [r7, #12]
90005bc4:	f103 0220 	add.w	r2, r3, #32
90005bc8:	687b      	ldr	r3, [r7, #4]
90005bca:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
90005bcc:	68fb      	ldr	r3, [r7, #12]
90005bce:	4a0d      	ldr	r2, [pc, #52]	; (90005c04 <HAL_ETH_RxAllocateCallback+0x58>)
90005bd0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
90005bd2:	687b      	ldr	r3, [r7, #4]
90005bd4:	681b      	ldr	r3, [r3, #0]
90005bd6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
90005bda:	9201      	str	r2, [sp, #4]
90005bdc:	9300      	str	r3, [sp, #0]
90005bde:	68fb      	ldr	r3, [r7, #12]
90005be0:	2241      	movs	r2, #65	; 0x41
90005be2:	2100      	movs	r1, #0
90005be4:	2000      	movs	r0, #0
90005be6:	f006 fa2b 	bl	9000c040 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
90005bea:	e005      	b.n	90005bf8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
90005bec:	4b06      	ldr	r3, [pc, #24]	; (90005c08 <HAL_ETH_RxAllocateCallback+0x5c>)
90005bee:	2201      	movs	r2, #1
90005bf0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
90005bf2:	687b      	ldr	r3, [r7, #4]
90005bf4:	2200      	movs	r2, #0
90005bf6:	601a      	str	r2, [r3, #0]
}
90005bf8:	bf00      	nop
90005bfa:	3710      	adds	r7, #16
90005bfc:	46bd      	mov	sp, r7
90005bfe:	bd80      	pop	{r7, pc}
90005c00:	9001a774 	.word	0x9001a774
90005c04:	9000583d 	.word	0x9000583d
90005c08:	2400f7a8 	.word	0x2400f7a8

90005c0c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
90005c0c:	b480      	push	{r7}
90005c0e:	b08d      	sub	sp, #52	; 0x34
90005c10:	af00      	add	r7, sp, #0
90005c12:	60f8      	str	r0, [r7, #12]
90005c14:	60b9      	str	r1, [r7, #8]
90005c16:	607a      	str	r2, [r7, #4]
90005c18:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
90005c1a:	68fb      	ldr	r3, [r7, #12]
90005c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
90005c1e:	68bb      	ldr	r3, [r7, #8]
90005c20:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
90005c22:	2300      	movs	r3, #0
90005c24:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
90005c26:	687b      	ldr	r3, [r7, #4]
90005c28:	3b20      	subs	r3, #32
90005c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
90005c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90005c2e:	2200      	movs	r2, #0
90005c30:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
90005c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90005c34:	2200      	movs	r2, #0
90005c36:	811a      	strh	r2, [r3, #8]
  p->len = Length;
90005c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90005c3a:	887a      	ldrh	r2, [r7, #2]
90005c3c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
90005c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
90005c40:	681b      	ldr	r3, [r3, #0]
90005c42:	2b00      	cmp	r3, #0
90005c44:	d103      	bne.n	90005c4e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
90005c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
90005c48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
90005c4a:	601a      	str	r2, [r3, #0]
90005c4c:	e003      	b.n	90005c56 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
90005c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90005c50:	681b      	ldr	r3, [r3, #0]
90005c52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
90005c54:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
90005c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90005c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
90005c5a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
90005c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
90005c5e:	681b      	ldr	r3, [r3, #0]
90005c60:	62fb      	str	r3, [r7, #44]	; 0x2c
90005c62:	e009      	b.n	90005c78 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
90005c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90005c66:	891a      	ldrh	r2, [r3, #8]
90005c68:	887b      	ldrh	r3, [r7, #2]
90005c6a:	4413      	add	r3, r2
90005c6c:	b29a      	uxth	r2, r3
90005c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90005c70:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
90005c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90005c74:	681b      	ldr	r3, [r3, #0]
90005c76:	62fb      	str	r3, [r7, #44]	; 0x2c
90005c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90005c7a:	2b00      	cmp	r3, #0
90005c7c:	d1f2      	bne.n	90005c64 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
90005c7e:	887b      	ldrh	r3, [r7, #2]
90005c80:	687a      	ldr	r2, [r7, #4]
90005c82:	623a      	str	r2, [r7, #32]
90005c84:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
90005c86:	69fb      	ldr	r3, [r7, #28]
90005c88:	2b00      	cmp	r3, #0
90005c8a:	dd1d      	ble.n	90005cc8 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
90005c8c:	6a3b      	ldr	r3, [r7, #32]
90005c8e:	f003 021f 	and.w	r2, r3, #31
90005c92:	69fb      	ldr	r3, [r7, #28]
90005c94:	4413      	add	r3, r2
90005c96:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
90005c98:	6a3b      	ldr	r3, [r7, #32]
90005c9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
90005c9c:	f3bf 8f4f 	dsb	sy
}
90005ca0:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
90005ca2:	4a0d      	ldr	r2, [pc, #52]	; (90005cd8 <HAL_ETH_RxLinkCallback+0xcc>)
90005ca4:	697b      	ldr	r3, [r7, #20]
90005ca6:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
90005caa:	697b      	ldr	r3, [r7, #20]
90005cac:	3320      	adds	r3, #32
90005cae:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
90005cb0:	69bb      	ldr	r3, [r7, #24]
90005cb2:	3b20      	subs	r3, #32
90005cb4:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
90005cb6:	69bb      	ldr	r3, [r7, #24]
90005cb8:	2b00      	cmp	r3, #0
90005cba:	dcf2      	bgt.n	90005ca2 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
90005cbc:	f3bf 8f4f 	dsb	sy
}
90005cc0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
90005cc2:	f3bf 8f6f 	isb	sy
}
90005cc6:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
90005cc8:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
90005cca:	bf00      	nop
90005ccc:	3734      	adds	r7, #52	; 0x34
90005cce:	46bd      	mov	sp, r7
90005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
90005cd4:	4770      	bx	lr
90005cd6:	bf00      	nop
90005cd8:	e000ed00 	.word	0xe000ed00

90005cdc <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
90005cdc:	b580      	push	{r7, lr}
90005cde:	b082      	sub	sp, #8
90005ce0:	af00      	add	r7, sp, #0
90005ce2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
90005ce4:	6878      	ldr	r0, [r7, #4]
90005ce6:	f006 fb65 	bl	9000c3b4 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
90005cea:	bf00      	nop
90005cec:	3708      	adds	r7, #8
90005cee:	46bd      	mov	sp, r7
90005cf0:	bd80      	pop	{r7, pc}

90005cf2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
90005cf2:	b480      	push	{r7}
90005cf4:	b085      	sub	sp, #20
90005cf6:	af00      	add	r7, sp, #0
90005cf8:	4603      	mov	r3, r0
90005cfa:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
90005cfc:	2300      	movs	r3, #0
90005cfe:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
90005d00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
90005d04:	2b84      	cmp	r3, #132	; 0x84
90005d06:	d005      	beq.n	90005d14 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
90005d08:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
90005d0c:	68fb      	ldr	r3, [r7, #12]
90005d0e:	4413      	add	r3, r2
90005d10:	3303      	adds	r3, #3
90005d12:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
90005d14:	68fb      	ldr	r3, [r7, #12]
}
90005d16:	4618      	mov	r0, r3
90005d18:	3714      	adds	r7, #20
90005d1a:	46bd      	mov	sp, r7
90005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
90005d20:	4770      	bx	lr

90005d22 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
90005d22:	b480      	push	{r7}
90005d24:	b083      	sub	sp, #12
90005d26:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
90005d28:	f3ef 8305 	mrs	r3, IPSR
90005d2c:	607b      	str	r3, [r7, #4]
  return(result);
90005d2e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
90005d30:	2b00      	cmp	r3, #0
90005d32:	bf14      	ite	ne
90005d34:	2301      	movne	r3, #1
90005d36:	2300      	moveq	r3, #0
90005d38:	b2db      	uxtb	r3, r3
}
90005d3a:	4618      	mov	r0, r3
90005d3c:	370c      	adds	r7, #12
90005d3e:	46bd      	mov	sp, r7
90005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
90005d44:	4770      	bx	lr

90005d46 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
90005d46:	b580      	push	{r7, lr}
90005d48:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
90005d4a:	f001 fc41 	bl	900075d0 <vTaskStartScheduler>
  
  return osOK;
90005d4e:	2300      	movs	r3, #0
}
90005d50:	4618      	mov	r0, r3
90005d52:	bd80      	pop	{r7, pc}

90005d54 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
90005d54:	b580      	push	{r7, lr}
90005d56:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
90005d58:	f7ff ffe3 	bl	90005d22 <inHandlerMode>
90005d5c:	4603      	mov	r3, r0
90005d5e:	2b00      	cmp	r3, #0
90005d60:	d003      	beq.n	90005d6a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
90005d62:	f001 fd59 	bl	90007818 <xTaskGetTickCountFromISR>
90005d66:	4603      	mov	r3, r0
90005d68:	e002      	b.n	90005d70 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
90005d6a:	f001 fd45 	bl	900077f8 <xTaskGetTickCount>
90005d6e:	4603      	mov	r3, r0
  }
}
90005d70:	4618      	mov	r0, r3
90005d72:	bd80      	pop	{r7, pc}

90005d74 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
90005d74:	b5f0      	push	{r4, r5, r6, r7, lr}
90005d76:	b089      	sub	sp, #36	; 0x24
90005d78:	af04      	add	r7, sp, #16
90005d7a:	6078      	str	r0, [r7, #4]
90005d7c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
90005d7e:	687b      	ldr	r3, [r7, #4]
90005d80:	695b      	ldr	r3, [r3, #20]
90005d82:	2b00      	cmp	r3, #0
90005d84:	d020      	beq.n	90005dc8 <osThreadCreate+0x54>
90005d86:	687b      	ldr	r3, [r7, #4]
90005d88:	699b      	ldr	r3, [r3, #24]
90005d8a:	2b00      	cmp	r3, #0
90005d8c:	d01c      	beq.n	90005dc8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
90005d8e:	687b      	ldr	r3, [r7, #4]
90005d90:	685c      	ldr	r4, [r3, #4]
90005d92:	687b      	ldr	r3, [r7, #4]
90005d94:	681d      	ldr	r5, [r3, #0]
90005d96:	687b      	ldr	r3, [r7, #4]
90005d98:	691e      	ldr	r6, [r3, #16]
90005d9a:	687b      	ldr	r3, [r7, #4]
90005d9c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
90005da0:	4618      	mov	r0, r3
90005da2:	f7ff ffa6 	bl	90005cf2 <makeFreeRtosPriority>
90005da6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
90005da8:	687b      	ldr	r3, [r7, #4]
90005daa:	695b      	ldr	r3, [r3, #20]
90005dac:	687a      	ldr	r2, [r7, #4]
90005dae:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
90005db0:	9202      	str	r2, [sp, #8]
90005db2:	9301      	str	r3, [sp, #4]
90005db4:	9100      	str	r1, [sp, #0]
90005db6:	683b      	ldr	r3, [r7, #0]
90005db8:	4632      	mov	r2, r6
90005dba:	4629      	mov	r1, r5
90005dbc:	4620      	mov	r0, r4
90005dbe:	f001 fa29 	bl	90007214 <xTaskCreateStatic>
90005dc2:	4603      	mov	r3, r0
90005dc4:	60fb      	str	r3, [r7, #12]
90005dc6:	e01c      	b.n	90005e02 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
90005dc8:	687b      	ldr	r3, [r7, #4]
90005dca:	685c      	ldr	r4, [r3, #4]
90005dcc:	687b      	ldr	r3, [r7, #4]
90005dce:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
90005dd0:	687b      	ldr	r3, [r7, #4]
90005dd2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
90005dd4:	b29e      	uxth	r6, r3
90005dd6:	687b      	ldr	r3, [r7, #4]
90005dd8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
90005ddc:	4618      	mov	r0, r3
90005dde:	f7ff ff88 	bl	90005cf2 <makeFreeRtosPriority>
90005de2:	4602      	mov	r2, r0
90005de4:	f107 030c 	add.w	r3, r7, #12
90005de8:	9301      	str	r3, [sp, #4]
90005dea:	9200      	str	r2, [sp, #0]
90005dec:	683b      	ldr	r3, [r7, #0]
90005dee:	4632      	mov	r2, r6
90005df0:	4629      	mov	r1, r5
90005df2:	4620      	mov	r0, r4
90005df4:	f001 fa6b 	bl	900072ce <xTaskCreate>
90005df8:	4603      	mov	r3, r0
90005dfa:	2b01      	cmp	r3, #1
90005dfc:	d001      	beq.n	90005e02 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
90005dfe:	2300      	movs	r3, #0
90005e00:	e000      	b.n	90005e04 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
90005e02:	68fb      	ldr	r3, [r7, #12]
}
90005e04:	4618      	mov	r0, r3
90005e06:	3714      	adds	r7, #20
90005e08:	46bd      	mov	sp, r7
90005e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

90005e0c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
90005e0c:	b580      	push	{r7, lr}
90005e0e:	b084      	sub	sp, #16
90005e10:	af00      	add	r7, sp, #0
90005e12:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
90005e14:	687b      	ldr	r3, [r7, #4]
90005e16:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
90005e18:	68fb      	ldr	r3, [r7, #12]
90005e1a:	2b00      	cmp	r3, #0
90005e1c:	d001      	beq.n	90005e22 <osDelay+0x16>
90005e1e:	68fb      	ldr	r3, [r7, #12]
90005e20:	e000      	b.n	90005e24 <osDelay+0x18>
90005e22:	2301      	movs	r3, #1
90005e24:	4618      	mov	r0, r3
90005e26:	f001 fb9f 	bl	90007568 <vTaskDelay>
  
  return osOK;
90005e2a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
90005e2c:	4618      	mov	r0, r3
90005e2e:	3710      	adds	r7, #16
90005e30:	46bd      	mov	sp, r7
90005e32:	bd80      	pop	{r7, pc}

90005e34 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
90005e34:	b580      	push	{r7, lr}
90005e36:	b082      	sub	sp, #8
90005e38:	af00      	add	r7, sp, #0
90005e3a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
90005e3c:	687b      	ldr	r3, [r7, #4]
90005e3e:	685b      	ldr	r3, [r3, #4]
90005e40:	2b00      	cmp	r3, #0
90005e42:	d007      	beq.n	90005e54 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
90005e44:	687b      	ldr	r3, [r7, #4]
90005e46:	685b      	ldr	r3, [r3, #4]
90005e48:	4619      	mov	r1, r3
90005e4a:	2001      	movs	r0, #1
90005e4c:	f000 fc0d 	bl	9000666a <xQueueCreateMutexStatic>
90005e50:	4603      	mov	r3, r0
90005e52:	e003      	b.n	90005e5c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
90005e54:	2001      	movs	r0, #1
90005e56:	f000 fbf0 	bl	9000663a <xQueueCreateMutex>
90005e5a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
90005e5c:	4618      	mov	r0, r3
90005e5e:	3708      	adds	r7, #8
90005e60:	46bd      	mov	sp, r7
90005e62:	bd80      	pop	{r7, pc}

90005e64 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
90005e64:	b580      	push	{r7, lr}
90005e66:	b084      	sub	sp, #16
90005e68:	af00      	add	r7, sp, #0
90005e6a:	6078      	str	r0, [r7, #4]
90005e6c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
90005e6e:	2300      	movs	r3, #0
90005e70:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
90005e72:	687b      	ldr	r3, [r7, #4]
90005e74:	2b00      	cmp	r3, #0
90005e76:	d101      	bne.n	90005e7c <osMutexWait+0x18>
    return osErrorParameter;
90005e78:	2380      	movs	r3, #128	; 0x80
90005e7a:	e03a      	b.n	90005ef2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
90005e7c:	2300      	movs	r3, #0
90005e7e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
90005e80:	683b      	ldr	r3, [r7, #0]
90005e82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
90005e86:	d103      	bne.n	90005e90 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
90005e88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90005e8c:	60fb      	str	r3, [r7, #12]
90005e8e:	e009      	b.n	90005ea4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
90005e90:	683b      	ldr	r3, [r7, #0]
90005e92:	2b00      	cmp	r3, #0
90005e94:	d006      	beq.n	90005ea4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
90005e96:	683b      	ldr	r3, [r7, #0]
90005e98:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
90005e9a:	68fb      	ldr	r3, [r7, #12]
90005e9c:	2b00      	cmp	r3, #0
90005e9e:	d101      	bne.n	90005ea4 <osMutexWait+0x40>
      ticks = 1;
90005ea0:	2301      	movs	r3, #1
90005ea2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
90005ea4:	f7ff ff3d 	bl	90005d22 <inHandlerMode>
90005ea8:	4603      	mov	r3, r0
90005eaa:	2b00      	cmp	r3, #0
90005eac:	d017      	beq.n	90005ede <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
90005eae:	f107 0308 	add.w	r3, r7, #8
90005eb2:	461a      	mov	r2, r3
90005eb4:	2100      	movs	r1, #0
90005eb6:	6878      	ldr	r0, [r7, #4]
90005eb8:	f001 f804 	bl	90006ec4 <xQueueReceiveFromISR>
90005ebc:	4603      	mov	r3, r0
90005ebe:	2b01      	cmp	r3, #1
90005ec0:	d001      	beq.n	90005ec6 <osMutexWait+0x62>
      return osErrorOS;
90005ec2:	23ff      	movs	r3, #255	; 0xff
90005ec4:	e015      	b.n	90005ef2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
90005ec6:	68bb      	ldr	r3, [r7, #8]
90005ec8:	2b00      	cmp	r3, #0
90005eca:	d011      	beq.n	90005ef0 <osMutexWait+0x8c>
90005ecc:	4b0b      	ldr	r3, [pc, #44]	; (90005efc <osMutexWait+0x98>)
90005ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90005ed2:	601a      	str	r2, [r3, #0]
90005ed4:	f3bf 8f4f 	dsb	sy
90005ed8:	f3bf 8f6f 	isb	sy
90005edc:	e008      	b.n	90005ef0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
90005ede:	68f9      	ldr	r1, [r7, #12]
90005ee0:	6878      	ldr	r0, [r7, #4]
90005ee2:	f000 fee3 	bl	90006cac <xQueueSemaphoreTake>
90005ee6:	4603      	mov	r3, r0
90005ee8:	2b01      	cmp	r3, #1
90005eea:	d001      	beq.n	90005ef0 <osMutexWait+0x8c>
    return osErrorOS;
90005eec:	23ff      	movs	r3, #255	; 0xff
90005eee:	e000      	b.n	90005ef2 <osMutexWait+0x8e>
  }
  
  return osOK;
90005ef0:	2300      	movs	r3, #0
}
90005ef2:	4618      	mov	r0, r3
90005ef4:	3710      	adds	r7, #16
90005ef6:	46bd      	mov	sp, r7
90005ef8:	bd80      	pop	{r7, pc}
90005efa:	bf00      	nop
90005efc:	e000ed04 	.word	0xe000ed04

90005f00 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
90005f00:	b580      	push	{r7, lr}
90005f02:	b084      	sub	sp, #16
90005f04:	af00      	add	r7, sp, #0
90005f06:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
90005f08:	2300      	movs	r3, #0
90005f0a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
90005f0c:	2300      	movs	r3, #0
90005f0e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
90005f10:	f7ff ff07 	bl	90005d22 <inHandlerMode>
90005f14:	4603      	mov	r3, r0
90005f16:	2b00      	cmp	r3, #0
90005f18:	d016      	beq.n	90005f48 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
90005f1a:	f107 0308 	add.w	r3, r7, #8
90005f1e:	4619      	mov	r1, r3
90005f20:	6878      	ldr	r0, [r7, #4]
90005f22:	f000 fd56 	bl	900069d2 <xQueueGiveFromISR>
90005f26:	4603      	mov	r3, r0
90005f28:	2b01      	cmp	r3, #1
90005f2a:	d001      	beq.n	90005f30 <osMutexRelease+0x30>
      return osErrorOS;
90005f2c:	23ff      	movs	r3, #255	; 0xff
90005f2e:	e017      	b.n	90005f60 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
90005f30:	68bb      	ldr	r3, [r7, #8]
90005f32:	2b00      	cmp	r3, #0
90005f34:	d013      	beq.n	90005f5e <osMutexRelease+0x5e>
90005f36:	4b0c      	ldr	r3, [pc, #48]	; (90005f68 <osMutexRelease+0x68>)
90005f38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90005f3c:	601a      	str	r2, [r3, #0]
90005f3e:	f3bf 8f4f 	dsb	sy
90005f42:	f3bf 8f6f 	isb	sy
90005f46:	e00a      	b.n	90005f5e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
90005f48:	2300      	movs	r3, #0
90005f4a:	2200      	movs	r2, #0
90005f4c:	2100      	movs	r1, #0
90005f4e:	6878      	ldr	r0, [r7, #4]
90005f50:	f000 fba6 	bl	900066a0 <xQueueGenericSend>
90005f54:	4603      	mov	r3, r0
90005f56:	2b01      	cmp	r3, #1
90005f58:	d001      	beq.n	90005f5e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
90005f5a:	23ff      	movs	r3, #255	; 0xff
90005f5c:	60fb      	str	r3, [r7, #12]
  }
  return result;
90005f5e:	68fb      	ldr	r3, [r7, #12]
}
90005f60:	4618      	mov	r0, r3
90005f62:	3710      	adds	r7, #16
90005f64:	46bd      	mov	sp, r7
90005f66:	bd80      	pop	{r7, pc}
90005f68:	e000ed04 	.word	0xe000ed04

90005f6c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
90005f6c:	b580      	push	{r7, lr}
90005f6e:	b084      	sub	sp, #16
90005f70:	af00      	add	r7, sp, #0
90005f72:	6078      	str	r0, [r7, #4]
90005f74:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
90005f76:	2300      	movs	r3, #0
90005f78:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
90005f7a:	687b      	ldr	r3, [r7, #4]
90005f7c:	2b00      	cmp	r3, #0
90005f7e:	d101      	bne.n	90005f84 <osSemaphoreWait+0x18>
    return osErrorParameter;
90005f80:	2380      	movs	r3, #128	; 0x80
90005f82:	e03a      	b.n	90005ffa <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
90005f84:	2300      	movs	r3, #0
90005f86:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
90005f88:	683b      	ldr	r3, [r7, #0]
90005f8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
90005f8e:	d103      	bne.n	90005f98 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
90005f90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90005f94:	60fb      	str	r3, [r7, #12]
90005f96:	e009      	b.n	90005fac <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
90005f98:	683b      	ldr	r3, [r7, #0]
90005f9a:	2b00      	cmp	r3, #0
90005f9c:	d006      	beq.n	90005fac <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
90005f9e:	683b      	ldr	r3, [r7, #0]
90005fa0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
90005fa2:	68fb      	ldr	r3, [r7, #12]
90005fa4:	2b00      	cmp	r3, #0
90005fa6:	d101      	bne.n	90005fac <osSemaphoreWait+0x40>
      ticks = 1;
90005fa8:	2301      	movs	r3, #1
90005faa:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
90005fac:	f7ff feb9 	bl	90005d22 <inHandlerMode>
90005fb0:	4603      	mov	r3, r0
90005fb2:	2b00      	cmp	r3, #0
90005fb4:	d017      	beq.n	90005fe6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
90005fb6:	f107 0308 	add.w	r3, r7, #8
90005fba:	461a      	mov	r2, r3
90005fbc:	2100      	movs	r1, #0
90005fbe:	6878      	ldr	r0, [r7, #4]
90005fc0:	f000 ff80 	bl	90006ec4 <xQueueReceiveFromISR>
90005fc4:	4603      	mov	r3, r0
90005fc6:	2b01      	cmp	r3, #1
90005fc8:	d001      	beq.n	90005fce <osSemaphoreWait+0x62>
      return osErrorOS;
90005fca:	23ff      	movs	r3, #255	; 0xff
90005fcc:	e015      	b.n	90005ffa <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
90005fce:	68bb      	ldr	r3, [r7, #8]
90005fd0:	2b00      	cmp	r3, #0
90005fd2:	d011      	beq.n	90005ff8 <osSemaphoreWait+0x8c>
90005fd4:	4b0b      	ldr	r3, [pc, #44]	; (90006004 <osSemaphoreWait+0x98>)
90005fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90005fda:	601a      	str	r2, [r3, #0]
90005fdc:	f3bf 8f4f 	dsb	sy
90005fe0:	f3bf 8f6f 	isb	sy
90005fe4:	e008      	b.n	90005ff8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
90005fe6:	68f9      	ldr	r1, [r7, #12]
90005fe8:	6878      	ldr	r0, [r7, #4]
90005fea:	f000 fe5f 	bl	90006cac <xQueueSemaphoreTake>
90005fee:	4603      	mov	r3, r0
90005ff0:	2b01      	cmp	r3, #1
90005ff2:	d001      	beq.n	90005ff8 <osSemaphoreWait+0x8c>
    return osErrorOS;
90005ff4:	23ff      	movs	r3, #255	; 0xff
90005ff6:	e000      	b.n	90005ffa <osSemaphoreWait+0x8e>
  }
  
  return osOK;
90005ff8:	2300      	movs	r3, #0
}
90005ffa:	4618      	mov	r0, r3
90005ffc:	3710      	adds	r7, #16
90005ffe:	46bd      	mov	sp, r7
90006000:	bd80      	pop	{r7, pc}
90006002:	bf00      	nop
90006004:	e000ed04 	.word	0xe000ed04

90006008 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
90006008:	b580      	push	{r7, lr}
9000600a:	b084      	sub	sp, #16
9000600c:	af00      	add	r7, sp, #0
9000600e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
90006010:	2300      	movs	r3, #0
90006012:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
90006014:	2300      	movs	r3, #0
90006016:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
90006018:	f7ff fe83 	bl	90005d22 <inHandlerMode>
9000601c:	4603      	mov	r3, r0
9000601e:	2b00      	cmp	r3, #0
90006020:	d016      	beq.n	90006050 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
90006022:	f107 0308 	add.w	r3, r7, #8
90006026:	4619      	mov	r1, r3
90006028:	6878      	ldr	r0, [r7, #4]
9000602a:	f000 fcd2 	bl	900069d2 <xQueueGiveFromISR>
9000602e:	4603      	mov	r3, r0
90006030:	2b01      	cmp	r3, #1
90006032:	d001      	beq.n	90006038 <osSemaphoreRelease+0x30>
      return osErrorOS;
90006034:	23ff      	movs	r3, #255	; 0xff
90006036:	e017      	b.n	90006068 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
90006038:	68bb      	ldr	r3, [r7, #8]
9000603a:	2b00      	cmp	r3, #0
9000603c:	d013      	beq.n	90006066 <osSemaphoreRelease+0x5e>
9000603e:	4b0c      	ldr	r3, [pc, #48]	; (90006070 <osSemaphoreRelease+0x68>)
90006040:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90006044:	601a      	str	r2, [r3, #0]
90006046:	f3bf 8f4f 	dsb	sy
9000604a:	f3bf 8f6f 	isb	sy
9000604e:	e00a      	b.n	90006066 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
90006050:	2300      	movs	r3, #0
90006052:	2200      	movs	r2, #0
90006054:	2100      	movs	r1, #0
90006056:	6878      	ldr	r0, [r7, #4]
90006058:	f000 fb22 	bl	900066a0 <xQueueGenericSend>
9000605c:	4603      	mov	r3, r0
9000605e:	2b01      	cmp	r3, #1
90006060:	d001      	beq.n	90006066 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
90006062:	23ff      	movs	r3, #255	; 0xff
90006064:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
90006066:	68fb      	ldr	r3, [r7, #12]
}
90006068:	4618      	mov	r0, r3
9000606a:	3710      	adds	r7, #16
9000606c:	46bd      	mov	sp, r7
9000606e:	bd80      	pop	{r7, pc}
90006070:	e000ed04 	.word	0xe000ed04

90006074 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
90006074:	b590      	push	{r4, r7, lr}
90006076:	b085      	sub	sp, #20
90006078:	af02      	add	r7, sp, #8
9000607a:	6078      	str	r0, [r7, #4]
9000607c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
9000607e:	687b      	ldr	r3, [r7, #4]
90006080:	689b      	ldr	r3, [r3, #8]
90006082:	2b00      	cmp	r3, #0
90006084:	d011      	beq.n	900060aa <osMessageCreate+0x36>
90006086:	687b      	ldr	r3, [r7, #4]
90006088:	68db      	ldr	r3, [r3, #12]
9000608a:	2b00      	cmp	r3, #0
9000608c:	d00d      	beq.n	900060aa <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
9000608e:	687b      	ldr	r3, [r7, #4]
90006090:	6818      	ldr	r0, [r3, #0]
90006092:	687b      	ldr	r3, [r7, #4]
90006094:	6859      	ldr	r1, [r3, #4]
90006096:	687b      	ldr	r3, [r7, #4]
90006098:	689a      	ldr	r2, [r3, #8]
9000609a:	687b      	ldr	r3, [r7, #4]
9000609c:	68db      	ldr	r3, [r3, #12]
9000609e:	2400      	movs	r4, #0
900060a0:	9400      	str	r4, [sp, #0]
900060a2:	f000 f9df 	bl	90006464 <xQueueGenericCreateStatic>
900060a6:	4603      	mov	r3, r0
900060a8:	e008      	b.n	900060bc <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
900060aa:	687b      	ldr	r3, [r7, #4]
900060ac:	6818      	ldr	r0, [r3, #0]
900060ae:	687b      	ldr	r3, [r7, #4]
900060b0:	685b      	ldr	r3, [r3, #4]
900060b2:	2200      	movs	r2, #0
900060b4:	4619      	mov	r1, r3
900060b6:	f000 fa4d 	bl	90006554 <xQueueGenericCreate>
900060ba:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
900060bc:	4618      	mov	r0, r3
900060be:	370c      	adds	r7, #12
900060c0:	46bd      	mov	sp, r7
900060c2:	bd90      	pop	{r4, r7, pc}

900060c4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
900060c4:	b580      	push	{r7, lr}
900060c6:	b086      	sub	sp, #24
900060c8:	af00      	add	r7, sp, #0
900060ca:	60f8      	str	r0, [r7, #12]
900060cc:	60b9      	str	r1, [r7, #8]
900060ce:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
900060d0:	2300      	movs	r3, #0
900060d2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
900060d4:	687b      	ldr	r3, [r7, #4]
900060d6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
900060d8:	697b      	ldr	r3, [r7, #20]
900060da:	2b00      	cmp	r3, #0
900060dc:	d101      	bne.n	900060e2 <osMessagePut+0x1e>
    ticks = 1;
900060de:	2301      	movs	r3, #1
900060e0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
900060e2:	f7ff fe1e 	bl	90005d22 <inHandlerMode>
900060e6:	4603      	mov	r3, r0
900060e8:	2b00      	cmp	r3, #0
900060ea:	d018      	beq.n	9000611e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
900060ec:	f107 0210 	add.w	r2, r7, #16
900060f0:	f107 0108 	add.w	r1, r7, #8
900060f4:	2300      	movs	r3, #0
900060f6:	68f8      	ldr	r0, [r7, #12]
900060f8:	f000 fbd0 	bl	9000689c <xQueueGenericSendFromISR>
900060fc:	4603      	mov	r3, r0
900060fe:	2b01      	cmp	r3, #1
90006100:	d001      	beq.n	90006106 <osMessagePut+0x42>
      return osErrorOS;
90006102:	23ff      	movs	r3, #255	; 0xff
90006104:	e018      	b.n	90006138 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
90006106:	693b      	ldr	r3, [r7, #16]
90006108:	2b00      	cmp	r3, #0
9000610a:	d014      	beq.n	90006136 <osMessagePut+0x72>
9000610c:	4b0c      	ldr	r3, [pc, #48]	; (90006140 <osMessagePut+0x7c>)
9000610e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90006112:	601a      	str	r2, [r3, #0]
90006114:	f3bf 8f4f 	dsb	sy
90006118:	f3bf 8f6f 	isb	sy
9000611c:	e00b      	b.n	90006136 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
9000611e:	f107 0108 	add.w	r1, r7, #8
90006122:	2300      	movs	r3, #0
90006124:	697a      	ldr	r2, [r7, #20]
90006126:	68f8      	ldr	r0, [r7, #12]
90006128:	f000 faba 	bl	900066a0 <xQueueGenericSend>
9000612c:	4603      	mov	r3, r0
9000612e:	2b01      	cmp	r3, #1
90006130:	d001      	beq.n	90006136 <osMessagePut+0x72>
      return osErrorOS;
90006132:	23ff      	movs	r3, #255	; 0xff
90006134:	e000      	b.n	90006138 <osMessagePut+0x74>
    }
  }
  
  return osOK;
90006136:	2300      	movs	r3, #0
}
90006138:	4618      	mov	r0, r3
9000613a:	3718      	adds	r7, #24
9000613c:	46bd      	mov	sp, r7
9000613e:	bd80      	pop	{r7, pc}
90006140:	e000ed04 	.word	0xe000ed04

90006144 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
90006144:	b590      	push	{r4, r7, lr}
90006146:	b08b      	sub	sp, #44	; 0x2c
90006148:	af00      	add	r7, sp, #0
9000614a:	60f8      	str	r0, [r7, #12]
9000614c:	60b9      	str	r1, [r7, #8]
9000614e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
90006150:	68bb      	ldr	r3, [r7, #8]
90006152:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
90006154:	2300      	movs	r3, #0
90006156:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
90006158:	68bb      	ldr	r3, [r7, #8]
9000615a:	2b00      	cmp	r3, #0
9000615c:	d10a      	bne.n	90006174 <osMessageGet+0x30>
    event.status = osErrorParameter;
9000615e:	2380      	movs	r3, #128	; 0x80
90006160:	617b      	str	r3, [r7, #20]
    return event;
90006162:	68fb      	ldr	r3, [r7, #12]
90006164:	461c      	mov	r4, r3
90006166:	f107 0314 	add.w	r3, r7, #20
9000616a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
9000616e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
90006172:	e054      	b.n	9000621e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
90006174:	2300      	movs	r3, #0
90006176:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
90006178:	2300      	movs	r3, #0
9000617a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
9000617c:	687b      	ldr	r3, [r7, #4]
9000617e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
90006182:	d103      	bne.n	9000618c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
90006184:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90006188:	627b      	str	r3, [r7, #36]	; 0x24
9000618a:	e009      	b.n	900061a0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
9000618c:	687b      	ldr	r3, [r7, #4]
9000618e:	2b00      	cmp	r3, #0
90006190:	d006      	beq.n	900061a0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
90006192:	687b      	ldr	r3, [r7, #4]
90006194:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
90006196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90006198:	2b00      	cmp	r3, #0
9000619a:	d101      	bne.n	900061a0 <osMessageGet+0x5c>
      ticks = 1;
9000619c:	2301      	movs	r3, #1
9000619e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
900061a0:	f7ff fdbf 	bl	90005d22 <inHandlerMode>
900061a4:	4603      	mov	r3, r0
900061a6:	2b00      	cmp	r3, #0
900061a8:	d01c      	beq.n	900061e4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
900061aa:	f107 0220 	add.w	r2, r7, #32
900061ae:	f107 0314 	add.w	r3, r7, #20
900061b2:	3304      	adds	r3, #4
900061b4:	4619      	mov	r1, r3
900061b6:	68b8      	ldr	r0, [r7, #8]
900061b8:	f000 fe84 	bl	90006ec4 <xQueueReceiveFromISR>
900061bc:	4603      	mov	r3, r0
900061be:	2b01      	cmp	r3, #1
900061c0:	d102      	bne.n	900061c8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
900061c2:	2310      	movs	r3, #16
900061c4:	617b      	str	r3, [r7, #20]
900061c6:	e001      	b.n	900061cc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
900061c8:	2300      	movs	r3, #0
900061ca:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
900061cc:	6a3b      	ldr	r3, [r7, #32]
900061ce:	2b00      	cmp	r3, #0
900061d0:	d01d      	beq.n	9000620e <osMessageGet+0xca>
900061d2:	4b15      	ldr	r3, [pc, #84]	; (90006228 <osMessageGet+0xe4>)
900061d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
900061d8:	601a      	str	r2, [r3, #0]
900061da:	f3bf 8f4f 	dsb	sy
900061de:	f3bf 8f6f 	isb	sy
900061e2:	e014      	b.n	9000620e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
900061e4:	f107 0314 	add.w	r3, r7, #20
900061e8:	3304      	adds	r3, #4
900061ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
900061ec:	4619      	mov	r1, r3
900061ee:	68b8      	ldr	r0, [r7, #8]
900061f0:	f000 fc7c 	bl	90006aec <xQueueReceive>
900061f4:	4603      	mov	r3, r0
900061f6:	2b01      	cmp	r3, #1
900061f8:	d102      	bne.n	90006200 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
900061fa:	2310      	movs	r3, #16
900061fc:	617b      	str	r3, [r7, #20]
900061fe:	e006      	b.n	9000620e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
90006200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90006202:	2b00      	cmp	r3, #0
90006204:	d101      	bne.n	9000620a <osMessageGet+0xc6>
90006206:	2300      	movs	r3, #0
90006208:	e000      	b.n	9000620c <osMessageGet+0xc8>
9000620a:	2340      	movs	r3, #64	; 0x40
9000620c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
9000620e:	68fb      	ldr	r3, [r7, #12]
90006210:	461c      	mov	r4, r3
90006212:	f107 0314 	add.w	r3, r7, #20
90006216:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
9000621a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
9000621e:	68f8      	ldr	r0, [r7, #12]
90006220:	372c      	adds	r7, #44	; 0x2c
90006222:	46bd      	mov	sp, r7
90006224:	bd90      	pop	{r4, r7, pc}
90006226:	bf00      	nop
90006228:	e000ed04 	.word	0xe000ed04

9000622c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
9000622c:	b480      	push	{r7}
9000622e:	b083      	sub	sp, #12
90006230:	af00      	add	r7, sp, #0
90006232:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
90006234:	687b      	ldr	r3, [r7, #4]
90006236:	f103 0208 	add.w	r2, r3, #8
9000623a:	687b      	ldr	r3, [r7, #4]
9000623c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
9000623e:	687b      	ldr	r3, [r7, #4]
90006240:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
90006244:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
90006246:	687b      	ldr	r3, [r7, #4]
90006248:	f103 0208 	add.w	r2, r3, #8
9000624c:	687b      	ldr	r3, [r7, #4]
9000624e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
90006250:	687b      	ldr	r3, [r7, #4]
90006252:	f103 0208 	add.w	r2, r3, #8
90006256:	687b      	ldr	r3, [r7, #4]
90006258:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
9000625a:	687b      	ldr	r3, [r7, #4]
9000625c:	2200      	movs	r2, #0
9000625e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
90006260:	bf00      	nop
90006262:	370c      	adds	r7, #12
90006264:	46bd      	mov	sp, r7
90006266:	f85d 7b04 	ldr.w	r7, [sp], #4
9000626a:	4770      	bx	lr

9000626c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
9000626c:	b480      	push	{r7}
9000626e:	b083      	sub	sp, #12
90006270:	af00      	add	r7, sp, #0
90006272:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
90006274:	687b      	ldr	r3, [r7, #4]
90006276:	2200      	movs	r2, #0
90006278:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
9000627a:	bf00      	nop
9000627c:	370c      	adds	r7, #12
9000627e:	46bd      	mov	sp, r7
90006280:	f85d 7b04 	ldr.w	r7, [sp], #4
90006284:	4770      	bx	lr

90006286 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
90006286:	b480      	push	{r7}
90006288:	b085      	sub	sp, #20
9000628a:	af00      	add	r7, sp, #0
9000628c:	6078      	str	r0, [r7, #4]
9000628e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
90006290:	687b      	ldr	r3, [r7, #4]
90006292:	685b      	ldr	r3, [r3, #4]
90006294:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
90006296:	683b      	ldr	r3, [r7, #0]
90006298:	68fa      	ldr	r2, [r7, #12]
9000629a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
9000629c:	68fb      	ldr	r3, [r7, #12]
9000629e:	689a      	ldr	r2, [r3, #8]
900062a0:	683b      	ldr	r3, [r7, #0]
900062a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
900062a4:	68fb      	ldr	r3, [r7, #12]
900062a6:	689b      	ldr	r3, [r3, #8]
900062a8:	683a      	ldr	r2, [r7, #0]
900062aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
900062ac:	68fb      	ldr	r3, [r7, #12]
900062ae:	683a      	ldr	r2, [r7, #0]
900062b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
900062b2:	683b      	ldr	r3, [r7, #0]
900062b4:	687a      	ldr	r2, [r7, #4]
900062b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
900062b8:	687b      	ldr	r3, [r7, #4]
900062ba:	681b      	ldr	r3, [r3, #0]
900062bc:	1c5a      	adds	r2, r3, #1
900062be:	687b      	ldr	r3, [r7, #4]
900062c0:	601a      	str	r2, [r3, #0]
}
900062c2:	bf00      	nop
900062c4:	3714      	adds	r7, #20
900062c6:	46bd      	mov	sp, r7
900062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
900062cc:	4770      	bx	lr

900062ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
900062ce:	b480      	push	{r7}
900062d0:	b085      	sub	sp, #20
900062d2:	af00      	add	r7, sp, #0
900062d4:	6078      	str	r0, [r7, #4]
900062d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
900062d8:	683b      	ldr	r3, [r7, #0]
900062da:	681b      	ldr	r3, [r3, #0]
900062dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
900062de:	68bb      	ldr	r3, [r7, #8]
900062e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
900062e4:	d103      	bne.n	900062ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
900062e6:	687b      	ldr	r3, [r7, #4]
900062e8:	691b      	ldr	r3, [r3, #16]
900062ea:	60fb      	str	r3, [r7, #12]
900062ec:	e00c      	b.n	90006308 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
900062ee:	687b      	ldr	r3, [r7, #4]
900062f0:	3308      	adds	r3, #8
900062f2:	60fb      	str	r3, [r7, #12]
900062f4:	e002      	b.n	900062fc <vListInsert+0x2e>
900062f6:	68fb      	ldr	r3, [r7, #12]
900062f8:	685b      	ldr	r3, [r3, #4]
900062fa:	60fb      	str	r3, [r7, #12]
900062fc:	68fb      	ldr	r3, [r7, #12]
900062fe:	685b      	ldr	r3, [r3, #4]
90006300:	681b      	ldr	r3, [r3, #0]
90006302:	68ba      	ldr	r2, [r7, #8]
90006304:	429a      	cmp	r2, r3
90006306:	d2f6      	bcs.n	900062f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
90006308:	68fb      	ldr	r3, [r7, #12]
9000630a:	685a      	ldr	r2, [r3, #4]
9000630c:	683b      	ldr	r3, [r7, #0]
9000630e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
90006310:	683b      	ldr	r3, [r7, #0]
90006312:	685b      	ldr	r3, [r3, #4]
90006314:	683a      	ldr	r2, [r7, #0]
90006316:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
90006318:	683b      	ldr	r3, [r7, #0]
9000631a:	68fa      	ldr	r2, [r7, #12]
9000631c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
9000631e:	68fb      	ldr	r3, [r7, #12]
90006320:	683a      	ldr	r2, [r7, #0]
90006322:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
90006324:	683b      	ldr	r3, [r7, #0]
90006326:	687a      	ldr	r2, [r7, #4]
90006328:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
9000632a:	687b      	ldr	r3, [r7, #4]
9000632c:	681b      	ldr	r3, [r3, #0]
9000632e:	1c5a      	adds	r2, r3, #1
90006330:	687b      	ldr	r3, [r7, #4]
90006332:	601a      	str	r2, [r3, #0]
}
90006334:	bf00      	nop
90006336:	3714      	adds	r7, #20
90006338:	46bd      	mov	sp, r7
9000633a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000633e:	4770      	bx	lr

90006340 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
90006340:	b480      	push	{r7}
90006342:	b085      	sub	sp, #20
90006344:	af00      	add	r7, sp, #0
90006346:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
90006348:	687b      	ldr	r3, [r7, #4]
9000634a:	691b      	ldr	r3, [r3, #16]
9000634c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
9000634e:	687b      	ldr	r3, [r7, #4]
90006350:	685b      	ldr	r3, [r3, #4]
90006352:	687a      	ldr	r2, [r7, #4]
90006354:	6892      	ldr	r2, [r2, #8]
90006356:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
90006358:	687b      	ldr	r3, [r7, #4]
9000635a:	689b      	ldr	r3, [r3, #8]
9000635c:	687a      	ldr	r2, [r7, #4]
9000635e:	6852      	ldr	r2, [r2, #4]
90006360:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
90006362:	68fb      	ldr	r3, [r7, #12]
90006364:	685b      	ldr	r3, [r3, #4]
90006366:	687a      	ldr	r2, [r7, #4]
90006368:	429a      	cmp	r2, r3
9000636a:	d103      	bne.n	90006374 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
9000636c:	687b      	ldr	r3, [r7, #4]
9000636e:	689a      	ldr	r2, [r3, #8]
90006370:	68fb      	ldr	r3, [r7, #12]
90006372:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
90006374:	687b      	ldr	r3, [r7, #4]
90006376:	2200      	movs	r2, #0
90006378:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
9000637a:	68fb      	ldr	r3, [r7, #12]
9000637c:	681b      	ldr	r3, [r3, #0]
9000637e:	1e5a      	subs	r2, r3, #1
90006380:	68fb      	ldr	r3, [r7, #12]
90006382:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
90006384:	68fb      	ldr	r3, [r7, #12]
90006386:	681b      	ldr	r3, [r3, #0]
}
90006388:	4618      	mov	r0, r3
9000638a:	3714      	adds	r7, #20
9000638c:	46bd      	mov	sp, r7
9000638e:	f85d 7b04 	ldr.w	r7, [sp], #4
90006392:	4770      	bx	lr

90006394 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
90006394:	b580      	push	{r7, lr}
90006396:	b084      	sub	sp, #16
90006398:	af00      	add	r7, sp, #0
9000639a:	6078      	str	r0, [r7, #4]
9000639c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
9000639e:	687b      	ldr	r3, [r7, #4]
900063a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
900063a2:	68fb      	ldr	r3, [r7, #12]
900063a4:	2b00      	cmp	r3, #0
900063a6:	d10a      	bne.n	900063be <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
900063a8:	f04f 0350 	mov.w	r3, #80	; 0x50
900063ac:	f383 8811 	msr	BASEPRI, r3
900063b0:	f3bf 8f6f 	isb	sy
900063b4:	f3bf 8f4f 	dsb	sy
900063b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
900063ba:	bf00      	nop
900063bc:	e7fe      	b.n	900063bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
900063be:	f002 f889 	bl	900084d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
900063c2:	68fb      	ldr	r3, [r7, #12]
900063c4:	681a      	ldr	r2, [r3, #0]
900063c6:	68fb      	ldr	r3, [r7, #12]
900063c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900063ca:	68f9      	ldr	r1, [r7, #12]
900063cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
900063ce:	fb01 f303 	mul.w	r3, r1, r3
900063d2:	441a      	add	r2, r3
900063d4:	68fb      	ldr	r3, [r7, #12]
900063d6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
900063d8:	68fb      	ldr	r3, [r7, #12]
900063da:	2200      	movs	r2, #0
900063dc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
900063de:	68fb      	ldr	r3, [r7, #12]
900063e0:	681a      	ldr	r2, [r3, #0]
900063e2:	68fb      	ldr	r3, [r7, #12]
900063e4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
900063e6:	68fb      	ldr	r3, [r7, #12]
900063e8:	681a      	ldr	r2, [r3, #0]
900063ea:	68fb      	ldr	r3, [r7, #12]
900063ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900063ee:	3b01      	subs	r3, #1
900063f0:	68f9      	ldr	r1, [r7, #12]
900063f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
900063f4:	fb01 f303 	mul.w	r3, r1, r3
900063f8:	441a      	add	r2, r3
900063fa:	68fb      	ldr	r3, [r7, #12]
900063fc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
900063fe:	68fb      	ldr	r3, [r7, #12]
90006400:	22ff      	movs	r2, #255	; 0xff
90006402:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
90006406:	68fb      	ldr	r3, [r7, #12]
90006408:	22ff      	movs	r2, #255	; 0xff
9000640a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
9000640e:	683b      	ldr	r3, [r7, #0]
90006410:	2b00      	cmp	r3, #0
90006412:	d114      	bne.n	9000643e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90006414:	68fb      	ldr	r3, [r7, #12]
90006416:	691b      	ldr	r3, [r3, #16]
90006418:	2b00      	cmp	r3, #0
9000641a:	d01a      	beq.n	90006452 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000641c:	68fb      	ldr	r3, [r7, #12]
9000641e:	3310      	adds	r3, #16
90006420:	4618      	mov	r0, r3
90006422:	f001 fb49 	bl	90007ab8 <xTaskRemoveFromEventList>
90006426:	4603      	mov	r3, r0
90006428:	2b00      	cmp	r3, #0
9000642a:	d012      	beq.n	90006452 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
9000642c:	4b0c      	ldr	r3, [pc, #48]	; (90006460 <xQueueGenericReset+0xcc>)
9000642e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90006432:	601a      	str	r2, [r3, #0]
90006434:	f3bf 8f4f 	dsb	sy
90006438:	f3bf 8f6f 	isb	sy
9000643c:	e009      	b.n	90006452 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000643e:	68fb      	ldr	r3, [r7, #12]
90006440:	3310      	adds	r3, #16
90006442:	4618      	mov	r0, r3
90006444:	f7ff fef2 	bl	9000622c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
90006448:	68fb      	ldr	r3, [r7, #12]
9000644a:	3324      	adds	r3, #36	; 0x24
9000644c:	4618      	mov	r0, r3
9000644e:	f7ff feed 	bl	9000622c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
90006452:	f002 f86f 	bl	90008534 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
90006456:	2301      	movs	r3, #1
}
90006458:	4618      	mov	r0, r3
9000645a:	3710      	adds	r7, #16
9000645c:	46bd      	mov	sp, r7
9000645e:	bd80      	pop	{r7, pc}
90006460:	e000ed04 	.word	0xe000ed04

90006464 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
90006464:	b580      	push	{r7, lr}
90006466:	b08e      	sub	sp, #56	; 0x38
90006468:	af02      	add	r7, sp, #8
9000646a:	60f8      	str	r0, [r7, #12]
9000646c:	60b9      	str	r1, [r7, #8]
9000646e:	607a      	str	r2, [r7, #4]
90006470:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
90006472:	68fb      	ldr	r3, [r7, #12]
90006474:	2b00      	cmp	r3, #0
90006476:	d10a      	bne.n	9000648e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
90006478:	f04f 0350 	mov.w	r3, #80	; 0x50
9000647c:	f383 8811 	msr	BASEPRI, r3
90006480:	f3bf 8f6f 	isb	sy
90006484:	f3bf 8f4f 	dsb	sy
90006488:	62bb      	str	r3, [r7, #40]	; 0x28
}
9000648a:	bf00      	nop
9000648c:	e7fe      	b.n	9000648c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
9000648e:	683b      	ldr	r3, [r7, #0]
90006490:	2b00      	cmp	r3, #0
90006492:	d10a      	bne.n	900064aa <xQueueGenericCreateStatic+0x46>
	__asm volatile
90006494:	f04f 0350 	mov.w	r3, #80	; 0x50
90006498:	f383 8811 	msr	BASEPRI, r3
9000649c:	f3bf 8f6f 	isb	sy
900064a0:	f3bf 8f4f 	dsb	sy
900064a4:	627b      	str	r3, [r7, #36]	; 0x24
}
900064a6:	bf00      	nop
900064a8:	e7fe      	b.n	900064a8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
900064aa:	687b      	ldr	r3, [r7, #4]
900064ac:	2b00      	cmp	r3, #0
900064ae:	d002      	beq.n	900064b6 <xQueueGenericCreateStatic+0x52>
900064b0:	68bb      	ldr	r3, [r7, #8]
900064b2:	2b00      	cmp	r3, #0
900064b4:	d001      	beq.n	900064ba <xQueueGenericCreateStatic+0x56>
900064b6:	2301      	movs	r3, #1
900064b8:	e000      	b.n	900064bc <xQueueGenericCreateStatic+0x58>
900064ba:	2300      	movs	r3, #0
900064bc:	2b00      	cmp	r3, #0
900064be:	d10a      	bne.n	900064d6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
900064c0:	f04f 0350 	mov.w	r3, #80	; 0x50
900064c4:	f383 8811 	msr	BASEPRI, r3
900064c8:	f3bf 8f6f 	isb	sy
900064cc:	f3bf 8f4f 	dsb	sy
900064d0:	623b      	str	r3, [r7, #32]
}
900064d2:	bf00      	nop
900064d4:	e7fe      	b.n	900064d4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
900064d6:	687b      	ldr	r3, [r7, #4]
900064d8:	2b00      	cmp	r3, #0
900064da:	d102      	bne.n	900064e2 <xQueueGenericCreateStatic+0x7e>
900064dc:	68bb      	ldr	r3, [r7, #8]
900064de:	2b00      	cmp	r3, #0
900064e0:	d101      	bne.n	900064e6 <xQueueGenericCreateStatic+0x82>
900064e2:	2301      	movs	r3, #1
900064e4:	e000      	b.n	900064e8 <xQueueGenericCreateStatic+0x84>
900064e6:	2300      	movs	r3, #0
900064e8:	2b00      	cmp	r3, #0
900064ea:	d10a      	bne.n	90006502 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
900064ec:	f04f 0350 	mov.w	r3, #80	; 0x50
900064f0:	f383 8811 	msr	BASEPRI, r3
900064f4:	f3bf 8f6f 	isb	sy
900064f8:	f3bf 8f4f 	dsb	sy
900064fc:	61fb      	str	r3, [r7, #28]
}
900064fe:	bf00      	nop
90006500:	e7fe      	b.n	90006500 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
90006502:	2348      	movs	r3, #72	; 0x48
90006504:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
90006506:	697b      	ldr	r3, [r7, #20]
90006508:	2b48      	cmp	r3, #72	; 0x48
9000650a:	d00a      	beq.n	90006522 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
9000650c:	f04f 0350 	mov.w	r3, #80	; 0x50
90006510:	f383 8811 	msr	BASEPRI, r3
90006514:	f3bf 8f6f 	isb	sy
90006518:	f3bf 8f4f 	dsb	sy
9000651c:	61bb      	str	r3, [r7, #24]
}
9000651e:	bf00      	nop
90006520:	e7fe      	b.n	90006520 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
90006522:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
90006524:	683b      	ldr	r3, [r7, #0]
90006526:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
90006528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000652a:	2b00      	cmp	r3, #0
9000652c:	d00d      	beq.n	9000654a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000652e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90006530:	2201      	movs	r2, #1
90006532:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
90006536:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
9000653a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000653c:	9300      	str	r3, [sp, #0]
9000653e:	4613      	mov	r3, r2
90006540:	687a      	ldr	r2, [r7, #4]
90006542:	68b9      	ldr	r1, [r7, #8]
90006544:	68f8      	ldr	r0, [r7, #12]
90006546:	f000 f83f 	bl	900065c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
9000654a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
9000654c:	4618      	mov	r0, r3
9000654e:	3730      	adds	r7, #48	; 0x30
90006550:	46bd      	mov	sp, r7
90006552:	bd80      	pop	{r7, pc}

90006554 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
90006554:	b580      	push	{r7, lr}
90006556:	b08a      	sub	sp, #40	; 0x28
90006558:	af02      	add	r7, sp, #8
9000655a:	60f8      	str	r0, [r7, #12]
9000655c:	60b9      	str	r1, [r7, #8]
9000655e:	4613      	mov	r3, r2
90006560:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
90006562:	68fb      	ldr	r3, [r7, #12]
90006564:	2b00      	cmp	r3, #0
90006566:	d10a      	bne.n	9000657e <xQueueGenericCreate+0x2a>
	__asm volatile
90006568:	f04f 0350 	mov.w	r3, #80	; 0x50
9000656c:	f383 8811 	msr	BASEPRI, r3
90006570:	f3bf 8f6f 	isb	sy
90006574:	f3bf 8f4f 	dsb	sy
90006578:	613b      	str	r3, [r7, #16]
}
9000657a:	bf00      	nop
9000657c:	e7fe      	b.n	9000657c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000657e:	68fb      	ldr	r3, [r7, #12]
90006580:	68ba      	ldr	r2, [r7, #8]
90006582:	fb02 f303 	mul.w	r3, r2, r3
90006586:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
90006588:	69fb      	ldr	r3, [r7, #28]
9000658a:	3348      	adds	r3, #72	; 0x48
9000658c:	4618      	mov	r0, r3
9000658e:	f002 f8c3 	bl	90008718 <pvPortMalloc>
90006592:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
90006594:	69bb      	ldr	r3, [r7, #24]
90006596:	2b00      	cmp	r3, #0
90006598:	d011      	beq.n	900065be <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
9000659a:	69bb      	ldr	r3, [r7, #24]
9000659c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000659e:	697b      	ldr	r3, [r7, #20]
900065a0:	3348      	adds	r3, #72	; 0x48
900065a2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
900065a4:	69bb      	ldr	r3, [r7, #24]
900065a6:	2200      	movs	r2, #0
900065a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
900065ac:	79fa      	ldrb	r2, [r7, #7]
900065ae:	69bb      	ldr	r3, [r7, #24]
900065b0:	9300      	str	r3, [sp, #0]
900065b2:	4613      	mov	r3, r2
900065b4:	697a      	ldr	r2, [r7, #20]
900065b6:	68b9      	ldr	r1, [r7, #8]
900065b8:	68f8      	ldr	r0, [r7, #12]
900065ba:	f000 f805 	bl	900065c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
900065be:	69bb      	ldr	r3, [r7, #24]
	}
900065c0:	4618      	mov	r0, r3
900065c2:	3720      	adds	r7, #32
900065c4:	46bd      	mov	sp, r7
900065c6:	bd80      	pop	{r7, pc}

900065c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
900065c8:	b580      	push	{r7, lr}
900065ca:	b084      	sub	sp, #16
900065cc:	af00      	add	r7, sp, #0
900065ce:	60f8      	str	r0, [r7, #12]
900065d0:	60b9      	str	r1, [r7, #8]
900065d2:	607a      	str	r2, [r7, #4]
900065d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
900065d6:	68bb      	ldr	r3, [r7, #8]
900065d8:	2b00      	cmp	r3, #0
900065da:	d103      	bne.n	900065e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
900065dc:	69bb      	ldr	r3, [r7, #24]
900065de:	69ba      	ldr	r2, [r7, #24]
900065e0:	601a      	str	r2, [r3, #0]
900065e2:	e002      	b.n	900065ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
900065e4:	69bb      	ldr	r3, [r7, #24]
900065e6:	687a      	ldr	r2, [r7, #4]
900065e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
900065ea:	69bb      	ldr	r3, [r7, #24]
900065ec:	68fa      	ldr	r2, [r7, #12]
900065ee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
900065f0:	69bb      	ldr	r3, [r7, #24]
900065f2:	68ba      	ldr	r2, [r7, #8]
900065f4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
900065f6:	2101      	movs	r1, #1
900065f8:	69b8      	ldr	r0, [r7, #24]
900065fa:	f7ff fecb 	bl	90006394 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
900065fe:	bf00      	nop
90006600:	3710      	adds	r7, #16
90006602:	46bd      	mov	sp, r7
90006604:	bd80      	pop	{r7, pc}

90006606 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
90006606:	b580      	push	{r7, lr}
90006608:	b082      	sub	sp, #8
9000660a:	af00      	add	r7, sp, #0
9000660c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
9000660e:	687b      	ldr	r3, [r7, #4]
90006610:	2b00      	cmp	r3, #0
90006612:	d00e      	beq.n	90006632 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
90006614:	687b      	ldr	r3, [r7, #4]
90006616:	2200      	movs	r2, #0
90006618:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
9000661a:	687b      	ldr	r3, [r7, #4]
9000661c:	2200      	movs	r2, #0
9000661e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
90006620:	687b      	ldr	r3, [r7, #4]
90006622:	2200      	movs	r2, #0
90006624:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
90006626:	2300      	movs	r3, #0
90006628:	2200      	movs	r2, #0
9000662a:	2100      	movs	r1, #0
9000662c:	6878      	ldr	r0, [r7, #4]
9000662e:	f000 f837 	bl	900066a0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
90006632:	bf00      	nop
90006634:	3708      	adds	r7, #8
90006636:	46bd      	mov	sp, r7
90006638:	bd80      	pop	{r7, pc}

9000663a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
9000663a:	b580      	push	{r7, lr}
9000663c:	b086      	sub	sp, #24
9000663e:	af00      	add	r7, sp, #0
90006640:	4603      	mov	r3, r0
90006642:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
90006644:	2301      	movs	r3, #1
90006646:	617b      	str	r3, [r7, #20]
90006648:	2300      	movs	r3, #0
9000664a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
9000664c:	79fb      	ldrb	r3, [r7, #7]
9000664e:	461a      	mov	r2, r3
90006650:	6939      	ldr	r1, [r7, #16]
90006652:	6978      	ldr	r0, [r7, #20]
90006654:	f7ff ff7e 	bl	90006554 <xQueueGenericCreate>
90006658:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
9000665a:	68f8      	ldr	r0, [r7, #12]
9000665c:	f7ff ffd3 	bl	90006606 <prvInitialiseMutex>

		return xNewQueue;
90006660:	68fb      	ldr	r3, [r7, #12]
	}
90006662:	4618      	mov	r0, r3
90006664:	3718      	adds	r7, #24
90006666:	46bd      	mov	sp, r7
90006668:	bd80      	pop	{r7, pc}

9000666a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
9000666a:	b580      	push	{r7, lr}
9000666c:	b088      	sub	sp, #32
9000666e:	af02      	add	r7, sp, #8
90006670:	4603      	mov	r3, r0
90006672:	6039      	str	r1, [r7, #0]
90006674:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
90006676:	2301      	movs	r3, #1
90006678:	617b      	str	r3, [r7, #20]
9000667a:	2300      	movs	r3, #0
9000667c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
9000667e:	79fb      	ldrb	r3, [r7, #7]
90006680:	9300      	str	r3, [sp, #0]
90006682:	683b      	ldr	r3, [r7, #0]
90006684:	2200      	movs	r2, #0
90006686:	6939      	ldr	r1, [r7, #16]
90006688:	6978      	ldr	r0, [r7, #20]
9000668a:	f7ff feeb 	bl	90006464 <xQueueGenericCreateStatic>
9000668e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
90006690:	68f8      	ldr	r0, [r7, #12]
90006692:	f7ff ffb8 	bl	90006606 <prvInitialiseMutex>

		return xNewQueue;
90006696:	68fb      	ldr	r3, [r7, #12]
	}
90006698:	4618      	mov	r0, r3
9000669a:	3718      	adds	r7, #24
9000669c:	46bd      	mov	sp, r7
9000669e:	bd80      	pop	{r7, pc}

900066a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
900066a0:	b580      	push	{r7, lr}
900066a2:	b08e      	sub	sp, #56	; 0x38
900066a4:	af00      	add	r7, sp, #0
900066a6:	60f8      	str	r0, [r7, #12]
900066a8:	60b9      	str	r1, [r7, #8]
900066aa:	607a      	str	r2, [r7, #4]
900066ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
900066ae:	2300      	movs	r3, #0
900066b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
900066b2:	68fb      	ldr	r3, [r7, #12]
900066b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
900066b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900066b8:	2b00      	cmp	r3, #0
900066ba:	d10a      	bne.n	900066d2 <xQueueGenericSend+0x32>
	__asm volatile
900066bc:	f04f 0350 	mov.w	r3, #80	; 0x50
900066c0:	f383 8811 	msr	BASEPRI, r3
900066c4:	f3bf 8f6f 	isb	sy
900066c8:	f3bf 8f4f 	dsb	sy
900066cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
900066ce:	bf00      	nop
900066d0:	e7fe      	b.n	900066d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
900066d2:	68bb      	ldr	r3, [r7, #8]
900066d4:	2b00      	cmp	r3, #0
900066d6:	d103      	bne.n	900066e0 <xQueueGenericSend+0x40>
900066d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900066da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900066dc:	2b00      	cmp	r3, #0
900066de:	d101      	bne.n	900066e4 <xQueueGenericSend+0x44>
900066e0:	2301      	movs	r3, #1
900066e2:	e000      	b.n	900066e6 <xQueueGenericSend+0x46>
900066e4:	2300      	movs	r3, #0
900066e6:	2b00      	cmp	r3, #0
900066e8:	d10a      	bne.n	90006700 <xQueueGenericSend+0x60>
	__asm volatile
900066ea:	f04f 0350 	mov.w	r3, #80	; 0x50
900066ee:	f383 8811 	msr	BASEPRI, r3
900066f2:	f3bf 8f6f 	isb	sy
900066f6:	f3bf 8f4f 	dsb	sy
900066fa:	627b      	str	r3, [r7, #36]	; 0x24
}
900066fc:	bf00      	nop
900066fe:	e7fe      	b.n	900066fe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
90006700:	683b      	ldr	r3, [r7, #0]
90006702:	2b02      	cmp	r3, #2
90006704:	d103      	bne.n	9000670e <xQueueGenericSend+0x6e>
90006706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000670a:	2b01      	cmp	r3, #1
9000670c:	d101      	bne.n	90006712 <xQueueGenericSend+0x72>
9000670e:	2301      	movs	r3, #1
90006710:	e000      	b.n	90006714 <xQueueGenericSend+0x74>
90006712:	2300      	movs	r3, #0
90006714:	2b00      	cmp	r3, #0
90006716:	d10a      	bne.n	9000672e <xQueueGenericSend+0x8e>
	__asm volatile
90006718:	f04f 0350 	mov.w	r3, #80	; 0x50
9000671c:	f383 8811 	msr	BASEPRI, r3
90006720:	f3bf 8f6f 	isb	sy
90006724:	f3bf 8f4f 	dsb	sy
90006728:	623b      	str	r3, [r7, #32]
}
9000672a:	bf00      	nop
9000672c:	e7fe      	b.n	9000672c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000672e:	f001 fb83 	bl	90007e38 <xTaskGetSchedulerState>
90006732:	4603      	mov	r3, r0
90006734:	2b00      	cmp	r3, #0
90006736:	d102      	bne.n	9000673e <xQueueGenericSend+0x9e>
90006738:	687b      	ldr	r3, [r7, #4]
9000673a:	2b00      	cmp	r3, #0
9000673c:	d101      	bne.n	90006742 <xQueueGenericSend+0xa2>
9000673e:	2301      	movs	r3, #1
90006740:	e000      	b.n	90006744 <xQueueGenericSend+0xa4>
90006742:	2300      	movs	r3, #0
90006744:	2b00      	cmp	r3, #0
90006746:	d10a      	bne.n	9000675e <xQueueGenericSend+0xbe>
	__asm volatile
90006748:	f04f 0350 	mov.w	r3, #80	; 0x50
9000674c:	f383 8811 	msr	BASEPRI, r3
90006750:	f3bf 8f6f 	isb	sy
90006754:	f3bf 8f4f 	dsb	sy
90006758:	61fb      	str	r3, [r7, #28]
}
9000675a:	bf00      	nop
9000675c:	e7fe      	b.n	9000675c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
9000675e:	f001 feb9 	bl	900084d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
90006762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006764:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90006766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000676a:	429a      	cmp	r2, r3
9000676c:	d302      	bcc.n	90006774 <xQueueGenericSend+0xd4>
9000676e:	683b      	ldr	r3, [r7, #0]
90006770:	2b02      	cmp	r3, #2
90006772:	d129      	bne.n	900067c8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
90006774:	683a      	ldr	r2, [r7, #0]
90006776:	68b9      	ldr	r1, [r7, #8]
90006778:	6b38      	ldr	r0, [r7, #48]	; 0x30
9000677a:	f000 fc3b 	bl	90006ff4 <prvCopyDataToQueue>
9000677e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90006780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90006784:	2b00      	cmp	r3, #0
90006786:	d010      	beq.n	900067aa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90006788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000678a:	3324      	adds	r3, #36	; 0x24
9000678c:	4618      	mov	r0, r3
9000678e:	f001 f993 	bl	90007ab8 <xTaskRemoveFromEventList>
90006792:	4603      	mov	r3, r0
90006794:	2b00      	cmp	r3, #0
90006796:	d013      	beq.n	900067c0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
90006798:	4b3f      	ldr	r3, [pc, #252]	; (90006898 <xQueueGenericSend+0x1f8>)
9000679a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000679e:	601a      	str	r2, [r3, #0]
900067a0:	f3bf 8f4f 	dsb	sy
900067a4:	f3bf 8f6f 	isb	sy
900067a8:	e00a      	b.n	900067c0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
900067aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900067ac:	2b00      	cmp	r3, #0
900067ae:	d007      	beq.n	900067c0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
900067b0:	4b39      	ldr	r3, [pc, #228]	; (90006898 <xQueueGenericSend+0x1f8>)
900067b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
900067b6:	601a      	str	r2, [r3, #0]
900067b8:	f3bf 8f4f 	dsb	sy
900067bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
900067c0:	f001 feb8 	bl	90008534 <vPortExitCritical>
				return pdPASS;
900067c4:	2301      	movs	r3, #1
900067c6:	e063      	b.n	90006890 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
900067c8:	687b      	ldr	r3, [r7, #4]
900067ca:	2b00      	cmp	r3, #0
900067cc:	d103      	bne.n	900067d6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
900067ce:	f001 feb1 	bl	90008534 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
900067d2:	2300      	movs	r3, #0
900067d4:	e05c      	b.n	90006890 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
900067d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
900067d8:	2b00      	cmp	r3, #0
900067da:	d106      	bne.n	900067ea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
900067dc:	f107 0314 	add.w	r3, r7, #20
900067e0:	4618      	mov	r0, r3
900067e2:	f001 f9cb 	bl	90007b7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
900067e6:	2301      	movs	r3, #1
900067e8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
900067ea:	f001 fea3 	bl	90008534 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
900067ee:	f000 ff59 	bl	900076a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
900067f2:	f001 fe6f 	bl	900084d4 <vPortEnterCritical>
900067f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900067f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
900067fc:	b25b      	sxtb	r3, r3
900067fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
90006802:	d103      	bne.n	9000680c <xQueueGenericSend+0x16c>
90006804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006806:	2200      	movs	r2, #0
90006808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
9000680c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000680e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
90006812:	b25b      	sxtb	r3, r3
90006814:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
90006818:	d103      	bne.n	90006822 <xQueueGenericSend+0x182>
9000681a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000681c:	2200      	movs	r2, #0
9000681e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
90006822:	f001 fe87 	bl	90008534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
90006826:	1d3a      	adds	r2, r7, #4
90006828:	f107 0314 	add.w	r3, r7, #20
9000682c:	4611      	mov	r1, r2
9000682e:	4618      	mov	r0, r3
90006830:	f001 f9ba 	bl	90007ba8 <xTaskCheckForTimeOut>
90006834:	4603      	mov	r3, r0
90006836:	2b00      	cmp	r3, #0
90006838:	d124      	bne.n	90006884 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
9000683a:	6b38      	ldr	r0, [r7, #48]	; 0x30
9000683c:	f000 fcd2 	bl	900071e4 <prvIsQueueFull>
90006840:	4603      	mov	r3, r0
90006842:	2b00      	cmp	r3, #0
90006844:	d018      	beq.n	90006878 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
90006846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006848:	3310      	adds	r3, #16
9000684a:	687a      	ldr	r2, [r7, #4]
9000684c:	4611      	mov	r1, r2
9000684e:	4618      	mov	r0, r3
90006850:	f001 f90e 	bl	90007a70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
90006854:	6b38      	ldr	r0, [r7, #48]	; 0x30
90006856:	f000 fc5d 	bl	90007114 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
9000685a:	f000 ff31 	bl	900076c0 <xTaskResumeAll>
9000685e:	4603      	mov	r3, r0
90006860:	2b00      	cmp	r3, #0
90006862:	f47f af7c 	bne.w	9000675e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
90006866:	4b0c      	ldr	r3, [pc, #48]	; (90006898 <xQueueGenericSend+0x1f8>)
90006868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000686c:	601a      	str	r2, [r3, #0]
9000686e:	f3bf 8f4f 	dsb	sy
90006872:	f3bf 8f6f 	isb	sy
90006876:	e772      	b.n	9000675e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
90006878:	6b38      	ldr	r0, [r7, #48]	; 0x30
9000687a:	f000 fc4b 	bl	90007114 <prvUnlockQueue>
				( void ) xTaskResumeAll();
9000687e:	f000 ff1f 	bl	900076c0 <xTaskResumeAll>
90006882:	e76c      	b.n	9000675e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
90006884:	6b38      	ldr	r0, [r7, #48]	; 0x30
90006886:	f000 fc45 	bl	90007114 <prvUnlockQueue>
			( void ) xTaskResumeAll();
9000688a:	f000 ff19 	bl	900076c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
9000688e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
90006890:	4618      	mov	r0, r3
90006892:	3738      	adds	r7, #56	; 0x38
90006894:	46bd      	mov	sp, r7
90006896:	bd80      	pop	{r7, pc}
90006898:	e000ed04 	.word	0xe000ed04

9000689c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
9000689c:	b580      	push	{r7, lr}
9000689e:	b090      	sub	sp, #64	; 0x40
900068a0:	af00      	add	r7, sp, #0
900068a2:	60f8      	str	r0, [r7, #12]
900068a4:	60b9      	str	r1, [r7, #8]
900068a6:	607a      	str	r2, [r7, #4]
900068a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
900068aa:	68fb      	ldr	r3, [r7, #12]
900068ac:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
900068ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900068b0:	2b00      	cmp	r3, #0
900068b2:	d10a      	bne.n	900068ca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
900068b4:	f04f 0350 	mov.w	r3, #80	; 0x50
900068b8:	f383 8811 	msr	BASEPRI, r3
900068bc:	f3bf 8f6f 	isb	sy
900068c0:	f3bf 8f4f 	dsb	sy
900068c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
900068c6:	bf00      	nop
900068c8:	e7fe      	b.n	900068c8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
900068ca:	68bb      	ldr	r3, [r7, #8]
900068cc:	2b00      	cmp	r3, #0
900068ce:	d103      	bne.n	900068d8 <xQueueGenericSendFromISR+0x3c>
900068d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900068d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900068d4:	2b00      	cmp	r3, #0
900068d6:	d101      	bne.n	900068dc <xQueueGenericSendFromISR+0x40>
900068d8:	2301      	movs	r3, #1
900068da:	e000      	b.n	900068de <xQueueGenericSendFromISR+0x42>
900068dc:	2300      	movs	r3, #0
900068de:	2b00      	cmp	r3, #0
900068e0:	d10a      	bne.n	900068f8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
900068e2:	f04f 0350 	mov.w	r3, #80	; 0x50
900068e6:	f383 8811 	msr	BASEPRI, r3
900068ea:	f3bf 8f6f 	isb	sy
900068ee:	f3bf 8f4f 	dsb	sy
900068f2:	627b      	str	r3, [r7, #36]	; 0x24
}
900068f4:	bf00      	nop
900068f6:	e7fe      	b.n	900068f6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
900068f8:	683b      	ldr	r3, [r7, #0]
900068fa:	2b02      	cmp	r3, #2
900068fc:	d103      	bne.n	90006906 <xQueueGenericSendFromISR+0x6a>
900068fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90006900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90006902:	2b01      	cmp	r3, #1
90006904:	d101      	bne.n	9000690a <xQueueGenericSendFromISR+0x6e>
90006906:	2301      	movs	r3, #1
90006908:	e000      	b.n	9000690c <xQueueGenericSendFromISR+0x70>
9000690a:	2300      	movs	r3, #0
9000690c:	2b00      	cmp	r3, #0
9000690e:	d10a      	bne.n	90006926 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
90006910:	f04f 0350 	mov.w	r3, #80	; 0x50
90006914:	f383 8811 	msr	BASEPRI, r3
90006918:	f3bf 8f6f 	isb	sy
9000691c:	f3bf 8f4f 	dsb	sy
90006920:	623b      	str	r3, [r7, #32]
}
90006922:	bf00      	nop
90006924:	e7fe      	b.n	90006924 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
90006926:	f001 feb7 	bl	90008698 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
9000692a:	f3ef 8211 	mrs	r2, BASEPRI
9000692e:	f04f 0350 	mov.w	r3, #80	; 0x50
90006932:	f383 8811 	msr	BASEPRI, r3
90006936:	f3bf 8f6f 	isb	sy
9000693a:	f3bf 8f4f 	dsb	sy
9000693e:	61fa      	str	r2, [r7, #28]
90006940:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
90006942:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
90006944:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
90006946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90006948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000694a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000694c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9000694e:	429a      	cmp	r2, r3
90006950:	d302      	bcc.n	90006958 <xQueueGenericSendFromISR+0xbc>
90006952:	683b      	ldr	r3, [r7, #0]
90006954:	2b02      	cmp	r3, #2
90006956:	d12f      	bne.n	900069b8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
90006958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000695a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
9000695e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
90006962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90006964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90006966:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
90006968:	683a      	ldr	r2, [r7, #0]
9000696a:	68b9      	ldr	r1, [r7, #8]
9000696c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
9000696e:	f000 fb41 	bl	90006ff4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
90006972:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
90006976:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
9000697a:	d112      	bne.n	900069a2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000697c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000697e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90006980:	2b00      	cmp	r3, #0
90006982:	d016      	beq.n	900069b2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90006984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90006986:	3324      	adds	r3, #36	; 0x24
90006988:	4618      	mov	r0, r3
9000698a:	f001 f895 	bl	90007ab8 <xTaskRemoveFromEventList>
9000698e:	4603      	mov	r3, r0
90006990:	2b00      	cmp	r3, #0
90006992:	d00e      	beq.n	900069b2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
90006994:	687b      	ldr	r3, [r7, #4]
90006996:	2b00      	cmp	r3, #0
90006998:	d00b      	beq.n	900069b2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
9000699a:	687b      	ldr	r3, [r7, #4]
9000699c:	2201      	movs	r2, #1
9000699e:	601a      	str	r2, [r3, #0]
900069a0:	e007      	b.n	900069b2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
900069a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
900069a6:	3301      	adds	r3, #1
900069a8:	b2db      	uxtb	r3, r3
900069aa:	b25a      	sxtb	r2, r3
900069ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900069ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
900069b2:	2301      	movs	r3, #1
900069b4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
900069b6:	e001      	b.n	900069bc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
900069b8:	2300      	movs	r3, #0
900069ba:	63fb      	str	r3, [r7, #60]	; 0x3c
900069bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
900069be:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
900069c0:	697b      	ldr	r3, [r7, #20]
900069c2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
900069c6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
900069c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
900069ca:	4618      	mov	r0, r3
900069cc:	3740      	adds	r7, #64	; 0x40
900069ce:	46bd      	mov	sp, r7
900069d0:	bd80      	pop	{r7, pc}

900069d2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
900069d2:	b580      	push	{r7, lr}
900069d4:	b08e      	sub	sp, #56	; 0x38
900069d6:	af00      	add	r7, sp, #0
900069d8:	6078      	str	r0, [r7, #4]
900069da:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
900069dc:	687b      	ldr	r3, [r7, #4]
900069de:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
900069e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900069e2:	2b00      	cmp	r3, #0
900069e4:	d10a      	bne.n	900069fc <xQueueGiveFromISR+0x2a>
	__asm volatile
900069e6:	f04f 0350 	mov.w	r3, #80	; 0x50
900069ea:	f383 8811 	msr	BASEPRI, r3
900069ee:	f3bf 8f6f 	isb	sy
900069f2:	f3bf 8f4f 	dsb	sy
900069f6:	623b      	str	r3, [r7, #32]
}
900069f8:	bf00      	nop
900069fa:	e7fe      	b.n	900069fa <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
900069fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900069fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90006a00:	2b00      	cmp	r3, #0
90006a02:	d00a      	beq.n	90006a1a <xQueueGiveFromISR+0x48>
	__asm volatile
90006a04:	f04f 0350 	mov.w	r3, #80	; 0x50
90006a08:	f383 8811 	msr	BASEPRI, r3
90006a0c:	f3bf 8f6f 	isb	sy
90006a10:	f3bf 8f4f 	dsb	sy
90006a14:	61fb      	str	r3, [r7, #28]
}
90006a16:	bf00      	nop
90006a18:	e7fe      	b.n	90006a18 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
90006a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006a1c:	681b      	ldr	r3, [r3, #0]
90006a1e:	2b00      	cmp	r3, #0
90006a20:	d103      	bne.n	90006a2a <xQueueGiveFromISR+0x58>
90006a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006a24:	689b      	ldr	r3, [r3, #8]
90006a26:	2b00      	cmp	r3, #0
90006a28:	d101      	bne.n	90006a2e <xQueueGiveFromISR+0x5c>
90006a2a:	2301      	movs	r3, #1
90006a2c:	e000      	b.n	90006a30 <xQueueGiveFromISR+0x5e>
90006a2e:	2300      	movs	r3, #0
90006a30:	2b00      	cmp	r3, #0
90006a32:	d10a      	bne.n	90006a4a <xQueueGiveFromISR+0x78>
	__asm volatile
90006a34:	f04f 0350 	mov.w	r3, #80	; 0x50
90006a38:	f383 8811 	msr	BASEPRI, r3
90006a3c:	f3bf 8f6f 	isb	sy
90006a40:	f3bf 8f4f 	dsb	sy
90006a44:	61bb      	str	r3, [r7, #24]
}
90006a46:	bf00      	nop
90006a48:	e7fe      	b.n	90006a48 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
90006a4a:	f001 fe25 	bl	90008698 <vPortValidateInterruptPriority>
	__asm volatile
90006a4e:	f3ef 8211 	mrs	r2, BASEPRI
90006a52:	f04f 0350 	mov.w	r3, #80	; 0x50
90006a56:	f383 8811 	msr	BASEPRI, r3
90006a5a:	f3bf 8f6f 	isb	sy
90006a5e:	f3bf 8f4f 	dsb	sy
90006a62:	617a      	str	r2, [r7, #20]
90006a64:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
90006a66:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
90006a68:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
90006a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90006a6e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
90006a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90006a74:	6aba      	ldr	r2, [r7, #40]	; 0x28
90006a76:	429a      	cmp	r2, r3
90006a78:	d22b      	bcs.n	90006ad2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
90006a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006a7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
90006a80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
90006a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
90006a86:	1c5a      	adds	r2, r3, #1
90006a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006a8a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
90006a8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
90006a90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
90006a94:	d112      	bne.n	90006abc <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90006a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90006a9a:	2b00      	cmp	r3, #0
90006a9c:	d016      	beq.n	90006acc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90006a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006aa0:	3324      	adds	r3, #36	; 0x24
90006aa2:	4618      	mov	r0, r3
90006aa4:	f001 f808 	bl	90007ab8 <xTaskRemoveFromEventList>
90006aa8:	4603      	mov	r3, r0
90006aaa:	2b00      	cmp	r3, #0
90006aac:	d00e      	beq.n	90006acc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
90006aae:	683b      	ldr	r3, [r7, #0]
90006ab0:	2b00      	cmp	r3, #0
90006ab2:	d00b      	beq.n	90006acc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
90006ab4:	683b      	ldr	r3, [r7, #0]
90006ab6:	2201      	movs	r2, #1
90006ab8:	601a      	str	r2, [r3, #0]
90006aba:	e007      	b.n	90006acc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
90006abc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
90006ac0:	3301      	adds	r3, #1
90006ac2:	b2db      	uxtb	r3, r3
90006ac4:	b25a      	sxtb	r2, r3
90006ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006ac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
90006acc:	2301      	movs	r3, #1
90006ace:	637b      	str	r3, [r7, #52]	; 0x34
90006ad0:	e001      	b.n	90006ad6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
90006ad2:	2300      	movs	r3, #0
90006ad4:	637b      	str	r3, [r7, #52]	; 0x34
90006ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90006ad8:	60fb      	str	r3, [r7, #12]
	__asm volatile
90006ada:	68fb      	ldr	r3, [r7, #12]
90006adc:	f383 8811 	msr	BASEPRI, r3
}
90006ae0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
90006ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
90006ae4:	4618      	mov	r0, r3
90006ae6:	3738      	adds	r7, #56	; 0x38
90006ae8:	46bd      	mov	sp, r7
90006aea:	bd80      	pop	{r7, pc}

90006aec <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
90006aec:	b580      	push	{r7, lr}
90006aee:	b08c      	sub	sp, #48	; 0x30
90006af0:	af00      	add	r7, sp, #0
90006af2:	60f8      	str	r0, [r7, #12]
90006af4:	60b9      	str	r1, [r7, #8]
90006af6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
90006af8:	2300      	movs	r3, #0
90006afa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
90006afc:	68fb      	ldr	r3, [r7, #12]
90006afe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
90006b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
90006b02:	2b00      	cmp	r3, #0
90006b04:	d10a      	bne.n	90006b1c <xQueueReceive+0x30>
	__asm volatile
90006b06:	f04f 0350 	mov.w	r3, #80	; 0x50
90006b0a:	f383 8811 	msr	BASEPRI, r3
90006b0e:	f3bf 8f6f 	isb	sy
90006b12:	f3bf 8f4f 	dsb	sy
90006b16:	623b      	str	r3, [r7, #32]
}
90006b18:	bf00      	nop
90006b1a:	e7fe      	b.n	90006b1a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
90006b1c:	68bb      	ldr	r3, [r7, #8]
90006b1e:	2b00      	cmp	r3, #0
90006b20:	d103      	bne.n	90006b2a <xQueueReceive+0x3e>
90006b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
90006b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90006b26:	2b00      	cmp	r3, #0
90006b28:	d101      	bne.n	90006b2e <xQueueReceive+0x42>
90006b2a:	2301      	movs	r3, #1
90006b2c:	e000      	b.n	90006b30 <xQueueReceive+0x44>
90006b2e:	2300      	movs	r3, #0
90006b30:	2b00      	cmp	r3, #0
90006b32:	d10a      	bne.n	90006b4a <xQueueReceive+0x5e>
	__asm volatile
90006b34:	f04f 0350 	mov.w	r3, #80	; 0x50
90006b38:	f383 8811 	msr	BASEPRI, r3
90006b3c:	f3bf 8f6f 	isb	sy
90006b40:	f3bf 8f4f 	dsb	sy
90006b44:	61fb      	str	r3, [r7, #28]
}
90006b46:	bf00      	nop
90006b48:	e7fe      	b.n	90006b48 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
90006b4a:	f001 f975 	bl	90007e38 <xTaskGetSchedulerState>
90006b4e:	4603      	mov	r3, r0
90006b50:	2b00      	cmp	r3, #0
90006b52:	d102      	bne.n	90006b5a <xQueueReceive+0x6e>
90006b54:	687b      	ldr	r3, [r7, #4]
90006b56:	2b00      	cmp	r3, #0
90006b58:	d101      	bne.n	90006b5e <xQueueReceive+0x72>
90006b5a:	2301      	movs	r3, #1
90006b5c:	e000      	b.n	90006b60 <xQueueReceive+0x74>
90006b5e:	2300      	movs	r3, #0
90006b60:	2b00      	cmp	r3, #0
90006b62:	d10a      	bne.n	90006b7a <xQueueReceive+0x8e>
	__asm volatile
90006b64:	f04f 0350 	mov.w	r3, #80	; 0x50
90006b68:	f383 8811 	msr	BASEPRI, r3
90006b6c:	f3bf 8f6f 	isb	sy
90006b70:	f3bf 8f4f 	dsb	sy
90006b74:	61bb      	str	r3, [r7, #24]
}
90006b76:	bf00      	nop
90006b78:	e7fe      	b.n	90006b78 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
90006b7a:	f001 fcab 	bl	900084d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
90006b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
90006b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90006b82:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
90006b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90006b86:	2b00      	cmp	r3, #0
90006b88:	d01f      	beq.n	90006bca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
90006b8a:	68b9      	ldr	r1, [r7, #8]
90006b8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
90006b8e:	f000 fa9b 	bl	900070c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
90006b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90006b94:	1e5a      	subs	r2, r3, #1
90006b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
90006b98:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90006b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
90006b9c:	691b      	ldr	r3, [r3, #16]
90006b9e:	2b00      	cmp	r3, #0
90006ba0:	d00f      	beq.n	90006bc2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90006ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
90006ba4:	3310      	adds	r3, #16
90006ba6:	4618      	mov	r0, r3
90006ba8:	f000 ff86 	bl	90007ab8 <xTaskRemoveFromEventList>
90006bac:	4603      	mov	r3, r0
90006bae:	2b00      	cmp	r3, #0
90006bb0:	d007      	beq.n	90006bc2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
90006bb2:	4b3d      	ldr	r3, [pc, #244]	; (90006ca8 <xQueueReceive+0x1bc>)
90006bb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90006bb8:	601a      	str	r2, [r3, #0]
90006bba:	f3bf 8f4f 	dsb	sy
90006bbe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
90006bc2:	f001 fcb7 	bl	90008534 <vPortExitCritical>
				return pdPASS;
90006bc6:	2301      	movs	r3, #1
90006bc8:	e069      	b.n	90006c9e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
90006bca:	687b      	ldr	r3, [r7, #4]
90006bcc:	2b00      	cmp	r3, #0
90006bce:	d103      	bne.n	90006bd8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
90006bd0:	f001 fcb0 	bl	90008534 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
90006bd4:	2300      	movs	r3, #0
90006bd6:	e062      	b.n	90006c9e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
90006bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90006bda:	2b00      	cmp	r3, #0
90006bdc:	d106      	bne.n	90006bec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
90006bde:	f107 0310 	add.w	r3, r7, #16
90006be2:	4618      	mov	r0, r3
90006be4:	f000 ffca 	bl	90007b7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
90006be8:	2301      	movs	r3, #1
90006bea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
90006bec:	f001 fca2 	bl	90008534 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
90006bf0:	f000 fd58 	bl	900076a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
90006bf4:	f001 fc6e 	bl	900084d4 <vPortEnterCritical>
90006bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
90006bfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
90006bfe:	b25b      	sxtb	r3, r3
90006c00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
90006c04:	d103      	bne.n	90006c0e <xQueueReceive+0x122>
90006c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
90006c08:	2200      	movs	r2, #0
90006c0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
90006c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
90006c10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
90006c14:	b25b      	sxtb	r3, r3
90006c16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
90006c1a:	d103      	bne.n	90006c24 <xQueueReceive+0x138>
90006c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
90006c1e:	2200      	movs	r2, #0
90006c20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
90006c24:	f001 fc86 	bl	90008534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
90006c28:	1d3a      	adds	r2, r7, #4
90006c2a:	f107 0310 	add.w	r3, r7, #16
90006c2e:	4611      	mov	r1, r2
90006c30:	4618      	mov	r0, r3
90006c32:	f000 ffb9 	bl	90007ba8 <xTaskCheckForTimeOut>
90006c36:	4603      	mov	r3, r0
90006c38:	2b00      	cmp	r3, #0
90006c3a:	d123      	bne.n	90006c84 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
90006c3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
90006c3e:	f000 fabb 	bl	900071b8 <prvIsQueueEmpty>
90006c42:	4603      	mov	r3, r0
90006c44:	2b00      	cmp	r3, #0
90006c46:	d017      	beq.n	90006c78 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
90006c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
90006c4a:	3324      	adds	r3, #36	; 0x24
90006c4c:	687a      	ldr	r2, [r7, #4]
90006c4e:	4611      	mov	r1, r2
90006c50:	4618      	mov	r0, r3
90006c52:	f000 ff0d 	bl	90007a70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
90006c56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
90006c58:	f000 fa5c 	bl	90007114 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
90006c5c:	f000 fd30 	bl	900076c0 <xTaskResumeAll>
90006c60:	4603      	mov	r3, r0
90006c62:	2b00      	cmp	r3, #0
90006c64:	d189      	bne.n	90006b7a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
90006c66:	4b10      	ldr	r3, [pc, #64]	; (90006ca8 <xQueueReceive+0x1bc>)
90006c68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90006c6c:	601a      	str	r2, [r3, #0]
90006c6e:	f3bf 8f4f 	dsb	sy
90006c72:	f3bf 8f6f 	isb	sy
90006c76:	e780      	b.n	90006b7a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
90006c78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
90006c7a:	f000 fa4b 	bl	90007114 <prvUnlockQueue>
				( void ) xTaskResumeAll();
90006c7e:	f000 fd1f 	bl	900076c0 <xTaskResumeAll>
90006c82:	e77a      	b.n	90006b7a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
90006c84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
90006c86:	f000 fa45 	bl	90007114 <prvUnlockQueue>
			( void ) xTaskResumeAll();
90006c8a:	f000 fd19 	bl	900076c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
90006c8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
90006c90:	f000 fa92 	bl	900071b8 <prvIsQueueEmpty>
90006c94:	4603      	mov	r3, r0
90006c96:	2b00      	cmp	r3, #0
90006c98:	f43f af6f 	beq.w	90006b7a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
90006c9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
90006c9e:	4618      	mov	r0, r3
90006ca0:	3730      	adds	r7, #48	; 0x30
90006ca2:	46bd      	mov	sp, r7
90006ca4:	bd80      	pop	{r7, pc}
90006ca6:	bf00      	nop
90006ca8:	e000ed04 	.word	0xe000ed04

90006cac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
90006cac:	b580      	push	{r7, lr}
90006cae:	b08e      	sub	sp, #56	; 0x38
90006cb0:	af00      	add	r7, sp, #0
90006cb2:	6078      	str	r0, [r7, #4]
90006cb4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
90006cb6:	2300      	movs	r3, #0
90006cb8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
90006cba:	687b      	ldr	r3, [r7, #4]
90006cbc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
90006cbe:	2300      	movs	r3, #0
90006cc0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
90006cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90006cc4:	2b00      	cmp	r3, #0
90006cc6:	d10a      	bne.n	90006cde <xQueueSemaphoreTake+0x32>
	__asm volatile
90006cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
90006ccc:	f383 8811 	msr	BASEPRI, r3
90006cd0:	f3bf 8f6f 	isb	sy
90006cd4:	f3bf 8f4f 	dsb	sy
90006cd8:	623b      	str	r3, [r7, #32]
}
90006cda:	bf00      	nop
90006cdc:	e7fe      	b.n	90006cdc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
90006cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90006ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90006ce2:	2b00      	cmp	r3, #0
90006ce4:	d00a      	beq.n	90006cfc <xQueueSemaphoreTake+0x50>
	__asm volatile
90006ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
90006cea:	f383 8811 	msr	BASEPRI, r3
90006cee:	f3bf 8f6f 	isb	sy
90006cf2:	f3bf 8f4f 	dsb	sy
90006cf6:	61fb      	str	r3, [r7, #28]
}
90006cf8:	bf00      	nop
90006cfa:	e7fe      	b.n	90006cfa <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
90006cfc:	f001 f89c 	bl	90007e38 <xTaskGetSchedulerState>
90006d00:	4603      	mov	r3, r0
90006d02:	2b00      	cmp	r3, #0
90006d04:	d102      	bne.n	90006d0c <xQueueSemaphoreTake+0x60>
90006d06:	683b      	ldr	r3, [r7, #0]
90006d08:	2b00      	cmp	r3, #0
90006d0a:	d101      	bne.n	90006d10 <xQueueSemaphoreTake+0x64>
90006d0c:	2301      	movs	r3, #1
90006d0e:	e000      	b.n	90006d12 <xQueueSemaphoreTake+0x66>
90006d10:	2300      	movs	r3, #0
90006d12:	2b00      	cmp	r3, #0
90006d14:	d10a      	bne.n	90006d2c <xQueueSemaphoreTake+0x80>
	__asm volatile
90006d16:	f04f 0350 	mov.w	r3, #80	; 0x50
90006d1a:	f383 8811 	msr	BASEPRI, r3
90006d1e:	f3bf 8f6f 	isb	sy
90006d22:	f3bf 8f4f 	dsb	sy
90006d26:	61bb      	str	r3, [r7, #24]
}
90006d28:	bf00      	nop
90006d2a:	e7fe      	b.n	90006d2a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
90006d2c:	f001 fbd2 	bl	900084d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
90006d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90006d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90006d34:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
90006d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
90006d38:	2b00      	cmp	r3, #0
90006d3a:	d024      	beq.n	90006d86 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
90006d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
90006d3e:	1e5a      	subs	r2, r3, #1
90006d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90006d42:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
90006d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90006d46:	681b      	ldr	r3, [r3, #0]
90006d48:	2b00      	cmp	r3, #0
90006d4a:	d104      	bne.n	90006d56 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
90006d4c:	f001 fa1c 	bl	90008188 <pvTaskIncrementMutexHeldCount>
90006d50:	4602      	mov	r2, r0
90006d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90006d54:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90006d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90006d58:	691b      	ldr	r3, [r3, #16]
90006d5a:	2b00      	cmp	r3, #0
90006d5c:	d00f      	beq.n	90006d7e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90006d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90006d60:	3310      	adds	r3, #16
90006d62:	4618      	mov	r0, r3
90006d64:	f000 fea8 	bl	90007ab8 <xTaskRemoveFromEventList>
90006d68:	4603      	mov	r3, r0
90006d6a:	2b00      	cmp	r3, #0
90006d6c:	d007      	beq.n	90006d7e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
90006d6e:	4b54      	ldr	r3, [pc, #336]	; (90006ec0 <xQueueSemaphoreTake+0x214>)
90006d70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90006d74:	601a      	str	r2, [r3, #0]
90006d76:	f3bf 8f4f 	dsb	sy
90006d7a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
90006d7e:	f001 fbd9 	bl	90008534 <vPortExitCritical>
				return pdPASS;
90006d82:	2301      	movs	r3, #1
90006d84:	e097      	b.n	90006eb6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
90006d86:	683b      	ldr	r3, [r7, #0]
90006d88:	2b00      	cmp	r3, #0
90006d8a:	d111      	bne.n	90006db0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
90006d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006d8e:	2b00      	cmp	r3, #0
90006d90:	d00a      	beq.n	90006da8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
90006d92:	f04f 0350 	mov.w	r3, #80	; 0x50
90006d96:	f383 8811 	msr	BASEPRI, r3
90006d9a:	f3bf 8f6f 	isb	sy
90006d9e:	f3bf 8f4f 	dsb	sy
90006da2:	617b      	str	r3, [r7, #20]
}
90006da4:	bf00      	nop
90006da6:	e7fe      	b.n	90006da6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
90006da8:	f001 fbc4 	bl	90008534 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
90006dac:	2300      	movs	r3, #0
90006dae:	e082      	b.n	90006eb6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
90006db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90006db2:	2b00      	cmp	r3, #0
90006db4:	d106      	bne.n	90006dc4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
90006db6:	f107 030c 	add.w	r3, r7, #12
90006dba:	4618      	mov	r0, r3
90006dbc:	f000 fede 	bl	90007b7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
90006dc0:	2301      	movs	r3, #1
90006dc2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
90006dc4:	f001 fbb6 	bl	90008534 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
90006dc8:	f000 fc6c 	bl	900076a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
90006dcc:	f001 fb82 	bl	900084d4 <vPortEnterCritical>
90006dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90006dd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
90006dd6:	b25b      	sxtb	r3, r3
90006dd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
90006ddc:	d103      	bne.n	90006de6 <xQueueSemaphoreTake+0x13a>
90006dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90006de0:	2200      	movs	r2, #0
90006de2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
90006de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90006de8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
90006dec:	b25b      	sxtb	r3, r3
90006dee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
90006df2:	d103      	bne.n	90006dfc <xQueueSemaphoreTake+0x150>
90006df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90006df6:	2200      	movs	r2, #0
90006df8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
90006dfc:	f001 fb9a 	bl	90008534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
90006e00:	463a      	mov	r2, r7
90006e02:	f107 030c 	add.w	r3, r7, #12
90006e06:	4611      	mov	r1, r2
90006e08:	4618      	mov	r0, r3
90006e0a:	f000 fecd 	bl	90007ba8 <xTaskCheckForTimeOut>
90006e0e:	4603      	mov	r3, r0
90006e10:	2b00      	cmp	r3, #0
90006e12:	d132      	bne.n	90006e7a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
90006e14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
90006e16:	f000 f9cf 	bl	900071b8 <prvIsQueueEmpty>
90006e1a:	4603      	mov	r3, r0
90006e1c:	2b00      	cmp	r3, #0
90006e1e:	d026      	beq.n	90006e6e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
90006e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90006e22:	681b      	ldr	r3, [r3, #0]
90006e24:	2b00      	cmp	r3, #0
90006e26:	d109      	bne.n	90006e3c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
90006e28:	f001 fb54 	bl	900084d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
90006e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90006e2e:	689b      	ldr	r3, [r3, #8]
90006e30:	4618      	mov	r0, r3
90006e32:	f001 f81f 	bl	90007e74 <xTaskPriorityInherit>
90006e36:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
90006e38:	f001 fb7c 	bl	90008534 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
90006e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90006e3e:	3324      	adds	r3, #36	; 0x24
90006e40:	683a      	ldr	r2, [r7, #0]
90006e42:	4611      	mov	r1, r2
90006e44:	4618      	mov	r0, r3
90006e46:	f000 fe13 	bl	90007a70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
90006e4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
90006e4c:	f000 f962 	bl	90007114 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
90006e50:	f000 fc36 	bl	900076c0 <xTaskResumeAll>
90006e54:	4603      	mov	r3, r0
90006e56:	2b00      	cmp	r3, #0
90006e58:	f47f af68 	bne.w	90006d2c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
90006e5c:	4b18      	ldr	r3, [pc, #96]	; (90006ec0 <xQueueSemaphoreTake+0x214>)
90006e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90006e62:	601a      	str	r2, [r3, #0]
90006e64:	f3bf 8f4f 	dsb	sy
90006e68:	f3bf 8f6f 	isb	sy
90006e6c:	e75e      	b.n	90006d2c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
90006e6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
90006e70:	f000 f950 	bl	90007114 <prvUnlockQueue>
				( void ) xTaskResumeAll();
90006e74:	f000 fc24 	bl	900076c0 <xTaskResumeAll>
90006e78:	e758      	b.n	90006d2c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
90006e7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
90006e7c:	f000 f94a 	bl	90007114 <prvUnlockQueue>
			( void ) xTaskResumeAll();
90006e80:	f000 fc1e 	bl	900076c0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
90006e84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
90006e86:	f000 f997 	bl	900071b8 <prvIsQueueEmpty>
90006e8a:	4603      	mov	r3, r0
90006e8c:	2b00      	cmp	r3, #0
90006e8e:	f43f af4d 	beq.w	90006d2c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
90006e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006e94:	2b00      	cmp	r3, #0
90006e96:	d00d      	beq.n	90006eb4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
90006e98:	f001 fb1c 	bl	900084d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
90006e9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
90006e9e:	f000 f891 	bl	90006fc4 <prvGetDisinheritPriorityAfterTimeout>
90006ea2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
90006ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90006ea6:	689b      	ldr	r3, [r3, #8]
90006ea8:	6a79      	ldr	r1, [r7, #36]	; 0x24
90006eaa:	4618      	mov	r0, r3
90006eac:	f001 f8de 	bl	9000806c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
90006eb0:	f001 fb40 	bl	90008534 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
90006eb4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
90006eb6:	4618      	mov	r0, r3
90006eb8:	3738      	adds	r7, #56	; 0x38
90006eba:	46bd      	mov	sp, r7
90006ebc:	bd80      	pop	{r7, pc}
90006ebe:	bf00      	nop
90006ec0:	e000ed04 	.word	0xe000ed04

90006ec4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
90006ec4:	b580      	push	{r7, lr}
90006ec6:	b08e      	sub	sp, #56	; 0x38
90006ec8:	af00      	add	r7, sp, #0
90006eca:	60f8      	str	r0, [r7, #12]
90006ecc:	60b9      	str	r1, [r7, #8]
90006ece:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
90006ed0:	68fb      	ldr	r3, [r7, #12]
90006ed2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
90006ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006ed6:	2b00      	cmp	r3, #0
90006ed8:	d10a      	bne.n	90006ef0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
90006eda:	f04f 0350 	mov.w	r3, #80	; 0x50
90006ede:	f383 8811 	msr	BASEPRI, r3
90006ee2:	f3bf 8f6f 	isb	sy
90006ee6:	f3bf 8f4f 	dsb	sy
90006eea:	623b      	str	r3, [r7, #32]
}
90006eec:	bf00      	nop
90006eee:	e7fe      	b.n	90006eee <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
90006ef0:	68bb      	ldr	r3, [r7, #8]
90006ef2:	2b00      	cmp	r3, #0
90006ef4:	d103      	bne.n	90006efe <xQueueReceiveFromISR+0x3a>
90006ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90006efa:	2b00      	cmp	r3, #0
90006efc:	d101      	bne.n	90006f02 <xQueueReceiveFromISR+0x3e>
90006efe:	2301      	movs	r3, #1
90006f00:	e000      	b.n	90006f04 <xQueueReceiveFromISR+0x40>
90006f02:	2300      	movs	r3, #0
90006f04:	2b00      	cmp	r3, #0
90006f06:	d10a      	bne.n	90006f1e <xQueueReceiveFromISR+0x5a>
	__asm volatile
90006f08:	f04f 0350 	mov.w	r3, #80	; 0x50
90006f0c:	f383 8811 	msr	BASEPRI, r3
90006f10:	f3bf 8f6f 	isb	sy
90006f14:	f3bf 8f4f 	dsb	sy
90006f18:	61fb      	str	r3, [r7, #28]
}
90006f1a:	bf00      	nop
90006f1c:	e7fe      	b.n	90006f1c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
90006f1e:	f001 fbbb 	bl	90008698 <vPortValidateInterruptPriority>
	__asm volatile
90006f22:	f3ef 8211 	mrs	r2, BASEPRI
90006f26:	f04f 0350 	mov.w	r3, #80	; 0x50
90006f2a:	f383 8811 	msr	BASEPRI, r3
90006f2e:	f3bf 8f6f 	isb	sy
90006f32:	f3bf 8f4f 	dsb	sy
90006f36:	61ba      	str	r2, [r7, #24]
90006f38:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
90006f3a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
90006f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
90006f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90006f42:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
90006f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
90006f46:	2b00      	cmp	r3, #0
90006f48:	d02f      	beq.n	90006faa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
90006f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006f4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
90006f50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
90006f54:	68b9      	ldr	r1, [r7, #8]
90006f56:	6b38      	ldr	r0, [r7, #48]	; 0x30
90006f58:	f000 f8b6 	bl	900070c8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
90006f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
90006f5e:	1e5a      	subs	r2, r3, #1
90006f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006f62:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
90006f64:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
90006f68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
90006f6c:	d112      	bne.n	90006f94 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90006f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006f70:	691b      	ldr	r3, [r3, #16]
90006f72:	2b00      	cmp	r3, #0
90006f74:	d016      	beq.n	90006fa4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90006f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006f78:	3310      	adds	r3, #16
90006f7a:	4618      	mov	r0, r3
90006f7c:	f000 fd9c 	bl	90007ab8 <xTaskRemoveFromEventList>
90006f80:	4603      	mov	r3, r0
90006f82:	2b00      	cmp	r3, #0
90006f84:	d00e      	beq.n	90006fa4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
90006f86:	687b      	ldr	r3, [r7, #4]
90006f88:	2b00      	cmp	r3, #0
90006f8a:	d00b      	beq.n	90006fa4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
90006f8c:	687b      	ldr	r3, [r7, #4]
90006f8e:	2201      	movs	r2, #1
90006f90:	601a      	str	r2, [r3, #0]
90006f92:	e007      	b.n	90006fa4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
90006f94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
90006f98:	3301      	adds	r3, #1
90006f9a:	b2db      	uxtb	r3, r3
90006f9c:	b25a      	sxtb	r2, r3
90006f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90006fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
90006fa4:	2301      	movs	r3, #1
90006fa6:	637b      	str	r3, [r7, #52]	; 0x34
90006fa8:	e001      	b.n	90006fae <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
90006faa:	2300      	movs	r3, #0
90006fac:	637b      	str	r3, [r7, #52]	; 0x34
90006fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90006fb0:	613b      	str	r3, [r7, #16]
	__asm volatile
90006fb2:	693b      	ldr	r3, [r7, #16]
90006fb4:	f383 8811 	msr	BASEPRI, r3
}
90006fb8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
90006fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
90006fbc:	4618      	mov	r0, r3
90006fbe:	3738      	adds	r7, #56	; 0x38
90006fc0:	46bd      	mov	sp, r7
90006fc2:	bd80      	pop	{r7, pc}

90006fc4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
90006fc4:	b480      	push	{r7}
90006fc6:	b085      	sub	sp, #20
90006fc8:	af00      	add	r7, sp, #0
90006fca:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
90006fcc:	687b      	ldr	r3, [r7, #4]
90006fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90006fd0:	2b00      	cmp	r3, #0
90006fd2:	d006      	beq.n	90006fe2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
90006fd4:	687b      	ldr	r3, [r7, #4]
90006fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90006fd8:	681b      	ldr	r3, [r3, #0]
90006fda:	f1c3 0307 	rsb	r3, r3, #7
90006fde:	60fb      	str	r3, [r7, #12]
90006fe0:	e001      	b.n	90006fe6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
90006fe2:	2300      	movs	r3, #0
90006fe4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
90006fe6:	68fb      	ldr	r3, [r7, #12]
	}
90006fe8:	4618      	mov	r0, r3
90006fea:	3714      	adds	r7, #20
90006fec:	46bd      	mov	sp, r7
90006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
90006ff2:	4770      	bx	lr

90006ff4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
90006ff4:	b580      	push	{r7, lr}
90006ff6:	b086      	sub	sp, #24
90006ff8:	af00      	add	r7, sp, #0
90006ffa:	60f8      	str	r0, [r7, #12]
90006ffc:	60b9      	str	r1, [r7, #8]
90006ffe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
90007000:	2300      	movs	r3, #0
90007002:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
90007004:	68fb      	ldr	r3, [r7, #12]
90007006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90007008:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
9000700a:	68fb      	ldr	r3, [r7, #12]
9000700c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000700e:	2b00      	cmp	r3, #0
90007010:	d10d      	bne.n	9000702e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
90007012:	68fb      	ldr	r3, [r7, #12]
90007014:	681b      	ldr	r3, [r3, #0]
90007016:	2b00      	cmp	r3, #0
90007018:	d14d      	bne.n	900070b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
9000701a:	68fb      	ldr	r3, [r7, #12]
9000701c:	689b      	ldr	r3, [r3, #8]
9000701e:	4618      	mov	r0, r3
90007020:	f000 ff9e 	bl	90007f60 <xTaskPriorityDisinherit>
90007024:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
90007026:	68fb      	ldr	r3, [r7, #12]
90007028:	2200      	movs	r2, #0
9000702a:	609a      	str	r2, [r3, #8]
9000702c:	e043      	b.n	900070b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
9000702e:	687b      	ldr	r3, [r7, #4]
90007030:	2b00      	cmp	r3, #0
90007032:	d119      	bne.n	90007068 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
90007034:	68fb      	ldr	r3, [r7, #12]
90007036:	6858      	ldr	r0, [r3, #4]
90007038:	68fb      	ldr	r3, [r7, #12]
9000703a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000703c:	461a      	mov	r2, r3
9000703e:	68b9      	ldr	r1, [r7, #8]
90007040:	f00e fd13 	bl	90015a6a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
90007044:	68fb      	ldr	r3, [r7, #12]
90007046:	685a      	ldr	r2, [r3, #4]
90007048:	68fb      	ldr	r3, [r7, #12]
9000704a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000704c:	441a      	add	r2, r3
9000704e:	68fb      	ldr	r3, [r7, #12]
90007050:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
90007052:	68fb      	ldr	r3, [r7, #12]
90007054:	685a      	ldr	r2, [r3, #4]
90007056:	68fb      	ldr	r3, [r7, #12]
90007058:	689b      	ldr	r3, [r3, #8]
9000705a:	429a      	cmp	r2, r3
9000705c:	d32b      	bcc.n	900070b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
9000705e:	68fb      	ldr	r3, [r7, #12]
90007060:	681a      	ldr	r2, [r3, #0]
90007062:	68fb      	ldr	r3, [r7, #12]
90007064:	605a      	str	r2, [r3, #4]
90007066:	e026      	b.n	900070b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
90007068:	68fb      	ldr	r3, [r7, #12]
9000706a:	68d8      	ldr	r0, [r3, #12]
9000706c:	68fb      	ldr	r3, [r7, #12]
9000706e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90007070:	461a      	mov	r2, r3
90007072:	68b9      	ldr	r1, [r7, #8]
90007074:	f00e fcf9 	bl	90015a6a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
90007078:	68fb      	ldr	r3, [r7, #12]
9000707a:	68da      	ldr	r2, [r3, #12]
9000707c:	68fb      	ldr	r3, [r7, #12]
9000707e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90007080:	425b      	negs	r3, r3
90007082:	441a      	add	r2, r3
90007084:	68fb      	ldr	r3, [r7, #12]
90007086:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
90007088:	68fb      	ldr	r3, [r7, #12]
9000708a:	68da      	ldr	r2, [r3, #12]
9000708c:	68fb      	ldr	r3, [r7, #12]
9000708e:	681b      	ldr	r3, [r3, #0]
90007090:	429a      	cmp	r2, r3
90007092:	d207      	bcs.n	900070a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
90007094:	68fb      	ldr	r3, [r7, #12]
90007096:	689a      	ldr	r2, [r3, #8]
90007098:	68fb      	ldr	r3, [r7, #12]
9000709a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000709c:	425b      	negs	r3, r3
9000709e:	441a      	add	r2, r3
900070a0:	68fb      	ldr	r3, [r7, #12]
900070a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
900070a4:	687b      	ldr	r3, [r7, #4]
900070a6:	2b02      	cmp	r3, #2
900070a8:	d105      	bne.n	900070b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
900070aa:	693b      	ldr	r3, [r7, #16]
900070ac:	2b00      	cmp	r3, #0
900070ae:	d002      	beq.n	900070b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
900070b0:	693b      	ldr	r3, [r7, #16]
900070b2:	3b01      	subs	r3, #1
900070b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
900070b6:	693b      	ldr	r3, [r7, #16]
900070b8:	1c5a      	adds	r2, r3, #1
900070ba:	68fb      	ldr	r3, [r7, #12]
900070bc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
900070be:	697b      	ldr	r3, [r7, #20]
}
900070c0:	4618      	mov	r0, r3
900070c2:	3718      	adds	r7, #24
900070c4:	46bd      	mov	sp, r7
900070c6:	bd80      	pop	{r7, pc}

900070c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
900070c8:	b580      	push	{r7, lr}
900070ca:	b082      	sub	sp, #8
900070cc:	af00      	add	r7, sp, #0
900070ce:	6078      	str	r0, [r7, #4]
900070d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
900070d2:	687b      	ldr	r3, [r7, #4]
900070d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900070d6:	2b00      	cmp	r3, #0
900070d8:	d018      	beq.n	9000710c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
900070da:	687b      	ldr	r3, [r7, #4]
900070dc:	68da      	ldr	r2, [r3, #12]
900070de:	687b      	ldr	r3, [r7, #4]
900070e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900070e2:	441a      	add	r2, r3
900070e4:	687b      	ldr	r3, [r7, #4]
900070e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
900070e8:	687b      	ldr	r3, [r7, #4]
900070ea:	68da      	ldr	r2, [r3, #12]
900070ec:	687b      	ldr	r3, [r7, #4]
900070ee:	689b      	ldr	r3, [r3, #8]
900070f0:	429a      	cmp	r2, r3
900070f2:	d303      	bcc.n	900070fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
900070f4:	687b      	ldr	r3, [r7, #4]
900070f6:	681a      	ldr	r2, [r3, #0]
900070f8:	687b      	ldr	r3, [r7, #4]
900070fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
900070fc:	687b      	ldr	r3, [r7, #4]
900070fe:	68d9      	ldr	r1, [r3, #12]
90007100:	687b      	ldr	r3, [r7, #4]
90007102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90007104:	461a      	mov	r2, r3
90007106:	6838      	ldr	r0, [r7, #0]
90007108:	f00e fcaf 	bl	90015a6a <memcpy>
	}
}
9000710c:	bf00      	nop
9000710e:	3708      	adds	r7, #8
90007110:	46bd      	mov	sp, r7
90007112:	bd80      	pop	{r7, pc}

90007114 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
90007114:	b580      	push	{r7, lr}
90007116:	b084      	sub	sp, #16
90007118:	af00      	add	r7, sp, #0
9000711a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
9000711c:	f001 f9da 	bl	900084d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
90007120:	687b      	ldr	r3, [r7, #4]
90007122:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
90007126:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
90007128:	e011      	b.n	9000714e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000712a:	687b      	ldr	r3, [r7, #4]
9000712c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000712e:	2b00      	cmp	r3, #0
90007130:	d012      	beq.n	90007158 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90007132:	687b      	ldr	r3, [r7, #4]
90007134:	3324      	adds	r3, #36	; 0x24
90007136:	4618      	mov	r0, r3
90007138:	f000 fcbe 	bl	90007ab8 <xTaskRemoveFromEventList>
9000713c:	4603      	mov	r3, r0
9000713e:	2b00      	cmp	r3, #0
90007140:	d001      	beq.n	90007146 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
90007142:	f000 fd93 	bl	90007c6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
90007146:	7bfb      	ldrb	r3, [r7, #15]
90007148:	3b01      	subs	r3, #1
9000714a:	b2db      	uxtb	r3, r3
9000714c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000714e:	f997 300f 	ldrsb.w	r3, [r7, #15]
90007152:	2b00      	cmp	r3, #0
90007154:	dce9      	bgt.n	9000712a <prvUnlockQueue+0x16>
90007156:	e000      	b.n	9000715a <prvUnlockQueue+0x46>
					break;
90007158:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
9000715a:	687b      	ldr	r3, [r7, #4]
9000715c:	22ff      	movs	r2, #255	; 0xff
9000715e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
90007162:	f001 f9e7 	bl	90008534 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
90007166:	f001 f9b5 	bl	900084d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
9000716a:	687b      	ldr	r3, [r7, #4]
9000716c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
90007170:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
90007172:	e011      	b.n	90007198 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90007174:	687b      	ldr	r3, [r7, #4]
90007176:	691b      	ldr	r3, [r3, #16]
90007178:	2b00      	cmp	r3, #0
9000717a:	d012      	beq.n	900071a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000717c:	687b      	ldr	r3, [r7, #4]
9000717e:	3310      	adds	r3, #16
90007180:	4618      	mov	r0, r3
90007182:	f000 fc99 	bl	90007ab8 <xTaskRemoveFromEventList>
90007186:	4603      	mov	r3, r0
90007188:	2b00      	cmp	r3, #0
9000718a:	d001      	beq.n	90007190 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
9000718c:	f000 fd6e 	bl	90007c6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
90007190:	7bbb      	ldrb	r3, [r7, #14]
90007192:	3b01      	subs	r3, #1
90007194:	b2db      	uxtb	r3, r3
90007196:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
90007198:	f997 300e 	ldrsb.w	r3, [r7, #14]
9000719c:	2b00      	cmp	r3, #0
9000719e:	dce9      	bgt.n	90007174 <prvUnlockQueue+0x60>
900071a0:	e000      	b.n	900071a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
900071a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
900071a4:	687b      	ldr	r3, [r7, #4]
900071a6:	22ff      	movs	r2, #255	; 0xff
900071a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
900071ac:	f001 f9c2 	bl	90008534 <vPortExitCritical>
}
900071b0:	bf00      	nop
900071b2:	3710      	adds	r7, #16
900071b4:	46bd      	mov	sp, r7
900071b6:	bd80      	pop	{r7, pc}

900071b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
900071b8:	b580      	push	{r7, lr}
900071ba:	b084      	sub	sp, #16
900071bc:	af00      	add	r7, sp, #0
900071be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
900071c0:	f001 f988 	bl	900084d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
900071c4:	687b      	ldr	r3, [r7, #4]
900071c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900071c8:	2b00      	cmp	r3, #0
900071ca:	d102      	bne.n	900071d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
900071cc:	2301      	movs	r3, #1
900071ce:	60fb      	str	r3, [r7, #12]
900071d0:	e001      	b.n	900071d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
900071d2:	2300      	movs	r3, #0
900071d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
900071d6:	f001 f9ad 	bl	90008534 <vPortExitCritical>

	return xReturn;
900071da:	68fb      	ldr	r3, [r7, #12]
}
900071dc:	4618      	mov	r0, r3
900071de:	3710      	adds	r7, #16
900071e0:	46bd      	mov	sp, r7
900071e2:	bd80      	pop	{r7, pc}

900071e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
900071e4:	b580      	push	{r7, lr}
900071e6:	b084      	sub	sp, #16
900071e8:	af00      	add	r7, sp, #0
900071ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
900071ec:	f001 f972 	bl	900084d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
900071f0:	687b      	ldr	r3, [r7, #4]
900071f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
900071f4:	687b      	ldr	r3, [r7, #4]
900071f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900071f8:	429a      	cmp	r2, r3
900071fa:	d102      	bne.n	90007202 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
900071fc:	2301      	movs	r3, #1
900071fe:	60fb      	str	r3, [r7, #12]
90007200:	e001      	b.n	90007206 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
90007202:	2300      	movs	r3, #0
90007204:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
90007206:	f001 f995 	bl	90008534 <vPortExitCritical>

	return xReturn;
9000720a:	68fb      	ldr	r3, [r7, #12]
}
9000720c:	4618      	mov	r0, r3
9000720e:	3710      	adds	r7, #16
90007210:	46bd      	mov	sp, r7
90007212:	bd80      	pop	{r7, pc}

90007214 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
90007214:	b580      	push	{r7, lr}
90007216:	b08e      	sub	sp, #56	; 0x38
90007218:	af04      	add	r7, sp, #16
9000721a:	60f8      	str	r0, [r7, #12]
9000721c:	60b9      	str	r1, [r7, #8]
9000721e:	607a      	str	r2, [r7, #4]
90007220:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
90007222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90007224:	2b00      	cmp	r3, #0
90007226:	d10a      	bne.n	9000723e <xTaskCreateStatic+0x2a>
	__asm volatile
90007228:	f04f 0350 	mov.w	r3, #80	; 0x50
9000722c:	f383 8811 	msr	BASEPRI, r3
90007230:	f3bf 8f6f 	isb	sy
90007234:	f3bf 8f4f 	dsb	sy
90007238:	623b      	str	r3, [r7, #32]
}
9000723a:	bf00      	nop
9000723c:	e7fe      	b.n	9000723c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
9000723e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90007240:	2b00      	cmp	r3, #0
90007242:	d10a      	bne.n	9000725a <xTaskCreateStatic+0x46>
	__asm volatile
90007244:	f04f 0350 	mov.w	r3, #80	; 0x50
90007248:	f383 8811 	msr	BASEPRI, r3
9000724c:	f3bf 8f6f 	isb	sy
90007250:	f3bf 8f4f 	dsb	sy
90007254:	61fb      	str	r3, [r7, #28]
}
90007256:	bf00      	nop
90007258:	e7fe      	b.n	90007258 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
9000725a:	23b4      	movs	r3, #180	; 0xb4
9000725c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
9000725e:	693b      	ldr	r3, [r7, #16]
90007260:	2bb4      	cmp	r3, #180	; 0xb4
90007262:	d00a      	beq.n	9000727a <xTaskCreateStatic+0x66>
	__asm volatile
90007264:	f04f 0350 	mov.w	r3, #80	; 0x50
90007268:	f383 8811 	msr	BASEPRI, r3
9000726c:	f3bf 8f6f 	isb	sy
90007270:	f3bf 8f4f 	dsb	sy
90007274:	61bb      	str	r3, [r7, #24]
}
90007276:	bf00      	nop
90007278:	e7fe      	b.n	90007278 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
9000727a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
9000727c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000727e:	2b00      	cmp	r3, #0
90007280:	d01e      	beq.n	900072c0 <xTaskCreateStatic+0xac>
90007282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90007284:	2b00      	cmp	r3, #0
90007286:	d01b      	beq.n	900072c0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
90007288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000728a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
9000728c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000728e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
90007290:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
90007292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90007294:	2202      	movs	r2, #2
90007296:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
9000729a:	2300      	movs	r3, #0
9000729c:	9303      	str	r3, [sp, #12]
9000729e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900072a0:	9302      	str	r3, [sp, #8]
900072a2:	f107 0314 	add.w	r3, r7, #20
900072a6:	9301      	str	r3, [sp, #4]
900072a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900072aa:	9300      	str	r3, [sp, #0]
900072ac:	683b      	ldr	r3, [r7, #0]
900072ae:	687a      	ldr	r2, [r7, #4]
900072b0:	68b9      	ldr	r1, [r7, #8]
900072b2:	68f8      	ldr	r0, [r7, #12]
900072b4:	f000 f850 	bl	90007358 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
900072b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
900072ba:	f000 f8eb 	bl	90007494 <prvAddNewTaskToReadyList>
900072be:	e001      	b.n	900072c4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
900072c0:	2300      	movs	r3, #0
900072c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
900072c4:	697b      	ldr	r3, [r7, #20]
	}
900072c6:	4618      	mov	r0, r3
900072c8:	3728      	adds	r7, #40	; 0x28
900072ca:	46bd      	mov	sp, r7
900072cc:	bd80      	pop	{r7, pc}

900072ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
900072ce:	b580      	push	{r7, lr}
900072d0:	b08c      	sub	sp, #48	; 0x30
900072d2:	af04      	add	r7, sp, #16
900072d4:	60f8      	str	r0, [r7, #12]
900072d6:	60b9      	str	r1, [r7, #8]
900072d8:	603b      	str	r3, [r7, #0]
900072da:	4613      	mov	r3, r2
900072dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
900072de:	88fb      	ldrh	r3, [r7, #6]
900072e0:	009b      	lsls	r3, r3, #2
900072e2:	4618      	mov	r0, r3
900072e4:	f001 fa18 	bl	90008718 <pvPortMalloc>
900072e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
900072ea:	697b      	ldr	r3, [r7, #20]
900072ec:	2b00      	cmp	r3, #0
900072ee:	d00e      	beq.n	9000730e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
900072f0:	20b4      	movs	r0, #180	; 0xb4
900072f2:	f001 fa11 	bl	90008718 <pvPortMalloc>
900072f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
900072f8:	69fb      	ldr	r3, [r7, #28]
900072fa:	2b00      	cmp	r3, #0
900072fc:	d003      	beq.n	90007306 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
900072fe:	69fb      	ldr	r3, [r7, #28]
90007300:	697a      	ldr	r2, [r7, #20]
90007302:	631a      	str	r2, [r3, #48]	; 0x30
90007304:	e005      	b.n	90007312 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
90007306:	6978      	ldr	r0, [r7, #20]
90007308:	f001 fad2 	bl	900088b0 <vPortFree>
9000730c:	e001      	b.n	90007312 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
9000730e:	2300      	movs	r3, #0
90007310:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
90007312:	69fb      	ldr	r3, [r7, #28]
90007314:	2b00      	cmp	r3, #0
90007316:	d017      	beq.n	90007348 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
90007318:	69fb      	ldr	r3, [r7, #28]
9000731a:	2200      	movs	r2, #0
9000731c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
90007320:	88fa      	ldrh	r2, [r7, #6]
90007322:	2300      	movs	r3, #0
90007324:	9303      	str	r3, [sp, #12]
90007326:	69fb      	ldr	r3, [r7, #28]
90007328:	9302      	str	r3, [sp, #8]
9000732a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000732c:	9301      	str	r3, [sp, #4]
9000732e:	6abb      	ldr	r3, [r7, #40]	; 0x28
90007330:	9300      	str	r3, [sp, #0]
90007332:	683b      	ldr	r3, [r7, #0]
90007334:	68b9      	ldr	r1, [r7, #8]
90007336:	68f8      	ldr	r0, [r7, #12]
90007338:	f000 f80e 	bl	90007358 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
9000733c:	69f8      	ldr	r0, [r7, #28]
9000733e:	f000 f8a9 	bl	90007494 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
90007342:	2301      	movs	r3, #1
90007344:	61bb      	str	r3, [r7, #24]
90007346:	e002      	b.n	9000734e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
90007348:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000734c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
9000734e:	69bb      	ldr	r3, [r7, #24]
	}
90007350:	4618      	mov	r0, r3
90007352:	3720      	adds	r7, #32
90007354:	46bd      	mov	sp, r7
90007356:	bd80      	pop	{r7, pc}

90007358 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
90007358:	b580      	push	{r7, lr}
9000735a:	b088      	sub	sp, #32
9000735c:	af00      	add	r7, sp, #0
9000735e:	60f8      	str	r0, [r7, #12]
90007360:	60b9      	str	r1, [r7, #8]
90007362:	607a      	str	r2, [r7, #4]
90007364:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
90007366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90007368:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000736a:	6879      	ldr	r1, [r7, #4]
9000736c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
90007370:	440b      	add	r3, r1
90007372:	009b      	lsls	r3, r3, #2
90007374:	4413      	add	r3, r2
90007376:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
90007378:	69bb      	ldr	r3, [r7, #24]
9000737a:	f023 0307 	bic.w	r3, r3, #7
9000737e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
90007380:	69bb      	ldr	r3, [r7, #24]
90007382:	f003 0307 	and.w	r3, r3, #7
90007386:	2b00      	cmp	r3, #0
90007388:	d00a      	beq.n	900073a0 <prvInitialiseNewTask+0x48>
	__asm volatile
9000738a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000738e:	f383 8811 	msr	BASEPRI, r3
90007392:	f3bf 8f6f 	isb	sy
90007396:	f3bf 8f4f 	dsb	sy
9000739a:	617b      	str	r3, [r7, #20]
}
9000739c:	bf00      	nop
9000739e:	e7fe      	b.n	9000739e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
900073a0:	68bb      	ldr	r3, [r7, #8]
900073a2:	2b00      	cmp	r3, #0
900073a4:	d01f      	beq.n	900073e6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
900073a6:	2300      	movs	r3, #0
900073a8:	61fb      	str	r3, [r7, #28]
900073aa:	e012      	b.n	900073d2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
900073ac:	68ba      	ldr	r2, [r7, #8]
900073ae:	69fb      	ldr	r3, [r7, #28]
900073b0:	4413      	add	r3, r2
900073b2:	7819      	ldrb	r1, [r3, #0]
900073b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
900073b6:	69fb      	ldr	r3, [r7, #28]
900073b8:	4413      	add	r3, r2
900073ba:	3334      	adds	r3, #52	; 0x34
900073bc:	460a      	mov	r2, r1
900073be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
900073c0:	68ba      	ldr	r2, [r7, #8]
900073c2:	69fb      	ldr	r3, [r7, #28]
900073c4:	4413      	add	r3, r2
900073c6:	781b      	ldrb	r3, [r3, #0]
900073c8:	2b00      	cmp	r3, #0
900073ca:	d006      	beq.n	900073da <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
900073cc:	69fb      	ldr	r3, [r7, #28]
900073ce:	3301      	adds	r3, #1
900073d0:	61fb      	str	r3, [r7, #28]
900073d2:	69fb      	ldr	r3, [r7, #28]
900073d4:	2b0f      	cmp	r3, #15
900073d6:	d9e9      	bls.n	900073ac <prvInitialiseNewTask+0x54>
900073d8:	e000      	b.n	900073dc <prvInitialiseNewTask+0x84>
			{
				break;
900073da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
900073dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900073de:	2200      	movs	r2, #0
900073e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
900073e4:	e003      	b.n	900073ee <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
900073e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900073e8:	2200      	movs	r2, #0
900073ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
900073ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
900073f0:	2b06      	cmp	r3, #6
900073f2:	d901      	bls.n	900073f8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
900073f4:	2306      	movs	r3, #6
900073f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
900073f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900073fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
900073fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
900073fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90007400:	6aba      	ldr	r2, [r7, #40]	; 0x28
90007402:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
90007404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90007406:	2200      	movs	r2, #0
90007408:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
9000740a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000740c:	3304      	adds	r3, #4
9000740e:	4618      	mov	r0, r3
90007410:	f7fe ff2c 	bl	9000626c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
90007414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90007416:	3318      	adds	r3, #24
90007418:	4618      	mov	r0, r3
9000741a:	f7fe ff27 	bl	9000626c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
9000741e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90007420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
90007422:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90007424:	6abb      	ldr	r3, [r7, #40]	; 0x28
90007426:	f1c3 0207 	rsb	r2, r3, #7
9000742a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000742c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
9000742e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90007430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
90007432:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
90007434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90007436:	2200      	movs	r2, #0
90007438:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
9000743c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000743e:	2200      	movs	r2, #0
90007440:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
90007444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90007446:	334c      	adds	r3, #76	; 0x4c
90007448:	2260      	movs	r2, #96	; 0x60
9000744a:	2100      	movs	r1, #0
9000744c:	4618      	mov	r0, r3
9000744e:	f00e fb34 	bl	90015aba <memset>
90007452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90007454:	4a0c      	ldr	r2, [pc, #48]	; (90007488 <prvInitialiseNewTask+0x130>)
90007456:	651a      	str	r2, [r3, #80]	; 0x50
90007458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000745a:	4a0c      	ldr	r2, [pc, #48]	; (9000748c <prvInitialiseNewTask+0x134>)
9000745c:	655a      	str	r2, [r3, #84]	; 0x54
9000745e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90007460:	4a0b      	ldr	r2, [pc, #44]	; (90007490 <prvInitialiseNewTask+0x138>)
90007462:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
90007464:	683a      	ldr	r2, [r7, #0]
90007466:	68f9      	ldr	r1, [r7, #12]
90007468:	69b8      	ldr	r0, [r7, #24]
9000746a:	f000 ff07 	bl	9000827c <pxPortInitialiseStack>
9000746e:	4602      	mov	r2, r0
90007470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90007472:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
90007474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90007476:	2b00      	cmp	r3, #0
90007478:	d002      	beq.n	90007480 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
9000747a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000747c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
9000747e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
90007480:	bf00      	nop
90007482:	3720      	adds	r7, #32
90007484:	46bd      	mov	sp, r7
90007486:	bd80      	pop	{r7, pc}
90007488:	90021274 	.word	0x90021274
9000748c:	90021294 	.word	0x90021294
90007490:	90021254 	.word	0x90021254

90007494 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
90007494:	b580      	push	{r7, lr}
90007496:	b082      	sub	sp, #8
90007498:	af00      	add	r7, sp, #0
9000749a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
9000749c:	f001 f81a 	bl	900084d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
900074a0:	4b2a      	ldr	r3, [pc, #168]	; (9000754c <prvAddNewTaskToReadyList+0xb8>)
900074a2:	681b      	ldr	r3, [r3, #0]
900074a4:	3301      	adds	r3, #1
900074a6:	4a29      	ldr	r2, [pc, #164]	; (9000754c <prvAddNewTaskToReadyList+0xb8>)
900074a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
900074aa:	4b29      	ldr	r3, [pc, #164]	; (90007550 <prvAddNewTaskToReadyList+0xbc>)
900074ac:	681b      	ldr	r3, [r3, #0]
900074ae:	2b00      	cmp	r3, #0
900074b0:	d109      	bne.n	900074c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
900074b2:	4a27      	ldr	r2, [pc, #156]	; (90007550 <prvAddNewTaskToReadyList+0xbc>)
900074b4:	687b      	ldr	r3, [r7, #4]
900074b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
900074b8:	4b24      	ldr	r3, [pc, #144]	; (9000754c <prvAddNewTaskToReadyList+0xb8>)
900074ba:	681b      	ldr	r3, [r3, #0]
900074bc:	2b01      	cmp	r3, #1
900074be:	d110      	bne.n	900074e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
900074c0:	f000 fbf8 	bl	90007cb4 <prvInitialiseTaskLists>
900074c4:	e00d      	b.n	900074e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
900074c6:	4b23      	ldr	r3, [pc, #140]	; (90007554 <prvAddNewTaskToReadyList+0xc0>)
900074c8:	681b      	ldr	r3, [r3, #0]
900074ca:	2b00      	cmp	r3, #0
900074cc:	d109      	bne.n	900074e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
900074ce:	4b20      	ldr	r3, [pc, #128]	; (90007550 <prvAddNewTaskToReadyList+0xbc>)
900074d0:	681b      	ldr	r3, [r3, #0]
900074d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
900074d4:	687b      	ldr	r3, [r7, #4]
900074d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900074d8:	429a      	cmp	r2, r3
900074da:	d802      	bhi.n	900074e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
900074dc:	4a1c      	ldr	r2, [pc, #112]	; (90007550 <prvAddNewTaskToReadyList+0xbc>)
900074de:	687b      	ldr	r3, [r7, #4]
900074e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
900074e2:	4b1d      	ldr	r3, [pc, #116]	; (90007558 <prvAddNewTaskToReadyList+0xc4>)
900074e4:	681b      	ldr	r3, [r3, #0]
900074e6:	3301      	adds	r3, #1
900074e8:	4a1b      	ldr	r2, [pc, #108]	; (90007558 <prvAddNewTaskToReadyList+0xc4>)
900074ea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
900074ec:	687b      	ldr	r3, [r7, #4]
900074ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900074f0:	2201      	movs	r2, #1
900074f2:	409a      	lsls	r2, r3
900074f4:	4b19      	ldr	r3, [pc, #100]	; (9000755c <prvAddNewTaskToReadyList+0xc8>)
900074f6:	681b      	ldr	r3, [r3, #0]
900074f8:	4313      	orrs	r3, r2
900074fa:	4a18      	ldr	r2, [pc, #96]	; (9000755c <prvAddNewTaskToReadyList+0xc8>)
900074fc:	6013      	str	r3, [r2, #0]
900074fe:	687b      	ldr	r3, [r7, #4]
90007500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90007502:	4613      	mov	r3, r2
90007504:	009b      	lsls	r3, r3, #2
90007506:	4413      	add	r3, r2
90007508:	009b      	lsls	r3, r3, #2
9000750a:	4a15      	ldr	r2, [pc, #84]	; (90007560 <prvAddNewTaskToReadyList+0xcc>)
9000750c:	441a      	add	r2, r3
9000750e:	687b      	ldr	r3, [r7, #4]
90007510:	3304      	adds	r3, #4
90007512:	4619      	mov	r1, r3
90007514:	4610      	mov	r0, r2
90007516:	f7fe feb6 	bl	90006286 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
9000751a:	f001 f80b 	bl	90008534 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
9000751e:	4b0d      	ldr	r3, [pc, #52]	; (90007554 <prvAddNewTaskToReadyList+0xc0>)
90007520:	681b      	ldr	r3, [r3, #0]
90007522:	2b00      	cmp	r3, #0
90007524:	d00e      	beq.n	90007544 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
90007526:	4b0a      	ldr	r3, [pc, #40]	; (90007550 <prvAddNewTaskToReadyList+0xbc>)
90007528:	681b      	ldr	r3, [r3, #0]
9000752a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000752c:	687b      	ldr	r3, [r7, #4]
9000752e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007530:	429a      	cmp	r2, r3
90007532:	d207      	bcs.n	90007544 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
90007534:	4b0b      	ldr	r3, [pc, #44]	; (90007564 <prvAddNewTaskToReadyList+0xd0>)
90007536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000753a:	601a      	str	r2, [r3, #0]
9000753c:	f3bf 8f4f 	dsb	sy
90007540:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
90007544:	bf00      	nop
90007546:	3708      	adds	r7, #8
90007548:	46bd      	mov	sp, r7
9000754a:	bd80      	pop	{r7, pc}
9000754c:	2400f9bc 	.word	0x2400f9bc
90007550:	2400f8bc 	.word	0x2400f8bc
90007554:	2400f9c8 	.word	0x2400f9c8
90007558:	2400f9d8 	.word	0x2400f9d8
9000755c:	2400f9c4 	.word	0x2400f9c4
90007560:	2400f8c0 	.word	0x2400f8c0
90007564:	e000ed04 	.word	0xe000ed04

90007568 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
90007568:	b580      	push	{r7, lr}
9000756a:	b084      	sub	sp, #16
9000756c:	af00      	add	r7, sp, #0
9000756e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
90007570:	2300      	movs	r3, #0
90007572:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
90007574:	687b      	ldr	r3, [r7, #4]
90007576:	2b00      	cmp	r3, #0
90007578:	d017      	beq.n	900075aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
9000757a:	4b13      	ldr	r3, [pc, #76]	; (900075c8 <vTaskDelay+0x60>)
9000757c:	681b      	ldr	r3, [r3, #0]
9000757e:	2b00      	cmp	r3, #0
90007580:	d00a      	beq.n	90007598 <vTaskDelay+0x30>
	__asm volatile
90007582:	f04f 0350 	mov.w	r3, #80	; 0x50
90007586:	f383 8811 	msr	BASEPRI, r3
9000758a:	f3bf 8f6f 	isb	sy
9000758e:	f3bf 8f4f 	dsb	sy
90007592:	60bb      	str	r3, [r7, #8]
}
90007594:	bf00      	nop
90007596:	e7fe      	b.n	90007596 <vTaskDelay+0x2e>
			vTaskSuspendAll();
90007598:	f000 f884 	bl	900076a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
9000759c:	2100      	movs	r1, #0
9000759e:	6878      	ldr	r0, [r7, #4]
900075a0:	f000 fe06 	bl	900081b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
900075a4:	f000 f88c 	bl	900076c0 <xTaskResumeAll>
900075a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
900075aa:	68fb      	ldr	r3, [r7, #12]
900075ac:	2b00      	cmp	r3, #0
900075ae:	d107      	bne.n	900075c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
900075b0:	4b06      	ldr	r3, [pc, #24]	; (900075cc <vTaskDelay+0x64>)
900075b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
900075b6:	601a      	str	r2, [r3, #0]
900075b8:	f3bf 8f4f 	dsb	sy
900075bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
900075c0:	bf00      	nop
900075c2:	3710      	adds	r7, #16
900075c4:	46bd      	mov	sp, r7
900075c6:	bd80      	pop	{r7, pc}
900075c8:	2400f9e4 	.word	0x2400f9e4
900075cc:	e000ed04 	.word	0xe000ed04

900075d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
900075d0:	b580      	push	{r7, lr}
900075d2:	b08a      	sub	sp, #40	; 0x28
900075d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
900075d6:	2300      	movs	r3, #0
900075d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
900075da:	2300      	movs	r3, #0
900075dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
900075de:	463a      	mov	r2, r7
900075e0:	1d39      	adds	r1, r7, #4
900075e2:	f107 0308 	add.w	r3, r7, #8
900075e6:	4618      	mov	r0, r3
900075e8:	f7f8 fee2 	bl	900003b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
900075ec:	6839      	ldr	r1, [r7, #0]
900075ee:	687b      	ldr	r3, [r7, #4]
900075f0:	68ba      	ldr	r2, [r7, #8]
900075f2:	9202      	str	r2, [sp, #8]
900075f4:	9301      	str	r3, [sp, #4]
900075f6:	2300      	movs	r3, #0
900075f8:	9300      	str	r3, [sp, #0]
900075fa:	2300      	movs	r3, #0
900075fc:	460a      	mov	r2, r1
900075fe:	4921      	ldr	r1, [pc, #132]	; (90007684 <vTaskStartScheduler+0xb4>)
90007600:	4821      	ldr	r0, [pc, #132]	; (90007688 <vTaskStartScheduler+0xb8>)
90007602:	f7ff fe07 	bl	90007214 <xTaskCreateStatic>
90007606:	4603      	mov	r3, r0
90007608:	4a20      	ldr	r2, [pc, #128]	; (9000768c <vTaskStartScheduler+0xbc>)
9000760a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
9000760c:	4b1f      	ldr	r3, [pc, #124]	; (9000768c <vTaskStartScheduler+0xbc>)
9000760e:	681b      	ldr	r3, [r3, #0]
90007610:	2b00      	cmp	r3, #0
90007612:	d002      	beq.n	9000761a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
90007614:	2301      	movs	r3, #1
90007616:	617b      	str	r3, [r7, #20]
90007618:	e001      	b.n	9000761e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
9000761a:	2300      	movs	r3, #0
9000761c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
9000761e:	697b      	ldr	r3, [r7, #20]
90007620:	2b01      	cmp	r3, #1
90007622:	d11b      	bne.n	9000765c <vTaskStartScheduler+0x8c>
	__asm volatile
90007624:	f04f 0350 	mov.w	r3, #80	; 0x50
90007628:	f383 8811 	msr	BASEPRI, r3
9000762c:	f3bf 8f6f 	isb	sy
90007630:	f3bf 8f4f 	dsb	sy
90007634:	613b      	str	r3, [r7, #16]
}
90007636:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
90007638:	4b15      	ldr	r3, [pc, #84]	; (90007690 <vTaskStartScheduler+0xc0>)
9000763a:	681b      	ldr	r3, [r3, #0]
9000763c:	334c      	adds	r3, #76	; 0x4c
9000763e:	4a15      	ldr	r2, [pc, #84]	; (90007694 <vTaskStartScheduler+0xc4>)
90007640:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
90007642:	4b15      	ldr	r3, [pc, #84]	; (90007698 <vTaskStartScheduler+0xc8>)
90007644:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
90007648:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
9000764a:	4b14      	ldr	r3, [pc, #80]	; (9000769c <vTaskStartScheduler+0xcc>)
9000764c:	2201      	movs	r2, #1
9000764e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
90007650:	4b13      	ldr	r3, [pc, #76]	; (900076a0 <vTaskStartScheduler+0xd0>)
90007652:	2200      	movs	r2, #0
90007654:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
90007656:	f000 fe9b 	bl	90008390 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
9000765a:	e00e      	b.n	9000767a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
9000765c:	697b      	ldr	r3, [r7, #20]
9000765e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
90007662:	d10a      	bne.n	9000767a <vTaskStartScheduler+0xaa>
	__asm volatile
90007664:	f04f 0350 	mov.w	r3, #80	; 0x50
90007668:	f383 8811 	msr	BASEPRI, r3
9000766c:	f3bf 8f6f 	isb	sy
90007670:	f3bf 8f4f 	dsb	sy
90007674:	60fb      	str	r3, [r7, #12]
}
90007676:	bf00      	nop
90007678:	e7fe      	b.n	90007678 <vTaskStartScheduler+0xa8>
}
9000767a:	bf00      	nop
9000767c:	3718      	adds	r7, #24
9000767e:	46bd      	mov	sp, r7
90007680:	bd80      	pop	{r7, pc}
90007682:	bf00      	nop
90007684:	90017960 	.word	0x90017960
90007688:	90007c85 	.word	0x90007c85
9000768c:	2400f9e0 	.word	0x2400f9e0
90007690:	2400f8bc 	.word	0x2400f8bc
90007694:	24000530 	.word	0x24000530
90007698:	2400f9dc 	.word	0x2400f9dc
9000769c:	2400f9c8 	.word	0x2400f9c8
900076a0:	2400f9c0 	.word	0x2400f9c0

900076a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
900076a4:	b480      	push	{r7}
900076a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
900076a8:	4b04      	ldr	r3, [pc, #16]	; (900076bc <vTaskSuspendAll+0x18>)
900076aa:	681b      	ldr	r3, [r3, #0]
900076ac:	3301      	adds	r3, #1
900076ae:	4a03      	ldr	r2, [pc, #12]	; (900076bc <vTaskSuspendAll+0x18>)
900076b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
900076b2:	bf00      	nop
900076b4:	46bd      	mov	sp, r7
900076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
900076ba:	4770      	bx	lr
900076bc:	2400f9e4 	.word	0x2400f9e4

900076c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
900076c0:	b580      	push	{r7, lr}
900076c2:	b084      	sub	sp, #16
900076c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
900076c6:	2300      	movs	r3, #0
900076c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
900076ca:	2300      	movs	r3, #0
900076cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
900076ce:	4b41      	ldr	r3, [pc, #260]	; (900077d4 <xTaskResumeAll+0x114>)
900076d0:	681b      	ldr	r3, [r3, #0]
900076d2:	2b00      	cmp	r3, #0
900076d4:	d10a      	bne.n	900076ec <xTaskResumeAll+0x2c>
	__asm volatile
900076d6:	f04f 0350 	mov.w	r3, #80	; 0x50
900076da:	f383 8811 	msr	BASEPRI, r3
900076de:	f3bf 8f6f 	isb	sy
900076e2:	f3bf 8f4f 	dsb	sy
900076e6:	603b      	str	r3, [r7, #0]
}
900076e8:	bf00      	nop
900076ea:	e7fe      	b.n	900076ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
900076ec:	f000 fef2 	bl	900084d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
900076f0:	4b38      	ldr	r3, [pc, #224]	; (900077d4 <xTaskResumeAll+0x114>)
900076f2:	681b      	ldr	r3, [r3, #0]
900076f4:	3b01      	subs	r3, #1
900076f6:	4a37      	ldr	r2, [pc, #220]	; (900077d4 <xTaskResumeAll+0x114>)
900076f8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
900076fa:	4b36      	ldr	r3, [pc, #216]	; (900077d4 <xTaskResumeAll+0x114>)
900076fc:	681b      	ldr	r3, [r3, #0]
900076fe:	2b00      	cmp	r3, #0
90007700:	d161      	bne.n	900077c6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
90007702:	4b35      	ldr	r3, [pc, #212]	; (900077d8 <xTaskResumeAll+0x118>)
90007704:	681b      	ldr	r3, [r3, #0]
90007706:	2b00      	cmp	r3, #0
90007708:	d05d      	beq.n	900077c6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
9000770a:	e02e      	b.n	9000776a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000770c:	4b33      	ldr	r3, [pc, #204]	; (900077dc <xTaskResumeAll+0x11c>)
9000770e:	68db      	ldr	r3, [r3, #12]
90007710:	68db      	ldr	r3, [r3, #12]
90007712:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
90007714:	68fb      	ldr	r3, [r7, #12]
90007716:	3318      	adds	r3, #24
90007718:	4618      	mov	r0, r3
9000771a:	f7fe fe11 	bl	90006340 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000771e:	68fb      	ldr	r3, [r7, #12]
90007720:	3304      	adds	r3, #4
90007722:	4618      	mov	r0, r3
90007724:	f7fe fe0c 	bl	90006340 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
90007728:	68fb      	ldr	r3, [r7, #12]
9000772a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000772c:	2201      	movs	r2, #1
9000772e:	409a      	lsls	r2, r3
90007730:	4b2b      	ldr	r3, [pc, #172]	; (900077e0 <xTaskResumeAll+0x120>)
90007732:	681b      	ldr	r3, [r3, #0]
90007734:	4313      	orrs	r3, r2
90007736:	4a2a      	ldr	r2, [pc, #168]	; (900077e0 <xTaskResumeAll+0x120>)
90007738:	6013      	str	r3, [r2, #0]
9000773a:	68fb      	ldr	r3, [r7, #12]
9000773c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000773e:	4613      	mov	r3, r2
90007740:	009b      	lsls	r3, r3, #2
90007742:	4413      	add	r3, r2
90007744:	009b      	lsls	r3, r3, #2
90007746:	4a27      	ldr	r2, [pc, #156]	; (900077e4 <xTaskResumeAll+0x124>)
90007748:	441a      	add	r2, r3
9000774a:	68fb      	ldr	r3, [r7, #12]
9000774c:	3304      	adds	r3, #4
9000774e:	4619      	mov	r1, r3
90007750:	4610      	mov	r0, r2
90007752:	f7fe fd98 	bl	90006286 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
90007756:	68fb      	ldr	r3, [r7, #12]
90007758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000775a:	4b23      	ldr	r3, [pc, #140]	; (900077e8 <xTaskResumeAll+0x128>)
9000775c:	681b      	ldr	r3, [r3, #0]
9000775e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007760:	429a      	cmp	r2, r3
90007762:	d302      	bcc.n	9000776a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
90007764:	4b21      	ldr	r3, [pc, #132]	; (900077ec <xTaskResumeAll+0x12c>)
90007766:	2201      	movs	r2, #1
90007768:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
9000776a:	4b1c      	ldr	r3, [pc, #112]	; (900077dc <xTaskResumeAll+0x11c>)
9000776c:	681b      	ldr	r3, [r3, #0]
9000776e:	2b00      	cmp	r3, #0
90007770:	d1cc      	bne.n	9000770c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
90007772:	68fb      	ldr	r3, [r7, #12]
90007774:	2b00      	cmp	r3, #0
90007776:	d001      	beq.n	9000777c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
90007778:	f000 fb3e 	bl	90007df8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
9000777c:	4b1c      	ldr	r3, [pc, #112]	; (900077f0 <xTaskResumeAll+0x130>)
9000777e:	681b      	ldr	r3, [r3, #0]
90007780:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
90007782:	687b      	ldr	r3, [r7, #4]
90007784:	2b00      	cmp	r3, #0
90007786:	d010      	beq.n	900077aa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
90007788:	f000 f858 	bl	9000783c <xTaskIncrementTick>
9000778c:	4603      	mov	r3, r0
9000778e:	2b00      	cmp	r3, #0
90007790:	d002      	beq.n	90007798 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
90007792:	4b16      	ldr	r3, [pc, #88]	; (900077ec <xTaskResumeAll+0x12c>)
90007794:	2201      	movs	r2, #1
90007796:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
90007798:	687b      	ldr	r3, [r7, #4]
9000779a:	3b01      	subs	r3, #1
9000779c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
9000779e:	687b      	ldr	r3, [r7, #4]
900077a0:	2b00      	cmp	r3, #0
900077a2:	d1f1      	bne.n	90007788 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
900077a4:	4b12      	ldr	r3, [pc, #72]	; (900077f0 <xTaskResumeAll+0x130>)
900077a6:	2200      	movs	r2, #0
900077a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
900077aa:	4b10      	ldr	r3, [pc, #64]	; (900077ec <xTaskResumeAll+0x12c>)
900077ac:	681b      	ldr	r3, [r3, #0]
900077ae:	2b00      	cmp	r3, #0
900077b0:	d009      	beq.n	900077c6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
900077b2:	2301      	movs	r3, #1
900077b4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
900077b6:	4b0f      	ldr	r3, [pc, #60]	; (900077f4 <xTaskResumeAll+0x134>)
900077b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
900077bc:	601a      	str	r2, [r3, #0]
900077be:	f3bf 8f4f 	dsb	sy
900077c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
900077c6:	f000 feb5 	bl	90008534 <vPortExitCritical>

	return xAlreadyYielded;
900077ca:	68bb      	ldr	r3, [r7, #8]
}
900077cc:	4618      	mov	r0, r3
900077ce:	3710      	adds	r7, #16
900077d0:	46bd      	mov	sp, r7
900077d2:	bd80      	pop	{r7, pc}
900077d4:	2400f9e4 	.word	0x2400f9e4
900077d8:	2400f9bc 	.word	0x2400f9bc
900077dc:	2400f97c 	.word	0x2400f97c
900077e0:	2400f9c4 	.word	0x2400f9c4
900077e4:	2400f8c0 	.word	0x2400f8c0
900077e8:	2400f8bc 	.word	0x2400f8bc
900077ec:	2400f9d0 	.word	0x2400f9d0
900077f0:	2400f9cc 	.word	0x2400f9cc
900077f4:	e000ed04 	.word	0xe000ed04

900077f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
900077f8:	b480      	push	{r7}
900077fa:	b083      	sub	sp, #12
900077fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
900077fe:	4b05      	ldr	r3, [pc, #20]	; (90007814 <xTaskGetTickCount+0x1c>)
90007800:	681b      	ldr	r3, [r3, #0]
90007802:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
90007804:	687b      	ldr	r3, [r7, #4]
}
90007806:	4618      	mov	r0, r3
90007808:	370c      	adds	r7, #12
9000780a:	46bd      	mov	sp, r7
9000780c:	f85d 7b04 	ldr.w	r7, [sp], #4
90007810:	4770      	bx	lr
90007812:	bf00      	nop
90007814:	2400f9c0 	.word	0x2400f9c0

90007818 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
90007818:	b580      	push	{r7, lr}
9000781a:	b082      	sub	sp, #8
9000781c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
9000781e:	f000 ff3b 	bl	90008698 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
90007822:	2300      	movs	r3, #0
90007824:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
90007826:	4b04      	ldr	r3, [pc, #16]	; (90007838 <xTaskGetTickCountFromISR+0x20>)
90007828:	681b      	ldr	r3, [r3, #0]
9000782a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
9000782c:	683b      	ldr	r3, [r7, #0]
}
9000782e:	4618      	mov	r0, r3
90007830:	3708      	adds	r7, #8
90007832:	46bd      	mov	sp, r7
90007834:	bd80      	pop	{r7, pc}
90007836:	bf00      	nop
90007838:	2400f9c0 	.word	0x2400f9c0

9000783c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
9000783c:	b580      	push	{r7, lr}
9000783e:	b086      	sub	sp, #24
90007840:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
90007842:	2300      	movs	r3, #0
90007844:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
90007846:	4b4e      	ldr	r3, [pc, #312]	; (90007980 <xTaskIncrementTick+0x144>)
90007848:	681b      	ldr	r3, [r3, #0]
9000784a:	2b00      	cmp	r3, #0
9000784c:	f040 808e 	bne.w	9000796c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
90007850:	4b4c      	ldr	r3, [pc, #304]	; (90007984 <xTaskIncrementTick+0x148>)
90007852:	681b      	ldr	r3, [r3, #0]
90007854:	3301      	adds	r3, #1
90007856:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
90007858:	4a4a      	ldr	r2, [pc, #296]	; (90007984 <xTaskIncrementTick+0x148>)
9000785a:	693b      	ldr	r3, [r7, #16]
9000785c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
9000785e:	693b      	ldr	r3, [r7, #16]
90007860:	2b00      	cmp	r3, #0
90007862:	d120      	bne.n	900078a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
90007864:	4b48      	ldr	r3, [pc, #288]	; (90007988 <xTaskIncrementTick+0x14c>)
90007866:	681b      	ldr	r3, [r3, #0]
90007868:	681b      	ldr	r3, [r3, #0]
9000786a:	2b00      	cmp	r3, #0
9000786c:	d00a      	beq.n	90007884 <xTaskIncrementTick+0x48>
	__asm volatile
9000786e:	f04f 0350 	mov.w	r3, #80	; 0x50
90007872:	f383 8811 	msr	BASEPRI, r3
90007876:	f3bf 8f6f 	isb	sy
9000787a:	f3bf 8f4f 	dsb	sy
9000787e:	603b      	str	r3, [r7, #0]
}
90007880:	bf00      	nop
90007882:	e7fe      	b.n	90007882 <xTaskIncrementTick+0x46>
90007884:	4b40      	ldr	r3, [pc, #256]	; (90007988 <xTaskIncrementTick+0x14c>)
90007886:	681b      	ldr	r3, [r3, #0]
90007888:	60fb      	str	r3, [r7, #12]
9000788a:	4b40      	ldr	r3, [pc, #256]	; (9000798c <xTaskIncrementTick+0x150>)
9000788c:	681b      	ldr	r3, [r3, #0]
9000788e:	4a3e      	ldr	r2, [pc, #248]	; (90007988 <xTaskIncrementTick+0x14c>)
90007890:	6013      	str	r3, [r2, #0]
90007892:	4a3e      	ldr	r2, [pc, #248]	; (9000798c <xTaskIncrementTick+0x150>)
90007894:	68fb      	ldr	r3, [r7, #12]
90007896:	6013      	str	r3, [r2, #0]
90007898:	4b3d      	ldr	r3, [pc, #244]	; (90007990 <xTaskIncrementTick+0x154>)
9000789a:	681b      	ldr	r3, [r3, #0]
9000789c:	3301      	adds	r3, #1
9000789e:	4a3c      	ldr	r2, [pc, #240]	; (90007990 <xTaskIncrementTick+0x154>)
900078a0:	6013      	str	r3, [r2, #0]
900078a2:	f000 faa9 	bl	90007df8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
900078a6:	4b3b      	ldr	r3, [pc, #236]	; (90007994 <xTaskIncrementTick+0x158>)
900078a8:	681b      	ldr	r3, [r3, #0]
900078aa:	693a      	ldr	r2, [r7, #16]
900078ac:	429a      	cmp	r2, r3
900078ae:	d348      	bcc.n	90007942 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
900078b0:	4b35      	ldr	r3, [pc, #212]	; (90007988 <xTaskIncrementTick+0x14c>)
900078b2:	681b      	ldr	r3, [r3, #0]
900078b4:	681b      	ldr	r3, [r3, #0]
900078b6:	2b00      	cmp	r3, #0
900078b8:	d104      	bne.n	900078c4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
900078ba:	4b36      	ldr	r3, [pc, #216]	; (90007994 <xTaskIncrementTick+0x158>)
900078bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
900078c0:	601a      	str	r2, [r3, #0]
					break;
900078c2:	e03e      	b.n	90007942 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
900078c4:	4b30      	ldr	r3, [pc, #192]	; (90007988 <xTaskIncrementTick+0x14c>)
900078c6:	681b      	ldr	r3, [r3, #0]
900078c8:	68db      	ldr	r3, [r3, #12]
900078ca:	68db      	ldr	r3, [r3, #12]
900078cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
900078ce:	68bb      	ldr	r3, [r7, #8]
900078d0:	685b      	ldr	r3, [r3, #4]
900078d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
900078d4:	693a      	ldr	r2, [r7, #16]
900078d6:	687b      	ldr	r3, [r7, #4]
900078d8:	429a      	cmp	r2, r3
900078da:	d203      	bcs.n	900078e4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
900078dc:	4a2d      	ldr	r2, [pc, #180]	; (90007994 <xTaskIncrementTick+0x158>)
900078de:	687b      	ldr	r3, [r7, #4]
900078e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
900078e2:	e02e      	b.n	90007942 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
900078e4:	68bb      	ldr	r3, [r7, #8]
900078e6:	3304      	adds	r3, #4
900078e8:	4618      	mov	r0, r3
900078ea:	f7fe fd29 	bl	90006340 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
900078ee:	68bb      	ldr	r3, [r7, #8]
900078f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900078f2:	2b00      	cmp	r3, #0
900078f4:	d004      	beq.n	90007900 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
900078f6:	68bb      	ldr	r3, [r7, #8]
900078f8:	3318      	adds	r3, #24
900078fa:	4618      	mov	r0, r3
900078fc:	f7fe fd20 	bl	90006340 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
90007900:	68bb      	ldr	r3, [r7, #8]
90007902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007904:	2201      	movs	r2, #1
90007906:	409a      	lsls	r2, r3
90007908:	4b23      	ldr	r3, [pc, #140]	; (90007998 <xTaskIncrementTick+0x15c>)
9000790a:	681b      	ldr	r3, [r3, #0]
9000790c:	4313      	orrs	r3, r2
9000790e:	4a22      	ldr	r2, [pc, #136]	; (90007998 <xTaskIncrementTick+0x15c>)
90007910:	6013      	str	r3, [r2, #0]
90007912:	68bb      	ldr	r3, [r7, #8]
90007914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90007916:	4613      	mov	r3, r2
90007918:	009b      	lsls	r3, r3, #2
9000791a:	4413      	add	r3, r2
9000791c:	009b      	lsls	r3, r3, #2
9000791e:	4a1f      	ldr	r2, [pc, #124]	; (9000799c <xTaskIncrementTick+0x160>)
90007920:	441a      	add	r2, r3
90007922:	68bb      	ldr	r3, [r7, #8]
90007924:	3304      	adds	r3, #4
90007926:	4619      	mov	r1, r3
90007928:	4610      	mov	r0, r2
9000792a:	f7fe fcac 	bl	90006286 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
9000792e:	68bb      	ldr	r3, [r7, #8]
90007930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90007932:	4b1b      	ldr	r3, [pc, #108]	; (900079a0 <xTaskIncrementTick+0x164>)
90007934:	681b      	ldr	r3, [r3, #0]
90007936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007938:	429a      	cmp	r2, r3
9000793a:	d3b9      	bcc.n	900078b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
9000793c:	2301      	movs	r3, #1
9000793e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
90007940:	e7b6      	b.n	900078b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
90007942:	4b17      	ldr	r3, [pc, #92]	; (900079a0 <xTaskIncrementTick+0x164>)
90007944:	681b      	ldr	r3, [r3, #0]
90007946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90007948:	4914      	ldr	r1, [pc, #80]	; (9000799c <xTaskIncrementTick+0x160>)
9000794a:	4613      	mov	r3, r2
9000794c:	009b      	lsls	r3, r3, #2
9000794e:	4413      	add	r3, r2
90007950:	009b      	lsls	r3, r3, #2
90007952:	440b      	add	r3, r1
90007954:	681b      	ldr	r3, [r3, #0]
90007956:	2b01      	cmp	r3, #1
90007958:	d901      	bls.n	9000795e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
9000795a:	2301      	movs	r3, #1
9000795c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
9000795e:	4b11      	ldr	r3, [pc, #68]	; (900079a4 <xTaskIncrementTick+0x168>)
90007960:	681b      	ldr	r3, [r3, #0]
90007962:	2b00      	cmp	r3, #0
90007964:	d007      	beq.n	90007976 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
90007966:	2301      	movs	r3, #1
90007968:	617b      	str	r3, [r7, #20]
9000796a:	e004      	b.n	90007976 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
9000796c:	4b0e      	ldr	r3, [pc, #56]	; (900079a8 <xTaskIncrementTick+0x16c>)
9000796e:	681b      	ldr	r3, [r3, #0]
90007970:	3301      	adds	r3, #1
90007972:	4a0d      	ldr	r2, [pc, #52]	; (900079a8 <xTaskIncrementTick+0x16c>)
90007974:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
90007976:	697b      	ldr	r3, [r7, #20]
}
90007978:	4618      	mov	r0, r3
9000797a:	3718      	adds	r7, #24
9000797c:	46bd      	mov	sp, r7
9000797e:	bd80      	pop	{r7, pc}
90007980:	2400f9e4 	.word	0x2400f9e4
90007984:	2400f9c0 	.word	0x2400f9c0
90007988:	2400f974 	.word	0x2400f974
9000798c:	2400f978 	.word	0x2400f978
90007990:	2400f9d4 	.word	0x2400f9d4
90007994:	2400f9dc 	.word	0x2400f9dc
90007998:	2400f9c4 	.word	0x2400f9c4
9000799c:	2400f8c0 	.word	0x2400f8c0
900079a0:	2400f8bc 	.word	0x2400f8bc
900079a4:	2400f9d0 	.word	0x2400f9d0
900079a8:	2400f9cc 	.word	0x2400f9cc

900079ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
900079ac:	b480      	push	{r7}
900079ae:	b087      	sub	sp, #28
900079b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
900079b2:	4b29      	ldr	r3, [pc, #164]	; (90007a58 <vTaskSwitchContext+0xac>)
900079b4:	681b      	ldr	r3, [r3, #0]
900079b6:	2b00      	cmp	r3, #0
900079b8:	d003      	beq.n	900079c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
900079ba:	4b28      	ldr	r3, [pc, #160]	; (90007a5c <vTaskSwitchContext+0xb0>)
900079bc:	2201      	movs	r2, #1
900079be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
900079c0:	e044      	b.n	90007a4c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
900079c2:	4b26      	ldr	r3, [pc, #152]	; (90007a5c <vTaskSwitchContext+0xb0>)
900079c4:	2200      	movs	r2, #0
900079c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
900079c8:	4b25      	ldr	r3, [pc, #148]	; (90007a60 <vTaskSwitchContext+0xb4>)
900079ca:	681b      	ldr	r3, [r3, #0]
900079cc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
900079ce:	68fb      	ldr	r3, [r7, #12]
900079d0:	fab3 f383 	clz	r3, r3
900079d4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
900079d6:	7afb      	ldrb	r3, [r7, #11]
900079d8:	f1c3 031f 	rsb	r3, r3, #31
900079dc:	617b      	str	r3, [r7, #20]
900079de:	4921      	ldr	r1, [pc, #132]	; (90007a64 <vTaskSwitchContext+0xb8>)
900079e0:	697a      	ldr	r2, [r7, #20]
900079e2:	4613      	mov	r3, r2
900079e4:	009b      	lsls	r3, r3, #2
900079e6:	4413      	add	r3, r2
900079e8:	009b      	lsls	r3, r3, #2
900079ea:	440b      	add	r3, r1
900079ec:	681b      	ldr	r3, [r3, #0]
900079ee:	2b00      	cmp	r3, #0
900079f0:	d10a      	bne.n	90007a08 <vTaskSwitchContext+0x5c>
	__asm volatile
900079f2:	f04f 0350 	mov.w	r3, #80	; 0x50
900079f6:	f383 8811 	msr	BASEPRI, r3
900079fa:	f3bf 8f6f 	isb	sy
900079fe:	f3bf 8f4f 	dsb	sy
90007a02:	607b      	str	r3, [r7, #4]
}
90007a04:	bf00      	nop
90007a06:	e7fe      	b.n	90007a06 <vTaskSwitchContext+0x5a>
90007a08:	697a      	ldr	r2, [r7, #20]
90007a0a:	4613      	mov	r3, r2
90007a0c:	009b      	lsls	r3, r3, #2
90007a0e:	4413      	add	r3, r2
90007a10:	009b      	lsls	r3, r3, #2
90007a12:	4a14      	ldr	r2, [pc, #80]	; (90007a64 <vTaskSwitchContext+0xb8>)
90007a14:	4413      	add	r3, r2
90007a16:	613b      	str	r3, [r7, #16]
90007a18:	693b      	ldr	r3, [r7, #16]
90007a1a:	685b      	ldr	r3, [r3, #4]
90007a1c:	685a      	ldr	r2, [r3, #4]
90007a1e:	693b      	ldr	r3, [r7, #16]
90007a20:	605a      	str	r2, [r3, #4]
90007a22:	693b      	ldr	r3, [r7, #16]
90007a24:	685a      	ldr	r2, [r3, #4]
90007a26:	693b      	ldr	r3, [r7, #16]
90007a28:	3308      	adds	r3, #8
90007a2a:	429a      	cmp	r2, r3
90007a2c:	d104      	bne.n	90007a38 <vTaskSwitchContext+0x8c>
90007a2e:	693b      	ldr	r3, [r7, #16]
90007a30:	685b      	ldr	r3, [r3, #4]
90007a32:	685a      	ldr	r2, [r3, #4]
90007a34:	693b      	ldr	r3, [r7, #16]
90007a36:	605a      	str	r2, [r3, #4]
90007a38:	693b      	ldr	r3, [r7, #16]
90007a3a:	685b      	ldr	r3, [r3, #4]
90007a3c:	68db      	ldr	r3, [r3, #12]
90007a3e:	4a0a      	ldr	r2, [pc, #40]	; (90007a68 <vTaskSwitchContext+0xbc>)
90007a40:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
90007a42:	4b09      	ldr	r3, [pc, #36]	; (90007a68 <vTaskSwitchContext+0xbc>)
90007a44:	681b      	ldr	r3, [r3, #0]
90007a46:	334c      	adds	r3, #76	; 0x4c
90007a48:	4a08      	ldr	r2, [pc, #32]	; (90007a6c <vTaskSwitchContext+0xc0>)
90007a4a:	6013      	str	r3, [r2, #0]
}
90007a4c:	bf00      	nop
90007a4e:	371c      	adds	r7, #28
90007a50:	46bd      	mov	sp, r7
90007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
90007a56:	4770      	bx	lr
90007a58:	2400f9e4 	.word	0x2400f9e4
90007a5c:	2400f9d0 	.word	0x2400f9d0
90007a60:	2400f9c4 	.word	0x2400f9c4
90007a64:	2400f8c0 	.word	0x2400f8c0
90007a68:	2400f8bc 	.word	0x2400f8bc
90007a6c:	24000530 	.word	0x24000530

90007a70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
90007a70:	b580      	push	{r7, lr}
90007a72:	b084      	sub	sp, #16
90007a74:	af00      	add	r7, sp, #0
90007a76:	6078      	str	r0, [r7, #4]
90007a78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
90007a7a:	687b      	ldr	r3, [r7, #4]
90007a7c:	2b00      	cmp	r3, #0
90007a7e:	d10a      	bne.n	90007a96 <vTaskPlaceOnEventList+0x26>
	__asm volatile
90007a80:	f04f 0350 	mov.w	r3, #80	; 0x50
90007a84:	f383 8811 	msr	BASEPRI, r3
90007a88:	f3bf 8f6f 	isb	sy
90007a8c:	f3bf 8f4f 	dsb	sy
90007a90:	60fb      	str	r3, [r7, #12]
}
90007a92:	bf00      	nop
90007a94:	e7fe      	b.n	90007a94 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
90007a96:	4b07      	ldr	r3, [pc, #28]	; (90007ab4 <vTaskPlaceOnEventList+0x44>)
90007a98:	681b      	ldr	r3, [r3, #0]
90007a9a:	3318      	adds	r3, #24
90007a9c:	4619      	mov	r1, r3
90007a9e:	6878      	ldr	r0, [r7, #4]
90007aa0:	f7fe fc15 	bl	900062ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
90007aa4:	2101      	movs	r1, #1
90007aa6:	6838      	ldr	r0, [r7, #0]
90007aa8:	f000 fb82 	bl	900081b0 <prvAddCurrentTaskToDelayedList>
}
90007aac:	bf00      	nop
90007aae:	3710      	adds	r7, #16
90007ab0:	46bd      	mov	sp, r7
90007ab2:	bd80      	pop	{r7, pc}
90007ab4:	2400f8bc 	.word	0x2400f8bc

90007ab8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
90007ab8:	b580      	push	{r7, lr}
90007aba:	b086      	sub	sp, #24
90007abc:	af00      	add	r7, sp, #0
90007abe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90007ac0:	687b      	ldr	r3, [r7, #4]
90007ac2:	68db      	ldr	r3, [r3, #12]
90007ac4:	68db      	ldr	r3, [r3, #12]
90007ac6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
90007ac8:	693b      	ldr	r3, [r7, #16]
90007aca:	2b00      	cmp	r3, #0
90007acc:	d10a      	bne.n	90007ae4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
90007ace:	f04f 0350 	mov.w	r3, #80	; 0x50
90007ad2:	f383 8811 	msr	BASEPRI, r3
90007ad6:	f3bf 8f6f 	isb	sy
90007ada:	f3bf 8f4f 	dsb	sy
90007ade:	60fb      	str	r3, [r7, #12]
}
90007ae0:	bf00      	nop
90007ae2:	e7fe      	b.n	90007ae2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
90007ae4:	693b      	ldr	r3, [r7, #16]
90007ae6:	3318      	adds	r3, #24
90007ae8:	4618      	mov	r0, r3
90007aea:	f7fe fc29 	bl	90006340 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
90007aee:	4b1d      	ldr	r3, [pc, #116]	; (90007b64 <xTaskRemoveFromEventList+0xac>)
90007af0:	681b      	ldr	r3, [r3, #0]
90007af2:	2b00      	cmp	r3, #0
90007af4:	d11c      	bne.n	90007b30 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
90007af6:	693b      	ldr	r3, [r7, #16]
90007af8:	3304      	adds	r3, #4
90007afa:	4618      	mov	r0, r3
90007afc:	f7fe fc20 	bl	90006340 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
90007b00:	693b      	ldr	r3, [r7, #16]
90007b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007b04:	2201      	movs	r2, #1
90007b06:	409a      	lsls	r2, r3
90007b08:	4b17      	ldr	r3, [pc, #92]	; (90007b68 <xTaskRemoveFromEventList+0xb0>)
90007b0a:	681b      	ldr	r3, [r3, #0]
90007b0c:	4313      	orrs	r3, r2
90007b0e:	4a16      	ldr	r2, [pc, #88]	; (90007b68 <xTaskRemoveFromEventList+0xb0>)
90007b10:	6013      	str	r3, [r2, #0]
90007b12:	693b      	ldr	r3, [r7, #16]
90007b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90007b16:	4613      	mov	r3, r2
90007b18:	009b      	lsls	r3, r3, #2
90007b1a:	4413      	add	r3, r2
90007b1c:	009b      	lsls	r3, r3, #2
90007b1e:	4a13      	ldr	r2, [pc, #76]	; (90007b6c <xTaskRemoveFromEventList+0xb4>)
90007b20:	441a      	add	r2, r3
90007b22:	693b      	ldr	r3, [r7, #16]
90007b24:	3304      	adds	r3, #4
90007b26:	4619      	mov	r1, r3
90007b28:	4610      	mov	r0, r2
90007b2a:	f7fe fbac 	bl	90006286 <vListInsertEnd>
90007b2e:	e005      	b.n	90007b3c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
90007b30:	693b      	ldr	r3, [r7, #16]
90007b32:	3318      	adds	r3, #24
90007b34:	4619      	mov	r1, r3
90007b36:	480e      	ldr	r0, [pc, #56]	; (90007b70 <xTaskRemoveFromEventList+0xb8>)
90007b38:	f7fe fba5 	bl	90006286 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
90007b3c:	693b      	ldr	r3, [r7, #16]
90007b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90007b40:	4b0c      	ldr	r3, [pc, #48]	; (90007b74 <xTaskRemoveFromEventList+0xbc>)
90007b42:	681b      	ldr	r3, [r3, #0]
90007b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007b46:	429a      	cmp	r2, r3
90007b48:	d905      	bls.n	90007b56 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
90007b4a:	2301      	movs	r3, #1
90007b4c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
90007b4e:	4b0a      	ldr	r3, [pc, #40]	; (90007b78 <xTaskRemoveFromEventList+0xc0>)
90007b50:	2201      	movs	r2, #1
90007b52:	601a      	str	r2, [r3, #0]
90007b54:	e001      	b.n	90007b5a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
90007b56:	2300      	movs	r3, #0
90007b58:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
90007b5a:	697b      	ldr	r3, [r7, #20]
}
90007b5c:	4618      	mov	r0, r3
90007b5e:	3718      	adds	r7, #24
90007b60:	46bd      	mov	sp, r7
90007b62:	bd80      	pop	{r7, pc}
90007b64:	2400f9e4 	.word	0x2400f9e4
90007b68:	2400f9c4 	.word	0x2400f9c4
90007b6c:	2400f8c0 	.word	0x2400f8c0
90007b70:	2400f97c 	.word	0x2400f97c
90007b74:	2400f8bc 	.word	0x2400f8bc
90007b78:	2400f9d0 	.word	0x2400f9d0

90007b7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
90007b7c:	b480      	push	{r7}
90007b7e:	b083      	sub	sp, #12
90007b80:	af00      	add	r7, sp, #0
90007b82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
90007b84:	4b06      	ldr	r3, [pc, #24]	; (90007ba0 <vTaskInternalSetTimeOutState+0x24>)
90007b86:	681a      	ldr	r2, [r3, #0]
90007b88:	687b      	ldr	r3, [r7, #4]
90007b8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
90007b8c:	4b05      	ldr	r3, [pc, #20]	; (90007ba4 <vTaskInternalSetTimeOutState+0x28>)
90007b8e:	681a      	ldr	r2, [r3, #0]
90007b90:	687b      	ldr	r3, [r7, #4]
90007b92:	605a      	str	r2, [r3, #4]
}
90007b94:	bf00      	nop
90007b96:	370c      	adds	r7, #12
90007b98:	46bd      	mov	sp, r7
90007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
90007b9e:	4770      	bx	lr
90007ba0:	2400f9d4 	.word	0x2400f9d4
90007ba4:	2400f9c0 	.word	0x2400f9c0

90007ba8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
90007ba8:	b580      	push	{r7, lr}
90007baa:	b088      	sub	sp, #32
90007bac:	af00      	add	r7, sp, #0
90007bae:	6078      	str	r0, [r7, #4]
90007bb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
90007bb2:	687b      	ldr	r3, [r7, #4]
90007bb4:	2b00      	cmp	r3, #0
90007bb6:	d10a      	bne.n	90007bce <xTaskCheckForTimeOut+0x26>
	__asm volatile
90007bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
90007bbc:	f383 8811 	msr	BASEPRI, r3
90007bc0:	f3bf 8f6f 	isb	sy
90007bc4:	f3bf 8f4f 	dsb	sy
90007bc8:	613b      	str	r3, [r7, #16]
}
90007bca:	bf00      	nop
90007bcc:	e7fe      	b.n	90007bcc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
90007bce:	683b      	ldr	r3, [r7, #0]
90007bd0:	2b00      	cmp	r3, #0
90007bd2:	d10a      	bne.n	90007bea <xTaskCheckForTimeOut+0x42>
	__asm volatile
90007bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
90007bd8:	f383 8811 	msr	BASEPRI, r3
90007bdc:	f3bf 8f6f 	isb	sy
90007be0:	f3bf 8f4f 	dsb	sy
90007be4:	60fb      	str	r3, [r7, #12]
}
90007be6:	bf00      	nop
90007be8:	e7fe      	b.n	90007be8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
90007bea:	f000 fc73 	bl	900084d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
90007bee:	4b1d      	ldr	r3, [pc, #116]	; (90007c64 <xTaskCheckForTimeOut+0xbc>)
90007bf0:	681b      	ldr	r3, [r3, #0]
90007bf2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
90007bf4:	687b      	ldr	r3, [r7, #4]
90007bf6:	685b      	ldr	r3, [r3, #4]
90007bf8:	69ba      	ldr	r2, [r7, #24]
90007bfa:	1ad3      	subs	r3, r2, r3
90007bfc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
90007bfe:	683b      	ldr	r3, [r7, #0]
90007c00:	681b      	ldr	r3, [r3, #0]
90007c02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
90007c06:	d102      	bne.n	90007c0e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
90007c08:	2300      	movs	r3, #0
90007c0a:	61fb      	str	r3, [r7, #28]
90007c0c:	e023      	b.n	90007c56 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
90007c0e:	687b      	ldr	r3, [r7, #4]
90007c10:	681a      	ldr	r2, [r3, #0]
90007c12:	4b15      	ldr	r3, [pc, #84]	; (90007c68 <xTaskCheckForTimeOut+0xc0>)
90007c14:	681b      	ldr	r3, [r3, #0]
90007c16:	429a      	cmp	r2, r3
90007c18:	d007      	beq.n	90007c2a <xTaskCheckForTimeOut+0x82>
90007c1a:	687b      	ldr	r3, [r7, #4]
90007c1c:	685b      	ldr	r3, [r3, #4]
90007c1e:	69ba      	ldr	r2, [r7, #24]
90007c20:	429a      	cmp	r2, r3
90007c22:	d302      	bcc.n	90007c2a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
90007c24:	2301      	movs	r3, #1
90007c26:	61fb      	str	r3, [r7, #28]
90007c28:	e015      	b.n	90007c56 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
90007c2a:	683b      	ldr	r3, [r7, #0]
90007c2c:	681b      	ldr	r3, [r3, #0]
90007c2e:	697a      	ldr	r2, [r7, #20]
90007c30:	429a      	cmp	r2, r3
90007c32:	d20b      	bcs.n	90007c4c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
90007c34:	683b      	ldr	r3, [r7, #0]
90007c36:	681a      	ldr	r2, [r3, #0]
90007c38:	697b      	ldr	r3, [r7, #20]
90007c3a:	1ad2      	subs	r2, r2, r3
90007c3c:	683b      	ldr	r3, [r7, #0]
90007c3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
90007c40:	6878      	ldr	r0, [r7, #4]
90007c42:	f7ff ff9b 	bl	90007b7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
90007c46:	2300      	movs	r3, #0
90007c48:	61fb      	str	r3, [r7, #28]
90007c4a:	e004      	b.n	90007c56 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
90007c4c:	683b      	ldr	r3, [r7, #0]
90007c4e:	2200      	movs	r2, #0
90007c50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
90007c52:	2301      	movs	r3, #1
90007c54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
90007c56:	f000 fc6d 	bl	90008534 <vPortExitCritical>

	return xReturn;
90007c5a:	69fb      	ldr	r3, [r7, #28]
}
90007c5c:	4618      	mov	r0, r3
90007c5e:	3720      	adds	r7, #32
90007c60:	46bd      	mov	sp, r7
90007c62:	bd80      	pop	{r7, pc}
90007c64:	2400f9c0 	.word	0x2400f9c0
90007c68:	2400f9d4 	.word	0x2400f9d4

90007c6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
90007c6c:	b480      	push	{r7}
90007c6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
90007c70:	4b03      	ldr	r3, [pc, #12]	; (90007c80 <vTaskMissedYield+0x14>)
90007c72:	2201      	movs	r2, #1
90007c74:	601a      	str	r2, [r3, #0]
}
90007c76:	bf00      	nop
90007c78:	46bd      	mov	sp, r7
90007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
90007c7e:	4770      	bx	lr
90007c80:	2400f9d0 	.word	0x2400f9d0

90007c84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
90007c84:	b580      	push	{r7, lr}
90007c86:	b082      	sub	sp, #8
90007c88:	af00      	add	r7, sp, #0
90007c8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
90007c8c:	f000 f852 	bl	90007d34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
90007c90:	4b06      	ldr	r3, [pc, #24]	; (90007cac <prvIdleTask+0x28>)
90007c92:	681b      	ldr	r3, [r3, #0]
90007c94:	2b01      	cmp	r3, #1
90007c96:	d9f9      	bls.n	90007c8c <prvIdleTask+0x8>
			{
				taskYIELD();
90007c98:	4b05      	ldr	r3, [pc, #20]	; (90007cb0 <prvIdleTask+0x2c>)
90007c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90007c9e:	601a      	str	r2, [r3, #0]
90007ca0:	f3bf 8f4f 	dsb	sy
90007ca4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
90007ca8:	e7f0      	b.n	90007c8c <prvIdleTask+0x8>
90007caa:	bf00      	nop
90007cac:	2400f8c0 	.word	0x2400f8c0
90007cb0:	e000ed04 	.word	0xe000ed04

90007cb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
90007cb4:	b580      	push	{r7, lr}
90007cb6:	b082      	sub	sp, #8
90007cb8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
90007cba:	2300      	movs	r3, #0
90007cbc:	607b      	str	r3, [r7, #4]
90007cbe:	e00c      	b.n	90007cda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
90007cc0:	687a      	ldr	r2, [r7, #4]
90007cc2:	4613      	mov	r3, r2
90007cc4:	009b      	lsls	r3, r3, #2
90007cc6:	4413      	add	r3, r2
90007cc8:	009b      	lsls	r3, r3, #2
90007cca:	4a12      	ldr	r2, [pc, #72]	; (90007d14 <prvInitialiseTaskLists+0x60>)
90007ccc:	4413      	add	r3, r2
90007cce:	4618      	mov	r0, r3
90007cd0:	f7fe faac 	bl	9000622c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
90007cd4:	687b      	ldr	r3, [r7, #4]
90007cd6:	3301      	adds	r3, #1
90007cd8:	607b      	str	r3, [r7, #4]
90007cda:	687b      	ldr	r3, [r7, #4]
90007cdc:	2b06      	cmp	r3, #6
90007cde:	d9ef      	bls.n	90007cc0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
90007ce0:	480d      	ldr	r0, [pc, #52]	; (90007d18 <prvInitialiseTaskLists+0x64>)
90007ce2:	f7fe faa3 	bl	9000622c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
90007ce6:	480d      	ldr	r0, [pc, #52]	; (90007d1c <prvInitialiseTaskLists+0x68>)
90007ce8:	f7fe faa0 	bl	9000622c <vListInitialise>
	vListInitialise( &xPendingReadyList );
90007cec:	480c      	ldr	r0, [pc, #48]	; (90007d20 <prvInitialiseTaskLists+0x6c>)
90007cee:	f7fe fa9d 	bl	9000622c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
90007cf2:	480c      	ldr	r0, [pc, #48]	; (90007d24 <prvInitialiseTaskLists+0x70>)
90007cf4:	f7fe fa9a 	bl	9000622c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
90007cf8:	480b      	ldr	r0, [pc, #44]	; (90007d28 <prvInitialiseTaskLists+0x74>)
90007cfa:	f7fe fa97 	bl	9000622c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
90007cfe:	4b0b      	ldr	r3, [pc, #44]	; (90007d2c <prvInitialiseTaskLists+0x78>)
90007d00:	4a05      	ldr	r2, [pc, #20]	; (90007d18 <prvInitialiseTaskLists+0x64>)
90007d02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
90007d04:	4b0a      	ldr	r3, [pc, #40]	; (90007d30 <prvInitialiseTaskLists+0x7c>)
90007d06:	4a05      	ldr	r2, [pc, #20]	; (90007d1c <prvInitialiseTaskLists+0x68>)
90007d08:	601a      	str	r2, [r3, #0]
}
90007d0a:	bf00      	nop
90007d0c:	3708      	adds	r7, #8
90007d0e:	46bd      	mov	sp, r7
90007d10:	bd80      	pop	{r7, pc}
90007d12:	bf00      	nop
90007d14:	2400f8c0 	.word	0x2400f8c0
90007d18:	2400f94c 	.word	0x2400f94c
90007d1c:	2400f960 	.word	0x2400f960
90007d20:	2400f97c 	.word	0x2400f97c
90007d24:	2400f990 	.word	0x2400f990
90007d28:	2400f9a8 	.word	0x2400f9a8
90007d2c:	2400f974 	.word	0x2400f974
90007d30:	2400f978 	.word	0x2400f978

90007d34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
90007d34:	b580      	push	{r7, lr}
90007d36:	b082      	sub	sp, #8
90007d38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
90007d3a:	e019      	b.n	90007d70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
90007d3c:	f000 fbca 	bl	900084d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90007d40:	4b10      	ldr	r3, [pc, #64]	; (90007d84 <prvCheckTasksWaitingTermination+0x50>)
90007d42:	68db      	ldr	r3, [r3, #12]
90007d44:	68db      	ldr	r3, [r3, #12]
90007d46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
90007d48:	687b      	ldr	r3, [r7, #4]
90007d4a:	3304      	adds	r3, #4
90007d4c:	4618      	mov	r0, r3
90007d4e:	f7fe faf7 	bl	90006340 <uxListRemove>
				--uxCurrentNumberOfTasks;
90007d52:	4b0d      	ldr	r3, [pc, #52]	; (90007d88 <prvCheckTasksWaitingTermination+0x54>)
90007d54:	681b      	ldr	r3, [r3, #0]
90007d56:	3b01      	subs	r3, #1
90007d58:	4a0b      	ldr	r2, [pc, #44]	; (90007d88 <prvCheckTasksWaitingTermination+0x54>)
90007d5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
90007d5c:	4b0b      	ldr	r3, [pc, #44]	; (90007d8c <prvCheckTasksWaitingTermination+0x58>)
90007d5e:	681b      	ldr	r3, [r3, #0]
90007d60:	3b01      	subs	r3, #1
90007d62:	4a0a      	ldr	r2, [pc, #40]	; (90007d8c <prvCheckTasksWaitingTermination+0x58>)
90007d64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
90007d66:	f000 fbe5 	bl	90008534 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
90007d6a:	6878      	ldr	r0, [r7, #4]
90007d6c:	f000 f810 	bl	90007d90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
90007d70:	4b06      	ldr	r3, [pc, #24]	; (90007d8c <prvCheckTasksWaitingTermination+0x58>)
90007d72:	681b      	ldr	r3, [r3, #0]
90007d74:	2b00      	cmp	r3, #0
90007d76:	d1e1      	bne.n	90007d3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
90007d78:	bf00      	nop
90007d7a:	bf00      	nop
90007d7c:	3708      	adds	r7, #8
90007d7e:	46bd      	mov	sp, r7
90007d80:	bd80      	pop	{r7, pc}
90007d82:	bf00      	nop
90007d84:	2400f990 	.word	0x2400f990
90007d88:	2400f9bc 	.word	0x2400f9bc
90007d8c:	2400f9a4 	.word	0x2400f9a4

90007d90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
90007d90:	b580      	push	{r7, lr}
90007d92:	b084      	sub	sp, #16
90007d94:	af00      	add	r7, sp, #0
90007d96:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
90007d98:	687b      	ldr	r3, [r7, #4]
90007d9a:	334c      	adds	r3, #76	; 0x4c
90007d9c:	4618      	mov	r0, r3
90007d9e:	f00e f803 	bl	90015da8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
90007da2:	687b      	ldr	r3, [r7, #4]
90007da4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
90007da8:	2b00      	cmp	r3, #0
90007daa:	d108      	bne.n	90007dbe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
90007dac:	687b      	ldr	r3, [r7, #4]
90007dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90007db0:	4618      	mov	r0, r3
90007db2:	f000 fd7d 	bl	900088b0 <vPortFree>
				vPortFree( pxTCB );
90007db6:	6878      	ldr	r0, [r7, #4]
90007db8:	f000 fd7a 	bl	900088b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
90007dbc:	e018      	b.n	90007df0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
90007dbe:	687b      	ldr	r3, [r7, #4]
90007dc0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
90007dc4:	2b01      	cmp	r3, #1
90007dc6:	d103      	bne.n	90007dd0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
90007dc8:	6878      	ldr	r0, [r7, #4]
90007dca:	f000 fd71 	bl	900088b0 <vPortFree>
	}
90007dce:	e00f      	b.n	90007df0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
90007dd0:	687b      	ldr	r3, [r7, #4]
90007dd2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
90007dd6:	2b02      	cmp	r3, #2
90007dd8:	d00a      	beq.n	90007df0 <prvDeleteTCB+0x60>
	__asm volatile
90007dda:	f04f 0350 	mov.w	r3, #80	; 0x50
90007dde:	f383 8811 	msr	BASEPRI, r3
90007de2:	f3bf 8f6f 	isb	sy
90007de6:	f3bf 8f4f 	dsb	sy
90007dea:	60fb      	str	r3, [r7, #12]
}
90007dec:	bf00      	nop
90007dee:	e7fe      	b.n	90007dee <prvDeleteTCB+0x5e>
	}
90007df0:	bf00      	nop
90007df2:	3710      	adds	r7, #16
90007df4:	46bd      	mov	sp, r7
90007df6:	bd80      	pop	{r7, pc}

90007df8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
90007df8:	b480      	push	{r7}
90007dfa:	b083      	sub	sp, #12
90007dfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
90007dfe:	4b0c      	ldr	r3, [pc, #48]	; (90007e30 <prvResetNextTaskUnblockTime+0x38>)
90007e00:	681b      	ldr	r3, [r3, #0]
90007e02:	681b      	ldr	r3, [r3, #0]
90007e04:	2b00      	cmp	r3, #0
90007e06:	d104      	bne.n	90007e12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
90007e08:	4b0a      	ldr	r3, [pc, #40]	; (90007e34 <prvResetNextTaskUnblockTime+0x3c>)
90007e0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
90007e0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
90007e10:	e008      	b.n	90007e24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90007e12:	4b07      	ldr	r3, [pc, #28]	; (90007e30 <prvResetNextTaskUnblockTime+0x38>)
90007e14:	681b      	ldr	r3, [r3, #0]
90007e16:	68db      	ldr	r3, [r3, #12]
90007e18:	68db      	ldr	r3, [r3, #12]
90007e1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
90007e1c:	687b      	ldr	r3, [r7, #4]
90007e1e:	685b      	ldr	r3, [r3, #4]
90007e20:	4a04      	ldr	r2, [pc, #16]	; (90007e34 <prvResetNextTaskUnblockTime+0x3c>)
90007e22:	6013      	str	r3, [r2, #0]
}
90007e24:	bf00      	nop
90007e26:	370c      	adds	r7, #12
90007e28:	46bd      	mov	sp, r7
90007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
90007e2e:	4770      	bx	lr
90007e30:	2400f974 	.word	0x2400f974
90007e34:	2400f9dc 	.word	0x2400f9dc

90007e38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
90007e38:	b480      	push	{r7}
90007e3a:	b083      	sub	sp, #12
90007e3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
90007e3e:	4b0b      	ldr	r3, [pc, #44]	; (90007e6c <xTaskGetSchedulerState+0x34>)
90007e40:	681b      	ldr	r3, [r3, #0]
90007e42:	2b00      	cmp	r3, #0
90007e44:	d102      	bne.n	90007e4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
90007e46:	2301      	movs	r3, #1
90007e48:	607b      	str	r3, [r7, #4]
90007e4a:	e008      	b.n	90007e5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
90007e4c:	4b08      	ldr	r3, [pc, #32]	; (90007e70 <xTaskGetSchedulerState+0x38>)
90007e4e:	681b      	ldr	r3, [r3, #0]
90007e50:	2b00      	cmp	r3, #0
90007e52:	d102      	bne.n	90007e5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
90007e54:	2302      	movs	r3, #2
90007e56:	607b      	str	r3, [r7, #4]
90007e58:	e001      	b.n	90007e5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
90007e5a:	2300      	movs	r3, #0
90007e5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
90007e5e:	687b      	ldr	r3, [r7, #4]
	}
90007e60:	4618      	mov	r0, r3
90007e62:	370c      	adds	r7, #12
90007e64:	46bd      	mov	sp, r7
90007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
90007e6a:	4770      	bx	lr
90007e6c:	2400f9c8 	.word	0x2400f9c8
90007e70:	2400f9e4 	.word	0x2400f9e4

90007e74 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
90007e74:	b580      	push	{r7, lr}
90007e76:	b084      	sub	sp, #16
90007e78:	af00      	add	r7, sp, #0
90007e7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
90007e7c:	687b      	ldr	r3, [r7, #4]
90007e7e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
90007e80:	2300      	movs	r3, #0
90007e82:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
90007e84:	687b      	ldr	r3, [r7, #4]
90007e86:	2b00      	cmp	r3, #0
90007e88:	d05e      	beq.n	90007f48 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
90007e8a:	68bb      	ldr	r3, [r7, #8]
90007e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90007e8e:	4b31      	ldr	r3, [pc, #196]	; (90007f54 <xTaskPriorityInherit+0xe0>)
90007e90:	681b      	ldr	r3, [r3, #0]
90007e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007e94:	429a      	cmp	r2, r3
90007e96:	d24e      	bcs.n	90007f36 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
90007e98:	68bb      	ldr	r3, [r7, #8]
90007e9a:	699b      	ldr	r3, [r3, #24]
90007e9c:	2b00      	cmp	r3, #0
90007e9e:	db06      	blt.n	90007eae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90007ea0:	4b2c      	ldr	r3, [pc, #176]	; (90007f54 <xTaskPriorityInherit+0xe0>)
90007ea2:	681b      	ldr	r3, [r3, #0]
90007ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007ea6:	f1c3 0207 	rsb	r2, r3, #7
90007eaa:	68bb      	ldr	r3, [r7, #8]
90007eac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
90007eae:	68bb      	ldr	r3, [r7, #8]
90007eb0:	6959      	ldr	r1, [r3, #20]
90007eb2:	68bb      	ldr	r3, [r7, #8]
90007eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90007eb6:	4613      	mov	r3, r2
90007eb8:	009b      	lsls	r3, r3, #2
90007eba:	4413      	add	r3, r2
90007ebc:	009b      	lsls	r3, r3, #2
90007ebe:	4a26      	ldr	r2, [pc, #152]	; (90007f58 <xTaskPriorityInherit+0xe4>)
90007ec0:	4413      	add	r3, r2
90007ec2:	4299      	cmp	r1, r3
90007ec4:	d12f      	bne.n	90007f26 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
90007ec6:	68bb      	ldr	r3, [r7, #8]
90007ec8:	3304      	adds	r3, #4
90007eca:	4618      	mov	r0, r3
90007ecc:	f7fe fa38 	bl	90006340 <uxListRemove>
90007ed0:	4603      	mov	r3, r0
90007ed2:	2b00      	cmp	r3, #0
90007ed4:	d10a      	bne.n	90007eec <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
90007ed6:	68bb      	ldr	r3, [r7, #8]
90007ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007eda:	2201      	movs	r2, #1
90007edc:	fa02 f303 	lsl.w	r3, r2, r3
90007ee0:	43da      	mvns	r2, r3
90007ee2:	4b1e      	ldr	r3, [pc, #120]	; (90007f5c <xTaskPriorityInherit+0xe8>)
90007ee4:	681b      	ldr	r3, [r3, #0]
90007ee6:	4013      	ands	r3, r2
90007ee8:	4a1c      	ldr	r2, [pc, #112]	; (90007f5c <xTaskPriorityInherit+0xe8>)
90007eea:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
90007eec:	4b19      	ldr	r3, [pc, #100]	; (90007f54 <xTaskPriorityInherit+0xe0>)
90007eee:	681b      	ldr	r3, [r3, #0]
90007ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90007ef2:	68bb      	ldr	r3, [r7, #8]
90007ef4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
90007ef6:	68bb      	ldr	r3, [r7, #8]
90007ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007efa:	2201      	movs	r2, #1
90007efc:	409a      	lsls	r2, r3
90007efe:	4b17      	ldr	r3, [pc, #92]	; (90007f5c <xTaskPriorityInherit+0xe8>)
90007f00:	681b      	ldr	r3, [r3, #0]
90007f02:	4313      	orrs	r3, r2
90007f04:	4a15      	ldr	r2, [pc, #84]	; (90007f5c <xTaskPriorityInherit+0xe8>)
90007f06:	6013      	str	r3, [r2, #0]
90007f08:	68bb      	ldr	r3, [r7, #8]
90007f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90007f0c:	4613      	mov	r3, r2
90007f0e:	009b      	lsls	r3, r3, #2
90007f10:	4413      	add	r3, r2
90007f12:	009b      	lsls	r3, r3, #2
90007f14:	4a10      	ldr	r2, [pc, #64]	; (90007f58 <xTaskPriorityInherit+0xe4>)
90007f16:	441a      	add	r2, r3
90007f18:	68bb      	ldr	r3, [r7, #8]
90007f1a:	3304      	adds	r3, #4
90007f1c:	4619      	mov	r1, r3
90007f1e:	4610      	mov	r0, r2
90007f20:	f7fe f9b1 	bl	90006286 <vListInsertEnd>
90007f24:	e004      	b.n	90007f30 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
90007f26:	4b0b      	ldr	r3, [pc, #44]	; (90007f54 <xTaskPriorityInherit+0xe0>)
90007f28:	681b      	ldr	r3, [r3, #0]
90007f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90007f2c:	68bb      	ldr	r3, [r7, #8]
90007f2e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
90007f30:	2301      	movs	r3, #1
90007f32:	60fb      	str	r3, [r7, #12]
90007f34:	e008      	b.n	90007f48 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
90007f36:	68bb      	ldr	r3, [r7, #8]
90007f38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
90007f3a:	4b06      	ldr	r3, [pc, #24]	; (90007f54 <xTaskPriorityInherit+0xe0>)
90007f3c:	681b      	ldr	r3, [r3, #0]
90007f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007f40:	429a      	cmp	r2, r3
90007f42:	d201      	bcs.n	90007f48 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
90007f44:	2301      	movs	r3, #1
90007f46:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
90007f48:	68fb      	ldr	r3, [r7, #12]
	}
90007f4a:	4618      	mov	r0, r3
90007f4c:	3710      	adds	r7, #16
90007f4e:	46bd      	mov	sp, r7
90007f50:	bd80      	pop	{r7, pc}
90007f52:	bf00      	nop
90007f54:	2400f8bc 	.word	0x2400f8bc
90007f58:	2400f8c0 	.word	0x2400f8c0
90007f5c:	2400f9c4 	.word	0x2400f9c4

90007f60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
90007f60:	b580      	push	{r7, lr}
90007f62:	b086      	sub	sp, #24
90007f64:	af00      	add	r7, sp, #0
90007f66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
90007f68:	687b      	ldr	r3, [r7, #4]
90007f6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
90007f6c:	2300      	movs	r3, #0
90007f6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
90007f70:	687b      	ldr	r3, [r7, #4]
90007f72:	2b00      	cmp	r3, #0
90007f74:	d06e      	beq.n	90008054 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
90007f76:	4b3a      	ldr	r3, [pc, #232]	; (90008060 <xTaskPriorityDisinherit+0x100>)
90007f78:	681b      	ldr	r3, [r3, #0]
90007f7a:	693a      	ldr	r2, [r7, #16]
90007f7c:	429a      	cmp	r2, r3
90007f7e:	d00a      	beq.n	90007f96 <xTaskPriorityDisinherit+0x36>
	__asm volatile
90007f80:	f04f 0350 	mov.w	r3, #80	; 0x50
90007f84:	f383 8811 	msr	BASEPRI, r3
90007f88:	f3bf 8f6f 	isb	sy
90007f8c:	f3bf 8f4f 	dsb	sy
90007f90:	60fb      	str	r3, [r7, #12]
}
90007f92:	bf00      	nop
90007f94:	e7fe      	b.n	90007f94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
90007f96:	693b      	ldr	r3, [r7, #16]
90007f98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90007f9a:	2b00      	cmp	r3, #0
90007f9c:	d10a      	bne.n	90007fb4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
90007f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
90007fa2:	f383 8811 	msr	BASEPRI, r3
90007fa6:	f3bf 8f6f 	isb	sy
90007faa:	f3bf 8f4f 	dsb	sy
90007fae:	60bb      	str	r3, [r7, #8]
}
90007fb0:	bf00      	nop
90007fb2:	e7fe      	b.n	90007fb2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
90007fb4:	693b      	ldr	r3, [r7, #16]
90007fb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90007fb8:	1e5a      	subs	r2, r3, #1
90007fba:	693b      	ldr	r3, [r7, #16]
90007fbc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
90007fbe:	693b      	ldr	r3, [r7, #16]
90007fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90007fc2:	693b      	ldr	r3, [r7, #16]
90007fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90007fc6:	429a      	cmp	r2, r3
90007fc8:	d044      	beq.n	90008054 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
90007fca:	693b      	ldr	r3, [r7, #16]
90007fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90007fce:	2b00      	cmp	r3, #0
90007fd0:	d140      	bne.n	90008054 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
90007fd2:	693b      	ldr	r3, [r7, #16]
90007fd4:	3304      	adds	r3, #4
90007fd6:	4618      	mov	r0, r3
90007fd8:	f7fe f9b2 	bl	90006340 <uxListRemove>
90007fdc:	4603      	mov	r3, r0
90007fde:	2b00      	cmp	r3, #0
90007fe0:	d115      	bne.n	9000800e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
90007fe2:	693b      	ldr	r3, [r7, #16]
90007fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90007fe6:	491f      	ldr	r1, [pc, #124]	; (90008064 <xTaskPriorityDisinherit+0x104>)
90007fe8:	4613      	mov	r3, r2
90007fea:	009b      	lsls	r3, r3, #2
90007fec:	4413      	add	r3, r2
90007fee:	009b      	lsls	r3, r3, #2
90007ff0:	440b      	add	r3, r1
90007ff2:	681b      	ldr	r3, [r3, #0]
90007ff4:	2b00      	cmp	r3, #0
90007ff6:	d10a      	bne.n	9000800e <xTaskPriorityDisinherit+0xae>
90007ff8:	693b      	ldr	r3, [r7, #16]
90007ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90007ffc:	2201      	movs	r2, #1
90007ffe:	fa02 f303 	lsl.w	r3, r2, r3
90008002:	43da      	mvns	r2, r3
90008004:	4b18      	ldr	r3, [pc, #96]	; (90008068 <xTaskPriorityDisinherit+0x108>)
90008006:	681b      	ldr	r3, [r3, #0]
90008008:	4013      	ands	r3, r2
9000800a:	4a17      	ldr	r2, [pc, #92]	; (90008068 <xTaskPriorityDisinherit+0x108>)
9000800c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
9000800e:	693b      	ldr	r3, [r7, #16]
90008010:	6c5a      	ldr	r2, [r3, #68]	; 0x44
90008012:	693b      	ldr	r3, [r7, #16]
90008014:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90008016:	693b      	ldr	r3, [r7, #16]
90008018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000801a:	f1c3 0207 	rsb	r2, r3, #7
9000801e:	693b      	ldr	r3, [r7, #16]
90008020:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
90008022:	693b      	ldr	r3, [r7, #16]
90008024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90008026:	2201      	movs	r2, #1
90008028:	409a      	lsls	r2, r3
9000802a:	4b0f      	ldr	r3, [pc, #60]	; (90008068 <xTaskPriorityDisinherit+0x108>)
9000802c:	681b      	ldr	r3, [r3, #0]
9000802e:	4313      	orrs	r3, r2
90008030:	4a0d      	ldr	r2, [pc, #52]	; (90008068 <xTaskPriorityDisinherit+0x108>)
90008032:	6013      	str	r3, [r2, #0]
90008034:	693b      	ldr	r3, [r7, #16]
90008036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
90008038:	4613      	mov	r3, r2
9000803a:	009b      	lsls	r3, r3, #2
9000803c:	4413      	add	r3, r2
9000803e:	009b      	lsls	r3, r3, #2
90008040:	4a08      	ldr	r2, [pc, #32]	; (90008064 <xTaskPriorityDisinherit+0x104>)
90008042:	441a      	add	r2, r3
90008044:	693b      	ldr	r3, [r7, #16]
90008046:	3304      	adds	r3, #4
90008048:	4619      	mov	r1, r3
9000804a:	4610      	mov	r0, r2
9000804c:	f7fe f91b 	bl	90006286 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
90008050:	2301      	movs	r3, #1
90008052:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
90008054:	697b      	ldr	r3, [r7, #20]
	}
90008056:	4618      	mov	r0, r3
90008058:	3718      	adds	r7, #24
9000805a:	46bd      	mov	sp, r7
9000805c:	bd80      	pop	{r7, pc}
9000805e:	bf00      	nop
90008060:	2400f8bc 	.word	0x2400f8bc
90008064:	2400f8c0 	.word	0x2400f8c0
90008068:	2400f9c4 	.word	0x2400f9c4

9000806c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
9000806c:	b580      	push	{r7, lr}
9000806e:	b088      	sub	sp, #32
90008070:	af00      	add	r7, sp, #0
90008072:	6078      	str	r0, [r7, #4]
90008074:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
90008076:	687b      	ldr	r3, [r7, #4]
90008078:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
9000807a:	2301      	movs	r3, #1
9000807c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
9000807e:	687b      	ldr	r3, [r7, #4]
90008080:	2b00      	cmp	r3, #0
90008082:	d077      	beq.n	90008174 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
90008084:	69bb      	ldr	r3, [r7, #24]
90008086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90008088:	2b00      	cmp	r3, #0
9000808a:	d10a      	bne.n	900080a2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
9000808c:	f04f 0350 	mov.w	r3, #80	; 0x50
90008090:	f383 8811 	msr	BASEPRI, r3
90008094:	f3bf 8f6f 	isb	sy
90008098:	f3bf 8f4f 	dsb	sy
9000809c:	60fb      	str	r3, [r7, #12]
}
9000809e:	bf00      	nop
900080a0:	e7fe      	b.n	900080a0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
900080a2:	69bb      	ldr	r3, [r7, #24]
900080a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900080a6:	683a      	ldr	r2, [r7, #0]
900080a8:	429a      	cmp	r2, r3
900080aa:	d902      	bls.n	900080b2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
900080ac:	683b      	ldr	r3, [r7, #0]
900080ae:	61fb      	str	r3, [r7, #28]
900080b0:	e002      	b.n	900080b8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
900080b2:	69bb      	ldr	r3, [r7, #24]
900080b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900080b6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
900080b8:	69bb      	ldr	r3, [r7, #24]
900080ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900080bc:	69fa      	ldr	r2, [r7, #28]
900080be:	429a      	cmp	r2, r3
900080c0:	d058      	beq.n	90008174 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
900080c2:	69bb      	ldr	r3, [r7, #24]
900080c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
900080c6:	697a      	ldr	r2, [r7, #20]
900080c8:	429a      	cmp	r2, r3
900080ca:	d153      	bne.n	90008174 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
900080cc:	4b2b      	ldr	r3, [pc, #172]	; (9000817c <vTaskPriorityDisinheritAfterTimeout+0x110>)
900080ce:	681b      	ldr	r3, [r3, #0]
900080d0:	69ba      	ldr	r2, [r7, #24]
900080d2:	429a      	cmp	r2, r3
900080d4:	d10a      	bne.n	900080ec <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
900080d6:	f04f 0350 	mov.w	r3, #80	; 0x50
900080da:	f383 8811 	msr	BASEPRI, r3
900080de:	f3bf 8f6f 	isb	sy
900080e2:	f3bf 8f4f 	dsb	sy
900080e6:	60bb      	str	r3, [r7, #8]
}
900080e8:	bf00      	nop
900080ea:	e7fe      	b.n	900080ea <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
900080ec:	69bb      	ldr	r3, [r7, #24]
900080ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900080f0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
900080f2:	69bb      	ldr	r3, [r7, #24]
900080f4:	69fa      	ldr	r2, [r7, #28]
900080f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
900080f8:	69bb      	ldr	r3, [r7, #24]
900080fa:	699b      	ldr	r3, [r3, #24]
900080fc:	2b00      	cmp	r3, #0
900080fe:	db04      	blt.n	9000810a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90008100:	69fb      	ldr	r3, [r7, #28]
90008102:	f1c3 0207 	rsb	r2, r3, #7
90008106:	69bb      	ldr	r3, [r7, #24]
90008108:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
9000810a:	69bb      	ldr	r3, [r7, #24]
9000810c:	6959      	ldr	r1, [r3, #20]
9000810e:	693a      	ldr	r2, [r7, #16]
90008110:	4613      	mov	r3, r2
90008112:	009b      	lsls	r3, r3, #2
90008114:	4413      	add	r3, r2
90008116:	009b      	lsls	r3, r3, #2
90008118:	4a19      	ldr	r2, [pc, #100]	; (90008180 <vTaskPriorityDisinheritAfterTimeout+0x114>)
9000811a:	4413      	add	r3, r2
9000811c:	4299      	cmp	r1, r3
9000811e:	d129      	bne.n	90008174 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
90008120:	69bb      	ldr	r3, [r7, #24]
90008122:	3304      	adds	r3, #4
90008124:	4618      	mov	r0, r3
90008126:	f7fe f90b 	bl	90006340 <uxListRemove>
9000812a:	4603      	mov	r3, r0
9000812c:	2b00      	cmp	r3, #0
9000812e:	d10a      	bne.n	90008146 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
90008130:	69bb      	ldr	r3, [r7, #24]
90008132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90008134:	2201      	movs	r2, #1
90008136:	fa02 f303 	lsl.w	r3, r2, r3
9000813a:	43da      	mvns	r2, r3
9000813c:	4b11      	ldr	r3, [pc, #68]	; (90008184 <vTaskPriorityDisinheritAfterTimeout+0x118>)
9000813e:	681b      	ldr	r3, [r3, #0]
90008140:	4013      	ands	r3, r2
90008142:	4a10      	ldr	r2, [pc, #64]	; (90008184 <vTaskPriorityDisinheritAfterTimeout+0x118>)
90008144:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
90008146:	69bb      	ldr	r3, [r7, #24]
90008148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000814a:	2201      	movs	r2, #1
9000814c:	409a      	lsls	r2, r3
9000814e:	4b0d      	ldr	r3, [pc, #52]	; (90008184 <vTaskPriorityDisinheritAfterTimeout+0x118>)
90008150:	681b      	ldr	r3, [r3, #0]
90008152:	4313      	orrs	r3, r2
90008154:	4a0b      	ldr	r2, [pc, #44]	; (90008184 <vTaskPriorityDisinheritAfterTimeout+0x118>)
90008156:	6013      	str	r3, [r2, #0]
90008158:	69bb      	ldr	r3, [r7, #24]
9000815a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000815c:	4613      	mov	r3, r2
9000815e:	009b      	lsls	r3, r3, #2
90008160:	4413      	add	r3, r2
90008162:	009b      	lsls	r3, r3, #2
90008164:	4a06      	ldr	r2, [pc, #24]	; (90008180 <vTaskPriorityDisinheritAfterTimeout+0x114>)
90008166:	441a      	add	r2, r3
90008168:	69bb      	ldr	r3, [r7, #24]
9000816a:	3304      	adds	r3, #4
9000816c:	4619      	mov	r1, r3
9000816e:	4610      	mov	r0, r2
90008170:	f7fe f889 	bl	90006286 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
90008174:	bf00      	nop
90008176:	3720      	adds	r7, #32
90008178:	46bd      	mov	sp, r7
9000817a:	bd80      	pop	{r7, pc}
9000817c:	2400f8bc 	.word	0x2400f8bc
90008180:	2400f8c0 	.word	0x2400f8c0
90008184:	2400f9c4 	.word	0x2400f9c4

90008188 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
90008188:	b480      	push	{r7}
9000818a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
9000818c:	4b07      	ldr	r3, [pc, #28]	; (900081ac <pvTaskIncrementMutexHeldCount+0x24>)
9000818e:	681b      	ldr	r3, [r3, #0]
90008190:	2b00      	cmp	r3, #0
90008192:	d004      	beq.n	9000819e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
90008194:	4b05      	ldr	r3, [pc, #20]	; (900081ac <pvTaskIncrementMutexHeldCount+0x24>)
90008196:	681b      	ldr	r3, [r3, #0]
90008198:	6c9a      	ldr	r2, [r3, #72]	; 0x48
9000819a:	3201      	adds	r2, #1
9000819c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
9000819e:	4b03      	ldr	r3, [pc, #12]	; (900081ac <pvTaskIncrementMutexHeldCount+0x24>)
900081a0:	681b      	ldr	r3, [r3, #0]
	}
900081a2:	4618      	mov	r0, r3
900081a4:	46bd      	mov	sp, r7
900081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
900081aa:	4770      	bx	lr
900081ac:	2400f8bc 	.word	0x2400f8bc

900081b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
900081b0:	b580      	push	{r7, lr}
900081b2:	b084      	sub	sp, #16
900081b4:	af00      	add	r7, sp, #0
900081b6:	6078      	str	r0, [r7, #4]
900081b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
900081ba:	4b29      	ldr	r3, [pc, #164]	; (90008260 <prvAddCurrentTaskToDelayedList+0xb0>)
900081bc:	681b      	ldr	r3, [r3, #0]
900081be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
900081c0:	4b28      	ldr	r3, [pc, #160]	; (90008264 <prvAddCurrentTaskToDelayedList+0xb4>)
900081c2:	681b      	ldr	r3, [r3, #0]
900081c4:	3304      	adds	r3, #4
900081c6:	4618      	mov	r0, r3
900081c8:	f7fe f8ba 	bl	90006340 <uxListRemove>
900081cc:	4603      	mov	r3, r0
900081ce:	2b00      	cmp	r3, #0
900081d0:	d10b      	bne.n	900081ea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
900081d2:	4b24      	ldr	r3, [pc, #144]	; (90008264 <prvAddCurrentTaskToDelayedList+0xb4>)
900081d4:	681b      	ldr	r3, [r3, #0]
900081d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900081d8:	2201      	movs	r2, #1
900081da:	fa02 f303 	lsl.w	r3, r2, r3
900081de:	43da      	mvns	r2, r3
900081e0:	4b21      	ldr	r3, [pc, #132]	; (90008268 <prvAddCurrentTaskToDelayedList+0xb8>)
900081e2:	681b      	ldr	r3, [r3, #0]
900081e4:	4013      	ands	r3, r2
900081e6:	4a20      	ldr	r2, [pc, #128]	; (90008268 <prvAddCurrentTaskToDelayedList+0xb8>)
900081e8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
900081ea:	687b      	ldr	r3, [r7, #4]
900081ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
900081f0:	d10a      	bne.n	90008208 <prvAddCurrentTaskToDelayedList+0x58>
900081f2:	683b      	ldr	r3, [r7, #0]
900081f4:	2b00      	cmp	r3, #0
900081f6:	d007      	beq.n	90008208 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
900081f8:	4b1a      	ldr	r3, [pc, #104]	; (90008264 <prvAddCurrentTaskToDelayedList+0xb4>)
900081fa:	681b      	ldr	r3, [r3, #0]
900081fc:	3304      	adds	r3, #4
900081fe:	4619      	mov	r1, r3
90008200:	481a      	ldr	r0, [pc, #104]	; (9000826c <prvAddCurrentTaskToDelayedList+0xbc>)
90008202:	f7fe f840 	bl	90006286 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
90008206:	e026      	b.n	90008256 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
90008208:	68fa      	ldr	r2, [r7, #12]
9000820a:	687b      	ldr	r3, [r7, #4]
9000820c:	4413      	add	r3, r2
9000820e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
90008210:	4b14      	ldr	r3, [pc, #80]	; (90008264 <prvAddCurrentTaskToDelayedList+0xb4>)
90008212:	681b      	ldr	r3, [r3, #0]
90008214:	68ba      	ldr	r2, [r7, #8]
90008216:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
90008218:	68ba      	ldr	r2, [r7, #8]
9000821a:	68fb      	ldr	r3, [r7, #12]
9000821c:	429a      	cmp	r2, r3
9000821e:	d209      	bcs.n	90008234 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
90008220:	4b13      	ldr	r3, [pc, #76]	; (90008270 <prvAddCurrentTaskToDelayedList+0xc0>)
90008222:	681a      	ldr	r2, [r3, #0]
90008224:	4b0f      	ldr	r3, [pc, #60]	; (90008264 <prvAddCurrentTaskToDelayedList+0xb4>)
90008226:	681b      	ldr	r3, [r3, #0]
90008228:	3304      	adds	r3, #4
9000822a:	4619      	mov	r1, r3
9000822c:	4610      	mov	r0, r2
9000822e:	f7fe f84e 	bl	900062ce <vListInsert>
}
90008232:	e010      	b.n	90008256 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
90008234:	4b0f      	ldr	r3, [pc, #60]	; (90008274 <prvAddCurrentTaskToDelayedList+0xc4>)
90008236:	681a      	ldr	r2, [r3, #0]
90008238:	4b0a      	ldr	r3, [pc, #40]	; (90008264 <prvAddCurrentTaskToDelayedList+0xb4>)
9000823a:	681b      	ldr	r3, [r3, #0]
9000823c:	3304      	adds	r3, #4
9000823e:	4619      	mov	r1, r3
90008240:	4610      	mov	r0, r2
90008242:	f7fe f844 	bl	900062ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
90008246:	4b0c      	ldr	r3, [pc, #48]	; (90008278 <prvAddCurrentTaskToDelayedList+0xc8>)
90008248:	681b      	ldr	r3, [r3, #0]
9000824a:	68ba      	ldr	r2, [r7, #8]
9000824c:	429a      	cmp	r2, r3
9000824e:	d202      	bcs.n	90008256 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
90008250:	4a09      	ldr	r2, [pc, #36]	; (90008278 <prvAddCurrentTaskToDelayedList+0xc8>)
90008252:	68bb      	ldr	r3, [r7, #8]
90008254:	6013      	str	r3, [r2, #0]
}
90008256:	bf00      	nop
90008258:	3710      	adds	r7, #16
9000825a:	46bd      	mov	sp, r7
9000825c:	bd80      	pop	{r7, pc}
9000825e:	bf00      	nop
90008260:	2400f9c0 	.word	0x2400f9c0
90008264:	2400f8bc 	.word	0x2400f8bc
90008268:	2400f9c4 	.word	0x2400f9c4
9000826c:	2400f9a8 	.word	0x2400f9a8
90008270:	2400f978 	.word	0x2400f978
90008274:	2400f974 	.word	0x2400f974
90008278:	2400f9dc 	.word	0x2400f9dc

9000827c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
9000827c:	b480      	push	{r7}
9000827e:	b085      	sub	sp, #20
90008280:	af00      	add	r7, sp, #0
90008282:	60f8      	str	r0, [r7, #12]
90008284:	60b9      	str	r1, [r7, #8]
90008286:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
90008288:	68fb      	ldr	r3, [r7, #12]
9000828a:	3b04      	subs	r3, #4
9000828c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
9000828e:	68fb      	ldr	r3, [r7, #12]
90008290:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
90008294:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
90008296:	68fb      	ldr	r3, [r7, #12]
90008298:	3b04      	subs	r3, #4
9000829a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
9000829c:	68bb      	ldr	r3, [r7, #8]
9000829e:	f023 0201 	bic.w	r2, r3, #1
900082a2:	68fb      	ldr	r3, [r7, #12]
900082a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
900082a6:	68fb      	ldr	r3, [r7, #12]
900082a8:	3b04      	subs	r3, #4
900082aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
900082ac:	4a0c      	ldr	r2, [pc, #48]	; (900082e0 <pxPortInitialiseStack+0x64>)
900082ae:	68fb      	ldr	r3, [r7, #12]
900082b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
900082b2:	68fb      	ldr	r3, [r7, #12]
900082b4:	3b14      	subs	r3, #20
900082b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
900082b8:	687a      	ldr	r2, [r7, #4]
900082ba:	68fb      	ldr	r3, [r7, #12]
900082bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
900082be:	68fb      	ldr	r3, [r7, #12]
900082c0:	3b04      	subs	r3, #4
900082c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
900082c4:	68fb      	ldr	r3, [r7, #12]
900082c6:	f06f 0202 	mvn.w	r2, #2
900082ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
900082cc:	68fb      	ldr	r3, [r7, #12]
900082ce:	3b20      	subs	r3, #32
900082d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
900082d2:	68fb      	ldr	r3, [r7, #12]
}
900082d4:	4618      	mov	r0, r3
900082d6:	3714      	adds	r7, #20
900082d8:	46bd      	mov	sp, r7
900082da:	f85d 7b04 	ldr.w	r7, [sp], #4
900082de:	4770      	bx	lr
900082e0:	900082e5 	.word	0x900082e5

900082e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
900082e4:	b480      	push	{r7}
900082e6:	b085      	sub	sp, #20
900082e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
900082ea:	2300      	movs	r3, #0
900082ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
900082ee:	4b12      	ldr	r3, [pc, #72]	; (90008338 <prvTaskExitError+0x54>)
900082f0:	681b      	ldr	r3, [r3, #0]
900082f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
900082f6:	d00a      	beq.n	9000830e <prvTaskExitError+0x2a>
	__asm volatile
900082f8:	f04f 0350 	mov.w	r3, #80	; 0x50
900082fc:	f383 8811 	msr	BASEPRI, r3
90008300:	f3bf 8f6f 	isb	sy
90008304:	f3bf 8f4f 	dsb	sy
90008308:	60fb      	str	r3, [r7, #12]
}
9000830a:	bf00      	nop
9000830c:	e7fe      	b.n	9000830c <prvTaskExitError+0x28>
	__asm volatile
9000830e:	f04f 0350 	mov.w	r3, #80	; 0x50
90008312:	f383 8811 	msr	BASEPRI, r3
90008316:	f3bf 8f6f 	isb	sy
9000831a:	f3bf 8f4f 	dsb	sy
9000831e:	60bb      	str	r3, [r7, #8]
}
90008320:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
90008322:	bf00      	nop
90008324:	687b      	ldr	r3, [r7, #4]
90008326:	2b00      	cmp	r3, #0
90008328:	d0fc      	beq.n	90008324 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
9000832a:	bf00      	nop
9000832c:	bf00      	nop
9000832e:	3714      	adds	r7, #20
90008330:	46bd      	mov	sp, r7
90008332:	f85d 7b04 	ldr.w	r7, [sp], #4
90008336:	4770      	bx	lr
90008338:	24000520 	.word	0x24000520
9000833c:	00000000 	.word	0x00000000

90008340 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
90008340:	4b07      	ldr	r3, [pc, #28]	; (90008360 <pxCurrentTCBConst2>)
90008342:	6819      	ldr	r1, [r3, #0]
90008344:	6808      	ldr	r0, [r1, #0]
90008346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000834a:	f380 8809 	msr	PSP, r0
9000834e:	f3bf 8f6f 	isb	sy
90008352:	f04f 0000 	mov.w	r0, #0
90008356:	f380 8811 	msr	BASEPRI, r0
9000835a:	4770      	bx	lr
9000835c:	f3af 8000 	nop.w

90008360 <pxCurrentTCBConst2>:
90008360:	2400f8bc 	.word	0x2400f8bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
90008364:	bf00      	nop
90008366:	bf00      	nop

90008368 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
90008368:	4808      	ldr	r0, [pc, #32]	; (9000838c <prvPortStartFirstTask+0x24>)
9000836a:	6800      	ldr	r0, [r0, #0]
9000836c:	6800      	ldr	r0, [r0, #0]
9000836e:	f380 8808 	msr	MSP, r0
90008372:	f04f 0000 	mov.w	r0, #0
90008376:	f380 8814 	msr	CONTROL, r0
9000837a:	b662      	cpsie	i
9000837c:	b661      	cpsie	f
9000837e:	f3bf 8f4f 	dsb	sy
90008382:	f3bf 8f6f 	isb	sy
90008386:	df00      	svc	0
90008388:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
9000838a:	bf00      	nop
9000838c:	e000ed08 	.word	0xe000ed08

90008390 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
90008390:	b580      	push	{r7, lr}
90008392:	b086      	sub	sp, #24
90008394:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
90008396:	4b46      	ldr	r3, [pc, #280]	; (900084b0 <xPortStartScheduler+0x120>)
90008398:	681b      	ldr	r3, [r3, #0]
9000839a:	4a46      	ldr	r2, [pc, #280]	; (900084b4 <xPortStartScheduler+0x124>)
9000839c:	4293      	cmp	r3, r2
9000839e:	d10a      	bne.n	900083b6 <xPortStartScheduler+0x26>
	__asm volatile
900083a0:	f04f 0350 	mov.w	r3, #80	; 0x50
900083a4:	f383 8811 	msr	BASEPRI, r3
900083a8:	f3bf 8f6f 	isb	sy
900083ac:	f3bf 8f4f 	dsb	sy
900083b0:	613b      	str	r3, [r7, #16]
}
900083b2:	bf00      	nop
900083b4:	e7fe      	b.n	900083b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
900083b6:	4b3e      	ldr	r3, [pc, #248]	; (900084b0 <xPortStartScheduler+0x120>)
900083b8:	681b      	ldr	r3, [r3, #0]
900083ba:	4a3f      	ldr	r2, [pc, #252]	; (900084b8 <xPortStartScheduler+0x128>)
900083bc:	4293      	cmp	r3, r2
900083be:	d10a      	bne.n	900083d6 <xPortStartScheduler+0x46>
	__asm volatile
900083c0:	f04f 0350 	mov.w	r3, #80	; 0x50
900083c4:	f383 8811 	msr	BASEPRI, r3
900083c8:	f3bf 8f6f 	isb	sy
900083cc:	f3bf 8f4f 	dsb	sy
900083d0:	60fb      	str	r3, [r7, #12]
}
900083d2:	bf00      	nop
900083d4:	e7fe      	b.n	900083d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
900083d6:	4b39      	ldr	r3, [pc, #228]	; (900084bc <xPortStartScheduler+0x12c>)
900083d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
900083da:	697b      	ldr	r3, [r7, #20]
900083dc:	781b      	ldrb	r3, [r3, #0]
900083de:	b2db      	uxtb	r3, r3
900083e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
900083e2:	697b      	ldr	r3, [r7, #20]
900083e4:	22ff      	movs	r2, #255	; 0xff
900083e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
900083e8:	697b      	ldr	r3, [r7, #20]
900083ea:	781b      	ldrb	r3, [r3, #0]
900083ec:	b2db      	uxtb	r3, r3
900083ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
900083f0:	78fb      	ldrb	r3, [r7, #3]
900083f2:	b2db      	uxtb	r3, r3
900083f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
900083f8:	b2da      	uxtb	r2, r3
900083fa:	4b31      	ldr	r3, [pc, #196]	; (900084c0 <xPortStartScheduler+0x130>)
900083fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
900083fe:	4b31      	ldr	r3, [pc, #196]	; (900084c4 <xPortStartScheduler+0x134>)
90008400:	2207      	movs	r2, #7
90008402:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
90008404:	e009      	b.n	9000841a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
90008406:	4b2f      	ldr	r3, [pc, #188]	; (900084c4 <xPortStartScheduler+0x134>)
90008408:	681b      	ldr	r3, [r3, #0]
9000840a:	3b01      	subs	r3, #1
9000840c:	4a2d      	ldr	r2, [pc, #180]	; (900084c4 <xPortStartScheduler+0x134>)
9000840e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
90008410:	78fb      	ldrb	r3, [r7, #3]
90008412:	b2db      	uxtb	r3, r3
90008414:	005b      	lsls	r3, r3, #1
90008416:	b2db      	uxtb	r3, r3
90008418:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000841a:	78fb      	ldrb	r3, [r7, #3]
9000841c:	b2db      	uxtb	r3, r3
9000841e:	f003 0380 	and.w	r3, r3, #128	; 0x80
90008422:	2b80      	cmp	r3, #128	; 0x80
90008424:	d0ef      	beq.n	90008406 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
90008426:	4b27      	ldr	r3, [pc, #156]	; (900084c4 <xPortStartScheduler+0x134>)
90008428:	681b      	ldr	r3, [r3, #0]
9000842a:	f1c3 0307 	rsb	r3, r3, #7
9000842e:	2b04      	cmp	r3, #4
90008430:	d00a      	beq.n	90008448 <xPortStartScheduler+0xb8>
	__asm volatile
90008432:	f04f 0350 	mov.w	r3, #80	; 0x50
90008436:	f383 8811 	msr	BASEPRI, r3
9000843a:	f3bf 8f6f 	isb	sy
9000843e:	f3bf 8f4f 	dsb	sy
90008442:	60bb      	str	r3, [r7, #8]
}
90008444:	bf00      	nop
90008446:	e7fe      	b.n	90008446 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
90008448:	4b1e      	ldr	r3, [pc, #120]	; (900084c4 <xPortStartScheduler+0x134>)
9000844a:	681b      	ldr	r3, [r3, #0]
9000844c:	021b      	lsls	r3, r3, #8
9000844e:	4a1d      	ldr	r2, [pc, #116]	; (900084c4 <xPortStartScheduler+0x134>)
90008450:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
90008452:	4b1c      	ldr	r3, [pc, #112]	; (900084c4 <xPortStartScheduler+0x134>)
90008454:	681b      	ldr	r3, [r3, #0]
90008456:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
9000845a:	4a1a      	ldr	r2, [pc, #104]	; (900084c4 <xPortStartScheduler+0x134>)
9000845c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
9000845e:	687b      	ldr	r3, [r7, #4]
90008460:	b2da      	uxtb	r2, r3
90008462:	697b      	ldr	r3, [r7, #20]
90008464:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
90008466:	4b18      	ldr	r3, [pc, #96]	; (900084c8 <xPortStartScheduler+0x138>)
90008468:	681b      	ldr	r3, [r3, #0]
9000846a:	4a17      	ldr	r2, [pc, #92]	; (900084c8 <xPortStartScheduler+0x138>)
9000846c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
90008470:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
90008472:	4b15      	ldr	r3, [pc, #84]	; (900084c8 <xPortStartScheduler+0x138>)
90008474:	681b      	ldr	r3, [r3, #0]
90008476:	4a14      	ldr	r2, [pc, #80]	; (900084c8 <xPortStartScheduler+0x138>)
90008478:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
9000847c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
9000847e:	f000 f8dd 	bl	9000863c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
90008482:	4b12      	ldr	r3, [pc, #72]	; (900084cc <xPortStartScheduler+0x13c>)
90008484:	2200      	movs	r2, #0
90008486:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
90008488:	f000 f8fc 	bl	90008684 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
9000848c:	4b10      	ldr	r3, [pc, #64]	; (900084d0 <xPortStartScheduler+0x140>)
9000848e:	681b      	ldr	r3, [r3, #0]
90008490:	4a0f      	ldr	r2, [pc, #60]	; (900084d0 <xPortStartScheduler+0x140>)
90008492:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
90008496:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
90008498:	f7ff ff66 	bl	90008368 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
9000849c:	f7ff fa86 	bl	900079ac <vTaskSwitchContext>
	prvTaskExitError();
900084a0:	f7ff ff20 	bl	900082e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
900084a4:	2300      	movs	r3, #0
}
900084a6:	4618      	mov	r0, r3
900084a8:	3718      	adds	r7, #24
900084aa:	46bd      	mov	sp, r7
900084ac:	bd80      	pop	{r7, pc}
900084ae:	bf00      	nop
900084b0:	e000ed00 	.word	0xe000ed00
900084b4:	410fc271 	.word	0x410fc271
900084b8:	410fc270 	.word	0x410fc270
900084bc:	e000e400 	.word	0xe000e400
900084c0:	2400f9e8 	.word	0x2400f9e8
900084c4:	2400f9ec 	.word	0x2400f9ec
900084c8:	e000ed20 	.word	0xe000ed20
900084cc:	24000520 	.word	0x24000520
900084d0:	e000ef34 	.word	0xe000ef34

900084d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
900084d4:	b480      	push	{r7}
900084d6:	b083      	sub	sp, #12
900084d8:	af00      	add	r7, sp, #0
	__asm volatile
900084da:	f04f 0350 	mov.w	r3, #80	; 0x50
900084de:	f383 8811 	msr	BASEPRI, r3
900084e2:	f3bf 8f6f 	isb	sy
900084e6:	f3bf 8f4f 	dsb	sy
900084ea:	607b      	str	r3, [r7, #4]
}
900084ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
900084ee:	4b0f      	ldr	r3, [pc, #60]	; (9000852c <vPortEnterCritical+0x58>)
900084f0:	681b      	ldr	r3, [r3, #0]
900084f2:	3301      	adds	r3, #1
900084f4:	4a0d      	ldr	r2, [pc, #52]	; (9000852c <vPortEnterCritical+0x58>)
900084f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
900084f8:	4b0c      	ldr	r3, [pc, #48]	; (9000852c <vPortEnterCritical+0x58>)
900084fa:	681b      	ldr	r3, [r3, #0]
900084fc:	2b01      	cmp	r3, #1
900084fe:	d10f      	bne.n	90008520 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
90008500:	4b0b      	ldr	r3, [pc, #44]	; (90008530 <vPortEnterCritical+0x5c>)
90008502:	681b      	ldr	r3, [r3, #0]
90008504:	b2db      	uxtb	r3, r3
90008506:	2b00      	cmp	r3, #0
90008508:	d00a      	beq.n	90008520 <vPortEnterCritical+0x4c>
	__asm volatile
9000850a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000850e:	f383 8811 	msr	BASEPRI, r3
90008512:	f3bf 8f6f 	isb	sy
90008516:	f3bf 8f4f 	dsb	sy
9000851a:	603b      	str	r3, [r7, #0]
}
9000851c:	bf00      	nop
9000851e:	e7fe      	b.n	9000851e <vPortEnterCritical+0x4a>
	}
}
90008520:	bf00      	nop
90008522:	370c      	adds	r7, #12
90008524:	46bd      	mov	sp, r7
90008526:	f85d 7b04 	ldr.w	r7, [sp], #4
9000852a:	4770      	bx	lr
9000852c:	24000520 	.word	0x24000520
90008530:	e000ed04 	.word	0xe000ed04

90008534 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
90008534:	b480      	push	{r7}
90008536:	b083      	sub	sp, #12
90008538:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
9000853a:	4b12      	ldr	r3, [pc, #72]	; (90008584 <vPortExitCritical+0x50>)
9000853c:	681b      	ldr	r3, [r3, #0]
9000853e:	2b00      	cmp	r3, #0
90008540:	d10a      	bne.n	90008558 <vPortExitCritical+0x24>
	__asm volatile
90008542:	f04f 0350 	mov.w	r3, #80	; 0x50
90008546:	f383 8811 	msr	BASEPRI, r3
9000854a:	f3bf 8f6f 	isb	sy
9000854e:	f3bf 8f4f 	dsb	sy
90008552:	607b      	str	r3, [r7, #4]
}
90008554:	bf00      	nop
90008556:	e7fe      	b.n	90008556 <vPortExitCritical+0x22>
	uxCriticalNesting--;
90008558:	4b0a      	ldr	r3, [pc, #40]	; (90008584 <vPortExitCritical+0x50>)
9000855a:	681b      	ldr	r3, [r3, #0]
9000855c:	3b01      	subs	r3, #1
9000855e:	4a09      	ldr	r2, [pc, #36]	; (90008584 <vPortExitCritical+0x50>)
90008560:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
90008562:	4b08      	ldr	r3, [pc, #32]	; (90008584 <vPortExitCritical+0x50>)
90008564:	681b      	ldr	r3, [r3, #0]
90008566:	2b00      	cmp	r3, #0
90008568:	d105      	bne.n	90008576 <vPortExitCritical+0x42>
9000856a:	2300      	movs	r3, #0
9000856c:	603b      	str	r3, [r7, #0]
	__asm volatile
9000856e:	683b      	ldr	r3, [r7, #0]
90008570:	f383 8811 	msr	BASEPRI, r3
}
90008574:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
90008576:	bf00      	nop
90008578:	370c      	adds	r7, #12
9000857a:	46bd      	mov	sp, r7
9000857c:	f85d 7b04 	ldr.w	r7, [sp], #4
90008580:	4770      	bx	lr
90008582:	bf00      	nop
90008584:	24000520 	.word	0x24000520
	...

90008590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
90008590:	f3ef 8009 	mrs	r0, PSP
90008594:	f3bf 8f6f 	isb	sy
90008598:	4b15      	ldr	r3, [pc, #84]	; (900085f0 <pxCurrentTCBConst>)
9000859a:	681a      	ldr	r2, [r3, #0]
9000859c:	f01e 0f10 	tst.w	lr, #16
900085a0:	bf08      	it	eq
900085a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
900085a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900085aa:	6010      	str	r0, [r2, #0]
900085ac:	e92d 0009 	stmdb	sp!, {r0, r3}
900085b0:	f04f 0050 	mov.w	r0, #80	; 0x50
900085b4:	f380 8811 	msr	BASEPRI, r0
900085b8:	f3bf 8f4f 	dsb	sy
900085bc:	f3bf 8f6f 	isb	sy
900085c0:	f7ff f9f4 	bl	900079ac <vTaskSwitchContext>
900085c4:	f04f 0000 	mov.w	r0, #0
900085c8:	f380 8811 	msr	BASEPRI, r0
900085cc:	bc09      	pop	{r0, r3}
900085ce:	6819      	ldr	r1, [r3, #0]
900085d0:	6808      	ldr	r0, [r1, #0]
900085d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900085d6:	f01e 0f10 	tst.w	lr, #16
900085da:	bf08      	it	eq
900085dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
900085e0:	f380 8809 	msr	PSP, r0
900085e4:	f3bf 8f6f 	isb	sy
900085e8:	4770      	bx	lr
900085ea:	bf00      	nop
900085ec:	f3af 8000 	nop.w

900085f0 <pxCurrentTCBConst>:
900085f0:	2400f8bc 	.word	0x2400f8bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
900085f4:	bf00      	nop
900085f6:	bf00      	nop

900085f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
900085f8:	b580      	push	{r7, lr}
900085fa:	b082      	sub	sp, #8
900085fc:	af00      	add	r7, sp, #0
	__asm volatile
900085fe:	f04f 0350 	mov.w	r3, #80	; 0x50
90008602:	f383 8811 	msr	BASEPRI, r3
90008606:	f3bf 8f6f 	isb	sy
9000860a:	f3bf 8f4f 	dsb	sy
9000860e:	607b      	str	r3, [r7, #4]
}
90008610:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
90008612:	f7ff f913 	bl	9000783c <xTaskIncrementTick>
90008616:	4603      	mov	r3, r0
90008618:	2b00      	cmp	r3, #0
9000861a:	d003      	beq.n	90008624 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
9000861c:	4b06      	ldr	r3, [pc, #24]	; (90008638 <SysTick_Handler+0x40>)
9000861e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90008622:	601a      	str	r2, [r3, #0]
90008624:	2300      	movs	r3, #0
90008626:	603b      	str	r3, [r7, #0]
	__asm volatile
90008628:	683b      	ldr	r3, [r7, #0]
9000862a:	f383 8811 	msr	BASEPRI, r3
}
9000862e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
90008630:	bf00      	nop
90008632:	3708      	adds	r7, #8
90008634:	46bd      	mov	sp, r7
90008636:	bd80      	pop	{r7, pc}
90008638:	e000ed04 	.word	0xe000ed04

9000863c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
9000863c:	b480      	push	{r7}
9000863e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
90008640:	4b0b      	ldr	r3, [pc, #44]	; (90008670 <vPortSetupTimerInterrupt+0x34>)
90008642:	2200      	movs	r2, #0
90008644:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
90008646:	4b0b      	ldr	r3, [pc, #44]	; (90008674 <vPortSetupTimerInterrupt+0x38>)
90008648:	2200      	movs	r2, #0
9000864a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000864c:	4b0a      	ldr	r3, [pc, #40]	; (90008678 <vPortSetupTimerInterrupt+0x3c>)
9000864e:	681b      	ldr	r3, [r3, #0]
90008650:	4a0a      	ldr	r2, [pc, #40]	; (9000867c <vPortSetupTimerInterrupt+0x40>)
90008652:	fba2 2303 	umull	r2, r3, r2, r3
90008656:	099b      	lsrs	r3, r3, #6
90008658:	4a09      	ldr	r2, [pc, #36]	; (90008680 <vPortSetupTimerInterrupt+0x44>)
9000865a:	3b01      	subs	r3, #1
9000865c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
9000865e:	4b04      	ldr	r3, [pc, #16]	; (90008670 <vPortSetupTimerInterrupt+0x34>)
90008660:	2207      	movs	r2, #7
90008662:	601a      	str	r2, [r3, #0]
}
90008664:	bf00      	nop
90008666:	46bd      	mov	sp, r7
90008668:	f85d 7b04 	ldr.w	r7, [sp], #4
9000866c:	4770      	bx	lr
9000866e:	bf00      	nop
90008670:	e000e010 	.word	0xe000e010
90008674:	e000e018 	.word	0xe000e018
90008678:	240004fc 	.word	0x240004fc
9000867c:	10624dd3 	.word	0x10624dd3
90008680:	e000e014 	.word	0xe000e014

90008684 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
90008684:	f8df 000c 	ldr.w	r0, [pc, #12]	; 90008694 <vPortEnableVFP+0x10>
90008688:	6801      	ldr	r1, [r0, #0]
9000868a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
9000868e:	6001      	str	r1, [r0, #0]
90008690:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
90008692:	bf00      	nop
90008694:	e000ed88 	.word	0xe000ed88

90008698 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
90008698:	b480      	push	{r7}
9000869a:	b085      	sub	sp, #20
9000869c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
9000869e:	f3ef 8305 	mrs	r3, IPSR
900086a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
900086a4:	68fb      	ldr	r3, [r7, #12]
900086a6:	2b0f      	cmp	r3, #15
900086a8:	d914      	bls.n	900086d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
900086aa:	4a17      	ldr	r2, [pc, #92]	; (90008708 <vPortValidateInterruptPriority+0x70>)
900086ac:	68fb      	ldr	r3, [r7, #12]
900086ae:	4413      	add	r3, r2
900086b0:	781b      	ldrb	r3, [r3, #0]
900086b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
900086b4:	4b15      	ldr	r3, [pc, #84]	; (9000870c <vPortValidateInterruptPriority+0x74>)
900086b6:	781b      	ldrb	r3, [r3, #0]
900086b8:	7afa      	ldrb	r2, [r7, #11]
900086ba:	429a      	cmp	r2, r3
900086bc:	d20a      	bcs.n	900086d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
900086be:	f04f 0350 	mov.w	r3, #80	; 0x50
900086c2:	f383 8811 	msr	BASEPRI, r3
900086c6:	f3bf 8f6f 	isb	sy
900086ca:	f3bf 8f4f 	dsb	sy
900086ce:	607b      	str	r3, [r7, #4]
}
900086d0:	bf00      	nop
900086d2:	e7fe      	b.n	900086d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
900086d4:	4b0e      	ldr	r3, [pc, #56]	; (90008710 <vPortValidateInterruptPriority+0x78>)
900086d6:	681b      	ldr	r3, [r3, #0]
900086d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
900086dc:	4b0d      	ldr	r3, [pc, #52]	; (90008714 <vPortValidateInterruptPriority+0x7c>)
900086de:	681b      	ldr	r3, [r3, #0]
900086e0:	429a      	cmp	r2, r3
900086e2:	d90a      	bls.n	900086fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
900086e4:	f04f 0350 	mov.w	r3, #80	; 0x50
900086e8:	f383 8811 	msr	BASEPRI, r3
900086ec:	f3bf 8f6f 	isb	sy
900086f0:	f3bf 8f4f 	dsb	sy
900086f4:	603b      	str	r3, [r7, #0]
}
900086f6:	bf00      	nop
900086f8:	e7fe      	b.n	900086f8 <vPortValidateInterruptPriority+0x60>
	}
900086fa:	bf00      	nop
900086fc:	3714      	adds	r7, #20
900086fe:	46bd      	mov	sp, r7
90008700:	f85d 7b04 	ldr.w	r7, [sp], #4
90008704:	4770      	bx	lr
90008706:	bf00      	nop
90008708:	e000e3f0 	.word	0xe000e3f0
9000870c:	2400f9e8 	.word	0x2400f9e8
90008710:	e000ed0c 	.word	0xe000ed0c
90008714:	2400f9ec 	.word	0x2400f9ec

90008718 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
90008718:	b580      	push	{r7, lr}
9000871a:	b08a      	sub	sp, #40	; 0x28
9000871c:	af00      	add	r7, sp, #0
9000871e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
90008720:	2300      	movs	r3, #0
90008722:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
90008724:	f7fe ffbe 	bl	900076a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
90008728:	4b5b      	ldr	r3, [pc, #364]	; (90008898 <pvPortMalloc+0x180>)
9000872a:	681b      	ldr	r3, [r3, #0]
9000872c:	2b00      	cmp	r3, #0
9000872e:	d101      	bne.n	90008734 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
90008730:	f000 f920 	bl	90008974 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
90008734:	4b59      	ldr	r3, [pc, #356]	; (9000889c <pvPortMalloc+0x184>)
90008736:	681a      	ldr	r2, [r3, #0]
90008738:	687b      	ldr	r3, [r7, #4]
9000873a:	4013      	ands	r3, r2
9000873c:	2b00      	cmp	r3, #0
9000873e:	f040 8093 	bne.w	90008868 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
90008742:	687b      	ldr	r3, [r7, #4]
90008744:	2b00      	cmp	r3, #0
90008746:	d01d      	beq.n	90008784 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
90008748:	2208      	movs	r2, #8
9000874a:	687b      	ldr	r3, [r7, #4]
9000874c:	4413      	add	r3, r2
9000874e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
90008750:	687b      	ldr	r3, [r7, #4]
90008752:	f003 0307 	and.w	r3, r3, #7
90008756:	2b00      	cmp	r3, #0
90008758:	d014      	beq.n	90008784 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
9000875a:	687b      	ldr	r3, [r7, #4]
9000875c:	f023 0307 	bic.w	r3, r3, #7
90008760:	3308      	adds	r3, #8
90008762:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
90008764:	687b      	ldr	r3, [r7, #4]
90008766:	f003 0307 	and.w	r3, r3, #7
9000876a:	2b00      	cmp	r3, #0
9000876c:	d00a      	beq.n	90008784 <pvPortMalloc+0x6c>
	__asm volatile
9000876e:	f04f 0350 	mov.w	r3, #80	; 0x50
90008772:	f383 8811 	msr	BASEPRI, r3
90008776:	f3bf 8f6f 	isb	sy
9000877a:	f3bf 8f4f 	dsb	sy
9000877e:	617b      	str	r3, [r7, #20]
}
90008780:	bf00      	nop
90008782:	e7fe      	b.n	90008782 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
90008784:	687b      	ldr	r3, [r7, #4]
90008786:	2b00      	cmp	r3, #0
90008788:	d06e      	beq.n	90008868 <pvPortMalloc+0x150>
9000878a:	4b45      	ldr	r3, [pc, #276]	; (900088a0 <pvPortMalloc+0x188>)
9000878c:	681b      	ldr	r3, [r3, #0]
9000878e:	687a      	ldr	r2, [r7, #4]
90008790:	429a      	cmp	r2, r3
90008792:	d869      	bhi.n	90008868 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
90008794:	4b43      	ldr	r3, [pc, #268]	; (900088a4 <pvPortMalloc+0x18c>)
90008796:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
90008798:	4b42      	ldr	r3, [pc, #264]	; (900088a4 <pvPortMalloc+0x18c>)
9000879a:	681b      	ldr	r3, [r3, #0]
9000879c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
9000879e:	e004      	b.n	900087aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
900087a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900087a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
900087a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900087a6:	681b      	ldr	r3, [r3, #0]
900087a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
900087aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900087ac:	685b      	ldr	r3, [r3, #4]
900087ae:	687a      	ldr	r2, [r7, #4]
900087b0:	429a      	cmp	r2, r3
900087b2:	d903      	bls.n	900087bc <pvPortMalloc+0xa4>
900087b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900087b6:	681b      	ldr	r3, [r3, #0]
900087b8:	2b00      	cmp	r3, #0
900087ba:	d1f1      	bne.n	900087a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
900087bc:	4b36      	ldr	r3, [pc, #216]	; (90008898 <pvPortMalloc+0x180>)
900087be:	681b      	ldr	r3, [r3, #0]
900087c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
900087c2:	429a      	cmp	r2, r3
900087c4:	d050      	beq.n	90008868 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
900087c6:	6a3b      	ldr	r3, [r7, #32]
900087c8:	681b      	ldr	r3, [r3, #0]
900087ca:	2208      	movs	r2, #8
900087cc:	4413      	add	r3, r2
900087ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
900087d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900087d2:	681a      	ldr	r2, [r3, #0]
900087d4:	6a3b      	ldr	r3, [r7, #32]
900087d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
900087d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900087da:	685a      	ldr	r2, [r3, #4]
900087dc:	687b      	ldr	r3, [r7, #4]
900087de:	1ad2      	subs	r2, r2, r3
900087e0:	2308      	movs	r3, #8
900087e2:	005b      	lsls	r3, r3, #1
900087e4:	429a      	cmp	r2, r3
900087e6:	d91f      	bls.n	90008828 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
900087e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
900087ea:	687b      	ldr	r3, [r7, #4]
900087ec:	4413      	add	r3, r2
900087ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
900087f0:	69bb      	ldr	r3, [r7, #24]
900087f2:	f003 0307 	and.w	r3, r3, #7
900087f6:	2b00      	cmp	r3, #0
900087f8:	d00a      	beq.n	90008810 <pvPortMalloc+0xf8>
	__asm volatile
900087fa:	f04f 0350 	mov.w	r3, #80	; 0x50
900087fe:	f383 8811 	msr	BASEPRI, r3
90008802:	f3bf 8f6f 	isb	sy
90008806:	f3bf 8f4f 	dsb	sy
9000880a:	613b      	str	r3, [r7, #16]
}
9000880c:	bf00      	nop
9000880e:	e7fe      	b.n	9000880e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
90008810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90008812:	685a      	ldr	r2, [r3, #4]
90008814:	687b      	ldr	r3, [r7, #4]
90008816:	1ad2      	subs	r2, r2, r3
90008818:	69bb      	ldr	r3, [r7, #24]
9000881a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
9000881c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000881e:	687a      	ldr	r2, [r7, #4]
90008820:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
90008822:	69b8      	ldr	r0, [r7, #24]
90008824:	f000 f908 	bl	90008a38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
90008828:	4b1d      	ldr	r3, [pc, #116]	; (900088a0 <pvPortMalloc+0x188>)
9000882a:	681a      	ldr	r2, [r3, #0]
9000882c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000882e:	685b      	ldr	r3, [r3, #4]
90008830:	1ad3      	subs	r3, r2, r3
90008832:	4a1b      	ldr	r2, [pc, #108]	; (900088a0 <pvPortMalloc+0x188>)
90008834:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
90008836:	4b1a      	ldr	r3, [pc, #104]	; (900088a0 <pvPortMalloc+0x188>)
90008838:	681a      	ldr	r2, [r3, #0]
9000883a:	4b1b      	ldr	r3, [pc, #108]	; (900088a8 <pvPortMalloc+0x190>)
9000883c:	681b      	ldr	r3, [r3, #0]
9000883e:	429a      	cmp	r2, r3
90008840:	d203      	bcs.n	9000884a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
90008842:	4b17      	ldr	r3, [pc, #92]	; (900088a0 <pvPortMalloc+0x188>)
90008844:	681b      	ldr	r3, [r3, #0]
90008846:	4a18      	ldr	r2, [pc, #96]	; (900088a8 <pvPortMalloc+0x190>)
90008848:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
9000884a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000884c:	685a      	ldr	r2, [r3, #4]
9000884e:	4b13      	ldr	r3, [pc, #76]	; (9000889c <pvPortMalloc+0x184>)
90008850:	681b      	ldr	r3, [r3, #0]
90008852:	431a      	orrs	r2, r3
90008854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90008856:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
90008858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000885a:	2200      	movs	r2, #0
9000885c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
9000885e:	4b13      	ldr	r3, [pc, #76]	; (900088ac <pvPortMalloc+0x194>)
90008860:	681b      	ldr	r3, [r3, #0]
90008862:	3301      	adds	r3, #1
90008864:	4a11      	ldr	r2, [pc, #68]	; (900088ac <pvPortMalloc+0x194>)
90008866:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
90008868:	f7fe ff2a 	bl	900076c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
9000886c:	69fb      	ldr	r3, [r7, #28]
9000886e:	f003 0307 	and.w	r3, r3, #7
90008872:	2b00      	cmp	r3, #0
90008874:	d00a      	beq.n	9000888c <pvPortMalloc+0x174>
	__asm volatile
90008876:	f04f 0350 	mov.w	r3, #80	; 0x50
9000887a:	f383 8811 	msr	BASEPRI, r3
9000887e:	f3bf 8f6f 	isb	sy
90008882:	f3bf 8f4f 	dsb	sy
90008886:	60fb      	str	r3, [r7, #12]
}
90008888:	bf00      	nop
9000888a:	e7fe      	b.n	9000888a <pvPortMalloc+0x172>
	return pvReturn;
9000888c:	69fb      	ldr	r3, [r7, #28]
}
9000888e:	4618      	mov	r0, r3
90008890:	3728      	adds	r7, #40	; 0x28
90008892:	46bd      	mov	sp, r7
90008894:	bd80      	pop	{r7, pc}
90008896:	bf00      	nop
90008898:	2401bd48 	.word	0x2401bd48
9000889c:	2401bd5c 	.word	0x2401bd5c
900088a0:	2401bd4c 	.word	0x2401bd4c
900088a4:	2401bd40 	.word	0x2401bd40
900088a8:	2401bd50 	.word	0x2401bd50
900088ac:	2401bd54 	.word	0x2401bd54

900088b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
900088b0:	b580      	push	{r7, lr}
900088b2:	b086      	sub	sp, #24
900088b4:	af00      	add	r7, sp, #0
900088b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
900088b8:	687b      	ldr	r3, [r7, #4]
900088ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
900088bc:	687b      	ldr	r3, [r7, #4]
900088be:	2b00      	cmp	r3, #0
900088c0:	d04d      	beq.n	9000895e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
900088c2:	2308      	movs	r3, #8
900088c4:	425b      	negs	r3, r3
900088c6:	697a      	ldr	r2, [r7, #20]
900088c8:	4413      	add	r3, r2
900088ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
900088cc:	697b      	ldr	r3, [r7, #20]
900088ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
900088d0:	693b      	ldr	r3, [r7, #16]
900088d2:	685a      	ldr	r2, [r3, #4]
900088d4:	4b24      	ldr	r3, [pc, #144]	; (90008968 <vPortFree+0xb8>)
900088d6:	681b      	ldr	r3, [r3, #0]
900088d8:	4013      	ands	r3, r2
900088da:	2b00      	cmp	r3, #0
900088dc:	d10a      	bne.n	900088f4 <vPortFree+0x44>
	__asm volatile
900088de:	f04f 0350 	mov.w	r3, #80	; 0x50
900088e2:	f383 8811 	msr	BASEPRI, r3
900088e6:	f3bf 8f6f 	isb	sy
900088ea:	f3bf 8f4f 	dsb	sy
900088ee:	60fb      	str	r3, [r7, #12]
}
900088f0:	bf00      	nop
900088f2:	e7fe      	b.n	900088f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
900088f4:	693b      	ldr	r3, [r7, #16]
900088f6:	681b      	ldr	r3, [r3, #0]
900088f8:	2b00      	cmp	r3, #0
900088fa:	d00a      	beq.n	90008912 <vPortFree+0x62>
	__asm volatile
900088fc:	f04f 0350 	mov.w	r3, #80	; 0x50
90008900:	f383 8811 	msr	BASEPRI, r3
90008904:	f3bf 8f6f 	isb	sy
90008908:	f3bf 8f4f 	dsb	sy
9000890c:	60bb      	str	r3, [r7, #8]
}
9000890e:	bf00      	nop
90008910:	e7fe      	b.n	90008910 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
90008912:	693b      	ldr	r3, [r7, #16]
90008914:	685a      	ldr	r2, [r3, #4]
90008916:	4b14      	ldr	r3, [pc, #80]	; (90008968 <vPortFree+0xb8>)
90008918:	681b      	ldr	r3, [r3, #0]
9000891a:	4013      	ands	r3, r2
9000891c:	2b00      	cmp	r3, #0
9000891e:	d01e      	beq.n	9000895e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
90008920:	693b      	ldr	r3, [r7, #16]
90008922:	681b      	ldr	r3, [r3, #0]
90008924:	2b00      	cmp	r3, #0
90008926:	d11a      	bne.n	9000895e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
90008928:	693b      	ldr	r3, [r7, #16]
9000892a:	685a      	ldr	r2, [r3, #4]
9000892c:	4b0e      	ldr	r3, [pc, #56]	; (90008968 <vPortFree+0xb8>)
9000892e:	681b      	ldr	r3, [r3, #0]
90008930:	43db      	mvns	r3, r3
90008932:	401a      	ands	r2, r3
90008934:	693b      	ldr	r3, [r7, #16]
90008936:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
90008938:	f7fe feb4 	bl	900076a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
9000893c:	693b      	ldr	r3, [r7, #16]
9000893e:	685a      	ldr	r2, [r3, #4]
90008940:	4b0a      	ldr	r3, [pc, #40]	; (9000896c <vPortFree+0xbc>)
90008942:	681b      	ldr	r3, [r3, #0]
90008944:	4413      	add	r3, r2
90008946:	4a09      	ldr	r2, [pc, #36]	; (9000896c <vPortFree+0xbc>)
90008948:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
9000894a:	6938      	ldr	r0, [r7, #16]
9000894c:	f000 f874 	bl	90008a38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
90008950:	4b07      	ldr	r3, [pc, #28]	; (90008970 <vPortFree+0xc0>)
90008952:	681b      	ldr	r3, [r3, #0]
90008954:	3301      	adds	r3, #1
90008956:	4a06      	ldr	r2, [pc, #24]	; (90008970 <vPortFree+0xc0>)
90008958:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
9000895a:	f7fe feb1 	bl	900076c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
9000895e:	bf00      	nop
90008960:	3718      	adds	r7, #24
90008962:	46bd      	mov	sp, r7
90008964:	bd80      	pop	{r7, pc}
90008966:	bf00      	nop
90008968:	2401bd5c 	.word	0x2401bd5c
9000896c:	2401bd4c 	.word	0x2401bd4c
90008970:	2401bd58 	.word	0x2401bd58

90008974 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
90008974:	b480      	push	{r7}
90008976:	b085      	sub	sp, #20
90008978:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
9000897a:	f24c 3350 	movw	r3, #50000	; 0xc350
9000897e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
90008980:	4b27      	ldr	r3, [pc, #156]	; (90008a20 <prvHeapInit+0xac>)
90008982:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
90008984:	68fb      	ldr	r3, [r7, #12]
90008986:	f003 0307 	and.w	r3, r3, #7
9000898a:	2b00      	cmp	r3, #0
9000898c:	d00c      	beq.n	900089a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
9000898e:	68fb      	ldr	r3, [r7, #12]
90008990:	3307      	adds	r3, #7
90008992:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
90008994:	68fb      	ldr	r3, [r7, #12]
90008996:	f023 0307 	bic.w	r3, r3, #7
9000899a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
9000899c:	68ba      	ldr	r2, [r7, #8]
9000899e:	68fb      	ldr	r3, [r7, #12]
900089a0:	1ad3      	subs	r3, r2, r3
900089a2:	4a1f      	ldr	r2, [pc, #124]	; (90008a20 <prvHeapInit+0xac>)
900089a4:	4413      	add	r3, r2
900089a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
900089a8:	68fb      	ldr	r3, [r7, #12]
900089aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
900089ac:	4a1d      	ldr	r2, [pc, #116]	; (90008a24 <prvHeapInit+0xb0>)
900089ae:	687b      	ldr	r3, [r7, #4]
900089b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
900089b2:	4b1c      	ldr	r3, [pc, #112]	; (90008a24 <prvHeapInit+0xb0>)
900089b4:	2200      	movs	r2, #0
900089b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
900089b8:	687b      	ldr	r3, [r7, #4]
900089ba:	68ba      	ldr	r2, [r7, #8]
900089bc:	4413      	add	r3, r2
900089be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
900089c0:	2208      	movs	r2, #8
900089c2:	68fb      	ldr	r3, [r7, #12]
900089c4:	1a9b      	subs	r3, r3, r2
900089c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
900089c8:	68fb      	ldr	r3, [r7, #12]
900089ca:	f023 0307 	bic.w	r3, r3, #7
900089ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
900089d0:	68fb      	ldr	r3, [r7, #12]
900089d2:	4a15      	ldr	r2, [pc, #84]	; (90008a28 <prvHeapInit+0xb4>)
900089d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
900089d6:	4b14      	ldr	r3, [pc, #80]	; (90008a28 <prvHeapInit+0xb4>)
900089d8:	681b      	ldr	r3, [r3, #0]
900089da:	2200      	movs	r2, #0
900089dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
900089de:	4b12      	ldr	r3, [pc, #72]	; (90008a28 <prvHeapInit+0xb4>)
900089e0:	681b      	ldr	r3, [r3, #0]
900089e2:	2200      	movs	r2, #0
900089e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
900089e6:	687b      	ldr	r3, [r7, #4]
900089e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
900089ea:	683b      	ldr	r3, [r7, #0]
900089ec:	68fa      	ldr	r2, [r7, #12]
900089ee:	1ad2      	subs	r2, r2, r3
900089f0:	683b      	ldr	r3, [r7, #0]
900089f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
900089f4:	4b0c      	ldr	r3, [pc, #48]	; (90008a28 <prvHeapInit+0xb4>)
900089f6:	681a      	ldr	r2, [r3, #0]
900089f8:	683b      	ldr	r3, [r7, #0]
900089fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
900089fc:	683b      	ldr	r3, [r7, #0]
900089fe:	685b      	ldr	r3, [r3, #4]
90008a00:	4a0a      	ldr	r2, [pc, #40]	; (90008a2c <prvHeapInit+0xb8>)
90008a02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
90008a04:	683b      	ldr	r3, [r7, #0]
90008a06:	685b      	ldr	r3, [r3, #4]
90008a08:	4a09      	ldr	r2, [pc, #36]	; (90008a30 <prvHeapInit+0xbc>)
90008a0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
90008a0c:	4b09      	ldr	r3, [pc, #36]	; (90008a34 <prvHeapInit+0xc0>)
90008a0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
90008a12:	601a      	str	r2, [r3, #0]
}
90008a14:	bf00      	nop
90008a16:	3714      	adds	r7, #20
90008a18:	46bd      	mov	sp, r7
90008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
90008a1e:	4770      	bx	lr
90008a20:	2400f9f0 	.word	0x2400f9f0
90008a24:	2401bd40 	.word	0x2401bd40
90008a28:	2401bd48 	.word	0x2401bd48
90008a2c:	2401bd50 	.word	0x2401bd50
90008a30:	2401bd4c 	.word	0x2401bd4c
90008a34:	2401bd5c 	.word	0x2401bd5c

90008a38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
90008a38:	b480      	push	{r7}
90008a3a:	b085      	sub	sp, #20
90008a3c:	af00      	add	r7, sp, #0
90008a3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
90008a40:	4b28      	ldr	r3, [pc, #160]	; (90008ae4 <prvInsertBlockIntoFreeList+0xac>)
90008a42:	60fb      	str	r3, [r7, #12]
90008a44:	e002      	b.n	90008a4c <prvInsertBlockIntoFreeList+0x14>
90008a46:	68fb      	ldr	r3, [r7, #12]
90008a48:	681b      	ldr	r3, [r3, #0]
90008a4a:	60fb      	str	r3, [r7, #12]
90008a4c:	68fb      	ldr	r3, [r7, #12]
90008a4e:	681b      	ldr	r3, [r3, #0]
90008a50:	687a      	ldr	r2, [r7, #4]
90008a52:	429a      	cmp	r2, r3
90008a54:	d8f7      	bhi.n	90008a46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
90008a56:	68fb      	ldr	r3, [r7, #12]
90008a58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
90008a5a:	68fb      	ldr	r3, [r7, #12]
90008a5c:	685b      	ldr	r3, [r3, #4]
90008a5e:	68ba      	ldr	r2, [r7, #8]
90008a60:	4413      	add	r3, r2
90008a62:	687a      	ldr	r2, [r7, #4]
90008a64:	429a      	cmp	r2, r3
90008a66:	d108      	bne.n	90008a7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
90008a68:	68fb      	ldr	r3, [r7, #12]
90008a6a:	685a      	ldr	r2, [r3, #4]
90008a6c:	687b      	ldr	r3, [r7, #4]
90008a6e:	685b      	ldr	r3, [r3, #4]
90008a70:	441a      	add	r2, r3
90008a72:	68fb      	ldr	r3, [r7, #12]
90008a74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
90008a76:	68fb      	ldr	r3, [r7, #12]
90008a78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
90008a7a:	687b      	ldr	r3, [r7, #4]
90008a7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
90008a7e:	687b      	ldr	r3, [r7, #4]
90008a80:	685b      	ldr	r3, [r3, #4]
90008a82:	68ba      	ldr	r2, [r7, #8]
90008a84:	441a      	add	r2, r3
90008a86:	68fb      	ldr	r3, [r7, #12]
90008a88:	681b      	ldr	r3, [r3, #0]
90008a8a:	429a      	cmp	r2, r3
90008a8c:	d118      	bne.n	90008ac0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
90008a8e:	68fb      	ldr	r3, [r7, #12]
90008a90:	681a      	ldr	r2, [r3, #0]
90008a92:	4b15      	ldr	r3, [pc, #84]	; (90008ae8 <prvInsertBlockIntoFreeList+0xb0>)
90008a94:	681b      	ldr	r3, [r3, #0]
90008a96:	429a      	cmp	r2, r3
90008a98:	d00d      	beq.n	90008ab6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
90008a9a:	687b      	ldr	r3, [r7, #4]
90008a9c:	685a      	ldr	r2, [r3, #4]
90008a9e:	68fb      	ldr	r3, [r7, #12]
90008aa0:	681b      	ldr	r3, [r3, #0]
90008aa2:	685b      	ldr	r3, [r3, #4]
90008aa4:	441a      	add	r2, r3
90008aa6:	687b      	ldr	r3, [r7, #4]
90008aa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
90008aaa:	68fb      	ldr	r3, [r7, #12]
90008aac:	681b      	ldr	r3, [r3, #0]
90008aae:	681a      	ldr	r2, [r3, #0]
90008ab0:	687b      	ldr	r3, [r7, #4]
90008ab2:	601a      	str	r2, [r3, #0]
90008ab4:	e008      	b.n	90008ac8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
90008ab6:	4b0c      	ldr	r3, [pc, #48]	; (90008ae8 <prvInsertBlockIntoFreeList+0xb0>)
90008ab8:	681a      	ldr	r2, [r3, #0]
90008aba:	687b      	ldr	r3, [r7, #4]
90008abc:	601a      	str	r2, [r3, #0]
90008abe:	e003      	b.n	90008ac8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
90008ac0:	68fb      	ldr	r3, [r7, #12]
90008ac2:	681a      	ldr	r2, [r3, #0]
90008ac4:	687b      	ldr	r3, [r7, #4]
90008ac6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
90008ac8:	68fa      	ldr	r2, [r7, #12]
90008aca:	687b      	ldr	r3, [r7, #4]
90008acc:	429a      	cmp	r2, r3
90008ace:	d002      	beq.n	90008ad6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
90008ad0:	68fb      	ldr	r3, [r7, #12]
90008ad2:	687a      	ldr	r2, [r7, #4]
90008ad4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
90008ad6:	bf00      	nop
90008ad8:	3714      	adds	r7, #20
90008ada:	46bd      	mov	sp, r7
90008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
90008ae0:	4770      	bx	lr
90008ae2:	bf00      	nop
90008ae4:	2401bd40 	.word	0x2401bd40
90008ae8:	2401bd48 	.word	0x2401bd48

90008aec <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
90008aec:	b580      	push	{r7, lr}
90008aee:	b084      	sub	sp, #16
90008af0:	af00      	add	r7, sp, #0
90008af2:	6078      	str	r0, [r7, #4]
90008af4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
90008af6:	f00a f893 	bl	90012c20 <sys_timeouts_sleeptime>
90008afa:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
90008afc:	68fb      	ldr	r3, [r7, #12]
90008afe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
90008b02:	d10b      	bne.n	90008b1c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
90008b04:	4813      	ldr	r0, [pc, #76]	; (90008b54 <tcpip_timeouts_mbox_fetch+0x68>)
90008b06:	f00c fe2e 	bl	90015766 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
90008b0a:	2200      	movs	r2, #0
90008b0c:	6839      	ldr	r1, [r7, #0]
90008b0e:	6878      	ldr	r0, [r7, #4]
90008b10:	f00c fda0 	bl	90015654 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
90008b14:	480f      	ldr	r0, [pc, #60]	; (90008b54 <tcpip_timeouts_mbox_fetch+0x68>)
90008b16:	f00c fe17 	bl	90015748 <sys_mutex_lock>
    return;
90008b1a:	e018      	b.n	90008b4e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
90008b1c:	68fb      	ldr	r3, [r7, #12]
90008b1e:	2b00      	cmp	r3, #0
90008b20:	d102      	bne.n	90008b28 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
90008b22:	f00a f843 	bl	90012bac <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
90008b26:	e7e6      	b.n	90008af6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
90008b28:	480a      	ldr	r0, [pc, #40]	; (90008b54 <tcpip_timeouts_mbox_fetch+0x68>)
90008b2a:	f00c fe1c 	bl	90015766 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
90008b2e:	68fa      	ldr	r2, [r7, #12]
90008b30:	6839      	ldr	r1, [r7, #0]
90008b32:	6878      	ldr	r0, [r7, #4]
90008b34:	f00c fd8e 	bl	90015654 <sys_arch_mbox_fetch>
90008b38:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
90008b3a:	4806      	ldr	r0, [pc, #24]	; (90008b54 <tcpip_timeouts_mbox_fetch+0x68>)
90008b3c:	f00c fe04 	bl	90015748 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
90008b40:	68bb      	ldr	r3, [r7, #8]
90008b42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
90008b46:	d102      	bne.n	90008b4e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
90008b48:	f00a f830 	bl	90012bac <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
90008b4c:	e7d3      	b.n	90008af6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
90008b4e:	3710      	adds	r7, #16
90008b50:	46bd      	mov	sp, r7
90008b52:	bd80      	pop	{r7, pc}
90008b54:	2401bd6c 	.word	0x2401bd6c

90008b58 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
90008b58:	b580      	push	{r7, lr}
90008b5a:	b084      	sub	sp, #16
90008b5c:	af00      	add	r7, sp, #0
90008b5e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
90008b60:	4810      	ldr	r0, [pc, #64]	; (90008ba4 <tcpip_thread+0x4c>)
90008b62:	f00c fdf1 	bl	90015748 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
90008b66:	4b10      	ldr	r3, [pc, #64]	; (90008ba8 <tcpip_thread+0x50>)
90008b68:	681b      	ldr	r3, [r3, #0]
90008b6a:	2b00      	cmp	r3, #0
90008b6c:	d005      	beq.n	90008b7a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
90008b6e:	4b0e      	ldr	r3, [pc, #56]	; (90008ba8 <tcpip_thread+0x50>)
90008b70:	681b      	ldr	r3, [r3, #0]
90008b72:	4a0e      	ldr	r2, [pc, #56]	; (90008bac <tcpip_thread+0x54>)
90008b74:	6812      	ldr	r2, [r2, #0]
90008b76:	4610      	mov	r0, r2
90008b78:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
90008b7a:	f107 030c 	add.w	r3, r7, #12
90008b7e:	4619      	mov	r1, r3
90008b80:	480b      	ldr	r0, [pc, #44]	; (90008bb0 <tcpip_thread+0x58>)
90008b82:	f7ff ffb3 	bl	90008aec <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
90008b86:	68fb      	ldr	r3, [r7, #12]
90008b88:	2b00      	cmp	r3, #0
90008b8a:	d106      	bne.n	90008b9a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
90008b8c:	4b09      	ldr	r3, [pc, #36]	; (90008bb4 <tcpip_thread+0x5c>)
90008b8e:	2291      	movs	r2, #145	; 0x91
90008b90:	4909      	ldr	r1, [pc, #36]	; (90008bb8 <tcpip_thread+0x60>)
90008b92:	480a      	ldr	r0, [pc, #40]	; (90008bbc <tcpip_thread+0x64>)
90008b94:	f00d f82e 	bl	90015bf4 <iprintf>
      continue;
90008b98:	e003      	b.n	90008ba2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
90008b9a:	68fb      	ldr	r3, [r7, #12]
90008b9c:	4618      	mov	r0, r3
90008b9e:	f000 f80f 	bl	90008bc0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
90008ba2:	e7ea      	b.n	90008b7a <tcpip_thread+0x22>
90008ba4:	2401bd6c 	.word	0x2401bd6c
90008ba8:	2401bd60 	.word	0x2401bd60
90008bac:	2401bd64 	.word	0x2401bd64
90008bb0:	2401bd68 	.word	0x2401bd68
90008bb4:	90017968 	.word	0x90017968
90008bb8:	90017998 	.word	0x90017998
90008bbc:	900179b8 	.word	0x900179b8

90008bc0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
90008bc0:	b580      	push	{r7, lr}
90008bc2:	b082      	sub	sp, #8
90008bc4:	af00      	add	r7, sp, #0
90008bc6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
90008bc8:	687b      	ldr	r3, [r7, #4]
90008bca:	781b      	ldrb	r3, [r3, #0]
90008bcc:	2b02      	cmp	r3, #2
90008bce:	d026      	beq.n	90008c1e <tcpip_thread_handle_msg+0x5e>
90008bd0:	2b02      	cmp	r3, #2
90008bd2:	dc2b      	bgt.n	90008c2c <tcpip_thread_handle_msg+0x6c>
90008bd4:	2b00      	cmp	r3, #0
90008bd6:	d002      	beq.n	90008bde <tcpip_thread_handle_msg+0x1e>
90008bd8:	2b01      	cmp	r3, #1
90008bda:	d015      	beq.n	90008c08 <tcpip_thread_handle_msg+0x48>
90008bdc:	e026      	b.n	90008c2c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
90008bde:	687b      	ldr	r3, [r7, #4]
90008be0:	68db      	ldr	r3, [r3, #12]
90008be2:	687a      	ldr	r2, [r7, #4]
90008be4:	6850      	ldr	r0, [r2, #4]
90008be6:	687a      	ldr	r2, [r7, #4]
90008be8:	6892      	ldr	r2, [r2, #8]
90008bea:	4611      	mov	r1, r2
90008bec:	4798      	blx	r3
90008bee:	4603      	mov	r3, r0
90008bf0:	2b00      	cmp	r3, #0
90008bf2:	d004      	beq.n	90008bfe <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
90008bf4:	687b      	ldr	r3, [r7, #4]
90008bf6:	685b      	ldr	r3, [r3, #4]
90008bf8:	4618      	mov	r0, r3
90008bfa:	f003 fbdb 	bl	9000c3b4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
90008bfe:	6879      	ldr	r1, [r7, #4]
90008c00:	2009      	movs	r0, #9
90008c02:	f002 fd33 	bl	9000b66c <memp_free>
      break;
90008c06:	e018      	b.n	90008c3a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
90008c08:	687b      	ldr	r3, [r7, #4]
90008c0a:	685b      	ldr	r3, [r3, #4]
90008c0c:	687a      	ldr	r2, [r7, #4]
90008c0e:	6892      	ldr	r2, [r2, #8]
90008c10:	4610      	mov	r0, r2
90008c12:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
90008c14:	6879      	ldr	r1, [r7, #4]
90008c16:	2008      	movs	r0, #8
90008c18:	f002 fd28 	bl	9000b66c <memp_free>
      break;
90008c1c:	e00d      	b.n	90008c3a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
90008c1e:	687b      	ldr	r3, [r7, #4]
90008c20:	685b      	ldr	r3, [r3, #4]
90008c22:	687a      	ldr	r2, [r7, #4]
90008c24:	6892      	ldr	r2, [r2, #8]
90008c26:	4610      	mov	r0, r2
90008c28:	4798      	blx	r3
      break;
90008c2a:	e006      	b.n	90008c3a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
90008c2c:	4b05      	ldr	r3, [pc, #20]	; (90008c44 <tcpip_thread_handle_msg+0x84>)
90008c2e:	22cf      	movs	r2, #207	; 0xcf
90008c30:	4905      	ldr	r1, [pc, #20]	; (90008c48 <tcpip_thread_handle_msg+0x88>)
90008c32:	4806      	ldr	r0, [pc, #24]	; (90008c4c <tcpip_thread_handle_msg+0x8c>)
90008c34:	f00c ffde 	bl	90015bf4 <iprintf>
      break;
90008c38:	bf00      	nop
  }
}
90008c3a:	bf00      	nop
90008c3c:	3708      	adds	r7, #8
90008c3e:	46bd      	mov	sp, r7
90008c40:	bd80      	pop	{r7, pc}
90008c42:	bf00      	nop
90008c44:	90017968 	.word	0x90017968
90008c48:	90017998 	.word	0x90017998
90008c4c:	900179b8 	.word	0x900179b8

90008c50 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
90008c50:	b580      	push	{r7, lr}
90008c52:	b086      	sub	sp, #24
90008c54:	af00      	add	r7, sp, #0
90008c56:	60f8      	str	r0, [r7, #12]
90008c58:	60b9      	str	r1, [r7, #8]
90008c5a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
90008c5c:	481a      	ldr	r0, [pc, #104]	; (90008cc8 <tcpip_inpkt+0x78>)
90008c5e:	f00c fd38 	bl	900156d2 <sys_mbox_valid>
90008c62:	4603      	mov	r3, r0
90008c64:	2b00      	cmp	r3, #0
90008c66:	d105      	bne.n	90008c74 <tcpip_inpkt+0x24>
90008c68:	4b18      	ldr	r3, [pc, #96]	; (90008ccc <tcpip_inpkt+0x7c>)
90008c6a:	22fc      	movs	r2, #252	; 0xfc
90008c6c:	4918      	ldr	r1, [pc, #96]	; (90008cd0 <tcpip_inpkt+0x80>)
90008c6e:	4819      	ldr	r0, [pc, #100]	; (90008cd4 <tcpip_inpkt+0x84>)
90008c70:	f00c ffc0 	bl	90015bf4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
90008c74:	2009      	movs	r0, #9
90008c76:	f002 fc83 	bl	9000b580 <memp_malloc>
90008c7a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
90008c7c:	697b      	ldr	r3, [r7, #20]
90008c7e:	2b00      	cmp	r3, #0
90008c80:	d102      	bne.n	90008c88 <tcpip_inpkt+0x38>
    return ERR_MEM;
90008c82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90008c86:	e01a      	b.n	90008cbe <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
90008c88:	697b      	ldr	r3, [r7, #20]
90008c8a:	2200      	movs	r2, #0
90008c8c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
90008c8e:	697b      	ldr	r3, [r7, #20]
90008c90:	68fa      	ldr	r2, [r7, #12]
90008c92:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
90008c94:	697b      	ldr	r3, [r7, #20]
90008c96:	68ba      	ldr	r2, [r7, #8]
90008c98:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
90008c9a:	697b      	ldr	r3, [r7, #20]
90008c9c:	687a      	ldr	r2, [r7, #4]
90008c9e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
90008ca0:	6979      	ldr	r1, [r7, #20]
90008ca2:	4809      	ldr	r0, [pc, #36]	; (90008cc8 <tcpip_inpkt+0x78>)
90008ca4:	f00c fcbc 	bl	90015620 <sys_mbox_trypost>
90008ca8:	4603      	mov	r3, r0
90008caa:	2b00      	cmp	r3, #0
90008cac:	d006      	beq.n	90008cbc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
90008cae:	6979      	ldr	r1, [r7, #20]
90008cb0:	2009      	movs	r0, #9
90008cb2:	f002 fcdb 	bl	9000b66c <memp_free>
    return ERR_MEM;
90008cb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90008cba:	e000      	b.n	90008cbe <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
90008cbc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
90008cbe:	4618      	mov	r0, r3
90008cc0:	3718      	adds	r7, #24
90008cc2:	46bd      	mov	sp, r7
90008cc4:	bd80      	pop	{r7, pc}
90008cc6:	bf00      	nop
90008cc8:	2401bd68 	.word	0x2401bd68
90008ccc:	90017968 	.word	0x90017968
90008cd0:	900179e0 	.word	0x900179e0
90008cd4:	900179b8 	.word	0x900179b8

90008cd8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
90008cd8:	b580      	push	{r7, lr}
90008cda:	b082      	sub	sp, #8
90008cdc:	af00      	add	r7, sp, #0
90008cde:	6078      	str	r0, [r7, #4]
90008ce0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
90008ce2:	683b      	ldr	r3, [r7, #0]
90008ce4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90008ce8:	f003 0318 	and.w	r3, r3, #24
90008cec:	2b00      	cmp	r3, #0
90008cee:	d006      	beq.n	90008cfe <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
90008cf0:	4a08      	ldr	r2, [pc, #32]	; (90008d14 <tcpip_input+0x3c>)
90008cf2:	6839      	ldr	r1, [r7, #0]
90008cf4:	6878      	ldr	r0, [r7, #4]
90008cf6:	f7ff ffab 	bl	90008c50 <tcpip_inpkt>
90008cfa:	4603      	mov	r3, r0
90008cfc:	e005      	b.n	90008d0a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
90008cfe:	4a06      	ldr	r2, [pc, #24]	; (90008d18 <tcpip_input+0x40>)
90008d00:	6839      	ldr	r1, [r7, #0]
90008d02:	6878      	ldr	r0, [r7, #4]
90008d04:	f7ff ffa4 	bl	90008c50 <tcpip_inpkt>
90008d08:	4603      	mov	r3, r0
}
90008d0a:	4618      	mov	r0, r3
90008d0c:	3708      	adds	r7, #8
90008d0e:	46bd      	mov	sp, r7
90008d10:	bd80      	pop	{r7, pc}
90008d12:	bf00      	nop
90008d14:	90015431 	.word	0x90015431
90008d18:	90014339 	.word	0x90014339

90008d1c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
90008d1c:	b580      	push	{r7, lr}
90008d1e:	b084      	sub	sp, #16
90008d20:	af00      	add	r7, sp, #0
90008d22:	6078      	str	r0, [r7, #4]
90008d24:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
90008d26:	4819      	ldr	r0, [pc, #100]	; (90008d8c <tcpip_try_callback+0x70>)
90008d28:	f00c fcd3 	bl	900156d2 <sys_mbox_valid>
90008d2c:	4603      	mov	r3, r0
90008d2e:	2b00      	cmp	r3, #0
90008d30:	d106      	bne.n	90008d40 <tcpip_try_callback+0x24>
90008d32:	4b17      	ldr	r3, [pc, #92]	; (90008d90 <tcpip_try_callback+0x74>)
90008d34:	f240 125d 	movw	r2, #349	; 0x15d
90008d38:	4916      	ldr	r1, [pc, #88]	; (90008d94 <tcpip_try_callback+0x78>)
90008d3a:	4817      	ldr	r0, [pc, #92]	; (90008d98 <tcpip_try_callback+0x7c>)
90008d3c:	f00c ff5a 	bl	90015bf4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
90008d40:	2008      	movs	r0, #8
90008d42:	f002 fc1d 	bl	9000b580 <memp_malloc>
90008d46:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
90008d48:	68fb      	ldr	r3, [r7, #12]
90008d4a:	2b00      	cmp	r3, #0
90008d4c:	d102      	bne.n	90008d54 <tcpip_try_callback+0x38>
    return ERR_MEM;
90008d4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90008d52:	e017      	b.n	90008d84 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
90008d54:	68fb      	ldr	r3, [r7, #12]
90008d56:	2201      	movs	r2, #1
90008d58:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
90008d5a:	68fb      	ldr	r3, [r7, #12]
90008d5c:	687a      	ldr	r2, [r7, #4]
90008d5e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
90008d60:	68fb      	ldr	r3, [r7, #12]
90008d62:	683a      	ldr	r2, [r7, #0]
90008d64:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
90008d66:	68f9      	ldr	r1, [r7, #12]
90008d68:	4808      	ldr	r0, [pc, #32]	; (90008d8c <tcpip_try_callback+0x70>)
90008d6a:	f00c fc59 	bl	90015620 <sys_mbox_trypost>
90008d6e:	4603      	mov	r3, r0
90008d70:	2b00      	cmp	r3, #0
90008d72:	d006      	beq.n	90008d82 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
90008d74:	68f9      	ldr	r1, [r7, #12]
90008d76:	2008      	movs	r0, #8
90008d78:	f002 fc78 	bl	9000b66c <memp_free>
    return ERR_MEM;
90008d7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90008d80:	e000      	b.n	90008d84 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
90008d82:	2300      	movs	r3, #0
}
90008d84:	4618      	mov	r0, r3
90008d86:	3710      	adds	r7, #16
90008d88:	46bd      	mov	sp, r7
90008d8a:	bd80      	pop	{r7, pc}
90008d8c:	2401bd68 	.word	0x2401bd68
90008d90:	90017968 	.word	0x90017968
90008d94:	900179e0 	.word	0x900179e0
90008d98:	900179b8 	.word	0x900179b8

90008d9c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
90008d9c:	b580      	push	{r7, lr}
90008d9e:	b084      	sub	sp, #16
90008da0:	af02      	add	r7, sp, #8
90008da2:	6078      	str	r0, [r7, #4]
90008da4:	6039      	str	r1, [r7, #0]
  lwip_init();
90008da6:	f001 ff45 	bl	9000ac34 <lwip_init>

  tcpip_init_done = initfunc;
90008daa:	4a17      	ldr	r2, [pc, #92]	; (90008e08 <tcpip_init+0x6c>)
90008dac:	687b      	ldr	r3, [r7, #4]
90008dae:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
90008db0:	4a16      	ldr	r2, [pc, #88]	; (90008e0c <tcpip_init+0x70>)
90008db2:	683b      	ldr	r3, [r7, #0]
90008db4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
90008db6:	2106      	movs	r1, #6
90008db8:	4815      	ldr	r0, [pc, #84]	; (90008e10 <tcpip_init+0x74>)
90008dba:	f00c fc0f 	bl	900155dc <sys_mbox_new>
90008dbe:	4603      	mov	r3, r0
90008dc0:	2b00      	cmp	r3, #0
90008dc2:	d006      	beq.n	90008dd2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
90008dc4:	4b13      	ldr	r3, [pc, #76]	; (90008e14 <tcpip_init+0x78>)
90008dc6:	f240 2261 	movw	r2, #609	; 0x261
90008dca:	4913      	ldr	r1, [pc, #76]	; (90008e18 <tcpip_init+0x7c>)
90008dcc:	4813      	ldr	r0, [pc, #76]	; (90008e1c <tcpip_init+0x80>)
90008dce:	f00c ff11 	bl	90015bf4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
90008dd2:	4813      	ldr	r0, [pc, #76]	; (90008e20 <tcpip_init+0x84>)
90008dd4:	f00c fc9c 	bl	90015710 <sys_mutex_new>
90008dd8:	4603      	mov	r3, r0
90008dda:	2b00      	cmp	r3, #0
90008ddc:	d006      	beq.n	90008dec <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
90008dde:	4b0d      	ldr	r3, [pc, #52]	; (90008e14 <tcpip_init+0x78>)
90008de0:	f240 2265 	movw	r2, #613	; 0x265
90008de4:	490f      	ldr	r1, [pc, #60]	; (90008e24 <tcpip_init+0x88>)
90008de6:	480d      	ldr	r0, [pc, #52]	; (90008e1c <tcpip_init+0x80>)
90008de8:	f00c ff04 	bl	90015bf4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
90008dec:	2300      	movs	r3, #0
90008dee:	9300      	str	r3, [sp, #0]
90008df0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
90008df4:	2200      	movs	r2, #0
90008df6:	490c      	ldr	r1, [pc, #48]	; (90008e28 <tcpip_init+0x8c>)
90008df8:	480c      	ldr	r0, [pc, #48]	; (90008e2c <tcpip_init+0x90>)
90008dfa:	f00c fcc1 	bl	90015780 <sys_thread_new>
}
90008dfe:	bf00      	nop
90008e00:	3708      	adds	r7, #8
90008e02:	46bd      	mov	sp, r7
90008e04:	bd80      	pop	{r7, pc}
90008e06:	bf00      	nop
90008e08:	2401bd60 	.word	0x2401bd60
90008e0c:	2401bd64 	.word	0x2401bd64
90008e10:	2401bd68 	.word	0x2401bd68
90008e14:	90017968 	.word	0x90017968
90008e18:	900179f0 	.word	0x900179f0
90008e1c:	900179b8 	.word	0x900179b8
90008e20:	2401bd6c 	.word	0x2401bd6c
90008e24:	90017a14 	.word	0x90017a14
90008e28:	90008b59 	.word	0x90008b59
90008e2c:	90017a38 	.word	0x90017a38

90008e30 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
90008e30:	b580      	push	{r7, lr}
90008e32:	b084      	sub	sp, #16
90008e34:	af00      	add	r7, sp, #0
90008e36:	6078      	str	r0, [r7, #4]
90008e38:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
90008e3a:	687b      	ldr	r3, [r7, #4]
90008e3c:	2b00      	cmp	r3, #0
90008e3e:	d002      	beq.n	90008e46 <fs_open+0x16>
90008e40:	683b      	ldr	r3, [r7, #0]
90008e42:	2b00      	cmp	r3, #0
90008e44:	d102      	bne.n	90008e4c <fs_open+0x1c>
    return ERR_ARG;
90008e46:	f06f 030f 	mvn.w	r3, #15
90008e4a:	e028      	b.n	90008e9e <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
90008e4c:	4b16      	ldr	r3, [pc, #88]	; (90008ea8 <fs_open+0x78>)
90008e4e:	60fb      	str	r3, [r7, #12]
90008e50:	e020      	b.n	90008e94 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
90008e52:	68fb      	ldr	r3, [r7, #12]
90008e54:	685b      	ldr	r3, [r3, #4]
90008e56:	4619      	mov	r1, r3
90008e58:	6838      	ldr	r0, [r7, #0]
90008e5a:	f7f7 fa41 	bl	900002e0 <strcmp>
90008e5e:	4603      	mov	r3, r0
90008e60:	2b00      	cmp	r3, #0
90008e62:	d114      	bne.n	90008e8e <fs_open+0x5e>
      file->data = (const char *)f->data;
90008e64:	68fb      	ldr	r3, [r7, #12]
90008e66:	689a      	ldr	r2, [r3, #8]
90008e68:	687b      	ldr	r3, [r7, #4]
90008e6a:	601a      	str	r2, [r3, #0]
      file->len = f->len;
90008e6c:	68fb      	ldr	r3, [r7, #12]
90008e6e:	68da      	ldr	r2, [r3, #12]
90008e70:	687b      	ldr	r3, [r7, #4]
90008e72:	605a      	str	r2, [r3, #4]
      file->index = f->len;
90008e74:	68fb      	ldr	r3, [r7, #12]
90008e76:	68da      	ldr	r2, [r3, #12]
90008e78:	687b      	ldr	r3, [r7, #4]
90008e7a:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
90008e7c:	687b      	ldr	r3, [r7, #4]
90008e7e:	2200      	movs	r2, #0
90008e80:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
90008e82:	68fb      	ldr	r3, [r7, #12]
90008e84:	7c1a      	ldrb	r2, [r3, #16]
90008e86:	687b      	ldr	r3, [r7, #4]
90008e88:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
90008e8a:	2300      	movs	r3, #0
90008e8c:	e007      	b.n	90008e9e <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
90008e8e:	68fb      	ldr	r3, [r7, #12]
90008e90:	681b      	ldr	r3, [r3, #0]
90008e92:	60fb      	str	r3, [r7, #12]
90008e94:	68fb      	ldr	r3, [r7, #12]
90008e96:	2b00      	cmp	r3, #0
90008e98:	d1db      	bne.n	90008e52 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
90008e9a:	f06f 0305 	mvn.w	r3, #5
}
90008e9e:	4618      	mov	r0, r3
90008ea0:	3710      	adds	r7, #16
90008ea2:	46bd      	mov	sp, r7
90008ea4:	bd80      	pop	{r7, pc}
90008ea6:	bf00      	nop
90008ea8:	90020fc4 	.word	0x90020fc4

90008eac <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
90008eac:	b480      	push	{r7}
90008eae:	b083      	sub	sp, #12
90008eb0:	af00      	add	r7, sp, #0
90008eb2:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
90008eb4:	bf00      	nop
90008eb6:	370c      	adds	r7, #12
90008eb8:	46bd      	mov	sp, r7
90008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
90008ebe:	4770      	bx	lr

90008ec0 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
90008ec0:	b480      	push	{r7}
90008ec2:	b083      	sub	sp, #12
90008ec4:	af00      	add	r7, sp, #0
90008ec6:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
90008ec8:	687b      	ldr	r3, [r7, #4]
90008eca:	685a      	ldr	r2, [r3, #4]
90008ecc:	687b      	ldr	r3, [r7, #4]
90008ece:	689b      	ldr	r3, [r3, #8]
90008ed0:	1ad3      	subs	r3, r2, r3
}
90008ed2:	4618      	mov	r0, r3
90008ed4:	370c      	adds	r7, #12
90008ed6:	46bd      	mov	sp, r7
90008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
90008edc:	4770      	bx	lr

90008ede <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
90008ede:	b580      	push	{r7, lr}
90008ee0:	b082      	sub	sp, #8
90008ee2:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
90008ee4:	f240 400c 	movw	r0, #1036	; 0x40c
90008ee8:	f002 f9a6 	bl	9000b238 <mem_malloc>
90008eec:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
90008eee:	687b      	ldr	r3, [r7, #4]
90008ef0:	2b00      	cmp	r3, #0
90008ef2:	d005      	beq.n	90008f00 <http_ssi_state_alloc+0x22>
    memset(ret, 0, sizeof(struct http_ssi_state));
90008ef4:	f240 420c 	movw	r2, #1036	; 0x40c
90008ef8:	2100      	movs	r1, #0
90008efa:	6878      	ldr	r0, [r7, #4]
90008efc:	f00c fddd 	bl	90015aba <memset>
  }
  return ret;
90008f00:	687b      	ldr	r3, [r7, #4]
}
90008f02:	4618      	mov	r0, r3
90008f04:	3708      	adds	r7, #8
90008f06:	46bd      	mov	sp, r7
90008f08:	bd80      	pop	{r7, pc}

90008f0a <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
90008f0a:	b580      	push	{r7, lr}
90008f0c:	b082      	sub	sp, #8
90008f0e:	af00      	add	r7, sp, #0
90008f10:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
90008f12:	687b      	ldr	r3, [r7, #4]
90008f14:	2b00      	cmp	r3, #0
90008f16:	d002      	beq.n	90008f1e <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
90008f18:	6878      	ldr	r0, [r7, #4]
90008f1a:	f001 fff3 	bl	9000af04 <mem_free>
  }
}
90008f1e:	bf00      	nop
90008f20:	3708      	adds	r7, #8
90008f22:	46bd      	mov	sp, r7
90008f24:	bd80      	pop	{r7, pc}

90008f26 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
90008f26:	b580      	push	{r7, lr}
90008f28:	b082      	sub	sp, #8
90008f2a:	af00      	add	r7, sp, #0
90008f2c:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
90008f2e:	22b4      	movs	r2, #180	; 0xb4
90008f30:	2100      	movs	r1, #0
90008f32:	6878      	ldr	r0, [r7, #4]
90008f34:	f00c fdc1 	bl	90015aba <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
90008f38:	bf00      	nop
90008f3a:	3708      	adds	r7, #8
90008f3c:	46bd      	mov	sp, r7
90008f3e:	bd80      	pop	{r7, pc}

90008f40 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
90008f40:	b580      	push	{r7, lr}
90008f42:	b082      	sub	sp, #8
90008f44:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
90008f46:	20b4      	movs	r0, #180	; 0xb4
90008f48:	f002 f976 	bl	9000b238 <mem_malloc>
90008f4c:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
90008f4e:	687b      	ldr	r3, [r7, #4]
90008f50:	2b00      	cmp	r3, #0
90008f52:	d002      	beq.n	90008f5a <http_state_alloc+0x1a>
    http_state_init(ret);
90008f54:	6878      	ldr	r0, [r7, #4]
90008f56:	f7ff ffe6 	bl	90008f26 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
90008f5a:	687b      	ldr	r3, [r7, #4]
}
90008f5c:	4618      	mov	r0, r3
90008f5e:	3708      	adds	r7, #8
90008f60:	46bd      	mov	sp, r7
90008f62:	bd80      	pop	{r7, pc}

90008f64 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
90008f64:	b580      	push	{r7, lr}
90008f66:	b082      	sub	sp, #8
90008f68:	af00      	add	r7, sp, #0
90008f6a:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
90008f6c:	687b      	ldr	r3, [r7, #4]
90008f6e:	695b      	ldr	r3, [r3, #20]
90008f70:	2b00      	cmp	r3, #0
90008f72:	d007      	beq.n	90008f84 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
90008f74:	687b      	ldr	r3, [r7, #4]
90008f76:	695b      	ldr	r3, [r3, #20]
90008f78:	4618      	mov	r0, r3
90008f7a:	f7ff ff97 	bl	90008eac <fs_close>
    hs->handle = NULL;
90008f7e:	687b      	ldr	r3, [r7, #4]
90008f80:	2200      	movs	r2, #0
90008f82:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
90008f84:	687b      	ldr	r3, [r7, #4]
90008f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90008f88:	2b00      	cmp	r3, #0
90008f8a:	d007      	beq.n	90008f9c <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
90008f8c:	687b      	ldr	r3, [r7, #4]
90008f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90008f90:	4618      	mov	r0, r3
90008f92:	f7ff ffba 	bl	90008f0a <http_ssi_state_free>
    hs->ssi = NULL;
90008f96:	687b      	ldr	r3, [r7, #4]
90008f98:	2200      	movs	r2, #0
90008f9a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
90008f9c:	687b      	ldr	r3, [r7, #4]
90008f9e:	6a1b      	ldr	r3, [r3, #32]
90008fa0:	2b00      	cmp	r3, #0
90008fa2:	d007      	beq.n	90008fb4 <http_state_eof+0x50>
    pbuf_free(hs->req);
90008fa4:	687b      	ldr	r3, [r7, #4]
90008fa6:	6a1b      	ldr	r3, [r3, #32]
90008fa8:	4618      	mov	r0, r3
90008faa:	f003 fa03 	bl	9000c3b4 <pbuf_free>
    hs->req = NULL;
90008fae:	687b      	ldr	r3, [r7, #4]
90008fb0:	2200      	movs	r2, #0
90008fb2:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
90008fb4:	bf00      	nop
90008fb6:	3708      	adds	r7, #8
90008fb8:	46bd      	mov	sp, r7
90008fba:	bd80      	pop	{r7, pc}

90008fbc <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
90008fbc:	b580      	push	{r7, lr}
90008fbe:	b082      	sub	sp, #8
90008fc0:	af00      	add	r7, sp, #0
90008fc2:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
90008fc4:	687b      	ldr	r3, [r7, #4]
90008fc6:	2b00      	cmp	r3, #0
90008fc8:	d005      	beq.n	90008fd6 <http_state_free+0x1a>
    http_state_eof(hs);
90008fca:	6878      	ldr	r0, [r7, #4]
90008fcc:	f7ff ffca 	bl	90008f64 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
90008fd0:	6878      	ldr	r0, [r7, #4]
90008fd2:	f001 ff97 	bl	9000af04 <mem_free>
  }
}
90008fd6:	bf00      	nop
90008fd8:	3708      	adds	r7, #8
90008fda:	46bd      	mov	sp, r7
90008fdc:	bd80      	pop	{r7, pc}
	...

90008fe0 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
90008fe0:	b580      	push	{r7, lr}
90008fe2:	b086      	sub	sp, #24
90008fe4:	af00      	add	r7, sp, #0
90008fe6:	60f8      	str	r0, [r7, #12]
90008fe8:	60b9      	str	r1, [r7, #8]
90008fea:	607a      	str	r2, [r7, #4]
90008fec:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
90008fee:	687b      	ldr	r3, [r7, #4]
90008ff0:	2b00      	cmp	r3, #0
90008ff2:	d106      	bne.n	90009002 <http_write+0x22>
90008ff4:	4b2c      	ldr	r3, [pc, #176]	; (900090a8 <http_write+0xc8>)
90008ff6:	f240 2219 	movw	r2, #537	; 0x219
90008ffa:	492c      	ldr	r1, [pc, #176]	; (900090ac <http_write+0xcc>)
90008ffc:	482c      	ldr	r0, [pc, #176]	; (900090b0 <http_write+0xd0>)
90008ffe:	f00c fdf9 	bl	90015bf4 <iprintf>
  len = *length;
90009002:	687b      	ldr	r3, [r7, #4]
90009004:	881b      	ldrh	r3, [r3, #0]
90009006:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
90009008:	8afb      	ldrh	r3, [r7, #22]
9000900a:	2b00      	cmp	r3, #0
9000900c:	d101      	bne.n	90009012 <http_write+0x32>
    return ERR_OK;
9000900e:	2300      	movs	r3, #0
90009010:	e045      	b.n	9000909e <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
90009012:	68fb      	ldr	r3, [r7, #12]
90009014:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
90009018:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
9000901a:	8aba      	ldrh	r2, [r7, #20]
9000901c:	8afb      	ldrh	r3, [r7, #22]
9000901e:	429a      	cmp	r2, r3
90009020:	d201      	bcs.n	90009026 <http_write+0x46>
    len = max_len;
90009022:	8abb      	ldrh	r3, [r7, #20]
90009024:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
90009026:	68fb      	ldr	r3, [r7, #12]
90009028:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000902a:	005b      	lsls	r3, r3, #1
9000902c:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
9000902e:	8afa      	ldrh	r2, [r7, #22]
90009030:	8abb      	ldrh	r3, [r7, #20]
90009032:	429a      	cmp	r2, r3
90009034:	d901      	bls.n	9000903a <http_write+0x5a>
    len = max_len;
90009036:	8abb      	ldrh	r3, [r7, #20]
90009038:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
9000903a:	78fb      	ldrb	r3, [r7, #3]
9000903c:	8afa      	ldrh	r2, [r7, #22]
9000903e:	68b9      	ldr	r1, [r7, #8]
90009040:	68f8      	ldr	r0, [r7, #12]
90009042:	f007 ff4b 	bl	90010edc <tcp_write>
90009046:	4603      	mov	r3, r0
90009048:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
9000904a:	f997 3013 	ldrsb.w	r3, [r7, #19]
9000904e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
90009052:	d10f      	bne.n	90009074 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
90009054:	68fb      	ldr	r3, [r7, #12]
90009056:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
9000905a:	2b00      	cmp	r3, #0
9000905c:	d004      	beq.n	90009068 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
9000905e:	68fb      	ldr	r3, [r7, #12]
90009060:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
90009064:	2b08      	cmp	r3, #8
90009066:	d902      	bls.n	9000906e <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
90009068:	2301      	movs	r3, #1
9000906a:	82fb      	strh	r3, [r7, #22]
9000906c:	e002      	b.n	90009074 <http_write+0x94>
      } else {
        len /= 2;
9000906e:	8afb      	ldrh	r3, [r7, #22]
90009070:	085b      	lsrs	r3, r3, #1
90009072:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
90009074:	f997 3013 	ldrsb.w	r3, [r7, #19]
90009078:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
9000907c:	d102      	bne.n	90009084 <http_write+0xa4>
9000907e:	8afb      	ldrh	r3, [r7, #22]
90009080:	2b01      	cmp	r3, #1
90009082:	d8da      	bhi.n	9000903a <http_write+0x5a>

  if (err == ERR_OK) {
90009084:	f997 3013 	ldrsb.w	r3, [r7, #19]
90009088:	2b00      	cmp	r3, #0
9000908a:	d103      	bne.n	90009094 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
9000908c:	687b      	ldr	r3, [r7, #4]
9000908e:	8afa      	ldrh	r2, [r7, #22]
90009090:	801a      	strh	r2, [r3, #0]
90009092:	e002      	b.n	9000909a <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
90009094:	687b      	ldr	r3, [r7, #4]
90009096:	2200      	movs	r2, #0
90009098:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
9000909a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
9000909e:	4618      	mov	r0, r3
900090a0:	3718      	adds	r7, #24
900090a2:	46bd      	mov	sp, r7
900090a4:	bd80      	pop	{r7, pc}
900090a6:	bf00      	nop
900090a8:	90017ac4 	.word	0x90017ac4
900090ac:	90017afc 	.word	0x90017afc
900090b0:	90017b0c 	.word	0x90017b0c

900090b4 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
900090b4:	b580      	push	{r7, lr}
900090b6:	b086      	sub	sp, #24
900090b8:	af00      	add	r7, sp, #0
900090ba:	60f8      	str	r0, [r7, #12]
900090bc:	60b9      	str	r1, [r7, #8]
900090be:	4613      	mov	r3, r2
900090c0:	71fb      	strb	r3, [r7, #7]
  err_t err;
  LWIP_DEBUGF(HTTPD_DEBUG, ("Closing connection %p\n", (void *)pcb));

#if LWIP_HTTPD_SUPPORT_POST
  if (hs != NULL) {
900090c2:	68bb      	ldr	r3, [r7, #8]
900090c4:	2b00      	cmp	r3, #0
900090c6:	d00c      	beq.n	900090e2 <http_close_or_abort_conn+0x2e>
    if ((hs->post_content_len_left != 0)
900090c8:	68bb      	ldr	r3, [r7, #8]
900090ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
900090ce:	2b00      	cmp	r3, #0
900090d0:	d007      	beq.n	900090e2 <http_close_or_abort_conn+0x2e>
#if LWIP_HTTPD_POST_MANUAL_WND
        || ((hs->no_auto_wnd != 0) && (hs->unrecved_bytes != 0))
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
       ) {
      /* make sure the post code knows that the connection is closed */
      http_uri_buf[0] = 0;
900090d2:	4b1f      	ldr	r3, [pc, #124]	; (90009150 <http_close_or_abort_conn+0x9c>)
900090d4:	2200      	movs	r2, #0
900090d6:	701a      	strb	r2, [r3, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
900090d8:	223f      	movs	r2, #63	; 0x3f
900090da:	491d      	ldr	r1, [pc, #116]	; (90009150 <http_close_or_abort_conn+0x9c>)
900090dc:	68b8      	ldr	r0, [r7, #8]
900090de:	f7f8 f917 	bl	90001310 <httpd_post_finished>
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
900090e2:	2100      	movs	r1, #0
900090e4:	68f8      	ldr	r0, [r7, #12]
900090e6:	f004 ffb7 	bl	9000e058 <tcp_arg>
  altcp_recv(pcb, NULL);
900090ea:	2100      	movs	r1, #0
900090ec:	68f8      	ldr	r0, [r7, #12]
900090ee:	f004 ffc5 	bl	9000e07c <tcp_recv>
  altcp_err(pcb, NULL);
900090f2:	2100      	movs	r1, #0
900090f4:	68f8      	ldr	r0, [r7, #12]
900090f6:	f005 f805 	bl	9000e104 <tcp_err>
  altcp_poll(pcb, NULL, 0);
900090fa:	2200      	movs	r2, #0
900090fc:	2100      	movs	r1, #0
900090fe:	68f8      	ldr	r0, [r7, #12]
90009100:	f005 f83a 	bl	9000e178 <tcp_poll>
  altcp_sent(pcb, NULL);
90009104:	2100      	movs	r1, #0
90009106:	68f8      	ldr	r0, [r7, #12]
90009108:	f004 ffda 	bl	9000e0c0 <tcp_sent>
  if (hs != NULL) {
9000910c:	68bb      	ldr	r3, [r7, #8]
9000910e:	2b00      	cmp	r3, #0
90009110:	d002      	beq.n	90009118 <http_close_or_abort_conn+0x64>
    http_state_free(hs);
90009112:	68b8      	ldr	r0, [r7, #8]
90009114:	f7ff ff52 	bl	90008fbc <http_state_free>
  }

  if (abort_conn) {
90009118:	79fb      	ldrb	r3, [r7, #7]
9000911a:	2b00      	cmp	r3, #0
9000911c:	d004      	beq.n	90009128 <http_close_or_abort_conn+0x74>
    altcp_abort(pcb);
9000911e:	68f8      	ldr	r0, [r7, #12]
90009120:	f003 fedc 	bl	9000cedc <tcp_abort>
    return ERR_OK;
90009124:	2300      	movs	r3, #0
90009126:	e00f      	b.n	90009148 <http_close_or_abort_conn+0x94>
  }
  err = altcp_close(pcb);
90009128:	68f8      	ldr	r0, [r7, #12]
9000912a:	f003 fded 	bl	9000cd08 <tcp_close>
9000912e:	4603      	mov	r3, r0
90009130:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
90009132:	f997 3017 	ldrsb.w	r3, [r7, #23]
90009136:	2b00      	cmp	r3, #0
90009138:	d004      	beq.n	90009144 <http_close_or_abort_conn+0x90>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
9000913a:	2204      	movs	r2, #4
9000913c:	4905      	ldr	r1, [pc, #20]	; (90009154 <http_close_or_abort_conn+0xa0>)
9000913e:	68f8      	ldr	r0, [r7, #12]
90009140:	f005 f81a 	bl	9000e178 <tcp_poll>
  }
  return err;
90009144:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
90009148:	4618      	mov	r0, r3
9000914a:	3718      	adds	r7, #24
9000914c:	46bd      	mov	sp, r7
9000914e:	bd80      	pop	{r7, pc}
90009150:	2401c170 	.word	0x2401c170
90009154:	9000a5a3 	.word	0x9000a5a3

90009158 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
90009158:	b580      	push	{r7, lr}
9000915a:	b082      	sub	sp, #8
9000915c:	af00      	add	r7, sp, #0
9000915e:	6078      	str	r0, [r7, #4]
90009160:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
90009162:	2200      	movs	r2, #0
90009164:	6839      	ldr	r1, [r7, #0]
90009166:	6878      	ldr	r0, [r7, #4]
90009168:	f7ff ffa4 	bl	900090b4 <http_close_or_abort_conn>
9000916c:	4603      	mov	r3, r0
}
9000916e:	4618      	mov	r0, r3
90009170:	3708      	adds	r7, #8
90009172:	46bd      	mov	sp, r7
90009174:	bd80      	pop	{r7, pc}

90009176 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
90009176:	b580      	push	{r7, lr}
90009178:	b082      	sub	sp, #8
9000917a:	af00      	add	r7, sp, #0
9000917c:	6078      	str	r0, [r7, #4]
9000917e:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
90009180:	6839      	ldr	r1, [r7, #0]
90009182:	6878      	ldr	r0, [r7, #4]
90009184:	f7ff ffe8 	bl	90009158 <http_close_conn>
  }
}
90009188:	bf00      	nop
9000918a:	3708      	adds	r7, #8
9000918c:	46bd      	mov	sp, r7
9000918e:	bd80      	pop	{r7, pc}

90009190 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
90009190:	b580      	push	{r7, lr}
90009192:	b086      	sub	sp, #24
90009194:	af00      	add	r7, sp, #0
90009196:	6078      	str	r0, [r7, #4]
90009198:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
9000919a:	683b      	ldr	r3, [r7, #0]
9000919c:	2b00      	cmp	r3, #0
9000919e:	d003      	beq.n	900091a8 <extract_uri_parameters+0x18>
900091a0:	683b      	ldr	r3, [r7, #0]
900091a2:	781b      	ldrb	r3, [r3, #0]
900091a4:	2b00      	cmp	r3, #0
900091a6:	d101      	bne.n	900091ac <extract_uri_parameters+0x1c>
    return (0);
900091a8:	2300      	movs	r3, #0
900091aa:	e04b      	b.n	90009244 <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
900091ac:	683b      	ldr	r3, [r7, #0]
900091ae:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
900091b0:	2300      	movs	r3, #0
900091b2:	613b      	str	r3, [r7, #16]
900091b4:	e03f      	b.n	90009236 <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
900091b6:	687b      	ldr	r3, [r7, #4]
900091b8:	693a      	ldr	r2, [r7, #16]
900091ba:	320c      	adds	r2, #12
900091bc:	6979      	ldr	r1, [r7, #20]
900091be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
900091c2:	697b      	ldr	r3, [r7, #20]
900091c4:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
900091c6:	2126      	movs	r1, #38	; 0x26
900091c8:	6978      	ldr	r0, [r7, #20]
900091ca:	f00c feff 	bl	90015fcc <strchr>
900091ce:	6178      	str	r0, [r7, #20]
    if (pair) {
900091d0:	697b      	ldr	r3, [r7, #20]
900091d2:	2b00      	cmp	r3, #0
900091d4:	d006      	beq.n	900091e4 <extract_uri_parameters+0x54>
      *pair = '\0';
900091d6:	697b      	ldr	r3, [r7, #20]
900091d8:	2200      	movs	r2, #0
900091da:	701a      	strb	r2, [r3, #0]
      pair++;
900091dc:	697b      	ldr	r3, [r7, #20]
900091de:	3301      	adds	r3, #1
900091e0:	617b      	str	r3, [r7, #20]
900091e2:	e00c      	b.n	900091fe <extract_uri_parameters+0x6e>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
900091e4:	2120      	movs	r1, #32
900091e6:	68f8      	ldr	r0, [r7, #12]
900091e8:	f00c fef0 	bl	90015fcc <strchr>
900091ec:	6178      	str	r0, [r7, #20]
      if (pair) {
900091ee:	697b      	ldr	r3, [r7, #20]
900091f0:	2b00      	cmp	r3, #0
900091f2:	d002      	beq.n	900091fa <extract_uri_parameters+0x6a>
        *pair = '\0';
900091f4:	697b      	ldr	r3, [r7, #20]
900091f6:	2200      	movs	r2, #0
900091f8:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
900091fa:	2300      	movs	r3, #0
900091fc:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
900091fe:	213d      	movs	r1, #61	; 0x3d
90009200:	68f8      	ldr	r0, [r7, #12]
90009202:	f00c fee3 	bl	90015fcc <strchr>
90009206:	60f8      	str	r0, [r7, #12]
    if (equals) {
90009208:	68fb      	ldr	r3, [r7, #12]
9000920a:	2b00      	cmp	r3, #0
9000920c:	d00a      	beq.n	90009224 <extract_uri_parameters+0x94>
      *equals = '\0';
9000920e:	68fb      	ldr	r3, [r7, #12]
90009210:	2200      	movs	r2, #0
90009212:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
90009214:	68fb      	ldr	r3, [r7, #12]
90009216:	1c59      	adds	r1, r3, #1
90009218:	687b      	ldr	r3, [r7, #4]
9000921a:	693a      	ldr	r2, [r7, #16]
9000921c:	321c      	adds	r2, #28
9000921e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
90009222:	e005      	b.n	90009230 <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
90009224:	687b      	ldr	r3, [r7, #4]
90009226:	693a      	ldr	r2, [r7, #16]
90009228:	321c      	adds	r2, #28
9000922a:	2100      	movs	r1, #0
9000922c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
90009230:	693b      	ldr	r3, [r7, #16]
90009232:	3301      	adds	r3, #1
90009234:	613b      	str	r3, [r7, #16]
90009236:	693b      	ldr	r3, [r7, #16]
90009238:	2b0f      	cmp	r3, #15
9000923a:	dc02      	bgt.n	90009242 <extract_uri_parameters+0xb2>
9000923c:	697b      	ldr	r3, [r7, #20]
9000923e:	2b00      	cmp	r3, #0
90009240:	d1b9      	bne.n	900091b6 <extract_uri_parameters+0x26>
    }
  }

  return loop;
90009242:	693b      	ldr	r3, [r7, #16]
}
90009244:	4618      	mov	r0, r3
90009246:	3718      	adds	r7, #24
90009248:	46bd      	mov	sp, r7
9000924a:	bd80      	pop	{r7, pc}

9000924c <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
9000924c:	b590      	push	{r4, r7, lr}
9000924e:	b089      	sub	sp, #36	; 0x24
90009250:	af02      	add	r7, sp, #8
90009252:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
90009254:	687b      	ldr	r3, [r7, #4]
90009256:	2b00      	cmp	r3, #0
90009258:	d106      	bne.n	90009268 <get_tag_insert+0x1c>
9000925a:	4b5b      	ldr	r3, [pc, #364]	; (900093c8 <get_tag_insert+0x17c>)
9000925c:	f44f 7241 	mov.w	r2, #772	; 0x304
90009260:	495a      	ldr	r1, [pc, #360]	; (900093cc <get_tag_insert+0x180>)
90009262:	485b      	ldr	r0, [pc, #364]	; (900093d0 <get_tag_insert+0x184>)
90009264:	f00c fcc6 	bl	90015bf4 <iprintf>
  ssi = hs->ssi;
90009268:	687b      	ldr	r3, [r7, #4]
9000926a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000926c:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
9000926e:	693b      	ldr	r3, [r7, #16]
90009270:	2b00      	cmp	r3, #0
90009272:	d106      	bne.n	90009282 <get_tag_insert+0x36>
90009274:	4b54      	ldr	r3, [pc, #336]	; (900093c8 <get_tag_insert+0x17c>)
90009276:	f240 3206 	movw	r2, #774	; 0x306
9000927a:	4956      	ldr	r1, [pc, #344]	; (900093d4 <get_tag_insert+0x188>)
9000927c:	4854      	ldr	r0, [pc, #336]	; (900093d0 <get_tag_insert+0x184>)
9000927e:	f00c fcb9 	bl	90015bf4 <iprintf>
#if LWIP_HTTPD_SSI_MULTIPART
  current_tag_part = ssi->tag_part;
90009282:	693b      	ldr	r3, [r7, #16]
90009284:	8a9b      	ldrh	r3, [r3, #20]
90009286:	81fb      	strh	r3, [r7, #14]
  ssi->tag_part = HTTPD_LAST_TAG_PART;
90009288:	693b      	ldr	r3, [r7, #16]
9000928a:	f64f 72ff 	movw	r2, #65535	; 0xffff
9000928e:	829a      	strh	r2, [r3, #20]
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if (httpd_ssi_handler
90009290:	4b51      	ldr	r3, [pc, #324]	; (900093d8 <get_tag_insert+0x18c>)
90009292:	681b      	ldr	r3, [r3, #0]
90009294:	2b00      	cmp	r3, #0
90009296:	d034      	beq.n	90009302 <get_tag_insert+0xb6>
#if !LWIP_HTTPD_SSI_RAW
      && httpd_tags && httpd_num_tags
90009298:	4b50      	ldr	r3, [pc, #320]	; (900093dc <get_tag_insert+0x190>)
9000929a:	681b      	ldr	r3, [r3, #0]
9000929c:	2b00      	cmp	r3, #0
9000929e:	d030      	beq.n	90009302 <get_tag_insert+0xb6>
900092a0:	4b4f      	ldr	r3, [pc, #316]	; (900093e0 <get_tag_insert+0x194>)
900092a2:	681b      	ldr	r3, [r3, #0]
900092a4:	2b00      	cmp	r3, #0
900092a6:	d02c      	beq.n	90009302 <get_tag_insert+0xb6>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
900092a8:	2300      	movs	r3, #0
900092aa:	617b      	str	r3, [r7, #20]
900092ac:	e024      	b.n	900092f8 <get_tag_insert+0xac>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
900092ae:	693b      	ldr	r3, [r7, #16]
900092b0:	f103 0018 	add.w	r0, r3, #24
900092b4:	4b49      	ldr	r3, [pc, #292]	; (900093dc <get_tag_insert+0x190>)
900092b6:	681a      	ldr	r2, [r3, #0]
900092b8:	697b      	ldr	r3, [r7, #20]
900092ba:	009b      	lsls	r3, r3, #2
900092bc:	4413      	add	r3, r2
900092be:	681b      	ldr	r3, [r3, #0]
900092c0:	4619      	mov	r1, r3
900092c2:	f7f7 f80d 	bl	900002e0 <strcmp>
900092c6:	4603      	mov	r3, r0
900092c8:	2b00      	cmp	r3, #0
900092ca:	d112      	bne.n	900092f2 <get_tag_insert+0xa6>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
900092cc:	4b42      	ldr	r3, [pc, #264]	; (900093d8 <get_tag_insert+0x18c>)
900092ce:	681c      	ldr	r4, [r3, #0]
900092d0:	693b      	ldr	r3, [r7, #16]
900092d2:	f103 0121 	add.w	r1, r3, #33	; 0x21
900092d6:	693b      	ldr	r3, [r7, #16]
900092d8:	3314      	adds	r3, #20
900092da:	89fa      	ldrh	r2, [r7, #14]
900092dc:	9300      	str	r3, [sp, #0]
900092de:	4613      	mov	r3, r2
900092e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
900092e4:	6978      	ldr	r0, [r7, #20]
900092e6:	47a0      	blx	r4
900092e8:	4603      	mov	r3, r0
900092ea:	461a      	mov	r2, r3
900092ec:	693b      	ldr	r3, [r7, #16]
900092ee:	825a      	strh	r2, [r3, #18]
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
900092f0:	e066      	b.n	900093c0 <get_tag_insert+0x174>
    for (tag = 0; tag < httpd_num_tags; tag++) {
900092f2:	697b      	ldr	r3, [r7, #20]
900092f4:	3301      	adds	r3, #1
900092f6:	617b      	str	r3, [r7, #20]
900092f8:	4b39      	ldr	r3, [pc, #228]	; (900093e0 <get_tag_insert+0x194>)
900092fa:	681b      	ldr	r3, [r3, #0]
900092fc:	697a      	ldr	r2, [r7, #20]
900092fe:	429a      	cmp	r2, r3
90009300:	dbd5      	blt.n	900092ae <get_tag_insert+0x62>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
90009302:	693b      	ldr	r3, [r7, #16]
90009304:	3318      	adds	r3, #24
90009306:	4618      	mov	r0, r3
90009308:	f7f6 fff4 	bl	900002f4 <strlen>
9000930c:	4603      	mov	r3, r0
9000930e:	f240 32ce 	movw	r2, #974	; 0x3ce
90009312:	4293      	cmp	r3, r2
90009314:	d81b      	bhi.n	9000934e <get_tag_insert+0x102>
90009316:	693b      	ldr	r3, [r7, #16]
90009318:	3318      	adds	r3, #24
9000931a:	4618      	mov	r0, r3
9000931c:	f7f6 ffea 	bl	900002f4 <strlen>
90009320:	4603      	mov	r3, r0
90009322:	2b09      	cmp	r3, #9
90009324:	d813      	bhi.n	9000934e <get_tag_insert+0x102>
90009326:	693b      	ldr	r3, [r7, #16]
90009328:	3318      	adds	r3, #24
9000932a:	4618      	mov	r0, r3
9000932c:	f7f6 ffe2 	bl	900002f4 <strlen>
90009330:	4603      	mov	r3, r0
90009332:	f240 32ce 	movw	r2, #974	; 0x3ce
90009336:	4293      	cmp	r3, r2
90009338:	d806      	bhi.n	90009348 <get_tag_insert+0xfc>
9000933a:	693b      	ldr	r3, [r7, #16]
9000933c:	3318      	adds	r3, #24
9000933e:	4618      	mov	r0, r3
90009340:	f7f6 ffd8 	bl	900002f4 <strlen>
90009344:	4603      	mov	r3, r0
90009346:	e003      	b.n	90009350 <get_tag_insert+0x104>
90009348:	f240 33cf 	movw	r3, #975	; 0x3cf
9000934c:	e000      	b.n	90009350 <get_tag_insert+0x104>
9000934e:	2309      	movs	r3, #9
90009350:	60bb      	str	r3, [r7, #8]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
90009352:	693b      	ldr	r3, [r7, #16]
90009354:	3321      	adds	r3, #33	; 0x21
90009356:	2212      	movs	r2, #18
90009358:	4922      	ldr	r1, [pc, #136]	; (900093e4 <get_tag_insert+0x198>)
9000935a:	4618      	mov	r0, r3
9000935c:	f00c fb85 	bl	90015a6a <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
90009360:	693b      	ldr	r3, [r7, #16]
90009362:	f103 0033 	add.w	r0, r3, #51	; 0x33
90009366:	693b      	ldr	r3, [r7, #16]
90009368:	3318      	adds	r3, #24
9000936a:	68ba      	ldr	r2, [r7, #8]
9000936c:	4619      	mov	r1, r3
9000936e:	f00c fb7c 	bl	90015a6a <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
90009372:	68bb      	ldr	r3, [r7, #8]
90009374:	3312      	adds	r3, #18
90009376:	3320      	adds	r3, #32
90009378:	693a      	ldr	r2, [r7, #16]
9000937a:	4413      	add	r3, r2
9000937c:	3301      	adds	r3, #1
9000937e:	2207      	movs	r2, #7
90009380:	4919      	ldr	r1, [pc, #100]	; (900093e8 <get_tag_insert+0x19c>)
90009382:	4618      	mov	r0, r3
90009384:	f00c fb71 	bl	90015a6a <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
90009388:	68bb      	ldr	r3, [r7, #8]
9000938a:	3319      	adds	r3, #25
9000938c:	693a      	ldr	r2, [r7, #16]
9000938e:	4413      	add	r3, r2
90009390:	2200      	movs	r2, #0
90009392:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  len = strlen(ssi->tag_insert);
90009396:	693b      	ldr	r3, [r7, #16]
90009398:	3321      	adds	r3, #33	; 0x21
9000939a:	4618      	mov	r0, r3
9000939c:	f7f6 ffaa 	bl	900002f4 <strlen>
900093a0:	60b8      	str	r0, [r7, #8]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
900093a2:	68bb      	ldr	r3, [r7, #8]
900093a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
900093a8:	d306      	bcc.n	900093b8 <get_tag_insert+0x16c>
900093aa:	4b07      	ldr	r3, [pc, #28]	; (900093c8 <get_tag_insert+0x17c>)
900093ac:	f240 323f 	movw	r2, #831	; 0x33f
900093b0:	490e      	ldr	r1, [pc, #56]	; (900093ec <get_tag_insert+0x1a0>)
900093b2:	4807      	ldr	r0, [pc, #28]	; (900093d0 <get_tag_insert+0x184>)
900093b4:	f00c fc1e 	bl	90015bf4 <iprintf>
  ssi->tag_insert_len = (u16_t)len;
900093b8:	68bb      	ldr	r3, [r7, #8]
900093ba:	b29a      	uxth	r2, r3
900093bc:	693b      	ldr	r3, [r7, #16]
900093be:	825a      	strh	r2, [r3, #18]
}
900093c0:	371c      	adds	r7, #28
900093c2:	46bd      	mov	sp, r7
900093c4:	bd90      	pop	{r4, r7, pc}
900093c6:	bf00      	nop
900093c8:	90017ac4 	.word	0x90017ac4
900093cc:	90017b34 	.word	0x90017b34
900093d0:	90017b0c 	.word	0x90017b0c
900093d4:	90017b40 	.word	0x90017b40
900093d8:	2401c1b0 	.word	0x2401c1b0
900093dc:	2401c1b8 	.word	0x2401c1b8
900093e0:	2401c1b4 	.word	0x2401c1b4
900093e4:	90017b4c 	.word	0x90017b4c
900093e8:	90017b60 	.word	0x90017b60
900093ec:	90017b68 	.word	0x90017b68

900093f0 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
900093f0:	b580      	push	{r7, lr}
900093f2:	b084      	sub	sp, #16
900093f4:	af00      	add	r7, sp, #0
900093f6:	6078      	str	r0, [r7, #4]
900093f8:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
900093fa:	683b      	ldr	r3, [r7, #0]
900093fc:	695b      	ldr	r3, [r3, #20]
900093fe:	2b00      	cmp	r3, #0
90009400:	d105      	bne.n	9000940e <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
90009402:	6839      	ldr	r1, [r7, #0]
90009404:	6878      	ldr	r0, [r7, #4]
90009406:	f7ff feb6 	bl	90009176 <http_eof>
    return 0;
9000940a:	2300      	movs	r3, #0
9000940c:	e016      	b.n	9000943c <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
9000940e:	683b      	ldr	r3, [r7, #0]
90009410:	695b      	ldr	r3, [r3, #20]
90009412:	4618      	mov	r0, r3
90009414:	f7ff fd54 	bl	90008ec0 <fs_bytes_left>
90009418:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
9000941a:	68fb      	ldr	r3, [r7, #12]
9000941c:	2b00      	cmp	r3, #0
9000941e:	dc05      	bgt.n	9000942c <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
90009420:	6839      	ldr	r1, [r7, #0]
90009422:	6878      	ldr	r0, [r7, #4]
90009424:	f7ff fea7 	bl	90009176 <http_eof>
    return 0;
90009428:	2300      	movs	r3, #0
9000942a:	e007      	b.n	9000943c <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
9000942c:	4b05      	ldr	r3, [pc, #20]	; (90009444 <http_check_eof+0x54>)
9000942e:	f240 429d 	movw	r2, #1181	; 0x49d
90009432:	4905      	ldr	r1, [pc, #20]	; (90009448 <http_check_eof+0x58>)
90009434:	4805      	ldr	r0, [pc, #20]	; (9000944c <http_check_eof+0x5c>)
90009436:	f00c fbdd 	bl	90015bf4 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
9000943a:	2301      	movs	r3, #1
}
9000943c:	4618      	mov	r0, r3
9000943e:	3710      	adds	r7, #16
90009440:	46bd      	mov	sp, r7
90009442:	bd80      	pop	{r7, pc}
90009444:	90017ac4 	.word	0x90017ac4
90009448:	90017b78 	.word	0x90017b78
9000944c:	90017b0c 	.word	0x90017b0c

90009450 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
90009450:	b580      	push	{r7, lr}
90009452:	b084      	sub	sp, #16
90009454:	af00      	add	r7, sp, #0
90009456:	6078      	str	r0, [r7, #4]
90009458:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
9000945a:	2300      	movs	r3, #0
9000945c:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
9000945e:	683b      	ldr	r3, [r7, #0]
90009460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90009462:	f64f 72fe 	movw	r2, #65534	; 0xfffe
90009466:	4293      	cmp	r3, r2
90009468:	d803      	bhi.n	90009472 <http_send_data_nonssi+0x22>
9000946a:	683b      	ldr	r3, [r7, #0]
9000946c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000946e:	b29b      	uxth	r3, r3
90009470:	e001      	b.n	90009476 <http_send_data_nonssi+0x26>
90009472:	f64f 73ff 	movw	r3, #65535	; 0xffff
90009476:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
90009478:	683b      	ldr	r3, [r7, #0]
9000947a:	6999      	ldr	r1, [r3, #24]
9000947c:	f107 020c 	add.w	r2, r7, #12
90009480:	2300      	movs	r3, #0
90009482:	6878      	ldr	r0, [r7, #4]
90009484:	f7ff fdac 	bl	90008fe0 <http_write>
90009488:	4603      	mov	r3, r0
9000948a:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
9000948c:	f997 300e 	ldrsb.w	r3, [r7, #14]
90009490:	2b00      	cmp	r3, #0
90009492:	d10d      	bne.n	900094b0 <http_send_data_nonssi+0x60>
    data_to_send = 1;
90009494:	2301      	movs	r3, #1
90009496:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
90009498:	683b      	ldr	r3, [r7, #0]
9000949a:	699b      	ldr	r3, [r3, #24]
9000949c:	89ba      	ldrh	r2, [r7, #12]
9000949e:	441a      	add	r2, r3
900094a0:	683b      	ldr	r3, [r7, #0]
900094a2:	619a      	str	r2, [r3, #24]
    hs->left -= len;
900094a4:	683b      	ldr	r3, [r7, #0]
900094a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900094a8:	89ba      	ldrh	r2, [r7, #12]
900094aa:	1a9a      	subs	r2, r3, r2
900094ac:	683b      	ldr	r3, [r7, #0]
900094ae:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
900094b0:	7bfb      	ldrb	r3, [r7, #15]
}
900094b2:	4618      	mov	r0, r3
900094b4:	3710      	adds	r7, #16
900094b6:	46bd      	mov	sp, r7
900094b8:	bd80      	pop	{r7, pc}
	...

900094bc <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
900094bc:	b580      	push	{r7, lr}
900094be:	b086      	sub	sp, #24
900094c0:	af00      	add	r7, sp, #0
900094c2:	6078      	str	r0, [r7, #4]
900094c4:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
900094c6:	2300      	movs	r3, #0
900094c8:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
900094ca:	2300      	movs	r3, #0
900094cc:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
900094ce:	683b      	ldr	r3, [r7, #0]
900094d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900094d2:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
900094d4:	693b      	ldr	r3, [r7, #16]
900094d6:	2b00      	cmp	r3, #0
900094d8:	d106      	bne.n	900094e8 <http_send_data_ssi+0x2c>
900094da:	4b89      	ldr	r3, [pc, #548]	; (90009700 <http_send_data_ssi+0x244>)
900094dc:	f240 42cb 	movw	r2, #1227	; 0x4cb
900094e0:	4988      	ldr	r1, [pc, #544]	; (90009704 <http_send_data_ssi+0x248>)
900094e2:	4889      	ldr	r0, [pc, #548]	; (90009708 <http_send_data_ssi+0x24c>)
900094e4:	f00c fb86 	bl	90015bf4 <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
900094e8:	687b      	ldr	r3, [r7, #4]
900094ea:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
900094ee:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
900094f0:	693b      	ldr	r3, [r7, #16]
900094f2:	681a      	ldr	r2, [r3, #0]
900094f4:	683b      	ldr	r3, [r7, #0]
900094f6:	699b      	ldr	r3, [r3, #24]
900094f8:	429a      	cmp	r2, r3
900094fa:	f240 82c5 	bls.w	90009a88 <http_send_data_ssi+0x5cc>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
900094fe:	693b      	ldr	r3, [r7, #16]
90009500:	681a      	ldr	r2, [r3, #0]
90009502:	683b      	ldr	r3, [r7, #0]
90009504:	699b      	ldr	r3, [r3, #24]
90009506:	1ad3      	subs	r3, r2, r3
90009508:	f64f 72fe 	movw	r2, #65534	; 0xfffe
9000950c:	4293      	cmp	r3, r2
9000950e:	dc06      	bgt.n	9000951e <http_send_data_ssi+0x62>
90009510:	693b      	ldr	r3, [r7, #16]
90009512:	681a      	ldr	r2, [r3, #0]
90009514:	683b      	ldr	r3, [r7, #0]
90009516:	699b      	ldr	r3, [r3, #24]
90009518:	1ad3      	subs	r3, r2, r3
9000951a:	b29b      	uxth	r3, r3
9000951c:	e001      	b.n	90009522 <http_send_data_ssi+0x66>
9000951e:	f64f 73ff 	movw	r3, #65535	; 0xffff
90009522:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
90009524:	683b      	ldr	r3, [r7, #0]
90009526:	6999      	ldr	r1, [r3, #24]
90009528:	f107 020e 	add.w	r2, r7, #14
9000952c:	2300      	movs	r3, #0
9000952e:	6878      	ldr	r0, [r7, #4]
90009530:	f7ff fd56 	bl	90008fe0 <http_write>
90009534:	4603      	mov	r3, r0
90009536:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
90009538:	f997 3017 	ldrsb.w	r3, [r7, #23]
9000953c:	2b00      	cmp	r3, #0
9000953e:	d10d      	bne.n	9000955c <http_send_data_ssi+0xa0>
      data_to_send = 1;
90009540:	2301      	movs	r3, #1
90009542:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
90009544:	683b      	ldr	r3, [r7, #0]
90009546:	699b      	ldr	r3, [r3, #24]
90009548:	89fa      	ldrh	r2, [r7, #14]
9000954a:	441a      	add	r2, r3
9000954c:	683b      	ldr	r3, [r7, #0]
9000954e:	619a      	str	r2, [r3, #24]
      hs->left -= len;
90009550:	683b      	ldr	r3, [r7, #0]
90009552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90009554:	89fa      	ldrh	r2, [r7, #14]
90009556:	1a9a      	subs	r2, r3, r2
90009558:	683b      	ldr	r3, [r7, #0]
9000955a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
9000955c:	687b      	ldr	r3, [r7, #4]
9000955e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
90009562:	2b00      	cmp	r3, #0
90009564:	f040 8290 	bne.w	90009a88 <http_send_data_ssi+0x5cc>
      return data_to_send;
90009568:	7dbb      	ldrb	r3, [r7, #22]
9000956a:	e2d6      	b.n	90009b1a <http_send_data_ssi+0x65e>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
9000956c:	89fb      	ldrh	r3, [r7, #14]
9000956e:	2b00      	cmp	r3, #0
90009570:	d101      	bne.n	90009576 <http_send_data_ssi+0xba>
      return data_to_send;
90009572:	7dbb      	ldrb	r3, [r7, #22]
90009574:	e2d1      	b.n	90009b1a <http_send_data_ssi+0x65e>
    }
    switch (ssi->tag_state) {
90009576:	693b      	ldr	r3, [r7, #16]
90009578:	f893 340a 	ldrb.w	r3, [r3, #1034]	; 0x40a
9000957c:	2b04      	cmp	r3, #4
9000957e:	f200 8282 	bhi.w	90009a86 <http_send_data_ssi+0x5ca>
90009582:	a201      	add	r2, pc, #4	; (adr r2, 90009588 <http_send_data_ssi+0xcc>)
90009584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
90009588:	9000959d 	.word	0x9000959d
9000958c:	900095f7 	.word	0x900095f7
90009590:	90009669 	.word	0x90009669
90009594:	900097b1 	.word	0x900097b1
90009598:	90009927 	.word	0x90009927
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
9000959c:	2300      	movs	r3, #0
9000959e:	757b      	strb	r3, [r7, #21]
900095a0:	e01b      	b.n	900095da <http_send_data_ssi+0x11e>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
900095a2:	693b      	ldr	r3, [r7, #16]
900095a4:	681b      	ldr	r3, [r3, #0]
900095a6:	781a      	ldrb	r2, [r3, #0]
900095a8:	7d7b      	ldrb	r3, [r7, #21]
900095aa:	4958      	ldr	r1, [pc, #352]	; (9000970c <http_send_data_ssi+0x250>)
900095ac:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
900095b0:	781b      	ldrb	r3, [r3, #0]
900095b2:	429a      	cmp	r2, r3
900095b4:	d10e      	bne.n	900095d4 <http_send_data_ssi+0x118>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
900095b6:	693b      	ldr	r3, [r7, #16]
900095b8:	7d7a      	ldrb	r2, [r7, #21]
900095ba:	759a      	strb	r2, [r3, #22]
            ssi->tag_state = TAG_LEADIN;
900095bc:	693b      	ldr	r3, [r7, #16]
900095be:	2201      	movs	r2, #1
900095c0:	f883 240a 	strb.w	r2, [r3, #1034]	; 0x40a
            ssi->tag_index = 1;
900095c4:	693b      	ldr	r3, [r7, #16]
900095c6:	2201      	movs	r2, #1
900095c8:	821a      	strh	r2, [r3, #16]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
900095ca:	693b      	ldr	r3, [r7, #16]
900095cc:	681a      	ldr	r2, [r3, #0]
900095ce:	693b      	ldr	r3, [r7, #16]
900095d0:	605a      	str	r2, [r3, #4]
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
900095d2:	e005      	b.n	900095e0 <http_send_data_ssi+0x124>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
900095d4:	7d7b      	ldrb	r3, [r7, #21]
900095d6:	3301      	adds	r3, #1
900095d8:	757b      	strb	r3, [r7, #21]
900095da:	7d7b      	ldrb	r3, [r7, #21]
900095dc:	2b01      	cmp	r3, #1
900095de:	d9e0      	bls.n	900095a2 <http_send_data_ssi+0xe6>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
900095e0:	693b      	ldr	r3, [r7, #16]
900095e2:	68db      	ldr	r3, [r3, #12]
900095e4:	1e5a      	subs	r2, r3, #1
900095e6:	693b      	ldr	r3, [r7, #16]
900095e8:	60da      	str	r2, [r3, #12]
        ssi->parsed++;
900095ea:	693b      	ldr	r3, [r7, #16]
900095ec:	681b      	ldr	r3, [r3, #0]
900095ee:	1c5a      	adds	r2, r3, #1
900095f0:	693b      	ldr	r3, [r7, #16]
900095f2:	601a      	str	r2, [r3, #0]
        break;
900095f4:	e248      	b.n	90009a88 <http_send_data_ssi+0x5cc>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
900095f6:	693b      	ldr	r3, [r7, #16]
900095f8:	7d9b      	ldrb	r3, [r3, #22]
900095fa:	461a      	mov	r2, r3
900095fc:	4b43      	ldr	r3, [pc, #268]	; (9000970c <http_send_data_ssi+0x250>)
900095fe:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
90009602:	693a      	ldr	r2, [r7, #16]
90009604:	8a12      	ldrh	r2, [r2, #16]
90009606:	4413      	add	r3, r2
90009608:	781b      	ldrb	r3, [r3, #0]
9000960a:	2b00      	cmp	r3, #0
9000960c:	d107      	bne.n	9000961e <http_send_data_ssi+0x162>
          ssi->tag_index = 0;
9000960e:	693b      	ldr	r3, [r7, #16]
90009610:	2200      	movs	r2, #0
90009612:	821a      	strh	r2, [r3, #16]
          ssi->tag_state = TAG_FOUND;
90009614:	693b      	ldr	r3, [r7, #16]
90009616:	2202      	movs	r2, #2
90009618:	f883 240a 	strb.w	r2, [r3, #1034]	; 0x40a
9000961c:	e234      	b.n	90009a88 <http_send_data_ssi+0x5cc>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
9000961e:	693b      	ldr	r3, [r7, #16]
90009620:	681b      	ldr	r3, [r3, #0]
90009622:	781a      	ldrb	r2, [r3, #0]
90009624:	693b      	ldr	r3, [r7, #16]
90009626:	7d9b      	ldrb	r3, [r3, #22]
90009628:	4619      	mov	r1, r3
9000962a:	4b38      	ldr	r3, [pc, #224]	; (9000970c <http_send_data_ssi+0x250>)
9000962c:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
90009630:	6939      	ldr	r1, [r7, #16]
90009632:	8a09      	ldrh	r1, [r1, #16]
90009634:	440b      	add	r3, r1
90009636:	781b      	ldrb	r3, [r3, #0]
90009638:	429a      	cmp	r2, r3
9000963a:	d106      	bne.n	9000964a <http_send_data_ssi+0x18e>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
9000963c:	693b      	ldr	r3, [r7, #16]
9000963e:	8a1b      	ldrh	r3, [r3, #16]
90009640:	3301      	adds	r3, #1
90009642:	b29a      	uxth	r2, r3
90009644:	693b      	ldr	r3, [r7, #16]
90009646:	821a      	strh	r2, [r3, #16]
90009648:	e003      	b.n	90009652 <http_send_data_ssi+0x196>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
9000964a:	693b      	ldr	r3, [r7, #16]
9000964c:	2200      	movs	r2, #0
9000964e:	f883 240a 	strb.w	r2, [r3, #1034]	; 0x40a
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
90009652:	693b      	ldr	r3, [r7, #16]
90009654:	68db      	ldr	r3, [r3, #12]
90009656:	1e5a      	subs	r2, r3, #1
90009658:	693b      	ldr	r3, [r7, #16]
9000965a:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
9000965c:	693b      	ldr	r3, [r7, #16]
9000965e:	681b      	ldr	r3, [r3, #0]
90009660:	1c5a      	adds	r2, r3, #1
90009662:	693b      	ldr	r3, [r7, #16]
90009664:	601a      	str	r2, [r3, #0]
        }
        break;
90009666:	e20f      	b.n	90009a88 <http_send_data_ssi+0x5cc>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
90009668:	693b      	ldr	r3, [r7, #16]
9000966a:	8a1b      	ldrh	r3, [r3, #16]
9000966c:	2b00      	cmp	r3, #0
9000966e:	d11e      	bne.n	900096ae <http_send_data_ssi+0x1f2>
90009670:	693b      	ldr	r3, [r7, #16]
90009672:	681b      	ldr	r3, [r3, #0]
90009674:	781b      	ldrb	r3, [r3, #0]
90009676:	2b20      	cmp	r3, #32
90009678:	d00e      	beq.n	90009698 <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
9000967a:	693b      	ldr	r3, [r7, #16]
9000967c:	681b      	ldr	r3, [r3, #0]
9000967e:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
90009680:	2b09      	cmp	r3, #9
90009682:	d009      	beq.n	90009698 <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
90009684:	693b      	ldr	r3, [r7, #16]
90009686:	681b      	ldr	r3, [r3, #0]
90009688:	781b      	ldrb	r3, [r3, #0]
9000968a:	2b0a      	cmp	r3, #10
9000968c:	d004      	beq.n	90009698 <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\r'))) {
9000968e:	693b      	ldr	r3, [r7, #16]
90009690:	681b      	ldr	r3, [r3, #0]
90009692:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
90009694:	2b0d      	cmp	r3, #13
90009696:	d10a      	bne.n	900096ae <http_send_data_ssi+0x1f2>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
90009698:	693b      	ldr	r3, [r7, #16]
9000969a:	68db      	ldr	r3, [r3, #12]
9000969c:	1e5a      	subs	r2, r3, #1
9000969e:	693b      	ldr	r3, [r7, #16]
900096a0:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
900096a2:	693b      	ldr	r3, [r7, #16]
900096a4:	681b      	ldr	r3, [r3, #0]
900096a6:	1c5a      	adds	r2, r3, #1
900096a8:	693b      	ldr	r3, [r7, #16]
900096aa:	601a      	str	r2, [r3, #0]
          break;
900096ac:	e1ec      	b.n	90009a88 <http_send_data_ssi+0x5cc>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
900096ae:	693b      	ldr	r3, [r7, #16]
900096b0:	681b      	ldr	r3, [r3, #0]
900096b2:	781a      	ldrb	r2, [r3, #0]
900096b4:	693b      	ldr	r3, [r7, #16]
900096b6:	7d9b      	ldrb	r3, [r3, #22]
900096b8:	4914      	ldr	r1, [pc, #80]	; (9000970c <http_send_data_ssi+0x250>)
900096ba:	00db      	lsls	r3, r3, #3
900096bc:	440b      	add	r3, r1
900096be:	685b      	ldr	r3, [r3, #4]
900096c0:	781b      	ldrb	r3, [r3, #0]
900096c2:	429a      	cmp	r2, r3
900096c4:	d013      	beq.n	900096ee <http_send_data_ssi+0x232>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
900096c6:	693b      	ldr	r3, [r7, #16]
900096c8:	681b      	ldr	r3, [r3, #0]
900096ca:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
900096cc:	2b20      	cmp	r3, #32
900096ce:	d00e      	beq.n	900096ee <http_send_data_ssi+0x232>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
900096d0:	693b      	ldr	r3, [r7, #16]
900096d2:	681b      	ldr	r3, [r3, #0]
900096d4:	781b      	ldrb	r3, [r3, #0]
900096d6:	2b09      	cmp	r3, #9
900096d8:	d009      	beq.n	900096ee <http_send_data_ssi+0x232>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
900096da:	693b      	ldr	r3, [r7, #16]
900096dc:	681b      	ldr	r3, [r3, #0]
900096de:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
900096e0:	2b0a      	cmp	r3, #10
900096e2:	d004      	beq.n	900096ee <http_send_data_ssi+0x232>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
900096e4:	693b      	ldr	r3, [r7, #16]
900096e6:	681b      	ldr	r3, [r3, #0]
900096e8:	781b      	ldrb	r3, [r3, #0]
900096ea:	2b0d      	cmp	r3, #13
900096ec:	d13f      	bne.n	9000976e <http_send_data_ssi+0x2b2>

          if (ssi->tag_index == 0) {
900096ee:	693b      	ldr	r3, [r7, #16]
900096f0:	8a1b      	ldrh	r3, [r3, #16]
900096f2:	2b00      	cmp	r3, #0
900096f4:	d10c      	bne.n	90009710 <http_send_data_ssi+0x254>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
900096f6:	693b      	ldr	r3, [r7, #16]
900096f8:	2200      	movs	r2, #0
900096fa:	f883 240a 	strb.w	r2, [r3, #1034]	; 0x40a
          if (ssi->tag_index == 0) {
900096fe:	e04c      	b.n	9000979a <http_send_data_ssi+0x2de>
90009700:	90017ac4 	.word	0x90017ac4
90009704:	90017b40 	.word	0x90017b40
90009708:	90017b0c 	.word	0x90017b0c
9000970c:	90021014 	.word	0x90021014
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
90009710:	693b      	ldr	r3, [r7, #16]
90009712:	2203      	movs	r2, #3
90009714:	f883 240a 	strb.w	r2, [r3, #1034]	; 0x40a
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
90009718:	693b      	ldr	r3, [r7, #16]
9000971a:	8a1b      	ldrh	r3, [r3, #16]
9000971c:	2bff      	cmp	r3, #255	; 0xff
9000971e:	d906      	bls.n	9000972e <http_send_data_ssi+0x272>
90009720:	4b92      	ldr	r3, [pc, #584]	; (9000996c <http_send_data_ssi+0x4b0>)
90009722:	f240 523a 	movw	r2, #1338	; 0x53a
90009726:	4992      	ldr	r1, [pc, #584]	; (90009970 <http_send_data_ssi+0x4b4>)
90009728:	4892      	ldr	r0, [pc, #584]	; (90009974 <http_send_data_ssi+0x4b8>)
9000972a:	f00c fa63 	bl	90015bf4 <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
9000972e:	693b      	ldr	r3, [r7, #16]
90009730:	8a1b      	ldrh	r3, [r3, #16]
90009732:	b2da      	uxtb	r2, r3
90009734:	693b      	ldr	r3, [r7, #16]
90009736:	75da      	strb	r2, [r3, #23]
            ssi->tag_name[ssi->tag_index] = '\0';
90009738:	693b      	ldr	r3, [r7, #16]
9000973a:	8a1b      	ldrh	r3, [r3, #16]
9000973c:	461a      	mov	r2, r3
9000973e:	693b      	ldr	r3, [r7, #16]
90009740:	4413      	add	r3, r2
90009742:	2200      	movs	r2, #0
90009744:	761a      	strb	r2, [r3, #24]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
90009746:	693b      	ldr	r3, [r7, #16]
90009748:	681b      	ldr	r3, [r3, #0]
9000974a:	781a      	ldrb	r2, [r3, #0]
9000974c:	693b      	ldr	r3, [r7, #16]
9000974e:	7d9b      	ldrb	r3, [r3, #22]
90009750:	4989      	ldr	r1, [pc, #548]	; (90009978 <http_send_data_ssi+0x4bc>)
90009752:	00db      	lsls	r3, r3, #3
90009754:	440b      	add	r3, r1
90009756:	685b      	ldr	r3, [r3, #4]
90009758:	781b      	ldrb	r3, [r3, #0]
9000975a:	429a      	cmp	r2, r3
9000975c:	d103      	bne.n	90009766 <http_send_data_ssi+0x2aa>
              ssi->tag_index = 1;
9000975e:	693b      	ldr	r3, [r7, #16]
90009760:	2201      	movs	r2, #1
90009762:	821a      	strh	r2, [r3, #16]
          if (ssi->tag_index == 0) {
90009764:	e019      	b.n	9000979a <http_send_data_ssi+0x2de>
            } else {
              ssi->tag_index = 0;
90009766:	693b      	ldr	r3, [r7, #16]
90009768:	2200      	movs	r2, #0
9000976a:	821a      	strh	r2, [r3, #16]
          if (ssi->tag_index == 0) {
9000976c:	e015      	b.n	9000979a <http_send_data_ssi+0x2de>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
9000976e:	693b      	ldr	r3, [r7, #16]
90009770:	8a1b      	ldrh	r3, [r3, #16]
90009772:	2b07      	cmp	r3, #7
90009774:	d80d      	bhi.n	90009792 <http_send_data_ssi+0x2d6>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
90009776:	693b      	ldr	r3, [r7, #16]
90009778:	681a      	ldr	r2, [r3, #0]
9000977a:	693b      	ldr	r3, [r7, #16]
9000977c:	8a1b      	ldrh	r3, [r3, #16]
9000977e:	1c59      	adds	r1, r3, #1
90009780:	b288      	uxth	r0, r1
90009782:	6939      	ldr	r1, [r7, #16]
90009784:	8208      	strh	r0, [r1, #16]
90009786:	4619      	mov	r1, r3
90009788:	7812      	ldrb	r2, [r2, #0]
9000978a:	693b      	ldr	r3, [r7, #16]
9000978c:	440b      	add	r3, r1
9000978e:	761a      	strb	r2, [r3, #24]
90009790:	e003      	b.n	9000979a <http_send_data_ssi+0x2de>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
90009792:	693b      	ldr	r3, [r7, #16]
90009794:	2200      	movs	r2, #0
90009796:	f883 240a 	strb.w	r2, [r3, #1034]	; 0x40a
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
9000979a:	693b      	ldr	r3, [r7, #16]
9000979c:	68db      	ldr	r3, [r3, #12]
9000979e:	1e5a      	subs	r2, r3, #1
900097a0:	693b      	ldr	r3, [r7, #16]
900097a2:	60da      	str	r2, [r3, #12]
        ssi->parsed++;
900097a4:	693b      	ldr	r3, [r7, #16]
900097a6:	681b      	ldr	r3, [r3, #0]
900097a8:	1c5a      	adds	r2, r3, #1
900097aa:	693b      	ldr	r3, [r7, #16]
900097ac:	601a      	str	r2, [r3, #0]

        break;
900097ae:	e16b      	b.n	90009a88 <http_send_data_ssi+0x5cc>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
900097b0:	693b      	ldr	r3, [r7, #16]
900097b2:	8a1b      	ldrh	r3, [r3, #16]
900097b4:	2b00      	cmp	r3, #0
900097b6:	d11e      	bne.n	900097f6 <http_send_data_ssi+0x33a>
900097b8:	693b      	ldr	r3, [r7, #16]
900097ba:	681b      	ldr	r3, [r3, #0]
900097bc:	781b      	ldrb	r3, [r3, #0]
900097be:	2b20      	cmp	r3, #32
900097c0:	d00e      	beq.n	900097e0 <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
900097c2:	693b      	ldr	r3, [r7, #16]
900097c4:	681b      	ldr	r3, [r3, #0]
900097c6:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
900097c8:	2b09      	cmp	r3, #9
900097ca:	d009      	beq.n	900097e0 <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
900097cc:	693b      	ldr	r3, [r7, #16]
900097ce:	681b      	ldr	r3, [r3, #0]
900097d0:	781b      	ldrb	r3, [r3, #0]
900097d2:	2b0a      	cmp	r3, #10
900097d4:	d004      	beq.n	900097e0 <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\r'))) {
900097d6:	693b      	ldr	r3, [r7, #16]
900097d8:	681b      	ldr	r3, [r3, #0]
900097da:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
900097dc:	2b0d      	cmp	r3, #13
900097de:	d10a      	bne.n	900097f6 <http_send_data_ssi+0x33a>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
900097e0:	693b      	ldr	r3, [r7, #16]
900097e2:	68db      	ldr	r3, [r3, #12]
900097e4:	1e5a      	subs	r2, r3, #1
900097e6:	693b      	ldr	r3, [r7, #16]
900097e8:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
900097ea:	693b      	ldr	r3, [r7, #16]
900097ec:	681b      	ldr	r3, [r3, #0]
900097ee:	1c5a      	adds	r2, r3, #1
900097f0:	693b      	ldr	r3, [r7, #16]
900097f2:	601a      	str	r2, [r3, #0]
          break;
900097f4:	e148      	b.n	90009a88 <http_send_data_ssi+0x5cc>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
900097f6:	693b      	ldr	r3, [r7, #16]
900097f8:	681b      	ldr	r3, [r3, #0]
900097fa:	781a      	ldrb	r2, [r3, #0]
900097fc:	693b      	ldr	r3, [r7, #16]
900097fe:	7d9b      	ldrb	r3, [r3, #22]
90009800:	495d      	ldr	r1, [pc, #372]	; (90009978 <http_send_data_ssi+0x4bc>)
90009802:	00db      	lsls	r3, r3, #3
90009804:	440b      	add	r3, r1
90009806:	685b      	ldr	r3, [r3, #4]
90009808:	6939      	ldr	r1, [r7, #16]
9000980a:	8a09      	ldrh	r1, [r1, #16]
9000980c:	440b      	add	r3, r1
9000980e:	781b      	ldrb	r3, [r3, #0]
90009810:	429a      	cmp	r2, r3
90009812:	d179      	bne.n	90009908 <http_send_data_ssi+0x44c>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
90009814:	693b      	ldr	r3, [r7, #16]
90009816:	68db      	ldr	r3, [r3, #12]
90009818:	1e5a      	subs	r2, r3, #1
9000981a:	693b      	ldr	r3, [r7, #16]
9000981c:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
9000981e:	693b      	ldr	r3, [r7, #16]
90009820:	681b      	ldr	r3, [r3, #0]
90009822:	1c5a      	adds	r2, r3, #1
90009824:	693b      	ldr	r3, [r7, #16]
90009826:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
90009828:	693b      	ldr	r3, [r7, #16]
9000982a:	8a1b      	ldrh	r3, [r3, #16]
9000982c:	3301      	adds	r3, #1
9000982e:	b29a      	uxth	r2, r3
90009830:	693b      	ldr	r3, [r7, #16]
90009832:	821a      	strh	r2, [r3, #16]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
90009834:	693b      	ldr	r3, [r7, #16]
90009836:	7d9b      	ldrb	r3, [r3, #22]
90009838:	4a4f      	ldr	r2, [pc, #316]	; (90009978 <http_send_data_ssi+0x4bc>)
9000983a:	00db      	lsls	r3, r3, #3
9000983c:	4413      	add	r3, r2
9000983e:	685b      	ldr	r3, [r3, #4]
90009840:	693a      	ldr	r2, [r7, #16]
90009842:	8a12      	ldrh	r2, [r2, #16]
90009844:	4413      	add	r3, r2
90009846:	781b      	ldrb	r3, [r3, #0]
90009848:	2b00      	cmp	r3, #0
9000984a:	f040 811d 	bne.w	90009a88 <http_send_data_ssi+0x5cc>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
9000984e:	693b      	ldr	r3, [r7, #16]
90009850:	2200      	movs	r2, #0
90009852:	829a      	strh	r2, [r3, #20]
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
90009854:	6838      	ldr	r0, [r7, #0]
90009856:	f7ff fcf9 	bl	9000924c <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
9000985a:	693b      	ldr	r3, [r7, #16]
9000985c:	2200      	movs	r2, #0
9000985e:	821a      	strh	r2, [r3, #16]
            ssi->tag_state = TAG_SENDING;
90009860:	693b      	ldr	r3, [r7, #16]
90009862:	2204      	movs	r2, #4
90009864:	f883 240a 	strb.w	r2, [r3, #1034]	; 0x40a
            ssi->tag_end = ssi->parsed;
90009868:	693b      	ldr	r3, [r7, #16]
9000986a:	681a      	ldr	r2, [r3, #0]
9000986c:	693b      	ldr	r3, [r7, #16]
9000986e:	609a      	str	r2, [r3, #8]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->parsed = ssi->tag_started;
90009870:	693b      	ldr	r3, [r7, #16]
90009872:	685a      	ldr	r2, [r3, #4]
90009874:	693b      	ldr	r3, [r7, #16]
90009876:	601a      	str	r2, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
90009878:	693b      	ldr	r3, [r7, #16]
9000987a:	689a      	ldr	r2, [r3, #8]
9000987c:	683b      	ldr	r3, [r7, #0]
9000987e:	699b      	ldr	r3, [r3, #24]
90009880:	429a      	cmp	r2, r3
90009882:	f240 8101 	bls.w	90009a88 <http_send_data_ssi+0x5cc>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
90009886:	693b      	ldr	r3, [r7, #16]
90009888:	685a      	ldr	r2, [r3, #4]
9000988a:	683b      	ldr	r3, [r7, #0]
9000988c:	699b      	ldr	r3, [r3, #24]
9000988e:	1ad3      	subs	r3, r2, r3
90009890:	f64f 72fe 	movw	r2, #65534	; 0xfffe
90009894:	4293      	cmp	r3, r2
90009896:	dc06      	bgt.n	900098a6 <http_send_data_ssi+0x3ea>
90009898:	693b      	ldr	r3, [r7, #16]
9000989a:	685a      	ldr	r2, [r3, #4]
9000989c:	683b      	ldr	r3, [r7, #0]
9000989e:	699b      	ldr	r3, [r3, #24]
900098a0:	1ad3      	subs	r3, r2, r3
900098a2:	b29b      	uxth	r3, r3
900098a4:	e001      	b.n	900098aa <http_send_data_ssi+0x3ee>
900098a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
900098aa:	81fb      	strh	r3, [r7, #14]
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
900098ac:	683b      	ldr	r3, [r7, #0]
900098ae:	6999      	ldr	r1, [r3, #24]
900098b0:	f107 020e 	add.w	r2, r7, #14
900098b4:	2300      	movs	r3, #0
900098b6:	6878      	ldr	r0, [r7, #4]
900098b8:	f7ff fb92 	bl	90008fe0 <http_write>
900098bc:	4603      	mov	r3, r0
900098be:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
900098c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
900098c4:	2b00      	cmp	r3, #0
900098c6:	f040 80df 	bne.w	90009a88 <http_send_data_ssi+0x5cc>
                data_to_send = 1;
900098ca:	2301      	movs	r3, #1
900098cc:	75bb      	strb	r3, [r7, #22]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
                if (ssi->tag_started <= hs->file) {
900098ce:	693b      	ldr	r3, [r7, #16]
900098d0:	685a      	ldr	r2, [r3, #4]
900098d2:	683b      	ldr	r3, [r7, #0]
900098d4:	699b      	ldr	r3, [r3, #24]
900098d6:	429a      	cmp	r2, r3
900098d8:	d809      	bhi.n	900098ee <http_send_data_ssi+0x432>
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
900098da:	693b      	ldr	r3, [r7, #16]
900098dc:	689a      	ldr	r2, [r3, #8]
900098de:	693b      	ldr	r3, [r7, #16]
900098e0:	685b      	ldr	r3, [r3, #4]
900098e2:	1ad3      	subs	r3, r2, r3
900098e4:	b29a      	uxth	r2, r3
900098e6:	89fb      	ldrh	r3, [r7, #14]
900098e8:	4413      	add	r3, r2
900098ea:	b29b      	uxth	r3, r3
900098ec:	81fb      	strh	r3, [r7, #14]
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
900098ee:	683b      	ldr	r3, [r7, #0]
900098f0:	699b      	ldr	r3, [r3, #24]
900098f2:	89fa      	ldrh	r2, [r7, #14]
900098f4:	441a      	add	r2, r3
900098f6:	683b      	ldr	r3, [r7, #0]
900098f8:	619a      	str	r2, [r3, #24]
                hs->left -= len;
900098fa:	683b      	ldr	r3, [r7, #0]
900098fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900098fe:	89fa      	ldrh	r2, [r7, #14]
90009900:	1a9a      	subs	r2, r3, r2
90009902:	683b      	ldr	r3, [r7, #0]
90009904:	625a      	str	r2, [r3, #36]	; 0x24
90009906:	e0bf      	b.n	90009a88 <http_send_data_ssi+0x5cc>
            }
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
90009908:	693b      	ldr	r3, [r7, #16]
9000990a:	68db      	ldr	r3, [r3, #12]
9000990c:	1e5a      	subs	r2, r3, #1
9000990e:	693b      	ldr	r3, [r7, #16]
90009910:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
90009912:	693b      	ldr	r3, [r7, #16]
90009914:	681b      	ldr	r3, [r3, #0]
90009916:	1c5a      	adds	r2, r3, #1
90009918:	693b      	ldr	r3, [r7, #16]
9000991a:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
9000991c:	693b      	ldr	r3, [r7, #16]
9000991e:	2200      	movs	r2, #0
90009920:	f883 240a 	strb.w	r2, [r3, #1034]	; 0x40a
        }
        break;
90009924:	e0b0      	b.n	90009a88 <http_send_data_ssi+0x5cc>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
90009926:	693b      	ldr	r3, [r7, #16]
90009928:	689a      	ldr	r2, [r3, #8]
9000992a:	683b      	ldr	r3, [r7, #0]
9000992c:	699b      	ldr	r3, [r3, #24]
9000992e:	429a      	cmp	r2, r3
90009930:	d95c      	bls.n	900099ec <http_send_data_ssi+0x530>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
90009932:	693b      	ldr	r3, [r7, #16]
90009934:	685a      	ldr	r2, [r3, #4]
90009936:	683b      	ldr	r3, [r7, #0]
90009938:	699b      	ldr	r3, [r3, #24]
9000993a:	429a      	cmp	r2, r3
9000993c:	d206      	bcs.n	9000994c <http_send_data_ssi+0x490>
9000993e:	4b0b      	ldr	r3, [pc, #44]	; (9000996c <http_send_data_ssi+0x4b0>)
90009940:	f240 52ac 	movw	r2, #1452	; 0x5ac
90009944:	490d      	ldr	r1, [pc, #52]	; (9000997c <http_send_data_ssi+0x4c0>)
90009946:	480b      	ldr	r0, [pc, #44]	; (90009974 <http_send_data_ssi+0x4b8>)
90009948:	f00c f954 	bl	90015bf4 <iprintf>
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
9000994c:	693b      	ldr	r3, [r7, #16]
9000994e:	685a      	ldr	r2, [r3, #4]
90009950:	683b      	ldr	r3, [r7, #0]
90009952:	699b      	ldr	r3, [r3, #24]
90009954:	1ad3      	subs	r3, r2, r3
90009956:	f64f 72fe 	movw	r2, #65534	; 0xfffe
9000995a:	4293      	cmp	r3, r2
9000995c:	dc10      	bgt.n	90009980 <http_send_data_ssi+0x4c4>
9000995e:	693b      	ldr	r3, [r7, #16]
90009960:	685a      	ldr	r2, [r3, #4]
90009962:	683b      	ldr	r3, [r7, #0]
90009964:	699b      	ldr	r3, [r3, #24]
90009966:	1ad3      	subs	r3, r2, r3
90009968:	b29b      	uxth	r3, r3
9000996a:	e00b      	b.n	90009984 <http_send_data_ssi+0x4c8>
9000996c:	90017ac4 	.word	0x90017ac4
90009970:	90017bb0 	.word	0x90017bb0
90009974:	90017b0c 	.word	0x90017b0c
90009978:	90021014 	.word	0x90021014
9000997c:	90017bc8 	.word	0x90017bc8
90009980:	f64f 73ff 	movw	r3, #65535	; 0xffff
90009984:	81fb      	strh	r3, [r7, #14]
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
90009986:	89fb      	ldrh	r3, [r7, #14]
90009988:	2b00      	cmp	r3, #0
9000998a:	d00a      	beq.n	900099a2 <http_send_data_ssi+0x4e6>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
9000998c:	683b      	ldr	r3, [r7, #0]
9000998e:	6999      	ldr	r1, [r3, #24]
90009990:	f107 020e 	add.w	r2, r7, #14
90009994:	2300      	movs	r3, #0
90009996:	6878      	ldr	r0, [r7, #4]
90009998:	f7ff fb22 	bl	90008fe0 <http_write>
9000999c:	4603      	mov	r3, r0
9000999e:	75fb      	strb	r3, [r7, #23]
900099a0:	e001      	b.n	900099a6 <http_send_data_ssi+0x4ea>
          } else {
            err = ERR_OK;
900099a2:	2300      	movs	r3, #0
900099a4:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
900099a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
900099aa:	2b00      	cmp	r3, #0
900099ac:	d16c      	bne.n	90009a88 <http_send_data_ssi+0x5cc>
            data_to_send = 1;
900099ae:	2301      	movs	r3, #1
900099b0:	75bb      	strb	r3, [r7, #22]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
            if (ssi->tag_started <= hs->file) {
900099b2:	693b      	ldr	r3, [r7, #16]
900099b4:	685a      	ldr	r2, [r3, #4]
900099b6:	683b      	ldr	r3, [r7, #0]
900099b8:	699b      	ldr	r3, [r3, #24]
900099ba:	429a      	cmp	r2, r3
900099bc:	d809      	bhi.n	900099d2 <http_send_data_ssi+0x516>
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
900099be:	693b      	ldr	r3, [r7, #16]
900099c0:	689a      	ldr	r2, [r3, #8]
900099c2:	693b      	ldr	r3, [r7, #16]
900099c4:	685b      	ldr	r3, [r3, #4]
900099c6:	1ad3      	subs	r3, r2, r3
900099c8:	b29a      	uxth	r2, r3
900099ca:	89fb      	ldrh	r3, [r7, #14]
900099cc:	4413      	add	r3, r2
900099ce:	b29b      	uxth	r3, r3
900099d0:	81fb      	strh	r3, [r7, #14]
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
900099d2:	683b      	ldr	r3, [r7, #0]
900099d4:	699b      	ldr	r3, [r3, #24]
900099d6:	89fa      	ldrh	r2, [r7, #14]
900099d8:	441a      	add	r2, r3
900099da:	683b      	ldr	r3, [r7, #0]
900099dc:	619a      	str	r2, [r3, #24]
            hs->left -= len;
900099de:	683b      	ldr	r3, [r7, #0]
900099e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900099e2:	89fa      	ldrh	r2, [r7, #14]
900099e4:	1a9a      	subs	r2, r3, r2
900099e6:	683b      	ldr	r3, [r7, #0]
900099e8:	625a      	str	r2, [r3, #36]	; 0x24
900099ea:	e04d      	b.n	90009a88 <http_send_data_ssi+0x5cc>
          }
        } else {
#if LWIP_HTTPD_SSI_MULTIPART
          if (ssi->tag_index >= ssi->tag_insert_len) {
900099ec:	693b      	ldr	r3, [r7, #16]
900099ee:	8a1a      	ldrh	r2, [r3, #16]
900099f0:	693b      	ldr	r3, [r7, #16]
900099f2:	8a5b      	ldrh	r3, [r3, #18]
900099f4:	429a      	cmp	r2, r3
900099f6:	d30b      	bcc.n	90009a10 <http_send_data_ssi+0x554>
            /* Did the last SSIHandler have more to send? */
            if (ssi->tag_part != HTTPD_LAST_TAG_PART) {
900099f8:	693b      	ldr	r3, [r7, #16]
900099fa:	8a9b      	ldrh	r3, [r3, #20]
900099fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
90009a00:	4293      	cmp	r3, r2
90009a02:	d005      	beq.n	90009a10 <http_send_data_ssi+0x554>
              /* If so, call it again */
              ssi->tag_index = 0;
90009a04:	693b      	ldr	r3, [r7, #16]
90009a06:	2200      	movs	r2, #0
90009a08:	821a      	strh	r2, [r3, #16]
              get_tag_insert(hs);
90009a0a:	6838      	ldr	r0, [r7, #0]
90009a0c:	f7ff fc1e 	bl	9000924c <get_tag_insert>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
90009a10:	693b      	ldr	r3, [r7, #16]
90009a12:	8a1a      	ldrh	r2, [r3, #16]
90009a14:	693b      	ldr	r3, [r7, #16]
90009a16:	8a5b      	ldrh	r3, [r3, #18]
90009a18:	429a      	cmp	r2, r3
90009a1a:	d222      	bcs.n	90009a62 <http_send_data_ssi+0x5a6>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
90009a1c:	693b      	ldr	r3, [r7, #16]
90009a1e:	8a5a      	ldrh	r2, [r3, #18]
90009a20:	693b      	ldr	r3, [r7, #16]
90009a22:	8a1b      	ldrh	r3, [r3, #16]
90009a24:	1ad3      	subs	r3, r2, r3
90009a26:	b29b      	uxth	r3, r3
90009a28:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
90009a2a:	693b      	ldr	r3, [r7, #16]
90009a2c:	8a1b      	ldrh	r3, [r3, #16]
90009a2e:	3320      	adds	r3, #32
90009a30:	693a      	ldr	r2, [r7, #16]
90009a32:	4413      	add	r3, r2
90009a34:	1c59      	adds	r1, r3, #1
90009a36:	f107 020e 	add.w	r2, r7, #14
90009a3a:	2301      	movs	r3, #1
90009a3c:	6878      	ldr	r0, [r7, #4]
90009a3e:	f7ff facf 	bl	90008fe0 <http_write>
90009a42:	4603      	mov	r3, r0
90009a44:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
90009a46:	f997 3017 	ldrsb.w	r3, [r7, #23]
90009a4a:	2b00      	cmp	r3, #0
90009a4c:	d11c      	bne.n	90009a88 <http_send_data_ssi+0x5cc>
              data_to_send = 1;
90009a4e:	2301      	movs	r3, #1
90009a50:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
90009a52:	693b      	ldr	r3, [r7, #16]
90009a54:	8a1a      	ldrh	r2, [r3, #16]
90009a56:	89fb      	ldrh	r3, [r7, #14]
90009a58:	4413      	add	r3, r2
90009a5a:	b29a      	uxth	r2, r3
90009a5c:	693b      	ldr	r3, [r7, #16]
90009a5e:	821a      	strh	r2, [r3, #16]
90009a60:	e012      	b.n	90009a88 <http_send_data_ssi+0x5cc>
              /* Don't return here: keep on sending data */
            }
          } else {
#if LWIP_HTTPD_SSI_MULTIPART
            if (ssi->tag_part == HTTPD_LAST_TAG_PART)
90009a62:	693b      	ldr	r3, [r7, #16]
90009a64:	8a9b      	ldrh	r3, [r3, #20]
90009a66:	f64f 72ff 	movw	r2, #65535	; 0xffff
90009a6a:	4293      	cmp	r3, r2
90009a6c:	d10c      	bne.n	90009a88 <http_send_data_ssi+0x5cc>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
90009a6e:	693b      	ldr	r3, [r7, #16]
90009a70:	2200      	movs	r2, #0
90009a72:	821a      	strh	r2, [r3, #16]
              ssi->tag_state = TAG_NONE;
90009a74:	693b      	ldr	r3, [r7, #16]
90009a76:	2200      	movs	r2, #0
90009a78:	f883 240a 	strb.w	r2, [r3, #1034]	; 0x40a
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
90009a7c:	693b      	ldr	r3, [r7, #16]
90009a7e:	689a      	ldr	r2, [r3, #8]
90009a80:	693b      	ldr	r3, [r7, #16]
90009a82:	601a      	str	r2, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
90009a84:	e000      	b.n	90009a88 <http_send_data_ssi+0x5cc>
        default:
          break;
90009a86:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
90009a88:	693b      	ldr	r3, [r7, #16]
90009a8a:	f893 340a 	ldrb.w	r3, [r3, #1034]	; 0x40a
90009a8e:	2b04      	cmp	r3, #4
90009a90:	d003      	beq.n	90009a9a <http_send_data_ssi+0x5de>
90009a92:	693b      	ldr	r3, [r7, #16]
90009a94:	68db      	ldr	r3, [r3, #12]
90009a96:	2b00      	cmp	r3, #0
90009a98:	d004      	beq.n	90009aa4 <http_send_data_ssi+0x5e8>
90009a9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
90009a9e:	2b00      	cmp	r3, #0
90009aa0:	f43f ad64 	beq.w	9000956c <http_send_data_ssi+0xb0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
90009aa4:	693b      	ldr	r3, [r7, #16]
90009aa6:	f893 340a 	ldrb.w	r3, [r3, #1034]	; 0x40a
90009aaa:	2b04      	cmp	r3, #4
90009aac:	d034      	beq.n	90009b18 <http_send_data_ssi+0x65c>
90009aae:	693b      	ldr	r3, [r7, #16]
90009ab0:	681a      	ldr	r2, [r3, #0]
90009ab2:	683b      	ldr	r3, [r7, #0]
90009ab4:	699b      	ldr	r3, [r3, #24]
90009ab6:	429a      	cmp	r2, r3
90009ab8:	d92e      	bls.n	90009b18 <http_send_data_ssi+0x65c>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
90009aba:	693b      	ldr	r3, [r7, #16]
90009abc:	681a      	ldr	r2, [r3, #0]
90009abe:	683b      	ldr	r3, [r7, #0]
90009ac0:	699b      	ldr	r3, [r3, #24]
90009ac2:	1ad3      	subs	r3, r2, r3
90009ac4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
90009ac8:	4293      	cmp	r3, r2
90009aca:	dc06      	bgt.n	90009ada <http_send_data_ssi+0x61e>
90009acc:	693b      	ldr	r3, [r7, #16]
90009ace:	681a      	ldr	r2, [r3, #0]
90009ad0:	683b      	ldr	r3, [r7, #0]
90009ad2:	699b      	ldr	r3, [r3, #24]
90009ad4:	1ad3      	subs	r3, r2, r3
90009ad6:	b29b      	uxth	r3, r3
90009ad8:	e001      	b.n	90009ade <http_send_data_ssi+0x622>
90009ada:	f64f 73ff 	movw	r3, #65535	; 0xffff
90009ade:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
90009ae0:	683b      	ldr	r3, [r7, #0]
90009ae2:	6999      	ldr	r1, [r3, #24]
90009ae4:	f107 020e 	add.w	r2, r7, #14
90009ae8:	2300      	movs	r3, #0
90009aea:	6878      	ldr	r0, [r7, #4]
90009aec:	f7ff fa78 	bl	90008fe0 <http_write>
90009af0:	4603      	mov	r3, r0
90009af2:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
90009af4:	f997 3017 	ldrsb.w	r3, [r7, #23]
90009af8:	2b00      	cmp	r3, #0
90009afa:	d10d      	bne.n	90009b18 <http_send_data_ssi+0x65c>
      data_to_send = 1;
90009afc:	2301      	movs	r3, #1
90009afe:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
90009b00:	683b      	ldr	r3, [r7, #0]
90009b02:	699b      	ldr	r3, [r3, #24]
90009b04:	89fa      	ldrh	r2, [r7, #14]
90009b06:	441a      	add	r2, r3
90009b08:	683b      	ldr	r3, [r7, #0]
90009b0a:	619a      	str	r2, [r3, #24]
      hs->left -= len;
90009b0c:	683b      	ldr	r3, [r7, #0]
90009b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90009b10:	89fa      	ldrh	r2, [r7, #14]
90009b12:	1a9a      	subs	r2, r3, r2
90009b14:	683b      	ldr	r3, [r7, #0]
90009b16:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
90009b18:	7dbb      	ldrb	r3, [r7, #22]
}
90009b1a:	4618      	mov	r0, r3
90009b1c:	3718      	adds	r7, #24
90009b1e:	46bd      	mov	sp, r7
90009b20:	bd80      	pop	{r7, pc}
90009b22:	bf00      	nop

90009b24 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
90009b24:	b580      	push	{r7, lr}
90009b26:	b084      	sub	sp, #16
90009b28:	af00      	add	r7, sp, #0
90009b2a:	6078      	str	r0, [r7, #4]
90009b2c:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
90009b2e:	2300      	movs	r3, #0
90009b30:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
90009b32:	683b      	ldr	r3, [r7, #0]
90009b34:	2b00      	cmp	r3, #0
90009b36:	d101      	bne.n	90009b3c <http_send+0x18>
    return 0;
90009b38:	2300      	movs	r3, #0
90009b3a:	e030      	b.n	90009b9e <http_send+0x7a>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
90009b3c:	683b      	ldr	r3, [r7, #0]
90009b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90009b40:	2b00      	cmp	r3, #0
90009b42:	d108      	bne.n	90009b56 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
90009b44:	6839      	ldr	r1, [r7, #0]
90009b46:	6878      	ldr	r0, [r7, #4]
90009b48:	f7ff fc52 	bl	900093f0 <http_check_eof>
90009b4c:	4603      	mov	r3, r0
90009b4e:	2b00      	cmp	r3, #0
90009b50:	d101      	bne.n	90009b56 <http_send+0x32>
      return 0;
90009b52:	2300      	movs	r3, #0
90009b54:	e023      	b.n	90009b9e <http_send+0x7a>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
90009b56:	683b      	ldr	r3, [r7, #0]
90009b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90009b5a:	2b00      	cmp	r3, #0
90009b5c:	d006      	beq.n	90009b6c <http_send+0x48>
    data_to_send = http_send_data_ssi(pcb, hs);
90009b5e:	6839      	ldr	r1, [r7, #0]
90009b60:	6878      	ldr	r0, [r7, #4]
90009b62:	f7ff fcab 	bl	900094bc <http_send_data_ssi>
90009b66:	4603      	mov	r3, r0
90009b68:	73fb      	strb	r3, [r7, #15]
90009b6a:	e005      	b.n	90009b78 <http_send+0x54>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
90009b6c:	6839      	ldr	r1, [r7, #0]
90009b6e:	6878      	ldr	r0, [r7, #4]
90009b70:	f7ff fc6e 	bl	90009450 <http_send_data_nonssi>
90009b74:	4603      	mov	r3, r0
90009b76:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
90009b78:	683b      	ldr	r3, [r7, #0]
90009b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90009b7c:	2b00      	cmp	r3, #0
90009b7e:	d10d      	bne.n	90009b9c <http_send+0x78>
90009b80:	683b      	ldr	r3, [r7, #0]
90009b82:	695b      	ldr	r3, [r3, #20]
90009b84:	4618      	mov	r0, r3
90009b86:	f7ff f99b 	bl	90008ec0 <fs_bytes_left>
90009b8a:	4603      	mov	r3, r0
90009b8c:	2b00      	cmp	r3, #0
90009b8e:	dc05      	bgt.n	90009b9c <http_send+0x78>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
90009b90:	6839      	ldr	r1, [r7, #0]
90009b92:	6878      	ldr	r0, [r7, #4]
90009b94:	f7ff faef 	bl	90009176 <http_eof>
    return 0;
90009b98:	2300      	movs	r3, #0
90009b9a:	e000      	b.n	90009b9e <http_send+0x7a>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
90009b9c:	7bfb      	ldrb	r3, [r7, #15]
}
90009b9e:	4618      	mov	r0, r3
90009ba0:	3710      	adds	r7, #16
90009ba2:	46bd      	mov	sp, r7
90009ba4:	bd80      	pop	{r7, pc}
	...

90009ba8 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
90009ba8:	b580      	push	{r7, lr}
90009baa:	b084      	sub	sp, #16
90009bac:	af00      	add	r7, sp, #0
90009bae:	6078      	str	r0, [r7, #4]
90009bb0:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
90009bb2:	683b      	ldr	r3, [r7, #0]
90009bb4:	4a1c      	ldr	r2, [pc, #112]	; (90009c28 <http_get_404_file+0x80>)
90009bb6:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
90009bb8:	687a      	ldr	r2, [r7, #4]
90009bba:	683b      	ldr	r3, [r7, #0]
90009bbc:	681b      	ldr	r3, [r3, #0]
90009bbe:	4619      	mov	r1, r3
90009bc0:	4610      	mov	r0, r2
90009bc2:	f7ff f935 	bl	90008e30 <fs_open>
90009bc6:	4603      	mov	r3, r0
90009bc8:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
90009bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
90009bce:	2b00      	cmp	r3, #0
90009bd0:	d024      	beq.n	90009c1c <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
90009bd2:	683b      	ldr	r3, [r7, #0]
90009bd4:	4a15      	ldr	r2, [pc, #84]	; (90009c2c <http_get_404_file+0x84>)
90009bd6:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
90009bd8:	687a      	ldr	r2, [r7, #4]
90009bda:	683b      	ldr	r3, [r7, #0]
90009bdc:	681b      	ldr	r3, [r3, #0]
90009bde:	4619      	mov	r1, r3
90009be0:	4610      	mov	r0, r2
90009be2:	f7ff f925 	bl	90008e30 <fs_open>
90009be6:	4603      	mov	r3, r0
90009be8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
90009bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
90009bee:	2b00      	cmp	r3, #0
90009bf0:	d014      	beq.n	90009c1c <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
90009bf2:	683b      	ldr	r3, [r7, #0]
90009bf4:	4a0e      	ldr	r2, [pc, #56]	; (90009c30 <http_get_404_file+0x88>)
90009bf6:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
90009bf8:	687a      	ldr	r2, [r7, #4]
90009bfa:	683b      	ldr	r3, [r7, #0]
90009bfc:	681b      	ldr	r3, [r3, #0]
90009bfe:	4619      	mov	r1, r3
90009c00:	4610      	mov	r0, r2
90009c02:	f7ff f915 	bl	90008e30 <fs_open>
90009c06:	4603      	mov	r3, r0
90009c08:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
90009c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
90009c0e:	2b00      	cmp	r3, #0
90009c10:	d004      	beq.n	90009c1c <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
90009c12:	683b      	ldr	r3, [r7, #0]
90009c14:	2200      	movs	r2, #0
90009c16:	601a      	str	r2, [r3, #0]
        return NULL;
90009c18:	2300      	movs	r3, #0
90009c1a:	e000      	b.n	90009c1e <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
90009c1c:	687b      	ldr	r3, [r7, #4]
}
90009c1e:	4618      	mov	r0, r3
90009c20:	3710      	adds	r7, #16
90009c22:	46bd      	mov	sp, r7
90009c24:	bd80      	pop	{r7, pc}
90009c26:	bf00      	nop
90009c28:	90017be0 	.word	0x90017be0
90009c2c:	90017bec 	.word	0x90017bec
90009c30:	90017bf8 	.word	0x90017bf8

90009c34 <http_handle_post_finished>:

#if LWIP_HTTPD_SUPPORT_POST
static err_t
http_handle_post_finished(struct http_state *hs)
{
90009c34:	b580      	push	{r7, lr}
90009c36:	b082      	sub	sp, #8
90009c38:	af00      	add	r7, sp, #0
90009c3a:	6078      	str	r0, [r7, #4]
  }
  hs->post_finished = 1;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
  /* application error or POST finished */
  /* NULL-terminate the buffer */
  http_uri_buf[0] = 0;
90009c3c:	4b08      	ldr	r3, [pc, #32]	; (90009c60 <http_handle_post_finished+0x2c>)
90009c3e:	2200      	movs	r2, #0
90009c40:	701a      	strb	r2, [r3, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
90009c42:	223f      	movs	r2, #63	; 0x3f
90009c44:	4906      	ldr	r1, [pc, #24]	; (90009c60 <http_handle_post_finished+0x2c>)
90009c46:	6878      	ldr	r0, [r7, #4]
90009c48:	f7f7 fb62 	bl	90001310 <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
90009c4c:	2200      	movs	r2, #0
90009c4e:	4904      	ldr	r1, [pc, #16]	; (90009c60 <http_handle_post_finished+0x2c>)
90009c50:	6878      	ldr	r0, [r7, #4]
90009c52:	f000 faab 	bl	9000a1ac <http_find_file>
90009c56:	4603      	mov	r3, r0
}
90009c58:	4618      	mov	r0, r3
90009c5a:	3708      	adds	r7, #8
90009c5c:	46bd      	mov	sp, r7
90009c5e:	bd80      	pop	{r7, pc}
90009c60:	2401c170 	.word	0x2401c170

90009c64 <http_post_rxpbuf>:
 * @return ERR_OK if passed successfully, another err_t if the response file
 *         hasn't been found (after POST finished)
 */
static err_t
http_post_rxpbuf(struct http_state *hs, struct pbuf *p)
{
90009c64:	b580      	push	{r7, lr}
90009c66:	b084      	sub	sp, #16
90009c68:	af00      	add	r7, sp, #0
90009c6a:	6078      	str	r0, [r7, #4]
90009c6c:	6039      	str	r1, [r7, #0]
  err_t err;

  if (p != NULL) {
90009c6e:	683b      	ldr	r3, [r7, #0]
90009c70:	2b00      	cmp	r3, #0
90009c72:	d014      	beq.n	90009c9e <http_post_rxpbuf+0x3a>
    /* adjust remaining Content-Length */
    if (hs->post_content_len_left < p->tot_len) {
90009c74:	687b      	ldr	r3, [r7, #4]
90009c76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
90009c7a:	683a      	ldr	r2, [r7, #0]
90009c7c:	8912      	ldrh	r2, [r2, #8]
90009c7e:	4293      	cmp	r3, r2
90009c80:	d204      	bcs.n	90009c8c <http_post_rxpbuf+0x28>
      hs->post_content_len_left = 0;
90009c82:	687b      	ldr	r3, [r7, #4]
90009c84:	2200      	movs	r2, #0
90009c86:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
90009c8a:	e008      	b.n	90009c9e <http_post_rxpbuf+0x3a>
    } else {
      hs->post_content_len_left -= p->tot_len;
90009c8c:	687b      	ldr	r3, [r7, #4]
90009c8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
90009c92:	683a      	ldr	r2, [r7, #0]
90009c94:	8912      	ldrh	r2, [r2, #8]
90009c96:	1a9a      	subs	r2, r3, r2
90009c98:	687b      	ldr	r3, [r7, #4]
90009c9a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  /* prevent connection being closed if httpd_post_data_recved() is called nested */
  hs->unrecved_bytes++;
#endif
  if (p != NULL) {
90009c9e:	683b      	ldr	r3, [r7, #0]
90009ca0:	2b00      	cmp	r3, #0
90009ca2:	d006      	beq.n	90009cb2 <http_post_rxpbuf+0x4e>
    err = httpd_post_receive_data(hs, p);
90009ca4:	6839      	ldr	r1, [r7, #0]
90009ca6:	6878      	ldr	r0, [r7, #4]
90009ca8:	f7f7 faea 	bl	90001280 <httpd_post_receive_data>
90009cac:	4603      	mov	r3, r0
90009cae:	73fb      	strb	r3, [r7, #15]
90009cb0:	e001      	b.n	90009cb6 <http_post_rxpbuf+0x52>
  } else {
    err = ERR_OK;
90009cb2:	2300      	movs	r3, #0
90009cb4:	73fb      	strb	r3, [r7, #15]
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  hs->unrecved_bytes--;
#endif
  if (err != ERR_OK) {
90009cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
90009cba:	2b00      	cmp	r3, #0
90009cbc:	d003      	beq.n	90009cc6 <http_post_rxpbuf+0x62>
    /* Ignore remaining content in case of application error */
    hs->post_content_len_left = 0;
90009cbe:	687b      	ldr	r3, [r7, #4]
90009cc0:	2200      	movs	r2, #0
90009cc2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }
  if (hs->post_content_len_left == 0) {
90009cc6:	687b      	ldr	r3, [r7, #4]
90009cc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
90009ccc:	2b00      	cmp	r3, #0
90009cce:	d104      	bne.n	90009cda <http_post_rxpbuf+0x76>
    if (hs->unrecved_bytes != 0) {
      return ERR_OK;
    }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
    /* application error or POST finished */
    return http_handle_post_finished(hs);
90009cd0:	6878      	ldr	r0, [r7, #4]
90009cd2:	f7ff ffaf 	bl	90009c34 <http_handle_post_finished>
90009cd6:	4603      	mov	r3, r0
90009cd8:	e000      	b.n	90009cdc <http_post_rxpbuf+0x78>
  }

  return ERR_OK;
90009cda:	2300      	movs	r3, #0
}
90009cdc:	4618      	mov	r0, r3
90009cde:	3710      	adds	r7, #16
90009ce0:	46bd      	mov	sp, r7
90009ce2:	bd80      	pop	{r7, pc}

90009ce4 <http_post_request>:
 *         another err_t: Error parsing POST or denied by the application
 */
static err_t
http_post_request(struct pbuf *inp, struct http_state *hs,
                  char *data, u16_t data_len, char *uri, char *uri_end)
{
90009ce4:	b580      	push	{r7, lr}
90009ce6:	b092      	sub	sp, #72	; 0x48
90009ce8:	af04      	add	r7, sp, #16
90009cea:	60f8      	str	r0, [r7, #12]
90009cec:	60b9      	str	r1, [r7, #8]
90009cee:	607a      	str	r2, [r7, #4]
90009cf0:	807b      	strh	r3, [r7, #2]
  err_t err;
  /* search for end-of-header (first double-CRLF) */
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
90009cf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
90009cf4:	1c58      	adds	r0, r3, #1
90009cf6:	887a      	ldrh	r2, [r7, #2]
90009cf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
90009cfa:	1c59      	adds	r1, r3, #1
90009cfc:	687b      	ldr	r3, [r7, #4]
90009cfe:	1acb      	subs	r3, r1, r3
90009d00:	1ad3      	subs	r3, r2, r3
90009d02:	461a      	mov	r2, r3
90009d04:	4965      	ldr	r1, [pc, #404]	; (90009e9c <http_post_request+0x1b8>)
90009d06:	f000 fe6f 	bl	9000a9e8 <lwip_strnstr>
90009d0a:	62b8      	str	r0, [r7, #40]	; 0x28

  if (crlfcrlf != NULL) {
90009d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
90009d0e:	2b00      	cmp	r3, #0
90009d10:	f000 80be 	beq.w	90009e90 <http_post_request+0x1ac>
    /* search for "Content-Length: " */
#define HTTP_HDR_CONTENT_LEN                "Content-Length: "
#define HTTP_HDR_CONTENT_LEN_LEN            16
#define HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN  10
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
90009d14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
90009d16:	1c58      	adds	r0, r3, #1
90009d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
90009d1a:	3301      	adds	r3, #1
90009d1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
90009d1e:	1ad3      	subs	r3, r2, r3
90009d20:	461a      	mov	r2, r3
90009d22:	495f      	ldr	r1, [pc, #380]	; (90009ea0 <http_post_request+0x1bc>)
90009d24:	f000 fe60 	bl	9000a9e8 <lwip_strnstr>
90009d28:	6278      	str	r0, [r7, #36]	; 0x24
    if (scontent_len != NULL) {
90009d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90009d2c:	2b00      	cmp	r3, #0
90009d2e:	f000 80ac 	beq.w	90009e8a <http_post_request+0x1a6>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
90009d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90009d34:	3310      	adds	r3, #16
90009d36:	220a      	movs	r2, #10
90009d38:	495a      	ldr	r1, [pc, #360]	; (90009ea4 <http_post_request+0x1c0>)
90009d3a:	4618      	mov	r0, r3
90009d3c:	f000 fe54 	bl	9000a9e8 <lwip_strnstr>
90009d40:	6238      	str	r0, [r7, #32]
      if (scontent_len_end != NULL) {
90009d42:	6a3b      	ldr	r3, [r7, #32]
90009d44:	2b00      	cmp	r3, #0
90009d46:	f000 80a0 	beq.w	90009e8a <http_post_request+0x1a6>
        int content_len;
        char *content_len_num = scontent_len + HTTP_HDR_CONTENT_LEN_LEN;
90009d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90009d4c:	3310      	adds	r3, #16
90009d4e:	61fb      	str	r3, [r7, #28]
        content_len = atoi(content_len_num);
90009d50:	69f8      	ldr	r0, [r7, #28]
90009d52:	f00b fd59 	bl	90015808 <atoi>
90009d56:	6378      	str	r0, [r7, #52]	; 0x34
        if (content_len == 0) {
90009d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90009d5a:	2b00      	cmp	r3, #0
90009d5c:	d10b      	bne.n	90009d76 <http_post_request+0x92>
          /* if atoi returns 0 on error, fix this */
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
90009d5e:	69fb      	ldr	r3, [r7, #28]
90009d60:	781b      	ldrb	r3, [r3, #0]
90009d62:	2b30      	cmp	r3, #48	; 0x30
90009d64:	d104      	bne.n	90009d70 <http_post_request+0x8c>
90009d66:	69fb      	ldr	r3, [r7, #28]
90009d68:	3301      	adds	r3, #1
90009d6a:	781b      	ldrb	r3, [r3, #0]
90009d6c:	2b0d      	cmp	r3, #13
90009d6e:	d002      	beq.n	90009d76 <http_post_request+0x92>
            content_len = -1;
90009d70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90009d74:	637b      	str	r3, [r7, #52]	; 0x34
          }
        }
        if (content_len >= 0) {
90009d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90009d78:	2b00      	cmp	r3, #0
90009d7a:	f2c0 8083 	blt.w	90009e84 <http_post_request+0x1a0>
          /* adjust length of HTTP header passed to application */
          const char *hdr_start_after_uri = uri_end + 1;
90009d7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
90009d80:	3301      	adds	r3, #1
90009d82:	61bb      	str	r3, [r7, #24]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
90009d84:	887a      	ldrh	r2, [r7, #2]
90009d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
90009d88:	1d19      	adds	r1, r3, #4
90009d8a:	687b      	ldr	r3, [r7, #4]
90009d8c:	1acb      	subs	r3, r1, r3
90009d8e:	429a      	cmp	r2, r3
90009d90:	db05      	blt.n	90009d9e <http_post_request+0xba>
90009d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
90009d94:	1d1a      	adds	r2, r3, #4
90009d96:	687b      	ldr	r3, [r7, #4]
90009d98:	1ad3      	subs	r3, r2, r3
90009d9a:	b29b      	uxth	r3, r3
90009d9c:	e000      	b.n	90009da0 <http_post_request+0xbc>
90009d9e:	887b      	ldrh	r3, [r7, #2]
90009da0:	82fb      	strh	r3, [r7, #22]
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
90009da2:	887a      	ldrh	r2, [r7, #2]
90009da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
90009da6:	1d19      	adds	r1, r3, #4
90009da8:	69bb      	ldr	r3, [r7, #24]
90009daa:	1acb      	subs	r3, r1, r3
90009dac:	429a      	cmp	r2, r3
90009dae:	db05      	blt.n	90009dbc <http_post_request+0xd8>
90009db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
90009db2:	1d1a      	adds	r2, r3, #4
90009db4:	69bb      	ldr	r3, [r7, #24]
90009db6:	1ad3      	subs	r3, r2, r3
90009db8:	b29b      	uxth	r3, r3
90009dba:	e000      	b.n	90009dbe <http_post_request+0xda>
90009dbc:	887b      	ldrh	r3, [r7, #2]
90009dbe:	82bb      	strh	r3, [r7, #20]
          u8_t post_auto_wnd = 1;
90009dc0:	2301      	movs	r3, #1
90009dc2:	74bb      	strb	r3, [r7, #18]
          http_uri_buf[0] = 0;
90009dc4:	4b38      	ldr	r3, [pc, #224]	; (90009ea8 <http_post_request+0x1c4>)
90009dc6:	2200      	movs	r2, #0
90009dc8:	701a      	strb	r2, [r3, #0]
          /* trim http header */
          *crlfcrlf = 0;
90009dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
90009dcc:	2200      	movs	r2, #0
90009dce:	701a      	strb	r2, [r3, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
90009dd0:	8aba      	ldrh	r2, [r7, #20]
90009dd2:	f107 0312 	add.w	r3, r7, #18
90009dd6:	9303      	str	r3, [sp, #12]
90009dd8:	233f      	movs	r3, #63	; 0x3f
90009dda:	9302      	str	r3, [sp, #8]
90009ddc:	4b32      	ldr	r3, [pc, #200]	; (90009ea8 <http_post_request+0x1c4>)
90009dde:	9301      	str	r3, [sp, #4]
90009de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90009de2:	9300      	str	r3, [sp, #0]
90009de4:	4613      	mov	r3, r2
90009de6:	69ba      	ldr	r2, [r7, #24]
90009de8:	6c39      	ldr	r1, [r7, #64]	; 0x40
90009dea:	68b8      	ldr	r0, [r7, #8]
90009dec:	f7f7 fa0e 	bl	9000120c <httpd_post_begin>
90009df0:	4603      	mov	r3, r0
90009df2:	74fb      	strb	r3, [r7, #19]
                                 http_uri_buf, LWIP_HTTPD_URI_BUF_LEN, &post_auto_wnd);
          if (err == ERR_OK) {
90009df4:	f997 3013 	ldrsb.w	r3, [r7, #19]
90009df8:	2b00      	cmp	r3, #0
90009dfa:	d13c      	bne.n	90009e76 <http_post_request+0x192>
            /* try to pass in data of the first pbuf(s) */
            struct pbuf *q = inp;
90009dfc:	68fb      	ldr	r3, [r7, #12]
90009dfe:	633b      	str	r3, [r7, #48]	; 0x30
            u16_t start_offset = hdr_len;
90009e00:	8afb      	ldrh	r3, [r7, #22]
90009e02:	85fb      	strh	r3, [r7, #46]	; 0x2e
#if LWIP_HTTPD_POST_MANUAL_WND
            hs->no_auto_wnd = !post_auto_wnd;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
            /* set the Content-Length to be received for this POST */
            hs->post_content_len_left = (u32_t)content_len;
90009e04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
90009e06:	68bb      	ldr	r3, [r7, #8]
90009e08:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

            /* get to the pbuf where the body starts */
            while ((q != NULL) && (q->len <= start_offset)) {
90009e0c:	e007      	b.n	90009e1e <http_post_request+0x13a>
              start_offset -= q->len;
90009e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90009e10:	895b      	ldrh	r3, [r3, #10]
90009e12:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
90009e14:	1ad3      	subs	r3, r2, r3
90009e16:	85fb      	strh	r3, [r7, #46]	; 0x2e
              q = q->next;
90009e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90009e1a:	681b      	ldr	r3, [r3, #0]
90009e1c:	633b      	str	r3, [r7, #48]	; 0x30
            while ((q != NULL) && (q->len <= start_offset)) {
90009e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90009e20:	2b00      	cmp	r3, #0
90009e22:	d004      	beq.n	90009e2e <http_post_request+0x14a>
90009e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90009e26:	895b      	ldrh	r3, [r3, #10]
90009e28:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
90009e2a:	429a      	cmp	r2, r3
90009e2c:	d2ef      	bcs.n	90009e0e <http_post_request+0x12a>
            }
            if (q != NULL) {
90009e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90009e30:	2b00      	cmp	r3, #0
90009e32:	d00d      	beq.n	90009e50 <http_post_request+0x16c>
              /* hide the remaining HTTP header */
              pbuf_remove_header(q, start_offset);
90009e34:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
90009e36:	4619      	mov	r1, r3
90009e38:	6b38      	ldr	r0, [r7, #48]	; 0x30
90009e3a:	f002 fa35 	bl	9000c2a8 <pbuf_remove_header>
              if (!post_auto_wnd) {
                /* already tcp_recved() this data... */
                hs->unrecved_bytes = q->tot_len;
              }
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
              pbuf_ref(q);
90009e3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
90009e40:	f002 fb5e 	bl	9000c500 <pbuf_ref>
              return http_post_rxpbuf(hs, q);
90009e44:	6b39      	ldr	r1, [r7, #48]	; 0x30
90009e46:	68b8      	ldr	r0, [r7, #8]
90009e48:	f7ff ff0c 	bl	90009c64 <http_post_rxpbuf>
90009e4c:	4603      	mov	r3, r0
90009e4e:	e021      	b.n	90009e94 <http_post_request+0x1b0>
            } else if (hs->post_content_len_left == 0) {
90009e50:	68bb      	ldr	r3, [r7, #8]
90009e52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
90009e56:	2b00      	cmp	r3, #0
90009e58:	d10b      	bne.n	90009e72 <http_post_request+0x18e>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
90009e5a:	2241      	movs	r2, #65	; 0x41
90009e5c:	2100      	movs	r1, #0
90009e5e:	2000      	movs	r0, #0
90009e60:	f001 ffc4 	bl	9000bdec <pbuf_alloc>
90009e64:	6338      	str	r0, [r7, #48]	; 0x30
              return http_post_rxpbuf(hs, q);
90009e66:	6b39      	ldr	r1, [r7, #48]	; 0x30
90009e68:	68b8      	ldr	r0, [r7, #8]
90009e6a:	f7ff fefb 	bl	90009c64 <http_post_rxpbuf>
90009e6e:	4603      	mov	r3, r0
90009e70:	e010      	b.n	90009e94 <http_post_request+0x1b0>
            } else {
              return ERR_OK;
90009e72:	2300      	movs	r3, #0
90009e74:	e00e      	b.n	90009e94 <http_post_request+0x1b0>
            }
          } else {
            /* return file passed from application */
            return http_find_file(hs, http_uri_buf, 0);
90009e76:	2200      	movs	r2, #0
90009e78:	490b      	ldr	r1, [pc, #44]	; (90009ea8 <http_post_request+0x1c4>)
90009e7a:	68b8      	ldr	r0, [r7, #8]
90009e7c:	f000 f996 	bl	9000a1ac <http_find_file>
90009e80:	4603      	mov	r3, r0
90009e82:	e007      	b.n	90009e94 <http_post_request+0x1b0>
          }
        } else {
          LWIP_DEBUGF(HTTPD_DEBUG, ("POST received invalid Content-Length: %s\n",
                                    content_len_num));
          return ERR_ARG;
90009e84:	f06f 030f 	mvn.w	r3, #15
90009e88:	e004      	b.n	90009e94 <http_post_request+0x1b0>
    }
    /* If we come here, headers are fully received (double-crlf), but Content-Length
       was not included. Since this is currently the only supported method, we have
       to fail in this case! */
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error when parsing Content-Length\n"));
    return ERR_ARG;
90009e8a:	f06f 030f 	mvn.w	r3, #15
90009e8e:	e001      	b.n	90009e94 <http_post_request+0x1b0>
  }
  /* if we come here, the POST is incomplete */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  return ERR_INPROGRESS;
90009e90:	f06f 0304 	mvn.w	r3, #4
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  return ERR_ARG;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
90009e94:	4618      	mov	r0, r3
90009e96:	3738      	adds	r7, #56	; 0x38
90009e98:	46bd      	mov	sp, r7
90009e9a:	bd80      	pop	{r7, pc}
90009e9c:	90017c04 	.word	0x90017c04
90009ea0:	90017c0c 	.word	0x90017c0c
90009ea4:	90017c20 	.word	0x90017c20
90009ea8:	2401c170 	.word	0x2401c170

90009eac <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
90009eac:	b580      	push	{r7, lr}
90009eae:	b092      	sub	sp, #72	; 0x48
90009eb0:	af02      	add	r7, sp, #8
90009eb2:	60f8      	str	r0, [r7, #12]
90009eb4:	60b9      	str	r1, [r7, #8]
90009eb6:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
90009eb8:	68fb      	ldr	r3, [r7, #12]
90009eba:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
90009ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90009ebe:	2b00      	cmp	r3, #0
90009ec0:	d106      	bne.n	90009ed0 <http_parse_request+0x24>
90009ec2:	4b87      	ldr	r3, [pc, #540]	; (9000a0e0 <http_parse_request+0x234>)
90009ec4:	f240 72ae 	movw	r2, #1966	; 0x7ae
90009ec8:	4986      	ldr	r1, [pc, #536]	; (9000a0e4 <http_parse_request+0x238>)
90009eca:	4887      	ldr	r0, [pc, #540]	; (9000a0e8 <http_parse_request+0x23c>)
90009ecc:	f00b fe92 	bl	90015bf4 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
90009ed0:	68bb      	ldr	r3, [r7, #8]
90009ed2:	2b00      	cmp	r3, #0
90009ed4:	d106      	bne.n	90009ee4 <http_parse_request+0x38>
90009ed6:	4b82      	ldr	r3, [pc, #520]	; (9000a0e0 <http_parse_request+0x234>)
90009ed8:	f240 72af 	movw	r2, #1967	; 0x7af
90009edc:	4983      	ldr	r1, [pc, #524]	; (9000a0ec <http_parse_request+0x240>)
90009ede:	4882      	ldr	r0, [pc, #520]	; (9000a0e8 <http_parse_request+0x23c>)
90009ee0:	f00b fe88 	bl	90015bf4 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
90009ee4:	68bb      	ldr	r3, [r7, #8]
90009ee6:	695b      	ldr	r3, [r3, #20]
90009ee8:	2b00      	cmp	r3, #0
90009eea:	d103      	bne.n	90009ef4 <http_parse_request+0x48>
90009eec:	68bb      	ldr	r3, [r7, #8]
90009eee:	699b      	ldr	r3, [r3, #24]
90009ef0:	2b00      	cmp	r3, #0
90009ef2:	d002      	beq.n	90009efa <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
90009ef4:	f06f 0307 	mvn.w	r3, #7
90009ef8:	e0ed      	b.n	9000a0d6 <http_parse_request+0x22a>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
90009efa:	68bb      	ldr	r3, [r7, #8]
90009efc:	6a1b      	ldr	r3, [r3, #32]
90009efe:	2b00      	cmp	r3, #0
90009f00:	d103      	bne.n	90009f0a <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
90009f02:	68bb      	ldr	r3, [r7, #8]
90009f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
90009f06:	621a      	str	r2, [r3, #32]
90009f08:	e005      	b.n	90009f16 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
90009f0a:	68bb      	ldr	r3, [r7, #8]
90009f0c:	6a1b      	ldr	r3, [r3, #32]
90009f0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
90009f10:	4618      	mov	r0, r3
90009f12:	f002 fb1d 	bl	9000c550 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
90009f16:	6a78      	ldr	r0, [r7, #36]	; 0x24
90009f18:	f002 faf2 	bl	9000c500 <pbuf_ref>

  if (hs->req->next != NULL) {
90009f1c:	68bb      	ldr	r3, [r7, #8]
90009f1e:	6a1b      	ldr	r3, [r3, #32]
90009f20:	681b      	ldr	r3, [r3, #0]
90009f22:	2b00      	cmp	r3, #0
90009f24:	d012      	beq.n	90009f4c <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
90009f26:	68bb      	ldr	r3, [r7, #8]
90009f28:	6a1b      	ldr	r3, [r3, #32]
90009f2a:	891b      	ldrh	r3, [r3, #8]
90009f2c:	f240 32ff 	movw	r2, #1023	; 0x3ff
90009f30:	4293      	cmp	r3, r2
90009f32:	bf28      	it	cs
90009f34:	4613      	movcs	r3, r2
90009f36:	877b      	strh	r3, [r7, #58]	; 0x3a
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
90009f38:	68bb      	ldr	r3, [r7, #8]
90009f3a:	6a18      	ldr	r0, [r3, #32]
90009f3c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
90009f3e:	2300      	movs	r3, #0
90009f40:	496b      	ldr	r1, [pc, #428]	; (9000a0f0 <http_parse_request+0x244>)
90009f42:	f002 fc2d 	bl	9000c7a0 <pbuf_copy_partial>
    data = httpd_req_buf;
90009f46:	4b6a      	ldr	r3, [pc, #424]	; (9000a0f0 <http_parse_request+0x244>)
90009f48:	63fb      	str	r3, [r7, #60]	; 0x3c
90009f4a:	e005      	b.n	90009f58 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
90009f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90009f4e:	685b      	ldr	r3, [r3, #4]
90009f50:	63fb      	str	r3, [r7, #60]	; 0x3c
    data_len = p->len;
90009f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90009f54:	895b      	ldrh	r3, [r3, #10]
90009f56:	877b      	strh	r3, [r7, #58]	; 0x3a
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
90009f58:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
90009f5a:	2b06      	cmp	r3, #6
90009f5c:	f240 80a1 	bls.w	9000a0a2 <http_parse_request+0x1f6>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
90009f60:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
90009f62:	461a      	mov	r2, r3
90009f64:	4963      	ldr	r1, [pc, #396]	; (9000a0f4 <http_parse_request+0x248>)
90009f66:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
90009f68:	f000 fd3e 	bl	9000a9e8 <lwip_strnstr>
90009f6c:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
90009f6e:	6a3b      	ldr	r3, [r7, #32]
90009f70:	2b00      	cmp	r3, #0
90009f72:	f000 8096 	beq.w	9000a0a2 <http_parse_request+0x1f6>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
90009f76:	2300      	movs	r3, #0
90009f78:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
90009f7a:	2300      	movs	r3, #0
90009f7c:	633b      	str	r3, [r7, #48]	; 0x30
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
90009f7e:	2204      	movs	r2, #4
90009f80:	495d      	ldr	r1, [pc, #372]	; (9000a0f8 <http_parse_request+0x24c>)
90009f82:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
90009f84:	f00c f837 	bl	90015ff6 <strncmp>
90009f88:	4603      	mov	r3, r0
90009f8a:	2b00      	cmp	r3, #0
90009f8c:	d103      	bne.n	90009f96 <http_parse_request+0xea>
        sp1 = data + 3;
90009f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90009f90:	3303      	adds	r3, #3
90009f92:	62fb      	str	r3, [r7, #44]	; 0x2c
90009f94:	e014      	b.n	90009fc0 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received GET request\"\n"));
#if LWIP_HTTPD_SUPPORT_POST
      } else if (!strncmp(data, "POST ", 5)) {
90009f96:	2205      	movs	r2, #5
90009f98:	4958      	ldr	r1, [pc, #352]	; (9000a0fc <http_parse_request+0x250>)
90009f9a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
90009f9c:	f00c f82b 	bl	90015ff6 <strncmp>
90009fa0:	4603      	mov	r3, r0
90009fa2:	2b00      	cmp	r3, #0
90009fa4:	d105      	bne.n	90009fb2 <http_parse_request+0x106>
        /* store request type */
        is_post = 1;
90009fa6:	2301      	movs	r3, #1
90009fa8:	637b      	str	r3, [r7, #52]	; 0x34
        sp1 = data + 4;
90009faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90009fac:	3304      	adds	r3, #4
90009fae:	62fb      	str	r3, [r7, #44]	; 0x2c
90009fb0:	e006      	b.n	90009fc0 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received POST request\n"));
#endif /* LWIP_HTTPD_SUPPORT_POST */
      } else {
        /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
        data[4] = 0;
90009fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90009fb4:	3304      	adds	r3, #4
90009fb6:	2200      	movs	r2, #0
90009fb8:	701a      	strb	r2, [r3, #0]
        /* unsupported method! */
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
90009fba:	f06f 030f 	mvn.w	r3, #15
90009fbe:	e08a      	b.n	9000a0d6 <http_parse_request+0x22a>
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
90009fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90009fc2:	1c5a      	adds	r2, r3, #1
90009fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90009fc6:	1ad3      	subs	r3, r2, r3
90009fc8:	b29b      	uxth	r3, r3
90009fca:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
90009fcc:	1ad3      	subs	r3, r2, r3
90009fce:	83fb      	strh	r3, [r7, #30]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
90009fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90009fd2:	3301      	adds	r3, #1
90009fd4:	8bfa      	ldrh	r2, [r7, #30]
90009fd6:	494a      	ldr	r1, [pc, #296]	; (9000a100 <http_parse_request+0x254>)
90009fd8:	4618      	mov	r0, r3
90009fda:	f000 fd05 	bl	9000a9e8 <lwip_strnstr>
90009fde:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
90009fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
90009fe2:	2b00      	cmp	r3, #0
90009fe4:	d10c      	bne.n	9000a000 <http_parse_request+0x154>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
90009fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90009fe8:	3301      	adds	r3, #1
90009fea:	8bfa      	ldrh	r2, [r7, #30]
90009fec:	4941      	ldr	r1, [pc, #260]	; (9000a0f4 <http_parse_request+0x248>)
90009fee:	4618      	mov	r0, r3
90009ff0:	f000 fcfa 	bl	9000a9e8 <lwip_strnstr>
90009ff4:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
90009ff6:	2301      	movs	r3, #1
90009ff8:	633b      	str	r3, [r7, #48]	; 0x30
#if LWIP_HTTPD_SUPPORT_POST
        if (is_post) {
90009ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90009ffc:	2b00      	cmp	r3, #0
90009ffe:	d163      	bne.n	9000a0c8 <http_parse_request+0x21c>
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
9000a000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000a002:	3301      	adds	r3, #1
9000a004:	6aba      	ldr	r2, [r7, #40]	; 0x28
9000a006:	1ad3      	subs	r3, r2, r3
9000a008:	83bb      	strh	r3, [r7, #28]
      if ((sp2 != 0) && (sp2 > sp1)) {
9000a00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000a00c:	2b00      	cmp	r3, #0
9000a00e:	d048      	beq.n	9000a0a2 <http_parse_request+0x1f6>
9000a010:	6aba      	ldr	r2, [r7, #40]	; 0x28
9000a012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000a014:	429a      	cmp	r2, r3
9000a016:	d944      	bls.n	9000a0a2 <http_parse_request+0x1f6>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
9000a018:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
9000a01a:	461a      	mov	r2, r3
9000a01c:	4939      	ldr	r1, [pc, #228]	; (9000a104 <http_parse_request+0x258>)
9000a01e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
9000a020:	f000 fce2 	bl	9000a9e8 <lwip_strnstr>
9000a024:	4603      	mov	r3, r0
9000a026:	2b00      	cmp	r3, #0
9000a028:	d03b      	beq.n	9000a0a2 <http_parse_request+0x1f6>
          char *uri = sp1 + 1;
9000a02a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000a02c:	3301      	adds	r3, #1
9000a02e:	61bb      	str	r3, [r7, #24]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
9000a030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000a032:	2200      	movs	r2, #0
9000a034:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
9000a036:	8bbb      	ldrh	r3, [r7, #28]
9000a038:	69ba      	ldr	r2, [r7, #24]
9000a03a:	4413      	add	r3, r2
9000a03c:	2200      	movs	r2, #0
9000a03e:	701a      	strb	r2, [r3, #0]
          LWIP_DEBUGF(HTTPD_DEBUG, ("Received \"%s\" request for URI: \"%s\"\n",
                                    data, uri));
#if LWIP_HTTPD_SUPPORT_POST
          if (is_post) {
9000a040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000a042:	2b00      	cmp	r3, #0
9000a044:	d026      	beq.n	9000a094 <http_parse_request+0x1e8>
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
            struct pbuf *q = hs->req;
9000a046:	68bb      	ldr	r3, [r7, #8]
9000a048:	6a1b      	ldr	r3, [r3, #32]
9000a04a:	617b      	str	r3, [r7, #20]
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            struct pbuf *q = inp;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            err = http_post_request(q, hs, data, data_len, uri, sp2);
9000a04c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
9000a04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000a050:	9301      	str	r3, [sp, #4]
9000a052:	69bb      	ldr	r3, [r7, #24]
9000a054:	9300      	str	r3, [sp, #0]
9000a056:	4613      	mov	r3, r2
9000a058:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
9000a05a:	68b9      	ldr	r1, [r7, #8]
9000a05c:	6978      	ldr	r0, [r7, #20]
9000a05e:	f7ff fe41 	bl	90009ce4 <http_post_request>
9000a062:	4603      	mov	r3, r0
9000a064:	74fb      	strb	r3, [r7, #19]
            if (err != ERR_OK) {
9000a066:	f997 3013 	ldrsb.w	r3, [r7, #19]
9000a06a:	2b00      	cmp	r3, #0
9000a06c:	d00a      	beq.n	9000a084 <http_parse_request+0x1d8>
              /* restore header for next try */
              *sp1 = ' ';
9000a06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000a070:	2220      	movs	r2, #32
9000a072:	701a      	strb	r2, [r3, #0]
              *sp2 = ' ';
9000a074:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000a076:	2220      	movs	r2, #32
9000a078:	701a      	strb	r2, [r3, #0]
              uri[uri_len] = ' ';
9000a07a:	8bbb      	ldrh	r3, [r7, #28]
9000a07c:	69ba      	ldr	r2, [r7, #24]
9000a07e:	4413      	add	r3, r2
9000a080:	2220      	movs	r2, #32
9000a082:	701a      	strb	r2, [r3, #0]
            }
            if (err == ERR_ARG) {
9000a084:	f997 3013 	ldrsb.w	r3, [r7, #19]
9000a088:	f113 0f10 	cmn.w	r3, #16
9000a08c:	d01e      	beq.n	9000a0cc <http_parse_request+0x220>
              goto badrequest;
            }
            return err;
9000a08e:	f997 3013 	ldrsb.w	r3, [r7, #19]
9000a092:	e020      	b.n	9000a0d6 <http_parse_request+0x22a>
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
9000a094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
9000a096:	69b9      	ldr	r1, [r7, #24]
9000a098:	68b8      	ldr	r0, [r7, #8]
9000a09a:	f000 f887 	bl	9000a1ac <http_find_file>
9000a09e:	4603      	mov	r3, r0
9000a0a0:	e019      	b.n	9000a0d6 <http_parse_request+0x22a>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
9000a0a2:	68bb      	ldr	r3, [r7, #8]
9000a0a4:	6a1b      	ldr	r3, [r3, #32]
9000a0a6:	4618      	mov	r0, r3
9000a0a8:	f002 fa12 	bl	9000c4d0 <pbuf_clen>
9000a0ac:	4603      	mov	r3, r0
9000a0ae:	823b      	strh	r3, [r7, #16]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
9000a0b0:	68bb      	ldr	r3, [r7, #8]
9000a0b2:	6a1b      	ldr	r3, [r3, #32]
9000a0b4:	891b      	ldrh	r3, [r3, #8]
9000a0b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
9000a0ba:	d209      	bcs.n	9000a0d0 <http_parse_request+0x224>
9000a0bc:	8a3b      	ldrh	r3, [r7, #16]
9000a0be:	2b05      	cmp	r3, #5
9000a0c0:	d806      	bhi.n	9000a0d0 <http_parse_request+0x224>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
9000a0c2:	f06f 0304 	mvn.w	r3, #4
9000a0c6:	e006      	b.n	9000a0d6 <http_parse_request+0x22a>
          goto badrequest;
9000a0c8:	bf00      	nop
9000a0ca:	e002      	b.n	9000a0d2 <http_parse_request+0x226>
              goto badrequest;
9000a0cc:	bf00      	nop
9000a0ce:	e000      	b.n	9000a0d2 <http_parse_request+0x226>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
9000a0d0:	bf00      	nop
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
9000a0d2:	f06f 030f 	mvn.w	r3, #15
  }
}
9000a0d6:	4618      	mov	r0, r3
9000a0d8:	3740      	adds	r7, #64	; 0x40
9000a0da:	46bd      	mov	sp, r7
9000a0dc:	bd80      	pop	{r7, pc}
9000a0de:	bf00      	nop
9000a0e0:	90017ac4 	.word	0x90017ac4
9000a0e4:	90017c24 	.word	0x90017c24
9000a0e8:	90017b0c 	.word	0x90017b0c
9000a0ec:	90017b34 	.word	0x90017b34
9000a0f0:	2401bd70 	.word	0x2401bd70
9000a0f4:	90017c20 	.word	0x90017c20
9000a0f8:	90017c30 	.word	0x90017c30
9000a0fc:	90017c38 	.word	0x90017c38
9000a100:	90017c40 	.word	0x90017c40
9000a104:	90017c04 	.word	0x90017c04

9000a108 <http_uri_is_ssi>:
 *
 * @return 1 for SSI, 0 for standard files
 */
static u8_t
http_uri_is_ssi(struct fs_file *file, const char *uri)
{
9000a108:	b580      	push	{r7, lr}
9000a10a:	b088      	sub	sp, #32
9000a10c:	af00      	add	r7, sp, #0
9000a10e:	6078      	str	r0, [r7, #4]
9000a110:	6039      	str	r1, [r7, #0]
  size_t loop;
  u8_t tag_check = 0;
9000a112:	2300      	movs	r3, #0
9000a114:	76fb      	strb	r3, [r7, #27]
  if (file != NULL) {
9000a116:	687b      	ldr	r3, [r7, #4]
9000a118:	2b00      	cmp	r3, #0
9000a11a:	d040      	beq.n	9000a19e <http_uri_is_ssi+0x96>
    /* See if we have been asked for an shtml file and, if so,
        enable tag checking. */
    const char *ext = NULL, *sub;
9000a11c:	2300      	movs	r3, #0
9000a11e:	617b      	str	r3, [r7, #20]
    char *param = (char *)strstr(uri, "?");
9000a120:	213f      	movs	r1, #63	; 0x3f
9000a122:	6838      	ldr	r0, [r7, #0]
9000a124:	f00b ff52 	bl	90015fcc <strchr>
9000a128:	60f8      	str	r0, [r7, #12]
    if (param != NULL) {
9000a12a:	68fb      	ldr	r3, [r7, #12]
9000a12c:	2b00      	cmp	r3, #0
9000a12e:	d002      	beq.n	9000a136 <http_uri_is_ssi+0x2e>
      /* separate uri from parameters for now, set back later */
      *param = 0;
9000a130:	68fb      	ldr	r3, [r7, #12]
9000a132:	2200      	movs	r2, #0
9000a134:	701a      	strb	r2, [r3, #0]
    }
    sub = uri;
9000a136:	683b      	ldr	r3, [r7, #0]
9000a138:	613b      	str	r3, [r7, #16]
    ext = uri;
9000a13a:	683b      	ldr	r3, [r7, #0]
9000a13c:	617b      	str	r3, [r7, #20]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
9000a13e:	212e      	movs	r1, #46	; 0x2e
9000a140:	6938      	ldr	r0, [r7, #16]
9000a142:	f00b ff43 	bl	90015fcc <strchr>
9000a146:	6138      	str	r0, [r7, #16]
9000a148:	e009      	b.n	9000a15e <http_uri_is_ssi+0x56>
      ext = sub;
9000a14a:	693b      	ldr	r3, [r7, #16]
9000a14c:	617b      	str	r3, [r7, #20]
      sub++;
9000a14e:	693b      	ldr	r3, [r7, #16]
9000a150:	3301      	adds	r3, #1
9000a152:	613b      	str	r3, [r7, #16]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
9000a154:	212e      	movs	r1, #46	; 0x2e
9000a156:	6938      	ldr	r0, [r7, #16]
9000a158:	f00b ff38 	bl	90015fcc <strchr>
9000a15c:	6138      	str	r0, [r7, #16]
9000a15e:	693b      	ldr	r3, [r7, #16]
9000a160:	2b00      	cmp	r3, #0
9000a162:	d1f2      	bne.n	9000a14a <http_uri_is_ssi+0x42>
    }
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
9000a164:	2300      	movs	r3, #0
9000a166:	61fb      	str	r3, [r7, #28]
9000a168:	e010      	b.n	9000a18c <http_uri_is_ssi+0x84>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
9000a16a:	4a0f      	ldr	r2, [pc, #60]	; (9000a1a8 <http_uri_is_ssi+0xa0>)
9000a16c:	69fb      	ldr	r3, [r7, #28]
9000a16e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
9000a172:	4619      	mov	r1, r3
9000a174:	6978      	ldr	r0, [r7, #20]
9000a176:	f000 fc6d 	bl	9000aa54 <lwip_stricmp>
9000a17a:	4603      	mov	r3, r0
9000a17c:	2b00      	cmp	r3, #0
9000a17e:	d102      	bne.n	9000a186 <http_uri_is_ssi+0x7e>
        tag_check = 1;
9000a180:	2301      	movs	r3, #1
9000a182:	76fb      	strb	r3, [r7, #27]
        break;
9000a184:	e005      	b.n	9000a192 <http_uri_is_ssi+0x8a>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
9000a186:	69fb      	ldr	r3, [r7, #28]
9000a188:	3301      	adds	r3, #1
9000a18a:	61fb      	str	r3, [r7, #28]
9000a18c:	69fb      	ldr	r3, [r7, #28]
9000a18e:	2b04      	cmp	r3, #4
9000a190:	d9eb      	bls.n	9000a16a <http_uri_is_ssi+0x62>
      }
    }
    if (param != NULL) {
9000a192:	68fb      	ldr	r3, [r7, #12]
9000a194:	2b00      	cmp	r3, #0
9000a196:	d002      	beq.n	9000a19e <http_uri_is_ssi+0x96>
      *param = '?';
9000a198:	68fb      	ldr	r3, [r7, #12]
9000a19a:	223f      	movs	r2, #63	; 0x3f
9000a19c:	701a      	strb	r2, [r3, #0]
    }
  }
  return tag_check;
9000a19e:	7efb      	ldrb	r3, [r7, #27]
}
9000a1a0:	4618      	mov	r0, r3
9000a1a2:	3720      	adds	r7, #32
9000a1a4:	46bd      	mov	sp, r7
9000a1a6:	bd80      	pop	{r7, pc}
9000a1a8:	90020fd8 	.word	0x90020fd8

9000a1ac <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
9000a1ac:	b590      	push	{r4, r7, lr}
9000a1ae:	b093      	sub	sp, #76	; 0x4c
9000a1b0:	af02      	add	r7, sp, #8
9000a1b2:	60f8      	str	r0, [r7, #12]
9000a1b4:	60b9      	str	r1, [r7, #8]
9000a1b6:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
9000a1b8:	2300      	movs	r3, #0
9000a1ba:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
9000a1bc:	2300      	movs	r3, #0
9000a1be:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
9000a1c0:	2300      	movs	r3, #0
9000a1c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
9000a1c6:	68bb      	ldr	r3, [r7, #8]
9000a1c8:	4618      	mov	r0, r3
9000a1ca:	f7f6 f893 	bl	900002f4 <strlen>
9000a1ce:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
9000a1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000a1d2:	2b00      	cmp	r3, #0
9000a1d4:	d072      	beq.n	9000a2bc <http_find_file+0x110>
9000a1d6:	68ba      	ldr	r2, [r7, #8]
9000a1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000a1da:	3b01      	subs	r3, #1
9000a1dc:	4413      	add	r3, r2
9000a1de:	781b      	ldrb	r3, [r3, #0]
9000a1e0:	2b2f      	cmp	r3, #47	; 0x2f
9000a1e2:	d16b      	bne.n	9000a2bc <http_find_file+0x110>
      ((uri != http_uri_buf) || (uri_len == 1))) {
9000a1e4:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
9000a1e6:	4a80      	ldr	r2, [pc, #512]	; (9000a3e8 <http_find_file+0x23c>)
9000a1e8:	4293      	cmp	r3, r2
9000a1ea:	d102      	bne.n	9000a1f2 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
9000a1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000a1ee:	2b01      	cmp	r3, #1
9000a1f0:	d164      	bne.n	9000a2bc <http_find_file+0x110>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
9000a1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000a1f4:	3b01      	subs	r3, #1
9000a1f6:	2b3f      	cmp	r3, #63	; 0x3f
9000a1f8:	bf28      	it	cs
9000a1fa:	233f      	movcs	r3, #63	; 0x3f
9000a1fc:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
9000a1fe:	6a3b      	ldr	r3, [r7, #32]
9000a200:	2b00      	cmp	r3, #0
9000a202:	d00a      	beq.n	9000a21a <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
9000a204:	68bb      	ldr	r3, [r7, #8]
9000a206:	6a3a      	ldr	r2, [r7, #32]
9000a208:	4619      	mov	r1, r3
9000a20a:	4877      	ldr	r0, [pc, #476]	; (9000a3e8 <http_find_file+0x23c>)
9000a20c:	f00b fc2d 	bl	90015a6a <memcpy>
      http_uri_buf[copy_len] = 0;
9000a210:	4a75      	ldr	r2, [pc, #468]	; (9000a3e8 <http_find_file+0x23c>)
9000a212:	6a3b      	ldr	r3, [r7, #32]
9000a214:	4413      	add	r3, r2
9000a216:	2200      	movs	r2, #0
9000a218:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
9000a21a:	2300      	movs	r3, #0
9000a21c:	63fb      	str	r3, [r7, #60]	; 0x3c
9000a21e:	e04a      	b.n	9000a2b6 <http_find_file+0x10a>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
9000a220:	6a3b      	ldr	r3, [r7, #32]
9000a222:	2b00      	cmp	r3, #0
9000a224:	d028      	beq.n	9000a278 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
9000a226:	6a3b      	ldr	r3, [r7, #32]
9000a228:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
9000a22c:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
9000a22e:	69fb      	ldr	r3, [r7, #28]
9000a230:	2b00      	cmp	r3, #0
9000a232:	d01e      	beq.n	9000a272 <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
9000a234:	4a6d      	ldr	r2, [pc, #436]	; (9000a3ec <http_find_file+0x240>)
9000a236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000a238:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
9000a23c:	4618      	mov	r0, r3
9000a23e:	f7f6 f859 	bl	900002f4 <strlen>
9000a242:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
9000a244:	69ba      	ldr	r2, [r7, #24]
9000a246:	69fb      	ldr	r3, [r7, #28]
9000a248:	4293      	cmp	r3, r2
9000a24a:	bf28      	it	cs
9000a24c:	4613      	movcs	r3, r2
9000a24e:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
9000a250:	6a3b      	ldr	r3, [r7, #32]
9000a252:	4a65      	ldr	r2, [pc, #404]	; (9000a3e8 <http_find_file+0x23c>)
9000a254:	1898      	adds	r0, r3, r2
9000a256:	4a65      	ldr	r2, [pc, #404]	; (9000a3ec <http_find_file+0x240>)
9000a258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000a25a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
9000a25e:	697a      	ldr	r2, [r7, #20]
9000a260:	4619      	mov	r1, r3
9000a262:	f00b fc02 	bl	90015a6a <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
9000a266:	6a3a      	ldr	r2, [r7, #32]
9000a268:	697b      	ldr	r3, [r7, #20]
9000a26a:	4413      	add	r3, r2
9000a26c:	4a5e      	ldr	r2, [pc, #376]	; (9000a3e8 <http_find_file+0x23c>)
9000a26e:	2100      	movs	r1, #0
9000a270:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
9000a272:	4b5d      	ldr	r3, [pc, #372]	; (9000a3e8 <http_find_file+0x23c>)
9000a274:	62bb      	str	r3, [r7, #40]	; 0x28
9000a276:	e004      	b.n	9000a282 <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
9000a278:	4a5c      	ldr	r2, [pc, #368]	; (9000a3ec <http_find_file+0x240>)
9000a27a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000a27c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
9000a280:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
9000a282:	68fb      	ldr	r3, [r7, #12]
9000a284:	6ab9      	ldr	r1, [r7, #40]	; 0x28
9000a286:	4618      	mov	r0, r3
9000a288:	f7fe fdd2 	bl	90008e30 <fs_open>
9000a28c:	4603      	mov	r3, r0
9000a28e:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
9000a290:	f997 3013 	ldrsb.w	r3, [r7, #19]
9000a294:	2b00      	cmp	r3, #0
9000a296:	d10b      	bne.n	9000a2b0 <http_find_file+0x104>
        uri = file_name;
9000a298:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000a29a:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
9000a29c:	68fb      	ldr	r3, [r7, #12]
9000a29e:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
9000a2a0:	4a52      	ldr	r2, [pc, #328]	; (9000a3ec <http_find_file+0x240>)
9000a2a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000a2a4:	00db      	lsls	r3, r3, #3
9000a2a6:	4413      	add	r3, r2
9000a2a8:	791b      	ldrb	r3, [r3, #4]
9000a2aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI */
        break;
9000a2ae:	e005      	b.n	9000a2bc <http_find_file+0x110>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
9000a2b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000a2b2:	3301      	adds	r3, #1
9000a2b4:	63fb      	str	r3, [r7, #60]	; 0x3c
9000a2b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9000a2b8:	2b04      	cmp	r3, #4
9000a2ba:	d9b1      	bls.n	9000a220 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
9000a2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000a2be:	2b00      	cmp	r3, #0
9000a2c0:	d176      	bne.n	9000a3b0 <http_find_file+0x204>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
9000a2c2:	68bb      	ldr	r3, [r7, #8]
9000a2c4:	213f      	movs	r1, #63	; 0x3f
9000a2c6:	4618      	mov	r0, r3
9000a2c8:	f00b fe80 	bl	90015fcc <strchr>
9000a2cc:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
9000a2ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000a2d0:	2b00      	cmp	r3, #0
9000a2d2:	d005      	beq.n	9000a2e0 <http_find_file+0x134>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
9000a2d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000a2d6:	2200      	movs	r2, #0
9000a2d8:	701a      	strb	r2, [r3, #0]
      params++;
9000a2da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000a2dc:	3301      	adds	r3, #1
9000a2de:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
9000a2e0:	4b43      	ldr	r3, [pc, #268]	; (9000a3f0 <http_find_file+0x244>)
9000a2e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
9000a2e6:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
9000a2e8:	4b42      	ldr	r3, [pc, #264]	; (9000a3f4 <http_find_file+0x248>)
9000a2ea:	681b      	ldr	r3, [r3, #0]
9000a2ec:	2b00      	cmp	r3, #0
9000a2ee:	d034      	beq.n	9000a35a <http_find_file+0x1ae>
9000a2f0:	4b41      	ldr	r3, [pc, #260]	; (9000a3f8 <http_find_file+0x24c>)
9000a2f2:	681b      	ldr	r3, [r3, #0]
9000a2f4:	2b00      	cmp	r3, #0
9000a2f6:	d030      	beq.n	9000a35a <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
9000a2f8:	2300      	movs	r3, #0
9000a2fa:	633b      	str	r3, [r7, #48]	; 0x30
9000a2fc:	e028      	b.n	9000a350 <http_find_file+0x1a4>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
9000a2fe:	68b8      	ldr	r0, [r7, #8]
9000a300:	4b3d      	ldr	r3, [pc, #244]	; (9000a3f8 <http_find_file+0x24c>)
9000a302:	681a      	ldr	r2, [r3, #0]
9000a304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000a306:	00db      	lsls	r3, r3, #3
9000a308:	4413      	add	r3, r2
9000a30a:	681b      	ldr	r3, [r3, #0]
9000a30c:	4619      	mov	r1, r3
9000a30e:	f7f5 ffe7 	bl	900002e0 <strcmp>
9000a312:	4603      	mov	r3, r0
9000a314:	2b00      	cmp	r3, #0
9000a316:	d118      	bne.n	9000a34a <http_find_file+0x19e>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
9000a318:	6b79      	ldr	r1, [r7, #52]	; 0x34
9000a31a:	68f8      	ldr	r0, [r7, #12]
9000a31c:	f7fe ff38 	bl	90009190 <extract_uri_parameters>
9000a320:	4603      	mov	r3, r0
9000a322:	4a33      	ldr	r2, [pc, #204]	; (9000a3f0 <http_find_file+0x244>)
9000a324:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
9000a326:	4b34      	ldr	r3, [pc, #208]	; (9000a3f8 <http_find_file+0x24c>)
9000a328:	681a      	ldr	r2, [r3, #0]
9000a32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000a32c:	00db      	lsls	r3, r3, #3
9000a32e:	4413      	add	r3, r2
9000a330:	685c      	ldr	r4, [r3, #4]
9000a332:	4b2f      	ldr	r3, [pc, #188]	; (9000a3f0 <http_find_file+0x244>)
9000a334:	6819      	ldr	r1, [r3, #0]
9000a336:	68fb      	ldr	r3, [r7, #12]
9000a338:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                         hs->param_vals);
9000a33c:	68fb      	ldr	r3, [r7, #12]
9000a33e:	3370      	adds	r3, #112	; 0x70
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
9000a340:	6b38      	ldr	r0, [r7, #48]	; 0x30
9000a342:	47a0      	blx	r4
9000a344:	4603      	mov	r3, r0
9000a346:	60bb      	str	r3, [r7, #8]
          break;
9000a348:	e007      	b.n	9000a35a <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
9000a34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9000a34c:	3301      	adds	r3, #1
9000a34e:	633b      	str	r3, [r7, #48]	; 0x30
9000a350:	4b28      	ldr	r3, [pc, #160]	; (9000a3f4 <http_find_file+0x248>)
9000a352:	681b      	ldr	r3, [r3, #0]
9000a354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
9000a356:	429a      	cmp	r2, r3
9000a358:	dbd1      	blt.n	9000a2fe <http_find_file+0x152>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
9000a35a:	68fb      	ldr	r3, [r7, #12]
9000a35c:	68ba      	ldr	r2, [r7, #8]
9000a35e:	4611      	mov	r1, r2
9000a360:	4618      	mov	r0, r3
9000a362:	f7fe fd65 	bl	90008e30 <fs_open>
9000a366:	4603      	mov	r3, r0
9000a368:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
9000a36a:	f997 3013 	ldrsb.w	r3, [r7, #19]
9000a36e:	2b00      	cmp	r3, #0
9000a370:	d102      	bne.n	9000a378 <http_find_file+0x1cc>
      file = &hs->file_handle;
9000a372:	68fb      	ldr	r3, [r7, #12]
9000a374:	63bb      	str	r3, [r7, #56]	; 0x38
9000a376:	e006      	b.n	9000a386 <http_find_file+0x1da>
    } else {
      file = http_get_404_file(hs, &uri);
9000a378:	f107 0308 	add.w	r3, r7, #8
9000a37c:	4619      	mov	r1, r3
9000a37e:	68f8      	ldr	r0, [r7, #12]
9000a380:	f7ff fc12 	bl	90009ba8 <http_get_404_file>
9000a384:	63b8      	str	r0, [r7, #56]	; 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
9000a386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000a388:	2b00      	cmp	r3, #0
9000a38a:	d011      	beq.n	9000a3b0 <http_find_file+0x204>
      if (file->flags & FS_FILE_FLAGS_SSI) {
9000a38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000a38e:	7c1b      	ldrb	r3, [r3, #16]
9000a390:	f003 0308 	and.w	r3, r3, #8
9000a394:	2b00      	cmp	r3, #0
9000a396:	d003      	beq.n	9000a3a0 <http_find_file+0x1f4>
        tag_check = 1;
9000a398:	2301      	movs	r3, #1
9000a39a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
9000a39e:	e007      	b.n	9000a3b0 <http_find_file+0x204>
      } else {
#if LWIP_HTTPD_SSI_BY_FILE_EXTENSION
        tag_check = http_uri_is_ssi(file, uri);
9000a3a0:	68bb      	ldr	r3, [r7, #8]
9000a3a2:	4619      	mov	r1, r3
9000a3a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
9000a3a6:	f7ff feaf 	bl	9000a108 <http_uri_is_ssi>
9000a3aa:	4603      	mov	r3, r0
9000a3ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
9000a3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9000a3b2:	2b00      	cmp	r3, #0
9000a3b4:	d106      	bne.n	9000a3c4 <http_find_file+0x218>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
9000a3b6:	f107 0308 	add.w	r3, r7, #8
9000a3ba:	4619      	mov	r1, r3
9000a3bc:	68f8      	ldr	r0, [r7, #12]
9000a3be:	f7ff fbf3 	bl	90009ba8 <http_get_404_file>
9000a3c2:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
9000a3c4:	68ba      	ldr	r2, [r7, #8]
9000a3c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9000a3c8:	9301      	str	r3, [sp, #4]
9000a3ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
9000a3ce:	9300      	str	r3, [sp, #0]
9000a3d0:	4613      	mov	r3, r2
9000a3d2:	687a      	ldr	r2, [r7, #4]
9000a3d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
9000a3d6:	68f8      	ldr	r0, [r7, #12]
9000a3d8:	f000 f810 	bl	9000a3fc <http_init_file>
9000a3dc:	4603      	mov	r3, r0
}
9000a3de:	4618      	mov	r0, r3
9000a3e0:	3744      	adds	r7, #68	; 0x44
9000a3e2:	46bd      	mov	sp, r7
9000a3e4:	bd90      	pop	{r4, r7, pc}
9000a3e6:	bf00      	nop
9000a3e8:	2401c170 	.word	0x2401c170
9000a3ec:	90020fec 	.word	0x90020fec
9000a3f0:	2401c1c4 	.word	0x2401c1c4
9000a3f4:	2401c1c0 	.word	0x2401c1c0
9000a3f8:	2401c1bc 	.word	0x2401c1bc

9000a3fc <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
9000a3fc:	b580      	push	{r7, lr}
9000a3fe:	b088      	sub	sp, #32
9000a400:	af00      	add	r7, sp, #0
9000a402:	60f8      	str	r0, [r7, #12]
9000a404:	60b9      	str	r1, [r7, #8]
9000a406:	607a      	str	r2, [r7, #4]
9000a408:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
9000a40a:	68bb      	ldr	r3, [r7, #8]
9000a40c:	2b00      	cmp	r3, #0
9000a40e:	d07d      	beq.n	9000a50c <http_init_file+0x110>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
9000a410:	68bb      	ldr	r3, [r7, #8]
9000a412:	681b      	ldr	r3, [r3, #0]
9000a414:	2b00      	cmp	r3, #0
9000a416:	d106      	bne.n	9000a426 <http_init_file+0x2a>
9000a418:	4b45      	ldr	r3, [pc, #276]	; (9000a530 <http_init_file+0x134>)
9000a41a:	f640 120b 	movw	r2, #2315	; 0x90b
9000a41e:	4945      	ldr	r1, [pc, #276]	; (9000a534 <http_init_file+0x138>)
9000a420:	4845      	ldr	r0, [pc, #276]	; (9000a538 <http_init_file+0x13c>)
9000a422:	f00b fbe7 	bl	90015bf4 <iprintf>
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
9000a426:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
9000a42a:	2b00      	cmp	r3, #0
9000a42c:	d01c      	beq.n	9000a468 <http_init_file+0x6c>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
9000a42e:	f7fe fd56 	bl	90008ede <http_ssi_state_alloc>
9000a432:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
9000a434:	69fb      	ldr	r3, [r7, #28]
9000a436:	2b00      	cmp	r3, #0
9000a438:	d016      	beq.n	9000a468 <http_init_file+0x6c>
        ssi->tag_index = 0;
9000a43a:	69fb      	ldr	r3, [r7, #28]
9000a43c:	2200      	movs	r2, #0
9000a43e:	821a      	strh	r2, [r3, #16]
        ssi->tag_state = TAG_NONE;
9000a440:	69fb      	ldr	r3, [r7, #28]
9000a442:	2200      	movs	r2, #0
9000a444:	f883 240a 	strb.w	r2, [r3, #1034]	; 0x40a
        ssi->parsed = file->data;
9000a448:	68bb      	ldr	r3, [r7, #8]
9000a44a:	681a      	ldr	r2, [r3, #0]
9000a44c:	69fb      	ldr	r3, [r7, #28]
9000a44e:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
9000a450:	68bb      	ldr	r3, [r7, #8]
9000a452:	685b      	ldr	r3, [r3, #4]
9000a454:	461a      	mov	r2, r3
9000a456:	69fb      	ldr	r3, [r7, #28]
9000a458:	60da      	str	r2, [r3, #12]
        ssi->tag_end = file->data;
9000a45a:	68bb      	ldr	r3, [r7, #8]
9000a45c:	681a      	ldr	r2, [r3, #0]
9000a45e:	69fb      	ldr	r3, [r7, #28]
9000a460:	609a      	str	r2, [r3, #8]
        hs->ssi = ssi;
9000a462:	68fb      	ldr	r3, [r7, #12]
9000a464:	69fa      	ldr	r2, [r7, #28]
9000a466:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
9000a468:	68fb      	ldr	r3, [r7, #12]
9000a46a:	68ba      	ldr	r2, [r7, #8]
9000a46c:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
9000a46e:	68bb      	ldr	r3, [r7, #8]
9000a470:	681a      	ldr	r2, [r3, #0]
9000a472:	68fb      	ldr	r3, [r7, #12]
9000a474:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
9000a476:	68bb      	ldr	r3, [r7, #8]
9000a478:	685b      	ldr	r3, [r3, #4]
9000a47a:	2b00      	cmp	r3, #0
9000a47c:	da06      	bge.n	9000a48c <http_init_file+0x90>
9000a47e:	4b2c      	ldr	r3, [pc, #176]	; (9000a530 <http_init_file+0x134>)
9000a480:	f640 1234 	movw	r2, #2356	; 0x934
9000a484:	492d      	ldr	r1, [pc, #180]	; (9000a53c <http_init_file+0x140>)
9000a486:	482c      	ldr	r0, [pc, #176]	; (9000a538 <http_init_file+0x13c>)
9000a488:	f00b fbb4 	bl	90015bf4 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
9000a48c:	68bb      	ldr	r3, [r7, #8]
9000a48e:	685b      	ldr	r3, [r3, #4]
9000a490:	461a      	mov	r2, r3
9000a492:	68fb      	ldr	r3, [r7, #12]
9000a494:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
9000a496:	68fb      	ldr	r3, [r7, #12]
9000a498:	2200      	movs	r2, #0
9000a49a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
9000a49e:	68fb      	ldr	r3, [r7, #12]
9000a4a0:	695b      	ldr	r3, [r3, #20]
9000a4a2:	7c1b      	ldrb	r3, [r3, #16]
9000a4a4:	f003 0301 	and.w	r3, r3, #1
9000a4a8:	2b00      	cmp	r3, #0
9000a4aa:	d106      	bne.n	9000a4ba <http_init_file+0xbe>
9000a4ac:	4b20      	ldr	r3, [pc, #128]	; (9000a530 <http_init_file+0x134>)
9000a4ae:	f640 1243 	movw	r2, #2371	; 0x943
9000a4b2:	4923      	ldr	r1, [pc, #140]	; (9000a540 <http_init_file+0x144>)
9000a4b4:	4820      	ldr	r0, [pc, #128]	; (9000a538 <http_init_file+0x13c>)
9000a4b6:	f00b fb9d 	bl	90015bf4 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
9000a4ba:	687b      	ldr	r3, [r7, #4]
9000a4bc:	2b00      	cmp	r3, #0
9000a4be:	d032      	beq.n	9000a526 <http_init_file+0x12a>
9000a4c0:	68fb      	ldr	r3, [r7, #12]
9000a4c2:	695b      	ldr	r3, [r3, #20]
9000a4c4:	7c1b      	ldrb	r3, [r3, #16]
9000a4c6:	f003 0301 	and.w	r3, r3, #1
9000a4ca:	2b00      	cmp	r3, #0
9000a4cc:	d02b      	beq.n	9000a526 <http_init_file+0x12a>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
9000a4ce:	68fb      	ldr	r3, [r7, #12]
9000a4d0:	6998      	ldr	r0, [r3, #24]
9000a4d2:	68fb      	ldr	r3, [r7, #12]
9000a4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000a4d6:	461a      	mov	r2, r3
9000a4d8:	491a      	ldr	r1, [pc, #104]	; (9000a544 <http_init_file+0x148>)
9000a4da:	f000 fa85 	bl	9000a9e8 <lwip_strnstr>
9000a4de:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
9000a4e0:	69bb      	ldr	r3, [r7, #24]
9000a4e2:	2b00      	cmp	r3, #0
9000a4e4:	d01f      	beq.n	9000a526 <http_init_file+0x12a>
        int diff = file_start + 4 - hs->file;
9000a4e6:	69bb      	ldr	r3, [r7, #24]
9000a4e8:	1d1a      	adds	r2, r3, #4
9000a4ea:	68fb      	ldr	r3, [r7, #12]
9000a4ec:	699b      	ldr	r3, [r3, #24]
9000a4ee:	1ad3      	subs	r3, r2, r3
9000a4f0:	617b      	str	r3, [r7, #20]
        hs->file += diff;
9000a4f2:	68fb      	ldr	r3, [r7, #12]
9000a4f4:	699a      	ldr	r2, [r3, #24]
9000a4f6:	697b      	ldr	r3, [r7, #20]
9000a4f8:	441a      	add	r2, r3
9000a4fa:	68fb      	ldr	r3, [r7, #12]
9000a4fc:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
9000a4fe:	68fb      	ldr	r3, [r7, #12]
9000a500:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9000a502:	697b      	ldr	r3, [r7, #20]
9000a504:	1ad2      	subs	r2, r2, r3
9000a506:	68fb      	ldr	r3, [r7, #12]
9000a508:	625a      	str	r2, [r3, #36]	; 0x24
9000a50a:	e00c      	b.n	9000a526 <http_init_file+0x12a>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
9000a50c:	68fb      	ldr	r3, [r7, #12]
9000a50e:	2200      	movs	r2, #0
9000a510:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
9000a512:	68fb      	ldr	r3, [r7, #12]
9000a514:	2200      	movs	r2, #0
9000a516:	619a      	str	r2, [r3, #24]
    hs->left = 0;
9000a518:	68fb      	ldr	r3, [r7, #12]
9000a51a:	2200      	movs	r2, #0
9000a51c:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
9000a51e:	68fb      	ldr	r3, [r7, #12]
9000a520:	2200      	movs	r2, #0
9000a522:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
9000a526:	2300      	movs	r3, #0
}
9000a528:	4618      	mov	r0, r3
9000a52a:	3720      	adds	r7, #32
9000a52c:	46bd      	mov	sp, r7
9000a52e:	bd80      	pop	{r7, pc}
9000a530:	90017ac4 	.word	0x90017ac4
9000a534:	90017c44 	.word	0x90017c44
9000a538:	90017b0c 	.word	0x90017b0c
9000a53c:	90017c58 	.word	0x90017c58
9000a540:	90017c78 	.word	0x90017c78
9000a544:	90017c04 	.word	0x90017c04

9000a548 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
9000a548:	b580      	push	{r7, lr}
9000a54a:	b084      	sub	sp, #16
9000a54c:	af00      	add	r7, sp, #0
9000a54e:	6078      	str	r0, [r7, #4]
9000a550:	460b      	mov	r3, r1
9000a552:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
9000a554:	687b      	ldr	r3, [r7, #4]
9000a556:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
9000a558:	68fb      	ldr	r3, [r7, #12]
9000a55a:	2b00      	cmp	r3, #0
9000a55c:	d002      	beq.n	9000a564 <http_err+0x1c>
    http_state_free(hs);
9000a55e:	68f8      	ldr	r0, [r7, #12]
9000a560:	f7fe fd2c 	bl	90008fbc <http_state_free>
  }
}
9000a564:	bf00      	nop
9000a566:	3710      	adds	r7, #16
9000a568:	46bd      	mov	sp, r7
9000a56a:	bd80      	pop	{r7, pc}

9000a56c <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
9000a56c:	b580      	push	{r7, lr}
9000a56e:	b086      	sub	sp, #24
9000a570:	af00      	add	r7, sp, #0
9000a572:	60f8      	str	r0, [r7, #12]
9000a574:	60b9      	str	r1, [r7, #8]
9000a576:	4613      	mov	r3, r2
9000a578:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
9000a57a:	68fb      	ldr	r3, [r7, #12]
9000a57c:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
9000a57e:	697b      	ldr	r3, [r7, #20]
9000a580:	2b00      	cmp	r3, #0
9000a582:	d101      	bne.n	9000a588 <http_sent+0x1c>
    return ERR_OK;
9000a584:	2300      	movs	r3, #0
9000a586:	e008      	b.n	9000a59a <http_sent+0x2e>
  }

  hs->retries = 0;
9000a588:	697b      	ldr	r3, [r7, #20]
9000a58a:	2200      	movs	r2, #0
9000a58c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
9000a590:	6979      	ldr	r1, [r7, #20]
9000a592:	68b8      	ldr	r0, [r7, #8]
9000a594:	f7ff fac6 	bl	90009b24 <http_send>

  return ERR_OK;
9000a598:	2300      	movs	r3, #0
}
9000a59a:	4618      	mov	r0, r3
9000a59c:	3718      	adds	r7, #24
9000a59e:	46bd      	mov	sp, r7
9000a5a0:	bd80      	pop	{r7, pc}

9000a5a2 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
9000a5a2:	b580      	push	{r7, lr}
9000a5a4:	b084      	sub	sp, #16
9000a5a6:	af00      	add	r7, sp, #0
9000a5a8:	6078      	str	r0, [r7, #4]
9000a5aa:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
9000a5ac:	687b      	ldr	r3, [r7, #4]
9000a5ae:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
9000a5b0:	68fb      	ldr	r3, [r7, #12]
9000a5b2:	2b00      	cmp	r3, #0
9000a5b4:	d107      	bne.n	9000a5c6 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
9000a5b6:	2100      	movs	r1, #0
9000a5b8:	6838      	ldr	r0, [r7, #0]
9000a5ba:	f7fe fdcd 	bl	90009158 <http_close_conn>
9000a5be:	4603      	mov	r3, r0
9000a5c0:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
9000a5c2:	2300      	movs	r3, #0
9000a5c4:	e021      	b.n	9000a60a <http_poll+0x68>
  } else {
    hs->retries++;
9000a5c6:	68fb      	ldr	r3, [r7, #12]
9000a5c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
9000a5cc:	3301      	adds	r3, #1
9000a5ce:	b2da      	uxtb	r2, r3
9000a5d0:	68fb      	ldr	r3, [r7, #12]
9000a5d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
9000a5d6:	68fb      	ldr	r3, [r7, #12]
9000a5d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
9000a5dc:	2b04      	cmp	r3, #4
9000a5de:	d105      	bne.n	9000a5ec <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
9000a5e0:	68f9      	ldr	r1, [r7, #12]
9000a5e2:	6838      	ldr	r0, [r7, #0]
9000a5e4:	f7fe fdb8 	bl	90009158 <http_close_conn>
      return ERR_OK;
9000a5e8:	2300      	movs	r3, #0
9000a5ea:	e00e      	b.n	9000a60a <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
9000a5ec:	68fb      	ldr	r3, [r7, #12]
9000a5ee:	695b      	ldr	r3, [r3, #20]
9000a5f0:	2b00      	cmp	r3, #0
9000a5f2:	d009      	beq.n	9000a608 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
9000a5f4:	68f9      	ldr	r1, [r7, #12]
9000a5f6:	6838      	ldr	r0, [r7, #0]
9000a5f8:	f7ff fa94 	bl	90009b24 <http_send>
9000a5fc:	4603      	mov	r3, r0
9000a5fe:	2b00      	cmp	r3, #0
9000a600:	d002      	beq.n	9000a608 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
9000a602:	6838      	ldr	r0, [r7, #0]
9000a604:	f007 fa54 	bl	90011ab0 <tcp_output>
      }
    }
  }

  return ERR_OK;
9000a608:	2300      	movs	r3, #0
}
9000a60a:	4618      	mov	r0, r3
9000a60c:	3710      	adds	r7, #16
9000a60e:	46bd      	mov	sp, r7
9000a610:	bd80      	pop	{r7, pc}
	...

9000a614 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
9000a614:	b580      	push	{r7, lr}
9000a616:	b086      	sub	sp, #24
9000a618:	af00      	add	r7, sp, #0
9000a61a:	60f8      	str	r0, [r7, #12]
9000a61c:	60b9      	str	r1, [r7, #8]
9000a61e:	607a      	str	r2, [r7, #4]
9000a620:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
9000a622:	68fb      	ldr	r3, [r7, #12]
9000a624:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
9000a626:	f997 3003 	ldrsb.w	r3, [r7, #3]
9000a62a:	2b00      	cmp	r3, #0
9000a62c:	d105      	bne.n	9000a63a <http_recv+0x26>
9000a62e:	687b      	ldr	r3, [r7, #4]
9000a630:	2b00      	cmp	r3, #0
9000a632:	d002      	beq.n	9000a63a <http_recv+0x26>
9000a634:	697b      	ldr	r3, [r7, #20]
9000a636:	2b00      	cmp	r3, #0
9000a638:	d111      	bne.n	9000a65e <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
9000a63a:	687b      	ldr	r3, [r7, #4]
9000a63c:	2b00      	cmp	r3, #0
9000a63e:	d008      	beq.n	9000a652 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
9000a640:	687b      	ldr	r3, [r7, #4]
9000a642:	891b      	ldrh	r3, [r3, #8]
9000a644:	4619      	mov	r1, r3
9000a646:	68b8      	ldr	r0, [r7, #8]
9000a648:	f002 fe22 	bl	9000d290 <tcp_recved>
      pbuf_free(p);
9000a64c:	6878      	ldr	r0, [r7, #4]
9000a64e:	f001 feb1 	bl	9000c3b4 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
9000a652:	6979      	ldr	r1, [r7, #20]
9000a654:	68b8      	ldr	r0, [r7, #8]
9000a656:	f7fe fd7f 	bl	90009158 <http_close_conn>
    return ERR_OK;
9000a65a:	2300      	movs	r3, #0
9000a65c:	e072      	b.n	9000a744 <http_recv+0x130>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
9000a65e:	687b      	ldr	r3, [r7, #4]
9000a660:	891b      	ldrh	r3, [r3, #8]
9000a662:	4619      	mov	r1, r3
9000a664:	68b8      	ldr	r0, [r7, #8]
9000a666:	f002 fe13 	bl	9000d290 <tcp_recved>
  }

#if LWIP_HTTPD_SUPPORT_POST
  if (hs->post_content_len_left > 0) {
9000a66a:	697b      	ldr	r3, [r7, #20]
9000a66c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
9000a670:	2b00      	cmp	r3, #0
9000a672:	d012      	beq.n	9000a69a <http_recv+0x86>
    /* reset idle counter when POST data is received */
    hs->retries = 0;
9000a674:	697b      	ldr	r3, [r7, #20]
9000a676:	2200      	movs	r2, #0
9000a678:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    /* this is data for a POST, pass the complete pbuf to the application */
    http_post_rxpbuf(hs, p);
9000a67c:	6879      	ldr	r1, [r7, #4]
9000a67e:	6978      	ldr	r0, [r7, #20]
9000a680:	f7ff faf0 	bl	90009c64 <http_post_rxpbuf>
    /* pbuf is passed to the application, don't free it! */
    if (hs->post_content_len_left == 0) {
9000a684:	697b      	ldr	r3, [r7, #20]
9000a686:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
9000a68a:	2b00      	cmp	r3, #0
9000a68c:	d103      	bne.n	9000a696 <http_recv+0x82>
      /* all data received, send response or close connection */
      http_send(pcb, hs);
9000a68e:	6979      	ldr	r1, [r7, #20]
9000a690:	68b8      	ldr	r0, [r7, #8]
9000a692:	f7ff fa47 	bl	90009b24 <http_send>
    }
    return ERR_OK;
9000a696:	2300      	movs	r3, #0
9000a698:	e054      	b.n	9000a744 <http_recv+0x130>
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
9000a69a:	697b      	ldr	r3, [r7, #20]
9000a69c:	695b      	ldr	r3, [r3, #20]
9000a69e:	2b00      	cmp	r3, #0
9000a6a0:	d14c      	bne.n	9000a73c <http_recv+0x128>
      err_t parsed = http_parse_request(p, hs, pcb);
9000a6a2:	68ba      	ldr	r2, [r7, #8]
9000a6a4:	6979      	ldr	r1, [r7, #20]
9000a6a6:	6878      	ldr	r0, [r7, #4]
9000a6a8:	f7ff fc00 	bl	90009eac <http_parse_request>
9000a6ac:	4603      	mov	r3, r0
9000a6ae:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
9000a6b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
9000a6b4:	2b00      	cmp	r3, #0
9000a6b6:	d015      	beq.n	9000a6e4 <http_recv+0xd0>
9000a6b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
9000a6bc:	f113 0f05 	cmn.w	r3, #5
9000a6c0:	d010      	beq.n	9000a6e4 <http_recv+0xd0>
9000a6c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
9000a6c6:	f113 0f10 	cmn.w	r3, #16
9000a6ca:	d00b      	beq.n	9000a6e4 <http_recv+0xd0>
9000a6cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
9000a6d0:	f113 0f08 	cmn.w	r3, #8
9000a6d4:	d006      	beq.n	9000a6e4 <http_recv+0xd0>
9000a6d6:	4b1d      	ldr	r3, [pc, #116]	; (9000a74c <http_recv+0x138>)
9000a6d8:	f640 2204 	movw	r2, #2564	; 0xa04
9000a6dc:	491c      	ldr	r1, [pc, #112]	; (9000a750 <http_recv+0x13c>)
9000a6de:	481d      	ldr	r0, [pc, #116]	; (9000a754 <http_recv+0x140>)
9000a6e0:	f00b fa88 	bl	90015bf4 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
9000a6e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
9000a6e8:	f113 0f05 	cmn.w	r3, #5
9000a6ec:	d00b      	beq.n	9000a706 <http_recv+0xf2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
9000a6ee:	697b      	ldr	r3, [r7, #20]
9000a6f0:	6a1b      	ldr	r3, [r3, #32]
9000a6f2:	2b00      	cmp	r3, #0
9000a6f4:	d007      	beq.n	9000a706 <http_recv+0xf2>
          pbuf_free(hs->req);
9000a6f6:	697b      	ldr	r3, [r7, #20]
9000a6f8:	6a1b      	ldr	r3, [r3, #32]
9000a6fa:	4618      	mov	r0, r3
9000a6fc:	f001 fe5a 	bl	9000c3b4 <pbuf_free>
          hs->req = NULL;
9000a700:	697b      	ldr	r3, [r7, #20]
9000a702:	2200      	movs	r2, #0
9000a704:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
9000a706:	6878      	ldr	r0, [r7, #4]
9000a708:	f001 fe54 	bl	9000c3b4 <pbuf_free>
      if (parsed == ERR_OK) {
9000a70c:	f997 3013 	ldrsb.w	r3, [r7, #19]
9000a710:	2b00      	cmp	r3, #0
9000a712:	d109      	bne.n	9000a728 <http_recv+0x114>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
9000a714:	697b      	ldr	r3, [r7, #20]
9000a716:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
9000a71a:	2b00      	cmp	r3, #0
9000a71c:	d111      	bne.n	9000a742 <http_recv+0x12e>
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
9000a71e:	6979      	ldr	r1, [r7, #20]
9000a720:	68b8      	ldr	r0, [r7, #8]
9000a722:	f7ff f9ff 	bl	90009b24 <http_send>
9000a726:	e00c      	b.n	9000a742 <http_recv+0x12e>
        }
      } else if (parsed == ERR_ARG) {
9000a728:	f997 3013 	ldrsb.w	r3, [r7, #19]
9000a72c:	f113 0f10 	cmn.w	r3, #16
9000a730:	d107      	bne.n	9000a742 <http_recv+0x12e>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
9000a732:	6979      	ldr	r1, [r7, #20]
9000a734:	68b8      	ldr	r0, [r7, #8]
9000a736:	f7fe fd0f 	bl	90009158 <http_close_conn>
9000a73a:	e002      	b.n	9000a742 <http_recv+0x12e>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
9000a73c:	6878      	ldr	r0, [r7, #4]
9000a73e:	f001 fe39 	bl	9000c3b4 <pbuf_free>
    }
  }
  return ERR_OK;
9000a742:	2300      	movs	r3, #0
}
9000a744:	4618      	mov	r0, r3
9000a746:	3718      	adds	r7, #24
9000a748:	46bd      	mov	sp, r7
9000a74a:	bd80      	pop	{r7, pc}
9000a74c:	90017ac4 	.word	0x90017ac4
9000a750:	90017ca4 	.word	0x90017ca4
9000a754:	90017b0c 	.word	0x90017b0c

9000a758 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
9000a758:	b580      	push	{r7, lr}
9000a75a:	b086      	sub	sp, #24
9000a75c:	af00      	add	r7, sp, #0
9000a75e:	60f8      	str	r0, [r7, #12]
9000a760:	60b9      	str	r1, [r7, #8]
9000a762:	4613      	mov	r3, r2
9000a764:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
9000a766:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000a76a:	2b00      	cmp	r3, #0
9000a76c:	d102      	bne.n	9000a774 <http_accept+0x1c>
9000a76e:	68bb      	ldr	r3, [r7, #8]
9000a770:	2b00      	cmp	r3, #0
9000a772:	d102      	bne.n	9000a77a <http_accept+0x22>
    return ERR_VAL;
9000a774:	f06f 0305 	mvn.w	r3, #5
9000a778:	e025      	b.n	9000a7c6 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
9000a77a:	2101      	movs	r1, #1
9000a77c:	68b8      	ldr	r0, [r7, #8]
9000a77e:	f003 fa6b 	bl	9000dc58 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
9000a782:	f7fe fbdd 	bl	90008f40 <http_state_alloc>
9000a786:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
9000a788:	697b      	ldr	r3, [r7, #20]
9000a78a:	2b00      	cmp	r3, #0
9000a78c:	d102      	bne.n	9000a794 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
9000a78e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9000a792:	e018      	b.n	9000a7c6 <http_accept+0x6e>
  }
  hs->pcb = pcb;
9000a794:	697b      	ldr	r3, [r7, #20]
9000a796:	68ba      	ldr	r2, [r7, #8]
9000a798:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
9000a79a:	6979      	ldr	r1, [r7, #20]
9000a79c:	68b8      	ldr	r0, [r7, #8]
9000a79e:	f003 fc5b 	bl	9000e058 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
9000a7a2:	490b      	ldr	r1, [pc, #44]	; (9000a7d0 <http_accept+0x78>)
9000a7a4:	68b8      	ldr	r0, [r7, #8]
9000a7a6:	f003 fc69 	bl	9000e07c <tcp_recv>
  altcp_err(pcb, http_err);
9000a7aa:	490a      	ldr	r1, [pc, #40]	; (9000a7d4 <http_accept+0x7c>)
9000a7ac:	68b8      	ldr	r0, [r7, #8]
9000a7ae:	f003 fca9 	bl	9000e104 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
9000a7b2:	2204      	movs	r2, #4
9000a7b4:	4908      	ldr	r1, [pc, #32]	; (9000a7d8 <http_accept+0x80>)
9000a7b6:	68b8      	ldr	r0, [r7, #8]
9000a7b8:	f003 fcde 	bl	9000e178 <tcp_poll>
  altcp_sent(pcb, http_sent);
9000a7bc:	4907      	ldr	r1, [pc, #28]	; (9000a7dc <http_accept+0x84>)
9000a7be:	68b8      	ldr	r0, [r7, #8]
9000a7c0:	f003 fc7e 	bl	9000e0c0 <tcp_sent>

  return ERR_OK;
9000a7c4:	2300      	movs	r3, #0
}
9000a7c6:	4618      	mov	r0, r3
9000a7c8:	3718      	adds	r7, #24
9000a7ca:	46bd      	mov	sp, r7
9000a7cc:	bd80      	pop	{r7, pc}
9000a7ce:	bf00      	nop
9000a7d0:	9000a615 	.word	0x9000a615
9000a7d4:	9000a549 	.word	0x9000a549
9000a7d8:	9000a5a3 	.word	0x9000a5a3
9000a7dc:	9000a56d 	.word	0x9000a56d

9000a7e0 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
9000a7e0:	b580      	push	{r7, lr}
9000a7e2:	b084      	sub	sp, #16
9000a7e4:	af00      	add	r7, sp, #0
9000a7e6:	6078      	str	r0, [r7, #4]
9000a7e8:	460b      	mov	r3, r1
9000a7ea:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
9000a7ec:	687b      	ldr	r3, [r7, #4]
9000a7ee:	2b00      	cmp	r3, #0
9000a7f0:	d029      	beq.n	9000a846 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
9000a7f2:	2101      	movs	r1, #1
9000a7f4:	6878      	ldr	r0, [r7, #4]
9000a7f6:	f003 fa2f 	bl	9000dc58 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
9000a7fa:	887b      	ldrh	r3, [r7, #2]
9000a7fc:	461a      	mov	r2, r3
9000a7fe:	4914      	ldr	r1, [pc, #80]	; (9000a850 <httpd_init_pcb+0x70>)
9000a800:	6878      	ldr	r0, [r7, #4]
9000a802:	f002 fb77 	bl	9000cef4 <tcp_bind>
9000a806:	4603      	mov	r3, r0
9000a808:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
9000a80a:	f997 300f 	ldrsb.w	r3, [r7, #15]
9000a80e:	2b00      	cmp	r3, #0
9000a810:	d006      	beq.n	9000a820 <httpd_init_pcb+0x40>
9000a812:	4b10      	ldr	r3, [pc, #64]	; (9000a854 <httpd_init_pcb+0x74>)
9000a814:	f640 2257 	movw	r2, #2647	; 0xa57
9000a818:	490f      	ldr	r1, [pc, #60]	; (9000a858 <httpd_init_pcb+0x78>)
9000a81a:	4810      	ldr	r0, [pc, #64]	; (9000a85c <httpd_init_pcb+0x7c>)
9000a81c:	f00b f9ea 	bl	90015bf4 <iprintf>
    pcb = altcp_listen(pcb);
9000a820:	21ff      	movs	r1, #255	; 0xff
9000a822:	6878      	ldr	r0, [r7, #4]
9000a824:	f002 fc1e 	bl	9000d064 <tcp_listen_with_backlog>
9000a828:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
9000a82a:	687b      	ldr	r3, [r7, #4]
9000a82c:	2b00      	cmp	r3, #0
9000a82e:	d106      	bne.n	9000a83e <httpd_init_pcb+0x5e>
9000a830:	4b08      	ldr	r3, [pc, #32]	; (9000a854 <httpd_init_pcb+0x74>)
9000a832:	f640 2259 	movw	r2, #2649	; 0xa59
9000a836:	490a      	ldr	r1, [pc, #40]	; (9000a860 <httpd_init_pcb+0x80>)
9000a838:	4808      	ldr	r0, [pc, #32]	; (9000a85c <httpd_init_pcb+0x7c>)
9000a83a:	f00b f9db 	bl	90015bf4 <iprintf>
    altcp_accept(pcb, http_accept);
9000a83e:	4909      	ldr	r1, [pc, #36]	; (9000a864 <httpd_init_pcb+0x84>)
9000a840:	6878      	ldr	r0, [r7, #4]
9000a842:	f003 fc81 	bl	9000e148 <tcp_accept>
  }
}
9000a846:	bf00      	nop
9000a848:	3710      	adds	r7, #16
9000a84a:	46bd      	mov	sp, r7
9000a84c:	bd80      	pop	{r7, pc}
9000a84e:	bf00      	nop
9000a850:	90021134 	.word	0x90021134
9000a854:	90017ac4 	.word	0x90017ac4
9000a858:	90017cd0 	.word	0x90017cd0
9000a85c:	90017b0c 	.word	0x90017b0c
9000a860:	90017cec 	.word	0x90017cec
9000a864:	9000a759 	.word	0x9000a759

9000a868 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
9000a868:	b580      	push	{r7, lr}
9000a86a:	b082      	sub	sp, #8
9000a86c:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
9000a86e:	202e      	movs	r0, #46	; 0x2e
9000a870:	f003 fbe4 	bl	9000e03c <tcp_new_ip_type>
9000a874:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
9000a876:	687b      	ldr	r3, [r7, #4]
9000a878:	2b00      	cmp	r3, #0
9000a87a:	d106      	bne.n	9000a88a <httpd_init+0x22>
9000a87c:	4b07      	ldr	r3, [pc, #28]	; (9000a89c <httpd_init+0x34>)
9000a87e:	f640 2272 	movw	r2, #2674	; 0xa72
9000a882:	4907      	ldr	r1, [pc, #28]	; (9000a8a0 <httpd_init+0x38>)
9000a884:	4807      	ldr	r0, [pc, #28]	; (9000a8a4 <httpd_init+0x3c>)
9000a886:	f00b f9b5 	bl	90015bf4 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
9000a88a:	2150      	movs	r1, #80	; 0x50
9000a88c:	6878      	ldr	r0, [r7, #4]
9000a88e:	f7ff ffa7 	bl	9000a7e0 <httpd_init_pcb>
}
9000a892:	bf00      	nop
9000a894:	3708      	adds	r7, #8
9000a896:	46bd      	mov	sp, r7
9000a898:	bd80      	pop	{r7, pc}
9000a89a:	bf00      	nop
9000a89c:	90017ac4 	.word	0x90017ac4
9000a8a0:	90017d0c 	.word	0x90017d0c
9000a8a4:	90017b0c 	.word	0x90017b0c

9000a8a8 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
9000a8a8:	b580      	push	{r7, lr}
9000a8aa:	b084      	sub	sp, #16
9000a8ac:	af00      	add	r7, sp, #0
9000a8ae:	60f8      	str	r0, [r7, #12]
9000a8b0:	60b9      	str	r1, [r7, #8]
9000a8b2:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
9000a8b4:	68fb      	ldr	r3, [r7, #12]
9000a8b6:	2b00      	cmp	r3, #0
9000a8b8:	d106      	bne.n	9000a8c8 <http_set_ssi_handler+0x20>
9000a8ba:	4b14      	ldr	r3, [pc, #80]	; (9000a90c <http_set_ssi_handler+0x64>)
9000a8bc:	f640 2297 	movw	r2, #2711	; 0xa97
9000a8c0:	4913      	ldr	r1, [pc, #76]	; (9000a910 <http_set_ssi_handler+0x68>)
9000a8c2:	4814      	ldr	r0, [pc, #80]	; (9000a914 <http_set_ssi_handler+0x6c>)
9000a8c4:	f00b f996 	bl	90015bf4 <iprintf>
  httpd_ssi_handler = ssi_handler;
9000a8c8:	4a13      	ldr	r2, [pc, #76]	; (9000a918 <http_set_ssi_handler+0x70>)
9000a8ca:	68fb      	ldr	r3, [r7, #12]
9000a8cc:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
9000a8ce:	68bb      	ldr	r3, [r7, #8]
9000a8d0:	2b00      	cmp	r3, #0
9000a8d2:	d106      	bne.n	9000a8e2 <http_set_ssi_handler+0x3a>
9000a8d4:	4b0d      	ldr	r3, [pc, #52]	; (9000a90c <http_set_ssi_handler+0x64>)
9000a8d6:	f640 229e 	movw	r2, #2718	; 0xa9e
9000a8da:	4910      	ldr	r1, [pc, #64]	; (9000a91c <http_set_ssi_handler+0x74>)
9000a8dc:	480d      	ldr	r0, [pc, #52]	; (9000a914 <http_set_ssi_handler+0x6c>)
9000a8de:	f00b f989 	bl	90015bf4 <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
9000a8e2:	687b      	ldr	r3, [r7, #4]
9000a8e4:	2b00      	cmp	r3, #0
9000a8e6:	dc06      	bgt.n	9000a8f6 <http_set_ssi_handler+0x4e>
9000a8e8:	4b08      	ldr	r3, [pc, #32]	; (9000a90c <http_set_ssi_handler+0x64>)
9000a8ea:	f640 229f 	movw	r2, #2719	; 0xa9f
9000a8ee:	490c      	ldr	r1, [pc, #48]	; (9000a920 <http_set_ssi_handler+0x78>)
9000a8f0:	4808      	ldr	r0, [pc, #32]	; (9000a914 <http_set_ssi_handler+0x6c>)
9000a8f2:	f00b f97f 	bl	90015bf4 <iprintf>

  httpd_tags = tags;
9000a8f6:	4a0b      	ldr	r2, [pc, #44]	; (9000a924 <http_set_ssi_handler+0x7c>)
9000a8f8:	68bb      	ldr	r3, [r7, #8]
9000a8fa:	6013      	str	r3, [r2, #0]
  httpd_num_tags = num_tags;
9000a8fc:	4a0a      	ldr	r2, [pc, #40]	; (9000a928 <http_set_ssi_handler+0x80>)
9000a8fe:	687b      	ldr	r3, [r7, #4]
9000a900:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
9000a902:	bf00      	nop
9000a904:	3710      	adds	r7, #16
9000a906:	46bd      	mov	sp, r7
9000a908:	bd80      	pop	{r7, pc}
9000a90a:	bf00      	nop
9000a90c:	90017ac4 	.word	0x90017ac4
9000a910:	90017d28 	.word	0x90017d28
9000a914:	90017b0c 	.word	0x90017b0c
9000a918:	2401c1b0 	.word	0x2401c1b0
9000a91c:	90017d40 	.word	0x90017d40
9000a920:	90017d50 	.word	0x90017d50
9000a924:	2401c1b8 	.word	0x2401c1b8
9000a928:	2401c1b4 	.word	0x2401c1b4

9000a92c <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
9000a92c:	b580      	push	{r7, lr}
9000a92e:	b082      	sub	sp, #8
9000a930:	af00      	add	r7, sp, #0
9000a932:	6078      	str	r0, [r7, #4]
9000a934:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
9000a936:	687b      	ldr	r3, [r7, #4]
9000a938:	2b00      	cmp	r3, #0
9000a93a:	d106      	bne.n	9000a94a <http_set_cgi_handlers+0x1e>
9000a93c:	4b0d      	ldr	r3, [pc, #52]	; (9000a974 <http_set_cgi_handlers+0x48>)
9000a93e:	f640 22b2 	movw	r2, #2738	; 0xab2
9000a942:	490d      	ldr	r1, [pc, #52]	; (9000a978 <http_set_cgi_handlers+0x4c>)
9000a944:	480d      	ldr	r0, [pc, #52]	; (9000a97c <http_set_cgi_handlers+0x50>)
9000a946:	f00b f955 	bl	90015bf4 <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
9000a94a:	683b      	ldr	r3, [r7, #0]
9000a94c:	2b00      	cmp	r3, #0
9000a94e:	dc06      	bgt.n	9000a95e <http_set_cgi_handlers+0x32>
9000a950:	4b08      	ldr	r3, [pc, #32]	; (9000a974 <http_set_cgi_handlers+0x48>)
9000a952:	f640 22b3 	movw	r2, #2739	; 0xab3
9000a956:	490a      	ldr	r1, [pc, #40]	; (9000a980 <http_set_cgi_handlers+0x54>)
9000a958:	4808      	ldr	r0, [pc, #32]	; (9000a97c <http_set_cgi_handlers+0x50>)
9000a95a:	f00b f94b 	bl	90015bf4 <iprintf>

  httpd_cgis = cgis;
9000a95e:	4a09      	ldr	r2, [pc, #36]	; (9000a984 <http_set_cgi_handlers+0x58>)
9000a960:	687b      	ldr	r3, [r7, #4]
9000a962:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
9000a964:	4a08      	ldr	r2, [pc, #32]	; (9000a988 <http_set_cgi_handlers+0x5c>)
9000a966:	683b      	ldr	r3, [r7, #0]
9000a968:	6013      	str	r3, [r2, #0]
}
9000a96a:	bf00      	nop
9000a96c:	3708      	adds	r7, #8
9000a96e:	46bd      	mov	sp, r7
9000a970:	bd80      	pop	{r7, pc}
9000a972:	bf00      	nop
9000a974:	90017ac4 	.word	0x90017ac4
9000a978:	90017d68 	.word	0x90017d68
9000a97c:	90017b0c 	.word	0x90017b0c
9000a980:	90017d78 	.word	0x90017d78
9000a984:	2401c1bc 	.word	0x2401c1bc
9000a988:	2401c1c0 	.word	0x2401c1c0

9000a98c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
9000a98c:	b480      	push	{r7}
9000a98e:	b083      	sub	sp, #12
9000a990:	af00      	add	r7, sp, #0
9000a992:	4603      	mov	r3, r0
9000a994:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
9000a996:	88fb      	ldrh	r3, [r7, #6]
9000a998:	021b      	lsls	r3, r3, #8
9000a99a:	b21a      	sxth	r2, r3
9000a99c:	88fb      	ldrh	r3, [r7, #6]
9000a99e:	0a1b      	lsrs	r3, r3, #8
9000a9a0:	b29b      	uxth	r3, r3
9000a9a2:	b21b      	sxth	r3, r3
9000a9a4:	4313      	orrs	r3, r2
9000a9a6:	b21b      	sxth	r3, r3
9000a9a8:	b29b      	uxth	r3, r3
}
9000a9aa:	4618      	mov	r0, r3
9000a9ac:	370c      	adds	r7, #12
9000a9ae:	46bd      	mov	sp, r7
9000a9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a9b4:	4770      	bx	lr

9000a9b6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
9000a9b6:	b480      	push	{r7}
9000a9b8:	b083      	sub	sp, #12
9000a9ba:	af00      	add	r7, sp, #0
9000a9bc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
9000a9be:	687b      	ldr	r3, [r7, #4]
9000a9c0:	061a      	lsls	r2, r3, #24
9000a9c2:	687b      	ldr	r3, [r7, #4]
9000a9c4:	021b      	lsls	r3, r3, #8
9000a9c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
9000a9ca:	431a      	orrs	r2, r3
9000a9cc:	687b      	ldr	r3, [r7, #4]
9000a9ce:	0a1b      	lsrs	r3, r3, #8
9000a9d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9000a9d4:	431a      	orrs	r2, r3
9000a9d6:	687b      	ldr	r3, [r7, #4]
9000a9d8:	0e1b      	lsrs	r3, r3, #24
9000a9da:	4313      	orrs	r3, r2
}
9000a9dc:	4618      	mov	r0, r3
9000a9de:	370c      	adds	r7, #12
9000a9e0:	46bd      	mov	sp, r7
9000a9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
9000a9e6:	4770      	bx	lr

9000a9e8 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
9000a9e8:	b580      	push	{r7, lr}
9000a9ea:	b086      	sub	sp, #24
9000a9ec:	af00      	add	r7, sp, #0
9000a9ee:	60f8      	str	r0, [r7, #12]
9000a9f0:	60b9      	str	r1, [r7, #8]
9000a9f2:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
9000a9f4:	68b8      	ldr	r0, [r7, #8]
9000a9f6:	f7f5 fc7d 	bl	900002f4 <strlen>
9000a9fa:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
9000a9fc:	693b      	ldr	r3, [r7, #16]
9000a9fe:	2b00      	cmp	r3, #0
9000aa00:	d101      	bne.n	9000aa06 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
9000aa02:	68fb      	ldr	r3, [r7, #12]
9000aa04:	e022      	b.n	9000aa4c <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
9000aa06:	68fb      	ldr	r3, [r7, #12]
9000aa08:	617b      	str	r3, [r7, #20]
9000aa0a:	e012      	b.n	9000aa32 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
9000aa0c:	697b      	ldr	r3, [r7, #20]
9000aa0e:	781a      	ldrb	r2, [r3, #0]
9000aa10:	68bb      	ldr	r3, [r7, #8]
9000aa12:	781b      	ldrb	r3, [r3, #0]
9000aa14:	429a      	cmp	r2, r3
9000aa16:	d109      	bne.n	9000aa2c <lwip_strnstr+0x44>
9000aa18:	693a      	ldr	r2, [r7, #16]
9000aa1a:	68b9      	ldr	r1, [r7, #8]
9000aa1c:	6978      	ldr	r0, [r7, #20]
9000aa1e:	f00b faea 	bl	90015ff6 <strncmp>
9000aa22:	4603      	mov	r3, r0
9000aa24:	2b00      	cmp	r3, #0
9000aa26:	d101      	bne.n	9000aa2c <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
9000aa28:	697b      	ldr	r3, [r7, #20]
9000aa2a:	e00f      	b.n	9000aa4c <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
9000aa2c:	697b      	ldr	r3, [r7, #20]
9000aa2e:	3301      	adds	r3, #1
9000aa30:	617b      	str	r3, [r7, #20]
9000aa32:	697b      	ldr	r3, [r7, #20]
9000aa34:	781b      	ldrb	r3, [r3, #0]
9000aa36:	2b00      	cmp	r3, #0
9000aa38:	d007      	beq.n	9000aa4a <lwip_strnstr+0x62>
9000aa3a:	697a      	ldr	r2, [r7, #20]
9000aa3c:	693b      	ldr	r3, [r7, #16]
9000aa3e:	441a      	add	r2, r3
9000aa40:	68f9      	ldr	r1, [r7, #12]
9000aa42:	687b      	ldr	r3, [r7, #4]
9000aa44:	440b      	add	r3, r1
9000aa46:	429a      	cmp	r2, r3
9000aa48:	d9e0      	bls.n	9000aa0c <lwip_strnstr+0x24>
    }
  }
  return NULL;
9000aa4a:	2300      	movs	r3, #0
}
9000aa4c:	4618      	mov	r0, r3
9000aa4e:	3718      	adds	r7, #24
9000aa50:	46bd      	mov	sp, r7
9000aa52:	bd80      	pop	{r7, pc}

9000aa54 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
9000aa54:	b480      	push	{r7}
9000aa56:	b085      	sub	sp, #20
9000aa58:	af00      	add	r7, sp, #0
9000aa5a:	6078      	str	r0, [r7, #4]
9000aa5c:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
9000aa5e:	687b      	ldr	r3, [r7, #4]
9000aa60:	1c5a      	adds	r2, r3, #1
9000aa62:	607a      	str	r2, [r7, #4]
9000aa64:	781b      	ldrb	r3, [r3, #0]
9000aa66:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
9000aa68:	683b      	ldr	r3, [r7, #0]
9000aa6a:	1c5a      	adds	r2, r3, #1
9000aa6c:	603a      	str	r2, [r7, #0]
9000aa6e:	781b      	ldrb	r3, [r3, #0]
9000aa70:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
9000aa72:	7bfa      	ldrb	r2, [r7, #15]
9000aa74:	7bbb      	ldrb	r3, [r7, #14]
9000aa76:	429a      	cmp	r2, r3
9000aa78:	d016      	beq.n	9000aaa8 <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
9000aa7a:	7bfb      	ldrb	r3, [r7, #15]
9000aa7c:	f043 0320 	orr.w	r3, r3, #32
9000aa80:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
9000aa82:	7b7b      	ldrb	r3, [r7, #13]
9000aa84:	2b60      	cmp	r3, #96	; 0x60
9000aa86:	d90c      	bls.n	9000aaa2 <lwip_stricmp+0x4e>
9000aa88:	7b7b      	ldrb	r3, [r7, #13]
9000aa8a:	2b7a      	cmp	r3, #122	; 0x7a
9000aa8c:	d809      	bhi.n	9000aaa2 <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
9000aa8e:	7bbb      	ldrb	r3, [r7, #14]
9000aa90:	f043 0320 	orr.w	r3, r3, #32
9000aa94:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
9000aa96:	7b7a      	ldrb	r2, [r7, #13]
9000aa98:	7b3b      	ldrb	r3, [r7, #12]
9000aa9a:	429a      	cmp	r2, r3
9000aa9c:	d003      	beq.n	9000aaa6 <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
9000aa9e:	2301      	movs	r3, #1
9000aaa0:	e006      	b.n	9000aab0 <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
9000aaa2:	2301      	movs	r3, #1
9000aaa4:	e004      	b.n	9000aab0 <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
9000aaa6:	bf00      	nop
      }
    }
  } while (c1 != 0);
9000aaa8:	7bfb      	ldrb	r3, [r7, #15]
9000aaaa:	2b00      	cmp	r3, #0
9000aaac:	d1d7      	bne.n	9000aa5e <lwip_stricmp+0xa>
  return 0;
9000aaae:	2300      	movs	r3, #0
}
9000aab0:	4618      	mov	r0, r3
9000aab2:	3714      	adds	r7, #20
9000aab4:	46bd      	mov	sp, r7
9000aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
9000aaba:	4770      	bx	lr

9000aabc <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
9000aabc:	b480      	push	{r7}
9000aabe:	b089      	sub	sp, #36	; 0x24
9000aac0:	af00      	add	r7, sp, #0
9000aac2:	6078      	str	r0, [r7, #4]
9000aac4:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
9000aac6:	687b      	ldr	r3, [r7, #4]
9000aac8:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
9000aaca:	2300      	movs	r3, #0
9000aacc:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
9000aace:	2300      	movs	r3, #0
9000aad0:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
9000aad2:	69fb      	ldr	r3, [r7, #28]
9000aad4:	f003 0301 	and.w	r3, r3, #1
9000aad8:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
9000aada:	693b      	ldr	r3, [r7, #16]
9000aadc:	2b00      	cmp	r3, #0
9000aade:	d00d      	beq.n	9000aafc <lwip_standard_chksum+0x40>
9000aae0:	683b      	ldr	r3, [r7, #0]
9000aae2:	2b00      	cmp	r3, #0
9000aae4:	dd0a      	ble.n	9000aafc <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
9000aae6:	69fa      	ldr	r2, [r7, #28]
9000aae8:	1c53      	adds	r3, r2, #1
9000aaea:	61fb      	str	r3, [r7, #28]
9000aaec:	f107 030e 	add.w	r3, r7, #14
9000aaf0:	3301      	adds	r3, #1
9000aaf2:	7812      	ldrb	r2, [r2, #0]
9000aaf4:	701a      	strb	r2, [r3, #0]
    len--;
9000aaf6:	683b      	ldr	r3, [r7, #0]
9000aaf8:	3b01      	subs	r3, #1
9000aafa:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
9000aafc:	69fb      	ldr	r3, [r7, #28]
9000aafe:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
9000ab00:	e00a      	b.n	9000ab18 <lwip_standard_chksum+0x5c>
    sum += *ps++;
9000ab02:	69bb      	ldr	r3, [r7, #24]
9000ab04:	1c9a      	adds	r2, r3, #2
9000ab06:	61ba      	str	r2, [r7, #24]
9000ab08:	881b      	ldrh	r3, [r3, #0]
9000ab0a:	461a      	mov	r2, r3
9000ab0c:	697b      	ldr	r3, [r7, #20]
9000ab0e:	4413      	add	r3, r2
9000ab10:	617b      	str	r3, [r7, #20]
    len -= 2;
9000ab12:	683b      	ldr	r3, [r7, #0]
9000ab14:	3b02      	subs	r3, #2
9000ab16:	603b      	str	r3, [r7, #0]
  while (len > 1) {
9000ab18:	683b      	ldr	r3, [r7, #0]
9000ab1a:	2b01      	cmp	r3, #1
9000ab1c:	dcf1      	bgt.n	9000ab02 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
9000ab1e:	683b      	ldr	r3, [r7, #0]
9000ab20:	2b00      	cmp	r3, #0
9000ab22:	dd04      	ble.n	9000ab2e <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
9000ab24:	f107 030e 	add.w	r3, r7, #14
9000ab28:	69ba      	ldr	r2, [r7, #24]
9000ab2a:	7812      	ldrb	r2, [r2, #0]
9000ab2c:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
9000ab2e:	89fb      	ldrh	r3, [r7, #14]
9000ab30:	461a      	mov	r2, r3
9000ab32:	697b      	ldr	r3, [r7, #20]
9000ab34:	4413      	add	r3, r2
9000ab36:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
9000ab38:	697b      	ldr	r3, [r7, #20]
9000ab3a:	0c1a      	lsrs	r2, r3, #16
9000ab3c:	697b      	ldr	r3, [r7, #20]
9000ab3e:	b29b      	uxth	r3, r3
9000ab40:	4413      	add	r3, r2
9000ab42:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
9000ab44:	697b      	ldr	r3, [r7, #20]
9000ab46:	0c1a      	lsrs	r2, r3, #16
9000ab48:	697b      	ldr	r3, [r7, #20]
9000ab4a:	b29b      	uxth	r3, r3
9000ab4c:	4413      	add	r3, r2
9000ab4e:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
9000ab50:	693b      	ldr	r3, [r7, #16]
9000ab52:	2b00      	cmp	r3, #0
9000ab54:	d007      	beq.n	9000ab66 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
9000ab56:	697b      	ldr	r3, [r7, #20]
9000ab58:	021b      	lsls	r3, r3, #8
9000ab5a:	b29a      	uxth	r2, r3
9000ab5c:	697b      	ldr	r3, [r7, #20]
9000ab5e:	0a1b      	lsrs	r3, r3, #8
9000ab60:	b2db      	uxtb	r3, r3
9000ab62:	4313      	orrs	r3, r2
9000ab64:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
9000ab66:	697b      	ldr	r3, [r7, #20]
9000ab68:	b29b      	uxth	r3, r3
}
9000ab6a:	4618      	mov	r0, r3
9000ab6c:	3724      	adds	r7, #36	; 0x24
9000ab6e:	46bd      	mov	sp, r7
9000ab70:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ab74:	4770      	bx	lr

9000ab76 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
9000ab76:	b580      	push	{r7, lr}
9000ab78:	b082      	sub	sp, #8
9000ab7a:	af00      	add	r7, sp, #0
9000ab7c:	6078      	str	r0, [r7, #4]
9000ab7e:	460b      	mov	r3, r1
9000ab80:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
9000ab82:	887b      	ldrh	r3, [r7, #2]
9000ab84:	4619      	mov	r1, r3
9000ab86:	6878      	ldr	r0, [r7, #4]
9000ab88:	f7ff ff98 	bl	9000aabc <lwip_standard_chksum>
9000ab8c:	4603      	mov	r3, r0
9000ab8e:	43db      	mvns	r3, r3
9000ab90:	b29b      	uxth	r3, r3
}
9000ab92:	4618      	mov	r0, r3
9000ab94:	3708      	adds	r7, #8
9000ab96:	46bd      	mov	sp, r7
9000ab98:	bd80      	pop	{r7, pc}

9000ab9a <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
9000ab9a:	b580      	push	{r7, lr}
9000ab9c:	b086      	sub	sp, #24
9000ab9e:	af00      	add	r7, sp, #0
9000aba0:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
9000aba2:	2300      	movs	r3, #0
9000aba4:	60fb      	str	r3, [r7, #12]

  acc = 0;
9000aba6:	2300      	movs	r3, #0
9000aba8:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
9000abaa:	687b      	ldr	r3, [r7, #4]
9000abac:	613b      	str	r3, [r7, #16]
9000abae:	e02b      	b.n	9000ac08 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
9000abb0:	693b      	ldr	r3, [r7, #16]
9000abb2:	685a      	ldr	r2, [r3, #4]
9000abb4:	693b      	ldr	r3, [r7, #16]
9000abb6:	895b      	ldrh	r3, [r3, #10]
9000abb8:	4619      	mov	r1, r3
9000abba:	4610      	mov	r0, r2
9000abbc:	f7ff ff7e 	bl	9000aabc <lwip_standard_chksum>
9000abc0:	4603      	mov	r3, r0
9000abc2:	461a      	mov	r2, r3
9000abc4:	697b      	ldr	r3, [r7, #20]
9000abc6:	4413      	add	r3, r2
9000abc8:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
9000abca:	697b      	ldr	r3, [r7, #20]
9000abcc:	0c1a      	lsrs	r2, r3, #16
9000abce:	697b      	ldr	r3, [r7, #20]
9000abd0:	b29b      	uxth	r3, r3
9000abd2:	4413      	add	r3, r2
9000abd4:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
9000abd6:	693b      	ldr	r3, [r7, #16]
9000abd8:	895b      	ldrh	r3, [r3, #10]
9000abda:	f003 0301 	and.w	r3, r3, #1
9000abde:	b29b      	uxth	r3, r3
9000abe0:	2b00      	cmp	r3, #0
9000abe2:	d00e      	beq.n	9000ac02 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
9000abe4:	68fb      	ldr	r3, [r7, #12]
9000abe6:	2b00      	cmp	r3, #0
9000abe8:	bf0c      	ite	eq
9000abea:	2301      	moveq	r3, #1
9000abec:	2300      	movne	r3, #0
9000abee:	b2db      	uxtb	r3, r3
9000abf0:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
9000abf2:	697b      	ldr	r3, [r7, #20]
9000abf4:	021b      	lsls	r3, r3, #8
9000abf6:	b29a      	uxth	r2, r3
9000abf8:	697b      	ldr	r3, [r7, #20]
9000abfa:	0a1b      	lsrs	r3, r3, #8
9000abfc:	b2db      	uxtb	r3, r3
9000abfe:	4313      	orrs	r3, r2
9000ac00:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
9000ac02:	693b      	ldr	r3, [r7, #16]
9000ac04:	681b      	ldr	r3, [r3, #0]
9000ac06:	613b      	str	r3, [r7, #16]
9000ac08:	693b      	ldr	r3, [r7, #16]
9000ac0a:	2b00      	cmp	r3, #0
9000ac0c:	d1d0      	bne.n	9000abb0 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
9000ac0e:	68fb      	ldr	r3, [r7, #12]
9000ac10:	2b00      	cmp	r3, #0
9000ac12:	d007      	beq.n	9000ac24 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
9000ac14:	697b      	ldr	r3, [r7, #20]
9000ac16:	021b      	lsls	r3, r3, #8
9000ac18:	b29a      	uxth	r2, r3
9000ac1a:	697b      	ldr	r3, [r7, #20]
9000ac1c:	0a1b      	lsrs	r3, r3, #8
9000ac1e:	b2db      	uxtb	r3, r3
9000ac20:	4313      	orrs	r3, r2
9000ac22:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
9000ac24:	697b      	ldr	r3, [r7, #20]
9000ac26:	b29b      	uxth	r3, r3
9000ac28:	43db      	mvns	r3, r3
9000ac2a:	b29b      	uxth	r3, r3
}
9000ac2c:	4618      	mov	r0, r3
9000ac2e:	3718      	adds	r7, #24
9000ac30:	46bd      	mov	sp, r7
9000ac32:	bd80      	pop	{r7, pc}

9000ac34 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
9000ac34:	b580      	push	{r7, lr}
9000ac36:	b082      	sub	sp, #8
9000ac38:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
9000ac3a:	2300      	movs	r3, #0
9000ac3c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
9000ac3e:	f00a fd59 	bl	900156f4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
9000ac42:	f000 f8d5 	bl	9000adf0 <mem_init>
  memp_init();
9000ac46:	f000 fc2d 	bl	9000b4a4 <memp_init>
  pbuf_init();
  netif_init();
9000ac4a:	f000 fd39 	bl	9000b6c0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
9000ac4e:	f008 f81f 	bl	90012c90 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
9000ac52:	f001 fe49 	bl	9000c8e8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
9000ac56:	f007 ff61 	bl	90012b1c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
9000ac5a:	bf00      	nop
9000ac5c:	3708      	adds	r7, #8
9000ac5e:	46bd      	mov	sp, r7
9000ac60:	bd80      	pop	{r7, pc}
	...

9000ac64 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
9000ac64:	b480      	push	{r7}
9000ac66:	b083      	sub	sp, #12
9000ac68:	af00      	add	r7, sp, #0
9000ac6a:	4603      	mov	r3, r0
9000ac6c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
9000ac6e:	4b05      	ldr	r3, [pc, #20]	; (9000ac84 <ptr_to_mem+0x20>)
9000ac70:	681a      	ldr	r2, [r3, #0]
9000ac72:	88fb      	ldrh	r3, [r7, #6]
9000ac74:	4413      	add	r3, r2
}
9000ac76:	4618      	mov	r0, r3
9000ac78:	370c      	adds	r7, #12
9000ac7a:	46bd      	mov	sp, r7
9000ac7c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ac80:	4770      	bx	lr
9000ac82:	bf00      	nop
9000ac84:	2401c1e0 	.word	0x2401c1e0

9000ac88 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
9000ac88:	b480      	push	{r7}
9000ac8a:	b083      	sub	sp, #12
9000ac8c:	af00      	add	r7, sp, #0
9000ac8e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
9000ac90:	4b05      	ldr	r3, [pc, #20]	; (9000aca8 <mem_to_ptr+0x20>)
9000ac92:	681b      	ldr	r3, [r3, #0]
9000ac94:	687a      	ldr	r2, [r7, #4]
9000ac96:	1ad3      	subs	r3, r2, r3
9000ac98:	b29b      	uxth	r3, r3
}
9000ac9a:	4618      	mov	r0, r3
9000ac9c:	370c      	adds	r7, #12
9000ac9e:	46bd      	mov	sp, r7
9000aca0:	f85d 7b04 	ldr.w	r7, [sp], #4
9000aca4:	4770      	bx	lr
9000aca6:	bf00      	nop
9000aca8:	2401c1e0 	.word	0x2401c1e0

9000acac <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
9000acac:	b590      	push	{r4, r7, lr}
9000acae:	b085      	sub	sp, #20
9000acb0:	af00      	add	r7, sp, #0
9000acb2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
9000acb4:	4b45      	ldr	r3, [pc, #276]	; (9000adcc <plug_holes+0x120>)
9000acb6:	681b      	ldr	r3, [r3, #0]
9000acb8:	687a      	ldr	r2, [r7, #4]
9000acba:	429a      	cmp	r2, r3
9000acbc:	d206      	bcs.n	9000accc <plug_holes+0x20>
9000acbe:	4b44      	ldr	r3, [pc, #272]	; (9000add0 <plug_holes+0x124>)
9000acc0:	f240 12df 	movw	r2, #479	; 0x1df
9000acc4:	4943      	ldr	r1, [pc, #268]	; (9000add4 <plug_holes+0x128>)
9000acc6:	4844      	ldr	r0, [pc, #272]	; (9000add8 <plug_holes+0x12c>)
9000acc8:	f00a ff94 	bl	90015bf4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
9000accc:	4b43      	ldr	r3, [pc, #268]	; (9000addc <plug_holes+0x130>)
9000acce:	681b      	ldr	r3, [r3, #0]
9000acd0:	687a      	ldr	r2, [r7, #4]
9000acd2:	429a      	cmp	r2, r3
9000acd4:	d306      	bcc.n	9000ace4 <plug_holes+0x38>
9000acd6:	4b3e      	ldr	r3, [pc, #248]	; (9000add0 <plug_holes+0x124>)
9000acd8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
9000acdc:	4940      	ldr	r1, [pc, #256]	; (9000ade0 <plug_holes+0x134>)
9000acde:	483e      	ldr	r0, [pc, #248]	; (9000add8 <plug_holes+0x12c>)
9000ace0:	f00a ff88 	bl	90015bf4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
9000ace4:	687b      	ldr	r3, [r7, #4]
9000ace6:	791b      	ldrb	r3, [r3, #4]
9000ace8:	2b00      	cmp	r3, #0
9000acea:	d006      	beq.n	9000acfa <plug_holes+0x4e>
9000acec:	4b38      	ldr	r3, [pc, #224]	; (9000add0 <plug_holes+0x124>)
9000acee:	f240 12e1 	movw	r2, #481	; 0x1e1
9000acf2:	493c      	ldr	r1, [pc, #240]	; (9000ade4 <plug_holes+0x138>)
9000acf4:	4838      	ldr	r0, [pc, #224]	; (9000add8 <plug_holes+0x12c>)
9000acf6:	f00a ff7d 	bl	90015bf4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
9000acfa:	687b      	ldr	r3, [r7, #4]
9000acfc:	881b      	ldrh	r3, [r3, #0]
9000acfe:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
9000ad02:	d906      	bls.n	9000ad12 <plug_holes+0x66>
9000ad04:	4b32      	ldr	r3, [pc, #200]	; (9000add0 <plug_holes+0x124>)
9000ad06:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
9000ad0a:	4937      	ldr	r1, [pc, #220]	; (9000ade8 <plug_holes+0x13c>)
9000ad0c:	4832      	ldr	r0, [pc, #200]	; (9000add8 <plug_holes+0x12c>)
9000ad0e:	f00a ff71 	bl	90015bf4 <iprintf>

  nmem = ptr_to_mem(mem->next);
9000ad12:	687b      	ldr	r3, [r7, #4]
9000ad14:	881b      	ldrh	r3, [r3, #0]
9000ad16:	4618      	mov	r0, r3
9000ad18:	f7ff ffa4 	bl	9000ac64 <ptr_to_mem>
9000ad1c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
9000ad1e:	687a      	ldr	r2, [r7, #4]
9000ad20:	68fb      	ldr	r3, [r7, #12]
9000ad22:	429a      	cmp	r2, r3
9000ad24:	d024      	beq.n	9000ad70 <plug_holes+0xc4>
9000ad26:	68fb      	ldr	r3, [r7, #12]
9000ad28:	791b      	ldrb	r3, [r3, #4]
9000ad2a:	2b00      	cmp	r3, #0
9000ad2c:	d120      	bne.n	9000ad70 <plug_holes+0xc4>
9000ad2e:	4b2b      	ldr	r3, [pc, #172]	; (9000addc <plug_holes+0x130>)
9000ad30:	681b      	ldr	r3, [r3, #0]
9000ad32:	68fa      	ldr	r2, [r7, #12]
9000ad34:	429a      	cmp	r2, r3
9000ad36:	d01b      	beq.n	9000ad70 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
9000ad38:	4b2c      	ldr	r3, [pc, #176]	; (9000adec <plug_holes+0x140>)
9000ad3a:	681b      	ldr	r3, [r3, #0]
9000ad3c:	68fa      	ldr	r2, [r7, #12]
9000ad3e:	429a      	cmp	r2, r3
9000ad40:	d102      	bne.n	9000ad48 <plug_holes+0x9c>
      lfree = mem;
9000ad42:	4a2a      	ldr	r2, [pc, #168]	; (9000adec <plug_holes+0x140>)
9000ad44:	687b      	ldr	r3, [r7, #4]
9000ad46:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
9000ad48:	68fb      	ldr	r3, [r7, #12]
9000ad4a:	881a      	ldrh	r2, [r3, #0]
9000ad4c:	687b      	ldr	r3, [r7, #4]
9000ad4e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
9000ad50:	68fb      	ldr	r3, [r7, #12]
9000ad52:	881b      	ldrh	r3, [r3, #0]
9000ad54:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
9000ad58:	d00a      	beq.n	9000ad70 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
9000ad5a:	68fb      	ldr	r3, [r7, #12]
9000ad5c:	881b      	ldrh	r3, [r3, #0]
9000ad5e:	4618      	mov	r0, r3
9000ad60:	f7ff ff80 	bl	9000ac64 <ptr_to_mem>
9000ad64:	4604      	mov	r4, r0
9000ad66:	6878      	ldr	r0, [r7, #4]
9000ad68:	f7ff ff8e 	bl	9000ac88 <mem_to_ptr>
9000ad6c:	4603      	mov	r3, r0
9000ad6e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
9000ad70:	687b      	ldr	r3, [r7, #4]
9000ad72:	885b      	ldrh	r3, [r3, #2]
9000ad74:	4618      	mov	r0, r3
9000ad76:	f7ff ff75 	bl	9000ac64 <ptr_to_mem>
9000ad7a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
9000ad7c:	68ba      	ldr	r2, [r7, #8]
9000ad7e:	687b      	ldr	r3, [r7, #4]
9000ad80:	429a      	cmp	r2, r3
9000ad82:	d01f      	beq.n	9000adc4 <plug_holes+0x118>
9000ad84:	68bb      	ldr	r3, [r7, #8]
9000ad86:	791b      	ldrb	r3, [r3, #4]
9000ad88:	2b00      	cmp	r3, #0
9000ad8a:	d11b      	bne.n	9000adc4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
9000ad8c:	4b17      	ldr	r3, [pc, #92]	; (9000adec <plug_holes+0x140>)
9000ad8e:	681b      	ldr	r3, [r3, #0]
9000ad90:	687a      	ldr	r2, [r7, #4]
9000ad92:	429a      	cmp	r2, r3
9000ad94:	d102      	bne.n	9000ad9c <plug_holes+0xf0>
      lfree = pmem;
9000ad96:	4a15      	ldr	r2, [pc, #84]	; (9000adec <plug_holes+0x140>)
9000ad98:	68bb      	ldr	r3, [r7, #8]
9000ad9a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
9000ad9c:	687b      	ldr	r3, [r7, #4]
9000ad9e:	881a      	ldrh	r2, [r3, #0]
9000ada0:	68bb      	ldr	r3, [r7, #8]
9000ada2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
9000ada4:	687b      	ldr	r3, [r7, #4]
9000ada6:	881b      	ldrh	r3, [r3, #0]
9000ada8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
9000adac:	d00a      	beq.n	9000adc4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
9000adae:	687b      	ldr	r3, [r7, #4]
9000adb0:	881b      	ldrh	r3, [r3, #0]
9000adb2:	4618      	mov	r0, r3
9000adb4:	f7ff ff56 	bl	9000ac64 <ptr_to_mem>
9000adb8:	4604      	mov	r4, r0
9000adba:	68b8      	ldr	r0, [r7, #8]
9000adbc:	f7ff ff64 	bl	9000ac88 <mem_to_ptr>
9000adc0:	4603      	mov	r3, r0
9000adc2:	8063      	strh	r3, [r4, #2]
    }
  }
}
9000adc4:	bf00      	nop
9000adc6:	3714      	adds	r7, #20
9000adc8:	46bd      	mov	sp, r7
9000adca:	bd90      	pop	{r4, r7, pc}
9000adcc:	2401c1e0 	.word	0x2401c1e0
9000add0:	90017d94 	.word	0x90017d94
9000add4:	90017dc4 	.word	0x90017dc4
9000add8:	90017ddc 	.word	0x90017ddc
9000addc:	2401c1e4 	.word	0x2401c1e4
9000ade0:	90017e04 	.word	0x90017e04
9000ade4:	90017e20 	.word	0x90017e20
9000ade8:	90017e3c 	.word	0x90017e3c
9000adec:	2401c1ec 	.word	0x2401c1ec

9000adf0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
9000adf0:	b580      	push	{r7, lr}
9000adf2:	b082      	sub	sp, #8
9000adf4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
9000adf6:	4b1d      	ldr	r3, [pc, #116]	; (9000ae6c <mem_init+0x7c>)
9000adf8:	4a1d      	ldr	r2, [pc, #116]	; (9000ae70 <mem_init+0x80>)
9000adfa:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
9000adfc:	4b1b      	ldr	r3, [pc, #108]	; (9000ae6c <mem_init+0x7c>)
9000adfe:	681b      	ldr	r3, [r3, #0]
9000ae00:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
9000ae02:	687b      	ldr	r3, [r7, #4]
9000ae04:	f44f 5220 	mov.w	r2, #10240	; 0x2800
9000ae08:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
9000ae0a:	687b      	ldr	r3, [r7, #4]
9000ae0c:	2200      	movs	r2, #0
9000ae0e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
9000ae10:	687b      	ldr	r3, [r7, #4]
9000ae12:	2200      	movs	r2, #0
9000ae14:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
9000ae16:	f44f 5020 	mov.w	r0, #10240	; 0x2800
9000ae1a:	f7ff ff23 	bl	9000ac64 <ptr_to_mem>
9000ae1e:	4603      	mov	r3, r0
9000ae20:	4a14      	ldr	r2, [pc, #80]	; (9000ae74 <mem_init+0x84>)
9000ae22:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
9000ae24:	4b13      	ldr	r3, [pc, #76]	; (9000ae74 <mem_init+0x84>)
9000ae26:	681b      	ldr	r3, [r3, #0]
9000ae28:	2201      	movs	r2, #1
9000ae2a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
9000ae2c:	4b11      	ldr	r3, [pc, #68]	; (9000ae74 <mem_init+0x84>)
9000ae2e:	681b      	ldr	r3, [r3, #0]
9000ae30:	f44f 5220 	mov.w	r2, #10240	; 0x2800
9000ae34:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
9000ae36:	4b0f      	ldr	r3, [pc, #60]	; (9000ae74 <mem_init+0x84>)
9000ae38:	681b      	ldr	r3, [r3, #0]
9000ae3a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
9000ae3e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
9000ae40:	4b0a      	ldr	r3, [pc, #40]	; (9000ae6c <mem_init+0x7c>)
9000ae42:	681b      	ldr	r3, [r3, #0]
9000ae44:	4a0c      	ldr	r2, [pc, #48]	; (9000ae78 <mem_init+0x88>)
9000ae46:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
9000ae48:	480c      	ldr	r0, [pc, #48]	; (9000ae7c <mem_init+0x8c>)
9000ae4a:	f00a fc61 	bl	90015710 <sys_mutex_new>
9000ae4e:	4603      	mov	r3, r0
9000ae50:	2b00      	cmp	r3, #0
9000ae52:	d006      	beq.n	9000ae62 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
9000ae54:	4b0a      	ldr	r3, [pc, #40]	; (9000ae80 <mem_init+0x90>)
9000ae56:	f240 221f 	movw	r2, #543	; 0x21f
9000ae5a:	490a      	ldr	r1, [pc, #40]	; (9000ae84 <mem_init+0x94>)
9000ae5c:	480a      	ldr	r0, [pc, #40]	; (9000ae88 <mem_init+0x98>)
9000ae5e:	f00a fec9 	bl	90015bf4 <iprintf>
  }
}
9000ae62:	bf00      	nop
9000ae64:	3708      	adds	r7, #8
9000ae66:	46bd      	mov	sp, r7
9000ae68:	bd80      	pop	{r7, pc}
9000ae6a:	bf00      	nop
9000ae6c:	2401c1e0 	.word	0x2401c1e0
9000ae70:	30004000 	.word	0x30004000
9000ae74:	2401c1e4 	.word	0x2401c1e4
9000ae78:	2401c1ec 	.word	0x2401c1ec
9000ae7c:	2401c1e8 	.word	0x2401c1e8
9000ae80:	90017d94 	.word	0x90017d94
9000ae84:	90017e68 	.word	0x90017e68
9000ae88:	90017ddc 	.word	0x90017ddc

9000ae8c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
9000ae8c:	b580      	push	{r7, lr}
9000ae8e:	b086      	sub	sp, #24
9000ae90:	af00      	add	r7, sp, #0
9000ae92:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
9000ae94:	6878      	ldr	r0, [r7, #4]
9000ae96:	f7ff fef7 	bl	9000ac88 <mem_to_ptr>
9000ae9a:	4603      	mov	r3, r0
9000ae9c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
9000ae9e:	687b      	ldr	r3, [r7, #4]
9000aea0:	881b      	ldrh	r3, [r3, #0]
9000aea2:	4618      	mov	r0, r3
9000aea4:	f7ff fede 	bl	9000ac64 <ptr_to_mem>
9000aea8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
9000aeaa:	687b      	ldr	r3, [r7, #4]
9000aeac:	885b      	ldrh	r3, [r3, #2]
9000aeae:	4618      	mov	r0, r3
9000aeb0:	f7ff fed8 	bl	9000ac64 <ptr_to_mem>
9000aeb4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
9000aeb6:	687b      	ldr	r3, [r7, #4]
9000aeb8:	881b      	ldrh	r3, [r3, #0]
9000aeba:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
9000aebe:	d818      	bhi.n	9000aef2 <mem_link_valid+0x66>
9000aec0:	687b      	ldr	r3, [r7, #4]
9000aec2:	885b      	ldrh	r3, [r3, #2]
9000aec4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
9000aec8:	d813      	bhi.n	9000aef2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
9000aeca:	687b      	ldr	r3, [r7, #4]
9000aecc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
9000aece:	8afa      	ldrh	r2, [r7, #22]
9000aed0:	429a      	cmp	r2, r3
9000aed2:	d004      	beq.n	9000aede <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
9000aed4:	68fb      	ldr	r3, [r7, #12]
9000aed6:	881b      	ldrh	r3, [r3, #0]
9000aed8:	8afa      	ldrh	r2, [r7, #22]
9000aeda:	429a      	cmp	r2, r3
9000aedc:	d109      	bne.n	9000aef2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
9000aede:	4b08      	ldr	r3, [pc, #32]	; (9000af00 <mem_link_valid+0x74>)
9000aee0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
9000aee2:	693a      	ldr	r2, [r7, #16]
9000aee4:	429a      	cmp	r2, r3
9000aee6:	d006      	beq.n	9000aef6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
9000aee8:	693b      	ldr	r3, [r7, #16]
9000aeea:	885b      	ldrh	r3, [r3, #2]
9000aeec:	8afa      	ldrh	r2, [r7, #22]
9000aeee:	429a      	cmp	r2, r3
9000aef0:	d001      	beq.n	9000aef6 <mem_link_valid+0x6a>
    return 0;
9000aef2:	2300      	movs	r3, #0
9000aef4:	e000      	b.n	9000aef8 <mem_link_valid+0x6c>
  }
  return 1;
9000aef6:	2301      	movs	r3, #1
}
9000aef8:	4618      	mov	r0, r3
9000aefa:	3718      	adds	r7, #24
9000aefc:	46bd      	mov	sp, r7
9000aefe:	bd80      	pop	{r7, pc}
9000af00:	2401c1e4 	.word	0x2401c1e4

9000af04 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
9000af04:	b580      	push	{r7, lr}
9000af06:	b088      	sub	sp, #32
9000af08:	af00      	add	r7, sp, #0
9000af0a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
9000af0c:	687b      	ldr	r3, [r7, #4]
9000af0e:	2b00      	cmp	r3, #0
9000af10:	d070      	beq.n	9000aff4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
9000af12:	687b      	ldr	r3, [r7, #4]
9000af14:	f003 0303 	and.w	r3, r3, #3
9000af18:	2b00      	cmp	r3, #0
9000af1a:	d00d      	beq.n	9000af38 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
9000af1c:	4b37      	ldr	r3, [pc, #220]	; (9000affc <mem_free+0xf8>)
9000af1e:	f240 2273 	movw	r2, #627	; 0x273
9000af22:	4937      	ldr	r1, [pc, #220]	; (9000b000 <mem_free+0xfc>)
9000af24:	4837      	ldr	r0, [pc, #220]	; (9000b004 <mem_free+0x100>)
9000af26:	f00a fe65 	bl	90015bf4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
9000af2a:	f00a fc4f 	bl	900157cc <sys_arch_protect>
9000af2e:	60f8      	str	r0, [r7, #12]
9000af30:	68f8      	ldr	r0, [r7, #12]
9000af32:	f00a fc59 	bl	900157e8 <sys_arch_unprotect>
    return;
9000af36:	e05e      	b.n	9000aff6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
9000af38:	687b      	ldr	r3, [r7, #4]
9000af3a:	3b08      	subs	r3, #8
9000af3c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
9000af3e:	4b32      	ldr	r3, [pc, #200]	; (9000b008 <mem_free+0x104>)
9000af40:	681b      	ldr	r3, [r3, #0]
9000af42:	69fa      	ldr	r2, [r7, #28]
9000af44:	429a      	cmp	r2, r3
9000af46:	d306      	bcc.n	9000af56 <mem_free+0x52>
9000af48:	687b      	ldr	r3, [r7, #4]
9000af4a:	f103 020c 	add.w	r2, r3, #12
9000af4e:	4b2f      	ldr	r3, [pc, #188]	; (9000b00c <mem_free+0x108>)
9000af50:	681b      	ldr	r3, [r3, #0]
9000af52:	429a      	cmp	r2, r3
9000af54:	d90d      	bls.n	9000af72 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
9000af56:	4b29      	ldr	r3, [pc, #164]	; (9000affc <mem_free+0xf8>)
9000af58:	f240 227f 	movw	r2, #639	; 0x27f
9000af5c:	492c      	ldr	r1, [pc, #176]	; (9000b010 <mem_free+0x10c>)
9000af5e:	4829      	ldr	r0, [pc, #164]	; (9000b004 <mem_free+0x100>)
9000af60:	f00a fe48 	bl	90015bf4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
9000af64:	f00a fc32 	bl	900157cc <sys_arch_protect>
9000af68:	6138      	str	r0, [r7, #16]
9000af6a:	6938      	ldr	r0, [r7, #16]
9000af6c:	f00a fc3c 	bl	900157e8 <sys_arch_unprotect>
    return;
9000af70:	e041      	b.n	9000aff6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
9000af72:	4828      	ldr	r0, [pc, #160]	; (9000b014 <mem_free+0x110>)
9000af74:	f00a fbe8 	bl	90015748 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
9000af78:	69fb      	ldr	r3, [r7, #28]
9000af7a:	791b      	ldrb	r3, [r3, #4]
9000af7c:	2b00      	cmp	r3, #0
9000af7e:	d110      	bne.n	9000afa2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
9000af80:	4b1e      	ldr	r3, [pc, #120]	; (9000affc <mem_free+0xf8>)
9000af82:	f44f 7223 	mov.w	r2, #652	; 0x28c
9000af86:	4924      	ldr	r1, [pc, #144]	; (9000b018 <mem_free+0x114>)
9000af88:	481e      	ldr	r0, [pc, #120]	; (9000b004 <mem_free+0x100>)
9000af8a:	f00a fe33 	bl	90015bf4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
9000af8e:	4821      	ldr	r0, [pc, #132]	; (9000b014 <mem_free+0x110>)
9000af90:	f00a fbe9 	bl	90015766 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
9000af94:	f00a fc1a 	bl	900157cc <sys_arch_protect>
9000af98:	6178      	str	r0, [r7, #20]
9000af9a:	6978      	ldr	r0, [r7, #20]
9000af9c:	f00a fc24 	bl	900157e8 <sys_arch_unprotect>
    return;
9000afa0:	e029      	b.n	9000aff6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
9000afa2:	69f8      	ldr	r0, [r7, #28]
9000afa4:	f7ff ff72 	bl	9000ae8c <mem_link_valid>
9000afa8:	4603      	mov	r3, r0
9000afaa:	2b00      	cmp	r3, #0
9000afac:	d110      	bne.n	9000afd0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
9000afae:	4b13      	ldr	r3, [pc, #76]	; (9000affc <mem_free+0xf8>)
9000afb0:	f240 2295 	movw	r2, #661	; 0x295
9000afb4:	4919      	ldr	r1, [pc, #100]	; (9000b01c <mem_free+0x118>)
9000afb6:	4813      	ldr	r0, [pc, #76]	; (9000b004 <mem_free+0x100>)
9000afb8:	f00a fe1c 	bl	90015bf4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
9000afbc:	4815      	ldr	r0, [pc, #84]	; (9000b014 <mem_free+0x110>)
9000afbe:	f00a fbd2 	bl	90015766 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
9000afc2:	f00a fc03 	bl	900157cc <sys_arch_protect>
9000afc6:	61b8      	str	r0, [r7, #24]
9000afc8:	69b8      	ldr	r0, [r7, #24]
9000afca:	f00a fc0d 	bl	900157e8 <sys_arch_unprotect>
    return;
9000afce:	e012      	b.n	9000aff6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
9000afd0:	69fb      	ldr	r3, [r7, #28]
9000afd2:	2200      	movs	r2, #0
9000afd4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
9000afd6:	4b12      	ldr	r3, [pc, #72]	; (9000b020 <mem_free+0x11c>)
9000afd8:	681b      	ldr	r3, [r3, #0]
9000afda:	69fa      	ldr	r2, [r7, #28]
9000afdc:	429a      	cmp	r2, r3
9000afde:	d202      	bcs.n	9000afe6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
9000afe0:	4a0f      	ldr	r2, [pc, #60]	; (9000b020 <mem_free+0x11c>)
9000afe2:	69fb      	ldr	r3, [r7, #28]
9000afe4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
9000afe6:	69f8      	ldr	r0, [r7, #28]
9000afe8:	f7ff fe60 	bl	9000acac <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
9000afec:	4809      	ldr	r0, [pc, #36]	; (9000b014 <mem_free+0x110>)
9000afee:	f00a fbba 	bl	90015766 <sys_mutex_unlock>
9000aff2:	e000      	b.n	9000aff6 <mem_free+0xf2>
    return;
9000aff4:	bf00      	nop
}
9000aff6:	3720      	adds	r7, #32
9000aff8:	46bd      	mov	sp, r7
9000affa:	bd80      	pop	{r7, pc}
9000affc:	90017d94 	.word	0x90017d94
9000b000:	90017e84 	.word	0x90017e84
9000b004:	90017ddc 	.word	0x90017ddc
9000b008:	2401c1e0 	.word	0x2401c1e0
9000b00c:	2401c1e4 	.word	0x2401c1e4
9000b010:	90017ea8 	.word	0x90017ea8
9000b014:	2401c1e8 	.word	0x2401c1e8
9000b018:	90017ec4 	.word	0x90017ec4
9000b01c:	90017eec 	.word	0x90017eec
9000b020:	2401c1ec 	.word	0x2401c1ec

9000b024 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
9000b024:	b580      	push	{r7, lr}
9000b026:	b088      	sub	sp, #32
9000b028:	af00      	add	r7, sp, #0
9000b02a:	6078      	str	r0, [r7, #4]
9000b02c:	460b      	mov	r3, r1
9000b02e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
9000b030:	887b      	ldrh	r3, [r7, #2]
9000b032:	3303      	adds	r3, #3
9000b034:	b29b      	uxth	r3, r3
9000b036:	f023 0303 	bic.w	r3, r3, #3
9000b03a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
9000b03c:	8bfb      	ldrh	r3, [r7, #30]
9000b03e:	2b0b      	cmp	r3, #11
9000b040:	d801      	bhi.n	9000b046 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
9000b042:	230c      	movs	r3, #12
9000b044:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
9000b046:	8bfb      	ldrh	r3, [r7, #30]
9000b048:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
9000b04c:	d803      	bhi.n	9000b056 <mem_trim+0x32>
9000b04e:	8bfa      	ldrh	r2, [r7, #30]
9000b050:	887b      	ldrh	r3, [r7, #2]
9000b052:	429a      	cmp	r2, r3
9000b054:	d201      	bcs.n	9000b05a <mem_trim+0x36>
    return NULL;
9000b056:	2300      	movs	r3, #0
9000b058:	e0d8      	b.n	9000b20c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
9000b05a:	4b6e      	ldr	r3, [pc, #440]	; (9000b214 <mem_trim+0x1f0>)
9000b05c:	681b      	ldr	r3, [r3, #0]
9000b05e:	687a      	ldr	r2, [r7, #4]
9000b060:	429a      	cmp	r2, r3
9000b062:	d304      	bcc.n	9000b06e <mem_trim+0x4a>
9000b064:	4b6c      	ldr	r3, [pc, #432]	; (9000b218 <mem_trim+0x1f4>)
9000b066:	681b      	ldr	r3, [r3, #0]
9000b068:	687a      	ldr	r2, [r7, #4]
9000b06a:	429a      	cmp	r2, r3
9000b06c:	d306      	bcc.n	9000b07c <mem_trim+0x58>
9000b06e:	4b6b      	ldr	r3, [pc, #428]	; (9000b21c <mem_trim+0x1f8>)
9000b070:	f240 22d1 	movw	r2, #721	; 0x2d1
9000b074:	496a      	ldr	r1, [pc, #424]	; (9000b220 <mem_trim+0x1fc>)
9000b076:	486b      	ldr	r0, [pc, #428]	; (9000b224 <mem_trim+0x200>)
9000b078:	f00a fdbc 	bl	90015bf4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
9000b07c:	4b65      	ldr	r3, [pc, #404]	; (9000b214 <mem_trim+0x1f0>)
9000b07e:	681b      	ldr	r3, [r3, #0]
9000b080:	687a      	ldr	r2, [r7, #4]
9000b082:	429a      	cmp	r2, r3
9000b084:	d304      	bcc.n	9000b090 <mem_trim+0x6c>
9000b086:	4b64      	ldr	r3, [pc, #400]	; (9000b218 <mem_trim+0x1f4>)
9000b088:	681b      	ldr	r3, [r3, #0]
9000b08a:	687a      	ldr	r2, [r7, #4]
9000b08c:	429a      	cmp	r2, r3
9000b08e:	d307      	bcc.n	9000b0a0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
9000b090:	f00a fb9c 	bl	900157cc <sys_arch_protect>
9000b094:	60b8      	str	r0, [r7, #8]
9000b096:	68b8      	ldr	r0, [r7, #8]
9000b098:	f00a fba6 	bl	900157e8 <sys_arch_unprotect>
    return rmem;
9000b09c:	687b      	ldr	r3, [r7, #4]
9000b09e:	e0b5      	b.n	9000b20c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
9000b0a0:	687b      	ldr	r3, [r7, #4]
9000b0a2:	3b08      	subs	r3, #8
9000b0a4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
9000b0a6:	69b8      	ldr	r0, [r7, #24]
9000b0a8:	f7ff fdee 	bl	9000ac88 <mem_to_ptr>
9000b0ac:	4603      	mov	r3, r0
9000b0ae:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
9000b0b0:	69bb      	ldr	r3, [r7, #24]
9000b0b2:	881a      	ldrh	r2, [r3, #0]
9000b0b4:	8afb      	ldrh	r3, [r7, #22]
9000b0b6:	1ad3      	subs	r3, r2, r3
9000b0b8:	b29b      	uxth	r3, r3
9000b0ba:	3b08      	subs	r3, #8
9000b0bc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
9000b0be:	8bfa      	ldrh	r2, [r7, #30]
9000b0c0:	8abb      	ldrh	r3, [r7, #20]
9000b0c2:	429a      	cmp	r2, r3
9000b0c4:	d906      	bls.n	9000b0d4 <mem_trim+0xb0>
9000b0c6:	4b55      	ldr	r3, [pc, #340]	; (9000b21c <mem_trim+0x1f8>)
9000b0c8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
9000b0cc:	4956      	ldr	r1, [pc, #344]	; (9000b228 <mem_trim+0x204>)
9000b0ce:	4855      	ldr	r0, [pc, #340]	; (9000b224 <mem_trim+0x200>)
9000b0d0:	f00a fd90 	bl	90015bf4 <iprintf>
  if (newsize > size) {
9000b0d4:	8bfa      	ldrh	r2, [r7, #30]
9000b0d6:	8abb      	ldrh	r3, [r7, #20]
9000b0d8:	429a      	cmp	r2, r3
9000b0da:	d901      	bls.n	9000b0e0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
9000b0dc:	2300      	movs	r3, #0
9000b0de:	e095      	b.n	9000b20c <mem_trim+0x1e8>
  }
  if (newsize == size) {
9000b0e0:	8bfa      	ldrh	r2, [r7, #30]
9000b0e2:	8abb      	ldrh	r3, [r7, #20]
9000b0e4:	429a      	cmp	r2, r3
9000b0e6:	d101      	bne.n	9000b0ec <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
9000b0e8:	687b      	ldr	r3, [r7, #4]
9000b0ea:	e08f      	b.n	9000b20c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
9000b0ec:	484f      	ldr	r0, [pc, #316]	; (9000b22c <mem_trim+0x208>)
9000b0ee:	f00a fb2b 	bl	90015748 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
9000b0f2:	69bb      	ldr	r3, [r7, #24]
9000b0f4:	881b      	ldrh	r3, [r3, #0]
9000b0f6:	4618      	mov	r0, r3
9000b0f8:	f7ff fdb4 	bl	9000ac64 <ptr_to_mem>
9000b0fc:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
9000b0fe:	693b      	ldr	r3, [r7, #16]
9000b100:	791b      	ldrb	r3, [r3, #4]
9000b102:	2b00      	cmp	r3, #0
9000b104:	d13f      	bne.n	9000b186 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
9000b106:	69bb      	ldr	r3, [r7, #24]
9000b108:	881b      	ldrh	r3, [r3, #0]
9000b10a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
9000b10e:	d106      	bne.n	9000b11e <mem_trim+0xfa>
9000b110:	4b42      	ldr	r3, [pc, #264]	; (9000b21c <mem_trim+0x1f8>)
9000b112:	f240 22f5 	movw	r2, #757	; 0x2f5
9000b116:	4946      	ldr	r1, [pc, #280]	; (9000b230 <mem_trim+0x20c>)
9000b118:	4842      	ldr	r0, [pc, #264]	; (9000b224 <mem_trim+0x200>)
9000b11a:	f00a fd6b 	bl	90015bf4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
9000b11e:	693b      	ldr	r3, [r7, #16]
9000b120:	881b      	ldrh	r3, [r3, #0]
9000b122:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
9000b124:	8afa      	ldrh	r2, [r7, #22]
9000b126:	8bfb      	ldrh	r3, [r7, #30]
9000b128:	4413      	add	r3, r2
9000b12a:	b29b      	uxth	r3, r3
9000b12c:	3308      	adds	r3, #8
9000b12e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
9000b130:	4b40      	ldr	r3, [pc, #256]	; (9000b234 <mem_trim+0x210>)
9000b132:	681b      	ldr	r3, [r3, #0]
9000b134:	693a      	ldr	r2, [r7, #16]
9000b136:	429a      	cmp	r2, r3
9000b138:	d106      	bne.n	9000b148 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
9000b13a:	89fb      	ldrh	r3, [r7, #14]
9000b13c:	4618      	mov	r0, r3
9000b13e:	f7ff fd91 	bl	9000ac64 <ptr_to_mem>
9000b142:	4603      	mov	r3, r0
9000b144:	4a3b      	ldr	r2, [pc, #236]	; (9000b234 <mem_trim+0x210>)
9000b146:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
9000b148:	89fb      	ldrh	r3, [r7, #14]
9000b14a:	4618      	mov	r0, r3
9000b14c:	f7ff fd8a 	bl	9000ac64 <ptr_to_mem>
9000b150:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
9000b152:	693b      	ldr	r3, [r7, #16]
9000b154:	2200      	movs	r2, #0
9000b156:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
9000b158:	693b      	ldr	r3, [r7, #16]
9000b15a:	89ba      	ldrh	r2, [r7, #12]
9000b15c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
9000b15e:	693b      	ldr	r3, [r7, #16]
9000b160:	8afa      	ldrh	r2, [r7, #22]
9000b162:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
9000b164:	69bb      	ldr	r3, [r7, #24]
9000b166:	89fa      	ldrh	r2, [r7, #14]
9000b168:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
9000b16a:	693b      	ldr	r3, [r7, #16]
9000b16c:	881b      	ldrh	r3, [r3, #0]
9000b16e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
9000b172:	d047      	beq.n	9000b204 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
9000b174:	693b      	ldr	r3, [r7, #16]
9000b176:	881b      	ldrh	r3, [r3, #0]
9000b178:	4618      	mov	r0, r3
9000b17a:	f7ff fd73 	bl	9000ac64 <ptr_to_mem>
9000b17e:	4602      	mov	r2, r0
9000b180:	89fb      	ldrh	r3, [r7, #14]
9000b182:	8053      	strh	r3, [r2, #2]
9000b184:	e03e      	b.n	9000b204 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
9000b186:	8bfb      	ldrh	r3, [r7, #30]
9000b188:	f103 0214 	add.w	r2, r3, #20
9000b18c:	8abb      	ldrh	r3, [r7, #20]
9000b18e:	429a      	cmp	r2, r3
9000b190:	d838      	bhi.n	9000b204 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
9000b192:	8afa      	ldrh	r2, [r7, #22]
9000b194:	8bfb      	ldrh	r3, [r7, #30]
9000b196:	4413      	add	r3, r2
9000b198:	b29b      	uxth	r3, r3
9000b19a:	3308      	adds	r3, #8
9000b19c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
9000b19e:	69bb      	ldr	r3, [r7, #24]
9000b1a0:	881b      	ldrh	r3, [r3, #0]
9000b1a2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
9000b1a6:	d106      	bne.n	9000b1b6 <mem_trim+0x192>
9000b1a8:	4b1c      	ldr	r3, [pc, #112]	; (9000b21c <mem_trim+0x1f8>)
9000b1aa:	f240 3216 	movw	r2, #790	; 0x316
9000b1ae:	4920      	ldr	r1, [pc, #128]	; (9000b230 <mem_trim+0x20c>)
9000b1b0:	481c      	ldr	r0, [pc, #112]	; (9000b224 <mem_trim+0x200>)
9000b1b2:	f00a fd1f 	bl	90015bf4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
9000b1b6:	89fb      	ldrh	r3, [r7, #14]
9000b1b8:	4618      	mov	r0, r3
9000b1ba:	f7ff fd53 	bl	9000ac64 <ptr_to_mem>
9000b1be:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
9000b1c0:	4b1c      	ldr	r3, [pc, #112]	; (9000b234 <mem_trim+0x210>)
9000b1c2:	681b      	ldr	r3, [r3, #0]
9000b1c4:	693a      	ldr	r2, [r7, #16]
9000b1c6:	429a      	cmp	r2, r3
9000b1c8:	d202      	bcs.n	9000b1d0 <mem_trim+0x1ac>
      lfree = mem2;
9000b1ca:	4a1a      	ldr	r2, [pc, #104]	; (9000b234 <mem_trim+0x210>)
9000b1cc:	693b      	ldr	r3, [r7, #16]
9000b1ce:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
9000b1d0:	693b      	ldr	r3, [r7, #16]
9000b1d2:	2200      	movs	r2, #0
9000b1d4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
9000b1d6:	69bb      	ldr	r3, [r7, #24]
9000b1d8:	881a      	ldrh	r2, [r3, #0]
9000b1da:	693b      	ldr	r3, [r7, #16]
9000b1dc:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
9000b1de:	693b      	ldr	r3, [r7, #16]
9000b1e0:	8afa      	ldrh	r2, [r7, #22]
9000b1e2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
9000b1e4:	69bb      	ldr	r3, [r7, #24]
9000b1e6:	89fa      	ldrh	r2, [r7, #14]
9000b1e8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
9000b1ea:	693b      	ldr	r3, [r7, #16]
9000b1ec:	881b      	ldrh	r3, [r3, #0]
9000b1ee:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
9000b1f2:	d007      	beq.n	9000b204 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
9000b1f4:	693b      	ldr	r3, [r7, #16]
9000b1f6:	881b      	ldrh	r3, [r3, #0]
9000b1f8:	4618      	mov	r0, r3
9000b1fa:	f7ff fd33 	bl	9000ac64 <ptr_to_mem>
9000b1fe:	4602      	mov	r2, r0
9000b200:	89fb      	ldrh	r3, [r7, #14]
9000b202:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
9000b204:	4809      	ldr	r0, [pc, #36]	; (9000b22c <mem_trim+0x208>)
9000b206:	f00a faae 	bl	90015766 <sys_mutex_unlock>
  return rmem;
9000b20a:	687b      	ldr	r3, [r7, #4]
}
9000b20c:	4618      	mov	r0, r3
9000b20e:	3720      	adds	r7, #32
9000b210:	46bd      	mov	sp, r7
9000b212:	bd80      	pop	{r7, pc}
9000b214:	2401c1e0 	.word	0x2401c1e0
9000b218:	2401c1e4 	.word	0x2401c1e4
9000b21c:	90017d94 	.word	0x90017d94
9000b220:	90017f20 	.word	0x90017f20
9000b224:	90017ddc 	.word	0x90017ddc
9000b228:	90017f38 	.word	0x90017f38
9000b22c:	2401c1e8 	.word	0x2401c1e8
9000b230:	90017f58 	.word	0x90017f58
9000b234:	2401c1ec 	.word	0x2401c1ec

9000b238 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
9000b238:	b580      	push	{r7, lr}
9000b23a:	b088      	sub	sp, #32
9000b23c:	af00      	add	r7, sp, #0
9000b23e:	4603      	mov	r3, r0
9000b240:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
9000b242:	88fb      	ldrh	r3, [r7, #6]
9000b244:	2b00      	cmp	r3, #0
9000b246:	d101      	bne.n	9000b24c <mem_malloc+0x14>
    return NULL;
9000b248:	2300      	movs	r3, #0
9000b24a:	e0e2      	b.n	9000b412 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
9000b24c:	88fb      	ldrh	r3, [r7, #6]
9000b24e:	3303      	adds	r3, #3
9000b250:	b29b      	uxth	r3, r3
9000b252:	f023 0303 	bic.w	r3, r3, #3
9000b256:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
9000b258:	8bbb      	ldrh	r3, [r7, #28]
9000b25a:	2b0b      	cmp	r3, #11
9000b25c:	d801      	bhi.n	9000b262 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
9000b25e:	230c      	movs	r3, #12
9000b260:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
9000b262:	8bbb      	ldrh	r3, [r7, #28]
9000b264:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
9000b268:	d803      	bhi.n	9000b272 <mem_malloc+0x3a>
9000b26a:	8bba      	ldrh	r2, [r7, #28]
9000b26c:	88fb      	ldrh	r3, [r7, #6]
9000b26e:	429a      	cmp	r2, r3
9000b270:	d201      	bcs.n	9000b276 <mem_malloc+0x3e>
    return NULL;
9000b272:	2300      	movs	r3, #0
9000b274:	e0cd      	b.n	9000b412 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
9000b276:	4869      	ldr	r0, [pc, #420]	; (9000b41c <mem_malloc+0x1e4>)
9000b278:	f00a fa66 	bl	90015748 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
9000b27c:	4b68      	ldr	r3, [pc, #416]	; (9000b420 <mem_malloc+0x1e8>)
9000b27e:	681b      	ldr	r3, [r3, #0]
9000b280:	4618      	mov	r0, r3
9000b282:	f7ff fd01 	bl	9000ac88 <mem_to_ptr>
9000b286:	4603      	mov	r3, r0
9000b288:	83fb      	strh	r3, [r7, #30]
9000b28a:	e0b7      	b.n	9000b3fc <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
9000b28c:	8bfb      	ldrh	r3, [r7, #30]
9000b28e:	4618      	mov	r0, r3
9000b290:	f7ff fce8 	bl	9000ac64 <ptr_to_mem>
9000b294:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
9000b296:	697b      	ldr	r3, [r7, #20]
9000b298:	791b      	ldrb	r3, [r3, #4]
9000b29a:	2b00      	cmp	r3, #0
9000b29c:	f040 80a7 	bne.w	9000b3ee <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
9000b2a0:	697b      	ldr	r3, [r7, #20]
9000b2a2:	881b      	ldrh	r3, [r3, #0]
9000b2a4:	461a      	mov	r2, r3
9000b2a6:	8bfb      	ldrh	r3, [r7, #30]
9000b2a8:	1ad3      	subs	r3, r2, r3
9000b2aa:	f1a3 0208 	sub.w	r2, r3, #8
9000b2ae:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
9000b2b0:	429a      	cmp	r2, r3
9000b2b2:	f0c0 809c 	bcc.w	9000b3ee <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
9000b2b6:	697b      	ldr	r3, [r7, #20]
9000b2b8:	881b      	ldrh	r3, [r3, #0]
9000b2ba:	461a      	mov	r2, r3
9000b2bc:	8bfb      	ldrh	r3, [r7, #30]
9000b2be:	1ad3      	subs	r3, r2, r3
9000b2c0:	f1a3 0208 	sub.w	r2, r3, #8
9000b2c4:	8bbb      	ldrh	r3, [r7, #28]
9000b2c6:	3314      	adds	r3, #20
9000b2c8:	429a      	cmp	r2, r3
9000b2ca:	d333      	bcc.n	9000b334 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
9000b2cc:	8bfa      	ldrh	r2, [r7, #30]
9000b2ce:	8bbb      	ldrh	r3, [r7, #28]
9000b2d0:	4413      	add	r3, r2
9000b2d2:	b29b      	uxth	r3, r3
9000b2d4:	3308      	adds	r3, #8
9000b2d6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
9000b2d8:	8a7b      	ldrh	r3, [r7, #18]
9000b2da:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
9000b2de:	d106      	bne.n	9000b2ee <mem_malloc+0xb6>
9000b2e0:	4b50      	ldr	r3, [pc, #320]	; (9000b424 <mem_malloc+0x1ec>)
9000b2e2:	f240 3287 	movw	r2, #903	; 0x387
9000b2e6:	4950      	ldr	r1, [pc, #320]	; (9000b428 <mem_malloc+0x1f0>)
9000b2e8:	4850      	ldr	r0, [pc, #320]	; (9000b42c <mem_malloc+0x1f4>)
9000b2ea:	f00a fc83 	bl	90015bf4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
9000b2ee:	8a7b      	ldrh	r3, [r7, #18]
9000b2f0:	4618      	mov	r0, r3
9000b2f2:	f7ff fcb7 	bl	9000ac64 <ptr_to_mem>
9000b2f6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
9000b2f8:	68fb      	ldr	r3, [r7, #12]
9000b2fa:	2200      	movs	r2, #0
9000b2fc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
9000b2fe:	697b      	ldr	r3, [r7, #20]
9000b300:	881a      	ldrh	r2, [r3, #0]
9000b302:	68fb      	ldr	r3, [r7, #12]
9000b304:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
9000b306:	68fb      	ldr	r3, [r7, #12]
9000b308:	8bfa      	ldrh	r2, [r7, #30]
9000b30a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
9000b30c:	697b      	ldr	r3, [r7, #20]
9000b30e:	8a7a      	ldrh	r2, [r7, #18]
9000b310:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
9000b312:	697b      	ldr	r3, [r7, #20]
9000b314:	2201      	movs	r2, #1
9000b316:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
9000b318:	68fb      	ldr	r3, [r7, #12]
9000b31a:	881b      	ldrh	r3, [r3, #0]
9000b31c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
9000b320:	d00b      	beq.n	9000b33a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
9000b322:	68fb      	ldr	r3, [r7, #12]
9000b324:	881b      	ldrh	r3, [r3, #0]
9000b326:	4618      	mov	r0, r3
9000b328:	f7ff fc9c 	bl	9000ac64 <ptr_to_mem>
9000b32c:	4602      	mov	r2, r0
9000b32e:	8a7b      	ldrh	r3, [r7, #18]
9000b330:	8053      	strh	r3, [r2, #2]
9000b332:	e002      	b.n	9000b33a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
9000b334:	697b      	ldr	r3, [r7, #20]
9000b336:	2201      	movs	r2, #1
9000b338:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
9000b33a:	4b39      	ldr	r3, [pc, #228]	; (9000b420 <mem_malloc+0x1e8>)
9000b33c:	681b      	ldr	r3, [r3, #0]
9000b33e:	697a      	ldr	r2, [r7, #20]
9000b340:	429a      	cmp	r2, r3
9000b342:	d127      	bne.n	9000b394 <mem_malloc+0x15c>
          struct mem *cur = lfree;
9000b344:	4b36      	ldr	r3, [pc, #216]	; (9000b420 <mem_malloc+0x1e8>)
9000b346:	681b      	ldr	r3, [r3, #0]
9000b348:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
9000b34a:	e005      	b.n	9000b358 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
9000b34c:	69bb      	ldr	r3, [r7, #24]
9000b34e:	881b      	ldrh	r3, [r3, #0]
9000b350:	4618      	mov	r0, r3
9000b352:	f7ff fc87 	bl	9000ac64 <ptr_to_mem>
9000b356:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
9000b358:	69bb      	ldr	r3, [r7, #24]
9000b35a:	791b      	ldrb	r3, [r3, #4]
9000b35c:	2b00      	cmp	r3, #0
9000b35e:	d004      	beq.n	9000b36a <mem_malloc+0x132>
9000b360:	4b33      	ldr	r3, [pc, #204]	; (9000b430 <mem_malloc+0x1f8>)
9000b362:	681b      	ldr	r3, [r3, #0]
9000b364:	69ba      	ldr	r2, [r7, #24]
9000b366:	429a      	cmp	r2, r3
9000b368:	d1f0      	bne.n	9000b34c <mem_malloc+0x114>
          }
          lfree = cur;
9000b36a:	4a2d      	ldr	r2, [pc, #180]	; (9000b420 <mem_malloc+0x1e8>)
9000b36c:	69bb      	ldr	r3, [r7, #24]
9000b36e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
9000b370:	4b2b      	ldr	r3, [pc, #172]	; (9000b420 <mem_malloc+0x1e8>)
9000b372:	681a      	ldr	r2, [r3, #0]
9000b374:	4b2e      	ldr	r3, [pc, #184]	; (9000b430 <mem_malloc+0x1f8>)
9000b376:	681b      	ldr	r3, [r3, #0]
9000b378:	429a      	cmp	r2, r3
9000b37a:	d00b      	beq.n	9000b394 <mem_malloc+0x15c>
9000b37c:	4b28      	ldr	r3, [pc, #160]	; (9000b420 <mem_malloc+0x1e8>)
9000b37e:	681b      	ldr	r3, [r3, #0]
9000b380:	791b      	ldrb	r3, [r3, #4]
9000b382:	2b00      	cmp	r3, #0
9000b384:	d006      	beq.n	9000b394 <mem_malloc+0x15c>
9000b386:	4b27      	ldr	r3, [pc, #156]	; (9000b424 <mem_malloc+0x1ec>)
9000b388:	f240 32b5 	movw	r2, #949	; 0x3b5
9000b38c:	4929      	ldr	r1, [pc, #164]	; (9000b434 <mem_malloc+0x1fc>)
9000b38e:	4827      	ldr	r0, [pc, #156]	; (9000b42c <mem_malloc+0x1f4>)
9000b390:	f00a fc30 	bl	90015bf4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
9000b394:	4821      	ldr	r0, [pc, #132]	; (9000b41c <mem_malloc+0x1e4>)
9000b396:	f00a f9e6 	bl	90015766 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
9000b39a:	8bba      	ldrh	r2, [r7, #28]
9000b39c:	697b      	ldr	r3, [r7, #20]
9000b39e:	4413      	add	r3, r2
9000b3a0:	3308      	adds	r3, #8
9000b3a2:	4a23      	ldr	r2, [pc, #140]	; (9000b430 <mem_malloc+0x1f8>)
9000b3a4:	6812      	ldr	r2, [r2, #0]
9000b3a6:	4293      	cmp	r3, r2
9000b3a8:	d906      	bls.n	9000b3b8 <mem_malloc+0x180>
9000b3aa:	4b1e      	ldr	r3, [pc, #120]	; (9000b424 <mem_malloc+0x1ec>)
9000b3ac:	f240 32b9 	movw	r2, #953	; 0x3b9
9000b3b0:	4921      	ldr	r1, [pc, #132]	; (9000b438 <mem_malloc+0x200>)
9000b3b2:	481e      	ldr	r0, [pc, #120]	; (9000b42c <mem_malloc+0x1f4>)
9000b3b4:	f00a fc1e 	bl	90015bf4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
9000b3b8:	697b      	ldr	r3, [r7, #20]
9000b3ba:	f003 0303 	and.w	r3, r3, #3
9000b3be:	2b00      	cmp	r3, #0
9000b3c0:	d006      	beq.n	9000b3d0 <mem_malloc+0x198>
9000b3c2:	4b18      	ldr	r3, [pc, #96]	; (9000b424 <mem_malloc+0x1ec>)
9000b3c4:	f240 32bb 	movw	r2, #955	; 0x3bb
9000b3c8:	491c      	ldr	r1, [pc, #112]	; (9000b43c <mem_malloc+0x204>)
9000b3ca:	4818      	ldr	r0, [pc, #96]	; (9000b42c <mem_malloc+0x1f4>)
9000b3cc:	f00a fc12 	bl	90015bf4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
9000b3d0:	697b      	ldr	r3, [r7, #20]
9000b3d2:	f003 0303 	and.w	r3, r3, #3
9000b3d6:	2b00      	cmp	r3, #0
9000b3d8:	d006      	beq.n	9000b3e8 <mem_malloc+0x1b0>
9000b3da:	4b12      	ldr	r3, [pc, #72]	; (9000b424 <mem_malloc+0x1ec>)
9000b3dc:	f240 32bd 	movw	r2, #957	; 0x3bd
9000b3e0:	4917      	ldr	r1, [pc, #92]	; (9000b440 <mem_malloc+0x208>)
9000b3e2:	4812      	ldr	r0, [pc, #72]	; (9000b42c <mem_malloc+0x1f4>)
9000b3e4:	f00a fc06 	bl	90015bf4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
9000b3e8:	697b      	ldr	r3, [r7, #20]
9000b3ea:	3308      	adds	r3, #8
9000b3ec:	e011      	b.n	9000b412 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
9000b3ee:	8bfb      	ldrh	r3, [r7, #30]
9000b3f0:	4618      	mov	r0, r3
9000b3f2:	f7ff fc37 	bl	9000ac64 <ptr_to_mem>
9000b3f6:	4603      	mov	r3, r0
9000b3f8:	881b      	ldrh	r3, [r3, #0]
9000b3fa:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
9000b3fc:	8bfa      	ldrh	r2, [r7, #30]
9000b3fe:	8bbb      	ldrh	r3, [r7, #28]
9000b400:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
9000b404:	429a      	cmp	r2, r3
9000b406:	f4ff af41 	bcc.w	9000b28c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
9000b40a:	4804      	ldr	r0, [pc, #16]	; (9000b41c <mem_malloc+0x1e4>)
9000b40c:	f00a f9ab 	bl	90015766 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
9000b410:	2300      	movs	r3, #0
}
9000b412:	4618      	mov	r0, r3
9000b414:	3720      	adds	r7, #32
9000b416:	46bd      	mov	sp, r7
9000b418:	bd80      	pop	{r7, pc}
9000b41a:	bf00      	nop
9000b41c:	2401c1e8 	.word	0x2401c1e8
9000b420:	2401c1ec 	.word	0x2401c1ec
9000b424:	90017d94 	.word	0x90017d94
9000b428:	90017f58 	.word	0x90017f58
9000b42c:	90017ddc 	.word	0x90017ddc
9000b430:	2401c1e4 	.word	0x2401c1e4
9000b434:	90017f6c 	.word	0x90017f6c
9000b438:	90017f88 	.word	0x90017f88
9000b43c:	90017fb8 	.word	0x90017fb8
9000b440:	90017fe8 	.word	0x90017fe8

9000b444 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
9000b444:	b480      	push	{r7}
9000b446:	b085      	sub	sp, #20
9000b448:	af00      	add	r7, sp, #0
9000b44a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
9000b44c:	687b      	ldr	r3, [r7, #4]
9000b44e:	689b      	ldr	r3, [r3, #8]
9000b450:	2200      	movs	r2, #0
9000b452:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
9000b454:	687b      	ldr	r3, [r7, #4]
9000b456:	685b      	ldr	r3, [r3, #4]
9000b458:	3303      	adds	r3, #3
9000b45a:	f023 0303 	bic.w	r3, r3, #3
9000b45e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
9000b460:	2300      	movs	r3, #0
9000b462:	60fb      	str	r3, [r7, #12]
9000b464:	e011      	b.n	9000b48a <memp_init_pool+0x46>
    memp->next = *desc->tab;
9000b466:	687b      	ldr	r3, [r7, #4]
9000b468:	689b      	ldr	r3, [r3, #8]
9000b46a:	681a      	ldr	r2, [r3, #0]
9000b46c:	68bb      	ldr	r3, [r7, #8]
9000b46e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
9000b470:	687b      	ldr	r3, [r7, #4]
9000b472:	689b      	ldr	r3, [r3, #8]
9000b474:	68ba      	ldr	r2, [r7, #8]
9000b476:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
9000b478:	687b      	ldr	r3, [r7, #4]
9000b47a:	881b      	ldrh	r3, [r3, #0]
9000b47c:	461a      	mov	r2, r3
9000b47e:	68bb      	ldr	r3, [r7, #8]
9000b480:	4413      	add	r3, r2
9000b482:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
9000b484:	68fb      	ldr	r3, [r7, #12]
9000b486:	3301      	adds	r3, #1
9000b488:	60fb      	str	r3, [r7, #12]
9000b48a:	687b      	ldr	r3, [r7, #4]
9000b48c:	885b      	ldrh	r3, [r3, #2]
9000b48e:	461a      	mov	r2, r3
9000b490:	68fb      	ldr	r3, [r7, #12]
9000b492:	4293      	cmp	r3, r2
9000b494:	dbe7      	blt.n	9000b466 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
9000b496:	bf00      	nop
9000b498:	bf00      	nop
9000b49a:	3714      	adds	r7, #20
9000b49c:	46bd      	mov	sp, r7
9000b49e:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b4a2:	4770      	bx	lr

9000b4a4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
9000b4a4:	b580      	push	{r7, lr}
9000b4a6:	b082      	sub	sp, #8
9000b4a8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
9000b4aa:	2300      	movs	r3, #0
9000b4ac:	80fb      	strh	r3, [r7, #6]
9000b4ae:	e009      	b.n	9000b4c4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
9000b4b0:	88fb      	ldrh	r3, [r7, #6]
9000b4b2:	4a08      	ldr	r2, [pc, #32]	; (9000b4d4 <memp_init+0x30>)
9000b4b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
9000b4b8:	4618      	mov	r0, r3
9000b4ba:	f7ff ffc3 	bl	9000b444 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
9000b4be:	88fb      	ldrh	r3, [r7, #6]
9000b4c0:	3301      	adds	r3, #1
9000b4c2:	80fb      	strh	r3, [r7, #6]
9000b4c4:	88fb      	ldrh	r3, [r7, #6]
9000b4c6:	2b0c      	cmp	r3, #12
9000b4c8:	d9f2      	bls.n	9000b4b0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
9000b4ca:	bf00      	nop
9000b4cc:	bf00      	nop
9000b4ce:	3708      	adds	r7, #8
9000b4d0:	46bd      	mov	sp, r7
9000b4d2:	bd80      	pop	{r7, pc}
9000b4d4:	900210c0 	.word	0x900210c0

9000b4d8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
9000b4d8:	b580      	push	{r7, lr}
9000b4da:	b084      	sub	sp, #16
9000b4dc:	af00      	add	r7, sp, #0
9000b4de:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
9000b4e0:	f00a f974 	bl	900157cc <sys_arch_protect>
9000b4e4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
9000b4e6:	687b      	ldr	r3, [r7, #4]
9000b4e8:	689b      	ldr	r3, [r3, #8]
9000b4ea:	681b      	ldr	r3, [r3, #0]
9000b4ec:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
9000b4ee:	68bb      	ldr	r3, [r7, #8]
9000b4f0:	2b00      	cmp	r3, #0
9000b4f2:	d015      	beq.n	9000b520 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
9000b4f4:	687b      	ldr	r3, [r7, #4]
9000b4f6:	689b      	ldr	r3, [r3, #8]
9000b4f8:	68ba      	ldr	r2, [r7, #8]
9000b4fa:	6812      	ldr	r2, [r2, #0]
9000b4fc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
9000b4fe:	68bb      	ldr	r3, [r7, #8]
9000b500:	f003 0303 	and.w	r3, r3, #3
9000b504:	2b00      	cmp	r3, #0
9000b506:	d006      	beq.n	9000b516 <do_memp_malloc_pool+0x3e>
9000b508:	4b09      	ldr	r3, [pc, #36]	; (9000b530 <do_memp_malloc_pool+0x58>)
9000b50a:	f44f 728c 	mov.w	r2, #280	; 0x118
9000b50e:	4909      	ldr	r1, [pc, #36]	; (9000b534 <do_memp_malloc_pool+0x5c>)
9000b510:	4809      	ldr	r0, [pc, #36]	; (9000b538 <do_memp_malloc_pool+0x60>)
9000b512:	f00a fb6f 	bl	90015bf4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
9000b516:	68f8      	ldr	r0, [r7, #12]
9000b518:	f00a f966 	bl	900157e8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
9000b51c:	68bb      	ldr	r3, [r7, #8]
9000b51e:	e003      	b.n	9000b528 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
9000b520:	68f8      	ldr	r0, [r7, #12]
9000b522:	f00a f961 	bl	900157e8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
9000b526:	2300      	movs	r3, #0
}
9000b528:	4618      	mov	r0, r3
9000b52a:	3710      	adds	r7, #16
9000b52c:	46bd      	mov	sp, r7
9000b52e:	bd80      	pop	{r7, pc}
9000b530:	9001800c 	.word	0x9001800c
9000b534:	9001803c 	.word	0x9001803c
9000b538:	90018060 	.word	0x90018060

9000b53c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
9000b53c:	b580      	push	{r7, lr}
9000b53e:	b082      	sub	sp, #8
9000b540:	af00      	add	r7, sp, #0
9000b542:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
9000b544:	687b      	ldr	r3, [r7, #4]
9000b546:	2b00      	cmp	r3, #0
9000b548:	d106      	bne.n	9000b558 <memp_malloc_pool+0x1c>
9000b54a:	4b0a      	ldr	r3, [pc, #40]	; (9000b574 <memp_malloc_pool+0x38>)
9000b54c:	f44f 729e 	mov.w	r2, #316	; 0x13c
9000b550:	4909      	ldr	r1, [pc, #36]	; (9000b578 <memp_malloc_pool+0x3c>)
9000b552:	480a      	ldr	r0, [pc, #40]	; (9000b57c <memp_malloc_pool+0x40>)
9000b554:	f00a fb4e 	bl	90015bf4 <iprintf>
  if (desc == NULL) {
9000b558:	687b      	ldr	r3, [r7, #4]
9000b55a:	2b00      	cmp	r3, #0
9000b55c:	d101      	bne.n	9000b562 <memp_malloc_pool+0x26>
    return NULL;
9000b55e:	2300      	movs	r3, #0
9000b560:	e003      	b.n	9000b56a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
9000b562:	6878      	ldr	r0, [r7, #4]
9000b564:	f7ff ffb8 	bl	9000b4d8 <do_memp_malloc_pool>
9000b568:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
9000b56a:	4618      	mov	r0, r3
9000b56c:	3708      	adds	r7, #8
9000b56e:	46bd      	mov	sp, r7
9000b570:	bd80      	pop	{r7, pc}
9000b572:	bf00      	nop
9000b574:	9001800c 	.word	0x9001800c
9000b578:	90018088 	.word	0x90018088
9000b57c:	90018060 	.word	0x90018060

9000b580 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
9000b580:	b580      	push	{r7, lr}
9000b582:	b084      	sub	sp, #16
9000b584:	af00      	add	r7, sp, #0
9000b586:	4603      	mov	r3, r0
9000b588:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
9000b58a:	79fb      	ldrb	r3, [r7, #7]
9000b58c:	2b0c      	cmp	r3, #12
9000b58e:	d908      	bls.n	9000b5a2 <memp_malloc+0x22>
9000b590:	4b0a      	ldr	r3, [pc, #40]	; (9000b5bc <memp_malloc+0x3c>)
9000b592:	f240 1257 	movw	r2, #343	; 0x157
9000b596:	490a      	ldr	r1, [pc, #40]	; (9000b5c0 <memp_malloc+0x40>)
9000b598:	480a      	ldr	r0, [pc, #40]	; (9000b5c4 <memp_malloc+0x44>)
9000b59a:	f00a fb2b 	bl	90015bf4 <iprintf>
9000b59e:	2300      	movs	r3, #0
9000b5a0:	e008      	b.n	9000b5b4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
9000b5a2:	79fb      	ldrb	r3, [r7, #7]
9000b5a4:	4a08      	ldr	r2, [pc, #32]	; (9000b5c8 <memp_malloc+0x48>)
9000b5a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
9000b5aa:	4618      	mov	r0, r3
9000b5ac:	f7ff ff94 	bl	9000b4d8 <do_memp_malloc_pool>
9000b5b0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
9000b5b2:	68fb      	ldr	r3, [r7, #12]
}
9000b5b4:	4618      	mov	r0, r3
9000b5b6:	3710      	adds	r7, #16
9000b5b8:	46bd      	mov	sp, r7
9000b5ba:	bd80      	pop	{r7, pc}
9000b5bc:	9001800c 	.word	0x9001800c
9000b5c0:	9001809c 	.word	0x9001809c
9000b5c4:	90018060 	.word	0x90018060
9000b5c8:	900210c0 	.word	0x900210c0

9000b5cc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
9000b5cc:	b580      	push	{r7, lr}
9000b5ce:	b084      	sub	sp, #16
9000b5d0:	af00      	add	r7, sp, #0
9000b5d2:	6078      	str	r0, [r7, #4]
9000b5d4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
9000b5d6:	683b      	ldr	r3, [r7, #0]
9000b5d8:	f003 0303 	and.w	r3, r3, #3
9000b5dc:	2b00      	cmp	r3, #0
9000b5de:	d006      	beq.n	9000b5ee <do_memp_free_pool+0x22>
9000b5e0:	4b0d      	ldr	r3, [pc, #52]	; (9000b618 <do_memp_free_pool+0x4c>)
9000b5e2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
9000b5e6:	490d      	ldr	r1, [pc, #52]	; (9000b61c <do_memp_free_pool+0x50>)
9000b5e8:	480d      	ldr	r0, [pc, #52]	; (9000b620 <do_memp_free_pool+0x54>)
9000b5ea:	f00a fb03 	bl	90015bf4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
9000b5ee:	683b      	ldr	r3, [r7, #0]
9000b5f0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
9000b5f2:	f00a f8eb 	bl	900157cc <sys_arch_protect>
9000b5f6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
9000b5f8:	687b      	ldr	r3, [r7, #4]
9000b5fa:	689b      	ldr	r3, [r3, #8]
9000b5fc:	681a      	ldr	r2, [r3, #0]
9000b5fe:	68fb      	ldr	r3, [r7, #12]
9000b600:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
9000b602:	687b      	ldr	r3, [r7, #4]
9000b604:	689b      	ldr	r3, [r3, #8]
9000b606:	68fa      	ldr	r2, [r7, #12]
9000b608:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
9000b60a:	68b8      	ldr	r0, [r7, #8]
9000b60c:	f00a f8ec 	bl	900157e8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
9000b610:	bf00      	nop
9000b612:	3710      	adds	r7, #16
9000b614:	46bd      	mov	sp, r7
9000b616:	bd80      	pop	{r7, pc}
9000b618:	9001800c 	.word	0x9001800c
9000b61c:	900180bc 	.word	0x900180bc
9000b620:	90018060 	.word	0x90018060

9000b624 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
9000b624:	b580      	push	{r7, lr}
9000b626:	b082      	sub	sp, #8
9000b628:	af00      	add	r7, sp, #0
9000b62a:	6078      	str	r0, [r7, #4]
9000b62c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
9000b62e:	687b      	ldr	r3, [r7, #4]
9000b630:	2b00      	cmp	r3, #0
9000b632:	d106      	bne.n	9000b642 <memp_free_pool+0x1e>
9000b634:	4b0a      	ldr	r3, [pc, #40]	; (9000b660 <memp_free_pool+0x3c>)
9000b636:	f240 1295 	movw	r2, #405	; 0x195
9000b63a:	490a      	ldr	r1, [pc, #40]	; (9000b664 <memp_free_pool+0x40>)
9000b63c:	480a      	ldr	r0, [pc, #40]	; (9000b668 <memp_free_pool+0x44>)
9000b63e:	f00a fad9 	bl	90015bf4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
9000b642:	687b      	ldr	r3, [r7, #4]
9000b644:	2b00      	cmp	r3, #0
9000b646:	d007      	beq.n	9000b658 <memp_free_pool+0x34>
9000b648:	683b      	ldr	r3, [r7, #0]
9000b64a:	2b00      	cmp	r3, #0
9000b64c:	d004      	beq.n	9000b658 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
9000b64e:	6839      	ldr	r1, [r7, #0]
9000b650:	6878      	ldr	r0, [r7, #4]
9000b652:	f7ff ffbb 	bl	9000b5cc <do_memp_free_pool>
9000b656:	e000      	b.n	9000b65a <memp_free_pool+0x36>
    return;
9000b658:	bf00      	nop
}
9000b65a:	3708      	adds	r7, #8
9000b65c:	46bd      	mov	sp, r7
9000b65e:	bd80      	pop	{r7, pc}
9000b660:	9001800c 	.word	0x9001800c
9000b664:	90018088 	.word	0x90018088
9000b668:	90018060 	.word	0x90018060

9000b66c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
9000b66c:	b580      	push	{r7, lr}
9000b66e:	b082      	sub	sp, #8
9000b670:	af00      	add	r7, sp, #0
9000b672:	4603      	mov	r3, r0
9000b674:	6039      	str	r1, [r7, #0]
9000b676:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
9000b678:	79fb      	ldrb	r3, [r7, #7]
9000b67a:	2b0c      	cmp	r3, #12
9000b67c:	d907      	bls.n	9000b68e <memp_free+0x22>
9000b67e:	4b0c      	ldr	r3, [pc, #48]	; (9000b6b0 <memp_free+0x44>)
9000b680:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
9000b684:	490b      	ldr	r1, [pc, #44]	; (9000b6b4 <memp_free+0x48>)
9000b686:	480c      	ldr	r0, [pc, #48]	; (9000b6b8 <memp_free+0x4c>)
9000b688:	f00a fab4 	bl	90015bf4 <iprintf>
9000b68c:	e00c      	b.n	9000b6a8 <memp_free+0x3c>

  if (mem == NULL) {
9000b68e:	683b      	ldr	r3, [r7, #0]
9000b690:	2b00      	cmp	r3, #0
9000b692:	d008      	beq.n	9000b6a6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
9000b694:	79fb      	ldrb	r3, [r7, #7]
9000b696:	4a09      	ldr	r2, [pc, #36]	; (9000b6bc <memp_free+0x50>)
9000b698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
9000b69c:	6839      	ldr	r1, [r7, #0]
9000b69e:	4618      	mov	r0, r3
9000b6a0:	f7ff ff94 	bl	9000b5cc <do_memp_free_pool>
9000b6a4:	e000      	b.n	9000b6a8 <memp_free+0x3c>
    return;
9000b6a6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
9000b6a8:	3708      	adds	r7, #8
9000b6aa:	46bd      	mov	sp, r7
9000b6ac:	bd80      	pop	{r7, pc}
9000b6ae:	bf00      	nop
9000b6b0:	9001800c 	.word	0x9001800c
9000b6b4:	900180dc 	.word	0x900180dc
9000b6b8:	90018060 	.word	0x90018060
9000b6bc:	900210c0 	.word	0x900210c0

9000b6c0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
9000b6c0:	b480      	push	{r7}
9000b6c2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
9000b6c4:	bf00      	nop
9000b6c6:	46bd      	mov	sp, r7
9000b6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b6cc:	4770      	bx	lr
	...

9000b6d0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
9000b6d0:	b580      	push	{r7, lr}
9000b6d2:	b086      	sub	sp, #24
9000b6d4:	af00      	add	r7, sp, #0
9000b6d6:	60f8      	str	r0, [r7, #12]
9000b6d8:	60b9      	str	r1, [r7, #8]
9000b6da:	607a      	str	r2, [r7, #4]
9000b6dc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
9000b6de:	68fb      	ldr	r3, [r7, #12]
9000b6e0:	2b00      	cmp	r3, #0
9000b6e2:	d108      	bne.n	9000b6f6 <netif_add+0x26>
9000b6e4:	4b57      	ldr	r3, [pc, #348]	; (9000b844 <netif_add+0x174>)
9000b6e6:	f240 1227 	movw	r2, #295	; 0x127
9000b6ea:	4957      	ldr	r1, [pc, #348]	; (9000b848 <netif_add+0x178>)
9000b6ec:	4857      	ldr	r0, [pc, #348]	; (9000b84c <netif_add+0x17c>)
9000b6ee:	f00a fa81 	bl	90015bf4 <iprintf>
9000b6f2:	2300      	movs	r3, #0
9000b6f4:	e0a2      	b.n	9000b83c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
9000b6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000b6f8:	2b00      	cmp	r3, #0
9000b6fa:	d108      	bne.n	9000b70e <netif_add+0x3e>
9000b6fc:	4b51      	ldr	r3, [pc, #324]	; (9000b844 <netif_add+0x174>)
9000b6fe:	f44f 7294 	mov.w	r2, #296	; 0x128
9000b702:	4953      	ldr	r1, [pc, #332]	; (9000b850 <netif_add+0x180>)
9000b704:	4851      	ldr	r0, [pc, #324]	; (9000b84c <netif_add+0x17c>)
9000b706:	f00a fa75 	bl	90015bf4 <iprintf>
9000b70a:	2300      	movs	r3, #0
9000b70c:	e096      	b.n	9000b83c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
9000b70e:	68bb      	ldr	r3, [r7, #8]
9000b710:	2b00      	cmp	r3, #0
9000b712:	d101      	bne.n	9000b718 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
9000b714:	4b4f      	ldr	r3, [pc, #316]	; (9000b854 <netif_add+0x184>)
9000b716:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
9000b718:	687b      	ldr	r3, [r7, #4]
9000b71a:	2b00      	cmp	r3, #0
9000b71c:	d101      	bne.n	9000b722 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
9000b71e:	4b4d      	ldr	r3, [pc, #308]	; (9000b854 <netif_add+0x184>)
9000b720:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
9000b722:	683b      	ldr	r3, [r7, #0]
9000b724:	2b00      	cmp	r3, #0
9000b726:	d101      	bne.n	9000b72c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
9000b728:	4b4a      	ldr	r3, [pc, #296]	; (9000b854 <netif_add+0x184>)
9000b72a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
9000b72c:	68fb      	ldr	r3, [r7, #12]
9000b72e:	2200      	movs	r2, #0
9000b730:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
9000b732:	68fb      	ldr	r3, [r7, #12]
9000b734:	2200      	movs	r2, #0
9000b736:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
9000b738:	68fb      	ldr	r3, [r7, #12]
9000b73a:	2200      	movs	r2, #0
9000b73c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
9000b73e:	68fb      	ldr	r3, [r7, #12]
9000b740:	4a45      	ldr	r2, [pc, #276]	; (9000b858 <netif_add+0x188>)
9000b742:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
9000b744:	68fb      	ldr	r3, [r7, #12]
9000b746:	2200      	movs	r2, #0
9000b748:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
9000b74a:	68fb      	ldr	r3, [r7, #12]
9000b74c:	2200      	movs	r2, #0
9000b74e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
9000b752:	68fb      	ldr	r3, [r7, #12]
9000b754:	2200      	movs	r2, #0
9000b756:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
9000b758:	68fb      	ldr	r3, [r7, #12]
9000b75a:	6a3a      	ldr	r2, [r7, #32]
9000b75c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
9000b75e:	4b3f      	ldr	r3, [pc, #252]	; (9000b85c <netif_add+0x18c>)
9000b760:	781a      	ldrb	r2, [r3, #0]
9000b762:	68fb      	ldr	r3, [r7, #12]
9000b764:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
9000b768:	68fb      	ldr	r3, [r7, #12]
9000b76a:	6aba      	ldr	r2, [r7, #40]	; 0x28
9000b76c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
9000b76e:	683b      	ldr	r3, [r7, #0]
9000b770:	687a      	ldr	r2, [r7, #4]
9000b772:	68b9      	ldr	r1, [r7, #8]
9000b774:	68f8      	ldr	r0, [r7, #12]
9000b776:	f000 f913 	bl	9000b9a0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
9000b77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000b77c:	68f8      	ldr	r0, [r7, #12]
9000b77e:	4798      	blx	r3
9000b780:	4603      	mov	r3, r0
9000b782:	2b00      	cmp	r3, #0
9000b784:	d001      	beq.n	9000b78a <netif_add+0xba>
    return NULL;
9000b786:	2300      	movs	r3, #0
9000b788:	e058      	b.n	9000b83c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
9000b78a:	68fb      	ldr	r3, [r7, #12]
9000b78c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
9000b790:	2bff      	cmp	r3, #255	; 0xff
9000b792:	d103      	bne.n	9000b79c <netif_add+0xcc>
        netif->num = 0;
9000b794:	68fb      	ldr	r3, [r7, #12]
9000b796:	2200      	movs	r2, #0
9000b798:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
9000b79c:	2300      	movs	r3, #0
9000b79e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
9000b7a0:	4b2f      	ldr	r3, [pc, #188]	; (9000b860 <netif_add+0x190>)
9000b7a2:	681b      	ldr	r3, [r3, #0]
9000b7a4:	617b      	str	r3, [r7, #20]
9000b7a6:	e02b      	b.n	9000b800 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
9000b7a8:	697a      	ldr	r2, [r7, #20]
9000b7aa:	68fb      	ldr	r3, [r7, #12]
9000b7ac:	429a      	cmp	r2, r3
9000b7ae:	d106      	bne.n	9000b7be <netif_add+0xee>
9000b7b0:	4b24      	ldr	r3, [pc, #144]	; (9000b844 <netif_add+0x174>)
9000b7b2:	f240 128b 	movw	r2, #395	; 0x18b
9000b7b6:	492b      	ldr	r1, [pc, #172]	; (9000b864 <netif_add+0x194>)
9000b7b8:	4824      	ldr	r0, [pc, #144]	; (9000b84c <netif_add+0x17c>)
9000b7ba:	f00a fa1b 	bl	90015bf4 <iprintf>
        num_netifs++;
9000b7be:	693b      	ldr	r3, [r7, #16]
9000b7c0:	3301      	adds	r3, #1
9000b7c2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
9000b7c4:	693b      	ldr	r3, [r7, #16]
9000b7c6:	2bff      	cmp	r3, #255	; 0xff
9000b7c8:	dd06      	ble.n	9000b7d8 <netif_add+0x108>
9000b7ca:	4b1e      	ldr	r3, [pc, #120]	; (9000b844 <netif_add+0x174>)
9000b7cc:	f240 128d 	movw	r2, #397	; 0x18d
9000b7d0:	4925      	ldr	r1, [pc, #148]	; (9000b868 <netif_add+0x198>)
9000b7d2:	481e      	ldr	r0, [pc, #120]	; (9000b84c <netif_add+0x17c>)
9000b7d4:	f00a fa0e 	bl	90015bf4 <iprintf>
        if (netif2->num == netif->num) {
9000b7d8:	697b      	ldr	r3, [r7, #20]
9000b7da:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
9000b7de:	68fb      	ldr	r3, [r7, #12]
9000b7e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
9000b7e4:	429a      	cmp	r2, r3
9000b7e6:	d108      	bne.n	9000b7fa <netif_add+0x12a>
          netif->num++;
9000b7e8:	68fb      	ldr	r3, [r7, #12]
9000b7ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
9000b7ee:	3301      	adds	r3, #1
9000b7f0:	b2da      	uxtb	r2, r3
9000b7f2:	68fb      	ldr	r3, [r7, #12]
9000b7f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
9000b7f8:	e005      	b.n	9000b806 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
9000b7fa:	697b      	ldr	r3, [r7, #20]
9000b7fc:	681b      	ldr	r3, [r3, #0]
9000b7fe:	617b      	str	r3, [r7, #20]
9000b800:	697b      	ldr	r3, [r7, #20]
9000b802:	2b00      	cmp	r3, #0
9000b804:	d1d0      	bne.n	9000b7a8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
9000b806:	697b      	ldr	r3, [r7, #20]
9000b808:	2b00      	cmp	r3, #0
9000b80a:	d1be      	bne.n	9000b78a <netif_add+0xba>
  }
  if (netif->num == 254) {
9000b80c:	68fb      	ldr	r3, [r7, #12]
9000b80e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
9000b812:	2bfe      	cmp	r3, #254	; 0xfe
9000b814:	d103      	bne.n	9000b81e <netif_add+0x14e>
    netif_num = 0;
9000b816:	4b11      	ldr	r3, [pc, #68]	; (9000b85c <netif_add+0x18c>)
9000b818:	2200      	movs	r2, #0
9000b81a:	701a      	strb	r2, [r3, #0]
9000b81c:	e006      	b.n	9000b82c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
9000b81e:	68fb      	ldr	r3, [r7, #12]
9000b820:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
9000b824:	3301      	adds	r3, #1
9000b826:	b2da      	uxtb	r2, r3
9000b828:	4b0c      	ldr	r3, [pc, #48]	; (9000b85c <netif_add+0x18c>)
9000b82a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
9000b82c:	4b0c      	ldr	r3, [pc, #48]	; (9000b860 <netif_add+0x190>)
9000b82e:	681a      	ldr	r2, [r3, #0]
9000b830:	68fb      	ldr	r3, [r7, #12]
9000b832:	601a      	str	r2, [r3, #0]
  netif_list = netif;
9000b834:	4a0a      	ldr	r2, [pc, #40]	; (9000b860 <netif_add+0x190>)
9000b836:	68fb      	ldr	r3, [r7, #12]
9000b838:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
9000b83a:	68fb      	ldr	r3, [r7, #12]
}
9000b83c:	4618      	mov	r0, r3
9000b83e:	3718      	adds	r7, #24
9000b840:	46bd      	mov	sp, r7
9000b842:	bd80      	pop	{r7, pc}
9000b844:	900180f8 	.word	0x900180f8
9000b848:	9001818c 	.word	0x9001818c
9000b84c:	90018148 	.word	0x90018148
9000b850:	900181a8 	.word	0x900181a8
9000b854:	90021134 	.word	0x90021134
9000b858:	9000bc7b 	.word	0x9000bc7b
9000b85c:	2401f3a0 	.word	0x2401f3a0
9000b860:	2401f398 	.word	0x2401f398
9000b864:	900181cc 	.word	0x900181cc
9000b868:	900181e0 	.word	0x900181e0

9000b86c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
9000b86c:	b580      	push	{r7, lr}
9000b86e:	b082      	sub	sp, #8
9000b870:	af00      	add	r7, sp, #0
9000b872:	6078      	str	r0, [r7, #4]
9000b874:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
9000b876:	6839      	ldr	r1, [r7, #0]
9000b878:	6878      	ldr	r0, [r7, #4]
9000b87a:	f002 fe23 	bl	9000e4c4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
9000b87e:	6839      	ldr	r1, [r7, #0]
9000b880:	6878      	ldr	r0, [r7, #4]
9000b882:	f007 fb8f 	bl	90012fa4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
9000b886:	bf00      	nop
9000b888:	3708      	adds	r7, #8
9000b88a:	46bd      	mov	sp, r7
9000b88c:	bd80      	pop	{r7, pc}
	...

9000b890 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
9000b890:	b580      	push	{r7, lr}
9000b892:	b086      	sub	sp, #24
9000b894:	af00      	add	r7, sp, #0
9000b896:	60f8      	str	r0, [r7, #12]
9000b898:	60b9      	str	r1, [r7, #8]
9000b89a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
9000b89c:	68bb      	ldr	r3, [r7, #8]
9000b89e:	2b00      	cmp	r3, #0
9000b8a0:	d106      	bne.n	9000b8b0 <netif_do_set_ipaddr+0x20>
9000b8a2:	4b1d      	ldr	r3, [pc, #116]	; (9000b918 <netif_do_set_ipaddr+0x88>)
9000b8a4:	f240 12cb 	movw	r2, #459	; 0x1cb
9000b8a8:	491c      	ldr	r1, [pc, #112]	; (9000b91c <netif_do_set_ipaddr+0x8c>)
9000b8aa:	481d      	ldr	r0, [pc, #116]	; (9000b920 <netif_do_set_ipaddr+0x90>)
9000b8ac:	f00a f9a2 	bl	90015bf4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
9000b8b0:	687b      	ldr	r3, [r7, #4]
9000b8b2:	2b00      	cmp	r3, #0
9000b8b4:	d106      	bne.n	9000b8c4 <netif_do_set_ipaddr+0x34>
9000b8b6:	4b18      	ldr	r3, [pc, #96]	; (9000b918 <netif_do_set_ipaddr+0x88>)
9000b8b8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
9000b8bc:	4917      	ldr	r1, [pc, #92]	; (9000b91c <netif_do_set_ipaddr+0x8c>)
9000b8be:	4818      	ldr	r0, [pc, #96]	; (9000b920 <netif_do_set_ipaddr+0x90>)
9000b8c0:	f00a f998 	bl	90015bf4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
9000b8c4:	68bb      	ldr	r3, [r7, #8]
9000b8c6:	681a      	ldr	r2, [r3, #0]
9000b8c8:	68fb      	ldr	r3, [r7, #12]
9000b8ca:	3304      	adds	r3, #4
9000b8cc:	681b      	ldr	r3, [r3, #0]
9000b8ce:	429a      	cmp	r2, r3
9000b8d0:	d01c      	beq.n	9000b90c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
9000b8d2:	68bb      	ldr	r3, [r7, #8]
9000b8d4:	681b      	ldr	r3, [r3, #0]
9000b8d6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
9000b8d8:	68fb      	ldr	r3, [r7, #12]
9000b8da:	3304      	adds	r3, #4
9000b8dc:	681a      	ldr	r2, [r3, #0]
9000b8de:	687b      	ldr	r3, [r7, #4]
9000b8e0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
9000b8e2:	f107 0314 	add.w	r3, r7, #20
9000b8e6:	4619      	mov	r1, r3
9000b8e8:	6878      	ldr	r0, [r7, #4]
9000b8ea:	f7ff ffbf 	bl	9000b86c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
9000b8ee:	68bb      	ldr	r3, [r7, #8]
9000b8f0:	2b00      	cmp	r3, #0
9000b8f2:	d002      	beq.n	9000b8fa <netif_do_set_ipaddr+0x6a>
9000b8f4:	68bb      	ldr	r3, [r7, #8]
9000b8f6:	681b      	ldr	r3, [r3, #0]
9000b8f8:	e000      	b.n	9000b8fc <netif_do_set_ipaddr+0x6c>
9000b8fa:	2300      	movs	r3, #0
9000b8fc:	68fa      	ldr	r2, [r7, #12]
9000b8fe:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
9000b900:	2101      	movs	r1, #1
9000b902:	68f8      	ldr	r0, [r7, #12]
9000b904:	f000 f8d2 	bl	9000baac <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
9000b908:	2301      	movs	r3, #1
9000b90a:	e000      	b.n	9000b90e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
9000b90c:	2300      	movs	r3, #0
}
9000b90e:	4618      	mov	r0, r3
9000b910:	3718      	adds	r7, #24
9000b912:	46bd      	mov	sp, r7
9000b914:	bd80      	pop	{r7, pc}
9000b916:	bf00      	nop
9000b918:	900180f8 	.word	0x900180f8
9000b91c:	90018210 	.word	0x90018210
9000b920:	90018148 	.word	0x90018148

9000b924 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
9000b924:	b480      	push	{r7}
9000b926:	b085      	sub	sp, #20
9000b928:	af00      	add	r7, sp, #0
9000b92a:	60f8      	str	r0, [r7, #12]
9000b92c:	60b9      	str	r1, [r7, #8]
9000b92e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
9000b930:	68bb      	ldr	r3, [r7, #8]
9000b932:	681a      	ldr	r2, [r3, #0]
9000b934:	68fb      	ldr	r3, [r7, #12]
9000b936:	3308      	adds	r3, #8
9000b938:	681b      	ldr	r3, [r3, #0]
9000b93a:	429a      	cmp	r2, r3
9000b93c:	d00a      	beq.n	9000b954 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
9000b93e:	68bb      	ldr	r3, [r7, #8]
9000b940:	2b00      	cmp	r3, #0
9000b942:	d002      	beq.n	9000b94a <netif_do_set_netmask+0x26>
9000b944:	68bb      	ldr	r3, [r7, #8]
9000b946:	681b      	ldr	r3, [r3, #0]
9000b948:	e000      	b.n	9000b94c <netif_do_set_netmask+0x28>
9000b94a:	2300      	movs	r3, #0
9000b94c:	68fa      	ldr	r2, [r7, #12]
9000b94e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
9000b950:	2301      	movs	r3, #1
9000b952:	e000      	b.n	9000b956 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
9000b954:	2300      	movs	r3, #0
}
9000b956:	4618      	mov	r0, r3
9000b958:	3714      	adds	r7, #20
9000b95a:	46bd      	mov	sp, r7
9000b95c:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b960:	4770      	bx	lr

9000b962 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
9000b962:	b480      	push	{r7}
9000b964:	b085      	sub	sp, #20
9000b966:	af00      	add	r7, sp, #0
9000b968:	60f8      	str	r0, [r7, #12]
9000b96a:	60b9      	str	r1, [r7, #8]
9000b96c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
9000b96e:	68bb      	ldr	r3, [r7, #8]
9000b970:	681a      	ldr	r2, [r3, #0]
9000b972:	68fb      	ldr	r3, [r7, #12]
9000b974:	330c      	adds	r3, #12
9000b976:	681b      	ldr	r3, [r3, #0]
9000b978:	429a      	cmp	r2, r3
9000b97a:	d00a      	beq.n	9000b992 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
9000b97c:	68bb      	ldr	r3, [r7, #8]
9000b97e:	2b00      	cmp	r3, #0
9000b980:	d002      	beq.n	9000b988 <netif_do_set_gw+0x26>
9000b982:	68bb      	ldr	r3, [r7, #8]
9000b984:	681b      	ldr	r3, [r3, #0]
9000b986:	e000      	b.n	9000b98a <netif_do_set_gw+0x28>
9000b988:	2300      	movs	r3, #0
9000b98a:	68fa      	ldr	r2, [r7, #12]
9000b98c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
9000b98e:	2301      	movs	r3, #1
9000b990:	e000      	b.n	9000b994 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
9000b992:	2300      	movs	r3, #0
}
9000b994:	4618      	mov	r0, r3
9000b996:	3714      	adds	r7, #20
9000b998:	46bd      	mov	sp, r7
9000b99a:	f85d 7b04 	ldr.w	r7, [sp], #4
9000b99e:	4770      	bx	lr

9000b9a0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
9000b9a0:	b580      	push	{r7, lr}
9000b9a2:	b088      	sub	sp, #32
9000b9a4:	af00      	add	r7, sp, #0
9000b9a6:	60f8      	str	r0, [r7, #12]
9000b9a8:	60b9      	str	r1, [r7, #8]
9000b9aa:	607a      	str	r2, [r7, #4]
9000b9ac:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
9000b9ae:	2300      	movs	r3, #0
9000b9b0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
9000b9b2:	2300      	movs	r3, #0
9000b9b4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
9000b9b6:	68bb      	ldr	r3, [r7, #8]
9000b9b8:	2b00      	cmp	r3, #0
9000b9ba:	d101      	bne.n	9000b9c0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
9000b9bc:	4b1c      	ldr	r3, [pc, #112]	; (9000ba30 <netif_set_addr+0x90>)
9000b9be:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
9000b9c0:	687b      	ldr	r3, [r7, #4]
9000b9c2:	2b00      	cmp	r3, #0
9000b9c4:	d101      	bne.n	9000b9ca <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
9000b9c6:	4b1a      	ldr	r3, [pc, #104]	; (9000ba30 <netif_set_addr+0x90>)
9000b9c8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
9000b9ca:	683b      	ldr	r3, [r7, #0]
9000b9cc:	2b00      	cmp	r3, #0
9000b9ce:	d101      	bne.n	9000b9d4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
9000b9d0:	4b17      	ldr	r3, [pc, #92]	; (9000ba30 <netif_set_addr+0x90>)
9000b9d2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
9000b9d4:	68bb      	ldr	r3, [r7, #8]
9000b9d6:	2b00      	cmp	r3, #0
9000b9d8:	d003      	beq.n	9000b9e2 <netif_set_addr+0x42>
9000b9da:	68bb      	ldr	r3, [r7, #8]
9000b9dc:	681b      	ldr	r3, [r3, #0]
9000b9de:	2b00      	cmp	r3, #0
9000b9e0:	d101      	bne.n	9000b9e6 <netif_set_addr+0x46>
9000b9e2:	2301      	movs	r3, #1
9000b9e4:	e000      	b.n	9000b9e8 <netif_set_addr+0x48>
9000b9e6:	2300      	movs	r3, #0
9000b9e8:	617b      	str	r3, [r7, #20]
  if (remove) {
9000b9ea:	697b      	ldr	r3, [r7, #20]
9000b9ec:	2b00      	cmp	r3, #0
9000b9ee:	d006      	beq.n	9000b9fe <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
9000b9f0:	f107 0310 	add.w	r3, r7, #16
9000b9f4:	461a      	mov	r2, r3
9000b9f6:	68b9      	ldr	r1, [r7, #8]
9000b9f8:	68f8      	ldr	r0, [r7, #12]
9000b9fa:	f7ff ff49 	bl	9000b890 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
9000b9fe:	69fa      	ldr	r2, [r7, #28]
9000ba00:	6879      	ldr	r1, [r7, #4]
9000ba02:	68f8      	ldr	r0, [r7, #12]
9000ba04:	f7ff ff8e 	bl	9000b924 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
9000ba08:	69ba      	ldr	r2, [r7, #24]
9000ba0a:	6839      	ldr	r1, [r7, #0]
9000ba0c:	68f8      	ldr	r0, [r7, #12]
9000ba0e:	f7ff ffa8 	bl	9000b962 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
9000ba12:	697b      	ldr	r3, [r7, #20]
9000ba14:	2b00      	cmp	r3, #0
9000ba16:	d106      	bne.n	9000ba26 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
9000ba18:	f107 0310 	add.w	r3, r7, #16
9000ba1c:	461a      	mov	r2, r3
9000ba1e:	68b9      	ldr	r1, [r7, #8]
9000ba20:	68f8      	ldr	r0, [r7, #12]
9000ba22:	f7ff ff35 	bl	9000b890 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
9000ba26:	bf00      	nop
9000ba28:	3720      	adds	r7, #32
9000ba2a:	46bd      	mov	sp, r7
9000ba2c:	bd80      	pop	{r7, pc}
9000ba2e:	bf00      	nop
9000ba30:	90021134 	.word	0x90021134

9000ba34 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
9000ba34:	b480      	push	{r7}
9000ba36:	b083      	sub	sp, #12
9000ba38:	af00      	add	r7, sp, #0
9000ba3a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
9000ba3c:	4a04      	ldr	r2, [pc, #16]	; (9000ba50 <netif_set_default+0x1c>)
9000ba3e:	687b      	ldr	r3, [r7, #4]
9000ba40:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
9000ba42:	bf00      	nop
9000ba44:	370c      	adds	r7, #12
9000ba46:	46bd      	mov	sp, r7
9000ba48:	f85d 7b04 	ldr.w	r7, [sp], #4
9000ba4c:	4770      	bx	lr
9000ba4e:	bf00      	nop
9000ba50:	2401f39c 	.word	0x2401f39c

9000ba54 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
9000ba54:	b580      	push	{r7, lr}
9000ba56:	b082      	sub	sp, #8
9000ba58:	af00      	add	r7, sp, #0
9000ba5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
9000ba5c:	687b      	ldr	r3, [r7, #4]
9000ba5e:	2b00      	cmp	r3, #0
9000ba60:	d107      	bne.n	9000ba72 <netif_set_up+0x1e>
9000ba62:	4b0f      	ldr	r3, [pc, #60]	; (9000baa0 <netif_set_up+0x4c>)
9000ba64:	f44f 7254 	mov.w	r2, #848	; 0x350
9000ba68:	490e      	ldr	r1, [pc, #56]	; (9000baa4 <netif_set_up+0x50>)
9000ba6a:	480f      	ldr	r0, [pc, #60]	; (9000baa8 <netif_set_up+0x54>)
9000ba6c:	f00a f8c2 	bl	90015bf4 <iprintf>
9000ba70:	e013      	b.n	9000ba9a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
9000ba72:	687b      	ldr	r3, [r7, #4]
9000ba74:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
9000ba78:	f003 0301 	and.w	r3, r3, #1
9000ba7c:	2b00      	cmp	r3, #0
9000ba7e:	d10c      	bne.n	9000ba9a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
9000ba80:	687b      	ldr	r3, [r7, #4]
9000ba82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
9000ba86:	f043 0301 	orr.w	r3, r3, #1
9000ba8a:	b2da      	uxtb	r2, r3
9000ba8c:	687b      	ldr	r3, [r7, #4]
9000ba8e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
9000ba92:	2103      	movs	r1, #3
9000ba94:	6878      	ldr	r0, [r7, #4]
9000ba96:	f000 f809 	bl	9000baac <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
9000ba9a:	3708      	adds	r7, #8
9000ba9c:	46bd      	mov	sp, r7
9000ba9e:	bd80      	pop	{r7, pc}
9000baa0:	900180f8 	.word	0x900180f8
9000baa4:	90018280 	.word	0x90018280
9000baa8:	90018148 	.word	0x90018148

9000baac <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
9000baac:	b580      	push	{r7, lr}
9000baae:	b082      	sub	sp, #8
9000bab0:	af00      	add	r7, sp, #0
9000bab2:	6078      	str	r0, [r7, #4]
9000bab4:	460b      	mov	r3, r1
9000bab6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
9000bab8:	687b      	ldr	r3, [r7, #4]
9000baba:	2b00      	cmp	r3, #0
9000babc:	d106      	bne.n	9000bacc <netif_issue_reports+0x20>
9000babe:	4b18      	ldr	r3, [pc, #96]	; (9000bb20 <netif_issue_reports+0x74>)
9000bac0:	f240 326d 	movw	r2, #877	; 0x36d
9000bac4:	4917      	ldr	r1, [pc, #92]	; (9000bb24 <netif_issue_reports+0x78>)
9000bac6:	4818      	ldr	r0, [pc, #96]	; (9000bb28 <netif_issue_reports+0x7c>)
9000bac8:	f00a f894 	bl	90015bf4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
9000bacc:	687b      	ldr	r3, [r7, #4]
9000bace:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
9000bad2:	f003 0304 	and.w	r3, r3, #4
9000bad6:	2b00      	cmp	r3, #0
9000bad8:	d01e      	beq.n	9000bb18 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
9000bada:	687b      	ldr	r3, [r7, #4]
9000badc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
9000bae0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
9000bae4:	2b00      	cmp	r3, #0
9000bae6:	d017      	beq.n	9000bb18 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
9000bae8:	78fb      	ldrb	r3, [r7, #3]
9000baea:	f003 0301 	and.w	r3, r3, #1
9000baee:	2b00      	cmp	r3, #0
9000baf0:	d013      	beq.n	9000bb1a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
9000baf2:	687b      	ldr	r3, [r7, #4]
9000baf4:	3304      	adds	r3, #4
9000baf6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
9000baf8:	2b00      	cmp	r3, #0
9000bafa:	d00e      	beq.n	9000bb1a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
9000bafc:	687b      	ldr	r3, [r7, #4]
9000bafe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
9000bb02:	f003 0308 	and.w	r3, r3, #8
9000bb06:	2b00      	cmp	r3, #0
9000bb08:	d007      	beq.n	9000bb1a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
9000bb0a:	687b      	ldr	r3, [r7, #4]
9000bb0c:	3304      	adds	r3, #4
9000bb0e:	4619      	mov	r1, r3
9000bb10:	6878      	ldr	r0, [r7, #4]
9000bb12:	f008 f9b1 	bl	90013e78 <etharp_request>
9000bb16:	e000      	b.n	9000bb1a <netif_issue_reports+0x6e>
    return;
9000bb18:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
9000bb1a:	3708      	adds	r7, #8
9000bb1c:	46bd      	mov	sp, r7
9000bb1e:	bd80      	pop	{r7, pc}
9000bb20:	900180f8 	.word	0x900180f8
9000bb24:	9001829c 	.word	0x9001829c
9000bb28:	90018148 	.word	0x90018148

9000bb2c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
9000bb2c:	b580      	push	{r7, lr}
9000bb2e:	b082      	sub	sp, #8
9000bb30:	af00      	add	r7, sp, #0
9000bb32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
9000bb34:	687b      	ldr	r3, [r7, #4]
9000bb36:	2b00      	cmp	r3, #0
9000bb38:	d107      	bne.n	9000bb4a <netif_set_down+0x1e>
9000bb3a:	4b12      	ldr	r3, [pc, #72]	; (9000bb84 <netif_set_down+0x58>)
9000bb3c:	f240 329b 	movw	r2, #923	; 0x39b
9000bb40:	4911      	ldr	r1, [pc, #68]	; (9000bb88 <netif_set_down+0x5c>)
9000bb42:	4812      	ldr	r0, [pc, #72]	; (9000bb8c <netif_set_down+0x60>)
9000bb44:	f00a f856 	bl	90015bf4 <iprintf>
9000bb48:	e019      	b.n	9000bb7e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
9000bb4a:	687b      	ldr	r3, [r7, #4]
9000bb4c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
9000bb50:	f003 0301 	and.w	r3, r3, #1
9000bb54:	2b00      	cmp	r3, #0
9000bb56:	d012      	beq.n	9000bb7e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
9000bb58:	687b      	ldr	r3, [r7, #4]
9000bb5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
9000bb5e:	f023 0301 	bic.w	r3, r3, #1
9000bb62:	b2da      	uxtb	r2, r3
9000bb64:	687b      	ldr	r3, [r7, #4]
9000bb66:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
9000bb6a:	687b      	ldr	r3, [r7, #4]
9000bb6c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
9000bb70:	f003 0308 	and.w	r3, r3, #8
9000bb74:	2b00      	cmp	r3, #0
9000bb76:	d002      	beq.n	9000bb7e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
9000bb78:	6878      	ldr	r0, [r7, #4]
9000bb7a:	f007 fd3b 	bl	900135f4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
9000bb7e:	3708      	adds	r7, #8
9000bb80:	46bd      	mov	sp, r7
9000bb82:	bd80      	pop	{r7, pc}
9000bb84:	900180f8 	.word	0x900180f8
9000bb88:	900182c0 	.word	0x900182c0
9000bb8c:	90018148 	.word	0x90018148

9000bb90 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
9000bb90:	b580      	push	{r7, lr}
9000bb92:	b082      	sub	sp, #8
9000bb94:	af00      	add	r7, sp, #0
9000bb96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
9000bb98:	687b      	ldr	r3, [r7, #4]
9000bb9a:	2b00      	cmp	r3, #0
9000bb9c:	d107      	bne.n	9000bbae <netif_set_link_up+0x1e>
9000bb9e:	4b13      	ldr	r3, [pc, #76]	; (9000bbec <netif_set_link_up+0x5c>)
9000bba0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
9000bba4:	4912      	ldr	r1, [pc, #72]	; (9000bbf0 <netif_set_link_up+0x60>)
9000bba6:	4813      	ldr	r0, [pc, #76]	; (9000bbf4 <netif_set_link_up+0x64>)
9000bba8:	f00a f824 	bl	90015bf4 <iprintf>
9000bbac:	e01b      	b.n	9000bbe6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
9000bbae:	687b      	ldr	r3, [r7, #4]
9000bbb0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
9000bbb4:	f003 0304 	and.w	r3, r3, #4
9000bbb8:	2b00      	cmp	r3, #0
9000bbba:	d114      	bne.n	9000bbe6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
9000bbbc:	687b      	ldr	r3, [r7, #4]
9000bbbe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
9000bbc2:	f043 0304 	orr.w	r3, r3, #4
9000bbc6:	b2da      	uxtb	r2, r3
9000bbc8:	687b      	ldr	r3, [r7, #4]
9000bbca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
9000bbce:	2103      	movs	r1, #3
9000bbd0:	6878      	ldr	r0, [r7, #4]
9000bbd2:	f7ff ff6b 	bl	9000baac <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
9000bbd6:	687b      	ldr	r3, [r7, #4]
9000bbd8:	69db      	ldr	r3, [r3, #28]
9000bbda:	2b00      	cmp	r3, #0
9000bbdc:	d003      	beq.n	9000bbe6 <netif_set_link_up+0x56>
9000bbde:	687b      	ldr	r3, [r7, #4]
9000bbe0:	69db      	ldr	r3, [r3, #28]
9000bbe2:	6878      	ldr	r0, [r7, #4]
9000bbe4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
9000bbe6:	3708      	adds	r7, #8
9000bbe8:	46bd      	mov	sp, r7
9000bbea:	bd80      	pop	{r7, pc}
9000bbec:	900180f8 	.word	0x900180f8
9000bbf0:	900182e0 	.word	0x900182e0
9000bbf4:	90018148 	.word	0x90018148

9000bbf8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
9000bbf8:	b580      	push	{r7, lr}
9000bbfa:	b082      	sub	sp, #8
9000bbfc:	af00      	add	r7, sp, #0
9000bbfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
9000bc00:	687b      	ldr	r3, [r7, #4]
9000bc02:	2b00      	cmp	r3, #0
9000bc04:	d107      	bne.n	9000bc16 <netif_set_link_down+0x1e>
9000bc06:	4b11      	ldr	r3, [pc, #68]	; (9000bc4c <netif_set_link_down+0x54>)
9000bc08:	f240 4206 	movw	r2, #1030	; 0x406
9000bc0c:	4910      	ldr	r1, [pc, #64]	; (9000bc50 <netif_set_link_down+0x58>)
9000bc0e:	4811      	ldr	r0, [pc, #68]	; (9000bc54 <netif_set_link_down+0x5c>)
9000bc10:	f009 fff0 	bl	90015bf4 <iprintf>
9000bc14:	e017      	b.n	9000bc46 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
9000bc16:	687b      	ldr	r3, [r7, #4]
9000bc18:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
9000bc1c:	f003 0304 	and.w	r3, r3, #4
9000bc20:	2b00      	cmp	r3, #0
9000bc22:	d010      	beq.n	9000bc46 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
9000bc24:	687b      	ldr	r3, [r7, #4]
9000bc26:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
9000bc2a:	f023 0304 	bic.w	r3, r3, #4
9000bc2e:	b2da      	uxtb	r2, r3
9000bc30:	687b      	ldr	r3, [r7, #4]
9000bc32:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
9000bc36:	687b      	ldr	r3, [r7, #4]
9000bc38:	69db      	ldr	r3, [r3, #28]
9000bc3a:	2b00      	cmp	r3, #0
9000bc3c:	d003      	beq.n	9000bc46 <netif_set_link_down+0x4e>
9000bc3e:	687b      	ldr	r3, [r7, #4]
9000bc40:	69db      	ldr	r3, [r3, #28]
9000bc42:	6878      	ldr	r0, [r7, #4]
9000bc44:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
9000bc46:	3708      	adds	r7, #8
9000bc48:	46bd      	mov	sp, r7
9000bc4a:	bd80      	pop	{r7, pc}
9000bc4c:	900180f8 	.word	0x900180f8
9000bc50:	90018304 	.word	0x90018304
9000bc54:	90018148 	.word	0x90018148

9000bc58 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
9000bc58:	b480      	push	{r7}
9000bc5a:	b083      	sub	sp, #12
9000bc5c:	af00      	add	r7, sp, #0
9000bc5e:	6078      	str	r0, [r7, #4]
9000bc60:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
9000bc62:	687b      	ldr	r3, [r7, #4]
9000bc64:	2b00      	cmp	r3, #0
9000bc66:	d002      	beq.n	9000bc6e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
9000bc68:	687b      	ldr	r3, [r7, #4]
9000bc6a:	683a      	ldr	r2, [r7, #0]
9000bc6c:	61da      	str	r2, [r3, #28]
  }
}
9000bc6e:	bf00      	nop
9000bc70:	370c      	adds	r7, #12
9000bc72:	46bd      	mov	sp, r7
9000bc74:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bc78:	4770      	bx	lr

9000bc7a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
9000bc7a:	b480      	push	{r7}
9000bc7c:	b085      	sub	sp, #20
9000bc7e:	af00      	add	r7, sp, #0
9000bc80:	60f8      	str	r0, [r7, #12]
9000bc82:	60b9      	str	r1, [r7, #8]
9000bc84:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
9000bc86:	f06f 030b 	mvn.w	r3, #11
}
9000bc8a:	4618      	mov	r0, r3
9000bc8c:	3714      	adds	r7, #20
9000bc8e:	46bd      	mov	sp, r7
9000bc90:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bc94:	4770      	bx	lr
	...

9000bc98 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
9000bc98:	b480      	push	{r7}
9000bc9a:	b085      	sub	sp, #20
9000bc9c:	af00      	add	r7, sp, #0
9000bc9e:	4603      	mov	r3, r0
9000bca0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
9000bca2:	79fb      	ldrb	r3, [r7, #7]
9000bca4:	2b00      	cmp	r3, #0
9000bca6:	d013      	beq.n	9000bcd0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
9000bca8:	4b0d      	ldr	r3, [pc, #52]	; (9000bce0 <netif_get_by_index+0x48>)
9000bcaa:	681b      	ldr	r3, [r3, #0]
9000bcac:	60fb      	str	r3, [r7, #12]
9000bcae:	e00c      	b.n	9000bcca <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
9000bcb0:	68fb      	ldr	r3, [r7, #12]
9000bcb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
9000bcb6:	3301      	adds	r3, #1
9000bcb8:	b2db      	uxtb	r3, r3
9000bcba:	79fa      	ldrb	r2, [r7, #7]
9000bcbc:	429a      	cmp	r2, r3
9000bcbe:	d101      	bne.n	9000bcc4 <netif_get_by_index+0x2c>
        return netif; /* found! */
9000bcc0:	68fb      	ldr	r3, [r7, #12]
9000bcc2:	e006      	b.n	9000bcd2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
9000bcc4:	68fb      	ldr	r3, [r7, #12]
9000bcc6:	681b      	ldr	r3, [r3, #0]
9000bcc8:	60fb      	str	r3, [r7, #12]
9000bcca:	68fb      	ldr	r3, [r7, #12]
9000bccc:	2b00      	cmp	r3, #0
9000bcce:	d1ef      	bne.n	9000bcb0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
9000bcd0:	2300      	movs	r3, #0
}
9000bcd2:	4618      	mov	r0, r3
9000bcd4:	3714      	adds	r7, #20
9000bcd6:	46bd      	mov	sp, r7
9000bcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bcdc:	4770      	bx	lr
9000bcde:	bf00      	nop
9000bce0:	2401f398 	.word	0x2401f398

9000bce4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
9000bce4:	b580      	push	{r7, lr}
9000bce6:	b082      	sub	sp, #8
9000bce8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
9000bcea:	f009 fd6f 	bl	900157cc <sys_arch_protect>
9000bcee:	6038      	str	r0, [r7, #0]
9000bcf0:	4b0d      	ldr	r3, [pc, #52]	; (9000bd28 <pbuf_free_ooseq+0x44>)
9000bcf2:	2200      	movs	r2, #0
9000bcf4:	701a      	strb	r2, [r3, #0]
9000bcf6:	6838      	ldr	r0, [r7, #0]
9000bcf8:	f009 fd76 	bl	900157e8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
9000bcfc:	4b0b      	ldr	r3, [pc, #44]	; (9000bd2c <pbuf_free_ooseq+0x48>)
9000bcfe:	681b      	ldr	r3, [r3, #0]
9000bd00:	607b      	str	r3, [r7, #4]
9000bd02:	e00a      	b.n	9000bd1a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
9000bd04:	687b      	ldr	r3, [r7, #4]
9000bd06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000bd08:	2b00      	cmp	r3, #0
9000bd0a:	d003      	beq.n	9000bd14 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
9000bd0c:	6878      	ldr	r0, [r7, #4]
9000bd0e:	f002 fc17 	bl	9000e540 <tcp_free_ooseq>
      return;
9000bd12:	e005      	b.n	9000bd20 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
9000bd14:	687b      	ldr	r3, [r7, #4]
9000bd16:	68db      	ldr	r3, [r3, #12]
9000bd18:	607b      	str	r3, [r7, #4]
9000bd1a:	687b      	ldr	r3, [r7, #4]
9000bd1c:	2b00      	cmp	r3, #0
9000bd1e:	d1f1      	bne.n	9000bd04 <pbuf_free_ooseq+0x20>
    }
  }
}
9000bd20:	3708      	adds	r7, #8
9000bd22:	46bd      	mov	sp, r7
9000bd24:	bd80      	pop	{r7, pc}
9000bd26:	bf00      	nop
9000bd28:	2401f3a1 	.word	0x2401f3a1
9000bd2c:	2401f3b0 	.word	0x2401f3b0

9000bd30 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
9000bd30:	b580      	push	{r7, lr}
9000bd32:	b082      	sub	sp, #8
9000bd34:	af00      	add	r7, sp, #0
9000bd36:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
9000bd38:	f7ff ffd4 	bl	9000bce4 <pbuf_free_ooseq>
}
9000bd3c:	bf00      	nop
9000bd3e:	3708      	adds	r7, #8
9000bd40:	46bd      	mov	sp, r7
9000bd42:	bd80      	pop	{r7, pc}

9000bd44 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
9000bd44:	b580      	push	{r7, lr}
9000bd46:	b082      	sub	sp, #8
9000bd48:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
9000bd4a:	f009 fd3f 	bl	900157cc <sys_arch_protect>
9000bd4e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
9000bd50:	4b0f      	ldr	r3, [pc, #60]	; (9000bd90 <pbuf_pool_is_empty+0x4c>)
9000bd52:	781b      	ldrb	r3, [r3, #0]
9000bd54:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
9000bd56:	4b0e      	ldr	r3, [pc, #56]	; (9000bd90 <pbuf_pool_is_empty+0x4c>)
9000bd58:	2201      	movs	r2, #1
9000bd5a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
9000bd5c:	6878      	ldr	r0, [r7, #4]
9000bd5e:	f009 fd43 	bl	900157e8 <sys_arch_unprotect>

  if (!queued) {
9000bd62:	78fb      	ldrb	r3, [r7, #3]
9000bd64:	2b00      	cmp	r3, #0
9000bd66:	d10f      	bne.n	9000bd88 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
9000bd68:	2100      	movs	r1, #0
9000bd6a:	480a      	ldr	r0, [pc, #40]	; (9000bd94 <pbuf_pool_is_empty+0x50>)
9000bd6c:	f7fc ffd6 	bl	90008d1c <tcpip_try_callback>
9000bd70:	4603      	mov	r3, r0
9000bd72:	2b00      	cmp	r3, #0
9000bd74:	d008      	beq.n	9000bd88 <pbuf_pool_is_empty+0x44>
9000bd76:	f009 fd29 	bl	900157cc <sys_arch_protect>
9000bd7a:	6078      	str	r0, [r7, #4]
9000bd7c:	4b04      	ldr	r3, [pc, #16]	; (9000bd90 <pbuf_pool_is_empty+0x4c>)
9000bd7e:	2200      	movs	r2, #0
9000bd80:	701a      	strb	r2, [r3, #0]
9000bd82:	6878      	ldr	r0, [r7, #4]
9000bd84:	f009 fd30 	bl	900157e8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
9000bd88:	bf00      	nop
9000bd8a:	3708      	adds	r7, #8
9000bd8c:	46bd      	mov	sp, r7
9000bd8e:	bd80      	pop	{r7, pc}
9000bd90:	2401f3a1 	.word	0x2401f3a1
9000bd94:	9000bd31 	.word	0x9000bd31

9000bd98 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
9000bd98:	b480      	push	{r7}
9000bd9a:	b085      	sub	sp, #20
9000bd9c:	af00      	add	r7, sp, #0
9000bd9e:	60f8      	str	r0, [r7, #12]
9000bda0:	60b9      	str	r1, [r7, #8]
9000bda2:	4611      	mov	r1, r2
9000bda4:	461a      	mov	r2, r3
9000bda6:	460b      	mov	r3, r1
9000bda8:	80fb      	strh	r3, [r7, #6]
9000bdaa:	4613      	mov	r3, r2
9000bdac:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
9000bdae:	68fb      	ldr	r3, [r7, #12]
9000bdb0:	2200      	movs	r2, #0
9000bdb2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
9000bdb4:	68fb      	ldr	r3, [r7, #12]
9000bdb6:	68ba      	ldr	r2, [r7, #8]
9000bdb8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
9000bdba:	68fb      	ldr	r3, [r7, #12]
9000bdbc:	88fa      	ldrh	r2, [r7, #6]
9000bdbe:	811a      	strh	r2, [r3, #8]
  p->len = len;
9000bdc0:	68fb      	ldr	r3, [r7, #12]
9000bdc2:	88ba      	ldrh	r2, [r7, #4]
9000bdc4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
9000bdc6:	8b3b      	ldrh	r3, [r7, #24]
9000bdc8:	b2da      	uxtb	r2, r3
9000bdca:	68fb      	ldr	r3, [r7, #12]
9000bdcc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
9000bdce:	68fb      	ldr	r3, [r7, #12]
9000bdd0:	7f3a      	ldrb	r2, [r7, #28]
9000bdd2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
9000bdd4:	68fb      	ldr	r3, [r7, #12]
9000bdd6:	2201      	movs	r2, #1
9000bdd8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
9000bdda:	68fb      	ldr	r3, [r7, #12]
9000bddc:	2200      	movs	r2, #0
9000bdde:	73da      	strb	r2, [r3, #15]
}
9000bde0:	bf00      	nop
9000bde2:	3714      	adds	r7, #20
9000bde4:	46bd      	mov	sp, r7
9000bde6:	f85d 7b04 	ldr.w	r7, [sp], #4
9000bdea:	4770      	bx	lr

9000bdec <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
9000bdec:	b580      	push	{r7, lr}
9000bdee:	b08c      	sub	sp, #48	; 0x30
9000bdf0:	af02      	add	r7, sp, #8
9000bdf2:	4603      	mov	r3, r0
9000bdf4:	71fb      	strb	r3, [r7, #7]
9000bdf6:	460b      	mov	r3, r1
9000bdf8:	80bb      	strh	r3, [r7, #4]
9000bdfa:	4613      	mov	r3, r2
9000bdfc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
9000bdfe:	79fb      	ldrb	r3, [r7, #7]
9000be00:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
9000be02:	887b      	ldrh	r3, [r7, #2]
9000be04:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
9000be08:	d07f      	beq.n	9000bf0a <pbuf_alloc+0x11e>
9000be0a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
9000be0e:	f300 80c8 	bgt.w	9000bfa2 <pbuf_alloc+0x1b6>
9000be12:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
9000be16:	d010      	beq.n	9000be3a <pbuf_alloc+0x4e>
9000be18:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
9000be1c:	f300 80c1 	bgt.w	9000bfa2 <pbuf_alloc+0x1b6>
9000be20:	2b01      	cmp	r3, #1
9000be22:	d002      	beq.n	9000be2a <pbuf_alloc+0x3e>
9000be24:	2b41      	cmp	r3, #65	; 0x41
9000be26:	f040 80bc 	bne.w	9000bfa2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
9000be2a:	887a      	ldrh	r2, [r7, #2]
9000be2c:	88bb      	ldrh	r3, [r7, #4]
9000be2e:	4619      	mov	r1, r3
9000be30:	2000      	movs	r0, #0
9000be32:	f000 f8d1 	bl	9000bfd8 <pbuf_alloc_reference>
9000be36:	6278      	str	r0, [r7, #36]	; 0x24
      break;
9000be38:	e0bd      	b.n	9000bfb6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
9000be3a:	2300      	movs	r3, #0
9000be3c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
9000be3e:	2300      	movs	r3, #0
9000be40:	61fb      	str	r3, [r7, #28]
      rem_len = length;
9000be42:	88bb      	ldrh	r3, [r7, #4]
9000be44:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
9000be46:	200c      	movs	r0, #12
9000be48:	f7ff fb9a 	bl	9000b580 <memp_malloc>
9000be4c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
9000be4e:	693b      	ldr	r3, [r7, #16]
9000be50:	2b00      	cmp	r3, #0
9000be52:	d109      	bne.n	9000be68 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
9000be54:	f7ff ff76 	bl	9000bd44 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
9000be58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000be5a:	2b00      	cmp	r3, #0
9000be5c:	d002      	beq.n	9000be64 <pbuf_alloc+0x78>
            pbuf_free(p);
9000be5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
9000be60:	f000 faa8 	bl	9000c3b4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
9000be64:	2300      	movs	r3, #0
9000be66:	e0a7      	b.n	9000bfb8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
9000be68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
9000be6a:	3303      	adds	r3, #3
9000be6c:	b29b      	uxth	r3, r3
9000be6e:	f023 0303 	bic.w	r3, r3, #3
9000be72:	b29b      	uxth	r3, r3
9000be74:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
9000be78:	b29b      	uxth	r3, r3
9000be7a:	8b7a      	ldrh	r2, [r7, #26]
9000be7c:	4293      	cmp	r3, r2
9000be7e:	bf28      	it	cs
9000be80:	4613      	movcs	r3, r2
9000be82:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
9000be84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
9000be86:	3310      	adds	r3, #16
9000be88:	693a      	ldr	r2, [r7, #16]
9000be8a:	4413      	add	r3, r2
9000be8c:	3303      	adds	r3, #3
9000be8e:	f023 0303 	bic.w	r3, r3, #3
9000be92:	4618      	mov	r0, r3
9000be94:	89f9      	ldrh	r1, [r7, #14]
9000be96:	8b7a      	ldrh	r2, [r7, #26]
9000be98:	2300      	movs	r3, #0
9000be9a:	9301      	str	r3, [sp, #4]
9000be9c:	887b      	ldrh	r3, [r7, #2]
9000be9e:	9300      	str	r3, [sp, #0]
9000bea0:	460b      	mov	r3, r1
9000bea2:	4601      	mov	r1, r0
9000bea4:	6938      	ldr	r0, [r7, #16]
9000bea6:	f7ff ff77 	bl	9000bd98 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
9000beaa:	693b      	ldr	r3, [r7, #16]
9000beac:	685b      	ldr	r3, [r3, #4]
9000beae:	f003 0303 	and.w	r3, r3, #3
9000beb2:	2b00      	cmp	r3, #0
9000beb4:	d006      	beq.n	9000bec4 <pbuf_alloc+0xd8>
9000beb6:	4b42      	ldr	r3, [pc, #264]	; (9000bfc0 <pbuf_alloc+0x1d4>)
9000beb8:	f44f 7280 	mov.w	r2, #256	; 0x100
9000bebc:	4941      	ldr	r1, [pc, #260]	; (9000bfc4 <pbuf_alloc+0x1d8>)
9000bebe:	4842      	ldr	r0, [pc, #264]	; (9000bfc8 <pbuf_alloc+0x1dc>)
9000bec0:	f009 fe98 	bl	90015bf4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
9000bec4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
9000bec6:	3303      	adds	r3, #3
9000bec8:	f023 0303 	bic.w	r3, r3, #3
9000becc:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
9000bed0:	d106      	bne.n	9000bee0 <pbuf_alloc+0xf4>
9000bed2:	4b3b      	ldr	r3, [pc, #236]	; (9000bfc0 <pbuf_alloc+0x1d4>)
9000bed4:	f44f 7281 	mov.w	r2, #258	; 0x102
9000bed8:	493c      	ldr	r1, [pc, #240]	; (9000bfcc <pbuf_alloc+0x1e0>)
9000beda:	483b      	ldr	r0, [pc, #236]	; (9000bfc8 <pbuf_alloc+0x1dc>)
9000bedc:	f009 fe8a 	bl	90015bf4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
9000bee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000bee2:	2b00      	cmp	r3, #0
9000bee4:	d102      	bne.n	9000beec <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
9000bee6:	693b      	ldr	r3, [r7, #16]
9000bee8:	627b      	str	r3, [r7, #36]	; 0x24
9000beea:	e002      	b.n	9000bef2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
9000beec:	69fb      	ldr	r3, [r7, #28]
9000beee:	693a      	ldr	r2, [r7, #16]
9000bef0:	601a      	str	r2, [r3, #0]
        }
        last = q;
9000bef2:	693b      	ldr	r3, [r7, #16]
9000bef4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
9000bef6:	8b7a      	ldrh	r2, [r7, #26]
9000bef8:	89fb      	ldrh	r3, [r7, #14]
9000befa:	1ad3      	subs	r3, r2, r3
9000befc:	837b      	strh	r3, [r7, #26]
        offset = 0;
9000befe:	2300      	movs	r3, #0
9000bf00:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
9000bf02:	8b7b      	ldrh	r3, [r7, #26]
9000bf04:	2b00      	cmp	r3, #0
9000bf06:	d19e      	bne.n	9000be46 <pbuf_alloc+0x5a>
      break;
9000bf08:	e055      	b.n	9000bfb6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
9000bf0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
9000bf0c:	3303      	adds	r3, #3
9000bf0e:	b29b      	uxth	r3, r3
9000bf10:	f023 0303 	bic.w	r3, r3, #3
9000bf14:	b29a      	uxth	r2, r3
9000bf16:	88bb      	ldrh	r3, [r7, #4]
9000bf18:	3303      	adds	r3, #3
9000bf1a:	b29b      	uxth	r3, r3
9000bf1c:	f023 0303 	bic.w	r3, r3, #3
9000bf20:	b29b      	uxth	r3, r3
9000bf22:	4413      	add	r3, r2
9000bf24:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
9000bf26:	8b3b      	ldrh	r3, [r7, #24]
9000bf28:	3310      	adds	r3, #16
9000bf2a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
9000bf2c:	8b3a      	ldrh	r2, [r7, #24]
9000bf2e:	88bb      	ldrh	r3, [r7, #4]
9000bf30:	3303      	adds	r3, #3
9000bf32:	f023 0303 	bic.w	r3, r3, #3
9000bf36:	429a      	cmp	r2, r3
9000bf38:	d306      	bcc.n	9000bf48 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
9000bf3a:	8afa      	ldrh	r2, [r7, #22]
9000bf3c:	88bb      	ldrh	r3, [r7, #4]
9000bf3e:	3303      	adds	r3, #3
9000bf40:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
9000bf44:	429a      	cmp	r2, r3
9000bf46:	d201      	bcs.n	9000bf4c <pbuf_alloc+0x160>
        return NULL;
9000bf48:	2300      	movs	r3, #0
9000bf4a:	e035      	b.n	9000bfb8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
9000bf4c:	8afb      	ldrh	r3, [r7, #22]
9000bf4e:	4618      	mov	r0, r3
9000bf50:	f7ff f972 	bl	9000b238 <mem_malloc>
9000bf54:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
9000bf56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000bf58:	2b00      	cmp	r3, #0
9000bf5a:	d101      	bne.n	9000bf60 <pbuf_alloc+0x174>
        return NULL;
9000bf5c:	2300      	movs	r3, #0
9000bf5e:	e02b      	b.n	9000bfb8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
9000bf60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
9000bf62:	3310      	adds	r3, #16
9000bf64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
9000bf66:	4413      	add	r3, r2
9000bf68:	3303      	adds	r3, #3
9000bf6a:	f023 0303 	bic.w	r3, r3, #3
9000bf6e:	4618      	mov	r0, r3
9000bf70:	88b9      	ldrh	r1, [r7, #4]
9000bf72:	88ba      	ldrh	r2, [r7, #4]
9000bf74:	2300      	movs	r3, #0
9000bf76:	9301      	str	r3, [sp, #4]
9000bf78:	887b      	ldrh	r3, [r7, #2]
9000bf7a:	9300      	str	r3, [sp, #0]
9000bf7c:	460b      	mov	r3, r1
9000bf7e:	4601      	mov	r1, r0
9000bf80:	6a78      	ldr	r0, [r7, #36]	; 0x24
9000bf82:	f7ff ff09 	bl	9000bd98 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
9000bf86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000bf88:	685b      	ldr	r3, [r3, #4]
9000bf8a:	f003 0303 	and.w	r3, r3, #3
9000bf8e:	2b00      	cmp	r3, #0
9000bf90:	d010      	beq.n	9000bfb4 <pbuf_alloc+0x1c8>
9000bf92:	4b0b      	ldr	r3, [pc, #44]	; (9000bfc0 <pbuf_alloc+0x1d4>)
9000bf94:	f44f 7291 	mov.w	r2, #290	; 0x122
9000bf98:	490d      	ldr	r1, [pc, #52]	; (9000bfd0 <pbuf_alloc+0x1e4>)
9000bf9a:	480b      	ldr	r0, [pc, #44]	; (9000bfc8 <pbuf_alloc+0x1dc>)
9000bf9c:	f009 fe2a 	bl	90015bf4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
9000bfa0:	e008      	b.n	9000bfb4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
9000bfa2:	4b07      	ldr	r3, [pc, #28]	; (9000bfc0 <pbuf_alloc+0x1d4>)
9000bfa4:	f240 1227 	movw	r2, #295	; 0x127
9000bfa8:	490a      	ldr	r1, [pc, #40]	; (9000bfd4 <pbuf_alloc+0x1e8>)
9000bfaa:	4807      	ldr	r0, [pc, #28]	; (9000bfc8 <pbuf_alloc+0x1dc>)
9000bfac:	f009 fe22 	bl	90015bf4 <iprintf>
      return NULL;
9000bfb0:	2300      	movs	r3, #0
9000bfb2:	e001      	b.n	9000bfb8 <pbuf_alloc+0x1cc>
      break;
9000bfb4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
9000bfb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
9000bfb8:	4618      	mov	r0, r3
9000bfba:	3728      	adds	r7, #40	; 0x28
9000bfbc:	46bd      	mov	sp, r7
9000bfbe:	bd80      	pop	{r7, pc}
9000bfc0:	90018328 	.word	0x90018328
9000bfc4:	90018358 	.word	0x90018358
9000bfc8:	90018388 	.word	0x90018388
9000bfcc:	900183b0 	.word	0x900183b0
9000bfd0:	900183e4 	.word	0x900183e4
9000bfd4:	90018410 	.word	0x90018410

9000bfd8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
9000bfd8:	b580      	push	{r7, lr}
9000bfda:	b086      	sub	sp, #24
9000bfdc:	af02      	add	r7, sp, #8
9000bfde:	6078      	str	r0, [r7, #4]
9000bfe0:	460b      	mov	r3, r1
9000bfe2:	807b      	strh	r3, [r7, #2]
9000bfe4:	4613      	mov	r3, r2
9000bfe6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
9000bfe8:	883b      	ldrh	r3, [r7, #0]
9000bfea:	2b41      	cmp	r3, #65	; 0x41
9000bfec:	d009      	beq.n	9000c002 <pbuf_alloc_reference+0x2a>
9000bfee:	883b      	ldrh	r3, [r7, #0]
9000bff0:	2b01      	cmp	r3, #1
9000bff2:	d006      	beq.n	9000c002 <pbuf_alloc_reference+0x2a>
9000bff4:	4b0f      	ldr	r3, [pc, #60]	; (9000c034 <pbuf_alloc_reference+0x5c>)
9000bff6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
9000bffa:	490f      	ldr	r1, [pc, #60]	; (9000c038 <pbuf_alloc_reference+0x60>)
9000bffc:	480f      	ldr	r0, [pc, #60]	; (9000c03c <pbuf_alloc_reference+0x64>)
9000bffe:	f009 fdf9 	bl	90015bf4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
9000c002:	200b      	movs	r0, #11
9000c004:	f7ff fabc 	bl	9000b580 <memp_malloc>
9000c008:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
9000c00a:	68fb      	ldr	r3, [r7, #12]
9000c00c:	2b00      	cmp	r3, #0
9000c00e:	d101      	bne.n	9000c014 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
9000c010:	2300      	movs	r3, #0
9000c012:	e00b      	b.n	9000c02c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
9000c014:	8879      	ldrh	r1, [r7, #2]
9000c016:	887a      	ldrh	r2, [r7, #2]
9000c018:	2300      	movs	r3, #0
9000c01a:	9301      	str	r3, [sp, #4]
9000c01c:	883b      	ldrh	r3, [r7, #0]
9000c01e:	9300      	str	r3, [sp, #0]
9000c020:	460b      	mov	r3, r1
9000c022:	6879      	ldr	r1, [r7, #4]
9000c024:	68f8      	ldr	r0, [r7, #12]
9000c026:	f7ff feb7 	bl	9000bd98 <pbuf_init_alloced_pbuf>
  return p;
9000c02a:	68fb      	ldr	r3, [r7, #12]
}
9000c02c:	4618      	mov	r0, r3
9000c02e:	3710      	adds	r7, #16
9000c030:	46bd      	mov	sp, r7
9000c032:	bd80      	pop	{r7, pc}
9000c034:	90018328 	.word	0x90018328
9000c038:	9001842c 	.word	0x9001842c
9000c03c:	90018388 	.word	0x90018388

9000c040 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
9000c040:	b580      	push	{r7, lr}
9000c042:	b088      	sub	sp, #32
9000c044:	af02      	add	r7, sp, #8
9000c046:	607b      	str	r3, [r7, #4]
9000c048:	4603      	mov	r3, r0
9000c04a:	73fb      	strb	r3, [r7, #15]
9000c04c:	460b      	mov	r3, r1
9000c04e:	81bb      	strh	r3, [r7, #12]
9000c050:	4613      	mov	r3, r2
9000c052:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
9000c054:	7bfb      	ldrb	r3, [r7, #15]
9000c056:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
9000c058:	8a7b      	ldrh	r3, [r7, #18]
9000c05a:	3303      	adds	r3, #3
9000c05c:	f023 0203 	bic.w	r2, r3, #3
9000c060:	89bb      	ldrh	r3, [r7, #12]
9000c062:	441a      	add	r2, r3
9000c064:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
9000c066:	429a      	cmp	r2, r3
9000c068:	d901      	bls.n	9000c06e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
9000c06a:	2300      	movs	r3, #0
9000c06c:	e018      	b.n	9000c0a0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
9000c06e:	6a3b      	ldr	r3, [r7, #32]
9000c070:	2b00      	cmp	r3, #0
9000c072:	d007      	beq.n	9000c084 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
9000c074:	8a7b      	ldrh	r3, [r7, #18]
9000c076:	3303      	adds	r3, #3
9000c078:	f023 0303 	bic.w	r3, r3, #3
9000c07c:	6a3a      	ldr	r2, [r7, #32]
9000c07e:	4413      	add	r3, r2
9000c080:	617b      	str	r3, [r7, #20]
9000c082:	e001      	b.n	9000c088 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
9000c084:	2300      	movs	r3, #0
9000c086:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
9000c088:	6878      	ldr	r0, [r7, #4]
9000c08a:	89b9      	ldrh	r1, [r7, #12]
9000c08c:	89ba      	ldrh	r2, [r7, #12]
9000c08e:	2302      	movs	r3, #2
9000c090:	9301      	str	r3, [sp, #4]
9000c092:	897b      	ldrh	r3, [r7, #10]
9000c094:	9300      	str	r3, [sp, #0]
9000c096:	460b      	mov	r3, r1
9000c098:	6979      	ldr	r1, [r7, #20]
9000c09a:	f7ff fe7d 	bl	9000bd98 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
9000c09e:	687b      	ldr	r3, [r7, #4]
}
9000c0a0:	4618      	mov	r0, r3
9000c0a2:	3718      	adds	r7, #24
9000c0a4:	46bd      	mov	sp, r7
9000c0a6:	bd80      	pop	{r7, pc}

9000c0a8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
9000c0a8:	b580      	push	{r7, lr}
9000c0aa:	b084      	sub	sp, #16
9000c0ac:	af00      	add	r7, sp, #0
9000c0ae:	6078      	str	r0, [r7, #4]
9000c0b0:	460b      	mov	r3, r1
9000c0b2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
9000c0b4:	687b      	ldr	r3, [r7, #4]
9000c0b6:	2b00      	cmp	r3, #0
9000c0b8:	d106      	bne.n	9000c0c8 <pbuf_realloc+0x20>
9000c0ba:	4b3a      	ldr	r3, [pc, #232]	; (9000c1a4 <pbuf_realloc+0xfc>)
9000c0bc:	f44f 72cc 	mov.w	r2, #408	; 0x198
9000c0c0:	4939      	ldr	r1, [pc, #228]	; (9000c1a8 <pbuf_realloc+0x100>)
9000c0c2:	483a      	ldr	r0, [pc, #232]	; (9000c1ac <pbuf_realloc+0x104>)
9000c0c4:	f009 fd96 	bl	90015bf4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
9000c0c8:	687b      	ldr	r3, [r7, #4]
9000c0ca:	891b      	ldrh	r3, [r3, #8]
9000c0cc:	887a      	ldrh	r2, [r7, #2]
9000c0ce:	429a      	cmp	r2, r3
9000c0d0:	d263      	bcs.n	9000c19a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
9000c0d2:	687b      	ldr	r3, [r7, #4]
9000c0d4:	891a      	ldrh	r2, [r3, #8]
9000c0d6:	887b      	ldrh	r3, [r7, #2]
9000c0d8:	1ad3      	subs	r3, r2, r3
9000c0da:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
9000c0dc:	887b      	ldrh	r3, [r7, #2]
9000c0de:	817b      	strh	r3, [r7, #10]
  q = p;
9000c0e0:	687b      	ldr	r3, [r7, #4]
9000c0e2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
9000c0e4:	e018      	b.n	9000c118 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
9000c0e6:	68fb      	ldr	r3, [r7, #12]
9000c0e8:	895b      	ldrh	r3, [r3, #10]
9000c0ea:	897a      	ldrh	r2, [r7, #10]
9000c0ec:	1ad3      	subs	r3, r2, r3
9000c0ee:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
9000c0f0:	68fb      	ldr	r3, [r7, #12]
9000c0f2:	891a      	ldrh	r2, [r3, #8]
9000c0f4:	893b      	ldrh	r3, [r7, #8]
9000c0f6:	1ad3      	subs	r3, r2, r3
9000c0f8:	b29a      	uxth	r2, r3
9000c0fa:	68fb      	ldr	r3, [r7, #12]
9000c0fc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
9000c0fe:	68fb      	ldr	r3, [r7, #12]
9000c100:	681b      	ldr	r3, [r3, #0]
9000c102:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
9000c104:	68fb      	ldr	r3, [r7, #12]
9000c106:	2b00      	cmp	r3, #0
9000c108:	d106      	bne.n	9000c118 <pbuf_realloc+0x70>
9000c10a:	4b26      	ldr	r3, [pc, #152]	; (9000c1a4 <pbuf_realloc+0xfc>)
9000c10c:	f240 12af 	movw	r2, #431	; 0x1af
9000c110:	4927      	ldr	r1, [pc, #156]	; (9000c1b0 <pbuf_realloc+0x108>)
9000c112:	4826      	ldr	r0, [pc, #152]	; (9000c1ac <pbuf_realloc+0x104>)
9000c114:	f009 fd6e 	bl	90015bf4 <iprintf>
  while (rem_len > q->len) {
9000c118:	68fb      	ldr	r3, [r7, #12]
9000c11a:	895b      	ldrh	r3, [r3, #10]
9000c11c:	897a      	ldrh	r2, [r7, #10]
9000c11e:	429a      	cmp	r2, r3
9000c120:	d8e1      	bhi.n	9000c0e6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
9000c122:	68fb      	ldr	r3, [r7, #12]
9000c124:	7b1b      	ldrb	r3, [r3, #12]
9000c126:	f003 030f 	and.w	r3, r3, #15
9000c12a:	2b00      	cmp	r3, #0
9000c12c:	d121      	bne.n	9000c172 <pbuf_realloc+0xca>
9000c12e:	68fb      	ldr	r3, [r7, #12]
9000c130:	895b      	ldrh	r3, [r3, #10]
9000c132:	897a      	ldrh	r2, [r7, #10]
9000c134:	429a      	cmp	r2, r3
9000c136:	d01c      	beq.n	9000c172 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
9000c138:	68fb      	ldr	r3, [r7, #12]
9000c13a:	7b5b      	ldrb	r3, [r3, #13]
9000c13c:	f003 0302 	and.w	r3, r3, #2
9000c140:	2b00      	cmp	r3, #0
9000c142:	d116      	bne.n	9000c172 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
9000c144:	68fb      	ldr	r3, [r7, #12]
9000c146:	685a      	ldr	r2, [r3, #4]
9000c148:	68fb      	ldr	r3, [r7, #12]
9000c14a:	1ad3      	subs	r3, r2, r3
9000c14c:	b29a      	uxth	r2, r3
9000c14e:	897b      	ldrh	r3, [r7, #10]
9000c150:	4413      	add	r3, r2
9000c152:	b29b      	uxth	r3, r3
9000c154:	4619      	mov	r1, r3
9000c156:	68f8      	ldr	r0, [r7, #12]
9000c158:	f7fe ff64 	bl	9000b024 <mem_trim>
9000c15c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
9000c15e:	68fb      	ldr	r3, [r7, #12]
9000c160:	2b00      	cmp	r3, #0
9000c162:	d106      	bne.n	9000c172 <pbuf_realloc+0xca>
9000c164:	4b0f      	ldr	r3, [pc, #60]	; (9000c1a4 <pbuf_realloc+0xfc>)
9000c166:	f240 12bd 	movw	r2, #445	; 0x1bd
9000c16a:	4912      	ldr	r1, [pc, #72]	; (9000c1b4 <pbuf_realloc+0x10c>)
9000c16c:	480f      	ldr	r0, [pc, #60]	; (9000c1ac <pbuf_realloc+0x104>)
9000c16e:	f009 fd41 	bl	90015bf4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
9000c172:	68fb      	ldr	r3, [r7, #12]
9000c174:	897a      	ldrh	r2, [r7, #10]
9000c176:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
9000c178:	68fb      	ldr	r3, [r7, #12]
9000c17a:	895a      	ldrh	r2, [r3, #10]
9000c17c:	68fb      	ldr	r3, [r7, #12]
9000c17e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
9000c180:	68fb      	ldr	r3, [r7, #12]
9000c182:	681b      	ldr	r3, [r3, #0]
9000c184:	2b00      	cmp	r3, #0
9000c186:	d004      	beq.n	9000c192 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
9000c188:	68fb      	ldr	r3, [r7, #12]
9000c18a:	681b      	ldr	r3, [r3, #0]
9000c18c:	4618      	mov	r0, r3
9000c18e:	f000 f911 	bl	9000c3b4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
9000c192:	68fb      	ldr	r3, [r7, #12]
9000c194:	2200      	movs	r2, #0
9000c196:	601a      	str	r2, [r3, #0]
9000c198:	e000      	b.n	9000c19c <pbuf_realloc+0xf4>
    return;
9000c19a:	bf00      	nop

}
9000c19c:	3710      	adds	r7, #16
9000c19e:	46bd      	mov	sp, r7
9000c1a0:	bd80      	pop	{r7, pc}
9000c1a2:	bf00      	nop
9000c1a4:	90018328 	.word	0x90018328
9000c1a8:	90018440 	.word	0x90018440
9000c1ac:	90018388 	.word	0x90018388
9000c1b0:	90018458 	.word	0x90018458
9000c1b4:	90018470 	.word	0x90018470

9000c1b8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
9000c1b8:	b580      	push	{r7, lr}
9000c1ba:	b086      	sub	sp, #24
9000c1bc:	af00      	add	r7, sp, #0
9000c1be:	60f8      	str	r0, [r7, #12]
9000c1c0:	60b9      	str	r1, [r7, #8]
9000c1c2:	4613      	mov	r3, r2
9000c1c4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
9000c1c6:	68fb      	ldr	r3, [r7, #12]
9000c1c8:	2b00      	cmp	r3, #0
9000c1ca:	d106      	bne.n	9000c1da <pbuf_add_header_impl+0x22>
9000c1cc:	4b2b      	ldr	r3, [pc, #172]	; (9000c27c <pbuf_add_header_impl+0xc4>)
9000c1ce:	f240 12df 	movw	r2, #479	; 0x1df
9000c1d2:	492b      	ldr	r1, [pc, #172]	; (9000c280 <pbuf_add_header_impl+0xc8>)
9000c1d4:	482b      	ldr	r0, [pc, #172]	; (9000c284 <pbuf_add_header_impl+0xcc>)
9000c1d6:	f009 fd0d 	bl	90015bf4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
9000c1da:	68fb      	ldr	r3, [r7, #12]
9000c1dc:	2b00      	cmp	r3, #0
9000c1de:	d003      	beq.n	9000c1e8 <pbuf_add_header_impl+0x30>
9000c1e0:	68bb      	ldr	r3, [r7, #8]
9000c1e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000c1e6:	d301      	bcc.n	9000c1ec <pbuf_add_header_impl+0x34>
    return 1;
9000c1e8:	2301      	movs	r3, #1
9000c1ea:	e043      	b.n	9000c274 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
9000c1ec:	68bb      	ldr	r3, [r7, #8]
9000c1ee:	2b00      	cmp	r3, #0
9000c1f0:	d101      	bne.n	9000c1f6 <pbuf_add_header_impl+0x3e>
    return 0;
9000c1f2:	2300      	movs	r3, #0
9000c1f4:	e03e      	b.n	9000c274 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
9000c1f6:	68bb      	ldr	r3, [r7, #8]
9000c1f8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
9000c1fa:	68fb      	ldr	r3, [r7, #12]
9000c1fc:	891a      	ldrh	r2, [r3, #8]
9000c1fe:	8a7b      	ldrh	r3, [r7, #18]
9000c200:	4413      	add	r3, r2
9000c202:	b29b      	uxth	r3, r3
9000c204:	8a7a      	ldrh	r2, [r7, #18]
9000c206:	429a      	cmp	r2, r3
9000c208:	d901      	bls.n	9000c20e <pbuf_add_header_impl+0x56>
    return 1;
9000c20a:	2301      	movs	r3, #1
9000c20c:	e032      	b.n	9000c274 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
9000c20e:	68fb      	ldr	r3, [r7, #12]
9000c210:	7b1b      	ldrb	r3, [r3, #12]
9000c212:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
9000c214:	8a3b      	ldrh	r3, [r7, #16]
9000c216:	f003 0380 	and.w	r3, r3, #128	; 0x80
9000c21a:	2b00      	cmp	r3, #0
9000c21c:	d00c      	beq.n	9000c238 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
9000c21e:	68fb      	ldr	r3, [r7, #12]
9000c220:	685a      	ldr	r2, [r3, #4]
9000c222:	68bb      	ldr	r3, [r7, #8]
9000c224:	425b      	negs	r3, r3
9000c226:	4413      	add	r3, r2
9000c228:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
9000c22a:	68fb      	ldr	r3, [r7, #12]
9000c22c:	3310      	adds	r3, #16
9000c22e:	697a      	ldr	r2, [r7, #20]
9000c230:	429a      	cmp	r2, r3
9000c232:	d20d      	bcs.n	9000c250 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
9000c234:	2301      	movs	r3, #1
9000c236:	e01d      	b.n	9000c274 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
9000c238:	79fb      	ldrb	r3, [r7, #7]
9000c23a:	2b00      	cmp	r3, #0
9000c23c:	d006      	beq.n	9000c24c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
9000c23e:	68fb      	ldr	r3, [r7, #12]
9000c240:	685a      	ldr	r2, [r3, #4]
9000c242:	68bb      	ldr	r3, [r7, #8]
9000c244:	425b      	negs	r3, r3
9000c246:	4413      	add	r3, r2
9000c248:	617b      	str	r3, [r7, #20]
9000c24a:	e001      	b.n	9000c250 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
9000c24c:	2301      	movs	r3, #1
9000c24e:	e011      	b.n	9000c274 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
9000c250:	68fb      	ldr	r3, [r7, #12]
9000c252:	697a      	ldr	r2, [r7, #20]
9000c254:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
9000c256:	68fb      	ldr	r3, [r7, #12]
9000c258:	895a      	ldrh	r2, [r3, #10]
9000c25a:	8a7b      	ldrh	r3, [r7, #18]
9000c25c:	4413      	add	r3, r2
9000c25e:	b29a      	uxth	r2, r3
9000c260:	68fb      	ldr	r3, [r7, #12]
9000c262:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
9000c264:	68fb      	ldr	r3, [r7, #12]
9000c266:	891a      	ldrh	r2, [r3, #8]
9000c268:	8a7b      	ldrh	r3, [r7, #18]
9000c26a:	4413      	add	r3, r2
9000c26c:	b29a      	uxth	r2, r3
9000c26e:	68fb      	ldr	r3, [r7, #12]
9000c270:	811a      	strh	r2, [r3, #8]


  return 0;
9000c272:	2300      	movs	r3, #0
}
9000c274:	4618      	mov	r0, r3
9000c276:	3718      	adds	r7, #24
9000c278:	46bd      	mov	sp, r7
9000c27a:	bd80      	pop	{r7, pc}
9000c27c:	90018328 	.word	0x90018328
9000c280:	9001848c 	.word	0x9001848c
9000c284:	90018388 	.word	0x90018388

9000c288 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
9000c288:	b580      	push	{r7, lr}
9000c28a:	b082      	sub	sp, #8
9000c28c:	af00      	add	r7, sp, #0
9000c28e:	6078      	str	r0, [r7, #4]
9000c290:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
9000c292:	2200      	movs	r2, #0
9000c294:	6839      	ldr	r1, [r7, #0]
9000c296:	6878      	ldr	r0, [r7, #4]
9000c298:	f7ff ff8e 	bl	9000c1b8 <pbuf_add_header_impl>
9000c29c:	4603      	mov	r3, r0
}
9000c29e:	4618      	mov	r0, r3
9000c2a0:	3708      	adds	r7, #8
9000c2a2:	46bd      	mov	sp, r7
9000c2a4:	bd80      	pop	{r7, pc}
	...

9000c2a8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
9000c2a8:	b580      	push	{r7, lr}
9000c2aa:	b084      	sub	sp, #16
9000c2ac:	af00      	add	r7, sp, #0
9000c2ae:	6078      	str	r0, [r7, #4]
9000c2b0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
9000c2b2:	687b      	ldr	r3, [r7, #4]
9000c2b4:	2b00      	cmp	r3, #0
9000c2b6:	d106      	bne.n	9000c2c6 <pbuf_remove_header+0x1e>
9000c2b8:	4b20      	ldr	r3, [pc, #128]	; (9000c33c <pbuf_remove_header+0x94>)
9000c2ba:	f240 224b 	movw	r2, #587	; 0x24b
9000c2be:	4920      	ldr	r1, [pc, #128]	; (9000c340 <pbuf_remove_header+0x98>)
9000c2c0:	4820      	ldr	r0, [pc, #128]	; (9000c344 <pbuf_remove_header+0x9c>)
9000c2c2:	f009 fc97 	bl	90015bf4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
9000c2c6:	687b      	ldr	r3, [r7, #4]
9000c2c8:	2b00      	cmp	r3, #0
9000c2ca:	d003      	beq.n	9000c2d4 <pbuf_remove_header+0x2c>
9000c2cc:	683b      	ldr	r3, [r7, #0]
9000c2ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000c2d2:	d301      	bcc.n	9000c2d8 <pbuf_remove_header+0x30>
    return 1;
9000c2d4:	2301      	movs	r3, #1
9000c2d6:	e02c      	b.n	9000c332 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
9000c2d8:	683b      	ldr	r3, [r7, #0]
9000c2da:	2b00      	cmp	r3, #0
9000c2dc:	d101      	bne.n	9000c2e2 <pbuf_remove_header+0x3a>
    return 0;
9000c2de:	2300      	movs	r3, #0
9000c2e0:	e027      	b.n	9000c332 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
9000c2e2:	683b      	ldr	r3, [r7, #0]
9000c2e4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
9000c2e6:	687b      	ldr	r3, [r7, #4]
9000c2e8:	895b      	ldrh	r3, [r3, #10]
9000c2ea:	89fa      	ldrh	r2, [r7, #14]
9000c2ec:	429a      	cmp	r2, r3
9000c2ee:	d908      	bls.n	9000c302 <pbuf_remove_header+0x5a>
9000c2f0:	4b12      	ldr	r3, [pc, #72]	; (9000c33c <pbuf_remove_header+0x94>)
9000c2f2:	f240 2255 	movw	r2, #597	; 0x255
9000c2f6:	4914      	ldr	r1, [pc, #80]	; (9000c348 <pbuf_remove_header+0xa0>)
9000c2f8:	4812      	ldr	r0, [pc, #72]	; (9000c344 <pbuf_remove_header+0x9c>)
9000c2fa:	f009 fc7b 	bl	90015bf4 <iprintf>
9000c2fe:	2301      	movs	r3, #1
9000c300:	e017      	b.n	9000c332 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
9000c302:	687b      	ldr	r3, [r7, #4]
9000c304:	685b      	ldr	r3, [r3, #4]
9000c306:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
9000c308:	687b      	ldr	r3, [r7, #4]
9000c30a:	685a      	ldr	r2, [r3, #4]
9000c30c:	683b      	ldr	r3, [r7, #0]
9000c30e:	441a      	add	r2, r3
9000c310:	687b      	ldr	r3, [r7, #4]
9000c312:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
9000c314:	687b      	ldr	r3, [r7, #4]
9000c316:	895a      	ldrh	r2, [r3, #10]
9000c318:	89fb      	ldrh	r3, [r7, #14]
9000c31a:	1ad3      	subs	r3, r2, r3
9000c31c:	b29a      	uxth	r2, r3
9000c31e:	687b      	ldr	r3, [r7, #4]
9000c320:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
9000c322:	687b      	ldr	r3, [r7, #4]
9000c324:	891a      	ldrh	r2, [r3, #8]
9000c326:	89fb      	ldrh	r3, [r7, #14]
9000c328:	1ad3      	subs	r3, r2, r3
9000c32a:	b29a      	uxth	r2, r3
9000c32c:	687b      	ldr	r3, [r7, #4]
9000c32e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
9000c330:	2300      	movs	r3, #0
}
9000c332:	4618      	mov	r0, r3
9000c334:	3710      	adds	r7, #16
9000c336:	46bd      	mov	sp, r7
9000c338:	bd80      	pop	{r7, pc}
9000c33a:	bf00      	nop
9000c33c:	90018328 	.word	0x90018328
9000c340:	9001848c 	.word	0x9001848c
9000c344:	90018388 	.word	0x90018388
9000c348:	90018498 	.word	0x90018498

9000c34c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
9000c34c:	b580      	push	{r7, lr}
9000c34e:	b082      	sub	sp, #8
9000c350:	af00      	add	r7, sp, #0
9000c352:	6078      	str	r0, [r7, #4]
9000c354:	460b      	mov	r3, r1
9000c356:	807b      	strh	r3, [r7, #2]
9000c358:	4613      	mov	r3, r2
9000c35a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
9000c35c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
9000c360:	2b00      	cmp	r3, #0
9000c362:	da08      	bge.n	9000c376 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
9000c364:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
9000c368:	425b      	negs	r3, r3
9000c36a:	4619      	mov	r1, r3
9000c36c:	6878      	ldr	r0, [r7, #4]
9000c36e:	f7ff ff9b 	bl	9000c2a8 <pbuf_remove_header>
9000c372:	4603      	mov	r3, r0
9000c374:	e007      	b.n	9000c386 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
9000c376:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
9000c37a:	787a      	ldrb	r2, [r7, #1]
9000c37c:	4619      	mov	r1, r3
9000c37e:	6878      	ldr	r0, [r7, #4]
9000c380:	f7ff ff1a 	bl	9000c1b8 <pbuf_add_header_impl>
9000c384:	4603      	mov	r3, r0
  }
}
9000c386:	4618      	mov	r0, r3
9000c388:	3708      	adds	r7, #8
9000c38a:	46bd      	mov	sp, r7
9000c38c:	bd80      	pop	{r7, pc}

9000c38e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
9000c38e:	b580      	push	{r7, lr}
9000c390:	b082      	sub	sp, #8
9000c392:	af00      	add	r7, sp, #0
9000c394:	6078      	str	r0, [r7, #4]
9000c396:	460b      	mov	r3, r1
9000c398:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
9000c39a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
9000c39e:	2201      	movs	r2, #1
9000c3a0:	4619      	mov	r1, r3
9000c3a2:	6878      	ldr	r0, [r7, #4]
9000c3a4:	f7ff ffd2 	bl	9000c34c <pbuf_header_impl>
9000c3a8:	4603      	mov	r3, r0
}
9000c3aa:	4618      	mov	r0, r3
9000c3ac:	3708      	adds	r7, #8
9000c3ae:	46bd      	mov	sp, r7
9000c3b0:	bd80      	pop	{r7, pc}
	...

9000c3b4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
9000c3b4:	b580      	push	{r7, lr}
9000c3b6:	b088      	sub	sp, #32
9000c3b8:	af00      	add	r7, sp, #0
9000c3ba:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
9000c3bc:	687b      	ldr	r3, [r7, #4]
9000c3be:	2b00      	cmp	r3, #0
9000c3c0:	d10b      	bne.n	9000c3da <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
9000c3c2:	687b      	ldr	r3, [r7, #4]
9000c3c4:	2b00      	cmp	r3, #0
9000c3c6:	d106      	bne.n	9000c3d6 <pbuf_free+0x22>
9000c3c8:	4b3b      	ldr	r3, [pc, #236]	; (9000c4b8 <pbuf_free+0x104>)
9000c3ca:	f44f 7237 	mov.w	r2, #732	; 0x2dc
9000c3ce:	493b      	ldr	r1, [pc, #236]	; (9000c4bc <pbuf_free+0x108>)
9000c3d0:	483b      	ldr	r0, [pc, #236]	; (9000c4c0 <pbuf_free+0x10c>)
9000c3d2:	f009 fc0f 	bl	90015bf4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
9000c3d6:	2300      	movs	r3, #0
9000c3d8:	e069      	b.n	9000c4ae <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
9000c3da:	2300      	movs	r3, #0
9000c3dc:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
9000c3de:	e062      	b.n	9000c4a6 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
9000c3e0:	f009 f9f4 	bl	900157cc <sys_arch_protect>
9000c3e4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
9000c3e6:	687b      	ldr	r3, [r7, #4]
9000c3e8:	7b9b      	ldrb	r3, [r3, #14]
9000c3ea:	2b00      	cmp	r3, #0
9000c3ec:	d106      	bne.n	9000c3fc <pbuf_free+0x48>
9000c3ee:	4b32      	ldr	r3, [pc, #200]	; (9000c4b8 <pbuf_free+0x104>)
9000c3f0:	f240 22f1 	movw	r2, #753	; 0x2f1
9000c3f4:	4933      	ldr	r1, [pc, #204]	; (9000c4c4 <pbuf_free+0x110>)
9000c3f6:	4832      	ldr	r0, [pc, #200]	; (9000c4c0 <pbuf_free+0x10c>)
9000c3f8:	f009 fbfc 	bl	90015bf4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
9000c3fc:	687b      	ldr	r3, [r7, #4]
9000c3fe:	7b9b      	ldrb	r3, [r3, #14]
9000c400:	3b01      	subs	r3, #1
9000c402:	b2da      	uxtb	r2, r3
9000c404:	687b      	ldr	r3, [r7, #4]
9000c406:	739a      	strb	r2, [r3, #14]
9000c408:	687b      	ldr	r3, [r7, #4]
9000c40a:	7b9b      	ldrb	r3, [r3, #14]
9000c40c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
9000c40e:	69b8      	ldr	r0, [r7, #24]
9000c410:	f009 f9ea 	bl	900157e8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
9000c414:	7dfb      	ldrb	r3, [r7, #23]
9000c416:	2b00      	cmp	r3, #0
9000c418:	d143      	bne.n	9000c4a2 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
9000c41a:	687b      	ldr	r3, [r7, #4]
9000c41c:	681b      	ldr	r3, [r3, #0]
9000c41e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
9000c420:	687b      	ldr	r3, [r7, #4]
9000c422:	7b1b      	ldrb	r3, [r3, #12]
9000c424:	f003 030f 	and.w	r3, r3, #15
9000c428:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
9000c42a:	687b      	ldr	r3, [r7, #4]
9000c42c:	7b5b      	ldrb	r3, [r3, #13]
9000c42e:	f003 0302 	and.w	r3, r3, #2
9000c432:	2b00      	cmp	r3, #0
9000c434:	d011      	beq.n	9000c45a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
9000c436:	687b      	ldr	r3, [r7, #4]
9000c438:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
9000c43a:	68bb      	ldr	r3, [r7, #8]
9000c43c:	691b      	ldr	r3, [r3, #16]
9000c43e:	2b00      	cmp	r3, #0
9000c440:	d106      	bne.n	9000c450 <pbuf_free+0x9c>
9000c442:	4b1d      	ldr	r3, [pc, #116]	; (9000c4b8 <pbuf_free+0x104>)
9000c444:	f240 22ff 	movw	r2, #767	; 0x2ff
9000c448:	491f      	ldr	r1, [pc, #124]	; (9000c4c8 <pbuf_free+0x114>)
9000c44a:	481d      	ldr	r0, [pc, #116]	; (9000c4c0 <pbuf_free+0x10c>)
9000c44c:	f009 fbd2 	bl	90015bf4 <iprintf>
        pc->custom_free_function(p);
9000c450:	68bb      	ldr	r3, [r7, #8]
9000c452:	691b      	ldr	r3, [r3, #16]
9000c454:	6878      	ldr	r0, [r7, #4]
9000c456:	4798      	blx	r3
9000c458:	e01d      	b.n	9000c496 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
9000c45a:	7bfb      	ldrb	r3, [r7, #15]
9000c45c:	2b02      	cmp	r3, #2
9000c45e:	d104      	bne.n	9000c46a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
9000c460:	6879      	ldr	r1, [r7, #4]
9000c462:	200c      	movs	r0, #12
9000c464:	f7ff f902 	bl	9000b66c <memp_free>
9000c468:	e015      	b.n	9000c496 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
9000c46a:	7bfb      	ldrb	r3, [r7, #15]
9000c46c:	2b01      	cmp	r3, #1
9000c46e:	d104      	bne.n	9000c47a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
9000c470:	6879      	ldr	r1, [r7, #4]
9000c472:	200b      	movs	r0, #11
9000c474:	f7ff f8fa 	bl	9000b66c <memp_free>
9000c478:	e00d      	b.n	9000c496 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
9000c47a:	7bfb      	ldrb	r3, [r7, #15]
9000c47c:	2b00      	cmp	r3, #0
9000c47e:	d103      	bne.n	9000c488 <pbuf_free+0xd4>
          mem_free(p);
9000c480:	6878      	ldr	r0, [r7, #4]
9000c482:	f7fe fd3f 	bl	9000af04 <mem_free>
9000c486:	e006      	b.n	9000c496 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
9000c488:	4b0b      	ldr	r3, [pc, #44]	; (9000c4b8 <pbuf_free+0x104>)
9000c48a:	f240 320f 	movw	r2, #783	; 0x30f
9000c48e:	490f      	ldr	r1, [pc, #60]	; (9000c4cc <pbuf_free+0x118>)
9000c490:	480b      	ldr	r0, [pc, #44]	; (9000c4c0 <pbuf_free+0x10c>)
9000c492:	f009 fbaf 	bl	90015bf4 <iprintf>
        }
      }
      count++;
9000c496:	7ffb      	ldrb	r3, [r7, #31]
9000c498:	3301      	adds	r3, #1
9000c49a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
9000c49c:	693b      	ldr	r3, [r7, #16]
9000c49e:	607b      	str	r3, [r7, #4]
9000c4a0:	e001      	b.n	9000c4a6 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
9000c4a2:	2300      	movs	r3, #0
9000c4a4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
9000c4a6:	687b      	ldr	r3, [r7, #4]
9000c4a8:	2b00      	cmp	r3, #0
9000c4aa:	d199      	bne.n	9000c3e0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
9000c4ac:	7ffb      	ldrb	r3, [r7, #31]
}
9000c4ae:	4618      	mov	r0, r3
9000c4b0:	3720      	adds	r7, #32
9000c4b2:	46bd      	mov	sp, r7
9000c4b4:	bd80      	pop	{r7, pc}
9000c4b6:	bf00      	nop
9000c4b8:	90018328 	.word	0x90018328
9000c4bc:	9001848c 	.word	0x9001848c
9000c4c0:	90018388 	.word	0x90018388
9000c4c4:	900184b8 	.word	0x900184b8
9000c4c8:	900184d0 	.word	0x900184d0
9000c4cc:	900184f4 	.word	0x900184f4

9000c4d0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
9000c4d0:	b480      	push	{r7}
9000c4d2:	b085      	sub	sp, #20
9000c4d4:	af00      	add	r7, sp, #0
9000c4d6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
9000c4d8:	2300      	movs	r3, #0
9000c4da:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
9000c4dc:	e005      	b.n	9000c4ea <pbuf_clen+0x1a>
    ++len;
9000c4de:	89fb      	ldrh	r3, [r7, #14]
9000c4e0:	3301      	adds	r3, #1
9000c4e2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
9000c4e4:	687b      	ldr	r3, [r7, #4]
9000c4e6:	681b      	ldr	r3, [r3, #0]
9000c4e8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
9000c4ea:	687b      	ldr	r3, [r7, #4]
9000c4ec:	2b00      	cmp	r3, #0
9000c4ee:	d1f6      	bne.n	9000c4de <pbuf_clen+0xe>
  }
  return len;
9000c4f0:	89fb      	ldrh	r3, [r7, #14]
}
9000c4f2:	4618      	mov	r0, r3
9000c4f4:	3714      	adds	r7, #20
9000c4f6:	46bd      	mov	sp, r7
9000c4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
9000c4fc:	4770      	bx	lr
	...

9000c500 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
9000c500:	b580      	push	{r7, lr}
9000c502:	b084      	sub	sp, #16
9000c504:	af00      	add	r7, sp, #0
9000c506:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
9000c508:	687b      	ldr	r3, [r7, #4]
9000c50a:	2b00      	cmp	r3, #0
9000c50c:	d016      	beq.n	9000c53c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
9000c50e:	f009 f95d 	bl	900157cc <sys_arch_protect>
9000c512:	60f8      	str	r0, [r7, #12]
9000c514:	687b      	ldr	r3, [r7, #4]
9000c516:	7b9b      	ldrb	r3, [r3, #14]
9000c518:	3301      	adds	r3, #1
9000c51a:	b2da      	uxtb	r2, r3
9000c51c:	687b      	ldr	r3, [r7, #4]
9000c51e:	739a      	strb	r2, [r3, #14]
9000c520:	68f8      	ldr	r0, [r7, #12]
9000c522:	f009 f961 	bl	900157e8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
9000c526:	687b      	ldr	r3, [r7, #4]
9000c528:	7b9b      	ldrb	r3, [r3, #14]
9000c52a:	2b00      	cmp	r3, #0
9000c52c:	d106      	bne.n	9000c53c <pbuf_ref+0x3c>
9000c52e:	4b05      	ldr	r3, [pc, #20]	; (9000c544 <pbuf_ref+0x44>)
9000c530:	f240 3242 	movw	r2, #834	; 0x342
9000c534:	4904      	ldr	r1, [pc, #16]	; (9000c548 <pbuf_ref+0x48>)
9000c536:	4805      	ldr	r0, [pc, #20]	; (9000c54c <pbuf_ref+0x4c>)
9000c538:	f009 fb5c 	bl	90015bf4 <iprintf>
  }
}
9000c53c:	bf00      	nop
9000c53e:	3710      	adds	r7, #16
9000c540:	46bd      	mov	sp, r7
9000c542:	bd80      	pop	{r7, pc}
9000c544:	90018328 	.word	0x90018328
9000c548:	90018508 	.word	0x90018508
9000c54c:	90018388 	.word	0x90018388

9000c550 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
9000c550:	b580      	push	{r7, lr}
9000c552:	b084      	sub	sp, #16
9000c554:	af00      	add	r7, sp, #0
9000c556:	6078      	str	r0, [r7, #4]
9000c558:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
9000c55a:	687b      	ldr	r3, [r7, #4]
9000c55c:	2b00      	cmp	r3, #0
9000c55e:	d002      	beq.n	9000c566 <pbuf_cat+0x16>
9000c560:	683b      	ldr	r3, [r7, #0]
9000c562:	2b00      	cmp	r3, #0
9000c564:	d107      	bne.n	9000c576 <pbuf_cat+0x26>
9000c566:	4b20      	ldr	r3, [pc, #128]	; (9000c5e8 <pbuf_cat+0x98>)
9000c568:	f240 3259 	movw	r2, #857	; 0x359
9000c56c:	491f      	ldr	r1, [pc, #124]	; (9000c5ec <pbuf_cat+0x9c>)
9000c56e:	4820      	ldr	r0, [pc, #128]	; (9000c5f0 <pbuf_cat+0xa0>)
9000c570:	f009 fb40 	bl	90015bf4 <iprintf>
9000c574:	e034      	b.n	9000c5e0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
9000c576:	687b      	ldr	r3, [r7, #4]
9000c578:	60fb      	str	r3, [r7, #12]
9000c57a:	e00a      	b.n	9000c592 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
9000c57c:	68fb      	ldr	r3, [r7, #12]
9000c57e:	891a      	ldrh	r2, [r3, #8]
9000c580:	683b      	ldr	r3, [r7, #0]
9000c582:	891b      	ldrh	r3, [r3, #8]
9000c584:	4413      	add	r3, r2
9000c586:	b29a      	uxth	r2, r3
9000c588:	68fb      	ldr	r3, [r7, #12]
9000c58a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
9000c58c:	68fb      	ldr	r3, [r7, #12]
9000c58e:	681b      	ldr	r3, [r3, #0]
9000c590:	60fb      	str	r3, [r7, #12]
9000c592:	68fb      	ldr	r3, [r7, #12]
9000c594:	681b      	ldr	r3, [r3, #0]
9000c596:	2b00      	cmp	r3, #0
9000c598:	d1f0      	bne.n	9000c57c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
9000c59a:	68fb      	ldr	r3, [r7, #12]
9000c59c:	891a      	ldrh	r2, [r3, #8]
9000c59e:	68fb      	ldr	r3, [r7, #12]
9000c5a0:	895b      	ldrh	r3, [r3, #10]
9000c5a2:	429a      	cmp	r2, r3
9000c5a4:	d006      	beq.n	9000c5b4 <pbuf_cat+0x64>
9000c5a6:	4b10      	ldr	r3, [pc, #64]	; (9000c5e8 <pbuf_cat+0x98>)
9000c5a8:	f240 3262 	movw	r2, #866	; 0x362
9000c5ac:	4911      	ldr	r1, [pc, #68]	; (9000c5f4 <pbuf_cat+0xa4>)
9000c5ae:	4810      	ldr	r0, [pc, #64]	; (9000c5f0 <pbuf_cat+0xa0>)
9000c5b0:	f009 fb20 	bl	90015bf4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
9000c5b4:	68fb      	ldr	r3, [r7, #12]
9000c5b6:	681b      	ldr	r3, [r3, #0]
9000c5b8:	2b00      	cmp	r3, #0
9000c5ba:	d006      	beq.n	9000c5ca <pbuf_cat+0x7a>
9000c5bc:	4b0a      	ldr	r3, [pc, #40]	; (9000c5e8 <pbuf_cat+0x98>)
9000c5be:	f240 3263 	movw	r2, #867	; 0x363
9000c5c2:	490d      	ldr	r1, [pc, #52]	; (9000c5f8 <pbuf_cat+0xa8>)
9000c5c4:	480a      	ldr	r0, [pc, #40]	; (9000c5f0 <pbuf_cat+0xa0>)
9000c5c6:	f009 fb15 	bl	90015bf4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
9000c5ca:	68fb      	ldr	r3, [r7, #12]
9000c5cc:	891a      	ldrh	r2, [r3, #8]
9000c5ce:	683b      	ldr	r3, [r7, #0]
9000c5d0:	891b      	ldrh	r3, [r3, #8]
9000c5d2:	4413      	add	r3, r2
9000c5d4:	b29a      	uxth	r2, r3
9000c5d6:	68fb      	ldr	r3, [r7, #12]
9000c5d8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
9000c5da:	68fb      	ldr	r3, [r7, #12]
9000c5dc:	683a      	ldr	r2, [r7, #0]
9000c5de:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
9000c5e0:	3710      	adds	r7, #16
9000c5e2:	46bd      	mov	sp, r7
9000c5e4:	bd80      	pop	{r7, pc}
9000c5e6:	bf00      	nop
9000c5e8:	90018328 	.word	0x90018328
9000c5ec:	9001851c 	.word	0x9001851c
9000c5f0:	90018388 	.word	0x90018388
9000c5f4:	90018554 	.word	0x90018554
9000c5f8:	90018584 	.word	0x90018584

9000c5fc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
9000c5fc:	b580      	push	{r7, lr}
9000c5fe:	b086      	sub	sp, #24
9000c600:	af00      	add	r7, sp, #0
9000c602:	6078      	str	r0, [r7, #4]
9000c604:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
9000c606:	2300      	movs	r3, #0
9000c608:	617b      	str	r3, [r7, #20]
9000c60a:	2300      	movs	r3, #0
9000c60c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
9000c60e:	687b      	ldr	r3, [r7, #4]
9000c610:	2b00      	cmp	r3, #0
9000c612:	d008      	beq.n	9000c626 <pbuf_copy+0x2a>
9000c614:	683b      	ldr	r3, [r7, #0]
9000c616:	2b00      	cmp	r3, #0
9000c618:	d005      	beq.n	9000c626 <pbuf_copy+0x2a>
9000c61a:	687b      	ldr	r3, [r7, #4]
9000c61c:	891a      	ldrh	r2, [r3, #8]
9000c61e:	683b      	ldr	r3, [r7, #0]
9000c620:	891b      	ldrh	r3, [r3, #8]
9000c622:	429a      	cmp	r2, r3
9000c624:	d209      	bcs.n	9000c63a <pbuf_copy+0x3e>
9000c626:	4b57      	ldr	r3, [pc, #348]	; (9000c784 <pbuf_copy+0x188>)
9000c628:	f240 32c9 	movw	r2, #969	; 0x3c9
9000c62c:	4956      	ldr	r1, [pc, #344]	; (9000c788 <pbuf_copy+0x18c>)
9000c62e:	4857      	ldr	r0, [pc, #348]	; (9000c78c <pbuf_copy+0x190>)
9000c630:	f009 fae0 	bl	90015bf4 <iprintf>
9000c634:	f06f 030f 	mvn.w	r3, #15
9000c638:	e09f      	b.n	9000c77a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
9000c63a:	687b      	ldr	r3, [r7, #4]
9000c63c:	895b      	ldrh	r3, [r3, #10]
9000c63e:	461a      	mov	r2, r3
9000c640:	697b      	ldr	r3, [r7, #20]
9000c642:	1ad2      	subs	r2, r2, r3
9000c644:	683b      	ldr	r3, [r7, #0]
9000c646:	895b      	ldrh	r3, [r3, #10]
9000c648:	4619      	mov	r1, r3
9000c64a:	693b      	ldr	r3, [r7, #16]
9000c64c:	1acb      	subs	r3, r1, r3
9000c64e:	429a      	cmp	r2, r3
9000c650:	d306      	bcc.n	9000c660 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
9000c652:	683b      	ldr	r3, [r7, #0]
9000c654:	895b      	ldrh	r3, [r3, #10]
9000c656:	461a      	mov	r2, r3
9000c658:	693b      	ldr	r3, [r7, #16]
9000c65a:	1ad3      	subs	r3, r2, r3
9000c65c:	60fb      	str	r3, [r7, #12]
9000c65e:	e005      	b.n	9000c66c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
9000c660:	687b      	ldr	r3, [r7, #4]
9000c662:	895b      	ldrh	r3, [r3, #10]
9000c664:	461a      	mov	r2, r3
9000c666:	697b      	ldr	r3, [r7, #20]
9000c668:	1ad3      	subs	r3, r2, r3
9000c66a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
9000c66c:	687b      	ldr	r3, [r7, #4]
9000c66e:	685a      	ldr	r2, [r3, #4]
9000c670:	697b      	ldr	r3, [r7, #20]
9000c672:	18d0      	adds	r0, r2, r3
9000c674:	683b      	ldr	r3, [r7, #0]
9000c676:	685a      	ldr	r2, [r3, #4]
9000c678:	693b      	ldr	r3, [r7, #16]
9000c67a:	4413      	add	r3, r2
9000c67c:	68fa      	ldr	r2, [r7, #12]
9000c67e:	4619      	mov	r1, r3
9000c680:	f009 f9f3 	bl	90015a6a <memcpy>
    offset_to += len;
9000c684:	697a      	ldr	r2, [r7, #20]
9000c686:	68fb      	ldr	r3, [r7, #12]
9000c688:	4413      	add	r3, r2
9000c68a:	617b      	str	r3, [r7, #20]
    offset_from += len;
9000c68c:	693a      	ldr	r2, [r7, #16]
9000c68e:	68fb      	ldr	r3, [r7, #12]
9000c690:	4413      	add	r3, r2
9000c692:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
9000c694:	687b      	ldr	r3, [r7, #4]
9000c696:	895b      	ldrh	r3, [r3, #10]
9000c698:	461a      	mov	r2, r3
9000c69a:	697b      	ldr	r3, [r7, #20]
9000c69c:	4293      	cmp	r3, r2
9000c69e:	d906      	bls.n	9000c6ae <pbuf_copy+0xb2>
9000c6a0:	4b38      	ldr	r3, [pc, #224]	; (9000c784 <pbuf_copy+0x188>)
9000c6a2:	f240 32d9 	movw	r2, #985	; 0x3d9
9000c6a6:	493a      	ldr	r1, [pc, #232]	; (9000c790 <pbuf_copy+0x194>)
9000c6a8:	4838      	ldr	r0, [pc, #224]	; (9000c78c <pbuf_copy+0x190>)
9000c6aa:	f009 faa3 	bl	90015bf4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
9000c6ae:	683b      	ldr	r3, [r7, #0]
9000c6b0:	895b      	ldrh	r3, [r3, #10]
9000c6b2:	461a      	mov	r2, r3
9000c6b4:	693b      	ldr	r3, [r7, #16]
9000c6b6:	4293      	cmp	r3, r2
9000c6b8:	d906      	bls.n	9000c6c8 <pbuf_copy+0xcc>
9000c6ba:	4b32      	ldr	r3, [pc, #200]	; (9000c784 <pbuf_copy+0x188>)
9000c6bc:	f240 32da 	movw	r2, #986	; 0x3da
9000c6c0:	4934      	ldr	r1, [pc, #208]	; (9000c794 <pbuf_copy+0x198>)
9000c6c2:	4832      	ldr	r0, [pc, #200]	; (9000c78c <pbuf_copy+0x190>)
9000c6c4:	f009 fa96 	bl	90015bf4 <iprintf>
    if (offset_from >= p_from->len) {
9000c6c8:	683b      	ldr	r3, [r7, #0]
9000c6ca:	895b      	ldrh	r3, [r3, #10]
9000c6cc:	461a      	mov	r2, r3
9000c6ce:	693b      	ldr	r3, [r7, #16]
9000c6d0:	4293      	cmp	r3, r2
9000c6d2:	d304      	bcc.n	9000c6de <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
9000c6d4:	2300      	movs	r3, #0
9000c6d6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
9000c6d8:	683b      	ldr	r3, [r7, #0]
9000c6da:	681b      	ldr	r3, [r3, #0]
9000c6dc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
9000c6de:	687b      	ldr	r3, [r7, #4]
9000c6e0:	895b      	ldrh	r3, [r3, #10]
9000c6e2:	461a      	mov	r2, r3
9000c6e4:	697b      	ldr	r3, [r7, #20]
9000c6e6:	4293      	cmp	r3, r2
9000c6e8:	d114      	bne.n	9000c714 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
9000c6ea:	2300      	movs	r3, #0
9000c6ec:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
9000c6ee:	687b      	ldr	r3, [r7, #4]
9000c6f0:	681b      	ldr	r3, [r3, #0]
9000c6f2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
9000c6f4:	687b      	ldr	r3, [r7, #4]
9000c6f6:	2b00      	cmp	r3, #0
9000c6f8:	d10c      	bne.n	9000c714 <pbuf_copy+0x118>
9000c6fa:	683b      	ldr	r3, [r7, #0]
9000c6fc:	2b00      	cmp	r3, #0
9000c6fe:	d009      	beq.n	9000c714 <pbuf_copy+0x118>
9000c700:	4b20      	ldr	r3, [pc, #128]	; (9000c784 <pbuf_copy+0x188>)
9000c702:	f44f 7279 	mov.w	r2, #996	; 0x3e4
9000c706:	4924      	ldr	r1, [pc, #144]	; (9000c798 <pbuf_copy+0x19c>)
9000c708:	4820      	ldr	r0, [pc, #128]	; (9000c78c <pbuf_copy+0x190>)
9000c70a:	f009 fa73 	bl	90015bf4 <iprintf>
9000c70e:	f06f 030f 	mvn.w	r3, #15
9000c712:	e032      	b.n	9000c77a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
9000c714:	683b      	ldr	r3, [r7, #0]
9000c716:	2b00      	cmp	r3, #0
9000c718:	d013      	beq.n	9000c742 <pbuf_copy+0x146>
9000c71a:	683b      	ldr	r3, [r7, #0]
9000c71c:	895a      	ldrh	r2, [r3, #10]
9000c71e:	683b      	ldr	r3, [r7, #0]
9000c720:	891b      	ldrh	r3, [r3, #8]
9000c722:	429a      	cmp	r2, r3
9000c724:	d10d      	bne.n	9000c742 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
9000c726:	683b      	ldr	r3, [r7, #0]
9000c728:	681b      	ldr	r3, [r3, #0]
9000c72a:	2b00      	cmp	r3, #0
9000c72c:	d009      	beq.n	9000c742 <pbuf_copy+0x146>
9000c72e:	4b15      	ldr	r3, [pc, #84]	; (9000c784 <pbuf_copy+0x188>)
9000c730:	f240 32e9 	movw	r2, #1001	; 0x3e9
9000c734:	4919      	ldr	r1, [pc, #100]	; (9000c79c <pbuf_copy+0x1a0>)
9000c736:	4815      	ldr	r0, [pc, #84]	; (9000c78c <pbuf_copy+0x190>)
9000c738:	f009 fa5c 	bl	90015bf4 <iprintf>
9000c73c:	f06f 0305 	mvn.w	r3, #5
9000c740:	e01b      	b.n	9000c77a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
9000c742:	687b      	ldr	r3, [r7, #4]
9000c744:	2b00      	cmp	r3, #0
9000c746:	d013      	beq.n	9000c770 <pbuf_copy+0x174>
9000c748:	687b      	ldr	r3, [r7, #4]
9000c74a:	895a      	ldrh	r2, [r3, #10]
9000c74c:	687b      	ldr	r3, [r7, #4]
9000c74e:	891b      	ldrh	r3, [r3, #8]
9000c750:	429a      	cmp	r2, r3
9000c752:	d10d      	bne.n	9000c770 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
9000c754:	687b      	ldr	r3, [r7, #4]
9000c756:	681b      	ldr	r3, [r3, #0]
9000c758:	2b00      	cmp	r3, #0
9000c75a:	d009      	beq.n	9000c770 <pbuf_copy+0x174>
9000c75c:	4b09      	ldr	r3, [pc, #36]	; (9000c784 <pbuf_copy+0x188>)
9000c75e:	f240 32ee 	movw	r2, #1006	; 0x3ee
9000c762:	490e      	ldr	r1, [pc, #56]	; (9000c79c <pbuf_copy+0x1a0>)
9000c764:	4809      	ldr	r0, [pc, #36]	; (9000c78c <pbuf_copy+0x190>)
9000c766:	f009 fa45 	bl	90015bf4 <iprintf>
9000c76a:	f06f 0305 	mvn.w	r3, #5
9000c76e:	e004      	b.n	9000c77a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
9000c770:	683b      	ldr	r3, [r7, #0]
9000c772:	2b00      	cmp	r3, #0
9000c774:	f47f af61 	bne.w	9000c63a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
9000c778:	2300      	movs	r3, #0
}
9000c77a:	4618      	mov	r0, r3
9000c77c:	3718      	adds	r7, #24
9000c77e:	46bd      	mov	sp, r7
9000c780:	bd80      	pop	{r7, pc}
9000c782:	bf00      	nop
9000c784:	90018328 	.word	0x90018328
9000c788:	900185d0 	.word	0x900185d0
9000c78c:	90018388 	.word	0x90018388
9000c790:	90018600 	.word	0x90018600
9000c794:	90018618 	.word	0x90018618
9000c798:	90018634 	.word	0x90018634
9000c79c:	90018644 	.word	0x90018644

9000c7a0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
9000c7a0:	b580      	push	{r7, lr}
9000c7a2:	b088      	sub	sp, #32
9000c7a4:	af00      	add	r7, sp, #0
9000c7a6:	60f8      	str	r0, [r7, #12]
9000c7a8:	60b9      	str	r1, [r7, #8]
9000c7aa:	4611      	mov	r1, r2
9000c7ac:	461a      	mov	r2, r3
9000c7ae:	460b      	mov	r3, r1
9000c7b0:	80fb      	strh	r3, [r7, #6]
9000c7b2:	4613      	mov	r3, r2
9000c7b4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
9000c7b6:	2300      	movs	r3, #0
9000c7b8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
9000c7ba:	2300      	movs	r3, #0
9000c7bc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
9000c7be:	68fb      	ldr	r3, [r7, #12]
9000c7c0:	2b00      	cmp	r3, #0
9000c7c2:	d108      	bne.n	9000c7d6 <pbuf_copy_partial+0x36>
9000c7c4:	4b2b      	ldr	r3, [pc, #172]	; (9000c874 <pbuf_copy_partial+0xd4>)
9000c7c6:	f240 420a 	movw	r2, #1034	; 0x40a
9000c7ca:	492b      	ldr	r1, [pc, #172]	; (9000c878 <pbuf_copy_partial+0xd8>)
9000c7cc:	482b      	ldr	r0, [pc, #172]	; (9000c87c <pbuf_copy_partial+0xdc>)
9000c7ce:	f009 fa11 	bl	90015bf4 <iprintf>
9000c7d2:	2300      	movs	r3, #0
9000c7d4:	e04a      	b.n	9000c86c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
9000c7d6:	68bb      	ldr	r3, [r7, #8]
9000c7d8:	2b00      	cmp	r3, #0
9000c7da:	d108      	bne.n	9000c7ee <pbuf_copy_partial+0x4e>
9000c7dc:	4b25      	ldr	r3, [pc, #148]	; (9000c874 <pbuf_copy_partial+0xd4>)
9000c7de:	f240 420b 	movw	r2, #1035	; 0x40b
9000c7e2:	4927      	ldr	r1, [pc, #156]	; (9000c880 <pbuf_copy_partial+0xe0>)
9000c7e4:	4825      	ldr	r0, [pc, #148]	; (9000c87c <pbuf_copy_partial+0xdc>)
9000c7e6:	f009 fa05 	bl	90015bf4 <iprintf>
9000c7ea:	2300      	movs	r3, #0
9000c7ec:	e03e      	b.n	9000c86c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
9000c7ee:	68fb      	ldr	r3, [r7, #12]
9000c7f0:	61fb      	str	r3, [r7, #28]
9000c7f2:	e034      	b.n	9000c85e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
9000c7f4:	88bb      	ldrh	r3, [r7, #4]
9000c7f6:	2b00      	cmp	r3, #0
9000c7f8:	d00a      	beq.n	9000c810 <pbuf_copy_partial+0x70>
9000c7fa:	69fb      	ldr	r3, [r7, #28]
9000c7fc:	895b      	ldrh	r3, [r3, #10]
9000c7fe:	88ba      	ldrh	r2, [r7, #4]
9000c800:	429a      	cmp	r2, r3
9000c802:	d305      	bcc.n	9000c810 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
9000c804:	69fb      	ldr	r3, [r7, #28]
9000c806:	895b      	ldrh	r3, [r3, #10]
9000c808:	88ba      	ldrh	r2, [r7, #4]
9000c80a:	1ad3      	subs	r3, r2, r3
9000c80c:	80bb      	strh	r3, [r7, #4]
9000c80e:	e023      	b.n	9000c858 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
9000c810:	69fb      	ldr	r3, [r7, #28]
9000c812:	895a      	ldrh	r2, [r3, #10]
9000c814:	88bb      	ldrh	r3, [r7, #4]
9000c816:	1ad3      	subs	r3, r2, r3
9000c818:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
9000c81a:	8b3a      	ldrh	r2, [r7, #24]
9000c81c:	88fb      	ldrh	r3, [r7, #6]
9000c81e:	429a      	cmp	r2, r3
9000c820:	d901      	bls.n	9000c826 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
9000c822:	88fb      	ldrh	r3, [r7, #6]
9000c824:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
9000c826:	8b7b      	ldrh	r3, [r7, #26]
9000c828:	68ba      	ldr	r2, [r7, #8]
9000c82a:	18d0      	adds	r0, r2, r3
9000c82c:	69fb      	ldr	r3, [r7, #28]
9000c82e:	685a      	ldr	r2, [r3, #4]
9000c830:	88bb      	ldrh	r3, [r7, #4]
9000c832:	4413      	add	r3, r2
9000c834:	8b3a      	ldrh	r2, [r7, #24]
9000c836:	4619      	mov	r1, r3
9000c838:	f009 f917 	bl	90015a6a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
9000c83c:	8afa      	ldrh	r2, [r7, #22]
9000c83e:	8b3b      	ldrh	r3, [r7, #24]
9000c840:	4413      	add	r3, r2
9000c842:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
9000c844:	8b7a      	ldrh	r2, [r7, #26]
9000c846:	8b3b      	ldrh	r3, [r7, #24]
9000c848:	4413      	add	r3, r2
9000c84a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
9000c84c:	88fa      	ldrh	r2, [r7, #6]
9000c84e:	8b3b      	ldrh	r3, [r7, #24]
9000c850:	1ad3      	subs	r3, r2, r3
9000c852:	80fb      	strh	r3, [r7, #6]
      offset = 0;
9000c854:	2300      	movs	r3, #0
9000c856:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
9000c858:	69fb      	ldr	r3, [r7, #28]
9000c85a:	681b      	ldr	r3, [r3, #0]
9000c85c:	61fb      	str	r3, [r7, #28]
9000c85e:	88fb      	ldrh	r3, [r7, #6]
9000c860:	2b00      	cmp	r3, #0
9000c862:	d002      	beq.n	9000c86a <pbuf_copy_partial+0xca>
9000c864:	69fb      	ldr	r3, [r7, #28]
9000c866:	2b00      	cmp	r3, #0
9000c868:	d1c4      	bne.n	9000c7f4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
9000c86a:	8afb      	ldrh	r3, [r7, #22]
}
9000c86c:	4618      	mov	r0, r3
9000c86e:	3720      	adds	r7, #32
9000c870:	46bd      	mov	sp, r7
9000c872:	bd80      	pop	{r7, pc}
9000c874:	90018328 	.word	0x90018328
9000c878:	90018670 	.word	0x90018670
9000c87c:	90018388 	.word	0x90018388
9000c880:	90018690 	.word	0x90018690

9000c884 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
9000c884:	b580      	push	{r7, lr}
9000c886:	b084      	sub	sp, #16
9000c888:	af00      	add	r7, sp, #0
9000c88a:	4603      	mov	r3, r0
9000c88c:	603a      	str	r2, [r7, #0]
9000c88e:	71fb      	strb	r3, [r7, #7]
9000c890:	460b      	mov	r3, r1
9000c892:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
9000c894:	683b      	ldr	r3, [r7, #0]
9000c896:	8919      	ldrh	r1, [r3, #8]
9000c898:	88ba      	ldrh	r2, [r7, #4]
9000c89a:	79fb      	ldrb	r3, [r7, #7]
9000c89c:	4618      	mov	r0, r3
9000c89e:	f7ff faa5 	bl	9000bdec <pbuf_alloc>
9000c8a2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
9000c8a4:	68fb      	ldr	r3, [r7, #12]
9000c8a6:	2b00      	cmp	r3, #0
9000c8a8:	d101      	bne.n	9000c8ae <pbuf_clone+0x2a>
    return NULL;
9000c8aa:	2300      	movs	r3, #0
9000c8ac:	e011      	b.n	9000c8d2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
9000c8ae:	6839      	ldr	r1, [r7, #0]
9000c8b0:	68f8      	ldr	r0, [r7, #12]
9000c8b2:	f7ff fea3 	bl	9000c5fc <pbuf_copy>
9000c8b6:	4603      	mov	r3, r0
9000c8b8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
9000c8ba:	f997 300b 	ldrsb.w	r3, [r7, #11]
9000c8be:	2b00      	cmp	r3, #0
9000c8c0:	d006      	beq.n	9000c8d0 <pbuf_clone+0x4c>
9000c8c2:	4b06      	ldr	r3, [pc, #24]	; (9000c8dc <pbuf_clone+0x58>)
9000c8c4:	f240 5224 	movw	r2, #1316	; 0x524
9000c8c8:	4905      	ldr	r1, [pc, #20]	; (9000c8e0 <pbuf_clone+0x5c>)
9000c8ca:	4806      	ldr	r0, [pc, #24]	; (9000c8e4 <pbuf_clone+0x60>)
9000c8cc:	f009 f992 	bl	90015bf4 <iprintf>
  return q;
9000c8d0:	68fb      	ldr	r3, [r7, #12]
}
9000c8d2:	4618      	mov	r0, r3
9000c8d4:	3710      	adds	r7, #16
9000c8d6:	46bd      	mov	sp, r7
9000c8d8:	bd80      	pop	{r7, pc}
9000c8da:	bf00      	nop
9000c8dc:	90018328 	.word	0x90018328
9000c8e0:	9001879c 	.word	0x9001879c
9000c8e4:	90018388 	.word	0x90018388

9000c8e8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
9000c8e8:	b580      	push	{r7, lr}
9000c8ea:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
9000c8ec:	f009 fa10 	bl	90015d10 <rand>
9000c8f0:	4603      	mov	r3, r0
9000c8f2:	b29b      	uxth	r3, r3
9000c8f4:	f3c3 030d 	ubfx	r3, r3, #0, #14
9000c8f8:	b29b      	uxth	r3, r3
9000c8fa:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
9000c8fe:	b29a      	uxth	r2, r3
9000c900:	4b01      	ldr	r3, [pc, #4]	; (9000c908 <tcp_init+0x20>)
9000c902:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
9000c904:	bf00      	nop
9000c906:	bd80      	pop	{r7, pc}
9000c908:	24000524 	.word	0x24000524

9000c90c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
9000c90c:	b580      	push	{r7, lr}
9000c90e:	b082      	sub	sp, #8
9000c910:	af00      	add	r7, sp, #0
9000c912:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
9000c914:	687b      	ldr	r3, [r7, #4]
9000c916:	7d1b      	ldrb	r3, [r3, #20]
9000c918:	2b01      	cmp	r3, #1
9000c91a:	d105      	bne.n	9000c928 <tcp_free+0x1c>
9000c91c:	4b06      	ldr	r3, [pc, #24]	; (9000c938 <tcp_free+0x2c>)
9000c91e:	22d4      	movs	r2, #212	; 0xd4
9000c920:	4906      	ldr	r1, [pc, #24]	; (9000c93c <tcp_free+0x30>)
9000c922:	4807      	ldr	r0, [pc, #28]	; (9000c940 <tcp_free+0x34>)
9000c924:	f009 f966 	bl	90015bf4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
9000c928:	6879      	ldr	r1, [r7, #4]
9000c92a:	2001      	movs	r0, #1
9000c92c:	f7fe fe9e 	bl	9000b66c <memp_free>
}
9000c930:	bf00      	nop
9000c932:	3708      	adds	r7, #8
9000c934:	46bd      	mov	sp, r7
9000c936:	bd80      	pop	{r7, pc}
9000c938:	90018828 	.word	0x90018828
9000c93c:	90018858 	.word	0x90018858
9000c940:	9001886c 	.word	0x9001886c

9000c944 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
9000c944:	b580      	push	{r7, lr}
9000c946:	b082      	sub	sp, #8
9000c948:	af00      	add	r7, sp, #0
9000c94a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
9000c94c:	687b      	ldr	r3, [r7, #4]
9000c94e:	7d1b      	ldrb	r3, [r3, #20]
9000c950:	2b01      	cmp	r3, #1
9000c952:	d105      	bne.n	9000c960 <tcp_free_listen+0x1c>
9000c954:	4b06      	ldr	r3, [pc, #24]	; (9000c970 <tcp_free_listen+0x2c>)
9000c956:	22df      	movs	r2, #223	; 0xdf
9000c958:	4906      	ldr	r1, [pc, #24]	; (9000c974 <tcp_free_listen+0x30>)
9000c95a:	4807      	ldr	r0, [pc, #28]	; (9000c978 <tcp_free_listen+0x34>)
9000c95c:	f009 f94a 	bl	90015bf4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
9000c960:	6879      	ldr	r1, [r7, #4]
9000c962:	2002      	movs	r0, #2
9000c964:	f7fe fe82 	bl	9000b66c <memp_free>
}
9000c968:	bf00      	nop
9000c96a:	3708      	adds	r7, #8
9000c96c:	46bd      	mov	sp, r7
9000c96e:	bd80      	pop	{r7, pc}
9000c970:	90018828 	.word	0x90018828
9000c974:	90018894 	.word	0x90018894
9000c978:	9001886c 	.word	0x9001886c

9000c97c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
9000c97c:	b580      	push	{r7, lr}
9000c97e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
9000c980:	f001 f85c 	bl	9000da3c <tcp_fasttmr>

  if (++tcp_timer & 1) {
9000c984:	4b07      	ldr	r3, [pc, #28]	; (9000c9a4 <tcp_tmr+0x28>)
9000c986:	781b      	ldrb	r3, [r3, #0]
9000c988:	3301      	adds	r3, #1
9000c98a:	b2da      	uxtb	r2, r3
9000c98c:	4b05      	ldr	r3, [pc, #20]	; (9000c9a4 <tcp_tmr+0x28>)
9000c98e:	701a      	strb	r2, [r3, #0]
9000c990:	4b04      	ldr	r3, [pc, #16]	; (9000c9a4 <tcp_tmr+0x28>)
9000c992:	781b      	ldrb	r3, [r3, #0]
9000c994:	f003 0301 	and.w	r3, r3, #1
9000c998:	2b00      	cmp	r3, #0
9000c99a:	d001      	beq.n	9000c9a0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
9000c99c:	f000 fd0e 	bl	9000d3bc <tcp_slowtmr>
  }
}
9000c9a0:	bf00      	nop
9000c9a2:	bd80      	pop	{r7, pc}
9000c9a4:	2401f3b9 	.word	0x2401f3b9

9000c9a8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
9000c9a8:	b580      	push	{r7, lr}
9000c9aa:	b084      	sub	sp, #16
9000c9ac:	af00      	add	r7, sp, #0
9000c9ae:	6078      	str	r0, [r7, #4]
9000c9b0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
9000c9b2:	683b      	ldr	r3, [r7, #0]
9000c9b4:	2b00      	cmp	r3, #0
9000c9b6:	d105      	bne.n	9000c9c4 <tcp_remove_listener+0x1c>
9000c9b8:	4b0d      	ldr	r3, [pc, #52]	; (9000c9f0 <tcp_remove_listener+0x48>)
9000c9ba:	22ff      	movs	r2, #255	; 0xff
9000c9bc:	490d      	ldr	r1, [pc, #52]	; (9000c9f4 <tcp_remove_listener+0x4c>)
9000c9be:	480e      	ldr	r0, [pc, #56]	; (9000c9f8 <tcp_remove_listener+0x50>)
9000c9c0:	f009 f918 	bl	90015bf4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
9000c9c4:	687b      	ldr	r3, [r7, #4]
9000c9c6:	60fb      	str	r3, [r7, #12]
9000c9c8:	e00a      	b.n	9000c9e0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
9000c9ca:	68fb      	ldr	r3, [r7, #12]
9000c9cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000c9ce:	683a      	ldr	r2, [r7, #0]
9000c9d0:	429a      	cmp	r2, r3
9000c9d2:	d102      	bne.n	9000c9da <tcp_remove_listener+0x32>
      pcb->listener = NULL;
9000c9d4:	68fb      	ldr	r3, [r7, #12]
9000c9d6:	2200      	movs	r2, #0
9000c9d8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
9000c9da:	68fb      	ldr	r3, [r7, #12]
9000c9dc:	68db      	ldr	r3, [r3, #12]
9000c9de:	60fb      	str	r3, [r7, #12]
9000c9e0:	68fb      	ldr	r3, [r7, #12]
9000c9e2:	2b00      	cmp	r3, #0
9000c9e4:	d1f1      	bne.n	9000c9ca <tcp_remove_listener+0x22>
    }
  }
}
9000c9e6:	bf00      	nop
9000c9e8:	bf00      	nop
9000c9ea:	3710      	adds	r7, #16
9000c9ec:	46bd      	mov	sp, r7
9000c9ee:	bd80      	pop	{r7, pc}
9000c9f0:	90018828 	.word	0x90018828
9000c9f4:	900188b0 	.word	0x900188b0
9000c9f8:	9001886c 	.word	0x9001886c

9000c9fc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
9000c9fc:	b580      	push	{r7, lr}
9000c9fe:	b084      	sub	sp, #16
9000ca00:	af00      	add	r7, sp, #0
9000ca02:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
9000ca04:	687b      	ldr	r3, [r7, #4]
9000ca06:	2b00      	cmp	r3, #0
9000ca08:	d106      	bne.n	9000ca18 <tcp_listen_closed+0x1c>
9000ca0a:	4b14      	ldr	r3, [pc, #80]	; (9000ca5c <tcp_listen_closed+0x60>)
9000ca0c:	f240 1211 	movw	r2, #273	; 0x111
9000ca10:	4913      	ldr	r1, [pc, #76]	; (9000ca60 <tcp_listen_closed+0x64>)
9000ca12:	4814      	ldr	r0, [pc, #80]	; (9000ca64 <tcp_listen_closed+0x68>)
9000ca14:	f009 f8ee 	bl	90015bf4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
9000ca18:	687b      	ldr	r3, [r7, #4]
9000ca1a:	7d1b      	ldrb	r3, [r3, #20]
9000ca1c:	2b01      	cmp	r3, #1
9000ca1e:	d006      	beq.n	9000ca2e <tcp_listen_closed+0x32>
9000ca20:	4b0e      	ldr	r3, [pc, #56]	; (9000ca5c <tcp_listen_closed+0x60>)
9000ca22:	f44f 7289 	mov.w	r2, #274	; 0x112
9000ca26:	4910      	ldr	r1, [pc, #64]	; (9000ca68 <tcp_listen_closed+0x6c>)
9000ca28:	480e      	ldr	r0, [pc, #56]	; (9000ca64 <tcp_listen_closed+0x68>)
9000ca2a:	f009 f8e3 	bl	90015bf4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
9000ca2e:	2301      	movs	r3, #1
9000ca30:	60fb      	str	r3, [r7, #12]
9000ca32:	e00b      	b.n	9000ca4c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
9000ca34:	4a0d      	ldr	r2, [pc, #52]	; (9000ca6c <tcp_listen_closed+0x70>)
9000ca36:	68fb      	ldr	r3, [r7, #12]
9000ca38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
9000ca3c:	681b      	ldr	r3, [r3, #0]
9000ca3e:	6879      	ldr	r1, [r7, #4]
9000ca40:	4618      	mov	r0, r3
9000ca42:	f7ff ffb1 	bl	9000c9a8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
9000ca46:	68fb      	ldr	r3, [r7, #12]
9000ca48:	3301      	adds	r3, #1
9000ca4a:	60fb      	str	r3, [r7, #12]
9000ca4c:	68fb      	ldr	r3, [r7, #12]
9000ca4e:	2b03      	cmp	r3, #3
9000ca50:	d9f0      	bls.n	9000ca34 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
9000ca52:	bf00      	nop
9000ca54:	bf00      	nop
9000ca56:	3710      	adds	r7, #16
9000ca58:	46bd      	mov	sp, r7
9000ca5a:	bd80      	pop	{r7, pc}
9000ca5c:	90018828 	.word	0x90018828
9000ca60:	900188d8 	.word	0x900188d8
9000ca64:	9001886c 	.word	0x9001886c
9000ca68:	900188e4 	.word	0x900188e4
9000ca6c:	9002110c 	.word	0x9002110c

9000ca70 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
9000ca70:	b5b0      	push	{r4, r5, r7, lr}
9000ca72:	b088      	sub	sp, #32
9000ca74:	af04      	add	r7, sp, #16
9000ca76:	6078      	str	r0, [r7, #4]
9000ca78:	460b      	mov	r3, r1
9000ca7a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
9000ca7c:	687b      	ldr	r3, [r7, #4]
9000ca7e:	2b00      	cmp	r3, #0
9000ca80:	d106      	bne.n	9000ca90 <tcp_close_shutdown+0x20>
9000ca82:	4b63      	ldr	r3, [pc, #396]	; (9000cc10 <tcp_close_shutdown+0x1a0>)
9000ca84:	f44f 72af 	mov.w	r2, #350	; 0x15e
9000ca88:	4962      	ldr	r1, [pc, #392]	; (9000cc14 <tcp_close_shutdown+0x1a4>)
9000ca8a:	4863      	ldr	r0, [pc, #396]	; (9000cc18 <tcp_close_shutdown+0x1a8>)
9000ca8c:	f009 f8b2 	bl	90015bf4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
9000ca90:	78fb      	ldrb	r3, [r7, #3]
9000ca92:	2b00      	cmp	r3, #0
9000ca94:	d066      	beq.n	9000cb64 <tcp_close_shutdown+0xf4>
9000ca96:	687b      	ldr	r3, [r7, #4]
9000ca98:	7d1b      	ldrb	r3, [r3, #20]
9000ca9a:	2b04      	cmp	r3, #4
9000ca9c:	d003      	beq.n	9000caa6 <tcp_close_shutdown+0x36>
9000ca9e:	687b      	ldr	r3, [r7, #4]
9000caa0:	7d1b      	ldrb	r3, [r3, #20]
9000caa2:	2b07      	cmp	r3, #7
9000caa4:	d15e      	bne.n	9000cb64 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
9000caa6:	687b      	ldr	r3, [r7, #4]
9000caa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000caaa:	2b00      	cmp	r3, #0
9000caac:	d104      	bne.n	9000cab8 <tcp_close_shutdown+0x48>
9000caae:	687b      	ldr	r3, [r7, #4]
9000cab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
9000cab2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
9000cab6:	d055      	beq.n	9000cb64 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
9000cab8:	687b      	ldr	r3, [r7, #4]
9000caba:	8b5b      	ldrh	r3, [r3, #26]
9000cabc:	f003 0310 	and.w	r3, r3, #16
9000cac0:	2b00      	cmp	r3, #0
9000cac2:	d106      	bne.n	9000cad2 <tcp_close_shutdown+0x62>
9000cac4:	4b52      	ldr	r3, [pc, #328]	; (9000cc10 <tcp_close_shutdown+0x1a0>)
9000cac6:	f44f 72b2 	mov.w	r2, #356	; 0x164
9000caca:	4954      	ldr	r1, [pc, #336]	; (9000cc1c <tcp_close_shutdown+0x1ac>)
9000cacc:	4852      	ldr	r0, [pc, #328]	; (9000cc18 <tcp_close_shutdown+0x1a8>)
9000cace:	f009 f891 	bl	90015bf4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
9000cad2:	687b      	ldr	r3, [r7, #4]
9000cad4:	6d18      	ldr	r0, [r3, #80]	; 0x50
9000cad6:	687b      	ldr	r3, [r7, #4]
9000cad8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
9000cada:	687d      	ldr	r5, [r7, #4]
9000cadc:	687b      	ldr	r3, [r7, #4]
9000cade:	3304      	adds	r3, #4
9000cae0:	687a      	ldr	r2, [r7, #4]
9000cae2:	8ad2      	ldrh	r2, [r2, #22]
9000cae4:	6879      	ldr	r1, [r7, #4]
9000cae6:	8b09      	ldrh	r1, [r1, #24]
9000cae8:	9102      	str	r1, [sp, #8]
9000caea:	9201      	str	r2, [sp, #4]
9000caec:	9300      	str	r3, [sp, #0]
9000caee:	462b      	mov	r3, r5
9000caf0:	4622      	mov	r2, r4
9000caf2:	4601      	mov	r1, r0
9000caf4:	6878      	ldr	r0, [r7, #4]
9000caf6:	f005 fd8f 	bl	90012618 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
9000cafa:	6878      	ldr	r0, [r7, #4]
9000cafc:	f001 fb6c 	bl	9000e1d8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
9000cb00:	4b47      	ldr	r3, [pc, #284]	; (9000cc20 <tcp_close_shutdown+0x1b0>)
9000cb02:	681b      	ldr	r3, [r3, #0]
9000cb04:	687a      	ldr	r2, [r7, #4]
9000cb06:	429a      	cmp	r2, r3
9000cb08:	d105      	bne.n	9000cb16 <tcp_close_shutdown+0xa6>
9000cb0a:	4b45      	ldr	r3, [pc, #276]	; (9000cc20 <tcp_close_shutdown+0x1b0>)
9000cb0c:	681b      	ldr	r3, [r3, #0]
9000cb0e:	68db      	ldr	r3, [r3, #12]
9000cb10:	4a43      	ldr	r2, [pc, #268]	; (9000cc20 <tcp_close_shutdown+0x1b0>)
9000cb12:	6013      	str	r3, [r2, #0]
9000cb14:	e013      	b.n	9000cb3e <tcp_close_shutdown+0xce>
9000cb16:	4b42      	ldr	r3, [pc, #264]	; (9000cc20 <tcp_close_shutdown+0x1b0>)
9000cb18:	681b      	ldr	r3, [r3, #0]
9000cb1a:	60fb      	str	r3, [r7, #12]
9000cb1c:	e00c      	b.n	9000cb38 <tcp_close_shutdown+0xc8>
9000cb1e:	68fb      	ldr	r3, [r7, #12]
9000cb20:	68db      	ldr	r3, [r3, #12]
9000cb22:	687a      	ldr	r2, [r7, #4]
9000cb24:	429a      	cmp	r2, r3
9000cb26:	d104      	bne.n	9000cb32 <tcp_close_shutdown+0xc2>
9000cb28:	687b      	ldr	r3, [r7, #4]
9000cb2a:	68da      	ldr	r2, [r3, #12]
9000cb2c:	68fb      	ldr	r3, [r7, #12]
9000cb2e:	60da      	str	r2, [r3, #12]
9000cb30:	e005      	b.n	9000cb3e <tcp_close_shutdown+0xce>
9000cb32:	68fb      	ldr	r3, [r7, #12]
9000cb34:	68db      	ldr	r3, [r3, #12]
9000cb36:	60fb      	str	r3, [r7, #12]
9000cb38:	68fb      	ldr	r3, [r7, #12]
9000cb3a:	2b00      	cmp	r3, #0
9000cb3c:	d1ef      	bne.n	9000cb1e <tcp_close_shutdown+0xae>
9000cb3e:	687b      	ldr	r3, [r7, #4]
9000cb40:	2200      	movs	r2, #0
9000cb42:	60da      	str	r2, [r3, #12]
9000cb44:	4b37      	ldr	r3, [pc, #220]	; (9000cc24 <tcp_close_shutdown+0x1b4>)
9000cb46:	2201      	movs	r2, #1
9000cb48:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
9000cb4a:	4b37      	ldr	r3, [pc, #220]	; (9000cc28 <tcp_close_shutdown+0x1b8>)
9000cb4c:	681b      	ldr	r3, [r3, #0]
9000cb4e:	687a      	ldr	r2, [r7, #4]
9000cb50:	429a      	cmp	r2, r3
9000cb52:	d102      	bne.n	9000cb5a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
9000cb54:	f004 f804 	bl	90010b60 <tcp_trigger_input_pcb_close>
9000cb58:	e002      	b.n	9000cb60 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
9000cb5a:	6878      	ldr	r0, [r7, #4]
9000cb5c:	f7ff fed6 	bl	9000c90c <tcp_free>
      }
      return ERR_OK;
9000cb60:	2300      	movs	r3, #0
9000cb62:	e050      	b.n	9000cc06 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
9000cb64:	687b      	ldr	r3, [r7, #4]
9000cb66:	7d1b      	ldrb	r3, [r3, #20]
9000cb68:	2b02      	cmp	r3, #2
9000cb6a:	d03b      	beq.n	9000cbe4 <tcp_close_shutdown+0x174>
9000cb6c:	2b02      	cmp	r3, #2
9000cb6e:	dc44      	bgt.n	9000cbfa <tcp_close_shutdown+0x18a>
9000cb70:	2b00      	cmp	r3, #0
9000cb72:	d002      	beq.n	9000cb7a <tcp_close_shutdown+0x10a>
9000cb74:	2b01      	cmp	r3, #1
9000cb76:	d02a      	beq.n	9000cbce <tcp_close_shutdown+0x15e>
9000cb78:	e03f      	b.n	9000cbfa <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
9000cb7a:	687b      	ldr	r3, [r7, #4]
9000cb7c:	8adb      	ldrh	r3, [r3, #22]
9000cb7e:	2b00      	cmp	r3, #0
9000cb80:	d021      	beq.n	9000cbc6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
9000cb82:	4b2a      	ldr	r3, [pc, #168]	; (9000cc2c <tcp_close_shutdown+0x1bc>)
9000cb84:	681b      	ldr	r3, [r3, #0]
9000cb86:	687a      	ldr	r2, [r7, #4]
9000cb88:	429a      	cmp	r2, r3
9000cb8a:	d105      	bne.n	9000cb98 <tcp_close_shutdown+0x128>
9000cb8c:	4b27      	ldr	r3, [pc, #156]	; (9000cc2c <tcp_close_shutdown+0x1bc>)
9000cb8e:	681b      	ldr	r3, [r3, #0]
9000cb90:	68db      	ldr	r3, [r3, #12]
9000cb92:	4a26      	ldr	r2, [pc, #152]	; (9000cc2c <tcp_close_shutdown+0x1bc>)
9000cb94:	6013      	str	r3, [r2, #0]
9000cb96:	e013      	b.n	9000cbc0 <tcp_close_shutdown+0x150>
9000cb98:	4b24      	ldr	r3, [pc, #144]	; (9000cc2c <tcp_close_shutdown+0x1bc>)
9000cb9a:	681b      	ldr	r3, [r3, #0]
9000cb9c:	60bb      	str	r3, [r7, #8]
9000cb9e:	e00c      	b.n	9000cbba <tcp_close_shutdown+0x14a>
9000cba0:	68bb      	ldr	r3, [r7, #8]
9000cba2:	68db      	ldr	r3, [r3, #12]
9000cba4:	687a      	ldr	r2, [r7, #4]
9000cba6:	429a      	cmp	r2, r3
9000cba8:	d104      	bne.n	9000cbb4 <tcp_close_shutdown+0x144>
9000cbaa:	687b      	ldr	r3, [r7, #4]
9000cbac:	68da      	ldr	r2, [r3, #12]
9000cbae:	68bb      	ldr	r3, [r7, #8]
9000cbb0:	60da      	str	r2, [r3, #12]
9000cbb2:	e005      	b.n	9000cbc0 <tcp_close_shutdown+0x150>
9000cbb4:	68bb      	ldr	r3, [r7, #8]
9000cbb6:	68db      	ldr	r3, [r3, #12]
9000cbb8:	60bb      	str	r3, [r7, #8]
9000cbba:	68bb      	ldr	r3, [r7, #8]
9000cbbc:	2b00      	cmp	r3, #0
9000cbbe:	d1ef      	bne.n	9000cba0 <tcp_close_shutdown+0x130>
9000cbc0:	687b      	ldr	r3, [r7, #4]
9000cbc2:	2200      	movs	r2, #0
9000cbc4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
9000cbc6:	6878      	ldr	r0, [r7, #4]
9000cbc8:	f7ff fea0 	bl	9000c90c <tcp_free>
      break;
9000cbcc:	e01a      	b.n	9000cc04 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
9000cbce:	6878      	ldr	r0, [r7, #4]
9000cbd0:	f7ff ff14 	bl	9000c9fc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
9000cbd4:	6879      	ldr	r1, [r7, #4]
9000cbd6:	4816      	ldr	r0, [pc, #88]	; (9000cc30 <tcp_close_shutdown+0x1c0>)
9000cbd8:	f001 fb4e 	bl	9000e278 <tcp_pcb_remove>
      tcp_free_listen(pcb);
9000cbdc:	6878      	ldr	r0, [r7, #4]
9000cbde:	f7ff feb1 	bl	9000c944 <tcp_free_listen>
      break;
9000cbe2:	e00f      	b.n	9000cc04 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
9000cbe4:	6879      	ldr	r1, [r7, #4]
9000cbe6:	480e      	ldr	r0, [pc, #56]	; (9000cc20 <tcp_close_shutdown+0x1b0>)
9000cbe8:	f001 fb46 	bl	9000e278 <tcp_pcb_remove>
9000cbec:	4b0d      	ldr	r3, [pc, #52]	; (9000cc24 <tcp_close_shutdown+0x1b4>)
9000cbee:	2201      	movs	r2, #1
9000cbf0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
9000cbf2:	6878      	ldr	r0, [r7, #4]
9000cbf4:	f7ff fe8a 	bl	9000c90c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
9000cbf8:	e004      	b.n	9000cc04 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
9000cbfa:	6878      	ldr	r0, [r7, #4]
9000cbfc:	f000 f81a 	bl	9000cc34 <tcp_close_shutdown_fin>
9000cc00:	4603      	mov	r3, r0
9000cc02:	e000      	b.n	9000cc06 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
9000cc04:	2300      	movs	r3, #0
}
9000cc06:	4618      	mov	r0, r3
9000cc08:	3710      	adds	r7, #16
9000cc0a:	46bd      	mov	sp, r7
9000cc0c:	bdb0      	pop	{r4, r5, r7, pc}
9000cc0e:	bf00      	nop
9000cc10:	90018828 	.word	0x90018828
9000cc14:	900188fc 	.word	0x900188fc
9000cc18:	9001886c 	.word	0x9001886c
9000cc1c:	9001891c 	.word	0x9001891c
9000cc20:	2401f3b0 	.word	0x2401f3b0
9000cc24:	2401f3b8 	.word	0x2401f3b8
9000cc28:	2401f3f0 	.word	0x2401f3f0
9000cc2c:	2401f3a8 	.word	0x2401f3a8
9000cc30:	2401f3ac 	.word	0x2401f3ac

9000cc34 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
9000cc34:	b580      	push	{r7, lr}
9000cc36:	b084      	sub	sp, #16
9000cc38:	af00      	add	r7, sp, #0
9000cc3a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
9000cc3c:	687b      	ldr	r3, [r7, #4]
9000cc3e:	2b00      	cmp	r3, #0
9000cc40:	d106      	bne.n	9000cc50 <tcp_close_shutdown_fin+0x1c>
9000cc42:	4b2e      	ldr	r3, [pc, #184]	; (9000ccfc <tcp_close_shutdown_fin+0xc8>)
9000cc44:	f44f 72ce 	mov.w	r2, #412	; 0x19c
9000cc48:	492d      	ldr	r1, [pc, #180]	; (9000cd00 <tcp_close_shutdown_fin+0xcc>)
9000cc4a:	482e      	ldr	r0, [pc, #184]	; (9000cd04 <tcp_close_shutdown_fin+0xd0>)
9000cc4c:	f008 ffd2 	bl	90015bf4 <iprintf>

  switch (pcb->state) {
9000cc50:	687b      	ldr	r3, [r7, #4]
9000cc52:	7d1b      	ldrb	r3, [r3, #20]
9000cc54:	2b07      	cmp	r3, #7
9000cc56:	d020      	beq.n	9000cc9a <tcp_close_shutdown_fin+0x66>
9000cc58:	2b07      	cmp	r3, #7
9000cc5a:	dc2b      	bgt.n	9000ccb4 <tcp_close_shutdown_fin+0x80>
9000cc5c:	2b03      	cmp	r3, #3
9000cc5e:	d002      	beq.n	9000cc66 <tcp_close_shutdown_fin+0x32>
9000cc60:	2b04      	cmp	r3, #4
9000cc62:	d00d      	beq.n	9000cc80 <tcp_close_shutdown_fin+0x4c>
9000cc64:	e026      	b.n	9000ccb4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
9000cc66:	6878      	ldr	r0, [r7, #4]
9000cc68:	f004 fde4 	bl	90011834 <tcp_send_fin>
9000cc6c:	4603      	mov	r3, r0
9000cc6e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
9000cc70:	f997 300f 	ldrsb.w	r3, [r7, #15]
9000cc74:	2b00      	cmp	r3, #0
9000cc76:	d11f      	bne.n	9000ccb8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
9000cc78:	687b      	ldr	r3, [r7, #4]
9000cc7a:	2205      	movs	r2, #5
9000cc7c:	751a      	strb	r2, [r3, #20]
      }
      break;
9000cc7e:	e01b      	b.n	9000ccb8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
9000cc80:	6878      	ldr	r0, [r7, #4]
9000cc82:	f004 fdd7 	bl	90011834 <tcp_send_fin>
9000cc86:	4603      	mov	r3, r0
9000cc88:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
9000cc8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
9000cc8e:	2b00      	cmp	r3, #0
9000cc90:	d114      	bne.n	9000ccbc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
9000cc92:	687b      	ldr	r3, [r7, #4]
9000cc94:	2205      	movs	r2, #5
9000cc96:	751a      	strb	r2, [r3, #20]
      }
      break;
9000cc98:	e010      	b.n	9000ccbc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
9000cc9a:	6878      	ldr	r0, [r7, #4]
9000cc9c:	f004 fdca 	bl	90011834 <tcp_send_fin>
9000cca0:	4603      	mov	r3, r0
9000cca2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
9000cca4:	f997 300f 	ldrsb.w	r3, [r7, #15]
9000cca8:	2b00      	cmp	r3, #0
9000ccaa:	d109      	bne.n	9000ccc0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
9000ccac:	687b      	ldr	r3, [r7, #4]
9000ccae:	2209      	movs	r2, #9
9000ccb0:	751a      	strb	r2, [r3, #20]
      }
      break;
9000ccb2:	e005      	b.n	9000ccc0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
9000ccb4:	2300      	movs	r3, #0
9000ccb6:	e01c      	b.n	9000ccf2 <tcp_close_shutdown_fin+0xbe>
      break;
9000ccb8:	bf00      	nop
9000ccba:	e002      	b.n	9000ccc2 <tcp_close_shutdown_fin+0x8e>
      break;
9000ccbc:	bf00      	nop
9000ccbe:	e000      	b.n	9000ccc2 <tcp_close_shutdown_fin+0x8e>
      break;
9000ccc0:	bf00      	nop
  }

  if (err == ERR_OK) {
9000ccc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
9000ccc6:	2b00      	cmp	r3, #0
9000ccc8:	d103      	bne.n	9000ccd2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
9000ccca:	6878      	ldr	r0, [r7, #4]
9000cccc:	f004 fef0 	bl	90011ab0 <tcp_output>
9000ccd0:	e00d      	b.n	9000ccee <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
9000ccd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
9000ccd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
9000ccda:	d108      	bne.n	9000ccee <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
9000ccdc:	687b      	ldr	r3, [r7, #4]
9000ccde:	8b5b      	ldrh	r3, [r3, #26]
9000cce0:	f043 0308 	orr.w	r3, r3, #8
9000cce4:	b29a      	uxth	r2, r3
9000cce6:	687b      	ldr	r3, [r7, #4]
9000cce8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
9000ccea:	2300      	movs	r3, #0
9000ccec:	e001      	b.n	9000ccf2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
9000ccee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
9000ccf2:	4618      	mov	r0, r3
9000ccf4:	3710      	adds	r7, #16
9000ccf6:	46bd      	mov	sp, r7
9000ccf8:	bd80      	pop	{r7, pc}
9000ccfa:	bf00      	nop
9000ccfc:	90018828 	.word	0x90018828
9000cd00:	900188d8 	.word	0x900188d8
9000cd04:	9001886c 	.word	0x9001886c

9000cd08 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
9000cd08:	b580      	push	{r7, lr}
9000cd0a:	b082      	sub	sp, #8
9000cd0c:	af00      	add	r7, sp, #0
9000cd0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
9000cd10:	687b      	ldr	r3, [r7, #4]
9000cd12:	2b00      	cmp	r3, #0
9000cd14:	d109      	bne.n	9000cd2a <tcp_close+0x22>
9000cd16:	4b0f      	ldr	r3, [pc, #60]	; (9000cd54 <tcp_close+0x4c>)
9000cd18:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
9000cd1c:	490e      	ldr	r1, [pc, #56]	; (9000cd58 <tcp_close+0x50>)
9000cd1e:	480f      	ldr	r0, [pc, #60]	; (9000cd5c <tcp_close+0x54>)
9000cd20:	f008 ff68 	bl	90015bf4 <iprintf>
9000cd24:	f06f 030f 	mvn.w	r3, #15
9000cd28:	e00f      	b.n	9000cd4a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
9000cd2a:	687b      	ldr	r3, [r7, #4]
9000cd2c:	7d1b      	ldrb	r3, [r3, #20]
9000cd2e:	2b01      	cmp	r3, #1
9000cd30:	d006      	beq.n	9000cd40 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
9000cd32:	687b      	ldr	r3, [r7, #4]
9000cd34:	8b5b      	ldrh	r3, [r3, #26]
9000cd36:	f043 0310 	orr.w	r3, r3, #16
9000cd3a:	b29a      	uxth	r2, r3
9000cd3c:	687b      	ldr	r3, [r7, #4]
9000cd3e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
9000cd40:	2101      	movs	r1, #1
9000cd42:	6878      	ldr	r0, [r7, #4]
9000cd44:	f7ff fe94 	bl	9000ca70 <tcp_close_shutdown>
9000cd48:	4603      	mov	r3, r0
}
9000cd4a:	4618      	mov	r0, r3
9000cd4c:	3708      	adds	r7, #8
9000cd4e:	46bd      	mov	sp, r7
9000cd50:	bd80      	pop	{r7, pc}
9000cd52:	bf00      	nop
9000cd54:	90018828 	.word	0x90018828
9000cd58:	90018938 	.word	0x90018938
9000cd5c:	9001886c 	.word	0x9001886c

9000cd60 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
9000cd60:	b580      	push	{r7, lr}
9000cd62:	b08e      	sub	sp, #56	; 0x38
9000cd64:	af04      	add	r7, sp, #16
9000cd66:	6078      	str	r0, [r7, #4]
9000cd68:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
9000cd6a:	687b      	ldr	r3, [r7, #4]
9000cd6c:	2b00      	cmp	r3, #0
9000cd6e:	d107      	bne.n	9000cd80 <tcp_abandon+0x20>
9000cd70:	4b52      	ldr	r3, [pc, #328]	; (9000cebc <tcp_abandon+0x15c>)
9000cd72:	f240 223d 	movw	r2, #573	; 0x23d
9000cd76:	4952      	ldr	r1, [pc, #328]	; (9000cec0 <tcp_abandon+0x160>)
9000cd78:	4852      	ldr	r0, [pc, #328]	; (9000cec4 <tcp_abandon+0x164>)
9000cd7a:	f008 ff3b 	bl	90015bf4 <iprintf>
9000cd7e:	e099      	b.n	9000ceb4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
9000cd80:	687b      	ldr	r3, [r7, #4]
9000cd82:	7d1b      	ldrb	r3, [r3, #20]
9000cd84:	2b01      	cmp	r3, #1
9000cd86:	d106      	bne.n	9000cd96 <tcp_abandon+0x36>
9000cd88:	4b4c      	ldr	r3, [pc, #304]	; (9000cebc <tcp_abandon+0x15c>)
9000cd8a:	f44f 7210 	mov.w	r2, #576	; 0x240
9000cd8e:	494e      	ldr	r1, [pc, #312]	; (9000cec8 <tcp_abandon+0x168>)
9000cd90:	484c      	ldr	r0, [pc, #304]	; (9000cec4 <tcp_abandon+0x164>)
9000cd92:	f008 ff2f 	bl	90015bf4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
9000cd96:	687b      	ldr	r3, [r7, #4]
9000cd98:	7d1b      	ldrb	r3, [r3, #20]
9000cd9a:	2b0a      	cmp	r3, #10
9000cd9c:	d107      	bne.n	9000cdae <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
9000cd9e:	6879      	ldr	r1, [r7, #4]
9000cda0:	484a      	ldr	r0, [pc, #296]	; (9000cecc <tcp_abandon+0x16c>)
9000cda2:	f001 fa69 	bl	9000e278 <tcp_pcb_remove>
    tcp_free(pcb);
9000cda6:	6878      	ldr	r0, [r7, #4]
9000cda8:	f7ff fdb0 	bl	9000c90c <tcp_free>
9000cdac:	e082      	b.n	9000ceb4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
9000cdae:	2300      	movs	r3, #0
9000cdb0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
9000cdb2:	2300      	movs	r3, #0
9000cdb4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
9000cdb6:	687b      	ldr	r3, [r7, #4]
9000cdb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9000cdba:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
9000cdbc:	687b      	ldr	r3, [r7, #4]
9000cdbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000cdc0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
9000cdc2:	687b      	ldr	r3, [r7, #4]
9000cdc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000cdc8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
9000cdca:	687b      	ldr	r3, [r7, #4]
9000cdcc:	691b      	ldr	r3, [r3, #16]
9000cdce:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
9000cdd0:	687b      	ldr	r3, [r7, #4]
9000cdd2:	7d1b      	ldrb	r3, [r3, #20]
9000cdd4:	2b00      	cmp	r3, #0
9000cdd6:	d126      	bne.n	9000ce26 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
9000cdd8:	687b      	ldr	r3, [r7, #4]
9000cdda:	8adb      	ldrh	r3, [r3, #22]
9000cddc:	2b00      	cmp	r3, #0
9000cdde:	d02e      	beq.n	9000ce3e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
9000cde0:	4b3b      	ldr	r3, [pc, #236]	; (9000ced0 <tcp_abandon+0x170>)
9000cde2:	681b      	ldr	r3, [r3, #0]
9000cde4:	687a      	ldr	r2, [r7, #4]
9000cde6:	429a      	cmp	r2, r3
9000cde8:	d105      	bne.n	9000cdf6 <tcp_abandon+0x96>
9000cdea:	4b39      	ldr	r3, [pc, #228]	; (9000ced0 <tcp_abandon+0x170>)
9000cdec:	681b      	ldr	r3, [r3, #0]
9000cdee:	68db      	ldr	r3, [r3, #12]
9000cdf0:	4a37      	ldr	r2, [pc, #220]	; (9000ced0 <tcp_abandon+0x170>)
9000cdf2:	6013      	str	r3, [r2, #0]
9000cdf4:	e013      	b.n	9000ce1e <tcp_abandon+0xbe>
9000cdf6:	4b36      	ldr	r3, [pc, #216]	; (9000ced0 <tcp_abandon+0x170>)
9000cdf8:	681b      	ldr	r3, [r3, #0]
9000cdfa:	61fb      	str	r3, [r7, #28]
9000cdfc:	e00c      	b.n	9000ce18 <tcp_abandon+0xb8>
9000cdfe:	69fb      	ldr	r3, [r7, #28]
9000ce00:	68db      	ldr	r3, [r3, #12]
9000ce02:	687a      	ldr	r2, [r7, #4]
9000ce04:	429a      	cmp	r2, r3
9000ce06:	d104      	bne.n	9000ce12 <tcp_abandon+0xb2>
9000ce08:	687b      	ldr	r3, [r7, #4]
9000ce0a:	68da      	ldr	r2, [r3, #12]
9000ce0c:	69fb      	ldr	r3, [r7, #28]
9000ce0e:	60da      	str	r2, [r3, #12]
9000ce10:	e005      	b.n	9000ce1e <tcp_abandon+0xbe>
9000ce12:	69fb      	ldr	r3, [r7, #28]
9000ce14:	68db      	ldr	r3, [r3, #12]
9000ce16:	61fb      	str	r3, [r7, #28]
9000ce18:	69fb      	ldr	r3, [r7, #28]
9000ce1a:	2b00      	cmp	r3, #0
9000ce1c:	d1ef      	bne.n	9000cdfe <tcp_abandon+0x9e>
9000ce1e:	687b      	ldr	r3, [r7, #4]
9000ce20:	2200      	movs	r2, #0
9000ce22:	60da      	str	r2, [r3, #12]
9000ce24:	e00b      	b.n	9000ce3e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
9000ce26:	683b      	ldr	r3, [r7, #0]
9000ce28:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
9000ce2a:	687b      	ldr	r3, [r7, #4]
9000ce2c:	8adb      	ldrh	r3, [r3, #22]
9000ce2e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
9000ce30:	6879      	ldr	r1, [r7, #4]
9000ce32:	4828      	ldr	r0, [pc, #160]	; (9000ced4 <tcp_abandon+0x174>)
9000ce34:	f001 fa20 	bl	9000e278 <tcp_pcb_remove>
9000ce38:	4b27      	ldr	r3, [pc, #156]	; (9000ced8 <tcp_abandon+0x178>)
9000ce3a:	2201      	movs	r2, #1
9000ce3c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
9000ce3e:	687b      	ldr	r3, [r7, #4]
9000ce40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000ce42:	2b00      	cmp	r3, #0
9000ce44:	d004      	beq.n	9000ce50 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
9000ce46:	687b      	ldr	r3, [r7, #4]
9000ce48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000ce4a:	4618      	mov	r0, r3
9000ce4c:	f000 fed6 	bl	9000dbfc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
9000ce50:	687b      	ldr	r3, [r7, #4]
9000ce52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000ce54:	2b00      	cmp	r3, #0
9000ce56:	d004      	beq.n	9000ce62 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
9000ce58:	687b      	ldr	r3, [r7, #4]
9000ce5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000ce5c:	4618      	mov	r0, r3
9000ce5e:	f000 fecd 	bl	9000dbfc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
9000ce62:	687b      	ldr	r3, [r7, #4]
9000ce64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000ce66:	2b00      	cmp	r3, #0
9000ce68:	d004      	beq.n	9000ce74 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
9000ce6a:	687b      	ldr	r3, [r7, #4]
9000ce6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000ce6e:	4618      	mov	r0, r3
9000ce70:	f000 fec4 	bl	9000dbfc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
9000ce74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9000ce76:	2b00      	cmp	r3, #0
9000ce78:	d00e      	beq.n	9000ce98 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
9000ce7a:	6879      	ldr	r1, [r7, #4]
9000ce7c:	687b      	ldr	r3, [r7, #4]
9000ce7e:	3304      	adds	r3, #4
9000ce80:	687a      	ldr	r2, [r7, #4]
9000ce82:	8b12      	ldrh	r2, [r2, #24]
9000ce84:	9202      	str	r2, [sp, #8]
9000ce86:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
9000ce88:	9201      	str	r2, [sp, #4]
9000ce8a:	9300      	str	r3, [sp, #0]
9000ce8c:	460b      	mov	r3, r1
9000ce8e:	697a      	ldr	r2, [r7, #20]
9000ce90:	69b9      	ldr	r1, [r7, #24]
9000ce92:	6878      	ldr	r0, [r7, #4]
9000ce94:	f005 fbc0 	bl	90012618 <tcp_rst>
    }
    last_state = pcb->state;
9000ce98:	687b      	ldr	r3, [r7, #4]
9000ce9a:	7d1b      	ldrb	r3, [r3, #20]
9000ce9c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
9000ce9e:	6878      	ldr	r0, [r7, #4]
9000cea0:	f7ff fd34 	bl	9000c90c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
9000cea4:	693b      	ldr	r3, [r7, #16]
9000cea6:	2b00      	cmp	r3, #0
9000cea8:	d004      	beq.n	9000ceb4 <tcp_abandon+0x154>
9000ceaa:	693b      	ldr	r3, [r7, #16]
9000ceac:	f06f 010c 	mvn.w	r1, #12
9000ceb0:	68f8      	ldr	r0, [r7, #12]
9000ceb2:	4798      	blx	r3
  }
}
9000ceb4:	3728      	adds	r7, #40	; 0x28
9000ceb6:	46bd      	mov	sp, r7
9000ceb8:	bd80      	pop	{r7, pc}
9000ceba:	bf00      	nop
9000cebc:	90018828 	.word	0x90018828
9000cec0:	9001896c 	.word	0x9001896c
9000cec4:	9001886c 	.word	0x9001886c
9000cec8:	90018988 	.word	0x90018988
9000cecc:	2401f3b4 	.word	0x2401f3b4
9000ced0:	2401f3a8 	.word	0x2401f3a8
9000ced4:	2401f3b0 	.word	0x2401f3b0
9000ced8:	2401f3b8 	.word	0x2401f3b8

9000cedc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
9000cedc:	b580      	push	{r7, lr}
9000cede:	b082      	sub	sp, #8
9000cee0:	af00      	add	r7, sp, #0
9000cee2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
9000cee4:	2101      	movs	r1, #1
9000cee6:	6878      	ldr	r0, [r7, #4]
9000cee8:	f7ff ff3a 	bl	9000cd60 <tcp_abandon>
}
9000ceec:	bf00      	nop
9000ceee:	3708      	adds	r7, #8
9000cef0:	46bd      	mov	sp, r7
9000cef2:	bd80      	pop	{r7, pc}

9000cef4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
9000cef4:	b580      	push	{r7, lr}
9000cef6:	b088      	sub	sp, #32
9000cef8:	af00      	add	r7, sp, #0
9000cefa:	60f8      	str	r0, [r7, #12]
9000cefc:	60b9      	str	r1, [r7, #8]
9000cefe:	4613      	mov	r3, r2
9000cf00:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
9000cf02:	2304      	movs	r3, #4
9000cf04:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
9000cf06:	68bb      	ldr	r3, [r7, #8]
9000cf08:	2b00      	cmp	r3, #0
9000cf0a:	d101      	bne.n	9000cf10 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
9000cf0c:	4b3e      	ldr	r3, [pc, #248]	; (9000d008 <tcp_bind+0x114>)
9000cf0e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
9000cf10:	68fb      	ldr	r3, [r7, #12]
9000cf12:	2b00      	cmp	r3, #0
9000cf14:	d109      	bne.n	9000cf2a <tcp_bind+0x36>
9000cf16:	4b3d      	ldr	r3, [pc, #244]	; (9000d00c <tcp_bind+0x118>)
9000cf18:	f240 22a9 	movw	r2, #681	; 0x2a9
9000cf1c:	493c      	ldr	r1, [pc, #240]	; (9000d010 <tcp_bind+0x11c>)
9000cf1e:	483d      	ldr	r0, [pc, #244]	; (9000d014 <tcp_bind+0x120>)
9000cf20:	f008 fe68 	bl	90015bf4 <iprintf>
9000cf24:	f06f 030f 	mvn.w	r3, #15
9000cf28:	e06a      	b.n	9000d000 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
9000cf2a:	68fb      	ldr	r3, [r7, #12]
9000cf2c:	7d1b      	ldrb	r3, [r3, #20]
9000cf2e:	2b00      	cmp	r3, #0
9000cf30:	d009      	beq.n	9000cf46 <tcp_bind+0x52>
9000cf32:	4b36      	ldr	r3, [pc, #216]	; (9000d00c <tcp_bind+0x118>)
9000cf34:	f240 22ab 	movw	r2, #683	; 0x2ab
9000cf38:	4937      	ldr	r1, [pc, #220]	; (9000d018 <tcp_bind+0x124>)
9000cf3a:	4836      	ldr	r0, [pc, #216]	; (9000d014 <tcp_bind+0x120>)
9000cf3c:	f008 fe5a 	bl	90015bf4 <iprintf>
9000cf40:	f06f 0305 	mvn.w	r3, #5
9000cf44:	e05c      	b.n	9000d000 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
9000cf46:	88fb      	ldrh	r3, [r7, #6]
9000cf48:	2b00      	cmp	r3, #0
9000cf4a:	d109      	bne.n	9000cf60 <tcp_bind+0x6c>
    port = tcp_new_port();
9000cf4c:	f000 f9f0 	bl	9000d330 <tcp_new_port>
9000cf50:	4603      	mov	r3, r0
9000cf52:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
9000cf54:	88fb      	ldrh	r3, [r7, #6]
9000cf56:	2b00      	cmp	r3, #0
9000cf58:	d135      	bne.n	9000cfc6 <tcp_bind+0xd2>
      return ERR_BUF;
9000cf5a:	f06f 0301 	mvn.w	r3, #1
9000cf5e:	e04f      	b.n	9000d000 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
9000cf60:	2300      	movs	r3, #0
9000cf62:	61fb      	str	r3, [r7, #28]
9000cf64:	e02b      	b.n	9000cfbe <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
9000cf66:	4a2d      	ldr	r2, [pc, #180]	; (9000d01c <tcp_bind+0x128>)
9000cf68:	69fb      	ldr	r3, [r7, #28]
9000cf6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
9000cf6e:	681b      	ldr	r3, [r3, #0]
9000cf70:	61bb      	str	r3, [r7, #24]
9000cf72:	e01e      	b.n	9000cfb2 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
9000cf74:	69bb      	ldr	r3, [r7, #24]
9000cf76:	8adb      	ldrh	r3, [r3, #22]
9000cf78:	88fa      	ldrh	r2, [r7, #6]
9000cf7a:	429a      	cmp	r2, r3
9000cf7c:	d116      	bne.n	9000cfac <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
9000cf7e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
9000cf80:	2b00      	cmp	r3, #0
9000cf82:	d010      	beq.n	9000cfa6 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
9000cf84:	69bb      	ldr	r3, [r7, #24]
9000cf86:	681b      	ldr	r3, [r3, #0]
9000cf88:	2b00      	cmp	r3, #0
9000cf8a:	d00c      	beq.n	9000cfa6 <tcp_bind+0xb2>
9000cf8c:	68bb      	ldr	r3, [r7, #8]
9000cf8e:	2b00      	cmp	r3, #0
9000cf90:	d009      	beq.n	9000cfa6 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
9000cf92:	68bb      	ldr	r3, [r7, #8]
9000cf94:	681b      	ldr	r3, [r3, #0]
9000cf96:	2b00      	cmp	r3, #0
9000cf98:	d005      	beq.n	9000cfa6 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
9000cf9a:	69bb      	ldr	r3, [r7, #24]
9000cf9c:	681a      	ldr	r2, [r3, #0]
9000cf9e:	68bb      	ldr	r3, [r7, #8]
9000cfa0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
9000cfa2:	429a      	cmp	r2, r3
9000cfa4:	d102      	bne.n	9000cfac <tcp_bind+0xb8>
              return ERR_USE;
9000cfa6:	f06f 0307 	mvn.w	r3, #7
9000cfaa:	e029      	b.n	9000d000 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
9000cfac:	69bb      	ldr	r3, [r7, #24]
9000cfae:	68db      	ldr	r3, [r3, #12]
9000cfb0:	61bb      	str	r3, [r7, #24]
9000cfb2:	69bb      	ldr	r3, [r7, #24]
9000cfb4:	2b00      	cmp	r3, #0
9000cfb6:	d1dd      	bne.n	9000cf74 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
9000cfb8:	69fb      	ldr	r3, [r7, #28]
9000cfba:	3301      	adds	r3, #1
9000cfbc:	61fb      	str	r3, [r7, #28]
9000cfbe:	69fa      	ldr	r2, [r7, #28]
9000cfc0:	697b      	ldr	r3, [r7, #20]
9000cfc2:	429a      	cmp	r2, r3
9000cfc4:	dbcf      	blt.n	9000cf66 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
9000cfc6:	68bb      	ldr	r3, [r7, #8]
9000cfc8:	2b00      	cmp	r3, #0
9000cfca:	d00c      	beq.n	9000cfe6 <tcp_bind+0xf2>
9000cfcc:	68bb      	ldr	r3, [r7, #8]
9000cfce:	681b      	ldr	r3, [r3, #0]
9000cfd0:	2b00      	cmp	r3, #0
9000cfd2:	d008      	beq.n	9000cfe6 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
9000cfd4:	68bb      	ldr	r3, [r7, #8]
9000cfd6:	2b00      	cmp	r3, #0
9000cfd8:	d002      	beq.n	9000cfe0 <tcp_bind+0xec>
9000cfda:	68bb      	ldr	r3, [r7, #8]
9000cfdc:	681b      	ldr	r3, [r3, #0]
9000cfde:	e000      	b.n	9000cfe2 <tcp_bind+0xee>
9000cfe0:	2300      	movs	r3, #0
9000cfe2:	68fa      	ldr	r2, [r7, #12]
9000cfe4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
9000cfe6:	68fb      	ldr	r3, [r7, #12]
9000cfe8:	88fa      	ldrh	r2, [r7, #6]
9000cfea:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
9000cfec:	4b0c      	ldr	r3, [pc, #48]	; (9000d020 <tcp_bind+0x12c>)
9000cfee:	681a      	ldr	r2, [r3, #0]
9000cff0:	68fb      	ldr	r3, [r7, #12]
9000cff2:	60da      	str	r2, [r3, #12]
9000cff4:	4a0a      	ldr	r2, [pc, #40]	; (9000d020 <tcp_bind+0x12c>)
9000cff6:	68fb      	ldr	r3, [r7, #12]
9000cff8:	6013      	str	r3, [r2, #0]
9000cffa:	f005 fccf 	bl	9001299c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
9000cffe:	2300      	movs	r3, #0
}
9000d000:	4618      	mov	r0, r3
9000d002:	3720      	adds	r7, #32
9000d004:	46bd      	mov	sp, r7
9000d006:	bd80      	pop	{r7, pc}
9000d008:	90021134 	.word	0x90021134
9000d00c:	90018828 	.word	0x90018828
9000d010:	900189bc 	.word	0x900189bc
9000d014:	9001886c 	.word	0x9001886c
9000d018:	900189d4 	.word	0x900189d4
9000d01c:	9002110c 	.word	0x9002110c
9000d020:	2401f3a8 	.word	0x2401f3a8

9000d024 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
9000d024:	b580      	push	{r7, lr}
9000d026:	b084      	sub	sp, #16
9000d028:	af00      	add	r7, sp, #0
9000d02a:	60f8      	str	r0, [r7, #12]
9000d02c:	60b9      	str	r1, [r7, #8]
9000d02e:	4613      	mov	r3, r2
9000d030:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
9000d032:	68bb      	ldr	r3, [r7, #8]
9000d034:	2b00      	cmp	r3, #0
9000d036:	d106      	bne.n	9000d046 <tcp_accept_null+0x22>
9000d038:	4b07      	ldr	r3, [pc, #28]	; (9000d058 <tcp_accept_null+0x34>)
9000d03a:	f240 320f 	movw	r2, #783	; 0x30f
9000d03e:	4907      	ldr	r1, [pc, #28]	; (9000d05c <tcp_accept_null+0x38>)
9000d040:	4807      	ldr	r0, [pc, #28]	; (9000d060 <tcp_accept_null+0x3c>)
9000d042:	f008 fdd7 	bl	90015bf4 <iprintf>

  tcp_abort(pcb);
9000d046:	68b8      	ldr	r0, [r7, #8]
9000d048:	f7ff ff48 	bl	9000cedc <tcp_abort>

  return ERR_ABRT;
9000d04c:	f06f 030c 	mvn.w	r3, #12
}
9000d050:	4618      	mov	r0, r3
9000d052:	3710      	adds	r7, #16
9000d054:	46bd      	mov	sp, r7
9000d056:	bd80      	pop	{r7, pc}
9000d058:	90018828 	.word	0x90018828
9000d05c:	900189fc 	.word	0x900189fc
9000d060:	9001886c 	.word	0x9001886c

9000d064 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
9000d064:	b580      	push	{r7, lr}
9000d066:	b082      	sub	sp, #8
9000d068:	af00      	add	r7, sp, #0
9000d06a:	6078      	str	r0, [r7, #4]
9000d06c:	460b      	mov	r3, r1
9000d06e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
9000d070:	78fb      	ldrb	r3, [r7, #3]
9000d072:	2200      	movs	r2, #0
9000d074:	4619      	mov	r1, r3
9000d076:	6878      	ldr	r0, [r7, #4]
9000d078:	f000 f806 	bl	9000d088 <tcp_listen_with_backlog_and_err>
9000d07c:	4603      	mov	r3, r0
}
9000d07e:	4618      	mov	r0, r3
9000d080:	3708      	adds	r7, #8
9000d082:	46bd      	mov	sp, r7
9000d084:	bd80      	pop	{r7, pc}
	...

9000d088 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
9000d088:	b580      	push	{r7, lr}
9000d08a:	b088      	sub	sp, #32
9000d08c:	af00      	add	r7, sp, #0
9000d08e:	60f8      	str	r0, [r7, #12]
9000d090:	460b      	mov	r3, r1
9000d092:	607a      	str	r2, [r7, #4]
9000d094:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
9000d096:	2300      	movs	r3, #0
9000d098:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
9000d09a:	68fb      	ldr	r3, [r7, #12]
9000d09c:	2b00      	cmp	r3, #0
9000d09e:	d109      	bne.n	9000d0b4 <tcp_listen_with_backlog_and_err+0x2c>
9000d0a0:	4b47      	ldr	r3, [pc, #284]	; (9000d1c0 <tcp_listen_with_backlog_and_err+0x138>)
9000d0a2:	f240 3259 	movw	r2, #857	; 0x359
9000d0a6:	4947      	ldr	r1, [pc, #284]	; (9000d1c4 <tcp_listen_with_backlog_and_err+0x13c>)
9000d0a8:	4847      	ldr	r0, [pc, #284]	; (9000d1c8 <tcp_listen_with_backlog_and_err+0x140>)
9000d0aa:	f008 fda3 	bl	90015bf4 <iprintf>
9000d0ae:	23f0      	movs	r3, #240	; 0xf0
9000d0b0:	76fb      	strb	r3, [r7, #27]
9000d0b2:	e079      	b.n	9000d1a8 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
9000d0b4:	68fb      	ldr	r3, [r7, #12]
9000d0b6:	7d1b      	ldrb	r3, [r3, #20]
9000d0b8:	2b00      	cmp	r3, #0
9000d0ba:	d009      	beq.n	9000d0d0 <tcp_listen_with_backlog_and_err+0x48>
9000d0bc:	4b40      	ldr	r3, [pc, #256]	; (9000d1c0 <tcp_listen_with_backlog_and_err+0x138>)
9000d0be:	f240 325a 	movw	r2, #858	; 0x35a
9000d0c2:	4942      	ldr	r1, [pc, #264]	; (9000d1cc <tcp_listen_with_backlog_and_err+0x144>)
9000d0c4:	4840      	ldr	r0, [pc, #256]	; (9000d1c8 <tcp_listen_with_backlog_and_err+0x140>)
9000d0c6:	f008 fd95 	bl	90015bf4 <iprintf>
9000d0ca:	23f1      	movs	r3, #241	; 0xf1
9000d0cc:	76fb      	strb	r3, [r7, #27]
9000d0ce:	e06b      	b.n	9000d1a8 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
9000d0d0:	68fb      	ldr	r3, [r7, #12]
9000d0d2:	7d1b      	ldrb	r3, [r3, #20]
9000d0d4:	2b01      	cmp	r3, #1
9000d0d6:	d104      	bne.n	9000d0e2 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
9000d0d8:	68fb      	ldr	r3, [r7, #12]
9000d0da:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
9000d0dc:	23f7      	movs	r3, #247	; 0xf7
9000d0de:	76fb      	strb	r3, [r7, #27]
    goto done;
9000d0e0:	e062      	b.n	9000d1a8 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
9000d0e2:	2002      	movs	r0, #2
9000d0e4:	f7fe fa4c 	bl	9000b580 <memp_malloc>
9000d0e8:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
9000d0ea:	69fb      	ldr	r3, [r7, #28]
9000d0ec:	2b00      	cmp	r3, #0
9000d0ee:	d102      	bne.n	9000d0f6 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
9000d0f0:	23ff      	movs	r3, #255	; 0xff
9000d0f2:	76fb      	strb	r3, [r7, #27]
    goto done;
9000d0f4:	e058      	b.n	9000d1a8 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
9000d0f6:	68fb      	ldr	r3, [r7, #12]
9000d0f8:	691a      	ldr	r2, [r3, #16]
9000d0fa:	69fb      	ldr	r3, [r7, #28]
9000d0fc:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
9000d0fe:	68fb      	ldr	r3, [r7, #12]
9000d100:	8ada      	ldrh	r2, [r3, #22]
9000d102:	69fb      	ldr	r3, [r7, #28]
9000d104:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
9000d106:	69fb      	ldr	r3, [r7, #28]
9000d108:	2201      	movs	r2, #1
9000d10a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
9000d10c:	68fb      	ldr	r3, [r7, #12]
9000d10e:	7d5a      	ldrb	r2, [r3, #21]
9000d110:	69fb      	ldr	r3, [r7, #28]
9000d112:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
9000d114:	68fb      	ldr	r3, [r7, #12]
9000d116:	7a5a      	ldrb	r2, [r3, #9]
9000d118:	69fb      	ldr	r3, [r7, #28]
9000d11a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
9000d11c:	69fb      	ldr	r3, [r7, #28]
9000d11e:	2200      	movs	r2, #0
9000d120:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
9000d122:	68fb      	ldr	r3, [r7, #12]
9000d124:	7ada      	ldrb	r2, [r3, #11]
9000d126:	69fb      	ldr	r3, [r7, #28]
9000d128:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
9000d12a:	68fb      	ldr	r3, [r7, #12]
9000d12c:	7a9a      	ldrb	r2, [r3, #10]
9000d12e:	69fb      	ldr	r3, [r7, #28]
9000d130:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
9000d132:	68fb      	ldr	r3, [r7, #12]
9000d134:	681a      	ldr	r2, [r3, #0]
9000d136:	69fb      	ldr	r3, [r7, #28]
9000d138:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
9000d13a:	68fb      	ldr	r3, [r7, #12]
9000d13c:	8adb      	ldrh	r3, [r3, #22]
9000d13e:	2b00      	cmp	r3, #0
9000d140:	d021      	beq.n	9000d186 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
9000d142:	4b23      	ldr	r3, [pc, #140]	; (9000d1d0 <tcp_listen_with_backlog_and_err+0x148>)
9000d144:	681b      	ldr	r3, [r3, #0]
9000d146:	68fa      	ldr	r2, [r7, #12]
9000d148:	429a      	cmp	r2, r3
9000d14a:	d105      	bne.n	9000d158 <tcp_listen_with_backlog_and_err+0xd0>
9000d14c:	4b20      	ldr	r3, [pc, #128]	; (9000d1d0 <tcp_listen_with_backlog_and_err+0x148>)
9000d14e:	681b      	ldr	r3, [r3, #0]
9000d150:	68db      	ldr	r3, [r3, #12]
9000d152:	4a1f      	ldr	r2, [pc, #124]	; (9000d1d0 <tcp_listen_with_backlog_and_err+0x148>)
9000d154:	6013      	str	r3, [r2, #0]
9000d156:	e013      	b.n	9000d180 <tcp_listen_with_backlog_and_err+0xf8>
9000d158:	4b1d      	ldr	r3, [pc, #116]	; (9000d1d0 <tcp_listen_with_backlog_and_err+0x148>)
9000d15a:	681b      	ldr	r3, [r3, #0]
9000d15c:	617b      	str	r3, [r7, #20]
9000d15e:	e00c      	b.n	9000d17a <tcp_listen_with_backlog_and_err+0xf2>
9000d160:	697b      	ldr	r3, [r7, #20]
9000d162:	68db      	ldr	r3, [r3, #12]
9000d164:	68fa      	ldr	r2, [r7, #12]
9000d166:	429a      	cmp	r2, r3
9000d168:	d104      	bne.n	9000d174 <tcp_listen_with_backlog_and_err+0xec>
9000d16a:	68fb      	ldr	r3, [r7, #12]
9000d16c:	68da      	ldr	r2, [r3, #12]
9000d16e:	697b      	ldr	r3, [r7, #20]
9000d170:	60da      	str	r2, [r3, #12]
9000d172:	e005      	b.n	9000d180 <tcp_listen_with_backlog_and_err+0xf8>
9000d174:	697b      	ldr	r3, [r7, #20]
9000d176:	68db      	ldr	r3, [r3, #12]
9000d178:	617b      	str	r3, [r7, #20]
9000d17a:	697b      	ldr	r3, [r7, #20]
9000d17c:	2b00      	cmp	r3, #0
9000d17e:	d1ef      	bne.n	9000d160 <tcp_listen_with_backlog_and_err+0xd8>
9000d180:	68fb      	ldr	r3, [r7, #12]
9000d182:	2200      	movs	r2, #0
9000d184:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
9000d186:	68f8      	ldr	r0, [r7, #12]
9000d188:	f7ff fbc0 	bl	9000c90c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
9000d18c:	69fb      	ldr	r3, [r7, #28]
9000d18e:	4a11      	ldr	r2, [pc, #68]	; (9000d1d4 <tcp_listen_with_backlog_and_err+0x14c>)
9000d190:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
9000d192:	4b11      	ldr	r3, [pc, #68]	; (9000d1d8 <tcp_listen_with_backlog_and_err+0x150>)
9000d194:	681a      	ldr	r2, [r3, #0]
9000d196:	69fb      	ldr	r3, [r7, #28]
9000d198:	60da      	str	r2, [r3, #12]
9000d19a:	4a0f      	ldr	r2, [pc, #60]	; (9000d1d8 <tcp_listen_with_backlog_and_err+0x150>)
9000d19c:	69fb      	ldr	r3, [r7, #28]
9000d19e:	6013      	str	r3, [r2, #0]
9000d1a0:	f005 fbfc 	bl	9001299c <tcp_timer_needed>
  res = ERR_OK;
9000d1a4:	2300      	movs	r3, #0
9000d1a6:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
9000d1a8:	687b      	ldr	r3, [r7, #4]
9000d1aa:	2b00      	cmp	r3, #0
9000d1ac:	d002      	beq.n	9000d1b4 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
9000d1ae:	687b      	ldr	r3, [r7, #4]
9000d1b0:	7efa      	ldrb	r2, [r7, #27]
9000d1b2:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
9000d1b4:	69fb      	ldr	r3, [r7, #28]
}
9000d1b6:	4618      	mov	r0, r3
9000d1b8:	3720      	adds	r7, #32
9000d1ba:	46bd      	mov	sp, r7
9000d1bc:	bd80      	pop	{r7, pc}
9000d1be:	bf00      	nop
9000d1c0:	90018828 	.word	0x90018828
9000d1c4:	90018a1c 	.word	0x90018a1c
9000d1c8:	9001886c 	.word	0x9001886c
9000d1cc:	90018a4c 	.word	0x90018a4c
9000d1d0:	2401f3a8 	.word	0x2401f3a8
9000d1d4:	9000d025 	.word	0x9000d025
9000d1d8:	2401f3ac 	.word	0x2401f3ac

9000d1dc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
9000d1dc:	b580      	push	{r7, lr}
9000d1de:	b084      	sub	sp, #16
9000d1e0:	af00      	add	r7, sp, #0
9000d1e2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
9000d1e4:	687b      	ldr	r3, [r7, #4]
9000d1e6:	2b00      	cmp	r3, #0
9000d1e8:	d106      	bne.n	9000d1f8 <tcp_update_rcv_ann_wnd+0x1c>
9000d1ea:	4b25      	ldr	r3, [pc, #148]	; (9000d280 <tcp_update_rcv_ann_wnd+0xa4>)
9000d1ec:	f240 32a6 	movw	r2, #934	; 0x3a6
9000d1f0:	4924      	ldr	r1, [pc, #144]	; (9000d284 <tcp_update_rcv_ann_wnd+0xa8>)
9000d1f2:	4825      	ldr	r0, [pc, #148]	; (9000d288 <tcp_update_rcv_ann_wnd+0xac>)
9000d1f4:	f008 fcfe 	bl	90015bf4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
9000d1f8:	687b      	ldr	r3, [r7, #4]
9000d1fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000d1fc:	687a      	ldr	r2, [r7, #4]
9000d1fe:	8d12      	ldrh	r2, [r2, #40]	; 0x28
9000d200:	4413      	add	r3, r2
9000d202:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
9000d204:	687b      	ldr	r3, [r7, #4]
9000d206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000d208:	687a      	ldr	r2, [r7, #4]
9000d20a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
9000d20c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
9000d210:	bf28      	it	cs
9000d212:	f44f 6286 	movcs.w	r2, #1072	; 0x430
9000d216:	b292      	uxth	r2, r2
9000d218:	4413      	add	r3, r2
9000d21a:	68fa      	ldr	r2, [r7, #12]
9000d21c:	1ad3      	subs	r3, r2, r3
9000d21e:	2b00      	cmp	r3, #0
9000d220:	db08      	blt.n	9000d234 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
9000d222:	687b      	ldr	r3, [r7, #4]
9000d224:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
9000d226:	687b      	ldr	r3, [r7, #4]
9000d228:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
9000d22a:	687b      	ldr	r3, [r7, #4]
9000d22c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000d22e:	68fa      	ldr	r2, [r7, #12]
9000d230:	1ad3      	subs	r3, r2, r3
9000d232:	e020      	b.n	9000d276 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
9000d234:	687b      	ldr	r3, [r7, #4]
9000d236:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9000d238:	687b      	ldr	r3, [r7, #4]
9000d23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000d23c:	1ad3      	subs	r3, r2, r3
9000d23e:	2b00      	cmp	r3, #0
9000d240:	dd03      	ble.n	9000d24a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
9000d242:	687b      	ldr	r3, [r7, #4]
9000d244:	2200      	movs	r2, #0
9000d246:	855a      	strh	r2, [r3, #42]	; 0x2a
9000d248:	e014      	b.n	9000d274 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
9000d24a:	687b      	ldr	r3, [r7, #4]
9000d24c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000d24e:	687b      	ldr	r3, [r7, #4]
9000d250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000d252:	1ad3      	subs	r3, r2, r3
9000d254:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
9000d256:	68bb      	ldr	r3, [r7, #8]
9000d258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000d25c:	d306      	bcc.n	9000d26c <tcp_update_rcv_ann_wnd+0x90>
9000d25e:	4b08      	ldr	r3, [pc, #32]	; (9000d280 <tcp_update_rcv_ann_wnd+0xa4>)
9000d260:	f240 32b6 	movw	r2, #950	; 0x3b6
9000d264:	4909      	ldr	r1, [pc, #36]	; (9000d28c <tcp_update_rcv_ann_wnd+0xb0>)
9000d266:	4808      	ldr	r0, [pc, #32]	; (9000d288 <tcp_update_rcv_ann_wnd+0xac>)
9000d268:	f008 fcc4 	bl	90015bf4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
9000d26c:	68bb      	ldr	r3, [r7, #8]
9000d26e:	b29a      	uxth	r2, r3
9000d270:	687b      	ldr	r3, [r7, #4]
9000d272:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
9000d274:	2300      	movs	r3, #0
  }
}
9000d276:	4618      	mov	r0, r3
9000d278:	3710      	adds	r7, #16
9000d27a:	46bd      	mov	sp, r7
9000d27c:	bd80      	pop	{r7, pc}
9000d27e:	bf00      	nop
9000d280:	90018828 	.word	0x90018828
9000d284:	90018a84 	.word	0x90018a84
9000d288:	9001886c 	.word	0x9001886c
9000d28c:	90018aa8 	.word	0x90018aa8

9000d290 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
9000d290:	b580      	push	{r7, lr}
9000d292:	b084      	sub	sp, #16
9000d294:	af00      	add	r7, sp, #0
9000d296:	6078      	str	r0, [r7, #4]
9000d298:	460b      	mov	r3, r1
9000d29a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
9000d29c:	687b      	ldr	r3, [r7, #4]
9000d29e:	2b00      	cmp	r3, #0
9000d2a0:	d107      	bne.n	9000d2b2 <tcp_recved+0x22>
9000d2a2:	4b1f      	ldr	r3, [pc, #124]	; (9000d320 <tcp_recved+0x90>)
9000d2a4:	f240 32cf 	movw	r2, #975	; 0x3cf
9000d2a8:	491e      	ldr	r1, [pc, #120]	; (9000d324 <tcp_recved+0x94>)
9000d2aa:	481f      	ldr	r0, [pc, #124]	; (9000d328 <tcp_recved+0x98>)
9000d2ac:	f008 fca2 	bl	90015bf4 <iprintf>
9000d2b0:	e032      	b.n	9000d318 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
9000d2b2:	687b      	ldr	r3, [r7, #4]
9000d2b4:	7d1b      	ldrb	r3, [r3, #20]
9000d2b6:	2b01      	cmp	r3, #1
9000d2b8:	d106      	bne.n	9000d2c8 <tcp_recved+0x38>
9000d2ba:	4b19      	ldr	r3, [pc, #100]	; (9000d320 <tcp_recved+0x90>)
9000d2bc:	f240 32d2 	movw	r2, #978	; 0x3d2
9000d2c0:	491a      	ldr	r1, [pc, #104]	; (9000d32c <tcp_recved+0x9c>)
9000d2c2:	4819      	ldr	r0, [pc, #100]	; (9000d328 <tcp_recved+0x98>)
9000d2c4:	f008 fc96 	bl	90015bf4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
9000d2c8:	687b      	ldr	r3, [r7, #4]
9000d2ca:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
9000d2cc:	887b      	ldrh	r3, [r7, #2]
9000d2ce:	4413      	add	r3, r2
9000d2d0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
9000d2d2:	89fb      	ldrh	r3, [r7, #14]
9000d2d4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
9000d2d8:	d804      	bhi.n	9000d2e4 <tcp_recved+0x54>
9000d2da:	687b      	ldr	r3, [r7, #4]
9000d2dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
9000d2de:	89fa      	ldrh	r2, [r7, #14]
9000d2e0:	429a      	cmp	r2, r3
9000d2e2:	d204      	bcs.n	9000d2ee <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
9000d2e4:	687b      	ldr	r3, [r7, #4]
9000d2e6:	f44f 6206 	mov.w	r2, #2144	; 0x860
9000d2ea:	851a      	strh	r2, [r3, #40]	; 0x28
9000d2ec:	e002      	b.n	9000d2f4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
9000d2ee:	687b      	ldr	r3, [r7, #4]
9000d2f0:	89fa      	ldrh	r2, [r7, #14]
9000d2f2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
9000d2f4:	6878      	ldr	r0, [r7, #4]
9000d2f6:	f7ff ff71 	bl	9000d1dc <tcp_update_rcv_ann_wnd>
9000d2fa:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
9000d2fc:	68bb      	ldr	r3, [r7, #8]
9000d2fe:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
9000d302:	d309      	bcc.n	9000d318 <tcp_recved+0x88>
    tcp_ack_now(pcb);
9000d304:	687b      	ldr	r3, [r7, #4]
9000d306:	8b5b      	ldrh	r3, [r3, #26]
9000d308:	f043 0302 	orr.w	r3, r3, #2
9000d30c:	b29a      	uxth	r2, r3
9000d30e:	687b      	ldr	r3, [r7, #4]
9000d310:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
9000d312:	6878      	ldr	r0, [r7, #4]
9000d314:	f004 fbcc 	bl	90011ab0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
9000d318:	3710      	adds	r7, #16
9000d31a:	46bd      	mov	sp, r7
9000d31c:	bd80      	pop	{r7, pc}
9000d31e:	bf00      	nop
9000d320:	90018828 	.word	0x90018828
9000d324:	90018ac4 	.word	0x90018ac4
9000d328:	9001886c 	.word	0x9001886c
9000d32c:	90018adc 	.word	0x90018adc

9000d330 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
9000d330:	b480      	push	{r7}
9000d332:	b083      	sub	sp, #12
9000d334:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
9000d336:	2300      	movs	r3, #0
9000d338:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
9000d33a:	4b1e      	ldr	r3, [pc, #120]	; (9000d3b4 <tcp_new_port+0x84>)
9000d33c:	881b      	ldrh	r3, [r3, #0]
9000d33e:	3301      	adds	r3, #1
9000d340:	b29a      	uxth	r2, r3
9000d342:	4b1c      	ldr	r3, [pc, #112]	; (9000d3b4 <tcp_new_port+0x84>)
9000d344:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
9000d346:	4b1b      	ldr	r3, [pc, #108]	; (9000d3b4 <tcp_new_port+0x84>)
9000d348:	881b      	ldrh	r3, [r3, #0]
9000d34a:	f64f 72ff 	movw	r2, #65535	; 0xffff
9000d34e:	4293      	cmp	r3, r2
9000d350:	d103      	bne.n	9000d35a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
9000d352:	4b18      	ldr	r3, [pc, #96]	; (9000d3b4 <tcp_new_port+0x84>)
9000d354:	f44f 4240 	mov.w	r2, #49152	; 0xc000
9000d358:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
9000d35a:	2300      	movs	r3, #0
9000d35c:	71fb      	strb	r3, [r7, #7]
9000d35e:	e01e      	b.n	9000d39e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
9000d360:	79fb      	ldrb	r3, [r7, #7]
9000d362:	4a15      	ldr	r2, [pc, #84]	; (9000d3b8 <tcp_new_port+0x88>)
9000d364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
9000d368:	681b      	ldr	r3, [r3, #0]
9000d36a:	603b      	str	r3, [r7, #0]
9000d36c:	e011      	b.n	9000d392 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
9000d36e:	683b      	ldr	r3, [r7, #0]
9000d370:	8ada      	ldrh	r2, [r3, #22]
9000d372:	4b10      	ldr	r3, [pc, #64]	; (9000d3b4 <tcp_new_port+0x84>)
9000d374:	881b      	ldrh	r3, [r3, #0]
9000d376:	429a      	cmp	r2, r3
9000d378:	d108      	bne.n	9000d38c <tcp_new_port+0x5c>
        n++;
9000d37a:	88bb      	ldrh	r3, [r7, #4]
9000d37c:	3301      	adds	r3, #1
9000d37e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
9000d380:	88bb      	ldrh	r3, [r7, #4]
9000d382:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
9000d386:	d3d8      	bcc.n	9000d33a <tcp_new_port+0xa>
          return 0;
9000d388:	2300      	movs	r3, #0
9000d38a:	e00d      	b.n	9000d3a8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
9000d38c:	683b      	ldr	r3, [r7, #0]
9000d38e:	68db      	ldr	r3, [r3, #12]
9000d390:	603b      	str	r3, [r7, #0]
9000d392:	683b      	ldr	r3, [r7, #0]
9000d394:	2b00      	cmp	r3, #0
9000d396:	d1ea      	bne.n	9000d36e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
9000d398:	79fb      	ldrb	r3, [r7, #7]
9000d39a:	3301      	adds	r3, #1
9000d39c:	71fb      	strb	r3, [r7, #7]
9000d39e:	79fb      	ldrb	r3, [r7, #7]
9000d3a0:	2b03      	cmp	r3, #3
9000d3a2:	d9dd      	bls.n	9000d360 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
9000d3a4:	4b03      	ldr	r3, [pc, #12]	; (9000d3b4 <tcp_new_port+0x84>)
9000d3a6:	881b      	ldrh	r3, [r3, #0]
}
9000d3a8:	4618      	mov	r0, r3
9000d3aa:	370c      	adds	r7, #12
9000d3ac:	46bd      	mov	sp, r7
9000d3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
9000d3b2:	4770      	bx	lr
9000d3b4:	24000524 	.word	0x24000524
9000d3b8:	9002110c 	.word	0x9002110c

9000d3bc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
9000d3bc:	b5b0      	push	{r4, r5, r7, lr}
9000d3be:	b090      	sub	sp, #64	; 0x40
9000d3c0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
9000d3c2:	2300      	movs	r3, #0
9000d3c4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
9000d3c8:	4b94      	ldr	r3, [pc, #592]	; (9000d61c <tcp_slowtmr+0x260>)
9000d3ca:	681b      	ldr	r3, [r3, #0]
9000d3cc:	3301      	adds	r3, #1
9000d3ce:	4a93      	ldr	r2, [pc, #588]	; (9000d61c <tcp_slowtmr+0x260>)
9000d3d0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
9000d3d2:	4b93      	ldr	r3, [pc, #588]	; (9000d620 <tcp_slowtmr+0x264>)
9000d3d4:	781b      	ldrb	r3, [r3, #0]
9000d3d6:	3301      	adds	r3, #1
9000d3d8:	b2da      	uxtb	r2, r3
9000d3da:	4b91      	ldr	r3, [pc, #580]	; (9000d620 <tcp_slowtmr+0x264>)
9000d3dc:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
9000d3de:	2300      	movs	r3, #0
9000d3e0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
9000d3e2:	4b90      	ldr	r3, [pc, #576]	; (9000d624 <tcp_slowtmr+0x268>)
9000d3e4:	681b      	ldr	r3, [r3, #0]
9000d3e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
9000d3e8:	e29d      	b.n	9000d926 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
9000d3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d3ec:	7d1b      	ldrb	r3, [r3, #20]
9000d3ee:	2b00      	cmp	r3, #0
9000d3f0:	d106      	bne.n	9000d400 <tcp_slowtmr+0x44>
9000d3f2:	4b8d      	ldr	r3, [pc, #564]	; (9000d628 <tcp_slowtmr+0x26c>)
9000d3f4:	f240 42be 	movw	r2, #1214	; 0x4be
9000d3f8:	498c      	ldr	r1, [pc, #560]	; (9000d62c <tcp_slowtmr+0x270>)
9000d3fa:	488d      	ldr	r0, [pc, #564]	; (9000d630 <tcp_slowtmr+0x274>)
9000d3fc:	f008 fbfa 	bl	90015bf4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
9000d400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d402:	7d1b      	ldrb	r3, [r3, #20]
9000d404:	2b01      	cmp	r3, #1
9000d406:	d106      	bne.n	9000d416 <tcp_slowtmr+0x5a>
9000d408:	4b87      	ldr	r3, [pc, #540]	; (9000d628 <tcp_slowtmr+0x26c>)
9000d40a:	f240 42bf 	movw	r2, #1215	; 0x4bf
9000d40e:	4989      	ldr	r1, [pc, #548]	; (9000d634 <tcp_slowtmr+0x278>)
9000d410:	4887      	ldr	r0, [pc, #540]	; (9000d630 <tcp_slowtmr+0x274>)
9000d412:	f008 fbef 	bl	90015bf4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
9000d416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d418:	7d1b      	ldrb	r3, [r3, #20]
9000d41a:	2b0a      	cmp	r3, #10
9000d41c:	d106      	bne.n	9000d42c <tcp_slowtmr+0x70>
9000d41e:	4b82      	ldr	r3, [pc, #520]	; (9000d628 <tcp_slowtmr+0x26c>)
9000d420:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
9000d424:	4984      	ldr	r1, [pc, #528]	; (9000d638 <tcp_slowtmr+0x27c>)
9000d426:	4882      	ldr	r0, [pc, #520]	; (9000d630 <tcp_slowtmr+0x274>)
9000d428:	f008 fbe4 	bl	90015bf4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
9000d42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d42e:	7f9a      	ldrb	r2, [r3, #30]
9000d430:	4b7b      	ldr	r3, [pc, #492]	; (9000d620 <tcp_slowtmr+0x264>)
9000d432:	781b      	ldrb	r3, [r3, #0]
9000d434:	429a      	cmp	r2, r3
9000d436:	d105      	bne.n	9000d444 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
9000d438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d43a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
9000d43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d43e:	68db      	ldr	r3, [r3, #12]
9000d440:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
9000d442:	e270      	b.n	9000d926 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
9000d444:	4b76      	ldr	r3, [pc, #472]	; (9000d620 <tcp_slowtmr+0x264>)
9000d446:	781a      	ldrb	r2, [r3, #0]
9000d448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d44a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
9000d44c:	2300      	movs	r3, #0
9000d44e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
9000d452:	2300      	movs	r3, #0
9000d454:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
9000d458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d45a:	7d1b      	ldrb	r3, [r3, #20]
9000d45c:	2b02      	cmp	r3, #2
9000d45e:	d10a      	bne.n	9000d476 <tcp_slowtmr+0xba>
9000d460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d462:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
9000d466:	2b05      	cmp	r3, #5
9000d468:	d905      	bls.n	9000d476 <tcp_slowtmr+0xba>
      ++pcb_remove;
9000d46a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000d46e:	3301      	adds	r3, #1
9000d470:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
9000d474:	e11e      	b.n	9000d6b4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
9000d476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d478:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
9000d47c:	2b0b      	cmp	r3, #11
9000d47e:	d905      	bls.n	9000d48c <tcp_slowtmr+0xd0>
      ++pcb_remove;
9000d480:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000d484:	3301      	adds	r3, #1
9000d486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
9000d48a:	e113      	b.n	9000d6b4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
9000d48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d48e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
9000d492:	2b00      	cmp	r3, #0
9000d494:	d075      	beq.n	9000d582 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
9000d496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000d49a:	2b00      	cmp	r3, #0
9000d49c:	d006      	beq.n	9000d4ac <tcp_slowtmr+0xf0>
9000d49e:	4b62      	ldr	r3, [pc, #392]	; (9000d628 <tcp_slowtmr+0x26c>)
9000d4a0:	f240 42d4 	movw	r2, #1236	; 0x4d4
9000d4a4:	4965      	ldr	r1, [pc, #404]	; (9000d63c <tcp_slowtmr+0x280>)
9000d4a6:	4862      	ldr	r0, [pc, #392]	; (9000d630 <tcp_slowtmr+0x274>)
9000d4a8:	f008 fba4 	bl	90015bf4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
9000d4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d4ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000d4b0:	2b00      	cmp	r3, #0
9000d4b2:	d106      	bne.n	9000d4c2 <tcp_slowtmr+0x106>
9000d4b4:	4b5c      	ldr	r3, [pc, #368]	; (9000d628 <tcp_slowtmr+0x26c>)
9000d4b6:	f240 42d5 	movw	r2, #1237	; 0x4d5
9000d4ba:	4961      	ldr	r1, [pc, #388]	; (9000d640 <tcp_slowtmr+0x284>)
9000d4bc:	485c      	ldr	r0, [pc, #368]	; (9000d630 <tcp_slowtmr+0x274>)
9000d4be:	f008 fb99 	bl	90015bf4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
9000d4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d4c4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
9000d4c8:	2b0b      	cmp	r3, #11
9000d4ca:	d905      	bls.n	9000d4d8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
9000d4cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000d4d0:	3301      	adds	r3, #1
9000d4d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
9000d4d6:	e0ed      	b.n	9000d6b4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
9000d4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d4da:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
9000d4de:	3b01      	subs	r3, #1
9000d4e0:	4a58      	ldr	r2, [pc, #352]	; (9000d644 <tcp_slowtmr+0x288>)
9000d4e2:	5cd3      	ldrb	r3, [r2, r3]
9000d4e4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
9000d4e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d4e8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
9000d4ec:	7c7a      	ldrb	r2, [r7, #17]
9000d4ee:	429a      	cmp	r2, r3
9000d4f0:	d907      	bls.n	9000d502 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
9000d4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d4f4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
9000d4f8:	3301      	adds	r3, #1
9000d4fa:	b2da      	uxtb	r2, r3
9000d4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d4fe:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
9000d502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d504:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
9000d508:	7c7a      	ldrb	r2, [r7, #17]
9000d50a:	429a      	cmp	r2, r3
9000d50c:	f200 80d2 	bhi.w	9000d6b4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
9000d510:	2301      	movs	r3, #1
9000d512:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
9000d514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d516:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
9000d51a:	2b00      	cmp	r3, #0
9000d51c:	d108      	bne.n	9000d530 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
9000d51e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000d520:	f005 f96e 	bl	90012800 <tcp_zero_window_probe>
9000d524:	4603      	mov	r3, r0
9000d526:	2b00      	cmp	r3, #0
9000d528:	d014      	beq.n	9000d554 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
9000d52a:	2300      	movs	r3, #0
9000d52c:	623b      	str	r3, [r7, #32]
9000d52e:	e011      	b.n	9000d554 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
9000d530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d532:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
9000d536:	4619      	mov	r1, r3
9000d538:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000d53a:	f004 f833 	bl	900115a4 <tcp_split_unsent_seg>
9000d53e:	4603      	mov	r3, r0
9000d540:	2b00      	cmp	r3, #0
9000d542:	d107      	bne.n	9000d554 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
9000d544:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000d546:	f004 fab3 	bl	90011ab0 <tcp_output>
9000d54a:	4603      	mov	r3, r0
9000d54c:	2b00      	cmp	r3, #0
9000d54e:	d101      	bne.n	9000d554 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
9000d550:	2300      	movs	r3, #0
9000d552:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
9000d554:	6a3b      	ldr	r3, [r7, #32]
9000d556:	2b00      	cmp	r3, #0
9000d558:	f000 80ac 	beq.w	9000d6b4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
9000d55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d55e:	2200      	movs	r2, #0
9000d560:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
9000d564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d566:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
9000d56a:	2b06      	cmp	r3, #6
9000d56c:	f200 80a2 	bhi.w	9000d6b4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
9000d570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d572:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
9000d576:	3301      	adds	r3, #1
9000d578:	b2da      	uxtb	r2, r3
9000d57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d57c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
9000d580:	e098      	b.n	9000d6b4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
9000d582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d584:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
9000d588:	2b00      	cmp	r3, #0
9000d58a:	db0f      	blt.n	9000d5ac <tcp_slowtmr+0x1f0>
9000d58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d58e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
9000d592:	f647 72ff 	movw	r2, #32767	; 0x7fff
9000d596:	4293      	cmp	r3, r2
9000d598:	d008      	beq.n	9000d5ac <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
9000d59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d59c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
9000d5a0:	b29b      	uxth	r3, r3
9000d5a2:	3301      	adds	r3, #1
9000d5a4:	b29b      	uxth	r3, r3
9000d5a6:	b21a      	sxth	r2, r3
9000d5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d5aa:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
9000d5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d5ae:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
9000d5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d5b4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
9000d5b8:	429a      	cmp	r2, r3
9000d5ba:	db7b      	blt.n	9000d6b4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
9000d5bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000d5be:	f004 fd69 	bl	90012094 <tcp_rexmit_rto_prepare>
9000d5c2:	4603      	mov	r3, r0
9000d5c4:	2b00      	cmp	r3, #0
9000d5c6:	d007      	beq.n	9000d5d8 <tcp_slowtmr+0x21c>
9000d5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d5ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000d5cc:	2b00      	cmp	r3, #0
9000d5ce:	d171      	bne.n	9000d6b4 <tcp_slowtmr+0x2f8>
9000d5d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d5d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000d5d4:	2b00      	cmp	r3, #0
9000d5d6:	d06d      	beq.n	9000d6b4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
9000d5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d5da:	7d1b      	ldrb	r3, [r3, #20]
9000d5dc:	2b02      	cmp	r3, #2
9000d5de:	d03a      	beq.n	9000d656 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
9000d5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d5e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
9000d5e6:	2b0c      	cmp	r3, #12
9000d5e8:	bf28      	it	cs
9000d5ea:	230c      	movcs	r3, #12
9000d5ec:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
9000d5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d5f0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
9000d5f4:	10db      	asrs	r3, r3, #3
9000d5f6:	b21b      	sxth	r3, r3
9000d5f8:	461a      	mov	r2, r3
9000d5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d5fc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
9000d600:	4413      	add	r3, r2
9000d602:	7efa      	ldrb	r2, [r7, #27]
9000d604:	4910      	ldr	r1, [pc, #64]	; (9000d648 <tcp_slowtmr+0x28c>)
9000d606:	5c8a      	ldrb	r2, [r1, r2]
9000d608:	4093      	lsls	r3, r2
9000d60a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
9000d60c:	697b      	ldr	r3, [r7, #20]
9000d60e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
9000d612:	4293      	cmp	r3, r2
9000d614:	dc1a      	bgt.n	9000d64c <tcp_slowtmr+0x290>
9000d616:	697b      	ldr	r3, [r7, #20]
9000d618:	b21a      	sxth	r2, r3
9000d61a:	e019      	b.n	9000d650 <tcp_slowtmr+0x294>
9000d61c:	2401f3a4 	.word	0x2401f3a4
9000d620:	2401f3ba 	.word	0x2401f3ba
9000d624:	2401f3b0 	.word	0x2401f3b0
9000d628:	90018828 	.word	0x90018828
9000d62c:	90018b6c 	.word	0x90018b6c
9000d630:	9001886c 	.word	0x9001886c
9000d634:	90018b98 	.word	0x90018b98
9000d638:	90018bc4 	.word	0x90018bc4
9000d63c:	90018bf4 	.word	0x90018bf4
9000d640:	90018c28 	.word	0x90018c28
9000d644:	90021104 	.word	0x90021104
9000d648:	900210f4 	.word	0x900210f4
9000d64c:	f647 72ff 	movw	r2, #32767	; 0x7fff
9000d650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d652:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
9000d656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d658:	2200      	movs	r2, #0
9000d65a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
9000d65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d65e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
9000d662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d664:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
9000d668:	4293      	cmp	r3, r2
9000d66a:	bf28      	it	cs
9000d66c:	4613      	movcs	r3, r2
9000d66e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
9000d670:	8a7b      	ldrh	r3, [r7, #18]
9000d672:	085b      	lsrs	r3, r3, #1
9000d674:	b29a      	uxth	r2, r3
9000d676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d678:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
9000d67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d67e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
9000d682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d684:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000d686:	005b      	lsls	r3, r3, #1
9000d688:	b29b      	uxth	r3, r3
9000d68a:	429a      	cmp	r2, r3
9000d68c:	d206      	bcs.n	9000d69c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
9000d68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d690:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000d692:	005b      	lsls	r3, r3, #1
9000d694:	b29a      	uxth	r2, r3
9000d696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d698:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
9000d69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d69e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
9000d6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d6a2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
9000d6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d6a8:	2200      	movs	r2, #0
9000d6aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
9000d6ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000d6b0:	f004 fd60 	bl	90012174 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
9000d6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d6b6:	7d1b      	ldrb	r3, [r3, #20]
9000d6b8:	2b06      	cmp	r3, #6
9000d6ba:	d111      	bne.n	9000d6e0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
9000d6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d6be:	8b5b      	ldrh	r3, [r3, #26]
9000d6c0:	f003 0310 	and.w	r3, r3, #16
9000d6c4:	2b00      	cmp	r3, #0
9000d6c6:	d00b      	beq.n	9000d6e0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
9000d6c8:	4b9c      	ldr	r3, [pc, #624]	; (9000d93c <tcp_slowtmr+0x580>)
9000d6ca:	681a      	ldr	r2, [r3, #0]
9000d6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d6ce:	6a1b      	ldr	r3, [r3, #32]
9000d6d0:	1ad3      	subs	r3, r2, r3
9000d6d2:	2b28      	cmp	r3, #40	; 0x28
9000d6d4:	d904      	bls.n	9000d6e0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
9000d6d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000d6da:	3301      	adds	r3, #1
9000d6dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
9000d6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d6e2:	7a5b      	ldrb	r3, [r3, #9]
9000d6e4:	f003 0308 	and.w	r3, r3, #8
9000d6e8:	2b00      	cmp	r3, #0
9000d6ea:	d04a      	beq.n	9000d782 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
9000d6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d6ee:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
9000d6f0:	2b04      	cmp	r3, #4
9000d6f2:	d003      	beq.n	9000d6fc <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
9000d6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d6f6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
9000d6f8:	2b07      	cmp	r3, #7
9000d6fa:	d142      	bne.n	9000d782 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
9000d6fc:	4b8f      	ldr	r3, [pc, #572]	; (9000d93c <tcp_slowtmr+0x580>)
9000d6fe:	681a      	ldr	r2, [r3, #0]
9000d700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d702:	6a1b      	ldr	r3, [r3, #32]
9000d704:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
9000d706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d708:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
9000d70c:	4b8c      	ldr	r3, [pc, #560]	; (9000d940 <tcp_slowtmr+0x584>)
9000d70e:	440b      	add	r3, r1
9000d710:	498c      	ldr	r1, [pc, #560]	; (9000d944 <tcp_slowtmr+0x588>)
9000d712:	fba1 1303 	umull	r1, r3, r1, r3
9000d716:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
9000d718:	429a      	cmp	r2, r3
9000d71a:	d90a      	bls.n	9000d732 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
9000d71c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000d720:	3301      	adds	r3, #1
9000d722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
9000d726:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
9000d72a:	3301      	adds	r3, #1
9000d72c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
9000d730:	e027      	b.n	9000d782 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
9000d732:	4b82      	ldr	r3, [pc, #520]	; (9000d93c <tcp_slowtmr+0x580>)
9000d734:	681a      	ldr	r2, [r3, #0]
9000d736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d738:	6a1b      	ldr	r3, [r3, #32]
9000d73a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
9000d73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d73e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
9000d742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d744:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
9000d748:	4618      	mov	r0, r3
9000d74a:	4b7f      	ldr	r3, [pc, #508]	; (9000d948 <tcp_slowtmr+0x58c>)
9000d74c:	fb00 f303 	mul.w	r3, r0, r3
9000d750:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
9000d752:	497c      	ldr	r1, [pc, #496]	; (9000d944 <tcp_slowtmr+0x588>)
9000d754:	fba1 1303 	umull	r1, r3, r1, r3
9000d758:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
9000d75a:	429a      	cmp	r2, r3
9000d75c:	d911      	bls.n	9000d782 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
9000d75e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000d760:	f005 f80e 	bl	90012780 <tcp_keepalive>
9000d764:	4603      	mov	r3, r0
9000d766:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
9000d76a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
9000d76e:	2b00      	cmp	r3, #0
9000d770:	d107      	bne.n	9000d782 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
9000d772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d774:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
9000d778:	3301      	adds	r3, #1
9000d77a:	b2da      	uxtb	r2, r3
9000d77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d77e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
9000d782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000d786:	2b00      	cmp	r3, #0
9000d788:	d011      	beq.n	9000d7ae <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
9000d78a:	4b6c      	ldr	r3, [pc, #432]	; (9000d93c <tcp_slowtmr+0x580>)
9000d78c:	681a      	ldr	r2, [r3, #0]
9000d78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d790:	6a1b      	ldr	r3, [r3, #32]
9000d792:	1ad2      	subs	r2, r2, r3
9000d794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d796:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
9000d79a:	4619      	mov	r1, r3
9000d79c:	460b      	mov	r3, r1
9000d79e:	005b      	lsls	r3, r3, #1
9000d7a0:	440b      	add	r3, r1
9000d7a2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
9000d7a4:	429a      	cmp	r2, r3
9000d7a6:	d302      	bcc.n	9000d7ae <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
9000d7a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000d7aa:	f000 fec9 	bl	9000e540 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
9000d7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d7b0:	7d1b      	ldrb	r3, [r3, #20]
9000d7b2:	2b03      	cmp	r3, #3
9000d7b4:	d10b      	bne.n	9000d7ce <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
9000d7b6:	4b61      	ldr	r3, [pc, #388]	; (9000d93c <tcp_slowtmr+0x580>)
9000d7b8:	681a      	ldr	r2, [r3, #0]
9000d7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d7bc:	6a1b      	ldr	r3, [r3, #32]
9000d7be:	1ad3      	subs	r3, r2, r3
9000d7c0:	2b28      	cmp	r3, #40	; 0x28
9000d7c2:	d904      	bls.n	9000d7ce <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
9000d7c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000d7c8:	3301      	adds	r3, #1
9000d7ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
9000d7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d7d0:	7d1b      	ldrb	r3, [r3, #20]
9000d7d2:	2b09      	cmp	r3, #9
9000d7d4:	d10b      	bne.n	9000d7ee <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
9000d7d6:	4b59      	ldr	r3, [pc, #356]	; (9000d93c <tcp_slowtmr+0x580>)
9000d7d8:	681a      	ldr	r2, [r3, #0]
9000d7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d7dc:	6a1b      	ldr	r3, [r3, #32]
9000d7de:	1ad3      	subs	r3, r2, r3
9000d7e0:	2bf0      	cmp	r3, #240	; 0xf0
9000d7e2:	d904      	bls.n	9000d7ee <tcp_slowtmr+0x432>
        ++pcb_remove;
9000d7e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000d7e8:	3301      	adds	r3, #1
9000d7ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
9000d7ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000d7f2:	2b00      	cmp	r3, #0
9000d7f4:	d060      	beq.n	9000d8b8 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
9000d7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d7f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000d7fc:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
9000d7fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000d800:	f000 fcea 	bl	9000e1d8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
9000d804:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000d806:	2b00      	cmp	r3, #0
9000d808:	d010      	beq.n	9000d82c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
9000d80a:	4b50      	ldr	r3, [pc, #320]	; (9000d94c <tcp_slowtmr+0x590>)
9000d80c:	681b      	ldr	r3, [r3, #0]
9000d80e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
9000d810:	429a      	cmp	r2, r3
9000d812:	d106      	bne.n	9000d822 <tcp_slowtmr+0x466>
9000d814:	4b4e      	ldr	r3, [pc, #312]	; (9000d950 <tcp_slowtmr+0x594>)
9000d816:	f240 526d 	movw	r2, #1389	; 0x56d
9000d81a:	494e      	ldr	r1, [pc, #312]	; (9000d954 <tcp_slowtmr+0x598>)
9000d81c:	484e      	ldr	r0, [pc, #312]	; (9000d958 <tcp_slowtmr+0x59c>)
9000d81e:	f008 f9e9 	bl	90015bf4 <iprintf>
        prev->next = pcb->next;
9000d822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d824:	68da      	ldr	r2, [r3, #12]
9000d826:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000d828:	60da      	str	r2, [r3, #12]
9000d82a:	e00f      	b.n	9000d84c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
9000d82c:	4b47      	ldr	r3, [pc, #284]	; (9000d94c <tcp_slowtmr+0x590>)
9000d82e:	681b      	ldr	r3, [r3, #0]
9000d830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
9000d832:	429a      	cmp	r2, r3
9000d834:	d006      	beq.n	9000d844 <tcp_slowtmr+0x488>
9000d836:	4b46      	ldr	r3, [pc, #280]	; (9000d950 <tcp_slowtmr+0x594>)
9000d838:	f240 5271 	movw	r2, #1393	; 0x571
9000d83c:	4947      	ldr	r1, [pc, #284]	; (9000d95c <tcp_slowtmr+0x5a0>)
9000d83e:	4846      	ldr	r0, [pc, #280]	; (9000d958 <tcp_slowtmr+0x59c>)
9000d840:	f008 f9d8 	bl	90015bf4 <iprintf>
        tcp_active_pcbs = pcb->next;
9000d844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d846:	68db      	ldr	r3, [r3, #12]
9000d848:	4a40      	ldr	r2, [pc, #256]	; (9000d94c <tcp_slowtmr+0x590>)
9000d84a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
9000d84c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
9000d850:	2b00      	cmp	r3, #0
9000d852:	d013      	beq.n	9000d87c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
9000d854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d856:	6d18      	ldr	r0, [r3, #80]	; 0x50
9000d858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d85a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
9000d85c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
9000d85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d860:	3304      	adds	r3, #4
9000d862:	6afa      	ldr	r2, [r7, #44]	; 0x2c
9000d864:	8ad2      	ldrh	r2, [r2, #22]
9000d866:	6af9      	ldr	r1, [r7, #44]	; 0x2c
9000d868:	8b09      	ldrh	r1, [r1, #24]
9000d86a:	9102      	str	r1, [sp, #8]
9000d86c:	9201      	str	r2, [sp, #4]
9000d86e:	9300      	str	r3, [sp, #0]
9000d870:	462b      	mov	r3, r5
9000d872:	4622      	mov	r2, r4
9000d874:	4601      	mov	r1, r0
9000d876:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000d878:	f004 fece 	bl	90012618 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
9000d87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d87e:	691b      	ldr	r3, [r3, #16]
9000d880:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
9000d882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d884:	7d1b      	ldrb	r3, [r3, #20]
9000d886:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
9000d888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d88a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
9000d88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d88e:	68db      	ldr	r3, [r3, #12]
9000d890:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
9000d892:	6838      	ldr	r0, [r7, #0]
9000d894:	f7ff f83a 	bl	9000c90c <tcp_free>

      tcp_active_pcbs_changed = 0;
9000d898:	4b31      	ldr	r3, [pc, #196]	; (9000d960 <tcp_slowtmr+0x5a4>)
9000d89a:	2200      	movs	r2, #0
9000d89c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
9000d89e:	68fb      	ldr	r3, [r7, #12]
9000d8a0:	2b00      	cmp	r3, #0
9000d8a2:	d004      	beq.n	9000d8ae <tcp_slowtmr+0x4f2>
9000d8a4:	68fb      	ldr	r3, [r7, #12]
9000d8a6:	f06f 010c 	mvn.w	r1, #12
9000d8aa:	68b8      	ldr	r0, [r7, #8]
9000d8ac:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
9000d8ae:	4b2c      	ldr	r3, [pc, #176]	; (9000d960 <tcp_slowtmr+0x5a4>)
9000d8b0:	781b      	ldrb	r3, [r3, #0]
9000d8b2:	2b00      	cmp	r3, #0
9000d8b4:	d037      	beq.n	9000d926 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
9000d8b6:	e592      	b.n	9000d3de <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
9000d8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d8ba:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
9000d8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d8be:	68db      	ldr	r3, [r3, #12]
9000d8c0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
9000d8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000d8c4:	7f1b      	ldrb	r3, [r3, #28]
9000d8c6:	3301      	adds	r3, #1
9000d8c8:	b2da      	uxtb	r2, r3
9000d8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000d8cc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
9000d8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000d8d0:	7f1a      	ldrb	r2, [r3, #28]
9000d8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000d8d4:	7f5b      	ldrb	r3, [r3, #29]
9000d8d6:	429a      	cmp	r2, r3
9000d8d8:	d325      	bcc.n	9000d926 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
9000d8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000d8dc:	2200      	movs	r2, #0
9000d8de:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
9000d8e0:	4b1f      	ldr	r3, [pc, #124]	; (9000d960 <tcp_slowtmr+0x5a4>)
9000d8e2:	2200      	movs	r2, #0
9000d8e4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
9000d8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000d8e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
9000d8ec:	2b00      	cmp	r3, #0
9000d8ee:	d00b      	beq.n	9000d908 <tcp_slowtmr+0x54c>
9000d8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000d8f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
9000d8f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
9000d8f8:	6912      	ldr	r2, [r2, #16]
9000d8fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
9000d8fc:	4610      	mov	r0, r2
9000d8fe:	4798      	blx	r3
9000d900:	4603      	mov	r3, r0
9000d902:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
9000d906:	e002      	b.n	9000d90e <tcp_slowtmr+0x552>
9000d908:	2300      	movs	r3, #0
9000d90a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
9000d90e:	4b14      	ldr	r3, [pc, #80]	; (9000d960 <tcp_slowtmr+0x5a4>)
9000d910:	781b      	ldrb	r3, [r3, #0]
9000d912:	2b00      	cmp	r3, #0
9000d914:	d000      	beq.n	9000d918 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
9000d916:	e562      	b.n	9000d3de <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
9000d918:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
9000d91c:	2b00      	cmp	r3, #0
9000d91e:	d102      	bne.n	9000d926 <tcp_slowtmr+0x56a>
          tcp_output(prev);
9000d920:	6ab8      	ldr	r0, [r7, #40]	; 0x28
9000d922:	f004 f8c5 	bl	90011ab0 <tcp_output>
  while (pcb != NULL) {
9000d926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d928:	2b00      	cmp	r3, #0
9000d92a:	f47f ad5e 	bne.w	9000d3ea <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
9000d92e:	2300      	movs	r3, #0
9000d930:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
9000d932:	4b0c      	ldr	r3, [pc, #48]	; (9000d964 <tcp_slowtmr+0x5a8>)
9000d934:	681b      	ldr	r3, [r3, #0]
9000d936:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
9000d938:	e069      	b.n	9000da0e <tcp_slowtmr+0x652>
9000d93a:	bf00      	nop
9000d93c:	2401f3a4 	.word	0x2401f3a4
9000d940:	000a4cb8 	.word	0x000a4cb8
9000d944:	10624dd3 	.word	0x10624dd3
9000d948:	000124f8 	.word	0x000124f8
9000d94c:	2401f3b0 	.word	0x2401f3b0
9000d950:	90018828 	.word	0x90018828
9000d954:	90018c60 	.word	0x90018c60
9000d958:	9001886c 	.word	0x9001886c
9000d95c:	90018c8c 	.word	0x90018c8c
9000d960:	2401f3b8 	.word	0x2401f3b8
9000d964:	2401f3b4 	.word	0x2401f3b4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
9000d968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d96a:	7d1b      	ldrb	r3, [r3, #20]
9000d96c:	2b0a      	cmp	r3, #10
9000d96e:	d006      	beq.n	9000d97e <tcp_slowtmr+0x5c2>
9000d970:	4b2b      	ldr	r3, [pc, #172]	; (9000da20 <tcp_slowtmr+0x664>)
9000d972:	f240 52a1 	movw	r2, #1441	; 0x5a1
9000d976:	492b      	ldr	r1, [pc, #172]	; (9000da24 <tcp_slowtmr+0x668>)
9000d978:	482b      	ldr	r0, [pc, #172]	; (9000da28 <tcp_slowtmr+0x66c>)
9000d97a:	f008 f93b 	bl	90015bf4 <iprintf>
    pcb_remove = 0;
9000d97e:	2300      	movs	r3, #0
9000d980:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
9000d984:	4b29      	ldr	r3, [pc, #164]	; (9000da2c <tcp_slowtmr+0x670>)
9000d986:	681a      	ldr	r2, [r3, #0]
9000d988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d98a:	6a1b      	ldr	r3, [r3, #32]
9000d98c:	1ad3      	subs	r3, r2, r3
9000d98e:	2bf0      	cmp	r3, #240	; 0xf0
9000d990:	d904      	bls.n	9000d99c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
9000d992:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000d996:	3301      	adds	r3, #1
9000d998:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
9000d99c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
9000d9a0:	2b00      	cmp	r3, #0
9000d9a2:	d02f      	beq.n	9000da04 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
9000d9a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000d9a6:	f000 fc17 	bl	9000e1d8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
9000d9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000d9ac:	2b00      	cmp	r3, #0
9000d9ae:	d010      	beq.n	9000d9d2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
9000d9b0:	4b1f      	ldr	r3, [pc, #124]	; (9000da30 <tcp_slowtmr+0x674>)
9000d9b2:	681b      	ldr	r3, [r3, #0]
9000d9b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
9000d9b6:	429a      	cmp	r2, r3
9000d9b8:	d106      	bne.n	9000d9c8 <tcp_slowtmr+0x60c>
9000d9ba:	4b19      	ldr	r3, [pc, #100]	; (9000da20 <tcp_slowtmr+0x664>)
9000d9bc:	f240 52af 	movw	r2, #1455	; 0x5af
9000d9c0:	491c      	ldr	r1, [pc, #112]	; (9000da34 <tcp_slowtmr+0x678>)
9000d9c2:	4819      	ldr	r0, [pc, #100]	; (9000da28 <tcp_slowtmr+0x66c>)
9000d9c4:	f008 f916 	bl	90015bf4 <iprintf>
        prev->next = pcb->next;
9000d9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d9ca:	68da      	ldr	r2, [r3, #12]
9000d9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
9000d9ce:	60da      	str	r2, [r3, #12]
9000d9d0:	e00f      	b.n	9000d9f2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
9000d9d2:	4b17      	ldr	r3, [pc, #92]	; (9000da30 <tcp_slowtmr+0x674>)
9000d9d4:	681b      	ldr	r3, [r3, #0]
9000d9d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
9000d9d8:	429a      	cmp	r2, r3
9000d9da:	d006      	beq.n	9000d9ea <tcp_slowtmr+0x62e>
9000d9dc:	4b10      	ldr	r3, [pc, #64]	; (9000da20 <tcp_slowtmr+0x664>)
9000d9de:	f240 52b3 	movw	r2, #1459	; 0x5b3
9000d9e2:	4915      	ldr	r1, [pc, #84]	; (9000da38 <tcp_slowtmr+0x67c>)
9000d9e4:	4810      	ldr	r0, [pc, #64]	; (9000da28 <tcp_slowtmr+0x66c>)
9000d9e6:	f008 f905 	bl	90015bf4 <iprintf>
        tcp_tw_pcbs = pcb->next;
9000d9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d9ec:	68db      	ldr	r3, [r3, #12]
9000d9ee:	4a10      	ldr	r2, [pc, #64]	; (9000da30 <tcp_slowtmr+0x674>)
9000d9f0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
9000d9f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d9f4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
9000d9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000d9f8:	68db      	ldr	r3, [r3, #12]
9000d9fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
9000d9fc:	69f8      	ldr	r0, [r7, #28]
9000d9fe:	f7fe ff85 	bl	9000c90c <tcp_free>
9000da02:	e004      	b.n	9000da0e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
9000da04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000da06:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
9000da08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000da0a:	68db      	ldr	r3, [r3, #12]
9000da0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
9000da0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9000da10:	2b00      	cmp	r3, #0
9000da12:	d1a9      	bne.n	9000d968 <tcp_slowtmr+0x5ac>
    }
  }
}
9000da14:	bf00      	nop
9000da16:	bf00      	nop
9000da18:	3730      	adds	r7, #48	; 0x30
9000da1a:	46bd      	mov	sp, r7
9000da1c:	bdb0      	pop	{r4, r5, r7, pc}
9000da1e:	bf00      	nop
9000da20:	90018828 	.word	0x90018828
9000da24:	90018cb8 	.word	0x90018cb8
9000da28:	9001886c 	.word	0x9001886c
9000da2c:	2401f3a4 	.word	0x2401f3a4
9000da30:	2401f3b4 	.word	0x2401f3b4
9000da34:	90018ce8 	.word	0x90018ce8
9000da38:	90018d10 	.word	0x90018d10

9000da3c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
9000da3c:	b580      	push	{r7, lr}
9000da3e:	b082      	sub	sp, #8
9000da40:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
9000da42:	4b2d      	ldr	r3, [pc, #180]	; (9000daf8 <tcp_fasttmr+0xbc>)
9000da44:	781b      	ldrb	r3, [r3, #0]
9000da46:	3301      	adds	r3, #1
9000da48:	b2da      	uxtb	r2, r3
9000da4a:	4b2b      	ldr	r3, [pc, #172]	; (9000daf8 <tcp_fasttmr+0xbc>)
9000da4c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
9000da4e:	4b2b      	ldr	r3, [pc, #172]	; (9000dafc <tcp_fasttmr+0xc0>)
9000da50:	681b      	ldr	r3, [r3, #0]
9000da52:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
9000da54:	e048      	b.n	9000dae8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
9000da56:	687b      	ldr	r3, [r7, #4]
9000da58:	7f9a      	ldrb	r2, [r3, #30]
9000da5a:	4b27      	ldr	r3, [pc, #156]	; (9000daf8 <tcp_fasttmr+0xbc>)
9000da5c:	781b      	ldrb	r3, [r3, #0]
9000da5e:	429a      	cmp	r2, r3
9000da60:	d03f      	beq.n	9000dae2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
9000da62:	4b25      	ldr	r3, [pc, #148]	; (9000daf8 <tcp_fasttmr+0xbc>)
9000da64:	781a      	ldrb	r2, [r3, #0]
9000da66:	687b      	ldr	r3, [r7, #4]
9000da68:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
9000da6a:	687b      	ldr	r3, [r7, #4]
9000da6c:	8b5b      	ldrh	r3, [r3, #26]
9000da6e:	f003 0301 	and.w	r3, r3, #1
9000da72:	2b00      	cmp	r3, #0
9000da74:	d010      	beq.n	9000da98 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
9000da76:	687b      	ldr	r3, [r7, #4]
9000da78:	8b5b      	ldrh	r3, [r3, #26]
9000da7a:	f043 0302 	orr.w	r3, r3, #2
9000da7e:	b29a      	uxth	r2, r3
9000da80:	687b      	ldr	r3, [r7, #4]
9000da82:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
9000da84:	6878      	ldr	r0, [r7, #4]
9000da86:	f004 f813 	bl	90011ab0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
9000da8a:	687b      	ldr	r3, [r7, #4]
9000da8c:	8b5b      	ldrh	r3, [r3, #26]
9000da8e:	f023 0303 	bic.w	r3, r3, #3
9000da92:	b29a      	uxth	r2, r3
9000da94:	687b      	ldr	r3, [r7, #4]
9000da96:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
9000da98:	687b      	ldr	r3, [r7, #4]
9000da9a:	8b5b      	ldrh	r3, [r3, #26]
9000da9c:	f003 0308 	and.w	r3, r3, #8
9000daa0:	2b00      	cmp	r3, #0
9000daa2:	d009      	beq.n	9000dab8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
9000daa4:	687b      	ldr	r3, [r7, #4]
9000daa6:	8b5b      	ldrh	r3, [r3, #26]
9000daa8:	f023 0308 	bic.w	r3, r3, #8
9000daac:	b29a      	uxth	r2, r3
9000daae:	687b      	ldr	r3, [r7, #4]
9000dab0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
9000dab2:	6878      	ldr	r0, [r7, #4]
9000dab4:	f7ff f8be 	bl	9000cc34 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
9000dab8:	687b      	ldr	r3, [r7, #4]
9000daba:	68db      	ldr	r3, [r3, #12]
9000dabc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
9000dabe:	687b      	ldr	r3, [r7, #4]
9000dac0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000dac2:	2b00      	cmp	r3, #0
9000dac4:	d00a      	beq.n	9000dadc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
9000dac6:	4b0e      	ldr	r3, [pc, #56]	; (9000db00 <tcp_fasttmr+0xc4>)
9000dac8:	2200      	movs	r2, #0
9000daca:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
9000dacc:	6878      	ldr	r0, [r7, #4]
9000dace:	f000 f819 	bl	9000db04 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
9000dad2:	4b0b      	ldr	r3, [pc, #44]	; (9000db00 <tcp_fasttmr+0xc4>)
9000dad4:	781b      	ldrb	r3, [r3, #0]
9000dad6:	2b00      	cmp	r3, #0
9000dad8:	d000      	beq.n	9000dadc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
9000dada:	e7b8      	b.n	9000da4e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
9000dadc:	683b      	ldr	r3, [r7, #0]
9000dade:	607b      	str	r3, [r7, #4]
9000dae0:	e002      	b.n	9000dae8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
9000dae2:	687b      	ldr	r3, [r7, #4]
9000dae4:	68db      	ldr	r3, [r3, #12]
9000dae6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
9000dae8:	687b      	ldr	r3, [r7, #4]
9000daea:	2b00      	cmp	r3, #0
9000daec:	d1b3      	bne.n	9000da56 <tcp_fasttmr+0x1a>
    }
  }
}
9000daee:	bf00      	nop
9000daf0:	bf00      	nop
9000daf2:	3708      	adds	r7, #8
9000daf4:	46bd      	mov	sp, r7
9000daf6:	bd80      	pop	{r7, pc}
9000daf8:	2401f3ba 	.word	0x2401f3ba
9000dafc:	2401f3b0 	.word	0x2401f3b0
9000db00:	2401f3b8 	.word	0x2401f3b8

9000db04 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
9000db04:	b590      	push	{r4, r7, lr}
9000db06:	b085      	sub	sp, #20
9000db08:	af00      	add	r7, sp, #0
9000db0a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
9000db0c:	687b      	ldr	r3, [r7, #4]
9000db0e:	2b00      	cmp	r3, #0
9000db10:	d109      	bne.n	9000db26 <tcp_process_refused_data+0x22>
9000db12:	4b37      	ldr	r3, [pc, #220]	; (9000dbf0 <tcp_process_refused_data+0xec>)
9000db14:	f240 6209 	movw	r2, #1545	; 0x609
9000db18:	4936      	ldr	r1, [pc, #216]	; (9000dbf4 <tcp_process_refused_data+0xf0>)
9000db1a:	4837      	ldr	r0, [pc, #220]	; (9000dbf8 <tcp_process_refused_data+0xf4>)
9000db1c:	f008 f86a 	bl	90015bf4 <iprintf>
9000db20:	f06f 030f 	mvn.w	r3, #15
9000db24:	e060      	b.n	9000dbe8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
9000db26:	687b      	ldr	r3, [r7, #4]
9000db28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000db2a:	7b5b      	ldrb	r3, [r3, #13]
9000db2c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
9000db2e:	687b      	ldr	r3, [r7, #4]
9000db30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000db32:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
9000db34:	687b      	ldr	r3, [r7, #4]
9000db36:	2200      	movs	r2, #0
9000db38:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
9000db3a:	687b      	ldr	r3, [r7, #4]
9000db3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000db40:	2b00      	cmp	r3, #0
9000db42:	d00b      	beq.n	9000db5c <tcp_process_refused_data+0x58>
9000db44:	687b      	ldr	r3, [r7, #4]
9000db46:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
9000db4a:	687b      	ldr	r3, [r7, #4]
9000db4c:	6918      	ldr	r0, [r3, #16]
9000db4e:	2300      	movs	r3, #0
9000db50:	68ba      	ldr	r2, [r7, #8]
9000db52:	6879      	ldr	r1, [r7, #4]
9000db54:	47a0      	blx	r4
9000db56:	4603      	mov	r3, r0
9000db58:	73fb      	strb	r3, [r7, #15]
9000db5a:	e007      	b.n	9000db6c <tcp_process_refused_data+0x68>
9000db5c:	2300      	movs	r3, #0
9000db5e:	68ba      	ldr	r2, [r7, #8]
9000db60:	6879      	ldr	r1, [r7, #4]
9000db62:	2000      	movs	r0, #0
9000db64:	f000 f8c2 	bl	9000dcec <tcp_recv_null>
9000db68:	4603      	mov	r3, r0
9000db6a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
9000db6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
9000db70:	2b00      	cmp	r3, #0
9000db72:	d12a      	bne.n	9000dbca <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
9000db74:	7bbb      	ldrb	r3, [r7, #14]
9000db76:	f003 0320 	and.w	r3, r3, #32
9000db7a:	2b00      	cmp	r3, #0
9000db7c:	d033      	beq.n	9000dbe6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
9000db7e:	687b      	ldr	r3, [r7, #4]
9000db80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
9000db82:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
9000db86:	d005      	beq.n	9000db94 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
9000db88:	687b      	ldr	r3, [r7, #4]
9000db8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
9000db8c:	3301      	adds	r3, #1
9000db8e:	b29a      	uxth	r2, r3
9000db90:	687b      	ldr	r3, [r7, #4]
9000db92:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
9000db94:	687b      	ldr	r3, [r7, #4]
9000db96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000db9a:	2b00      	cmp	r3, #0
9000db9c:	d00b      	beq.n	9000dbb6 <tcp_process_refused_data+0xb2>
9000db9e:	687b      	ldr	r3, [r7, #4]
9000dba0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
9000dba4:	687b      	ldr	r3, [r7, #4]
9000dba6:	6918      	ldr	r0, [r3, #16]
9000dba8:	2300      	movs	r3, #0
9000dbaa:	2200      	movs	r2, #0
9000dbac:	6879      	ldr	r1, [r7, #4]
9000dbae:	47a0      	blx	r4
9000dbb0:	4603      	mov	r3, r0
9000dbb2:	73fb      	strb	r3, [r7, #15]
9000dbb4:	e001      	b.n	9000dbba <tcp_process_refused_data+0xb6>
9000dbb6:	2300      	movs	r3, #0
9000dbb8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
9000dbba:	f997 300f 	ldrsb.w	r3, [r7, #15]
9000dbbe:	f113 0f0d 	cmn.w	r3, #13
9000dbc2:	d110      	bne.n	9000dbe6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
9000dbc4:	f06f 030c 	mvn.w	r3, #12
9000dbc8:	e00e      	b.n	9000dbe8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
9000dbca:	f997 300f 	ldrsb.w	r3, [r7, #15]
9000dbce:	f113 0f0d 	cmn.w	r3, #13
9000dbd2:	d102      	bne.n	9000dbda <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
9000dbd4:	f06f 030c 	mvn.w	r3, #12
9000dbd8:	e006      	b.n	9000dbe8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
9000dbda:	687b      	ldr	r3, [r7, #4]
9000dbdc:	68ba      	ldr	r2, [r7, #8]
9000dbde:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
9000dbe0:	f06f 0304 	mvn.w	r3, #4
9000dbe4:	e000      	b.n	9000dbe8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
9000dbe6:	2300      	movs	r3, #0
}
9000dbe8:	4618      	mov	r0, r3
9000dbea:	3714      	adds	r7, #20
9000dbec:	46bd      	mov	sp, r7
9000dbee:	bd90      	pop	{r4, r7, pc}
9000dbf0:	90018828 	.word	0x90018828
9000dbf4:	90018d38 	.word	0x90018d38
9000dbf8:	9001886c 	.word	0x9001886c

9000dbfc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
9000dbfc:	b580      	push	{r7, lr}
9000dbfe:	b084      	sub	sp, #16
9000dc00:	af00      	add	r7, sp, #0
9000dc02:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
9000dc04:	e007      	b.n	9000dc16 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
9000dc06:	687b      	ldr	r3, [r7, #4]
9000dc08:	681b      	ldr	r3, [r3, #0]
9000dc0a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
9000dc0c:	6878      	ldr	r0, [r7, #4]
9000dc0e:	f000 f80a 	bl	9000dc26 <tcp_seg_free>
    seg = next;
9000dc12:	68fb      	ldr	r3, [r7, #12]
9000dc14:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
9000dc16:	687b      	ldr	r3, [r7, #4]
9000dc18:	2b00      	cmp	r3, #0
9000dc1a:	d1f4      	bne.n	9000dc06 <tcp_segs_free+0xa>
  }
}
9000dc1c:	bf00      	nop
9000dc1e:	bf00      	nop
9000dc20:	3710      	adds	r7, #16
9000dc22:	46bd      	mov	sp, r7
9000dc24:	bd80      	pop	{r7, pc}

9000dc26 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
9000dc26:	b580      	push	{r7, lr}
9000dc28:	b082      	sub	sp, #8
9000dc2a:	af00      	add	r7, sp, #0
9000dc2c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
9000dc2e:	687b      	ldr	r3, [r7, #4]
9000dc30:	2b00      	cmp	r3, #0
9000dc32:	d00c      	beq.n	9000dc4e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
9000dc34:	687b      	ldr	r3, [r7, #4]
9000dc36:	685b      	ldr	r3, [r3, #4]
9000dc38:	2b00      	cmp	r3, #0
9000dc3a:	d004      	beq.n	9000dc46 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
9000dc3c:	687b      	ldr	r3, [r7, #4]
9000dc3e:	685b      	ldr	r3, [r3, #4]
9000dc40:	4618      	mov	r0, r3
9000dc42:	f7fe fbb7 	bl	9000c3b4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
9000dc46:	6879      	ldr	r1, [r7, #4]
9000dc48:	2003      	movs	r0, #3
9000dc4a:	f7fd fd0f 	bl	9000b66c <memp_free>
  }
}
9000dc4e:	bf00      	nop
9000dc50:	3708      	adds	r7, #8
9000dc52:	46bd      	mov	sp, r7
9000dc54:	bd80      	pop	{r7, pc}
	...

9000dc58 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
9000dc58:	b580      	push	{r7, lr}
9000dc5a:	b082      	sub	sp, #8
9000dc5c:	af00      	add	r7, sp, #0
9000dc5e:	6078      	str	r0, [r7, #4]
9000dc60:	460b      	mov	r3, r1
9000dc62:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
9000dc64:	687b      	ldr	r3, [r7, #4]
9000dc66:	2b00      	cmp	r3, #0
9000dc68:	d107      	bne.n	9000dc7a <tcp_setprio+0x22>
9000dc6a:	4b07      	ldr	r3, [pc, #28]	; (9000dc88 <tcp_setprio+0x30>)
9000dc6c:	f44f 62ce 	mov.w	r2, #1648	; 0x670
9000dc70:	4906      	ldr	r1, [pc, #24]	; (9000dc8c <tcp_setprio+0x34>)
9000dc72:	4807      	ldr	r0, [pc, #28]	; (9000dc90 <tcp_setprio+0x38>)
9000dc74:	f007 ffbe 	bl	90015bf4 <iprintf>
9000dc78:	e002      	b.n	9000dc80 <tcp_setprio+0x28>

  pcb->prio = prio;
9000dc7a:	687b      	ldr	r3, [r7, #4]
9000dc7c:	78fa      	ldrb	r2, [r7, #3]
9000dc7e:	755a      	strb	r2, [r3, #21]
}
9000dc80:	3708      	adds	r7, #8
9000dc82:	46bd      	mov	sp, r7
9000dc84:	bd80      	pop	{r7, pc}
9000dc86:	bf00      	nop
9000dc88:	90018828 	.word	0x90018828
9000dc8c:	90018d60 	.word	0x90018d60
9000dc90:	9001886c 	.word	0x9001886c

9000dc94 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
9000dc94:	b580      	push	{r7, lr}
9000dc96:	b084      	sub	sp, #16
9000dc98:	af00      	add	r7, sp, #0
9000dc9a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
9000dc9c:	687b      	ldr	r3, [r7, #4]
9000dc9e:	2b00      	cmp	r3, #0
9000dca0:	d106      	bne.n	9000dcb0 <tcp_seg_copy+0x1c>
9000dca2:	4b0f      	ldr	r3, [pc, #60]	; (9000dce0 <tcp_seg_copy+0x4c>)
9000dca4:	f240 6282 	movw	r2, #1666	; 0x682
9000dca8:	490e      	ldr	r1, [pc, #56]	; (9000dce4 <tcp_seg_copy+0x50>)
9000dcaa:	480f      	ldr	r0, [pc, #60]	; (9000dce8 <tcp_seg_copy+0x54>)
9000dcac:	f007 ffa2 	bl	90015bf4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
9000dcb0:	2003      	movs	r0, #3
9000dcb2:	f7fd fc65 	bl	9000b580 <memp_malloc>
9000dcb6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
9000dcb8:	68fb      	ldr	r3, [r7, #12]
9000dcba:	2b00      	cmp	r3, #0
9000dcbc:	d101      	bne.n	9000dcc2 <tcp_seg_copy+0x2e>
    return NULL;
9000dcbe:	2300      	movs	r3, #0
9000dcc0:	e00a      	b.n	9000dcd8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
9000dcc2:	2210      	movs	r2, #16
9000dcc4:	6879      	ldr	r1, [r7, #4]
9000dcc6:	68f8      	ldr	r0, [r7, #12]
9000dcc8:	f007 fecf 	bl	90015a6a <memcpy>
  pbuf_ref(cseg->p);
9000dccc:	68fb      	ldr	r3, [r7, #12]
9000dcce:	685b      	ldr	r3, [r3, #4]
9000dcd0:	4618      	mov	r0, r3
9000dcd2:	f7fe fc15 	bl	9000c500 <pbuf_ref>
  return cseg;
9000dcd6:	68fb      	ldr	r3, [r7, #12]
}
9000dcd8:	4618      	mov	r0, r3
9000dcda:	3710      	adds	r7, #16
9000dcdc:	46bd      	mov	sp, r7
9000dcde:	bd80      	pop	{r7, pc}
9000dce0:	90018828 	.word	0x90018828
9000dce4:	90018d7c 	.word	0x90018d7c
9000dce8:	9001886c 	.word	0x9001886c

9000dcec <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
9000dcec:	b580      	push	{r7, lr}
9000dcee:	b084      	sub	sp, #16
9000dcf0:	af00      	add	r7, sp, #0
9000dcf2:	60f8      	str	r0, [r7, #12]
9000dcf4:	60b9      	str	r1, [r7, #8]
9000dcf6:	607a      	str	r2, [r7, #4]
9000dcf8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
9000dcfa:	68bb      	ldr	r3, [r7, #8]
9000dcfc:	2b00      	cmp	r3, #0
9000dcfe:	d109      	bne.n	9000dd14 <tcp_recv_null+0x28>
9000dd00:	4b12      	ldr	r3, [pc, #72]	; (9000dd4c <tcp_recv_null+0x60>)
9000dd02:	f44f 62d3 	mov.w	r2, #1688	; 0x698
9000dd06:	4912      	ldr	r1, [pc, #72]	; (9000dd50 <tcp_recv_null+0x64>)
9000dd08:	4812      	ldr	r0, [pc, #72]	; (9000dd54 <tcp_recv_null+0x68>)
9000dd0a:	f007 ff73 	bl	90015bf4 <iprintf>
9000dd0e:	f06f 030f 	mvn.w	r3, #15
9000dd12:	e016      	b.n	9000dd42 <tcp_recv_null+0x56>

  if (p != NULL) {
9000dd14:	687b      	ldr	r3, [r7, #4]
9000dd16:	2b00      	cmp	r3, #0
9000dd18:	d009      	beq.n	9000dd2e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
9000dd1a:	687b      	ldr	r3, [r7, #4]
9000dd1c:	891b      	ldrh	r3, [r3, #8]
9000dd1e:	4619      	mov	r1, r3
9000dd20:	68b8      	ldr	r0, [r7, #8]
9000dd22:	f7ff fab5 	bl	9000d290 <tcp_recved>
    pbuf_free(p);
9000dd26:	6878      	ldr	r0, [r7, #4]
9000dd28:	f7fe fb44 	bl	9000c3b4 <pbuf_free>
9000dd2c:	e008      	b.n	9000dd40 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
9000dd2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
9000dd32:	2b00      	cmp	r3, #0
9000dd34:	d104      	bne.n	9000dd40 <tcp_recv_null+0x54>
    return tcp_close(pcb);
9000dd36:	68b8      	ldr	r0, [r7, #8]
9000dd38:	f7fe ffe6 	bl	9000cd08 <tcp_close>
9000dd3c:	4603      	mov	r3, r0
9000dd3e:	e000      	b.n	9000dd42 <tcp_recv_null+0x56>
  }
  return ERR_OK;
9000dd40:	2300      	movs	r3, #0
}
9000dd42:	4618      	mov	r0, r3
9000dd44:	3710      	adds	r7, #16
9000dd46:	46bd      	mov	sp, r7
9000dd48:	bd80      	pop	{r7, pc}
9000dd4a:	bf00      	nop
9000dd4c:	90018828 	.word	0x90018828
9000dd50:	90018d98 	.word	0x90018d98
9000dd54:	9001886c 	.word	0x9001886c

9000dd58 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
9000dd58:	b580      	push	{r7, lr}
9000dd5a:	b086      	sub	sp, #24
9000dd5c:	af00      	add	r7, sp, #0
9000dd5e:	4603      	mov	r3, r0
9000dd60:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
9000dd62:	f997 3007 	ldrsb.w	r3, [r7, #7]
9000dd66:	2b00      	cmp	r3, #0
9000dd68:	db01      	blt.n	9000dd6e <tcp_kill_prio+0x16>
9000dd6a:	79fb      	ldrb	r3, [r7, #7]
9000dd6c:	e000      	b.n	9000dd70 <tcp_kill_prio+0x18>
9000dd6e:	237f      	movs	r3, #127	; 0x7f
9000dd70:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
9000dd72:	7afb      	ldrb	r3, [r7, #11]
9000dd74:	2b00      	cmp	r3, #0
9000dd76:	d034      	beq.n	9000dde2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
9000dd78:	7afb      	ldrb	r3, [r7, #11]
9000dd7a:	3b01      	subs	r3, #1
9000dd7c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
9000dd7e:	2300      	movs	r3, #0
9000dd80:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
9000dd82:	2300      	movs	r3, #0
9000dd84:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
9000dd86:	4b19      	ldr	r3, [pc, #100]	; (9000ddec <tcp_kill_prio+0x94>)
9000dd88:	681b      	ldr	r3, [r3, #0]
9000dd8a:	617b      	str	r3, [r7, #20]
9000dd8c:	e01f      	b.n	9000ddce <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
9000dd8e:	697b      	ldr	r3, [r7, #20]
9000dd90:	7d5b      	ldrb	r3, [r3, #21]
9000dd92:	7afa      	ldrb	r2, [r7, #11]
9000dd94:	429a      	cmp	r2, r3
9000dd96:	d80c      	bhi.n	9000ddb2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
9000dd98:	697b      	ldr	r3, [r7, #20]
9000dd9a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
9000dd9c:	7afa      	ldrb	r2, [r7, #11]
9000dd9e:	429a      	cmp	r2, r3
9000dda0:	d112      	bne.n	9000ddc8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
9000dda2:	4b13      	ldr	r3, [pc, #76]	; (9000ddf0 <tcp_kill_prio+0x98>)
9000dda4:	681a      	ldr	r2, [r3, #0]
9000dda6:	697b      	ldr	r3, [r7, #20]
9000dda8:	6a1b      	ldr	r3, [r3, #32]
9000ddaa:	1ad3      	subs	r3, r2, r3
9000ddac:	68fa      	ldr	r2, [r7, #12]
9000ddae:	429a      	cmp	r2, r3
9000ddb0:	d80a      	bhi.n	9000ddc8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
9000ddb2:	4b0f      	ldr	r3, [pc, #60]	; (9000ddf0 <tcp_kill_prio+0x98>)
9000ddb4:	681a      	ldr	r2, [r3, #0]
9000ddb6:	697b      	ldr	r3, [r7, #20]
9000ddb8:	6a1b      	ldr	r3, [r3, #32]
9000ddba:	1ad3      	subs	r3, r2, r3
9000ddbc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
9000ddbe:	697b      	ldr	r3, [r7, #20]
9000ddc0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
9000ddc2:	697b      	ldr	r3, [r7, #20]
9000ddc4:	7d5b      	ldrb	r3, [r3, #21]
9000ddc6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
9000ddc8:	697b      	ldr	r3, [r7, #20]
9000ddca:	68db      	ldr	r3, [r3, #12]
9000ddcc:	617b      	str	r3, [r7, #20]
9000ddce:	697b      	ldr	r3, [r7, #20]
9000ddd0:	2b00      	cmp	r3, #0
9000ddd2:	d1dc      	bne.n	9000dd8e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
9000ddd4:	693b      	ldr	r3, [r7, #16]
9000ddd6:	2b00      	cmp	r3, #0
9000ddd8:	d004      	beq.n	9000dde4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
9000ddda:	6938      	ldr	r0, [r7, #16]
9000dddc:	f7ff f87e 	bl	9000cedc <tcp_abort>
9000dde0:	e000      	b.n	9000dde4 <tcp_kill_prio+0x8c>
    return;
9000dde2:	bf00      	nop
  }
}
9000dde4:	3718      	adds	r7, #24
9000dde6:	46bd      	mov	sp, r7
9000dde8:	bd80      	pop	{r7, pc}
9000ddea:	bf00      	nop
9000ddec:	2401f3b0 	.word	0x2401f3b0
9000ddf0:	2401f3a4 	.word	0x2401f3a4

9000ddf4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
9000ddf4:	b580      	push	{r7, lr}
9000ddf6:	b086      	sub	sp, #24
9000ddf8:	af00      	add	r7, sp, #0
9000ddfa:	4603      	mov	r3, r0
9000ddfc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
9000ddfe:	79fb      	ldrb	r3, [r7, #7]
9000de00:	2b08      	cmp	r3, #8
9000de02:	d009      	beq.n	9000de18 <tcp_kill_state+0x24>
9000de04:	79fb      	ldrb	r3, [r7, #7]
9000de06:	2b09      	cmp	r3, #9
9000de08:	d006      	beq.n	9000de18 <tcp_kill_state+0x24>
9000de0a:	4b1a      	ldr	r3, [pc, #104]	; (9000de74 <tcp_kill_state+0x80>)
9000de0c:	f240 62dd 	movw	r2, #1757	; 0x6dd
9000de10:	4919      	ldr	r1, [pc, #100]	; (9000de78 <tcp_kill_state+0x84>)
9000de12:	481a      	ldr	r0, [pc, #104]	; (9000de7c <tcp_kill_state+0x88>)
9000de14:	f007 feee 	bl	90015bf4 <iprintf>

  inactivity = 0;
9000de18:	2300      	movs	r3, #0
9000de1a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
9000de1c:	2300      	movs	r3, #0
9000de1e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
9000de20:	4b17      	ldr	r3, [pc, #92]	; (9000de80 <tcp_kill_state+0x8c>)
9000de22:	681b      	ldr	r3, [r3, #0]
9000de24:	617b      	str	r3, [r7, #20]
9000de26:	e017      	b.n	9000de58 <tcp_kill_state+0x64>
    if (pcb->state == state) {
9000de28:	697b      	ldr	r3, [r7, #20]
9000de2a:	7d1b      	ldrb	r3, [r3, #20]
9000de2c:	79fa      	ldrb	r2, [r7, #7]
9000de2e:	429a      	cmp	r2, r3
9000de30:	d10f      	bne.n	9000de52 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
9000de32:	4b14      	ldr	r3, [pc, #80]	; (9000de84 <tcp_kill_state+0x90>)
9000de34:	681a      	ldr	r2, [r3, #0]
9000de36:	697b      	ldr	r3, [r7, #20]
9000de38:	6a1b      	ldr	r3, [r3, #32]
9000de3a:	1ad3      	subs	r3, r2, r3
9000de3c:	68fa      	ldr	r2, [r7, #12]
9000de3e:	429a      	cmp	r2, r3
9000de40:	d807      	bhi.n	9000de52 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
9000de42:	4b10      	ldr	r3, [pc, #64]	; (9000de84 <tcp_kill_state+0x90>)
9000de44:	681a      	ldr	r2, [r3, #0]
9000de46:	697b      	ldr	r3, [r7, #20]
9000de48:	6a1b      	ldr	r3, [r3, #32]
9000de4a:	1ad3      	subs	r3, r2, r3
9000de4c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
9000de4e:	697b      	ldr	r3, [r7, #20]
9000de50:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
9000de52:	697b      	ldr	r3, [r7, #20]
9000de54:	68db      	ldr	r3, [r3, #12]
9000de56:	617b      	str	r3, [r7, #20]
9000de58:	697b      	ldr	r3, [r7, #20]
9000de5a:	2b00      	cmp	r3, #0
9000de5c:	d1e4      	bne.n	9000de28 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
9000de5e:	693b      	ldr	r3, [r7, #16]
9000de60:	2b00      	cmp	r3, #0
9000de62:	d003      	beq.n	9000de6c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
9000de64:	2100      	movs	r1, #0
9000de66:	6938      	ldr	r0, [r7, #16]
9000de68:	f7fe ff7a 	bl	9000cd60 <tcp_abandon>
  }
}
9000de6c:	bf00      	nop
9000de6e:	3718      	adds	r7, #24
9000de70:	46bd      	mov	sp, r7
9000de72:	bd80      	pop	{r7, pc}
9000de74:	90018828 	.word	0x90018828
9000de78:	90018db4 	.word	0x90018db4
9000de7c:	9001886c 	.word	0x9001886c
9000de80:	2401f3b0 	.word	0x2401f3b0
9000de84:	2401f3a4 	.word	0x2401f3a4

9000de88 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
9000de88:	b580      	push	{r7, lr}
9000de8a:	b084      	sub	sp, #16
9000de8c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
9000de8e:	2300      	movs	r3, #0
9000de90:	607b      	str	r3, [r7, #4]
  inactive = NULL;
9000de92:	2300      	movs	r3, #0
9000de94:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
9000de96:	4b12      	ldr	r3, [pc, #72]	; (9000dee0 <tcp_kill_timewait+0x58>)
9000de98:	681b      	ldr	r3, [r3, #0]
9000de9a:	60fb      	str	r3, [r7, #12]
9000de9c:	e012      	b.n	9000dec4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
9000de9e:	4b11      	ldr	r3, [pc, #68]	; (9000dee4 <tcp_kill_timewait+0x5c>)
9000dea0:	681a      	ldr	r2, [r3, #0]
9000dea2:	68fb      	ldr	r3, [r7, #12]
9000dea4:	6a1b      	ldr	r3, [r3, #32]
9000dea6:	1ad3      	subs	r3, r2, r3
9000dea8:	687a      	ldr	r2, [r7, #4]
9000deaa:	429a      	cmp	r2, r3
9000deac:	d807      	bhi.n	9000debe <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
9000deae:	4b0d      	ldr	r3, [pc, #52]	; (9000dee4 <tcp_kill_timewait+0x5c>)
9000deb0:	681a      	ldr	r2, [r3, #0]
9000deb2:	68fb      	ldr	r3, [r7, #12]
9000deb4:	6a1b      	ldr	r3, [r3, #32]
9000deb6:	1ad3      	subs	r3, r2, r3
9000deb8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
9000deba:	68fb      	ldr	r3, [r7, #12]
9000debc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
9000debe:	68fb      	ldr	r3, [r7, #12]
9000dec0:	68db      	ldr	r3, [r3, #12]
9000dec2:	60fb      	str	r3, [r7, #12]
9000dec4:	68fb      	ldr	r3, [r7, #12]
9000dec6:	2b00      	cmp	r3, #0
9000dec8:	d1e9      	bne.n	9000de9e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
9000deca:	68bb      	ldr	r3, [r7, #8]
9000decc:	2b00      	cmp	r3, #0
9000dece:	d002      	beq.n	9000ded6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
9000ded0:	68b8      	ldr	r0, [r7, #8]
9000ded2:	f7ff f803 	bl	9000cedc <tcp_abort>
  }
}
9000ded6:	bf00      	nop
9000ded8:	3710      	adds	r7, #16
9000deda:	46bd      	mov	sp, r7
9000dedc:	bd80      	pop	{r7, pc}
9000dede:	bf00      	nop
9000dee0:	2401f3b4 	.word	0x2401f3b4
9000dee4:	2401f3a4 	.word	0x2401f3a4

9000dee8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
9000dee8:	b580      	push	{r7, lr}
9000deea:	b082      	sub	sp, #8
9000deec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
9000deee:	4b10      	ldr	r3, [pc, #64]	; (9000df30 <tcp_handle_closepend+0x48>)
9000def0:	681b      	ldr	r3, [r3, #0]
9000def2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
9000def4:	e014      	b.n	9000df20 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
9000def6:	687b      	ldr	r3, [r7, #4]
9000def8:	68db      	ldr	r3, [r3, #12]
9000defa:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
9000defc:	687b      	ldr	r3, [r7, #4]
9000defe:	8b5b      	ldrh	r3, [r3, #26]
9000df00:	f003 0308 	and.w	r3, r3, #8
9000df04:	2b00      	cmp	r3, #0
9000df06:	d009      	beq.n	9000df1c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
9000df08:	687b      	ldr	r3, [r7, #4]
9000df0a:	8b5b      	ldrh	r3, [r3, #26]
9000df0c:	f023 0308 	bic.w	r3, r3, #8
9000df10:	b29a      	uxth	r2, r3
9000df12:	687b      	ldr	r3, [r7, #4]
9000df14:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
9000df16:	6878      	ldr	r0, [r7, #4]
9000df18:	f7fe fe8c 	bl	9000cc34 <tcp_close_shutdown_fin>
    }
    pcb = next;
9000df1c:	683b      	ldr	r3, [r7, #0]
9000df1e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
9000df20:	687b      	ldr	r3, [r7, #4]
9000df22:	2b00      	cmp	r3, #0
9000df24:	d1e7      	bne.n	9000def6 <tcp_handle_closepend+0xe>
  }
}
9000df26:	bf00      	nop
9000df28:	bf00      	nop
9000df2a:	3708      	adds	r7, #8
9000df2c:	46bd      	mov	sp, r7
9000df2e:	bd80      	pop	{r7, pc}
9000df30:	2401f3b0 	.word	0x2401f3b0

9000df34 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
9000df34:	b580      	push	{r7, lr}
9000df36:	b084      	sub	sp, #16
9000df38:	af00      	add	r7, sp, #0
9000df3a:	4603      	mov	r3, r0
9000df3c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
9000df3e:	2001      	movs	r0, #1
9000df40:	f7fd fb1e 	bl	9000b580 <memp_malloc>
9000df44:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
9000df46:	68fb      	ldr	r3, [r7, #12]
9000df48:	2b00      	cmp	r3, #0
9000df4a:	d126      	bne.n	9000df9a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
9000df4c:	f7ff ffcc 	bl	9000dee8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
9000df50:	f7ff ff9a 	bl	9000de88 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
9000df54:	2001      	movs	r0, #1
9000df56:	f7fd fb13 	bl	9000b580 <memp_malloc>
9000df5a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
9000df5c:	68fb      	ldr	r3, [r7, #12]
9000df5e:	2b00      	cmp	r3, #0
9000df60:	d11b      	bne.n	9000df9a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
9000df62:	2009      	movs	r0, #9
9000df64:	f7ff ff46 	bl	9000ddf4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
9000df68:	2001      	movs	r0, #1
9000df6a:	f7fd fb09 	bl	9000b580 <memp_malloc>
9000df6e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
9000df70:	68fb      	ldr	r3, [r7, #12]
9000df72:	2b00      	cmp	r3, #0
9000df74:	d111      	bne.n	9000df9a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
9000df76:	2008      	movs	r0, #8
9000df78:	f7ff ff3c 	bl	9000ddf4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
9000df7c:	2001      	movs	r0, #1
9000df7e:	f7fd faff 	bl	9000b580 <memp_malloc>
9000df82:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
9000df84:	68fb      	ldr	r3, [r7, #12]
9000df86:	2b00      	cmp	r3, #0
9000df88:	d107      	bne.n	9000df9a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
9000df8a:	79fb      	ldrb	r3, [r7, #7]
9000df8c:	4618      	mov	r0, r3
9000df8e:	f7ff fee3 	bl	9000dd58 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
9000df92:	2001      	movs	r0, #1
9000df94:	f7fd faf4 	bl	9000b580 <memp_malloc>
9000df98:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
9000df9a:	68fb      	ldr	r3, [r7, #12]
9000df9c:	2b00      	cmp	r3, #0
9000df9e:	d03f      	beq.n	9000e020 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
9000dfa0:	229c      	movs	r2, #156	; 0x9c
9000dfa2:	2100      	movs	r1, #0
9000dfa4:	68f8      	ldr	r0, [r7, #12]
9000dfa6:	f007 fd88 	bl	90015aba <memset>
    pcb->prio = prio;
9000dfaa:	68fb      	ldr	r3, [r7, #12]
9000dfac:	79fa      	ldrb	r2, [r7, #7]
9000dfae:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
9000dfb0:	68fb      	ldr	r3, [r7, #12]
9000dfb2:	f44f 6286 	mov.w	r2, #1072	; 0x430
9000dfb6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
9000dfba:	68fb      	ldr	r3, [r7, #12]
9000dfbc:	f44f 6206 	mov.w	r2, #2144	; 0x860
9000dfc0:	855a      	strh	r2, [r3, #42]	; 0x2a
9000dfc2:	68fb      	ldr	r3, [r7, #12]
9000dfc4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
9000dfc6:	68fb      	ldr	r3, [r7, #12]
9000dfc8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
9000dfca:	68fb      	ldr	r3, [r7, #12]
9000dfcc:	22ff      	movs	r2, #255	; 0xff
9000dfce:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
9000dfd0:	68fb      	ldr	r3, [r7, #12]
9000dfd2:	f44f 7206 	mov.w	r2, #536	; 0x218
9000dfd6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
9000dfd8:	68fb      	ldr	r3, [r7, #12]
9000dfda:	2206      	movs	r2, #6
9000dfdc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
9000dfe0:	68fb      	ldr	r3, [r7, #12]
9000dfe2:	2206      	movs	r2, #6
9000dfe4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
9000dfe6:	68fb      	ldr	r3, [r7, #12]
9000dfe8:	f64f 72ff 	movw	r2, #65535	; 0xffff
9000dfec:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
9000dfee:	68fb      	ldr	r3, [r7, #12]
9000dff0:	2201      	movs	r2, #1
9000dff2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
9000dff6:	4b0d      	ldr	r3, [pc, #52]	; (9000e02c <tcp_alloc+0xf8>)
9000dff8:	681a      	ldr	r2, [r3, #0]
9000dffa:	68fb      	ldr	r3, [r7, #12]
9000dffc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
9000dffe:	4b0c      	ldr	r3, [pc, #48]	; (9000e030 <tcp_alloc+0xfc>)
9000e000:	781a      	ldrb	r2, [r3, #0]
9000e002:	68fb      	ldr	r3, [r7, #12]
9000e004:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
9000e006:	68fb      	ldr	r3, [r7, #12]
9000e008:	f44f 6286 	mov.w	r2, #1072	; 0x430
9000e00c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
9000e010:	68fb      	ldr	r3, [r7, #12]
9000e012:	4a08      	ldr	r2, [pc, #32]	; (9000e034 <tcp_alloc+0x100>)
9000e014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
9000e018:	68fb      	ldr	r3, [r7, #12]
9000e01a:	4a07      	ldr	r2, [pc, #28]	; (9000e038 <tcp_alloc+0x104>)
9000e01c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
9000e020:	68fb      	ldr	r3, [r7, #12]
}
9000e022:	4618      	mov	r0, r3
9000e024:	3710      	adds	r7, #16
9000e026:	46bd      	mov	sp, r7
9000e028:	bd80      	pop	{r7, pc}
9000e02a:	bf00      	nop
9000e02c:	2401f3a4 	.word	0x2401f3a4
9000e030:	2401f3ba 	.word	0x2401f3ba
9000e034:	9000dced 	.word	0x9000dced
9000e038:	006ddd00 	.word	0x006ddd00

9000e03c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
9000e03c:	b580      	push	{r7, lr}
9000e03e:	b084      	sub	sp, #16
9000e040:	af00      	add	r7, sp, #0
9000e042:	4603      	mov	r3, r0
9000e044:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
9000e046:	2040      	movs	r0, #64	; 0x40
9000e048:	f7ff ff74 	bl	9000df34 <tcp_alloc>
9000e04c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
9000e04e:	68fb      	ldr	r3, [r7, #12]
}
9000e050:	4618      	mov	r0, r3
9000e052:	3710      	adds	r7, #16
9000e054:	46bd      	mov	sp, r7
9000e056:	bd80      	pop	{r7, pc}

9000e058 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
9000e058:	b480      	push	{r7}
9000e05a:	b083      	sub	sp, #12
9000e05c:	af00      	add	r7, sp, #0
9000e05e:	6078      	str	r0, [r7, #4]
9000e060:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
9000e062:	687b      	ldr	r3, [r7, #4]
9000e064:	2b00      	cmp	r3, #0
9000e066:	d002      	beq.n	9000e06e <tcp_arg+0x16>
    pcb->callback_arg = arg;
9000e068:	687b      	ldr	r3, [r7, #4]
9000e06a:	683a      	ldr	r2, [r7, #0]
9000e06c:	611a      	str	r2, [r3, #16]
  }
}
9000e06e:	bf00      	nop
9000e070:	370c      	adds	r7, #12
9000e072:	46bd      	mov	sp, r7
9000e074:	f85d 7b04 	ldr.w	r7, [sp], #4
9000e078:	4770      	bx	lr
	...

9000e07c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
9000e07c:	b580      	push	{r7, lr}
9000e07e:	b082      	sub	sp, #8
9000e080:	af00      	add	r7, sp, #0
9000e082:	6078      	str	r0, [r7, #4]
9000e084:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
9000e086:	687b      	ldr	r3, [r7, #4]
9000e088:	2b00      	cmp	r3, #0
9000e08a:	d00e      	beq.n	9000e0aa <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
9000e08c:	687b      	ldr	r3, [r7, #4]
9000e08e:	7d1b      	ldrb	r3, [r3, #20]
9000e090:	2b01      	cmp	r3, #1
9000e092:	d106      	bne.n	9000e0a2 <tcp_recv+0x26>
9000e094:	4b07      	ldr	r3, [pc, #28]	; (9000e0b4 <tcp_recv+0x38>)
9000e096:	f240 72df 	movw	r2, #2015	; 0x7df
9000e09a:	4907      	ldr	r1, [pc, #28]	; (9000e0b8 <tcp_recv+0x3c>)
9000e09c:	4807      	ldr	r0, [pc, #28]	; (9000e0bc <tcp_recv+0x40>)
9000e09e:	f007 fda9 	bl	90015bf4 <iprintf>
    pcb->recv = recv;
9000e0a2:	687b      	ldr	r3, [r7, #4]
9000e0a4:	683a      	ldr	r2, [r7, #0]
9000e0a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
9000e0aa:	bf00      	nop
9000e0ac:	3708      	adds	r7, #8
9000e0ae:	46bd      	mov	sp, r7
9000e0b0:	bd80      	pop	{r7, pc}
9000e0b2:	bf00      	nop
9000e0b4:	90018828 	.word	0x90018828
9000e0b8:	90018dc4 	.word	0x90018dc4
9000e0bc:	9001886c 	.word	0x9001886c

9000e0c0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
9000e0c0:	b580      	push	{r7, lr}
9000e0c2:	b082      	sub	sp, #8
9000e0c4:	af00      	add	r7, sp, #0
9000e0c6:	6078      	str	r0, [r7, #4]
9000e0c8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
9000e0ca:	687b      	ldr	r3, [r7, #4]
9000e0cc:	2b00      	cmp	r3, #0
9000e0ce:	d00e      	beq.n	9000e0ee <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
9000e0d0:	687b      	ldr	r3, [r7, #4]
9000e0d2:	7d1b      	ldrb	r3, [r3, #20]
9000e0d4:	2b01      	cmp	r3, #1
9000e0d6:	d106      	bne.n	9000e0e6 <tcp_sent+0x26>
9000e0d8:	4b07      	ldr	r3, [pc, #28]	; (9000e0f8 <tcp_sent+0x38>)
9000e0da:	f240 72f3 	movw	r2, #2035	; 0x7f3
9000e0de:	4907      	ldr	r1, [pc, #28]	; (9000e0fc <tcp_sent+0x3c>)
9000e0e0:	4807      	ldr	r0, [pc, #28]	; (9000e100 <tcp_sent+0x40>)
9000e0e2:	f007 fd87 	bl	90015bf4 <iprintf>
    pcb->sent = sent;
9000e0e6:	687b      	ldr	r3, [r7, #4]
9000e0e8:	683a      	ldr	r2, [r7, #0]
9000e0ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
9000e0ee:	bf00      	nop
9000e0f0:	3708      	adds	r7, #8
9000e0f2:	46bd      	mov	sp, r7
9000e0f4:	bd80      	pop	{r7, pc}
9000e0f6:	bf00      	nop
9000e0f8:	90018828 	.word	0x90018828
9000e0fc:	90018dec 	.word	0x90018dec
9000e100:	9001886c 	.word	0x9001886c

9000e104 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
9000e104:	b580      	push	{r7, lr}
9000e106:	b082      	sub	sp, #8
9000e108:	af00      	add	r7, sp, #0
9000e10a:	6078      	str	r0, [r7, #4]
9000e10c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
9000e10e:	687b      	ldr	r3, [r7, #4]
9000e110:	2b00      	cmp	r3, #0
9000e112:	d00e      	beq.n	9000e132 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
9000e114:	687b      	ldr	r3, [r7, #4]
9000e116:	7d1b      	ldrb	r3, [r3, #20]
9000e118:	2b01      	cmp	r3, #1
9000e11a:	d106      	bne.n	9000e12a <tcp_err+0x26>
9000e11c:	4b07      	ldr	r3, [pc, #28]	; (9000e13c <tcp_err+0x38>)
9000e11e:	f640 020d 	movw	r2, #2061	; 0x80d
9000e122:	4907      	ldr	r1, [pc, #28]	; (9000e140 <tcp_err+0x3c>)
9000e124:	4807      	ldr	r0, [pc, #28]	; (9000e144 <tcp_err+0x40>)
9000e126:	f007 fd65 	bl	90015bf4 <iprintf>
    pcb->errf = err;
9000e12a:	687b      	ldr	r3, [r7, #4]
9000e12c:	683a      	ldr	r2, [r7, #0]
9000e12e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
9000e132:	bf00      	nop
9000e134:	3708      	adds	r7, #8
9000e136:	46bd      	mov	sp, r7
9000e138:	bd80      	pop	{r7, pc}
9000e13a:	bf00      	nop
9000e13c:	90018828 	.word	0x90018828
9000e140:	90018e14 	.word	0x90018e14
9000e144:	9001886c 	.word	0x9001886c

9000e148 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
9000e148:	b480      	push	{r7}
9000e14a:	b085      	sub	sp, #20
9000e14c:	af00      	add	r7, sp, #0
9000e14e:	6078      	str	r0, [r7, #4]
9000e150:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
9000e152:	687b      	ldr	r3, [r7, #4]
9000e154:	2b00      	cmp	r3, #0
9000e156:	d008      	beq.n	9000e16a <tcp_accept+0x22>
9000e158:	687b      	ldr	r3, [r7, #4]
9000e15a:	7d1b      	ldrb	r3, [r3, #20]
9000e15c:	2b01      	cmp	r3, #1
9000e15e:	d104      	bne.n	9000e16a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
9000e160:	687b      	ldr	r3, [r7, #4]
9000e162:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
9000e164:	68fb      	ldr	r3, [r7, #12]
9000e166:	683a      	ldr	r2, [r7, #0]
9000e168:	619a      	str	r2, [r3, #24]
  }
}
9000e16a:	bf00      	nop
9000e16c:	3714      	adds	r7, #20
9000e16e:	46bd      	mov	sp, r7
9000e170:	f85d 7b04 	ldr.w	r7, [sp], #4
9000e174:	4770      	bx	lr
	...

9000e178 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
9000e178:	b580      	push	{r7, lr}
9000e17a:	b084      	sub	sp, #16
9000e17c:	af00      	add	r7, sp, #0
9000e17e:	60f8      	str	r0, [r7, #12]
9000e180:	60b9      	str	r1, [r7, #8]
9000e182:	4613      	mov	r3, r2
9000e184:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
9000e186:	68fb      	ldr	r3, [r7, #12]
9000e188:	2b00      	cmp	r3, #0
9000e18a:	d107      	bne.n	9000e19c <tcp_poll+0x24>
9000e18c:	4b0e      	ldr	r3, [pc, #56]	; (9000e1c8 <tcp_poll+0x50>)
9000e18e:	f640 023d 	movw	r2, #2109	; 0x83d
9000e192:	490e      	ldr	r1, [pc, #56]	; (9000e1cc <tcp_poll+0x54>)
9000e194:	480e      	ldr	r0, [pc, #56]	; (9000e1d0 <tcp_poll+0x58>)
9000e196:	f007 fd2d 	bl	90015bf4 <iprintf>
9000e19a:	e011      	b.n	9000e1c0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
9000e19c:	68fb      	ldr	r3, [r7, #12]
9000e19e:	7d1b      	ldrb	r3, [r3, #20]
9000e1a0:	2b01      	cmp	r3, #1
9000e1a2:	d106      	bne.n	9000e1b2 <tcp_poll+0x3a>
9000e1a4:	4b08      	ldr	r3, [pc, #32]	; (9000e1c8 <tcp_poll+0x50>)
9000e1a6:	f640 023e 	movw	r2, #2110	; 0x83e
9000e1aa:	490a      	ldr	r1, [pc, #40]	; (9000e1d4 <tcp_poll+0x5c>)
9000e1ac:	4808      	ldr	r0, [pc, #32]	; (9000e1d0 <tcp_poll+0x58>)
9000e1ae:	f007 fd21 	bl	90015bf4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
9000e1b2:	68fb      	ldr	r3, [r7, #12]
9000e1b4:	68ba      	ldr	r2, [r7, #8]
9000e1b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
9000e1ba:	68fb      	ldr	r3, [r7, #12]
9000e1bc:	79fa      	ldrb	r2, [r7, #7]
9000e1be:	775a      	strb	r2, [r3, #29]
}
9000e1c0:	3710      	adds	r7, #16
9000e1c2:	46bd      	mov	sp, r7
9000e1c4:	bd80      	pop	{r7, pc}
9000e1c6:	bf00      	nop
9000e1c8:	90018828 	.word	0x90018828
9000e1cc:	90018e3c 	.word	0x90018e3c
9000e1d0:	9001886c 	.word	0x9001886c
9000e1d4:	90018e54 	.word	0x90018e54

9000e1d8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
9000e1d8:	b580      	push	{r7, lr}
9000e1da:	b082      	sub	sp, #8
9000e1dc:	af00      	add	r7, sp, #0
9000e1de:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
9000e1e0:	687b      	ldr	r3, [r7, #4]
9000e1e2:	2b00      	cmp	r3, #0
9000e1e4:	d107      	bne.n	9000e1f6 <tcp_pcb_purge+0x1e>
9000e1e6:	4b21      	ldr	r3, [pc, #132]	; (9000e26c <tcp_pcb_purge+0x94>)
9000e1e8:	f640 0251 	movw	r2, #2129	; 0x851
9000e1ec:	4920      	ldr	r1, [pc, #128]	; (9000e270 <tcp_pcb_purge+0x98>)
9000e1ee:	4821      	ldr	r0, [pc, #132]	; (9000e274 <tcp_pcb_purge+0x9c>)
9000e1f0:	f007 fd00 	bl	90015bf4 <iprintf>
9000e1f4:	e037      	b.n	9000e266 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
9000e1f6:	687b      	ldr	r3, [r7, #4]
9000e1f8:	7d1b      	ldrb	r3, [r3, #20]
9000e1fa:	2b00      	cmp	r3, #0
9000e1fc:	d033      	beq.n	9000e266 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
9000e1fe:	687b      	ldr	r3, [r7, #4]
9000e200:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
9000e202:	2b0a      	cmp	r3, #10
9000e204:	d02f      	beq.n	9000e266 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
9000e206:	687b      	ldr	r3, [r7, #4]
9000e208:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
9000e20a:	2b01      	cmp	r3, #1
9000e20c:	d02b      	beq.n	9000e266 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
9000e20e:	687b      	ldr	r3, [r7, #4]
9000e210:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000e212:	2b00      	cmp	r3, #0
9000e214:	d007      	beq.n	9000e226 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
9000e216:	687b      	ldr	r3, [r7, #4]
9000e218:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000e21a:	4618      	mov	r0, r3
9000e21c:	f7fe f8ca 	bl	9000c3b4 <pbuf_free>
      pcb->refused_data = NULL;
9000e220:	687b      	ldr	r3, [r7, #4]
9000e222:	2200      	movs	r2, #0
9000e224:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
9000e226:	687b      	ldr	r3, [r7, #4]
9000e228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000e22a:	2b00      	cmp	r3, #0
9000e22c:	d002      	beq.n	9000e234 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
9000e22e:	6878      	ldr	r0, [r7, #4]
9000e230:	f000 f986 	bl	9000e540 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
9000e234:	687b      	ldr	r3, [r7, #4]
9000e236:	f64f 72ff 	movw	r2, #65535	; 0xffff
9000e23a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
9000e23c:	687b      	ldr	r3, [r7, #4]
9000e23e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000e240:	4618      	mov	r0, r3
9000e242:	f7ff fcdb 	bl	9000dbfc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
9000e246:	687b      	ldr	r3, [r7, #4]
9000e248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000e24a:	4618      	mov	r0, r3
9000e24c:	f7ff fcd6 	bl	9000dbfc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
9000e250:	687b      	ldr	r3, [r7, #4]
9000e252:	2200      	movs	r2, #0
9000e254:	66da      	str	r2, [r3, #108]	; 0x6c
9000e256:	687b      	ldr	r3, [r7, #4]
9000e258:	6eda      	ldr	r2, [r3, #108]	; 0x6c
9000e25a:	687b      	ldr	r3, [r7, #4]
9000e25c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
9000e25e:	687b      	ldr	r3, [r7, #4]
9000e260:	2200      	movs	r2, #0
9000e262:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
9000e266:	3708      	adds	r7, #8
9000e268:	46bd      	mov	sp, r7
9000e26a:	bd80      	pop	{r7, pc}
9000e26c:	90018828 	.word	0x90018828
9000e270:	90018e74 	.word	0x90018e74
9000e274:	9001886c 	.word	0x9001886c

9000e278 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
9000e278:	b580      	push	{r7, lr}
9000e27a:	b084      	sub	sp, #16
9000e27c:	af00      	add	r7, sp, #0
9000e27e:	6078      	str	r0, [r7, #4]
9000e280:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
9000e282:	683b      	ldr	r3, [r7, #0]
9000e284:	2b00      	cmp	r3, #0
9000e286:	d106      	bne.n	9000e296 <tcp_pcb_remove+0x1e>
9000e288:	4b3e      	ldr	r3, [pc, #248]	; (9000e384 <tcp_pcb_remove+0x10c>)
9000e28a:	f640 0283 	movw	r2, #2179	; 0x883
9000e28e:	493e      	ldr	r1, [pc, #248]	; (9000e388 <tcp_pcb_remove+0x110>)
9000e290:	483e      	ldr	r0, [pc, #248]	; (9000e38c <tcp_pcb_remove+0x114>)
9000e292:	f007 fcaf 	bl	90015bf4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
9000e296:	687b      	ldr	r3, [r7, #4]
9000e298:	2b00      	cmp	r3, #0
9000e29a:	d106      	bne.n	9000e2aa <tcp_pcb_remove+0x32>
9000e29c:	4b39      	ldr	r3, [pc, #228]	; (9000e384 <tcp_pcb_remove+0x10c>)
9000e29e:	f640 0284 	movw	r2, #2180	; 0x884
9000e2a2:	493b      	ldr	r1, [pc, #236]	; (9000e390 <tcp_pcb_remove+0x118>)
9000e2a4:	4839      	ldr	r0, [pc, #228]	; (9000e38c <tcp_pcb_remove+0x114>)
9000e2a6:	f007 fca5 	bl	90015bf4 <iprintf>

  TCP_RMV(pcblist, pcb);
9000e2aa:	687b      	ldr	r3, [r7, #4]
9000e2ac:	681b      	ldr	r3, [r3, #0]
9000e2ae:	683a      	ldr	r2, [r7, #0]
9000e2b0:	429a      	cmp	r2, r3
9000e2b2:	d105      	bne.n	9000e2c0 <tcp_pcb_remove+0x48>
9000e2b4:	687b      	ldr	r3, [r7, #4]
9000e2b6:	681b      	ldr	r3, [r3, #0]
9000e2b8:	68da      	ldr	r2, [r3, #12]
9000e2ba:	687b      	ldr	r3, [r7, #4]
9000e2bc:	601a      	str	r2, [r3, #0]
9000e2be:	e013      	b.n	9000e2e8 <tcp_pcb_remove+0x70>
9000e2c0:	687b      	ldr	r3, [r7, #4]
9000e2c2:	681b      	ldr	r3, [r3, #0]
9000e2c4:	60fb      	str	r3, [r7, #12]
9000e2c6:	e00c      	b.n	9000e2e2 <tcp_pcb_remove+0x6a>
9000e2c8:	68fb      	ldr	r3, [r7, #12]
9000e2ca:	68db      	ldr	r3, [r3, #12]
9000e2cc:	683a      	ldr	r2, [r7, #0]
9000e2ce:	429a      	cmp	r2, r3
9000e2d0:	d104      	bne.n	9000e2dc <tcp_pcb_remove+0x64>
9000e2d2:	683b      	ldr	r3, [r7, #0]
9000e2d4:	68da      	ldr	r2, [r3, #12]
9000e2d6:	68fb      	ldr	r3, [r7, #12]
9000e2d8:	60da      	str	r2, [r3, #12]
9000e2da:	e005      	b.n	9000e2e8 <tcp_pcb_remove+0x70>
9000e2dc:	68fb      	ldr	r3, [r7, #12]
9000e2de:	68db      	ldr	r3, [r3, #12]
9000e2e0:	60fb      	str	r3, [r7, #12]
9000e2e2:	68fb      	ldr	r3, [r7, #12]
9000e2e4:	2b00      	cmp	r3, #0
9000e2e6:	d1ef      	bne.n	9000e2c8 <tcp_pcb_remove+0x50>
9000e2e8:	683b      	ldr	r3, [r7, #0]
9000e2ea:	2200      	movs	r2, #0
9000e2ec:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
9000e2ee:	6838      	ldr	r0, [r7, #0]
9000e2f0:	f7ff ff72 	bl	9000e1d8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
9000e2f4:	683b      	ldr	r3, [r7, #0]
9000e2f6:	7d1b      	ldrb	r3, [r3, #20]
9000e2f8:	2b0a      	cmp	r3, #10
9000e2fa:	d013      	beq.n	9000e324 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
9000e2fc:	683b      	ldr	r3, [r7, #0]
9000e2fe:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
9000e300:	2b01      	cmp	r3, #1
9000e302:	d00f      	beq.n	9000e324 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
9000e304:	683b      	ldr	r3, [r7, #0]
9000e306:	8b5b      	ldrh	r3, [r3, #26]
9000e308:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
9000e30c:	2b00      	cmp	r3, #0
9000e30e:	d009      	beq.n	9000e324 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
9000e310:	683b      	ldr	r3, [r7, #0]
9000e312:	8b5b      	ldrh	r3, [r3, #26]
9000e314:	f043 0302 	orr.w	r3, r3, #2
9000e318:	b29a      	uxth	r2, r3
9000e31a:	683b      	ldr	r3, [r7, #0]
9000e31c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
9000e31e:	6838      	ldr	r0, [r7, #0]
9000e320:	f003 fbc6 	bl	90011ab0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
9000e324:	683b      	ldr	r3, [r7, #0]
9000e326:	7d1b      	ldrb	r3, [r3, #20]
9000e328:	2b01      	cmp	r3, #1
9000e32a:	d020      	beq.n	9000e36e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
9000e32c:	683b      	ldr	r3, [r7, #0]
9000e32e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000e330:	2b00      	cmp	r3, #0
9000e332:	d006      	beq.n	9000e342 <tcp_pcb_remove+0xca>
9000e334:	4b13      	ldr	r3, [pc, #76]	; (9000e384 <tcp_pcb_remove+0x10c>)
9000e336:	f640 0293 	movw	r2, #2195	; 0x893
9000e33a:	4916      	ldr	r1, [pc, #88]	; (9000e394 <tcp_pcb_remove+0x11c>)
9000e33c:	4813      	ldr	r0, [pc, #76]	; (9000e38c <tcp_pcb_remove+0x114>)
9000e33e:	f007 fc59 	bl	90015bf4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
9000e342:	683b      	ldr	r3, [r7, #0]
9000e344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000e346:	2b00      	cmp	r3, #0
9000e348:	d006      	beq.n	9000e358 <tcp_pcb_remove+0xe0>
9000e34a:	4b0e      	ldr	r3, [pc, #56]	; (9000e384 <tcp_pcb_remove+0x10c>)
9000e34c:	f640 0294 	movw	r2, #2196	; 0x894
9000e350:	4911      	ldr	r1, [pc, #68]	; (9000e398 <tcp_pcb_remove+0x120>)
9000e352:	480e      	ldr	r0, [pc, #56]	; (9000e38c <tcp_pcb_remove+0x114>)
9000e354:	f007 fc4e 	bl	90015bf4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
9000e358:	683b      	ldr	r3, [r7, #0]
9000e35a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000e35c:	2b00      	cmp	r3, #0
9000e35e:	d006      	beq.n	9000e36e <tcp_pcb_remove+0xf6>
9000e360:	4b08      	ldr	r3, [pc, #32]	; (9000e384 <tcp_pcb_remove+0x10c>)
9000e362:	f640 0296 	movw	r2, #2198	; 0x896
9000e366:	490d      	ldr	r1, [pc, #52]	; (9000e39c <tcp_pcb_remove+0x124>)
9000e368:	4808      	ldr	r0, [pc, #32]	; (9000e38c <tcp_pcb_remove+0x114>)
9000e36a:	f007 fc43 	bl	90015bf4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
9000e36e:	683b      	ldr	r3, [r7, #0]
9000e370:	2200      	movs	r2, #0
9000e372:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
9000e374:	683b      	ldr	r3, [r7, #0]
9000e376:	2200      	movs	r2, #0
9000e378:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
9000e37a:	bf00      	nop
9000e37c:	3710      	adds	r7, #16
9000e37e:	46bd      	mov	sp, r7
9000e380:	bd80      	pop	{r7, pc}
9000e382:	bf00      	nop
9000e384:	90018828 	.word	0x90018828
9000e388:	90018e90 	.word	0x90018e90
9000e38c:	9001886c 	.word	0x9001886c
9000e390:	90018eac 	.word	0x90018eac
9000e394:	90018ecc 	.word	0x90018ecc
9000e398:	90018ee4 	.word	0x90018ee4
9000e39c:	90018f00 	.word	0x90018f00

9000e3a0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
9000e3a0:	b580      	push	{r7, lr}
9000e3a2:	b082      	sub	sp, #8
9000e3a4:	af00      	add	r7, sp, #0
9000e3a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
9000e3a8:	687b      	ldr	r3, [r7, #4]
9000e3aa:	2b00      	cmp	r3, #0
9000e3ac:	d106      	bne.n	9000e3bc <tcp_next_iss+0x1c>
9000e3ae:	4b0a      	ldr	r3, [pc, #40]	; (9000e3d8 <tcp_next_iss+0x38>)
9000e3b0:	f640 02af 	movw	r2, #2223	; 0x8af
9000e3b4:	4909      	ldr	r1, [pc, #36]	; (9000e3dc <tcp_next_iss+0x3c>)
9000e3b6:	480a      	ldr	r0, [pc, #40]	; (9000e3e0 <tcp_next_iss+0x40>)
9000e3b8:	f007 fc1c 	bl	90015bf4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
9000e3bc:	4b09      	ldr	r3, [pc, #36]	; (9000e3e4 <tcp_next_iss+0x44>)
9000e3be:	681a      	ldr	r2, [r3, #0]
9000e3c0:	4b09      	ldr	r3, [pc, #36]	; (9000e3e8 <tcp_next_iss+0x48>)
9000e3c2:	681b      	ldr	r3, [r3, #0]
9000e3c4:	4413      	add	r3, r2
9000e3c6:	4a07      	ldr	r2, [pc, #28]	; (9000e3e4 <tcp_next_iss+0x44>)
9000e3c8:	6013      	str	r3, [r2, #0]
  return iss;
9000e3ca:	4b06      	ldr	r3, [pc, #24]	; (9000e3e4 <tcp_next_iss+0x44>)
9000e3cc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
9000e3ce:	4618      	mov	r0, r3
9000e3d0:	3708      	adds	r7, #8
9000e3d2:	46bd      	mov	sp, r7
9000e3d4:	bd80      	pop	{r7, pc}
9000e3d6:	bf00      	nop
9000e3d8:	90018828 	.word	0x90018828
9000e3dc:	90018f18 	.word	0x90018f18
9000e3e0:	9001886c 	.word	0x9001886c
9000e3e4:	24000528 	.word	0x24000528
9000e3e8:	2401f3a4 	.word	0x2401f3a4

9000e3ec <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
9000e3ec:	b580      	push	{r7, lr}
9000e3ee:	b086      	sub	sp, #24
9000e3f0:	af00      	add	r7, sp, #0
9000e3f2:	4603      	mov	r3, r0
9000e3f4:	60b9      	str	r1, [r7, #8]
9000e3f6:	607a      	str	r2, [r7, #4]
9000e3f8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
9000e3fa:	687b      	ldr	r3, [r7, #4]
9000e3fc:	2b00      	cmp	r3, #0
9000e3fe:	d106      	bne.n	9000e40e <tcp_eff_send_mss_netif+0x22>
9000e400:	4b14      	ldr	r3, [pc, #80]	; (9000e454 <tcp_eff_send_mss_netif+0x68>)
9000e402:	f640 02c5 	movw	r2, #2245	; 0x8c5
9000e406:	4914      	ldr	r1, [pc, #80]	; (9000e458 <tcp_eff_send_mss_netif+0x6c>)
9000e408:	4814      	ldr	r0, [pc, #80]	; (9000e45c <tcp_eff_send_mss_netif+0x70>)
9000e40a:	f007 fbf3 	bl	90015bf4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
9000e40e:	68bb      	ldr	r3, [r7, #8]
9000e410:	2b00      	cmp	r3, #0
9000e412:	d101      	bne.n	9000e418 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
9000e414:	89fb      	ldrh	r3, [r7, #14]
9000e416:	e019      	b.n	9000e44c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
9000e418:	68bb      	ldr	r3, [r7, #8]
9000e41a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
9000e41c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
9000e41e:	8afb      	ldrh	r3, [r7, #22]
9000e420:	2b00      	cmp	r3, #0
9000e422:	d012      	beq.n	9000e44a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
9000e424:	2328      	movs	r3, #40	; 0x28
9000e426:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
9000e428:	8afa      	ldrh	r2, [r7, #22]
9000e42a:	8abb      	ldrh	r3, [r7, #20]
9000e42c:	429a      	cmp	r2, r3
9000e42e:	d904      	bls.n	9000e43a <tcp_eff_send_mss_netif+0x4e>
9000e430:	8afa      	ldrh	r2, [r7, #22]
9000e432:	8abb      	ldrh	r3, [r7, #20]
9000e434:	1ad3      	subs	r3, r2, r3
9000e436:	b29b      	uxth	r3, r3
9000e438:	e000      	b.n	9000e43c <tcp_eff_send_mss_netif+0x50>
9000e43a:	2300      	movs	r3, #0
9000e43c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
9000e43e:	8a7a      	ldrh	r2, [r7, #18]
9000e440:	89fb      	ldrh	r3, [r7, #14]
9000e442:	4293      	cmp	r3, r2
9000e444:	bf28      	it	cs
9000e446:	4613      	movcs	r3, r2
9000e448:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
9000e44a:	89fb      	ldrh	r3, [r7, #14]
}
9000e44c:	4618      	mov	r0, r3
9000e44e:	3718      	adds	r7, #24
9000e450:	46bd      	mov	sp, r7
9000e452:	bd80      	pop	{r7, pc}
9000e454:	90018828 	.word	0x90018828
9000e458:	90018f34 	.word	0x90018f34
9000e45c:	9001886c 	.word	0x9001886c

9000e460 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
9000e460:	b580      	push	{r7, lr}
9000e462:	b084      	sub	sp, #16
9000e464:	af00      	add	r7, sp, #0
9000e466:	6078      	str	r0, [r7, #4]
9000e468:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
9000e46a:	683b      	ldr	r3, [r7, #0]
9000e46c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
9000e46e:	687b      	ldr	r3, [r7, #4]
9000e470:	2b00      	cmp	r3, #0
9000e472:	d119      	bne.n	9000e4a8 <tcp_netif_ip_addr_changed_pcblist+0x48>
9000e474:	4b10      	ldr	r3, [pc, #64]	; (9000e4b8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
9000e476:	f44f 6210 	mov.w	r2, #2304	; 0x900
9000e47a:	4910      	ldr	r1, [pc, #64]	; (9000e4bc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
9000e47c:	4810      	ldr	r0, [pc, #64]	; (9000e4c0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
9000e47e:	f007 fbb9 	bl	90015bf4 <iprintf>

  while (pcb != NULL) {
9000e482:	e011      	b.n	9000e4a8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
9000e484:	68fb      	ldr	r3, [r7, #12]
9000e486:	681a      	ldr	r2, [r3, #0]
9000e488:	687b      	ldr	r3, [r7, #4]
9000e48a:	681b      	ldr	r3, [r3, #0]
9000e48c:	429a      	cmp	r2, r3
9000e48e:	d108      	bne.n	9000e4a2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
9000e490:	68fb      	ldr	r3, [r7, #12]
9000e492:	68db      	ldr	r3, [r3, #12]
9000e494:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
9000e496:	68f8      	ldr	r0, [r7, #12]
9000e498:	f7fe fd20 	bl	9000cedc <tcp_abort>
      pcb = next;
9000e49c:	68bb      	ldr	r3, [r7, #8]
9000e49e:	60fb      	str	r3, [r7, #12]
9000e4a0:	e002      	b.n	9000e4a8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
9000e4a2:	68fb      	ldr	r3, [r7, #12]
9000e4a4:	68db      	ldr	r3, [r3, #12]
9000e4a6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
9000e4a8:	68fb      	ldr	r3, [r7, #12]
9000e4aa:	2b00      	cmp	r3, #0
9000e4ac:	d1ea      	bne.n	9000e484 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
9000e4ae:	bf00      	nop
9000e4b0:	bf00      	nop
9000e4b2:	3710      	adds	r7, #16
9000e4b4:	46bd      	mov	sp, r7
9000e4b6:	bd80      	pop	{r7, pc}
9000e4b8:	90018828 	.word	0x90018828
9000e4bc:	90018f5c 	.word	0x90018f5c
9000e4c0:	9001886c 	.word	0x9001886c

9000e4c4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
9000e4c4:	b580      	push	{r7, lr}
9000e4c6:	b084      	sub	sp, #16
9000e4c8:	af00      	add	r7, sp, #0
9000e4ca:	6078      	str	r0, [r7, #4]
9000e4cc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
9000e4ce:	687b      	ldr	r3, [r7, #4]
9000e4d0:	2b00      	cmp	r3, #0
9000e4d2:	d02a      	beq.n	9000e52a <tcp_netif_ip_addr_changed+0x66>
9000e4d4:	687b      	ldr	r3, [r7, #4]
9000e4d6:	681b      	ldr	r3, [r3, #0]
9000e4d8:	2b00      	cmp	r3, #0
9000e4da:	d026      	beq.n	9000e52a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
9000e4dc:	4b15      	ldr	r3, [pc, #84]	; (9000e534 <tcp_netif_ip_addr_changed+0x70>)
9000e4de:	681b      	ldr	r3, [r3, #0]
9000e4e0:	4619      	mov	r1, r3
9000e4e2:	6878      	ldr	r0, [r7, #4]
9000e4e4:	f7ff ffbc 	bl	9000e460 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
9000e4e8:	4b13      	ldr	r3, [pc, #76]	; (9000e538 <tcp_netif_ip_addr_changed+0x74>)
9000e4ea:	681b      	ldr	r3, [r3, #0]
9000e4ec:	4619      	mov	r1, r3
9000e4ee:	6878      	ldr	r0, [r7, #4]
9000e4f0:	f7ff ffb6 	bl	9000e460 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
9000e4f4:	683b      	ldr	r3, [r7, #0]
9000e4f6:	2b00      	cmp	r3, #0
9000e4f8:	d017      	beq.n	9000e52a <tcp_netif_ip_addr_changed+0x66>
9000e4fa:	683b      	ldr	r3, [r7, #0]
9000e4fc:	681b      	ldr	r3, [r3, #0]
9000e4fe:	2b00      	cmp	r3, #0
9000e500:	d013      	beq.n	9000e52a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
9000e502:	4b0e      	ldr	r3, [pc, #56]	; (9000e53c <tcp_netif_ip_addr_changed+0x78>)
9000e504:	681b      	ldr	r3, [r3, #0]
9000e506:	60fb      	str	r3, [r7, #12]
9000e508:	e00c      	b.n	9000e524 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
9000e50a:	68fb      	ldr	r3, [r7, #12]
9000e50c:	681a      	ldr	r2, [r3, #0]
9000e50e:	687b      	ldr	r3, [r7, #4]
9000e510:	681b      	ldr	r3, [r3, #0]
9000e512:	429a      	cmp	r2, r3
9000e514:	d103      	bne.n	9000e51e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
9000e516:	683b      	ldr	r3, [r7, #0]
9000e518:	681a      	ldr	r2, [r3, #0]
9000e51a:	68fb      	ldr	r3, [r7, #12]
9000e51c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
9000e51e:	68fb      	ldr	r3, [r7, #12]
9000e520:	68db      	ldr	r3, [r3, #12]
9000e522:	60fb      	str	r3, [r7, #12]
9000e524:	68fb      	ldr	r3, [r7, #12]
9000e526:	2b00      	cmp	r3, #0
9000e528:	d1ef      	bne.n	9000e50a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
9000e52a:	bf00      	nop
9000e52c:	3710      	adds	r7, #16
9000e52e:	46bd      	mov	sp, r7
9000e530:	bd80      	pop	{r7, pc}
9000e532:	bf00      	nop
9000e534:	2401f3b0 	.word	0x2401f3b0
9000e538:	2401f3a8 	.word	0x2401f3a8
9000e53c:	2401f3ac 	.word	0x2401f3ac

9000e540 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
9000e540:	b580      	push	{r7, lr}
9000e542:	b082      	sub	sp, #8
9000e544:	af00      	add	r7, sp, #0
9000e546:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
9000e548:	687b      	ldr	r3, [r7, #4]
9000e54a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000e54c:	2b00      	cmp	r3, #0
9000e54e:	d007      	beq.n	9000e560 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
9000e550:	687b      	ldr	r3, [r7, #4]
9000e552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9000e554:	4618      	mov	r0, r3
9000e556:	f7ff fb51 	bl	9000dbfc <tcp_segs_free>
    pcb->ooseq = NULL;
9000e55a:	687b      	ldr	r3, [r7, #4]
9000e55c:	2200      	movs	r2, #0
9000e55e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
9000e560:	bf00      	nop
9000e562:	3708      	adds	r7, #8
9000e564:	46bd      	mov	sp, r7
9000e566:	bd80      	pop	{r7, pc}

9000e568 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
9000e568:	b590      	push	{r4, r7, lr}
9000e56a:	b08d      	sub	sp, #52	; 0x34
9000e56c:	af04      	add	r7, sp, #16
9000e56e:	6078      	str	r0, [r7, #4]
9000e570:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
9000e572:	687b      	ldr	r3, [r7, #4]
9000e574:	2b00      	cmp	r3, #0
9000e576:	d105      	bne.n	9000e584 <tcp_input+0x1c>
9000e578:	4b9b      	ldr	r3, [pc, #620]	; (9000e7e8 <tcp_input+0x280>)
9000e57a:	2283      	movs	r2, #131	; 0x83
9000e57c:	499b      	ldr	r1, [pc, #620]	; (9000e7ec <tcp_input+0x284>)
9000e57e:	489c      	ldr	r0, [pc, #624]	; (9000e7f0 <tcp_input+0x288>)
9000e580:	f007 fb38 	bl	90015bf4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
9000e584:	687b      	ldr	r3, [r7, #4]
9000e586:	685b      	ldr	r3, [r3, #4]
9000e588:	4a9a      	ldr	r2, [pc, #616]	; (9000e7f4 <tcp_input+0x28c>)
9000e58a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
9000e58c:	687b      	ldr	r3, [r7, #4]
9000e58e:	895b      	ldrh	r3, [r3, #10]
9000e590:	2b13      	cmp	r3, #19
9000e592:	f240 83d1 	bls.w	9000ed38 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
9000e596:	4b98      	ldr	r3, [pc, #608]	; (9000e7f8 <tcp_input+0x290>)
9000e598:	695b      	ldr	r3, [r3, #20]
9000e59a:	4a97      	ldr	r2, [pc, #604]	; (9000e7f8 <tcp_input+0x290>)
9000e59c:	6812      	ldr	r2, [r2, #0]
9000e59e:	4611      	mov	r1, r2
9000e5a0:	4618      	mov	r0, r3
9000e5a2:	f006 f8c5 	bl	90014730 <ip4_addr_isbroadcast_u32>
9000e5a6:	4603      	mov	r3, r0
9000e5a8:	2b00      	cmp	r3, #0
9000e5aa:	f040 83c7 	bne.w	9000ed3c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
9000e5ae:	4b92      	ldr	r3, [pc, #584]	; (9000e7f8 <tcp_input+0x290>)
9000e5b0:	695b      	ldr	r3, [r3, #20]
9000e5b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
9000e5b6:	2be0      	cmp	r3, #224	; 0xe0
9000e5b8:	f000 83c0 	beq.w	9000ed3c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
9000e5bc:	4b8d      	ldr	r3, [pc, #564]	; (9000e7f4 <tcp_input+0x28c>)
9000e5be:	681b      	ldr	r3, [r3, #0]
9000e5c0:	899b      	ldrh	r3, [r3, #12]
9000e5c2:	b29b      	uxth	r3, r3
9000e5c4:	4618      	mov	r0, r3
9000e5c6:	f7fc f9e1 	bl	9000a98c <lwip_htons>
9000e5ca:	4603      	mov	r3, r0
9000e5cc:	0b1b      	lsrs	r3, r3, #12
9000e5ce:	b29b      	uxth	r3, r3
9000e5d0:	b2db      	uxtb	r3, r3
9000e5d2:	009b      	lsls	r3, r3, #2
9000e5d4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
9000e5d6:	7cbb      	ldrb	r3, [r7, #18]
9000e5d8:	2b13      	cmp	r3, #19
9000e5da:	f240 83b1 	bls.w	9000ed40 <tcp_input+0x7d8>
9000e5de:	7cbb      	ldrb	r3, [r7, #18]
9000e5e0:	b29a      	uxth	r2, r3
9000e5e2:	687b      	ldr	r3, [r7, #4]
9000e5e4:	891b      	ldrh	r3, [r3, #8]
9000e5e6:	429a      	cmp	r2, r3
9000e5e8:	f200 83aa 	bhi.w	9000ed40 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
9000e5ec:	7cbb      	ldrb	r3, [r7, #18]
9000e5ee:	b29b      	uxth	r3, r3
9000e5f0:	3b14      	subs	r3, #20
9000e5f2:	b29a      	uxth	r2, r3
9000e5f4:	4b81      	ldr	r3, [pc, #516]	; (9000e7fc <tcp_input+0x294>)
9000e5f6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
9000e5f8:	4b81      	ldr	r3, [pc, #516]	; (9000e800 <tcp_input+0x298>)
9000e5fa:	2200      	movs	r2, #0
9000e5fc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
9000e5fe:	687b      	ldr	r3, [r7, #4]
9000e600:	895a      	ldrh	r2, [r3, #10]
9000e602:	7cbb      	ldrb	r3, [r7, #18]
9000e604:	b29b      	uxth	r3, r3
9000e606:	429a      	cmp	r2, r3
9000e608:	d309      	bcc.n	9000e61e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
9000e60a:	4b7c      	ldr	r3, [pc, #496]	; (9000e7fc <tcp_input+0x294>)
9000e60c:	881a      	ldrh	r2, [r3, #0]
9000e60e:	4b7d      	ldr	r3, [pc, #500]	; (9000e804 <tcp_input+0x29c>)
9000e610:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
9000e612:	7cbb      	ldrb	r3, [r7, #18]
9000e614:	4619      	mov	r1, r3
9000e616:	6878      	ldr	r0, [r7, #4]
9000e618:	f7fd fe46 	bl	9000c2a8 <pbuf_remove_header>
9000e61c:	e04e      	b.n	9000e6bc <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
9000e61e:	687b      	ldr	r3, [r7, #4]
9000e620:	681b      	ldr	r3, [r3, #0]
9000e622:	2b00      	cmp	r3, #0
9000e624:	d105      	bne.n	9000e632 <tcp_input+0xca>
9000e626:	4b70      	ldr	r3, [pc, #448]	; (9000e7e8 <tcp_input+0x280>)
9000e628:	22c2      	movs	r2, #194	; 0xc2
9000e62a:	4977      	ldr	r1, [pc, #476]	; (9000e808 <tcp_input+0x2a0>)
9000e62c:	4870      	ldr	r0, [pc, #448]	; (9000e7f0 <tcp_input+0x288>)
9000e62e:	f007 fae1 	bl	90015bf4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
9000e632:	2114      	movs	r1, #20
9000e634:	6878      	ldr	r0, [r7, #4]
9000e636:	f7fd fe37 	bl	9000c2a8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
9000e63a:	687b      	ldr	r3, [r7, #4]
9000e63c:	895a      	ldrh	r2, [r3, #10]
9000e63e:	4b71      	ldr	r3, [pc, #452]	; (9000e804 <tcp_input+0x29c>)
9000e640:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
9000e642:	4b6e      	ldr	r3, [pc, #440]	; (9000e7fc <tcp_input+0x294>)
9000e644:	881a      	ldrh	r2, [r3, #0]
9000e646:	4b6f      	ldr	r3, [pc, #444]	; (9000e804 <tcp_input+0x29c>)
9000e648:	881b      	ldrh	r3, [r3, #0]
9000e64a:	1ad3      	subs	r3, r2, r3
9000e64c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
9000e64e:	4b6d      	ldr	r3, [pc, #436]	; (9000e804 <tcp_input+0x29c>)
9000e650:	881b      	ldrh	r3, [r3, #0]
9000e652:	4619      	mov	r1, r3
9000e654:	6878      	ldr	r0, [r7, #4]
9000e656:	f7fd fe27 	bl	9000c2a8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
9000e65a:	687b      	ldr	r3, [r7, #4]
9000e65c:	681b      	ldr	r3, [r3, #0]
9000e65e:	895b      	ldrh	r3, [r3, #10]
9000e660:	8a3a      	ldrh	r2, [r7, #16]
9000e662:	429a      	cmp	r2, r3
9000e664:	f200 836e 	bhi.w	9000ed44 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
9000e668:	687b      	ldr	r3, [r7, #4]
9000e66a:	681b      	ldr	r3, [r3, #0]
9000e66c:	685b      	ldr	r3, [r3, #4]
9000e66e:	4a64      	ldr	r2, [pc, #400]	; (9000e800 <tcp_input+0x298>)
9000e670:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
9000e672:	687b      	ldr	r3, [r7, #4]
9000e674:	681b      	ldr	r3, [r3, #0]
9000e676:	8a3a      	ldrh	r2, [r7, #16]
9000e678:	4611      	mov	r1, r2
9000e67a:	4618      	mov	r0, r3
9000e67c:	f7fd fe14 	bl	9000c2a8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
9000e680:	687b      	ldr	r3, [r7, #4]
9000e682:	891a      	ldrh	r2, [r3, #8]
9000e684:	8a3b      	ldrh	r3, [r7, #16]
9000e686:	1ad3      	subs	r3, r2, r3
9000e688:	b29a      	uxth	r2, r3
9000e68a:	687b      	ldr	r3, [r7, #4]
9000e68c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
9000e68e:	687b      	ldr	r3, [r7, #4]
9000e690:	895b      	ldrh	r3, [r3, #10]
9000e692:	2b00      	cmp	r3, #0
9000e694:	d005      	beq.n	9000e6a2 <tcp_input+0x13a>
9000e696:	4b54      	ldr	r3, [pc, #336]	; (9000e7e8 <tcp_input+0x280>)
9000e698:	22df      	movs	r2, #223	; 0xdf
9000e69a:	495c      	ldr	r1, [pc, #368]	; (9000e80c <tcp_input+0x2a4>)
9000e69c:	4854      	ldr	r0, [pc, #336]	; (9000e7f0 <tcp_input+0x288>)
9000e69e:	f007 faa9 	bl	90015bf4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
9000e6a2:	687b      	ldr	r3, [r7, #4]
9000e6a4:	891a      	ldrh	r2, [r3, #8]
9000e6a6:	687b      	ldr	r3, [r7, #4]
9000e6a8:	681b      	ldr	r3, [r3, #0]
9000e6aa:	891b      	ldrh	r3, [r3, #8]
9000e6ac:	429a      	cmp	r2, r3
9000e6ae:	d005      	beq.n	9000e6bc <tcp_input+0x154>
9000e6b0:	4b4d      	ldr	r3, [pc, #308]	; (9000e7e8 <tcp_input+0x280>)
9000e6b2:	22e0      	movs	r2, #224	; 0xe0
9000e6b4:	4956      	ldr	r1, [pc, #344]	; (9000e810 <tcp_input+0x2a8>)
9000e6b6:	484e      	ldr	r0, [pc, #312]	; (9000e7f0 <tcp_input+0x288>)
9000e6b8:	f007 fa9c 	bl	90015bf4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
9000e6bc:	4b4d      	ldr	r3, [pc, #308]	; (9000e7f4 <tcp_input+0x28c>)
9000e6be:	681b      	ldr	r3, [r3, #0]
9000e6c0:	881b      	ldrh	r3, [r3, #0]
9000e6c2:	b29b      	uxth	r3, r3
9000e6c4:	4a4b      	ldr	r2, [pc, #300]	; (9000e7f4 <tcp_input+0x28c>)
9000e6c6:	6814      	ldr	r4, [r2, #0]
9000e6c8:	4618      	mov	r0, r3
9000e6ca:	f7fc f95f 	bl	9000a98c <lwip_htons>
9000e6ce:	4603      	mov	r3, r0
9000e6d0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
9000e6d2:	4b48      	ldr	r3, [pc, #288]	; (9000e7f4 <tcp_input+0x28c>)
9000e6d4:	681b      	ldr	r3, [r3, #0]
9000e6d6:	885b      	ldrh	r3, [r3, #2]
9000e6d8:	b29b      	uxth	r3, r3
9000e6da:	4a46      	ldr	r2, [pc, #280]	; (9000e7f4 <tcp_input+0x28c>)
9000e6dc:	6814      	ldr	r4, [r2, #0]
9000e6de:	4618      	mov	r0, r3
9000e6e0:	f7fc f954 	bl	9000a98c <lwip_htons>
9000e6e4:	4603      	mov	r3, r0
9000e6e6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
9000e6e8:	4b42      	ldr	r3, [pc, #264]	; (9000e7f4 <tcp_input+0x28c>)
9000e6ea:	681b      	ldr	r3, [r3, #0]
9000e6ec:	685b      	ldr	r3, [r3, #4]
9000e6ee:	4a41      	ldr	r2, [pc, #260]	; (9000e7f4 <tcp_input+0x28c>)
9000e6f0:	6814      	ldr	r4, [r2, #0]
9000e6f2:	4618      	mov	r0, r3
9000e6f4:	f7fc f95f 	bl	9000a9b6 <lwip_htonl>
9000e6f8:	4603      	mov	r3, r0
9000e6fa:	6063      	str	r3, [r4, #4]
9000e6fc:	6863      	ldr	r3, [r4, #4]
9000e6fe:	4a45      	ldr	r2, [pc, #276]	; (9000e814 <tcp_input+0x2ac>)
9000e700:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
9000e702:	4b3c      	ldr	r3, [pc, #240]	; (9000e7f4 <tcp_input+0x28c>)
9000e704:	681b      	ldr	r3, [r3, #0]
9000e706:	689b      	ldr	r3, [r3, #8]
9000e708:	4a3a      	ldr	r2, [pc, #232]	; (9000e7f4 <tcp_input+0x28c>)
9000e70a:	6814      	ldr	r4, [r2, #0]
9000e70c:	4618      	mov	r0, r3
9000e70e:	f7fc f952 	bl	9000a9b6 <lwip_htonl>
9000e712:	4603      	mov	r3, r0
9000e714:	60a3      	str	r3, [r4, #8]
9000e716:	68a3      	ldr	r3, [r4, #8]
9000e718:	4a3f      	ldr	r2, [pc, #252]	; (9000e818 <tcp_input+0x2b0>)
9000e71a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
9000e71c:	4b35      	ldr	r3, [pc, #212]	; (9000e7f4 <tcp_input+0x28c>)
9000e71e:	681b      	ldr	r3, [r3, #0]
9000e720:	89db      	ldrh	r3, [r3, #14]
9000e722:	b29b      	uxth	r3, r3
9000e724:	4a33      	ldr	r2, [pc, #204]	; (9000e7f4 <tcp_input+0x28c>)
9000e726:	6814      	ldr	r4, [r2, #0]
9000e728:	4618      	mov	r0, r3
9000e72a:	f7fc f92f 	bl	9000a98c <lwip_htons>
9000e72e:	4603      	mov	r3, r0
9000e730:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
9000e732:	4b30      	ldr	r3, [pc, #192]	; (9000e7f4 <tcp_input+0x28c>)
9000e734:	681b      	ldr	r3, [r3, #0]
9000e736:	899b      	ldrh	r3, [r3, #12]
9000e738:	b29b      	uxth	r3, r3
9000e73a:	4618      	mov	r0, r3
9000e73c:	f7fc f926 	bl	9000a98c <lwip_htons>
9000e740:	4603      	mov	r3, r0
9000e742:	b2db      	uxtb	r3, r3
9000e744:	f003 033f 	and.w	r3, r3, #63	; 0x3f
9000e748:	b2da      	uxtb	r2, r3
9000e74a:	4b34      	ldr	r3, [pc, #208]	; (9000e81c <tcp_input+0x2b4>)
9000e74c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
9000e74e:	687b      	ldr	r3, [r7, #4]
9000e750:	891a      	ldrh	r2, [r3, #8]
9000e752:	4b33      	ldr	r3, [pc, #204]	; (9000e820 <tcp_input+0x2b8>)
9000e754:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
9000e756:	4b31      	ldr	r3, [pc, #196]	; (9000e81c <tcp_input+0x2b4>)
9000e758:	781b      	ldrb	r3, [r3, #0]
9000e75a:	f003 0303 	and.w	r3, r3, #3
9000e75e:	2b00      	cmp	r3, #0
9000e760:	d00c      	beq.n	9000e77c <tcp_input+0x214>
    tcplen++;
9000e762:	4b2f      	ldr	r3, [pc, #188]	; (9000e820 <tcp_input+0x2b8>)
9000e764:	881b      	ldrh	r3, [r3, #0]
9000e766:	3301      	adds	r3, #1
9000e768:	b29a      	uxth	r2, r3
9000e76a:	4b2d      	ldr	r3, [pc, #180]	; (9000e820 <tcp_input+0x2b8>)
9000e76c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
9000e76e:	687b      	ldr	r3, [r7, #4]
9000e770:	891a      	ldrh	r2, [r3, #8]
9000e772:	4b2b      	ldr	r3, [pc, #172]	; (9000e820 <tcp_input+0x2b8>)
9000e774:	881b      	ldrh	r3, [r3, #0]
9000e776:	429a      	cmp	r2, r3
9000e778:	f200 82e6 	bhi.w	9000ed48 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
9000e77c:	2300      	movs	r3, #0
9000e77e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
9000e780:	4b28      	ldr	r3, [pc, #160]	; (9000e824 <tcp_input+0x2bc>)
9000e782:	681b      	ldr	r3, [r3, #0]
9000e784:	61fb      	str	r3, [r7, #28]
9000e786:	e09d      	b.n	9000e8c4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
9000e788:	69fb      	ldr	r3, [r7, #28]
9000e78a:	7d1b      	ldrb	r3, [r3, #20]
9000e78c:	2b00      	cmp	r3, #0
9000e78e:	d105      	bne.n	9000e79c <tcp_input+0x234>
9000e790:	4b15      	ldr	r3, [pc, #84]	; (9000e7e8 <tcp_input+0x280>)
9000e792:	22fb      	movs	r2, #251	; 0xfb
9000e794:	4924      	ldr	r1, [pc, #144]	; (9000e828 <tcp_input+0x2c0>)
9000e796:	4816      	ldr	r0, [pc, #88]	; (9000e7f0 <tcp_input+0x288>)
9000e798:	f007 fa2c 	bl	90015bf4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
9000e79c:	69fb      	ldr	r3, [r7, #28]
9000e79e:	7d1b      	ldrb	r3, [r3, #20]
9000e7a0:	2b0a      	cmp	r3, #10
9000e7a2:	d105      	bne.n	9000e7b0 <tcp_input+0x248>
9000e7a4:	4b10      	ldr	r3, [pc, #64]	; (9000e7e8 <tcp_input+0x280>)
9000e7a6:	22fc      	movs	r2, #252	; 0xfc
9000e7a8:	4920      	ldr	r1, [pc, #128]	; (9000e82c <tcp_input+0x2c4>)
9000e7aa:	4811      	ldr	r0, [pc, #68]	; (9000e7f0 <tcp_input+0x288>)
9000e7ac:	f007 fa22 	bl	90015bf4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
9000e7b0:	69fb      	ldr	r3, [r7, #28]
9000e7b2:	7d1b      	ldrb	r3, [r3, #20]
9000e7b4:	2b01      	cmp	r3, #1
9000e7b6:	d105      	bne.n	9000e7c4 <tcp_input+0x25c>
9000e7b8:	4b0b      	ldr	r3, [pc, #44]	; (9000e7e8 <tcp_input+0x280>)
9000e7ba:	22fd      	movs	r2, #253	; 0xfd
9000e7bc:	491c      	ldr	r1, [pc, #112]	; (9000e830 <tcp_input+0x2c8>)
9000e7be:	480c      	ldr	r0, [pc, #48]	; (9000e7f0 <tcp_input+0x288>)
9000e7c0:	f007 fa18 	bl	90015bf4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
9000e7c4:	69fb      	ldr	r3, [r7, #28]
9000e7c6:	7a1b      	ldrb	r3, [r3, #8]
9000e7c8:	2b00      	cmp	r3, #0
9000e7ca:	d033      	beq.n	9000e834 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
9000e7cc:	69fb      	ldr	r3, [r7, #28]
9000e7ce:	7a1a      	ldrb	r2, [r3, #8]
9000e7d0:	4b09      	ldr	r3, [pc, #36]	; (9000e7f8 <tcp_input+0x290>)
9000e7d2:	685b      	ldr	r3, [r3, #4]
9000e7d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
9000e7d8:	3301      	adds	r3, #1
9000e7da:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
9000e7dc:	429a      	cmp	r2, r3
9000e7de:	d029      	beq.n	9000e834 <tcp_input+0x2cc>
      prev = pcb;
9000e7e0:	69fb      	ldr	r3, [r7, #28]
9000e7e2:	61bb      	str	r3, [r7, #24]
      continue;
9000e7e4:	e06b      	b.n	9000e8be <tcp_input+0x356>
9000e7e6:	bf00      	nop
9000e7e8:	90018f90 	.word	0x90018f90
9000e7ec:	90018fc4 	.word	0x90018fc4
9000e7f0:	90018fdc 	.word	0x90018fdc
9000e7f4:	2401f3cc 	.word	0x2401f3cc
9000e7f8:	2401c1c8 	.word	0x2401c1c8
9000e7fc:	2401f3d0 	.word	0x2401f3d0
9000e800:	2401f3d4 	.word	0x2401f3d4
9000e804:	2401f3d2 	.word	0x2401f3d2
9000e808:	90019004 	.word	0x90019004
9000e80c:	90019014 	.word	0x90019014
9000e810:	90019020 	.word	0x90019020
9000e814:	2401f3dc 	.word	0x2401f3dc
9000e818:	2401f3e0 	.word	0x2401f3e0
9000e81c:	2401f3e8 	.word	0x2401f3e8
9000e820:	2401f3e6 	.word	0x2401f3e6
9000e824:	2401f3b0 	.word	0x2401f3b0
9000e828:	90019040 	.word	0x90019040
9000e82c:	90019068 	.word	0x90019068
9000e830:	90019094 	.word	0x90019094
    }

    if (pcb->remote_port == tcphdr->src &&
9000e834:	69fb      	ldr	r3, [r7, #28]
9000e836:	8b1a      	ldrh	r2, [r3, #24]
9000e838:	4b72      	ldr	r3, [pc, #456]	; (9000ea04 <tcp_input+0x49c>)
9000e83a:	681b      	ldr	r3, [r3, #0]
9000e83c:	881b      	ldrh	r3, [r3, #0]
9000e83e:	b29b      	uxth	r3, r3
9000e840:	429a      	cmp	r2, r3
9000e842:	d13a      	bne.n	9000e8ba <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
9000e844:	69fb      	ldr	r3, [r7, #28]
9000e846:	8ada      	ldrh	r2, [r3, #22]
9000e848:	4b6e      	ldr	r3, [pc, #440]	; (9000ea04 <tcp_input+0x49c>)
9000e84a:	681b      	ldr	r3, [r3, #0]
9000e84c:	885b      	ldrh	r3, [r3, #2]
9000e84e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
9000e850:	429a      	cmp	r2, r3
9000e852:	d132      	bne.n	9000e8ba <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
9000e854:	69fb      	ldr	r3, [r7, #28]
9000e856:	685a      	ldr	r2, [r3, #4]
9000e858:	4b6b      	ldr	r3, [pc, #428]	; (9000ea08 <tcp_input+0x4a0>)
9000e85a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
9000e85c:	429a      	cmp	r2, r3
9000e85e:	d12c      	bne.n	9000e8ba <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
9000e860:	69fb      	ldr	r3, [r7, #28]
9000e862:	681a      	ldr	r2, [r3, #0]
9000e864:	4b68      	ldr	r3, [pc, #416]	; (9000ea08 <tcp_input+0x4a0>)
9000e866:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
9000e868:	429a      	cmp	r2, r3
9000e86a:	d126      	bne.n	9000e8ba <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
9000e86c:	69fb      	ldr	r3, [r7, #28]
9000e86e:	68db      	ldr	r3, [r3, #12]
9000e870:	69fa      	ldr	r2, [r7, #28]
9000e872:	429a      	cmp	r2, r3
9000e874:	d106      	bne.n	9000e884 <tcp_input+0x31c>
9000e876:	4b65      	ldr	r3, [pc, #404]	; (9000ea0c <tcp_input+0x4a4>)
9000e878:	f240 120d 	movw	r2, #269	; 0x10d
9000e87c:	4964      	ldr	r1, [pc, #400]	; (9000ea10 <tcp_input+0x4a8>)
9000e87e:	4865      	ldr	r0, [pc, #404]	; (9000ea14 <tcp_input+0x4ac>)
9000e880:	f007 f9b8 	bl	90015bf4 <iprintf>
      if (prev != NULL) {
9000e884:	69bb      	ldr	r3, [r7, #24]
9000e886:	2b00      	cmp	r3, #0
9000e888:	d00a      	beq.n	9000e8a0 <tcp_input+0x338>
        prev->next = pcb->next;
9000e88a:	69fb      	ldr	r3, [r7, #28]
9000e88c:	68da      	ldr	r2, [r3, #12]
9000e88e:	69bb      	ldr	r3, [r7, #24]
9000e890:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
9000e892:	4b61      	ldr	r3, [pc, #388]	; (9000ea18 <tcp_input+0x4b0>)
9000e894:	681a      	ldr	r2, [r3, #0]
9000e896:	69fb      	ldr	r3, [r7, #28]
9000e898:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
9000e89a:	4a5f      	ldr	r2, [pc, #380]	; (9000ea18 <tcp_input+0x4b0>)
9000e89c:	69fb      	ldr	r3, [r7, #28]
9000e89e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
9000e8a0:	69fb      	ldr	r3, [r7, #28]
9000e8a2:	68db      	ldr	r3, [r3, #12]
9000e8a4:	69fa      	ldr	r2, [r7, #28]
9000e8a6:	429a      	cmp	r2, r3
9000e8a8:	d111      	bne.n	9000e8ce <tcp_input+0x366>
9000e8aa:	4b58      	ldr	r3, [pc, #352]	; (9000ea0c <tcp_input+0x4a4>)
9000e8ac:	f240 1215 	movw	r2, #277	; 0x115
9000e8b0:	495a      	ldr	r1, [pc, #360]	; (9000ea1c <tcp_input+0x4b4>)
9000e8b2:	4858      	ldr	r0, [pc, #352]	; (9000ea14 <tcp_input+0x4ac>)
9000e8b4:	f007 f99e 	bl	90015bf4 <iprintf>
      break;
9000e8b8:	e009      	b.n	9000e8ce <tcp_input+0x366>
    }
    prev = pcb;
9000e8ba:	69fb      	ldr	r3, [r7, #28]
9000e8bc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
9000e8be:	69fb      	ldr	r3, [r7, #28]
9000e8c0:	68db      	ldr	r3, [r3, #12]
9000e8c2:	61fb      	str	r3, [r7, #28]
9000e8c4:	69fb      	ldr	r3, [r7, #28]
9000e8c6:	2b00      	cmp	r3, #0
9000e8c8:	f47f af5e 	bne.w	9000e788 <tcp_input+0x220>
9000e8cc:	e000      	b.n	9000e8d0 <tcp_input+0x368>
      break;
9000e8ce:	bf00      	nop
  }

  if (pcb == NULL) {
9000e8d0:	69fb      	ldr	r3, [r7, #28]
9000e8d2:	2b00      	cmp	r3, #0
9000e8d4:	f040 80aa 	bne.w	9000ea2c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
9000e8d8:	4b51      	ldr	r3, [pc, #324]	; (9000ea20 <tcp_input+0x4b8>)
9000e8da:	681b      	ldr	r3, [r3, #0]
9000e8dc:	61fb      	str	r3, [r7, #28]
9000e8de:	e03f      	b.n	9000e960 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
9000e8e0:	69fb      	ldr	r3, [r7, #28]
9000e8e2:	7d1b      	ldrb	r3, [r3, #20]
9000e8e4:	2b0a      	cmp	r3, #10
9000e8e6:	d006      	beq.n	9000e8f6 <tcp_input+0x38e>
9000e8e8:	4b48      	ldr	r3, [pc, #288]	; (9000ea0c <tcp_input+0x4a4>)
9000e8ea:	f240 121f 	movw	r2, #287	; 0x11f
9000e8ee:	494d      	ldr	r1, [pc, #308]	; (9000ea24 <tcp_input+0x4bc>)
9000e8f0:	4848      	ldr	r0, [pc, #288]	; (9000ea14 <tcp_input+0x4ac>)
9000e8f2:	f007 f97f 	bl	90015bf4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
9000e8f6:	69fb      	ldr	r3, [r7, #28]
9000e8f8:	7a1b      	ldrb	r3, [r3, #8]
9000e8fa:	2b00      	cmp	r3, #0
9000e8fc:	d009      	beq.n	9000e912 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
9000e8fe:	69fb      	ldr	r3, [r7, #28]
9000e900:	7a1a      	ldrb	r2, [r3, #8]
9000e902:	4b41      	ldr	r3, [pc, #260]	; (9000ea08 <tcp_input+0x4a0>)
9000e904:	685b      	ldr	r3, [r3, #4]
9000e906:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
9000e90a:	3301      	adds	r3, #1
9000e90c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
9000e90e:	429a      	cmp	r2, r3
9000e910:	d122      	bne.n	9000e958 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
9000e912:	69fb      	ldr	r3, [r7, #28]
9000e914:	8b1a      	ldrh	r2, [r3, #24]
9000e916:	4b3b      	ldr	r3, [pc, #236]	; (9000ea04 <tcp_input+0x49c>)
9000e918:	681b      	ldr	r3, [r3, #0]
9000e91a:	881b      	ldrh	r3, [r3, #0]
9000e91c:	b29b      	uxth	r3, r3
9000e91e:	429a      	cmp	r2, r3
9000e920:	d11b      	bne.n	9000e95a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
9000e922:	69fb      	ldr	r3, [r7, #28]
9000e924:	8ada      	ldrh	r2, [r3, #22]
9000e926:	4b37      	ldr	r3, [pc, #220]	; (9000ea04 <tcp_input+0x49c>)
9000e928:	681b      	ldr	r3, [r3, #0]
9000e92a:	885b      	ldrh	r3, [r3, #2]
9000e92c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
9000e92e:	429a      	cmp	r2, r3
9000e930:	d113      	bne.n	9000e95a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
9000e932:	69fb      	ldr	r3, [r7, #28]
9000e934:	685a      	ldr	r2, [r3, #4]
9000e936:	4b34      	ldr	r3, [pc, #208]	; (9000ea08 <tcp_input+0x4a0>)
9000e938:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
9000e93a:	429a      	cmp	r2, r3
9000e93c:	d10d      	bne.n	9000e95a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
9000e93e:	69fb      	ldr	r3, [r7, #28]
9000e940:	681a      	ldr	r2, [r3, #0]
9000e942:	4b31      	ldr	r3, [pc, #196]	; (9000ea08 <tcp_input+0x4a0>)
9000e944:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
9000e946:	429a      	cmp	r2, r3
9000e948:	d107      	bne.n	9000e95a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
9000e94a:	69f8      	ldr	r0, [r7, #28]
9000e94c:	f000 fb56 	bl	9000effc <tcp_timewait_input>
        }
        pbuf_free(p);
9000e950:	6878      	ldr	r0, [r7, #4]
9000e952:	f7fd fd2f 	bl	9000c3b4 <pbuf_free>
        return;
9000e956:	e1fd      	b.n	9000ed54 <tcp_input+0x7ec>
        continue;
9000e958:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
9000e95a:	69fb      	ldr	r3, [r7, #28]
9000e95c:	68db      	ldr	r3, [r3, #12]
9000e95e:	61fb      	str	r3, [r7, #28]
9000e960:	69fb      	ldr	r3, [r7, #28]
9000e962:	2b00      	cmp	r3, #0
9000e964:	d1bc      	bne.n	9000e8e0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
9000e966:	2300      	movs	r3, #0
9000e968:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
9000e96a:	4b2f      	ldr	r3, [pc, #188]	; (9000ea28 <tcp_input+0x4c0>)
9000e96c:	681b      	ldr	r3, [r3, #0]
9000e96e:	617b      	str	r3, [r7, #20]
9000e970:	e02a      	b.n	9000e9c8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
9000e972:	697b      	ldr	r3, [r7, #20]
9000e974:	7a1b      	ldrb	r3, [r3, #8]
9000e976:	2b00      	cmp	r3, #0
9000e978:	d00c      	beq.n	9000e994 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
9000e97a:	697b      	ldr	r3, [r7, #20]
9000e97c:	7a1a      	ldrb	r2, [r3, #8]
9000e97e:	4b22      	ldr	r3, [pc, #136]	; (9000ea08 <tcp_input+0x4a0>)
9000e980:	685b      	ldr	r3, [r3, #4]
9000e982:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
9000e986:	3301      	adds	r3, #1
9000e988:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
9000e98a:	429a      	cmp	r2, r3
9000e98c:	d002      	beq.n	9000e994 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
9000e98e:	697b      	ldr	r3, [r7, #20]
9000e990:	61bb      	str	r3, [r7, #24]
        continue;
9000e992:	e016      	b.n	9000e9c2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
9000e994:	697b      	ldr	r3, [r7, #20]
9000e996:	8ada      	ldrh	r2, [r3, #22]
9000e998:	4b1a      	ldr	r3, [pc, #104]	; (9000ea04 <tcp_input+0x49c>)
9000e99a:	681b      	ldr	r3, [r3, #0]
9000e99c:	885b      	ldrh	r3, [r3, #2]
9000e99e:	b29b      	uxth	r3, r3
9000e9a0:	429a      	cmp	r2, r3
9000e9a2:	d10c      	bne.n	9000e9be <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
9000e9a4:	697b      	ldr	r3, [r7, #20]
9000e9a6:	681a      	ldr	r2, [r3, #0]
9000e9a8:	4b17      	ldr	r3, [pc, #92]	; (9000ea08 <tcp_input+0x4a0>)
9000e9aa:	695b      	ldr	r3, [r3, #20]
9000e9ac:	429a      	cmp	r2, r3
9000e9ae:	d00f      	beq.n	9000e9d0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
9000e9b0:	697b      	ldr	r3, [r7, #20]
9000e9b2:	2b00      	cmp	r3, #0
9000e9b4:	d00d      	beq.n	9000e9d2 <tcp_input+0x46a>
9000e9b6:	697b      	ldr	r3, [r7, #20]
9000e9b8:	681b      	ldr	r3, [r3, #0]
9000e9ba:	2b00      	cmp	r3, #0
9000e9bc:	d009      	beq.n	9000e9d2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
9000e9be:	697b      	ldr	r3, [r7, #20]
9000e9c0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
9000e9c2:	697b      	ldr	r3, [r7, #20]
9000e9c4:	68db      	ldr	r3, [r3, #12]
9000e9c6:	617b      	str	r3, [r7, #20]
9000e9c8:	697b      	ldr	r3, [r7, #20]
9000e9ca:	2b00      	cmp	r3, #0
9000e9cc:	d1d1      	bne.n	9000e972 <tcp_input+0x40a>
9000e9ce:	e000      	b.n	9000e9d2 <tcp_input+0x46a>
            break;
9000e9d0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
9000e9d2:	697b      	ldr	r3, [r7, #20]
9000e9d4:	2b00      	cmp	r3, #0
9000e9d6:	d029      	beq.n	9000ea2c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
9000e9d8:	69bb      	ldr	r3, [r7, #24]
9000e9da:	2b00      	cmp	r3, #0
9000e9dc:	d00a      	beq.n	9000e9f4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
9000e9de:	697b      	ldr	r3, [r7, #20]
9000e9e0:	68da      	ldr	r2, [r3, #12]
9000e9e2:	69bb      	ldr	r3, [r7, #24]
9000e9e4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
9000e9e6:	4b10      	ldr	r3, [pc, #64]	; (9000ea28 <tcp_input+0x4c0>)
9000e9e8:	681a      	ldr	r2, [r3, #0]
9000e9ea:	697b      	ldr	r3, [r7, #20]
9000e9ec:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
9000e9ee:	4a0e      	ldr	r2, [pc, #56]	; (9000ea28 <tcp_input+0x4c0>)
9000e9f0:	697b      	ldr	r3, [r7, #20]
9000e9f2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
9000e9f4:	6978      	ldr	r0, [r7, #20]
9000e9f6:	f000 fa03 	bl	9000ee00 <tcp_listen_input>
      }
      pbuf_free(p);
9000e9fa:	6878      	ldr	r0, [r7, #4]
9000e9fc:	f7fd fcda 	bl	9000c3b4 <pbuf_free>
      return;
9000ea00:	e1a8      	b.n	9000ed54 <tcp_input+0x7ec>
9000ea02:	bf00      	nop
9000ea04:	2401f3cc 	.word	0x2401f3cc
9000ea08:	2401c1c8 	.word	0x2401c1c8
9000ea0c:	90018f90 	.word	0x90018f90
9000ea10:	900190bc 	.word	0x900190bc
9000ea14:	90018fdc 	.word	0x90018fdc
9000ea18:	2401f3b0 	.word	0x2401f3b0
9000ea1c:	900190e8 	.word	0x900190e8
9000ea20:	2401f3b4 	.word	0x2401f3b4
9000ea24:	90019114 	.word	0x90019114
9000ea28:	2401f3ac 	.word	0x2401f3ac
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
9000ea2c:	69fb      	ldr	r3, [r7, #28]
9000ea2e:	2b00      	cmp	r3, #0
9000ea30:	f000 8158 	beq.w	9000ece4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
9000ea34:	4b95      	ldr	r3, [pc, #596]	; (9000ec8c <tcp_input+0x724>)
9000ea36:	2200      	movs	r2, #0
9000ea38:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
9000ea3a:	687b      	ldr	r3, [r7, #4]
9000ea3c:	891a      	ldrh	r2, [r3, #8]
9000ea3e:	4b93      	ldr	r3, [pc, #588]	; (9000ec8c <tcp_input+0x724>)
9000ea40:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
9000ea42:	4a92      	ldr	r2, [pc, #584]	; (9000ec8c <tcp_input+0x724>)
9000ea44:	687b      	ldr	r3, [r7, #4]
9000ea46:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
9000ea48:	4b91      	ldr	r3, [pc, #580]	; (9000ec90 <tcp_input+0x728>)
9000ea4a:	681b      	ldr	r3, [r3, #0]
9000ea4c:	4a8f      	ldr	r2, [pc, #572]	; (9000ec8c <tcp_input+0x724>)
9000ea4e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
9000ea50:	4b90      	ldr	r3, [pc, #576]	; (9000ec94 <tcp_input+0x72c>)
9000ea52:	2200      	movs	r2, #0
9000ea54:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
9000ea56:	4b90      	ldr	r3, [pc, #576]	; (9000ec98 <tcp_input+0x730>)
9000ea58:	2200      	movs	r2, #0
9000ea5a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
9000ea5c:	4b8f      	ldr	r3, [pc, #572]	; (9000ec9c <tcp_input+0x734>)
9000ea5e:	2200      	movs	r2, #0
9000ea60:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
9000ea62:	4b8f      	ldr	r3, [pc, #572]	; (9000eca0 <tcp_input+0x738>)
9000ea64:	781b      	ldrb	r3, [r3, #0]
9000ea66:	f003 0308 	and.w	r3, r3, #8
9000ea6a:	2b00      	cmp	r3, #0
9000ea6c:	d006      	beq.n	9000ea7c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
9000ea6e:	687b      	ldr	r3, [r7, #4]
9000ea70:	7b5b      	ldrb	r3, [r3, #13]
9000ea72:	f043 0301 	orr.w	r3, r3, #1
9000ea76:	b2da      	uxtb	r2, r3
9000ea78:	687b      	ldr	r3, [r7, #4]
9000ea7a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
9000ea7c:	69fb      	ldr	r3, [r7, #28]
9000ea7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000ea80:	2b00      	cmp	r3, #0
9000ea82:	d017      	beq.n	9000eab4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
9000ea84:	69f8      	ldr	r0, [r7, #28]
9000ea86:	f7ff f83d 	bl	9000db04 <tcp_process_refused_data>
9000ea8a:	4603      	mov	r3, r0
9000ea8c:	f113 0f0d 	cmn.w	r3, #13
9000ea90:	d007      	beq.n	9000eaa2 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
9000ea92:	69fb      	ldr	r3, [r7, #28]
9000ea94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
9000ea96:	2b00      	cmp	r3, #0
9000ea98:	d00c      	beq.n	9000eab4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
9000ea9a:	4b82      	ldr	r3, [pc, #520]	; (9000eca4 <tcp_input+0x73c>)
9000ea9c:	881b      	ldrh	r3, [r3, #0]
9000ea9e:	2b00      	cmp	r3, #0
9000eaa0:	d008      	beq.n	9000eab4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
9000eaa2:	69fb      	ldr	r3, [r7, #28]
9000eaa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
9000eaa6:	2b00      	cmp	r3, #0
9000eaa8:	f040 80e3 	bne.w	9000ec72 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
9000eaac:	69f8      	ldr	r0, [r7, #28]
9000eaae:	f003 fe05 	bl	900126bc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
9000eab2:	e0de      	b.n	9000ec72 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
9000eab4:	4a7c      	ldr	r2, [pc, #496]	; (9000eca8 <tcp_input+0x740>)
9000eab6:	69fb      	ldr	r3, [r7, #28]
9000eab8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
9000eaba:	69f8      	ldr	r0, [r7, #28]
9000eabc:	f000 fb18 	bl	9000f0f0 <tcp_process>
9000eac0:	4603      	mov	r3, r0
9000eac2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
9000eac4:	f997 3013 	ldrsb.w	r3, [r7, #19]
9000eac8:	f113 0f0d 	cmn.w	r3, #13
9000eacc:	f000 80d3 	beq.w	9000ec76 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
9000ead0:	4b71      	ldr	r3, [pc, #452]	; (9000ec98 <tcp_input+0x730>)
9000ead2:	781b      	ldrb	r3, [r3, #0]
9000ead4:	f003 0308 	and.w	r3, r3, #8
9000ead8:	2b00      	cmp	r3, #0
9000eada:	d015      	beq.n	9000eb08 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
9000eadc:	69fb      	ldr	r3, [r7, #28]
9000eade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000eae2:	2b00      	cmp	r3, #0
9000eae4:	d008      	beq.n	9000eaf8 <tcp_input+0x590>
9000eae6:	69fb      	ldr	r3, [r7, #28]
9000eae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000eaec:	69fa      	ldr	r2, [r7, #28]
9000eaee:	6912      	ldr	r2, [r2, #16]
9000eaf0:	f06f 010d 	mvn.w	r1, #13
9000eaf4:	4610      	mov	r0, r2
9000eaf6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
9000eaf8:	69f9      	ldr	r1, [r7, #28]
9000eafa:	486c      	ldr	r0, [pc, #432]	; (9000ecac <tcp_input+0x744>)
9000eafc:	f7ff fbbc 	bl	9000e278 <tcp_pcb_remove>
        tcp_free(pcb);
9000eb00:	69f8      	ldr	r0, [r7, #28]
9000eb02:	f7fd ff03 	bl	9000c90c <tcp_free>
9000eb06:	e0da      	b.n	9000ecbe <tcp_input+0x756>
      } else {
        err = ERR_OK;
9000eb08:	2300      	movs	r3, #0
9000eb0a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
9000eb0c:	4b63      	ldr	r3, [pc, #396]	; (9000ec9c <tcp_input+0x734>)
9000eb0e:	881b      	ldrh	r3, [r3, #0]
9000eb10:	2b00      	cmp	r3, #0
9000eb12:	d01d      	beq.n	9000eb50 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
9000eb14:	4b61      	ldr	r3, [pc, #388]	; (9000ec9c <tcp_input+0x734>)
9000eb16:	881b      	ldrh	r3, [r3, #0]
9000eb18:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
9000eb1a:	69fb      	ldr	r3, [r7, #28]
9000eb1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
9000eb20:	2b00      	cmp	r3, #0
9000eb22:	d00a      	beq.n	9000eb3a <tcp_input+0x5d2>
9000eb24:	69fb      	ldr	r3, [r7, #28]
9000eb26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
9000eb2a:	69fa      	ldr	r2, [r7, #28]
9000eb2c:	6910      	ldr	r0, [r2, #16]
9000eb2e:	89fa      	ldrh	r2, [r7, #14]
9000eb30:	69f9      	ldr	r1, [r7, #28]
9000eb32:	4798      	blx	r3
9000eb34:	4603      	mov	r3, r0
9000eb36:	74fb      	strb	r3, [r7, #19]
9000eb38:	e001      	b.n	9000eb3e <tcp_input+0x5d6>
9000eb3a:	2300      	movs	r3, #0
9000eb3c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
9000eb3e:	f997 3013 	ldrsb.w	r3, [r7, #19]
9000eb42:	f113 0f0d 	cmn.w	r3, #13
9000eb46:	f000 8098 	beq.w	9000ec7a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
9000eb4a:	4b54      	ldr	r3, [pc, #336]	; (9000ec9c <tcp_input+0x734>)
9000eb4c:	2200      	movs	r2, #0
9000eb4e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
9000eb50:	69f8      	ldr	r0, [r7, #28]
9000eb52:	f000 f915 	bl	9000ed80 <tcp_input_delayed_close>
9000eb56:	4603      	mov	r3, r0
9000eb58:	2b00      	cmp	r3, #0
9000eb5a:	f040 8090 	bne.w	9000ec7e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
9000eb5e:	4b4d      	ldr	r3, [pc, #308]	; (9000ec94 <tcp_input+0x72c>)
9000eb60:	681b      	ldr	r3, [r3, #0]
9000eb62:	2b00      	cmp	r3, #0
9000eb64:	d041      	beq.n	9000ebea <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
9000eb66:	69fb      	ldr	r3, [r7, #28]
9000eb68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000eb6a:	2b00      	cmp	r3, #0
9000eb6c:	d006      	beq.n	9000eb7c <tcp_input+0x614>
9000eb6e:	4b50      	ldr	r3, [pc, #320]	; (9000ecb0 <tcp_input+0x748>)
9000eb70:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
9000eb74:	494f      	ldr	r1, [pc, #316]	; (9000ecb4 <tcp_input+0x74c>)
9000eb76:	4850      	ldr	r0, [pc, #320]	; (9000ecb8 <tcp_input+0x750>)
9000eb78:	f007 f83c 	bl	90015bf4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
9000eb7c:	69fb      	ldr	r3, [r7, #28]
9000eb7e:	8b5b      	ldrh	r3, [r3, #26]
9000eb80:	f003 0310 	and.w	r3, r3, #16
9000eb84:	2b00      	cmp	r3, #0
9000eb86:	d008      	beq.n	9000eb9a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
9000eb88:	4b42      	ldr	r3, [pc, #264]	; (9000ec94 <tcp_input+0x72c>)
9000eb8a:	681b      	ldr	r3, [r3, #0]
9000eb8c:	4618      	mov	r0, r3
9000eb8e:	f7fd fc11 	bl	9000c3b4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
9000eb92:	69f8      	ldr	r0, [r7, #28]
9000eb94:	f7fe f9a2 	bl	9000cedc <tcp_abort>
            goto aborted;
9000eb98:	e091      	b.n	9000ecbe <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
9000eb9a:	69fb      	ldr	r3, [r7, #28]
9000eb9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000eba0:	2b00      	cmp	r3, #0
9000eba2:	d00c      	beq.n	9000ebbe <tcp_input+0x656>
9000eba4:	69fb      	ldr	r3, [r7, #28]
9000eba6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
9000ebaa:	69fb      	ldr	r3, [r7, #28]
9000ebac:	6918      	ldr	r0, [r3, #16]
9000ebae:	4b39      	ldr	r3, [pc, #228]	; (9000ec94 <tcp_input+0x72c>)
9000ebb0:	681a      	ldr	r2, [r3, #0]
9000ebb2:	2300      	movs	r3, #0
9000ebb4:	69f9      	ldr	r1, [r7, #28]
9000ebb6:	47a0      	blx	r4
9000ebb8:	4603      	mov	r3, r0
9000ebba:	74fb      	strb	r3, [r7, #19]
9000ebbc:	e008      	b.n	9000ebd0 <tcp_input+0x668>
9000ebbe:	4b35      	ldr	r3, [pc, #212]	; (9000ec94 <tcp_input+0x72c>)
9000ebc0:	681a      	ldr	r2, [r3, #0]
9000ebc2:	2300      	movs	r3, #0
9000ebc4:	69f9      	ldr	r1, [r7, #28]
9000ebc6:	2000      	movs	r0, #0
9000ebc8:	f7ff f890 	bl	9000dcec <tcp_recv_null>
9000ebcc:	4603      	mov	r3, r0
9000ebce:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
9000ebd0:	f997 3013 	ldrsb.w	r3, [r7, #19]
9000ebd4:	f113 0f0d 	cmn.w	r3, #13
9000ebd8:	d053      	beq.n	9000ec82 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
9000ebda:	f997 3013 	ldrsb.w	r3, [r7, #19]
9000ebde:	2b00      	cmp	r3, #0
9000ebe0:	d003      	beq.n	9000ebea <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
9000ebe2:	4b2c      	ldr	r3, [pc, #176]	; (9000ec94 <tcp_input+0x72c>)
9000ebe4:	681a      	ldr	r2, [r3, #0]
9000ebe6:	69fb      	ldr	r3, [r7, #28]
9000ebe8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
9000ebea:	4b2b      	ldr	r3, [pc, #172]	; (9000ec98 <tcp_input+0x730>)
9000ebec:	781b      	ldrb	r3, [r3, #0]
9000ebee:	f003 0320 	and.w	r3, r3, #32
9000ebf2:	2b00      	cmp	r3, #0
9000ebf4:	d030      	beq.n	9000ec58 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
9000ebf6:	69fb      	ldr	r3, [r7, #28]
9000ebf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000ebfa:	2b00      	cmp	r3, #0
9000ebfc:	d009      	beq.n	9000ec12 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
9000ebfe:	69fb      	ldr	r3, [r7, #28]
9000ec00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000ec02:	7b5a      	ldrb	r2, [r3, #13]
9000ec04:	69fb      	ldr	r3, [r7, #28]
9000ec06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000ec08:	f042 0220 	orr.w	r2, r2, #32
9000ec0c:	b2d2      	uxtb	r2, r2
9000ec0e:	735a      	strb	r2, [r3, #13]
9000ec10:	e022      	b.n	9000ec58 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
9000ec12:	69fb      	ldr	r3, [r7, #28]
9000ec14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
9000ec16:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
9000ec1a:	d005      	beq.n	9000ec28 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
9000ec1c:	69fb      	ldr	r3, [r7, #28]
9000ec1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
9000ec20:	3301      	adds	r3, #1
9000ec22:	b29a      	uxth	r2, r3
9000ec24:	69fb      	ldr	r3, [r7, #28]
9000ec26:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
9000ec28:	69fb      	ldr	r3, [r7, #28]
9000ec2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000ec2e:	2b00      	cmp	r3, #0
9000ec30:	d00b      	beq.n	9000ec4a <tcp_input+0x6e2>
9000ec32:	69fb      	ldr	r3, [r7, #28]
9000ec34:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
9000ec38:	69fb      	ldr	r3, [r7, #28]
9000ec3a:	6918      	ldr	r0, [r3, #16]
9000ec3c:	2300      	movs	r3, #0
9000ec3e:	2200      	movs	r2, #0
9000ec40:	69f9      	ldr	r1, [r7, #28]
9000ec42:	47a0      	blx	r4
9000ec44:	4603      	mov	r3, r0
9000ec46:	74fb      	strb	r3, [r7, #19]
9000ec48:	e001      	b.n	9000ec4e <tcp_input+0x6e6>
9000ec4a:	2300      	movs	r3, #0
9000ec4c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
9000ec4e:	f997 3013 	ldrsb.w	r3, [r7, #19]
9000ec52:	f113 0f0d 	cmn.w	r3, #13
9000ec56:	d016      	beq.n	9000ec86 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
9000ec58:	4b13      	ldr	r3, [pc, #76]	; (9000eca8 <tcp_input+0x740>)
9000ec5a:	2200      	movs	r2, #0
9000ec5c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
9000ec5e:	69f8      	ldr	r0, [r7, #28]
9000ec60:	f000 f88e 	bl	9000ed80 <tcp_input_delayed_close>
9000ec64:	4603      	mov	r3, r0
9000ec66:	2b00      	cmp	r3, #0
9000ec68:	d128      	bne.n	9000ecbc <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
9000ec6a:	69f8      	ldr	r0, [r7, #28]
9000ec6c:	f002 ff20 	bl	90011ab0 <tcp_output>
9000ec70:	e025      	b.n	9000ecbe <tcp_input+0x756>
        goto aborted;
9000ec72:	bf00      	nop
9000ec74:	e023      	b.n	9000ecbe <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
9000ec76:	bf00      	nop
9000ec78:	e021      	b.n	9000ecbe <tcp_input+0x756>
              goto aborted;
9000ec7a:	bf00      	nop
9000ec7c:	e01f      	b.n	9000ecbe <tcp_input+0x756>
          goto aborted;
9000ec7e:	bf00      	nop
9000ec80:	e01d      	b.n	9000ecbe <tcp_input+0x756>
            goto aborted;
9000ec82:	bf00      	nop
9000ec84:	e01b      	b.n	9000ecbe <tcp_input+0x756>
              goto aborted;
9000ec86:	bf00      	nop
9000ec88:	e019      	b.n	9000ecbe <tcp_input+0x756>
9000ec8a:	bf00      	nop
9000ec8c:	2401f3bc 	.word	0x2401f3bc
9000ec90:	2401f3cc 	.word	0x2401f3cc
9000ec94:	2401f3ec 	.word	0x2401f3ec
9000ec98:	2401f3e9 	.word	0x2401f3e9
9000ec9c:	2401f3e4 	.word	0x2401f3e4
9000eca0:	2401f3e8 	.word	0x2401f3e8
9000eca4:	2401f3e6 	.word	0x2401f3e6
9000eca8:	2401f3f0 	.word	0x2401f3f0
9000ecac:	2401f3b0 	.word	0x2401f3b0
9000ecb0:	90018f90 	.word	0x90018f90
9000ecb4:	90019144 	.word	0x90019144
9000ecb8:	90018fdc 	.word	0x90018fdc
          goto aborted;
9000ecbc:	bf00      	nop
    tcp_input_pcb = NULL;
9000ecbe:	4b27      	ldr	r3, [pc, #156]	; (9000ed5c <tcp_input+0x7f4>)
9000ecc0:	2200      	movs	r2, #0
9000ecc2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
9000ecc4:	4b26      	ldr	r3, [pc, #152]	; (9000ed60 <tcp_input+0x7f8>)
9000ecc6:	2200      	movs	r2, #0
9000ecc8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
9000ecca:	4b26      	ldr	r3, [pc, #152]	; (9000ed64 <tcp_input+0x7fc>)
9000eccc:	685b      	ldr	r3, [r3, #4]
9000ecce:	2b00      	cmp	r3, #0
9000ecd0:	d03f      	beq.n	9000ed52 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
9000ecd2:	4b24      	ldr	r3, [pc, #144]	; (9000ed64 <tcp_input+0x7fc>)
9000ecd4:	685b      	ldr	r3, [r3, #4]
9000ecd6:	4618      	mov	r0, r3
9000ecd8:	f7fd fb6c 	bl	9000c3b4 <pbuf_free>
      inseg.p = NULL;
9000ecdc:	4b21      	ldr	r3, [pc, #132]	; (9000ed64 <tcp_input+0x7fc>)
9000ecde:	2200      	movs	r2, #0
9000ece0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
9000ece2:	e036      	b.n	9000ed52 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
9000ece4:	4b20      	ldr	r3, [pc, #128]	; (9000ed68 <tcp_input+0x800>)
9000ece6:	681b      	ldr	r3, [r3, #0]
9000ece8:	899b      	ldrh	r3, [r3, #12]
9000ecea:	b29b      	uxth	r3, r3
9000ecec:	4618      	mov	r0, r3
9000ecee:	f7fb fe4d 	bl	9000a98c <lwip_htons>
9000ecf2:	4603      	mov	r3, r0
9000ecf4:	b2db      	uxtb	r3, r3
9000ecf6:	f003 0304 	and.w	r3, r3, #4
9000ecfa:	2b00      	cmp	r3, #0
9000ecfc:	d118      	bne.n	9000ed30 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
9000ecfe:	4b1b      	ldr	r3, [pc, #108]	; (9000ed6c <tcp_input+0x804>)
9000ed00:	6819      	ldr	r1, [r3, #0]
9000ed02:	4b1b      	ldr	r3, [pc, #108]	; (9000ed70 <tcp_input+0x808>)
9000ed04:	881b      	ldrh	r3, [r3, #0]
9000ed06:	461a      	mov	r2, r3
9000ed08:	4b1a      	ldr	r3, [pc, #104]	; (9000ed74 <tcp_input+0x80c>)
9000ed0a:	681b      	ldr	r3, [r3, #0]
9000ed0c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
9000ed0e:	4b16      	ldr	r3, [pc, #88]	; (9000ed68 <tcp_input+0x800>)
9000ed10:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
9000ed12:	885b      	ldrh	r3, [r3, #2]
9000ed14:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
9000ed16:	4a14      	ldr	r2, [pc, #80]	; (9000ed68 <tcp_input+0x800>)
9000ed18:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
9000ed1a:	8812      	ldrh	r2, [r2, #0]
9000ed1c:	b292      	uxth	r2, r2
9000ed1e:	9202      	str	r2, [sp, #8]
9000ed20:	9301      	str	r3, [sp, #4]
9000ed22:	4b15      	ldr	r3, [pc, #84]	; (9000ed78 <tcp_input+0x810>)
9000ed24:	9300      	str	r3, [sp, #0]
9000ed26:	4b15      	ldr	r3, [pc, #84]	; (9000ed7c <tcp_input+0x814>)
9000ed28:	4602      	mov	r2, r0
9000ed2a:	2000      	movs	r0, #0
9000ed2c:	f003 fc74 	bl	90012618 <tcp_rst>
    pbuf_free(p);
9000ed30:	6878      	ldr	r0, [r7, #4]
9000ed32:	f7fd fb3f 	bl	9000c3b4 <pbuf_free>
  return;
9000ed36:	e00c      	b.n	9000ed52 <tcp_input+0x7ea>
    goto dropped;
9000ed38:	bf00      	nop
9000ed3a:	e006      	b.n	9000ed4a <tcp_input+0x7e2>
    goto dropped;
9000ed3c:	bf00      	nop
9000ed3e:	e004      	b.n	9000ed4a <tcp_input+0x7e2>
    goto dropped;
9000ed40:	bf00      	nop
9000ed42:	e002      	b.n	9000ed4a <tcp_input+0x7e2>
      goto dropped;
9000ed44:	bf00      	nop
9000ed46:	e000      	b.n	9000ed4a <tcp_input+0x7e2>
      goto dropped;
9000ed48:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
9000ed4a:	6878      	ldr	r0, [r7, #4]
9000ed4c:	f7fd fb32 	bl	9000c3b4 <pbuf_free>
9000ed50:	e000      	b.n	9000ed54 <tcp_input+0x7ec>
  return;
9000ed52:	bf00      	nop
}
9000ed54:	3724      	adds	r7, #36	; 0x24
9000ed56:	46bd      	mov	sp, r7
9000ed58:	bd90      	pop	{r4, r7, pc}
9000ed5a:	bf00      	nop
9000ed5c:	2401f3f0 	.word	0x2401f3f0
9000ed60:	2401f3ec 	.word	0x2401f3ec
9000ed64:	2401f3bc 	.word	0x2401f3bc
9000ed68:	2401f3cc 	.word	0x2401f3cc
9000ed6c:	2401f3e0 	.word	0x2401f3e0
9000ed70:	2401f3e6 	.word	0x2401f3e6
9000ed74:	2401f3dc 	.word	0x2401f3dc
9000ed78:	2401c1d8 	.word	0x2401c1d8
9000ed7c:	2401c1dc 	.word	0x2401c1dc

9000ed80 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
9000ed80:	b580      	push	{r7, lr}
9000ed82:	b082      	sub	sp, #8
9000ed84:	af00      	add	r7, sp, #0
9000ed86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
9000ed88:	687b      	ldr	r3, [r7, #4]
9000ed8a:	2b00      	cmp	r3, #0
9000ed8c:	d106      	bne.n	9000ed9c <tcp_input_delayed_close+0x1c>
9000ed8e:	4b17      	ldr	r3, [pc, #92]	; (9000edec <tcp_input_delayed_close+0x6c>)
9000ed90:	f240 225a 	movw	r2, #602	; 0x25a
9000ed94:	4916      	ldr	r1, [pc, #88]	; (9000edf0 <tcp_input_delayed_close+0x70>)
9000ed96:	4817      	ldr	r0, [pc, #92]	; (9000edf4 <tcp_input_delayed_close+0x74>)
9000ed98:	f006 ff2c 	bl	90015bf4 <iprintf>

  if (recv_flags & TF_CLOSED) {
9000ed9c:	4b16      	ldr	r3, [pc, #88]	; (9000edf8 <tcp_input_delayed_close+0x78>)
9000ed9e:	781b      	ldrb	r3, [r3, #0]
9000eda0:	f003 0310 	and.w	r3, r3, #16
9000eda4:	2b00      	cmp	r3, #0
9000eda6:	d01c      	beq.n	9000ede2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
9000eda8:	687b      	ldr	r3, [r7, #4]
9000edaa:	8b5b      	ldrh	r3, [r3, #26]
9000edac:	f003 0310 	and.w	r3, r3, #16
9000edb0:	2b00      	cmp	r3, #0
9000edb2:	d10d      	bne.n	9000edd0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
9000edb4:	687b      	ldr	r3, [r7, #4]
9000edb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000edba:	2b00      	cmp	r3, #0
9000edbc:	d008      	beq.n	9000edd0 <tcp_input_delayed_close+0x50>
9000edbe:	687b      	ldr	r3, [r7, #4]
9000edc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
9000edc4:	687a      	ldr	r2, [r7, #4]
9000edc6:	6912      	ldr	r2, [r2, #16]
9000edc8:	f06f 010e 	mvn.w	r1, #14
9000edcc:	4610      	mov	r0, r2
9000edce:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
9000edd0:	6879      	ldr	r1, [r7, #4]
9000edd2:	480a      	ldr	r0, [pc, #40]	; (9000edfc <tcp_input_delayed_close+0x7c>)
9000edd4:	f7ff fa50 	bl	9000e278 <tcp_pcb_remove>
    tcp_free(pcb);
9000edd8:	6878      	ldr	r0, [r7, #4]
9000edda:	f7fd fd97 	bl	9000c90c <tcp_free>
    return 1;
9000edde:	2301      	movs	r3, #1
9000ede0:	e000      	b.n	9000ede4 <tcp_input_delayed_close+0x64>
  }
  return 0;
9000ede2:	2300      	movs	r3, #0
}
9000ede4:	4618      	mov	r0, r3
9000ede6:	3708      	adds	r7, #8
9000ede8:	46bd      	mov	sp, r7
9000edea:	bd80      	pop	{r7, pc}
9000edec:	90018f90 	.word	0x90018f90
9000edf0:	90019160 	.word	0x90019160
9000edf4:	90018fdc 	.word	0x90018fdc
9000edf8:	2401f3e9 	.word	0x2401f3e9
9000edfc:	2401f3b0 	.word	0x2401f3b0

9000ee00 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
9000ee00:	b590      	push	{r4, r7, lr}
9000ee02:	b08b      	sub	sp, #44	; 0x2c
9000ee04:	af04      	add	r7, sp, #16
9000ee06:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
9000ee08:	4b6f      	ldr	r3, [pc, #444]	; (9000efc8 <tcp_listen_input+0x1c8>)
9000ee0a:	781b      	ldrb	r3, [r3, #0]
9000ee0c:	f003 0304 	and.w	r3, r3, #4
9000ee10:	2b00      	cmp	r3, #0
9000ee12:	f040 80d2 	bne.w	9000efba <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
9000ee16:	687b      	ldr	r3, [r7, #4]
9000ee18:	2b00      	cmp	r3, #0
9000ee1a:	d106      	bne.n	9000ee2a <tcp_listen_input+0x2a>
9000ee1c:	4b6b      	ldr	r3, [pc, #428]	; (9000efcc <tcp_listen_input+0x1cc>)
9000ee1e:	f240 2281 	movw	r2, #641	; 0x281
9000ee22:	496b      	ldr	r1, [pc, #428]	; (9000efd0 <tcp_listen_input+0x1d0>)
9000ee24:	486b      	ldr	r0, [pc, #428]	; (9000efd4 <tcp_listen_input+0x1d4>)
9000ee26:	f006 fee5 	bl	90015bf4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
9000ee2a:	4b67      	ldr	r3, [pc, #412]	; (9000efc8 <tcp_listen_input+0x1c8>)
9000ee2c:	781b      	ldrb	r3, [r3, #0]
9000ee2e:	f003 0310 	and.w	r3, r3, #16
9000ee32:	2b00      	cmp	r3, #0
9000ee34:	d019      	beq.n	9000ee6a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
9000ee36:	4b68      	ldr	r3, [pc, #416]	; (9000efd8 <tcp_listen_input+0x1d8>)
9000ee38:	6819      	ldr	r1, [r3, #0]
9000ee3a:	4b68      	ldr	r3, [pc, #416]	; (9000efdc <tcp_listen_input+0x1dc>)
9000ee3c:	881b      	ldrh	r3, [r3, #0]
9000ee3e:	461a      	mov	r2, r3
9000ee40:	4b67      	ldr	r3, [pc, #412]	; (9000efe0 <tcp_listen_input+0x1e0>)
9000ee42:	681b      	ldr	r3, [r3, #0]
9000ee44:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
9000ee46:	4b67      	ldr	r3, [pc, #412]	; (9000efe4 <tcp_listen_input+0x1e4>)
9000ee48:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
9000ee4a:	885b      	ldrh	r3, [r3, #2]
9000ee4c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
9000ee4e:	4a65      	ldr	r2, [pc, #404]	; (9000efe4 <tcp_listen_input+0x1e4>)
9000ee50:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
9000ee52:	8812      	ldrh	r2, [r2, #0]
9000ee54:	b292      	uxth	r2, r2
9000ee56:	9202      	str	r2, [sp, #8]
9000ee58:	9301      	str	r3, [sp, #4]
9000ee5a:	4b63      	ldr	r3, [pc, #396]	; (9000efe8 <tcp_listen_input+0x1e8>)
9000ee5c:	9300      	str	r3, [sp, #0]
9000ee5e:	4b63      	ldr	r3, [pc, #396]	; (9000efec <tcp_listen_input+0x1ec>)
9000ee60:	4602      	mov	r2, r0
9000ee62:	6878      	ldr	r0, [r7, #4]
9000ee64:	f003 fbd8 	bl	90012618 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
9000ee68:	e0a9      	b.n	9000efbe <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
9000ee6a:	4b57      	ldr	r3, [pc, #348]	; (9000efc8 <tcp_listen_input+0x1c8>)
9000ee6c:	781b      	ldrb	r3, [r3, #0]
9000ee6e:	f003 0302 	and.w	r3, r3, #2
9000ee72:	2b00      	cmp	r3, #0
9000ee74:	f000 80a3 	beq.w	9000efbe <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
9000ee78:	687b      	ldr	r3, [r7, #4]
9000ee7a:	7d5b      	ldrb	r3, [r3, #21]
9000ee7c:	4618      	mov	r0, r3
9000ee7e:	f7ff f859 	bl	9000df34 <tcp_alloc>
9000ee82:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
9000ee84:	697b      	ldr	r3, [r7, #20]
9000ee86:	2b00      	cmp	r3, #0
9000ee88:	d111      	bne.n	9000eeae <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
9000ee8a:	687b      	ldr	r3, [r7, #4]
9000ee8c:	699b      	ldr	r3, [r3, #24]
9000ee8e:	2b00      	cmp	r3, #0
9000ee90:	d00a      	beq.n	9000eea8 <tcp_listen_input+0xa8>
9000ee92:	687b      	ldr	r3, [r7, #4]
9000ee94:	699b      	ldr	r3, [r3, #24]
9000ee96:	687a      	ldr	r2, [r7, #4]
9000ee98:	6910      	ldr	r0, [r2, #16]
9000ee9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
9000ee9e:	2100      	movs	r1, #0
9000eea0:	4798      	blx	r3
9000eea2:	4603      	mov	r3, r0
9000eea4:	73bb      	strb	r3, [r7, #14]
      return;
9000eea6:	e08b      	b.n	9000efc0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
9000eea8:	23f0      	movs	r3, #240	; 0xf0
9000eeaa:	73bb      	strb	r3, [r7, #14]
      return;
9000eeac:	e088      	b.n	9000efc0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
9000eeae:	4b50      	ldr	r3, [pc, #320]	; (9000eff0 <tcp_listen_input+0x1f0>)
9000eeb0:	695a      	ldr	r2, [r3, #20]
9000eeb2:	697b      	ldr	r3, [r7, #20]
9000eeb4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
9000eeb6:	4b4e      	ldr	r3, [pc, #312]	; (9000eff0 <tcp_listen_input+0x1f0>)
9000eeb8:	691a      	ldr	r2, [r3, #16]
9000eeba:	697b      	ldr	r3, [r7, #20]
9000eebc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
9000eebe:	687b      	ldr	r3, [r7, #4]
9000eec0:	8ada      	ldrh	r2, [r3, #22]
9000eec2:	697b      	ldr	r3, [r7, #20]
9000eec4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
9000eec6:	4b47      	ldr	r3, [pc, #284]	; (9000efe4 <tcp_listen_input+0x1e4>)
9000eec8:	681b      	ldr	r3, [r3, #0]
9000eeca:	881b      	ldrh	r3, [r3, #0]
9000eecc:	b29a      	uxth	r2, r3
9000eece:	697b      	ldr	r3, [r7, #20]
9000eed0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
9000eed2:	697b      	ldr	r3, [r7, #20]
9000eed4:	2203      	movs	r2, #3
9000eed6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
9000eed8:	4b41      	ldr	r3, [pc, #260]	; (9000efe0 <tcp_listen_input+0x1e0>)
9000eeda:	681b      	ldr	r3, [r3, #0]
9000eedc:	1c5a      	adds	r2, r3, #1
9000eede:	697b      	ldr	r3, [r7, #20]
9000eee0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
9000eee2:	697b      	ldr	r3, [r7, #20]
9000eee4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9000eee6:	697b      	ldr	r3, [r7, #20]
9000eee8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
9000eeea:	6978      	ldr	r0, [r7, #20]
9000eeec:	f7ff fa58 	bl	9000e3a0 <tcp_next_iss>
9000eef0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
9000eef2:	697b      	ldr	r3, [r7, #20]
9000eef4:	693a      	ldr	r2, [r7, #16]
9000eef6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
9000eef8:	697b      	ldr	r3, [r7, #20]
9000eefa:	693a      	ldr	r2, [r7, #16]
9000eefc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
9000eefe:	697b      	ldr	r3, [r7, #20]
9000ef00:	693a      	ldr	r2, [r7, #16]
9000ef02:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
9000ef04:	697b      	ldr	r3, [r7, #20]
9000ef06:	693a      	ldr	r2, [r7, #16]
9000ef08:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
9000ef0a:	4b35      	ldr	r3, [pc, #212]	; (9000efe0 <tcp_listen_input+0x1e0>)
9000ef0c:	681b      	ldr	r3, [r3, #0]
9000ef0e:	1e5a      	subs	r2, r3, #1
9000ef10:	697b      	ldr	r3, [r7, #20]
9000ef12:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
9000ef14:	687b      	ldr	r3, [r7, #4]
9000ef16:	691a      	ldr	r2, [r3, #16]
9000ef18:	697b      	ldr	r3, [r7, #20]
9000ef1a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
9000ef1c:	697b      	ldr	r3, [r7, #20]
9000ef1e:	687a      	ldr	r2, [r7, #4]
9000ef20:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
9000ef22:	687b      	ldr	r3, [r7, #4]
9000ef24:	7a5b      	ldrb	r3, [r3, #9]
9000ef26:	f003 030c 	and.w	r3, r3, #12
9000ef2a:	b2da      	uxtb	r2, r3
9000ef2c:	697b      	ldr	r3, [r7, #20]
9000ef2e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
9000ef30:	687b      	ldr	r3, [r7, #4]
9000ef32:	7a1a      	ldrb	r2, [r3, #8]
9000ef34:	697b      	ldr	r3, [r7, #20]
9000ef36:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
9000ef38:	4b2e      	ldr	r3, [pc, #184]	; (9000eff4 <tcp_listen_input+0x1f4>)
9000ef3a:	681a      	ldr	r2, [r3, #0]
9000ef3c:	697b      	ldr	r3, [r7, #20]
9000ef3e:	60da      	str	r2, [r3, #12]
9000ef40:	4a2c      	ldr	r2, [pc, #176]	; (9000eff4 <tcp_listen_input+0x1f4>)
9000ef42:	697b      	ldr	r3, [r7, #20]
9000ef44:	6013      	str	r3, [r2, #0]
9000ef46:	f003 fd29 	bl	9001299c <tcp_timer_needed>
9000ef4a:	4b2b      	ldr	r3, [pc, #172]	; (9000eff8 <tcp_listen_input+0x1f8>)
9000ef4c:	2201      	movs	r2, #1
9000ef4e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
9000ef50:	6978      	ldr	r0, [r7, #20]
9000ef52:	f001 fd8f 	bl	90010a74 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
9000ef56:	4b23      	ldr	r3, [pc, #140]	; (9000efe4 <tcp_listen_input+0x1e4>)
9000ef58:	681b      	ldr	r3, [r3, #0]
9000ef5a:	89db      	ldrh	r3, [r3, #14]
9000ef5c:	b29a      	uxth	r2, r3
9000ef5e:	697b      	ldr	r3, [r7, #20]
9000ef60:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
9000ef64:	697b      	ldr	r3, [r7, #20]
9000ef66:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
9000ef6a:	697b      	ldr	r3, [r7, #20]
9000ef6c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
9000ef70:	697b      	ldr	r3, [r7, #20]
9000ef72:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
9000ef74:	697b      	ldr	r3, [r7, #20]
9000ef76:	3304      	adds	r3, #4
9000ef78:	4618      	mov	r0, r3
9000ef7a:	f005 f943 	bl	90014204 <ip4_route>
9000ef7e:	4601      	mov	r1, r0
9000ef80:	697b      	ldr	r3, [r7, #20]
9000ef82:	3304      	adds	r3, #4
9000ef84:	461a      	mov	r2, r3
9000ef86:	4620      	mov	r0, r4
9000ef88:	f7ff fa30 	bl	9000e3ec <tcp_eff_send_mss_netif>
9000ef8c:	4603      	mov	r3, r0
9000ef8e:	461a      	mov	r2, r3
9000ef90:	697b      	ldr	r3, [r7, #20]
9000ef92:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
9000ef94:	2112      	movs	r1, #18
9000ef96:	6978      	ldr	r0, [r7, #20]
9000ef98:	f002 fc9c 	bl	900118d4 <tcp_enqueue_flags>
9000ef9c:	4603      	mov	r3, r0
9000ef9e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
9000efa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
9000efa4:	2b00      	cmp	r3, #0
9000efa6:	d004      	beq.n	9000efb2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
9000efa8:	2100      	movs	r1, #0
9000efaa:	6978      	ldr	r0, [r7, #20]
9000efac:	f7fd fed8 	bl	9000cd60 <tcp_abandon>
      return;
9000efb0:	e006      	b.n	9000efc0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
9000efb2:	6978      	ldr	r0, [r7, #20]
9000efb4:	f002 fd7c 	bl	90011ab0 <tcp_output>
  return;
9000efb8:	e001      	b.n	9000efbe <tcp_listen_input+0x1be>
    return;
9000efba:	bf00      	nop
9000efbc:	e000      	b.n	9000efc0 <tcp_listen_input+0x1c0>
  return;
9000efbe:	bf00      	nop
}
9000efc0:	371c      	adds	r7, #28
9000efc2:	46bd      	mov	sp, r7
9000efc4:	bd90      	pop	{r4, r7, pc}
9000efc6:	bf00      	nop
9000efc8:	2401f3e8 	.word	0x2401f3e8
9000efcc:	90018f90 	.word	0x90018f90
9000efd0:	90019188 	.word	0x90019188
9000efd4:	90018fdc 	.word	0x90018fdc
9000efd8:	2401f3e0 	.word	0x2401f3e0
9000efdc:	2401f3e6 	.word	0x2401f3e6
9000efe0:	2401f3dc 	.word	0x2401f3dc
9000efe4:	2401f3cc 	.word	0x2401f3cc
9000efe8:	2401c1d8 	.word	0x2401c1d8
9000efec:	2401c1dc 	.word	0x2401c1dc
9000eff0:	2401c1c8 	.word	0x2401c1c8
9000eff4:	2401f3b0 	.word	0x2401f3b0
9000eff8:	2401f3b8 	.word	0x2401f3b8

9000effc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
9000effc:	b580      	push	{r7, lr}
9000effe:	b086      	sub	sp, #24
9000f000:	af04      	add	r7, sp, #16
9000f002:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
9000f004:	4b2f      	ldr	r3, [pc, #188]	; (9000f0c4 <tcp_timewait_input+0xc8>)
9000f006:	781b      	ldrb	r3, [r3, #0]
9000f008:	f003 0304 	and.w	r3, r3, #4
9000f00c:	2b00      	cmp	r3, #0
9000f00e:	d153      	bne.n	9000f0b8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
9000f010:	687b      	ldr	r3, [r7, #4]
9000f012:	2b00      	cmp	r3, #0
9000f014:	d106      	bne.n	9000f024 <tcp_timewait_input+0x28>
9000f016:	4b2c      	ldr	r3, [pc, #176]	; (9000f0c8 <tcp_timewait_input+0xcc>)
9000f018:	f240 22ee 	movw	r2, #750	; 0x2ee
9000f01c:	492b      	ldr	r1, [pc, #172]	; (9000f0cc <tcp_timewait_input+0xd0>)
9000f01e:	482c      	ldr	r0, [pc, #176]	; (9000f0d0 <tcp_timewait_input+0xd4>)
9000f020:	f006 fde8 	bl	90015bf4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
9000f024:	4b27      	ldr	r3, [pc, #156]	; (9000f0c4 <tcp_timewait_input+0xc8>)
9000f026:	781b      	ldrb	r3, [r3, #0]
9000f028:	f003 0302 	and.w	r3, r3, #2
9000f02c:	2b00      	cmp	r3, #0
9000f02e:	d02a      	beq.n	9000f086 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
9000f030:	4b28      	ldr	r3, [pc, #160]	; (9000f0d4 <tcp_timewait_input+0xd8>)
9000f032:	681a      	ldr	r2, [r3, #0]
9000f034:	687b      	ldr	r3, [r7, #4]
9000f036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000f038:	1ad3      	subs	r3, r2, r3
9000f03a:	2b00      	cmp	r3, #0
9000f03c:	db2d      	blt.n	9000f09a <tcp_timewait_input+0x9e>
9000f03e:	4b25      	ldr	r3, [pc, #148]	; (9000f0d4 <tcp_timewait_input+0xd8>)
9000f040:	681a      	ldr	r2, [r3, #0]
9000f042:	687b      	ldr	r3, [r7, #4]
9000f044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000f046:	6879      	ldr	r1, [r7, #4]
9000f048:	8d09      	ldrh	r1, [r1, #40]	; 0x28
9000f04a:	440b      	add	r3, r1
9000f04c:	1ad3      	subs	r3, r2, r3
9000f04e:	2b00      	cmp	r3, #0
9000f050:	dc23      	bgt.n	9000f09a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
9000f052:	4b21      	ldr	r3, [pc, #132]	; (9000f0d8 <tcp_timewait_input+0xdc>)
9000f054:	6819      	ldr	r1, [r3, #0]
9000f056:	4b21      	ldr	r3, [pc, #132]	; (9000f0dc <tcp_timewait_input+0xe0>)
9000f058:	881b      	ldrh	r3, [r3, #0]
9000f05a:	461a      	mov	r2, r3
9000f05c:	4b1d      	ldr	r3, [pc, #116]	; (9000f0d4 <tcp_timewait_input+0xd8>)
9000f05e:	681b      	ldr	r3, [r3, #0]
9000f060:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
9000f062:	4b1f      	ldr	r3, [pc, #124]	; (9000f0e0 <tcp_timewait_input+0xe4>)
9000f064:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
9000f066:	885b      	ldrh	r3, [r3, #2]
9000f068:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
9000f06a:	4a1d      	ldr	r2, [pc, #116]	; (9000f0e0 <tcp_timewait_input+0xe4>)
9000f06c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
9000f06e:	8812      	ldrh	r2, [r2, #0]
9000f070:	b292      	uxth	r2, r2
9000f072:	9202      	str	r2, [sp, #8]
9000f074:	9301      	str	r3, [sp, #4]
9000f076:	4b1b      	ldr	r3, [pc, #108]	; (9000f0e4 <tcp_timewait_input+0xe8>)
9000f078:	9300      	str	r3, [sp, #0]
9000f07a:	4b1b      	ldr	r3, [pc, #108]	; (9000f0e8 <tcp_timewait_input+0xec>)
9000f07c:	4602      	mov	r2, r0
9000f07e:	6878      	ldr	r0, [r7, #4]
9000f080:	f003 faca 	bl	90012618 <tcp_rst>
      return;
9000f084:	e01b      	b.n	9000f0be <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
9000f086:	4b0f      	ldr	r3, [pc, #60]	; (9000f0c4 <tcp_timewait_input+0xc8>)
9000f088:	781b      	ldrb	r3, [r3, #0]
9000f08a:	f003 0301 	and.w	r3, r3, #1
9000f08e:	2b00      	cmp	r3, #0
9000f090:	d003      	beq.n	9000f09a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
9000f092:	4b16      	ldr	r3, [pc, #88]	; (9000f0ec <tcp_timewait_input+0xf0>)
9000f094:	681a      	ldr	r2, [r3, #0]
9000f096:	687b      	ldr	r3, [r7, #4]
9000f098:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
9000f09a:	4b10      	ldr	r3, [pc, #64]	; (9000f0dc <tcp_timewait_input+0xe0>)
9000f09c:	881b      	ldrh	r3, [r3, #0]
9000f09e:	2b00      	cmp	r3, #0
9000f0a0:	d00c      	beq.n	9000f0bc <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
9000f0a2:	687b      	ldr	r3, [r7, #4]
9000f0a4:	8b5b      	ldrh	r3, [r3, #26]
9000f0a6:	f043 0302 	orr.w	r3, r3, #2
9000f0aa:	b29a      	uxth	r2, r3
9000f0ac:	687b      	ldr	r3, [r7, #4]
9000f0ae:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
9000f0b0:	6878      	ldr	r0, [r7, #4]
9000f0b2:	f002 fcfd 	bl	90011ab0 <tcp_output>
  }
  return;
9000f0b6:	e001      	b.n	9000f0bc <tcp_timewait_input+0xc0>
    return;
9000f0b8:	bf00      	nop
9000f0ba:	e000      	b.n	9000f0be <tcp_timewait_input+0xc2>
  return;
9000f0bc:	bf00      	nop
}
9000f0be:	3708      	adds	r7, #8
9000f0c0:	46bd      	mov	sp, r7
9000f0c2:	bd80      	pop	{r7, pc}
9000f0c4:	2401f3e8 	.word	0x2401f3e8
9000f0c8:	90018f90 	.word	0x90018f90
9000f0cc:	900191a8 	.word	0x900191a8
9000f0d0:	90018fdc 	.word	0x90018fdc
9000f0d4:	2401f3dc 	.word	0x2401f3dc
9000f0d8:	2401f3e0 	.word	0x2401f3e0
9000f0dc:	2401f3e6 	.word	0x2401f3e6
9000f0e0:	2401f3cc 	.word	0x2401f3cc
9000f0e4:	2401c1d8 	.word	0x2401c1d8
9000f0e8:	2401c1dc 	.word	0x2401c1dc
9000f0ec:	2401f3a4 	.word	0x2401f3a4

9000f0f0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
9000f0f0:	b590      	push	{r4, r7, lr}
9000f0f2:	b08d      	sub	sp, #52	; 0x34
9000f0f4:	af04      	add	r7, sp, #16
9000f0f6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
9000f0f8:	2300      	movs	r3, #0
9000f0fa:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
9000f0fc:	2300      	movs	r3, #0
9000f0fe:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
9000f100:	687b      	ldr	r3, [r7, #4]
9000f102:	2b00      	cmp	r3, #0
9000f104:	d106      	bne.n	9000f114 <tcp_process+0x24>
9000f106:	4b9d      	ldr	r3, [pc, #628]	; (9000f37c <tcp_process+0x28c>)
9000f108:	f44f 7247 	mov.w	r2, #796	; 0x31c
9000f10c:	499c      	ldr	r1, [pc, #624]	; (9000f380 <tcp_process+0x290>)
9000f10e:	489d      	ldr	r0, [pc, #628]	; (9000f384 <tcp_process+0x294>)
9000f110:	f006 fd70 	bl	90015bf4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
9000f114:	4b9c      	ldr	r3, [pc, #624]	; (9000f388 <tcp_process+0x298>)
9000f116:	781b      	ldrb	r3, [r3, #0]
9000f118:	f003 0304 	and.w	r3, r3, #4
9000f11c:	2b00      	cmp	r3, #0
9000f11e:	d04e      	beq.n	9000f1be <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
9000f120:	687b      	ldr	r3, [r7, #4]
9000f122:	7d1b      	ldrb	r3, [r3, #20]
9000f124:	2b02      	cmp	r3, #2
9000f126:	d108      	bne.n	9000f13a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
9000f128:	687b      	ldr	r3, [r7, #4]
9000f12a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
9000f12c:	4b97      	ldr	r3, [pc, #604]	; (9000f38c <tcp_process+0x29c>)
9000f12e:	681b      	ldr	r3, [r3, #0]
9000f130:	429a      	cmp	r2, r3
9000f132:	d123      	bne.n	9000f17c <tcp_process+0x8c>
        acceptable = 1;
9000f134:	2301      	movs	r3, #1
9000f136:	76fb      	strb	r3, [r7, #27]
9000f138:	e020      	b.n	9000f17c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
9000f13a:	687b      	ldr	r3, [r7, #4]
9000f13c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9000f13e:	4b94      	ldr	r3, [pc, #592]	; (9000f390 <tcp_process+0x2a0>)
9000f140:	681b      	ldr	r3, [r3, #0]
9000f142:	429a      	cmp	r2, r3
9000f144:	d102      	bne.n	9000f14c <tcp_process+0x5c>
        acceptable = 1;
9000f146:	2301      	movs	r3, #1
9000f148:	76fb      	strb	r3, [r7, #27]
9000f14a:	e017      	b.n	9000f17c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
9000f14c:	4b90      	ldr	r3, [pc, #576]	; (9000f390 <tcp_process+0x2a0>)
9000f14e:	681a      	ldr	r2, [r3, #0]
9000f150:	687b      	ldr	r3, [r7, #4]
9000f152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000f154:	1ad3      	subs	r3, r2, r3
9000f156:	2b00      	cmp	r3, #0
9000f158:	db10      	blt.n	9000f17c <tcp_process+0x8c>
9000f15a:	4b8d      	ldr	r3, [pc, #564]	; (9000f390 <tcp_process+0x2a0>)
9000f15c:	681a      	ldr	r2, [r3, #0]
9000f15e:	687b      	ldr	r3, [r7, #4]
9000f160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000f162:	6879      	ldr	r1, [r7, #4]
9000f164:	8d09      	ldrh	r1, [r1, #40]	; 0x28
9000f166:	440b      	add	r3, r1
9000f168:	1ad3      	subs	r3, r2, r3
9000f16a:	2b00      	cmp	r3, #0
9000f16c:	dc06      	bgt.n	9000f17c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
9000f16e:	687b      	ldr	r3, [r7, #4]
9000f170:	8b5b      	ldrh	r3, [r3, #26]
9000f172:	f043 0302 	orr.w	r3, r3, #2
9000f176:	b29a      	uxth	r2, r3
9000f178:	687b      	ldr	r3, [r7, #4]
9000f17a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
9000f17c:	7efb      	ldrb	r3, [r7, #27]
9000f17e:	2b00      	cmp	r3, #0
9000f180:	d01b      	beq.n	9000f1ba <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
9000f182:	687b      	ldr	r3, [r7, #4]
9000f184:	7d1b      	ldrb	r3, [r3, #20]
9000f186:	2b00      	cmp	r3, #0
9000f188:	d106      	bne.n	9000f198 <tcp_process+0xa8>
9000f18a:	4b7c      	ldr	r3, [pc, #496]	; (9000f37c <tcp_process+0x28c>)
9000f18c:	f44f 724e 	mov.w	r2, #824	; 0x338
9000f190:	4980      	ldr	r1, [pc, #512]	; (9000f394 <tcp_process+0x2a4>)
9000f192:	487c      	ldr	r0, [pc, #496]	; (9000f384 <tcp_process+0x294>)
9000f194:	f006 fd2e 	bl	90015bf4 <iprintf>
      recv_flags |= TF_RESET;
9000f198:	4b7f      	ldr	r3, [pc, #508]	; (9000f398 <tcp_process+0x2a8>)
9000f19a:	781b      	ldrb	r3, [r3, #0]
9000f19c:	f043 0308 	orr.w	r3, r3, #8
9000f1a0:	b2da      	uxtb	r2, r3
9000f1a2:	4b7d      	ldr	r3, [pc, #500]	; (9000f398 <tcp_process+0x2a8>)
9000f1a4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
9000f1a6:	687b      	ldr	r3, [r7, #4]
9000f1a8:	8b5b      	ldrh	r3, [r3, #26]
9000f1aa:	f023 0301 	bic.w	r3, r3, #1
9000f1ae:	b29a      	uxth	r2, r3
9000f1b0:	687b      	ldr	r3, [r7, #4]
9000f1b2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
9000f1b4:	f06f 030d 	mvn.w	r3, #13
9000f1b8:	e37a      	b.n	9000f8b0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
9000f1ba:	2300      	movs	r3, #0
9000f1bc:	e378      	b.n	9000f8b0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
9000f1be:	4b72      	ldr	r3, [pc, #456]	; (9000f388 <tcp_process+0x298>)
9000f1c0:	781b      	ldrb	r3, [r3, #0]
9000f1c2:	f003 0302 	and.w	r3, r3, #2
9000f1c6:	2b00      	cmp	r3, #0
9000f1c8:	d010      	beq.n	9000f1ec <tcp_process+0xfc>
9000f1ca:	687b      	ldr	r3, [r7, #4]
9000f1cc:	7d1b      	ldrb	r3, [r3, #20]
9000f1ce:	2b02      	cmp	r3, #2
9000f1d0:	d00c      	beq.n	9000f1ec <tcp_process+0xfc>
9000f1d2:	687b      	ldr	r3, [r7, #4]
9000f1d4:	7d1b      	ldrb	r3, [r3, #20]
9000f1d6:	2b03      	cmp	r3, #3
9000f1d8:	d008      	beq.n	9000f1ec <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
9000f1da:	687b      	ldr	r3, [r7, #4]
9000f1dc:	8b5b      	ldrh	r3, [r3, #26]
9000f1de:	f043 0302 	orr.w	r3, r3, #2
9000f1e2:	b29a      	uxth	r2, r3
9000f1e4:	687b      	ldr	r3, [r7, #4]
9000f1e6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
9000f1e8:	2300      	movs	r3, #0
9000f1ea:	e361      	b.n	9000f8b0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
9000f1ec:	687b      	ldr	r3, [r7, #4]
9000f1ee:	8b5b      	ldrh	r3, [r3, #26]
9000f1f0:	f003 0310 	and.w	r3, r3, #16
9000f1f4:	2b00      	cmp	r3, #0
9000f1f6:	d103      	bne.n	9000f200 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
9000f1f8:	4b68      	ldr	r3, [pc, #416]	; (9000f39c <tcp_process+0x2ac>)
9000f1fa:	681a      	ldr	r2, [r3, #0]
9000f1fc:	687b      	ldr	r3, [r7, #4]
9000f1fe:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
9000f200:	687b      	ldr	r3, [r7, #4]
9000f202:	2200      	movs	r2, #0
9000f204:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
9000f208:	687b      	ldr	r3, [r7, #4]
9000f20a:	2200      	movs	r2, #0
9000f20c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
9000f210:	6878      	ldr	r0, [r7, #4]
9000f212:	f001 fc2f 	bl	90010a74 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
9000f216:	687b      	ldr	r3, [r7, #4]
9000f218:	7d1b      	ldrb	r3, [r3, #20]
9000f21a:	3b02      	subs	r3, #2
9000f21c:	2b07      	cmp	r3, #7
9000f21e:	f200 8337 	bhi.w	9000f890 <tcp_process+0x7a0>
9000f222:	a201      	add	r2, pc, #4	; (adr r2, 9000f228 <tcp_process+0x138>)
9000f224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000f228:	9000f249 	.word	0x9000f249
9000f22c:	9000f479 	.word	0x9000f479
9000f230:	9000f5f1 	.word	0x9000f5f1
9000f234:	9000f61b 	.word	0x9000f61b
9000f238:	9000f73f 	.word	0x9000f73f
9000f23c:	9000f5f1 	.word	0x9000f5f1
9000f240:	9000f7cb 	.word	0x9000f7cb
9000f244:	9000f85b 	.word	0x9000f85b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
9000f248:	4b4f      	ldr	r3, [pc, #316]	; (9000f388 <tcp_process+0x298>)
9000f24a:	781b      	ldrb	r3, [r3, #0]
9000f24c:	f003 0310 	and.w	r3, r3, #16
9000f250:	2b00      	cmp	r3, #0
9000f252:	f000 80e4 	beq.w	9000f41e <tcp_process+0x32e>
9000f256:	4b4c      	ldr	r3, [pc, #304]	; (9000f388 <tcp_process+0x298>)
9000f258:	781b      	ldrb	r3, [r3, #0]
9000f25a:	f003 0302 	and.w	r3, r3, #2
9000f25e:	2b00      	cmp	r3, #0
9000f260:	f000 80dd 	beq.w	9000f41e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
9000f264:	687b      	ldr	r3, [r7, #4]
9000f266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9000f268:	1c5a      	adds	r2, r3, #1
9000f26a:	4b48      	ldr	r3, [pc, #288]	; (9000f38c <tcp_process+0x29c>)
9000f26c:	681b      	ldr	r3, [r3, #0]
9000f26e:	429a      	cmp	r2, r3
9000f270:	f040 80d5 	bne.w	9000f41e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
9000f274:	4b46      	ldr	r3, [pc, #280]	; (9000f390 <tcp_process+0x2a0>)
9000f276:	681b      	ldr	r3, [r3, #0]
9000f278:	1c5a      	adds	r2, r3, #1
9000f27a:	687b      	ldr	r3, [r7, #4]
9000f27c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
9000f27e:	687b      	ldr	r3, [r7, #4]
9000f280:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9000f282:	687b      	ldr	r3, [r7, #4]
9000f284:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
9000f286:	4b41      	ldr	r3, [pc, #260]	; (9000f38c <tcp_process+0x29c>)
9000f288:	681a      	ldr	r2, [r3, #0]
9000f28a:	687b      	ldr	r3, [r7, #4]
9000f28c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
9000f28e:	4b44      	ldr	r3, [pc, #272]	; (9000f3a0 <tcp_process+0x2b0>)
9000f290:	681b      	ldr	r3, [r3, #0]
9000f292:	89db      	ldrh	r3, [r3, #14]
9000f294:	b29a      	uxth	r2, r3
9000f296:	687b      	ldr	r3, [r7, #4]
9000f298:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
9000f29c:	687b      	ldr	r3, [r7, #4]
9000f29e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
9000f2a2:	687b      	ldr	r3, [r7, #4]
9000f2a4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
9000f2a8:	4b39      	ldr	r3, [pc, #228]	; (9000f390 <tcp_process+0x2a0>)
9000f2aa:	681b      	ldr	r3, [r3, #0]
9000f2ac:	1e5a      	subs	r2, r3, #1
9000f2ae:	687b      	ldr	r3, [r7, #4]
9000f2b0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
9000f2b2:	687b      	ldr	r3, [r7, #4]
9000f2b4:	2204      	movs	r2, #4
9000f2b6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
9000f2b8:	687b      	ldr	r3, [r7, #4]
9000f2ba:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
9000f2bc:	687b      	ldr	r3, [r7, #4]
9000f2be:	3304      	adds	r3, #4
9000f2c0:	4618      	mov	r0, r3
9000f2c2:	f004 ff9f 	bl	90014204 <ip4_route>
9000f2c6:	4601      	mov	r1, r0
9000f2c8:	687b      	ldr	r3, [r7, #4]
9000f2ca:	3304      	adds	r3, #4
9000f2cc:	461a      	mov	r2, r3
9000f2ce:	4620      	mov	r0, r4
9000f2d0:	f7ff f88c 	bl	9000e3ec <tcp_eff_send_mss_netif>
9000f2d4:	4603      	mov	r3, r0
9000f2d6:	461a      	mov	r2, r3
9000f2d8:	687b      	ldr	r3, [r7, #4]
9000f2da:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
9000f2dc:	687b      	ldr	r3, [r7, #4]
9000f2de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000f2e0:	009a      	lsls	r2, r3, #2
9000f2e2:	687b      	ldr	r3, [r7, #4]
9000f2e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000f2e6:	005b      	lsls	r3, r3, #1
9000f2e8:	f241 111c 	movw	r1, #4380	; 0x111c
9000f2ec:	428b      	cmp	r3, r1
9000f2ee:	bf38      	it	cc
9000f2f0:	460b      	movcc	r3, r1
9000f2f2:	429a      	cmp	r2, r3
9000f2f4:	d204      	bcs.n	9000f300 <tcp_process+0x210>
9000f2f6:	687b      	ldr	r3, [r7, #4]
9000f2f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000f2fa:	009b      	lsls	r3, r3, #2
9000f2fc:	b29b      	uxth	r3, r3
9000f2fe:	e00d      	b.n	9000f31c <tcp_process+0x22c>
9000f300:	687b      	ldr	r3, [r7, #4]
9000f302:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000f304:	005b      	lsls	r3, r3, #1
9000f306:	f241 121c 	movw	r2, #4380	; 0x111c
9000f30a:	4293      	cmp	r3, r2
9000f30c:	d904      	bls.n	9000f318 <tcp_process+0x228>
9000f30e:	687b      	ldr	r3, [r7, #4]
9000f310:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000f312:	005b      	lsls	r3, r3, #1
9000f314:	b29b      	uxth	r3, r3
9000f316:	e001      	b.n	9000f31c <tcp_process+0x22c>
9000f318:	f241 131c 	movw	r3, #4380	; 0x111c
9000f31c:	687a      	ldr	r2, [r7, #4]
9000f31e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
9000f322:	687b      	ldr	r3, [r7, #4]
9000f324:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
9000f328:	2b00      	cmp	r3, #0
9000f32a:	d106      	bne.n	9000f33a <tcp_process+0x24a>
9000f32c:	4b13      	ldr	r3, [pc, #76]	; (9000f37c <tcp_process+0x28c>)
9000f32e:	f44f 725b 	mov.w	r2, #876	; 0x36c
9000f332:	491c      	ldr	r1, [pc, #112]	; (9000f3a4 <tcp_process+0x2b4>)
9000f334:	4813      	ldr	r0, [pc, #76]	; (9000f384 <tcp_process+0x294>)
9000f336:	f006 fc5d 	bl	90015bf4 <iprintf>
        --pcb->snd_queuelen;
9000f33a:	687b      	ldr	r3, [r7, #4]
9000f33c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
9000f340:	3b01      	subs	r3, #1
9000f342:	b29a      	uxth	r2, r3
9000f344:	687b      	ldr	r3, [r7, #4]
9000f346:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
9000f34a:	687b      	ldr	r3, [r7, #4]
9000f34c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000f34e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
9000f350:	69fb      	ldr	r3, [r7, #28]
9000f352:	2b00      	cmp	r3, #0
9000f354:	d12a      	bne.n	9000f3ac <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
9000f356:	687b      	ldr	r3, [r7, #4]
9000f358:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000f35a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
9000f35c:	69fb      	ldr	r3, [r7, #28]
9000f35e:	2b00      	cmp	r3, #0
9000f360:	d106      	bne.n	9000f370 <tcp_process+0x280>
9000f362:	4b06      	ldr	r3, [pc, #24]	; (9000f37c <tcp_process+0x28c>)
9000f364:	f44f 725d 	mov.w	r2, #884	; 0x374
9000f368:	490f      	ldr	r1, [pc, #60]	; (9000f3a8 <tcp_process+0x2b8>)
9000f36a:	4806      	ldr	r0, [pc, #24]	; (9000f384 <tcp_process+0x294>)
9000f36c:	f006 fc42 	bl	90015bf4 <iprintf>
          pcb->unsent = rseg->next;
9000f370:	69fb      	ldr	r3, [r7, #28]
9000f372:	681a      	ldr	r2, [r3, #0]
9000f374:	687b      	ldr	r3, [r7, #4]
9000f376:	66da      	str	r2, [r3, #108]	; 0x6c
9000f378:	e01c      	b.n	9000f3b4 <tcp_process+0x2c4>
9000f37a:	bf00      	nop
9000f37c:	90018f90 	.word	0x90018f90
9000f380:	900191c8 	.word	0x900191c8
9000f384:	90018fdc 	.word	0x90018fdc
9000f388:	2401f3e8 	.word	0x2401f3e8
9000f38c:	2401f3e0 	.word	0x2401f3e0
9000f390:	2401f3dc 	.word	0x2401f3dc
9000f394:	900191e4 	.word	0x900191e4
9000f398:	2401f3e9 	.word	0x2401f3e9
9000f39c:	2401f3a4 	.word	0x2401f3a4
9000f3a0:	2401f3cc 	.word	0x2401f3cc
9000f3a4:	90019204 	.word	0x90019204
9000f3a8:	9001921c 	.word	0x9001921c
        } else {
          pcb->unacked = rseg->next;
9000f3ac:	69fb      	ldr	r3, [r7, #28]
9000f3ae:	681a      	ldr	r2, [r3, #0]
9000f3b0:	687b      	ldr	r3, [r7, #4]
9000f3b2:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
9000f3b4:	69f8      	ldr	r0, [r7, #28]
9000f3b6:	f7fe fc36 	bl	9000dc26 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
9000f3ba:	687b      	ldr	r3, [r7, #4]
9000f3bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000f3be:	2b00      	cmp	r3, #0
9000f3c0:	d104      	bne.n	9000f3cc <tcp_process+0x2dc>
          pcb->rtime = -1;
9000f3c2:	687b      	ldr	r3, [r7, #4]
9000f3c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
9000f3c8:	861a      	strh	r2, [r3, #48]	; 0x30
9000f3ca:	e006      	b.n	9000f3da <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
9000f3cc:	687b      	ldr	r3, [r7, #4]
9000f3ce:	2200      	movs	r2, #0
9000f3d0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
9000f3d2:	687b      	ldr	r3, [r7, #4]
9000f3d4:	2200      	movs	r2, #0
9000f3d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
9000f3da:	687b      	ldr	r3, [r7, #4]
9000f3dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
9000f3e0:	2b00      	cmp	r3, #0
9000f3e2:	d00a      	beq.n	9000f3fa <tcp_process+0x30a>
9000f3e4:	687b      	ldr	r3, [r7, #4]
9000f3e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
9000f3ea:	687a      	ldr	r2, [r7, #4]
9000f3ec:	6910      	ldr	r0, [r2, #16]
9000f3ee:	2200      	movs	r2, #0
9000f3f0:	6879      	ldr	r1, [r7, #4]
9000f3f2:	4798      	blx	r3
9000f3f4:	4603      	mov	r3, r0
9000f3f6:	76bb      	strb	r3, [r7, #26]
9000f3f8:	e001      	b.n	9000f3fe <tcp_process+0x30e>
9000f3fa:	2300      	movs	r3, #0
9000f3fc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
9000f3fe:	f997 301a 	ldrsb.w	r3, [r7, #26]
9000f402:	f113 0f0d 	cmn.w	r3, #13
9000f406:	d102      	bne.n	9000f40e <tcp_process+0x31e>
          return ERR_ABRT;
9000f408:	f06f 030c 	mvn.w	r3, #12
9000f40c:	e250      	b.n	9000f8b0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
9000f40e:	687b      	ldr	r3, [r7, #4]
9000f410:	8b5b      	ldrh	r3, [r3, #26]
9000f412:	f043 0302 	orr.w	r3, r3, #2
9000f416:	b29a      	uxth	r2, r3
9000f418:	687b      	ldr	r3, [r7, #4]
9000f41a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
9000f41c:	e23a      	b.n	9000f894 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
9000f41e:	4b98      	ldr	r3, [pc, #608]	; (9000f680 <tcp_process+0x590>)
9000f420:	781b      	ldrb	r3, [r3, #0]
9000f422:	f003 0310 	and.w	r3, r3, #16
9000f426:	2b00      	cmp	r3, #0
9000f428:	f000 8234 	beq.w	9000f894 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
9000f42c:	4b95      	ldr	r3, [pc, #596]	; (9000f684 <tcp_process+0x594>)
9000f42e:	6819      	ldr	r1, [r3, #0]
9000f430:	4b95      	ldr	r3, [pc, #596]	; (9000f688 <tcp_process+0x598>)
9000f432:	881b      	ldrh	r3, [r3, #0]
9000f434:	461a      	mov	r2, r3
9000f436:	4b95      	ldr	r3, [pc, #596]	; (9000f68c <tcp_process+0x59c>)
9000f438:	681b      	ldr	r3, [r3, #0]
9000f43a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
9000f43c:	4b94      	ldr	r3, [pc, #592]	; (9000f690 <tcp_process+0x5a0>)
9000f43e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
9000f440:	885b      	ldrh	r3, [r3, #2]
9000f442:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
9000f444:	4a92      	ldr	r2, [pc, #584]	; (9000f690 <tcp_process+0x5a0>)
9000f446:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
9000f448:	8812      	ldrh	r2, [r2, #0]
9000f44a:	b292      	uxth	r2, r2
9000f44c:	9202      	str	r2, [sp, #8]
9000f44e:	9301      	str	r3, [sp, #4]
9000f450:	4b90      	ldr	r3, [pc, #576]	; (9000f694 <tcp_process+0x5a4>)
9000f452:	9300      	str	r3, [sp, #0]
9000f454:	4b90      	ldr	r3, [pc, #576]	; (9000f698 <tcp_process+0x5a8>)
9000f456:	4602      	mov	r2, r0
9000f458:	6878      	ldr	r0, [r7, #4]
9000f45a:	f003 f8dd 	bl	90012618 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
9000f45e:	687b      	ldr	r3, [r7, #4]
9000f460:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
9000f464:	2b05      	cmp	r3, #5
9000f466:	f200 8215 	bhi.w	9000f894 <tcp_process+0x7a4>
          pcb->rtime = 0;
9000f46a:	687b      	ldr	r3, [r7, #4]
9000f46c:	2200      	movs	r2, #0
9000f46e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
9000f470:	6878      	ldr	r0, [r7, #4]
9000f472:	f002 fea7 	bl	900121c4 <tcp_rexmit_rto>
      break;
9000f476:	e20d      	b.n	9000f894 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
9000f478:	4b81      	ldr	r3, [pc, #516]	; (9000f680 <tcp_process+0x590>)
9000f47a:	781b      	ldrb	r3, [r3, #0]
9000f47c:	f003 0310 	and.w	r3, r3, #16
9000f480:	2b00      	cmp	r3, #0
9000f482:	f000 80a1 	beq.w	9000f5c8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
9000f486:	4b7f      	ldr	r3, [pc, #508]	; (9000f684 <tcp_process+0x594>)
9000f488:	681a      	ldr	r2, [r3, #0]
9000f48a:	687b      	ldr	r3, [r7, #4]
9000f48c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9000f48e:	1ad3      	subs	r3, r2, r3
9000f490:	3b01      	subs	r3, #1
9000f492:	2b00      	cmp	r3, #0
9000f494:	db7e      	blt.n	9000f594 <tcp_process+0x4a4>
9000f496:	4b7b      	ldr	r3, [pc, #492]	; (9000f684 <tcp_process+0x594>)
9000f498:	681a      	ldr	r2, [r3, #0]
9000f49a:	687b      	ldr	r3, [r7, #4]
9000f49c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9000f49e:	1ad3      	subs	r3, r2, r3
9000f4a0:	2b00      	cmp	r3, #0
9000f4a2:	dc77      	bgt.n	9000f594 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
9000f4a4:	687b      	ldr	r3, [r7, #4]
9000f4a6:	2204      	movs	r2, #4
9000f4a8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
9000f4aa:	687b      	ldr	r3, [r7, #4]
9000f4ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000f4ae:	2b00      	cmp	r3, #0
9000f4b0:	d102      	bne.n	9000f4b8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
9000f4b2:	23fa      	movs	r3, #250	; 0xfa
9000f4b4:	76bb      	strb	r3, [r7, #26]
9000f4b6:	e01d      	b.n	9000f4f4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
9000f4b8:	687b      	ldr	r3, [r7, #4]
9000f4ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000f4bc:	699b      	ldr	r3, [r3, #24]
9000f4be:	2b00      	cmp	r3, #0
9000f4c0:	d106      	bne.n	9000f4d0 <tcp_process+0x3e0>
9000f4c2:	4b76      	ldr	r3, [pc, #472]	; (9000f69c <tcp_process+0x5ac>)
9000f4c4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
9000f4c8:	4975      	ldr	r1, [pc, #468]	; (9000f6a0 <tcp_process+0x5b0>)
9000f4ca:	4876      	ldr	r0, [pc, #472]	; (9000f6a4 <tcp_process+0x5b4>)
9000f4cc:	f006 fb92 	bl	90015bf4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
9000f4d0:	687b      	ldr	r3, [r7, #4]
9000f4d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000f4d4:	699b      	ldr	r3, [r3, #24]
9000f4d6:	2b00      	cmp	r3, #0
9000f4d8:	d00a      	beq.n	9000f4f0 <tcp_process+0x400>
9000f4da:	687b      	ldr	r3, [r7, #4]
9000f4dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9000f4de:	699b      	ldr	r3, [r3, #24]
9000f4e0:	687a      	ldr	r2, [r7, #4]
9000f4e2:	6910      	ldr	r0, [r2, #16]
9000f4e4:	2200      	movs	r2, #0
9000f4e6:	6879      	ldr	r1, [r7, #4]
9000f4e8:	4798      	blx	r3
9000f4ea:	4603      	mov	r3, r0
9000f4ec:	76bb      	strb	r3, [r7, #26]
9000f4ee:	e001      	b.n	9000f4f4 <tcp_process+0x404>
9000f4f0:	23f0      	movs	r3, #240	; 0xf0
9000f4f2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
9000f4f4:	f997 301a 	ldrsb.w	r3, [r7, #26]
9000f4f8:	2b00      	cmp	r3, #0
9000f4fa:	d00a      	beq.n	9000f512 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
9000f4fc:	f997 301a 	ldrsb.w	r3, [r7, #26]
9000f500:	f113 0f0d 	cmn.w	r3, #13
9000f504:	d002      	beq.n	9000f50c <tcp_process+0x41c>
              tcp_abort(pcb);
9000f506:	6878      	ldr	r0, [r7, #4]
9000f508:	f7fd fce8 	bl	9000cedc <tcp_abort>
            }
            return ERR_ABRT;
9000f50c:	f06f 030c 	mvn.w	r3, #12
9000f510:	e1ce      	b.n	9000f8b0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
9000f512:	6878      	ldr	r0, [r7, #4]
9000f514:	f000 fae0 	bl	9000fad8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
9000f518:	4b63      	ldr	r3, [pc, #396]	; (9000f6a8 <tcp_process+0x5b8>)
9000f51a:	881b      	ldrh	r3, [r3, #0]
9000f51c:	2b00      	cmp	r3, #0
9000f51e:	d005      	beq.n	9000f52c <tcp_process+0x43c>
            recv_acked--;
9000f520:	4b61      	ldr	r3, [pc, #388]	; (9000f6a8 <tcp_process+0x5b8>)
9000f522:	881b      	ldrh	r3, [r3, #0]
9000f524:	3b01      	subs	r3, #1
9000f526:	b29a      	uxth	r2, r3
9000f528:	4b5f      	ldr	r3, [pc, #380]	; (9000f6a8 <tcp_process+0x5b8>)
9000f52a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
9000f52c:	687b      	ldr	r3, [r7, #4]
9000f52e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000f530:	009a      	lsls	r2, r3, #2
9000f532:	687b      	ldr	r3, [r7, #4]
9000f534:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000f536:	005b      	lsls	r3, r3, #1
9000f538:	f241 111c 	movw	r1, #4380	; 0x111c
9000f53c:	428b      	cmp	r3, r1
9000f53e:	bf38      	it	cc
9000f540:	460b      	movcc	r3, r1
9000f542:	429a      	cmp	r2, r3
9000f544:	d204      	bcs.n	9000f550 <tcp_process+0x460>
9000f546:	687b      	ldr	r3, [r7, #4]
9000f548:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000f54a:	009b      	lsls	r3, r3, #2
9000f54c:	b29b      	uxth	r3, r3
9000f54e:	e00d      	b.n	9000f56c <tcp_process+0x47c>
9000f550:	687b      	ldr	r3, [r7, #4]
9000f552:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000f554:	005b      	lsls	r3, r3, #1
9000f556:	f241 121c 	movw	r2, #4380	; 0x111c
9000f55a:	4293      	cmp	r3, r2
9000f55c:	d904      	bls.n	9000f568 <tcp_process+0x478>
9000f55e:	687b      	ldr	r3, [r7, #4]
9000f560:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000f562:	005b      	lsls	r3, r3, #1
9000f564:	b29b      	uxth	r3, r3
9000f566:	e001      	b.n	9000f56c <tcp_process+0x47c>
9000f568:	f241 131c 	movw	r3, #4380	; 0x111c
9000f56c:	687a      	ldr	r2, [r7, #4]
9000f56e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
9000f572:	4b4e      	ldr	r3, [pc, #312]	; (9000f6ac <tcp_process+0x5bc>)
9000f574:	781b      	ldrb	r3, [r3, #0]
9000f576:	f003 0320 	and.w	r3, r3, #32
9000f57a:	2b00      	cmp	r3, #0
9000f57c:	d037      	beq.n	9000f5ee <tcp_process+0x4fe>
            tcp_ack_now(pcb);
9000f57e:	687b      	ldr	r3, [r7, #4]
9000f580:	8b5b      	ldrh	r3, [r3, #26]
9000f582:	f043 0302 	orr.w	r3, r3, #2
9000f586:	b29a      	uxth	r2, r3
9000f588:	687b      	ldr	r3, [r7, #4]
9000f58a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
9000f58c:	687b      	ldr	r3, [r7, #4]
9000f58e:	2207      	movs	r2, #7
9000f590:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
9000f592:	e02c      	b.n	9000f5ee <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
9000f594:	4b3b      	ldr	r3, [pc, #236]	; (9000f684 <tcp_process+0x594>)
9000f596:	6819      	ldr	r1, [r3, #0]
9000f598:	4b3b      	ldr	r3, [pc, #236]	; (9000f688 <tcp_process+0x598>)
9000f59a:	881b      	ldrh	r3, [r3, #0]
9000f59c:	461a      	mov	r2, r3
9000f59e:	4b3b      	ldr	r3, [pc, #236]	; (9000f68c <tcp_process+0x59c>)
9000f5a0:	681b      	ldr	r3, [r3, #0]
9000f5a2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
9000f5a4:	4b3a      	ldr	r3, [pc, #232]	; (9000f690 <tcp_process+0x5a0>)
9000f5a6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
9000f5a8:	885b      	ldrh	r3, [r3, #2]
9000f5aa:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
9000f5ac:	4a38      	ldr	r2, [pc, #224]	; (9000f690 <tcp_process+0x5a0>)
9000f5ae:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
9000f5b0:	8812      	ldrh	r2, [r2, #0]
9000f5b2:	b292      	uxth	r2, r2
9000f5b4:	9202      	str	r2, [sp, #8]
9000f5b6:	9301      	str	r3, [sp, #4]
9000f5b8:	4b36      	ldr	r3, [pc, #216]	; (9000f694 <tcp_process+0x5a4>)
9000f5ba:	9300      	str	r3, [sp, #0]
9000f5bc:	4b36      	ldr	r3, [pc, #216]	; (9000f698 <tcp_process+0x5a8>)
9000f5be:	4602      	mov	r2, r0
9000f5c0:	6878      	ldr	r0, [r7, #4]
9000f5c2:	f003 f829 	bl	90012618 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
9000f5c6:	e167      	b.n	9000f898 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
9000f5c8:	4b2d      	ldr	r3, [pc, #180]	; (9000f680 <tcp_process+0x590>)
9000f5ca:	781b      	ldrb	r3, [r3, #0]
9000f5cc:	f003 0302 	and.w	r3, r3, #2
9000f5d0:	2b00      	cmp	r3, #0
9000f5d2:	f000 8161 	beq.w	9000f898 <tcp_process+0x7a8>
9000f5d6:	687b      	ldr	r3, [r7, #4]
9000f5d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000f5da:	1e5a      	subs	r2, r3, #1
9000f5dc:	4b2b      	ldr	r3, [pc, #172]	; (9000f68c <tcp_process+0x59c>)
9000f5de:	681b      	ldr	r3, [r3, #0]
9000f5e0:	429a      	cmp	r2, r3
9000f5e2:	f040 8159 	bne.w	9000f898 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
9000f5e6:	6878      	ldr	r0, [r7, #4]
9000f5e8:	f002 fe0e 	bl	90012208 <tcp_rexmit>
      break;
9000f5ec:	e154      	b.n	9000f898 <tcp_process+0x7a8>
9000f5ee:	e153      	b.n	9000f898 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
9000f5f0:	6878      	ldr	r0, [r7, #4]
9000f5f2:	f000 fa71 	bl	9000fad8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
9000f5f6:	4b2d      	ldr	r3, [pc, #180]	; (9000f6ac <tcp_process+0x5bc>)
9000f5f8:	781b      	ldrb	r3, [r3, #0]
9000f5fa:	f003 0320 	and.w	r3, r3, #32
9000f5fe:	2b00      	cmp	r3, #0
9000f600:	f000 814c 	beq.w	9000f89c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
9000f604:	687b      	ldr	r3, [r7, #4]
9000f606:	8b5b      	ldrh	r3, [r3, #26]
9000f608:	f043 0302 	orr.w	r3, r3, #2
9000f60c:	b29a      	uxth	r2, r3
9000f60e:	687b      	ldr	r3, [r7, #4]
9000f610:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
9000f612:	687b      	ldr	r3, [r7, #4]
9000f614:	2207      	movs	r2, #7
9000f616:	751a      	strb	r2, [r3, #20]
      }
      break;
9000f618:	e140      	b.n	9000f89c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
9000f61a:	6878      	ldr	r0, [r7, #4]
9000f61c:	f000 fa5c 	bl	9000fad8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
9000f620:	4b22      	ldr	r3, [pc, #136]	; (9000f6ac <tcp_process+0x5bc>)
9000f622:	781b      	ldrb	r3, [r3, #0]
9000f624:	f003 0320 	and.w	r3, r3, #32
9000f628:	2b00      	cmp	r3, #0
9000f62a:	d071      	beq.n	9000f710 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
9000f62c:	4b14      	ldr	r3, [pc, #80]	; (9000f680 <tcp_process+0x590>)
9000f62e:	781b      	ldrb	r3, [r3, #0]
9000f630:	f003 0310 	and.w	r3, r3, #16
9000f634:	2b00      	cmp	r3, #0
9000f636:	d060      	beq.n	9000f6fa <tcp_process+0x60a>
9000f638:	687b      	ldr	r3, [r7, #4]
9000f63a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
9000f63c:	4b11      	ldr	r3, [pc, #68]	; (9000f684 <tcp_process+0x594>)
9000f63e:	681b      	ldr	r3, [r3, #0]
9000f640:	429a      	cmp	r2, r3
9000f642:	d15a      	bne.n	9000f6fa <tcp_process+0x60a>
            pcb->unsent == NULL) {
9000f644:	687b      	ldr	r3, [r7, #4]
9000f646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
9000f648:	2b00      	cmp	r3, #0
9000f64a:	d156      	bne.n	9000f6fa <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
9000f64c:	687b      	ldr	r3, [r7, #4]
9000f64e:	8b5b      	ldrh	r3, [r3, #26]
9000f650:	f043 0302 	orr.w	r3, r3, #2
9000f654:	b29a      	uxth	r2, r3
9000f656:	687b      	ldr	r3, [r7, #4]
9000f658:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
9000f65a:	6878      	ldr	r0, [r7, #4]
9000f65c:	f7fe fdbc 	bl	9000e1d8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
9000f660:	4b13      	ldr	r3, [pc, #76]	; (9000f6b0 <tcp_process+0x5c0>)
9000f662:	681b      	ldr	r3, [r3, #0]
9000f664:	687a      	ldr	r2, [r7, #4]
9000f666:	429a      	cmp	r2, r3
9000f668:	d105      	bne.n	9000f676 <tcp_process+0x586>
9000f66a:	4b11      	ldr	r3, [pc, #68]	; (9000f6b0 <tcp_process+0x5c0>)
9000f66c:	681b      	ldr	r3, [r3, #0]
9000f66e:	68db      	ldr	r3, [r3, #12]
9000f670:	4a0f      	ldr	r2, [pc, #60]	; (9000f6b0 <tcp_process+0x5c0>)
9000f672:	6013      	str	r3, [r2, #0]
9000f674:	e02e      	b.n	9000f6d4 <tcp_process+0x5e4>
9000f676:	4b0e      	ldr	r3, [pc, #56]	; (9000f6b0 <tcp_process+0x5c0>)
9000f678:	681b      	ldr	r3, [r3, #0]
9000f67a:	617b      	str	r3, [r7, #20]
9000f67c:	e027      	b.n	9000f6ce <tcp_process+0x5de>
9000f67e:	bf00      	nop
9000f680:	2401f3e8 	.word	0x2401f3e8
9000f684:	2401f3e0 	.word	0x2401f3e0
9000f688:	2401f3e6 	.word	0x2401f3e6
9000f68c:	2401f3dc 	.word	0x2401f3dc
9000f690:	2401f3cc 	.word	0x2401f3cc
9000f694:	2401c1d8 	.word	0x2401c1d8
9000f698:	2401c1dc 	.word	0x2401c1dc
9000f69c:	90018f90 	.word	0x90018f90
9000f6a0:	90019230 	.word	0x90019230
9000f6a4:	90018fdc 	.word	0x90018fdc
9000f6a8:	2401f3e4 	.word	0x2401f3e4
9000f6ac:	2401f3e9 	.word	0x2401f3e9
9000f6b0:	2401f3b0 	.word	0x2401f3b0
9000f6b4:	697b      	ldr	r3, [r7, #20]
9000f6b6:	68db      	ldr	r3, [r3, #12]
9000f6b8:	687a      	ldr	r2, [r7, #4]
9000f6ba:	429a      	cmp	r2, r3
9000f6bc:	d104      	bne.n	9000f6c8 <tcp_process+0x5d8>
9000f6be:	687b      	ldr	r3, [r7, #4]
9000f6c0:	68da      	ldr	r2, [r3, #12]
9000f6c2:	697b      	ldr	r3, [r7, #20]
9000f6c4:	60da      	str	r2, [r3, #12]
9000f6c6:	e005      	b.n	9000f6d4 <tcp_process+0x5e4>
9000f6c8:	697b      	ldr	r3, [r7, #20]
9000f6ca:	68db      	ldr	r3, [r3, #12]
9000f6cc:	617b      	str	r3, [r7, #20]
9000f6ce:	697b      	ldr	r3, [r7, #20]
9000f6d0:	2b00      	cmp	r3, #0
9000f6d2:	d1ef      	bne.n	9000f6b4 <tcp_process+0x5c4>
9000f6d4:	687b      	ldr	r3, [r7, #4]
9000f6d6:	2200      	movs	r2, #0
9000f6d8:	60da      	str	r2, [r3, #12]
9000f6da:	4b77      	ldr	r3, [pc, #476]	; (9000f8b8 <tcp_process+0x7c8>)
9000f6dc:	2201      	movs	r2, #1
9000f6de:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
9000f6e0:	687b      	ldr	r3, [r7, #4]
9000f6e2:	220a      	movs	r2, #10
9000f6e4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
9000f6e6:	4b75      	ldr	r3, [pc, #468]	; (9000f8bc <tcp_process+0x7cc>)
9000f6e8:	681a      	ldr	r2, [r3, #0]
9000f6ea:	687b      	ldr	r3, [r7, #4]
9000f6ec:	60da      	str	r2, [r3, #12]
9000f6ee:	4a73      	ldr	r2, [pc, #460]	; (9000f8bc <tcp_process+0x7cc>)
9000f6f0:	687b      	ldr	r3, [r7, #4]
9000f6f2:	6013      	str	r3, [r2, #0]
9000f6f4:	f003 f952 	bl	9001299c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
9000f6f8:	e0d2      	b.n	9000f8a0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
9000f6fa:	687b      	ldr	r3, [r7, #4]
9000f6fc:	8b5b      	ldrh	r3, [r3, #26]
9000f6fe:	f043 0302 	orr.w	r3, r3, #2
9000f702:	b29a      	uxth	r2, r3
9000f704:	687b      	ldr	r3, [r7, #4]
9000f706:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
9000f708:	687b      	ldr	r3, [r7, #4]
9000f70a:	2208      	movs	r2, #8
9000f70c:	751a      	strb	r2, [r3, #20]
      break;
9000f70e:	e0c7      	b.n	9000f8a0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
9000f710:	4b6b      	ldr	r3, [pc, #428]	; (9000f8c0 <tcp_process+0x7d0>)
9000f712:	781b      	ldrb	r3, [r3, #0]
9000f714:	f003 0310 	and.w	r3, r3, #16
9000f718:	2b00      	cmp	r3, #0
9000f71a:	f000 80c1 	beq.w	9000f8a0 <tcp_process+0x7b0>
9000f71e:	687b      	ldr	r3, [r7, #4]
9000f720:	6d1a      	ldr	r2, [r3, #80]	; 0x50
9000f722:	4b68      	ldr	r3, [pc, #416]	; (9000f8c4 <tcp_process+0x7d4>)
9000f724:	681b      	ldr	r3, [r3, #0]
9000f726:	429a      	cmp	r2, r3
9000f728:	f040 80ba 	bne.w	9000f8a0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
9000f72c:	687b      	ldr	r3, [r7, #4]
9000f72e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
9000f730:	2b00      	cmp	r3, #0
9000f732:	f040 80b5 	bne.w	9000f8a0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
9000f736:	687b      	ldr	r3, [r7, #4]
9000f738:	2206      	movs	r2, #6
9000f73a:	751a      	strb	r2, [r3, #20]
      break;
9000f73c:	e0b0      	b.n	9000f8a0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
9000f73e:	6878      	ldr	r0, [r7, #4]
9000f740:	f000 f9ca 	bl	9000fad8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
9000f744:	4b60      	ldr	r3, [pc, #384]	; (9000f8c8 <tcp_process+0x7d8>)
9000f746:	781b      	ldrb	r3, [r3, #0]
9000f748:	f003 0320 	and.w	r3, r3, #32
9000f74c:	2b00      	cmp	r3, #0
9000f74e:	f000 80a9 	beq.w	9000f8a4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
9000f752:	687b      	ldr	r3, [r7, #4]
9000f754:	8b5b      	ldrh	r3, [r3, #26]
9000f756:	f043 0302 	orr.w	r3, r3, #2
9000f75a:	b29a      	uxth	r2, r3
9000f75c:	687b      	ldr	r3, [r7, #4]
9000f75e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
9000f760:	6878      	ldr	r0, [r7, #4]
9000f762:	f7fe fd39 	bl	9000e1d8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
9000f766:	4b59      	ldr	r3, [pc, #356]	; (9000f8cc <tcp_process+0x7dc>)
9000f768:	681b      	ldr	r3, [r3, #0]
9000f76a:	687a      	ldr	r2, [r7, #4]
9000f76c:	429a      	cmp	r2, r3
9000f76e:	d105      	bne.n	9000f77c <tcp_process+0x68c>
9000f770:	4b56      	ldr	r3, [pc, #344]	; (9000f8cc <tcp_process+0x7dc>)
9000f772:	681b      	ldr	r3, [r3, #0]
9000f774:	68db      	ldr	r3, [r3, #12]
9000f776:	4a55      	ldr	r2, [pc, #340]	; (9000f8cc <tcp_process+0x7dc>)
9000f778:	6013      	str	r3, [r2, #0]
9000f77a:	e013      	b.n	9000f7a4 <tcp_process+0x6b4>
9000f77c:	4b53      	ldr	r3, [pc, #332]	; (9000f8cc <tcp_process+0x7dc>)
9000f77e:	681b      	ldr	r3, [r3, #0]
9000f780:	613b      	str	r3, [r7, #16]
9000f782:	e00c      	b.n	9000f79e <tcp_process+0x6ae>
9000f784:	693b      	ldr	r3, [r7, #16]
9000f786:	68db      	ldr	r3, [r3, #12]
9000f788:	687a      	ldr	r2, [r7, #4]
9000f78a:	429a      	cmp	r2, r3
9000f78c:	d104      	bne.n	9000f798 <tcp_process+0x6a8>
9000f78e:	687b      	ldr	r3, [r7, #4]
9000f790:	68da      	ldr	r2, [r3, #12]
9000f792:	693b      	ldr	r3, [r7, #16]
9000f794:	60da      	str	r2, [r3, #12]
9000f796:	e005      	b.n	9000f7a4 <tcp_process+0x6b4>
9000f798:	693b      	ldr	r3, [r7, #16]
9000f79a:	68db      	ldr	r3, [r3, #12]
9000f79c:	613b      	str	r3, [r7, #16]
9000f79e:	693b      	ldr	r3, [r7, #16]
9000f7a0:	2b00      	cmp	r3, #0
9000f7a2:	d1ef      	bne.n	9000f784 <tcp_process+0x694>
9000f7a4:	687b      	ldr	r3, [r7, #4]
9000f7a6:	2200      	movs	r2, #0
9000f7a8:	60da      	str	r2, [r3, #12]
9000f7aa:	4b43      	ldr	r3, [pc, #268]	; (9000f8b8 <tcp_process+0x7c8>)
9000f7ac:	2201      	movs	r2, #1
9000f7ae:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
9000f7b0:	687b      	ldr	r3, [r7, #4]
9000f7b2:	220a      	movs	r2, #10
9000f7b4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
9000f7b6:	4b41      	ldr	r3, [pc, #260]	; (9000f8bc <tcp_process+0x7cc>)
9000f7b8:	681a      	ldr	r2, [r3, #0]
9000f7ba:	687b      	ldr	r3, [r7, #4]
9000f7bc:	60da      	str	r2, [r3, #12]
9000f7be:	4a3f      	ldr	r2, [pc, #252]	; (9000f8bc <tcp_process+0x7cc>)
9000f7c0:	687b      	ldr	r3, [r7, #4]
9000f7c2:	6013      	str	r3, [r2, #0]
9000f7c4:	f003 f8ea 	bl	9001299c <tcp_timer_needed>
      }
      break;
9000f7c8:	e06c      	b.n	9000f8a4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
9000f7ca:	6878      	ldr	r0, [r7, #4]
9000f7cc:	f000 f984 	bl	9000fad8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
9000f7d0:	4b3b      	ldr	r3, [pc, #236]	; (9000f8c0 <tcp_process+0x7d0>)
9000f7d2:	781b      	ldrb	r3, [r3, #0]
9000f7d4:	f003 0310 	and.w	r3, r3, #16
9000f7d8:	2b00      	cmp	r3, #0
9000f7da:	d065      	beq.n	9000f8a8 <tcp_process+0x7b8>
9000f7dc:	687b      	ldr	r3, [r7, #4]
9000f7de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
9000f7e0:	4b38      	ldr	r3, [pc, #224]	; (9000f8c4 <tcp_process+0x7d4>)
9000f7e2:	681b      	ldr	r3, [r3, #0]
9000f7e4:	429a      	cmp	r2, r3
9000f7e6:	d15f      	bne.n	9000f8a8 <tcp_process+0x7b8>
9000f7e8:	687b      	ldr	r3, [r7, #4]
9000f7ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000f7ec:	2b00      	cmp	r3, #0
9000f7ee:	d15b      	bne.n	9000f8a8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
9000f7f0:	6878      	ldr	r0, [r7, #4]
9000f7f2:	f7fe fcf1 	bl	9000e1d8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
9000f7f6:	4b35      	ldr	r3, [pc, #212]	; (9000f8cc <tcp_process+0x7dc>)
9000f7f8:	681b      	ldr	r3, [r3, #0]
9000f7fa:	687a      	ldr	r2, [r7, #4]
9000f7fc:	429a      	cmp	r2, r3
9000f7fe:	d105      	bne.n	9000f80c <tcp_process+0x71c>
9000f800:	4b32      	ldr	r3, [pc, #200]	; (9000f8cc <tcp_process+0x7dc>)
9000f802:	681b      	ldr	r3, [r3, #0]
9000f804:	68db      	ldr	r3, [r3, #12]
9000f806:	4a31      	ldr	r2, [pc, #196]	; (9000f8cc <tcp_process+0x7dc>)
9000f808:	6013      	str	r3, [r2, #0]
9000f80a:	e013      	b.n	9000f834 <tcp_process+0x744>
9000f80c:	4b2f      	ldr	r3, [pc, #188]	; (9000f8cc <tcp_process+0x7dc>)
9000f80e:	681b      	ldr	r3, [r3, #0]
9000f810:	60fb      	str	r3, [r7, #12]
9000f812:	e00c      	b.n	9000f82e <tcp_process+0x73e>
9000f814:	68fb      	ldr	r3, [r7, #12]
9000f816:	68db      	ldr	r3, [r3, #12]
9000f818:	687a      	ldr	r2, [r7, #4]
9000f81a:	429a      	cmp	r2, r3
9000f81c:	d104      	bne.n	9000f828 <tcp_process+0x738>
9000f81e:	687b      	ldr	r3, [r7, #4]
9000f820:	68da      	ldr	r2, [r3, #12]
9000f822:	68fb      	ldr	r3, [r7, #12]
9000f824:	60da      	str	r2, [r3, #12]
9000f826:	e005      	b.n	9000f834 <tcp_process+0x744>
9000f828:	68fb      	ldr	r3, [r7, #12]
9000f82a:	68db      	ldr	r3, [r3, #12]
9000f82c:	60fb      	str	r3, [r7, #12]
9000f82e:	68fb      	ldr	r3, [r7, #12]
9000f830:	2b00      	cmp	r3, #0
9000f832:	d1ef      	bne.n	9000f814 <tcp_process+0x724>
9000f834:	687b      	ldr	r3, [r7, #4]
9000f836:	2200      	movs	r2, #0
9000f838:	60da      	str	r2, [r3, #12]
9000f83a:	4b1f      	ldr	r3, [pc, #124]	; (9000f8b8 <tcp_process+0x7c8>)
9000f83c:	2201      	movs	r2, #1
9000f83e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
9000f840:	687b      	ldr	r3, [r7, #4]
9000f842:	220a      	movs	r2, #10
9000f844:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
9000f846:	4b1d      	ldr	r3, [pc, #116]	; (9000f8bc <tcp_process+0x7cc>)
9000f848:	681a      	ldr	r2, [r3, #0]
9000f84a:	687b      	ldr	r3, [r7, #4]
9000f84c:	60da      	str	r2, [r3, #12]
9000f84e:	4a1b      	ldr	r2, [pc, #108]	; (9000f8bc <tcp_process+0x7cc>)
9000f850:	687b      	ldr	r3, [r7, #4]
9000f852:	6013      	str	r3, [r2, #0]
9000f854:	f003 f8a2 	bl	9001299c <tcp_timer_needed>
      }
      break;
9000f858:	e026      	b.n	9000f8a8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
9000f85a:	6878      	ldr	r0, [r7, #4]
9000f85c:	f000 f93c 	bl	9000fad8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
9000f860:	4b17      	ldr	r3, [pc, #92]	; (9000f8c0 <tcp_process+0x7d0>)
9000f862:	781b      	ldrb	r3, [r3, #0]
9000f864:	f003 0310 	and.w	r3, r3, #16
9000f868:	2b00      	cmp	r3, #0
9000f86a:	d01f      	beq.n	9000f8ac <tcp_process+0x7bc>
9000f86c:	687b      	ldr	r3, [r7, #4]
9000f86e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
9000f870:	4b14      	ldr	r3, [pc, #80]	; (9000f8c4 <tcp_process+0x7d4>)
9000f872:	681b      	ldr	r3, [r3, #0]
9000f874:	429a      	cmp	r2, r3
9000f876:	d119      	bne.n	9000f8ac <tcp_process+0x7bc>
9000f878:	687b      	ldr	r3, [r7, #4]
9000f87a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000f87c:	2b00      	cmp	r3, #0
9000f87e:	d115      	bne.n	9000f8ac <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
9000f880:	4b11      	ldr	r3, [pc, #68]	; (9000f8c8 <tcp_process+0x7d8>)
9000f882:	781b      	ldrb	r3, [r3, #0]
9000f884:	f043 0310 	orr.w	r3, r3, #16
9000f888:	b2da      	uxtb	r2, r3
9000f88a:	4b0f      	ldr	r3, [pc, #60]	; (9000f8c8 <tcp_process+0x7d8>)
9000f88c:	701a      	strb	r2, [r3, #0]
      }
      break;
9000f88e:	e00d      	b.n	9000f8ac <tcp_process+0x7bc>
    default:
      break;
9000f890:	bf00      	nop
9000f892:	e00c      	b.n	9000f8ae <tcp_process+0x7be>
      break;
9000f894:	bf00      	nop
9000f896:	e00a      	b.n	9000f8ae <tcp_process+0x7be>
      break;
9000f898:	bf00      	nop
9000f89a:	e008      	b.n	9000f8ae <tcp_process+0x7be>
      break;
9000f89c:	bf00      	nop
9000f89e:	e006      	b.n	9000f8ae <tcp_process+0x7be>
      break;
9000f8a0:	bf00      	nop
9000f8a2:	e004      	b.n	9000f8ae <tcp_process+0x7be>
      break;
9000f8a4:	bf00      	nop
9000f8a6:	e002      	b.n	9000f8ae <tcp_process+0x7be>
      break;
9000f8a8:	bf00      	nop
9000f8aa:	e000      	b.n	9000f8ae <tcp_process+0x7be>
      break;
9000f8ac:	bf00      	nop
  }
  return ERR_OK;
9000f8ae:	2300      	movs	r3, #0
}
9000f8b0:	4618      	mov	r0, r3
9000f8b2:	3724      	adds	r7, #36	; 0x24
9000f8b4:	46bd      	mov	sp, r7
9000f8b6:	bd90      	pop	{r4, r7, pc}
9000f8b8:	2401f3b8 	.word	0x2401f3b8
9000f8bc:	2401f3b4 	.word	0x2401f3b4
9000f8c0:	2401f3e8 	.word	0x2401f3e8
9000f8c4:	2401f3e0 	.word	0x2401f3e0
9000f8c8:	2401f3e9 	.word	0x2401f3e9
9000f8cc:	2401f3b0 	.word	0x2401f3b0

9000f8d0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
9000f8d0:	b590      	push	{r4, r7, lr}
9000f8d2:	b085      	sub	sp, #20
9000f8d4:	af00      	add	r7, sp, #0
9000f8d6:	6078      	str	r0, [r7, #4]
9000f8d8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
9000f8da:	687b      	ldr	r3, [r7, #4]
9000f8dc:	2b00      	cmp	r3, #0
9000f8de:	d106      	bne.n	9000f8ee <tcp_oos_insert_segment+0x1e>
9000f8e0:	4b3b      	ldr	r3, [pc, #236]	; (9000f9d0 <tcp_oos_insert_segment+0x100>)
9000f8e2:	f240 421f 	movw	r2, #1055	; 0x41f
9000f8e6:	493b      	ldr	r1, [pc, #236]	; (9000f9d4 <tcp_oos_insert_segment+0x104>)
9000f8e8:	483b      	ldr	r0, [pc, #236]	; (9000f9d8 <tcp_oos_insert_segment+0x108>)
9000f8ea:	f006 f983 	bl	90015bf4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
9000f8ee:	687b      	ldr	r3, [r7, #4]
9000f8f0:	68db      	ldr	r3, [r3, #12]
9000f8f2:	899b      	ldrh	r3, [r3, #12]
9000f8f4:	b29b      	uxth	r3, r3
9000f8f6:	4618      	mov	r0, r3
9000f8f8:	f7fb f848 	bl	9000a98c <lwip_htons>
9000f8fc:	4603      	mov	r3, r0
9000f8fe:	b2db      	uxtb	r3, r3
9000f900:	f003 0301 	and.w	r3, r3, #1
9000f904:	2b00      	cmp	r3, #0
9000f906:	d028      	beq.n	9000f95a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
9000f908:	6838      	ldr	r0, [r7, #0]
9000f90a:	f7fe f977 	bl	9000dbfc <tcp_segs_free>
    next = NULL;
9000f90e:	2300      	movs	r3, #0
9000f910:	603b      	str	r3, [r7, #0]
9000f912:	e056      	b.n	9000f9c2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
9000f914:	683b      	ldr	r3, [r7, #0]
9000f916:	68db      	ldr	r3, [r3, #12]
9000f918:	899b      	ldrh	r3, [r3, #12]
9000f91a:	b29b      	uxth	r3, r3
9000f91c:	4618      	mov	r0, r3
9000f91e:	f7fb f835 	bl	9000a98c <lwip_htons>
9000f922:	4603      	mov	r3, r0
9000f924:	b2db      	uxtb	r3, r3
9000f926:	f003 0301 	and.w	r3, r3, #1
9000f92a:	2b00      	cmp	r3, #0
9000f92c:	d00d      	beq.n	9000f94a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
9000f92e:	687b      	ldr	r3, [r7, #4]
9000f930:	68db      	ldr	r3, [r3, #12]
9000f932:	899b      	ldrh	r3, [r3, #12]
9000f934:	b29c      	uxth	r4, r3
9000f936:	2001      	movs	r0, #1
9000f938:	f7fb f828 	bl	9000a98c <lwip_htons>
9000f93c:	4603      	mov	r3, r0
9000f93e:	461a      	mov	r2, r3
9000f940:	687b      	ldr	r3, [r7, #4]
9000f942:	68db      	ldr	r3, [r3, #12]
9000f944:	4322      	orrs	r2, r4
9000f946:	b292      	uxth	r2, r2
9000f948:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
9000f94a:	683b      	ldr	r3, [r7, #0]
9000f94c:	60fb      	str	r3, [r7, #12]
      next = next->next;
9000f94e:	683b      	ldr	r3, [r7, #0]
9000f950:	681b      	ldr	r3, [r3, #0]
9000f952:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
9000f954:	68f8      	ldr	r0, [r7, #12]
9000f956:	f7fe f966 	bl	9000dc26 <tcp_seg_free>
    while (next &&
9000f95a:	683b      	ldr	r3, [r7, #0]
9000f95c:	2b00      	cmp	r3, #0
9000f95e:	d00e      	beq.n	9000f97e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
9000f960:	687b      	ldr	r3, [r7, #4]
9000f962:	891b      	ldrh	r3, [r3, #8]
9000f964:	461a      	mov	r2, r3
9000f966:	4b1d      	ldr	r3, [pc, #116]	; (9000f9dc <tcp_oos_insert_segment+0x10c>)
9000f968:	681b      	ldr	r3, [r3, #0]
9000f96a:	441a      	add	r2, r3
9000f96c:	683b      	ldr	r3, [r7, #0]
9000f96e:	68db      	ldr	r3, [r3, #12]
9000f970:	685b      	ldr	r3, [r3, #4]
9000f972:	6839      	ldr	r1, [r7, #0]
9000f974:	8909      	ldrh	r1, [r1, #8]
9000f976:	440b      	add	r3, r1
9000f978:	1ad3      	subs	r3, r2, r3
    while (next &&
9000f97a:	2b00      	cmp	r3, #0
9000f97c:	daca      	bge.n	9000f914 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
9000f97e:	683b      	ldr	r3, [r7, #0]
9000f980:	2b00      	cmp	r3, #0
9000f982:	d01e      	beq.n	9000f9c2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
9000f984:	687b      	ldr	r3, [r7, #4]
9000f986:	891b      	ldrh	r3, [r3, #8]
9000f988:	461a      	mov	r2, r3
9000f98a:	4b14      	ldr	r3, [pc, #80]	; (9000f9dc <tcp_oos_insert_segment+0x10c>)
9000f98c:	681b      	ldr	r3, [r3, #0]
9000f98e:	441a      	add	r2, r3
9000f990:	683b      	ldr	r3, [r7, #0]
9000f992:	68db      	ldr	r3, [r3, #12]
9000f994:	685b      	ldr	r3, [r3, #4]
9000f996:	1ad3      	subs	r3, r2, r3
    if (next &&
9000f998:	2b00      	cmp	r3, #0
9000f99a:	dd12      	ble.n	9000f9c2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
9000f99c:	683b      	ldr	r3, [r7, #0]
9000f99e:	68db      	ldr	r3, [r3, #12]
9000f9a0:	685b      	ldr	r3, [r3, #4]
9000f9a2:	b29a      	uxth	r2, r3
9000f9a4:	4b0d      	ldr	r3, [pc, #52]	; (9000f9dc <tcp_oos_insert_segment+0x10c>)
9000f9a6:	681b      	ldr	r3, [r3, #0]
9000f9a8:	b29b      	uxth	r3, r3
9000f9aa:	1ad3      	subs	r3, r2, r3
9000f9ac:	b29a      	uxth	r2, r3
9000f9ae:	687b      	ldr	r3, [r7, #4]
9000f9b0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
9000f9b2:	687b      	ldr	r3, [r7, #4]
9000f9b4:	685a      	ldr	r2, [r3, #4]
9000f9b6:	687b      	ldr	r3, [r7, #4]
9000f9b8:	891b      	ldrh	r3, [r3, #8]
9000f9ba:	4619      	mov	r1, r3
9000f9bc:	4610      	mov	r0, r2
9000f9be:	f7fc fb73 	bl	9000c0a8 <pbuf_realloc>
    }
  }
  cseg->next = next;
9000f9c2:	687b      	ldr	r3, [r7, #4]
9000f9c4:	683a      	ldr	r2, [r7, #0]
9000f9c6:	601a      	str	r2, [r3, #0]
}
9000f9c8:	bf00      	nop
9000f9ca:	3714      	adds	r7, #20
9000f9cc:	46bd      	mov	sp, r7
9000f9ce:	bd90      	pop	{r4, r7, pc}
9000f9d0:	90018f90 	.word	0x90018f90
9000f9d4:	90019250 	.word	0x90019250
9000f9d8:	90018fdc 	.word	0x90018fdc
9000f9dc:	2401f3dc 	.word	0x2401f3dc

9000f9e0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
9000f9e0:	b5b0      	push	{r4, r5, r7, lr}
9000f9e2:	b086      	sub	sp, #24
9000f9e4:	af00      	add	r7, sp, #0
9000f9e6:	60f8      	str	r0, [r7, #12]
9000f9e8:	60b9      	str	r1, [r7, #8]
9000f9ea:	607a      	str	r2, [r7, #4]
9000f9ec:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
9000f9ee:	e03e      	b.n	9000fa6e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
9000f9f0:	68bb      	ldr	r3, [r7, #8]
9000f9f2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
9000f9f4:	68bb      	ldr	r3, [r7, #8]
9000f9f6:	681b      	ldr	r3, [r3, #0]
9000f9f8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
9000f9fa:	697b      	ldr	r3, [r7, #20]
9000f9fc:	685b      	ldr	r3, [r3, #4]
9000f9fe:	4618      	mov	r0, r3
9000fa00:	f7fc fd66 	bl	9000c4d0 <pbuf_clen>
9000fa04:	4603      	mov	r3, r0
9000fa06:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
9000fa08:	68fb      	ldr	r3, [r7, #12]
9000fa0a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
9000fa0e:	8a7a      	ldrh	r2, [r7, #18]
9000fa10:	429a      	cmp	r2, r3
9000fa12:	d906      	bls.n	9000fa22 <tcp_free_acked_segments+0x42>
9000fa14:	4b2a      	ldr	r3, [pc, #168]	; (9000fac0 <tcp_free_acked_segments+0xe0>)
9000fa16:	f240 4257 	movw	r2, #1111	; 0x457
9000fa1a:	492a      	ldr	r1, [pc, #168]	; (9000fac4 <tcp_free_acked_segments+0xe4>)
9000fa1c:	482a      	ldr	r0, [pc, #168]	; (9000fac8 <tcp_free_acked_segments+0xe8>)
9000fa1e:	f006 f8e9 	bl	90015bf4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
9000fa22:	68fb      	ldr	r3, [r7, #12]
9000fa24:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
9000fa28:	8a7b      	ldrh	r3, [r7, #18]
9000fa2a:	1ad3      	subs	r3, r2, r3
9000fa2c:	b29a      	uxth	r2, r3
9000fa2e:	68fb      	ldr	r3, [r7, #12]
9000fa30:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
9000fa34:	697b      	ldr	r3, [r7, #20]
9000fa36:	891a      	ldrh	r2, [r3, #8]
9000fa38:	4b24      	ldr	r3, [pc, #144]	; (9000facc <tcp_free_acked_segments+0xec>)
9000fa3a:	881b      	ldrh	r3, [r3, #0]
9000fa3c:	4413      	add	r3, r2
9000fa3e:	b29a      	uxth	r2, r3
9000fa40:	4b22      	ldr	r3, [pc, #136]	; (9000facc <tcp_free_acked_segments+0xec>)
9000fa42:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
9000fa44:	6978      	ldr	r0, [r7, #20]
9000fa46:	f7fe f8ee 	bl	9000dc26 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
9000fa4a:	68fb      	ldr	r3, [r7, #12]
9000fa4c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
9000fa50:	2b00      	cmp	r3, #0
9000fa52:	d00c      	beq.n	9000fa6e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
9000fa54:	68bb      	ldr	r3, [r7, #8]
9000fa56:	2b00      	cmp	r3, #0
9000fa58:	d109      	bne.n	9000fa6e <tcp_free_acked_segments+0x8e>
9000fa5a:	683b      	ldr	r3, [r7, #0]
9000fa5c:	2b00      	cmp	r3, #0
9000fa5e:	d106      	bne.n	9000fa6e <tcp_free_acked_segments+0x8e>
9000fa60:	4b17      	ldr	r3, [pc, #92]	; (9000fac0 <tcp_free_acked_segments+0xe0>)
9000fa62:	f240 4261 	movw	r2, #1121	; 0x461
9000fa66:	491a      	ldr	r1, [pc, #104]	; (9000fad0 <tcp_free_acked_segments+0xf0>)
9000fa68:	4817      	ldr	r0, [pc, #92]	; (9000fac8 <tcp_free_acked_segments+0xe8>)
9000fa6a:	f006 f8c3 	bl	90015bf4 <iprintf>
  while (seg_list != NULL &&
9000fa6e:	68bb      	ldr	r3, [r7, #8]
9000fa70:	2b00      	cmp	r3, #0
9000fa72:	d020      	beq.n	9000fab6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
9000fa74:	68bb      	ldr	r3, [r7, #8]
9000fa76:	68db      	ldr	r3, [r3, #12]
9000fa78:	685b      	ldr	r3, [r3, #4]
9000fa7a:	4618      	mov	r0, r3
9000fa7c:	f7fa ff9b 	bl	9000a9b6 <lwip_htonl>
9000fa80:	4604      	mov	r4, r0
9000fa82:	68bb      	ldr	r3, [r7, #8]
9000fa84:	891b      	ldrh	r3, [r3, #8]
9000fa86:	461d      	mov	r5, r3
9000fa88:	68bb      	ldr	r3, [r7, #8]
9000fa8a:	68db      	ldr	r3, [r3, #12]
9000fa8c:	899b      	ldrh	r3, [r3, #12]
9000fa8e:	b29b      	uxth	r3, r3
9000fa90:	4618      	mov	r0, r3
9000fa92:	f7fa ff7b 	bl	9000a98c <lwip_htons>
9000fa96:	4603      	mov	r3, r0
9000fa98:	b2db      	uxtb	r3, r3
9000fa9a:	f003 0303 	and.w	r3, r3, #3
9000fa9e:	2b00      	cmp	r3, #0
9000faa0:	d001      	beq.n	9000faa6 <tcp_free_acked_segments+0xc6>
9000faa2:	2301      	movs	r3, #1
9000faa4:	e000      	b.n	9000faa8 <tcp_free_acked_segments+0xc8>
9000faa6:	2300      	movs	r3, #0
9000faa8:	442b      	add	r3, r5
9000faaa:	18e2      	adds	r2, r4, r3
9000faac:	4b09      	ldr	r3, [pc, #36]	; (9000fad4 <tcp_free_acked_segments+0xf4>)
9000faae:	681b      	ldr	r3, [r3, #0]
9000fab0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
9000fab2:	2b00      	cmp	r3, #0
9000fab4:	dd9c      	ble.n	9000f9f0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
9000fab6:	68bb      	ldr	r3, [r7, #8]
}
9000fab8:	4618      	mov	r0, r3
9000faba:	3718      	adds	r7, #24
9000fabc:	46bd      	mov	sp, r7
9000fabe:	bdb0      	pop	{r4, r5, r7, pc}
9000fac0:	90018f90 	.word	0x90018f90
9000fac4:	90019278 	.word	0x90019278
9000fac8:	90018fdc 	.word	0x90018fdc
9000facc:	2401f3e4 	.word	0x2401f3e4
9000fad0:	900192a0 	.word	0x900192a0
9000fad4:	2401f3e0 	.word	0x2401f3e0

9000fad8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
9000fad8:	b5b0      	push	{r4, r5, r7, lr}
9000fada:	b094      	sub	sp, #80	; 0x50
9000fadc:	af00      	add	r7, sp, #0
9000fade:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
9000fae0:	2300      	movs	r3, #0
9000fae2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
9000fae4:	687b      	ldr	r3, [r7, #4]
9000fae6:	2b00      	cmp	r3, #0
9000fae8:	d106      	bne.n	9000faf8 <tcp_receive+0x20>
9000faea:	4b91      	ldr	r3, [pc, #580]	; (9000fd30 <tcp_receive+0x258>)
9000faec:	f240 427b 	movw	r2, #1147	; 0x47b
9000faf0:	4990      	ldr	r1, [pc, #576]	; (9000fd34 <tcp_receive+0x25c>)
9000faf2:	4891      	ldr	r0, [pc, #580]	; (9000fd38 <tcp_receive+0x260>)
9000faf4:	f006 f87e 	bl	90015bf4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
9000faf8:	687b      	ldr	r3, [r7, #4]
9000fafa:	7d1b      	ldrb	r3, [r3, #20]
9000fafc:	2b03      	cmp	r3, #3
9000fafe:	d806      	bhi.n	9000fb0e <tcp_receive+0x36>
9000fb00:	4b8b      	ldr	r3, [pc, #556]	; (9000fd30 <tcp_receive+0x258>)
9000fb02:	f240 427c 	movw	r2, #1148	; 0x47c
9000fb06:	498d      	ldr	r1, [pc, #564]	; (9000fd3c <tcp_receive+0x264>)
9000fb08:	488b      	ldr	r0, [pc, #556]	; (9000fd38 <tcp_receive+0x260>)
9000fb0a:	f006 f873 	bl	90015bf4 <iprintf>

  if (flags & TCP_ACK) {
9000fb0e:	4b8c      	ldr	r3, [pc, #560]	; (9000fd40 <tcp_receive+0x268>)
9000fb10:	781b      	ldrb	r3, [r3, #0]
9000fb12:	f003 0310 	and.w	r3, r3, #16
9000fb16:	2b00      	cmp	r3, #0
9000fb18:	f000 8264 	beq.w	9000ffe4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
9000fb1c:	687b      	ldr	r3, [r7, #4]
9000fb1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
9000fb22:	461a      	mov	r2, r3
9000fb24:	687b      	ldr	r3, [r7, #4]
9000fb26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
9000fb28:	4413      	add	r3, r2
9000fb2a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
9000fb2c:	687b      	ldr	r3, [r7, #4]
9000fb2e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
9000fb30:	4b84      	ldr	r3, [pc, #528]	; (9000fd44 <tcp_receive+0x26c>)
9000fb32:	681b      	ldr	r3, [r3, #0]
9000fb34:	1ad3      	subs	r3, r2, r3
9000fb36:	2b00      	cmp	r3, #0
9000fb38:	db1b      	blt.n	9000fb72 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
9000fb3a:	687b      	ldr	r3, [r7, #4]
9000fb3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
9000fb3e:	4b81      	ldr	r3, [pc, #516]	; (9000fd44 <tcp_receive+0x26c>)
9000fb40:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
9000fb42:	429a      	cmp	r2, r3
9000fb44:	d106      	bne.n	9000fb54 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
9000fb46:	687b      	ldr	r3, [r7, #4]
9000fb48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
9000fb4a:	4b7f      	ldr	r3, [pc, #508]	; (9000fd48 <tcp_receive+0x270>)
9000fb4c:	681b      	ldr	r3, [r3, #0]
9000fb4e:	1ad3      	subs	r3, r2, r3
9000fb50:	2b00      	cmp	r3, #0
9000fb52:	db0e      	blt.n	9000fb72 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
9000fb54:	687b      	ldr	r3, [r7, #4]
9000fb56:	6d9a      	ldr	r2, [r3, #88]	; 0x58
9000fb58:	4b7b      	ldr	r3, [pc, #492]	; (9000fd48 <tcp_receive+0x270>)
9000fb5a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
9000fb5c:	429a      	cmp	r2, r3
9000fb5e:	d125      	bne.n	9000fbac <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
9000fb60:	4b7a      	ldr	r3, [pc, #488]	; (9000fd4c <tcp_receive+0x274>)
9000fb62:	681b      	ldr	r3, [r3, #0]
9000fb64:	89db      	ldrh	r3, [r3, #14]
9000fb66:	b29a      	uxth	r2, r3
9000fb68:	687b      	ldr	r3, [r7, #4]
9000fb6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
9000fb6e:	429a      	cmp	r2, r3
9000fb70:	d91c      	bls.n	9000fbac <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
9000fb72:	4b76      	ldr	r3, [pc, #472]	; (9000fd4c <tcp_receive+0x274>)
9000fb74:	681b      	ldr	r3, [r3, #0]
9000fb76:	89db      	ldrh	r3, [r3, #14]
9000fb78:	b29a      	uxth	r2, r3
9000fb7a:	687b      	ldr	r3, [r7, #4]
9000fb7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
9000fb80:	687b      	ldr	r3, [r7, #4]
9000fb82:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
9000fb86:	687b      	ldr	r3, [r7, #4]
9000fb88:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
9000fb8c:	429a      	cmp	r2, r3
9000fb8e:	d205      	bcs.n	9000fb9c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
9000fb90:	687b      	ldr	r3, [r7, #4]
9000fb92:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
9000fb96:	687b      	ldr	r3, [r7, #4]
9000fb98:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
9000fb9c:	4b69      	ldr	r3, [pc, #420]	; (9000fd44 <tcp_receive+0x26c>)
9000fb9e:	681a      	ldr	r2, [r3, #0]
9000fba0:	687b      	ldr	r3, [r7, #4]
9000fba2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
9000fba4:	4b68      	ldr	r3, [pc, #416]	; (9000fd48 <tcp_receive+0x270>)
9000fba6:	681a      	ldr	r2, [r3, #0]
9000fba8:	687b      	ldr	r3, [r7, #4]
9000fbaa:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
9000fbac:	4b66      	ldr	r3, [pc, #408]	; (9000fd48 <tcp_receive+0x270>)
9000fbae:	681a      	ldr	r2, [r3, #0]
9000fbb0:	687b      	ldr	r3, [r7, #4]
9000fbb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9000fbb4:	1ad3      	subs	r3, r2, r3
9000fbb6:	2b00      	cmp	r3, #0
9000fbb8:	dc58      	bgt.n	9000fc6c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
9000fbba:	4b65      	ldr	r3, [pc, #404]	; (9000fd50 <tcp_receive+0x278>)
9000fbbc:	881b      	ldrh	r3, [r3, #0]
9000fbbe:	2b00      	cmp	r3, #0
9000fbc0:	d14b      	bne.n	9000fc5a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
9000fbc2:	687b      	ldr	r3, [r7, #4]
9000fbc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
9000fbc6:	687a      	ldr	r2, [r7, #4]
9000fbc8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
9000fbcc:	4413      	add	r3, r2
9000fbce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
9000fbd0:	429a      	cmp	r2, r3
9000fbd2:	d142      	bne.n	9000fc5a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
9000fbd4:	687b      	ldr	r3, [r7, #4]
9000fbd6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
9000fbda:	2b00      	cmp	r3, #0
9000fbdc:	db3d      	blt.n	9000fc5a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
9000fbde:	687b      	ldr	r3, [r7, #4]
9000fbe0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
9000fbe2:	4b59      	ldr	r3, [pc, #356]	; (9000fd48 <tcp_receive+0x270>)
9000fbe4:	681b      	ldr	r3, [r3, #0]
9000fbe6:	429a      	cmp	r2, r3
9000fbe8:	d137      	bne.n	9000fc5a <tcp_receive+0x182>
              found_dupack = 1;
9000fbea:	2301      	movs	r3, #1
9000fbec:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
9000fbee:	687b      	ldr	r3, [r7, #4]
9000fbf0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
9000fbf4:	2bff      	cmp	r3, #255	; 0xff
9000fbf6:	d007      	beq.n	9000fc08 <tcp_receive+0x130>
                ++pcb->dupacks;
9000fbf8:	687b      	ldr	r3, [r7, #4]
9000fbfa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
9000fbfe:	3301      	adds	r3, #1
9000fc00:	b2da      	uxtb	r2, r3
9000fc02:	687b      	ldr	r3, [r7, #4]
9000fc04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
9000fc08:	687b      	ldr	r3, [r7, #4]
9000fc0a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
9000fc0e:	2b03      	cmp	r3, #3
9000fc10:	d91b      	bls.n	9000fc4a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
9000fc12:	687b      	ldr	r3, [r7, #4]
9000fc14:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
9000fc18:	687b      	ldr	r3, [r7, #4]
9000fc1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000fc1c:	4413      	add	r3, r2
9000fc1e:	b29a      	uxth	r2, r3
9000fc20:	687b      	ldr	r3, [r7, #4]
9000fc22:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
9000fc26:	429a      	cmp	r2, r3
9000fc28:	d30a      	bcc.n	9000fc40 <tcp_receive+0x168>
9000fc2a:	687b      	ldr	r3, [r7, #4]
9000fc2c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
9000fc30:	687b      	ldr	r3, [r7, #4]
9000fc32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000fc34:	4413      	add	r3, r2
9000fc36:	b29a      	uxth	r2, r3
9000fc38:	687b      	ldr	r3, [r7, #4]
9000fc3a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
9000fc3e:	e004      	b.n	9000fc4a <tcp_receive+0x172>
9000fc40:	687b      	ldr	r3, [r7, #4]
9000fc42:	f64f 72ff 	movw	r2, #65535	; 0xffff
9000fc46:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
9000fc4a:	687b      	ldr	r3, [r7, #4]
9000fc4c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
9000fc50:	2b02      	cmp	r3, #2
9000fc52:	d902      	bls.n	9000fc5a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
9000fc54:	6878      	ldr	r0, [r7, #4]
9000fc56:	f002 fb43 	bl	900122e0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
9000fc5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
9000fc5c:	2b00      	cmp	r3, #0
9000fc5e:	f040 8161 	bne.w	9000ff24 <tcp_receive+0x44c>
        pcb->dupacks = 0;
9000fc62:	687b      	ldr	r3, [r7, #4]
9000fc64:	2200      	movs	r2, #0
9000fc66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
9000fc6a:	e15b      	b.n	9000ff24 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
9000fc6c:	4b36      	ldr	r3, [pc, #216]	; (9000fd48 <tcp_receive+0x270>)
9000fc6e:	681a      	ldr	r2, [r3, #0]
9000fc70:	687b      	ldr	r3, [r7, #4]
9000fc72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9000fc74:	1ad3      	subs	r3, r2, r3
9000fc76:	3b01      	subs	r3, #1
9000fc78:	2b00      	cmp	r3, #0
9000fc7a:	f2c0 814e 	blt.w	9000ff1a <tcp_receive+0x442>
9000fc7e:	4b32      	ldr	r3, [pc, #200]	; (9000fd48 <tcp_receive+0x270>)
9000fc80:	681a      	ldr	r2, [r3, #0]
9000fc82:	687b      	ldr	r3, [r7, #4]
9000fc84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9000fc86:	1ad3      	subs	r3, r2, r3
9000fc88:	2b00      	cmp	r3, #0
9000fc8a:	f300 8146 	bgt.w	9000ff1a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
9000fc8e:	687b      	ldr	r3, [r7, #4]
9000fc90:	8b5b      	ldrh	r3, [r3, #26]
9000fc92:	f003 0304 	and.w	r3, r3, #4
9000fc96:	2b00      	cmp	r3, #0
9000fc98:	d010      	beq.n	9000fcbc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
9000fc9a:	687b      	ldr	r3, [r7, #4]
9000fc9c:	8b5b      	ldrh	r3, [r3, #26]
9000fc9e:	f023 0304 	bic.w	r3, r3, #4
9000fca2:	b29a      	uxth	r2, r3
9000fca4:	687b      	ldr	r3, [r7, #4]
9000fca6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
9000fca8:	687b      	ldr	r3, [r7, #4]
9000fcaa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
9000fcae:	687b      	ldr	r3, [r7, #4]
9000fcb0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
9000fcb4:	687b      	ldr	r3, [r7, #4]
9000fcb6:	2200      	movs	r2, #0
9000fcb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
9000fcbc:	687b      	ldr	r3, [r7, #4]
9000fcbe:	2200      	movs	r2, #0
9000fcc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
9000fcc4:	687b      	ldr	r3, [r7, #4]
9000fcc6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
9000fcca:	10db      	asrs	r3, r3, #3
9000fccc:	b21b      	sxth	r3, r3
9000fcce:	b29a      	uxth	r2, r3
9000fcd0:	687b      	ldr	r3, [r7, #4]
9000fcd2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
9000fcd6:	b29b      	uxth	r3, r3
9000fcd8:	4413      	add	r3, r2
9000fcda:	b29b      	uxth	r3, r3
9000fcdc:	b21a      	sxth	r2, r3
9000fcde:	687b      	ldr	r3, [r7, #4]
9000fce0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
9000fce4:	4b18      	ldr	r3, [pc, #96]	; (9000fd48 <tcp_receive+0x270>)
9000fce6:	681b      	ldr	r3, [r3, #0]
9000fce8:	b29a      	uxth	r2, r3
9000fcea:	687b      	ldr	r3, [r7, #4]
9000fcec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9000fcee:	b29b      	uxth	r3, r3
9000fcf0:	1ad3      	subs	r3, r2, r3
9000fcf2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
9000fcf4:	687b      	ldr	r3, [r7, #4]
9000fcf6:	2200      	movs	r2, #0
9000fcf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
9000fcfc:	4b12      	ldr	r3, [pc, #72]	; (9000fd48 <tcp_receive+0x270>)
9000fcfe:	681a      	ldr	r2, [r3, #0]
9000fd00:	687b      	ldr	r3, [r7, #4]
9000fd02:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
9000fd04:	687b      	ldr	r3, [r7, #4]
9000fd06:	7d1b      	ldrb	r3, [r3, #20]
9000fd08:	2b03      	cmp	r3, #3
9000fd0a:	f240 8097 	bls.w	9000fe3c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
9000fd0e:	687b      	ldr	r3, [r7, #4]
9000fd10:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
9000fd14:	687b      	ldr	r3, [r7, #4]
9000fd16:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
9000fd1a:	429a      	cmp	r2, r3
9000fd1c:	d245      	bcs.n	9000fdaa <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
9000fd1e:	687b      	ldr	r3, [r7, #4]
9000fd20:	8b5b      	ldrh	r3, [r3, #26]
9000fd22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
9000fd26:	2b00      	cmp	r3, #0
9000fd28:	d014      	beq.n	9000fd54 <tcp_receive+0x27c>
9000fd2a:	2301      	movs	r3, #1
9000fd2c:	e013      	b.n	9000fd56 <tcp_receive+0x27e>
9000fd2e:	bf00      	nop
9000fd30:	90018f90 	.word	0x90018f90
9000fd34:	900192c0 	.word	0x900192c0
9000fd38:	90018fdc 	.word	0x90018fdc
9000fd3c:	900192dc 	.word	0x900192dc
9000fd40:	2401f3e8 	.word	0x2401f3e8
9000fd44:	2401f3dc 	.word	0x2401f3dc
9000fd48:	2401f3e0 	.word	0x2401f3e0
9000fd4c:	2401f3cc 	.word	0x2401f3cc
9000fd50:	2401f3e6 	.word	0x2401f3e6
9000fd54:	2302      	movs	r3, #2
9000fd56:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
9000fd5a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
9000fd5e:	b29a      	uxth	r2, r3
9000fd60:	687b      	ldr	r3, [r7, #4]
9000fd62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000fd64:	fb12 f303 	smulbb	r3, r2, r3
9000fd68:	b29b      	uxth	r3, r3
9000fd6a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
9000fd6c:	4293      	cmp	r3, r2
9000fd6e:	bf28      	it	cs
9000fd70:	4613      	movcs	r3, r2
9000fd72:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
9000fd74:	687b      	ldr	r3, [r7, #4]
9000fd76:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
9000fd7a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
9000fd7c:	4413      	add	r3, r2
9000fd7e:	b29a      	uxth	r2, r3
9000fd80:	687b      	ldr	r3, [r7, #4]
9000fd82:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
9000fd86:	429a      	cmp	r2, r3
9000fd88:	d309      	bcc.n	9000fd9e <tcp_receive+0x2c6>
9000fd8a:	687b      	ldr	r3, [r7, #4]
9000fd8c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
9000fd90:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
9000fd92:	4413      	add	r3, r2
9000fd94:	b29a      	uxth	r2, r3
9000fd96:	687b      	ldr	r3, [r7, #4]
9000fd98:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
9000fd9c:	e04e      	b.n	9000fe3c <tcp_receive+0x364>
9000fd9e:	687b      	ldr	r3, [r7, #4]
9000fda0:	f64f 72ff 	movw	r2, #65535	; 0xffff
9000fda4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
9000fda8:	e048      	b.n	9000fe3c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
9000fdaa:	687b      	ldr	r3, [r7, #4]
9000fdac:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
9000fdb0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
9000fdb2:	4413      	add	r3, r2
9000fdb4:	b29a      	uxth	r2, r3
9000fdb6:	687b      	ldr	r3, [r7, #4]
9000fdb8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
9000fdbc:	429a      	cmp	r2, r3
9000fdbe:	d309      	bcc.n	9000fdd4 <tcp_receive+0x2fc>
9000fdc0:	687b      	ldr	r3, [r7, #4]
9000fdc2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
9000fdc6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
9000fdc8:	4413      	add	r3, r2
9000fdca:	b29a      	uxth	r2, r3
9000fdcc:	687b      	ldr	r3, [r7, #4]
9000fdce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
9000fdd2:	e004      	b.n	9000fdde <tcp_receive+0x306>
9000fdd4:	687b      	ldr	r3, [r7, #4]
9000fdd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
9000fdda:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
9000fdde:	687b      	ldr	r3, [r7, #4]
9000fde0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
9000fde4:	687b      	ldr	r3, [r7, #4]
9000fde6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
9000fdea:	429a      	cmp	r2, r3
9000fdec:	d326      	bcc.n	9000fe3c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
9000fdee:	687b      	ldr	r3, [r7, #4]
9000fdf0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
9000fdf4:	687b      	ldr	r3, [r7, #4]
9000fdf6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
9000fdfa:	1ad3      	subs	r3, r2, r3
9000fdfc:	b29a      	uxth	r2, r3
9000fdfe:	687b      	ldr	r3, [r7, #4]
9000fe00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
9000fe04:	687b      	ldr	r3, [r7, #4]
9000fe06:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
9000fe0a:	687b      	ldr	r3, [r7, #4]
9000fe0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000fe0e:	4413      	add	r3, r2
9000fe10:	b29a      	uxth	r2, r3
9000fe12:	687b      	ldr	r3, [r7, #4]
9000fe14:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
9000fe18:	429a      	cmp	r2, r3
9000fe1a:	d30a      	bcc.n	9000fe32 <tcp_receive+0x35a>
9000fe1c:	687b      	ldr	r3, [r7, #4]
9000fe1e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
9000fe22:	687b      	ldr	r3, [r7, #4]
9000fe24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9000fe26:	4413      	add	r3, r2
9000fe28:	b29a      	uxth	r2, r3
9000fe2a:	687b      	ldr	r3, [r7, #4]
9000fe2c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
9000fe30:	e004      	b.n	9000fe3c <tcp_receive+0x364>
9000fe32:	687b      	ldr	r3, [r7, #4]
9000fe34:	f64f 72ff 	movw	r2, #65535	; 0xffff
9000fe38:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
9000fe3c:	687b      	ldr	r3, [r7, #4]
9000fe3e:	6f19      	ldr	r1, [r3, #112]	; 0x70
9000fe40:	687b      	ldr	r3, [r7, #4]
9000fe42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000fe44:	4a98      	ldr	r2, [pc, #608]	; (900100a8 <tcp_receive+0x5d0>)
9000fe46:	6878      	ldr	r0, [r7, #4]
9000fe48:	f7ff fdca 	bl	9000f9e0 <tcp_free_acked_segments>
9000fe4c:	4602      	mov	r2, r0
9000fe4e:	687b      	ldr	r3, [r7, #4]
9000fe50:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
9000fe52:	687b      	ldr	r3, [r7, #4]
9000fe54:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
9000fe56:	687b      	ldr	r3, [r7, #4]
9000fe58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000fe5a:	4a94      	ldr	r2, [pc, #592]	; (900100ac <tcp_receive+0x5d4>)
9000fe5c:	6878      	ldr	r0, [r7, #4]
9000fe5e:	f7ff fdbf 	bl	9000f9e0 <tcp_free_acked_segments>
9000fe62:	4602      	mov	r2, r0
9000fe64:	687b      	ldr	r3, [r7, #4]
9000fe66:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
9000fe68:	687b      	ldr	r3, [r7, #4]
9000fe6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000fe6c:	2b00      	cmp	r3, #0
9000fe6e:	d104      	bne.n	9000fe7a <tcp_receive+0x3a2>
        pcb->rtime = -1;
9000fe70:	687b      	ldr	r3, [r7, #4]
9000fe72:	f64f 72ff 	movw	r2, #65535	; 0xffff
9000fe76:	861a      	strh	r2, [r3, #48]	; 0x30
9000fe78:	e002      	b.n	9000fe80 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
9000fe7a:	687b      	ldr	r3, [r7, #4]
9000fe7c:	2200      	movs	r2, #0
9000fe7e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
9000fe80:	687b      	ldr	r3, [r7, #4]
9000fe82:	2200      	movs	r2, #0
9000fe84:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
9000fe86:	687b      	ldr	r3, [r7, #4]
9000fe88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000fe8a:	2b00      	cmp	r3, #0
9000fe8c:	d103      	bne.n	9000fe96 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
9000fe8e:	687b      	ldr	r3, [r7, #4]
9000fe90:	2200      	movs	r2, #0
9000fe92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
9000fe96:	687b      	ldr	r3, [r7, #4]
9000fe98:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
9000fe9c:	4b84      	ldr	r3, [pc, #528]	; (900100b0 <tcp_receive+0x5d8>)
9000fe9e:	881b      	ldrh	r3, [r3, #0]
9000fea0:	4413      	add	r3, r2
9000fea2:	b29a      	uxth	r2, r3
9000fea4:	687b      	ldr	r3, [r7, #4]
9000fea6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
9000feaa:	687b      	ldr	r3, [r7, #4]
9000feac:	8b5b      	ldrh	r3, [r3, #26]
9000feae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
9000feb2:	2b00      	cmp	r3, #0
9000feb4:	d035      	beq.n	9000ff22 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
9000feb6:	687b      	ldr	r3, [r7, #4]
9000feb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000feba:	2b00      	cmp	r3, #0
9000febc:	d118      	bne.n	9000fef0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
9000febe:	687b      	ldr	r3, [r7, #4]
9000fec0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000fec2:	2b00      	cmp	r3, #0
9000fec4:	d00c      	beq.n	9000fee0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
9000fec6:	687b      	ldr	r3, [r7, #4]
9000fec8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
9000feca:	687b      	ldr	r3, [r7, #4]
9000fecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9000fece:	68db      	ldr	r3, [r3, #12]
9000fed0:	685b      	ldr	r3, [r3, #4]
9000fed2:	4618      	mov	r0, r3
9000fed4:	f7fa fd6f 	bl	9000a9b6 <lwip_htonl>
9000fed8:	4603      	mov	r3, r0
9000feda:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
9000fedc:	2b00      	cmp	r3, #0
9000fede:	dc20      	bgt.n	9000ff22 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
9000fee0:	687b      	ldr	r3, [r7, #4]
9000fee2:	8b5b      	ldrh	r3, [r3, #26]
9000fee4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
9000fee8:	b29a      	uxth	r2, r3
9000feea:	687b      	ldr	r3, [r7, #4]
9000feec:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
9000feee:	e018      	b.n	9000ff22 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
9000fef0:	687b      	ldr	r3, [r7, #4]
9000fef2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
9000fef4:	687b      	ldr	r3, [r7, #4]
9000fef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9000fef8:	68db      	ldr	r3, [r3, #12]
9000fefa:	685b      	ldr	r3, [r3, #4]
9000fefc:	4618      	mov	r0, r3
9000fefe:	f7fa fd5a 	bl	9000a9b6 <lwip_htonl>
9000ff02:	4603      	mov	r3, r0
9000ff04:	1ae3      	subs	r3, r4, r3
9000ff06:	2b00      	cmp	r3, #0
9000ff08:	dc0b      	bgt.n	9000ff22 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
9000ff0a:	687b      	ldr	r3, [r7, #4]
9000ff0c:	8b5b      	ldrh	r3, [r3, #26]
9000ff0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
9000ff12:	b29a      	uxth	r2, r3
9000ff14:	687b      	ldr	r3, [r7, #4]
9000ff16:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
9000ff18:	e003      	b.n	9000ff22 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
9000ff1a:	6878      	ldr	r0, [r7, #4]
9000ff1c:	f002 fbce 	bl	900126bc <tcp_send_empty_ack>
9000ff20:	e000      	b.n	9000ff24 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
9000ff22:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
9000ff24:	687b      	ldr	r3, [r7, #4]
9000ff26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9000ff28:	2b00      	cmp	r3, #0
9000ff2a:	d05b      	beq.n	9000ffe4 <tcp_receive+0x50c>
9000ff2c:	687b      	ldr	r3, [r7, #4]
9000ff2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000ff30:	4b60      	ldr	r3, [pc, #384]	; (900100b4 <tcp_receive+0x5dc>)
9000ff32:	681b      	ldr	r3, [r3, #0]
9000ff34:	1ad3      	subs	r3, r2, r3
9000ff36:	2b00      	cmp	r3, #0
9000ff38:	da54      	bge.n	9000ffe4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
9000ff3a:	4b5f      	ldr	r3, [pc, #380]	; (900100b8 <tcp_receive+0x5e0>)
9000ff3c:	681b      	ldr	r3, [r3, #0]
9000ff3e:	b29a      	uxth	r2, r3
9000ff40:	687b      	ldr	r3, [r7, #4]
9000ff42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9000ff44:	b29b      	uxth	r3, r3
9000ff46:	1ad3      	subs	r3, r2, r3
9000ff48:	b29b      	uxth	r3, r3
9000ff4a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
9000ff4e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
9000ff52:	687b      	ldr	r3, [r7, #4]
9000ff54:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
9000ff58:	10db      	asrs	r3, r3, #3
9000ff5a:	b21b      	sxth	r3, r3
9000ff5c:	b29b      	uxth	r3, r3
9000ff5e:	1ad3      	subs	r3, r2, r3
9000ff60:	b29b      	uxth	r3, r3
9000ff62:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
9000ff66:	687b      	ldr	r3, [r7, #4]
9000ff68:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
9000ff6c:	b29a      	uxth	r2, r3
9000ff6e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
9000ff72:	4413      	add	r3, r2
9000ff74:	b29b      	uxth	r3, r3
9000ff76:	b21a      	sxth	r2, r3
9000ff78:	687b      	ldr	r3, [r7, #4]
9000ff7a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
9000ff7c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
9000ff80:	2b00      	cmp	r3, #0
9000ff82:	da05      	bge.n	9000ff90 <tcp_receive+0x4b8>
        m = (s16_t) - m;
9000ff84:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
9000ff88:	425b      	negs	r3, r3
9000ff8a:	b29b      	uxth	r3, r3
9000ff8c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
9000ff90:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
9000ff94:	687b      	ldr	r3, [r7, #4]
9000ff96:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
9000ff9a:	109b      	asrs	r3, r3, #2
9000ff9c:	b21b      	sxth	r3, r3
9000ff9e:	b29b      	uxth	r3, r3
9000ffa0:	1ad3      	subs	r3, r2, r3
9000ffa2:	b29b      	uxth	r3, r3
9000ffa4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
9000ffa8:	687b      	ldr	r3, [r7, #4]
9000ffaa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
9000ffae:	b29a      	uxth	r2, r3
9000ffb0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
9000ffb4:	4413      	add	r3, r2
9000ffb6:	b29b      	uxth	r3, r3
9000ffb8:	b21a      	sxth	r2, r3
9000ffba:	687b      	ldr	r3, [r7, #4]
9000ffbc:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
9000ffbe:	687b      	ldr	r3, [r7, #4]
9000ffc0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
9000ffc4:	10db      	asrs	r3, r3, #3
9000ffc6:	b21b      	sxth	r3, r3
9000ffc8:	b29a      	uxth	r2, r3
9000ffca:	687b      	ldr	r3, [r7, #4]
9000ffcc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
9000ffd0:	b29b      	uxth	r3, r3
9000ffd2:	4413      	add	r3, r2
9000ffd4:	b29b      	uxth	r3, r3
9000ffd6:	b21a      	sxth	r2, r3
9000ffd8:	687b      	ldr	r3, [r7, #4]
9000ffda:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
9000ffde:	687b      	ldr	r3, [r7, #4]
9000ffe0:	2200      	movs	r2, #0
9000ffe2:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
9000ffe4:	4b35      	ldr	r3, [pc, #212]	; (900100bc <tcp_receive+0x5e4>)
9000ffe6:	881b      	ldrh	r3, [r3, #0]
9000ffe8:	2b00      	cmp	r3, #0
9000ffea:	f000 84e2 	beq.w	900109b2 <tcp_receive+0xeda>
9000ffee:	687b      	ldr	r3, [r7, #4]
9000fff0:	7d1b      	ldrb	r3, [r3, #20]
9000fff2:	2b06      	cmp	r3, #6
9000fff4:	f200 84dd 	bhi.w	900109b2 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
9000fff8:	687b      	ldr	r3, [r7, #4]
9000fffa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9000fffc:	4b30      	ldr	r3, [pc, #192]	; (900100c0 <tcp_receive+0x5e8>)
9000fffe:	681b      	ldr	r3, [r3, #0]
90010000:	1ad3      	subs	r3, r2, r3
90010002:	3b01      	subs	r3, #1
90010004:	2b00      	cmp	r3, #0
90010006:	f2c0 808f 	blt.w	90010128 <tcp_receive+0x650>
9001000a:	687b      	ldr	r3, [r7, #4]
9001000c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9001000e:	4b2b      	ldr	r3, [pc, #172]	; (900100bc <tcp_receive+0x5e4>)
90010010:	881b      	ldrh	r3, [r3, #0]
90010012:	4619      	mov	r1, r3
90010014:	4b2a      	ldr	r3, [pc, #168]	; (900100c0 <tcp_receive+0x5e8>)
90010016:	681b      	ldr	r3, [r3, #0]
90010018:	440b      	add	r3, r1
9001001a:	1ad3      	subs	r3, r2, r3
9001001c:	3301      	adds	r3, #1
9001001e:	2b00      	cmp	r3, #0
90010020:	f300 8082 	bgt.w	90010128 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
90010024:	4b27      	ldr	r3, [pc, #156]	; (900100c4 <tcp_receive+0x5ec>)
90010026:	685b      	ldr	r3, [r3, #4]
90010028:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
9001002a:	687b      	ldr	r3, [r7, #4]
9001002c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9001002e:	4b24      	ldr	r3, [pc, #144]	; (900100c0 <tcp_receive+0x5e8>)
90010030:	681b      	ldr	r3, [r3, #0]
90010032:	1ad3      	subs	r3, r2, r3
90010034:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
90010036:	4b23      	ldr	r3, [pc, #140]	; (900100c4 <tcp_receive+0x5ec>)
90010038:	685b      	ldr	r3, [r3, #4]
9001003a:	2b00      	cmp	r3, #0
9001003c:	d106      	bne.n	9001004c <tcp_receive+0x574>
9001003e:	4b22      	ldr	r3, [pc, #136]	; (900100c8 <tcp_receive+0x5f0>)
90010040:	f240 5294 	movw	r2, #1428	; 0x594
90010044:	4921      	ldr	r1, [pc, #132]	; (900100cc <tcp_receive+0x5f4>)
90010046:	4822      	ldr	r0, [pc, #136]	; (900100d0 <tcp_receive+0x5f8>)
90010048:	f005 fdd4 	bl	90015bf4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
9001004c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9001004e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
90010052:	4293      	cmp	r3, r2
90010054:	d906      	bls.n	90010064 <tcp_receive+0x58c>
90010056:	4b1c      	ldr	r3, [pc, #112]	; (900100c8 <tcp_receive+0x5f0>)
90010058:	f240 5295 	movw	r2, #1429	; 0x595
9001005c:	491d      	ldr	r1, [pc, #116]	; (900100d4 <tcp_receive+0x5fc>)
9001005e:	481c      	ldr	r0, [pc, #112]	; (900100d0 <tcp_receive+0x5f8>)
90010060:	f005 fdc8 	bl	90015bf4 <iprintf>
      off = (u16_t)off32;
90010064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90010066:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
9001006a:	4b16      	ldr	r3, [pc, #88]	; (900100c4 <tcp_receive+0x5ec>)
9001006c:	685b      	ldr	r3, [r3, #4]
9001006e:	891b      	ldrh	r3, [r3, #8]
90010070:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
90010074:	429a      	cmp	r2, r3
90010076:	d906      	bls.n	90010086 <tcp_receive+0x5ae>
90010078:	4b13      	ldr	r3, [pc, #76]	; (900100c8 <tcp_receive+0x5f0>)
9001007a:	f240 5297 	movw	r2, #1431	; 0x597
9001007e:	4916      	ldr	r1, [pc, #88]	; (900100d8 <tcp_receive+0x600>)
90010080:	4813      	ldr	r0, [pc, #76]	; (900100d0 <tcp_receive+0x5f8>)
90010082:	f005 fdb7 	bl	90015bf4 <iprintf>
      inseg.len -= off;
90010086:	4b0f      	ldr	r3, [pc, #60]	; (900100c4 <tcp_receive+0x5ec>)
90010088:	891a      	ldrh	r2, [r3, #8]
9001008a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
9001008e:	1ad3      	subs	r3, r2, r3
90010090:	b29a      	uxth	r2, r3
90010092:	4b0c      	ldr	r3, [pc, #48]	; (900100c4 <tcp_receive+0x5ec>)
90010094:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
90010096:	4b0b      	ldr	r3, [pc, #44]	; (900100c4 <tcp_receive+0x5ec>)
90010098:	685b      	ldr	r3, [r3, #4]
9001009a:	891a      	ldrh	r2, [r3, #8]
9001009c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
900100a0:	1ad3      	subs	r3, r2, r3
900100a2:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
900100a4:	e02a      	b.n	900100fc <tcp_receive+0x624>
900100a6:	bf00      	nop
900100a8:	900192f8 	.word	0x900192f8
900100ac:	90019300 	.word	0x90019300
900100b0:	2401f3e4 	.word	0x2401f3e4
900100b4:	2401f3e0 	.word	0x2401f3e0
900100b8:	2401f3a4 	.word	0x2401f3a4
900100bc:	2401f3e6 	.word	0x2401f3e6
900100c0:	2401f3dc 	.word	0x2401f3dc
900100c4:	2401f3bc 	.word	0x2401f3bc
900100c8:	90018f90 	.word	0x90018f90
900100cc:	90019308 	.word	0x90019308
900100d0:	90018fdc 	.word	0x90018fdc
900100d4:	90019318 	.word	0x90019318
900100d8:	90019328 	.word	0x90019328
        off -= p->len;
900100dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
900100de:	895b      	ldrh	r3, [r3, #10]
900100e0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
900100e4:	1ad3      	subs	r3, r2, r3
900100e6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
900100ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
900100ec:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
900100ee:	811a      	strh	r2, [r3, #8]
        p->len = 0;
900100f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
900100f2:	2200      	movs	r2, #0
900100f4:	815a      	strh	r2, [r3, #10]
        p = p->next;
900100f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
900100f8:	681b      	ldr	r3, [r3, #0]
900100fa:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
900100fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
900100fe:	895b      	ldrh	r3, [r3, #10]
90010100:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
90010104:	429a      	cmp	r2, r3
90010106:	d8e9      	bhi.n	900100dc <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
90010108:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
9001010c:	4619      	mov	r1, r3
9001010e:	6c78      	ldr	r0, [r7, #68]	; 0x44
90010110:	f7fc f8ca 	bl	9000c2a8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
90010114:	687b      	ldr	r3, [r7, #4]
90010116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90010118:	4a91      	ldr	r2, [pc, #580]	; (90010360 <tcp_receive+0x888>)
9001011a:	6013      	str	r3, [r2, #0]
9001011c:	4b91      	ldr	r3, [pc, #580]	; (90010364 <tcp_receive+0x88c>)
9001011e:	68db      	ldr	r3, [r3, #12]
90010120:	4a8f      	ldr	r2, [pc, #572]	; (90010360 <tcp_receive+0x888>)
90010122:	6812      	ldr	r2, [r2, #0]
90010124:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
90010126:	e00d      	b.n	90010144 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
90010128:	4b8d      	ldr	r3, [pc, #564]	; (90010360 <tcp_receive+0x888>)
9001012a:	681a      	ldr	r2, [r3, #0]
9001012c:	687b      	ldr	r3, [r7, #4]
9001012e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90010130:	1ad3      	subs	r3, r2, r3
90010132:	2b00      	cmp	r3, #0
90010134:	da06      	bge.n	90010144 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
90010136:	687b      	ldr	r3, [r7, #4]
90010138:	8b5b      	ldrh	r3, [r3, #26]
9001013a:	f043 0302 	orr.w	r3, r3, #2
9001013e:	b29a      	uxth	r2, r3
90010140:	687b      	ldr	r3, [r7, #4]
90010142:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
90010144:	4b86      	ldr	r3, [pc, #536]	; (90010360 <tcp_receive+0x888>)
90010146:	681a      	ldr	r2, [r3, #0]
90010148:	687b      	ldr	r3, [r7, #4]
9001014a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9001014c:	1ad3      	subs	r3, r2, r3
9001014e:	2b00      	cmp	r3, #0
90010150:	f2c0 842a 	blt.w	900109a8 <tcp_receive+0xed0>
90010154:	4b82      	ldr	r3, [pc, #520]	; (90010360 <tcp_receive+0x888>)
90010156:	681a      	ldr	r2, [r3, #0]
90010158:	687b      	ldr	r3, [r7, #4]
9001015a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9001015c:	6879      	ldr	r1, [r7, #4]
9001015e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
90010160:	440b      	add	r3, r1
90010162:	1ad3      	subs	r3, r2, r3
90010164:	3301      	adds	r3, #1
90010166:	2b00      	cmp	r3, #0
90010168:	f300 841e 	bgt.w	900109a8 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
9001016c:	687b      	ldr	r3, [r7, #4]
9001016e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90010170:	4b7b      	ldr	r3, [pc, #492]	; (90010360 <tcp_receive+0x888>)
90010172:	681b      	ldr	r3, [r3, #0]
90010174:	429a      	cmp	r2, r3
90010176:	f040 829a 	bne.w	900106ae <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
9001017a:	4b7a      	ldr	r3, [pc, #488]	; (90010364 <tcp_receive+0x88c>)
9001017c:	891c      	ldrh	r4, [r3, #8]
9001017e:	4b79      	ldr	r3, [pc, #484]	; (90010364 <tcp_receive+0x88c>)
90010180:	68db      	ldr	r3, [r3, #12]
90010182:	899b      	ldrh	r3, [r3, #12]
90010184:	b29b      	uxth	r3, r3
90010186:	4618      	mov	r0, r3
90010188:	f7fa fc00 	bl	9000a98c <lwip_htons>
9001018c:	4603      	mov	r3, r0
9001018e:	b2db      	uxtb	r3, r3
90010190:	f003 0303 	and.w	r3, r3, #3
90010194:	2b00      	cmp	r3, #0
90010196:	d001      	beq.n	9001019c <tcp_receive+0x6c4>
90010198:	2301      	movs	r3, #1
9001019a:	e000      	b.n	9001019e <tcp_receive+0x6c6>
9001019c:	2300      	movs	r3, #0
9001019e:	4423      	add	r3, r4
900101a0:	b29a      	uxth	r2, r3
900101a2:	4b71      	ldr	r3, [pc, #452]	; (90010368 <tcp_receive+0x890>)
900101a4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
900101a6:	687b      	ldr	r3, [r7, #4]
900101a8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
900101aa:	4b6f      	ldr	r3, [pc, #444]	; (90010368 <tcp_receive+0x890>)
900101ac:	881b      	ldrh	r3, [r3, #0]
900101ae:	429a      	cmp	r2, r3
900101b0:	d275      	bcs.n	9001029e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
900101b2:	4b6c      	ldr	r3, [pc, #432]	; (90010364 <tcp_receive+0x88c>)
900101b4:	68db      	ldr	r3, [r3, #12]
900101b6:	899b      	ldrh	r3, [r3, #12]
900101b8:	b29b      	uxth	r3, r3
900101ba:	4618      	mov	r0, r3
900101bc:	f7fa fbe6 	bl	9000a98c <lwip_htons>
900101c0:	4603      	mov	r3, r0
900101c2:	b2db      	uxtb	r3, r3
900101c4:	f003 0301 	and.w	r3, r3, #1
900101c8:	2b00      	cmp	r3, #0
900101ca:	d01f      	beq.n	9001020c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
900101cc:	4b65      	ldr	r3, [pc, #404]	; (90010364 <tcp_receive+0x88c>)
900101ce:	68db      	ldr	r3, [r3, #12]
900101d0:	899b      	ldrh	r3, [r3, #12]
900101d2:	b29b      	uxth	r3, r3
900101d4:	b21b      	sxth	r3, r3
900101d6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
900101da:	b21c      	sxth	r4, r3
900101dc:	4b61      	ldr	r3, [pc, #388]	; (90010364 <tcp_receive+0x88c>)
900101de:	68db      	ldr	r3, [r3, #12]
900101e0:	899b      	ldrh	r3, [r3, #12]
900101e2:	b29b      	uxth	r3, r3
900101e4:	4618      	mov	r0, r3
900101e6:	f7fa fbd1 	bl	9000a98c <lwip_htons>
900101ea:	4603      	mov	r3, r0
900101ec:	b2db      	uxtb	r3, r3
900101ee:	b29b      	uxth	r3, r3
900101f0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
900101f4:	b29b      	uxth	r3, r3
900101f6:	4618      	mov	r0, r3
900101f8:	f7fa fbc8 	bl	9000a98c <lwip_htons>
900101fc:	4603      	mov	r3, r0
900101fe:	b21b      	sxth	r3, r3
90010200:	4323      	orrs	r3, r4
90010202:	b21a      	sxth	r2, r3
90010204:	4b57      	ldr	r3, [pc, #348]	; (90010364 <tcp_receive+0x88c>)
90010206:	68db      	ldr	r3, [r3, #12]
90010208:	b292      	uxth	r2, r2
9001020a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
9001020c:	687b      	ldr	r3, [r7, #4]
9001020e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
90010210:	4b54      	ldr	r3, [pc, #336]	; (90010364 <tcp_receive+0x88c>)
90010212:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
90010214:	4b53      	ldr	r3, [pc, #332]	; (90010364 <tcp_receive+0x88c>)
90010216:	68db      	ldr	r3, [r3, #12]
90010218:	899b      	ldrh	r3, [r3, #12]
9001021a:	b29b      	uxth	r3, r3
9001021c:	4618      	mov	r0, r3
9001021e:	f7fa fbb5 	bl	9000a98c <lwip_htons>
90010222:	4603      	mov	r3, r0
90010224:	b2db      	uxtb	r3, r3
90010226:	f003 0302 	and.w	r3, r3, #2
9001022a:	2b00      	cmp	r3, #0
9001022c:	d005      	beq.n	9001023a <tcp_receive+0x762>
            inseg.len -= 1;
9001022e:	4b4d      	ldr	r3, [pc, #308]	; (90010364 <tcp_receive+0x88c>)
90010230:	891b      	ldrh	r3, [r3, #8]
90010232:	3b01      	subs	r3, #1
90010234:	b29a      	uxth	r2, r3
90010236:	4b4b      	ldr	r3, [pc, #300]	; (90010364 <tcp_receive+0x88c>)
90010238:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
9001023a:	4b4a      	ldr	r3, [pc, #296]	; (90010364 <tcp_receive+0x88c>)
9001023c:	685b      	ldr	r3, [r3, #4]
9001023e:	4a49      	ldr	r2, [pc, #292]	; (90010364 <tcp_receive+0x88c>)
90010240:	8912      	ldrh	r2, [r2, #8]
90010242:	4611      	mov	r1, r2
90010244:	4618      	mov	r0, r3
90010246:	f7fb ff2f 	bl	9000c0a8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
9001024a:	4b46      	ldr	r3, [pc, #280]	; (90010364 <tcp_receive+0x88c>)
9001024c:	891c      	ldrh	r4, [r3, #8]
9001024e:	4b45      	ldr	r3, [pc, #276]	; (90010364 <tcp_receive+0x88c>)
90010250:	68db      	ldr	r3, [r3, #12]
90010252:	899b      	ldrh	r3, [r3, #12]
90010254:	b29b      	uxth	r3, r3
90010256:	4618      	mov	r0, r3
90010258:	f7fa fb98 	bl	9000a98c <lwip_htons>
9001025c:	4603      	mov	r3, r0
9001025e:	b2db      	uxtb	r3, r3
90010260:	f003 0303 	and.w	r3, r3, #3
90010264:	2b00      	cmp	r3, #0
90010266:	d001      	beq.n	9001026c <tcp_receive+0x794>
90010268:	2301      	movs	r3, #1
9001026a:	e000      	b.n	9001026e <tcp_receive+0x796>
9001026c:	2300      	movs	r3, #0
9001026e:	4423      	add	r3, r4
90010270:	b29a      	uxth	r2, r3
90010272:	4b3d      	ldr	r3, [pc, #244]	; (90010368 <tcp_receive+0x890>)
90010274:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
90010276:	4b3c      	ldr	r3, [pc, #240]	; (90010368 <tcp_receive+0x890>)
90010278:	881b      	ldrh	r3, [r3, #0]
9001027a:	461a      	mov	r2, r3
9001027c:	4b38      	ldr	r3, [pc, #224]	; (90010360 <tcp_receive+0x888>)
9001027e:	681b      	ldr	r3, [r3, #0]
90010280:	441a      	add	r2, r3
90010282:	687b      	ldr	r3, [r7, #4]
90010284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90010286:	6879      	ldr	r1, [r7, #4]
90010288:	8d09      	ldrh	r1, [r1, #40]	; 0x28
9001028a:	440b      	add	r3, r1
9001028c:	429a      	cmp	r2, r3
9001028e:	d006      	beq.n	9001029e <tcp_receive+0x7c6>
90010290:	4b36      	ldr	r3, [pc, #216]	; (9001036c <tcp_receive+0x894>)
90010292:	f240 52cb 	movw	r2, #1483	; 0x5cb
90010296:	4936      	ldr	r1, [pc, #216]	; (90010370 <tcp_receive+0x898>)
90010298:	4836      	ldr	r0, [pc, #216]	; (90010374 <tcp_receive+0x89c>)
9001029a:	f005 fcab 	bl	90015bf4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
9001029e:	687b      	ldr	r3, [r7, #4]
900102a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
900102a2:	2b00      	cmp	r3, #0
900102a4:	f000 80e7 	beq.w	90010476 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
900102a8:	4b2e      	ldr	r3, [pc, #184]	; (90010364 <tcp_receive+0x88c>)
900102aa:	68db      	ldr	r3, [r3, #12]
900102ac:	899b      	ldrh	r3, [r3, #12]
900102ae:	b29b      	uxth	r3, r3
900102b0:	4618      	mov	r0, r3
900102b2:	f7fa fb6b 	bl	9000a98c <lwip_htons>
900102b6:	4603      	mov	r3, r0
900102b8:	b2db      	uxtb	r3, r3
900102ba:	f003 0301 	and.w	r3, r3, #1
900102be:	2b00      	cmp	r3, #0
900102c0:	d010      	beq.n	900102e4 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
900102c2:	e00a      	b.n	900102da <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
900102c4:	687b      	ldr	r3, [r7, #4]
900102c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
900102c8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
900102ca:	687b      	ldr	r3, [r7, #4]
900102cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
900102ce:	681a      	ldr	r2, [r3, #0]
900102d0:	687b      	ldr	r3, [r7, #4]
900102d2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
900102d4:	68f8      	ldr	r0, [r7, #12]
900102d6:	f7fd fca6 	bl	9000dc26 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
900102da:	687b      	ldr	r3, [r7, #4]
900102dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
900102de:	2b00      	cmp	r3, #0
900102e0:	d1f0      	bne.n	900102c4 <tcp_receive+0x7ec>
900102e2:	e0c8      	b.n	90010476 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
900102e4:	687b      	ldr	r3, [r7, #4]
900102e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
900102e8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
900102ea:	e052      	b.n	90010392 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
900102ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
900102ee:	68db      	ldr	r3, [r3, #12]
900102f0:	899b      	ldrh	r3, [r3, #12]
900102f2:	b29b      	uxth	r3, r3
900102f4:	4618      	mov	r0, r3
900102f6:	f7fa fb49 	bl	9000a98c <lwip_htons>
900102fa:	4603      	mov	r3, r0
900102fc:	b2db      	uxtb	r3, r3
900102fe:	f003 0301 	and.w	r3, r3, #1
90010302:	2b00      	cmp	r3, #0
90010304:	d03d      	beq.n	90010382 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
90010306:	4b17      	ldr	r3, [pc, #92]	; (90010364 <tcp_receive+0x88c>)
90010308:	68db      	ldr	r3, [r3, #12]
9001030a:	899b      	ldrh	r3, [r3, #12]
9001030c:	b29b      	uxth	r3, r3
9001030e:	4618      	mov	r0, r3
90010310:	f7fa fb3c 	bl	9000a98c <lwip_htons>
90010314:	4603      	mov	r3, r0
90010316:	b2db      	uxtb	r3, r3
90010318:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
9001031c:	2b00      	cmp	r3, #0
9001031e:	d130      	bne.n	90010382 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
90010320:	4b10      	ldr	r3, [pc, #64]	; (90010364 <tcp_receive+0x88c>)
90010322:	68db      	ldr	r3, [r3, #12]
90010324:	899b      	ldrh	r3, [r3, #12]
90010326:	b29c      	uxth	r4, r3
90010328:	2001      	movs	r0, #1
9001032a:	f7fa fb2f 	bl	9000a98c <lwip_htons>
9001032e:	4603      	mov	r3, r0
90010330:	461a      	mov	r2, r3
90010332:	4b0c      	ldr	r3, [pc, #48]	; (90010364 <tcp_receive+0x88c>)
90010334:	68db      	ldr	r3, [r3, #12]
90010336:	4322      	orrs	r2, r4
90010338:	b292      	uxth	r2, r2
9001033a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
9001033c:	4b09      	ldr	r3, [pc, #36]	; (90010364 <tcp_receive+0x88c>)
9001033e:	891c      	ldrh	r4, [r3, #8]
90010340:	4b08      	ldr	r3, [pc, #32]	; (90010364 <tcp_receive+0x88c>)
90010342:	68db      	ldr	r3, [r3, #12]
90010344:	899b      	ldrh	r3, [r3, #12]
90010346:	b29b      	uxth	r3, r3
90010348:	4618      	mov	r0, r3
9001034a:	f7fa fb1f 	bl	9000a98c <lwip_htons>
9001034e:	4603      	mov	r3, r0
90010350:	b2db      	uxtb	r3, r3
90010352:	f003 0303 	and.w	r3, r3, #3
90010356:	2b00      	cmp	r3, #0
90010358:	d00e      	beq.n	90010378 <tcp_receive+0x8a0>
9001035a:	2301      	movs	r3, #1
9001035c:	e00d      	b.n	9001037a <tcp_receive+0x8a2>
9001035e:	bf00      	nop
90010360:	2401f3dc 	.word	0x2401f3dc
90010364:	2401f3bc 	.word	0x2401f3bc
90010368:	2401f3e6 	.word	0x2401f3e6
9001036c:	90018f90 	.word	0x90018f90
90010370:	90019338 	.word	0x90019338
90010374:	90018fdc 	.word	0x90018fdc
90010378:	2300      	movs	r3, #0
9001037a:	4423      	add	r3, r4
9001037c:	b29a      	uxth	r2, r3
9001037e:	4b98      	ldr	r3, [pc, #608]	; (900105e0 <tcp_receive+0xb08>)
90010380:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
90010382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90010384:	613b      	str	r3, [r7, #16]
              next = next->next;
90010386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90010388:	681b      	ldr	r3, [r3, #0]
9001038a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
9001038c:	6938      	ldr	r0, [r7, #16]
9001038e:	f7fd fc4a 	bl	9000dc26 <tcp_seg_free>
            while (next &&
90010392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
90010394:	2b00      	cmp	r3, #0
90010396:	d00e      	beq.n	900103b6 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
90010398:	4b91      	ldr	r3, [pc, #580]	; (900105e0 <tcp_receive+0xb08>)
9001039a:	881b      	ldrh	r3, [r3, #0]
9001039c:	461a      	mov	r2, r3
9001039e:	4b91      	ldr	r3, [pc, #580]	; (900105e4 <tcp_receive+0xb0c>)
900103a0:	681b      	ldr	r3, [r3, #0]
900103a2:	441a      	add	r2, r3
900103a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
900103a6:	68db      	ldr	r3, [r3, #12]
900103a8:	685b      	ldr	r3, [r3, #4]
900103aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
900103ac:	8909      	ldrh	r1, [r1, #8]
900103ae:	440b      	add	r3, r1
900103b0:	1ad3      	subs	r3, r2, r3
            while (next &&
900103b2:	2b00      	cmp	r3, #0
900103b4:	da9a      	bge.n	900102ec <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
900103b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
900103b8:	2b00      	cmp	r3, #0
900103ba:	d059      	beq.n	90010470 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
900103bc:	4b88      	ldr	r3, [pc, #544]	; (900105e0 <tcp_receive+0xb08>)
900103be:	881b      	ldrh	r3, [r3, #0]
900103c0:	461a      	mov	r2, r3
900103c2:	4b88      	ldr	r3, [pc, #544]	; (900105e4 <tcp_receive+0xb0c>)
900103c4:	681b      	ldr	r3, [r3, #0]
900103c6:	441a      	add	r2, r3
900103c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
900103ca:	68db      	ldr	r3, [r3, #12]
900103cc:	685b      	ldr	r3, [r3, #4]
900103ce:	1ad3      	subs	r3, r2, r3
            if (next &&
900103d0:	2b00      	cmp	r3, #0
900103d2:	dd4d      	ble.n	90010470 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
900103d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
900103d6:	68db      	ldr	r3, [r3, #12]
900103d8:	685b      	ldr	r3, [r3, #4]
900103da:	b29a      	uxth	r2, r3
900103dc:	4b81      	ldr	r3, [pc, #516]	; (900105e4 <tcp_receive+0xb0c>)
900103de:	681b      	ldr	r3, [r3, #0]
900103e0:	b29b      	uxth	r3, r3
900103e2:	1ad3      	subs	r3, r2, r3
900103e4:	b29a      	uxth	r2, r3
900103e6:	4b80      	ldr	r3, [pc, #512]	; (900105e8 <tcp_receive+0xb10>)
900103e8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
900103ea:	4b7f      	ldr	r3, [pc, #508]	; (900105e8 <tcp_receive+0xb10>)
900103ec:	68db      	ldr	r3, [r3, #12]
900103ee:	899b      	ldrh	r3, [r3, #12]
900103f0:	b29b      	uxth	r3, r3
900103f2:	4618      	mov	r0, r3
900103f4:	f7fa faca 	bl	9000a98c <lwip_htons>
900103f8:	4603      	mov	r3, r0
900103fa:	b2db      	uxtb	r3, r3
900103fc:	f003 0302 	and.w	r3, r3, #2
90010400:	2b00      	cmp	r3, #0
90010402:	d005      	beq.n	90010410 <tcp_receive+0x938>
                inseg.len -= 1;
90010404:	4b78      	ldr	r3, [pc, #480]	; (900105e8 <tcp_receive+0xb10>)
90010406:	891b      	ldrh	r3, [r3, #8]
90010408:	3b01      	subs	r3, #1
9001040a:	b29a      	uxth	r2, r3
9001040c:	4b76      	ldr	r3, [pc, #472]	; (900105e8 <tcp_receive+0xb10>)
9001040e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
90010410:	4b75      	ldr	r3, [pc, #468]	; (900105e8 <tcp_receive+0xb10>)
90010412:	685b      	ldr	r3, [r3, #4]
90010414:	4a74      	ldr	r2, [pc, #464]	; (900105e8 <tcp_receive+0xb10>)
90010416:	8912      	ldrh	r2, [r2, #8]
90010418:	4611      	mov	r1, r2
9001041a:	4618      	mov	r0, r3
9001041c:	f7fb fe44 	bl	9000c0a8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
90010420:	4b71      	ldr	r3, [pc, #452]	; (900105e8 <tcp_receive+0xb10>)
90010422:	891c      	ldrh	r4, [r3, #8]
90010424:	4b70      	ldr	r3, [pc, #448]	; (900105e8 <tcp_receive+0xb10>)
90010426:	68db      	ldr	r3, [r3, #12]
90010428:	899b      	ldrh	r3, [r3, #12]
9001042a:	b29b      	uxth	r3, r3
9001042c:	4618      	mov	r0, r3
9001042e:	f7fa faad 	bl	9000a98c <lwip_htons>
90010432:	4603      	mov	r3, r0
90010434:	b2db      	uxtb	r3, r3
90010436:	f003 0303 	and.w	r3, r3, #3
9001043a:	2b00      	cmp	r3, #0
9001043c:	d001      	beq.n	90010442 <tcp_receive+0x96a>
9001043e:	2301      	movs	r3, #1
90010440:	e000      	b.n	90010444 <tcp_receive+0x96c>
90010442:	2300      	movs	r3, #0
90010444:	4423      	add	r3, r4
90010446:	b29a      	uxth	r2, r3
90010448:	4b65      	ldr	r3, [pc, #404]	; (900105e0 <tcp_receive+0xb08>)
9001044a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
9001044c:	4b64      	ldr	r3, [pc, #400]	; (900105e0 <tcp_receive+0xb08>)
9001044e:	881b      	ldrh	r3, [r3, #0]
90010450:	461a      	mov	r2, r3
90010452:	4b64      	ldr	r3, [pc, #400]	; (900105e4 <tcp_receive+0xb0c>)
90010454:	681b      	ldr	r3, [r3, #0]
90010456:	441a      	add	r2, r3
90010458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
9001045a:	68db      	ldr	r3, [r3, #12]
9001045c:	685b      	ldr	r3, [r3, #4]
9001045e:	429a      	cmp	r2, r3
90010460:	d006      	beq.n	90010470 <tcp_receive+0x998>
90010462:	4b62      	ldr	r3, [pc, #392]	; (900105ec <tcp_receive+0xb14>)
90010464:	f240 52fc 	movw	r2, #1532	; 0x5fc
90010468:	4961      	ldr	r1, [pc, #388]	; (900105f0 <tcp_receive+0xb18>)
9001046a:	4862      	ldr	r0, [pc, #392]	; (900105f4 <tcp_receive+0xb1c>)
9001046c:	f005 fbc2 	bl	90015bf4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
90010470:	687b      	ldr	r3, [r7, #4]
90010472:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
90010474:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
90010476:	4b5a      	ldr	r3, [pc, #360]	; (900105e0 <tcp_receive+0xb08>)
90010478:	881b      	ldrh	r3, [r3, #0]
9001047a:	461a      	mov	r2, r3
9001047c:	4b59      	ldr	r3, [pc, #356]	; (900105e4 <tcp_receive+0xb0c>)
9001047e:	681b      	ldr	r3, [r3, #0]
90010480:	441a      	add	r2, r3
90010482:	687b      	ldr	r3, [r7, #4]
90010484:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
90010486:	687b      	ldr	r3, [r7, #4]
90010488:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
9001048a:	4b55      	ldr	r3, [pc, #340]	; (900105e0 <tcp_receive+0xb08>)
9001048c:	881b      	ldrh	r3, [r3, #0]
9001048e:	429a      	cmp	r2, r3
90010490:	d206      	bcs.n	900104a0 <tcp_receive+0x9c8>
90010492:	4b56      	ldr	r3, [pc, #344]	; (900105ec <tcp_receive+0xb14>)
90010494:	f240 6207 	movw	r2, #1543	; 0x607
90010498:	4957      	ldr	r1, [pc, #348]	; (900105f8 <tcp_receive+0xb20>)
9001049a:	4856      	ldr	r0, [pc, #344]	; (900105f4 <tcp_receive+0xb1c>)
9001049c:	f005 fbaa 	bl	90015bf4 <iprintf>
        pcb->rcv_wnd -= tcplen;
900104a0:	687b      	ldr	r3, [r7, #4]
900104a2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
900104a4:	4b4e      	ldr	r3, [pc, #312]	; (900105e0 <tcp_receive+0xb08>)
900104a6:	881b      	ldrh	r3, [r3, #0]
900104a8:	1ad3      	subs	r3, r2, r3
900104aa:	b29a      	uxth	r2, r3
900104ac:	687b      	ldr	r3, [r7, #4]
900104ae:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
900104b0:	6878      	ldr	r0, [r7, #4]
900104b2:	f7fc fe93 	bl	9000d1dc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
900104b6:	4b4c      	ldr	r3, [pc, #304]	; (900105e8 <tcp_receive+0xb10>)
900104b8:	685b      	ldr	r3, [r3, #4]
900104ba:	891b      	ldrh	r3, [r3, #8]
900104bc:	2b00      	cmp	r3, #0
900104be:	d006      	beq.n	900104ce <tcp_receive+0x9f6>
          recv_data = inseg.p;
900104c0:	4b49      	ldr	r3, [pc, #292]	; (900105e8 <tcp_receive+0xb10>)
900104c2:	685b      	ldr	r3, [r3, #4]
900104c4:	4a4d      	ldr	r2, [pc, #308]	; (900105fc <tcp_receive+0xb24>)
900104c6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
900104c8:	4b47      	ldr	r3, [pc, #284]	; (900105e8 <tcp_receive+0xb10>)
900104ca:	2200      	movs	r2, #0
900104cc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
900104ce:	4b46      	ldr	r3, [pc, #280]	; (900105e8 <tcp_receive+0xb10>)
900104d0:	68db      	ldr	r3, [r3, #12]
900104d2:	899b      	ldrh	r3, [r3, #12]
900104d4:	b29b      	uxth	r3, r3
900104d6:	4618      	mov	r0, r3
900104d8:	f7fa fa58 	bl	9000a98c <lwip_htons>
900104dc:	4603      	mov	r3, r0
900104de:	b2db      	uxtb	r3, r3
900104e0:	f003 0301 	and.w	r3, r3, #1
900104e4:	2b00      	cmp	r3, #0
900104e6:	f000 80b8 	beq.w	9001065a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
900104ea:	4b45      	ldr	r3, [pc, #276]	; (90010600 <tcp_receive+0xb28>)
900104ec:	781b      	ldrb	r3, [r3, #0]
900104ee:	f043 0320 	orr.w	r3, r3, #32
900104f2:	b2da      	uxtb	r2, r3
900104f4:	4b42      	ldr	r3, [pc, #264]	; (90010600 <tcp_receive+0xb28>)
900104f6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
900104f8:	e0af      	b.n	9001065a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
900104fa:	687b      	ldr	r3, [r7, #4]
900104fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
900104fe:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
90010500:	687b      	ldr	r3, [r7, #4]
90010502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90010504:	68db      	ldr	r3, [r3, #12]
90010506:	685b      	ldr	r3, [r3, #4]
90010508:	4a36      	ldr	r2, [pc, #216]	; (900105e4 <tcp_receive+0xb0c>)
9001050a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
9001050c:	68bb      	ldr	r3, [r7, #8]
9001050e:	891b      	ldrh	r3, [r3, #8]
90010510:	461c      	mov	r4, r3
90010512:	68bb      	ldr	r3, [r7, #8]
90010514:	68db      	ldr	r3, [r3, #12]
90010516:	899b      	ldrh	r3, [r3, #12]
90010518:	b29b      	uxth	r3, r3
9001051a:	4618      	mov	r0, r3
9001051c:	f7fa fa36 	bl	9000a98c <lwip_htons>
90010520:	4603      	mov	r3, r0
90010522:	b2db      	uxtb	r3, r3
90010524:	f003 0303 	and.w	r3, r3, #3
90010528:	2b00      	cmp	r3, #0
9001052a:	d001      	beq.n	90010530 <tcp_receive+0xa58>
9001052c:	2301      	movs	r3, #1
9001052e:	e000      	b.n	90010532 <tcp_receive+0xa5a>
90010530:	2300      	movs	r3, #0
90010532:	191a      	adds	r2, r3, r4
90010534:	687b      	ldr	r3, [r7, #4]
90010536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90010538:	441a      	add	r2, r3
9001053a:	687b      	ldr	r3, [r7, #4]
9001053c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
9001053e:	687b      	ldr	r3, [r7, #4]
90010540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
90010542:	461c      	mov	r4, r3
90010544:	68bb      	ldr	r3, [r7, #8]
90010546:	891b      	ldrh	r3, [r3, #8]
90010548:	461d      	mov	r5, r3
9001054a:	68bb      	ldr	r3, [r7, #8]
9001054c:	68db      	ldr	r3, [r3, #12]
9001054e:	899b      	ldrh	r3, [r3, #12]
90010550:	b29b      	uxth	r3, r3
90010552:	4618      	mov	r0, r3
90010554:	f7fa fa1a 	bl	9000a98c <lwip_htons>
90010558:	4603      	mov	r3, r0
9001055a:	b2db      	uxtb	r3, r3
9001055c:	f003 0303 	and.w	r3, r3, #3
90010560:	2b00      	cmp	r3, #0
90010562:	d001      	beq.n	90010568 <tcp_receive+0xa90>
90010564:	2301      	movs	r3, #1
90010566:	e000      	b.n	9001056a <tcp_receive+0xa92>
90010568:	2300      	movs	r3, #0
9001056a:	442b      	add	r3, r5
9001056c:	429c      	cmp	r4, r3
9001056e:	d206      	bcs.n	9001057e <tcp_receive+0xaa6>
90010570:	4b1e      	ldr	r3, [pc, #120]	; (900105ec <tcp_receive+0xb14>)
90010572:	f240 622b 	movw	r2, #1579	; 0x62b
90010576:	4923      	ldr	r1, [pc, #140]	; (90010604 <tcp_receive+0xb2c>)
90010578:	481e      	ldr	r0, [pc, #120]	; (900105f4 <tcp_receive+0xb1c>)
9001057a:	f005 fb3b 	bl	90015bf4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
9001057e:	68bb      	ldr	r3, [r7, #8]
90010580:	891b      	ldrh	r3, [r3, #8]
90010582:	461c      	mov	r4, r3
90010584:	68bb      	ldr	r3, [r7, #8]
90010586:	68db      	ldr	r3, [r3, #12]
90010588:	899b      	ldrh	r3, [r3, #12]
9001058a:	b29b      	uxth	r3, r3
9001058c:	4618      	mov	r0, r3
9001058e:	f7fa f9fd 	bl	9000a98c <lwip_htons>
90010592:	4603      	mov	r3, r0
90010594:	b2db      	uxtb	r3, r3
90010596:	f003 0303 	and.w	r3, r3, #3
9001059a:	2b00      	cmp	r3, #0
9001059c:	d001      	beq.n	900105a2 <tcp_receive+0xaca>
9001059e:	2301      	movs	r3, #1
900105a0:	e000      	b.n	900105a4 <tcp_receive+0xacc>
900105a2:	2300      	movs	r3, #0
900105a4:	1919      	adds	r1, r3, r4
900105a6:	687b      	ldr	r3, [r7, #4]
900105a8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
900105aa:	b28b      	uxth	r3, r1
900105ac:	1ad3      	subs	r3, r2, r3
900105ae:	b29a      	uxth	r2, r3
900105b0:	687b      	ldr	r3, [r7, #4]
900105b2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
900105b4:	6878      	ldr	r0, [r7, #4]
900105b6:	f7fc fe11 	bl	9000d1dc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
900105ba:	68bb      	ldr	r3, [r7, #8]
900105bc:	685b      	ldr	r3, [r3, #4]
900105be:	891b      	ldrh	r3, [r3, #8]
900105c0:	2b00      	cmp	r3, #0
900105c2:	d028      	beq.n	90010616 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
900105c4:	4b0d      	ldr	r3, [pc, #52]	; (900105fc <tcp_receive+0xb24>)
900105c6:	681b      	ldr	r3, [r3, #0]
900105c8:	2b00      	cmp	r3, #0
900105ca:	d01d      	beq.n	90010608 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
900105cc:	4b0b      	ldr	r3, [pc, #44]	; (900105fc <tcp_receive+0xb24>)
900105ce:	681a      	ldr	r2, [r3, #0]
900105d0:	68bb      	ldr	r3, [r7, #8]
900105d2:	685b      	ldr	r3, [r3, #4]
900105d4:	4619      	mov	r1, r3
900105d6:	4610      	mov	r0, r2
900105d8:	f7fb ffba 	bl	9000c550 <pbuf_cat>
900105dc:	e018      	b.n	90010610 <tcp_receive+0xb38>
900105de:	bf00      	nop
900105e0:	2401f3e6 	.word	0x2401f3e6
900105e4:	2401f3dc 	.word	0x2401f3dc
900105e8:	2401f3bc 	.word	0x2401f3bc
900105ec:	90018f90 	.word	0x90018f90
900105f0:	90019370 	.word	0x90019370
900105f4:	90018fdc 	.word	0x90018fdc
900105f8:	900193ac 	.word	0x900193ac
900105fc:	2401f3ec 	.word	0x2401f3ec
90010600:	2401f3e9 	.word	0x2401f3e9
90010604:	900193cc 	.word	0x900193cc
            } else {
              recv_data = cseg->p;
90010608:	68bb      	ldr	r3, [r7, #8]
9001060a:	685b      	ldr	r3, [r3, #4]
9001060c:	4a70      	ldr	r2, [pc, #448]	; (900107d0 <tcp_receive+0xcf8>)
9001060e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
90010610:	68bb      	ldr	r3, [r7, #8]
90010612:	2200      	movs	r2, #0
90010614:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
90010616:	68bb      	ldr	r3, [r7, #8]
90010618:	68db      	ldr	r3, [r3, #12]
9001061a:	899b      	ldrh	r3, [r3, #12]
9001061c:	b29b      	uxth	r3, r3
9001061e:	4618      	mov	r0, r3
90010620:	f7fa f9b4 	bl	9000a98c <lwip_htons>
90010624:	4603      	mov	r3, r0
90010626:	b2db      	uxtb	r3, r3
90010628:	f003 0301 	and.w	r3, r3, #1
9001062c:	2b00      	cmp	r3, #0
9001062e:	d00d      	beq.n	9001064c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
90010630:	4b68      	ldr	r3, [pc, #416]	; (900107d4 <tcp_receive+0xcfc>)
90010632:	781b      	ldrb	r3, [r3, #0]
90010634:	f043 0320 	orr.w	r3, r3, #32
90010638:	b2da      	uxtb	r2, r3
9001063a:	4b66      	ldr	r3, [pc, #408]	; (900107d4 <tcp_receive+0xcfc>)
9001063c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
9001063e:	687b      	ldr	r3, [r7, #4]
90010640:	7d1b      	ldrb	r3, [r3, #20]
90010642:	2b04      	cmp	r3, #4
90010644:	d102      	bne.n	9001064c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
90010646:	687b      	ldr	r3, [r7, #4]
90010648:	2207      	movs	r2, #7
9001064a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
9001064c:	68bb      	ldr	r3, [r7, #8]
9001064e:	681a      	ldr	r2, [r3, #0]
90010650:	687b      	ldr	r3, [r7, #4]
90010652:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
90010654:	68b8      	ldr	r0, [r7, #8]
90010656:	f7fd fae6 	bl	9000dc26 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
9001065a:	687b      	ldr	r3, [r7, #4]
9001065c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9001065e:	2b00      	cmp	r3, #0
90010660:	d008      	beq.n	90010674 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
90010662:	687b      	ldr	r3, [r7, #4]
90010664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90010666:	68db      	ldr	r3, [r3, #12]
90010668:	685a      	ldr	r2, [r3, #4]
9001066a:	687b      	ldr	r3, [r7, #4]
9001066c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
9001066e:	429a      	cmp	r2, r3
90010670:	f43f af43 	beq.w	900104fa <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
90010674:	687b      	ldr	r3, [r7, #4]
90010676:	8b5b      	ldrh	r3, [r3, #26]
90010678:	f003 0301 	and.w	r3, r3, #1
9001067c:	2b00      	cmp	r3, #0
9001067e:	d00e      	beq.n	9001069e <tcp_receive+0xbc6>
90010680:	687b      	ldr	r3, [r7, #4]
90010682:	8b5b      	ldrh	r3, [r3, #26]
90010684:	f023 0301 	bic.w	r3, r3, #1
90010688:	b29a      	uxth	r2, r3
9001068a:	687b      	ldr	r3, [r7, #4]
9001068c:	835a      	strh	r2, [r3, #26]
9001068e:	687b      	ldr	r3, [r7, #4]
90010690:	8b5b      	ldrh	r3, [r3, #26]
90010692:	f043 0302 	orr.w	r3, r3, #2
90010696:	b29a      	uxth	r2, r3
90010698:	687b      	ldr	r3, [r7, #4]
9001069a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
9001069c:	e188      	b.n	900109b0 <tcp_receive+0xed8>
        tcp_ack(pcb);
9001069e:	687b      	ldr	r3, [r7, #4]
900106a0:	8b5b      	ldrh	r3, [r3, #26]
900106a2:	f043 0301 	orr.w	r3, r3, #1
900106a6:	b29a      	uxth	r2, r3
900106a8:	687b      	ldr	r3, [r7, #4]
900106aa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
900106ac:	e180      	b.n	900109b0 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
900106ae:	687b      	ldr	r3, [r7, #4]
900106b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
900106b2:	2b00      	cmp	r3, #0
900106b4:	d106      	bne.n	900106c4 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
900106b6:	4848      	ldr	r0, [pc, #288]	; (900107d8 <tcp_receive+0xd00>)
900106b8:	f7fd faec 	bl	9000dc94 <tcp_seg_copy>
900106bc:	4602      	mov	r2, r0
900106be:	687b      	ldr	r3, [r7, #4]
900106c0:	675a      	str	r2, [r3, #116]	; 0x74
900106c2:	e16d      	b.n	900109a0 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
900106c4:	2300      	movs	r3, #0
900106c6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
900106c8:	687b      	ldr	r3, [r7, #4]
900106ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
900106cc:	63bb      	str	r3, [r7, #56]	; 0x38
900106ce:	e157      	b.n	90010980 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
900106d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900106d2:	68db      	ldr	r3, [r3, #12]
900106d4:	685a      	ldr	r2, [r3, #4]
900106d6:	4b41      	ldr	r3, [pc, #260]	; (900107dc <tcp_receive+0xd04>)
900106d8:	681b      	ldr	r3, [r3, #0]
900106da:	429a      	cmp	r2, r3
900106dc:	d11d      	bne.n	9001071a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
900106de:	4b3e      	ldr	r3, [pc, #248]	; (900107d8 <tcp_receive+0xd00>)
900106e0:	891a      	ldrh	r2, [r3, #8]
900106e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900106e4:	891b      	ldrh	r3, [r3, #8]
900106e6:	429a      	cmp	r2, r3
900106e8:	f240 814f 	bls.w	9001098a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
900106ec:	483a      	ldr	r0, [pc, #232]	; (900107d8 <tcp_receive+0xd00>)
900106ee:	f7fd fad1 	bl	9000dc94 <tcp_seg_copy>
900106f2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
900106f4:	697b      	ldr	r3, [r7, #20]
900106f6:	2b00      	cmp	r3, #0
900106f8:	f000 8149 	beq.w	9001098e <tcp_receive+0xeb6>
                  if (prev != NULL) {
900106fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
900106fe:	2b00      	cmp	r3, #0
90010700:	d003      	beq.n	9001070a <tcp_receive+0xc32>
                    prev->next = cseg;
90010702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90010704:	697a      	ldr	r2, [r7, #20]
90010706:	601a      	str	r2, [r3, #0]
90010708:	e002      	b.n	90010710 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
9001070a:	687b      	ldr	r3, [r7, #4]
9001070c:	697a      	ldr	r2, [r7, #20]
9001070e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
90010710:	6bb9      	ldr	r1, [r7, #56]	; 0x38
90010712:	6978      	ldr	r0, [r7, #20]
90010714:	f7ff f8dc 	bl	9000f8d0 <tcp_oos_insert_segment>
                }
                break;
90010718:	e139      	b.n	9001098e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
9001071a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9001071c:	2b00      	cmp	r3, #0
9001071e:	d117      	bne.n	90010750 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
90010720:	4b2e      	ldr	r3, [pc, #184]	; (900107dc <tcp_receive+0xd04>)
90010722:	681a      	ldr	r2, [r3, #0]
90010724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90010726:	68db      	ldr	r3, [r3, #12]
90010728:	685b      	ldr	r3, [r3, #4]
9001072a:	1ad3      	subs	r3, r2, r3
9001072c:	2b00      	cmp	r3, #0
9001072e:	da57      	bge.n	900107e0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
90010730:	4829      	ldr	r0, [pc, #164]	; (900107d8 <tcp_receive+0xd00>)
90010732:	f7fd faaf 	bl	9000dc94 <tcp_seg_copy>
90010736:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
90010738:	69bb      	ldr	r3, [r7, #24]
9001073a:	2b00      	cmp	r3, #0
9001073c:	f000 8129 	beq.w	90010992 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
90010740:	687b      	ldr	r3, [r7, #4]
90010742:	69ba      	ldr	r2, [r7, #24]
90010744:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
90010746:	6bb9      	ldr	r1, [r7, #56]	; 0x38
90010748:	69b8      	ldr	r0, [r7, #24]
9001074a:	f7ff f8c1 	bl	9000f8d0 <tcp_oos_insert_segment>
                  }
                  break;
9001074e:	e120      	b.n	90010992 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
90010750:	4b22      	ldr	r3, [pc, #136]	; (900107dc <tcp_receive+0xd04>)
90010752:	681a      	ldr	r2, [r3, #0]
90010754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90010756:	68db      	ldr	r3, [r3, #12]
90010758:	685b      	ldr	r3, [r3, #4]
9001075a:	1ad3      	subs	r3, r2, r3
9001075c:	3b01      	subs	r3, #1
9001075e:	2b00      	cmp	r3, #0
90010760:	db3e      	blt.n	900107e0 <tcp_receive+0xd08>
90010762:	4b1e      	ldr	r3, [pc, #120]	; (900107dc <tcp_receive+0xd04>)
90010764:	681a      	ldr	r2, [r3, #0]
90010766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90010768:	68db      	ldr	r3, [r3, #12]
9001076a:	685b      	ldr	r3, [r3, #4]
9001076c:	1ad3      	subs	r3, r2, r3
9001076e:	3301      	adds	r3, #1
90010770:	2b00      	cmp	r3, #0
90010772:	dc35      	bgt.n	900107e0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
90010774:	4818      	ldr	r0, [pc, #96]	; (900107d8 <tcp_receive+0xd00>)
90010776:	f7fd fa8d 	bl	9000dc94 <tcp_seg_copy>
9001077a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
9001077c:	69fb      	ldr	r3, [r7, #28]
9001077e:	2b00      	cmp	r3, #0
90010780:	f000 8109 	beq.w	90010996 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
90010784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90010786:	68db      	ldr	r3, [r3, #12]
90010788:	685b      	ldr	r3, [r3, #4]
9001078a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
9001078c:	8912      	ldrh	r2, [r2, #8]
9001078e:	441a      	add	r2, r3
90010790:	4b12      	ldr	r3, [pc, #72]	; (900107dc <tcp_receive+0xd04>)
90010792:	681b      	ldr	r3, [r3, #0]
90010794:	1ad3      	subs	r3, r2, r3
90010796:	2b00      	cmp	r3, #0
90010798:	dd12      	ble.n	900107c0 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
9001079a:	4b10      	ldr	r3, [pc, #64]	; (900107dc <tcp_receive+0xd04>)
9001079c:	681b      	ldr	r3, [r3, #0]
9001079e:	b29a      	uxth	r2, r3
900107a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
900107a2:	68db      	ldr	r3, [r3, #12]
900107a4:	685b      	ldr	r3, [r3, #4]
900107a6:	b29b      	uxth	r3, r3
900107a8:	1ad3      	subs	r3, r2, r3
900107aa:	b29a      	uxth	r2, r3
900107ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
900107ae:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
900107b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
900107b2:	685a      	ldr	r2, [r3, #4]
900107b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
900107b6:	891b      	ldrh	r3, [r3, #8]
900107b8:	4619      	mov	r1, r3
900107ba:	4610      	mov	r0, r2
900107bc:	f7fb fc74 	bl	9000c0a8 <pbuf_realloc>
                    }
                    prev->next = cseg;
900107c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
900107c2:	69fa      	ldr	r2, [r7, #28]
900107c4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
900107c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
900107c8:	69f8      	ldr	r0, [r7, #28]
900107ca:	f7ff f881 	bl	9000f8d0 <tcp_oos_insert_segment>
                  }
                  break;
900107ce:	e0e2      	b.n	90010996 <tcp_receive+0xebe>
900107d0:	2401f3ec 	.word	0x2401f3ec
900107d4:	2401f3e9 	.word	0x2401f3e9
900107d8:	2401f3bc 	.word	0x2401f3bc
900107dc:	2401f3dc 	.word	0x2401f3dc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
900107e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900107e2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
900107e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900107e6:	681b      	ldr	r3, [r3, #0]
900107e8:	2b00      	cmp	r3, #0
900107ea:	f040 80c6 	bne.w	9001097a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
900107ee:	4b80      	ldr	r3, [pc, #512]	; (900109f0 <tcp_receive+0xf18>)
900107f0:	681a      	ldr	r2, [r3, #0]
900107f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900107f4:	68db      	ldr	r3, [r3, #12]
900107f6:	685b      	ldr	r3, [r3, #4]
900107f8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
900107fa:	2b00      	cmp	r3, #0
900107fc:	f340 80bd 	ble.w	9001097a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
90010800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90010802:	68db      	ldr	r3, [r3, #12]
90010804:	899b      	ldrh	r3, [r3, #12]
90010806:	b29b      	uxth	r3, r3
90010808:	4618      	mov	r0, r3
9001080a:	f7fa f8bf 	bl	9000a98c <lwip_htons>
9001080e:	4603      	mov	r3, r0
90010810:	b2db      	uxtb	r3, r3
90010812:	f003 0301 	and.w	r3, r3, #1
90010816:	2b00      	cmp	r3, #0
90010818:	f040 80bf 	bne.w	9001099a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
9001081c:	4875      	ldr	r0, [pc, #468]	; (900109f4 <tcp_receive+0xf1c>)
9001081e:	f7fd fa39 	bl	9000dc94 <tcp_seg_copy>
90010822:	4602      	mov	r2, r0
90010824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90010826:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
90010828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9001082a:	681b      	ldr	r3, [r3, #0]
9001082c:	2b00      	cmp	r3, #0
9001082e:	f000 80b6 	beq.w	9001099e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
90010832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90010834:	68db      	ldr	r3, [r3, #12]
90010836:	685b      	ldr	r3, [r3, #4]
90010838:	6bba      	ldr	r2, [r7, #56]	; 0x38
9001083a:	8912      	ldrh	r2, [r2, #8]
9001083c:	441a      	add	r2, r3
9001083e:	4b6c      	ldr	r3, [pc, #432]	; (900109f0 <tcp_receive+0xf18>)
90010840:	681b      	ldr	r3, [r3, #0]
90010842:	1ad3      	subs	r3, r2, r3
90010844:	2b00      	cmp	r3, #0
90010846:	dd12      	ble.n	9001086e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
90010848:	4b69      	ldr	r3, [pc, #420]	; (900109f0 <tcp_receive+0xf18>)
9001084a:	681b      	ldr	r3, [r3, #0]
9001084c:	b29a      	uxth	r2, r3
9001084e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90010850:	68db      	ldr	r3, [r3, #12]
90010852:	685b      	ldr	r3, [r3, #4]
90010854:	b29b      	uxth	r3, r3
90010856:	1ad3      	subs	r3, r2, r3
90010858:	b29a      	uxth	r2, r3
9001085a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9001085c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
9001085e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90010860:	685a      	ldr	r2, [r3, #4]
90010862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90010864:	891b      	ldrh	r3, [r3, #8]
90010866:	4619      	mov	r1, r3
90010868:	4610      	mov	r0, r2
9001086a:	f7fb fc1d 	bl	9000c0a8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
9001086e:	4b62      	ldr	r3, [pc, #392]	; (900109f8 <tcp_receive+0xf20>)
90010870:	881b      	ldrh	r3, [r3, #0]
90010872:	461a      	mov	r2, r3
90010874:	4b5e      	ldr	r3, [pc, #376]	; (900109f0 <tcp_receive+0xf18>)
90010876:	681b      	ldr	r3, [r3, #0]
90010878:	441a      	add	r2, r3
9001087a:	687b      	ldr	r3, [r7, #4]
9001087c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9001087e:	6879      	ldr	r1, [r7, #4]
90010880:	8d09      	ldrh	r1, [r1, #40]	; 0x28
90010882:	440b      	add	r3, r1
90010884:	1ad3      	subs	r3, r2, r3
90010886:	2b00      	cmp	r3, #0
90010888:	f340 8089 	ble.w	9001099e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
9001088c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9001088e:	681b      	ldr	r3, [r3, #0]
90010890:	68db      	ldr	r3, [r3, #12]
90010892:	899b      	ldrh	r3, [r3, #12]
90010894:	b29b      	uxth	r3, r3
90010896:	4618      	mov	r0, r3
90010898:	f7fa f878 	bl	9000a98c <lwip_htons>
9001089c:	4603      	mov	r3, r0
9001089e:	b2db      	uxtb	r3, r3
900108a0:	f003 0301 	and.w	r3, r3, #1
900108a4:	2b00      	cmp	r3, #0
900108a6:	d022      	beq.n	900108ee <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
900108a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900108aa:	681b      	ldr	r3, [r3, #0]
900108ac:	68db      	ldr	r3, [r3, #12]
900108ae:	899b      	ldrh	r3, [r3, #12]
900108b0:	b29b      	uxth	r3, r3
900108b2:	b21b      	sxth	r3, r3
900108b4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
900108b8:	b21c      	sxth	r4, r3
900108ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900108bc:	681b      	ldr	r3, [r3, #0]
900108be:	68db      	ldr	r3, [r3, #12]
900108c0:	899b      	ldrh	r3, [r3, #12]
900108c2:	b29b      	uxth	r3, r3
900108c4:	4618      	mov	r0, r3
900108c6:	f7fa f861 	bl	9000a98c <lwip_htons>
900108ca:	4603      	mov	r3, r0
900108cc:	b2db      	uxtb	r3, r3
900108ce:	b29b      	uxth	r3, r3
900108d0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
900108d4:	b29b      	uxth	r3, r3
900108d6:	4618      	mov	r0, r3
900108d8:	f7fa f858 	bl	9000a98c <lwip_htons>
900108dc:	4603      	mov	r3, r0
900108de:	b21b      	sxth	r3, r3
900108e0:	4323      	orrs	r3, r4
900108e2:	b21a      	sxth	r2, r3
900108e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900108e6:	681b      	ldr	r3, [r3, #0]
900108e8:	68db      	ldr	r3, [r3, #12]
900108ea:	b292      	uxth	r2, r2
900108ec:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
900108ee:	687b      	ldr	r3, [r7, #4]
900108f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900108f2:	b29a      	uxth	r2, r3
900108f4:	687b      	ldr	r3, [r7, #4]
900108f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
900108f8:	4413      	add	r3, r2
900108fa:	b299      	uxth	r1, r3
900108fc:	4b3c      	ldr	r3, [pc, #240]	; (900109f0 <tcp_receive+0xf18>)
900108fe:	681b      	ldr	r3, [r3, #0]
90010900:	b29a      	uxth	r2, r3
90010902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90010904:	681b      	ldr	r3, [r3, #0]
90010906:	1a8a      	subs	r2, r1, r2
90010908:	b292      	uxth	r2, r2
9001090a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
9001090c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9001090e:	681b      	ldr	r3, [r3, #0]
90010910:	685a      	ldr	r2, [r3, #4]
90010912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90010914:	681b      	ldr	r3, [r3, #0]
90010916:	891b      	ldrh	r3, [r3, #8]
90010918:	4619      	mov	r1, r3
9001091a:	4610      	mov	r0, r2
9001091c:	f7fb fbc4 	bl	9000c0a8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
90010920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90010922:	681b      	ldr	r3, [r3, #0]
90010924:	891c      	ldrh	r4, [r3, #8]
90010926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90010928:	681b      	ldr	r3, [r3, #0]
9001092a:	68db      	ldr	r3, [r3, #12]
9001092c:	899b      	ldrh	r3, [r3, #12]
9001092e:	b29b      	uxth	r3, r3
90010930:	4618      	mov	r0, r3
90010932:	f7fa f82b 	bl	9000a98c <lwip_htons>
90010936:	4603      	mov	r3, r0
90010938:	b2db      	uxtb	r3, r3
9001093a:	f003 0303 	and.w	r3, r3, #3
9001093e:	2b00      	cmp	r3, #0
90010940:	d001      	beq.n	90010946 <tcp_receive+0xe6e>
90010942:	2301      	movs	r3, #1
90010944:	e000      	b.n	90010948 <tcp_receive+0xe70>
90010946:	2300      	movs	r3, #0
90010948:	4423      	add	r3, r4
9001094a:	b29a      	uxth	r2, r3
9001094c:	4b2a      	ldr	r3, [pc, #168]	; (900109f8 <tcp_receive+0xf20>)
9001094e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
90010950:	4b29      	ldr	r3, [pc, #164]	; (900109f8 <tcp_receive+0xf20>)
90010952:	881b      	ldrh	r3, [r3, #0]
90010954:	461a      	mov	r2, r3
90010956:	4b26      	ldr	r3, [pc, #152]	; (900109f0 <tcp_receive+0xf18>)
90010958:	681b      	ldr	r3, [r3, #0]
9001095a:	441a      	add	r2, r3
9001095c:	687b      	ldr	r3, [r7, #4]
9001095e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90010960:	6879      	ldr	r1, [r7, #4]
90010962:	8d09      	ldrh	r1, [r1, #40]	; 0x28
90010964:	440b      	add	r3, r1
90010966:	429a      	cmp	r2, r3
90010968:	d019      	beq.n	9001099e <tcp_receive+0xec6>
9001096a:	4b24      	ldr	r3, [pc, #144]	; (900109fc <tcp_receive+0xf24>)
9001096c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
90010970:	4923      	ldr	r1, [pc, #140]	; (90010a00 <tcp_receive+0xf28>)
90010972:	4824      	ldr	r0, [pc, #144]	; (90010a04 <tcp_receive+0xf2c>)
90010974:	f005 f93e 	bl	90015bf4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
90010978:	e011      	b.n	9001099e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
9001097a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
9001097c:	681b      	ldr	r3, [r3, #0]
9001097e:	63bb      	str	r3, [r7, #56]	; 0x38
90010980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
90010982:	2b00      	cmp	r3, #0
90010984:	f47f aea4 	bne.w	900106d0 <tcp_receive+0xbf8>
90010988:	e00a      	b.n	900109a0 <tcp_receive+0xec8>
                break;
9001098a:	bf00      	nop
9001098c:	e008      	b.n	900109a0 <tcp_receive+0xec8>
                break;
9001098e:	bf00      	nop
90010990:	e006      	b.n	900109a0 <tcp_receive+0xec8>
                  break;
90010992:	bf00      	nop
90010994:	e004      	b.n	900109a0 <tcp_receive+0xec8>
                  break;
90010996:	bf00      	nop
90010998:	e002      	b.n	900109a0 <tcp_receive+0xec8>
                  break;
9001099a:	bf00      	nop
9001099c:	e000      	b.n	900109a0 <tcp_receive+0xec8>
                break;
9001099e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
900109a0:	6878      	ldr	r0, [r7, #4]
900109a2:	f001 fe8b 	bl	900126bc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
900109a6:	e003      	b.n	900109b0 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
900109a8:	6878      	ldr	r0, [r7, #4]
900109aa:	f001 fe87 	bl	900126bc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
900109ae:	e01a      	b.n	900109e6 <tcp_receive+0xf0e>
900109b0:	e019      	b.n	900109e6 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
900109b2:	4b0f      	ldr	r3, [pc, #60]	; (900109f0 <tcp_receive+0xf18>)
900109b4:	681a      	ldr	r2, [r3, #0]
900109b6:	687b      	ldr	r3, [r7, #4]
900109b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900109ba:	1ad3      	subs	r3, r2, r3
900109bc:	2b00      	cmp	r3, #0
900109be:	db0a      	blt.n	900109d6 <tcp_receive+0xefe>
900109c0:	4b0b      	ldr	r3, [pc, #44]	; (900109f0 <tcp_receive+0xf18>)
900109c2:	681a      	ldr	r2, [r3, #0]
900109c4:	687b      	ldr	r3, [r7, #4]
900109c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900109c8:	6879      	ldr	r1, [r7, #4]
900109ca:	8d09      	ldrh	r1, [r1, #40]	; 0x28
900109cc:	440b      	add	r3, r1
900109ce:	1ad3      	subs	r3, r2, r3
900109d0:	3301      	adds	r3, #1
900109d2:	2b00      	cmp	r3, #0
900109d4:	dd07      	ble.n	900109e6 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
900109d6:	687b      	ldr	r3, [r7, #4]
900109d8:	8b5b      	ldrh	r3, [r3, #26]
900109da:	f043 0302 	orr.w	r3, r3, #2
900109de:	b29a      	uxth	r2, r3
900109e0:	687b      	ldr	r3, [r7, #4]
900109e2:	835a      	strh	r2, [r3, #26]
    }
  }
}
900109e4:	e7ff      	b.n	900109e6 <tcp_receive+0xf0e>
900109e6:	bf00      	nop
900109e8:	3750      	adds	r7, #80	; 0x50
900109ea:	46bd      	mov	sp, r7
900109ec:	bdb0      	pop	{r4, r5, r7, pc}
900109ee:	bf00      	nop
900109f0:	2401f3dc 	.word	0x2401f3dc
900109f4:	2401f3bc 	.word	0x2401f3bc
900109f8:	2401f3e6 	.word	0x2401f3e6
900109fc:	90018f90 	.word	0x90018f90
90010a00:	90019338 	.word	0x90019338
90010a04:	90018fdc 	.word	0x90018fdc

90010a08 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
90010a08:	b480      	push	{r7}
90010a0a:	b083      	sub	sp, #12
90010a0c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
90010a0e:	4b15      	ldr	r3, [pc, #84]	; (90010a64 <tcp_get_next_optbyte+0x5c>)
90010a10:	881b      	ldrh	r3, [r3, #0]
90010a12:	1c5a      	adds	r2, r3, #1
90010a14:	b291      	uxth	r1, r2
90010a16:	4a13      	ldr	r2, [pc, #76]	; (90010a64 <tcp_get_next_optbyte+0x5c>)
90010a18:	8011      	strh	r1, [r2, #0]
90010a1a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
90010a1c:	4b12      	ldr	r3, [pc, #72]	; (90010a68 <tcp_get_next_optbyte+0x60>)
90010a1e:	681b      	ldr	r3, [r3, #0]
90010a20:	2b00      	cmp	r3, #0
90010a22:	d004      	beq.n	90010a2e <tcp_get_next_optbyte+0x26>
90010a24:	4b11      	ldr	r3, [pc, #68]	; (90010a6c <tcp_get_next_optbyte+0x64>)
90010a26:	881b      	ldrh	r3, [r3, #0]
90010a28:	88fa      	ldrh	r2, [r7, #6]
90010a2a:	429a      	cmp	r2, r3
90010a2c:	d208      	bcs.n	90010a40 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
90010a2e:	4b10      	ldr	r3, [pc, #64]	; (90010a70 <tcp_get_next_optbyte+0x68>)
90010a30:	681b      	ldr	r3, [r3, #0]
90010a32:	3314      	adds	r3, #20
90010a34:	603b      	str	r3, [r7, #0]
    return opts[optidx];
90010a36:	88fb      	ldrh	r3, [r7, #6]
90010a38:	683a      	ldr	r2, [r7, #0]
90010a3a:	4413      	add	r3, r2
90010a3c:	781b      	ldrb	r3, [r3, #0]
90010a3e:	e00b      	b.n	90010a58 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
90010a40:	88fb      	ldrh	r3, [r7, #6]
90010a42:	b2da      	uxtb	r2, r3
90010a44:	4b09      	ldr	r3, [pc, #36]	; (90010a6c <tcp_get_next_optbyte+0x64>)
90010a46:	881b      	ldrh	r3, [r3, #0]
90010a48:	b2db      	uxtb	r3, r3
90010a4a:	1ad3      	subs	r3, r2, r3
90010a4c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
90010a4e:	4b06      	ldr	r3, [pc, #24]	; (90010a68 <tcp_get_next_optbyte+0x60>)
90010a50:	681a      	ldr	r2, [r3, #0]
90010a52:	797b      	ldrb	r3, [r7, #5]
90010a54:	4413      	add	r3, r2
90010a56:	781b      	ldrb	r3, [r3, #0]
  }
}
90010a58:	4618      	mov	r0, r3
90010a5a:	370c      	adds	r7, #12
90010a5c:	46bd      	mov	sp, r7
90010a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
90010a62:	4770      	bx	lr
90010a64:	2401f3d8 	.word	0x2401f3d8
90010a68:	2401f3d4 	.word	0x2401f3d4
90010a6c:	2401f3d2 	.word	0x2401f3d2
90010a70:	2401f3cc 	.word	0x2401f3cc

90010a74 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
90010a74:	b580      	push	{r7, lr}
90010a76:	b084      	sub	sp, #16
90010a78:	af00      	add	r7, sp, #0
90010a7a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
90010a7c:	687b      	ldr	r3, [r7, #4]
90010a7e:	2b00      	cmp	r3, #0
90010a80:	d106      	bne.n	90010a90 <tcp_parseopt+0x1c>
90010a82:	4b32      	ldr	r3, [pc, #200]	; (90010b4c <tcp_parseopt+0xd8>)
90010a84:	f240 727d 	movw	r2, #1917	; 0x77d
90010a88:	4931      	ldr	r1, [pc, #196]	; (90010b50 <tcp_parseopt+0xdc>)
90010a8a:	4832      	ldr	r0, [pc, #200]	; (90010b54 <tcp_parseopt+0xe0>)
90010a8c:	f005 f8b2 	bl	90015bf4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
90010a90:	4b31      	ldr	r3, [pc, #196]	; (90010b58 <tcp_parseopt+0xe4>)
90010a92:	881b      	ldrh	r3, [r3, #0]
90010a94:	2b00      	cmp	r3, #0
90010a96:	d055      	beq.n	90010b44 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
90010a98:	4b30      	ldr	r3, [pc, #192]	; (90010b5c <tcp_parseopt+0xe8>)
90010a9a:	2200      	movs	r2, #0
90010a9c:	801a      	strh	r2, [r3, #0]
90010a9e:	e045      	b.n	90010b2c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
90010aa0:	f7ff ffb2 	bl	90010a08 <tcp_get_next_optbyte>
90010aa4:	4603      	mov	r3, r0
90010aa6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
90010aa8:	7bfb      	ldrb	r3, [r7, #15]
90010aaa:	2b02      	cmp	r3, #2
90010aac:	d006      	beq.n	90010abc <tcp_parseopt+0x48>
90010aae:	2b02      	cmp	r3, #2
90010ab0:	dc2b      	bgt.n	90010b0a <tcp_parseopt+0x96>
90010ab2:	2b00      	cmp	r3, #0
90010ab4:	d041      	beq.n	90010b3a <tcp_parseopt+0xc6>
90010ab6:	2b01      	cmp	r3, #1
90010ab8:	d127      	bne.n	90010b0a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
90010aba:	e037      	b.n	90010b2c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
90010abc:	f7ff ffa4 	bl	90010a08 <tcp_get_next_optbyte>
90010ac0:	4603      	mov	r3, r0
90010ac2:	2b04      	cmp	r3, #4
90010ac4:	d13b      	bne.n	90010b3e <tcp_parseopt+0xca>
90010ac6:	4b25      	ldr	r3, [pc, #148]	; (90010b5c <tcp_parseopt+0xe8>)
90010ac8:	881b      	ldrh	r3, [r3, #0]
90010aca:	3301      	adds	r3, #1
90010acc:	4a22      	ldr	r2, [pc, #136]	; (90010b58 <tcp_parseopt+0xe4>)
90010ace:	8812      	ldrh	r2, [r2, #0]
90010ad0:	4293      	cmp	r3, r2
90010ad2:	da34      	bge.n	90010b3e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
90010ad4:	f7ff ff98 	bl	90010a08 <tcp_get_next_optbyte>
90010ad8:	4603      	mov	r3, r0
90010ada:	b29b      	uxth	r3, r3
90010adc:	021b      	lsls	r3, r3, #8
90010ade:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
90010ae0:	f7ff ff92 	bl	90010a08 <tcp_get_next_optbyte>
90010ae4:	4603      	mov	r3, r0
90010ae6:	b29a      	uxth	r2, r3
90010ae8:	89bb      	ldrh	r3, [r7, #12]
90010aea:	4313      	orrs	r3, r2
90010aec:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
90010aee:	89bb      	ldrh	r3, [r7, #12]
90010af0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
90010af4:	d804      	bhi.n	90010b00 <tcp_parseopt+0x8c>
90010af6:	89bb      	ldrh	r3, [r7, #12]
90010af8:	2b00      	cmp	r3, #0
90010afa:	d001      	beq.n	90010b00 <tcp_parseopt+0x8c>
90010afc:	89ba      	ldrh	r2, [r7, #12]
90010afe:	e001      	b.n	90010b04 <tcp_parseopt+0x90>
90010b00:	f44f 7206 	mov.w	r2, #536	; 0x218
90010b04:	687b      	ldr	r3, [r7, #4]
90010b06:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
90010b08:	e010      	b.n	90010b2c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
90010b0a:	f7ff ff7d 	bl	90010a08 <tcp_get_next_optbyte>
90010b0e:	4603      	mov	r3, r0
90010b10:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
90010b12:	7afb      	ldrb	r3, [r7, #11]
90010b14:	2b01      	cmp	r3, #1
90010b16:	d914      	bls.n	90010b42 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
90010b18:	7afb      	ldrb	r3, [r7, #11]
90010b1a:	b29a      	uxth	r2, r3
90010b1c:	4b0f      	ldr	r3, [pc, #60]	; (90010b5c <tcp_parseopt+0xe8>)
90010b1e:	881b      	ldrh	r3, [r3, #0]
90010b20:	4413      	add	r3, r2
90010b22:	b29b      	uxth	r3, r3
90010b24:	3b02      	subs	r3, #2
90010b26:	b29a      	uxth	r2, r3
90010b28:	4b0c      	ldr	r3, [pc, #48]	; (90010b5c <tcp_parseopt+0xe8>)
90010b2a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
90010b2c:	4b0b      	ldr	r3, [pc, #44]	; (90010b5c <tcp_parseopt+0xe8>)
90010b2e:	881a      	ldrh	r2, [r3, #0]
90010b30:	4b09      	ldr	r3, [pc, #36]	; (90010b58 <tcp_parseopt+0xe4>)
90010b32:	881b      	ldrh	r3, [r3, #0]
90010b34:	429a      	cmp	r2, r3
90010b36:	d3b3      	bcc.n	90010aa0 <tcp_parseopt+0x2c>
90010b38:	e004      	b.n	90010b44 <tcp_parseopt+0xd0>
          return;
90010b3a:	bf00      	nop
90010b3c:	e002      	b.n	90010b44 <tcp_parseopt+0xd0>
            return;
90010b3e:	bf00      	nop
90010b40:	e000      	b.n	90010b44 <tcp_parseopt+0xd0>
            return;
90010b42:	bf00      	nop
      }
    }
  }
}
90010b44:	3710      	adds	r7, #16
90010b46:	46bd      	mov	sp, r7
90010b48:	bd80      	pop	{r7, pc}
90010b4a:	bf00      	nop
90010b4c:	90018f90 	.word	0x90018f90
90010b50:	900193f4 	.word	0x900193f4
90010b54:	90018fdc 	.word	0x90018fdc
90010b58:	2401f3d0 	.word	0x2401f3d0
90010b5c:	2401f3d8 	.word	0x2401f3d8

90010b60 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
90010b60:	b480      	push	{r7}
90010b62:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
90010b64:	4b05      	ldr	r3, [pc, #20]	; (90010b7c <tcp_trigger_input_pcb_close+0x1c>)
90010b66:	781b      	ldrb	r3, [r3, #0]
90010b68:	f043 0310 	orr.w	r3, r3, #16
90010b6c:	b2da      	uxtb	r2, r3
90010b6e:	4b03      	ldr	r3, [pc, #12]	; (90010b7c <tcp_trigger_input_pcb_close+0x1c>)
90010b70:	701a      	strb	r2, [r3, #0]
}
90010b72:	bf00      	nop
90010b74:	46bd      	mov	sp, r7
90010b76:	f85d 7b04 	ldr.w	r7, [sp], #4
90010b7a:	4770      	bx	lr
90010b7c:	2401f3e9 	.word	0x2401f3e9

90010b80 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
90010b80:	b580      	push	{r7, lr}
90010b82:	b084      	sub	sp, #16
90010b84:	af00      	add	r7, sp, #0
90010b86:	60f8      	str	r0, [r7, #12]
90010b88:	60b9      	str	r1, [r7, #8]
90010b8a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
90010b8c:	68fb      	ldr	r3, [r7, #12]
90010b8e:	2b00      	cmp	r3, #0
90010b90:	d00a      	beq.n	90010ba8 <tcp_route+0x28>
90010b92:	68fb      	ldr	r3, [r7, #12]
90010b94:	7a1b      	ldrb	r3, [r3, #8]
90010b96:	2b00      	cmp	r3, #0
90010b98:	d006      	beq.n	90010ba8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
90010b9a:	68fb      	ldr	r3, [r7, #12]
90010b9c:	7a1b      	ldrb	r3, [r3, #8]
90010b9e:	4618      	mov	r0, r3
90010ba0:	f7fb f87a 	bl	9000bc98 <netif_get_by_index>
90010ba4:	4603      	mov	r3, r0
90010ba6:	e003      	b.n	90010bb0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
90010ba8:	6878      	ldr	r0, [r7, #4]
90010baa:	f003 fb2b 	bl	90014204 <ip4_route>
90010bae:	4603      	mov	r3, r0
  }
}
90010bb0:	4618      	mov	r0, r3
90010bb2:	3710      	adds	r7, #16
90010bb4:	46bd      	mov	sp, r7
90010bb6:	bd80      	pop	{r7, pc}

90010bb8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
90010bb8:	b590      	push	{r4, r7, lr}
90010bba:	b087      	sub	sp, #28
90010bbc:	af00      	add	r7, sp, #0
90010bbe:	60f8      	str	r0, [r7, #12]
90010bc0:	60b9      	str	r1, [r7, #8]
90010bc2:	603b      	str	r3, [r7, #0]
90010bc4:	4613      	mov	r3, r2
90010bc6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
90010bc8:	68fb      	ldr	r3, [r7, #12]
90010bca:	2b00      	cmp	r3, #0
90010bcc:	d105      	bne.n	90010bda <tcp_create_segment+0x22>
90010bce:	4b44      	ldr	r3, [pc, #272]	; (90010ce0 <tcp_create_segment+0x128>)
90010bd0:	22a3      	movs	r2, #163	; 0xa3
90010bd2:	4944      	ldr	r1, [pc, #272]	; (90010ce4 <tcp_create_segment+0x12c>)
90010bd4:	4844      	ldr	r0, [pc, #272]	; (90010ce8 <tcp_create_segment+0x130>)
90010bd6:	f005 f80d 	bl	90015bf4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
90010bda:	68bb      	ldr	r3, [r7, #8]
90010bdc:	2b00      	cmp	r3, #0
90010bde:	d105      	bne.n	90010bec <tcp_create_segment+0x34>
90010be0:	4b3f      	ldr	r3, [pc, #252]	; (90010ce0 <tcp_create_segment+0x128>)
90010be2:	22a4      	movs	r2, #164	; 0xa4
90010be4:	4941      	ldr	r1, [pc, #260]	; (90010cec <tcp_create_segment+0x134>)
90010be6:	4840      	ldr	r0, [pc, #256]	; (90010ce8 <tcp_create_segment+0x130>)
90010be8:	f005 f804 	bl	90015bf4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
90010bec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
90010bf0:	009b      	lsls	r3, r3, #2
90010bf2:	b2db      	uxtb	r3, r3
90010bf4:	f003 0304 	and.w	r3, r3, #4
90010bf8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
90010bfa:	2003      	movs	r0, #3
90010bfc:	f7fa fcc0 	bl	9000b580 <memp_malloc>
90010c00:	6138      	str	r0, [r7, #16]
90010c02:	693b      	ldr	r3, [r7, #16]
90010c04:	2b00      	cmp	r3, #0
90010c06:	d104      	bne.n	90010c12 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
90010c08:	68b8      	ldr	r0, [r7, #8]
90010c0a:	f7fb fbd3 	bl	9000c3b4 <pbuf_free>
    return NULL;
90010c0e:	2300      	movs	r3, #0
90010c10:	e061      	b.n	90010cd6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
90010c12:	693b      	ldr	r3, [r7, #16]
90010c14:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
90010c18:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
90010c1a:	693b      	ldr	r3, [r7, #16]
90010c1c:	2200      	movs	r2, #0
90010c1e:	601a      	str	r2, [r3, #0]
  seg->p = p;
90010c20:	693b      	ldr	r3, [r7, #16]
90010c22:	68ba      	ldr	r2, [r7, #8]
90010c24:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
90010c26:	68bb      	ldr	r3, [r7, #8]
90010c28:	891a      	ldrh	r2, [r3, #8]
90010c2a:	7dfb      	ldrb	r3, [r7, #23]
90010c2c:	b29b      	uxth	r3, r3
90010c2e:	429a      	cmp	r2, r3
90010c30:	d205      	bcs.n	90010c3e <tcp_create_segment+0x86>
90010c32:	4b2b      	ldr	r3, [pc, #172]	; (90010ce0 <tcp_create_segment+0x128>)
90010c34:	22b0      	movs	r2, #176	; 0xb0
90010c36:	492e      	ldr	r1, [pc, #184]	; (90010cf0 <tcp_create_segment+0x138>)
90010c38:	482b      	ldr	r0, [pc, #172]	; (90010ce8 <tcp_create_segment+0x130>)
90010c3a:	f004 ffdb 	bl	90015bf4 <iprintf>
  seg->len = p->tot_len - optlen;
90010c3e:	68bb      	ldr	r3, [r7, #8]
90010c40:	891a      	ldrh	r2, [r3, #8]
90010c42:	7dfb      	ldrb	r3, [r7, #23]
90010c44:	b29b      	uxth	r3, r3
90010c46:	1ad3      	subs	r3, r2, r3
90010c48:	b29a      	uxth	r2, r3
90010c4a:	693b      	ldr	r3, [r7, #16]
90010c4c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
90010c4e:	2114      	movs	r1, #20
90010c50:	68b8      	ldr	r0, [r7, #8]
90010c52:	f7fb fb19 	bl	9000c288 <pbuf_add_header>
90010c56:	4603      	mov	r3, r0
90010c58:	2b00      	cmp	r3, #0
90010c5a:	d004      	beq.n	90010c66 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
90010c5c:	6938      	ldr	r0, [r7, #16]
90010c5e:	f7fc ffe2 	bl	9000dc26 <tcp_seg_free>
    return NULL;
90010c62:	2300      	movs	r3, #0
90010c64:	e037      	b.n	90010cd6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
90010c66:	693b      	ldr	r3, [r7, #16]
90010c68:	685b      	ldr	r3, [r3, #4]
90010c6a:	685a      	ldr	r2, [r3, #4]
90010c6c:	693b      	ldr	r3, [r7, #16]
90010c6e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
90010c70:	68fb      	ldr	r3, [r7, #12]
90010c72:	8ada      	ldrh	r2, [r3, #22]
90010c74:	693b      	ldr	r3, [r7, #16]
90010c76:	68dc      	ldr	r4, [r3, #12]
90010c78:	4610      	mov	r0, r2
90010c7a:	f7f9 fe87 	bl	9000a98c <lwip_htons>
90010c7e:	4603      	mov	r3, r0
90010c80:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
90010c82:	68fb      	ldr	r3, [r7, #12]
90010c84:	8b1a      	ldrh	r2, [r3, #24]
90010c86:	693b      	ldr	r3, [r7, #16]
90010c88:	68dc      	ldr	r4, [r3, #12]
90010c8a:	4610      	mov	r0, r2
90010c8c:	f7f9 fe7e 	bl	9000a98c <lwip_htons>
90010c90:	4603      	mov	r3, r0
90010c92:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
90010c94:	693b      	ldr	r3, [r7, #16]
90010c96:	68dc      	ldr	r4, [r3, #12]
90010c98:	6838      	ldr	r0, [r7, #0]
90010c9a:	f7f9 fe8c 	bl	9000a9b6 <lwip_htonl>
90010c9e:	4603      	mov	r3, r0
90010ca0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
90010ca2:	7dfb      	ldrb	r3, [r7, #23]
90010ca4:	089b      	lsrs	r3, r3, #2
90010ca6:	b2db      	uxtb	r3, r3
90010ca8:	b29b      	uxth	r3, r3
90010caa:	3305      	adds	r3, #5
90010cac:	b29b      	uxth	r3, r3
90010cae:	031b      	lsls	r3, r3, #12
90010cb0:	b29a      	uxth	r2, r3
90010cb2:	79fb      	ldrb	r3, [r7, #7]
90010cb4:	b29b      	uxth	r3, r3
90010cb6:	4313      	orrs	r3, r2
90010cb8:	b29a      	uxth	r2, r3
90010cba:	693b      	ldr	r3, [r7, #16]
90010cbc:	68dc      	ldr	r4, [r3, #12]
90010cbe:	4610      	mov	r0, r2
90010cc0:	f7f9 fe64 	bl	9000a98c <lwip_htons>
90010cc4:	4603      	mov	r3, r0
90010cc6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
90010cc8:	693b      	ldr	r3, [r7, #16]
90010cca:	68db      	ldr	r3, [r3, #12]
90010ccc:	2200      	movs	r2, #0
90010cce:	749a      	strb	r2, [r3, #18]
90010cd0:	2200      	movs	r2, #0
90010cd2:	74da      	strb	r2, [r3, #19]
  return seg;
90010cd4:	693b      	ldr	r3, [r7, #16]
}
90010cd6:	4618      	mov	r0, r3
90010cd8:	371c      	adds	r7, #28
90010cda:	46bd      	mov	sp, r7
90010cdc:	bd90      	pop	{r4, r7, pc}
90010cde:	bf00      	nop
90010ce0:	90019410 	.word	0x90019410
90010ce4:	90019444 	.word	0x90019444
90010ce8:	90019464 	.word	0x90019464
90010cec:	9001948c 	.word	0x9001948c
90010cf0:	900194b0 	.word	0x900194b0

90010cf4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
90010cf4:	b580      	push	{r7, lr}
90010cf6:	b086      	sub	sp, #24
90010cf8:	af00      	add	r7, sp, #0
90010cfa:	607b      	str	r3, [r7, #4]
90010cfc:	4603      	mov	r3, r0
90010cfe:	73fb      	strb	r3, [r7, #15]
90010d00:	460b      	mov	r3, r1
90010d02:	81bb      	strh	r3, [r7, #12]
90010d04:	4613      	mov	r3, r2
90010d06:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
90010d08:	89bb      	ldrh	r3, [r7, #12]
90010d0a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
90010d0c:	687b      	ldr	r3, [r7, #4]
90010d0e:	2b00      	cmp	r3, #0
90010d10:	d105      	bne.n	90010d1e <tcp_pbuf_prealloc+0x2a>
90010d12:	4b30      	ldr	r3, [pc, #192]	; (90010dd4 <tcp_pbuf_prealloc+0xe0>)
90010d14:	22e8      	movs	r2, #232	; 0xe8
90010d16:	4930      	ldr	r1, [pc, #192]	; (90010dd8 <tcp_pbuf_prealloc+0xe4>)
90010d18:	4830      	ldr	r0, [pc, #192]	; (90010ddc <tcp_pbuf_prealloc+0xe8>)
90010d1a:	f004 ff6b 	bl	90015bf4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
90010d1e:	6a3b      	ldr	r3, [r7, #32]
90010d20:	2b00      	cmp	r3, #0
90010d22:	d105      	bne.n	90010d30 <tcp_pbuf_prealloc+0x3c>
90010d24:	4b2b      	ldr	r3, [pc, #172]	; (90010dd4 <tcp_pbuf_prealloc+0xe0>)
90010d26:	22e9      	movs	r2, #233	; 0xe9
90010d28:	492d      	ldr	r1, [pc, #180]	; (90010de0 <tcp_pbuf_prealloc+0xec>)
90010d2a:	482c      	ldr	r0, [pc, #176]	; (90010ddc <tcp_pbuf_prealloc+0xe8>)
90010d2c:	f004 ff62 	bl	90015bf4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
90010d30:	89ba      	ldrh	r2, [r7, #12]
90010d32:	897b      	ldrh	r3, [r7, #10]
90010d34:	429a      	cmp	r2, r3
90010d36:	d221      	bcs.n	90010d7c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
90010d38:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
90010d3c:	f003 0302 	and.w	r3, r3, #2
90010d40:	2b00      	cmp	r3, #0
90010d42:	d111      	bne.n	90010d68 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
90010d44:	6a3b      	ldr	r3, [r7, #32]
90010d46:	8b5b      	ldrh	r3, [r3, #26]
90010d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
90010d4c:	2b00      	cmp	r3, #0
90010d4e:	d115      	bne.n	90010d7c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
90010d50:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
90010d54:	2b00      	cmp	r3, #0
90010d56:	d007      	beq.n	90010d68 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
90010d58:	6a3b      	ldr	r3, [r7, #32]
90010d5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
90010d5c:	2b00      	cmp	r3, #0
90010d5e:	d103      	bne.n	90010d68 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
90010d60:	6a3b      	ldr	r3, [r7, #32]
90010d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
90010d64:	2b00      	cmp	r3, #0
90010d66:	d009      	beq.n	90010d7c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
90010d68:	89bb      	ldrh	r3, [r7, #12]
90010d6a:	f203 231b 	addw	r3, r3, #539	; 0x21b
90010d6e:	f023 0203 	bic.w	r2, r3, #3
90010d72:	897b      	ldrh	r3, [r7, #10]
90010d74:	4293      	cmp	r3, r2
90010d76:	bf28      	it	cs
90010d78:	4613      	movcs	r3, r2
90010d7a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
90010d7c:	8af9      	ldrh	r1, [r7, #22]
90010d7e:	7bfb      	ldrb	r3, [r7, #15]
90010d80:	f44f 7220 	mov.w	r2, #640	; 0x280
90010d84:	4618      	mov	r0, r3
90010d86:	f7fb f831 	bl	9000bdec <pbuf_alloc>
90010d8a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
90010d8c:	693b      	ldr	r3, [r7, #16]
90010d8e:	2b00      	cmp	r3, #0
90010d90:	d101      	bne.n	90010d96 <tcp_pbuf_prealloc+0xa2>
    return NULL;
90010d92:	2300      	movs	r3, #0
90010d94:	e019      	b.n	90010dca <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
90010d96:	693b      	ldr	r3, [r7, #16]
90010d98:	681b      	ldr	r3, [r3, #0]
90010d9a:	2b00      	cmp	r3, #0
90010d9c:	d006      	beq.n	90010dac <tcp_pbuf_prealloc+0xb8>
90010d9e:	4b0d      	ldr	r3, [pc, #52]	; (90010dd4 <tcp_pbuf_prealloc+0xe0>)
90010da0:	f240 120b 	movw	r2, #267	; 0x10b
90010da4:	490f      	ldr	r1, [pc, #60]	; (90010de4 <tcp_pbuf_prealloc+0xf0>)
90010da6:	480d      	ldr	r0, [pc, #52]	; (90010ddc <tcp_pbuf_prealloc+0xe8>)
90010da8:	f004 ff24 	bl	90015bf4 <iprintf>
  *oversize = p->len - length;
90010dac:	693b      	ldr	r3, [r7, #16]
90010dae:	895a      	ldrh	r2, [r3, #10]
90010db0:	89bb      	ldrh	r3, [r7, #12]
90010db2:	1ad3      	subs	r3, r2, r3
90010db4:	b29a      	uxth	r2, r3
90010db6:	687b      	ldr	r3, [r7, #4]
90010db8:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
90010dba:	693b      	ldr	r3, [r7, #16]
90010dbc:	89ba      	ldrh	r2, [r7, #12]
90010dbe:	811a      	strh	r2, [r3, #8]
90010dc0:	693b      	ldr	r3, [r7, #16]
90010dc2:	891a      	ldrh	r2, [r3, #8]
90010dc4:	693b      	ldr	r3, [r7, #16]
90010dc6:	815a      	strh	r2, [r3, #10]
  return p;
90010dc8:	693b      	ldr	r3, [r7, #16]
}
90010dca:	4618      	mov	r0, r3
90010dcc:	3718      	adds	r7, #24
90010dce:	46bd      	mov	sp, r7
90010dd0:	bd80      	pop	{r7, pc}
90010dd2:	bf00      	nop
90010dd4:	90019410 	.word	0x90019410
90010dd8:	900194c8 	.word	0x900194c8
90010ddc:	90019464 	.word	0x90019464
90010de0:	900194ec 	.word	0x900194ec
90010de4:	9001950c 	.word	0x9001950c

90010de8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
90010de8:	b580      	push	{r7, lr}
90010dea:	b082      	sub	sp, #8
90010dec:	af00      	add	r7, sp, #0
90010dee:	6078      	str	r0, [r7, #4]
90010df0:	460b      	mov	r3, r1
90010df2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
90010df4:	687b      	ldr	r3, [r7, #4]
90010df6:	2b00      	cmp	r3, #0
90010df8:	d106      	bne.n	90010e08 <tcp_write_checks+0x20>
90010dfa:	4b33      	ldr	r3, [pc, #204]	; (90010ec8 <tcp_write_checks+0xe0>)
90010dfc:	f240 1233 	movw	r2, #307	; 0x133
90010e00:	4932      	ldr	r1, [pc, #200]	; (90010ecc <tcp_write_checks+0xe4>)
90010e02:	4833      	ldr	r0, [pc, #204]	; (90010ed0 <tcp_write_checks+0xe8>)
90010e04:	f004 fef6 	bl	90015bf4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
90010e08:	687b      	ldr	r3, [r7, #4]
90010e0a:	7d1b      	ldrb	r3, [r3, #20]
90010e0c:	2b04      	cmp	r3, #4
90010e0e:	d00e      	beq.n	90010e2e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
90010e10:	687b      	ldr	r3, [r7, #4]
90010e12:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
90010e14:	2b07      	cmp	r3, #7
90010e16:	d00a      	beq.n	90010e2e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
90010e18:	687b      	ldr	r3, [r7, #4]
90010e1a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
90010e1c:	2b02      	cmp	r3, #2
90010e1e:	d006      	beq.n	90010e2e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
90010e20:	687b      	ldr	r3, [r7, #4]
90010e22:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
90010e24:	2b03      	cmp	r3, #3
90010e26:	d002      	beq.n	90010e2e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
90010e28:	f06f 030a 	mvn.w	r3, #10
90010e2c:	e048      	b.n	90010ec0 <tcp_write_checks+0xd8>
  } else if (len == 0) {
90010e2e:	887b      	ldrh	r3, [r7, #2]
90010e30:	2b00      	cmp	r3, #0
90010e32:	d101      	bne.n	90010e38 <tcp_write_checks+0x50>
    return ERR_OK;
90010e34:	2300      	movs	r3, #0
90010e36:	e043      	b.n	90010ec0 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
90010e38:	687b      	ldr	r3, [r7, #4]
90010e3a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
90010e3e:	887a      	ldrh	r2, [r7, #2]
90010e40:	429a      	cmp	r2, r3
90010e42:	d909      	bls.n	90010e58 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
90010e44:	687b      	ldr	r3, [r7, #4]
90010e46:	8b5b      	ldrh	r3, [r3, #26]
90010e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90010e4c:	b29a      	uxth	r2, r3
90010e4e:	687b      	ldr	r3, [r7, #4]
90010e50:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
90010e52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90010e56:	e033      	b.n	90010ec0 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
90010e58:	687b      	ldr	r3, [r7, #4]
90010e5a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
90010e5e:	2b08      	cmp	r3, #8
90010e60:	d909      	bls.n	90010e76 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
90010e62:	687b      	ldr	r3, [r7, #4]
90010e64:	8b5b      	ldrh	r3, [r3, #26]
90010e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90010e6a:	b29a      	uxth	r2, r3
90010e6c:	687b      	ldr	r3, [r7, #4]
90010e6e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
90010e70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90010e74:	e024      	b.n	90010ec0 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
90010e76:	687b      	ldr	r3, [r7, #4]
90010e78:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
90010e7c:	2b00      	cmp	r3, #0
90010e7e:	d00f      	beq.n	90010ea0 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
90010e80:	687b      	ldr	r3, [r7, #4]
90010e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90010e84:	2b00      	cmp	r3, #0
90010e86:	d11a      	bne.n	90010ebe <tcp_write_checks+0xd6>
90010e88:	687b      	ldr	r3, [r7, #4]
90010e8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90010e8c:	2b00      	cmp	r3, #0
90010e8e:	d116      	bne.n	90010ebe <tcp_write_checks+0xd6>
90010e90:	4b0d      	ldr	r3, [pc, #52]	; (90010ec8 <tcp_write_checks+0xe0>)
90010e92:	f240 1255 	movw	r2, #341	; 0x155
90010e96:	490f      	ldr	r1, [pc, #60]	; (90010ed4 <tcp_write_checks+0xec>)
90010e98:	480d      	ldr	r0, [pc, #52]	; (90010ed0 <tcp_write_checks+0xe8>)
90010e9a:	f004 feab 	bl	90015bf4 <iprintf>
90010e9e:	e00e      	b.n	90010ebe <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
90010ea0:	687b      	ldr	r3, [r7, #4]
90010ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90010ea4:	2b00      	cmp	r3, #0
90010ea6:	d103      	bne.n	90010eb0 <tcp_write_checks+0xc8>
90010ea8:	687b      	ldr	r3, [r7, #4]
90010eaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90010eac:	2b00      	cmp	r3, #0
90010eae:	d006      	beq.n	90010ebe <tcp_write_checks+0xd6>
90010eb0:	4b05      	ldr	r3, [pc, #20]	; (90010ec8 <tcp_write_checks+0xe0>)
90010eb2:	f44f 72ac 	mov.w	r2, #344	; 0x158
90010eb6:	4908      	ldr	r1, [pc, #32]	; (90010ed8 <tcp_write_checks+0xf0>)
90010eb8:	4805      	ldr	r0, [pc, #20]	; (90010ed0 <tcp_write_checks+0xe8>)
90010eba:	f004 fe9b 	bl	90015bf4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
90010ebe:	2300      	movs	r3, #0
}
90010ec0:	4618      	mov	r0, r3
90010ec2:	3708      	adds	r7, #8
90010ec4:	46bd      	mov	sp, r7
90010ec6:	bd80      	pop	{r7, pc}
90010ec8:	90019410 	.word	0x90019410
90010ecc:	90019520 	.word	0x90019520
90010ed0:	90019464 	.word	0x90019464
90010ed4:	90019540 	.word	0x90019540
90010ed8:	9001957c 	.word	0x9001957c

90010edc <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
90010edc:	b590      	push	{r4, r7, lr}
90010ede:	b09b      	sub	sp, #108	; 0x6c
90010ee0:	af04      	add	r7, sp, #16
90010ee2:	60f8      	str	r0, [r7, #12]
90010ee4:	60b9      	str	r1, [r7, #8]
90010ee6:	4611      	mov	r1, r2
90010ee8:	461a      	mov	r2, r3
90010eea:	460b      	mov	r3, r1
90010eec:	80fb      	strh	r3, [r7, #6]
90010eee:	4613      	mov	r3, r2
90010ef0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
90010ef2:	2300      	movs	r3, #0
90010ef4:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
90010ef6:	2300      	movs	r3, #0
90010ef8:	653b      	str	r3, [r7, #80]	; 0x50
90010efa:	2300      	movs	r3, #0
90010efc:	64fb      	str	r3, [r7, #76]	; 0x4c
90010efe:	2300      	movs	r3, #0
90010f00:	64bb      	str	r3, [r7, #72]	; 0x48
90010f02:	2300      	movs	r3, #0
90010f04:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
90010f06:	2300      	movs	r3, #0
90010f08:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
90010f0c:	2300      	movs	r3, #0
90010f0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
90010f12:	2300      	movs	r3, #0
90010f14:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
90010f16:	2300      	movs	r3, #0
90010f18:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
90010f1a:	2300      	movs	r3, #0
90010f1c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
90010f1e:	68fb      	ldr	r3, [r7, #12]
90010f20:	2b00      	cmp	r3, #0
90010f22:	d109      	bne.n	90010f38 <tcp_write+0x5c>
90010f24:	4ba4      	ldr	r3, [pc, #656]	; (900111b8 <tcp_write+0x2dc>)
90010f26:	f44f 72cf 	mov.w	r2, #414	; 0x19e
90010f2a:	49a4      	ldr	r1, [pc, #656]	; (900111bc <tcp_write+0x2e0>)
90010f2c:	48a4      	ldr	r0, [pc, #656]	; (900111c0 <tcp_write+0x2e4>)
90010f2e:	f004 fe61 	bl	90015bf4 <iprintf>
90010f32:	f06f 030f 	mvn.w	r3, #15
90010f36:	e32a      	b.n	9001158e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
90010f38:	68fb      	ldr	r3, [r7, #12]
90010f3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
90010f3e:	085b      	lsrs	r3, r3, #1
90010f40:	b29a      	uxth	r2, r3
90010f42:	68fb      	ldr	r3, [r7, #12]
90010f44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
90010f46:	4293      	cmp	r3, r2
90010f48:	bf28      	it	cs
90010f4a:	4613      	movcs	r3, r2
90010f4c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
90010f4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
90010f50:	2b00      	cmp	r3, #0
90010f52:	d102      	bne.n	90010f5a <tcp_write+0x7e>
90010f54:	68fb      	ldr	r3, [r7, #12]
90010f56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
90010f58:	e000      	b.n	90010f5c <tcp_write+0x80>
90010f5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
90010f5c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
90010f5e:	68bb      	ldr	r3, [r7, #8]
90010f60:	2b00      	cmp	r3, #0
90010f62:	d109      	bne.n	90010f78 <tcp_write+0x9c>
90010f64:	4b94      	ldr	r3, [pc, #592]	; (900111b8 <tcp_write+0x2dc>)
90010f66:	f240 12ad 	movw	r2, #429	; 0x1ad
90010f6a:	4996      	ldr	r1, [pc, #600]	; (900111c4 <tcp_write+0x2e8>)
90010f6c:	4894      	ldr	r0, [pc, #592]	; (900111c0 <tcp_write+0x2e4>)
90010f6e:	f004 fe41 	bl	90015bf4 <iprintf>
90010f72:	f06f 030f 	mvn.w	r3, #15
90010f76:	e30a      	b.n	9001158e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
90010f78:	88fb      	ldrh	r3, [r7, #6]
90010f7a:	4619      	mov	r1, r3
90010f7c:	68f8      	ldr	r0, [r7, #12]
90010f7e:	f7ff ff33 	bl	90010de8 <tcp_write_checks>
90010f82:	4603      	mov	r3, r0
90010f84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
90010f88:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
90010f8c:	2b00      	cmp	r3, #0
90010f8e:	d002      	beq.n	90010f96 <tcp_write+0xba>
    return err;
90010f90:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
90010f94:	e2fb      	b.n	9001158e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
90010f96:	68fb      	ldr	r3, [r7, #12]
90010f98:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
90010f9c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
90010fa0:	2300      	movs	r3, #0
90010fa2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
90010fa6:	68fb      	ldr	r3, [r7, #12]
90010fa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90010faa:	2b00      	cmp	r3, #0
90010fac:	f000 80f6 	beq.w	9001119c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
90010fb0:	68fb      	ldr	r3, [r7, #12]
90010fb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90010fb4:	653b      	str	r3, [r7, #80]	; 0x50
90010fb6:	e002      	b.n	90010fbe <tcp_write+0xe2>
         last_unsent = last_unsent->next);
90010fb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
90010fba:	681b      	ldr	r3, [r3, #0]
90010fbc:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
90010fbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
90010fc0:	681b      	ldr	r3, [r3, #0]
90010fc2:	2b00      	cmp	r3, #0
90010fc4:	d1f8      	bne.n	90010fb8 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
90010fc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
90010fc8:	7a9b      	ldrb	r3, [r3, #10]
90010fca:	009b      	lsls	r3, r3, #2
90010fcc:	b29b      	uxth	r3, r3
90010fce:	f003 0304 	and.w	r3, r3, #4
90010fd2:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
90010fd4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
90010fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
90010fd8:	891b      	ldrh	r3, [r3, #8]
90010fda:	4619      	mov	r1, r3
90010fdc:	8c3b      	ldrh	r3, [r7, #32]
90010fde:	440b      	add	r3, r1
90010fe0:	429a      	cmp	r2, r3
90010fe2:	da06      	bge.n	90010ff2 <tcp_write+0x116>
90010fe4:	4b74      	ldr	r3, [pc, #464]	; (900111b8 <tcp_write+0x2dc>)
90010fe6:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
90010fea:	4977      	ldr	r1, [pc, #476]	; (900111c8 <tcp_write+0x2ec>)
90010fec:	4874      	ldr	r0, [pc, #464]	; (900111c0 <tcp_write+0x2e4>)
90010fee:	f004 fe01 	bl	90015bf4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
90010ff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
90010ff4:	891a      	ldrh	r2, [r3, #8]
90010ff6:	8c3b      	ldrh	r3, [r7, #32]
90010ff8:	4413      	add	r3, r2
90010ffa:	b29b      	uxth	r3, r3
90010ffc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
90010ffe:	1ad3      	subs	r3, r2, r3
90011000:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
90011002:	68fb      	ldr	r3, [r7, #12]
90011004:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
90011008:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
9001100a:	8a7b      	ldrh	r3, [r7, #18]
9001100c:	2b00      	cmp	r3, #0
9001100e:	d026      	beq.n	9001105e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
90011010:	8a7b      	ldrh	r3, [r7, #18]
90011012:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
90011014:	429a      	cmp	r2, r3
90011016:	d206      	bcs.n	90011026 <tcp_write+0x14a>
90011018:	4b67      	ldr	r3, [pc, #412]	; (900111b8 <tcp_write+0x2dc>)
9001101a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
9001101e:	496b      	ldr	r1, [pc, #428]	; (900111cc <tcp_write+0x2f0>)
90011020:	4867      	ldr	r0, [pc, #412]	; (900111c0 <tcp_write+0x2e4>)
90011022:	f004 fde7 	bl	90015bf4 <iprintf>
      seg = last_unsent;
90011026:	6d3b      	ldr	r3, [r7, #80]	; 0x50
90011028:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
9001102a:	8a7b      	ldrh	r3, [r7, #18]
9001102c:	88fa      	ldrh	r2, [r7, #6]
9001102e:	4293      	cmp	r3, r2
90011030:	bf28      	it	cs
90011032:	4613      	movcs	r3, r2
90011034:	b29b      	uxth	r3, r3
90011036:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
90011038:	4293      	cmp	r3, r2
9001103a:	bf28      	it	cs
9001103c:	4613      	movcs	r3, r2
9001103e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
90011040:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
90011044:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
90011046:	4413      	add	r3, r2
90011048:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
9001104c:	8a7a      	ldrh	r2, [r7, #18]
9001104e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
90011050:	1ad3      	subs	r3, r2, r3
90011052:	b29b      	uxth	r3, r3
90011054:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
90011056:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
90011058:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
9001105a:	1ad3      	subs	r3, r2, r3
9001105c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
9001105e:	8a7b      	ldrh	r3, [r7, #18]
90011060:	2b00      	cmp	r3, #0
90011062:	d00b      	beq.n	9001107c <tcp_write+0x1a0>
90011064:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
90011068:	88fb      	ldrh	r3, [r7, #6]
9001106a:	429a      	cmp	r2, r3
9001106c:	d006      	beq.n	9001107c <tcp_write+0x1a0>
9001106e:	4b52      	ldr	r3, [pc, #328]	; (900111b8 <tcp_write+0x2dc>)
90011070:	f44f 7200 	mov.w	r2, #512	; 0x200
90011074:	4956      	ldr	r1, [pc, #344]	; (900111d0 <tcp_write+0x2f4>)
90011076:	4852      	ldr	r0, [pc, #328]	; (900111c0 <tcp_write+0x2e4>)
90011078:	f004 fdbc 	bl	90015bf4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
9001107c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
90011080:	88fb      	ldrh	r3, [r7, #6]
90011082:	429a      	cmp	r2, r3
90011084:	f080 8167 	bcs.w	90011356 <tcp_write+0x47a>
90011088:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
9001108a:	2b00      	cmp	r3, #0
9001108c:	f000 8163 	beq.w	90011356 <tcp_write+0x47a>
90011090:	6d3b      	ldr	r3, [r7, #80]	; 0x50
90011092:	891b      	ldrh	r3, [r3, #8]
90011094:	2b00      	cmp	r3, #0
90011096:	f000 815e 	beq.w	90011356 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
9001109a:	88fa      	ldrh	r2, [r7, #6]
9001109c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
900110a0:	1ad2      	subs	r2, r2, r3
900110a2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
900110a4:	4293      	cmp	r3, r2
900110a6:	bfa8      	it	ge
900110a8:	4613      	movge	r3, r2
900110aa:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
900110ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
900110ae:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
900110b0:	797b      	ldrb	r3, [r7, #5]
900110b2:	f003 0301 	and.w	r3, r3, #1
900110b6:	2b00      	cmp	r3, #0
900110b8:	d027      	beq.n	9001110a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
900110ba:	f107 0012 	add.w	r0, r7, #18
900110be:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
900110c0:	8bf9      	ldrh	r1, [r7, #30]
900110c2:	2301      	movs	r3, #1
900110c4:	9302      	str	r3, [sp, #8]
900110c6:	797b      	ldrb	r3, [r7, #5]
900110c8:	9301      	str	r3, [sp, #4]
900110ca:	68fb      	ldr	r3, [r7, #12]
900110cc:	9300      	str	r3, [sp, #0]
900110ce:	4603      	mov	r3, r0
900110d0:	2000      	movs	r0, #0
900110d2:	f7ff fe0f 	bl	90010cf4 <tcp_pbuf_prealloc>
900110d6:	6578      	str	r0, [r7, #84]	; 0x54
900110d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
900110da:	2b00      	cmp	r3, #0
900110dc:	f000 8225 	beq.w	9001152a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
900110e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
900110e2:	6858      	ldr	r0, [r3, #4]
900110e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
900110e8:	68ba      	ldr	r2, [r7, #8]
900110ea:	4413      	add	r3, r2
900110ec:	8bfa      	ldrh	r2, [r7, #30]
900110ee:	4619      	mov	r1, r3
900110f0:	f004 fcbb 	bl	90015a6a <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
900110f4:	6d78      	ldr	r0, [r7, #84]	; 0x54
900110f6:	f7fb f9eb 	bl	9000c4d0 <pbuf_clen>
900110fa:	4603      	mov	r3, r0
900110fc:	461a      	mov	r2, r3
900110fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
90011102:	4413      	add	r3, r2
90011104:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
90011108:	e041      	b.n	9001118e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
9001110a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9001110c:	685b      	ldr	r3, [r3, #4]
9001110e:	637b      	str	r3, [r7, #52]	; 0x34
90011110:	e002      	b.n	90011118 <tcp_write+0x23c>
90011112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90011114:	681b      	ldr	r3, [r3, #0]
90011116:	637b      	str	r3, [r7, #52]	; 0x34
90011118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9001111a:	681b      	ldr	r3, [r3, #0]
9001111c:	2b00      	cmp	r3, #0
9001111e:	d1f8      	bne.n	90011112 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
90011120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90011122:	7b1b      	ldrb	r3, [r3, #12]
90011124:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
90011128:	2b00      	cmp	r3, #0
9001112a:	d115      	bne.n	90011158 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
9001112c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
9001112e:	685b      	ldr	r3, [r3, #4]
90011130:	6b7a      	ldr	r2, [r7, #52]	; 0x34
90011132:	8952      	ldrh	r2, [r2, #10]
90011134:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
90011136:	68ba      	ldr	r2, [r7, #8]
90011138:	429a      	cmp	r2, r3
9001113a:	d10d      	bne.n	90011158 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
9001113c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
90011140:	2b00      	cmp	r3, #0
90011142:	d006      	beq.n	90011152 <tcp_write+0x276>
90011144:	4b1c      	ldr	r3, [pc, #112]	; (900111b8 <tcp_write+0x2dc>)
90011146:	f240 2231 	movw	r2, #561	; 0x231
9001114a:	4922      	ldr	r1, [pc, #136]	; (900111d4 <tcp_write+0x2f8>)
9001114c:	481c      	ldr	r0, [pc, #112]	; (900111c0 <tcp_write+0x2e4>)
9001114e:	f004 fd51 	bl	90015bf4 <iprintf>
          extendlen = seglen;
90011152:	8bfb      	ldrh	r3, [r7, #30]
90011154:	87bb      	strh	r3, [r7, #60]	; 0x3c
90011156:	e01a      	b.n	9001118e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
90011158:	8bfb      	ldrh	r3, [r7, #30]
9001115a:	2201      	movs	r2, #1
9001115c:	4619      	mov	r1, r3
9001115e:	2000      	movs	r0, #0
90011160:	f7fa fe44 	bl	9000bdec <pbuf_alloc>
90011164:	6578      	str	r0, [r7, #84]	; 0x54
90011166:	6d7b      	ldr	r3, [r7, #84]	; 0x54
90011168:	2b00      	cmp	r3, #0
9001116a:	f000 81e0 	beq.w	9001152e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
9001116e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
90011172:	68ba      	ldr	r2, [r7, #8]
90011174:	441a      	add	r2, r3
90011176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
90011178:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
9001117a:	6d78      	ldr	r0, [r7, #84]	; 0x54
9001117c:	f7fb f9a8 	bl	9000c4d0 <pbuf_clen>
90011180:	4603      	mov	r3, r0
90011182:	461a      	mov	r2, r3
90011184:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
90011188:	4413      	add	r3, r2
9001118a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
9001118e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
90011192:	8bfb      	ldrh	r3, [r7, #30]
90011194:	4413      	add	r3, r2
90011196:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
9001119a:	e0dc      	b.n	90011356 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
9001119c:	68fb      	ldr	r3, [r7, #12]
9001119e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
900111a2:	2b00      	cmp	r3, #0
900111a4:	f000 80d7 	beq.w	90011356 <tcp_write+0x47a>
900111a8:	4b03      	ldr	r3, [pc, #12]	; (900111b8 <tcp_write+0x2dc>)
900111aa:	f240 224a 	movw	r2, #586	; 0x24a
900111ae:	490a      	ldr	r1, [pc, #40]	; (900111d8 <tcp_write+0x2fc>)
900111b0:	4803      	ldr	r0, [pc, #12]	; (900111c0 <tcp_write+0x2e4>)
900111b2:	f004 fd1f 	bl	90015bf4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
900111b6:	e0ce      	b.n	90011356 <tcp_write+0x47a>
900111b8:	90019410 	.word	0x90019410
900111bc:	900195b0 	.word	0x900195b0
900111c0:	90019464 	.word	0x90019464
900111c4:	900195c8 	.word	0x900195c8
900111c8:	900195fc 	.word	0x900195fc
900111cc:	90019614 	.word	0x90019614
900111d0:	90019634 	.word	0x90019634
900111d4:	90019654 	.word	0x90019654
900111d8:	90019680 	.word	0x90019680
    struct pbuf *p;
    u16_t left = len - pos;
900111dc:	88fa      	ldrh	r2, [r7, #6]
900111de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
900111e2:	1ad3      	subs	r3, r2, r3
900111e4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
900111e6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
900111ea:	b29b      	uxth	r3, r3
900111ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
900111ee:	1ad3      	subs	r3, r2, r3
900111f0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
900111f2:	8b7a      	ldrh	r2, [r7, #26]
900111f4:	8bbb      	ldrh	r3, [r7, #28]
900111f6:	4293      	cmp	r3, r2
900111f8:	bf28      	it	cs
900111fa:	4613      	movcs	r3, r2
900111fc:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
900111fe:	797b      	ldrb	r3, [r7, #5]
90011200:	f003 0301 	and.w	r3, r3, #1
90011204:	2b00      	cmp	r3, #0
90011206:	d036      	beq.n	90011276 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
90011208:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
9001120c:	b29a      	uxth	r2, r3
9001120e:	8b3b      	ldrh	r3, [r7, #24]
90011210:	4413      	add	r3, r2
90011212:	b299      	uxth	r1, r3
90011214:	6c7b      	ldr	r3, [r7, #68]	; 0x44
90011216:	2b00      	cmp	r3, #0
90011218:	bf0c      	ite	eq
9001121a:	2301      	moveq	r3, #1
9001121c:	2300      	movne	r3, #0
9001121e:	b2db      	uxtb	r3, r3
90011220:	f107 0012 	add.w	r0, r7, #18
90011224:	8cba      	ldrh	r2, [r7, #36]	; 0x24
90011226:	9302      	str	r3, [sp, #8]
90011228:	797b      	ldrb	r3, [r7, #5]
9001122a:	9301      	str	r3, [sp, #4]
9001122c:	68fb      	ldr	r3, [r7, #12]
9001122e:	9300      	str	r3, [sp, #0]
90011230:	4603      	mov	r3, r0
90011232:	2036      	movs	r0, #54	; 0x36
90011234:	f7ff fd5e 	bl	90010cf4 <tcp_pbuf_prealloc>
90011238:	6338      	str	r0, [r7, #48]	; 0x30
9001123a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9001123c:	2b00      	cmp	r3, #0
9001123e:	f000 8178 	beq.w	90011532 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
90011242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90011244:	895b      	ldrh	r3, [r3, #10]
90011246:	8b3a      	ldrh	r2, [r7, #24]
90011248:	429a      	cmp	r2, r3
9001124a:	d906      	bls.n	9001125a <tcp_write+0x37e>
9001124c:	4b8c      	ldr	r3, [pc, #560]	; (90011480 <tcp_write+0x5a4>)
9001124e:	f240 2266 	movw	r2, #614	; 0x266
90011252:	498c      	ldr	r1, [pc, #560]	; (90011484 <tcp_write+0x5a8>)
90011254:	488c      	ldr	r0, [pc, #560]	; (90011488 <tcp_write+0x5ac>)
90011256:	f004 fccd 	bl	90015bf4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
9001125a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9001125c:	685a      	ldr	r2, [r3, #4]
9001125e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
90011262:	18d0      	adds	r0, r2, r3
90011264:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
90011268:	68ba      	ldr	r2, [r7, #8]
9001126a:	4413      	add	r3, r2
9001126c:	8b3a      	ldrh	r2, [r7, #24]
9001126e:	4619      	mov	r1, r3
90011270:	f004 fbfb 	bl	90015a6a <memcpy>
90011274:	e02f      	b.n	900112d6 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
90011276:	8a7b      	ldrh	r3, [r7, #18]
90011278:	2b00      	cmp	r3, #0
9001127a:	d006      	beq.n	9001128a <tcp_write+0x3ae>
9001127c:	4b80      	ldr	r3, [pc, #512]	; (90011480 <tcp_write+0x5a4>)
9001127e:	f240 2271 	movw	r2, #625	; 0x271
90011282:	4982      	ldr	r1, [pc, #520]	; (9001148c <tcp_write+0x5b0>)
90011284:	4880      	ldr	r0, [pc, #512]	; (90011488 <tcp_write+0x5ac>)
90011286:	f004 fcb5 	bl	90015bf4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
9001128a:	8b3b      	ldrh	r3, [r7, #24]
9001128c:	2201      	movs	r2, #1
9001128e:	4619      	mov	r1, r3
90011290:	2036      	movs	r0, #54	; 0x36
90011292:	f7fa fdab 	bl	9000bdec <pbuf_alloc>
90011296:	6178      	str	r0, [r7, #20]
90011298:	697b      	ldr	r3, [r7, #20]
9001129a:	2b00      	cmp	r3, #0
9001129c:	f000 814b 	beq.w	90011536 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
900112a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
900112a4:	68ba      	ldr	r2, [r7, #8]
900112a6:	441a      	add	r2, r3
900112a8:	697b      	ldr	r3, [r7, #20]
900112aa:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
900112ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
900112b0:	b29b      	uxth	r3, r3
900112b2:	f44f 7220 	mov.w	r2, #640	; 0x280
900112b6:	4619      	mov	r1, r3
900112b8:	2036      	movs	r0, #54	; 0x36
900112ba:	f7fa fd97 	bl	9000bdec <pbuf_alloc>
900112be:	6338      	str	r0, [r7, #48]	; 0x30
900112c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900112c2:	2b00      	cmp	r3, #0
900112c4:	d103      	bne.n	900112ce <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
900112c6:	6978      	ldr	r0, [r7, #20]
900112c8:	f7fb f874 	bl	9000c3b4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
900112cc:	e136      	b.n	9001153c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
900112ce:	6979      	ldr	r1, [r7, #20]
900112d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
900112d2:	f7fb f93d 	bl	9000c550 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
900112d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
900112d8:	f7fb f8fa 	bl	9000c4d0 <pbuf_clen>
900112dc:	4603      	mov	r3, r0
900112de:	461a      	mov	r2, r3
900112e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
900112e4:	4413      	add	r3, r2
900112e6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
900112ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
900112ee:	2b09      	cmp	r3, #9
900112f0:	d903      	bls.n	900112fa <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
900112f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
900112f4:	f7fb f85e 	bl	9000c3b4 <pbuf_free>
      goto memerr;
900112f8:	e120      	b.n	9001153c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
900112fa:	68fb      	ldr	r3, [r7, #12]
900112fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
900112fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
90011302:	441a      	add	r2, r3
90011304:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
90011308:	9300      	str	r3, [sp, #0]
9001130a:	4613      	mov	r3, r2
9001130c:	2200      	movs	r2, #0
9001130e:	6b39      	ldr	r1, [r7, #48]	; 0x30
90011310:	68f8      	ldr	r0, [r7, #12]
90011312:	f7ff fc51 	bl	90010bb8 <tcp_create_segment>
90011316:	64f8      	str	r0, [r7, #76]	; 0x4c
90011318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9001131a:	2b00      	cmp	r3, #0
9001131c:	f000 810d 	beq.w	9001153a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
90011320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
90011322:	2b00      	cmp	r3, #0
90011324:	d102      	bne.n	9001132c <tcp_write+0x450>
      queue = seg;
90011326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
90011328:	647b      	str	r3, [r7, #68]	; 0x44
9001132a:	e00c      	b.n	90011346 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
9001132c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
9001132e:	2b00      	cmp	r3, #0
90011330:	d106      	bne.n	90011340 <tcp_write+0x464>
90011332:	4b53      	ldr	r3, [pc, #332]	; (90011480 <tcp_write+0x5a4>)
90011334:	f240 22ab 	movw	r2, #683	; 0x2ab
90011338:	4955      	ldr	r1, [pc, #340]	; (90011490 <tcp_write+0x5b4>)
9001133a:	4853      	ldr	r0, [pc, #332]	; (90011488 <tcp_write+0x5ac>)
9001133c:	f004 fc5a 	bl	90015bf4 <iprintf>
      prev_seg->next = seg;
90011340:	6cbb      	ldr	r3, [r7, #72]	; 0x48
90011342:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
90011344:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
90011346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
90011348:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
9001134a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
9001134e:	8b3b      	ldrh	r3, [r7, #24]
90011350:	4413      	add	r3, r2
90011352:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
90011356:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
9001135a:	88fb      	ldrh	r3, [r7, #6]
9001135c:	429a      	cmp	r2, r3
9001135e:	f4ff af3d 	bcc.w	900111dc <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
90011362:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
90011364:	2b00      	cmp	r3, #0
90011366:	d02c      	beq.n	900113c2 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
90011368:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9001136a:	685b      	ldr	r3, [r3, #4]
9001136c:	62fb      	str	r3, [r7, #44]	; 0x2c
9001136e:	e01e      	b.n	900113ae <tcp_write+0x4d2>
      p->tot_len += oversize_used;
90011370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90011372:	891a      	ldrh	r2, [r3, #8]
90011374:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
90011376:	4413      	add	r3, r2
90011378:	b29a      	uxth	r2, r3
9001137a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9001137c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
9001137e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90011380:	681b      	ldr	r3, [r3, #0]
90011382:	2b00      	cmp	r3, #0
90011384:	d110      	bne.n	900113a8 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
90011386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90011388:	685b      	ldr	r3, [r3, #4]
9001138a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
9001138c:	8952      	ldrh	r2, [r2, #10]
9001138e:	4413      	add	r3, r2
90011390:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
90011392:	68b9      	ldr	r1, [r7, #8]
90011394:	4618      	mov	r0, r3
90011396:	f004 fb68 	bl	90015a6a <memcpy>
        p->len += oversize_used;
9001139a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9001139c:	895a      	ldrh	r2, [r3, #10]
9001139e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
900113a0:	4413      	add	r3, r2
900113a2:	b29a      	uxth	r2, r3
900113a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900113a6:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
900113a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900113aa:	681b      	ldr	r3, [r3, #0]
900113ac:	62fb      	str	r3, [r7, #44]	; 0x2c
900113ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900113b0:	2b00      	cmp	r3, #0
900113b2:	d1dd      	bne.n	90011370 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
900113b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
900113b6:	891a      	ldrh	r2, [r3, #8]
900113b8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
900113ba:	4413      	add	r3, r2
900113bc:	b29a      	uxth	r2, r3
900113be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
900113c0:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
900113c2:	8a7a      	ldrh	r2, [r7, #18]
900113c4:	68fb      	ldr	r3, [r7, #12]
900113c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
900113ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
900113cc:	2b00      	cmp	r3, #0
900113ce:	d018      	beq.n	90011402 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
900113d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
900113d2:	2b00      	cmp	r3, #0
900113d4:	d106      	bne.n	900113e4 <tcp_write+0x508>
900113d6:	4b2a      	ldr	r3, [pc, #168]	; (90011480 <tcp_write+0x5a4>)
900113d8:	f44f 7238 	mov.w	r2, #736	; 0x2e0
900113dc:	492d      	ldr	r1, [pc, #180]	; (90011494 <tcp_write+0x5b8>)
900113de:	482a      	ldr	r0, [pc, #168]	; (90011488 <tcp_write+0x5ac>)
900113e0:	f004 fc08 	bl	90015bf4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
900113e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
900113e6:	685b      	ldr	r3, [r3, #4]
900113e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
900113ea:	4618      	mov	r0, r3
900113ec:	f7fb f8b0 	bl	9000c550 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
900113f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
900113f2:	891a      	ldrh	r2, [r3, #8]
900113f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
900113f6:	891b      	ldrh	r3, [r3, #8]
900113f8:	4413      	add	r3, r2
900113fa:	b29a      	uxth	r2, r3
900113fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
900113fe:	811a      	strh	r2, [r3, #8]
90011400:	e037      	b.n	90011472 <tcp_write+0x596>
  } else if (extendlen > 0) {
90011402:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
90011404:	2b00      	cmp	r3, #0
90011406:	d034      	beq.n	90011472 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
90011408:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9001140a:	2b00      	cmp	r3, #0
9001140c:	d003      	beq.n	90011416 <tcp_write+0x53a>
9001140e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
90011410:	685b      	ldr	r3, [r3, #4]
90011412:	2b00      	cmp	r3, #0
90011414:	d106      	bne.n	90011424 <tcp_write+0x548>
90011416:	4b1a      	ldr	r3, [pc, #104]	; (90011480 <tcp_write+0x5a4>)
90011418:	f240 22e6 	movw	r2, #742	; 0x2e6
9001141c:	491e      	ldr	r1, [pc, #120]	; (90011498 <tcp_write+0x5bc>)
9001141e:	481a      	ldr	r0, [pc, #104]	; (90011488 <tcp_write+0x5ac>)
90011420:	f004 fbe8 	bl	90015bf4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
90011424:	6d3b      	ldr	r3, [r7, #80]	; 0x50
90011426:	685b      	ldr	r3, [r3, #4]
90011428:	62bb      	str	r3, [r7, #40]	; 0x28
9001142a:	e009      	b.n	90011440 <tcp_write+0x564>
      p->tot_len += extendlen;
9001142c:	6abb      	ldr	r3, [r7, #40]	; 0x28
9001142e:	891a      	ldrh	r2, [r3, #8]
90011430:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
90011432:	4413      	add	r3, r2
90011434:	b29a      	uxth	r2, r3
90011436:	6abb      	ldr	r3, [r7, #40]	; 0x28
90011438:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
9001143a:	6abb      	ldr	r3, [r7, #40]	; 0x28
9001143c:	681b      	ldr	r3, [r3, #0]
9001143e:	62bb      	str	r3, [r7, #40]	; 0x28
90011440:	6abb      	ldr	r3, [r7, #40]	; 0x28
90011442:	681b      	ldr	r3, [r3, #0]
90011444:	2b00      	cmp	r3, #0
90011446:	d1f1      	bne.n	9001142c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
90011448:	6abb      	ldr	r3, [r7, #40]	; 0x28
9001144a:	891a      	ldrh	r2, [r3, #8]
9001144c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
9001144e:	4413      	add	r3, r2
90011450:	b29a      	uxth	r2, r3
90011452:	6abb      	ldr	r3, [r7, #40]	; 0x28
90011454:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
90011456:	6abb      	ldr	r3, [r7, #40]	; 0x28
90011458:	895a      	ldrh	r2, [r3, #10]
9001145a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
9001145c:	4413      	add	r3, r2
9001145e:	b29a      	uxth	r2, r3
90011460:	6abb      	ldr	r3, [r7, #40]	; 0x28
90011462:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
90011464:	6d3b      	ldr	r3, [r7, #80]	; 0x50
90011466:	891a      	ldrh	r2, [r3, #8]
90011468:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
9001146a:	4413      	add	r3, r2
9001146c:	b29a      	uxth	r2, r3
9001146e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
90011470:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
90011472:	6d3b      	ldr	r3, [r7, #80]	; 0x50
90011474:	2b00      	cmp	r3, #0
90011476:	d111      	bne.n	9001149c <tcp_write+0x5c0>
    pcb->unsent = queue;
90011478:	68fb      	ldr	r3, [r7, #12]
9001147a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
9001147c:	66da      	str	r2, [r3, #108]	; 0x6c
9001147e:	e010      	b.n	900114a2 <tcp_write+0x5c6>
90011480:	90019410 	.word	0x90019410
90011484:	900196b0 	.word	0x900196b0
90011488:	90019464 	.word	0x90019464
9001148c:	900196f0 	.word	0x900196f0
90011490:	90019700 	.word	0x90019700
90011494:	90019714 	.word	0x90019714
90011498:	9001974c 	.word	0x9001974c
  } else {
    last_unsent->next = queue;
9001149c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
9001149e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
900114a0:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
900114a2:	68fb      	ldr	r3, [r7, #12]
900114a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
900114a6:	88fb      	ldrh	r3, [r7, #6]
900114a8:	441a      	add	r2, r3
900114aa:	68fb      	ldr	r3, [r7, #12]
900114ac:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
900114ae:	68fb      	ldr	r3, [r7, #12]
900114b0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
900114b4:	88fb      	ldrh	r3, [r7, #6]
900114b6:	1ad3      	subs	r3, r2, r3
900114b8:	b29a      	uxth	r2, r3
900114ba:	68fb      	ldr	r3, [r7, #12]
900114bc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
900114c0:	68fb      	ldr	r3, [r7, #12]
900114c2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
900114c6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
900114ca:	68fb      	ldr	r3, [r7, #12]
900114cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
900114d0:	2b00      	cmp	r3, #0
900114d2:	d00e      	beq.n	900114f2 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
900114d4:	68fb      	ldr	r3, [r7, #12]
900114d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900114d8:	2b00      	cmp	r3, #0
900114da:	d10a      	bne.n	900114f2 <tcp_write+0x616>
900114dc:	68fb      	ldr	r3, [r7, #12]
900114de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
900114e0:	2b00      	cmp	r3, #0
900114e2:	d106      	bne.n	900114f2 <tcp_write+0x616>
900114e4:	4b2c      	ldr	r3, [pc, #176]	; (90011598 <tcp_write+0x6bc>)
900114e6:	f240 3212 	movw	r2, #786	; 0x312
900114ea:	492c      	ldr	r1, [pc, #176]	; (9001159c <tcp_write+0x6c0>)
900114ec:	482c      	ldr	r0, [pc, #176]	; (900115a0 <tcp_write+0x6c4>)
900114ee:	f004 fb81 	bl	90015bf4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
900114f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
900114f4:	2b00      	cmp	r3, #0
900114f6:	d016      	beq.n	90011526 <tcp_write+0x64a>
900114f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
900114fa:	68db      	ldr	r3, [r3, #12]
900114fc:	2b00      	cmp	r3, #0
900114fe:	d012      	beq.n	90011526 <tcp_write+0x64a>
90011500:	797b      	ldrb	r3, [r7, #5]
90011502:	f003 0302 	and.w	r3, r3, #2
90011506:	2b00      	cmp	r3, #0
90011508:	d10d      	bne.n	90011526 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
9001150a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9001150c:	68db      	ldr	r3, [r3, #12]
9001150e:	899b      	ldrh	r3, [r3, #12]
90011510:	b29c      	uxth	r4, r3
90011512:	2008      	movs	r0, #8
90011514:	f7f9 fa3a 	bl	9000a98c <lwip_htons>
90011518:	4603      	mov	r3, r0
9001151a:	461a      	mov	r2, r3
9001151c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
9001151e:	68db      	ldr	r3, [r3, #12]
90011520:	4322      	orrs	r2, r4
90011522:	b292      	uxth	r2, r2
90011524:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
90011526:	2300      	movs	r3, #0
90011528:	e031      	b.n	9001158e <tcp_write+0x6b2>
          goto memerr;
9001152a:	bf00      	nop
9001152c:	e006      	b.n	9001153c <tcp_write+0x660>
            goto memerr;
9001152e:	bf00      	nop
90011530:	e004      	b.n	9001153c <tcp_write+0x660>
        goto memerr;
90011532:	bf00      	nop
90011534:	e002      	b.n	9001153c <tcp_write+0x660>
        goto memerr;
90011536:	bf00      	nop
90011538:	e000      	b.n	9001153c <tcp_write+0x660>
      goto memerr;
9001153a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
9001153c:	68fb      	ldr	r3, [r7, #12]
9001153e:	8b5b      	ldrh	r3, [r3, #26]
90011540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90011544:	b29a      	uxth	r2, r3
90011546:	68fb      	ldr	r3, [r7, #12]
90011548:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
9001154a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
9001154c:	2b00      	cmp	r3, #0
9001154e:	d002      	beq.n	90011556 <tcp_write+0x67a>
    pbuf_free(concat_p);
90011550:	6d78      	ldr	r0, [r7, #84]	; 0x54
90011552:	f7fa ff2f 	bl	9000c3b4 <pbuf_free>
  }
  if (queue != NULL) {
90011556:	6c7b      	ldr	r3, [r7, #68]	; 0x44
90011558:	2b00      	cmp	r3, #0
9001155a:	d002      	beq.n	90011562 <tcp_write+0x686>
    tcp_segs_free(queue);
9001155c:	6c78      	ldr	r0, [r7, #68]	; 0x44
9001155e:	f7fc fb4d 	bl	9000dbfc <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
90011562:	68fb      	ldr	r3, [r7, #12]
90011564:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
90011568:	2b00      	cmp	r3, #0
9001156a:	d00e      	beq.n	9001158a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
9001156c:	68fb      	ldr	r3, [r7, #12]
9001156e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90011570:	2b00      	cmp	r3, #0
90011572:	d10a      	bne.n	9001158a <tcp_write+0x6ae>
90011574:	68fb      	ldr	r3, [r7, #12]
90011576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90011578:	2b00      	cmp	r3, #0
9001157a:	d106      	bne.n	9001158a <tcp_write+0x6ae>
9001157c:	4b06      	ldr	r3, [pc, #24]	; (90011598 <tcp_write+0x6bc>)
9001157e:	f240 3227 	movw	r2, #807	; 0x327
90011582:	4906      	ldr	r1, [pc, #24]	; (9001159c <tcp_write+0x6c0>)
90011584:	4806      	ldr	r0, [pc, #24]	; (900115a0 <tcp_write+0x6c4>)
90011586:	f004 fb35 	bl	90015bf4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
9001158a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
9001158e:	4618      	mov	r0, r3
90011590:	375c      	adds	r7, #92	; 0x5c
90011592:	46bd      	mov	sp, r7
90011594:	bd90      	pop	{r4, r7, pc}
90011596:	bf00      	nop
90011598:	90019410 	.word	0x90019410
9001159c:	90019784 	.word	0x90019784
900115a0:	90019464 	.word	0x90019464

900115a4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
900115a4:	b590      	push	{r4, r7, lr}
900115a6:	b08b      	sub	sp, #44	; 0x2c
900115a8:	af02      	add	r7, sp, #8
900115aa:	6078      	str	r0, [r7, #4]
900115ac:	460b      	mov	r3, r1
900115ae:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
900115b0:	2300      	movs	r3, #0
900115b2:	61fb      	str	r3, [r7, #28]
900115b4:	2300      	movs	r3, #0
900115b6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
900115b8:	2300      	movs	r3, #0
900115ba:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
900115bc:	687b      	ldr	r3, [r7, #4]
900115be:	2b00      	cmp	r3, #0
900115c0:	d106      	bne.n	900115d0 <tcp_split_unsent_seg+0x2c>
900115c2:	4b95      	ldr	r3, [pc, #596]	; (90011818 <tcp_split_unsent_seg+0x274>)
900115c4:	f240 324b 	movw	r2, #843	; 0x34b
900115c8:	4994      	ldr	r1, [pc, #592]	; (9001181c <tcp_split_unsent_seg+0x278>)
900115ca:	4895      	ldr	r0, [pc, #596]	; (90011820 <tcp_split_unsent_seg+0x27c>)
900115cc:	f004 fb12 	bl	90015bf4 <iprintf>

  useg = pcb->unsent;
900115d0:	687b      	ldr	r3, [r7, #4]
900115d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
900115d4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
900115d6:	697b      	ldr	r3, [r7, #20]
900115d8:	2b00      	cmp	r3, #0
900115da:	d102      	bne.n	900115e2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
900115dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
900115e0:	e116      	b.n	90011810 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
900115e2:	887b      	ldrh	r3, [r7, #2]
900115e4:	2b00      	cmp	r3, #0
900115e6:	d109      	bne.n	900115fc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
900115e8:	4b8b      	ldr	r3, [pc, #556]	; (90011818 <tcp_split_unsent_seg+0x274>)
900115ea:	f240 3253 	movw	r2, #851	; 0x353
900115ee:	498d      	ldr	r1, [pc, #564]	; (90011824 <tcp_split_unsent_seg+0x280>)
900115f0:	488b      	ldr	r0, [pc, #556]	; (90011820 <tcp_split_unsent_seg+0x27c>)
900115f2:	f004 faff 	bl	90015bf4 <iprintf>
    return ERR_VAL;
900115f6:	f06f 0305 	mvn.w	r3, #5
900115fa:	e109      	b.n	90011810 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
900115fc:	697b      	ldr	r3, [r7, #20]
900115fe:	891b      	ldrh	r3, [r3, #8]
90011600:	887a      	ldrh	r2, [r7, #2]
90011602:	429a      	cmp	r2, r3
90011604:	d301      	bcc.n	9001160a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
90011606:	2300      	movs	r3, #0
90011608:	e102      	b.n	90011810 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
9001160a:	687b      	ldr	r3, [r7, #4]
9001160c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9001160e:	887a      	ldrh	r2, [r7, #2]
90011610:	429a      	cmp	r2, r3
90011612:	d906      	bls.n	90011622 <tcp_split_unsent_seg+0x7e>
90011614:	4b80      	ldr	r3, [pc, #512]	; (90011818 <tcp_split_unsent_seg+0x274>)
90011616:	f240 325b 	movw	r2, #859	; 0x35b
9001161a:	4983      	ldr	r1, [pc, #524]	; (90011828 <tcp_split_unsent_seg+0x284>)
9001161c:	4880      	ldr	r0, [pc, #512]	; (90011820 <tcp_split_unsent_seg+0x27c>)
9001161e:	f004 fae9 	bl	90015bf4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
90011622:	697b      	ldr	r3, [r7, #20]
90011624:	891b      	ldrh	r3, [r3, #8]
90011626:	2b00      	cmp	r3, #0
90011628:	d106      	bne.n	90011638 <tcp_split_unsent_seg+0x94>
9001162a:	4b7b      	ldr	r3, [pc, #492]	; (90011818 <tcp_split_unsent_seg+0x274>)
9001162c:	f44f 7257 	mov.w	r2, #860	; 0x35c
90011630:	497e      	ldr	r1, [pc, #504]	; (9001182c <tcp_split_unsent_seg+0x288>)
90011632:	487b      	ldr	r0, [pc, #492]	; (90011820 <tcp_split_unsent_seg+0x27c>)
90011634:	f004 fade 	bl	90015bf4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
90011638:	697b      	ldr	r3, [r7, #20]
9001163a:	7a9b      	ldrb	r3, [r3, #10]
9001163c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
9001163e:	7bfb      	ldrb	r3, [r7, #15]
90011640:	009b      	lsls	r3, r3, #2
90011642:	b2db      	uxtb	r3, r3
90011644:	f003 0304 	and.w	r3, r3, #4
90011648:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
9001164a:	697b      	ldr	r3, [r7, #20]
9001164c:	891a      	ldrh	r2, [r3, #8]
9001164e:	887b      	ldrh	r3, [r7, #2]
90011650:	1ad3      	subs	r3, r2, r3
90011652:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
90011654:	7bbb      	ldrb	r3, [r7, #14]
90011656:	b29a      	uxth	r2, r3
90011658:	89bb      	ldrh	r3, [r7, #12]
9001165a:	4413      	add	r3, r2
9001165c:	b29b      	uxth	r3, r3
9001165e:	f44f 7220 	mov.w	r2, #640	; 0x280
90011662:	4619      	mov	r1, r3
90011664:	2036      	movs	r0, #54	; 0x36
90011666:	f7fa fbc1 	bl	9000bdec <pbuf_alloc>
9001166a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
9001166c:	693b      	ldr	r3, [r7, #16]
9001166e:	2b00      	cmp	r3, #0
90011670:	f000 80b7 	beq.w	900117e2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
90011674:	697b      	ldr	r3, [r7, #20]
90011676:	685b      	ldr	r3, [r3, #4]
90011678:	891a      	ldrh	r2, [r3, #8]
9001167a:	697b      	ldr	r3, [r7, #20]
9001167c:	891b      	ldrh	r3, [r3, #8]
9001167e:	1ad3      	subs	r3, r2, r3
90011680:	b29a      	uxth	r2, r3
90011682:	887b      	ldrh	r3, [r7, #2]
90011684:	4413      	add	r3, r2
90011686:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
90011688:	697b      	ldr	r3, [r7, #20]
9001168a:	6858      	ldr	r0, [r3, #4]
9001168c:	693b      	ldr	r3, [r7, #16]
9001168e:	685a      	ldr	r2, [r3, #4]
90011690:	7bbb      	ldrb	r3, [r7, #14]
90011692:	18d1      	adds	r1, r2, r3
90011694:	897b      	ldrh	r3, [r7, #10]
90011696:	89ba      	ldrh	r2, [r7, #12]
90011698:	f7fb f882 	bl	9000c7a0 <pbuf_copy_partial>
9001169c:	4603      	mov	r3, r0
9001169e:	461a      	mov	r2, r3
900116a0:	89bb      	ldrh	r3, [r7, #12]
900116a2:	4293      	cmp	r3, r2
900116a4:	f040 809f 	bne.w	900117e6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
900116a8:	697b      	ldr	r3, [r7, #20]
900116aa:	68db      	ldr	r3, [r3, #12]
900116ac:	899b      	ldrh	r3, [r3, #12]
900116ae:	b29b      	uxth	r3, r3
900116b0:	4618      	mov	r0, r3
900116b2:	f7f9 f96b 	bl	9000a98c <lwip_htons>
900116b6:	4603      	mov	r3, r0
900116b8:	b2db      	uxtb	r3, r3
900116ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
900116be:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
900116c0:	2300      	movs	r3, #0
900116c2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
900116c4:	7efb      	ldrb	r3, [r7, #27]
900116c6:	f003 0308 	and.w	r3, r3, #8
900116ca:	2b00      	cmp	r3, #0
900116cc:	d007      	beq.n	900116de <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
900116ce:	7efb      	ldrb	r3, [r7, #27]
900116d0:	f023 0308 	bic.w	r3, r3, #8
900116d4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
900116d6:	7ebb      	ldrb	r3, [r7, #26]
900116d8:	f043 0308 	orr.w	r3, r3, #8
900116dc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
900116de:	7efb      	ldrb	r3, [r7, #27]
900116e0:	f003 0301 	and.w	r3, r3, #1
900116e4:	2b00      	cmp	r3, #0
900116e6:	d007      	beq.n	900116f8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
900116e8:	7efb      	ldrb	r3, [r7, #27]
900116ea:	f023 0301 	bic.w	r3, r3, #1
900116ee:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
900116f0:	7ebb      	ldrb	r3, [r7, #26]
900116f2:	f043 0301 	orr.w	r3, r3, #1
900116f6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
900116f8:	697b      	ldr	r3, [r7, #20]
900116fa:	68db      	ldr	r3, [r3, #12]
900116fc:	685b      	ldr	r3, [r3, #4]
900116fe:	4618      	mov	r0, r3
90011700:	f7f9 f959 	bl	9000a9b6 <lwip_htonl>
90011704:	4602      	mov	r2, r0
90011706:	887b      	ldrh	r3, [r7, #2]
90011708:	18d1      	adds	r1, r2, r3
9001170a:	7eba      	ldrb	r2, [r7, #26]
9001170c:	7bfb      	ldrb	r3, [r7, #15]
9001170e:	9300      	str	r3, [sp, #0]
90011710:	460b      	mov	r3, r1
90011712:	6939      	ldr	r1, [r7, #16]
90011714:	6878      	ldr	r0, [r7, #4]
90011716:	f7ff fa4f 	bl	90010bb8 <tcp_create_segment>
9001171a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
9001171c:	69fb      	ldr	r3, [r7, #28]
9001171e:	2b00      	cmp	r3, #0
90011720:	d063      	beq.n	900117ea <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
90011722:	697b      	ldr	r3, [r7, #20]
90011724:	685b      	ldr	r3, [r3, #4]
90011726:	4618      	mov	r0, r3
90011728:	f7fa fed2 	bl	9000c4d0 <pbuf_clen>
9001172c:	4603      	mov	r3, r0
9001172e:	461a      	mov	r2, r3
90011730:	687b      	ldr	r3, [r7, #4]
90011732:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
90011736:	1a9b      	subs	r3, r3, r2
90011738:	b29a      	uxth	r2, r3
9001173a:	687b      	ldr	r3, [r7, #4]
9001173c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
90011740:	697b      	ldr	r3, [r7, #20]
90011742:	6858      	ldr	r0, [r3, #4]
90011744:	697b      	ldr	r3, [r7, #20]
90011746:	685b      	ldr	r3, [r3, #4]
90011748:	891a      	ldrh	r2, [r3, #8]
9001174a:	89bb      	ldrh	r3, [r7, #12]
9001174c:	1ad3      	subs	r3, r2, r3
9001174e:	b29b      	uxth	r3, r3
90011750:	4619      	mov	r1, r3
90011752:	f7fa fca9 	bl	9000c0a8 <pbuf_realloc>
  useg->len -= remainder;
90011756:	697b      	ldr	r3, [r7, #20]
90011758:	891a      	ldrh	r2, [r3, #8]
9001175a:	89bb      	ldrh	r3, [r7, #12]
9001175c:	1ad3      	subs	r3, r2, r3
9001175e:	b29a      	uxth	r2, r3
90011760:	697b      	ldr	r3, [r7, #20]
90011762:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
90011764:	697b      	ldr	r3, [r7, #20]
90011766:	68db      	ldr	r3, [r3, #12]
90011768:	899b      	ldrh	r3, [r3, #12]
9001176a:	b29c      	uxth	r4, r3
9001176c:	7efb      	ldrb	r3, [r7, #27]
9001176e:	b29b      	uxth	r3, r3
90011770:	4618      	mov	r0, r3
90011772:	f7f9 f90b 	bl	9000a98c <lwip_htons>
90011776:	4603      	mov	r3, r0
90011778:	461a      	mov	r2, r3
9001177a:	697b      	ldr	r3, [r7, #20]
9001177c:	68db      	ldr	r3, [r3, #12]
9001177e:	4322      	orrs	r2, r4
90011780:	b292      	uxth	r2, r2
90011782:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
90011784:	697b      	ldr	r3, [r7, #20]
90011786:	685b      	ldr	r3, [r3, #4]
90011788:	4618      	mov	r0, r3
9001178a:	f7fa fea1 	bl	9000c4d0 <pbuf_clen>
9001178e:	4603      	mov	r3, r0
90011790:	461a      	mov	r2, r3
90011792:	687b      	ldr	r3, [r7, #4]
90011794:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
90011798:	4413      	add	r3, r2
9001179a:	b29a      	uxth	r2, r3
9001179c:	687b      	ldr	r3, [r7, #4]
9001179e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
900117a2:	69fb      	ldr	r3, [r7, #28]
900117a4:	685b      	ldr	r3, [r3, #4]
900117a6:	4618      	mov	r0, r3
900117a8:	f7fa fe92 	bl	9000c4d0 <pbuf_clen>
900117ac:	4603      	mov	r3, r0
900117ae:	461a      	mov	r2, r3
900117b0:	687b      	ldr	r3, [r7, #4]
900117b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
900117b6:	4413      	add	r3, r2
900117b8:	b29a      	uxth	r2, r3
900117ba:	687b      	ldr	r3, [r7, #4]
900117bc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
900117c0:	697b      	ldr	r3, [r7, #20]
900117c2:	681a      	ldr	r2, [r3, #0]
900117c4:	69fb      	ldr	r3, [r7, #28]
900117c6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
900117c8:	697b      	ldr	r3, [r7, #20]
900117ca:	69fa      	ldr	r2, [r7, #28]
900117cc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
900117ce:	69fb      	ldr	r3, [r7, #28]
900117d0:	681b      	ldr	r3, [r3, #0]
900117d2:	2b00      	cmp	r3, #0
900117d4:	d103      	bne.n	900117de <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
900117d6:	687b      	ldr	r3, [r7, #4]
900117d8:	2200      	movs	r2, #0
900117da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
900117de:	2300      	movs	r3, #0
900117e0:	e016      	b.n	90011810 <tcp_split_unsent_seg+0x26c>
    goto memerr;
900117e2:	bf00      	nop
900117e4:	e002      	b.n	900117ec <tcp_split_unsent_seg+0x248>
    goto memerr;
900117e6:	bf00      	nop
900117e8:	e000      	b.n	900117ec <tcp_split_unsent_seg+0x248>
    goto memerr;
900117ea:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
900117ec:	69fb      	ldr	r3, [r7, #28]
900117ee:	2b00      	cmp	r3, #0
900117f0:	d006      	beq.n	90011800 <tcp_split_unsent_seg+0x25c>
900117f2:	4b09      	ldr	r3, [pc, #36]	; (90011818 <tcp_split_unsent_seg+0x274>)
900117f4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
900117f8:	490d      	ldr	r1, [pc, #52]	; (90011830 <tcp_split_unsent_seg+0x28c>)
900117fa:	4809      	ldr	r0, [pc, #36]	; (90011820 <tcp_split_unsent_seg+0x27c>)
900117fc:	f004 f9fa 	bl	90015bf4 <iprintf>
  if (p != NULL) {
90011800:	693b      	ldr	r3, [r7, #16]
90011802:	2b00      	cmp	r3, #0
90011804:	d002      	beq.n	9001180c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
90011806:	6938      	ldr	r0, [r7, #16]
90011808:	f7fa fdd4 	bl	9000c3b4 <pbuf_free>
  }

  return ERR_MEM;
9001180c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
90011810:	4618      	mov	r0, r3
90011812:	3724      	adds	r7, #36	; 0x24
90011814:	46bd      	mov	sp, r7
90011816:	bd90      	pop	{r4, r7, pc}
90011818:	90019410 	.word	0x90019410
9001181c:	900197a4 	.word	0x900197a4
90011820:	90019464 	.word	0x90019464
90011824:	900197c8 	.word	0x900197c8
90011828:	900197ec 	.word	0x900197ec
9001182c:	900197fc 	.word	0x900197fc
90011830:	9001980c 	.word	0x9001980c

90011834 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
90011834:	b590      	push	{r4, r7, lr}
90011836:	b085      	sub	sp, #20
90011838:	af00      	add	r7, sp, #0
9001183a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
9001183c:	687b      	ldr	r3, [r7, #4]
9001183e:	2b00      	cmp	r3, #0
90011840:	d106      	bne.n	90011850 <tcp_send_fin+0x1c>
90011842:	4b21      	ldr	r3, [pc, #132]	; (900118c8 <tcp_send_fin+0x94>)
90011844:	f240 32eb 	movw	r2, #1003	; 0x3eb
90011848:	4920      	ldr	r1, [pc, #128]	; (900118cc <tcp_send_fin+0x98>)
9001184a:	4821      	ldr	r0, [pc, #132]	; (900118d0 <tcp_send_fin+0x9c>)
9001184c:	f004 f9d2 	bl	90015bf4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
90011850:	687b      	ldr	r3, [r7, #4]
90011852:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90011854:	2b00      	cmp	r3, #0
90011856:	d02e      	beq.n	900118b6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
90011858:	687b      	ldr	r3, [r7, #4]
9001185a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9001185c:	60fb      	str	r3, [r7, #12]
9001185e:	e002      	b.n	90011866 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
90011860:	68fb      	ldr	r3, [r7, #12]
90011862:	681b      	ldr	r3, [r3, #0]
90011864:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
90011866:	68fb      	ldr	r3, [r7, #12]
90011868:	681b      	ldr	r3, [r3, #0]
9001186a:	2b00      	cmp	r3, #0
9001186c:	d1f8      	bne.n	90011860 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
9001186e:	68fb      	ldr	r3, [r7, #12]
90011870:	68db      	ldr	r3, [r3, #12]
90011872:	899b      	ldrh	r3, [r3, #12]
90011874:	b29b      	uxth	r3, r3
90011876:	4618      	mov	r0, r3
90011878:	f7f9 f888 	bl	9000a98c <lwip_htons>
9001187c:	4603      	mov	r3, r0
9001187e:	b2db      	uxtb	r3, r3
90011880:	f003 0307 	and.w	r3, r3, #7
90011884:	2b00      	cmp	r3, #0
90011886:	d116      	bne.n	900118b6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
90011888:	68fb      	ldr	r3, [r7, #12]
9001188a:	68db      	ldr	r3, [r3, #12]
9001188c:	899b      	ldrh	r3, [r3, #12]
9001188e:	b29c      	uxth	r4, r3
90011890:	2001      	movs	r0, #1
90011892:	f7f9 f87b 	bl	9000a98c <lwip_htons>
90011896:	4603      	mov	r3, r0
90011898:	461a      	mov	r2, r3
9001189a:	68fb      	ldr	r3, [r7, #12]
9001189c:	68db      	ldr	r3, [r3, #12]
9001189e:	4322      	orrs	r2, r4
900118a0:	b292      	uxth	r2, r2
900118a2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
900118a4:	687b      	ldr	r3, [r7, #4]
900118a6:	8b5b      	ldrh	r3, [r3, #26]
900118a8:	f043 0320 	orr.w	r3, r3, #32
900118ac:	b29a      	uxth	r2, r3
900118ae:	687b      	ldr	r3, [r7, #4]
900118b0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
900118b2:	2300      	movs	r3, #0
900118b4:	e004      	b.n	900118c0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
900118b6:	2101      	movs	r1, #1
900118b8:	6878      	ldr	r0, [r7, #4]
900118ba:	f000 f80b 	bl	900118d4 <tcp_enqueue_flags>
900118be:	4603      	mov	r3, r0
}
900118c0:	4618      	mov	r0, r3
900118c2:	3714      	adds	r7, #20
900118c4:	46bd      	mov	sp, r7
900118c6:	bd90      	pop	{r4, r7, pc}
900118c8:	90019410 	.word	0x90019410
900118cc:	90019818 	.word	0x90019818
900118d0:	90019464 	.word	0x90019464

900118d4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
900118d4:	b580      	push	{r7, lr}
900118d6:	b08a      	sub	sp, #40	; 0x28
900118d8:	af02      	add	r7, sp, #8
900118da:	6078      	str	r0, [r7, #4]
900118dc:	460b      	mov	r3, r1
900118de:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
900118e0:	2300      	movs	r3, #0
900118e2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
900118e4:	2300      	movs	r3, #0
900118e6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
900118e8:	78fb      	ldrb	r3, [r7, #3]
900118ea:	f003 0303 	and.w	r3, r3, #3
900118ee:	2b00      	cmp	r3, #0
900118f0:	d106      	bne.n	90011900 <tcp_enqueue_flags+0x2c>
900118f2:	4b67      	ldr	r3, [pc, #412]	; (90011a90 <tcp_enqueue_flags+0x1bc>)
900118f4:	f240 4211 	movw	r2, #1041	; 0x411
900118f8:	4966      	ldr	r1, [pc, #408]	; (90011a94 <tcp_enqueue_flags+0x1c0>)
900118fa:	4867      	ldr	r0, [pc, #412]	; (90011a98 <tcp_enqueue_flags+0x1c4>)
900118fc:	f004 f97a 	bl	90015bf4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
90011900:	687b      	ldr	r3, [r7, #4]
90011902:	2b00      	cmp	r3, #0
90011904:	d106      	bne.n	90011914 <tcp_enqueue_flags+0x40>
90011906:	4b62      	ldr	r3, [pc, #392]	; (90011a90 <tcp_enqueue_flags+0x1bc>)
90011908:	f240 4213 	movw	r2, #1043	; 0x413
9001190c:	4963      	ldr	r1, [pc, #396]	; (90011a9c <tcp_enqueue_flags+0x1c8>)
9001190e:	4862      	ldr	r0, [pc, #392]	; (90011a98 <tcp_enqueue_flags+0x1c4>)
90011910:	f004 f970 	bl	90015bf4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
90011914:	78fb      	ldrb	r3, [r7, #3]
90011916:	f003 0302 	and.w	r3, r3, #2
9001191a:	2b00      	cmp	r3, #0
9001191c:	d001      	beq.n	90011922 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
9001191e:	2301      	movs	r3, #1
90011920:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
90011922:	7ffb      	ldrb	r3, [r7, #31]
90011924:	009b      	lsls	r3, r3, #2
90011926:	b2db      	uxtb	r3, r3
90011928:	f003 0304 	and.w	r3, r3, #4
9001192c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
9001192e:	7dfb      	ldrb	r3, [r7, #23]
90011930:	b29b      	uxth	r3, r3
90011932:	f44f 7220 	mov.w	r2, #640	; 0x280
90011936:	4619      	mov	r1, r3
90011938:	2036      	movs	r0, #54	; 0x36
9001193a:	f7fa fa57 	bl	9000bdec <pbuf_alloc>
9001193e:	6138      	str	r0, [r7, #16]
90011940:	693b      	ldr	r3, [r7, #16]
90011942:	2b00      	cmp	r3, #0
90011944:	d109      	bne.n	9001195a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
90011946:	687b      	ldr	r3, [r7, #4]
90011948:	8b5b      	ldrh	r3, [r3, #26]
9001194a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9001194e:	b29a      	uxth	r2, r3
90011950:	687b      	ldr	r3, [r7, #4]
90011952:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
90011954:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90011958:	e095      	b.n	90011a86 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
9001195a:	693b      	ldr	r3, [r7, #16]
9001195c:	895a      	ldrh	r2, [r3, #10]
9001195e:	7dfb      	ldrb	r3, [r7, #23]
90011960:	b29b      	uxth	r3, r3
90011962:	429a      	cmp	r2, r3
90011964:	d206      	bcs.n	90011974 <tcp_enqueue_flags+0xa0>
90011966:	4b4a      	ldr	r3, [pc, #296]	; (90011a90 <tcp_enqueue_flags+0x1bc>)
90011968:	f240 4239 	movw	r2, #1081	; 0x439
9001196c:	494c      	ldr	r1, [pc, #304]	; (90011aa0 <tcp_enqueue_flags+0x1cc>)
9001196e:	484a      	ldr	r0, [pc, #296]	; (90011a98 <tcp_enqueue_flags+0x1c4>)
90011970:	f004 f940 	bl	90015bf4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
90011974:	687b      	ldr	r3, [r7, #4]
90011976:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
90011978:	78fa      	ldrb	r2, [r7, #3]
9001197a:	7ffb      	ldrb	r3, [r7, #31]
9001197c:	9300      	str	r3, [sp, #0]
9001197e:	460b      	mov	r3, r1
90011980:	6939      	ldr	r1, [r7, #16]
90011982:	6878      	ldr	r0, [r7, #4]
90011984:	f7ff f918 	bl	90010bb8 <tcp_create_segment>
90011988:	60f8      	str	r0, [r7, #12]
9001198a:	68fb      	ldr	r3, [r7, #12]
9001198c:	2b00      	cmp	r3, #0
9001198e:	d109      	bne.n	900119a4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
90011990:	687b      	ldr	r3, [r7, #4]
90011992:	8b5b      	ldrh	r3, [r3, #26]
90011994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90011998:	b29a      	uxth	r2, r3
9001199a:	687b      	ldr	r3, [r7, #4]
9001199c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
9001199e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
900119a2:	e070      	b.n	90011a86 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
900119a4:	68fb      	ldr	r3, [r7, #12]
900119a6:	68db      	ldr	r3, [r3, #12]
900119a8:	f003 0303 	and.w	r3, r3, #3
900119ac:	2b00      	cmp	r3, #0
900119ae:	d006      	beq.n	900119be <tcp_enqueue_flags+0xea>
900119b0:	4b37      	ldr	r3, [pc, #220]	; (90011a90 <tcp_enqueue_flags+0x1bc>)
900119b2:	f240 4242 	movw	r2, #1090	; 0x442
900119b6:	493b      	ldr	r1, [pc, #236]	; (90011aa4 <tcp_enqueue_flags+0x1d0>)
900119b8:	4837      	ldr	r0, [pc, #220]	; (90011a98 <tcp_enqueue_flags+0x1c4>)
900119ba:	f004 f91b 	bl	90015bf4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
900119be:	68fb      	ldr	r3, [r7, #12]
900119c0:	891b      	ldrh	r3, [r3, #8]
900119c2:	2b00      	cmp	r3, #0
900119c4:	d006      	beq.n	900119d4 <tcp_enqueue_flags+0x100>
900119c6:	4b32      	ldr	r3, [pc, #200]	; (90011a90 <tcp_enqueue_flags+0x1bc>)
900119c8:	f240 4243 	movw	r2, #1091	; 0x443
900119cc:	4936      	ldr	r1, [pc, #216]	; (90011aa8 <tcp_enqueue_flags+0x1d4>)
900119ce:	4832      	ldr	r0, [pc, #200]	; (90011a98 <tcp_enqueue_flags+0x1c4>)
900119d0:	f004 f910 	bl	90015bf4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
900119d4:	687b      	ldr	r3, [r7, #4]
900119d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
900119d8:	2b00      	cmp	r3, #0
900119da:	d103      	bne.n	900119e4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
900119dc:	687b      	ldr	r3, [r7, #4]
900119de:	68fa      	ldr	r2, [r7, #12]
900119e0:	66da      	str	r2, [r3, #108]	; 0x6c
900119e2:	e00d      	b.n	90011a00 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
900119e4:	687b      	ldr	r3, [r7, #4]
900119e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
900119e8:	61bb      	str	r3, [r7, #24]
900119ea:	e002      	b.n	900119f2 <tcp_enqueue_flags+0x11e>
900119ec:	69bb      	ldr	r3, [r7, #24]
900119ee:	681b      	ldr	r3, [r3, #0]
900119f0:	61bb      	str	r3, [r7, #24]
900119f2:	69bb      	ldr	r3, [r7, #24]
900119f4:	681b      	ldr	r3, [r3, #0]
900119f6:	2b00      	cmp	r3, #0
900119f8:	d1f8      	bne.n	900119ec <tcp_enqueue_flags+0x118>
    useg->next = seg;
900119fa:	69bb      	ldr	r3, [r7, #24]
900119fc:	68fa      	ldr	r2, [r7, #12]
900119fe:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
90011a00:	687b      	ldr	r3, [r7, #4]
90011a02:	2200      	movs	r2, #0
90011a04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
90011a08:	78fb      	ldrb	r3, [r7, #3]
90011a0a:	f003 0302 	and.w	r3, r3, #2
90011a0e:	2b00      	cmp	r3, #0
90011a10:	d104      	bne.n	90011a1c <tcp_enqueue_flags+0x148>
90011a12:	78fb      	ldrb	r3, [r7, #3]
90011a14:	f003 0301 	and.w	r3, r3, #1
90011a18:	2b00      	cmp	r3, #0
90011a1a:	d004      	beq.n	90011a26 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
90011a1c:	687b      	ldr	r3, [r7, #4]
90011a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90011a20:	1c5a      	adds	r2, r3, #1
90011a22:	687b      	ldr	r3, [r7, #4]
90011a24:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
90011a26:	78fb      	ldrb	r3, [r7, #3]
90011a28:	f003 0301 	and.w	r3, r3, #1
90011a2c:	2b00      	cmp	r3, #0
90011a2e:	d006      	beq.n	90011a3e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
90011a30:	687b      	ldr	r3, [r7, #4]
90011a32:	8b5b      	ldrh	r3, [r3, #26]
90011a34:	f043 0320 	orr.w	r3, r3, #32
90011a38:	b29a      	uxth	r2, r3
90011a3a:	687b      	ldr	r3, [r7, #4]
90011a3c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
90011a3e:	68fb      	ldr	r3, [r7, #12]
90011a40:	685b      	ldr	r3, [r3, #4]
90011a42:	4618      	mov	r0, r3
90011a44:	f7fa fd44 	bl	9000c4d0 <pbuf_clen>
90011a48:	4603      	mov	r3, r0
90011a4a:	461a      	mov	r2, r3
90011a4c:	687b      	ldr	r3, [r7, #4]
90011a4e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
90011a52:	4413      	add	r3, r2
90011a54:	b29a      	uxth	r2, r3
90011a56:	687b      	ldr	r3, [r7, #4]
90011a58:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
90011a5c:	687b      	ldr	r3, [r7, #4]
90011a5e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
90011a62:	2b00      	cmp	r3, #0
90011a64:	d00e      	beq.n	90011a84 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
90011a66:	687b      	ldr	r3, [r7, #4]
90011a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90011a6a:	2b00      	cmp	r3, #0
90011a6c:	d10a      	bne.n	90011a84 <tcp_enqueue_flags+0x1b0>
90011a6e:	687b      	ldr	r3, [r7, #4]
90011a70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90011a72:	2b00      	cmp	r3, #0
90011a74:	d106      	bne.n	90011a84 <tcp_enqueue_flags+0x1b0>
90011a76:	4b06      	ldr	r3, [pc, #24]	; (90011a90 <tcp_enqueue_flags+0x1bc>)
90011a78:	f240 4265 	movw	r2, #1125	; 0x465
90011a7c:	490b      	ldr	r1, [pc, #44]	; (90011aac <tcp_enqueue_flags+0x1d8>)
90011a7e:	4806      	ldr	r0, [pc, #24]	; (90011a98 <tcp_enqueue_flags+0x1c4>)
90011a80:	f004 f8b8 	bl	90015bf4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
90011a84:	2300      	movs	r3, #0
}
90011a86:	4618      	mov	r0, r3
90011a88:	3720      	adds	r7, #32
90011a8a:	46bd      	mov	sp, r7
90011a8c:	bd80      	pop	{r7, pc}
90011a8e:	bf00      	nop
90011a90:	90019410 	.word	0x90019410
90011a94:	90019834 	.word	0x90019834
90011a98:	90019464 	.word	0x90019464
90011a9c:	9001988c 	.word	0x9001988c
90011aa0:	900198ac 	.word	0x900198ac
90011aa4:	900198e8 	.word	0x900198e8
90011aa8:	90019900 	.word	0x90019900
90011aac:	9001992c 	.word	0x9001992c

90011ab0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
90011ab0:	b5b0      	push	{r4, r5, r7, lr}
90011ab2:	b08a      	sub	sp, #40	; 0x28
90011ab4:	af00      	add	r7, sp, #0
90011ab6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
90011ab8:	687b      	ldr	r3, [r7, #4]
90011aba:	2b00      	cmp	r3, #0
90011abc:	d106      	bne.n	90011acc <tcp_output+0x1c>
90011abe:	4b8a      	ldr	r3, [pc, #552]	; (90011ce8 <tcp_output+0x238>)
90011ac0:	f240 42e1 	movw	r2, #1249	; 0x4e1
90011ac4:	4989      	ldr	r1, [pc, #548]	; (90011cec <tcp_output+0x23c>)
90011ac6:	488a      	ldr	r0, [pc, #552]	; (90011cf0 <tcp_output+0x240>)
90011ac8:	f004 f894 	bl	90015bf4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
90011acc:	687b      	ldr	r3, [r7, #4]
90011ace:	7d1b      	ldrb	r3, [r3, #20]
90011ad0:	2b01      	cmp	r3, #1
90011ad2:	d106      	bne.n	90011ae2 <tcp_output+0x32>
90011ad4:	4b84      	ldr	r3, [pc, #528]	; (90011ce8 <tcp_output+0x238>)
90011ad6:	f240 42e3 	movw	r2, #1251	; 0x4e3
90011ada:	4986      	ldr	r1, [pc, #536]	; (90011cf4 <tcp_output+0x244>)
90011adc:	4884      	ldr	r0, [pc, #528]	; (90011cf0 <tcp_output+0x240>)
90011ade:	f004 f889 	bl	90015bf4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
90011ae2:	4b85      	ldr	r3, [pc, #532]	; (90011cf8 <tcp_output+0x248>)
90011ae4:	681b      	ldr	r3, [r3, #0]
90011ae6:	687a      	ldr	r2, [r7, #4]
90011ae8:	429a      	cmp	r2, r3
90011aea:	d101      	bne.n	90011af0 <tcp_output+0x40>
    return ERR_OK;
90011aec:	2300      	movs	r3, #0
90011aee:	e1ce      	b.n	90011e8e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
90011af0:	687b      	ldr	r3, [r7, #4]
90011af2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
90011af6:	687b      	ldr	r3, [r7, #4]
90011af8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
90011afc:	4293      	cmp	r3, r2
90011afe:	bf28      	it	cs
90011b00:	4613      	movcs	r3, r2
90011b02:	b29b      	uxth	r3, r3
90011b04:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
90011b06:	687b      	ldr	r3, [r7, #4]
90011b08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90011b0a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
90011b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90011b0e:	2b00      	cmp	r3, #0
90011b10:	d10b      	bne.n	90011b2a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
90011b12:	687b      	ldr	r3, [r7, #4]
90011b14:	8b5b      	ldrh	r3, [r3, #26]
90011b16:	f003 0302 	and.w	r3, r3, #2
90011b1a:	2b00      	cmp	r3, #0
90011b1c:	f000 81aa 	beq.w	90011e74 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
90011b20:	6878      	ldr	r0, [r7, #4]
90011b22:	f000 fdcb 	bl	900126bc <tcp_send_empty_ack>
90011b26:	4603      	mov	r3, r0
90011b28:	e1b1      	b.n	90011e8e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
90011b2a:	6879      	ldr	r1, [r7, #4]
90011b2c:	687b      	ldr	r3, [r7, #4]
90011b2e:	3304      	adds	r3, #4
90011b30:	461a      	mov	r2, r3
90011b32:	6878      	ldr	r0, [r7, #4]
90011b34:	f7ff f824 	bl	90010b80 <tcp_route>
90011b38:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
90011b3a:	697b      	ldr	r3, [r7, #20]
90011b3c:	2b00      	cmp	r3, #0
90011b3e:	d102      	bne.n	90011b46 <tcp_output+0x96>
    return ERR_RTE;
90011b40:	f06f 0303 	mvn.w	r3, #3
90011b44:	e1a3      	b.n	90011e8e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
90011b46:	687b      	ldr	r3, [r7, #4]
90011b48:	2b00      	cmp	r3, #0
90011b4a:	d003      	beq.n	90011b54 <tcp_output+0xa4>
90011b4c:	687b      	ldr	r3, [r7, #4]
90011b4e:	681b      	ldr	r3, [r3, #0]
90011b50:	2b00      	cmp	r3, #0
90011b52:	d111      	bne.n	90011b78 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
90011b54:	697b      	ldr	r3, [r7, #20]
90011b56:	2b00      	cmp	r3, #0
90011b58:	d002      	beq.n	90011b60 <tcp_output+0xb0>
90011b5a:	697b      	ldr	r3, [r7, #20]
90011b5c:	3304      	adds	r3, #4
90011b5e:	e000      	b.n	90011b62 <tcp_output+0xb2>
90011b60:	2300      	movs	r3, #0
90011b62:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
90011b64:	693b      	ldr	r3, [r7, #16]
90011b66:	2b00      	cmp	r3, #0
90011b68:	d102      	bne.n	90011b70 <tcp_output+0xc0>
      return ERR_RTE;
90011b6a:	f06f 0303 	mvn.w	r3, #3
90011b6e:	e18e      	b.n	90011e8e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
90011b70:	693b      	ldr	r3, [r7, #16]
90011b72:	681a      	ldr	r2, [r3, #0]
90011b74:	687b      	ldr	r3, [r7, #4]
90011b76:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
90011b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90011b7a:	68db      	ldr	r3, [r3, #12]
90011b7c:	685b      	ldr	r3, [r3, #4]
90011b7e:	4618      	mov	r0, r3
90011b80:	f7f8 ff19 	bl	9000a9b6 <lwip_htonl>
90011b84:	4602      	mov	r2, r0
90011b86:	687b      	ldr	r3, [r7, #4]
90011b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90011b8a:	1ad3      	subs	r3, r2, r3
90011b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
90011b8e:	8912      	ldrh	r2, [r2, #8]
90011b90:	4413      	add	r3, r2
90011b92:	69ba      	ldr	r2, [r7, #24]
90011b94:	429a      	cmp	r2, r3
90011b96:	d227      	bcs.n	90011be8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
90011b98:	687b      	ldr	r3, [r7, #4]
90011b9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
90011b9e:	461a      	mov	r2, r3
90011ba0:	69bb      	ldr	r3, [r7, #24]
90011ba2:	4293      	cmp	r3, r2
90011ba4:	d114      	bne.n	90011bd0 <tcp_output+0x120>
90011ba6:	687b      	ldr	r3, [r7, #4]
90011ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90011baa:	2b00      	cmp	r3, #0
90011bac:	d110      	bne.n	90011bd0 <tcp_output+0x120>
90011bae:	687b      	ldr	r3, [r7, #4]
90011bb0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
90011bb4:	2b00      	cmp	r3, #0
90011bb6:	d10b      	bne.n	90011bd0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
90011bb8:	687b      	ldr	r3, [r7, #4]
90011bba:	2200      	movs	r2, #0
90011bbc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
90011bc0:	687b      	ldr	r3, [r7, #4]
90011bc2:	2201      	movs	r2, #1
90011bc4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
90011bc8:	687b      	ldr	r3, [r7, #4]
90011bca:	2200      	movs	r2, #0
90011bcc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
90011bd0:	687b      	ldr	r3, [r7, #4]
90011bd2:	8b5b      	ldrh	r3, [r3, #26]
90011bd4:	f003 0302 	and.w	r3, r3, #2
90011bd8:	2b00      	cmp	r3, #0
90011bda:	f000 814d 	beq.w	90011e78 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
90011bde:	6878      	ldr	r0, [r7, #4]
90011be0:	f000 fd6c 	bl	900126bc <tcp_send_empty_ack>
90011be4:	4603      	mov	r3, r0
90011be6:	e152      	b.n	90011e8e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
90011be8:	687b      	ldr	r3, [r7, #4]
90011bea:	2200      	movs	r2, #0
90011bec:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
90011bf0:	687b      	ldr	r3, [r7, #4]
90011bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90011bf4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
90011bf6:	6a3b      	ldr	r3, [r7, #32]
90011bf8:	2b00      	cmp	r3, #0
90011bfa:	f000 811c 	beq.w	90011e36 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
90011bfe:	e002      	b.n	90011c06 <tcp_output+0x156>
90011c00:	6a3b      	ldr	r3, [r7, #32]
90011c02:	681b      	ldr	r3, [r3, #0]
90011c04:	623b      	str	r3, [r7, #32]
90011c06:	6a3b      	ldr	r3, [r7, #32]
90011c08:	681b      	ldr	r3, [r3, #0]
90011c0a:	2b00      	cmp	r3, #0
90011c0c:	d1f8      	bne.n	90011c00 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
90011c0e:	e112      	b.n	90011e36 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
90011c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90011c12:	68db      	ldr	r3, [r3, #12]
90011c14:	899b      	ldrh	r3, [r3, #12]
90011c16:	b29b      	uxth	r3, r3
90011c18:	4618      	mov	r0, r3
90011c1a:	f7f8 feb7 	bl	9000a98c <lwip_htons>
90011c1e:	4603      	mov	r3, r0
90011c20:	b2db      	uxtb	r3, r3
90011c22:	f003 0304 	and.w	r3, r3, #4
90011c26:	2b00      	cmp	r3, #0
90011c28:	d006      	beq.n	90011c38 <tcp_output+0x188>
90011c2a:	4b2f      	ldr	r3, [pc, #188]	; (90011ce8 <tcp_output+0x238>)
90011c2c:	f240 5236 	movw	r2, #1334	; 0x536
90011c30:	4932      	ldr	r1, [pc, #200]	; (90011cfc <tcp_output+0x24c>)
90011c32:	482f      	ldr	r0, [pc, #188]	; (90011cf0 <tcp_output+0x240>)
90011c34:	f003 ffde 	bl	90015bf4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
90011c38:	687b      	ldr	r3, [r7, #4]
90011c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90011c3c:	2b00      	cmp	r3, #0
90011c3e:	d01f      	beq.n	90011c80 <tcp_output+0x1d0>
90011c40:	687b      	ldr	r3, [r7, #4]
90011c42:	8b5b      	ldrh	r3, [r3, #26]
90011c44:	f003 0344 	and.w	r3, r3, #68	; 0x44
90011c48:	2b00      	cmp	r3, #0
90011c4a:	d119      	bne.n	90011c80 <tcp_output+0x1d0>
90011c4c:	687b      	ldr	r3, [r7, #4]
90011c4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90011c50:	2b00      	cmp	r3, #0
90011c52:	d00b      	beq.n	90011c6c <tcp_output+0x1bc>
90011c54:	687b      	ldr	r3, [r7, #4]
90011c56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90011c58:	681b      	ldr	r3, [r3, #0]
90011c5a:	2b00      	cmp	r3, #0
90011c5c:	d110      	bne.n	90011c80 <tcp_output+0x1d0>
90011c5e:	687b      	ldr	r3, [r7, #4]
90011c60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90011c62:	891a      	ldrh	r2, [r3, #8]
90011c64:	687b      	ldr	r3, [r7, #4]
90011c66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
90011c68:	429a      	cmp	r2, r3
90011c6a:	d209      	bcs.n	90011c80 <tcp_output+0x1d0>
90011c6c:	687b      	ldr	r3, [r7, #4]
90011c6e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
90011c72:	2b00      	cmp	r3, #0
90011c74:	d004      	beq.n	90011c80 <tcp_output+0x1d0>
90011c76:	687b      	ldr	r3, [r7, #4]
90011c78:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
90011c7c:	2b08      	cmp	r3, #8
90011c7e:	d901      	bls.n	90011c84 <tcp_output+0x1d4>
90011c80:	2301      	movs	r3, #1
90011c82:	e000      	b.n	90011c86 <tcp_output+0x1d6>
90011c84:	2300      	movs	r3, #0
90011c86:	2b00      	cmp	r3, #0
90011c88:	d106      	bne.n	90011c98 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
90011c8a:	687b      	ldr	r3, [r7, #4]
90011c8c:	8b5b      	ldrh	r3, [r3, #26]
90011c8e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
90011c92:	2b00      	cmp	r3, #0
90011c94:	f000 80e4 	beq.w	90011e60 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
90011c98:	687b      	ldr	r3, [r7, #4]
90011c9a:	7d1b      	ldrb	r3, [r3, #20]
90011c9c:	2b02      	cmp	r3, #2
90011c9e:	d00d      	beq.n	90011cbc <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
90011ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90011ca2:	68db      	ldr	r3, [r3, #12]
90011ca4:	899b      	ldrh	r3, [r3, #12]
90011ca6:	b29c      	uxth	r4, r3
90011ca8:	2010      	movs	r0, #16
90011caa:	f7f8 fe6f 	bl	9000a98c <lwip_htons>
90011cae:	4603      	mov	r3, r0
90011cb0:	461a      	mov	r2, r3
90011cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90011cb4:	68db      	ldr	r3, [r3, #12]
90011cb6:	4322      	orrs	r2, r4
90011cb8:	b292      	uxth	r2, r2
90011cba:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
90011cbc:	697a      	ldr	r2, [r7, #20]
90011cbe:	6879      	ldr	r1, [r7, #4]
90011cc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
90011cc2:	f000 f909 	bl	90011ed8 <tcp_output_segment>
90011cc6:	4603      	mov	r3, r0
90011cc8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
90011cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
90011cce:	2b00      	cmp	r3, #0
90011cd0:	d016      	beq.n	90011d00 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
90011cd2:	687b      	ldr	r3, [r7, #4]
90011cd4:	8b5b      	ldrh	r3, [r3, #26]
90011cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90011cda:	b29a      	uxth	r2, r3
90011cdc:	687b      	ldr	r3, [r7, #4]
90011cde:	835a      	strh	r2, [r3, #26]
      return err;
90011ce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
90011ce4:	e0d3      	b.n	90011e8e <tcp_output+0x3de>
90011ce6:	bf00      	nop
90011ce8:	90019410 	.word	0x90019410
90011cec:	90019954 	.word	0x90019954
90011cf0:	90019464 	.word	0x90019464
90011cf4:	9001996c 	.word	0x9001996c
90011cf8:	2401f3f0 	.word	0x2401f3f0
90011cfc:	90019994 	.word	0x90019994
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
90011d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90011d02:	681a      	ldr	r2, [r3, #0]
90011d04:	687b      	ldr	r3, [r7, #4]
90011d06:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
90011d08:	687b      	ldr	r3, [r7, #4]
90011d0a:	7d1b      	ldrb	r3, [r3, #20]
90011d0c:	2b02      	cmp	r3, #2
90011d0e:	d006      	beq.n	90011d1e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
90011d10:	687b      	ldr	r3, [r7, #4]
90011d12:	8b5b      	ldrh	r3, [r3, #26]
90011d14:	f023 0303 	bic.w	r3, r3, #3
90011d18:	b29a      	uxth	r2, r3
90011d1a:	687b      	ldr	r3, [r7, #4]
90011d1c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
90011d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90011d20:	68db      	ldr	r3, [r3, #12]
90011d22:	685b      	ldr	r3, [r3, #4]
90011d24:	4618      	mov	r0, r3
90011d26:	f7f8 fe46 	bl	9000a9b6 <lwip_htonl>
90011d2a:	4604      	mov	r4, r0
90011d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90011d2e:	891b      	ldrh	r3, [r3, #8]
90011d30:	461d      	mov	r5, r3
90011d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90011d34:	68db      	ldr	r3, [r3, #12]
90011d36:	899b      	ldrh	r3, [r3, #12]
90011d38:	b29b      	uxth	r3, r3
90011d3a:	4618      	mov	r0, r3
90011d3c:	f7f8 fe26 	bl	9000a98c <lwip_htons>
90011d40:	4603      	mov	r3, r0
90011d42:	b2db      	uxtb	r3, r3
90011d44:	f003 0303 	and.w	r3, r3, #3
90011d48:	2b00      	cmp	r3, #0
90011d4a:	d001      	beq.n	90011d50 <tcp_output+0x2a0>
90011d4c:	2301      	movs	r3, #1
90011d4e:	e000      	b.n	90011d52 <tcp_output+0x2a2>
90011d50:	2300      	movs	r3, #0
90011d52:	442b      	add	r3, r5
90011d54:	4423      	add	r3, r4
90011d56:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
90011d58:	687b      	ldr	r3, [r7, #4]
90011d5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
90011d5c:	68bb      	ldr	r3, [r7, #8]
90011d5e:	1ad3      	subs	r3, r2, r3
90011d60:	2b00      	cmp	r3, #0
90011d62:	da02      	bge.n	90011d6a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
90011d64:	687b      	ldr	r3, [r7, #4]
90011d66:	68ba      	ldr	r2, [r7, #8]
90011d68:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
90011d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90011d6c:	891b      	ldrh	r3, [r3, #8]
90011d6e:	461c      	mov	r4, r3
90011d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90011d72:	68db      	ldr	r3, [r3, #12]
90011d74:	899b      	ldrh	r3, [r3, #12]
90011d76:	b29b      	uxth	r3, r3
90011d78:	4618      	mov	r0, r3
90011d7a:	f7f8 fe07 	bl	9000a98c <lwip_htons>
90011d7e:	4603      	mov	r3, r0
90011d80:	b2db      	uxtb	r3, r3
90011d82:	f003 0303 	and.w	r3, r3, #3
90011d86:	2b00      	cmp	r3, #0
90011d88:	d001      	beq.n	90011d8e <tcp_output+0x2de>
90011d8a:	2301      	movs	r3, #1
90011d8c:	e000      	b.n	90011d90 <tcp_output+0x2e0>
90011d8e:	2300      	movs	r3, #0
90011d90:	4423      	add	r3, r4
90011d92:	2b00      	cmp	r3, #0
90011d94:	d049      	beq.n	90011e2a <tcp_output+0x37a>
      seg->next = NULL;
90011d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90011d98:	2200      	movs	r2, #0
90011d9a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
90011d9c:	687b      	ldr	r3, [r7, #4]
90011d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90011da0:	2b00      	cmp	r3, #0
90011da2:	d105      	bne.n	90011db0 <tcp_output+0x300>
        pcb->unacked = seg;
90011da4:	687b      	ldr	r3, [r7, #4]
90011da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
90011da8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
90011daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90011dac:	623b      	str	r3, [r7, #32]
90011dae:	e03f      	b.n	90011e30 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
90011db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90011db2:	68db      	ldr	r3, [r3, #12]
90011db4:	685b      	ldr	r3, [r3, #4]
90011db6:	4618      	mov	r0, r3
90011db8:	f7f8 fdfd 	bl	9000a9b6 <lwip_htonl>
90011dbc:	4604      	mov	r4, r0
90011dbe:	6a3b      	ldr	r3, [r7, #32]
90011dc0:	68db      	ldr	r3, [r3, #12]
90011dc2:	685b      	ldr	r3, [r3, #4]
90011dc4:	4618      	mov	r0, r3
90011dc6:	f7f8 fdf6 	bl	9000a9b6 <lwip_htonl>
90011dca:	4603      	mov	r3, r0
90011dcc:	1ae3      	subs	r3, r4, r3
90011dce:	2b00      	cmp	r3, #0
90011dd0:	da24      	bge.n	90011e1c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
90011dd2:	687b      	ldr	r3, [r7, #4]
90011dd4:	3370      	adds	r3, #112	; 0x70
90011dd6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
90011dd8:	e002      	b.n	90011de0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
90011dda:	69fb      	ldr	r3, [r7, #28]
90011ddc:	681b      	ldr	r3, [r3, #0]
90011dde:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
90011de0:	69fb      	ldr	r3, [r7, #28]
90011de2:	681b      	ldr	r3, [r3, #0]
90011de4:	2b00      	cmp	r3, #0
90011de6:	d011      	beq.n	90011e0c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
90011de8:	69fb      	ldr	r3, [r7, #28]
90011dea:	681b      	ldr	r3, [r3, #0]
90011dec:	68db      	ldr	r3, [r3, #12]
90011dee:	685b      	ldr	r3, [r3, #4]
90011df0:	4618      	mov	r0, r3
90011df2:	f7f8 fde0 	bl	9000a9b6 <lwip_htonl>
90011df6:	4604      	mov	r4, r0
90011df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90011dfa:	68db      	ldr	r3, [r3, #12]
90011dfc:	685b      	ldr	r3, [r3, #4]
90011dfe:	4618      	mov	r0, r3
90011e00:	f7f8 fdd9 	bl	9000a9b6 <lwip_htonl>
90011e04:	4603      	mov	r3, r0
90011e06:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
90011e08:	2b00      	cmp	r3, #0
90011e0a:	dbe6      	blt.n	90011dda <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
90011e0c:	69fb      	ldr	r3, [r7, #28]
90011e0e:	681a      	ldr	r2, [r3, #0]
90011e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90011e12:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
90011e14:	69fb      	ldr	r3, [r7, #28]
90011e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
90011e18:	601a      	str	r2, [r3, #0]
90011e1a:	e009      	b.n	90011e30 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
90011e1c:	6a3b      	ldr	r3, [r7, #32]
90011e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
90011e20:	601a      	str	r2, [r3, #0]
          useg = useg->next;
90011e22:	6a3b      	ldr	r3, [r7, #32]
90011e24:	681b      	ldr	r3, [r3, #0]
90011e26:	623b      	str	r3, [r7, #32]
90011e28:	e002      	b.n	90011e30 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
90011e2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
90011e2c:	f7fb fefb 	bl	9000dc26 <tcp_seg_free>
    }
    seg = pcb->unsent;
90011e30:	687b      	ldr	r3, [r7, #4]
90011e32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90011e34:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
90011e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90011e38:	2b00      	cmp	r3, #0
90011e3a:	d012      	beq.n	90011e62 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
90011e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90011e3e:	68db      	ldr	r3, [r3, #12]
90011e40:	685b      	ldr	r3, [r3, #4]
90011e42:	4618      	mov	r0, r3
90011e44:	f7f8 fdb7 	bl	9000a9b6 <lwip_htonl>
90011e48:	4602      	mov	r2, r0
90011e4a:	687b      	ldr	r3, [r7, #4]
90011e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90011e4e:	1ad3      	subs	r3, r2, r3
90011e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
90011e52:	8912      	ldrh	r2, [r2, #8]
90011e54:	4413      	add	r3, r2
  while (seg != NULL &&
90011e56:	69ba      	ldr	r2, [r7, #24]
90011e58:	429a      	cmp	r2, r3
90011e5a:	f4bf aed9 	bcs.w	90011c10 <tcp_output+0x160>
90011e5e:	e000      	b.n	90011e62 <tcp_output+0x3b2>
      break;
90011e60:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
90011e62:	687b      	ldr	r3, [r7, #4]
90011e64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90011e66:	2b00      	cmp	r3, #0
90011e68:	d108      	bne.n	90011e7c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
90011e6a:	687b      	ldr	r3, [r7, #4]
90011e6c:	2200      	movs	r2, #0
90011e6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
90011e72:	e004      	b.n	90011e7e <tcp_output+0x3ce>
    goto output_done;
90011e74:	bf00      	nop
90011e76:	e002      	b.n	90011e7e <tcp_output+0x3ce>
    goto output_done;
90011e78:	bf00      	nop
90011e7a:	e000      	b.n	90011e7e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
90011e7c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
90011e7e:	687b      	ldr	r3, [r7, #4]
90011e80:	8b5b      	ldrh	r3, [r3, #26]
90011e82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
90011e86:	b29a      	uxth	r2, r3
90011e88:	687b      	ldr	r3, [r7, #4]
90011e8a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
90011e8c:	2300      	movs	r3, #0
}
90011e8e:	4618      	mov	r0, r3
90011e90:	3728      	adds	r7, #40	; 0x28
90011e92:	46bd      	mov	sp, r7
90011e94:	bdb0      	pop	{r4, r5, r7, pc}
90011e96:	bf00      	nop

90011e98 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
90011e98:	b580      	push	{r7, lr}
90011e9a:	b082      	sub	sp, #8
90011e9c:	af00      	add	r7, sp, #0
90011e9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
90011ea0:	687b      	ldr	r3, [r7, #4]
90011ea2:	2b00      	cmp	r3, #0
90011ea4:	d106      	bne.n	90011eb4 <tcp_output_segment_busy+0x1c>
90011ea6:	4b09      	ldr	r3, [pc, #36]	; (90011ecc <tcp_output_segment_busy+0x34>)
90011ea8:	f240 529a 	movw	r2, #1434	; 0x59a
90011eac:	4908      	ldr	r1, [pc, #32]	; (90011ed0 <tcp_output_segment_busy+0x38>)
90011eae:	4809      	ldr	r0, [pc, #36]	; (90011ed4 <tcp_output_segment_busy+0x3c>)
90011eb0:	f003 fea0 	bl	90015bf4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
90011eb4:	687b      	ldr	r3, [r7, #4]
90011eb6:	685b      	ldr	r3, [r3, #4]
90011eb8:	7b9b      	ldrb	r3, [r3, #14]
90011eba:	2b01      	cmp	r3, #1
90011ebc:	d001      	beq.n	90011ec2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
90011ebe:	2301      	movs	r3, #1
90011ec0:	e000      	b.n	90011ec4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
90011ec2:	2300      	movs	r3, #0
}
90011ec4:	4618      	mov	r0, r3
90011ec6:	3708      	adds	r7, #8
90011ec8:	46bd      	mov	sp, r7
90011eca:	bd80      	pop	{r7, pc}
90011ecc:	90019410 	.word	0x90019410
90011ed0:	900199ac 	.word	0x900199ac
90011ed4:	90019464 	.word	0x90019464

90011ed8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
90011ed8:	b5b0      	push	{r4, r5, r7, lr}
90011eda:	b08c      	sub	sp, #48	; 0x30
90011edc:	af04      	add	r7, sp, #16
90011ede:	60f8      	str	r0, [r7, #12]
90011ee0:	60b9      	str	r1, [r7, #8]
90011ee2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
90011ee4:	68fb      	ldr	r3, [r7, #12]
90011ee6:	2b00      	cmp	r3, #0
90011ee8:	d106      	bne.n	90011ef8 <tcp_output_segment+0x20>
90011eea:	4b63      	ldr	r3, [pc, #396]	; (90012078 <tcp_output_segment+0x1a0>)
90011eec:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
90011ef0:	4962      	ldr	r1, [pc, #392]	; (9001207c <tcp_output_segment+0x1a4>)
90011ef2:	4863      	ldr	r0, [pc, #396]	; (90012080 <tcp_output_segment+0x1a8>)
90011ef4:	f003 fe7e 	bl	90015bf4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
90011ef8:	68bb      	ldr	r3, [r7, #8]
90011efa:	2b00      	cmp	r3, #0
90011efc:	d106      	bne.n	90011f0c <tcp_output_segment+0x34>
90011efe:	4b5e      	ldr	r3, [pc, #376]	; (90012078 <tcp_output_segment+0x1a0>)
90011f00:	f240 52b9 	movw	r2, #1465	; 0x5b9
90011f04:	495f      	ldr	r1, [pc, #380]	; (90012084 <tcp_output_segment+0x1ac>)
90011f06:	485e      	ldr	r0, [pc, #376]	; (90012080 <tcp_output_segment+0x1a8>)
90011f08:	f003 fe74 	bl	90015bf4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
90011f0c:	687b      	ldr	r3, [r7, #4]
90011f0e:	2b00      	cmp	r3, #0
90011f10:	d106      	bne.n	90011f20 <tcp_output_segment+0x48>
90011f12:	4b59      	ldr	r3, [pc, #356]	; (90012078 <tcp_output_segment+0x1a0>)
90011f14:	f240 52ba 	movw	r2, #1466	; 0x5ba
90011f18:	495b      	ldr	r1, [pc, #364]	; (90012088 <tcp_output_segment+0x1b0>)
90011f1a:	4859      	ldr	r0, [pc, #356]	; (90012080 <tcp_output_segment+0x1a8>)
90011f1c:	f003 fe6a 	bl	90015bf4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
90011f20:	68f8      	ldr	r0, [r7, #12]
90011f22:	f7ff ffb9 	bl	90011e98 <tcp_output_segment_busy>
90011f26:	4603      	mov	r3, r0
90011f28:	2b00      	cmp	r3, #0
90011f2a:	d001      	beq.n	90011f30 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
90011f2c:	2300      	movs	r3, #0
90011f2e:	e09f      	b.n	90012070 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
90011f30:	68bb      	ldr	r3, [r7, #8]
90011f32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90011f34:	68fb      	ldr	r3, [r7, #12]
90011f36:	68dc      	ldr	r4, [r3, #12]
90011f38:	4610      	mov	r0, r2
90011f3a:	f7f8 fd3c 	bl	9000a9b6 <lwip_htonl>
90011f3e:	4603      	mov	r3, r0
90011f40:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
90011f42:	68bb      	ldr	r3, [r7, #8]
90011f44:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
90011f46:	68fb      	ldr	r3, [r7, #12]
90011f48:	68dc      	ldr	r4, [r3, #12]
90011f4a:	4610      	mov	r0, r2
90011f4c:	f7f8 fd1e 	bl	9000a98c <lwip_htons>
90011f50:	4603      	mov	r3, r0
90011f52:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
90011f54:	68bb      	ldr	r3, [r7, #8]
90011f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90011f58:	68ba      	ldr	r2, [r7, #8]
90011f5a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
90011f5c:	441a      	add	r2, r3
90011f5e:	68bb      	ldr	r3, [r7, #8]
90011f60:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
90011f62:	68fb      	ldr	r3, [r7, #12]
90011f64:	68db      	ldr	r3, [r3, #12]
90011f66:	3314      	adds	r3, #20
90011f68:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
90011f6a:	68fb      	ldr	r3, [r7, #12]
90011f6c:	7a9b      	ldrb	r3, [r3, #10]
90011f6e:	f003 0301 	and.w	r3, r3, #1
90011f72:	2b00      	cmp	r3, #0
90011f74:	d015      	beq.n	90011fa2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
90011f76:	68bb      	ldr	r3, [r7, #8]
90011f78:	3304      	adds	r3, #4
90011f7a:	461a      	mov	r2, r3
90011f7c:	6879      	ldr	r1, [r7, #4]
90011f7e:	f44f 7006 	mov.w	r0, #536	; 0x218
90011f82:	f7fc fa33 	bl	9000e3ec <tcp_eff_send_mss_netif>
90011f86:	4603      	mov	r3, r0
90011f88:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
90011f8a:	8b7b      	ldrh	r3, [r7, #26]
90011f8c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
90011f90:	4618      	mov	r0, r3
90011f92:	f7f8 fd10 	bl	9000a9b6 <lwip_htonl>
90011f96:	4602      	mov	r2, r0
90011f98:	69fb      	ldr	r3, [r7, #28]
90011f9a:	601a      	str	r2, [r3, #0]
    opts += 1;
90011f9c:	69fb      	ldr	r3, [r7, #28]
90011f9e:	3304      	adds	r3, #4
90011fa0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
90011fa2:	68bb      	ldr	r3, [r7, #8]
90011fa4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
90011fa8:	2b00      	cmp	r3, #0
90011faa:	da02      	bge.n	90011fb2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
90011fac:	68bb      	ldr	r3, [r7, #8]
90011fae:	2200      	movs	r2, #0
90011fb0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
90011fb2:	68bb      	ldr	r3, [r7, #8]
90011fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90011fb6:	2b00      	cmp	r3, #0
90011fb8:	d10c      	bne.n	90011fd4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
90011fba:	4b34      	ldr	r3, [pc, #208]	; (9001208c <tcp_output_segment+0x1b4>)
90011fbc:	681a      	ldr	r2, [r3, #0]
90011fbe:	68bb      	ldr	r3, [r7, #8]
90011fc0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
90011fc2:	68fb      	ldr	r3, [r7, #12]
90011fc4:	68db      	ldr	r3, [r3, #12]
90011fc6:	685b      	ldr	r3, [r3, #4]
90011fc8:	4618      	mov	r0, r3
90011fca:	f7f8 fcf4 	bl	9000a9b6 <lwip_htonl>
90011fce:	4602      	mov	r2, r0
90011fd0:	68bb      	ldr	r3, [r7, #8]
90011fd2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
90011fd4:	68fb      	ldr	r3, [r7, #12]
90011fd6:	68da      	ldr	r2, [r3, #12]
90011fd8:	68fb      	ldr	r3, [r7, #12]
90011fda:	685b      	ldr	r3, [r3, #4]
90011fdc:	685b      	ldr	r3, [r3, #4]
90011fde:	1ad3      	subs	r3, r2, r3
90011fe0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
90011fe2:	68fb      	ldr	r3, [r7, #12]
90011fe4:	685b      	ldr	r3, [r3, #4]
90011fe6:	8959      	ldrh	r1, [r3, #10]
90011fe8:	68fb      	ldr	r3, [r7, #12]
90011fea:	685b      	ldr	r3, [r3, #4]
90011fec:	8b3a      	ldrh	r2, [r7, #24]
90011fee:	1a8a      	subs	r2, r1, r2
90011ff0:	b292      	uxth	r2, r2
90011ff2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
90011ff4:	68fb      	ldr	r3, [r7, #12]
90011ff6:	685b      	ldr	r3, [r3, #4]
90011ff8:	8919      	ldrh	r1, [r3, #8]
90011ffa:	68fb      	ldr	r3, [r7, #12]
90011ffc:	685b      	ldr	r3, [r3, #4]
90011ffe:	8b3a      	ldrh	r2, [r7, #24]
90012000:	1a8a      	subs	r2, r1, r2
90012002:	b292      	uxth	r2, r2
90012004:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
90012006:	68fb      	ldr	r3, [r7, #12]
90012008:	685b      	ldr	r3, [r3, #4]
9001200a:	68fa      	ldr	r2, [r7, #12]
9001200c:	68d2      	ldr	r2, [r2, #12]
9001200e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
90012010:	68fb      	ldr	r3, [r7, #12]
90012012:	68db      	ldr	r3, [r3, #12]
90012014:	2200      	movs	r2, #0
90012016:	741a      	strb	r2, [r3, #16]
90012018:	2200      	movs	r2, #0
9001201a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
9001201c:	68fb      	ldr	r3, [r7, #12]
9001201e:	68db      	ldr	r3, [r3, #12]
90012020:	f103 0214 	add.w	r2, r3, #20
90012024:	68fb      	ldr	r3, [r7, #12]
90012026:	7a9b      	ldrb	r3, [r3, #10]
90012028:	009b      	lsls	r3, r3, #2
9001202a:	f003 0304 	and.w	r3, r3, #4
9001202e:	4413      	add	r3, r2
90012030:	69fa      	ldr	r2, [r7, #28]
90012032:	429a      	cmp	r2, r3
90012034:	d006      	beq.n	90012044 <tcp_output_segment+0x16c>
90012036:	4b10      	ldr	r3, [pc, #64]	; (90012078 <tcp_output_segment+0x1a0>)
90012038:	f240 621c 	movw	r2, #1564	; 0x61c
9001203c:	4914      	ldr	r1, [pc, #80]	; (90012090 <tcp_output_segment+0x1b8>)
9001203e:	4810      	ldr	r0, [pc, #64]	; (90012080 <tcp_output_segment+0x1a8>)
90012040:	f003 fdd8 	bl	90015bf4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
90012044:	68fb      	ldr	r3, [r7, #12]
90012046:	6858      	ldr	r0, [r3, #4]
90012048:	68b9      	ldr	r1, [r7, #8]
9001204a:	68bb      	ldr	r3, [r7, #8]
9001204c:	1d1c      	adds	r4, r3, #4
9001204e:	68bb      	ldr	r3, [r7, #8]
90012050:	7add      	ldrb	r5, [r3, #11]
90012052:	68bb      	ldr	r3, [r7, #8]
90012054:	7a9b      	ldrb	r3, [r3, #10]
90012056:	687a      	ldr	r2, [r7, #4]
90012058:	9202      	str	r2, [sp, #8]
9001205a:	2206      	movs	r2, #6
9001205c:	9201      	str	r2, [sp, #4]
9001205e:	9300      	str	r3, [sp, #0]
90012060:	462b      	mov	r3, r5
90012062:	4622      	mov	r2, r4
90012064:	f002 fa8c 	bl	90014580 <ip4_output_if>
90012068:	4603      	mov	r3, r0
9001206a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
9001206c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
90012070:	4618      	mov	r0, r3
90012072:	3720      	adds	r7, #32
90012074:	46bd      	mov	sp, r7
90012076:	bdb0      	pop	{r4, r5, r7, pc}
90012078:	90019410 	.word	0x90019410
9001207c:	900199d4 	.word	0x900199d4
90012080:	90019464 	.word	0x90019464
90012084:	900199f4 	.word	0x900199f4
90012088:	90019a14 	.word	0x90019a14
9001208c:	2401f3a4 	.word	0x2401f3a4
90012090:	90019a38 	.word	0x90019a38

90012094 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
90012094:	b5b0      	push	{r4, r5, r7, lr}
90012096:	b084      	sub	sp, #16
90012098:	af00      	add	r7, sp, #0
9001209a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
9001209c:	687b      	ldr	r3, [r7, #4]
9001209e:	2b00      	cmp	r3, #0
900120a0:	d106      	bne.n	900120b0 <tcp_rexmit_rto_prepare+0x1c>
900120a2:	4b31      	ldr	r3, [pc, #196]	; (90012168 <tcp_rexmit_rto_prepare+0xd4>)
900120a4:	f240 6263 	movw	r2, #1635	; 0x663
900120a8:	4930      	ldr	r1, [pc, #192]	; (9001216c <tcp_rexmit_rto_prepare+0xd8>)
900120aa:	4831      	ldr	r0, [pc, #196]	; (90012170 <tcp_rexmit_rto_prepare+0xdc>)
900120ac:	f003 fda2 	bl	90015bf4 <iprintf>

  if (pcb->unacked == NULL) {
900120b0:	687b      	ldr	r3, [r7, #4]
900120b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900120b4:	2b00      	cmp	r3, #0
900120b6:	d102      	bne.n	900120be <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
900120b8:	f06f 0305 	mvn.w	r3, #5
900120bc:	e050      	b.n	90012160 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
900120be:	687b      	ldr	r3, [r7, #4]
900120c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900120c2:	60fb      	str	r3, [r7, #12]
900120c4:	e00b      	b.n	900120de <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
900120c6:	68f8      	ldr	r0, [r7, #12]
900120c8:	f7ff fee6 	bl	90011e98 <tcp_output_segment_busy>
900120cc:	4603      	mov	r3, r0
900120ce:	2b00      	cmp	r3, #0
900120d0:	d002      	beq.n	900120d8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
900120d2:	f06f 0305 	mvn.w	r3, #5
900120d6:	e043      	b.n	90012160 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
900120d8:	68fb      	ldr	r3, [r7, #12]
900120da:	681b      	ldr	r3, [r3, #0]
900120dc:	60fb      	str	r3, [r7, #12]
900120de:	68fb      	ldr	r3, [r7, #12]
900120e0:	681b      	ldr	r3, [r3, #0]
900120e2:	2b00      	cmp	r3, #0
900120e4:	d1ef      	bne.n	900120c6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
900120e6:	68f8      	ldr	r0, [r7, #12]
900120e8:	f7ff fed6 	bl	90011e98 <tcp_output_segment_busy>
900120ec:	4603      	mov	r3, r0
900120ee:	2b00      	cmp	r3, #0
900120f0:	d002      	beq.n	900120f8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
900120f2:	f06f 0305 	mvn.w	r3, #5
900120f6:	e033      	b.n	90012160 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
900120f8:	687b      	ldr	r3, [r7, #4]
900120fa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
900120fc:	68fb      	ldr	r3, [r7, #12]
900120fe:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
90012100:	687b      	ldr	r3, [r7, #4]
90012102:	6f1a      	ldr	r2, [r3, #112]	; 0x70
90012104:	687b      	ldr	r3, [r7, #4]
90012106:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
90012108:	687b      	ldr	r3, [r7, #4]
9001210a:	2200      	movs	r2, #0
9001210c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
9001210e:	687b      	ldr	r3, [r7, #4]
90012110:	8b5b      	ldrh	r3, [r3, #26]
90012112:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
90012116:	b29a      	uxth	r2, r3
90012118:	687b      	ldr	r3, [r7, #4]
9001211a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
9001211c:	68fb      	ldr	r3, [r7, #12]
9001211e:	68db      	ldr	r3, [r3, #12]
90012120:	685b      	ldr	r3, [r3, #4]
90012122:	4618      	mov	r0, r3
90012124:	f7f8 fc47 	bl	9000a9b6 <lwip_htonl>
90012128:	4604      	mov	r4, r0
9001212a:	68fb      	ldr	r3, [r7, #12]
9001212c:	891b      	ldrh	r3, [r3, #8]
9001212e:	461d      	mov	r5, r3
90012130:	68fb      	ldr	r3, [r7, #12]
90012132:	68db      	ldr	r3, [r3, #12]
90012134:	899b      	ldrh	r3, [r3, #12]
90012136:	b29b      	uxth	r3, r3
90012138:	4618      	mov	r0, r3
9001213a:	f7f8 fc27 	bl	9000a98c <lwip_htons>
9001213e:	4603      	mov	r3, r0
90012140:	b2db      	uxtb	r3, r3
90012142:	f003 0303 	and.w	r3, r3, #3
90012146:	2b00      	cmp	r3, #0
90012148:	d001      	beq.n	9001214e <tcp_rexmit_rto_prepare+0xba>
9001214a:	2301      	movs	r3, #1
9001214c:	e000      	b.n	90012150 <tcp_rexmit_rto_prepare+0xbc>
9001214e:	2300      	movs	r3, #0
90012150:	442b      	add	r3, r5
90012152:	18e2      	adds	r2, r4, r3
90012154:	687b      	ldr	r3, [r7, #4]
90012156:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
90012158:	687b      	ldr	r3, [r7, #4]
9001215a:	2200      	movs	r2, #0
9001215c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
9001215e:	2300      	movs	r3, #0
}
90012160:	4618      	mov	r0, r3
90012162:	3710      	adds	r7, #16
90012164:	46bd      	mov	sp, r7
90012166:	bdb0      	pop	{r4, r5, r7, pc}
90012168:	90019410 	.word	0x90019410
9001216c:	90019a4c 	.word	0x90019a4c
90012170:	90019464 	.word	0x90019464

90012174 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
90012174:	b580      	push	{r7, lr}
90012176:	b082      	sub	sp, #8
90012178:	af00      	add	r7, sp, #0
9001217a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
9001217c:	687b      	ldr	r3, [r7, #4]
9001217e:	2b00      	cmp	r3, #0
90012180:	d106      	bne.n	90012190 <tcp_rexmit_rto_commit+0x1c>
90012182:	4b0d      	ldr	r3, [pc, #52]	; (900121b8 <tcp_rexmit_rto_commit+0x44>)
90012184:	f44f 62d3 	mov.w	r2, #1688	; 0x698
90012188:	490c      	ldr	r1, [pc, #48]	; (900121bc <tcp_rexmit_rto_commit+0x48>)
9001218a:	480d      	ldr	r0, [pc, #52]	; (900121c0 <tcp_rexmit_rto_commit+0x4c>)
9001218c:	f003 fd32 	bl	90015bf4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
90012190:	687b      	ldr	r3, [r7, #4]
90012192:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
90012196:	2bff      	cmp	r3, #255	; 0xff
90012198:	d007      	beq.n	900121aa <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
9001219a:	687b      	ldr	r3, [r7, #4]
9001219c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
900121a0:	3301      	adds	r3, #1
900121a2:	b2da      	uxtb	r2, r3
900121a4:	687b      	ldr	r3, [r7, #4]
900121a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
900121aa:	6878      	ldr	r0, [r7, #4]
900121ac:	f7ff fc80 	bl	90011ab0 <tcp_output>
}
900121b0:	bf00      	nop
900121b2:	3708      	adds	r7, #8
900121b4:	46bd      	mov	sp, r7
900121b6:	bd80      	pop	{r7, pc}
900121b8:	90019410 	.word	0x90019410
900121bc:	90019a70 	.word	0x90019a70
900121c0:	90019464 	.word	0x90019464

900121c4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
900121c4:	b580      	push	{r7, lr}
900121c6:	b082      	sub	sp, #8
900121c8:	af00      	add	r7, sp, #0
900121ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
900121cc:	687b      	ldr	r3, [r7, #4]
900121ce:	2b00      	cmp	r3, #0
900121d0:	d106      	bne.n	900121e0 <tcp_rexmit_rto+0x1c>
900121d2:	4b0a      	ldr	r3, [pc, #40]	; (900121fc <tcp_rexmit_rto+0x38>)
900121d4:	f240 62ad 	movw	r2, #1709	; 0x6ad
900121d8:	4909      	ldr	r1, [pc, #36]	; (90012200 <tcp_rexmit_rto+0x3c>)
900121da:	480a      	ldr	r0, [pc, #40]	; (90012204 <tcp_rexmit_rto+0x40>)
900121dc:	f003 fd0a 	bl	90015bf4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
900121e0:	6878      	ldr	r0, [r7, #4]
900121e2:	f7ff ff57 	bl	90012094 <tcp_rexmit_rto_prepare>
900121e6:	4603      	mov	r3, r0
900121e8:	2b00      	cmp	r3, #0
900121ea:	d102      	bne.n	900121f2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
900121ec:	6878      	ldr	r0, [r7, #4]
900121ee:	f7ff ffc1 	bl	90012174 <tcp_rexmit_rto_commit>
  }
}
900121f2:	bf00      	nop
900121f4:	3708      	adds	r7, #8
900121f6:	46bd      	mov	sp, r7
900121f8:	bd80      	pop	{r7, pc}
900121fa:	bf00      	nop
900121fc:	90019410 	.word	0x90019410
90012200:	90019a94 	.word	0x90019a94
90012204:	90019464 	.word	0x90019464

90012208 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
90012208:	b590      	push	{r4, r7, lr}
9001220a:	b085      	sub	sp, #20
9001220c:	af00      	add	r7, sp, #0
9001220e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
90012210:	687b      	ldr	r3, [r7, #4]
90012212:	2b00      	cmp	r3, #0
90012214:	d106      	bne.n	90012224 <tcp_rexmit+0x1c>
90012216:	4b2f      	ldr	r3, [pc, #188]	; (900122d4 <tcp_rexmit+0xcc>)
90012218:	f240 62c1 	movw	r2, #1729	; 0x6c1
9001221c:	492e      	ldr	r1, [pc, #184]	; (900122d8 <tcp_rexmit+0xd0>)
9001221e:	482f      	ldr	r0, [pc, #188]	; (900122dc <tcp_rexmit+0xd4>)
90012220:	f003 fce8 	bl	90015bf4 <iprintf>

  if (pcb->unacked == NULL) {
90012224:	687b      	ldr	r3, [r7, #4]
90012226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90012228:	2b00      	cmp	r3, #0
9001222a:	d102      	bne.n	90012232 <tcp_rexmit+0x2a>
    return ERR_VAL;
9001222c:	f06f 0305 	mvn.w	r3, #5
90012230:	e04c      	b.n	900122cc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
90012232:	687b      	ldr	r3, [r7, #4]
90012234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90012236:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
90012238:	68b8      	ldr	r0, [r7, #8]
9001223a:	f7ff fe2d 	bl	90011e98 <tcp_output_segment_busy>
9001223e:	4603      	mov	r3, r0
90012240:	2b00      	cmp	r3, #0
90012242:	d002      	beq.n	9001224a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
90012244:	f06f 0305 	mvn.w	r3, #5
90012248:	e040      	b.n	900122cc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
9001224a:	68bb      	ldr	r3, [r7, #8]
9001224c:	681a      	ldr	r2, [r3, #0]
9001224e:	687b      	ldr	r3, [r7, #4]
90012250:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
90012252:	687b      	ldr	r3, [r7, #4]
90012254:	336c      	adds	r3, #108	; 0x6c
90012256:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
90012258:	e002      	b.n	90012260 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
9001225a:	68fb      	ldr	r3, [r7, #12]
9001225c:	681b      	ldr	r3, [r3, #0]
9001225e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
90012260:	68fb      	ldr	r3, [r7, #12]
90012262:	681b      	ldr	r3, [r3, #0]
90012264:	2b00      	cmp	r3, #0
90012266:	d011      	beq.n	9001228c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
90012268:	68fb      	ldr	r3, [r7, #12]
9001226a:	681b      	ldr	r3, [r3, #0]
9001226c:	68db      	ldr	r3, [r3, #12]
9001226e:	685b      	ldr	r3, [r3, #4]
90012270:	4618      	mov	r0, r3
90012272:	f7f8 fba0 	bl	9000a9b6 <lwip_htonl>
90012276:	4604      	mov	r4, r0
90012278:	68bb      	ldr	r3, [r7, #8]
9001227a:	68db      	ldr	r3, [r3, #12]
9001227c:	685b      	ldr	r3, [r3, #4]
9001227e:	4618      	mov	r0, r3
90012280:	f7f8 fb99 	bl	9000a9b6 <lwip_htonl>
90012284:	4603      	mov	r3, r0
90012286:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
90012288:	2b00      	cmp	r3, #0
9001228a:	dbe6      	blt.n	9001225a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
9001228c:	68fb      	ldr	r3, [r7, #12]
9001228e:	681a      	ldr	r2, [r3, #0]
90012290:	68bb      	ldr	r3, [r7, #8]
90012292:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
90012294:	68fb      	ldr	r3, [r7, #12]
90012296:	68ba      	ldr	r2, [r7, #8]
90012298:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
9001229a:	68bb      	ldr	r3, [r7, #8]
9001229c:	681b      	ldr	r3, [r3, #0]
9001229e:	2b00      	cmp	r3, #0
900122a0:	d103      	bne.n	900122aa <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
900122a2:	687b      	ldr	r3, [r7, #4]
900122a4:	2200      	movs	r2, #0
900122a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
900122aa:	687b      	ldr	r3, [r7, #4]
900122ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
900122b0:	2bff      	cmp	r3, #255	; 0xff
900122b2:	d007      	beq.n	900122c4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
900122b4:	687b      	ldr	r3, [r7, #4]
900122b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
900122ba:	3301      	adds	r3, #1
900122bc:	b2da      	uxtb	r2, r3
900122be:	687b      	ldr	r3, [r7, #4]
900122c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
900122c4:	687b      	ldr	r3, [r7, #4]
900122c6:	2200      	movs	r2, #0
900122c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
900122ca:	2300      	movs	r3, #0
}
900122cc:	4618      	mov	r0, r3
900122ce:	3714      	adds	r7, #20
900122d0:	46bd      	mov	sp, r7
900122d2:	bd90      	pop	{r4, r7, pc}
900122d4:	90019410 	.word	0x90019410
900122d8:	90019ab0 	.word	0x90019ab0
900122dc:	90019464 	.word	0x90019464

900122e0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
900122e0:	b580      	push	{r7, lr}
900122e2:	b082      	sub	sp, #8
900122e4:	af00      	add	r7, sp, #0
900122e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
900122e8:	687b      	ldr	r3, [r7, #4]
900122ea:	2b00      	cmp	r3, #0
900122ec:	d106      	bne.n	900122fc <tcp_rexmit_fast+0x1c>
900122ee:	4b2a      	ldr	r3, [pc, #168]	; (90012398 <tcp_rexmit_fast+0xb8>)
900122f0:	f240 62f9 	movw	r2, #1785	; 0x6f9
900122f4:	4929      	ldr	r1, [pc, #164]	; (9001239c <tcp_rexmit_fast+0xbc>)
900122f6:	482a      	ldr	r0, [pc, #168]	; (900123a0 <tcp_rexmit_fast+0xc0>)
900122f8:	f003 fc7c 	bl	90015bf4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
900122fc:	687b      	ldr	r3, [r7, #4]
900122fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90012300:	2b00      	cmp	r3, #0
90012302:	d045      	beq.n	90012390 <tcp_rexmit_fast+0xb0>
90012304:	687b      	ldr	r3, [r7, #4]
90012306:	8b5b      	ldrh	r3, [r3, #26]
90012308:	f003 0304 	and.w	r3, r3, #4
9001230c:	2b00      	cmp	r3, #0
9001230e:	d13f      	bne.n	90012390 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
90012310:	6878      	ldr	r0, [r7, #4]
90012312:	f7ff ff79 	bl	90012208 <tcp_rexmit>
90012316:	4603      	mov	r3, r0
90012318:	2b00      	cmp	r3, #0
9001231a:	d139      	bne.n	90012390 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
9001231c:	687b      	ldr	r3, [r7, #4]
9001231e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
90012322:	687b      	ldr	r3, [r7, #4]
90012324:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
90012328:	4293      	cmp	r3, r2
9001232a:	bf28      	it	cs
9001232c:	4613      	movcs	r3, r2
9001232e:	b29b      	uxth	r3, r3
90012330:	2b00      	cmp	r3, #0
90012332:	da00      	bge.n	90012336 <tcp_rexmit_fast+0x56>
90012334:	3301      	adds	r3, #1
90012336:	105b      	asrs	r3, r3, #1
90012338:	b29a      	uxth	r2, r3
9001233a:	687b      	ldr	r3, [r7, #4]
9001233c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
90012340:	687b      	ldr	r3, [r7, #4]
90012342:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
90012346:	461a      	mov	r2, r3
90012348:	687b      	ldr	r3, [r7, #4]
9001234a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9001234c:	005b      	lsls	r3, r3, #1
9001234e:	429a      	cmp	r2, r3
90012350:	d206      	bcs.n	90012360 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
90012352:	687b      	ldr	r3, [r7, #4]
90012354:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
90012356:	005b      	lsls	r3, r3, #1
90012358:	b29a      	uxth	r2, r3
9001235a:	687b      	ldr	r3, [r7, #4]
9001235c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
90012360:	687b      	ldr	r3, [r7, #4]
90012362:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
90012366:	687b      	ldr	r3, [r7, #4]
90012368:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
9001236a:	4619      	mov	r1, r3
9001236c:	0049      	lsls	r1, r1, #1
9001236e:	440b      	add	r3, r1
90012370:	b29b      	uxth	r3, r3
90012372:	4413      	add	r3, r2
90012374:	b29a      	uxth	r2, r3
90012376:	687b      	ldr	r3, [r7, #4]
90012378:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
9001237c:	687b      	ldr	r3, [r7, #4]
9001237e:	8b5b      	ldrh	r3, [r3, #26]
90012380:	f043 0304 	orr.w	r3, r3, #4
90012384:	b29a      	uxth	r2, r3
90012386:	687b      	ldr	r3, [r7, #4]
90012388:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
9001238a:	687b      	ldr	r3, [r7, #4]
9001238c:	2200      	movs	r2, #0
9001238e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
90012390:	bf00      	nop
90012392:	3708      	adds	r7, #8
90012394:	46bd      	mov	sp, r7
90012396:	bd80      	pop	{r7, pc}
90012398:	90019410 	.word	0x90019410
9001239c:	90019ac8 	.word	0x90019ac8
900123a0:	90019464 	.word	0x90019464

900123a4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
900123a4:	b580      	push	{r7, lr}
900123a6:	b086      	sub	sp, #24
900123a8:	af00      	add	r7, sp, #0
900123aa:	60f8      	str	r0, [r7, #12]
900123ac:	607b      	str	r3, [r7, #4]
900123ae:	460b      	mov	r3, r1
900123b0:	817b      	strh	r3, [r7, #10]
900123b2:	4613      	mov	r3, r2
900123b4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
900123b6:	897a      	ldrh	r2, [r7, #10]
900123b8:	893b      	ldrh	r3, [r7, #8]
900123ba:	4413      	add	r3, r2
900123bc:	b29b      	uxth	r3, r3
900123be:	3314      	adds	r3, #20
900123c0:	b29b      	uxth	r3, r3
900123c2:	f44f 7220 	mov.w	r2, #640	; 0x280
900123c6:	4619      	mov	r1, r3
900123c8:	2022      	movs	r0, #34	; 0x22
900123ca:	f7f9 fd0f 	bl	9000bdec <pbuf_alloc>
900123ce:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
900123d0:	697b      	ldr	r3, [r7, #20]
900123d2:	2b00      	cmp	r3, #0
900123d4:	d04d      	beq.n	90012472 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
900123d6:	897b      	ldrh	r3, [r7, #10]
900123d8:	3313      	adds	r3, #19
900123da:	697a      	ldr	r2, [r7, #20]
900123dc:	8952      	ldrh	r2, [r2, #10]
900123de:	4293      	cmp	r3, r2
900123e0:	db06      	blt.n	900123f0 <tcp_output_alloc_header_common+0x4c>
900123e2:	4b26      	ldr	r3, [pc, #152]	; (9001247c <tcp_output_alloc_header_common+0xd8>)
900123e4:	f240 7223 	movw	r2, #1827	; 0x723
900123e8:	4925      	ldr	r1, [pc, #148]	; (90012480 <tcp_output_alloc_header_common+0xdc>)
900123ea:	4826      	ldr	r0, [pc, #152]	; (90012484 <tcp_output_alloc_header_common+0xe0>)
900123ec:	f003 fc02 	bl	90015bf4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
900123f0:	697b      	ldr	r3, [r7, #20]
900123f2:	685b      	ldr	r3, [r3, #4]
900123f4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
900123f6:	8c3b      	ldrh	r3, [r7, #32]
900123f8:	4618      	mov	r0, r3
900123fa:	f7f8 fac7 	bl	9000a98c <lwip_htons>
900123fe:	4603      	mov	r3, r0
90012400:	461a      	mov	r2, r3
90012402:	693b      	ldr	r3, [r7, #16]
90012404:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
90012406:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
90012408:	4618      	mov	r0, r3
9001240a:	f7f8 fabf 	bl	9000a98c <lwip_htons>
9001240e:	4603      	mov	r3, r0
90012410:	461a      	mov	r2, r3
90012412:	693b      	ldr	r3, [r7, #16]
90012414:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
90012416:	693b      	ldr	r3, [r7, #16]
90012418:	687a      	ldr	r2, [r7, #4]
9001241a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
9001241c:	68f8      	ldr	r0, [r7, #12]
9001241e:	f7f8 faca 	bl	9000a9b6 <lwip_htonl>
90012422:	4602      	mov	r2, r0
90012424:	693b      	ldr	r3, [r7, #16]
90012426:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
90012428:	897b      	ldrh	r3, [r7, #10]
9001242a:	089b      	lsrs	r3, r3, #2
9001242c:	b29b      	uxth	r3, r3
9001242e:	3305      	adds	r3, #5
90012430:	b29b      	uxth	r3, r3
90012432:	031b      	lsls	r3, r3, #12
90012434:	b29a      	uxth	r2, r3
90012436:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
9001243a:	b29b      	uxth	r3, r3
9001243c:	4313      	orrs	r3, r2
9001243e:	b29b      	uxth	r3, r3
90012440:	4618      	mov	r0, r3
90012442:	f7f8 faa3 	bl	9000a98c <lwip_htons>
90012446:	4603      	mov	r3, r0
90012448:	461a      	mov	r2, r3
9001244a:	693b      	ldr	r3, [r7, #16]
9001244c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
9001244e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
90012450:	4618      	mov	r0, r3
90012452:	f7f8 fa9b 	bl	9000a98c <lwip_htons>
90012456:	4603      	mov	r3, r0
90012458:	461a      	mov	r2, r3
9001245a:	693b      	ldr	r3, [r7, #16]
9001245c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
9001245e:	693b      	ldr	r3, [r7, #16]
90012460:	2200      	movs	r2, #0
90012462:	741a      	strb	r2, [r3, #16]
90012464:	2200      	movs	r2, #0
90012466:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
90012468:	693b      	ldr	r3, [r7, #16]
9001246a:	2200      	movs	r2, #0
9001246c:	749a      	strb	r2, [r3, #18]
9001246e:	2200      	movs	r2, #0
90012470:	74da      	strb	r2, [r3, #19]
  }
  return p;
90012472:	697b      	ldr	r3, [r7, #20]
}
90012474:	4618      	mov	r0, r3
90012476:	3718      	adds	r7, #24
90012478:	46bd      	mov	sp, r7
9001247a:	bd80      	pop	{r7, pc}
9001247c:	90019410 	.word	0x90019410
90012480:	90019ae8 	.word	0x90019ae8
90012484:	90019464 	.word	0x90019464

90012488 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
90012488:	b5b0      	push	{r4, r5, r7, lr}
9001248a:	b08a      	sub	sp, #40	; 0x28
9001248c:	af04      	add	r7, sp, #16
9001248e:	60f8      	str	r0, [r7, #12]
90012490:	607b      	str	r3, [r7, #4]
90012492:	460b      	mov	r3, r1
90012494:	817b      	strh	r3, [r7, #10]
90012496:	4613      	mov	r3, r2
90012498:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
9001249a:	68fb      	ldr	r3, [r7, #12]
9001249c:	2b00      	cmp	r3, #0
9001249e:	d106      	bne.n	900124ae <tcp_output_alloc_header+0x26>
900124a0:	4b15      	ldr	r3, [pc, #84]	; (900124f8 <tcp_output_alloc_header+0x70>)
900124a2:	f240 7242 	movw	r2, #1858	; 0x742
900124a6:	4915      	ldr	r1, [pc, #84]	; (900124fc <tcp_output_alloc_header+0x74>)
900124a8:	4815      	ldr	r0, [pc, #84]	; (90012500 <tcp_output_alloc_header+0x78>)
900124aa:	f003 fba3 	bl	90015bf4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
900124ae:	68fb      	ldr	r3, [r7, #12]
900124b0:	6a58      	ldr	r0, [r3, #36]	; 0x24
900124b2:	68fb      	ldr	r3, [r7, #12]
900124b4:	8adb      	ldrh	r3, [r3, #22]
900124b6:	68fa      	ldr	r2, [r7, #12]
900124b8:	8b12      	ldrh	r2, [r2, #24]
900124ba:	68f9      	ldr	r1, [r7, #12]
900124bc:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
900124be:	893d      	ldrh	r5, [r7, #8]
900124c0:	897c      	ldrh	r4, [r7, #10]
900124c2:	9103      	str	r1, [sp, #12]
900124c4:	2110      	movs	r1, #16
900124c6:	9102      	str	r1, [sp, #8]
900124c8:	9201      	str	r2, [sp, #4]
900124ca:	9300      	str	r3, [sp, #0]
900124cc:	687b      	ldr	r3, [r7, #4]
900124ce:	462a      	mov	r2, r5
900124d0:	4621      	mov	r1, r4
900124d2:	f7ff ff67 	bl	900123a4 <tcp_output_alloc_header_common>
900124d6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
900124d8:	697b      	ldr	r3, [r7, #20]
900124da:	2b00      	cmp	r3, #0
900124dc:	d006      	beq.n	900124ec <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
900124de:	68fb      	ldr	r3, [r7, #12]
900124e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900124e2:	68fa      	ldr	r2, [r7, #12]
900124e4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
900124e6:	441a      	add	r2, r3
900124e8:	68fb      	ldr	r3, [r7, #12]
900124ea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
900124ec:	697b      	ldr	r3, [r7, #20]
}
900124ee:	4618      	mov	r0, r3
900124f0:	3718      	adds	r7, #24
900124f2:	46bd      	mov	sp, r7
900124f4:	bdb0      	pop	{r4, r5, r7, pc}
900124f6:	bf00      	nop
900124f8:	90019410 	.word	0x90019410
900124fc:	90019b18 	.word	0x90019b18
90012500:	90019464 	.word	0x90019464

90012504 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
90012504:	b580      	push	{r7, lr}
90012506:	b088      	sub	sp, #32
90012508:	af00      	add	r7, sp, #0
9001250a:	60f8      	str	r0, [r7, #12]
9001250c:	60b9      	str	r1, [r7, #8]
9001250e:	4611      	mov	r1, r2
90012510:	461a      	mov	r2, r3
90012512:	460b      	mov	r3, r1
90012514:	71fb      	strb	r3, [r7, #7]
90012516:	4613      	mov	r3, r2
90012518:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
9001251a:	2300      	movs	r3, #0
9001251c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
9001251e:	68bb      	ldr	r3, [r7, #8]
90012520:	2b00      	cmp	r3, #0
90012522:	d106      	bne.n	90012532 <tcp_output_fill_options+0x2e>
90012524:	4b13      	ldr	r3, [pc, #76]	; (90012574 <tcp_output_fill_options+0x70>)
90012526:	f240 7256 	movw	r2, #1878	; 0x756
9001252a:	4913      	ldr	r1, [pc, #76]	; (90012578 <tcp_output_fill_options+0x74>)
9001252c:	4813      	ldr	r0, [pc, #76]	; (9001257c <tcp_output_fill_options+0x78>)
9001252e:	f003 fb61 	bl	90015bf4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
90012532:	68bb      	ldr	r3, [r7, #8]
90012534:	685b      	ldr	r3, [r3, #4]
90012536:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
90012538:	69bb      	ldr	r3, [r7, #24]
9001253a:	3314      	adds	r3, #20
9001253c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
9001253e:	69bb      	ldr	r3, [r7, #24]
90012540:	f103 0214 	add.w	r2, r3, #20
90012544:	8bfb      	ldrh	r3, [r7, #30]
90012546:	009b      	lsls	r3, r3, #2
90012548:	4619      	mov	r1, r3
9001254a:	79fb      	ldrb	r3, [r7, #7]
9001254c:	009b      	lsls	r3, r3, #2
9001254e:	f003 0304 	and.w	r3, r3, #4
90012552:	440b      	add	r3, r1
90012554:	4413      	add	r3, r2
90012556:	697a      	ldr	r2, [r7, #20]
90012558:	429a      	cmp	r2, r3
9001255a:	d006      	beq.n	9001256a <tcp_output_fill_options+0x66>
9001255c:	4b05      	ldr	r3, [pc, #20]	; (90012574 <tcp_output_fill_options+0x70>)
9001255e:	f240 7275 	movw	r2, #1909	; 0x775
90012562:	4907      	ldr	r1, [pc, #28]	; (90012580 <tcp_output_fill_options+0x7c>)
90012564:	4805      	ldr	r0, [pc, #20]	; (9001257c <tcp_output_fill_options+0x78>)
90012566:	f003 fb45 	bl	90015bf4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
9001256a:	bf00      	nop
9001256c:	3720      	adds	r7, #32
9001256e:	46bd      	mov	sp, r7
90012570:	bd80      	pop	{r7, pc}
90012572:	bf00      	nop
90012574:	90019410 	.word	0x90019410
90012578:	90019b40 	.word	0x90019b40
9001257c:	90019464 	.word	0x90019464
90012580:	90019a38 	.word	0x90019a38

90012584 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
90012584:	b580      	push	{r7, lr}
90012586:	b08a      	sub	sp, #40	; 0x28
90012588:	af04      	add	r7, sp, #16
9001258a:	60f8      	str	r0, [r7, #12]
9001258c:	60b9      	str	r1, [r7, #8]
9001258e:	607a      	str	r2, [r7, #4]
90012590:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
90012592:	68bb      	ldr	r3, [r7, #8]
90012594:	2b00      	cmp	r3, #0
90012596:	d106      	bne.n	900125a6 <tcp_output_control_segment+0x22>
90012598:	4b1c      	ldr	r3, [pc, #112]	; (9001260c <tcp_output_control_segment+0x88>)
9001259a:	f240 7287 	movw	r2, #1927	; 0x787
9001259e:	491c      	ldr	r1, [pc, #112]	; (90012610 <tcp_output_control_segment+0x8c>)
900125a0:	481c      	ldr	r0, [pc, #112]	; (90012614 <tcp_output_control_segment+0x90>)
900125a2:	f003 fb27 	bl	90015bf4 <iprintf>

  netif = tcp_route(pcb, src, dst);
900125a6:	683a      	ldr	r2, [r7, #0]
900125a8:	6879      	ldr	r1, [r7, #4]
900125aa:	68f8      	ldr	r0, [r7, #12]
900125ac:	f7fe fae8 	bl	90010b80 <tcp_route>
900125b0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
900125b2:	693b      	ldr	r3, [r7, #16]
900125b4:	2b00      	cmp	r3, #0
900125b6:	d102      	bne.n	900125be <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
900125b8:	23fc      	movs	r3, #252	; 0xfc
900125ba:	75fb      	strb	r3, [r7, #23]
900125bc:	e01c      	b.n	900125f8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
900125be:	68fb      	ldr	r3, [r7, #12]
900125c0:	2b00      	cmp	r3, #0
900125c2:	d006      	beq.n	900125d2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
900125c4:	68fb      	ldr	r3, [r7, #12]
900125c6:	7adb      	ldrb	r3, [r3, #11]
900125c8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
900125ca:	68fb      	ldr	r3, [r7, #12]
900125cc:	7a9b      	ldrb	r3, [r3, #10]
900125ce:	757b      	strb	r3, [r7, #21]
900125d0:	e003      	b.n	900125da <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
900125d2:	23ff      	movs	r3, #255	; 0xff
900125d4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
900125d6:	2300      	movs	r3, #0
900125d8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
900125da:	7dba      	ldrb	r2, [r7, #22]
900125dc:	693b      	ldr	r3, [r7, #16]
900125de:	9302      	str	r3, [sp, #8]
900125e0:	2306      	movs	r3, #6
900125e2:	9301      	str	r3, [sp, #4]
900125e4:	7d7b      	ldrb	r3, [r7, #21]
900125e6:	9300      	str	r3, [sp, #0]
900125e8:	4613      	mov	r3, r2
900125ea:	683a      	ldr	r2, [r7, #0]
900125ec:	6879      	ldr	r1, [r7, #4]
900125ee:	68b8      	ldr	r0, [r7, #8]
900125f0:	f001 ffc6 	bl	90014580 <ip4_output_if>
900125f4:	4603      	mov	r3, r0
900125f6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
900125f8:	68b8      	ldr	r0, [r7, #8]
900125fa:	f7f9 fedb 	bl	9000c3b4 <pbuf_free>
  return err;
900125fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
90012602:	4618      	mov	r0, r3
90012604:	3718      	adds	r7, #24
90012606:	46bd      	mov	sp, r7
90012608:	bd80      	pop	{r7, pc}
9001260a:	bf00      	nop
9001260c:	90019410 	.word	0x90019410
90012610:	90019b68 	.word	0x90019b68
90012614:	90019464 	.word	0x90019464

90012618 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
90012618:	b590      	push	{r4, r7, lr}
9001261a:	b08b      	sub	sp, #44	; 0x2c
9001261c:	af04      	add	r7, sp, #16
9001261e:	60f8      	str	r0, [r7, #12]
90012620:	60b9      	str	r1, [r7, #8]
90012622:	607a      	str	r2, [r7, #4]
90012624:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
90012626:	683b      	ldr	r3, [r7, #0]
90012628:	2b00      	cmp	r3, #0
9001262a:	d106      	bne.n	9001263a <tcp_rst+0x22>
9001262c:	4b1f      	ldr	r3, [pc, #124]	; (900126ac <tcp_rst+0x94>)
9001262e:	f240 72c4 	movw	r2, #1988	; 0x7c4
90012632:	491f      	ldr	r1, [pc, #124]	; (900126b0 <tcp_rst+0x98>)
90012634:	481f      	ldr	r0, [pc, #124]	; (900126b4 <tcp_rst+0x9c>)
90012636:	f003 fadd 	bl	90015bf4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
9001263a:	6abb      	ldr	r3, [r7, #40]	; 0x28
9001263c:	2b00      	cmp	r3, #0
9001263e:	d106      	bne.n	9001264e <tcp_rst+0x36>
90012640:	4b1a      	ldr	r3, [pc, #104]	; (900126ac <tcp_rst+0x94>)
90012642:	f240 72c5 	movw	r2, #1989	; 0x7c5
90012646:	491c      	ldr	r1, [pc, #112]	; (900126b8 <tcp_rst+0xa0>)
90012648:	481a      	ldr	r0, [pc, #104]	; (900126b4 <tcp_rst+0x9c>)
9001264a:	f003 fad3 	bl	90015bf4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
9001264e:	2300      	movs	r3, #0
90012650:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
90012652:	f246 0308 	movw	r3, #24584	; 0x6008
90012656:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
90012658:	7dfb      	ldrb	r3, [r7, #23]
9001265a:	b29c      	uxth	r4, r3
9001265c:	68b8      	ldr	r0, [r7, #8]
9001265e:	f7f8 f9aa 	bl	9000a9b6 <lwip_htonl>
90012662:	4602      	mov	r2, r0
90012664:	8abb      	ldrh	r3, [r7, #20]
90012666:	9303      	str	r3, [sp, #12]
90012668:	2314      	movs	r3, #20
9001266a:	9302      	str	r3, [sp, #8]
9001266c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
9001266e:	9301      	str	r3, [sp, #4]
90012670:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
90012672:	9300      	str	r3, [sp, #0]
90012674:	4613      	mov	r3, r2
90012676:	2200      	movs	r2, #0
90012678:	4621      	mov	r1, r4
9001267a:	6878      	ldr	r0, [r7, #4]
9001267c:	f7ff fe92 	bl	900123a4 <tcp_output_alloc_header_common>
90012680:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
90012682:	693b      	ldr	r3, [r7, #16]
90012684:	2b00      	cmp	r3, #0
90012686:	d00c      	beq.n	900126a2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
90012688:	7dfb      	ldrb	r3, [r7, #23]
9001268a:	2200      	movs	r2, #0
9001268c:	6939      	ldr	r1, [r7, #16]
9001268e:	68f8      	ldr	r0, [r7, #12]
90012690:	f7ff ff38 	bl	90012504 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
90012694:	6abb      	ldr	r3, [r7, #40]	; 0x28
90012696:	683a      	ldr	r2, [r7, #0]
90012698:	6939      	ldr	r1, [r7, #16]
9001269a:	68f8      	ldr	r0, [r7, #12]
9001269c:	f7ff ff72 	bl	90012584 <tcp_output_control_segment>
900126a0:	e000      	b.n	900126a4 <tcp_rst+0x8c>
    return;
900126a2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
900126a4:	371c      	adds	r7, #28
900126a6:	46bd      	mov	sp, r7
900126a8:	bd90      	pop	{r4, r7, pc}
900126aa:	bf00      	nop
900126ac:	90019410 	.word	0x90019410
900126b0:	90019b94 	.word	0x90019b94
900126b4:	90019464 	.word	0x90019464
900126b8:	90019bb0 	.word	0x90019bb0

900126bc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
900126bc:	b590      	push	{r4, r7, lr}
900126be:	b087      	sub	sp, #28
900126c0:	af00      	add	r7, sp, #0
900126c2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
900126c4:	2300      	movs	r3, #0
900126c6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
900126c8:	2300      	movs	r3, #0
900126ca:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
900126cc:	687b      	ldr	r3, [r7, #4]
900126ce:	2b00      	cmp	r3, #0
900126d0:	d106      	bne.n	900126e0 <tcp_send_empty_ack+0x24>
900126d2:	4b28      	ldr	r3, [pc, #160]	; (90012774 <tcp_send_empty_ack+0xb8>)
900126d4:	f240 72ea 	movw	r2, #2026	; 0x7ea
900126d8:	4927      	ldr	r1, [pc, #156]	; (90012778 <tcp_send_empty_ack+0xbc>)
900126da:	4828      	ldr	r0, [pc, #160]	; (9001277c <tcp_send_empty_ack+0xc0>)
900126dc:	f003 fa8a 	bl	90015bf4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
900126e0:	7dfb      	ldrb	r3, [r7, #23]
900126e2:	009b      	lsls	r3, r3, #2
900126e4:	b2db      	uxtb	r3, r3
900126e6:	f003 0304 	and.w	r3, r3, #4
900126ea:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
900126ec:	7d7b      	ldrb	r3, [r7, #21]
900126ee:	b29c      	uxth	r4, r3
900126f0:	687b      	ldr	r3, [r7, #4]
900126f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900126f4:	4618      	mov	r0, r3
900126f6:	f7f8 f95e 	bl	9000a9b6 <lwip_htonl>
900126fa:	4603      	mov	r3, r0
900126fc:	2200      	movs	r2, #0
900126fe:	4621      	mov	r1, r4
90012700:	6878      	ldr	r0, [r7, #4]
90012702:	f7ff fec1 	bl	90012488 <tcp_output_alloc_header>
90012706:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
90012708:	693b      	ldr	r3, [r7, #16]
9001270a:	2b00      	cmp	r3, #0
9001270c:	d109      	bne.n	90012722 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
9001270e:	687b      	ldr	r3, [r7, #4]
90012710:	8b5b      	ldrh	r3, [r3, #26]
90012712:	f043 0303 	orr.w	r3, r3, #3
90012716:	b29a      	uxth	r2, r3
90012718:	687b      	ldr	r3, [r7, #4]
9001271a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
9001271c:	f06f 0301 	mvn.w	r3, #1
90012720:	e023      	b.n	9001276a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
90012722:	7dbb      	ldrb	r3, [r7, #22]
90012724:	7dfa      	ldrb	r2, [r7, #23]
90012726:	6939      	ldr	r1, [r7, #16]
90012728:	6878      	ldr	r0, [r7, #4]
9001272a:	f7ff feeb 	bl	90012504 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
9001272e:	687a      	ldr	r2, [r7, #4]
90012730:	687b      	ldr	r3, [r7, #4]
90012732:	3304      	adds	r3, #4
90012734:	6939      	ldr	r1, [r7, #16]
90012736:	6878      	ldr	r0, [r7, #4]
90012738:	f7ff ff24 	bl	90012584 <tcp_output_control_segment>
9001273c:	4603      	mov	r3, r0
9001273e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
90012740:	f997 300f 	ldrsb.w	r3, [r7, #15]
90012744:	2b00      	cmp	r3, #0
90012746:	d007      	beq.n	90012758 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
90012748:	687b      	ldr	r3, [r7, #4]
9001274a:	8b5b      	ldrh	r3, [r3, #26]
9001274c:	f043 0303 	orr.w	r3, r3, #3
90012750:	b29a      	uxth	r2, r3
90012752:	687b      	ldr	r3, [r7, #4]
90012754:	835a      	strh	r2, [r3, #26]
90012756:	e006      	b.n	90012766 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
90012758:	687b      	ldr	r3, [r7, #4]
9001275a:	8b5b      	ldrh	r3, [r3, #26]
9001275c:	f023 0303 	bic.w	r3, r3, #3
90012760:	b29a      	uxth	r2, r3
90012762:	687b      	ldr	r3, [r7, #4]
90012764:	835a      	strh	r2, [r3, #26]
  }

  return err;
90012766:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
9001276a:	4618      	mov	r0, r3
9001276c:	371c      	adds	r7, #28
9001276e:	46bd      	mov	sp, r7
90012770:	bd90      	pop	{r4, r7, pc}
90012772:	bf00      	nop
90012774:	90019410 	.word	0x90019410
90012778:	90019bcc 	.word	0x90019bcc
9001277c:	90019464 	.word	0x90019464

90012780 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
90012780:	b590      	push	{r4, r7, lr}
90012782:	b087      	sub	sp, #28
90012784:	af00      	add	r7, sp, #0
90012786:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
90012788:	2300      	movs	r3, #0
9001278a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
9001278c:	687b      	ldr	r3, [r7, #4]
9001278e:	2b00      	cmp	r3, #0
90012790:	d106      	bne.n	900127a0 <tcp_keepalive+0x20>
90012792:	4b18      	ldr	r3, [pc, #96]	; (900127f4 <tcp_keepalive+0x74>)
90012794:	f640 0224 	movw	r2, #2084	; 0x824
90012798:	4917      	ldr	r1, [pc, #92]	; (900127f8 <tcp_keepalive+0x78>)
9001279a:	4818      	ldr	r0, [pc, #96]	; (900127fc <tcp_keepalive+0x7c>)
9001279c:	f003 fa2a 	bl	90015bf4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
900127a0:	7dfb      	ldrb	r3, [r7, #23]
900127a2:	b29c      	uxth	r4, r3
900127a4:	687b      	ldr	r3, [r7, #4]
900127a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900127a8:	3b01      	subs	r3, #1
900127aa:	4618      	mov	r0, r3
900127ac:	f7f8 f903 	bl	9000a9b6 <lwip_htonl>
900127b0:	4603      	mov	r3, r0
900127b2:	2200      	movs	r2, #0
900127b4:	4621      	mov	r1, r4
900127b6:	6878      	ldr	r0, [r7, #4]
900127b8:	f7ff fe66 	bl	90012488 <tcp_output_alloc_header>
900127bc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
900127be:	693b      	ldr	r3, [r7, #16]
900127c0:	2b00      	cmp	r3, #0
900127c2:	d102      	bne.n	900127ca <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
900127c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
900127c8:	e010      	b.n	900127ec <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
900127ca:	7dfb      	ldrb	r3, [r7, #23]
900127cc:	2200      	movs	r2, #0
900127ce:	6939      	ldr	r1, [r7, #16]
900127d0:	6878      	ldr	r0, [r7, #4]
900127d2:	f7ff fe97 	bl	90012504 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
900127d6:	687a      	ldr	r2, [r7, #4]
900127d8:	687b      	ldr	r3, [r7, #4]
900127da:	3304      	adds	r3, #4
900127dc:	6939      	ldr	r1, [r7, #16]
900127de:	6878      	ldr	r0, [r7, #4]
900127e0:	f7ff fed0 	bl	90012584 <tcp_output_control_segment>
900127e4:	4603      	mov	r3, r0
900127e6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
900127e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
900127ec:	4618      	mov	r0, r3
900127ee:	371c      	adds	r7, #28
900127f0:	46bd      	mov	sp, r7
900127f2:	bd90      	pop	{r4, r7, pc}
900127f4:	90019410 	.word	0x90019410
900127f8:	90019bec 	.word	0x90019bec
900127fc:	90019464 	.word	0x90019464

90012800 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
90012800:	b590      	push	{r4, r7, lr}
90012802:	b08b      	sub	sp, #44	; 0x2c
90012804:	af00      	add	r7, sp, #0
90012806:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
90012808:	2300      	movs	r3, #0
9001280a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
9001280e:	687b      	ldr	r3, [r7, #4]
90012810:	2b00      	cmp	r3, #0
90012812:	d106      	bne.n	90012822 <tcp_zero_window_probe+0x22>
90012814:	4b4c      	ldr	r3, [pc, #304]	; (90012948 <tcp_zero_window_probe+0x148>)
90012816:	f640 024f 	movw	r2, #2127	; 0x84f
9001281a:	494c      	ldr	r1, [pc, #304]	; (9001294c <tcp_zero_window_probe+0x14c>)
9001281c:	484c      	ldr	r0, [pc, #304]	; (90012950 <tcp_zero_window_probe+0x150>)
9001281e:	f003 f9e9 	bl	90015bf4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
90012822:	687b      	ldr	r3, [r7, #4]
90012824:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90012826:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
90012828:	6a3b      	ldr	r3, [r7, #32]
9001282a:	2b00      	cmp	r3, #0
9001282c:	d101      	bne.n	90012832 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
9001282e:	2300      	movs	r3, #0
90012830:	e086      	b.n	90012940 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
90012832:	687b      	ldr	r3, [r7, #4]
90012834:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
90012838:	2bff      	cmp	r3, #255	; 0xff
9001283a:	d007      	beq.n	9001284c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
9001283c:	687b      	ldr	r3, [r7, #4]
9001283e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
90012842:	3301      	adds	r3, #1
90012844:	b2da      	uxtb	r2, r3
90012846:	687b      	ldr	r3, [r7, #4]
90012848:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
9001284c:	6a3b      	ldr	r3, [r7, #32]
9001284e:	68db      	ldr	r3, [r3, #12]
90012850:	899b      	ldrh	r3, [r3, #12]
90012852:	b29b      	uxth	r3, r3
90012854:	4618      	mov	r0, r3
90012856:	f7f8 f899 	bl	9000a98c <lwip_htons>
9001285a:	4603      	mov	r3, r0
9001285c:	b2db      	uxtb	r3, r3
9001285e:	f003 0301 	and.w	r3, r3, #1
90012862:	2b00      	cmp	r3, #0
90012864:	d005      	beq.n	90012872 <tcp_zero_window_probe+0x72>
90012866:	6a3b      	ldr	r3, [r7, #32]
90012868:	891b      	ldrh	r3, [r3, #8]
9001286a:	2b00      	cmp	r3, #0
9001286c:	d101      	bne.n	90012872 <tcp_zero_window_probe+0x72>
9001286e:	2301      	movs	r3, #1
90012870:	e000      	b.n	90012874 <tcp_zero_window_probe+0x74>
90012872:	2300      	movs	r3, #0
90012874:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
90012876:	7ffb      	ldrb	r3, [r7, #31]
90012878:	2b00      	cmp	r3, #0
9001287a:	bf0c      	ite	eq
9001287c:	2301      	moveq	r3, #1
9001287e:	2300      	movne	r3, #0
90012880:	b2db      	uxtb	r3, r3
90012882:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
90012884:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
90012888:	b299      	uxth	r1, r3
9001288a:	6a3b      	ldr	r3, [r7, #32]
9001288c:	68db      	ldr	r3, [r3, #12]
9001288e:	685b      	ldr	r3, [r3, #4]
90012890:	8bba      	ldrh	r2, [r7, #28]
90012892:	6878      	ldr	r0, [r7, #4]
90012894:	f7ff fdf8 	bl	90012488 <tcp_output_alloc_header>
90012898:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
9001289a:	69bb      	ldr	r3, [r7, #24]
9001289c:	2b00      	cmp	r3, #0
9001289e:	d102      	bne.n	900128a6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
900128a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
900128a4:	e04c      	b.n	90012940 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
900128a6:	69bb      	ldr	r3, [r7, #24]
900128a8:	685b      	ldr	r3, [r3, #4]
900128aa:	617b      	str	r3, [r7, #20]

  if (is_fin) {
900128ac:	7ffb      	ldrb	r3, [r7, #31]
900128ae:	2b00      	cmp	r3, #0
900128b0:	d011      	beq.n	900128d6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
900128b2:	697b      	ldr	r3, [r7, #20]
900128b4:	899b      	ldrh	r3, [r3, #12]
900128b6:	b29b      	uxth	r3, r3
900128b8:	b21b      	sxth	r3, r3
900128ba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
900128be:	b21c      	sxth	r4, r3
900128c0:	2011      	movs	r0, #17
900128c2:	f7f8 f863 	bl	9000a98c <lwip_htons>
900128c6:	4603      	mov	r3, r0
900128c8:	b21b      	sxth	r3, r3
900128ca:	4323      	orrs	r3, r4
900128cc:	b21b      	sxth	r3, r3
900128ce:	b29a      	uxth	r2, r3
900128d0:	697b      	ldr	r3, [r7, #20]
900128d2:	819a      	strh	r2, [r3, #12]
900128d4:	e010      	b.n	900128f8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
900128d6:	69bb      	ldr	r3, [r7, #24]
900128d8:	685b      	ldr	r3, [r3, #4]
900128da:	3314      	adds	r3, #20
900128dc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
900128de:	6a3b      	ldr	r3, [r7, #32]
900128e0:	6858      	ldr	r0, [r3, #4]
900128e2:	6a3b      	ldr	r3, [r7, #32]
900128e4:	685b      	ldr	r3, [r3, #4]
900128e6:	891a      	ldrh	r2, [r3, #8]
900128e8:	6a3b      	ldr	r3, [r7, #32]
900128ea:	891b      	ldrh	r3, [r3, #8]
900128ec:	1ad3      	subs	r3, r2, r3
900128ee:	b29b      	uxth	r3, r3
900128f0:	2201      	movs	r2, #1
900128f2:	6939      	ldr	r1, [r7, #16]
900128f4:	f7f9 ff54 	bl	9000c7a0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
900128f8:	6a3b      	ldr	r3, [r7, #32]
900128fa:	68db      	ldr	r3, [r3, #12]
900128fc:	685b      	ldr	r3, [r3, #4]
900128fe:	4618      	mov	r0, r3
90012900:	f7f8 f859 	bl	9000a9b6 <lwip_htonl>
90012904:	4603      	mov	r3, r0
90012906:	3301      	adds	r3, #1
90012908:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
9001290a:	687b      	ldr	r3, [r7, #4]
9001290c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
9001290e:	68fb      	ldr	r3, [r7, #12]
90012910:	1ad3      	subs	r3, r2, r3
90012912:	2b00      	cmp	r3, #0
90012914:	da02      	bge.n	9001291c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
90012916:	687b      	ldr	r3, [r7, #4]
90012918:	68fa      	ldr	r2, [r7, #12]
9001291a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
9001291c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
90012920:	2200      	movs	r2, #0
90012922:	69b9      	ldr	r1, [r7, #24]
90012924:	6878      	ldr	r0, [r7, #4]
90012926:	f7ff fded 	bl	90012504 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
9001292a:	687a      	ldr	r2, [r7, #4]
9001292c:	687b      	ldr	r3, [r7, #4]
9001292e:	3304      	adds	r3, #4
90012930:	69b9      	ldr	r1, [r7, #24]
90012932:	6878      	ldr	r0, [r7, #4]
90012934:	f7ff fe26 	bl	90012584 <tcp_output_control_segment>
90012938:	4603      	mov	r3, r0
9001293a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
9001293c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
90012940:	4618      	mov	r0, r3
90012942:	372c      	adds	r7, #44	; 0x2c
90012944:	46bd      	mov	sp, r7
90012946:	bd90      	pop	{r4, r7, pc}
90012948:	90019410 	.word	0x90019410
9001294c:	90019c08 	.word	0x90019c08
90012950:	90019464 	.word	0x90019464

90012954 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
90012954:	b580      	push	{r7, lr}
90012956:	b082      	sub	sp, #8
90012958:	af00      	add	r7, sp, #0
9001295a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
9001295c:	f7fa f80e 	bl	9000c97c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
90012960:	4b0a      	ldr	r3, [pc, #40]	; (9001298c <tcpip_tcp_timer+0x38>)
90012962:	681b      	ldr	r3, [r3, #0]
90012964:	2b00      	cmp	r3, #0
90012966:	d103      	bne.n	90012970 <tcpip_tcp_timer+0x1c>
90012968:	4b09      	ldr	r3, [pc, #36]	; (90012990 <tcpip_tcp_timer+0x3c>)
9001296a:	681b      	ldr	r3, [r3, #0]
9001296c:	2b00      	cmp	r3, #0
9001296e:	d005      	beq.n	9001297c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
90012970:	2200      	movs	r2, #0
90012972:	4908      	ldr	r1, [pc, #32]	; (90012994 <tcpip_tcp_timer+0x40>)
90012974:	20fa      	movs	r0, #250	; 0xfa
90012976:	f000 f8f3 	bl	90012b60 <sys_timeout>
9001297a:	e003      	b.n	90012984 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
9001297c:	4b06      	ldr	r3, [pc, #24]	; (90012998 <tcpip_tcp_timer+0x44>)
9001297e:	2200      	movs	r2, #0
90012980:	601a      	str	r2, [r3, #0]
  }
}
90012982:	bf00      	nop
90012984:	bf00      	nop
90012986:	3708      	adds	r7, #8
90012988:	46bd      	mov	sp, r7
9001298a:	bd80      	pop	{r7, pc}
9001298c:	2401f3b0 	.word	0x2401f3b0
90012990:	2401f3b4 	.word	0x2401f3b4
90012994:	90012955 	.word	0x90012955
90012998:	2401f3fc 	.word	0x2401f3fc

9001299c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
9001299c:	b580      	push	{r7, lr}
9001299e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
900129a0:	4b0a      	ldr	r3, [pc, #40]	; (900129cc <tcp_timer_needed+0x30>)
900129a2:	681b      	ldr	r3, [r3, #0]
900129a4:	2b00      	cmp	r3, #0
900129a6:	d10f      	bne.n	900129c8 <tcp_timer_needed+0x2c>
900129a8:	4b09      	ldr	r3, [pc, #36]	; (900129d0 <tcp_timer_needed+0x34>)
900129aa:	681b      	ldr	r3, [r3, #0]
900129ac:	2b00      	cmp	r3, #0
900129ae:	d103      	bne.n	900129b8 <tcp_timer_needed+0x1c>
900129b0:	4b08      	ldr	r3, [pc, #32]	; (900129d4 <tcp_timer_needed+0x38>)
900129b2:	681b      	ldr	r3, [r3, #0]
900129b4:	2b00      	cmp	r3, #0
900129b6:	d007      	beq.n	900129c8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
900129b8:	4b04      	ldr	r3, [pc, #16]	; (900129cc <tcp_timer_needed+0x30>)
900129ba:	2201      	movs	r2, #1
900129bc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
900129be:	2200      	movs	r2, #0
900129c0:	4905      	ldr	r1, [pc, #20]	; (900129d8 <tcp_timer_needed+0x3c>)
900129c2:	20fa      	movs	r0, #250	; 0xfa
900129c4:	f000 f8cc 	bl	90012b60 <sys_timeout>
  }
}
900129c8:	bf00      	nop
900129ca:	bd80      	pop	{r7, pc}
900129cc:	2401f3fc 	.word	0x2401f3fc
900129d0:	2401f3b0 	.word	0x2401f3b0
900129d4:	2401f3b4 	.word	0x2401f3b4
900129d8:	90012955 	.word	0x90012955

900129dc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
900129dc:	b580      	push	{r7, lr}
900129de:	b086      	sub	sp, #24
900129e0:	af00      	add	r7, sp, #0
900129e2:	60f8      	str	r0, [r7, #12]
900129e4:	60b9      	str	r1, [r7, #8]
900129e6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
900129e8:	200a      	movs	r0, #10
900129ea:	f7f8 fdc9 	bl	9000b580 <memp_malloc>
900129ee:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
900129f0:	693b      	ldr	r3, [r7, #16]
900129f2:	2b00      	cmp	r3, #0
900129f4:	d109      	bne.n	90012a0a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
900129f6:	693b      	ldr	r3, [r7, #16]
900129f8:	2b00      	cmp	r3, #0
900129fa:	d151      	bne.n	90012aa0 <sys_timeout_abs+0xc4>
900129fc:	4b2a      	ldr	r3, [pc, #168]	; (90012aa8 <sys_timeout_abs+0xcc>)
900129fe:	22be      	movs	r2, #190	; 0xbe
90012a00:	492a      	ldr	r1, [pc, #168]	; (90012aac <sys_timeout_abs+0xd0>)
90012a02:	482b      	ldr	r0, [pc, #172]	; (90012ab0 <sys_timeout_abs+0xd4>)
90012a04:	f003 f8f6 	bl	90015bf4 <iprintf>
    return;
90012a08:	e04a      	b.n	90012aa0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
90012a0a:	693b      	ldr	r3, [r7, #16]
90012a0c:	2200      	movs	r2, #0
90012a0e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
90012a10:	693b      	ldr	r3, [r7, #16]
90012a12:	68ba      	ldr	r2, [r7, #8]
90012a14:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
90012a16:	693b      	ldr	r3, [r7, #16]
90012a18:	687a      	ldr	r2, [r7, #4]
90012a1a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
90012a1c:	693b      	ldr	r3, [r7, #16]
90012a1e:	68fa      	ldr	r2, [r7, #12]
90012a20:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
90012a22:	4b24      	ldr	r3, [pc, #144]	; (90012ab4 <sys_timeout_abs+0xd8>)
90012a24:	681b      	ldr	r3, [r3, #0]
90012a26:	2b00      	cmp	r3, #0
90012a28:	d103      	bne.n	90012a32 <sys_timeout_abs+0x56>
    next_timeout = timeout;
90012a2a:	4a22      	ldr	r2, [pc, #136]	; (90012ab4 <sys_timeout_abs+0xd8>)
90012a2c:	693b      	ldr	r3, [r7, #16]
90012a2e:	6013      	str	r3, [r2, #0]
    return;
90012a30:	e037      	b.n	90012aa2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
90012a32:	693b      	ldr	r3, [r7, #16]
90012a34:	685a      	ldr	r2, [r3, #4]
90012a36:	4b1f      	ldr	r3, [pc, #124]	; (90012ab4 <sys_timeout_abs+0xd8>)
90012a38:	681b      	ldr	r3, [r3, #0]
90012a3a:	685b      	ldr	r3, [r3, #4]
90012a3c:	1ad3      	subs	r3, r2, r3
90012a3e:	0fdb      	lsrs	r3, r3, #31
90012a40:	f003 0301 	and.w	r3, r3, #1
90012a44:	b2db      	uxtb	r3, r3
90012a46:	2b00      	cmp	r3, #0
90012a48:	d007      	beq.n	90012a5a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
90012a4a:	4b1a      	ldr	r3, [pc, #104]	; (90012ab4 <sys_timeout_abs+0xd8>)
90012a4c:	681a      	ldr	r2, [r3, #0]
90012a4e:	693b      	ldr	r3, [r7, #16]
90012a50:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
90012a52:	4a18      	ldr	r2, [pc, #96]	; (90012ab4 <sys_timeout_abs+0xd8>)
90012a54:	693b      	ldr	r3, [r7, #16]
90012a56:	6013      	str	r3, [r2, #0]
90012a58:	e023      	b.n	90012aa2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
90012a5a:	4b16      	ldr	r3, [pc, #88]	; (90012ab4 <sys_timeout_abs+0xd8>)
90012a5c:	681b      	ldr	r3, [r3, #0]
90012a5e:	617b      	str	r3, [r7, #20]
90012a60:	e01a      	b.n	90012a98 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
90012a62:	697b      	ldr	r3, [r7, #20]
90012a64:	681b      	ldr	r3, [r3, #0]
90012a66:	2b00      	cmp	r3, #0
90012a68:	d00b      	beq.n	90012a82 <sys_timeout_abs+0xa6>
90012a6a:	693b      	ldr	r3, [r7, #16]
90012a6c:	685a      	ldr	r2, [r3, #4]
90012a6e:	697b      	ldr	r3, [r7, #20]
90012a70:	681b      	ldr	r3, [r3, #0]
90012a72:	685b      	ldr	r3, [r3, #4]
90012a74:	1ad3      	subs	r3, r2, r3
90012a76:	0fdb      	lsrs	r3, r3, #31
90012a78:	f003 0301 	and.w	r3, r3, #1
90012a7c:	b2db      	uxtb	r3, r3
90012a7e:	2b00      	cmp	r3, #0
90012a80:	d007      	beq.n	90012a92 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
90012a82:	697b      	ldr	r3, [r7, #20]
90012a84:	681a      	ldr	r2, [r3, #0]
90012a86:	693b      	ldr	r3, [r7, #16]
90012a88:	601a      	str	r2, [r3, #0]
        t->next = timeout;
90012a8a:	697b      	ldr	r3, [r7, #20]
90012a8c:	693a      	ldr	r2, [r7, #16]
90012a8e:	601a      	str	r2, [r3, #0]
        break;
90012a90:	e007      	b.n	90012aa2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
90012a92:	697b      	ldr	r3, [r7, #20]
90012a94:	681b      	ldr	r3, [r3, #0]
90012a96:	617b      	str	r3, [r7, #20]
90012a98:	697b      	ldr	r3, [r7, #20]
90012a9a:	2b00      	cmp	r3, #0
90012a9c:	d1e1      	bne.n	90012a62 <sys_timeout_abs+0x86>
90012a9e:	e000      	b.n	90012aa2 <sys_timeout_abs+0xc6>
    return;
90012aa0:	bf00      	nop
      }
    }
  }
}
90012aa2:	3718      	adds	r7, #24
90012aa4:	46bd      	mov	sp, r7
90012aa6:	bd80      	pop	{r7, pc}
90012aa8:	90019c2c 	.word	0x90019c2c
90012aac:	90019c60 	.word	0x90019c60
90012ab0:	90019ca0 	.word	0x90019ca0
90012ab4:	2401f3f4 	.word	0x2401f3f4

90012ab8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
90012ab8:	b580      	push	{r7, lr}
90012aba:	b086      	sub	sp, #24
90012abc:	af00      	add	r7, sp, #0
90012abe:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
90012ac0:	687b      	ldr	r3, [r7, #4]
90012ac2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
90012ac4:	697b      	ldr	r3, [r7, #20]
90012ac6:	685b      	ldr	r3, [r3, #4]
90012ac8:	4798      	blx	r3

  now = sys_now();
90012aca:	f7f2 fed7 	bl	9000587c <sys_now>
90012ace:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
90012ad0:	697b      	ldr	r3, [r7, #20]
90012ad2:	681a      	ldr	r2, [r3, #0]
90012ad4:	4b0f      	ldr	r3, [pc, #60]	; (90012b14 <lwip_cyclic_timer+0x5c>)
90012ad6:	681b      	ldr	r3, [r3, #0]
90012ad8:	4413      	add	r3, r2
90012ada:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
90012adc:	68fa      	ldr	r2, [r7, #12]
90012ade:	693b      	ldr	r3, [r7, #16]
90012ae0:	1ad3      	subs	r3, r2, r3
90012ae2:	0fdb      	lsrs	r3, r3, #31
90012ae4:	f003 0301 	and.w	r3, r3, #1
90012ae8:	b2db      	uxtb	r3, r3
90012aea:	2b00      	cmp	r3, #0
90012aec:	d009      	beq.n	90012b02 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
90012aee:	697b      	ldr	r3, [r7, #20]
90012af0:	681a      	ldr	r2, [r3, #0]
90012af2:	693b      	ldr	r3, [r7, #16]
90012af4:	4413      	add	r3, r2
90012af6:	687a      	ldr	r2, [r7, #4]
90012af8:	4907      	ldr	r1, [pc, #28]	; (90012b18 <lwip_cyclic_timer+0x60>)
90012afa:	4618      	mov	r0, r3
90012afc:	f7ff ff6e 	bl	900129dc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
90012b00:	e004      	b.n	90012b0c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
90012b02:	687a      	ldr	r2, [r7, #4]
90012b04:	4904      	ldr	r1, [pc, #16]	; (90012b18 <lwip_cyclic_timer+0x60>)
90012b06:	68f8      	ldr	r0, [r7, #12]
90012b08:	f7ff ff68 	bl	900129dc <sys_timeout_abs>
}
90012b0c:	bf00      	nop
90012b0e:	3718      	adds	r7, #24
90012b10:	46bd      	mov	sp, r7
90012b12:	bd80      	pop	{r7, pc}
90012b14:	2401f3f8 	.word	0x2401f3f8
90012b18:	90012ab9 	.word	0x90012ab9

90012b1c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
90012b1c:	b580      	push	{r7, lr}
90012b1e:	b082      	sub	sp, #8
90012b20:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
90012b22:	2301      	movs	r3, #1
90012b24:	607b      	str	r3, [r7, #4]
90012b26:	e00e      	b.n	90012b46 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
90012b28:	4a0b      	ldr	r2, [pc, #44]	; (90012b58 <sys_timeouts_init+0x3c>)
90012b2a:	687b      	ldr	r3, [r7, #4]
90012b2c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
90012b30:	687b      	ldr	r3, [r7, #4]
90012b32:	00db      	lsls	r3, r3, #3
90012b34:	4a08      	ldr	r2, [pc, #32]	; (90012b58 <sys_timeouts_init+0x3c>)
90012b36:	4413      	add	r3, r2
90012b38:	461a      	mov	r2, r3
90012b3a:	4908      	ldr	r1, [pc, #32]	; (90012b5c <sys_timeouts_init+0x40>)
90012b3c:	f000 f810 	bl	90012b60 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
90012b40:	687b      	ldr	r3, [r7, #4]
90012b42:	3301      	adds	r3, #1
90012b44:	607b      	str	r3, [r7, #4]
90012b46:	687b      	ldr	r3, [r7, #4]
90012b48:	2b02      	cmp	r3, #2
90012b4a:	d9ed      	bls.n	90012b28 <sys_timeouts_init+0xc>
  }
}
90012b4c:	bf00      	nop
90012b4e:	bf00      	nop
90012b50:	3708      	adds	r7, #8
90012b52:	46bd      	mov	sp, r7
90012b54:	bd80      	pop	{r7, pc}
90012b56:	bf00      	nop
90012b58:	9002111c 	.word	0x9002111c
90012b5c:	90012ab9 	.word	0x90012ab9

90012b60 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
90012b60:	b580      	push	{r7, lr}
90012b62:	b086      	sub	sp, #24
90012b64:	af00      	add	r7, sp, #0
90012b66:	60f8      	str	r0, [r7, #12]
90012b68:	60b9      	str	r1, [r7, #8]
90012b6a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
90012b6c:	68fb      	ldr	r3, [r7, #12]
90012b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
90012b72:	d306      	bcc.n	90012b82 <sys_timeout+0x22>
90012b74:	4b0a      	ldr	r3, [pc, #40]	; (90012ba0 <sys_timeout+0x40>)
90012b76:	f240 1229 	movw	r2, #297	; 0x129
90012b7a:	490a      	ldr	r1, [pc, #40]	; (90012ba4 <sys_timeout+0x44>)
90012b7c:	480a      	ldr	r0, [pc, #40]	; (90012ba8 <sys_timeout+0x48>)
90012b7e:	f003 f839 	bl	90015bf4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
90012b82:	f7f2 fe7b 	bl	9000587c <sys_now>
90012b86:	4602      	mov	r2, r0
90012b88:	68fb      	ldr	r3, [r7, #12]
90012b8a:	4413      	add	r3, r2
90012b8c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
90012b8e:	687a      	ldr	r2, [r7, #4]
90012b90:	68b9      	ldr	r1, [r7, #8]
90012b92:	6978      	ldr	r0, [r7, #20]
90012b94:	f7ff ff22 	bl	900129dc <sys_timeout_abs>
#endif
}
90012b98:	bf00      	nop
90012b9a:	3718      	adds	r7, #24
90012b9c:	46bd      	mov	sp, r7
90012b9e:	bd80      	pop	{r7, pc}
90012ba0:	90019c2c 	.word	0x90019c2c
90012ba4:	90019cc8 	.word	0x90019cc8
90012ba8:	90019ca0 	.word	0x90019ca0

90012bac <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
90012bac:	b580      	push	{r7, lr}
90012bae:	b084      	sub	sp, #16
90012bb0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
90012bb2:	f7f2 fe63 	bl	9000587c <sys_now>
90012bb6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
90012bb8:	4b17      	ldr	r3, [pc, #92]	; (90012c18 <sys_check_timeouts+0x6c>)
90012bba:	681b      	ldr	r3, [r3, #0]
90012bbc:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
90012bbe:	68bb      	ldr	r3, [r7, #8]
90012bc0:	2b00      	cmp	r3, #0
90012bc2:	d022      	beq.n	90012c0a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
90012bc4:	68bb      	ldr	r3, [r7, #8]
90012bc6:	685b      	ldr	r3, [r3, #4]
90012bc8:	68fa      	ldr	r2, [r7, #12]
90012bca:	1ad3      	subs	r3, r2, r3
90012bcc:	0fdb      	lsrs	r3, r3, #31
90012bce:	f003 0301 	and.w	r3, r3, #1
90012bd2:	b2db      	uxtb	r3, r3
90012bd4:	2b00      	cmp	r3, #0
90012bd6:	d11a      	bne.n	90012c0e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
90012bd8:	68bb      	ldr	r3, [r7, #8]
90012bda:	681b      	ldr	r3, [r3, #0]
90012bdc:	4a0e      	ldr	r2, [pc, #56]	; (90012c18 <sys_check_timeouts+0x6c>)
90012bde:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
90012be0:	68bb      	ldr	r3, [r7, #8]
90012be2:	689b      	ldr	r3, [r3, #8]
90012be4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
90012be6:	68bb      	ldr	r3, [r7, #8]
90012be8:	68db      	ldr	r3, [r3, #12]
90012bea:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
90012bec:	68bb      	ldr	r3, [r7, #8]
90012bee:	685b      	ldr	r3, [r3, #4]
90012bf0:	4a0a      	ldr	r2, [pc, #40]	; (90012c1c <sys_check_timeouts+0x70>)
90012bf2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
90012bf4:	68b9      	ldr	r1, [r7, #8]
90012bf6:	200a      	movs	r0, #10
90012bf8:	f7f8 fd38 	bl	9000b66c <memp_free>
    if (handler != NULL) {
90012bfc:	687b      	ldr	r3, [r7, #4]
90012bfe:	2b00      	cmp	r3, #0
90012c00:	d0da      	beq.n	90012bb8 <sys_check_timeouts+0xc>
      handler(arg);
90012c02:	687b      	ldr	r3, [r7, #4]
90012c04:	6838      	ldr	r0, [r7, #0]
90012c06:	4798      	blx	r3
  do {
90012c08:	e7d6      	b.n	90012bb8 <sys_check_timeouts+0xc>
      return;
90012c0a:	bf00      	nop
90012c0c:	e000      	b.n	90012c10 <sys_check_timeouts+0x64>
      return;
90012c0e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
90012c10:	3710      	adds	r7, #16
90012c12:	46bd      	mov	sp, r7
90012c14:	bd80      	pop	{r7, pc}
90012c16:	bf00      	nop
90012c18:	2401f3f4 	.word	0x2401f3f4
90012c1c:	2401f3f8 	.word	0x2401f3f8

90012c20 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
90012c20:	b580      	push	{r7, lr}
90012c22:	b082      	sub	sp, #8
90012c24:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
90012c26:	4b16      	ldr	r3, [pc, #88]	; (90012c80 <sys_timeouts_sleeptime+0x60>)
90012c28:	681b      	ldr	r3, [r3, #0]
90012c2a:	2b00      	cmp	r3, #0
90012c2c:	d102      	bne.n	90012c34 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
90012c2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90012c32:	e020      	b.n	90012c76 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
90012c34:	f7f2 fe22 	bl	9000587c <sys_now>
90012c38:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
90012c3a:	4b11      	ldr	r3, [pc, #68]	; (90012c80 <sys_timeouts_sleeptime+0x60>)
90012c3c:	681b      	ldr	r3, [r3, #0]
90012c3e:	685a      	ldr	r2, [r3, #4]
90012c40:	687b      	ldr	r3, [r7, #4]
90012c42:	1ad3      	subs	r3, r2, r3
90012c44:	0fdb      	lsrs	r3, r3, #31
90012c46:	f003 0301 	and.w	r3, r3, #1
90012c4a:	b2db      	uxtb	r3, r3
90012c4c:	2b00      	cmp	r3, #0
90012c4e:	d001      	beq.n	90012c54 <sys_timeouts_sleeptime+0x34>
    return 0;
90012c50:	2300      	movs	r3, #0
90012c52:	e010      	b.n	90012c76 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
90012c54:	4b0a      	ldr	r3, [pc, #40]	; (90012c80 <sys_timeouts_sleeptime+0x60>)
90012c56:	681b      	ldr	r3, [r3, #0]
90012c58:	685a      	ldr	r2, [r3, #4]
90012c5a:	687b      	ldr	r3, [r7, #4]
90012c5c:	1ad3      	subs	r3, r2, r3
90012c5e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
90012c60:	683b      	ldr	r3, [r7, #0]
90012c62:	2b00      	cmp	r3, #0
90012c64:	da06      	bge.n	90012c74 <sys_timeouts_sleeptime+0x54>
90012c66:	4b07      	ldr	r3, [pc, #28]	; (90012c84 <sys_timeouts_sleeptime+0x64>)
90012c68:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
90012c6c:	4906      	ldr	r1, [pc, #24]	; (90012c88 <sys_timeouts_sleeptime+0x68>)
90012c6e:	4807      	ldr	r0, [pc, #28]	; (90012c8c <sys_timeouts_sleeptime+0x6c>)
90012c70:	f002 ffc0 	bl	90015bf4 <iprintf>
    return ret;
90012c74:	683b      	ldr	r3, [r7, #0]
  }
}
90012c76:	4618      	mov	r0, r3
90012c78:	3708      	adds	r7, #8
90012c7a:	46bd      	mov	sp, r7
90012c7c:	bd80      	pop	{r7, pc}
90012c7e:	bf00      	nop
90012c80:	2401f3f4 	.word	0x2401f3f4
90012c84:	90019c2c 	.word	0x90019c2c
90012c88:	90019d00 	.word	0x90019d00
90012c8c:	90019ca0 	.word	0x90019ca0

90012c90 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
90012c90:	b580      	push	{r7, lr}
90012c92:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
90012c94:	f003 f83c 	bl	90015d10 <rand>
90012c98:	4603      	mov	r3, r0
90012c9a:	b29b      	uxth	r3, r3
90012c9c:	f3c3 030d 	ubfx	r3, r3, #0, #14
90012ca0:	b29b      	uxth	r3, r3
90012ca2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
90012ca6:	b29a      	uxth	r2, r3
90012ca8:	4b01      	ldr	r3, [pc, #4]	; (90012cb0 <udp_init+0x20>)
90012caa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
90012cac:	bf00      	nop
90012cae:	bd80      	pop	{r7, pc}
90012cb0:	2400052c 	.word	0x2400052c

90012cb4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
90012cb4:	b580      	push	{r7, lr}
90012cb6:	b084      	sub	sp, #16
90012cb8:	af00      	add	r7, sp, #0
90012cba:	60f8      	str	r0, [r7, #12]
90012cbc:	60b9      	str	r1, [r7, #8]
90012cbe:	4613      	mov	r3, r2
90012cc0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
90012cc2:	68fb      	ldr	r3, [r7, #12]
90012cc4:	2b00      	cmp	r3, #0
90012cc6:	d105      	bne.n	90012cd4 <udp_input_local_match+0x20>
90012cc8:	4b27      	ldr	r3, [pc, #156]	; (90012d68 <udp_input_local_match+0xb4>)
90012cca:	2287      	movs	r2, #135	; 0x87
90012ccc:	4927      	ldr	r1, [pc, #156]	; (90012d6c <udp_input_local_match+0xb8>)
90012cce:	4828      	ldr	r0, [pc, #160]	; (90012d70 <udp_input_local_match+0xbc>)
90012cd0:	f002 ff90 	bl	90015bf4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
90012cd4:	68bb      	ldr	r3, [r7, #8]
90012cd6:	2b00      	cmp	r3, #0
90012cd8:	d105      	bne.n	90012ce6 <udp_input_local_match+0x32>
90012cda:	4b23      	ldr	r3, [pc, #140]	; (90012d68 <udp_input_local_match+0xb4>)
90012cdc:	2288      	movs	r2, #136	; 0x88
90012cde:	4925      	ldr	r1, [pc, #148]	; (90012d74 <udp_input_local_match+0xc0>)
90012ce0:	4823      	ldr	r0, [pc, #140]	; (90012d70 <udp_input_local_match+0xbc>)
90012ce2:	f002 ff87 	bl	90015bf4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
90012ce6:	68fb      	ldr	r3, [r7, #12]
90012ce8:	7a1b      	ldrb	r3, [r3, #8]
90012cea:	2b00      	cmp	r3, #0
90012cec:	d00b      	beq.n	90012d06 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
90012cee:	68fb      	ldr	r3, [r7, #12]
90012cf0:	7a1a      	ldrb	r2, [r3, #8]
90012cf2:	4b21      	ldr	r3, [pc, #132]	; (90012d78 <udp_input_local_match+0xc4>)
90012cf4:	685b      	ldr	r3, [r3, #4]
90012cf6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
90012cfa:	3301      	adds	r3, #1
90012cfc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
90012cfe:	429a      	cmp	r2, r3
90012d00:	d001      	beq.n	90012d06 <udp_input_local_match+0x52>
    return 0;
90012d02:	2300      	movs	r3, #0
90012d04:	e02b      	b.n	90012d5e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
90012d06:	79fb      	ldrb	r3, [r7, #7]
90012d08:	2b00      	cmp	r3, #0
90012d0a:	d018      	beq.n	90012d3e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
90012d0c:	68fb      	ldr	r3, [r7, #12]
90012d0e:	2b00      	cmp	r3, #0
90012d10:	d013      	beq.n	90012d3a <udp_input_local_match+0x86>
90012d12:	68fb      	ldr	r3, [r7, #12]
90012d14:	681b      	ldr	r3, [r3, #0]
90012d16:	2b00      	cmp	r3, #0
90012d18:	d00f      	beq.n	90012d3a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
90012d1a:	4b17      	ldr	r3, [pc, #92]	; (90012d78 <udp_input_local_match+0xc4>)
90012d1c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
90012d1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
90012d22:	d00a      	beq.n	90012d3a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
90012d24:	68fb      	ldr	r3, [r7, #12]
90012d26:	681a      	ldr	r2, [r3, #0]
90012d28:	4b13      	ldr	r3, [pc, #76]	; (90012d78 <udp_input_local_match+0xc4>)
90012d2a:	695b      	ldr	r3, [r3, #20]
90012d2c:	405a      	eors	r2, r3
90012d2e:	68bb      	ldr	r3, [r7, #8]
90012d30:	3308      	adds	r3, #8
90012d32:	681b      	ldr	r3, [r3, #0]
90012d34:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
90012d36:	2b00      	cmp	r3, #0
90012d38:	d110      	bne.n	90012d5c <udp_input_local_match+0xa8>
          return 1;
90012d3a:	2301      	movs	r3, #1
90012d3c:	e00f      	b.n	90012d5e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
90012d3e:	68fb      	ldr	r3, [r7, #12]
90012d40:	2b00      	cmp	r3, #0
90012d42:	d009      	beq.n	90012d58 <udp_input_local_match+0xa4>
90012d44:	68fb      	ldr	r3, [r7, #12]
90012d46:	681b      	ldr	r3, [r3, #0]
90012d48:	2b00      	cmp	r3, #0
90012d4a:	d005      	beq.n	90012d58 <udp_input_local_match+0xa4>
90012d4c:	68fb      	ldr	r3, [r7, #12]
90012d4e:	681a      	ldr	r2, [r3, #0]
90012d50:	4b09      	ldr	r3, [pc, #36]	; (90012d78 <udp_input_local_match+0xc4>)
90012d52:	695b      	ldr	r3, [r3, #20]
90012d54:	429a      	cmp	r2, r3
90012d56:	d101      	bne.n	90012d5c <udp_input_local_match+0xa8>
        return 1;
90012d58:	2301      	movs	r3, #1
90012d5a:	e000      	b.n	90012d5e <udp_input_local_match+0xaa>
      }
  }

  return 0;
90012d5c:	2300      	movs	r3, #0
}
90012d5e:	4618      	mov	r0, r3
90012d60:	3710      	adds	r7, #16
90012d62:	46bd      	mov	sp, r7
90012d64:	bd80      	pop	{r7, pc}
90012d66:	bf00      	nop
90012d68:	90019d14 	.word	0x90019d14
90012d6c:	90019d44 	.word	0x90019d44
90012d70:	90019d68 	.word	0x90019d68
90012d74:	90019d90 	.word	0x90019d90
90012d78:	2401c1c8 	.word	0x2401c1c8

90012d7c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
90012d7c:	b590      	push	{r4, r7, lr}
90012d7e:	b08d      	sub	sp, #52	; 0x34
90012d80:	af02      	add	r7, sp, #8
90012d82:	6078      	str	r0, [r7, #4]
90012d84:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
90012d86:	2300      	movs	r3, #0
90012d88:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
90012d8a:	687b      	ldr	r3, [r7, #4]
90012d8c:	2b00      	cmp	r3, #0
90012d8e:	d105      	bne.n	90012d9c <udp_input+0x20>
90012d90:	4b7c      	ldr	r3, [pc, #496]	; (90012f84 <udp_input+0x208>)
90012d92:	22cf      	movs	r2, #207	; 0xcf
90012d94:	497c      	ldr	r1, [pc, #496]	; (90012f88 <udp_input+0x20c>)
90012d96:	487d      	ldr	r0, [pc, #500]	; (90012f8c <udp_input+0x210>)
90012d98:	f002 ff2c 	bl	90015bf4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
90012d9c:	683b      	ldr	r3, [r7, #0]
90012d9e:	2b00      	cmp	r3, #0
90012da0:	d105      	bne.n	90012dae <udp_input+0x32>
90012da2:	4b78      	ldr	r3, [pc, #480]	; (90012f84 <udp_input+0x208>)
90012da4:	22d0      	movs	r2, #208	; 0xd0
90012da6:	497a      	ldr	r1, [pc, #488]	; (90012f90 <udp_input+0x214>)
90012da8:	4878      	ldr	r0, [pc, #480]	; (90012f8c <udp_input+0x210>)
90012daa:	f002 ff23 	bl	90015bf4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
90012dae:	687b      	ldr	r3, [r7, #4]
90012db0:	895b      	ldrh	r3, [r3, #10]
90012db2:	2b07      	cmp	r3, #7
90012db4:	d803      	bhi.n	90012dbe <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
90012db6:	6878      	ldr	r0, [r7, #4]
90012db8:	f7f9 fafc 	bl	9000c3b4 <pbuf_free>
    goto end;
90012dbc:	e0de      	b.n	90012f7c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
90012dbe:	687b      	ldr	r3, [r7, #4]
90012dc0:	685b      	ldr	r3, [r3, #4]
90012dc2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
90012dc4:	4b73      	ldr	r3, [pc, #460]	; (90012f94 <udp_input+0x218>)
90012dc6:	695b      	ldr	r3, [r3, #20]
90012dc8:	4a72      	ldr	r2, [pc, #456]	; (90012f94 <udp_input+0x218>)
90012dca:	6812      	ldr	r2, [r2, #0]
90012dcc:	4611      	mov	r1, r2
90012dce:	4618      	mov	r0, r3
90012dd0:	f001 fcae 	bl	90014730 <ip4_addr_isbroadcast_u32>
90012dd4:	4603      	mov	r3, r0
90012dd6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
90012dd8:	697b      	ldr	r3, [r7, #20]
90012dda:	881b      	ldrh	r3, [r3, #0]
90012ddc:	b29b      	uxth	r3, r3
90012dde:	4618      	mov	r0, r3
90012de0:	f7f7 fdd4 	bl	9000a98c <lwip_htons>
90012de4:	4603      	mov	r3, r0
90012de6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
90012de8:	697b      	ldr	r3, [r7, #20]
90012dea:	885b      	ldrh	r3, [r3, #2]
90012dec:	b29b      	uxth	r3, r3
90012dee:	4618      	mov	r0, r3
90012df0:	f7f7 fdcc 	bl	9000a98c <lwip_htons>
90012df4:	4603      	mov	r3, r0
90012df6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
90012df8:	2300      	movs	r3, #0
90012dfa:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
90012dfc:	2300      	movs	r3, #0
90012dfe:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
90012e00:	2300      	movs	r3, #0
90012e02:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
90012e04:	4b64      	ldr	r3, [pc, #400]	; (90012f98 <udp_input+0x21c>)
90012e06:	681b      	ldr	r3, [r3, #0]
90012e08:	627b      	str	r3, [r7, #36]	; 0x24
90012e0a:	e054      	b.n	90012eb6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
90012e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90012e0e:	8a5b      	ldrh	r3, [r3, #18]
90012e10:	89fa      	ldrh	r2, [r7, #14]
90012e12:	429a      	cmp	r2, r3
90012e14:	d14a      	bne.n	90012eac <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
90012e16:	7cfb      	ldrb	r3, [r7, #19]
90012e18:	461a      	mov	r2, r3
90012e1a:	6839      	ldr	r1, [r7, #0]
90012e1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
90012e1e:	f7ff ff49 	bl	90012cb4 <udp_input_local_match>
90012e22:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
90012e24:	2b00      	cmp	r3, #0
90012e26:	d041      	beq.n	90012eac <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
90012e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90012e2a:	7c1b      	ldrb	r3, [r3, #16]
90012e2c:	f003 0304 	and.w	r3, r3, #4
90012e30:	2b00      	cmp	r3, #0
90012e32:	d11d      	bne.n	90012e70 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
90012e34:	69fb      	ldr	r3, [r7, #28]
90012e36:	2b00      	cmp	r3, #0
90012e38:	d102      	bne.n	90012e40 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
90012e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90012e3c:	61fb      	str	r3, [r7, #28]
90012e3e:	e017      	b.n	90012e70 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
90012e40:	7cfb      	ldrb	r3, [r7, #19]
90012e42:	2b00      	cmp	r3, #0
90012e44:	d014      	beq.n	90012e70 <udp_input+0xf4>
90012e46:	4b53      	ldr	r3, [pc, #332]	; (90012f94 <udp_input+0x218>)
90012e48:	695b      	ldr	r3, [r3, #20]
90012e4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
90012e4e:	d10f      	bne.n	90012e70 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
90012e50:	69fb      	ldr	r3, [r7, #28]
90012e52:	681a      	ldr	r2, [r3, #0]
90012e54:	683b      	ldr	r3, [r7, #0]
90012e56:	3304      	adds	r3, #4
90012e58:	681b      	ldr	r3, [r3, #0]
90012e5a:	429a      	cmp	r2, r3
90012e5c:	d008      	beq.n	90012e70 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
90012e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90012e60:	681a      	ldr	r2, [r3, #0]
90012e62:	683b      	ldr	r3, [r7, #0]
90012e64:	3304      	adds	r3, #4
90012e66:	681b      	ldr	r3, [r3, #0]
90012e68:	429a      	cmp	r2, r3
90012e6a:	d101      	bne.n	90012e70 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
90012e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90012e6e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
90012e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90012e72:	8a9b      	ldrh	r3, [r3, #20]
90012e74:	8a3a      	ldrh	r2, [r7, #16]
90012e76:	429a      	cmp	r2, r3
90012e78:	d118      	bne.n	90012eac <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
90012e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90012e7c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
90012e7e:	2b00      	cmp	r3, #0
90012e80:	d005      	beq.n	90012e8e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
90012e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90012e84:	685a      	ldr	r2, [r3, #4]
90012e86:	4b43      	ldr	r3, [pc, #268]	; (90012f94 <udp_input+0x218>)
90012e88:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
90012e8a:	429a      	cmp	r2, r3
90012e8c:	d10e      	bne.n	90012eac <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
90012e8e:	6a3b      	ldr	r3, [r7, #32]
90012e90:	2b00      	cmp	r3, #0
90012e92:	d014      	beq.n	90012ebe <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
90012e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90012e96:	68da      	ldr	r2, [r3, #12]
90012e98:	6a3b      	ldr	r3, [r7, #32]
90012e9a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
90012e9c:	4b3e      	ldr	r3, [pc, #248]	; (90012f98 <udp_input+0x21c>)
90012e9e:	681a      	ldr	r2, [r3, #0]
90012ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90012ea2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
90012ea4:	4a3c      	ldr	r2, [pc, #240]	; (90012f98 <udp_input+0x21c>)
90012ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90012ea8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
90012eaa:	e008      	b.n	90012ebe <udp_input+0x142>
      }
    }

    prev = pcb;
90012eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90012eae:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
90012eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90012eb2:	68db      	ldr	r3, [r3, #12]
90012eb4:	627b      	str	r3, [r7, #36]	; 0x24
90012eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90012eb8:	2b00      	cmp	r3, #0
90012eba:	d1a7      	bne.n	90012e0c <udp_input+0x90>
90012ebc:	e000      	b.n	90012ec0 <udp_input+0x144>
        break;
90012ebe:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
90012ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90012ec2:	2b00      	cmp	r3, #0
90012ec4:	d101      	bne.n	90012eca <udp_input+0x14e>
    pcb = uncon_pcb;
90012ec6:	69fb      	ldr	r3, [r7, #28]
90012ec8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
90012eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90012ecc:	2b00      	cmp	r3, #0
90012ece:	d002      	beq.n	90012ed6 <udp_input+0x15a>
    for_us = 1;
90012ed0:	2301      	movs	r3, #1
90012ed2:	76fb      	strb	r3, [r7, #27]
90012ed4:	e00a      	b.n	90012eec <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
90012ed6:	683b      	ldr	r3, [r7, #0]
90012ed8:	3304      	adds	r3, #4
90012eda:	681a      	ldr	r2, [r3, #0]
90012edc:	4b2d      	ldr	r3, [pc, #180]	; (90012f94 <udp_input+0x218>)
90012ede:	695b      	ldr	r3, [r3, #20]
90012ee0:	429a      	cmp	r2, r3
90012ee2:	bf0c      	ite	eq
90012ee4:	2301      	moveq	r3, #1
90012ee6:	2300      	movne	r3, #0
90012ee8:	b2db      	uxtb	r3, r3
90012eea:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
90012eec:	7efb      	ldrb	r3, [r7, #27]
90012eee:	2b00      	cmp	r3, #0
90012ef0:	d041      	beq.n	90012f76 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
90012ef2:	2108      	movs	r1, #8
90012ef4:	6878      	ldr	r0, [r7, #4]
90012ef6:	f7f9 f9d7 	bl	9000c2a8 <pbuf_remove_header>
90012efa:	4603      	mov	r3, r0
90012efc:	2b00      	cmp	r3, #0
90012efe:	d00a      	beq.n	90012f16 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
90012f00:	4b20      	ldr	r3, [pc, #128]	; (90012f84 <udp_input+0x208>)
90012f02:	f44f 72b8 	mov.w	r2, #368	; 0x170
90012f06:	4925      	ldr	r1, [pc, #148]	; (90012f9c <udp_input+0x220>)
90012f08:	4820      	ldr	r0, [pc, #128]	; (90012f8c <udp_input+0x210>)
90012f0a:	f002 fe73 	bl	90015bf4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
90012f0e:	6878      	ldr	r0, [r7, #4]
90012f10:	f7f9 fa50 	bl	9000c3b4 <pbuf_free>
      goto end;
90012f14:	e032      	b.n	90012f7c <udp_input+0x200>
    }

    if (pcb != NULL) {
90012f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90012f18:	2b00      	cmp	r3, #0
90012f1a:	d012      	beq.n	90012f42 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
90012f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90012f1e:	699b      	ldr	r3, [r3, #24]
90012f20:	2b00      	cmp	r3, #0
90012f22:	d00a      	beq.n	90012f3a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
90012f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90012f26:	699c      	ldr	r4, [r3, #24]
90012f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90012f2a:	69d8      	ldr	r0, [r3, #28]
90012f2c:	8a3b      	ldrh	r3, [r7, #16]
90012f2e:	9300      	str	r3, [sp, #0]
90012f30:	4b1b      	ldr	r3, [pc, #108]	; (90012fa0 <udp_input+0x224>)
90012f32:	687a      	ldr	r2, [r7, #4]
90012f34:	6a79      	ldr	r1, [r7, #36]	; 0x24
90012f36:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
90012f38:	e021      	b.n	90012f7e <udp_input+0x202>
        pbuf_free(p);
90012f3a:	6878      	ldr	r0, [r7, #4]
90012f3c:	f7f9 fa3a 	bl	9000c3b4 <pbuf_free>
        goto end;
90012f40:	e01c      	b.n	90012f7c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
90012f42:	7cfb      	ldrb	r3, [r7, #19]
90012f44:	2b00      	cmp	r3, #0
90012f46:	d112      	bne.n	90012f6e <udp_input+0x1f2>
90012f48:	4b12      	ldr	r3, [pc, #72]	; (90012f94 <udp_input+0x218>)
90012f4a:	695b      	ldr	r3, [r3, #20]
90012f4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
90012f50:	2be0      	cmp	r3, #224	; 0xe0
90012f52:	d00c      	beq.n	90012f6e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
90012f54:	4b0f      	ldr	r3, [pc, #60]	; (90012f94 <udp_input+0x218>)
90012f56:	899b      	ldrh	r3, [r3, #12]
90012f58:	3308      	adds	r3, #8
90012f5a:	b29b      	uxth	r3, r3
90012f5c:	b21b      	sxth	r3, r3
90012f5e:	4619      	mov	r1, r3
90012f60:	6878      	ldr	r0, [r7, #4]
90012f62:	f7f9 fa14 	bl	9000c38e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
90012f66:	2103      	movs	r1, #3
90012f68:	6878      	ldr	r0, [r7, #4]
90012f6a:	f001 f8b7 	bl	900140dc <icmp_dest_unreach>
      pbuf_free(p);
90012f6e:	6878      	ldr	r0, [r7, #4]
90012f70:	f7f9 fa20 	bl	9000c3b4 <pbuf_free>
  return;
90012f74:	e003      	b.n	90012f7e <udp_input+0x202>
    pbuf_free(p);
90012f76:	6878      	ldr	r0, [r7, #4]
90012f78:	f7f9 fa1c 	bl	9000c3b4 <pbuf_free>
  return;
90012f7c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
90012f7e:	372c      	adds	r7, #44	; 0x2c
90012f80:	46bd      	mov	sp, r7
90012f82:	bd90      	pop	{r4, r7, pc}
90012f84:	90019d14 	.word	0x90019d14
90012f88:	90019db8 	.word	0x90019db8
90012f8c:	90019d68 	.word	0x90019d68
90012f90:	90019dd0 	.word	0x90019dd0
90012f94:	2401c1c8 	.word	0x2401c1c8
90012f98:	2401f400 	.word	0x2401f400
90012f9c:	90019dec 	.word	0x90019dec
90012fa0:	2401c1d8 	.word	0x2401c1d8

90012fa4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
90012fa4:	b480      	push	{r7}
90012fa6:	b085      	sub	sp, #20
90012fa8:	af00      	add	r7, sp, #0
90012faa:	6078      	str	r0, [r7, #4]
90012fac:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
90012fae:	687b      	ldr	r3, [r7, #4]
90012fb0:	2b00      	cmp	r3, #0
90012fb2:	d01e      	beq.n	90012ff2 <udp_netif_ip_addr_changed+0x4e>
90012fb4:	687b      	ldr	r3, [r7, #4]
90012fb6:	681b      	ldr	r3, [r3, #0]
90012fb8:	2b00      	cmp	r3, #0
90012fba:	d01a      	beq.n	90012ff2 <udp_netif_ip_addr_changed+0x4e>
90012fbc:	683b      	ldr	r3, [r7, #0]
90012fbe:	2b00      	cmp	r3, #0
90012fc0:	d017      	beq.n	90012ff2 <udp_netif_ip_addr_changed+0x4e>
90012fc2:	683b      	ldr	r3, [r7, #0]
90012fc4:	681b      	ldr	r3, [r3, #0]
90012fc6:	2b00      	cmp	r3, #0
90012fc8:	d013      	beq.n	90012ff2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
90012fca:	4b0d      	ldr	r3, [pc, #52]	; (90013000 <udp_netif_ip_addr_changed+0x5c>)
90012fcc:	681b      	ldr	r3, [r3, #0]
90012fce:	60fb      	str	r3, [r7, #12]
90012fd0:	e00c      	b.n	90012fec <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
90012fd2:	68fb      	ldr	r3, [r7, #12]
90012fd4:	681a      	ldr	r2, [r3, #0]
90012fd6:	687b      	ldr	r3, [r7, #4]
90012fd8:	681b      	ldr	r3, [r3, #0]
90012fda:	429a      	cmp	r2, r3
90012fdc:	d103      	bne.n	90012fe6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
90012fde:	683b      	ldr	r3, [r7, #0]
90012fe0:	681a      	ldr	r2, [r3, #0]
90012fe2:	68fb      	ldr	r3, [r7, #12]
90012fe4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
90012fe6:	68fb      	ldr	r3, [r7, #12]
90012fe8:	68db      	ldr	r3, [r3, #12]
90012fea:	60fb      	str	r3, [r7, #12]
90012fec:	68fb      	ldr	r3, [r7, #12]
90012fee:	2b00      	cmp	r3, #0
90012ff0:	d1ef      	bne.n	90012fd2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
90012ff2:	bf00      	nop
90012ff4:	3714      	adds	r7, #20
90012ff6:	46bd      	mov	sp, r7
90012ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
90012ffc:	4770      	bx	lr
90012ffe:	bf00      	nop
90013000:	2401f400 	.word	0x2401f400

90013004 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
90013004:	b580      	push	{r7, lr}
90013006:	b082      	sub	sp, #8
90013008:	af00      	add	r7, sp, #0
9001300a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
9001300c:	4915      	ldr	r1, [pc, #84]	; (90013064 <etharp_free_entry+0x60>)
9001300e:	687a      	ldr	r2, [r7, #4]
90013010:	4613      	mov	r3, r2
90013012:	005b      	lsls	r3, r3, #1
90013014:	4413      	add	r3, r2
90013016:	00db      	lsls	r3, r3, #3
90013018:	440b      	add	r3, r1
9001301a:	681b      	ldr	r3, [r3, #0]
9001301c:	2b00      	cmp	r3, #0
9001301e:	d013      	beq.n	90013048 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
90013020:	4910      	ldr	r1, [pc, #64]	; (90013064 <etharp_free_entry+0x60>)
90013022:	687a      	ldr	r2, [r7, #4]
90013024:	4613      	mov	r3, r2
90013026:	005b      	lsls	r3, r3, #1
90013028:	4413      	add	r3, r2
9001302a:	00db      	lsls	r3, r3, #3
9001302c:	440b      	add	r3, r1
9001302e:	681b      	ldr	r3, [r3, #0]
90013030:	4618      	mov	r0, r3
90013032:	f7f9 f9bf 	bl	9000c3b4 <pbuf_free>
    arp_table[i].q = NULL;
90013036:	490b      	ldr	r1, [pc, #44]	; (90013064 <etharp_free_entry+0x60>)
90013038:	687a      	ldr	r2, [r7, #4]
9001303a:	4613      	mov	r3, r2
9001303c:	005b      	lsls	r3, r3, #1
9001303e:	4413      	add	r3, r2
90013040:	00db      	lsls	r3, r3, #3
90013042:	440b      	add	r3, r1
90013044:	2200      	movs	r2, #0
90013046:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
90013048:	4906      	ldr	r1, [pc, #24]	; (90013064 <etharp_free_entry+0x60>)
9001304a:	687a      	ldr	r2, [r7, #4]
9001304c:	4613      	mov	r3, r2
9001304e:	005b      	lsls	r3, r3, #1
90013050:	4413      	add	r3, r2
90013052:	00db      	lsls	r3, r3, #3
90013054:	440b      	add	r3, r1
90013056:	3314      	adds	r3, #20
90013058:	2200      	movs	r2, #0
9001305a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
9001305c:	bf00      	nop
9001305e:	3708      	adds	r7, #8
90013060:	46bd      	mov	sp, r7
90013062:	bd80      	pop	{r7, pc}
90013064:	2401f404 	.word	0x2401f404

90013068 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
90013068:	b580      	push	{r7, lr}
9001306a:	b082      	sub	sp, #8
9001306c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
9001306e:	2300      	movs	r3, #0
90013070:	607b      	str	r3, [r7, #4]
90013072:	e096      	b.n	900131a2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
90013074:	494f      	ldr	r1, [pc, #316]	; (900131b4 <etharp_tmr+0x14c>)
90013076:	687a      	ldr	r2, [r7, #4]
90013078:	4613      	mov	r3, r2
9001307a:	005b      	lsls	r3, r3, #1
9001307c:	4413      	add	r3, r2
9001307e:	00db      	lsls	r3, r3, #3
90013080:	440b      	add	r3, r1
90013082:	3314      	adds	r3, #20
90013084:	781b      	ldrb	r3, [r3, #0]
90013086:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
90013088:	78fb      	ldrb	r3, [r7, #3]
9001308a:	2b00      	cmp	r3, #0
9001308c:	f000 8086 	beq.w	9001319c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
90013090:	4948      	ldr	r1, [pc, #288]	; (900131b4 <etharp_tmr+0x14c>)
90013092:	687a      	ldr	r2, [r7, #4]
90013094:	4613      	mov	r3, r2
90013096:	005b      	lsls	r3, r3, #1
90013098:	4413      	add	r3, r2
9001309a:	00db      	lsls	r3, r3, #3
9001309c:	440b      	add	r3, r1
9001309e:	3312      	adds	r3, #18
900130a0:	881b      	ldrh	r3, [r3, #0]
900130a2:	3301      	adds	r3, #1
900130a4:	b298      	uxth	r0, r3
900130a6:	4943      	ldr	r1, [pc, #268]	; (900131b4 <etharp_tmr+0x14c>)
900130a8:	687a      	ldr	r2, [r7, #4]
900130aa:	4613      	mov	r3, r2
900130ac:	005b      	lsls	r3, r3, #1
900130ae:	4413      	add	r3, r2
900130b0:	00db      	lsls	r3, r3, #3
900130b2:	440b      	add	r3, r1
900130b4:	3312      	adds	r3, #18
900130b6:	4602      	mov	r2, r0
900130b8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
900130ba:	493e      	ldr	r1, [pc, #248]	; (900131b4 <etharp_tmr+0x14c>)
900130bc:	687a      	ldr	r2, [r7, #4]
900130be:	4613      	mov	r3, r2
900130c0:	005b      	lsls	r3, r3, #1
900130c2:	4413      	add	r3, r2
900130c4:	00db      	lsls	r3, r3, #3
900130c6:	440b      	add	r3, r1
900130c8:	3312      	adds	r3, #18
900130ca:	881b      	ldrh	r3, [r3, #0]
900130cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
900130d0:	d215      	bcs.n	900130fe <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
900130d2:	4938      	ldr	r1, [pc, #224]	; (900131b4 <etharp_tmr+0x14c>)
900130d4:	687a      	ldr	r2, [r7, #4]
900130d6:	4613      	mov	r3, r2
900130d8:	005b      	lsls	r3, r3, #1
900130da:	4413      	add	r3, r2
900130dc:	00db      	lsls	r3, r3, #3
900130de:	440b      	add	r3, r1
900130e0:	3314      	adds	r3, #20
900130e2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
900130e4:	2b01      	cmp	r3, #1
900130e6:	d10e      	bne.n	90013106 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
900130e8:	4932      	ldr	r1, [pc, #200]	; (900131b4 <etharp_tmr+0x14c>)
900130ea:	687a      	ldr	r2, [r7, #4]
900130ec:	4613      	mov	r3, r2
900130ee:	005b      	lsls	r3, r3, #1
900130f0:	4413      	add	r3, r2
900130f2:	00db      	lsls	r3, r3, #3
900130f4:	440b      	add	r3, r1
900130f6:	3312      	adds	r3, #18
900130f8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
900130fa:	2b04      	cmp	r3, #4
900130fc:	d903      	bls.n	90013106 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
900130fe:	6878      	ldr	r0, [r7, #4]
90013100:	f7ff ff80 	bl	90013004 <etharp_free_entry>
90013104:	e04a      	b.n	9001319c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
90013106:	492b      	ldr	r1, [pc, #172]	; (900131b4 <etharp_tmr+0x14c>)
90013108:	687a      	ldr	r2, [r7, #4]
9001310a:	4613      	mov	r3, r2
9001310c:	005b      	lsls	r3, r3, #1
9001310e:	4413      	add	r3, r2
90013110:	00db      	lsls	r3, r3, #3
90013112:	440b      	add	r3, r1
90013114:	3314      	adds	r3, #20
90013116:	781b      	ldrb	r3, [r3, #0]
90013118:	2b03      	cmp	r3, #3
9001311a:	d10a      	bne.n	90013132 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
9001311c:	4925      	ldr	r1, [pc, #148]	; (900131b4 <etharp_tmr+0x14c>)
9001311e:	687a      	ldr	r2, [r7, #4]
90013120:	4613      	mov	r3, r2
90013122:	005b      	lsls	r3, r3, #1
90013124:	4413      	add	r3, r2
90013126:	00db      	lsls	r3, r3, #3
90013128:	440b      	add	r3, r1
9001312a:	3314      	adds	r3, #20
9001312c:	2204      	movs	r2, #4
9001312e:	701a      	strb	r2, [r3, #0]
90013130:	e034      	b.n	9001319c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
90013132:	4920      	ldr	r1, [pc, #128]	; (900131b4 <etharp_tmr+0x14c>)
90013134:	687a      	ldr	r2, [r7, #4]
90013136:	4613      	mov	r3, r2
90013138:	005b      	lsls	r3, r3, #1
9001313a:	4413      	add	r3, r2
9001313c:	00db      	lsls	r3, r3, #3
9001313e:	440b      	add	r3, r1
90013140:	3314      	adds	r3, #20
90013142:	781b      	ldrb	r3, [r3, #0]
90013144:	2b04      	cmp	r3, #4
90013146:	d10a      	bne.n	9001315e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
90013148:	491a      	ldr	r1, [pc, #104]	; (900131b4 <etharp_tmr+0x14c>)
9001314a:	687a      	ldr	r2, [r7, #4]
9001314c:	4613      	mov	r3, r2
9001314e:	005b      	lsls	r3, r3, #1
90013150:	4413      	add	r3, r2
90013152:	00db      	lsls	r3, r3, #3
90013154:	440b      	add	r3, r1
90013156:	3314      	adds	r3, #20
90013158:	2202      	movs	r2, #2
9001315a:	701a      	strb	r2, [r3, #0]
9001315c:	e01e      	b.n	9001319c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
9001315e:	4915      	ldr	r1, [pc, #84]	; (900131b4 <etharp_tmr+0x14c>)
90013160:	687a      	ldr	r2, [r7, #4]
90013162:	4613      	mov	r3, r2
90013164:	005b      	lsls	r3, r3, #1
90013166:	4413      	add	r3, r2
90013168:	00db      	lsls	r3, r3, #3
9001316a:	440b      	add	r3, r1
9001316c:	3314      	adds	r3, #20
9001316e:	781b      	ldrb	r3, [r3, #0]
90013170:	2b01      	cmp	r3, #1
90013172:	d113      	bne.n	9001319c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
90013174:	490f      	ldr	r1, [pc, #60]	; (900131b4 <etharp_tmr+0x14c>)
90013176:	687a      	ldr	r2, [r7, #4]
90013178:	4613      	mov	r3, r2
9001317a:	005b      	lsls	r3, r3, #1
9001317c:	4413      	add	r3, r2
9001317e:	00db      	lsls	r3, r3, #3
90013180:	440b      	add	r3, r1
90013182:	3308      	adds	r3, #8
90013184:	6818      	ldr	r0, [r3, #0]
90013186:	687a      	ldr	r2, [r7, #4]
90013188:	4613      	mov	r3, r2
9001318a:	005b      	lsls	r3, r3, #1
9001318c:	4413      	add	r3, r2
9001318e:	00db      	lsls	r3, r3, #3
90013190:	4a08      	ldr	r2, [pc, #32]	; (900131b4 <etharp_tmr+0x14c>)
90013192:	4413      	add	r3, r2
90013194:	3304      	adds	r3, #4
90013196:	4619      	mov	r1, r3
90013198:	f000 fe6e 	bl	90013e78 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
9001319c:	687b      	ldr	r3, [r7, #4]
9001319e:	3301      	adds	r3, #1
900131a0:	607b      	str	r3, [r7, #4]
900131a2:	687b      	ldr	r3, [r7, #4]
900131a4:	2b09      	cmp	r3, #9
900131a6:	f77f af65 	ble.w	90013074 <etharp_tmr+0xc>
      }
    }
  }
}
900131aa:	bf00      	nop
900131ac:	bf00      	nop
900131ae:	3708      	adds	r7, #8
900131b0:	46bd      	mov	sp, r7
900131b2:	bd80      	pop	{r7, pc}
900131b4:	2401f404 	.word	0x2401f404

900131b8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
900131b8:	b580      	push	{r7, lr}
900131ba:	b08a      	sub	sp, #40	; 0x28
900131bc:	af00      	add	r7, sp, #0
900131be:	60f8      	str	r0, [r7, #12]
900131c0:	460b      	mov	r3, r1
900131c2:	607a      	str	r2, [r7, #4]
900131c4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
900131c6:	230a      	movs	r3, #10
900131c8:	84fb      	strh	r3, [r7, #38]	; 0x26
900131ca:	230a      	movs	r3, #10
900131cc:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
900131ce:	230a      	movs	r3, #10
900131d0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
900131d2:	2300      	movs	r3, #0
900131d4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
900131d6:	230a      	movs	r3, #10
900131d8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
900131da:	2300      	movs	r3, #0
900131dc:	83bb      	strh	r3, [r7, #28]
900131de:	2300      	movs	r3, #0
900131e0:	837b      	strh	r3, [r7, #26]
900131e2:	2300      	movs	r3, #0
900131e4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
900131e6:	2300      	movs	r3, #0
900131e8:	843b      	strh	r3, [r7, #32]
900131ea:	e0ae      	b.n	9001334a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
900131ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
900131f0:	49a6      	ldr	r1, [pc, #664]	; (9001348c <etharp_find_entry+0x2d4>)
900131f2:	4613      	mov	r3, r2
900131f4:	005b      	lsls	r3, r3, #1
900131f6:	4413      	add	r3, r2
900131f8:	00db      	lsls	r3, r3, #3
900131fa:	440b      	add	r3, r1
900131fc:	3314      	adds	r3, #20
900131fe:	781b      	ldrb	r3, [r3, #0]
90013200:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
90013202:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
90013206:	2b0a      	cmp	r3, #10
90013208:	d105      	bne.n	90013216 <etharp_find_entry+0x5e>
9001320a:	7dfb      	ldrb	r3, [r7, #23]
9001320c:	2b00      	cmp	r3, #0
9001320e:	d102      	bne.n	90013216 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
90013210:	8c3b      	ldrh	r3, [r7, #32]
90013212:	847b      	strh	r3, [r7, #34]	; 0x22
90013214:	e095      	b.n	90013342 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
90013216:	7dfb      	ldrb	r3, [r7, #23]
90013218:	2b00      	cmp	r3, #0
9001321a:	f000 8092 	beq.w	90013342 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
9001321e:	7dfb      	ldrb	r3, [r7, #23]
90013220:	2b01      	cmp	r3, #1
90013222:	d009      	beq.n	90013238 <etharp_find_entry+0x80>
90013224:	7dfb      	ldrb	r3, [r7, #23]
90013226:	2b01      	cmp	r3, #1
90013228:	d806      	bhi.n	90013238 <etharp_find_entry+0x80>
9001322a:	4b99      	ldr	r3, [pc, #612]	; (90013490 <etharp_find_entry+0x2d8>)
9001322c:	f240 1223 	movw	r2, #291	; 0x123
90013230:	4998      	ldr	r1, [pc, #608]	; (90013494 <etharp_find_entry+0x2dc>)
90013232:	4899      	ldr	r0, [pc, #612]	; (90013498 <etharp_find_entry+0x2e0>)
90013234:	f002 fcde 	bl	90015bf4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
90013238:	68fb      	ldr	r3, [r7, #12]
9001323a:	2b00      	cmp	r3, #0
9001323c:	d020      	beq.n	90013280 <etharp_find_entry+0xc8>
9001323e:	68fb      	ldr	r3, [r7, #12]
90013240:	6819      	ldr	r1, [r3, #0]
90013242:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
90013246:	4891      	ldr	r0, [pc, #580]	; (9001348c <etharp_find_entry+0x2d4>)
90013248:	4613      	mov	r3, r2
9001324a:	005b      	lsls	r3, r3, #1
9001324c:	4413      	add	r3, r2
9001324e:	00db      	lsls	r3, r3, #3
90013250:	4403      	add	r3, r0
90013252:	3304      	adds	r3, #4
90013254:	681b      	ldr	r3, [r3, #0]
90013256:	4299      	cmp	r1, r3
90013258:	d112      	bne.n	90013280 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
9001325a:	687b      	ldr	r3, [r7, #4]
9001325c:	2b00      	cmp	r3, #0
9001325e:	d00c      	beq.n	9001327a <etharp_find_entry+0xc2>
90013260:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
90013264:	4989      	ldr	r1, [pc, #548]	; (9001348c <etharp_find_entry+0x2d4>)
90013266:	4613      	mov	r3, r2
90013268:	005b      	lsls	r3, r3, #1
9001326a:	4413      	add	r3, r2
9001326c:	00db      	lsls	r3, r3, #3
9001326e:	440b      	add	r3, r1
90013270:	3308      	adds	r3, #8
90013272:	681b      	ldr	r3, [r3, #0]
90013274:	687a      	ldr	r2, [r7, #4]
90013276:	429a      	cmp	r2, r3
90013278:	d102      	bne.n	90013280 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
9001327a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
9001327e:	e100      	b.n	90013482 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
90013280:	7dfb      	ldrb	r3, [r7, #23]
90013282:	2b01      	cmp	r3, #1
90013284:	d140      	bne.n	90013308 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
90013286:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
9001328a:	4980      	ldr	r1, [pc, #512]	; (9001348c <etharp_find_entry+0x2d4>)
9001328c:	4613      	mov	r3, r2
9001328e:	005b      	lsls	r3, r3, #1
90013290:	4413      	add	r3, r2
90013292:	00db      	lsls	r3, r3, #3
90013294:	440b      	add	r3, r1
90013296:	681b      	ldr	r3, [r3, #0]
90013298:	2b00      	cmp	r3, #0
9001329a:	d01a      	beq.n	900132d2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
9001329c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
900132a0:	497a      	ldr	r1, [pc, #488]	; (9001348c <etharp_find_entry+0x2d4>)
900132a2:	4613      	mov	r3, r2
900132a4:	005b      	lsls	r3, r3, #1
900132a6:	4413      	add	r3, r2
900132a8:	00db      	lsls	r3, r3, #3
900132aa:	440b      	add	r3, r1
900132ac:	3312      	adds	r3, #18
900132ae:	881b      	ldrh	r3, [r3, #0]
900132b0:	8bba      	ldrh	r2, [r7, #28]
900132b2:	429a      	cmp	r2, r3
900132b4:	d845      	bhi.n	90013342 <etharp_find_entry+0x18a>
            old_queue = i;
900132b6:	8c3b      	ldrh	r3, [r7, #32]
900132b8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
900132ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
900132be:	4973      	ldr	r1, [pc, #460]	; (9001348c <etharp_find_entry+0x2d4>)
900132c0:	4613      	mov	r3, r2
900132c2:	005b      	lsls	r3, r3, #1
900132c4:	4413      	add	r3, r2
900132c6:	00db      	lsls	r3, r3, #3
900132c8:	440b      	add	r3, r1
900132ca:	3312      	adds	r3, #18
900132cc:	881b      	ldrh	r3, [r3, #0]
900132ce:	83bb      	strh	r3, [r7, #28]
900132d0:	e037      	b.n	90013342 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
900132d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
900132d6:	496d      	ldr	r1, [pc, #436]	; (9001348c <etharp_find_entry+0x2d4>)
900132d8:	4613      	mov	r3, r2
900132da:	005b      	lsls	r3, r3, #1
900132dc:	4413      	add	r3, r2
900132de:	00db      	lsls	r3, r3, #3
900132e0:	440b      	add	r3, r1
900132e2:	3312      	adds	r3, #18
900132e4:	881b      	ldrh	r3, [r3, #0]
900132e6:	8b7a      	ldrh	r2, [r7, #26]
900132e8:	429a      	cmp	r2, r3
900132ea:	d82a      	bhi.n	90013342 <etharp_find_entry+0x18a>
            old_pending = i;
900132ec:	8c3b      	ldrh	r3, [r7, #32]
900132ee:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
900132f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
900132f4:	4965      	ldr	r1, [pc, #404]	; (9001348c <etharp_find_entry+0x2d4>)
900132f6:	4613      	mov	r3, r2
900132f8:	005b      	lsls	r3, r3, #1
900132fa:	4413      	add	r3, r2
900132fc:	00db      	lsls	r3, r3, #3
900132fe:	440b      	add	r3, r1
90013300:	3312      	adds	r3, #18
90013302:	881b      	ldrh	r3, [r3, #0]
90013304:	837b      	strh	r3, [r7, #26]
90013306:	e01c      	b.n	90013342 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
90013308:	7dfb      	ldrb	r3, [r7, #23]
9001330a:	2b01      	cmp	r3, #1
9001330c:	d919      	bls.n	90013342 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
9001330e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
90013312:	495e      	ldr	r1, [pc, #376]	; (9001348c <etharp_find_entry+0x2d4>)
90013314:	4613      	mov	r3, r2
90013316:	005b      	lsls	r3, r3, #1
90013318:	4413      	add	r3, r2
9001331a:	00db      	lsls	r3, r3, #3
9001331c:	440b      	add	r3, r1
9001331e:	3312      	adds	r3, #18
90013320:	881b      	ldrh	r3, [r3, #0]
90013322:	8b3a      	ldrh	r2, [r7, #24]
90013324:	429a      	cmp	r2, r3
90013326:	d80c      	bhi.n	90013342 <etharp_find_entry+0x18a>
            old_stable = i;
90013328:	8c3b      	ldrh	r3, [r7, #32]
9001332a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
9001332c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
90013330:	4956      	ldr	r1, [pc, #344]	; (9001348c <etharp_find_entry+0x2d4>)
90013332:	4613      	mov	r3, r2
90013334:	005b      	lsls	r3, r3, #1
90013336:	4413      	add	r3, r2
90013338:	00db      	lsls	r3, r3, #3
9001333a:	440b      	add	r3, r1
9001333c:	3312      	adds	r3, #18
9001333e:	881b      	ldrh	r3, [r3, #0]
90013340:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
90013342:	8c3b      	ldrh	r3, [r7, #32]
90013344:	3301      	adds	r3, #1
90013346:	b29b      	uxth	r3, r3
90013348:	843b      	strh	r3, [r7, #32]
9001334a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
9001334e:	2b09      	cmp	r3, #9
90013350:	f77f af4c 	ble.w	900131ec <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
90013354:	7afb      	ldrb	r3, [r7, #11]
90013356:	f003 0302 	and.w	r3, r3, #2
9001335a:	2b00      	cmp	r3, #0
9001335c:	d108      	bne.n	90013370 <etharp_find_entry+0x1b8>
9001335e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
90013362:	2b0a      	cmp	r3, #10
90013364:	d107      	bne.n	90013376 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
90013366:	7afb      	ldrb	r3, [r7, #11]
90013368:	f003 0301 	and.w	r3, r3, #1
9001336c:	2b00      	cmp	r3, #0
9001336e:	d102      	bne.n	90013376 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
90013370:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90013374:	e085      	b.n	90013482 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
90013376:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
9001337a:	2b09      	cmp	r3, #9
9001337c:	dc02      	bgt.n	90013384 <etharp_find_entry+0x1cc>
    i = empty;
9001337e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
90013380:	843b      	strh	r3, [r7, #32]
90013382:	e039      	b.n	900133f8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
90013384:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
90013388:	2b09      	cmp	r3, #9
9001338a:	dc14      	bgt.n	900133b6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
9001338c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
9001338e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
90013390:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
90013394:	493d      	ldr	r1, [pc, #244]	; (9001348c <etharp_find_entry+0x2d4>)
90013396:	4613      	mov	r3, r2
90013398:	005b      	lsls	r3, r3, #1
9001339a:	4413      	add	r3, r2
9001339c:	00db      	lsls	r3, r3, #3
9001339e:	440b      	add	r3, r1
900133a0:	681b      	ldr	r3, [r3, #0]
900133a2:	2b00      	cmp	r3, #0
900133a4:	d018      	beq.n	900133d8 <etharp_find_entry+0x220>
900133a6:	4b3a      	ldr	r3, [pc, #232]	; (90013490 <etharp_find_entry+0x2d8>)
900133a8:	f240 126d 	movw	r2, #365	; 0x16d
900133ac:	493b      	ldr	r1, [pc, #236]	; (9001349c <etharp_find_entry+0x2e4>)
900133ae:	483a      	ldr	r0, [pc, #232]	; (90013498 <etharp_find_entry+0x2e0>)
900133b0:	f002 fc20 	bl	90015bf4 <iprintf>
900133b4:	e010      	b.n	900133d8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
900133b6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
900133ba:	2b09      	cmp	r3, #9
900133bc:	dc02      	bgt.n	900133c4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
900133be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
900133c0:	843b      	strh	r3, [r7, #32]
900133c2:	e009      	b.n	900133d8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
900133c4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
900133c8:	2b09      	cmp	r3, #9
900133ca:	dc02      	bgt.n	900133d2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
900133cc:	8bfb      	ldrh	r3, [r7, #30]
900133ce:	843b      	strh	r3, [r7, #32]
900133d0:	e002      	b.n	900133d8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
900133d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
900133d6:	e054      	b.n	90013482 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
900133d8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
900133dc:	2b09      	cmp	r3, #9
900133de:	dd06      	ble.n	900133ee <etharp_find_entry+0x236>
900133e0:	4b2b      	ldr	r3, [pc, #172]	; (90013490 <etharp_find_entry+0x2d8>)
900133e2:	f240 127f 	movw	r2, #383	; 0x17f
900133e6:	492e      	ldr	r1, [pc, #184]	; (900134a0 <etharp_find_entry+0x2e8>)
900133e8:	482b      	ldr	r0, [pc, #172]	; (90013498 <etharp_find_entry+0x2e0>)
900133ea:	f002 fc03 	bl	90015bf4 <iprintf>
    etharp_free_entry(i);
900133ee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
900133f2:	4618      	mov	r0, r3
900133f4:	f7ff fe06 	bl	90013004 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
900133f8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
900133fc:	2b09      	cmp	r3, #9
900133fe:	dd06      	ble.n	9001340e <etharp_find_entry+0x256>
90013400:	4b23      	ldr	r3, [pc, #140]	; (90013490 <etharp_find_entry+0x2d8>)
90013402:	f240 1283 	movw	r2, #387	; 0x183
90013406:	4926      	ldr	r1, [pc, #152]	; (900134a0 <etharp_find_entry+0x2e8>)
90013408:	4823      	ldr	r0, [pc, #140]	; (90013498 <etharp_find_entry+0x2e0>)
9001340a:	f002 fbf3 	bl	90015bf4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
9001340e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
90013412:	491e      	ldr	r1, [pc, #120]	; (9001348c <etharp_find_entry+0x2d4>)
90013414:	4613      	mov	r3, r2
90013416:	005b      	lsls	r3, r3, #1
90013418:	4413      	add	r3, r2
9001341a:	00db      	lsls	r3, r3, #3
9001341c:	440b      	add	r3, r1
9001341e:	3314      	adds	r3, #20
90013420:	781b      	ldrb	r3, [r3, #0]
90013422:	2b00      	cmp	r3, #0
90013424:	d006      	beq.n	90013434 <etharp_find_entry+0x27c>
90013426:	4b1a      	ldr	r3, [pc, #104]	; (90013490 <etharp_find_entry+0x2d8>)
90013428:	f44f 72c2 	mov.w	r2, #388	; 0x184
9001342c:	491d      	ldr	r1, [pc, #116]	; (900134a4 <etharp_find_entry+0x2ec>)
9001342e:	481a      	ldr	r0, [pc, #104]	; (90013498 <etharp_find_entry+0x2e0>)
90013430:	f002 fbe0 	bl	90015bf4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
90013434:	68fb      	ldr	r3, [r7, #12]
90013436:	2b00      	cmp	r3, #0
90013438:	d00b      	beq.n	90013452 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
9001343a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
9001343e:	68fb      	ldr	r3, [r7, #12]
90013440:	6819      	ldr	r1, [r3, #0]
90013442:	4812      	ldr	r0, [pc, #72]	; (9001348c <etharp_find_entry+0x2d4>)
90013444:	4613      	mov	r3, r2
90013446:	005b      	lsls	r3, r3, #1
90013448:	4413      	add	r3, r2
9001344a:	00db      	lsls	r3, r3, #3
9001344c:	4403      	add	r3, r0
9001344e:	3304      	adds	r3, #4
90013450:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
90013452:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
90013456:	490d      	ldr	r1, [pc, #52]	; (9001348c <etharp_find_entry+0x2d4>)
90013458:	4613      	mov	r3, r2
9001345a:	005b      	lsls	r3, r3, #1
9001345c:	4413      	add	r3, r2
9001345e:	00db      	lsls	r3, r3, #3
90013460:	440b      	add	r3, r1
90013462:	3312      	adds	r3, #18
90013464:	2200      	movs	r2, #0
90013466:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
90013468:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
9001346c:	4907      	ldr	r1, [pc, #28]	; (9001348c <etharp_find_entry+0x2d4>)
9001346e:	4613      	mov	r3, r2
90013470:	005b      	lsls	r3, r3, #1
90013472:	4413      	add	r3, r2
90013474:	00db      	lsls	r3, r3, #3
90013476:	440b      	add	r3, r1
90013478:	3308      	adds	r3, #8
9001347a:	687a      	ldr	r2, [r7, #4]
9001347c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
9001347e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
90013482:	4618      	mov	r0, r3
90013484:	3728      	adds	r7, #40	; 0x28
90013486:	46bd      	mov	sp, r7
90013488:	bd80      	pop	{r7, pc}
9001348a:	bf00      	nop
9001348c:	2401f404 	.word	0x2401f404
90013490:	9001a078 	.word	0x9001a078
90013494:	9001a0b0 	.word	0x9001a0b0
90013498:	9001a0f0 	.word	0x9001a0f0
9001349c:	9001a118 	.word	0x9001a118
900134a0:	9001a130 	.word	0x9001a130
900134a4:	9001a144 	.word	0x9001a144

900134a8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
900134a8:	b580      	push	{r7, lr}
900134aa:	b088      	sub	sp, #32
900134ac:	af02      	add	r7, sp, #8
900134ae:	60f8      	str	r0, [r7, #12]
900134b0:	60b9      	str	r1, [r7, #8]
900134b2:	607a      	str	r2, [r7, #4]
900134b4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
900134b6:	68fb      	ldr	r3, [r7, #12]
900134b8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
900134bc:	2b06      	cmp	r3, #6
900134be:	d006      	beq.n	900134ce <etharp_update_arp_entry+0x26>
900134c0:	4b48      	ldr	r3, [pc, #288]	; (900135e4 <etharp_update_arp_entry+0x13c>)
900134c2:	f240 12a9 	movw	r2, #425	; 0x1a9
900134c6:	4948      	ldr	r1, [pc, #288]	; (900135e8 <etharp_update_arp_entry+0x140>)
900134c8:	4848      	ldr	r0, [pc, #288]	; (900135ec <etharp_update_arp_entry+0x144>)
900134ca:	f002 fb93 	bl	90015bf4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
900134ce:	68bb      	ldr	r3, [r7, #8]
900134d0:	2b00      	cmp	r3, #0
900134d2:	d012      	beq.n	900134fa <etharp_update_arp_entry+0x52>
900134d4:	68bb      	ldr	r3, [r7, #8]
900134d6:	681b      	ldr	r3, [r3, #0]
900134d8:	2b00      	cmp	r3, #0
900134da:	d00e      	beq.n	900134fa <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
900134dc:	68bb      	ldr	r3, [r7, #8]
900134de:	681b      	ldr	r3, [r3, #0]
900134e0:	68f9      	ldr	r1, [r7, #12]
900134e2:	4618      	mov	r0, r3
900134e4:	f001 f924 	bl	90014730 <ip4_addr_isbroadcast_u32>
900134e8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
900134ea:	2b00      	cmp	r3, #0
900134ec:	d105      	bne.n	900134fa <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
900134ee:	68bb      	ldr	r3, [r7, #8]
900134f0:	681b      	ldr	r3, [r3, #0]
900134f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
900134f6:	2be0      	cmp	r3, #224	; 0xe0
900134f8:	d102      	bne.n	90013500 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
900134fa:	f06f 030f 	mvn.w	r3, #15
900134fe:	e06c      	b.n	900135da <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
90013500:	78fb      	ldrb	r3, [r7, #3]
90013502:	68fa      	ldr	r2, [r7, #12]
90013504:	4619      	mov	r1, r3
90013506:	68b8      	ldr	r0, [r7, #8]
90013508:	f7ff fe56 	bl	900131b8 <etharp_find_entry>
9001350c:	4603      	mov	r3, r0
9001350e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
90013510:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
90013514:	2b00      	cmp	r3, #0
90013516:	da02      	bge.n	9001351e <etharp_update_arp_entry+0x76>
    return (err_t)i;
90013518:	8afb      	ldrh	r3, [r7, #22]
9001351a:	b25b      	sxtb	r3, r3
9001351c:	e05d      	b.n	900135da <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
9001351e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
90013522:	4933      	ldr	r1, [pc, #204]	; (900135f0 <etharp_update_arp_entry+0x148>)
90013524:	4613      	mov	r3, r2
90013526:	005b      	lsls	r3, r3, #1
90013528:	4413      	add	r3, r2
9001352a:	00db      	lsls	r3, r3, #3
9001352c:	440b      	add	r3, r1
9001352e:	3314      	adds	r3, #20
90013530:	2202      	movs	r2, #2
90013532:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
90013534:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
90013538:	492d      	ldr	r1, [pc, #180]	; (900135f0 <etharp_update_arp_entry+0x148>)
9001353a:	4613      	mov	r3, r2
9001353c:	005b      	lsls	r3, r3, #1
9001353e:	4413      	add	r3, r2
90013540:	00db      	lsls	r3, r3, #3
90013542:	440b      	add	r3, r1
90013544:	3308      	adds	r3, #8
90013546:	68fa      	ldr	r2, [r7, #12]
90013548:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
9001354a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
9001354e:	4613      	mov	r3, r2
90013550:	005b      	lsls	r3, r3, #1
90013552:	4413      	add	r3, r2
90013554:	00db      	lsls	r3, r3, #3
90013556:	3308      	adds	r3, #8
90013558:	4a25      	ldr	r2, [pc, #148]	; (900135f0 <etharp_update_arp_entry+0x148>)
9001355a:	4413      	add	r3, r2
9001355c:	3304      	adds	r3, #4
9001355e:	2206      	movs	r2, #6
90013560:	6879      	ldr	r1, [r7, #4]
90013562:	4618      	mov	r0, r3
90013564:	f002 fa81 	bl	90015a6a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
90013568:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
9001356c:	4920      	ldr	r1, [pc, #128]	; (900135f0 <etharp_update_arp_entry+0x148>)
9001356e:	4613      	mov	r3, r2
90013570:	005b      	lsls	r3, r3, #1
90013572:	4413      	add	r3, r2
90013574:	00db      	lsls	r3, r3, #3
90013576:	440b      	add	r3, r1
90013578:	3312      	adds	r3, #18
9001357a:	2200      	movs	r2, #0
9001357c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
9001357e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
90013582:	491b      	ldr	r1, [pc, #108]	; (900135f0 <etharp_update_arp_entry+0x148>)
90013584:	4613      	mov	r3, r2
90013586:	005b      	lsls	r3, r3, #1
90013588:	4413      	add	r3, r2
9001358a:	00db      	lsls	r3, r3, #3
9001358c:	440b      	add	r3, r1
9001358e:	681b      	ldr	r3, [r3, #0]
90013590:	2b00      	cmp	r3, #0
90013592:	d021      	beq.n	900135d8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
90013594:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
90013598:	4915      	ldr	r1, [pc, #84]	; (900135f0 <etharp_update_arp_entry+0x148>)
9001359a:	4613      	mov	r3, r2
9001359c:	005b      	lsls	r3, r3, #1
9001359e:	4413      	add	r3, r2
900135a0:	00db      	lsls	r3, r3, #3
900135a2:	440b      	add	r3, r1
900135a4:	681b      	ldr	r3, [r3, #0]
900135a6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
900135a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
900135ac:	4910      	ldr	r1, [pc, #64]	; (900135f0 <etharp_update_arp_entry+0x148>)
900135ae:	4613      	mov	r3, r2
900135b0:	005b      	lsls	r3, r3, #1
900135b2:	4413      	add	r3, r2
900135b4:	00db      	lsls	r3, r3, #3
900135b6:	440b      	add	r3, r1
900135b8:	2200      	movs	r2, #0
900135ba:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
900135bc:	68fb      	ldr	r3, [r7, #12]
900135be:	f103 0226 	add.w	r2, r3, #38	; 0x26
900135c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
900135c6:	9300      	str	r3, [sp, #0]
900135c8:	687b      	ldr	r3, [r7, #4]
900135ca:	6939      	ldr	r1, [r7, #16]
900135cc:	68f8      	ldr	r0, [r7, #12]
900135ce:	f001 ffbd 	bl	9001554c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
900135d2:	6938      	ldr	r0, [r7, #16]
900135d4:	f7f8 feee 	bl	9000c3b4 <pbuf_free>
  }
  return ERR_OK;
900135d8:	2300      	movs	r3, #0
}
900135da:	4618      	mov	r0, r3
900135dc:	3718      	adds	r7, #24
900135de:	46bd      	mov	sp, r7
900135e0:	bd80      	pop	{r7, pc}
900135e2:	bf00      	nop
900135e4:	9001a078 	.word	0x9001a078
900135e8:	9001a170 	.word	0x9001a170
900135ec:	9001a0f0 	.word	0x9001a0f0
900135f0:	2401f404 	.word	0x2401f404

900135f4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
900135f4:	b580      	push	{r7, lr}
900135f6:	b084      	sub	sp, #16
900135f8:	af00      	add	r7, sp, #0
900135fa:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
900135fc:	2300      	movs	r3, #0
900135fe:	60fb      	str	r3, [r7, #12]
90013600:	e01e      	b.n	90013640 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
90013602:	4913      	ldr	r1, [pc, #76]	; (90013650 <etharp_cleanup_netif+0x5c>)
90013604:	68fa      	ldr	r2, [r7, #12]
90013606:	4613      	mov	r3, r2
90013608:	005b      	lsls	r3, r3, #1
9001360a:	4413      	add	r3, r2
9001360c:	00db      	lsls	r3, r3, #3
9001360e:	440b      	add	r3, r1
90013610:	3314      	adds	r3, #20
90013612:	781b      	ldrb	r3, [r3, #0]
90013614:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
90013616:	7afb      	ldrb	r3, [r7, #11]
90013618:	2b00      	cmp	r3, #0
9001361a:	d00e      	beq.n	9001363a <etharp_cleanup_netif+0x46>
9001361c:	490c      	ldr	r1, [pc, #48]	; (90013650 <etharp_cleanup_netif+0x5c>)
9001361e:	68fa      	ldr	r2, [r7, #12]
90013620:	4613      	mov	r3, r2
90013622:	005b      	lsls	r3, r3, #1
90013624:	4413      	add	r3, r2
90013626:	00db      	lsls	r3, r3, #3
90013628:	440b      	add	r3, r1
9001362a:	3308      	adds	r3, #8
9001362c:	681b      	ldr	r3, [r3, #0]
9001362e:	687a      	ldr	r2, [r7, #4]
90013630:	429a      	cmp	r2, r3
90013632:	d102      	bne.n	9001363a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
90013634:	68f8      	ldr	r0, [r7, #12]
90013636:	f7ff fce5 	bl	90013004 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
9001363a:	68fb      	ldr	r3, [r7, #12]
9001363c:	3301      	adds	r3, #1
9001363e:	60fb      	str	r3, [r7, #12]
90013640:	68fb      	ldr	r3, [r7, #12]
90013642:	2b09      	cmp	r3, #9
90013644:	dddd      	ble.n	90013602 <etharp_cleanup_netif+0xe>
    }
  }
}
90013646:	bf00      	nop
90013648:	bf00      	nop
9001364a:	3710      	adds	r7, #16
9001364c:	46bd      	mov	sp, r7
9001364e:	bd80      	pop	{r7, pc}
90013650:	2401f404 	.word	0x2401f404

90013654 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
90013654:	b5b0      	push	{r4, r5, r7, lr}
90013656:	b08a      	sub	sp, #40	; 0x28
90013658:	af04      	add	r7, sp, #16
9001365a:	6078      	str	r0, [r7, #4]
9001365c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
9001365e:	683b      	ldr	r3, [r7, #0]
90013660:	2b00      	cmp	r3, #0
90013662:	d107      	bne.n	90013674 <etharp_input+0x20>
90013664:	4b3d      	ldr	r3, [pc, #244]	; (9001375c <etharp_input+0x108>)
90013666:	f240 228a 	movw	r2, #650	; 0x28a
9001366a:	493d      	ldr	r1, [pc, #244]	; (90013760 <etharp_input+0x10c>)
9001366c:	483d      	ldr	r0, [pc, #244]	; (90013764 <etharp_input+0x110>)
9001366e:	f002 fac1 	bl	90015bf4 <iprintf>
90013672:	e06f      	b.n	90013754 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
90013674:	687b      	ldr	r3, [r7, #4]
90013676:	685b      	ldr	r3, [r3, #4]
90013678:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
9001367a:	693b      	ldr	r3, [r7, #16]
9001367c:	881b      	ldrh	r3, [r3, #0]
9001367e:	b29b      	uxth	r3, r3
90013680:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90013684:	d10c      	bne.n	900136a0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
90013686:	693b      	ldr	r3, [r7, #16]
90013688:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
9001368a:	2b06      	cmp	r3, #6
9001368c:	d108      	bne.n	900136a0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
9001368e:	693b      	ldr	r3, [r7, #16]
90013690:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
90013692:	2b04      	cmp	r3, #4
90013694:	d104      	bne.n	900136a0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
90013696:	693b      	ldr	r3, [r7, #16]
90013698:	885b      	ldrh	r3, [r3, #2]
9001369a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
9001369c:	2b08      	cmp	r3, #8
9001369e:	d003      	beq.n	900136a8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
900136a0:	6878      	ldr	r0, [r7, #4]
900136a2:	f7f8 fe87 	bl	9000c3b4 <pbuf_free>
    return;
900136a6:	e055      	b.n	90013754 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
900136a8:	693b      	ldr	r3, [r7, #16]
900136aa:	330e      	adds	r3, #14
900136ac:	681b      	ldr	r3, [r3, #0]
900136ae:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
900136b0:	693b      	ldr	r3, [r7, #16]
900136b2:	3318      	adds	r3, #24
900136b4:	681b      	ldr	r3, [r3, #0]
900136b6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
900136b8:	683b      	ldr	r3, [r7, #0]
900136ba:	3304      	adds	r3, #4
900136bc:	681b      	ldr	r3, [r3, #0]
900136be:	2b00      	cmp	r3, #0
900136c0:	d102      	bne.n	900136c8 <etharp_input+0x74>
    for_us = 0;
900136c2:	2300      	movs	r3, #0
900136c4:	75fb      	strb	r3, [r7, #23]
900136c6:	e009      	b.n	900136dc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
900136c8:	68ba      	ldr	r2, [r7, #8]
900136ca:	683b      	ldr	r3, [r7, #0]
900136cc:	3304      	adds	r3, #4
900136ce:	681b      	ldr	r3, [r3, #0]
900136d0:	429a      	cmp	r2, r3
900136d2:	bf0c      	ite	eq
900136d4:	2301      	moveq	r3, #1
900136d6:	2300      	movne	r3, #0
900136d8:	b2db      	uxtb	r3, r3
900136da:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
900136dc:	693b      	ldr	r3, [r7, #16]
900136de:	f103 0208 	add.w	r2, r3, #8
900136e2:	7dfb      	ldrb	r3, [r7, #23]
900136e4:	2b00      	cmp	r3, #0
900136e6:	d001      	beq.n	900136ec <etharp_input+0x98>
900136e8:	2301      	movs	r3, #1
900136ea:	e000      	b.n	900136ee <etharp_input+0x9a>
900136ec:	2302      	movs	r3, #2
900136ee:	f107 010c 	add.w	r1, r7, #12
900136f2:	6838      	ldr	r0, [r7, #0]
900136f4:	f7ff fed8 	bl	900134a8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
900136f8:	693b      	ldr	r3, [r7, #16]
900136fa:	88db      	ldrh	r3, [r3, #6]
900136fc:	b29b      	uxth	r3, r3
900136fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90013702:	d003      	beq.n	9001370c <etharp_input+0xb8>
90013704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
90013708:	d01e      	beq.n	90013748 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
9001370a:	e020      	b.n	9001374e <etharp_input+0xfa>
      if (for_us) {
9001370c:	7dfb      	ldrb	r3, [r7, #23]
9001370e:	2b00      	cmp	r3, #0
90013710:	d01c      	beq.n	9001374c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
90013712:	683b      	ldr	r3, [r7, #0]
90013714:	f103 0026 	add.w	r0, r3, #38	; 0x26
90013718:	693b      	ldr	r3, [r7, #16]
9001371a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
9001371e:	683b      	ldr	r3, [r7, #0]
90013720:	f103 0526 	add.w	r5, r3, #38	; 0x26
90013724:	683b      	ldr	r3, [r7, #0]
90013726:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
90013728:	693a      	ldr	r2, [r7, #16]
9001372a:	3208      	adds	r2, #8
        etharp_raw(netif,
9001372c:	2102      	movs	r1, #2
9001372e:	9103      	str	r1, [sp, #12]
90013730:	f107 010c 	add.w	r1, r7, #12
90013734:	9102      	str	r1, [sp, #8]
90013736:	9201      	str	r2, [sp, #4]
90013738:	9300      	str	r3, [sp, #0]
9001373a:	462b      	mov	r3, r5
9001373c:	4622      	mov	r2, r4
9001373e:	4601      	mov	r1, r0
90013740:	6838      	ldr	r0, [r7, #0]
90013742:	f000 faeb 	bl	90013d1c <etharp_raw>
      break;
90013746:	e001      	b.n	9001374c <etharp_input+0xf8>
      break;
90013748:	bf00      	nop
9001374a:	e000      	b.n	9001374e <etharp_input+0xfa>
      break;
9001374c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
9001374e:	6878      	ldr	r0, [r7, #4]
90013750:	f7f8 fe30 	bl	9000c3b4 <pbuf_free>
}
90013754:	3718      	adds	r7, #24
90013756:	46bd      	mov	sp, r7
90013758:	bdb0      	pop	{r4, r5, r7, pc}
9001375a:	bf00      	nop
9001375c:	9001a078 	.word	0x9001a078
90013760:	9001a1c8 	.word	0x9001a1c8
90013764:	9001a0f0 	.word	0x9001a0f0

90013768 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
90013768:	b580      	push	{r7, lr}
9001376a:	b086      	sub	sp, #24
9001376c:	af02      	add	r7, sp, #8
9001376e:	60f8      	str	r0, [r7, #12]
90013770:	60b9      	str	r1, [r7, #8]
90013772:	4613      	mov	r3, r2
90013774:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
90013776:	79fa      	ldrb	r2, [r7, #7]
90013778:	4944      	ldr	r1, [pc, #272]	; (9001388c <etharp_output_to_arp_index+0x124>)
9001377a:	4613      	mov	r3, r2
9001377c:	005b      	lsls	r3, r3, #1
9001377e:	4413      	add	r3, r2
90013780:	00db      	lsls	r3, r3, #3
90013782:	440b      	add	r3, r1
90013784:	3314      	adds	r3, #20
90013786:	781b      	ldrb	r3, [r3, #0]
90013788:	2b01      	cmp	r3, #1
9001378a:	d806      	bhi.n	9001379a <etharp_output_to_arp_index+0x32>
9001378c:	4b40      	ldr	r3, [pc, #256]	; (90013890 <etharp_output_to_arp_index+0x128>)
9001378e:	f240 22ee 	movw	r2, #750	; 0x2ee
90013792:	4940      	ldr	r1, [pc, #256]	; (90013894 <etharp_output_to_arp_index+0x12c>)
90013794:	4840      	ldr	r0, [pc, #256]	; (90013898 <etharp_output_to_arp_index+0x130>)
90013796:	f002 fa2d 	bl	90015bf4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
9001379a:	79fa      	ldrb	r2, [r7, #7]
9001379c:	493b      	ldr	r1, [pc, #236]	; (9001388c <etharp_output_to_arp_index+0x124>)
9001379e:	4613      	mov	r3, r2
900137a0:	005b      	lsls	r3, r3, #1
900137a2:	4413      	add	r3, r2
900137a4:	00db      	lsls	r3, r3, #3
900137a6:	440b      	add	r3, r1
900137a8:	3314      	adds	r3, #20
900137aa:	781b      	ldrb	r3, [r3, #0]
900137ac:	2b02      	cmp	r3, #2
900137ae:	d153      	bne.n	90013858 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
900137b0:	79fa      	ldrb	r2, [r7, #7]
900137b2:	4936      	ldr	r1, [pc, #216]	; (9001388c <etharp_output_to_arp_index+0x124>)
900137b4:	4613      	mov	r3, r2
900137b6:	005b      	lsls	r3, r3, #1
900137b8:	4413      	add	r3, r2
900137ba:	00db      	lsls	r3, r3, #3
900137bc:	440b      	add	r3, r1
900137be:	3312      	adds	r3, #18
900137c0:	881b      	ldrh	r3, [r3, #0]
900137c2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
900137c6:	d919      	bls.n	900137fc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
900137c8:	79fa      	ldrb	r2, [r7, #7]
900137ca:	4613      	mov	r3, r2
900137cc:	005b      	lsls	r3, r3, #1
900137ce:	4413      	add	r3, r2
900137d0:	00db      	lsls	r3, r3, #3
900137d2:	4a2e      	ldr	r2, [pc, #184]	; (9001388c <etharp_output_to_arp_index+0x124>)
900137d4:	4413      	add	r3, r2
900137d6:	3304      	adds	r3, #4
900137d8:	4619      	mov	r1, r3
900137da:	68f8      	ldr	r0, [r7, #12]
900137dc:	f000 fb4c 	bl	90013e78 <etharp_request>
900137e0:	4603      	mov	r3, r0
900137e2:	2b00      	cmp	r3, #0
900137e4:	d138      	bne.n	90013858 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
900137e6:	79fa      	ldrb	r2, [r7, #7]
900137e8:	4928      	ldr	r1, [pc, #160]	; (9001388c <etharp_output_to_arp_index+0x124>)
900137ea:	4613      	mov	r3, r2
900137ec:	005b      	lsls	r3, r3, #1
900137ee:	4413      	add	r3, r2
900137f0:	00db      	lsls	r3, r3, #3
900137f2:	440b      	add	r3, r1
900137f4:	3314      	adds	r3, #20
900137f6:	2203      	movs	r2, #3
900137f8:	701a      	strb	r2, [r3, #0]
900137fa:	e02d      	b.n	90013858 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
900137fc:	79fa      	ldrb	r2, [r7, #7]
900137fe:	4923      	ldr	r1, [pc, #140]	; (9001388c <etharp_output_to_arp_index+0x124>)
90013800:	4613      	mov	r3, r2
90013802:	005b      	lsls	r3, r3, #1
90013804:	4413      	add	r3, r2
90013806:	00db      	lsls	r3, r3, #3
90013808:	440b      	add	r3, r1
9001380a:	3312      	adds	r3, #18
9001380c:	881b      	ldrh	r3, [r3, #0]
9001380e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
90013812:	d321      	bcc.n	90013858 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
90013814:	79fa      	ldrb	r2, [r7, #7]
90013816:	4613      	mov	r3, r2
90013818:	005b      	lsls	r3, r3, #1
9001381a:	4413      	add	r3, r2
9001381c:	00db      	lsls	r3, r3, #3
9001381e:	4a1b      	ldr	r2, [pc, #108]	; (9001388c <etharp_output_to_arp_index+0x124>)
90013820:	4413      	add	r3, r2
90013822:	1d19      	adds	r1, r3, #4
90013824:	79fa      	ldrb	r2, [r7, #7]
90013826:	4613      	mov	r3, r2
90013828:	005b      	lsls	r3, r3, #1
9001382a:	4413      	add	r3, r2
9001382c:	00db      	lsls	r3, r3, #3
9001382e:	3308      	adds	r3, #8
90013830:	4a16      	ldr	r2, [pc, #88]	; (9001388c <etharp_output_to_arp_index+0x124>)
90013832:	4413      	add	r3, r2
90013834:	3304      	adds	r3, #4
90013836:	461a      	mov	r2, r3
90013838:	68f8      	ldr	r0, [r7, #12]
9001383a:	f000 fafb 	bl	90013e34 <etharp_request_dst>
9001383e:	4603      	mov	r3, r0
90013840:	2b00      	cmp	r3, #0
90013842:	d109      	bne.n	90013858 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
90013844:	79fa      	ldrb	r2, [r7, #7]
90013846:	4911      	ldr	r1, [pc, #68]	; (9001388c <etharp_output_to_arp_index+0x124>)
90013848:	4613      	mov	r3, r2
9001384a:	005b      	lsls	r3, r3, #1
9001384c:	4413      	add	r3, r2
9001384e:	00db      	lsls	r3, r3, #3
90013850:	440b      	add	r3, r1
90013852:	3314      	adds	r3, #20
90013854:	2203      	movs	r2, #3
90013856:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
90013858:	68fb      	ldr	r3, [r7, #12]
9001385a:	f103 0126 	add.w	r1, r3, #38	; 0x26
9001385e:	79fa      	ldrb	r2, [r7, #7]
90013860:	4613      	mov	r3, r2
90013862:	005b      	lsls	r3, r3, #1
90013864:	4413      	add	r3, r2
90013866:	00db      	lsls	r3, r3, #3
90013868:	3308      	adds	r3, #8
9001386a:	4a08      	ldr	r2, [pc, #32]	; (9001388c <etharp_output_to_arp_index+0x124>)
9001386c:	4413      	add	r3, r2
9001386e:	3304      	adds	r3, #4
90013870:	f44f 6200 	mov.w	r2, #2048	; 0x800
90013874:	9200      	str	r2, [sp, #0]
90013876:	460a      	mov	r2, r1
90013878:	68b9      	ldr	r1, [r7, #8]
9001387a:	68f8      	ldr	r0, [r7, #12]
9001387c:	f001 fe66 	bl	9001554c <ethernet_output>
90013880:	4603      	mov	r3, r0
}
90013882:	4618      	mov	r0, r3
90013884:	3710      	adds	r7, #16
90013886:	46bd      	mov	sp, r7
90013888:	bd80      	pop	{r7, pc}
9001388a:	bf00      	nop
9001388c:	2401f404 	.word	0x2401f404
90013890:	9001a078 	.word	0x9001a078
90013894:	9001a1e8 	.word	0x9001a1e8
90013898:	9001a0f0 	.word	0x9001a0f0

9001389c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
9001389c:	b580      	push	{r7, lr}
9001389e:	b08a      	sub	sp, #40	; 0x28
900138a0:	af02      	add	r7, sp, #8
900138a2:	60f8      	str	r0, [r7, #12]
900138a4:	60b9      	str	r1, [r7, #8]
900138a6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
900138a8:	687b      	ldr	r3, [r7, #4]
900138aa:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
900138ac:	68fb      	ldr	r3, [r7, #12]
900138ae:	2b00      	cmp	r3, #0
900138b0:	d106      	bne.n	900138c0 <etharp_output+0x24>
900138b2:	4b73      	ldr	r3, [pc, #460]	; (90013a80 <etharp_output+0x1e4>)
900138b4:	f240 321e 	movw	r2, #798	; 0x31e
900138b8:	4972      	ldr	r1, [pc, #456]	; (90013a84 <etharp_output+0x1e8>)
900138ba:	4873      	ldr	r0, [pc, #460]	; (90013a88 <etharp_output+0x1ec>)
900138bc:	f002 f99a 	bl	90015bf4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
900138c0:	68bb      	ldr	r3, [r7, #8]
900138c2:	2b00      	cmp	r3, #0
900138c4:	d106      	bne.n	900138d4 <etharp_output+0x38>
900138c6:	4b6e      	ldr	r3, [pc, #440]	; (90013a80 <etharp_output+0x1e4>)
900138c8:	f240 321f 	movw	r2, #799	; 0x31f
900138cc:	496f      	ldr	r1, [pc, #444]	; (90013a8c <etharp_output+0x1f0>)
900138ce:	486e      	ldr	r0, [pc, #440]	; (90013a88 <etharp_output+0x1ec>)
900138d0:	f002 f990 	bl	90015bf4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
900138d4:	687b      	ldr	r3, [r7, #4]
900138d6:	2b00      	cmp	r3, #0
900138d8:	d106      	bne.n	900138e8 <etharp_output+0x4c>
900138da:	4b69      	ldr	r3, [pc, #420]	; (90013a80 <etharp_output+0x1e4>)
900138dc:	f44f 7248 	mov.w	r2, #800	; 0x320
900138e0:	496b      	ldr	r1, [pc, #428]	; (90013a90 <etharp_output+0x1f4>)
900138e2:	4869      	ldr	r0, [pc, #420]	; (90013a88 <etharp_output+0x1ec>)
900138e4:	f002 f986 	bl	90015bf4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
900138e8:	687b      	ldr	r3, [r7, #4]
900138ea:	681b      	ldr	r3, [r3, #0]
900138ec:	68f9      	ldr	r1, [r7, #12]
900138ee:	4618      	mov	r0, r3
900138f0:	f000 ff1e 	bl	90014730 <ip4_addr_isbroadcast_u32>
900138f4:	4603      	mov	r3, r0
900138f6:	2b00      	cmp	r3, #0
900138f8:	d002      	beq.n	90013900 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
900138fa:	4b66      	ldr	r3, [pc, #408]	; (90013a94 <etharp_output+0x1f8>)
900138fc:	61fb      	str	r3, [r7, #28]
900138fe:	e0af      	b.n	90013a60 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
90013900:	687b      	ldr	r3, [r7, #4]
90013902:	681b      	ldr	r3, [r3, #0]
90013904:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
90013908:	2be0      	cmp	r3, #224	; 0xe0
9001390a:	d118      	bne.n	9001393e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
9001390c:	2301      	movs	r3, #1
9001390e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
90013910:	2300      	movs	r3, #0
90013912:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
90013914:	235e      	movs	r3, #94	; 0x5e
90013916:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
90013918:	687b      	ldr	r3, [r7, #4]
9001391a:	3301      	adds	r3, #1
9001391c:	781b      	ldrb	r3, [r3, #0]
9001391e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
90013922:	b2db      	uxtb	r3, r3
90013924:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
90013926:	687b      	ldr	r3, [r7, #4]
90013928:	3302      	adds	r3, #2
9001392a:	781b      	ldrb	r3, [r3, #0]
9001392c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
9001392e:	687b      	ldr	r3, [r7, #4]
90013930:	3303      	adds	r3, #3
90013932:	781b      	ldrb	r3, [r3, #0]
90013934:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
90013936:	f107 0310 	add.w	r3, r7, #16
9001393a:	61fb      	str	r3, [r7, #28]
9001393c:	e090      	b.n	90013a60 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
9001393e:	687b      	ldr	r3, [r7, #4]
90013940:	681a      	ldr	r2, [r3, #0]
90013942:	68fb      	ldr	r3, [r7, #12]
90013944:	3304      	adds	r3, #4
90013946:	681b      	ldr	r3, [r3, #0]
90013948:	405a      	eors	r2, r3
9001394a:	68fb      	ldr	r3, [r7, #12]
9001394c:	3308      	adds	r3, #8
9001394e:	681b      	ldr	r3, [r3, #0]
90013950:	4013      	ands	r3, r2
90013952:	2b00      	cmp	r3, #0
90013954:	d012      	beq.n	9001397c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
90013956:	687b      	ldr	r3, [r7, #4]
90013958:	681b      	ldr	r3, [r3, #0]
9001395a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
9001395c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
90013960:	4293      	cmp	r3, r2
90013962:	d00b      	beq.n	9001397c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
90013964:	68fb      	ldr	r3, [r7, #12]
90013966:	330c      	adds	r3, #12
90013968:	681b      	ldr	r3, [r3, #0]
9001396a:	2b00      	cmp	r3, #0
9001396c:	d003      	beq.n	90013976 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
9001396e:	68fb      	ldr	r3, [r7, #12]
90013970:	330c      	adds	r3, #12
90013972:	61bb      	str	r3, [r7, #24]
90013974:	e002      	b.n	9001397c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
90013976:	f06f 0303 	mvn.w	r3, #3
9001397a:	e07d      	b.n	90013a78 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
9001397c:	4b46      	ldr	r3, [pc, #280]	; (90013a98 <etharp_output+0x1fc>)
9001397e:	781b      	ldrb	r3, [r3, #0]
90013980:	4619      	mov	r1, r3
90013982:	4a46      	ldr	r2, [pc, #280]	; (90013a9c <etharp_output+0x200>)
90013984:	460b      	mov	r3, r1
90013986:	005b      	lsls	r3, r3, #1
90013988:	440b      	add	r3, r1
9001398a:	00db      	lsls	r3, r3, #3
9001398c:	4413      	add	r3, r2
9001398e:	3314      	adds	r3, #20
90013990:	781b      	ldrb	r3, [r3, #0]
90013992:	2b01      	cmp	r3, #1
90013994:	d925      	bls.n	900139e2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
90013996:	4b40      	ldr	r3, [pc, #256]	; (90013a98 <etharp_output+0x1fc>)
90013998:	781b      	ldrb	r3, [r3, #0]
9001399a:	4619      	mov	r1, r3
9001399c:	4a3f      	ldr	r2, [pc, #252]	; (90013a9c <etharp_output+0x200>)
9001399e:	460b      	mov	r3, r1
900139a0:	005b      	lsls	r3, r3, #1
900139a2:	440b      	add	r3, r1
900139a4:	00db      	lsls	r3, r3, #3
900139a6:	4413      	add	r3, r2
900139a8:	3308      	adds	r3, #8
900139aa:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
900139ac:	68fa      	ldr	r2, [r7, #12]
900139ae:	429a      	cmp	r2, r3
900139b0:	d117      	bne.n	900139e2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
900139b2:	69bb      	ldr	r3, [r7, #24]
900139b4:	681a      	ldr	r2, [r3, #0]
900139b6:	4b38      	ldr	r3, [pc, #224]	; (90013a98 <etharp_output+0x1fc>)
900139b8:	781b      	ldrb	r3, [r3, #0]
900139ba:	4618      	mov	r0, r3
900139bc:	4937      	ldr	r1, [pc, #220]	; (90013a9c <etharp_output+0x200>)
900139be:	4603      	mov	r3, r0
900139c0:	005b      	lsls	r3, r3, #1
900139c2:	4403      	add	r3, r0
900139c4:	00db      	lsls	r3, r3, #3
900139c6:	440b      	add	r3, r1
900139c8:	3304      	adds	r3, #4
900139ca:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
900139cc:	429a      	cmp	r2, r3
900139ce:	d108      	bne.n	900139e2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
900139d0:	4b31      	ldr	r3, [pc, #196]	; (90013a98 <etharp_output+0x1fc>)
900139d2:	781b      	ldrb	r3, [r3, #0]
900139d4:	461a      	mov	r2, r3
900139d6:	68b9      	ldr	r1, [r7, #8]
900139d8:	68f8      	ldr	r0, [r7, #12]
900139da:	f7ff fec5 	bl	90013768 <etharp_output_to_arp_index>
900139de:	4603      	mov	r3, r0
900139e0:	e04a      	b.n	90013a78 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
900139e2:	2300      	movs	r3, #0
900139e4:	75fb      	strb	r3, [r7, #23]
900139e6:	e031      	b.n	90013a4c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
900139e8:	7dfa      	ldrb	r2, [r7, #23]
900139ea:	492c      	ldr	r1, [pc, #176]	; (90013a9c <etharp_output+0x200>)
900139ec:	4613      	mov	r3, r2
900139ee:	005b      	lsls	r3, r3, #1
900139f0:	4413      	add	r3, r2
900139f2:	00db      	lsls	r3, r3, #3
900139f4:	440b      	add	r3, r1
900139f6:	3314      	adds	r3, #20
900139f8:	781b      	ldrb	r3, [r3, #0]
900139fa:	2b01      	cmp	r3, #1
900139fc:	d923      	bls.n	90013a46 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
900139fe:	7dfa      	ldrb	r2, [r7, #23]
90013a00:	4926      	ldr	r1, [pc, #152]	; (90013a9c <etharp_output+0x200>)
90013a02:	4613      	mov	r3, r2
90013a04:	005b      	lsls	r3, r3, #1
90013a06:	4413      	add	r3, r2
90013a08:	00db      	lsls	r3, r3, #3
90013a0a:	440b      	add	r3, r1
90013a0c:	3308      	adds	r3, #8
90013a0e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
90013a10:	68fa      	ldr	r2, [r7, #12]
90013a12:	429a      	cmp	r2, r3
90013a14:	d117      	bne.n	90013a46 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
90013a16:	69bb      	ldr	r3, [r7, #24]
90013a18:	6819      	ldr	r1, [r3, #0]
90013a1a:	7dfa      	ldrb	r2, [r7, #23]
90013a1c:	481f      	ldr	r0, [pc, #124]	; (90013a9c <etharp_output+0x200>)
90013a1e:	4613      	mov	r3, r2
90013a20:	005b      	lsls	r3, r3, #1
90013a22:	4413      	add	r3, r2
90013a24:	00db      	lsls	r3, r3, #3
90013a26:	4403      	add	r3, r0
90013a28:	3304      	adds	r3, #4
90013a2a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
90013a2c:	4299      	cmp	r1, r3
90013a2e:	d10a      	bne.n	90013a46 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
90013a30:	4a19      	ldr	r2, [pc, #100]	; (90013a98 <etharp_output+0x1fc>)
90013a32:	7dfb      	ldrb	r3, [r7, #23]
90013a34:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
90013a36:	7dfb      	ldrb	r3, [r7, #23]
90013a38:	461a      	mov	r2, r3
90013a3a:	68b9      	ldr	r1, [r7, #8]
90013a3c:	68f8      	ldr	r0, [r7, #12]
90013a3e:	f7ff fe93 	bl	90013768 <etharp_output_to_arp_index>
90013a42:	4603      	mov	r3, r0
90013a44:	e018      	b.n	90013a78 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
90013a46:	7dfb      	ldrb	r3, [r7, #23]
90013a48:	3301      	adds	r3, #1
90013a4a:	75fb      	strb	r3, [r7, #23]
90013a4c:	7dfb      	ldrb	r3, [r7, #23]
90013a4e:	2b09      	cmp	r3, #9
90013a50:	d9ca      	bls.n	900139e8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
90013a52:	68ba      	ldr	r2, [r7, #8]
90013a54:	69b9      	ldr	r1, [r7, #24]
90013a56:	68f8      	ldr	r0, [r7, #12]
90013a58:	f000 f822 	bl	90013aa0 <etharp_query>
90013a5c:	4603      	mov	r3, r0
90013a5e:	e00b      	b.n	90013a78 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
90013a60:	68fb      	ldr	r3, [r7, #12]
90013a62:	f103 0226 	add.w	r2, r3, #38	; 0x26
90013a66:	f44f 6300 	mov.w	r3, #2048	; 0x800
90013a6a:	9300      	str	r3, [sp, #0]
90013a6c:	69fb      	ldr	r3, [r7, #28]
90013a6e:	68b9      	ldr	r1, [r7, #8]
90013a70:	68f8      	ldr	r0, [r7, #12]
90013a72:	f001 fd6b 	bl	9001554c <ethernet_output>
90013a76:	4603      	mov	r3, r0
}
90013a78:	4618      	mov	r0, r3
90013a7a:	3720      	adds	r7, #32
90013a7c:	46bd      	mov	sp, r7
90013a7e:	bd80      	pop	{r7, pc}
90013a80:	9001a078 	.word	0x9001a078
90013a84:	9001a1c8 	.word	0x9001a1c8
90013a88:	9001a0f0 	.word	0x9001a0f0
90013a8c:	9001a218 	.word	0x9001a218
90013a90:	9001a1b8 	.word	0x9001a1b8
90013a94:	90021138 	.word	0x90021138
90013a98:	2401f4f4 	.word	0x2401f4f4
90013a9c:	2401f404 	.word	0x2401f404

90013aa0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
90013aa0:	b580      	push	{r7, lr}
90013aa2:	b08c      	sub	sp, #48	; 0x30
90013aa4:	af02      	add	r7, sp, #8
90013aa6:	60f8      	str	r0, [r7, #12]
90013aa8:	60b9      	str	r1, [r7, #8]
90013aaa:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
90013aac:	68fb      	ldr	r3, [r7, #12]
90013aae:	3326      	adds	r3, #38	; 0x26
90013ab0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
90013ab2:	23ff      	movs	r3, #255	; 0xff
90013ab4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
90013ab8:	2300      	movs	r3, #0
90013aba:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
90013abc:	68bb      	ldr	r3, [r7, #8]
90013abe:	681b      	ldr	r3, [r3, #0]
90013ac0:	68f9      	ldr	r1, [r7, #12]
90013ac2:	4618      	mov	r0, r3
90013ac4:	f000 fe34 	bl	90014730 <ip4_addr_isbroadcast_u32>
90013ac8:	4603      	mov	r3, r0
90013aca:	2b00      	cmp	r3, #0
90013acc:	d10c      	bne.n	90013ae8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
90013ace:	68bb      	ldr	r3, [r7, #8]
90013ad0:	681b      	ldr	r3, [r3, #0]
90013ad2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
90013ad6:	2be0      	cmp	r3, #224	; 0xe0
90013ad8:	d006      	beq.n	90013ae8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
90013ada:	68bb      	ldr	r3, [r7, #8]
90013adc:	2b00      	cmp	r3, #0
90013ade:	d003      	beq.n	90013ae8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
90013ae0:	68bb      	ldr	r3, [r7, #8]
90013ae2:	681b      	ldr	r3, [r3, #0]
90013ae4:	2b00      	cmp	r3, #0
90013ae6:	d102      	bne.n	90013aee <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
90013ae8:	f06f 030f 	mvn.w	r3, #15
90013aec:	e101      	b.n	90013cf2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
90013aee:	68fa      	ldr	r2, [r7, #12]
90013af0:	2101      	movs	r1, #1
90013af2:	68b8      	ldr	r0, [r7, #8]
90013af4:	f7ff fb60 	bl	900131b8 <etharp_find_entry>
90013af8:	4603      	mov	r3, r0
90013afa:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
90013afc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
90013b00:	2b00      	cmp	r3, #0
90013b02:	da02      	bge.n	90013b0a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
90013b04:	8a7b      	ldrh	r3, [r7, #18]
90013b06:	b25b      	sxtb	r3, r3
90013b08:	e0f3      	b.n	90013cf2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
90013b0a:	8a7b      	ldrh	r3, [r7, #18]
90013b0c:	2b7e      	cmp	r3, #126	; 0x7e
90013b0e:	d906      	bls.n	90013b1e <etharp_query+0x7e>
90013b10:	4b7a      	ldr	r3, [pc, #488]	; (90013cfc <etharp_query+0x25c>)
90013b12:	f240 32c1 	movw	r2, #961	; 0x3c1
90013b16:	497a      	ldr	r1, [pc, #488]	; (90013d00 <etharp_query+0x260>)
90013b18:	487a      	ldr	r0, [pc, #488]	; (90013d04 <etharp_query+0x264>)
90013b1a:	f002 f86b 	bl	90015bf4 <iprintf>
  i = (netif_addr_idx_t)i_err;
90013b1e:	8a7b      	ldrh	r3, [r7, #18]
90013b20:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
90013b22:	7c7a      	ldrb	r2, [r7, #17]
90013b24:	4978      	ldr	r1, [pc, #480]	; (90013d08 <etharp_query+0x268>)
90013b26:	4613      	mov	r3, r2
90013b28:	005b      	lsls	r3, r3, #1
90013b2a:	4413      	add	r3, r2
90013b2c:	00db      	lsls	r3, r3, #3
90013b2e:	440b      	add	r3, r1
90013b30:	3314      	adds	r3, #20
90013b32:	781b      	ldrb	r3, [r3, #0]
90013b34:	2b00      	cmp	r3, #0
90013b36:	d115      	bne.n	90013b64 <etharp_query+0xc4>
    is_new_entry = 1;
90013b38:	2301      	movs	r3, #1
90013b3a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
90013b3c:	7c7a      	ldrb	r2, [r7, #17]
90013b3e:	4972      	ldr	r1, [pc, #456]	; (90013d08 <etharp_query+0x268>)
90013b40:	4613      	mov	r3, r2
90013b42:	005b      	lsls	r3, r3, #1
90013b44:	4413      	add	r3, r2
90013b46:	00db      	lsls	r3, r3, #3
90013b48:	440b      	add	r3, r1
90013b4a:	3314      	adds	r3, #20
90013b4c:	2201      	movs	r2, #1
90013b4e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
90013b50:	7c7a      	ldrb	r2, [r7, #17]
90013b52:	496d      	ldr	r1, [pc, #436]	; (90013d08 <etharp_query+0x268>)
90013b54:	4613      	mov	r3, r2
90013b56:	005b      	lsls	r3, r3, #1
90013b58:	4413      	add	r3, r2
90013b5a:	00db      	lsls	r3, r3, #3
90013b5c:	440b      	add	r3, r1
90013b5e:	3308      	adds	r3, #8
90013b60:	68fa      	ldr	r2, [r7, #12]
90013b62:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
90013b64:	7c7a      	ldrb	r2, [r7, #17]
90013b66:	4968      	ldr	r1, [pc, #416]	; (90013d08 <etharp_query+0x268>)
90013b68:	4613      	mov	r3, r2
90013b6a:	005b      	lsls	r3, r3, #1
90013b6c:	4413      	add	r3, r2
90013b6e:	00db      	lsls	r3, r3, #3
90013b70:	440b      	add	r3, r1
90013b72:	3314      	adds	r3, #20
90013b74:	781b      	ldrb	r3, [r3, #0]
90013b76:	2b01      	cmp	r3, #1
90013b78:	d011      	beq.n	90013b9e <etharp_query+0xfe>
90013b7a:	7c7a      	ldrb	r2, [r7, #17]
90013b7c:	4962      	ldr	r1, [pc, #392]	; (90013d08 <etharp_query+0x268>)
90013b7e:	4613      	mov	r3, r2
90013b80:	005b      	lsls	r3, r3, #1
90013b82:	4413      	add	r3, r2
90013b84:	00db      	lsls	r3, r3, #3
90013b86:	440b      	add	r3, r1
90013b88:	3314      	adds	r3, #20
90013b8a:	781b      	ldrb	r3, [r3, #0]
90013b8c:	2b01      	cmp	r3, #1
90013b8e:	d806      	bhi.n	90013b9e <etharp_query+0xfe>
90013b90:	4b5a      	ldr	r3, [pc, #360]	; (90013cfc <etharp_query+0x25c>)
90013b92:	f240 32cd 	movw	r2, #973	; 0x3cd
90013b96:	495d      	ldr	r1, [pc, #372]	; (90013d0c <etharp_query+0x26c>)
90013b98:	485a      	ldr	r0, [pc, #360]	; (90013d04 <etharp_query+0x264>)
90013b9a:	f002 f82b 	bl	90015bf4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
90013b9e:	6a3b      	ldr	r3, [r7, #32]
90013ba0:	2b00      	cmp	r3, #0
90013ba2:	d102      	bne.n	90013baa <etharp_query+0x10a>
90013ba4:	687b      	ldr	r3, [r7, #4]
90013ba6:	2b00      	cmp	r3, #0
90013ba8:	d10c      	bne.n	90013bc4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
90013baa:	68b9      	ldr	r1, [r7, #8]
90013bac:	68f8      	ldr	r0, [r7, #12]
90013bae:	f000 f963 	bl	90013e78 <etharp_request>
90013bb2:	4603      	mov	r3, r0
90013bb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
90013bb8:	687b      	ldr	r3, [r7, #4]
90013bba:	2b00      	cmp	r3, #0
90013bbc:	d102      	bne.n	90013bc4 <etharp_query+0x124>
      return result;
90013bbe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
90013bc2:	e096      	b.n	90013cf2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
90013bc4:	687b      	ldr	r3, [r7, #4]
90013bc6:	2b00      	cmp	r3, #0
90013bc8:	d106      	bne.n	90013bd8 <etharp_query+0x138>
90013bca:	4b4c      	ldr	r3, [pc, #304]	; (90013cfc <etharp_query+0x25c>)
90013bcc:	f240 32e1 	movw	r2, #993	; 0x3e1
90013bd0:	494f      	ldr	r1, [pc, #316]	; (90013d10 <etharp_query+0x270>)
90013bd2:	484c      	ldr	r0, [pc, #304]	; (90013d04 <etharp_query+0x264>)
90013bd4:	f002 f80e 	bl	90015bf4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
90013bd8:	7c7a      	ldrb	r2, [r7, #17]
90013bda:	494b      	ldr	r1, [pc, #300]	; (90013d08 <etharp_query+0x268>)
90013bdc:	4613      	mov	r3, r2
90013bde:	005b      	lsls	r3, r3, #1
90013be0:	4413      	add	r3, r2
90013be2:	00db      	lsls	r3, r3, #3
90013be4:	440b      	add	r3, r1
90013be6:	3314      	adds	r3, #20
90013be8:	781b      	ldrb	r3, [r3, #0]
90013bea:	2b01      	cmp	r3, #1
90013bec:	d917      	bls.n	90013c1e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
90013bee:	4a49      	ldr	r2, [pc, #292]	; (90013d14 <etharp_query+0x274>)
90013bf0:	7c7b      	ldrb	r3, [r7, #17]
90013bf2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
90013bf4:	7c7a      	ldrb	r2, [r7, #17]
90013bf6:	4613      	mov	r3, r2
90013bf8:	005b      	lsls	r3, r3, #1
90013bfa:	4413      	add	r3, r2
90013bfc:	00db      	lsls	r3, r3, #3
90013bfe:	3308      	adds	r3, #8
90013c00:	4a41      	ldr	r2, [pc, #260]	; (90013d08 <etharp_query+0x268>)
90013c02:	4413      	add	r3, r2
90013c04:	3304      	adds	r3, #4
90013c06:	f44f 6200 	mov.w	r2, #2048	; 0x800
90013c0a:	9200      	str	r2, [sp, #0]
90013c0c:	697a      	ldr	r2, [r7, #20]
90013c0e:	6879      	ldr	r1, [r7, #4]
90013c10:	68f8      	ldr	r0, [r7, #12]
90013c12:	f001 fc9b 	bl	9001554c <ethernet_output>
90013c16:	4603      	mov	r3, r0
90013c18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
90013c1c:	e067      	b.n	90013cee <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
90013c1e:	7c7a      	ldrb	r2, [r7, #17]
90013c20:	4939      	ldr	r1, [pc, #228]	; (90013d08 <etharp_query+0x268>)
90013c22:	4613      	mov	r3, r2
90013c24:	005b      	lsls	r3, r3, #1
90013c26:	4413      	add	r3, r2
90013c28:	00db      	lsls	r3, r3, #3
90013c2a:	440b      	add	r3, r1
90013c2c:	3314      	adds	r3, #20
90013c2e:	781b      	ldrb	r3, [r3, #0]
90013c30:	2b01      	cmp	r3, #1
90013c32:	d15c      	bne.n	90013cee <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
90013c34:	2300      	movs	r3, #0
90013c36:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
90013c38:	687b      	ldr	r3, [r7, #4]
90013c3a:	61fb      	str	r3, [r7, #28]
    while (p) {
90013c3c:	e01c      	b.n	90013c78 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
90013c3e:	69fb      	ldr	r3, [r7, #28]
90013c40:	895a      	ldrh	r2, [r3, #10]
90013c42:	69fb      	ldr	r3, [r7, #28]
90013c44:	891b      	ldrh	r3, [r3, #8]
90013c46:	429a      	cmp	r2, r3
90013c48:	d10a      	bne.n	90013c60 <etharp_query+0x1c0>
90013c4a:	69fb      	ldr	r3, [r7, #28]
90013c4c:	681b      	ldr	r3, [r3, #0]
90013c4e:	2b00      	cmp	r3, #0
90013c50:	d006      	beq.n	90013c60 <etharp_query+0x1c0>
90013c52:	4b2a      	ldr	r3, [pc, #168]	; (90013cfc <etharp_query+0x25c>)
90013c54:	f240 32f1 	movw	r2, #1009	; 0x3f1
90013c58:	492f      	ldr	r1, [pc, #188]	; (90013d18 <etharp_query+0x278>)
90013c5a:	482a      	ldr	r0, [pc, #168]	; (90013d04 <etharp_query+0x264>)
90013c5c:	f001 ffca 	bl	90015bf4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
90013c60:	69fb      	ldr	r3, [r7, #28]
90013c62:	7b1b      	ldrb	r3, [r3, #12]
90013c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
90013c68:	2b00      	cmp	r3, #0
90013c6a:	d002      	beq.n	90013c72 <etharp_query+0x1d2>
        copy_needed = 1;
90013c6c:	2301      	movs	r3, #1
90013c6e:	61bb      	str	r3, [r7, #24]
        break;
90013c70:	e005      	b.n	90013c7e <etharp_query+0x1de>
      }
      p = p->next;
90013c72:	69fb      	ldr	r3, [r7, #28]
90013c74:	681b      	ldr	r3, [r3, #0]
90013c76:	61fb      	str	r3, [r7, #28]
    while (p) {
90013c78:	69fb      	ldr	r3, [r7, #28]
90013c7a:	2b00      	cmp	r3, #0
90013c7c:	d1df      	bne.n	90013c3e <etharp_query+0x19e>
    }
    if (copy_needed) {
90013c7e:	69bb      	ldr	r3, [r7, #24]
90013c80:	2b00      	cmp	r3, #0
90013c82:	d007      	beq.n	90013c94 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
90013c84:	687a      	ldr	r2, [r7, #4]
90013c86:	f44f 7120 	mov.w	r1, #640	; 0x280
90013c8a:	200e      	movs	r0, #14
90013c8c:	f7f8 fdfa 	bl	9000c884 <pbuf_clone>
90013c90:	61f8      	str	r0, [r7, #28]
90013c92:	e004      	b.n	90013c9e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
90013c94:	687b      	ldr	r3, [r7, #4]
90013c96:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
90013c98:	69f8      	ldr	r0, [r7, #28]
90013c9a:	f7f8 fc31 	bl	9000c500 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
90013c9e:	69fb      	ldr	r3, [r7, #28]
90013ca0:	2b00      	cmp	r3, #0
90013ca2:	d021      	beq.n	90013ce8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
90013ca4:	7c7a      	ldrb	r2, [r7, #17]
90013ca6:	4918      	ldr	r1, [pc, #96]	; (90013d08 <etharp_query+0x268>)
90013ca8:	4613      	mov	r3, r2
90013caa:	005b      	lsls	r3, r3, #1
90013cac:	4413      	add	r3, r2
90013cae:	00db      	lsls	r3, r3, #3
90013cb0:	440b      	add	r3, r1
90013cb2:	681b      	ldr	r3, [r3, #0]
90013cb4:	2b00      	cmp	r3, #0
90013cb6:	d00a      	beq.n	90013cce <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
90013cb8:	7c7a      	ldrb	r2, [r7, #17]
90013cba:	4913      	ldr	r1, [pc, #76]	; (90013d08 <etharp_query+0x268>)
90013cbc:	4613      	mov	r3, r2
90013cbe:	005b      	lsls	r3, r3, #1
90013cc0:	4413      	add	r3, r2
90013cc2:	00db      	lsls	r3, r3, #3
90013cc4:	440b      	add	r3, r1
90013cc6:	681b      	ldr	r3, [r3, #0]
90013cc8:	4618      	mov	r0, r3
90013cca:	f7f8 fb73 	bl	9000c3b4 <pbuf_free>
      }
      arp_table[i].q = p;
90013cce:	7c7a      	ldrb	r2, [r7, #17]
90013cd0:	490d      	ldr	r1, [pc, #52]	; (90013d08 <etharp_query+0x268>)
90013cd2:	4613      	mov	r3, r2
90013cd4:	005b      	lsls	r3, r3, #1
90013cd6:	4413      	add	r3, r2
90013cd8:	00db      	lsls	r3, r3, #3
90013cda:	440b      	add	r3, r1
90013cdc:	69fa      	ldr	r2, [r7, #28]
90013cde:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
90013ce0:	2300      	movs	r3, #0
90013ce2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
90013ce6:	e002      	b.n	90013cee <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
90013ce8:	23ff      	movs	r3, #255	; 0xff
90013cea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
90013cee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
90013cf2:	4618      	mov	r0, r3
90013cf4:	3728      	adds	r7, #40	; 0x28
90013cf6:	46bd      	mov	sp, r7
90013cf8:	bd80      	pop	{r7, pc}
90013cfa:	bf00      	nop
90013cfc:	9001a078 	.word	0x9001a078
90013d00:	9001a224 	.word	0x9001a224
90013d04:	9001a0f0 	.word	0x9001a0f0
90013d08:	2401f404 	.word	0x2401f404
90013d0c:	9001a234 	.word	0x9001a234
90013d10:	9001a218 	.word	0x9001a218
90013d14:	2401f4f4 	.word	0x2401f4f4
90013d18:	9001a25c 	.word	0x9001a25c

90013d1c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
90013d1c:	b580      	push	{r7, lr}
90013d1e:	b08a      	sub	sp, #40	; 0x28
90013d20:	af02      	add	r7, sp, #8
90013d22:	60f8      	str	r0, [r7, #12]
90013d24:	60b9      	str	r1, [r7, #8]
90013d26:	607a      	str	r2, [r7, #4]
90013d28:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
90013d2a:	2300      	movs	r3, #0
90013d2c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
90013d2e:	68fb      	ldr	r3, [r7, #12]
90013d30:	2b00      	cmp	r3, #0
90013d32:	d106      	bne.n	90013d42 <etharp_raw+0x26>
90013d34:	4b3a      	ldr	r3, [pc, #232]	; (90013e20 <etharp_raw+0x104>)
90013d36:	f240 4257 	movw	r2, #1111	; 0x457
90013d3a:	493a      	ldr	r1, [pc, #232]	; (90013e24 <etharp_raw+0x108>)
90013d3c:	483a      	ldr	r0, [pc, #232]	; (90013e28 <etharp_raw+0x10c>)
90013d3e:	f001 ff59 	bl	90015bf4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
90013d42:	f44f 7220 	mov.w	r2, #640	; 0x280
90013d46:	211c      	movs	r1, #28
90013d48:	200e      	movs	r0, #14
90013d4a:	f7f8 f84f 	bl	9000bdec <pbuf_alloc>
90013d4e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
90013d50:	69bb      	ldr	r3, [r7, #24]
90013d52:	2b00      	cmp	r3, #0
90013d54:	d102      	bne.n	90013d5c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
90013d56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90013d5a:	e05d      	b.n	90013e18 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
90013d5c:	69bb      	ldr	r3, [r7, #24]
90013d5e:	895b      	ldrh	r3, [r3, #10]
90013d60:	2b1b      	cmp	r3, #27
90013d62:	d806      	bhi.n	90013d72 <etharp_raw+0x56>
90013d64:	4b2e      	ldr	r3, [pc, #184]	; (90013e20 <etharp_raw+0x104>)
90013d66:	f240 4262 	movw	r2, #1122	; 0x462
90013d6a:	4930      	ldr	r1, [pc, #192]	; (90013e2c <etharp_raw+0x110>)
90013d6c:	482e      	ldr	r0, [pc, #184]	; (90013e28 <etharp_raw+0x10c>)
90013d6e:	f001 ff41 	bl	90015bf4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
90013d72:	69bb      	ldr	r3, [r7, #24]
90013d74:	685b      	ldr	r3, [r3, #4]
90013d76:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
90013d78:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
90013d7a:	4618      	mov	r0, r3
90013d7c:	f7f6 fe06 	bl	9000a98c <lwip_htons>
90013d80:	4603      	mov	r3, r0
90013d82:	461a      	mov	r2, r3
90013d84:	697b      	ldr	r3, [r7, #20]
90013d86:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
90013d88:	68fb      	ldr	r3, [r7, #12]
90013d8a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
90013d8e:	2b06      	cmp	r3, #6
90013d90:	d006      	beq.n	90013da0 <etharp_raw+0x84>
90013d92:	4b23      	ldr	r3, [pc, #140]	; (90013e20 <etharp_raw+0x104>)
90013d94:	f240 4269 	movw	r2, #1129	; 0x469
90013d98:	4925      	ldr	r1, [pc, #148]	; (90013e30 <etharp_raw+0x114>)
90013d9a:	4823      	ldr	r0, [pc, #140]	; (90013e28 <etharp_raw+0x10c>)
90013d9c:	f001 ff2a 	bl	90015bf4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
90013da0:	697b      	ldr	r3, [r7, #20]
90013da2:	3308      	adds	r3, #8
90013da4:	2206      	movs	r2, #6
90013da6:	6839      	ldr	r1, [r7, #0]
90013da8:	4618      	mov	r0, r3
90013daa:	f001 fe5e 	bl	90015a6a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
90013dae:	697b      	ldr	r3, [r7, #20]
90013db0:	3312      	adds	r3, #18
90013db2:	2206      	movs	r2, #6
90013db4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
90013db6:	4618      	mov	r0, r3
90013db8:	f001 fe57 	bl	90015a6a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
90013dbc:	697b      	ldr	r3, [r7, #20]
90013dbe:	330e      	adds	r3, #14
90013dc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
90013dc2:	6812      	ldr	r2, [r2, #0]
90013dc4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
90013dc6:	697b      	ldr	r3, [r7, #20]
90013dc8:	3318      	adds	r3, #24
90013dca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
90013dcc:	6812      	ldr	r2, [r2, #0]
90013dce:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
90013dd0:	697b      	ldr	r3, [r7, #20]
90013dd2:	2200      	movs	r2, #0
90013dd4:	701a      	strb	r2, [r3, #0]
90013dd6:	2200      	movs	r2, #0
90013dd8:	f042 0201 	orr.w	r2, r2, #1
90013ddc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
90013dde:	697b      	ldr	r3, [r7, #20]
90013de0:	2200      	movs	r2, #0
90013de2:	f042 0208 	orr.w	r2, r2, #8
90013de6:	709a      	strb	r2, [r3, #2]
90013de8:	2200      	movs	r2, #0
90013dea:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
90013dec:	697b      	ldr	r3, [r7, #20]
90013dee:	2206      	movs	r2, #6
90013df0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
90013df2:	697b      	ldr	r3, [r7, #20]
90013df4:	2204      	movs	r2, #4
90013df6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
90013df8:	f640 0306 	movw	r3, #2054	; 0x806
90013dfc:	9300      	str	r3, [sp, #0]
90013dfe:	687b      	ldr	r3, [r7, #4]
90013e00:	68ba      	ldr	r2, [r7, #8]
90013e02:	69b9      	ldr	r1, [r7, #24]
90013e04:	68f8      	ldr	r0, [r7, #12]
90013e06:	f001 fba1 	bl	9001554c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
90013e0a:	69b8      	ldr	r0, [r7, #24]
90013e0c:	f7f8 fad2 	bl	9000c3b4 <pbuf_free>
  p = NULL;
90013e10:	2300      	movs	r3, #0
90013e12:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
90013e14:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
90013e18:	4618      	mov	r0, r3
90013e1a:	3720      	adds	r7, #32
90013e1c:	46bd      	mov	sp, r7
90013e1e:	bd80      	pop	{r7, pc}
90013e20:	9001a078 	.word	0x9001a078
90013e24:	9001a1c8 	.word	0x9001a1c8
90013e28:	9001a0f0 	.word	0x9001a0f0
90013e2c:	9001a278 	.word	0x9001a278
90013e30:	9001a2ac 	.word	0x9001a2ac

90013e34 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
90013e34:	b580      	push	{r7, lr}
90013e36:	b088      	sub	sp, #32
90013e38:	af04      	add	r7, sp, #16
90013e3a:	60f8      	str	r0, [r7, #12]
90013e3c:	60b9      	str	r1, [r7, #8]
90013e3e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
90013e40:	68fb      	ldr	r3, [r7, #12]
90013e42:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
90013e46:	68fb      	ldr	r3, [r7, #12]
90013e48:	f103 0026 	add.w	r0, r3, #38	; 0x26
90013e4c:	68fb      	ldr	r3, [r7, #12]
90013e4e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
90013e50:	2201      	movs	r2, #1
90013e52:	9203      	str	r2, [sp, #12]
90013e54:	68ba      	ldr	r2, [r7, #8]
90013e56:	9202      	str	r2, [sp, #8]
90013e58:	4a06      	ldr	r2, [pc, #24]	; (90013e74 <etharp_request_dst+0x40>)
90013e5a:	9201      	str	r2, [sp, #4]
90013e5c:	9300      	str	r3, [sp, #0]
90013e5e:	4603      	mov	r3, r0
90013e60:	687a      	ldr	r2, [r7, #4]
90013e62:	68f8      	ldr	r0, [r7, #12]
90013e64:	f7ff ff5a 	bl	90013d1c <etharp_raw>
90013e68:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
90013e6a:	4618      	mov	r0, r3
90013e6c:	3710      	adds	r7, #16
90013e6e:	46bd      	mov	sp, r7
90013e70:	bd80      	pop	{r7, pc}
90013e72:	bf00      	nop
90013e74:	90021140 	.word	0x90021140

90013e78 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
90013e78:	b580      	push	{r7, lr}
90013e7a:	b082      	sub	sp, #8
90013e7c:	af00      	add	r7, sp, #0
90013e7e:	6078      	str	r0, [r7, #4]
90013e80:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
90013e82:	4a05      	ldr	r2, [pc, #20]	; (90013e98 <etharp_request+0x20>)
90013e84:	6839      	ldr	r1, [r7, #0]
90013e86:	6878      	ldr	r0, [r7, #4]
90013e88:	f7ff ffd4 	bl	90013e34 <etharp_request_dst>
90013e8c:	4603      	mov	r3, r0
}
90013e8e:	4618      	mov	r0, r3
90013e90:	3708      	adds	r7, #8
90013e92:	46bd      	mov	sp, r7
90013e94:	bd80      	pop	{r7, pc}
90013e96:	bf00      	nop
90013e98:	90021138 	.word	0x90021138

90013e9c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
90013e9c:	b580      	push	{r7, lr}
90013e9e:	b08e      	sub	sp, #56	; 0x38
90013ea0:	af04      	add	r7, sp, #16
90013ea2:	6078      	str	r0, [r7, #4]
90013ea4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
90013ea6:	4b87      	ldr	r3, [pc, #540]	; (900140c4 <icmp_input+0x228>)
90013ea8:	689b      	ldr	r3, [r3, #8]
90013eaa:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
90013eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90013eae:	781b      	ldrb	r3, [r3, #0]
90013eb0:	f003 030f 	and.w	r3, r3, #15
90013eb4:	b2db      	uxtb	r3, r3
90013eb6:	009b      	lsls	r3, r3, #2
90013eb8:	b2db      	uxtb	r3, r3
90013eba:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
90013ebc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
90013ebe:	2b13      	cmp	r3, #19
90013ec0:	f240 80e8 	bls.w	90014094 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
90013ec4:	687b      	ldr	r3, [r7, #4]
90013ec6:	895b      	ldrh	r3, [r3, #10]
90013ec8:	2b03      	cmp	r3, #3
90013eca:	f240 80e5 	bls.w	90014098 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
90013ece:	687b      	ldr	r3, [r7, #4]
90013ed0:	685b      	ldr	r3, [r3, #4]
90013ed2:	781b      	ldrb	r3, [r3, #0]
90013ed4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
90013ed8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
90013edc:	2b00      	cmp	r3, #0
90013ede:	f000 80d2 	beq.w	90014086 <icmp_input+0x1ea>
90013ee2:	2b08      	cmp	r3, #8
90013ee4:	f040 80d2 	bne.w	9001408c <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
90013ee8:	4b77      	ldr	r3, [pc, #476]	; (900140c8 <icmp_input+0x22c>)
90013eea:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
90013eec:	4b75      	ldr	r3, [pc, #468]	; (900140c4 <icmp_input+0x228>)
90013eee:	695b      	ldr	r3, [r3, #20]
90013ef0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
90013ef4:	2be0      	cmp	r3, #224	; 0xe0
90013ef6:	f000 80d6 	beq.w	900140a6 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
90013efa:	4b72      	ldr	r3, [pc, #456]	; (900140c4 <icmp_input+0x228>)
90013efc:	695b      	ldr	r3, [r3, #20]
90013efe:	4a71      	ldr	r2, [pc, #452]	; (900140c4 <icmp_input+0x228>)
90013f00:	6812      	ldr	r2, [r2, #0]
90013f02:	4611      	mov	r1, r2
90013f04:	4618      	mov	r0, r3
90013f06:	f000 fc13 	bl	90014730 <ip4_addr_isbroadcast_u32>
90013f0a:	4603      	mov	r3, r0
90013f0c:	2b00      	cmp	r3, #0
90013f0e:	f040 80cc 	bne.w	900140aa <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
90013f12:	687b      	ldr	r3, [r7, #4]
90013f14:	891b      	ldrh	r3, [r3, #8]
90013f16:	2b07      	cmp	r3, #7
90013f18:	f240 80c0 	bls.w	9001409c <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
90013f1c:	6878      	ldr	r0, [r7, #4]
90013f1e:	f7f6 fe3c 	bl	9000ab9a <inet_chksum_pbuf>
90013f22:	4603      	mov	r3, r0
90013f24:	2b00      	cmp	r3, #0
90013f26:	d003      	beq.n	90013f30 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
90013f28:	6878      	ldr	r0, [r7, #4]
90013f2a:	f7f8 fa43 	bl	9000c3b4 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
90013f2e:	e0c5      	b.n	900140bc <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
90013f30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
90013f32:	330e      	adds	r3, #14
90013f34:	4619      	mov	r1, r3
90013f36:	6878      	ldr	r0, [r7, #4]
90013f38:	f7f8 f9a6 	bl	9000c288 <pbuf_add_header>
90013f3c:	4603      	mov	r3, r0
90013f3e:	2b00      	cmp	r3, #0
90013f40:	d04b      	beq.n	90013fda <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
90013f42:	687b      	ldr	r3, [r7, #4]
90013f44:	891a      	ldrh	r2, [r3, #8]
90013f46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
90013f48:	4413      	add	r3, r2
90013f4a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
90013f4c:	687b      	ldr	r3, [r7, #4]
90013f4e:	891b      	ldrh	r3, [r3, #8]
90013f50:	8b7a      	ldrh	r2, [r7, #26]
90013f52:	429a      	cmp	r2, r3
90013f54:	f0c0 80ab 	bcc.w	900140ae <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
90013f58:	8b7b      	ldrh	r3, [r7, #26]
90013f5a:	f44f 7220 	mov.w	r2, #640	; 0x280
90013f5e:	4619      	mov	r1, r3
90013f60:	200e      	movs	r0, #14
90013f62:	f7f7 ff43 	bl	9000bdec <pbuf_alloc>
90013f66:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
90013f68:	697b      	ldr	r3, [r7, #20]
90013f6a:	2b00      	cmp	r3, #0
90013f6c:	f000 80a1 	beq.w	900140b2 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
90013f70:	697b      	ldr	r3, [r7, #20]
90013f72:	895b      	ldrh	r3, [r3, #10]
90013f74:	461a      	mov	r2, r3
90013f76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
90013f78:	3308      	adds	r3, #8
90013f7a:	429a      	cmp	r2, r3
90013f7c:	d203      	bcs.n	90013f86 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
90013f7e:	6978      	ldr	r0, [r7, #20]
90013f80:	f7f8 fa18 	bl	9000c3b4 <pbuf_free>
          goto icmperr;
90013f84:	e096      	b.n	900140b4 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
90013f86:	697b      	ldr	r3, [r7, #20]
90013f88:	685b      	ldr	r3, [r3, #4]
90013f8a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
90013f8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
90013f8e:	4618      	mov	r0, r3
90013f90:	f001 fd6b 	bl	90015a6a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
90013f94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
90013f96:	4619      	mov	r1, r3
90013f98:	6978      	ldr	r0, [r7, #20]
90013f9a:	f7f8 f985 	bl	9000c2a8 <pbuf_remove_header>
90013f9e:	4603      	mov	r3, r0
90013fa0:	2b00      	cmp	r3, #0
90013fa2:	d009      	beq.n	90013fb8 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
90013fa4:	4b49      	ldr	r3, [pc, #292]	; (900140cc <icmp_input+0x230>)
90013fa6:	22b6      	movs	r2, #182	; 0xb6
90013fa8:	4949      	ldr	r1, [pc, #292]	; (900140d0 <icmp_input+0x234>)
90013faa:	484a      	ldr	r0, [pc, #296]	; (900140d4 <icmp_input+0x238>)
90013fac:	f001 fe22 	bl	90015bf4 <iprintf>
          pbuf_free(r);
90013fb0:	6978      	ldr	r0, [r7, #20]
90013fb2:	f7f8 f9ff 	bl	9000c3b4 <pbuf_free>
          goto icmperr;
90013fb6:	e07d      	b.n	900140b4 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
90013fb8:	6879      	ldr	r1, [r7, #4]
90013fba:	6978      	ldr	r0, [r7, #20]
90013fbc:	f7f8 fb1e 	bl	9000c5fc <pbuf_copy>
90013fc0:	4603      	mov	r3, r0
90013fc2:	2b00      	cmp	r3, #0
90013fc4:	d003      	beq.n	90013fce <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
90013fc6:	6978      	ldr	r0, [r7, #20]
90013fc8:	f7f8 f9f4 	bl	9000c3b4 <pbuf_free>
          goto icmperr;
90013fcc:	e072      	b.n	900140b4 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
90013fce:	6878      	ldr	r0, [r7, #4]
90013fd0:	f7f8 f9f0 	bl	9000c3b4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
90013fd4:	697b      	ldr	r3, [r7, #20]
90013fd6:	607b      	str	r3, [r7, #4]
90013fd8:	e00f      	b.n	90013ffa <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
90013fda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
90013fdc:	330e      	adds	r3, #14
90013fde:	4619      	mov	r1, r3
90013fe0:	6878      	ldr	r0, [r7, #4]
90013fe2:	f7f8 f961 	bl	9000c2a8 <pbuf_remove_header>
90013fe6:	4603      	mov	r3, r0
90013fe8:	2b00      	cmp	r3, #0
90013fea:	d006      	beq.n	90013ffa <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
90013fec:	4b37      	ldr	r3, [pc, #220]	; (900140cc <icmp_input+0x230>)
90013fee:	22c7      	movs	r2, #199	; 0xc7
90013ff0:	4939      	ldr	r1, [pc, #228]	; (900140d8 <icmp_input+0x23c>)
90013ff2:	4838      	ldr	r0, [pc, #224]	; (900140d4 <icmp_input+0x238>)
90013ff4:	f001 fdfe 	bl	90015bf4 <iprintf>
          goto icmperr;
90013ff8:	e05c      	b.n	900140b4 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
90013ffa:	687b      	ldr	r3, [r7, #4]
90013ffc:	685b      	ldr	r3, [r3, #4]
90013ffe:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
90014000:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
90014002:	4619      	mov	r1, r3
90014004:	6878      	ldr	r0, [r7, #4]
90014006:	f7f8 f93f 	bl	9000c288 <pbuf_add_header>
9001400a:	4603      	mov	r3, r0
9001400c:	2b00      	cmp	r3, #0
9001400e:	d13c      	bne.n	9001408a <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
90014010:	687b      	ldr	r3, [r7, #4]
90014012:	685b      	ldr	r3, [r3, #4]
90014014:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
90014016:	69fb      	ldr	r3, [r7, #28]
90014018:	681a      	ldr	r2, [r3, #0]
9001401a:	68fb      	ldr	r3, [r7, #12]
9001401c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
9001401e:	4b29      	ldr	r3, [pc, #164]	; (900140c4 <icmp_input+0x228>)
90014020:	691a      	ldr	r2, [r3, #16]
90014022:	68fb      	ldr	r3, [r7, #12]
90014024:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
90014026:	693b      	ldr	r3, [r7, #16]
90014028:	2200      	movs	r2, #0
9001402a:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
9001402c:	693b      	ldr	r3, [r7, #16]
9001402e:	885b      	ldrh	r3, [r3, #2]
90014030:	b29b      	uxth	r3, r3
90014032:	f64f 72f7 	movw	r2, #65527	; 0xfff7
90014036:	4293      	cmp	r3, r2
90014038:	d907      	bls.n	9001404a <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
9001403a:	693b      	ldr	r3, [r7, #16]
9001403c:	885b      	ldrh	r3, [r3, #2]
9001403e:	b29b      	uxth	r3, r3
90014040:	3309      	adds	r3, #9
90014042:	b29a      	uxth	r2, r3
90014044:	693b      	ldr	r3, [r7, #16]
90014046:	805a      	strh	r2, [r3, #2]
90014048:	e006      	b.n	90014058 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
9001404a:	693b      	ldr	r3, [r7, #16]
9001404c:	885b      	ldrh	r3, [r3, #2]
9001404e:	b29b      	uxth	r3, r3
90014050:	3308      	adds	r3, #8
90014052:	b29a      	uxth	r2, r3
90014054:	693b      	ldr	r3, [r7, #16]
90014056:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
90014058:	68fb      	ldr	r3, [r7, #12]
9001405a:	22ff      	movs	r2, #255	; 0xff
9001405c:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
9001405e:	68fb      	ldr	r3, [r7, #12]
90014060:	2200      	movs	r2, #0
90014062:	729a      	strb	r2, [r3, #10]
90014064:	2200      	movs	r2, #0
90014066:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
90014068:	683b      	ldr	r3, [r7, #0]
9001406a:	9302      	str	r3, [sp, #8]
9001406c:	2301      	movs	r3, #1
9001406e:	9301      	str	r3, [sp, #4]
90014070:	2300      	movs	r3, #0
90014072:	9300      	str	r3, [sp, #0]
90014074:	23ff      	movs	r3, #255	; 0xff
90014076:	2200      	movs	r2, #0
90014078:	69f9      	ldr	r1, [r7, #28]
9001407a:	6878      	ldr	r0, [r7, #4]
9001407c:	f000 fa80 	bl	90014580 <ip4_output_if>
90014080:	4603      	mov	r3, r0
90014082:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
90014084:	e001      	b.n	9001408a <icmp_input+0x1ee>
      break;
90014086:	bf00      	nop
90014088:	e000      	b.n	9001408c <icmp_input+0x1f0>
      break;
9001408a:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
9001408c:	6878      	ldr	r0, [r7, #4]
9001408e:	f7f8 f991 	bl	9000c3b4 <pbuf_free>
  return;
90014092:	e013      	b.n	900140bc <icmp_input+0x220>
    goto lenerr;
90014094:	bf00      	nop
90014096:	e002      	b.n	9001409e <icmp_input+0x202>
    goto lenerr;
90014098:	bf00      	nop
9001409a:	e000      	b.n	9001409e <icmp_input+0x202>
        goto lenerr;
9001409c:	bf00      	nop
lenerr:
  pbuf_free(p);
9001409e:	6878      	ldr	r0, [r7, #4]
900140a0:	f7f8 f988 	bl	9000c3b4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
900140a4:	e00a      	b.n	900140bc <icmp_input+0x220>
        goto icmperr;
900140a6:	bf00      	nop
900140a8:	e004      	b.n	900140b4 <icmp_input+0x218>
        goto icmperr;
900140aa:	bf00      	nop
900140ac:	e002      	b.n	900140b4 <icmp_input+0x218>
          goto icmperr;
900140ae:	bf00      	nop
900140b0:	e000      	b.n	900140b4 <icmp_input+0x218>
          goto icmperr;
900140b2:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
900140b4:	6878      	ldr	r0, [r7, #4]
900140b6:	f7f8 f97d 	bl	9000c3b4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
900140ba:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
900140bc:	3728      	adds	r7, #40	; 0x28
900140be:	46bd      	mov	sp, r7
900140c0:	bd80      	pop	{r7, pc}
900140c2:	bf00      	nop
900140c4:	2401c1c8 	.word	0x2401c1c8
900140c8:	2401c1dc 	.word	0x2401c1dc
900140cc:	9001a2f0 	.word	0x9001a2f0
900140d0:	9001a328 	.word	0x9001a328
900140d4:	9001a360 	.word	0x9001a360
900140d8:	9001a388 	.word	0x9001a388

900140dc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
900140dc:	b580      	push	{r7, lr}
900140de:	b082      	sub	sp, #8
900140e0:	af00      	add	r7, sp, #0
900140e2:	6078      	str	r0, [r7, #4]
900140e4:	460b      	mov	r3, r1
900140e6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
900140e8:	78fb      	ldrb	r3, [r7, #3]
900140ea:	461a      	mov	r2, r3
900140ec:	2103      	movs	r1, #3
900140ee:	6878      	ldr	r0, [r7, #4]
900140f0:	f000 f814 	bl	9001411c <icmp_send_response>
}
900140f4:	bf00      	nop
900140f6:	3708      	adds	r7, #8
900140f8:	46bd      	mov	sp, r7
900140fa:	bd80      	pop	{r7, pc}

900140fc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
900140fc:	b580      	push	{r7, lr}
900140fe:	b082      	sub	sp, #8
90014100:	af00      	add	r7, sp, #0
90014102:	6078      	str	r0, [r7, #4]
90014104:	460b      	mov	r3, r1
90014106:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
90014108:	78fb      	ldrb	r3, [r7, #3]
9001410a:	461a      	mov	r2, r3
9001410c:	210b      	movs	r1, #11
9001410e:	6878      	ldr	r0, [r7, #4]
90014110:	f000 f804 	bl	9001411c <icmp_send_response>
}
90014114:	bf00      	nop
90014116:	3708      	adds	r7, #8
90014118:	46bd      	mov	sp, r7
9001411a:	bd80      	pop	{r7, pc}

9001411c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
9001411c:	b580      	push	{r7, lr}
9001411e:	b08c      	sub	sp, #48	; 0x30
90014120:	af04      	add	r7, sp, #16
90014122:	6078      	str	r0, [r7, #4]
90014124:	460b      	mov	r3, r1
90014126:	70fb      	strb	r3, [r7, #3]
90014128:	4613      	mov	r3, r2
9001412a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
9001412c:	f44f 7220 	mov.w	r2, #640	; 0x280
90014130:	2124      	movs	r1, #36	; 0x24
90014132:	2022      	movs	r0, #34	; 0x22
90014134:	f7f7 fe5a 	bl	9000bdec <pbuf_alloc>
90014138:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
9001413a:	69fb      	ldr	r3, [r7, #28]
9001413c:	2b00      	cmp	r3, #0
9001413e:	d056      	beq.n	900141ee <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
90014140:	69fb      	ldr	r3, [r7, #28]
90014142:	895b      	ldrh	r3, [r3, #10]
90014144:	2b23      	cmp	r3, #35	; 0x23
90014146:	d806      	bhi.n	90014156 <icmp_send_response+0x3a>
90014148:	4b2b      	ldr	r3, [pc, #172]	; (900141f8 <icmp_send_response+0xdc>)
9001414a:	f44f 72b4 	mov.w	r2, #360	; 0x168
9001414e:	492b      	ldr	r1, [pc, #172]	; (900141fc <icmp_send_response+0xe0>)
90014150:	482b      	ldr	r0, [pc, #172]	; (90014200 <icmp_send_response+0xe4>)
90014152:	f001 fd4f 	bl	90015bf4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
90014156:	687b      	ldr	r3, [r7, #4]
90014158:	685b      	ldr	r3, [r3, #4]
9001415a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
9001415c:	69fb      	ldr	r3, [r7, #28]
9001415e:	685b      	ldr	r3, [r3, #4]
90014160:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
90014162:	697b      	ldr	r3, [r7, #20]
90014164:	78fa      	ldrb	r2, [r7, #3]
90014166:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
90014168:	697b      	ldr	r3, [r7, #20]
9001416a:	78ba      	ldrb	r2, [r7, #2]
9001416c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
9001416e:	697b      	ldr	r3, [r7, #20]
90014170:	2200      	movs	r2, #0
90014172:	711a      	strb	r2, [r3, #4]
90014174:	2200      	movs	r2, #0
90014176:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
90014178:	697b      	ldr	r3, [r7, #20]
9001417a:	2200      	movs	r2, #0
9001417c:	719a      	strb	r2, [r3, #6]
9001417e:	2200      	movs	r2, #0
90014180:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
90014182:	69fb      	ldr	r3, [r7, #28]
90014184:	685b      	ldr	r3, [r3, #4]
90014186:	f103 0008 	add.w	r0, r3, #8
9001418a:	687b      	ldr	r3, [r7, #4]
9001418c:	685b      	ldr	r3, [r3, #4]
9001418e:	221c      	movs	r2, #28
90014190:	4619      	mov	r1, r3
90014192:	f001 fc6a 	bl	90015a6a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
90014196:	69bb      	ldr	r3, [r7, #24]
90014198:	68db      	ldr	r3, [r3, #12]
9001419a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
9001419c:	f107 030c 	add.w	r3, r7, #12
900141a0:	4618      	mov	r0, r3
900141a2:	f000 f82f 	bl	90014204 <ip4_route>
900141a6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
900141a8:	693b      	ldr	r3, [r7, #16]
900141aa:	2b00      	cmp	r3, #0
900141ac:	d01b      	beq.n	900141e6 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
900141ae:	697b      	ldr	r3, [r7, #20]
900141b0:	2200      	movs	r2, #0
900141b2:	709a      	strb	r2, [r3, #2]
900141b4:	2200      	movs	r2, #0
900141b6:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
900141b8:	69fb      	ldr	r3, [r7, #28]
900141ba:	895b      	ldrh	r3, [r3, #10]
900141bc:	4619      	mov	r1, r3
900141be:	6978      	ldr	r0, [r7, #20]
900141c0:	f7f6 fcd9 	bl	9000ab76 <inet_chksum>
900141c4:	4603      	mov	r3, r0
900141c6:	461a      	mov	r2, r3
900141c8:	697b      	ldr	r3, [r7, #20]
900141ca:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
900141cc:	f107 020c 	add.w	r2, r7, #12
900141d0:	693b      	ldr	r3, [r7, #16]
900141d2:	9302      	str	r3, [sp, #8]
900141d4:	2301      	movs	r3, #1
900141d6:	9301      	str	r3, [sp, #4]
900141d8:	2300      	movs	r3, #0
900141da:	9300      	str	r3, [sp, #0]
900141dc:	23ff      	movs	r3, #255	; 0xff
900141de:	2100      	movs	r1, #0
900141e0:	69f8      	ldr	r0, [r7, #28]
900141e2:	f000 f9cd 	bl	90014580 <ip4_output_if>
  }
  pbuf_free(q);
900141e6:	69f8      	ldr	r0, [r7, #28]
900141e8:	f7f8 f8e4 	bl	9000c3b4 <pbuf_free>
900141ec:	e000      	b.n	900141f0 <icmp_send_response+0xd4>
    return;
900141ee:	bf00      	nop
}
900141f0:	3720      	adds	r7, #32
900141f2:	46bd      	mov	sp, r7
900141f4:	bd80      	pop	{r7, pc}
900141f6:	bf00      	nop
900141f8:	9001a2f0 	.word	0x9001a2f0
900141fc:	9001a3bc 	.word	0x9001a3bc
90014200:	9001a360 	.word	0x9001a360

90014204 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
90014204:	b480      	push	{r7}
90014206:	b085      	sub	sp, #20
90014208:	af00      	add	r7, sp, #0
9001420a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
9001420c:	4b33      	ldr	r3, [pc, #204]	; (900142dc <ip4_route+0xd8>)
9001420e:	681b      	ldr	r3, [r3, #0]
90014210:	60fb      	str	r3, [r7, #12]
90014212:	e036      	b.n	90014282 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
90014214:	68fb      	ldr	r3, [r7, #12]
90014216:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
9001421a:	f003 0301 	and.w	r3, r3, #1
9001421e:	b2db      	uxtb	r3, r3
90014220:	2b00      	cmp	r3, #0
90014222:	d02b      	beq.n	9001427c <ip4_route+0x78>
90014224:	68fb      	ldr	r3, [r7, #12]
90014226:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
9001422a:	089b      	lsrs	r3, r3, #2
9001422c:	f003 0301 	and.w	r3, r3, #1
90014230:	b2db      	uxtb	r3, r3
90014232:	2b00      	cmp	r3, #0
90014234:	d022      	beq.n	9001427c <ip4_route+0x78>
90014236:	68fb      	ldr	r3, [r7, #12]
90014238:	3304      	adds	r3, #4
9001423a:	681b      	ldr	r3, [r3, #0]
9001423c:	2b00      	cmp	r3, #0
9001423e:	d01d      	beq.n	9001427c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
90014240:	687b      	ldr	r3, [r7, #4]
90014242:	681a      	ldr	r2, [r3, #0]
90014244:	68fb      	ldr	r3, [r7, #12]
90014246:	3304      	adds	r3, #4
90014248:	681b      	ldr	r3, [r3, #0]
9001424a:	405a      	eors	r2, r3
9001424c:	68fb      	ldr	r3, [r7, #12]
9001424e:	3308      	adds	r3, #8
90014250:	681b      	ldr	r3, [r3, #0]
90014252:	4013      	ands	r3, r2
90014254:	2b00      	cmp	r3, #0
90014256:	d101      	bne.n	9001425c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
90014258:	68fb      	ldr	r3, [r7, #12]
9001425a:	e038      	b.n	900142ce <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
9001425c:	68fb      	ldr	r3, [r7, #12]
9001425e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90014262:	f003 0302 	and.w	r3, r3, #2
90014266:	2b00      	cmp	r3, #0
90014268:	d108      	bne.n	9001427c <ip4_route+0x78>
9001426a:	687b      	ldr	r3, [r7, #4]
9001426c:	681a      	ldr	r2, [r3, #0]
9001426e:	68fb      	ldr	r3, [r7, #12]
90014270:	330c      	adds	r3, #12
90014272:	681b      	ldr	r3, [r3, #0]
90014274:	429a      	cmp	r2, r3
90014276:	d101      	bne.n	9001427c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
90014278:	68fb      	ldr	r3, [r7, #12]
9001427a:	e028      	b.n	900142ce <ip4_route+0xca>
  NETIF_FOREACH(netif) {
9001427c:	68fb      	ldr	r3, [r7, #12]
9001427e:	681b      	ldr	r3, [r3, #0]
90014280:	60fb      	str	r3, [r7, #12]
90014282:	68fb      	ldr	r3, [r7, #12]
90014284:	2b00      	cmp	r3, #0
90014286:	d1c5      	bne.n	90014214 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
90014288:	4b15      	ldr	r3, [pc, #84]	; (900142e0 <ip4_route+0xdc>)
9001428a:	681b      	ldr	r3, [r3, #0]
9001428c:	2b00      	cmp	r3, #0
9001428e:	d01a      	beq.n	900142c6 <ip4_route+0xc2>
90014290:	4b13      	ldr	r3, [pc, #76]	; (900142e0 <ip4_route+0xdc>)
90014292:	681b      	ldr	r3, [r3, #0]
90014294:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90014298:	f003 0301 	and.w	r3, r3, #1
9001429c:	2b00      	cmp	r3, #0
9001429e:	d012      	beq.n	900142c6 <ip4_route+0xc2>
900142a0:	4b0f      	ldr	r3, [pc, #60]	; (900142e0 <ip4_route+0xdc>)
900142a2:	681b      	ldr	r3, [r3, #0]
900142a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
900142a8:	f003 0304 	and.w	r3, r3, #4
900142ac:	2b00      	cmp	r3, #0
900142ae:	d00a      	beq.n	900142c6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
900142b0:	4b0b      	ldr	r3, [pc, #44]	; (900142e0 <ip4_route+0xdc>)
900142b2:	681b      	ldr	r3, [r3, #0]
900142b4:	3304      	adds	r3, #4
900142b6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
900142b8:	2b00      	cmp	r3, #0
900142ba:	d004      	beq.n	900142c6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
900142bc:	687b      	ldr	r3, [r7, #4]
900142be:	681b      	ldr	r3, [r3, #0]
900142c0:	b2db      	uxtb	r3, r3
900142c2:	2b7f      	cmp	r3, #127	; 0x7f
900142c4:	d101      	bne.n	900142ca <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
900142c6:	2300      	movs	r3, #0
900142c8:	e001      	b.n	900142ce <ip4_route+0xca>
  }

  return netif_default;
900142ca:	4b05      	ldr	r3, [pc, #20]	; (900142e0 <ip4_route+0xdc>)
900142cc:	681b      	ldr	r3, [r3, #0]
}
900142ce:	4618      	mov	r0, r3
900142d0:	3714      	adds	r7, #20
900142d2:	46bd      	mov	sp, r7
900142d4:	f85d 7b04 	ldr.w	r7, [sp], #4
900142d8:	4770      	bx	lr
900142da:	bf00      	nop
900142dc:	2401f398 	.word	0x2401f398
900142e0:	2401f39c 	.word	0x2401f39c

900142e4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
900142e4:	b580      	push	{r7, lr}
900142e6:	b082      	sub	sp, #8
900142e8:	af00      	add	r7, sp, #0
900142ea:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
900142ec:	687b      	ldr	r3, [r7, #4]
900142ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
900142f2:	f003 0301 	and.w	r3, r3, #1
900142f6:	b2db      	uxtb	r3, r3
900142f8:	2b00      	cmp	r3, #0
900142fa:	d016      	beq.n	9001432a <ip4_input_accept+0x46>
900142fc:	687b      	ldr	r3, [r7, #4]
900142fe:	3304      	adds	r3, #4
90014300:	681b      	ldr	r3, [r3, #0]
90014302:	2b00      	cmp	r3, #0
90014304:	d011      	beq.n	9001432a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
90014306:	4b0b      	ldr	r3, [pc, #44]	; (90014334 <ip4_input_accept+0x50>)
90014308:	695a      	ldr	r2, [r3, #20]
9001430a:	687b      	ldr	r3, [r7, #4]
9001430c:	3304      	adds	r3, #4
9001430e:	681b      	ldr	r3, [r3, #0]
90014310:	429a      	cmp	r2, r3
90014312:	d008      	beq.n	90014326 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
90014314:	4b07      	ldr	r3, [pc, #28]	; (90014334 <ip4_input_accept+0x50>)
90014316:	695b      	ldr	r3, [r3, #20]
90014318:	6879      	ldr	r1, [r7, #4]
9001431a:	4618      	mov	r0, r3
9001431c:	f000 fa08 	bl	90014730 <ip4_addr_isbroadcast_u32>
90014320:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
90014322:	2b00      	cmp	r3, #0
90014324:	d001      	beq.n	9001432a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
90014326:	2301      	movs	r3, #1
90014328:	e000      	b.n	9001432c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
9001432a:	2300      	movs	r3, #0
}
9001432c:	4618      	mov	r0, r3
9001432e:	3708      	adds	r7, #8
90014330:	46bd      	mov	sp, r7
90014332:	bd80      	pop	{r7, pc}
90014334:	2401c1c8 	.word	0x2401c1c8

90014338 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
90014338:	b580      	push	{r7, lr}
9001433a:	b086      	sub	sp, #24
9001433c:	af00      	add	r7, sp, #0
9001433e:	6078      	str	r0, [r7, #4]
90014340:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
90014342:	687b      	ldr	r3, [r7, #4]
90014344:	685b      	ldr	r3, [r3, #4]
90014346:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
90014348:	697b      	ldr	r3, [r7, #20]
9001434a:	781b      	ldrb	r3, [r3, #0]
9001434c:	091b      	lsrs	r3, r3, #4
9001434e:	b2db      	uxtb	r3, r3
90014350:	2b04      	cmp	r3, #4
90014352:	d004      	beq.n	9001435e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
90014354:	6878      	ldr	r0, [r7, #4]
90014356:	f7f8 f82d 	bl	9000c3b4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
9001435a:	2300      	movs	r3, #0
9001435c:	e107      	b.n	9001456e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
9001435e:	697b      	ldr	r3, [r7, #20]
90014360:	781b      	ldrb	r3, [r3, #0]
90014362:	f003 030f 	and.w	r3, r3, #15
90014366:	b2db      	uxtb	r3, r3
90014368:	009b      	lsls	r3, r3, #2
9001436a:	b2db      	uxtb	r3, r3
9001436c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
9001436e:	697b      	ldr	r3, [r7, #20]
90014370:	885b      	ldrh	r3, [r3, #2]
90014372:	b29b      	uxth	r3, r3
90014374:	4618      	mov	r0, r3
90014376:	f7f6 fb09 	bl	9000a98c <lwip_htons>
9001437a:	4603      	mov	r3, r0
9001437c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
9001437e:	687b      	ldr	r3, [r7, #4]
90014380:	891b      	ldrh	r3, [r3, #8]
90014382:	89ba      	ldrh	r2, [r7, #12]
90014384:	429a      	cmp	r2, r3
90014386:	d204      	bcs.n	90014392 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
90014388:	89bb      	ldrh	r3, [r7, #12]
9001438a:	4619      	mov	r1, r3
9001438c:	6878      	ldr	r0, [r7, #4]
9001438e:	f7f7 fe8b 	bl	9000c0a8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
90014392:	687b      	ldr	r3, [r7, #4]
90014394:	895b      	ldrh	r3, [r3, #10]
90014396:	89fa      	ldrh	r2, [r7, #14]
90014398:	429a      	cmp	r2, r3
9001439a:	d807      	bhi.n	900143ac <ip4_input+0x74>
9001439c:	687b      	ldr	r3, [r7, #4]
9001439e:	891b      	ldrh	r3, [r3, #8]
900143a0:	89ba      	ldrh	r2, [r7, #12]
900143a2:	429a      	cmp	r2, r3
900143a4:	d802      	bhi.n	900143ac <ip4_input+0x74>
900143a6:	89fb      	ldrh	r3, [r7, #14]
900143a8:	2b13      	cmp	r3, #19
900143aa:	d804      	bhi.n	900143b6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
900143ac:	6878      	ldr	r0, [r7, #4]
900143ae:	f7f8 f801 	bl	9000c3b4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
900143b2:	2300      	movs	r3, #0
900143b4:	e0db      	b.n	9001456e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
900143b6:	697b      	ldr	r3, [r7, #20]
900143b8:	691b      	ldr	r3, [r3, #16]
900143ba:	4a6f      	ldr	r2, [pc, #444]	; (90014578 <ip4_input+0x240>)
900143bc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
900143be:	697b      	ldr	r3, [r7, #20]
900143c0:	68db      	ldr	r3, [r3, #12]
900143c2:	4a6d      	ldr	r2, [pc, #436]	; (90014578 <ip4_input+0x240>)
900143c4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
900143c6:	4b6c      	ldr	r3, [pc, #432]	; (90014578 <ip4_input+0x240>)
900143c8:	695b      	ldr	r3, [r3, #20]
900143ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
900143ce:	2be0      	cmp	r3, #224	; 0xe0
900143d0:	d112      	bne.n	900143f8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
900143d2:	683b      	ldr	r3, [r7, #0]
900143d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
900143d8:	f003 0301 	and.w	r3, r3, #1
900143dc:	b2db      	uxtb	r3, r3
900143de:	2b00      	cmp	r3, #0
900143e0:	d007      	beq.n	900143f2 <ip4_input+0xba>
900143e2:	683b      	ldr	r3, [r7, #0]
900143e4:	3304      	adds	r3, #4
900143e6:	681b      	ldr	r3, [r3, #0]
900143e8:	2b00      	cmp	r3, #0
900143ea:	d002      	beq.n	900143f2 <ip4_input+0xba>
      netif = inp;
900143ec:	683b      	ldr	r3, [r7, #0]
900143ee:	613b      	str	r3, [r7, #16]
900143f0:	e02a      	b.n	90014448 <ip4_input+0x110>
    } else {
      netif = NULL;
900143f2:	2300      	movs	r3, #0
900143f4:	613b      	str	r3, [r7, #16]
900143f6:	e027      	b.n	90014448 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
900143f8:	6838      	ldr	r0, [r7, #0]
900143fa:	f7ff ff73 	bl	900142e4 <ip4_input_accept>
900143fe:	4603      	mov	r3, r0
90014400:	2b00      	cmp	r3, #0
90014402:	d002      	beq.n	9001440a <ip4_input+0xd2>
      netif = inp;
90014404:	683b      	ldr	r3, [r7, #0]
90014406:	613b      	str	r3, [r7, #16]
90014408:	e01e      	b.n	90014448 <ip4_input+0x110>
    } else {
      netif = NULL;
9001440a:	2300      	movs	r3, #0
9001440c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
9001440e:	4b5a      	ldr	r3, [pc, #360]	; (90014578 <ip4_input+0x240>)
90014410:	695b      	ldr	r3, [r3, #20]
90014412:	b2db      	uxtb	r3, r3
90014414:	2b7f      	cmp	r3, #127	; 0x7f
90014416:	d017      	beq.n	90014448 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
90014418:	4b58      	ldr	r3, [pc, #352]	; (9001457c <ip4_input+0x244>)
9001441a:	681b      	ldr	r3, [r3, #0]
9001441c:	613b      	str	r3, [r7, #16]
9001441e:	e00e      	b.n	9001443e <ip4_input+0x106>
          if (netif == inp) {
90014420:	693a      	ldr	r2, [r7, #16]
90014422:	683b      	ldr	r3, [r7, #0]
90014424:	429a      	cmp	r2, r3
90014426:	d006      	beq.n	90014436 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
90014428:	6938      	ldr	r0, [r7, #16]
9001442a:	f7ff ff5b 	bl	900142e4 <ip4_input_accept>
9001442e:	4603      	mov	r3, r0
90014430:	2b00      	cmp	r3, #0
90014432:	d108      	bne.n	90014446 <ip4_input+0x10e>
90014434:	e000      	b.n	90014438 <ip4_input+0x100>
            continue;
90014436:	bf00      	nop
        NETIF_FOREACH(netif) {
90014438:	693b      	ldr	r3, [r7, #16]
9001443a:	681b      	ldr	r3, [r3, #0]
9001443c:	613b      	str	r3, [r7, #16]
9001443e:	693b      	ldr	r3, [r7, #16]
90014440:	2b00      	cmp	r3, #0
90014442:	d1ed      	bne.n	90014420 <ip4_input+0xe8>
90014444:	e000      	b.n	90014448 <ip4_input+0x110>
            break;
90014446:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
90014448:	4b4b      	ldr	r3, [pc, #300]	; (90014578 <ip4_input+0x240>)
9001444a:	691b      	ldr	r3, [r3, #16]
9001444c:	6839      	ldr	r1, [r7, #0]
9001444e:	4618      	mov	r0, r3
90014450:	f000 f96e 	bl	90014730 <ip4_addr_isbroadcast_u32>
90014454:	4603      	mov	r3, r0
90014456:	2b00      	cmp	r3, #0
90014458:	d105      	bne.n	90014466 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
9001445a:	4b47      	ldr	r3, [pc, #284]	; (90014578 <ip4_input+0x240>)
9001445c:	691b      	ldr	r3, [r3, #16]
9001445e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
90014462:	2be0      	cmp	r3, #224	; 0xe0
90014464:	d104      	bne.n	90014470 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
90014466:	6878      	ldr	r0, [r7, #4]
90014468:	f7f7 ffa4 	bl	9000c3b4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
9001446c:	2300      	movs	r3, #0
9001446e:	e07e      	b.n	9001456e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
90014470:	693b      	ldr	r3, [r7, #16]
90014472:	2b00      	cmp	r3, #0
90014474:	d104      	bne.n	90014480 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
90014476:	6878      	ldr	r0, [r7, #4]
90014478:	f7f7 ff9c 	bl	9000c3b4 <pbuf_free>
    return ERR_OK;
9001447c:	2300      	movs	r3, #0
9001447e:	e076      	b.n	9001456e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
90014480:	697b      	ldr	r3, [r7, #20]
90014482:	88db      	ldrh	r3, [r3, #6]
90014484:	b29b      	uxth	r3, r3
90014486:	461a      	mov	r2, r3
90014488:	f64f 733f 	movw	r3, #65343	; 0xff3f
9001448c:	4013      	ands	r3, r2
9001448e:	2b00      	cmp	r3, #0
90014490:	d00b      	beq.n	900144aa <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
90014492:	6878      	ldr	r0, [r7, #4]
90014494:	f000 fc92 	bl	90014dbc <ip4_reass>
90014498:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
9001449a:	687b      	ldr	r3, [r7, #4]
9001449c:	2b00      	cmp	r3, #0
9001449e:	d101      	bne.n	900144a4 <ip4_input+0x16c>
      return ERR_OK;
900144a0:	2300      	movs	r3, #0
900144a2:	e064      	b.n	9001456e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
900144a4:	687b      	ldr	r3, [r7, #4]
900144a6:	685b      	ldr	r3, [r3, #4]
900144a8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
900144aa:	4a33      	ldr	r2, [pc, #204]	; (90014578 <ip4_input+0x240>)
900144ac:	693b      	ldr	r3, [r7, #16]
900144ae:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
900144b0:	4a31      	ldr	r2, [pc, #196]	; (90014578 <ip4_input+0x240>)
900144b2:	683b      	ldr	r3, [r7, #0]
900144b4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
900144b6:	4a30      	ldr	r2, [pc, #192]	; (90014578 <ip4_input+0x240>)
900144b8:	697b      	ldr	r3, [r7, #20]
900144ba:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
900144bc:	697b      	ldr	r3, [r7, #20]
900144be:	781b      	ldrb	r3, [r3, #0]
900144c0:	f003 030f 	and.w	r3, r3, #15
900144c4:	b2db      	uxtb	r3, r3
900144c6:	009b      	lsls	r3, r3, #2
900144c8:	b2db      	uxtb	r3, r3
900144ca:	b29a      	uxth	r2, r3
900144cc:	4b2a      	ldr	r3, [pc, #168]	; (90014578 <ip4_input+0x240>)
900144ce:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
900144d0:	89fb      	ldrh	r3, [r7, #14]
900144d2:	4619      	mov	r1, r3
900144d4:	6878      	ldr	r0, [r7, #4]
900144d6:	f7f7 fee7 	bl	9000c2a8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
900144da:	697b      	ldr	r3, [r7, #20]
900144dc:	7a5b      	ldrb	r3, [r3, #9]
900144de:	2b11      	cmp	r3, #17
900144e0:	d006      	beq.n	900144f0 <ip4_input+0x1b8>
900144e2:	2b11      	cmp	r3, #17
900144e4:	dc13      	bgt.n	9001450e <ip4_input+0x1d6>
900144e6:	2b01      	cmp	r3, #1
900144e8:	d00c      	beq.n	90014504 <ip4_input+0x1cc>
900144ea:	2b06      	cmp	r3, #6
900144ec:	d005      	beq.n	900144fa <ip4_input+0x1c2>
900144ee:	e00e      	b.n	9001450e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
900144f0:	6839      	ldr	r1, [r7, #0]
900144f2:	6878      	ldr	r0, [r7, #4]
900144f4:	f7fe fc42 	bl	90012d7c <udp_input>
        break;
900144f8:	e026      	b.n	90014548 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
900144fa:	6839      	ldr	r1, [r7, #0]
900144fc:	6878      	ldr	r0, [r7, #4]
900144fe:	f7fa f833 	bl	9000e568 <tcp_input>
        break;
90014502:	e021      	b.n	90014548 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
90014504:	6839      	ldr	r1, [r7, #0]
90014506:	6878      	ldr	r0, [r7, #4]
90014508:	f7ff fcc8 	bl	90013e9c <icmp_input>
        break;
9001450c:	e01c      	b.n	90014548 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
9001450e:	4b1a      	ldr	r3, [pc, #104]	; (90014578 <ip4_input+0x240>)
90014510:	695b      	ldr	r3, [r3, #20]
90014512:	6939      	ldr	r1, [r7, #16]
90014514:	4618      	mov	r0, r3
90014516:	f000 f90b 	bl	90014730 <ip4_addr_isbroadcast_u32>
9001451a:	4603      	mov	r3, r0
9001451c:	2b00      	cmp	r3, #0
9001451e:	d10f      	bne.n	90014540 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
90014520:	4b15      	ldr	r3, [pc, #84]	; (90014578 <ip4_input+0x240>)
90014522:	695b      	ldr	r3, [r3, #20]
90014524:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
90014528:	2be0      	cmp	r3, #224	; 0xe0
9001452a:	d009      	beq.n	90014540 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
9001452c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
90014530:	4619      	mov	r1, r3
90014532:	6878      	ldr	r0, [r7, #4]
90014534:	f7f7 ff2b 	bl	9000c38e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
90014538:	2102      	movs	r1, #2
9001453a:	6878      	ldr	r0, [r7, #4]
9001453c:	f7ff fdce 	bl	900140dc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
90014540:	6878      	ldr	r0, [r7, #4]
90014542:	f7f7 ff37 	bl	9000c3b4 <pbuf_free>
        break;
90014546:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
90014548:	4b0b      	ldr	r3, [pc, #44]	; (90014578 <ip4_input+0x240>)
9001454a:	2200      	movs	r2, #0
9001454c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
9001454e:	4b0a      	ldr	r3, [pc, #40]	; (90014578 <ip4_input+0x240>)
90014550:	2200      	movs	r2, #0
90014552:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
90014554:	4b08      	ldr	r3, [pc, #32]	; (90014578 <ip4_input+0x240>)
90014556:	2200      	movs	r2, #0
90014558:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
9001455a:	4b07      	ldr	r3, [pc, #28]	; (90014578 <ip4_input+0x240>)
9001455c:	2200      	movs	r2, #0
9001455e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
90014560:	4b05      	ldr	r3, [pc, #20]	; (90014578 <ip4_input+0x240>)
90014562:	2200      	movs	r2, #0
90014564:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
90014566:	4b04      	ldr	r3, [pc, #16]	; (90014578 <ip4_input+0x240>)
90014568:	2200      	movs	r2, #0
9001456a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
9001456c:	2300      	movs	r3, #0
}
9001456e:	4618      	mov	r0, r3
90014570:	3718      	adds	r7, #24
90014572:	46bd      	mov	sp, r7
90014574:	bd80      	pop	{r7, pc}
90014576:	bf00      	nop
90014578:	2401c1c8 	.word	0x2401c1c8
9001457c:	2401f398 	.word	0x2401f398

90014580 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
90014580:	b580      	push	{r7, lr}
90014582:	b08a      	sub	sp, #40	; 0x28
90014584:	af04      	add	r7, sp, #16
90014586:	60f8      	str	r0, [r7, #12]
90014588:	60b9      	str	r1, [r7, #8]
9001458a:	607a      	str	r2, [r7, #4]
9001458c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
9001458e:	68bb      	ldr	r3, [r7, #8]
90014590:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
90014592:	687b      	ldr	r3, [r7, #4]
90014594:	2b00      	cmp	r3, #0
90014596:	d009      	beq.n	900145ac <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
90014598:	68bb      	ldr	r3, [r7, #8]
9001459a:	2b00      	cmp	r3, #0
9001459c:	d003      	beq.n	900145a6 <ip4_output_if+0x26>
9001459e:	68bb      	ldr	r3, [r7, #8]
900145a0:	681b      	ldr	r3, [r3, #0]
900145a2:	2b00      	cmp	r3, #0
900145a4:	d102      	bne.n	900145ac <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
900145a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
900145a8:	3304      	adds	r3, #4
900145aa:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
900145ac:	78fa      	ldrb	r2, [r7, #3]
900145ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
900145b0:	9302      	str	r3, [sp, #8]
900145b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
900145b6:	9301      	str	r3, [sp, #4]
900145b8:	f897 3020 	ldrb.w	r3, [r7, #32]
900145bc:	9300      	str	r3, [sp, #0]
900145be:	4613      	mov	r3, r2
900145c0:	687a      	ldr	r2, [r7, #4]
900145c2:	6979      	ldr	r1, [r7, #20]
900145c4:	68f8      	ldr	r0, [r7, #12]
900145c6:	f000 f805 	bl	900145d4 <ip4_output_if_src>
900145ca:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
900145cc:	4618      	mov	r0, r3
900145ce:	3718      	adds	r7, #24
900145d0:	46bd      	mov	sp, r7
900145d2:	bd80      	pop	{r7, pc}

900145d4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
900145d4:	b580      	push	{r7, lr}
900145d6:	b088      	sub	sp, #32
900145d8:	af00      	add	r7, sp, #0
900145da:	60f8      	str	r0, [r7, #12]
900145dc:	60b9      	str	r1, [r7, #8]
900145de:	607a      	str	r2, [r7, #4]
900145e0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
900145e2:	68fb      	ldr	r3, [r7, #12]
900145e4:	7b9b      	ldrb	r3, [r3, #14]
900145e6:	2b01      	cmp	r3, #1
900145e8:	d006      	beq.n	900145f8 <ip4_output_if_src+0x24>
900145ea:	4b4b      	ldr	r3, [pc, #300]	; (90014718 <ip4_output_if_src+0x144>)
900145ec:	f44f 7255 	mov.w	r2, #852	; 0x354
900145f0:	494a      	ldr	r1, [pc, #296]	; (9001471c <ip4_output_if_src+0x148>)
900145f2:	484b      	ldr	r0, [pc, #300]	; (90014720 <ip4_output_if_src+0x14c>)
900145f4:	f001 fafe 	bl	90015bf4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
900145f8:	687b      	ldr	r3, [r7, #4]
900145fa:	2b00      	cmp	r3, #0
900145fc:	d060      	beq.n	900146c0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
900145fe:	2314      	movs	r3, #20
90014600:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
90014602:	2114      	movs	r1, #20
90014604:	68f8      	ldr	r0, [r7, #12]
90014606:	f7f7 fe3f 	bl	9000c288 <pbuf_add_header>
9001460a:	4603      	mov	r3, r0
9001460c:	2b00      	cmp	r3, #0
9001460e:	d002      	beq.n	90014616 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
90014610:	f06f 0301 	mvn.w	r3, #1
90014614:	e07c      	b.n	90014710 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
90014616:	68fb      	ldr	r3, [r7, #12]
90014618:	685b      	ldr	r3, [r3, #4]
9001461a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
9001461c:	68fb      	ldr	r3, [r7, #12]
9001461e:	895b      	ldrh	r3, [r3, #10]
90014620:	2b13      	cmp	r3, #19
90014622:	d806      	bhi.n	90014632 <ip4_output_if_src+0x5e>
90014624:	4b3c      	ldr	r3, [pc, #240]	; (90014718 <ip4_output_if_src+0x144>)
90014626:	f44f 7262 	mov.w	r2, #904	; 0x388
9001462a:	493e      	ldr	r1, [pc, #248]	; (90014724 <ip4_output_if_src+0x150>)
9001462c:	483c      	ldr	r0, [pc, #240]	; (90014720 <ip4_output_if_src+0x14c>)
9001462e:	f001 fae1 	bl	90015bf4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
90014632:	69fb      	ldr	r3, [r7, #28]
90014634:	78fa      	ldrb	r2, [r7, #3]
90014636:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
90014638:	69fb      	ldr	r3, [r7, #28]
9001463a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
9001463e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
90014640:	687b      	ldr	r3, [r7, #4]
90014642:	681a      	ldr	r2, [r3, #0]
90014644:	69fb      	ldr	r3, [r7, #28]
90014646:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
90014648:	8b7b      	ldrh	r3, [r7, #26]
9001464a:	089b      	lsrs	r3, r3, #2
9001464c:	b29b      	uxth	r3, r3
9001464e:	b2db      	uxtb	r3, r3
90014650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90014654:	b2da      	uxtb	r2, r3
90014656:	69fb      	ldr	r3, [r7, #28]
90014658:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
9001465a:	69fb      	ldr	r3, [r7, #28]
9001465c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
90014660:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
90014662:	68fb      	ldr	r3, [r7, #12]
90014664:	891b      	ldrh	r3, [r3, #8]
90014666:	4618      	mov	r0, r3
90014668:	f7f6 f990 	bl	9000a98c <lwip_htons>
9001466c:	4603      	mov	r3, r0
9001466e:	461a      	mov	r2, r3
90014670:	69fb      	ldr	r3, [r7, #28]
90014672:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
90014674:	69fb      	ldr	r3, [r7, #28]
90014676:	2200      	movs	r2, #0
90014678:	719a      	strb	r2, [r3, #6]
9001467a:	2200      	movs	r2, #0
9001467c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
9001467e:	4b2a      	ldr	r3, [pc, #168]	; (90014728 <ip4_output_if_src+0x154>)
90014680:	881b      	ldrh	r3, [r3, #0]
90014682:	4618      	mov	r0, r3
90014684:	f7f6 f982 	bl	9000a98c <lwip_htons>
90014688:	4603      	mov	r3, r0
9001468a:	461a      	mov	r2, r3
9001468c:	69fb      	ldr	r3, [r7, #28]
9001468e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
90014690:	4b25      	ldr	r3, [pc, #148]	; (90014728 <ip4_output_if_src+0x154>)
90014692:	881b      	ldrh	r3, [r3, #0]
90014694:	3301      	adds	r3, #1
90014696:	b29a      	uxth	r2, r3
90014698:	4b23      	ldr	r3, [pc, #140]	; (90014728 <ip4_output_if_src+0x154>)
9001469a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
9001469c:	68bb      	ldr	r3, [r7, #8]
9001469e:	2b00      	cmp	r3, #0
900146a0:	d104      	bne.n	900146ac <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
900146a2:	4b22      	ldr	r3, [pc, #136]	; (9001472c <ip4_output_if_src+0x158>)
900146a4:	681a      	ldr	r2, [r3, #0]
900146a6:	69fb      	ldr	r3, [r7, #28]
900146a8:	60da      	str	r2, [r3, #12]
900146aa:	e003      	b.n	900146b4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
900146ac:	68bb      	ldr	r3, [r7, #8]
900146ae:	681a      	ldr	r2, [r3, #0]
900146b0:	69fb      	ldr	r3, [r7, #28]
900146b2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
900146b4:	69fb      	ldr	r3, [r7, #28]
900146b6:	2200      	movs	r2, #0
900146b8:	729a      	strb	r2, [r3, #10]
900146ba:	2200      	movs	r2, #0
900146bc:	72da      	strb	r2, [r3, #11]
900146be:	e00f      	b.n	900146e0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
900146c0:	68fb      	ldr	r3, [r7, #12]
900146c2:	895b      	ldrh	r3, [r3, #10]
900146c4:	2b13      	cmp	r3, #19
900146c6:	d802      	bhi.n	900146ce <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
900146c8:	f06f 0301 	mvn.w	r3, #1
900146cc:	e020      	b.n	90014710 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
900146ce:	68fb      	ldr	r3, [r7, #12]
900146d0:	685b      	ldr	r3, [r3, #4]
900146d2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
900146d4:	69fb      	ldr	r3, [r7, #28]
900146d6:	691b      	ldr	r3, [r3, #16]
900146d8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
900146da:	f107 0314 	add.w	r3, r7, #20
900146de:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
900146e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900146e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
900146e4:	2b00      	cmp	r3, #0
900146e6:	d00c      	beq.n	90014702 <ip4_output_if_src+0x12e>
900146e8:	68fb      	ldr	r3, [r7, #12]
900146ea:	891a      	ldrh	r2, [r3, #8]
900146ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900146ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
900146f0:	429a      	cmp	r2, r3
900146f2:	d906      	bls.n	90014702 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
900146f4:	687a      	ldr	r2, [r7, #4]
900146f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
900146f8:	68f8      	ldr	r0, [r7, #12]
900146fa:	f000 fd53 	bl	900151a4 <ip4_frag>
900146fe:	4603      	mov	r3, r0
90014700:	e006      	b.n	90014710 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
90014702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90014704:	695b      	ldr	r3, [r3, #20]
90014706:	687a      	ldr	r2, [r7, #4]
90014708:	68f9      	ldr	r1, [r7, #12]
9001470a:	6b38      	ldr	r0, [r7, #48]	; 0x30
9001470c:	4798      	blx	r3
9001470e:	4603      	mov	r3, r0
}
90014710:	4618      	mov	r0, r3
90014712:	3720      	adds	r7, #32
90014714:	46bd      	mov	sp, r7
90014716:	bd80      	pop	{r7, pc}
90014718:	9001a3e8 	.word	0x9001a3e8
9001471c:	9001a41c 	.word	0x9001a41c
90014720:	9001a428 	.word	0x9001a428
90014724:	9001a450 	.word	0x9001a450
90014728:	2401f4f6 	.word	0x2401f4f6
9001472c:	90021134 	.word	0x90021134

90014730 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
90014730:	b480      	push	{r7}
90014732:	b085      	sub	sp, #20
90014734:	af00      	add	r7, sp, #0
90014736:	6078      	str	r0, [r7, #4]
90014738:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
9001473a:	687b      	ldr	r3, [r7, #4]
9001473c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
9001473e:	687b      	ldr	r3, [r7, #4]
90014740:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
90014744:	d002      	beq.n	9001474c <ip4_addr_isbroadcast_u32+0x1c>
90014746:	687b      	ldr	r3, [r7, #4]
90014748:	2b00      	cmp	r3, #0
9001474a:	d101      	bne.n	90014750 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
9001474c:	2301      	movs	r3, #1
9001474e:	e02a      	b.n	900147a6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
90014750:	683b      	ldr	r3, [r7, #0]
90014752:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
90014756:	f003 0302 	and.w	r3, r3, #2
9001475a:	2b00      	cmp	r3, #0
9001475c:	d101      	bne.n	90014762 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
9001475e:	2300      	movs	r3, #0
90014760:	e021      	b.n	900147a6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
90014762:	683b      	ldr	r3, [r7, #0]
90014764:	3304      	adds	r3, #4
90014766:	681b      	ldr	r3, [r3, #0]
90014768:	687a      	ldr	r2, [r7, #4]
9001476a:	429a      	cmp	r2, r3
9001476c:	d101      	bne.n	90014772 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
9001476e:	2300      	movs	r3, #0
90014770:	e019      	b.n	900147a6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
90014772:	68fa      	ldr	r2, [r7, #12]
90014774:	683b      	ldr	r3, [r7, #0]
90014776:	3304      	adds	r3, #4
90014778:	681b      	ldr	r3, [r3, #0]
9001477a:	405a      	eors	r2, r3
9001477c:	683b      	ldr	r3, [r7, #0]
9001477e:	3308      	adds	r3, #8
90014780:	681b      	ldr	r3, [r3, #0]
90014782:	4013      	ands	r3, r2
90014784:	2b00      	cmp	r3, #0
90014786:	d10d      	bne.n	900147a4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
90014788:	683b      	ldr	r3, [r7, #0]
9001478a:	3308      	adds	r3, #8
9001478c:	681b      	ldr	r3, [r3, #0]
9001478e:	43da      	mvns	r2, r3
90014790:	687b      	ldr	r3, [r7, #4]
90014792:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
90014794:	683b      	ldr	r3, [r7, #0]
90014796:	3308      	adds	r3, #8
90014798:	681b      	ldr	r3, [r3, #0]
9001479a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
9001479c:	429a      	cmp	r2, r3
9001479e:	d101      	bne.n	900147a4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
900147a0:	2301      	movs	r3, #1
900147a2:	e000      	b.n	900147a6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
900147a4:	2300      	movs	r3, #0
  }
}
900147a6:	4618      	mov	r0, r3
900147a8:	3714      	adds	r7, #20
900147aa:	46bd      	mov	sp, r7
900147ac:	f85d 7b04 	ldr.w	r7, [sp], #4
900147b0:	4770      	bx	lr
	...

900147b4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
900147b4:	b580      	push	{r7, lr}
900147b6:	b084      	sub	sp, #16
900147b8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
900147ba:	2300      	movs	r3, #0
900147bc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
900147be:	4b12      	ldr	r3, [pc, #72]	; (90014808 <ip_reass_tmr+0x54>)
900147c0:	681b      	ldr	r3, [r3, #0]
900147c2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
900147c4:	e018      	b.n	900147f8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
900147c6:	68fb      	ldr	r3, [r7, #12]
900147c8:	7fdb      	ldrb	r3, [r3, #31]
900147ca:	2b00      	cmp	r3, #0
900147cc:	d00b      	beq.n	900147e6 <ip_reass_tmr+0x32>
      r->timer--;
900147ce:	68fb      	ldr	r3, [r7, #12]
900147d0:	7fdb      	ldrb	r3, [r3, #31]
900147d2:	3b01      	subs	r3, #1
900147d4:	b2da      	uxtb	r2, r3
900147d6:	68fb      	ldr	r3, [r7, #12]
900147d8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
900147da:	68fb      	ldr	r3, [r7, #12]
900147dc:	60bb      	str	r3, [r7, #8]
      r = r->next;
900147de:	68fb      	ldr	r3, [r7, #12]
900147e0:	681b      	ldr	r3, [r3, #0]
900147e2:	60fb      	str	r3, [r7, #12]
900147e4:	e008      	b.n	900147f8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
900147e6:	68fb      	ldr	r3, [r7, #12]
900147e8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
900147ea:	68fb      	ldr	r3, [r7, #12]
900147ec:	681b      	ldr	r3, [r3, #0]
900147ee:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
900147f0:	68b9      	ldr	r1, [r7, #8]
900147f2:	6878      	ldr	r0, [r7, #4]
900147f4:	f000 f80a 	bl	9001480c <ip_reass_free_complete_datagram>
  while (r != NULL) {
900147f8:	68fb      	ldr	r3, [r7, #12]
900147fa:	2b00      	cmp	r3, #0
900147fc:	d1e3      	bne.n	900147c6 <ip_reass_tmr+0x12>
    }
  }
}
900147fe:	bf00      	nop
90014800:	bf00      	nop
90014802:	3710      	adds	r7, #16
90014804:	46bd      	mov	sp, r7
90014806:	bd80      	pop	{r7, pc}
90014808:	2401f4f8 	.word	0x2401f4f8

9001480c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
9001480c:	b580      	push	{r7, lr}
9001480e:	b088      	sub	sp, #32
90014810:	af00      	add	r7, sp, #0
90014812:	6078      	str	r0, [r7, #4]
90014814:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
90014816:	2300      	movs	r3, #0
90014818:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
9001481a:	683a      	ldr	r2, [r7, #0]
9001481c:	687b      	ldr	r3, [r7, #4]
9001481e:	429a      	cmp	r2, r3
90014820:	d105      	bne.n	9001482e <ip_reass_free_complete_datagram+0x22>
90014822:	4b45      	ldr	r3, [pc, #276]	; (90014938 <ip_reass_free_complete_datagram+0x12c>)
90014824:	22ab      	movs	r2, #171	; 0xab
90014826:	4945      	ldr	r1, [pc, #276]	; (9001493c <ip_reass_free_complete_datagram+0x130>)
90014828:	4845      	ldr	r0, [pc, #276]	; (90014940 <ip_reass_free_complete_datagram+0x134>)
9001482a:	f001 f9e3 	bl	90015bf4 <iprintf>
  if (prev != NULL) {
9001482e:	683b      	ldr	r3, [r7, #0]
90014830:	2b00      	cmp	r3, #0
90014832:	d00a      	beq.n	9001484a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
90014834:	683b      	ldr	r3, [r7, #0]
90014836:	681b      	ldr	r3, [r3, #0]
90014838:	687a      	ldr	r2, [r7, #4]
9001483a:	429a      	cmp	r2, r3
9001483c:	d005      	beq.n	9001484a <ip_reass_free_complete_datagram+0x3e>
9001483e:	4b3e      	ldr	r3, [pc, #248]	; (90014938 <ip_reass_free_complete_datagram+0x12c>)
90014840:	22ad      	movs	r2, #173	; 0xad
90014842:	4940      	ldr	r1, [pc, #256]	; (90014944 <ip_reass_free_complete_datagram+0x138>)
90014844:	483e      	ldr	r0, [pc, #248]	; (90014940 <ip_reass_free_complete_datagram+0x134>)
90014846:	f001 f9d5 	bl	90015bf4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
9001484a:	687b      	ldr	r3, [r7, #4]
9001484c:	685b      	ldr	r3, [r3, #4]
9001484e:	685b      	ldr	r3, [r3, #4]
90014850:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
90014852:	697b      	ldr	r3, [r7, #20]
90014854:	889b      	ldrh	r3, [r3, #4]
90014856:	b29b      	uxth	r3, r3
90014858:	2b00      	cmp	r3, #0
9001485a:	d12a      	bne.n	900148b2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
9001485c:	687b      	ldr	r3, [r7, #4]
9001485e:	685b      	ldr	r3, [r3, #4]
90014860:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
90014862:	697b      	ldr	r3, [r7, #20]
90014864:	681a      	ldr	r2, [r3, #0]
90014866:	687b      	ldr	r3, [r7, #4]
90014868:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
9001486a:	69bb      	ldr	r3, [r7, #24]
9001486c:	6858      	ldr	r0, [r3, #4]
9001486e:	687b      	ldr	r3, [r7, #4]
90014870:	3308      	adds	r3, #8
90014872:	2214      	movs	r2, #20
90014874:	4619      	mov	r1, r3
90014876:	f001 f8f8 	bl	90015a6a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
9001487a:	2101      	movs	r1, #1
9001487c:	69b8      	ldr	r0, [r7, #24]
9001487e:	f7ff fc3d 	bl	900140fc <icmp_time_exceeded>
    clen = pbuf_clen(p);
90014882:	69b8      	ldr	r0, [r7, #24]
90014884:	f7f7 fe24 	bl	9000c4d0 <pbuf_clen>
90014888:	4603      	mov	r3, r0
9001488a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
9001488c:	8bfa      	ldrh	r2, [r7, #30]
9001488e:	8a7b      	ldrh	r3, [r7, #18]
90014890:	4413      	add	r3, r2
90014892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
90014896:	db05      	blt.n	900148a4 <ip_reass_free_complete_datagram+0x98>
90014898:	4b27      	ldr	r3, [pc, #156]	; (90014938 <ip_reass_free_complete_datagram+0x12c>)
9001489a:	22bc      	movs	r2, #188	; 0xbc
9001489c:	492a      	ldr	r1, [pc, #168]	; (90014948 <ip_reass_free_complete_datagram+0x13c>)
9001489e:	4828      	ldr	r0, [pc, #160]	; (90014940 <ip_reass_free_complete_datagram+0x134>)
900148a0:	f001 f9a8 	bl	90015bf4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
900148a4:	8bfa      	ldrh	r2, [r7, #30]
900148a6:	8a7b      	ldrh	r3, [r7, #18]
900148a8:	4413      	add	r3, r2
900148aa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
900148ac:	69b8      	ldr	r0, [r7, #24]
900148ae:	f7f7 fd81 	bl	9000c3b4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
900148b2:	687b      	ldr	r3, [r7, #4]
900148b4:	685b      	ldr	r3, [r3, #4]
900148b6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
900148b8:	e01f      	b.n	900148fa <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
900148ba:	69bb      	ldr	r3, [r7, #24]
900148bc:	685b      	ldr	r3, [r3, #4]
900148be:	617b      	str	r3, [r7, #20]
    pcur = p;
900148c0:	69bb      	ldr	r3, [r7, #24]
900148c2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
900148c4:	697b      	ldr	r3, [r7, #20]
900148c6:	681b      	ldr	r3, [r3, #0]
900148c8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
900148ca:	68f8      	ldr	r0, [r7, #12]
900148cc:	f7f7 fe00 	bl	9000c4d0 <pbuf_clen>
900148d0:	4603      	mov	r3, r0
900148d2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
900148d4:	8bfa      	ldrh	r2, [r7, #30]
900148d6:	8a7b      	ldrh	r3, [r7, #18]
900148d8:	4413      	add	r3, r2
900148da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
900148de:	db05      	blt.n	900148ec <ip_reass_free_complete_datagram+0xe0>
900148e0:	4b15      	ldr	r3, [pc, #84]	; (90014938 <ip_reass_free_complete_datagram+0x12c>)
900148e2:	22cc      	movs	r2, #204	; 0xcc
900148e4:	4918      	ldr	r1, [pc, #96]	; (90014948 <ip_reass_free_complete_datagram+0x13c>)
900148e6:	4816      	ldr	r0, [pc, #88]	; (90014940 <ip_reass_free_complete_datagram+0x134>)
900148e8:	f001 f984 	bl	90015bf4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
900148ec:	8bfa      	ldrh	r2, [r7, #30]
900148ee:	8a7b      	ldrh	r3, [r7, #18]
900148f0:	4413      	add	r3, r2
900148f2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
900148f4:	68f8      	ldr	r0, [r7, #12]
900148f6:	f7f7 fd5d 	bl	9000c3b4 <pbuf_free>
  while (p != NULL) {
900148fa:	69bb      	ldr	r3, [r7, #24]
900148fc:	2b00      	cmp	r3, #0
900148fe:	d1dc      	bne.n	900148ba <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
90014900:	6839      	ldr	r1, [r7, #0]
90014902:	6878      	ldr	r0, [r7, #4]
90014904:	f000 f8c2 	bl	90014a8c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
90014908:	4b10      	ldr	r3, [pc, #64]	; (9001494c <ip_reass_free_complete_datagram+0x140>)
9001490a:	881b      	ldrh	r3, [r3, #0]
9001490c:	8bfa      	ldrh	r2, [r7, #30]
9001490e:	429a      	cmp	r2, r3
90014910:	d905      	bls.n	9001491e <ip_reass_free_complete_datagram+0x112>
90014912:	4b09      	ldr	r3, [pc, #36]	; (90014938 <ip_reass_free_complete_datagram+0x12c>)
90014914:	22d2      	movs	r2, #210	; 0xd2
90014916:	490e      	ldr	r1, [pc, #56]	; (90014950 <ip_reass_free_complete_datagram+0x144>)
90014918:	4809      	ldr	r0, [pc, #36]	; (90014940 <ip_reass_free_complete_datagram+0x134>)
9001491a:	f001 f96b 	bl	90015bf4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
9001491e:	4b0b      	ldr	r3, [pc, #44]	; (9001494c <ip_reass_free_complete_datagram+0x140>)
90014920:	881a      	ldrh	r2, [r3, #0]
90014922:	8bfb      	ldrh	r3, [r7, #30]
90014924:	1ad3      	subs	r3, r2, r3
90014926:	b29a      	uxth	r2, r3
90014928:	4b08      	ldr	r3, [pc, #32]	; (9001494c <ip_reass_free_complete_datagram+0x140>)
9001492a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
9001492c:	8bfb      	ldrh	r3, [r7, #30]
}
9001492e:	4618      	mov	r0, r3
90014930:	3720      	adds	r7, #32
90014932:	46bd      	mov	sp, r7
90014934:	bd80      	pop	{r7, pc}
90014936:	bf00      	nop
90014938:	9001a480 	.word	0x9001a480
9001493c:	9001a4bc 	.word	0x9001a4bc
90014940:	9001a4c8 	.word	0x9001a4c8
90014944:	9001a4f0 	.word	0x9001a4f0
90014948:	9001a504 	.word	0x9001a504
9001494c:	2401f4fc 	.word	0x2401f4fc
90014950:	9001a524 	.word	0x9001a524

90014954 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
90014954:	b580      	push	{r7, lr}
90014956:	b08a      	sub	sp, #40	; 0x28
90014958:	af00      	add	r7, sp, #0
9001495a:	6078      	str	r0, [r7, #4]
9001495c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
9001495e:	2300      	movs	r3, #0
90014960:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
90014962:	2300      	movs	r3, #0
90014964:	623b      	str	r3, [r7, #32]
    prev = NULL;
90014966:	2300      	movs	r3, #0
90014968:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
9001496a:	2300      	movs	r3, #0
9001496c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
9001496e:	2300      	movs	r3, #0
90014970:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
90014972:	4b28      	ldr	r3, [pc, #160]	; (90014a14 <ip_reass_remove_oldest_datagram+0xc0>)
90014974:	681b      	ldr	r3, [r3, #0]
90014976:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
90014978:	e030      	b.n	900149dc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
9001497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
9001497c:	695a      	ldr	r2, [r3, #20]
9001497e:	687b      	ldr	r3, [r7, #4]
90014980:	68db      	ldr	r3, [r3, #12]
90014982:	429a      	cmp	r2, r3
90014984:	d10c      	bne.n	900149a0 <ip_reass_remove_oldest_datagram+0x4c>
90014986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90014988:	699a      	ldr	r2, [r3, #24]
9001498a:	687b      	ldr	r3, [r7, #4]
9001498c:	691b      	ldr	r3, [r3, #16]
9001498e:	429a      	cmp	r2, r3
90014990:	d106      	bne.n	900149a0 <ip_reass_remove_oldest_datagram+0x4c>
90014992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90014994:	899a      	ldrh	r2, [r3, #12]
90014996:	687b      	ldr	r3, [r7, #4]
90014998:	889b      	ldrh	r3, [r3, #4]
9001499a:	b29b      	uxth	r3, r3
9001499c:	429a      	cmp	r2, r3
9001499e:	d014      	beq.n	900149ca <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
900149a0:	693b      	ldr	r3, [r7, #16]
900149a2:	3301      	adds	r3, #1
900149a4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
900149a6:	6a3b      	ldr	r3, [r7, #32]
900149a8:	2b00      	cmp	r3, #0
900149aa:	d104      	bne.n	900149b6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
900149ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900149ae:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
900149b0:	69fb      	ldr	r3, [r7, #28]
900149b2:	61bb      	str	r3, [r7, #24]
900149b4:	e009      	b.n	900149ca <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
900149b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900149b8:	7fda      	ldrb	r2, [r3, #31]
900149ba:	6a3b      	ldr	r3, [r7, #32]
900149bc:	7fdb      	ldrb	r3, [r3, #31]
900149be:	429a      	cmp	r2, r3
900149c0:	d803      	bhi.n	900149ca <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
900149c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900149c4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
900149c6:	69fb      	ldr	r3, [r7, #28]
900149c8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
900149ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900149cc:	681b      	ldr	r3, [r3, #0]
900149ce:	2b00      	cmp	r3, #0
900149d0:	d001      	beq.n	900149d6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
900149d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900149d4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
900149d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900149d8:	681b      	ldr	r3, [r3, #0]
900149da:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
900149dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900149de:	2b00      	cmp	r3, #0
900149e0:	d1cb      	bne.n	9001497a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
900149e2:	6a3b      	ldr	r3, [r7, #32]
900149e4:	2b00      	cmp	r3, #0
900149e6:	d008      	beq.n	900149fa <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
900149e8:	69b9      	ldr	r1, [r7, #24]
900149ea:	6a38      	ldr	r0, [r7, #32]
900149ec:	f7ff ff0e 	bl	9001480c <ip_reass_free_complete_datagram>
900149f0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
900149f2:	697a      	ldr	r2, [r7, #20]
900149f4:	68fb      	ldr	r3, [r7, #12]
900149f6:	4413      	add	r3, r2
900149f8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
900149fa:	697a      	ldr	r2, [r7, #20]
900149fc:	683b      	ldr	r3, [r7, #0]
900149fe:	429a      	cmp	r2, r3
90014a00:	da02      	bge.n	90014a08 <ip_reass_remove_oldest_datagram+0xb4>
90014a02:	693b      	ldr	r3, [r7, #16]
90014a04:	2b01      	cmp	r3, #1
90014a06:	dcac      	bgt.n	90014962 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
90014a08:	697b      	ldr	r3, [r7, #20]
}
90014a0a:	4618      	mov	r0, r3
90014a0c:	3728      	adds	r7, #40	; 0x28
90014a0e:	46bd      	mov	sp, r7
90014a10:	bd80      	pop	{r7, pc}
90014a12:	bf00      	nop
90014a14:	2401f4f8 	.word	0x2401f4f8

90014a18 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
90014a18:	b580      	push	{r7, lr}
90014a1a:	b084      	sub	sp, #16
90014a1c:	af00      	add	r7, sp, #0
90014a1e:	6078      	str	r0, [r7, #4]
90014a20:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
90014a22:	2004      	movs	r0, #4
90014a24:	f7f6 fdac 	bl	9000b580 <memp_malloc>
90014a28:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
90014a2a:	68fb      	ldr	r3, [r7, #12]
90014a2c:	2b00      	cmp	r3, #0
90014a2e:	d110      	bne.n	90014a52 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
90014a30:	6839      	ldr	r1, [r7, #0]
90014a32:	6878      	ldr	r0, [r7, #4]
90014a34:	f7ff ff8e 	bl	90014954 <ip_reass_remove_oldest_datagram>
90014a38:	4602      	mov	r2, r0
90014a3a:	683b      	ldr	r3, [r7, #0]
90014a3c:	4293      	cmp	r3, r2
90014a3e:	dc03      	bgt.n	90014a48 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
90014a40:	2004      	movs	r0, #4
90014a42:	f7f6 fd9d 	bl	9000b580 <memp_malloc>
90014a46:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
90014a48:	68fb      	ldr	r3, [r7, #12]
90014a4a:	2b00      	cmp	r3, #0
90014a4c:	d101      	bne.n	90014a52 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
90014a4e:	2300      	movs	r3, #0
90014a50:	e016      	b.n	90014a80 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
90014a52:	2220      	movs	r2, #32
90014a54:	2100      	movs	r1, #0
90014a56:	68f8      	ldr	r0, [r7, #12]
90014a58:	f001 f82f 	bl	90015aba <memset>
  ipr->timer = IP_REASS_MAXAGE;
90014a5c:	68fb      	ldr	r3, [r7, #12]
90014a5e:	220f      	movs	r2, #15
90014a60:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
90014a62:	4b09      	ldr	r3, [pc, #36]	; (90014a88 <ip_reass_enqueue_new_datagram+0x70>)
90014a64:	681a      	ldr	r2, [r3, #0]
90014a66:	68fb      	ldr	r3, [r7, #12]
90014a68:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
90014a6a:	4a07      	ldr	r2, [pc, #28]	; (90014a88 <ip_reass_enqueue_new_datagram+0x70>)
90014a6c:	68fb      	ldr	r3, [r7, #12]
90014a6e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
90014a70:	68fb      	ldr	r3, [r7, #12]
90014a72:	3308      	adds	r3, #8
90014a74:	2214      	movs	r2, #20
90014a76:	6879      	ldr	r1, [r7, #4]
90014a78:	4618      	mov	r0, r3
90014a7a:	f000 fff6 	bl	90015a6a <memcpy>
  return ipr;
90014a7e:	68fb      	ldr	r3, [r7, #12]
}
90014a80:	4618      	mov	r0, r3
90014a82:	3710      	adds	r7, #16
90014a84:	46bd      	mov	sp, r7
90014a86:	bd80      	pop	{r7, pc}
90014a88:	2401f4f8 	.word	0x2401f4f8

90014a8c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
90014a8c:	b580      	push	{r7, lr}
90014a8e:	b082      	sub	sp, #8
90014a90:	af00      	add	r7, sp, #0
90014a92:	6078      	str	r0, [r7, #4]
90014a94:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
90014a96:	4b10      	ldr	r3, [pc, #64]	; (90014ad8 <ip_reass_dequeue_datagram+0x4c>)
90014a98:	681b      	ldr	r3, [r3, #0]
90014a9a:	687a      	ldr	r2, [r7, #4]
90014a9c:	429a      	cmp	r2, r3
90014a9e:	d104      	bne.n	90014aaa <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
90014aa0:	687b      	ldr	r3, [r7, #4]
90014aa2:	681b      	ldr	r3, [r3, #0]
90014aa4:	4a0c      	ldr	r2, [pc, #48]	; (90014ad8 <ip_reass_dequeue_datagram+0x4c>)
90014aa6:	6013      	str	r3, [r2, #0]
90014aa8:	e00d      	b.n	90014ac6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
90014aaa:	683b      	ldr	r3, [r7, #0]
90014aac:	2b00      	cmp	r3, #0
90014aae:	d106      	bne.n	90014abe <ip_reass_dequeue_datagram+0x32>
90014ab0:	4b0a      	ldr	r3, [pc, #40]	; (90014adc <ip_reass_dequeue_datagram+0x50>)
90014ab2:	f240 1245 	movw	r2, #325	; 0x145
90014ab6:	490a      	ldr	r1, [pc, #40]	; (90014ae0 <ip_reass_dequeue_datagram+0x54>)
90014ab8:	480a      	ldr	r0, [pc, #40]	; (90014ae4 <ip_reass_dequeue_datagram+0x58>)
90014aba:	f001 f89b 	bl	90015bf4 <iprintf>
    prev->next = ipr->next;
90014abe:	687b      	ldr	r3, [r7, #4]
90014ac0:	681a      	ldr	r2, [r3, #0]
90014ac2:	683b      	ldr	r3, [r7, #0]
90014ac4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
90014ac6:	6879      	ldr	r1, [r7, #4]
90014ac8:	2004      	movs	r0, #4
90014aca:	f7f6 fdcf 	bl	9000b66c <memp_free>
}
90014ace:	bf00      	nop
90014ad0:	3708      	adds	r7, #8
90014ad2:	46bd      	mov	sp, r7
90014ad4:	bd80      	pop	{r7, pc}
90014ad6:	bf00      	nop
90014ad8:	2401f4f8 	.word	0x2401f4f8
90014adc:	9001a480 	.word	0x9001a480
90014ae0:	9001a548 	.word	0x9001a548
90014ae4:	9001a4c8 	.word	0x9001a4c8

90014ae8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
90014ae8:	b580      	push	{r7, lr}
90014aea:	b08c      	sub	sp, #48	; 0x30
90014aec:	af00      	add	r7, sp, #0
90014aee:	60f8      	str	r0, [r7, #12]
90014af0:	60b9      	str	r1, [r7, #8]
90014af2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
90014af4:	2300      	movs	r3, #0
90014af6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
90014af8:	2301      	movs	r3, #1
90014afa:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
90014afc:	68bb      	ldr	r3, [r7, #8]
90014afe:	685b      	ldr	r3, [r3, #4]
90014b00:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
90014b02:	69fb      	ldr	r3, [r7, #28]
90014b04:	885b      	ldrh	r3, [r3, #2]
90014b06:	b29b      	uxth	r3, r3
90014b08:	4618      	mov	r0, r3
90014b0a:	f7f5 ff3f 	bl	9000a98c <lwip_htons>
90014b0e:	4603      	mov	r3, r0
90014b10:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
90014b12:	69fb      	ldr	r3, [r7, #28]
90014b14:	781b      	ldrb	r3, [r3, #0]
90014b16:	f003 030f 	and.w	r3, r3, #15
90014b1a:	b2db      	uxtb	r3, r3
90014b1c:	009b      	lsls	r3, r3, #2
90014b1e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
90014b20:	7e7b      	ldrb	r3, [r7, #25]
90014b22:	b29b      	uxth	r3, r3
90014b24:	8b7a      	ldrh	r2, [r7, #26]
90014b26:	429a      	cmp	r2, r3
90014b28:	d202      	bcs.n	90014b30 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
90014b2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90014b2e:	e135      	b.n	90014d9c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
90014b30:	7e7b      	ldrb	r3, [r7, #25]
90014b32:	b29b      	uxth	r3, r3
90014b34:	8b7a      	ldrh	r2, [r7, #26]
90014b36:	1ad3      	subs	r3, r2, r3
90014b38:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
90014b3a:	69fb      	ldr	r3, [r7, #28]
90014b3c:	88db      	ldrh	r3, [r3, #6]
90014b3e:	b29b      	uxth	r3, r3
90014b40:	4618      	mov	r0, r3
90014b42:	f7f5 ff23 	bl	9000a98c <lwip_htons>
90014b46:	4603      	mov	r3, r0
90014b48:	f3c3 030c 	ubfx	r3, r3, #0, #13
90014b4c:	b29b      	uxth	r3, r3
90014b4e:	00db      	lsls	r3, r3, #3
90014b50:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
90014b52:	68bb      	ldr	r3, [r7, #8]
90014b54:	685b      	ldr	r3, [r3, #4]
90014b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
90014b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90014b5a:	2200      	movs	r2, #0
90014b5c:	701a      	strb	r2, [r3, #0]
90014b5e:	2200      	movs	r2, #0
90014b60:	705a      	strb	r2, [r3, #1]
90014b62:	2200      	movs	r2, #0
90014b64:	709a      	strb	r2, [r3, #2]
90014b66:	2200      	movs	r2, #0
90014b68:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
90014b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90014b6c:	8afa      	ldrh	r2, [r7, #22]
90014b6e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
90014b70:	8afa      	ldrh	r2, [r7, #22]
90014b72:	8b7b      	ldrh	r3, [r7, #26]
90014b74:	4413      	add	r3, r2
90014b76:	b29a      	uxth	r2, r3
90014b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90014b7a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
90014b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90014b7e:	88db      	ldrh	r3, [r3, #6]
90014b80:	b29b      	uxth	r3, r3
90014b82:	8afa      	ldrh	r2, [r7, #22]
90014b84:	429a      	cmp	r2, r3
90014b86:	d902      	bls.n	90014b8e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
90014b88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90014b8c:	e106      	b.n	90014d9c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
90014b8e:	68fb      	ldr	r3, [r7, #12]
90014b90:	685b      	ldr	r3, [r3, #4]
90014b92:	627b      	str	r3, [r7, #36]	; 0x24
90014b94:	e068      	b.n	90014c68 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
90014b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90014b98:	685b      	ldr	r3, [r3, #4]
90014b9a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
90014b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90014b9e:	889b      	ldrh	r3, [r3, #4]
90014ba0:	b29a      	uxth	r2, r3
90014ba2:	693b      	ldr	r3, [r7, #16]
90014ba4:	889b      	ldrh	r3, [r3, #4]
90014ba6:	b29b      	uxth	r3, r3
90014ba8:	429a      	cmp	r2, r3
90014baa:	d235      	bcs.n	90014c18 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
90014bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90014bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
90014bb0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
90014bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
90014bb4:	2b00      	cmp	r3, #0
90014bb6:	d020      	beq.n	90014bfa <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
90014bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90014bba:	889b      	ldrh	r3, [r3, #4]
90014bbc:	b29a      	uxth	r2, r3
90014bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
90014bc0:	88db      	ldrh	r3, [r3, #6]
90014bc2:	b29b      	uxth	r3, r3
90014bc4:	429a      	cmp	r2, r3
90014bc6:	d307      	bcc.n	90014bd8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
90014bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90014bca:	88db      	ldrh	r3, [r3, #6]
90014bcc:	b29a      	uxth	r2, r3
90014bce:	693b      	ldr	r3, [r7, #16]
90014bd0:	889b      	ldrh	r3, [r3, #4]
90014bd2:	b29b      	uxth	r3, r3
90014bd4:	429a      	cmp	r2, r3
90014bd6:	d902      	bls.n	90014bde <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
90014bd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90014bdc:	e0de      	b.n	90014d9c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
90014bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
90014be0:	68ba      	ldr	r2, [r7, #8]
90014be2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
90014be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
90014be6:	88db      	ldrh	r3, [r3, #6]
90014be8:	b29a      	uxth	r2, r3
90014bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90014bec:	889b      	ldrh	r3, [r3, #4]
90014bee:	b29b      	uxth	r3, r3
90014bf0:	429a      	cmp	r2, r3
90014bf2:	d03d      	beq.n	90014c70 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
90014bf4:	2300      	movs	r3, #0
90014bf6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
90014bf8:	e03a      	b.n	90014c70 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
90014bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90014bfc:	88db      	ldrh	r3, [r3, #6]
90014bfe:	b29a      	uxth	r2, r3
90014c00:	693b      	ldr	r3, [r7, #16]
90014c02:	889b      	ldrh	r3, [r3, #4]
90014c04:	b29b      	uxth	r3, r3
90014c06:	429a      	cmp	r2, r3
90014c08:	d902      	bls.n	90014c10 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
90014c0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90014c0e:	e0c5      	b.n	90014d9c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
90014c10:	68fb      	ldr	r3, [r7, #12]
90014c12:	68ba      	ldr	r2, [r7, #8]
90014c14:	605a      	str	r2, [r3, #4]
      break;
90014c16:	e02b      	b.n	90014c70 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
90014c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90014c1a:	889b      	ldrh	r3, [r3, #4]
90014c1c:	b29a      	uxth	r2, r3
90014c1e:	693b      	ldr	r3, [r7, #16]
90014c20:	889b      	ldrh	r3, [r3, #4]
90014c22:	b29b      	uxth	r3, r3
90014c24:	429a      	cmp	r2, r3
90014c26:	d102      	bne.n	90014c2e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
90014c28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90014c2c:	e0b6      	b.n	90014d9c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
90014c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90014c30:	889b      	ldrh	r3, [r3, #4]
90014c32:	b29a      	uxth	r2, r3
90014c34:	693b      	ldr	r3, [r7, #16]
90014c36:	88db      	ldrh	r3, [r3, #6]
90014c38:	b29b      	uxth	r3, r3
90014c3a:	429a      	cmp	r2, r3
90014c3c:	d202      	bcs.n	90014c44 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
90014c3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90014c42:	e0ab      	b.n	90014d9c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
90014c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
90014c46:	2b00      	cmp	r3, #0
90014c48:	d009      	beq.n	90014c5e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
90014c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
90014c4c:	88db      	ldrh	r3, [r3, #6]
90014c4e:	b29a      	uxth	r2, r3
90014c50:	693b      	ldr	r3, [r7, #16]
90014c52:	889b      	ldrh	r3, [r3, #4]
90014c54:	b29b      	uxth	r3, r3
90014c56:	429a      	cmp	r2, r3
90014c58:	d001      	beq.n	90014c5e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
90014c5a:	2300      	movs	r3, #0
90014c5c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
90014c5e:	693b      	ldr	r3, [r7, #16]
90014c60:	681b      	ldr	r3, [r3, #0]
90014c62:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
90014c64:	693b      	ldr	r3, [r7, #16]
90014c66:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
90014c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90014c6a:	2b00      	cmp	r3, #0
90014c6c:	d193      	bne.n	90014b96 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
90014c6e:	e000      	b.n	90014c72 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
90014c70:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
90014c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90014c74:	2b00      	cmp	r3, #0
90014c76:	d12d      	bne.n	90014cd4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
90014c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
90014c7a:	2b00      	cmp	r3, #0
90014c7c:	d01c      	beq.n	90014cb8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
90014c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
90014c80:	88db      	ldrh	r3, [r3, #6]
90014c82:	b29a      	uxth	r2, r3
90014c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90014c86:	889b      	ldrh	r3, [r3, #4]
90014c88:	b29b      	uxth	r3, r3
90014c8a:	429a      	cmp	r2, r3
90014c8c:	d906      	bls.n	90014c9c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
90014c8e:	4b45      	ldr	r3, [pc, #276]	; (90014da4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
90014c90:	f44f 72db 	mov.w	r2, #438	; 0x1b6
90014c94:	4944      	ldr	r1, [pc, #272]	; (90014da8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
90014c96:	4845      	ldr	r0, [pc, #276]	; (90014dac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
90014c98:	f000 ffac 	bl	90015bf4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
90014c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
90014c9e:	68ba      	ldr	r2, [r7, #8]
90014ca0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
90014ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
90014ca4:	88db      	ldrh	r3, [r3, #6]
90014ca6:	b29a      	uxth	r2, r3
90014ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90014caa:	889b      	ldrh	r3, [r3, #4]
90014cac:	b29b      	uxth	r3, r3
90014cae:	429a      	cmp	r2, r3
90014cb0:	d010      	beq.n	90014cd4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
90014cb2:	2300      	movs	r3, #0
90014cb4:	623b      	str	r3, [r7, #32]
90014cb6:	e00d      	b.n	90014cd4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
90014cb8:	68fb      	ldr	r3, [r7, #12]
90014cba:	685b      	ldr	r3, [r3, #4]
90014cbc:	2b00      	cmp	r3, #0
90014cbe:	d006      	beq.n	90014cce <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
90014cc0:	4b38      	ldr	r3, [pc, #224]	; (90014da4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
90014cc2:	f44f 72df 	mov.w	r2, #446	; 0x1be
90014cc6:	493a      	ldr	r1, [pc, #232]	; (90014db0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
90014cc8:	4838      	ldr	r0, [pc, #224]	; (90014dac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
90014cca:	f000 ff93 	bl	90015bf4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
90014cce:	68fb      	ldr	r3, [r7, #12]
90014cd0:	68ba      	ldr	r2, [r7, #8]
90014cd2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
90014cd4:	687b      	ldr	r3, [r7, #4]
90014cd6:	2b00      	cmp	r3, #0
90014cd8:	d105      	bne.n	90014ce6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
90014cda:	68fb      	ldr	r3, [r7, #12]
90014cdc:	7f9b      	ldrb	r3, [r3, #30]
90014cde:	f003 0301 	and.w	r3, r3, #1
90014ce2:	2b00      	cmp	r3, #0
90014ce4:	d059      	beq.n	90014d9a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
90014ce6:	6a3b      	ldr	r3, [r7, #32]
90014ce8:	2b00      	cmp	r3, #0
90014cea:	d04f      	beq.n	90014d8c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
90014cec:	68fb      	ldr	r3, [r7, #12]
90014cee:	685b      	ldr	r3, [r3, #4]
90014cf0:	2b00      	cmp	r3, #0
90014cf2:	d006      	beq.n	90014d02 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
90014cf4:	68fb      	ldr	r3, [r7, #12]
90014cf6:	685b      	ldr	r3, [r3, #4]
90014cf8:	685b      	ldr	r3, [r3, #4]
90014cfa:	889b      	ldrh	r3, [r3, #4]
90014cfc:	b29b      	uxth	r3, r3
90014cfe:	2b00      	cmp	r3, #0
90014d00:	d002      	beq.n	90014d08 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
90014d02:	2300      	movs	r3, #0
90014d04:	623b      	str	r3, [r7, #32]
90014d06:	e041      	b.n	90014d8c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
90014d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90014d0a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
90014d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90014d0e:	681b      	ldr	r3, [r3, #0]
90014d10:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
90014d12:	e012      	b.n	90014d3a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
90014d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90014d16:	685b      	ldr	r3, [r3, #4]
90014d18:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
90014d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
90014d1c:	88db      	ldrh	r3, [r3, #6]
90014d1e:	b29a      	uxth	r2, r3
90014d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90014d22:	889b      	ldrh	r3, [r3, #4]
90014d24:	b29b      	uxth	r3, r3
90014d26:	429a      	cmp	r2, r3
90014d28:	d002      	beq.n	90014d30 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
90014d2a:	2300      	movs	r3, #0
90014d2c:	623b      	str	r3, [r7, #32]
            break;
90014d2e:	e007      	b.n	90014d40 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
90014d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90014d32:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
90014d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90014d36:	681b      	ldr	r3, [r3, #0]
90014d38:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
90014d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90014d3c:	2b00      	cmp	r3, #0
90014d3e:	d1e9      	bne.n	90014d14 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
90014d40:	6a3b      	ldr	r3, [r7, #32]
90014d42:	2b00      	cmp	r3, #0
90014d44:	d022      	beq.n	90014d8c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
90014d46:	68fb      	ldr	r3, [r7, #12]
90014d48:	685b      	ldr	r3, [r3, #4]
90014d4a:	2b00      	cmp	r3, #0
90014d4c:	d106      	bne.n	90014d5c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
90014d4e:	4b15      	ldr	r3, [pc, #84]	; (90014da4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
90014d50:	f240 12df 	movw	r2, #479	; 0x1df
90014d54:	4917      	ldr	r1, [pc, #92]	; (90014db4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
90014d56:	4815      	ldr	r0, [pc, #84]	; (90014dac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
90014d58:	f000 ff4c 	bl	90015bf4 <iprintf>
          LWIP_ASSERT("sanity check",
90014d5c:	68fb      	ldr	r3, [r7, #12]
90014d5e:	685b      	ldr	r3, [r3, #4]
90014d60:	685b      	ldr	r3, [r3, #4]
90014d62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
90014d64:	429a      	cmp	r2, r3
90014d66:	d106      	bne.n	90014d76 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
90014d68:	4b0e      	ldr	r3, [pc, #56]	; (90014da4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
90014d6a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
90014d6e:	4911      	ldr	r1, [pc, #68]	; (90014db4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
90014d70:	480e      	ldr	r0, [pc, #56]	; (90014dac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
90014d72:	f000 ff3f 	bl	90015bf4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
90014d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90014d78:	681b      	ldr	r3, [r3, #0]
90014d7a:	2b00      	cmp	r3, #0
90014d7c:	d006      	beq.n	90014d8c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
90014d7e:	4b09      	ldr	r3, [pc, #36]	; (90014da4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
90014d80:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
90014d84:	490c      	ldr	r1, [pc, #48]	; (90014db8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
90014d86:	4809      	ldr	r0, [pc, #36]	; (90014dac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
90014d88:	f000 ff34 	bl	90015bf4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
90014d8c:	6a3b      	ldr	r3, [r7, #32]
90014d8e:	2b00      	cmp	r3, #0
90014d90:	bf14      	ite	ne
90014d92:	2301      	movne	r3, #1
90014d94:	2300      	moveq	r3, #0
90014d96:	b2db      	uxtb	r3, r3
90014d98:	e000      	b.n	90014d9c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
90014d9a:	2300      	movs	r3, #0
}
90014d9c:	4618      	mov	r0, r3
90014d9e:	3730      	adds	r7, #48	; 0x30
90014da0:	46bd      	mov	sp, r7
90014da2:	bd80      	pop	{r7, pc}
90014da4:	9001a480 	.word	0x9001a480
90014da8:	9001a564 	.word	0x9001a564
90014dac:	9001a4c8 	.word	0x9001a4c8
90014db0:	9001a584 	.word	0x9001a584
90014db4:	9001a5bc 	.word	0x9001a5bc
90014db8:	9001a5cc 	.word	0x9001a5cc

90014dbc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
90014dbc:	b580      	push	{r7, lr}
90014dbe:	b08e      	sub	sp, #56	; 0x38
90014dc0:	af00      	add	r7, sp, #0
90014dc2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
90014dc4:	687b      	ldr	r3, [r7, #4]
90014dc6:	685b      	ldr	r3, [r3, #4]
90014dc8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
90014dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
90014dcc:	781b      	ldrb	r3, [r3, #0]
90014dce:	f003 030f 	and.w	r3, r3, #15
90014dd2:	b2db      	uxtb	r3, r3
90014dd4:	009b      	lsls	r3, r3, #2
90014dd6:	b2db      	uxtb	r3, r3
90014dd8:	2b14      	cmp	r3, #20
90014dda:	f040 8171 	bne.w	900150c0 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
90014dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
90014de0:	88db      	ldrh	r3, [r3, #6]
90014de2:	b29b      	uxth	r3, r3
90014de4:	4618      	mov	r0, r3
90014de6:	f7f5 fdd1 	bl	9000a98c <lwip_htons>
90014dea:	4603      	mov	r3, r0
90014dec:	f3c3 030c 	ubfx	r3, r3, #0, #13
90014df0:	b29b      	uxth	r3, r3
90014df2:	00db      	lsls	r3, r3, #3
90014df4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
90014df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
90014df8:	885b      	ldrh	r3, [r3, #2]
90014dfa:	b29b      	uxth	r3, r3
90014dfc:	4618      	mov	r0, r3
90014dfe:	f7f5 fdc5 	bl	9000a98c <lwip_htons>
90014e02:	4603      	mov	r3, r0
90014e04:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
90014e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
90014e08:	781b      	ldrb	r3, [r3, #0]
90014e0a:	f003 030f 	and.w	r3, r3, #15
90014e0e:	b2db      	uxtb	r3, r3
90014e10:	009b      	lsls	r3, r3, #2
90014e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
90014e16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
90014e1a:	b29b      	uxth	r3, r3
90014e1c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
90014e1e:	429a      	cmp	r2, r3
90014e20:	f0c0 8150 	bcc.w	900150c4 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
90014e24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
90014e28:	b29b      	uxth	r3, r3
90014e2a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
90014e2c:	1ad3      	subs	r3, r2, r3
90014e2e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
90014e30:	6878      	ldr	r0, [r7, #4]
90014e32:	f7f7 fb4d 	bl	9000c4d0 <pbuf_clen>
90014e36:	4603      	mov	r3, r0
90014e38:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
90014e3a:	4b8c      	ldr	r3, [pc, #560]	; (9001506c <ip4_reass+0x2b0>)
90014e3c:	881b      	ldrh	r3, [r3, #0]
90014e3e:	461a      	mov	r2, r3
90014e40:	8c3b      	ldrh	r3, [r7, #32]
90014e42:	4413      	add	r3, r2
90014e44:	2b0a      	cmp	r3, #10
90014e46:	dd10      	ble.n	90014e6a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
90014e48:	8c3b      	ldrh	r3, [r7, #32]
90014e4a:	4619      	mov	r1, r3
90014e4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
90014e4e:	f7ff fd81 	bl	90014954 <ip_reass_remove_oldest_datagram>
90014e52:	4603      	mov	r3, r0
90014e54:	2b00      	cmp	r3, #0
90014e56:	f000 8137 	beq.w	900150c8 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
90014e5a:	4b84      	ldr	r3, [pc, #528]	; (9001506c <ip4_reass+0x2b0>)
90014e5c:	881b      	ldrh	r3, [r3, #0]
90014e5e:	461a      	mov	r2, r3
90014e60:	8c3b      	ldrh	r3, [r7, #32]
90014e62:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
90014e64:	2b0a      	cmp	r3, #10
90014e66:	f300 812f 	bgt.w	900150c8 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
90014e6a:	4b81      	ldr	r3, [pc, #516]	; (90015070 <ip4_reass+0x2b4>)
90014e6c:	681b      	ldr	r3, [r3, #0]
90014e6e:	633b      	str	r3, [r7, #48]	; 0x30
90014e70:	e015      	b.n	90014e9e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
90014e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90014e74:	695a      	ldr	r2, [r3, #20]
90014e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
90014e78:	68db      	ldr	r3, [r3, #12]
90014e7a:	429a      	cmp	r2, r3
90014e7c:	d10c      	bne.n	90014e98 <ip4_reass+0xdc>
90014e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90014e80:	699a      	ldr	r2, [r3, #24]
90014e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
90014e84:	691b      	ldr	r3, [r3, #16]
90014e86:	429a      	cmp	r2, r3
90014e88:	d106      	bne.n	90014e98 <ip4_reass+0xdc>
90014e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90014e8c:	899a      	ldrh	r2, [r3, #12]
90014e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
90014e90:	889b      	ldrh	r3, [r3, #4]
90014e92:	b29b      	uxth	r3, r3
90014e94:	429a      	cmp	r2, r3
90014e96:	d006      	beq.n	90014ea6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
90014e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90014e9a:	681b      	ldr	r3, [r3, #0]
90014e9c:	633b      	str	r3, [r7, #48]	; 0x30
90014e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90014ea0:	2b00      	cmp	r3, #0
90014ea2:	d1e6      	bne.n	90014e72 <ip4_reass+0xb6>
90014ea4:	e000      	b.n	90014ea8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
90014ea6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
90014ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90014eaa:	2b00      	cmp	r3, #0
90014eac:	d109      	bne.n	90014ec2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
90014eae:	8c3b      	ldrh	r3, [r7, #32]
90014eb0:	4619      	mov	r1, r3
90014eb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
90014eb4:	f7ff fdb0 	bl	90014a18 <ip_reass_enqueue_new_datagram>
90014eb8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
90014eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90014ebc:	2b00      	cmp	r3, #0
90014ebe:	d11c      	bne.n	90014efa <ip4_reass+0x13e>
      goto nullreturn;
90014ec0:	e105      	b.n	900150ce <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
90014ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
90014ec4:	88db      	ldrh	r3, [r3, #6]
90014ec6:	b29b      	uxth	r3, r3
90014ec8:	4618      	mov	r0, r3
90014eca:	f7f5 fd5f 	bl	9000a98c <lwip_htons>
90014ece:	4603      	mov	r3, r0
90014ed0:	f3c3 030c 	ubfx	r3, r3, #0, #13
90014ed4:	2b00      	cmp	r3, #0
90014ed6:	d110      	bne.n	90014efa <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
90014ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90014eda:	89db      	ldrh	r3, [r3, #14]
90014edc:	4618      	mov	r0, r3
90014ede:	f7f5 fd55 	bl	9000a98c <lwip_htons>
90014ee2:	4603      	mov	r3, r0
90014ee4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
90014ee8:	2b00      	cmp	r3, #0
90014eea:	d006      	beq.n	90014efa <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
90014eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90014eee:	3308      	adds	r3, #8
90014ef0:	2214      	movs	r2, #20
90014ef2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
90014ef4:	4618      	mov	r0, r3
90014ef6:	f000 fdb8 	bl	90015a6a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
90014efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
90014efc:	88db      	ldrh	r3, [r3, #6]
90014efe:	b29b      	uxth	r3, r3
90014f00:	f003 0320 	and.w	r3, r3, #32
90014f04:	2b00      	cmp	r3, #0
90014f06:	bf0c      	ite	eq
90014f08:	2301      	moveq	r3, #1
90014f0a:	2300      	movne	r3, #0
90014f0c:	b2db      	uxtb	r3, r3
90014f0e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
90014f10:	69fb      	ldr	r3, [r7, #28]
90014f12:	2b00      	cmp	r3, #0
90014f14:	d00e      	beq.n	90014f34 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
90014f16:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
90014f18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
90014f1a:	4413      	add	r3, r2
90014f1c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
90014f1e:	8b7a      	ldrh	r2, [r7, #26]
90014f20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
90014f22:	429a      	cmp	r2, r3
90014f24:	f0c0 80a0 	bcc.w	90015068 <ip4_reass+0x2ac>
90014f28:	8b7b      	ldrh	r3, [r7, #26]
90014f2a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
90014f2e:	4293      	cmp	r3, r2
90014f30:	f200 809a 	bhi.w	90015068 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
90014f34:	69fa      	ldr	r2, [r7, #28]
90014f36:	6879      	ldr	r1, [r7, #4]
90014f38:	6b38      	ldr	r0, [r7, #48]	; 0x30
90014f3a:	f7ff fdd5 	bl	90014ae8 <ip_reass_chain_frag_into_datagram_and_validate>
90014f3e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
90014f40:	697b      	ldr	r3, [r7, #20]
90014f42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
90014f46:	f000 809b 	beq.w	90015080 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
90014f4a:	4b48      	ldr	r3, [pc, #288]	; (9001506c <ip4_reass+0x2b0>)
90014f4c:	881a      	ldrh	r2, [r3, #0]
90014f4e:	8c3b      	ldrh	r3, [r7, #32]
90014f50:	4413      	add	r3, r2
90014f52:	b29a      	uxth	r2, r3
90014f54:	4b45      	ldr	r3, [pc, #276]	; (9001506c <ip4_reass+0x2b0>)
90014f56:	801a      	strh	r2, [r3, #0]
  if (is_last) {
90014f58:	69fb      	ldr	r3, [r7, #28]
90014f5a:	2b00      	cmp	r3, #0
90014f5c:	d00d      	beq.n	90014f7a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
90014f5e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
90014f60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
90014f62:	4413      	add	r3, r2
90014f64:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
90014f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90014f68:	8a7a      	ldrh	r2, [r7, #18]
90014f6a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
90014f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90014f6e:	7f9b      	ldrb	r3, [r3, #30]
90014f70:	f043 0301 	orr.w	r3, r3, #1
90014f74:	b2da      	uxtb	r2, r3
90014f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90014f78:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
90014f7a:	697b      	ldr	r3, [r7, #20]
90014f7c:	2b01      	cmp	r3, #1
90014f7e:	d171      	bne.n	90015064 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
90014f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90014f82:	8b9b      	ldrh	r3, [r3, #28]
90014f84:	3314      	adds	r3, #20
90014f86:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
90014f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90014f8a:	685b      	ldr	r3, [r3, #4]
90014f8c:	685b      	ldr	r3, [r3, #4]
90014f8e:	681b      	ldr	r3, [r3, #0]
90014f90:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
90014f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90014f94:	685b      	ldr	r3, [r3, #4]
90014f96:	685b      	ldr	r3, [r3, #4]
90014f98:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
90014f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90014f9c:	3308      	adds	r3, #8
90014f9e:	2214      	movs	r2, #20
90014fa0:	4619      	mov	r1, r3
90014fa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
90014fa4:	f000 fd61 	bl	90015a6a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
90014fa8:	8a3b      	ldrh	r3, [r7, #16]
90014faa:	4618      	mov	r0, r3
90014fac:	f7f5 fcee 	bl	9000a98c <lwip_htons>
90014fb0:	4603      	mov	r3, r0
90014fb2:	461a      	mov	r2, r3
90014fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
90014fb6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
90014fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
90014fba:	2200      	movs	r2, #0
90014fbc:	719a      	strb	r2, [r3, #6]
90014fbe:	2200      	movs	r2, #0
90014fc0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
90014fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
90014fc4:	2200      	movs	r2, #0
90014fc6:	729a      	strb	r2, [r3, #10]
90014fc8:	2200      	movs	r2, #0
90014fca:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
90014fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90014fce:	685b      	ldr	r3, [r3, #4]
90014fd0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
90014fd2:	e00d      	b.n	90014ff0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
90014fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90014fd6:	685b      	ldr	r3, [r3, #4]
90014fd8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
90014fda:	2114      	movs	r1, #20
90014fdc:	6b78      	ldr	r0, [r7, #52]	; 0x34
90014fde:	f7f7 f963 	bl	9000c2a8 <pbuf_remove_header>
      pbuf_cat(p, r);
90014fe2:	6b79      	ldr	r1, [r7, #52]	; 0x34
90014fe4:	6878      	ldr	r0, [r7, #4]
90014fe6:	f7f7 fab3 	bl	9000c550 <pbuf_cat>
      r = iprh->next_pbuf;
90014fea:	68fb      	ldr	r3, [r7, #12]
90014fec:	681b      	ldr	r3, [r3, #0]
90014fee:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
90014ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
90014ff2:	2b00      	cmp	r3, #0
90014ff4:	d1ee      	bne.n	90014fd4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
90014ff6:	4b1e      	ldr	r3, [pc, #120]	; (90015070 <ip4_reass+0x2b4>)
90014ff8:	681b      	ldr	r3, [r3, #0]
90014ffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
90014ffc:	429a      	cmp	r2, r3
90014ffe:	d102      	bne.n	90015006 <ip4_reass+0x24a>
      ipr_prev = NULL;
90015000:	2300      	movs	r3, #0
90015002:	62fb      	str	r3, [r7, #44]	; 0x2c
90015004:	e010      	b.n	90015028 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
90015006:	4b1a      	ldr	r3, [pc, #104]	; (90015070 <ip4_reass+0x2b4>)
90015008:	681b      	ldr	r3, [r3, #0]
9001500a:	62fb      	str	r3, [r7, #44]	; 0x2c
9001500c:	e007      	b.n	9001501e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
9001500e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90015010:	681b      	ldr	r3, [r3, #0]
90015012:	6b3a      	ldr	r2, [r7, #48]	; 0x30
90015014:	429a      	cmp	r2, r3
90015016:	d006      	beq.n	90015026 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
90015018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
9001501a:	681b      	ldr	r3, [r3, #0]
9001501c:	62fb      	str	r3, [r7, #44]	; 0x2c
9001501e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90015020:	2b00      	cmp	r3, #0
90015022:	d1f4      	bne.n	9001500e <ip4_reass+0x252>
90015024:	e000      	b.n	90015028 <ip4_reass+0x26c>
          break;
90015026:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
90015028:	6af9      	ldr	r1, [r7, #44]	; 0x2c
9001502a:	6b38      	ldr	r0, [r7, #48]	; 0x30
9001502c:	f7ff fd2e 	bl	90014a8c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
90015030:	6878      	ldr	r0, [r7, #4]
90015032:	f7f7 fa4d 	bl	9000c4d0 <pbuf_clen>
90015036:	4603      	mov	r3, r0
90015038:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
9001503a:	4b0c      	ldr	r3, [pc, #48]	; (9001506c <ip4_reass+0x2b0>)
9001503c:	881b      	ldrh	r3, [r3, #0]
9001503e:	8c3a      	ldrh	r2, [r7, #32]
90015040:	429a      	cmp	r2, r3
90015042:	d906      	bls.n	90015052 <ip4_reass+0x296>
90015044:	4b0b      	ldr	r3, [pc, #44]	; (90015074 <ip4_reass+0x2b8>)
90015046:	f240 229b 	movw	r2, #667	; 0x29b
9001504a:	490b      	ldr	r1, [pc, #44]	; (90015078 <ip4_reass+0x2bc>)
9001504c:	480b      	ldr	r0, [pc, #44]	; (9001507c <ip4_reass+0x2c0>)
9001504e:	f000 fdd1 	bl	90015bf4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
90015052:	4b06      	ldr	r3, [pc, #24]	; (9001506c <ip4_reass+0x2b0>)
90015054:	881a      	ldrh	r2, [r3, #0]
90015056:	8c3b      	ldrh	r3, [r7, #32]
90015058:	1ad3      	subs	r3, r2, r3
9001505a:	b29a      	uxth	r2, r3
9001505c:	4b03      	ldr	r3, [pc, #12]	; (9001506c <ip4_reass+0x2b0>)
9001505e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
90015060:	687b      	ldr	r3, [r7, #4]
90015062:	e038      	b.n	900150d6 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
90015064:	2300      	movs	r3, #0
90015066:	e036      	b.n	900150d6 <ip4_reass+0x31a>
      goto nullreturn_ipr;
90015068:	bf00      	nop
9001506a:	e00a      	b.n	90015082 <ip4_reass+0x2c6>
9001506c:	2401f4fc 	.word	0x2401f4fc
90015070:	2401f4f8 	.word	0x2401f4f8
90015074:	9001a480 	.word	0x9001a480
90015078:	9001a5f0 	.word	0x9001a5f0
9001507c:	9001a4c8 	.word	0x9001a4c8
    goto nullreturn_ipr;
90015080:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
90015082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90015084:	2b00      	cmp	r3, #0
90015086:	d106      	bne.n	90015096 <ip4_reass+0x2da>
90015088:	4b15      	ldr	r3, [pc, #84]	; (900150e0 <ip4_reass+0x324>)
9001508a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
9001508e:	4915      	ldr	r1, [pc, #84]	; (900150e4 <ip4_reass+0x328>)
90015090:	4815      	ldr	r0, [pc, #84]	; (900150e8 <ip4_reass+0x32c>)
90015092:	f000 fdaf 	bl	90015bf4 <iprintf>
  if (ipr->p == NULL) {
90015096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
90015098:	685b      	ldr	r3, [r3, #4]
9001509a:	2b00      	cmp	r3, #0
9001509c:	d116      	bne.n	900150cc <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
9001509e:	4b13      	ldr	r3, [pc, #76]	; (900150ec <ip4_reass+0x330>)
900150a0:	681b      	ldr	r3, [r3, #0]
900150a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
900150a4:	429a      	cmp	r2, r3
900150a6:	d006      	beq.n	900150b6 <ip4_reass+0x2fa>
900150a8:	4b0d      	ldr	r3, [pc, #52]	; (900150e0 <ip4_reass+0x324>)
900150aa:	f240 22ab 	movw	r2, #683	; 0x2ab
900150ae:	4910      	ldr	r1, [pc, #64]	; (900150f0 <ip4_reass+0x334>)
900150b0:	480d      	ldr	r0, [pc, #52]	; (900150e8 <ip4_reass+0x32c>)
900150b2:	f000 fd9f 	bl	90015bf4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
900150b6:	2100      	movs	r1, #0
900150b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
900150ba:	f7ff fce7 	bl	90014a8c <ip_reass_dequeue_datagram>
900150be:	e006      	b.n	900150ce <ip4_reass+0x312>
    goto nullreturn;
900150c0:	bf00      	nop
900150c2:	e004      	b.n	900150ce <ip4_reass+0x312>
    goto nullreturn;
900150c4:	bf00      	nop
900150c6:	e002      	b.n	900150ce <ip4_reass+0x312>
      goto nullreturn;
900150c8:	bf00      	nop
900150ca:	e000      	b.n	900150ce <ip4_reass+0x312>
  }

nullreturn:
900150cc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
900150ce:	6878      	ldr	r0, [r7, #4]
900150d0:	f7f7 f970 	bl	9000c3b4 <pbuf_free>
  return NULL;
900150d4:	2300      	movs	r3, #0
}
900150d6:	4618      	mov	r0, r3
900150d8:	3738      	adds	r7, #56	; 0x38
900150da:	46bd      	mov	sp, r7
900150dc:	bd80      	pop	{r7, pc}
900150de:	bf00      	nop
900150e0:	9001a480 	.word	0x9001a480
900150e4:	9001a60c 	.word	0x9001a60c
900150e8:	9001a4c8 	.word	0x9001a4c8
900150ec:	2401f4f8 	.word	0x2401f4f8
900150f0:	9001a618 	.word	0x9001a618

900150f4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
900150f4:	b580      	push	{r7, lr}
900150f6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
900150f8:	2005      	movs	r0, #5
900150fa:	f7f6 fa41 	bl	9000b580 <memp_malloc>
900150fe:	4603      	mov	r3, r0
}
90015100:	4618      	mov	r0, r3
90015102:	bd80      	pop	{r7, pc}

90015104 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
90015104:	b580      	push	{r7, lr}
90015106:	b082      	sub	sp, #8
90015108:	af00      	add	r7, sp, #0
9001510a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
9001510c:	687b      	ldr	r3, [r7, #4]
9001510e:	2b00      	cmp	r3, #0
90015110:	d106      	bne.n	90015120 <ip_frag_free_pbuf_custom_ref+0x1c>
90015112:	4b07      	ldr	r3, [pc, #28]	; (90015130 <ip_frag_free_pbuf_custom_ref+0x2c>)
90015114:	f44f 7231 	mov.w	r2, #708	; 0x2c4
90015118:	4906      	ldr	r1, [pc, #24]	; (90015134 <ip_frag_free_pbuf_custom_ref+0x30>)
9001511a:	4807      	ldr	r0, [pc, #28]	; (90015138 <ip_frag_free_pbuf_custom_ref+0x34>)
9001511c:	f000 fd6a 	bl	90015bf4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
90015120:	6879      	ldr	r1, [r7, #4]
90015122:	2005      	movs	r0, #5
90015124:	f7f6 faa2 	bl	9000b66c <memp_free>
}
90015128:	bf00      	nop
9001512a:	3708      	adds	r7, #8
9001512c:	46bd      	mov	sp, r7
9001512e:	bd80      	pop	{r7, pc}
90015130:	9001a480 	.word	0x9001a480
90015134:	9001a638 	.word	0x9001a638
90015138:	9001a4c8 	.word	0x9001a4c8

9001513c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
9001513c:	b580      	push	{r7, lr}
9001513e:	b084      	sub	sp, #16
90015140:	af00      	add	r7, sp, #0
90015142:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
90015144:	687b      	ldr	r3, [r7, #4]
90015146:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
90015148:	68fb      	ldr	r3, [r7, #12]
9001514a:	2b00      	cmp	r3, #0
9001514c:	d106      	bne.n	9001515c <ipfrag_free_pbuf_custom+0x20>
9001514e:	4b11      	ldr	r3, [pc, #68]	; (90015194 <ipfrag_free_pbuf_custom+0x58>)
90015150:	f240 22ce 	movw	r2, #718	; 0x2ce
90015154:	4910      	ldr	r1, [pc, #64]	; (90015198 <ipfrag_free_pbuf_custom+0x5c>)
90015156:	4811      	ldr	r0, [pc, #68]	; (9001519c <ipfrag_free_pbuf_custom+0x60>)
90015158:	f000 fd4c 	bl	90015bf4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
9001515c:	68fa      	ldr	r2, [r7, #12]
9001515e:	687b      	ldr	r3, [r7, #4]
90015160:	429a      	cmp	r2, r3
90015162:	d006      	beq.n	90015172 <ipfrag_free_pbuf_custom+0x36>
90015164:	4b0b      	ldr	r3, [pc, #44]	; (90015194 <ipfrag_free_pbuf_custom+0x58>)
90015166:	f240 22cf 	movw	r2, #719	; 0x2cf
9001516a:	490d      	ldr	r1, [pc, #52]	; (900151a0 <ipfrag_free_pbuf_custom+0x64>)
9001516c:	480b      	ldr	r0, [pc, #44]	; (9001519c <ipfrag_free_pbuf_custom+0x60>)
9001516e:	f000 fd41 	bl	90015bf4 <iprintf>
  if (pcr->original != NULL) {
90015172:	68fb      	ldr	r3, [r7, #12]
90015174:	695b      	ldr	r3, [r3, #20]
90015176:	2b00      	cmp	r3, #0
90015178:	d004      	beq.n	90015184 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
9001517a:	68fb      	ldr	r3, [r7, #12]
9001517c:	695b      	ldr	r3, [r3, #20]
9001517e:	4618      	mov	r0, r3
90015180:	f7f7 f918 	bl	9000c3b4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
90015184:	68f8      	ldr	r0, [r7, #12]
90015186:	f7ff ffbd 	bl	90015104 <ip_frag_free_pbuf_custom_ref>
}
9001518a:	bf00      	nop
9001518c:	3710      	adds	r7, #16
9001518e:	46bd      	mov	sp, r7
90015190:	bd80      	pop	{r7, pc}
90015192:	bf00      	nop
90015194:	9001a480 	.word	0x9001a480
90015198:	9001a644 	.word	0x9001a644
9001519c:	9001a4c8 	.word	0x9001a4c8
900151a0:	9001a650 	.word	0x9001a650

900151a4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
900151a4:	b580      	push	{r7, lr}
900151a6:	b094      	sub	sp, #80	; 0x50
900151a8:	af02      	add	r7, sp, #8
900151aa:	60f8      	str	r0, [r7, #12]
900151ac:	60b9      	str	r1, [r7, #8]
900151ae:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
900151b0:	2300      	movs	r3, #0
900151b2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
900151b6:	68bb      	ldr	r3, [r7, #8]
900151b8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
900151ba:	3b14      	subs	r3, #20
900151bc:	2b00      	cmp	r3, #0
900151be:	da00      	bge.n	900151c2 <ip4_frag+0x1e>
900151c0:	3307      	adds	r3, #7
900151c2:	10db      	asrs	r3, r3, #3
900151c4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
900151c6:	2314      	movs	r3, #20
900151c8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
900151ca:	68fb      	ldr	r3, [r7, #12]
900151cc:	685b      	ldr	r3, [r3, #4]
900151ce:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
900151d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
900151d2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
900151d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900151d6:	781b      	ldrb	r3, [r3, #0]
900151d8:	f003 030f 	and.w	r3, r3, #15
900151dc:	b2db      	uxtb	r3, r3
900151de:	009b      	lsls	r3, r3, #2
900151e0:	b2db      	uxtb	r3, r3
900151e2:	2b14      	cmp	r3, #20
900151e4:	d002      	beq.n	900151ec <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
900151e6:	f06f 0305 	mvn.w	r3, #5
900151ea:	e110      	b.n	9001540e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
900151ec:	68fb      	ldr	r3, [r7, #12]
900151ee:	895b      	ldrh	r3, [r3, #10]
900151f0:	2b13      	cmp	r3, #19
900151f2:	d809      	bhi.n	90015208 <ip4_frag+0x64>
900151f4:	4b88      	ldr	r3, [pc, #544]	; (90015418 <ip4_frag+0x274>)
900151f6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
900151fa:	4988      	ldr	r1, [pc, #544]	; (9001541c <ip4_frag+0x278>)
900151fc:	4888      	ldr	r0, [pc, #544]	; (90015420 <ip4_frag+0x27c>)
900151fe:	f000 fcf9 	bl	90015bf4 <iprintf>
90015202:	f06f 0305 	mvn.w	r3, #5
90015206:	e102      	b.n	9001540e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
90015208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
9001520a:	88db      	ldrh	r3, [r3, #6]
9001520c:	b29b      	uxth	r3, r3
9001520e:	4618      	mov	r0, r3
90015210:	f7f5 fbbc 	bl	9000a98c <lwip_htons>
90015214:	4603      	mov	r3, r0
90015216:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
90015218:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
9001521a:	f3c3 030c 	ubfx	r3, r3, #0, #13
9001521e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
90015222:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
90015224:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
90015228:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
9001522a:	68fb      	ldr	r3, [r7, #12]
9001522c:	891b      	ldrh	r3, [r3, #8]
9001522e:	3b14      	subs	r3, #20
90015230:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
90015234:	e0e1      	b.n	900153fa <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
90015236:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
90015238:	00db      	lsls	r3, r3, #3
9001523a:	b29b      	uxth	r3, r3
9001523c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
90015240:	4293      	cmp	r3, r2
90015242:	bf28      	it	cs
90015244:	4613      	movcs	r3, r2
90015246:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
90015248:	f44f 7220 	mov.w	r2, #640	; 0x280
9001524c:	2114      	movs	r1, #20
9001524e:	200e      	movs	r0, #14
90015250:	f7f6 fdcc 	bl	9000bdec <pbuf_alloc>
90015254:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
90015256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90015258:	2b00      	cmp	r3, #0
9001525a:	f000 80d5 	beq.w	90015408 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
9001525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90015260:	895b      	ldrh	r3, [r3, #10]
90015262:	2b13      	cmp	r3, #19
90015264:	d806      	bhi.n	90015274 <ip4_frag+0xd0>
90015266:	4b6c      	ldr	r3, [pc, #432]	; (90015418 <ip4_frag+0x274>)
90015268:	f44f 7249 	mov.w	r2, #804	; 0x324
9001526c:	496d      	ldr	r1, [pc, #436]	; (90015424 <ip4_frag+0x280>)
9001526e:	486c      	ldr	r0, [pc, #432]	; (90015420 <ip4_frag+0x27c>)
90015270:	f000 fcc0 	bl	90015bf4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
90015274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90015276:	685b      	ldr	r3, [r3, #4]
90015278:	2214      	movs	r2, #20
9001527a:	6b79      	ldr	r1, [r7, #52]	; 0x34
9001527c:	4618      	mov	r0, r3
9001527e:	f000 fbf4 	bl	90015a6a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
90015282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90015284:	685b      	ldr	r3, [r3, #4]
90015286:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
90015288:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
9001528a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
9001528e:	e064      	b.n	9001535a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
90015290:	68fb      	ldr	r3, [r7, #12]
90015292:	895a      	ldrh	r2, [r3, #10]
90015294:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
90015296:	1ad3      	subs	r3, r2, r3
90015298:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
9001529a:	68fb      	ldr	r3, [r7, #12]
9001529c:	895b      	ldrh	r3, [r3, #10]
9001529e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
900152a0:	429a      	cmp	r2, r3
900152a2:	d906      	bls.n	900152b2 <ip4_frag+0x10e>
900152a4:	4b5c      	ldr	r3, [pc, #368]	; (90015418 <ip4_frag+0x274>)
900152a6:	f240 322d 	movw	r2, #813	; 0x32d
900152aa:	495f      	ldr	r1, [pc, #380]	; (90015428 <ip4_frag+0x284>)
900152ac:	485c      	ldr	r0, [pc, #368]	; (90015420 <ip4_frag+0x27c>)
900152ae:	f000 fca1 	bl	90015bf4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
900152b2:	8bfa      	ldrh	r2, [r7, #30]
900152b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
900152b8:	4293      	cmp	r3, r2
900152ba:	bf28      	it	cs
900152bc:	4613      	movcs	r3, r2
900152be:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
900152c2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
900152c6:	2b00      	cmp	r3, #0
900152c8:	d105      	bne.n	900152d6 <ip4_frag+0x132>
        poff = 0;
900152ca:	2300      	movs	r3, #0
900152cc:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
900152ce:	68fb      	ldr	r3, [r7, #12]
900152d0:	681b      	ldr	r3, [r3, #0]
900152d2:	60fb      	str	r3, [r7, #12]
        continue;
900152d4:	e041      	b.n	9001535a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
900152d6:	f7ff ff0d 	bl	900150f4 <ip_frag_alloc_pbuf_custom_ref>
900152da:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
900152dc:	69bb      	ldr	r3, [r7, #24]
900152de:	2b00      	cmp	r3, #0
900152e0:	d103      	bne.n	900152ea <ip4_frag+0x146>
        pbuf_free(rambuf);
900152e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
900152e4:	f7f7 f866 	bl	9000c3b4 <pbuf_free>
        goto memerr;
900152e8:	e08f      	b.n	9001540a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
900152ea:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
900152ec:	68fb      	ldr	r3, [r7, #12]
900152ee:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
900152f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
900152f2:	4413      	add	r3, r2
900152f4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
900152f8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
900152fc:	9201      	str	r2, [sp, #4]
900152fe:	9300      	str	r3, [sp, #0]
90015300:	4603      	mov	r3, r0
90015302:	2241      	movs	r2, #65	; 0x41
90015304:	2000      	movs	r0, #0
90015306:	f7f6 fe9b 	bl	9000c040 <pbuf_alloced_custom>
9001530a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
9001530c:	697b      	ldr	r3, [r7, #20]
9001530e:	2b00      	cmp	r3, #0
90015310:	d106      	bne.n	90015320 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
90015312:	69b8      	ldr	r0, [r7, #24]
90015314:	f7ff fef6 	bl	90015104 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
90015318:	6a78      	ldr	r0, [r7, #36]	; 0x24
9001531a:	f7f7 f84b 	bl	9000c3b4 <pbuf_free>
        goto memerr;
9001531e:	e074      	b.n	9001540a <ip4_frag+0x266>
      }
      pbuf_ref(p);
90015320:	68f8      	ldr	r0, [r7, #12]
90015322:	f7f7 f8ed 	bl	9000c500 <pbuf_ref>
      pcr->original = p;
90015326:	69bb      	ldr	r3, [r7, #24]
90015328:	68fa      	ldr	r2, [r7, #12]
9001532a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
9001532c:	69bb      	ldr	r3, [r7, #24]
9001532e:	4a3f      	ldr	r2, [pc, #252]	; (9001542c <ip4_frag+0x288>)
90015330:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
90015332:	6979      	ldr	r1, [r7, #20]
90015334:	6a78      	ldr	r0, [r7, #36]	; 0x24
90015336:	f7f7 f90b 	bl	9000c550 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
9001533a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
9001533e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
90015342:	1ad3      	subs	r3, r2, r3
90015344:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
90015348:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
9001534c:	2b00      	cmp	r3, #0
9001534e:	d004      	beq.n	9001535a <ip4_frag+0x1b6>
        poff = 0;
90015350:	2300      	movs	r3, #0
90015352:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
90015354:	68fb      	ldr	r3, [r7, #12]
90015356:	681b      	ldr	r3, [r3, #0]
90015358:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
9001535a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
9001535e:	2b00      	cmp	r3, #0
90015360:	d196      	bne.n	90015290 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
90015362:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
90015364:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
90015368:	4413      	add	r3, r2
9001536a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
9001536c:	68bb      	ldr	r3, [r7, #8]
9001536e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
90015370:	f1a3 0213 	sub.w	r2, r3, #19
90015374:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
90015378:	429a      	cmp	r2, r3
9001537a:	bfcc      	ite	gt
9001537c:	2301      	movgt	r3, #1
9001537e:	2300      	movle	r3, #0
90015380:	b2db      	uxtb	r3, r3
90015382:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
90015384:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
90015388:	f3c3 030c 	ubfx	r3, r3, #0, #13
9001538c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
9001538e:	6a3b      	ldr	r3, [r7, #32]
90015390:	2b00      	cmp	r3, #0
90015392:	d002      	beq.n	9001539a <ip4_frag+0x1f6>
90015394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90015396:	2b00      	cmp	r3, #0
90015398:	d003      	beq.n	900153a2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
9001539a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
9001539c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
900153a0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
900153a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
900153a4:	4618      	mov	r0, r3
900153a6:	f7f5 faf1 	bl	9000a98c <lwip_htons>
900153aa:	4603      	mov	r3, r0
900153ac:	461a      	mov	r2, r3
900153ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900153b0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
900153b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
900153b4:	3314      	adds	r3, #20
900153b6:	b29b      	uxth	r3, r3
900153b8:	4618      	mov	r0, r3
900153ba:	f7f5 fae7 	bl	9000a98c <lwip_htons>
900153be:	4603      	mov	r3, r0
900153c0:	461a      	mov	r2, r3
900153c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900153c4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
900153c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
900153c8:	2200      	movs	r2, #0
900153ca:	729a      	strb	r2, [r3, #10]
900153cc:	2200      	movs	r2, #0
900153ce:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
900153d0:	68bb      	ldr	r3, [r7, #8]
900153d2:	695b      	ldr	r3, [r3, #20]
900153d4:	687a      	ldr	r2, [r7, #4]
900153d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
900153d8:	68b8      	ldr	r0, [r7, #8]
900153da:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
900153dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
900153de:	f7f6 ffe9 	bl	9000c3b4 <pbuf_free>
    left = (u16_t)(left - fragsize);
900153e2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
900153e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
900153e8:	1ad3      	subs	r3, r2, r3
900153ea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
900153ee:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
900153f2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
900153f4:	4413      	add	r3, r2
900153f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
900153fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
900153fe:	2b00      	cmp	r3, #0
90015400:	f47f af19 	bne.w	90015236 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
90015404:	2300      	movs	r3, #0
90015406:	e002      	b.n	9001540e <ip4_frag+0x26a>
      goto memerr;
90015408:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
9001540a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
9001540e:	4618      	mov	r0, r3
90015410:	3748      	adds	r7, #72	; 0x48
90015412:	46bd      	mov	sp, r7
90015414:	bd80      	pop	{r7, pc}
90015416:	bf00      	nop
90015418:	9001a480 	.word	0x9001a480
9001541c:	9001a65c 	.word	0x9001a65c
90015420:	9001a4c8 	.word	0x9001a4c8
90015424:	9001a678 	.word	0x9001a678
90015428:	9001a698 	.word	0x9001a698
9001542c:	9001513d 	.word	0x9001513d

90015430 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
90015430:	b580      	push	{r7, lr}
90015432:	b086      	sub	sp, #24
90015434:	af00      	add	r7, sp, #0
90015436:	6078      	str	r0, [r7, #4]
90015438:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
9001543a:	230e      	movs	r3, #14
9001543c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
9001543e:	687b      	ldr	r3, [r7, #4]
90015440:	895b      	ldrh	r3, [r3, #10]
90015442:	2b0e      	cmp	r3, #14
90015444:	d96e      	bls.n	90015524 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
90015446:	687b      	ldr	r3, [r7, #4]
90015448:	7bdb      	ldrb	r3, [r3, #15]
9001544a:	2b00      	cmp	r3, #0
9001544c:	d106      	bne.n	9001545c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
9001544e:	683b      	ldr	r3, [r7, #0]
90015450:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
90015454:	3301      	adds	r3, #1
90015456:	b2da      	uxtb	r2, r3
90015458:	687b      	ldr	r3, [r7, #4]
9001545a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
9001545c:	687b      	ldr	r3, [r7, #4]
9001545e:	685b      	ldr	r3, [r3, #4]
90015460:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
90015462:	693b      	ldr	r3, [r7, #16]
90015464:	7b1a      	ldrb	r2, [r3, #12]
90015466:	7b5b      	ldrb	r3, [r3, #13]
90015468:	021b      	lsls	r3, r3, #8
9001546a:	4313      	orrs	r3, r2
9001546c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
9001546e:	693b      	ldr	r3, [r7, #16]
90015470:	781b      	ldrb	r3, [r3, #0]
90015472:	f003 0301 	and.w	r3, r3, #1
90015476:	2b00      	cmp	r3, #0
90015478:	d023      	beq.n	900154c2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
9001547a:	693b      	ldr	r3, [r7, #16]
9001547c:	781b      	ldrb	r3, [r3, #0]
9001547e:	2b01      	cmp	r3, #1
90015480:	d10f      	bne.n	900154a2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
90015482:	693b      	ldr	r3, [r7, #16]
90015484:	785b      	ldrb	r3, [r3, #1]
90015486:	2b00      	cmp	r3, #0
90015488:	d11b      	bne.n	900154c2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
9001548a:	693b      	ldr	r3, [r7, #16]
9001548c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
9001548e:	2b5e      	cmp	r3, #94	; 0x5e
90015490:	d117      	bne.n	900154c2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
90015492:	687b      	ldr	r3, [r7, #4]
90015494:	7b5b      	ldrb	r3, [r3, #13]
90015496:	f043 0310 	orr.w	r3, r3, #16
9001549a:	b2da      	uxtb	r2, r3
9001549c:	687b      	ldr	r3, [r7, #4]
9001549e:	735a      	strb	r2, [r3, #13]
900154a0:	e00f      	b.n	900154c2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
900154a2:	693b      	ldr	r3, [r7, #16]
900154a4:	2206      	movs	r2, #6
900154a6:	4928      	ldr	r1, [pc, #160]	; (90015548 <ethernet_input+0x118>)
900154a8:	4618      	mov	r0, r3
900154aa:	f000 face 	bl	90015a4a <memcmp>
900154ae:	4603      	mov	r3, r0
900154b0:	2b00      	cmp	r3, #0
900154b2:	d106      	bne.n	900154c2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
900154b4:	687b      	ldr	r3, [r7, #4]
900154b6:	7b5b      	ldrb	r3, [r3, #13]
900154b8:	f043 0308 	orr.w	r3, r3, #8
900154bc:	b2da      	uxtb	r2, r3
900154be:	687b      	ldr	r3, [r7, #4]
900154c0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
900154c2:	89fb      	ldrh	r3, [r7, #14]
900154c4:	2b08      	cmp	r3, #8
900154c6:	d003      	beq.n	900154d0 <ethernet_input+0xa0>
900154c8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
900154cc:	d014      	beq.n	900154f8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
900154ce:	e032      	b.n	90015536 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
900154d0:	683b      	ldr	r3, [r7, #0]
900154d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
900154d6:	f003 0308 	and.w	r3, r3, #8
900154da:	2b00      	cmp	r3, #0
900154dc:	d024      	beq.n	90015528 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
900154de:	8afb      	ldrh	r3, [r7, #22]
900154e0:	4619      	mov	r1, r3
900154e2:	6878      	ldr	r0, [r7, #4]
900154e4:	f7f6 fee0 	bl	9000c2a8 <pbuf_remove_header>
900154e8:	4603      	mov	r3, r0
900154ea:	2b00      	cmp	r3, #0
900154ec:	d11e      	bne.n	9001552c <ethernet_input+0xfc>
        ip4_input(p, netif);
900154ee:	6839      	ldr	r1, [r7, #0]
900154f0:	6878      	ldr	r0, [r7, #4]
900154f2:	f7fe ff21 	bl	90014338 <ip4_input>
      break;
900154f6:	e013      	b.n	90015520 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
900154f8:	683b      	ldr	r3, [r7, #0]
900154fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
900154fe:	f003 0308 	and.w	r3, r3, #8
90015502:	2b00      	cmp	r3, #0
90015504:	d014      	beq.n	90015530 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
90015506:	8afb      	ldrh	r3, [r7, #22]
90015508:	4619      	mov	r1, r3
9001550a:	6878      	ldr	r0, [r7, #4]
9001550c:	f7f6 fecc 	bl	9000c2a8 <pbuf_remove_header>
90015510:	4603      	mov	r3, r0
90015512:	2b00      	cmp	r3, #0
90015514:	d10e      	bne.n	90015534 <ethernet_input+0x104>
        etharp_input(p, netif);
90015516:	6839      	ldr	r1, [r7, #0]
90015518:	6878      	ldr	r0, [r7, #4]
9001551a:	f7fe f89b 	bl	90013654 <etharp_input>
      break;
9001551e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
90015520:	2300      	movs	r3, #0
90015522:	e00c      	b.n	9001553e <ethernet_input+0x10e>
    goto free_and_return;
90015524:	bf00      	nop
90015526:	e006      	b.n	90015536 <ethernet_input+0x106>
        goto free_and_return;
90015528:	bf00      	nop
9001552a:	e004      	b.n	90015536 <ethernet_input+0x106>
        goto free_and_return;
9001552c:	bf00      	nop
9001552e:	e002      	b.n	90015536 <ethernet_input+0x106>
        goto free_and_return;
90015530:	bf00      	nop
90015532:	e000      	b.n	90015536 <ethernet_input+0x106>
        goto free_and_return;
90015534:	bf00      	nop

free_and_return:
  pbuf_free(p);
90015536:	6878      	ldr	r0, [r7, #4]
90015538:	f7f6 ff3c 	bl	9000c3b4 <pbuf_free>
  return ERR_OK;
9001553c:	2300      	movs	r3, #0
}
9001553e:	4618      	mov	r0, r3
90015540:	3718      	adds	r7, #24
90015542:	46bd      	mov	sp, r7
90015544:	bd80      	pop	{r7, pc}
90015546:	bf00      	nop
90015548:	90021138 	.word	0x90021138

9001554c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
9001554c:	b580      	push	{r7, lr}
9001554e:	b086      	sub	sp, #24
90015550:	af00      	add	r7, sp, #0
90015552:	60f8      	str	r0, [r7, #12]
90015554:	60b9      	str	r1, [r7, #8]
90015556:	607a      	str	r2, [r7, #4]
90015558:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
9001555a:	8c3b      	ldrh	r3, [r7, #32]
9001555c:	4618      	mov	r0, r3
9001555e:	f7f5 fa15 	bl	9000a98c <lwip_htons>
90015562:	4603      	mov	r3, r0
90015564:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
90015566:	210e      	movs	r1, #14
90015568:	68b8      	ldr	r0, [r7, #8]
9001556a:	f7f6 fe8d 	bl	9000c288 <pbuf_add_header>
9001556e:	4603      	mov	r3, r0
90015570:	2b00      	cmp	r3, #0
90015572:	d125      	bne.n	900155c0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
90015574:	68bb      	ldr	r3, [r7, #8]
90015576:	685b      	ldr	r3, [r3, #4]
90015578:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
9001557a:	693b      	ldr	r3, [r7, #16]
9001557c:	8afa      	ldrh	r2, [r7, #22]
9001557e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
90015580:	693b      	ldr	r3, [r7, #16]
90015582:	2206      	movs	r2, #6
90015584:	6839      	ldr	r1, [r7, #0]
90015586:	4618      	mov	r0, r3
90015588:	f000 fa6f 	bl	90015a6a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
9001558c:	693b      	ldr	r3, [r7, #16]
9001558e:	3306      	adds	r3, #6
90015590:	2206      	movs	r2, #6
90015592:	6879      	ldr	r1, [r7, #4]
90015594:	4618      	mov	r0, r3
90015596:	f000 fa68 	bl	90015a6a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
9001559a:	68fb      	ldr	r3, [r7, #12]
9001559c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
900155a0:	2b06      	cmp	r3, #6
900155a2:	d006      	beq.n	900155b2 <ethernet_output+0x66>
900155a4:	4b0a      	ldr	r3, [pc, #40]	; (900155d0 <ethernet_output+0x84>)
900155a6:	f44f 7299 	mov.w	r2, #306	; 0x132
900155aa:	490a      	ldr	r1, [pc, #40]	; (900155d4 <ethernet_output+0x88>)
900155ac:	480a      	ldr	r0, [pc, #40]	; (900155d8 <ethernet_output+0x8c>)
900155ae:	f000 fb21 	bl	90015bf4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
900155b2:	68fb      	ldr	r3, [r7, #12]
900155b4:	699b      	ldr	r3, [r3, #24]
900155b6:	68b9      	ldr	r1, [r7, #8]
900155b8:	68f8      	ldr	r0, [r7, #12]
900155ba:	4798      	blx	r3
900155bc:	4603      	mov	r3, r0
900155be:	e002      	b.n	900155c6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
900155c0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
900155c2:	f06f 0301 	mvn.w	r3, #1
}
900155c6:	4618      	mov	r0, r3
900155c8:	3718      	adds	r7, #24
900155ca:	46bd      	mov	sp, r7
900155cc:	bd80      	pop	{r7, pc}
900155ce:	bf00      	nop
900155d0:	9001a6a8 	.word	0x9001a6a8
900155d4:	9001a6e0 	.word	0x9001a6e0
900155d8:	9001a714 	.word	0x9001a714

900155dc <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
900155dc:	b580      	push	{r7, lr}
900155de:	b086      	sub	sp, #24
900155e0:	af00      	add	r7, sp, #0
900155e2:	6078      	str	r0, [r7, #4]
900155e4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
900155e6:	683b      	ldr	r3, [r7, #0]
900155e8:	60bb      	str	r3, [r7, #8]
900155ea:	2304      	movs	r3, #4
900155ec:	60fb      	str	r3, [r7, #12]
900155ee:	2300      	movs	r3, #0
900155f0:	613b      	str	r3, [r7, #16]
900155f2:	2300      	movs	r3, #0
900155f4:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
900155f6:	f107 0308 	add.w	r3, r7, #8
900155fa:	2100      	movs	r1, #0
900155fc:	4618      	mov	r0, r3
900155fe:	f7f0 fd39 	bl	90006074 <osMessageCreate>
90015602:	4602      	mov	r2, r0
90015604:	687b      	ldr	r3, [r7, #4]
90015606:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
90015608:	687b      	ldr	r3, [r7, #4]
9001560a:	681b      	ldr	r3, [r3, #0]
9001560c:	2b00      	cmp	r3, #0
9001560e:	d102      	bne.n	90015616 <sys_mbox_new+0x3a>
    return ERR_MEM;
90015610:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
90015614:	e000      	b.n	90015618 <sys_mbox_new+0x3c>

  return ERR_OK;
90015616:	2300      	movs	r3, #0
}
90015618:	4618      	mov	r0, r3
9001561a:	3718      	adds	r7, #24
9001561c:	46bd      	mov	sp, r7
9001561e:	bd80      	pop	{r7, pc}

90015620 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
90015620:	b580      	push	{r7, lr}
90015622:	b084      	sub	sp, #16
90015624:	af00      	add	r7, sp, #0
90015626:	6078      	str	r0, [r7, #4]
90015628:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
9001562a:	687b      	ldr	r3, [r7, #4]
9001562c:	681b      	ldr	r3, [r3, #0]
9001562e:	6839      	ldr	r1, [r7, #0]
90015630:	2200      	movs	r2, #0
90015632:	4618      	mov	r0, r3
90015634:	f7f0 fd46 	bl	900060c4 <osMessagePut>
90015638:	4603      	mov	r3, r0
9001563a:	2b00      	cmp	r3, #0
9001563c:	d102      	bne.n	90015644 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
9001563e:	2300      	movs	r3, #0
90015640:	73fb      	strb	r3, [r7, #15]
90015642:	e001      	b.n	90015648 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
90015644:	23ff      	movs	r3, #255	; 0xff
90015646:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
90015648:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
9001564c:	4618      	mov	r0, r3
9001564e:	3710      	adds	r7, #16
90015650:	46bd      	mov	sp, r7
90015652:	bd80      	pop	{r7, pc}

90015654 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
90015654:	b580      	push	{r7, lr}
90015656:	b08c      	sub	sp, #48	; 0x30
90015658:	af00      	add	r7, sp, #0
9001565a:	61f8      	str	r0, [r7, #28]
9001565c:	61b9      	str	r1, [r7, #24]
9001565e:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
90015660:	f7f0 fb78 	bl	90005d54 <osKernelSysTick>
90015664:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
90015666:	697b      	ldr	r3, [r7, #20]
90015668:	2b00      	cmp	r3, #0
9001566a:	d017      	beq.n	9001569c <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
9001566c:	69fb      	ldr	r3, [r7, #28]
9001566e:	6819      	ldr	r1, [r3, #0]
90015670:	f107 0320 	add.w	r3, r7, #32
90015674:	697a      	ldr	r2, [r7, #20]
90015676:	4618      	mov	r0, r3
90015678:	f7f0 fd64 	bl	90006144 <osMessageGet>

    if(event.status == osEventMessage)
9001567c:	6a3b      	ldr	r3, [r7, #32]
9001567e:	2b10      	cmp	r3, #16
90015680:	d109      	bne.n	90015696 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
90015682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
90015684:	461a      	mov	r2, r3
90015686:	69bb      	ldr	r3, [r7, #24]
90015688:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
9001568a:	f7f0 fb63 	bl	90005d54 <osKernelSysTick>
9001568e:	4602      	mov	r2, r0
90015690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
90015692:	1ad3      	subs	r3, r2, r3
90015694:	e019      	b.n	900156ca <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
90015696:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9001569a:	e016      	b.n	900156ca <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
9001569c:	69fb      	ldr	r3, [r7, #28]
9001569e:	6819      	ldr	r1, [r3, #0]
900156a0:	463b      	mov	r3, r7
900156a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
900156a6:	4618      	mov	r0, r3
900156a8:	f7f0 fd4c 	bl	90006144 <osMessageGet>
900156ac:	f107 0320 	add.w	r3, r7, #32
900156b0:	463a      	mov	r2, r7
900156b2:	ca07      	ldmia	r2, {r0, r1, r2}
900156b4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
900156b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
900156ba:	461a      	mov	r2, r3
900156bc:	69bb      	ldr	r3, [r7, #24]
900156be:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
900156c0:	f7f0 fb48 	bl	90005d54 <osKernelSysTick>
900156c4:	4602      	mov	r2, r0
900156c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
900156c8:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
900156ca:	4618      	mov	r0, r3
900156cc:	3730      	adds	r7, #48	; 0x30
900156ce:	46bd      	mov	sp, r7
900156d0:	bd80      	pop	{r7, pc}

900156d2 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
900156d2:	b480      	push	{r7}
900156d4:	b083      	sub	sp, #12
900156d6:	af00      	add	r7, sp, #0
900156d8:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
900156da:	687b      	ldr	r3, [r7, #4]
900156dc:	681b      	ldr	r3, [r3, #0]
900156de:	2b00      	cmp	r3, #0
900156e0:	d101      	bne.n	900156e6 <sys_mbox_valid+0x14>
    return 0;
900156e2:	2300      	movs	r3, #0
900156e4:	e000      	b.n	900156e8 <sys_mbox_valid+0x16>
  else
    return 1;
900156e6:	2301      	movs	r3, #1
}
900156e8:	4618      	mov	r0, r3
900156ea:	370c      	adds	r7, #12
900156ec:	46bd      	mov	sp, r7
900156ee:	f85d 7b04 	ldr.w	r7, [sp], #4
900156f2:	4770      	bx	lr

900156f4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
900156f4:	b580      	push	{r7, lr}
900156f6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
900156f8:	4803      	ldr	r0, [pc, #12]	; (90015708 <sys_init+0x14>)
900156fa:	f7f0 fb9b 	bl	90005e34 <osMutexCreate>
900156fe:	4603      	mov	r3, r0
90015700:	4a02      	ldr	r2, [pc, #8]	; (9001570c <sys_init+0x18>)
90015702:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
90015704:	bf00      	nop
90015706:	bd80      	pop	{r7, pc}
90015708:	90021148 	.word	0x90021148
9001570c:	2401f500 	.word	0x2401f500

90015710 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
90015710:	b580      	push	{r7, lr}
90015712:	b084      	sub	sp, #16
90015714:	af00      	add	r7, sp, #0
90015716:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
90015718:	2300      	movs	r3, #0
9001571a:	60bb      	str	r3, [r7, #8]
9001571c:	2300      	movs	r3, #0
9001571e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
90015720:	f107 0308 	add.w	r3, r7, #8
90015724:	4618      	mov	r0, r3
90015726:	f7f0 fb85 	bl	90005e34 <osMutexCreate>
9001572a:	4602      	mov	r2, r0
9001572c:	687b      	ldr	r3, [r7, #4]
9001572e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
90015730:	687b      	ldr	r3, [r7, #4]
90015732:	681b      	ldr	r3, [r3, #0]
90015734:	2b00      	cmp	r3, #0
90015736:	d102      	bne.n	9001573e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
90015738:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
9001573c:	e000      	b.n	90015740 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
9001573e:	2300      	movs	r3, #0
}
90015740:	4618      	mov	r0, r3
90015742:	3710      	adds	r7, #16
90015744:	46bd      	mov	sp, r7
90015746:	bd80      	pop	{r7, pc}

90015748 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
90015748:	b580      	push	{r7, lr}
9001574a:	b082      	sub	sp, #8
9001574c:	af00      	add	r7, sp, #0
9001574e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
90015750:	687b      	ldr	r3, [r7, #4]
90015752:	681b      	ldr	r3, [r3, #0]
90015754:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
90015758:	4618      	mov	r0, r3
9001575a:	f7f0 fb83 	bl	90005e64 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
9001575e:	bf00      	nop
90015760:	3708      	adds	r7, #8
90015762:	46bd      	mov	sp, r7
90015764:	bd80      	pop	{r7, pc}

90015766 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
90015766:	b580      	push	{r7, lr}
90015768:	b082      	sub	sp, #8
9001576a:	af00      	add	r7, sp, #0
9001576c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
9001576e:	687b      	ldr	r3, [r7, #4]
90015770:	681b      	ldr	r3, [r3, #0]
90015772:	4618      	mov	r0, r3
90015774:	f7f0 fbc4 	bl	90005f00 <osMutexRelease>
}
90015778:	bf00      	nop
9001577a:	3708      	adds	r7, #8
9001577c:	46bd      	mov	sp, r7
9001577e:	bd80      	pop	{r7, pc}

90015780 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
90015780:	b580      	push	{r7, lr}
90015782:	b08c      	sub	sp, #48	; 0x30
90015784:	af00      	add	r7, sp, #0
90015786:	60f8      	str	r0, [r7, #12]
90015788:	60b9      	str	r1, [r7, #8]
9001578a:	607a      	str	r2, [r7, #4]
9001578c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
9001578e:	f107 0314 	add.w	r3, r7, #20
90015792:	2200      	movs	r2, #0
90015794:	601a      	str	r2, [r3, #0]
90015796:	605a      	str	r2, [r3, #4]
90015798:	609a      	str	r2, [r3, #8]
9001579a:	60da      	str	r2, [r3, #12]
9001579c:	611a      	str	r2, [r3, #16]
9001579e:	615a      	str	r2, [r3, #20]
900157a0:	619a      	str	r2, [r3, #24]
900157a2:	68fb      	ldr	r3, [r7, #12]
900157a4:	617b      	str	r3, [r7, #20]
900157a6:	68bb      	ldr	r3, [r7, #8]
900157a8:	61bb      	str	r3, [r7, #24]
900157aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
900157ac:	b21b      	sxth	r3, r3
900157ae:	83bb      	strh	r3, [r7, #28]
900157b0:	683b      	ldr	r3, [r7, #0]
900157b2:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
900157b4:	f107 0314 	add.w	r3, r7, #20
900157b8:	6879      	ldr	r1, [r7, #4]
900157ba:	4618      	mov	r0, r3
900157bc:	f7f0 fada 	bl	90005d74 <osThreadCreate>
900157c0:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
900157c2:	4618      	mov	r0, r3
900157c4:	3730      	adds	r7, #48	; 0x30
900157c6:	46bd      	mov	sp, r7
900157c8:	bd80      	pop	{r7, pc}
	...

900157cc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
900157cc:	b580      	push	{r7, lr}
900157ce:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
900157d0:	4b04      	ldr	r3, [pc, #16]	; (900157e4 <sys_arch_protect+0x18>)
900157d2:	681b      	ldr	r3, [r3, #0]
900157d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
900157d8:	4618      	mov	r0, r3
900157da:	f7f0 fb43 	bl	90005e64 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
900157de:	2301      	movs	r3, #1
}
900157e0:	4618      	mov	r0, r3
900157e2:	bd80      	pop	{r7, pc}
900157e4:	2401f500 	.word	0x2401f500

900157e8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
900157e8:	b580      	push	{r7, lr}
900157ea:	b082      	sub	sp, #8
900157ec:	af00      	add	r7, sp, #0
900157ee:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
900157f0:	4b04      	ldr	r3, [pc, #16]	; (90015804 <sys_arch_unprotect+0x1c>)
900157f2:	681b      	ldr	r3, [r3, #0]
900157f4:	4618      	mov	r0, r3
900157f6:	f7f0 fb83 	bl	90005f00 <osMutexRelease>
}
900157fa:	bf00      	nop
900157fc:	3708      	adds	r7, #8
900157fe:	46bd      	mov	sp, r7
90015800:	bd80      	pop	{r7, pc}
90015802:	bf00      	nop
90015804:	2401f500 	.word	0x2401f500

90015808 <atoi>:
90015808:	220a      	movs	r2, #10
9001580a:	2100      	movs	r1, #0
9001580c:	f000 bcc8 	b.w	900161a0 <strtol>

90015810 <std>:
90015810:	2300      	movs	r3, #0
90015812:	b510      	push	{r4, lr}
90015814:	4604      	mov	r4, r0
90015816:	e9c0 3300 	strd	r3, r3, [r0]
9001581a:	e9c0 3304 	strd	r3, r3, [r0, #16]
9001581e:	6083      	str	r3, [r0, #8]
90015820:	8181      	strh	r1, [r0, #12]
90015822:	6643      	str	r3, [r0, #100]	; 0x64
90015824:	81c2      	strh	r2, [r0, #14]
90015826:	6183      	str	r3, [r0, #24]
90015828:	4619      	mov	r1, r3
9001582a:	2208      	movs	r2, #8
9001582c:	305c      	adds	r0, #92	; 0x5c
9001582e:	f000 f944 	bl	90015aba <memset>
90015832:	4b05      	ldr	r3, [pc, #20]	; (90015848 <std+0x38>)
90015834:	6263      	str	r3, [r4, #36]	; 0x24
90015836:	4b05      	ldr	r3, [pc, #20]	; (9001584c <std+0x3c>)
90015838:	62a3      	str	r3, [r4, #40]	; 0x28
9001583a:	4b05      	ldr	r3, [pc, #20]	; (90015850 <std+0x40>)
9001583c:	62e3      	str	r3, [r4, #44]	; 0x2c
9001583e:	4b05      	ldr	r3, [pc, #20]	; (90015854 <std+0x44>)
90015840:	6224      	str	r4, [r4, #32]
90015842:	6323      	str	r3, [r4, #48]	; 0x30
90015844:	bd10      	pop	{r4, pc}
90015846:	bf00      	nop
90015848:	90015f29 	.word	0x90015f29
9001584c:	90015f4b 	.word	0x90015f4b
90015850:	90015f83 	.word	0x90015f83
90015854:	90015fa7 	.word	0x90015fa7

90015858 <_cleanup_r>:
90015858:	4901      	ldr	r1, [pc, #4]	; (90015860 <_cleanup_r+0x8>)
9001585a:	f000 b8af 	b.w	900159bc <_fwalk_reent>
9001585e:	bf00      	nop
90015860:	900164cd 	.word	0x900164cd

90015864 <__sfmoreglue>:
90015864:	b570      	push	{r4, r5, r6, lr}
90015866:	2268      	movs	r2, #104	; 0x68
90015868:	1e4d      	subs	r5, r1, #1
9001586a:	4355      	muls	r5, r2
9001586c:	460e      	mov	r6, r1
9001586e:	f105 0174 	add.w	r1, r5, #116	; 0x74
90015872:	f000 f94b 	bl	90015b0c <_malloc_r>
90015876:	4604      	mov	r4, r0
90015878:	b140      	cbz	r0, 9001588c <__sfmoreglue+0x28>
9001587a:	2100      	movs	r1, #0
9001587c:	e9c0 1600 	strd	r1, r6, [r0]
90015880:	300c      	adds	r0, #12
90015882:	60a0      	str	r0, [r4, #8]
90015884:	f105 0268 	add.w	r2, r5, #104	; 0x68
90015888:	f000 f917 	bl	90015aba <memset>
9001588c:	4620      	mov	r0, r4
9001588e:	bd70      	pop	{r4, r5, r6, pc}

90015890 <__sfp_lock_acquire>:
90015890:	4801      	ldr	r0, [pc, #4]	; (90015898 <__sfp_lock_acquire+0x8>)
90015892:	f000 b8d8 	b.w	90015a46 <__retarget_lock_acquire_recursive>
90015896:	bf00      	nop
90015898:	2401f505 	.word	0x2401f505

9001589c <__sfp_lock_release>:
9001589c:	4801      	ldr	r0, [pc, #4]	; (900158a4 <__sfp_lock_release+0x8>)
9001589e:	f000 b8d3 	b.w	90015a48 <__retarget_lock_release_recursive>
900158a2:	bf00      	nop
900158a4:	2401f505 	.word	0x2401f505

900158a8 <__sinit_lock_acquire>:
900158a8:	4801      	ldr	r0, [pc, #4]	; (900158b0 <__sinit_lock_acquire+0x8>)
900158aa:	f000 b8cc 	b.w	90015a46 <__retarget_lock_acquire_recursive>
900158ae:	bf00      	nop
900158b0:	2401f506 	.word	0x2401f506

900158b4 <__sinit_lock_release>:
900158b4:	4801      	ldr	r0, [pc, #4]	; (900158bc <__sinit_lock_release+0x8>)
900158b6:	f000 b8c7 	b.w	90015a48 <__retarget_lock_release_recursive>
900158ba:	bf00      	nop
900158bc:	2401f506 	.word	0x2401f506

900158c0 <__sinit>:
900158c0:	b510      	push	{r4, lr}
900158c2:	4604      	mov	r4, r0
900158c4:	f7ff fff0 	bl	900158a8 <__sinit_lock_acquire>
900158c8:	69a3      	ldr	r3, [r4, #24]
900158ca:	b11b      	cbz	r3, 900158d4 <__sinit+0x14>
900158cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
900158d0:	f7ff bff0 	b.w	900158b4 <__sinit_lock_release>
900158d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
900158d8:	6523      	str	r3, [r4, #80]	; 0x50
900158da:	4b13      	ldr	r3, [pc, #76]	; (90015928 <__sinit+0x68>)
900158dc:	4a13      	ldr	r2, [pc, #76]	; (9001592c <__sinit+0x6c>)
900158de:	681b      	ldr	r3, [r3, #0]
900158e0:	62a2      	str	r2, [r4, #40]	; 0x28
900158e2:	42a3      	cmp	r3, r4
900158e4:	bf04      	itt	eq
900158e6:	2301      	moveq	r3, #1
900158e8:	61a3      	streq	r3, [r4, #24]
900158ea:	4620      	mov	r0, r4
900158ec:	f000 f820 	bl	90015930 <__sfp>
900158f0:	6060      	str	r0, [r4, #4]
900158f2:	4620      	mov	r0, r4
900158f4:	f000 f81c 	bl	90015930 <__sfp>
900158f8:	60a0      	str	r0, [r4, #8]
900158fa:	4620      	mov	r0, r4
900158fc:	f000 f818 	bl	90015930 <__sfp>
90015900:	2200      	movs	r2, #0
90015902:	60e0      	str	r0, [r4, #12]
90015904:	2104      	movs	r1, #4
90015906:	6860      	ldr	r0, [r4, #4]
90015908:	f7ff ff82 	bl	90015810 <std>
9001590c:	68a0      	ldr	r0, [r4, #8]
9001590e:	2201      	movs	r2, #1
90015910:	2109      	movs	r1, #9
90015912:	f7ff ff7d 	bl	90015810 <std>
90015916:	68e0      	ldr	r0, [r4, #12]
90015918:	2202      	movs	r2, #2
9001591a:	2112      	movs	r1, #18
9001591c:	f7ff ff78 	bl	90015810 <std>
90015920:	2301      	movs	r3, #1
90015922:	61a3      	str	r3, [r4, #24]
90015924:	e7d2      	b.n	900158cc <__sinit+0xc>
90015926:	bf00      	nop
90015928:	900212b4 	.word	0x900212b4
9001592c:	90015859 	.word	0x90015859

90015930 <__sfp>:
90015930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90015932:	4607      	mov	r7, r0
90015934:	f7ff ffac 	bl	90015890 <__sfp_lock_acquire>
90015938:	4b1e      	ldr	r3, [pc, #120]	; (900159b4 <__sfp+0x84>)
9001593a:	681e      	ldr	r6, [r3, #0]
9001593c:	69b3      	ldr	r3, [r6, #24]
9001593e:	b913      	cbnz	r3, 90015946 <__sfp+0x16>
90015940:	4630      	mov	r0, r6
90015942:	f7ff ffbd 	bl	900158c0 <__sinit>
90015946:	3648      	adds	r6, #72	; 0x48
90015948:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
9001594c:	3b01      	subs	r3, #1
9001594e:	d503      	bpl.n	90015958 <__sfp+0x28>
90015950:	6833      	ldr	r3, [r6, #0]
90015952:	b30b      	cbz	r3, 90015998 <__sfp+0x68>
90015954:	6836      	ldr	r6, [r6, #0]
90015956:	e7f7      	b.n	90015948 <__sfp+0x18>
90015958:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
9001595c:	b9d5      	cbnz	r5, 90015994 <__sfp+0x64>
9001595e:	4b16      	ldr	r3, [pc, #88]	; (900159b8 <__sfp+0x88>)
90015960:	60e3      	str	r3, [r4, #12]
90015962:	f104 0058 	add.w	r0, r4, #88	; 0x58
90015966:	6665      	str	r5, [r4, #100]	; 0x64
90015968:	f000 f86c 	bl	90015a44 <__retarget_lock_init_recursive>
9001596c:	f7ff ff96 	bl	9001589c <__sfp_lock_release>
90015970:	e9c4 5501 	strd	r5, r5, [r4, #4]
90015974:	e9c4 5504 	strd	r5, r5, [r4, #16]
90015978:	6025      	str	r5, [r4, #0]
9001597a:	61a5      	str	r5, [r4, #24]
9001597c:	2208      	movs	r2, #8
9001597e:	4629      	mov	r1, r5
90015980:	f104 005c 	add.w	r0, r4, #92	; 0x5c
90015984:	f000 f899 	bl	90015aba <memset>
90015988:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
9001598c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
90015990:	4620      	mov	r0, r4
90015992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90015994:	3468      	adds	r4, #104	; 0x68
90015996:	e7d9      	b.n	9001594c <__sfp+0x1c>
90015998:	2104      	movs	r1, #4
9001599a:	4638      	mov	r0, r7
9001599c:	f7ff ff62 	bl	90015864 <__sfmoreglue>
900159a0:	4604      	mov	r4, r0
900159a2:	6030      	str	r0, [r6, #0]
900159a4:	2800      	cmp	r0, #0
900159a6:	d1d5      	bne.n	90015954 <__sfp+0x24>
900159a8:	f7ff ff78 	bl	9001589c <__sfp_lock_release>
900159ac:	230c      	movs	r3, #12
900159ae:	603b      	str	r3, [r7, #0]
900159b0:	e7ee      	b.n	90015990 <__sfp+0x60>
900159b2:	bf00      	nop
900159b4:	900212b4 	.word	0x900212b4
900159b8:	ffff0001 	.word	0xffff0001

900159bc <_fwalk_reent>:
900159bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
900159c0:	4606      	mov	r6, r0
900159c2:	4688      	mov	r8, r1
900159c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
900159c8:	2700      	movs	r7, #0
900159ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
900159ce:	f1b9 0901 	subs.w	r9, r9, #1
900159d2:	d505      	bpl.n	900159e0 <_fwalk_reent+0x24>
900159d4:	6824      	ldr	r4, [r4, #0]
900159d6:	2c00      	cmp	r4, #0
900159d8:	d1f7      	bne.n	900159ca <_fwalk_reent+0xe>
900159da:	4638      	mov	r0, r7
900159dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
900159e0:	89ab      	ldrh	r3, [r5, #12]
900159e2:	2b01      	cmp	r3, #1
900159e4:	d907      	bls.n	900159f6 <_fwalk_reent+0x3a>
900159e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
900159ea:	3301      	adds	r3, #1
900159ec:	d003      	beq.n	900159f6 <_fwalk_reent+0x3a>
900159ee:	4629      	mov	r1, r5
900159f0:	4630      	mov	r0, r6
900159f2:	47c0      	blx	r8
900159f4:	4307      	orrs	r7, r0
900159f6:	3568      	adds	r5, #104	; 0x68
900159f8:	e7e9      	b.n	900159ce <_fwalk_reent+0x12>
	...

900159fc <__libc_init_array>:
900159fc:	b570      	push	{r4, r5, r6, lr}
900159fe:	4d0d      	ldr	r5, [pc, #52]	; (90015a34 <__libc_init_array+0x38>)
90015a00:	4c0d      	ldr	r4, [pc, #52]	; (90015a38 <__libc_init_array+0x3c>)
90015a02:	1b64      	subs	r4, r4, r5
90015a04:	10a4      	asrs	r4, r4, #2
90015a06:	2600      	movs	r6, #0
90015a08:	42a6      	cmp	r6, r4
90015a0a:	d109      	bne.n	90015a20 <__libc_init_array+0x24>
90015a0c:	4d0b      	ldr	r5, [pc, #44]	; (90015a3c <__libc_init_array+0x40>)
90015a0e:	4c0c      	ldr	r4, [pc, #48]	; (90015a40 <__libc_init_array+0x44>)
90015a10:	f001 fb84 	bl	9001711c <_init>
90015a14:	1b64      	subs	r4, r4, r5
90015a16:	10a4      	asrs	r4, r4, #2
90015a18:	2600      	movs	r6, #0
90015a1a:	42a6      	cmp	r6, r4
90015a1c:	d105      	bne.n	90015a2a <__libc_init_array+0x2e>
90015a1e:	bd70      	pop	{r4, r5, r6, pc}
90015a20:	f855 3b04 	ldr.w	r3, [r5], #4
90015a24:	4798      	blx	r3
90015a26:	3601      	adds	r6, #1
90015a28:	e7ee      	b.n	90015a08 <__libc_init_array+0xc>
90015a2a:	f855 3b04 	ldr.w	r3, [r5], #4
90015a2e:	4798      	blx	r3
90015a30:	3601      	adds	r6, #1
90015a32:	e7f2      	b.n	90015a1a <__libc_init_array+0x1e>
90015a34:	9002139c 	.word	0x9002139c
90015a38:	9002139c 	.word	0x9002139c
90015a3c:	9002139c 	.word	0x9002139c
90015a40:	900213a0 	.word	0x900213a0

90015a44 <__retarget_lock_init_recursive>:
90015a44:	4770      	bx	lr

90015a46 <__retarget_lock_acquire_recursive>:
90015a46:	4770      	bx	lr

90015a48 <__retarget_lock_release_recursive>:
90015a48:	4770      	bx	lr

90015a4a <memcmp>:
90015a4a:	b510      	push	{r4, lr}
90015a4c:	3901      	subs	r1, #1
90015a4e:	4402      	add	r2, r0
90015a50:	4290      	cmp	r0, r2
90015a52:	d101      	bne.n	90015a58 <memcmp+0xe>
90015a54:	2000      	movs	r0, #0
90015a56:	e005      	b.n	90015a64 <memcmp+0x1a>
90015a58:	7803      	ldrb	r3, [r0, #0]
90015a5a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
90015a5e:	42a3      	cmp	r3, r4
90015a60:	d001      	beq.n	90015a66 <memcmp+0x1c>
90015a62:	1b18      	subs	r0, r3, r4
90015a64:	bd10      	pop	{r4, pc}
90015a66:	3001      	adds	r0, #1
90015a68:	e7f2      	b.n	90015a50 <memcmp+0x6>

90015a6a <memcpy>:
90015a6a:	440a      	add	r2, r1
90015a6c:	4291      	cmp	r1, r2
90015a6e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
90015a72:	d100      	bne.n	90015a76 <memcpy+0xc>
90015a74:	4770      	bx	lr
90015a76:	b510      	push	{r4, lr}
90015a78:	f811 4b01 	ldrb.w	r4, [r1], #1
90015a7c:	f803 4f01 	strb.w	r4, [r3, #1]!
90015a80:	4291      	cmp	r1, r2
90015a82:	d1f9      	bne.n	90015a78 <memcpy+0xe>
90015a84:	bd10      	pop	{r4, pc}

90015a86 <memmove>:
90015a86:	4288      	cmp	r0, r1
90015a88:	b510      	push	{r4, lr}
90015a8a:	eb01 0402 	add.w	r4, r1, r2
90015a8e:	d902      	bls.n	90015a96 <memmove+0x10>
90015a90:	4284      	cmp	r4, r0
90015a92:	4623      	mov	r3, r4
90015a94:	d807      	bhi.n	90015aa6 <memmove+0x20>
90015a96:	1e43      	subs	r3, r0, #1
90015a98:	42a1      	cmp	r1, r4
90015a9a:	d008      	beq.n	90015aae <memmove+0x28>
90015a9c:	f811 2b01 	ldrb.w	r2, [r1], #1
90015aa0:	f803 2f01 	strb.w	r2, [r3, #1]!
90015aa4:	e7f8      	b.n	90015a98 <memmove+0x12>
90015aa6:	4402      	add	r2, r0
90015aa8:	4601      	mov	r1, r0
90015aaa:	428a      	cmp	r2, r1
90015aac:	d100      	bne.n	90015ab0 <memmove+0x2a>
90015aae:	bd10      	pop	{r4, pc}
90015ab0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
90015ab4:	f802 4d01 	strb.w	r4, [r2, #-1]!
90015ab8:	e7f7      	b.n	90015aaa <memmove+0x24>

90015aba <memset>:
90015aba:	4402      	add	r2, r0
90015abc:	4603      	mov	r3, r0
90015abe:	4293      	cmp	r3, r2
90015ac0:	d100      	bne.n	90015ac4 <memset+0xa>
90015ac2:	4770      	bx	lr
90015ac4:	f803 1b01 	strb.w	r1, [r3], #1
90015ac8:	e7f9      	b.n	90015abe <memset+0x4>
	...

90015acc <sbrk_aligned>:
90015acc:	b570      	push	{r4, r5, r6, lr}
90015ace:	4e0e      	ldr	r6, [pc, #56]	; (90015b08 <sbrk_aligned+0x3c>)
90015ad0:	460c      	mov	r4, r1
90015ad2:	6831      	ldr	r1, [r6, #0]
90015ad4:	4605      	mov	r5, r0
90015ad6:	b911      	cbnz	r1, 90015ade <sbrk_aligned+0x12>
90015ad8:	f000 f9c2 	bl	90015e60 <_sbrk_r>
90015adc:	6030      	str	r0, [r6, #0]
90015ade:	4621      	mov	r1, r4
90015ae0:	4628      	mov	r0, r5
90015ae2:	f000 f9bd 	bl	90015e60 <_sbrk_r>
90015ae6:	1c43      	adds	r3, r0, #1
90015ae8:	d00a      	beq.n	90015b00 <sbrk_aligned+0x34>
90015aea:	1cc4      	adds	r4, r0, #3
90015aec:	f024 0403 	bic.w	r4, r4, #3
90015af0:	42a0      	cmp	r0, r4
90015af2:	d007      	beq.n	90015b04 <sbrk_aligned+0x38>
90015af4:	1a21      	subs	r1, r4, r0
90015af6:	4628      	mov	r0, r5
90015af8:	f000 f9b2 	bl	90015e60 <_sbrk_r>
90015afc:	3001      	adds	r0, #1
90015afe:	d101      	bne.n	90015b04 <sbrk_aligned+0x38>
90015b00:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
90015b04:	4620      	mov	r0, r4
90015b06:	bd70      	pop	{r4, r5, r6, pc}
90015b08:	2401f50c 	.word	0x2401f50c

90015b0c <_malloc_r>:
90015b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90015b10:	1ccd      	adds	r5, r1, #3
90015b12:	f025 0503 	bic.w	r5, r5, #3
90015b16:	3508      	adds	r5, #8
90015b18:	2d0c      	cmp	r5, #12
90015b1a:	bf38      	it	cc
90015b1c:	250c      	movcc	r5, #12
90015b1e:	2d00      	cmp	r5, #0
90015b20:	4607      	mov	r7, r0
90015b22:	db01      	blt.n	90015b28 <_malloc_r+0x1c>
90015b24:	42a9      	cmp	r1, r5
90015b26:	d905      	bls.n	90015b34 <_malloc_r+0x28>
90015b28:	230c      	movs	r3, #12
90015b2a:	603b      	str	r3, [r7, #0]
90015b2c:	2600      	movs	r6, #0
90015b2e:	4630      	mov	r0, r6
90015b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90015b34:	4e2e      	ldr	r6, [pc, #184]	; (90015bf0 <_malloc_r+0xe4>)
90015b36:	f000 fd97 	bl	90016668 <__malloc_lock>
90015b3a:	6833      	ldr	r3, [r6, #0]
90015b3c:	461c      	mov	r4, r3
90015b3e:	bb34      	cbnz	r4, 90015b8e <_malloc_r+0x82>
90015b40:	4629      	mov	r1, r5
90015b42:	4638      	mov	r0, r7
90015b44:	f7ff ffc2 	bl	90015acc <sbrk_aligned>
90015b48:	1c43      	adds	r3, r0, #1
90015b4a:	4604      	mov	r4, r0
90015b4c:	d14d      	bne.n	90015bea <_malloc_r+0xde>
90015b4e:	6834      	ldr	r4, [r6, #0]
90015b50:	4626      	mov	r6, r4
90015b52:	2e00      	cmp	r6, #0
90015b54:	d140      	bne.n	90015bd8 <_malloc_r+0xcc>
90015b56:	6823      	ldr	r3, [r4, #0]
90015b58:	4631      	mov	r1, r6
90015b5a:	4638      	mov	r0, r7
90015b5c:	eb04 0803 	add.w	r8, r4, r3
90015b60:	f000 f97e 	bl	90015e60 <_sbrk_r>
90015b64:	4580      	cmp	r8, r0
90015b66:	d13a      	bne.n	90015bde <_malloc_r+0xd2>
90015b68:	6821      	ldr	r1, [r4, #0]
90015b6a:	3503      	adds	r5, #3
90015b6c:	1a6d      	subs	r5, r5, r1
90015b6e:	f025 0503 	bic.w	r5, r5, #3
90015b72:	3508      	adds	r5, #8
90015b74:	2d0c      	cmp	r5, #12
90015b76:	bf38      	it	cc
90015b78:	250c      	movcc	r5, #12
90015b7a:	4629      	mov	r1, r5
90015b7c:	4638      	mov	r0, r7
90015b7e:	f7ff ffa5 	bl	90015acc <sbrk_aligned>
90015b82:	3001      	adds	r0, #1
90015b84:	d02b      	beq.n	90015bde <_malloc_r+0xd2>
90015b86:	6823      	ldr	r3, [r4, #0]
90015b88:	442b      	add	r3, r5
90015b8a:	6023      	str	r3, [r4, #0]
90015b8c:	e00e      	b.n	90015bac <_malloc_r+0xa0>
90015b8e:	6822      	ldr	r2, [r4, #0]
90015b90:	1b52      	subs	r2, r2, r5
90015b92:	d41e      	bmi.n	90015bd2 <_malloc_r+0xc6>
90015b94:	2a0b      	cmp	r2, #11
90015b96:	d916      	bls.n	90015bc6 <_malloc_r+0xba>
90015b98:	1961      	adds	r1, r4, r5
90015b9a:	42a3      	cmp	r3, r4
90015b9c:	6025      	str	r5, [r4, #0]
90015b9e:	bf18      	it	ne
90015ba0:	6059      	strne	r1, [r3, #4]
90015ba2:	6863      	ldr	r3, [r4, #4]
90015ba4:	bf08      	it	eq
90015ba6:	6031      	streq	r1, [r6, #0]
90015ba8:	5162      	str	r2, [r4, r5]
90015baa:	604b      	str	r3, [r1, #4]
90015bac:	4638      	mov	r0, r7
90015bae:	f104 060b 	add.w	r6, r4, #11
90015bb2:	f000 fd5f 	bl	90016674 <__malloc_unlock>
90015bb6:	f026 0607 	bic.w	r6, r6, #7
90015bba:	1d23      	adds	r3, r4, #4
90015bbc:	1af2      	subs	r2, r6, r3
90015bbe:	d0b6      	beq.n	90015b2e <_malloc_r+0x22>
90015bc0:	1b9b      	subs	r3, r3, r6
90015bc2:	50a3      	str	r3, [r4, r2]
90015bc4:	e7b3      	b.n	90015b2e <_malloc_r+0x22>
90015bc6:	6862      	ldr	r2, [r4, #4]
90015bc8:	42a3      	cmp	r3, r4
90015bca:	bf0c      	ite	eq
90015bcc:	6032      	streq	r2, [r6, #0]
90015bce:	605a      	strne	r2, [r3, #4]
90015bd0:	e7ec      	b.n	90015bac <_malloc_r+0xa0>
90015bd2:	4623      	mov	r3, r4
90015bd4:	6864      	ldr	r4, [r4, #4]
90015bd6:	e7b2      	b.n	90015b3e <_malloc_r+0x32>
90015bd8:	4634      	mov	r4, r6
90015bda:	6876      	ldr	r6, [r6, #4]
90015bdc:	e7b9      	b.n	90015b52 <_malloc_r+0x46>
90015bde:	230c      	movs	r3, #12
90015be0:	603b      	str	r3, [r7, #0]
90015be2:	4638      	mov	r0, r7
90015be4:	f000 fd46 	bl	90016674 <__malloc_unlock>
90015be8:	e7a1      	b.n	90015b2e <_malloc_r+0x22>
90015bea:	6025      	str	r5, [r4, #0]
90015bec:	e7de      	b.n	90015bac <_malloc_r+0xa0>
90015bee:	bf00      	nop
90015bf0:	2401f508 	.word	0x2401f508

90015bf4 <iprintf>:
90015bf4:	b40f      	push	{r0, r1, r2, r3}
90015bf6:	4b0a      	ldr	r3, [pc, #40]	; (90015c20 <iprintf+0x2c>)
90015bf8:	b513      	push	{r0, r1, r4, lr}
90015bfa:	681c      	ldr	r4, [r3, #0]
90015bfc:	b124      	cbz	r4, 90015c08 <iprintf+0x14>
90015bfe:	69a3      	ldr	r3, [r4, #24]
90015c00:	b913      	cbnz	r3, 90015c08 <iprintf+0x14>
90015c02:	4620      	mov	r0, r4
90015c04:	f7ff fe5c 	bl	900158c0 <__sinit>
90015c08:	ab05      	add	r3, sp, #20
90015c0a:	9a04      	ldr	r2, [sp, #16]
90015c0c:	68a1      	ldr	r1, [r4, #8]
90015c0e:	9301      	str	r3, [sp, #4]
90015c10:	4620      	mov	r0, r4
90015c12:	f000 ff07 	bl	90016a24 <_vfiprintf_r>
90015c16:	b002      	add	sp, #8
90015c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90015c1c:	b004      	add	sp, #16
90015c1e:	4770      	bx	lr
90015c20:	24000530 	.word	0x24000530

90015c24 <_puts_r>:
90015c24:	b570      	push	{r4, r5, r6, lr}
90015c26:	460e      	mov	r6, r1
90015c28:	4605      	mov	r5, r0
90015c2a:	b118      	cbz	r0, 90015c34 <_puts_r+0x10>
90015c2c:	6983      	ldr	r3, [r0, #24]
90015c2e:	b90b      	cbnz	r3, 90015c34 <_puts_r+0x10>
90015c30:	f7ff fe46 	bl	900158c0 <__sinit>
90015c34:	69ab      	ldr	r3, [r5, #24]
90015c36:	68ac      	ldr	r4, [r5, #8]
90015c38:	b913      	cbnz	r3, 90015c40 <_puts_r+0x1c>
90015c3a:	4628      	mov	r0, r5
90015c3c:	f7ff fe40 	bl	900158c0 <__sinit>
90015c40:	4b2c      	ldr	r3, [pc, #176]	; (90015cf4 <_puts_r+0xd0>)
90015c42:	429c      	cmp	r4, r3
90015c44:	d120      	bne.n	90015c88 <_puts_r+0x64>
90015c46:	686c      	ldr	r4, [r5, #4]
90015c48:	6e63      	ldr	r3, [r4, #100]	; 0x64
90015c4a:	07db      	lsls	r3, r3, #31
90015c4c:	d405      	bmi.n	90015c5a <_puts_r+0x36>
90015c4e:	89a3      	ldrh	r3, [r4, #12]
90015c50:	0598      	lsls	r0, r3, #22
90015c52:	d402      	bmi.n	90015c5a <_puts_r+0x36>
90015c54:	6da0      	ldr	r0, [r4, #88]	; 0x58
90015c56:	f7ff fef6 	bl	90015a46 <__retarget_lock_acquire_recursive>
90015c5a:	89a3      	ldrh	r3, [r4, #12]
90015c5c:	0719      	lsls	r1, r3, #28
90015c5e:	d51d      	bpl.n	90015c9c <_puts_r+0x78>
90015c60:	6923      	ldr	r3, [r4, #16]
90015c62:	b1db      	cbz	r3, 90015c9c <_puts_r+0x78>
90015c64:	3e01      	subs	r6, #1
90015c66:	68a3      	ldr	r3, [r4, #8]
90015c68:	f816 1f01 	ldrb.w	r1, [r6, #1]!
90015c6c:	3b01      	subs	r3, #1
90015c6e:	60a3      	str	r3, [r4, #8]
90015c70:	bb39      	cbnz	r1, 90015cc2 <_puts_r+0x9e>
90015c72:	2b00      	cmp	r3, #0
90015c74:	da38      	bge.n	90015ce8 <_puts_r+0xc4>
90015c76:	4622      	mov	r2, r4
90015c78:	210a      	movs	r1, #10
90015c7a:	4628      	mov	r0, r5
90015c7c:	f000 fa9a 	bl	900161b4 <__swbuf_r>
90015c80:	3001      	adds	r0, #1
90015c82:	d011      	beq.n	90015ca8 <_puts_r+0x84>
90015c84:	250a      	movs	r5, #10
90015c86:	e011      	b.n	90015cac <_puts_r+0x88>
90015c88:	4b1b      	ldr	r3, [pc, #108]	; (90015cf8 <_puts_r+0xd4>)
90015c8a:	429c      	cmp	r4, r3
90015c8c:	d101      	bne.n	90015c92 <_puts_r+0x6e>
90015c8e:	68ac      	ldr	r4, [r5, #8]
90015c90:	e7da      	b.n	90015c48 <_puts_r+0x24>
90015c92:	4b1a      	ldr	r3, [pc, #104]	; (90015cfc <_puts_r+0xd8>)
90015c94:	429c      	cmp	r4, r3
90015c96:	bf08      	it	eq
90015c98:	68ec      	ldreq	r4, [r5, #12]
90015c9a:	e7d5      	b.n	90015c48 <_puts_r+0x24>
90015c9c:	4621      	mov	r1, r4
90015c9e:	4628      	mov	r0, r5
90015ca0:	f000 faec 	bl	9001627c <__swsetup_r>
90015ca4:	2800      	cmp	r0, #0
90015ca6:	d0dd      	beq.n	90015c64 <_puts_r+0x40>
90015ca8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
90015cac:	6e63      	ldr	r3, [r4, #100]	; 0x64
90015cae:	07da      	lsls	r2, r3, #31
90015cb0:	d405      	bmi.n	90015cbe <_puts_r+0x9a>
90015cb2:	89a3      	ldrh	r3, [r4, #12]
90015cb4:	059b      	lsls	r3, r3, #22
90015cb6:	d402      	bmi.n	90015cbe <_puts_r+0x9a>
90015cb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
90015cba:	f7ff fec5 	bl	90015a48 <__retarget_lock_release_recursive>
90015cbe:	4628      	mov	r0, r5
90015cc0:	bd70      	pop	{r4, r5, r6, pc}
90015cc2:	2b00      	cmp	r3, #0
90015cc4:	da04      	bge.n	90015cd0 <_puts_r+0xac>
90015cc6:	69a2      	ldr	r2, [r4, #24]
90015cc8:	429a      	cmp	r2, r3
90015cca:	dc06      	bgt.n	90015cda <_puts_r+0xb6>
90015ccc:	290a      	cmp	r1, #10
90015cce:	d004      	beq.n	90015cda <_puts_r+0xb6>
90015cd0:	6823      	ldr	r3, [r4, #0]
90015cd2:	1c5a      	adds	r2, r3, #1
90015cd4:	6022      	str	r2, [r4, #0]
90015cd6:	7019      	strb	r1, [r3, #0]
90015cd8:	e7c5      	b.n	90015c66 <_puts_r+0x42>
90015cda:	4622      	mov	r2, r4
90015cdc:	4628      	mov	r0, r5
90015cde:	f000 fa69 	bl	900161b4 <__swbuf_r>
90015ce2:	3001      	adds	r0, #1
90015ce4:	d1bf      	bne.n	90015c66 <_puts_r+0x42>
90015ce6:	e7df      	b.n	90015ca8 <_puts_r+0x84>
90015ce8:	6823      	ldr	r3, [r4, #0]
90015cea:	250a      	movs	r5, #10
90015cec:	1c5a      	adds	r2, r3, #1
90015cee:	6022      	str	r2, [r4, #0]
90015cf0:	701d      	strb	r5, [r3, #0]
90015cf2:	e7db      	b.n	90015cac <_puts_r+0x88>
90015cf4:	90021274 	.word	0x90021274
90015cf8:	90021294 	.word	0x90021294
90015cfc:	90021254 	.word	0x90021254

90015d00 <puts>:
90015d00:	4b02      	ldr	r3, [pc, #8]	; (90015d0c <puts+0xc>)
90015d02:	4601      	mov	r1, r0
90015d04:	6818      	ldr	r0, [r3, #0]
90015d06:	f7ff bf8d 	b.w	90015c24 <_puts_r>
90015d0a:	bf00      	nop
90015d0c:	24000530 	.word	0x24000530

90015d10 <rand>:
90015d10:	4b16      	ldr	r3, [pc, #88]	; (90015d6c <rand+0x5c>)
90015d12:	b510      	push	{r4, lr}
90015d14:	681c      	ldr	r4, [r3, #0]
90015d16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90015d18:	b9b3      	cbnz	r3, 90015d48 <rand+0x38>
90015d1a:	2018      	movs	r0, #24
90015d1c:	f000 fc9c 	bl	90016658 <malloc>
90015d20:	63a0      	str	r0, [r4, #56]	; 0x38
90015d22:	b928      	cbnz	r0, 90015d30 <rand+0x20>
90015d24:	4602      	mov	r2, r0
90015d26:	4b12      	ldr	r3, [pc, #72]	; (90015d70 <rand+0x60>)
90015d28:	4812      	ldr	r0, [pc, #72]	; (90015d74 <rand+0x64>)
90015d2a:	214e      	movs	r1, #78	; 0x4e
90015d2c:	f000 fb14 	bl	90016358 <__assert_func>
90015d30:	4a11      	ldr	r2, [pc, #68]	; (90015d78 <rand+0x68>)
90015d32:	4b12      	ldr	r3, [pc, #72]	; (90015d7c <rand+0x6c>)
90015d34:	e9c0 2300 	strd	r2, r3, [r0]
90015d38:	4b11      	ldr	r3, [pc, #68]	; (90015d80 <rand+0x70>)
90015d3a:	6083      	str	r3, [r0, #8]
90015d3c:	230b      	movs	r3, #11
90015d3e:	8183      	strh	r3, [r0, #12]
90015d40:	2201      	movs	r2, #1
90015d42:	2300      	movs	r3, #0
90015d44:	e9c0 2304 	strd	r2, r3, [r0, #16]
90015d48:	6ba4      	ldr	r4, [r4, #56]	; 0x38
90015d4a:	4a0e      	ldr	r2, [pc, #56]	; (90015d84 <rand+0x74>)
90015d4c:	6920      	ldr	r0, [r4, #16]
90015d4e:	6963      	ldr	r3, [r4, #20]
90015d50:	490d      	ldr	r1, [pc, #52]	; (90015d88 <rand+0x78>)
90015d52:	4342      	muls	r2, r0
90015d54:	fb01 2203 	mla	r2, r1, r3, r2
90015d58:	fba0 0101 	umull	r0, r1, r0, r1
90015d5c:	1c43      	adds	r3, r0, #1
90015d5e:	eb42 0001 	adc.w	r0, r2, r1
90015d62:	e9c4 3004 	strd	r3, r0, [r4, #16]
90015d66:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
90015d6a:	bd10      	pop	{r4, pc}
90015d6c:	24000530 	.word	0x24000530
90015d70:	900212b8 	.word	0x900212b8
90015d74:	900212cf 	.word	0x900212cf
90015d78:	abcd330e 	.word	0xabcd330e
90015d7c:	e66d1234 	.word	0xe66d1234
90015d80:	0005deec 	.word	0x0005deec
90015d84:	5851f42d 	.word	0x5851f42d
90015d88:	4c957f2d 	.word	0x4c957f2d

90015d8c <cleanup_glue>:
90015d8c:	b538      	push	{r3, r4, r5, lr}
90015d8e:	460c      	mov	r4, r1
90015d90:	6809      	ldr	r1, [r1, #0]
90015d92:	4605      	mov	r5, r0
90015d94:	b109      	cbz	r1, 90015d9a <cleanup_glue+0xe>
90015d96:	f7ff fff9 	bl	90015d8c <cleanup_glue>
90015d9a:	4621      	mov	r1, r4
90015d9c:	4628      	mov	r0, r5
90015d9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
90015da2:	f000 bc6d 	b.w	90016680 <_free_r>
	...

90015da8 <_reclaim_reent>:
90015da8:	4b2c      	ldr	r3, [pc, #176]	; (90015e5c <_reclaim_reent+0xb4>)
90015daa:	681b      	ldr	r3, [r3, #0]
90015dac:	4283      	cmp	r3, r0
90015dae:	b570      	push	{r4, r5, r6, lr}
90015db0:	4604      	mov	r4, r0
90015db2:	d051      	beq.n	90015e58 <_reclaim_reent+0xb0>
90015db4:	6a43      	ldr	r3, [r0, #36]	; 0x24
90015db6:	b143      	cbz	r3, 90015dca <_reclaim_reent+0x22>
90015db8:	68db      	ldr	r3, [r3, #12]
90015dba:	2b00      	cmp	r3, #0
90015dbc:	d14a      	bne.n	90015e54 <_reclaim_reent+0xac>
90015dbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
90015dc0:	6819      	ldr	r1, [r3, #0]
90015dc2:	b111      	cbz	r1, 90015dca <_reclaim_reent+0x22>
90015dc4:	4620      	mov	r0, r4
90015dc6:	f000 fc5b 	bl	90016680 <_free_r>
90015dca:	6961      	ldr	r1, [r4, #20]
90015dcc:	b111      	cbz	r1, 90015dd4 <_reclaim_reent+0x2c>
90015dce:	4620      	mov	r0, r4
90015dd0:	f000 fc56 	bl	90016680 <_free_r>
90015dd4:	6a61      	ldr	r1, [r4, #36]	; 0x24
90015dd6:	b111      	cbz	r1, 90015dde <_reclaim_reent+0x36>
90015dd8:	4620      	mov	r0, r4
90015dda:	f000 fc51 	bl	90016680 <_free_r>
90015dde:	6ba1      	ldr	r1, [r4, #56]	; 0x38
90015de0:	b111      	cbz	r1, 90015de8 <_reclaim_reent+0x40>
90015de2:	4620      	mov	r0, r4
90015de4:	f000 fc4c 	bl	90016680 <_free_r>
90015de8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
90015dea:	b111      	cbz	r1, 90015df2 <_reclaim_reent+0x4a>
90015dec:	4620      	mov	r0, r4
90015dee:	f000 fc47 	bl	90016680 <_free_r>
90015df2:	6c21      	ldr	r1, [r4, #64]	; 0x40
90015df4:	b111      	cbz	r1, 90015dfc <_reclaim_reent+0x54>
90015df6:	4620      	mov	r0, r4
90015df8:	f000 fc42 	bl	90016680 <_free_r>
90015dfc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
90015dfe:	b111      	cbz	r1, 90015e06 <_reclaim_reent+0x5e>
90015e00:	4620      	mov	r0, r4
90015e02:	f000 fc3d 	bl	90016680 <_free_r>
90015e06:	6da1      	ldr	r1, [r4, #88]	; 0x58
90015e08:	b111      	cbz	r1, 90015e10 <_reclaim_reent+0x68>
90015e0a:	4620      	mov	r0, r4
90015e0c:	f000 fc38 	bl	90016680 <_free_r>
90015e10:	6b61      	ldr	r1, [r4, #52]	; 0x34
90015e12:	b111      	cbz	r1, 90015e1a <_reclaim_reent+0x72>
90015e14:	4620      	mov	r0, r4
90015e16:	f000 fc33 	bl	90016680 <_free_r>
90015e1a:	69a3      	ldr	r3, [r4, #24]
90015e1c:	b1e3      	cbz	r3, 90015e58 <_reclaim_reent+0xb0>
90015e1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
90015e20:	4620      	mov	r0, r4
90015e22:	4798      	blx	r3
90015e24:	6ca1      	ldr	r1, [r4, #72]	; 0x48
90015e26:	b1b9      	cbz	r1, 90015e58 <_reclaim_reent+0xb0>
90015e28:	4620      	mov	r0, r4
90015e2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90015e2e:	f7ff bfad 	b.w	90015d8c <cleanup_glue>
90015e32:	5949      	ldr	r1, [r1, r5]
90015e34:	b941      	cbnz	r1, 90015e48 <_reclaim_reent+0xa0>
90015e36:	3504      	adds	r5, #4
90015e38:	6a63      	ldr	r3, [r4, #36]	; 0x24
90015e3a:	2d80      	cmp	r5, #128	; 0x80
90015e3c:	68d9      	ldr	r1, [r3, #12]
90015e3e:	d1f8      	bne.n	90015e32 <_reclaim_reent+0x8a>
90015e40:	4620      	mov	r0, r4
90015e42:	f000 fc1d 	bl	90016680 <_free_r>
90015e46:	e7ba      	b.n	90015dbe <_reclaim_reent+0x16>
90015e48:	680e      	ldr	r6, [r1, #0]
90015e4a:	4620      	mov	r0, r4
90015e4c:	f000 fc18 	bl	90016680 <_free_r>
90015e50:	4631      	mov	r1, r6
90015e52:	e7ef      	b.n	90015e34 <_reclaim_reent+0x8c>
90015e54:	2500      	movs	r5, #0
90015e56:	e7ef      	b.n	90015e38 <_reclaim_reent+0x90>
90015e58:	bd70      	pop	{r4, r5, r6, pc}
90015e5a:	bf00      	nop
90015e5c:	24000530 	.word	0x24000530

90015e60 <_sbrk_r>:
90015e60:	b538      	push	{r3, r4, r5, lr}
90015e62:	4d06      	ldr	r5, [pc, #24]	; (90015e7c <_sbrk_r+0x1c>)
90015e64:	2300      	movs	r3, #0
90015e66:	4604      	mov	r4, r0
90015e68:	4608      	mov	r0, r1
90015e6a:	602b      	str	r3, [r5, #0]
90015e6c:	f7ec f886 	bl	90001f7c <_sbrk>
90015e70:	1c43      	adds	r3, r0, #1
90015e72:	d102      	bne.n	90015e7a <_sbrk_r+0x1a>
90015e74:	682b      	ldr	r3, [r5, #0]
90015e76:	b103      	cbz	r3, 90015e7a <_sbrk_r+0x1a>
90015e78:	6023      	str	r3, [r4, #0]
90015e7a:	bd38      	pop	{r3, r4, r5, pc}
90015e7c:	2401f510 	.word	0x2401f510

90015e80 <sniprintf>:
90015e80:	b40c      	push	{r2, r3}
90015e82:	b530      	push	{r4, r5, lr}
90015e84:	4b17      	ldr	r3, [pc, #92]	; (90015ee4 <sniprintf+0x64>)
90015e86:	1e0c      	subs	r4, r1, #0
90015e88:	681d      	ldr	r5, [r3, #0]
90015e8a:	b09d      	sub	sp, #116	; 0x74
90015e8c:	da08      	bge.n	90015ea0 <sniprintf+0x20>
90015e8e:	238b      	movs	r3, #139	; 0x8b
90015e90:	602b      	str	r3, [r5, #0]
90015e92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
90015e96:	b01d      	add	sp, #116	; 0x74
90015e98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
90015e9c:	b002      	add	sp, #8
90015e9e:	4770      	bx	lr
90015ea0:	f44f 7302 	mov.w	r3, #520	; 0x208
90015ea4:	f8ad 3014 	strh.w	r3, [sp, #20]
90015ea8:	bf14      	ite	ne
90015eaa:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
90015eae:	4623      	moveq	r3, r4
90015eb0:	9304      	str	r3, [sp, #16]
90015eb2:	9307      	str	r3, [sp, #28]
90015eb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
90015eb8:	9002      	str	r0, [sp, #8]
90015eba:	9006      	str	r0, [sp, #24]
90015ebc:	f8ad 3016 	strh.w	r3, [sp, #22]
90015ec0:	9a20      	ldr	r2, [sp, #128]	; 0x80
90015ec2:	ab21      	add	r3, sp, #132	; 0x84
90015ec4:	a902      	add	r1, sp, #8
90015ec6:	4628      	mov	r0, r5
90015ec8:	9301      	str	r3, [sp, #4]
90015eca:	f000 fc81 	bl	900167d0 <_svfiprintf_r>
90015ece:	1c43      	adds	r3, r0, #1
90015ed0:	bfbc      	itt	lt
90015ed2:	238b      	movlt	r3, #139	; 0x8b
90015ed4:	602b      	strlt	r3, [r5, #0]
90015ed6:	2c00      	cmp	r4, #0
90015ed8:	d0dd      	beq.n	90015e96 <sniprintf+0x16>
90015eda:	9b02      	ldr	r3, [sp, #8]
90015edc:	2200      	movs	r2, #0
90015ede:	701a      	strb	r2, [r3, #0]
90015ee0:	e7d9      	b.n	90015e96 <sniprintf+0x16>
90015ee2:	bf00      	nop
90015ee4:	24000530 	.word	0x24000530

90015ee8 <siprintf>:
90015ee8:	b40e      	push	{r1, r2, r3}
90015eea:	b500      	push	{lr}
90015eec:	b09c      	sub	sp, #112	; 0x70
90015eee:	ab1d      	add	r3, sp, #116	; 0x74
90015ef0:	9002      	str	r0, [sp, #8]
90015ef2:	9006      	str	r0, [sp, #24]
90015ef4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
90015ef8:	4809      	ldr	r0, [pc, #36]	; (90015f20 <siprintf+0x38>)
90015efa:	9107      	str	r1, [sp, #28]
90015efc:	9104      	str	r1, [sp, #16]
90015efe:	4909      	ldr	r1, [pc, #36]	; (90015f24 <siprintf+0x3c>)
90015f00:	f853 2b04 	ldr.w	r2, [r3], #4
90015f04:	9105      	str	r1, [sp, #20]
90015f06:	6800      	ldr	r0, [r0, #0]
90015f08:	9301      	str	r3, [sp, #4]
90015f0a:	a902      	add	r1, sp, #8
90015f0c:	f000 fc60 	bl	900167d0 <_svfiprintf_r>
90015f10:	9b02      	ldr	r3, [sp, #8]
90015f12:	2200      	movs	r2, #0
90015f14:	701a      	strb	r2, [r3, #0]
90015f16:	b01c      	add	sp, #112	; 0x70
90015f18:	f85d eb04 	ldr.w	lr, [sp], #4
90015f1c:	b003      	add	sp, #12
90015f1e:	4770      	bx	lr
90015f20:	24000530 	.word	0x24000530
90015f24:	ffff0208 	.word	0xffff0208

90015f28 <__sread>:
90015f28:	b510      	push	{r4, lr}
90015f2a:	460c      	mov	r4, r1
90015f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90015f30:	f001 f83c 	bl	90016fac <_read_r>
90015f34:	2800      	cmp	r0, #0
90015f36:	bfab      	itete	ge
90015f38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
90015f3a:	89a3      	ldrhlt	r3, [r4, #12]
90015f3c:	181b      	addge	r3, r3, r0
90015f3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
90015f42:	bfac      	ite	ge
90015f44:	6563      	strge	r3, [r4, #84]	; 0x54
90015f46:	81a3      	strhlt	r3, [r4, #12]
90015f48:	bd10      	pop	{r4, pc}

90015f4a <__swrite>:
90015f4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90015f4e:	461f      	mov	r7, r3
90015f50:	898b      	ldrh	r3, [r1, #12]
90015f52:	05db      	lsls	r3, r3, #23
90015f54:	4605      	mov	r5, r0
90015f56:	460c      	mov	r4, r1
90015f58:	4616      	mov	r6, r2
90015f5a:	d505      	bpl.n	90015f68 <__swrite+0x1e>
90015f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90015f60:	2302      	movs	r3, #2
90015f62:	2200      	movs	r2, #0
90015f64:	f000 fb00 	bl	90016568 <_lseek_r>
90015f68:	89a3      	ldrh	r3, [r4, #12]
90015f6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
90015f6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
90015f72:	81a3      	strh	r3, [r4, #12]
90015f74:	4632      	mov	r2, r6
90015f76:	463b      	mov	r3, r7
90015f78:	4628      	mov	r0, r5
90015f7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
90015f7e:	f000 b96b 	b.w	90016258 <_write_r>

90015f82 <__sseek>:
90015f82:	b510      	push	{r4, lr}
90015f84:	460c      	mov	r4, r1
90015f86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90015f8a:	f000 faed 	bl	90016568 <_lseek_r>
90015f8e:	1c43      	adds	r3, r0, #1
90015f90:	89a3      	ldrh	r3, [r4, #12]
90015f92:	bf15      	itete	ne
90015f94:	6560      	strne	r0, [r4, #84]	; 0x54
90015f96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
90015f9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
90015f9e:	81a3      	strheq	r3, [r4, #12]
90015fa0:	bf18      	it	ne
90015fa2:	81a3      	strhne	r3, [r4, #12]
90015fa4:	bd10      	pop	{r4, pc}

90015fa6 <__sclose>:
90015fa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90015faa:	f000 b9f3 	b.w	90016394 <_close_r>

90015fae <strcat>:
90015fae:	b510      	push	{r4, lr}
90015fb0:	4602      	mov	r2, r0
90015fb2:	7814      	ldrb	r4, [r2, #0]
90015fb4:	4613      	mov	r3, r2
90015fb6:	3201      	adds	r2, #1
90015fb8:	2c00      	cmp	r4, #0
90015fba:	d1fa      	bne.n	90015fb2 <strcat+0x4>
90015fbc:	3b01      	subs	r3, #1
90015fbe:	f811 2b01 	ldrb.w	r2, [r1], #1
90015fc2:	f803 2f01 	strb.w	r2, [r3, #1]!
90015fc6:	2a00      	cmp	r2, #0
90015fc8:	d1f9      	bne.n	90015fbe <strcat+0x10>
90015fca:	bd10      	pop	{r4, pc}

90015fcc <strchr>:
90015fcc:	b2c9      	uxtb	r1, r1
90015fce:	4603      	mov	r3, r0
90015fd0:	f810 2b01 	ldrb.w	r2, [r0], #1
90015fd4:	b11a      	cbz	r2, 90015fde <strchr+0x12>
90015fd6:	428a      	cmp	r2, r1
90015fd8:	d1f9      	bne.n	90015fce <strchr+0x2>
90015fda:	4618      	mov	r0, r3
90015fdc:	4770      	bx	lr
90015fde:	2900      	cmp	r1, #0
90015fe0:	bf18      	it	ne
90015fe2:	2300      	movne	r3, #0
90015fe4:	e7f9      	b.n	90015fda <strchr+0xe>

90015fe6 <strcpy>:
90015fe6:	4603      	mov	r3, r0
90015fe8:	f811 2b01 	ldrb.w	r2, [r1], #1
90015fec:	f803 2b01 	strb.w	r2, [r3], #1
90015ff0:	2a00      	cmp	r2, #0
90015ff2:	d1f9      	bne.n	90015fe8 <strcpy+0x2>
90015ff4:	4770      	bx	lr

90015ff6 <strncmp>:
90015ff6:	b510      	push	{r4, lr}
90015ff8:	b17a      	cbz	r2, 9001601a <strncmp+0x24>
90015ffa:	4603      	mov	r3, r0
90015ffc:	3901      	subs	r1, #1
90015ffe:	1884      	adds	r4, r0, r2
90016000:	f813 0b01 	ldrb.w	r0, [r3], #1
90016004:	f811 2f01 	ldrb.w	r2, [r1, #1]!
90016008:	4290      	cmp	r0, r2
9001600a:	d101      	bne.n	90016010 <strncmp+0x1a>
9001600c:	42a3      	cmp	r3, r4
9001600e:	d101      	bne.n	90016014 <strncmp+0x1e>
90016010:	1a80      	subs	r0, r0, r2
90016012:	bd10      	pop	{r4, pc}
90016014:	2800      	cmp	r0, #0
90016016:	d1f3      	bne.n	90016000 <strncmp+0xa>
90016018:	e7fa      	b.n	90016010 <strncmp+0x1a>
9001601a:	4610      	mov	r0, r2
9001601c:	e7f9      	b.n	90016012 <strncmp+0x1c>

9001601e <strncpy>:
9001601e:	b510      	push	{r4, lr}
90016020:	3901      	subs	r1, #1
90016022:	4603      	mov	r3, r0
90016024:	b132      	cbz	r2, 90016034 <strncpy+0x16>
90016026:	f811 4f01 	ldrb.w	r4, [r1, #1]!
9001602a:	f803 4b01 	strb.w	r4, [r3], #1
9001602e:	3a01      	subs	r2, #1
90016030:	2c00      	cmp	r4, #0
90016032:	d1f7      	bne.n	90016024 <strncpy+0x6>
90016034:	441a      	add	r2, r3
90016036:	2100      	movs	r1, #0
90016038:	4293      	cmp	r3, r2
9001603a:	d100      	bne.n	9001603e <strncpy+0x20>
9001603c:	bd10      	pop	{r4, pc}
9001603e:	f803 1b01 	strb.w	r1, [r3], #1
90016042:	e7f9      	b.n	90016038 <strncpy+0x1a>

90016044 <__strtok_r>:
90016044:	b5f0      	push	{r4, r5, r6, r7, lr}
90016046:	b908      	cbnz	r0, 9001604c <__strtok_r+0x8>
90016048:	6810      	ldr	r0, [r2, #0]
9001604a:	b188      	cbz	r0, 90016070 <__strtok_r+0x2c>
9001604c:	4604      	mov	r4, r0
9001604e:	4620      	mov	r0, r4
90016050:	f814 5b01 	ldrb.w	r5, [r4], #1
90016054:	460f      	mov	r7, r1
90016056:	f817 6b01 	ldrb.w	r6, [r7], #1
9001605a:	b91e      	cbnz	r6, 90016064 <__strtok_r+0x20>
9001605c:	b965      	cbnz	r5, 90016078 <__strtok_r+0x34>
9001605e:	6015      	str	r5, [r2, #0]
90016060:	4628      	mov	r0, r5
90016062:	e005      	b.n	90016070 <__strtok_r+0x2c>
90016064:	42b5      	cmp	r5, r6
90016066:	d1f6      	bne.n	90016056 <__strtok_r+0x12>
90016068:	2b00      	cmp	r3, #0
9001606a:	d1f0      	bne.n	9001604e <__strtok_r+0xa>
9001606c:	6014      	str	r4, [r2, #0]
9001606e:	7003      	strb	r3, [r0, #0]
90016070:	bdf0      	pop	{r4, r5, r6, r7, pc}
90016072:	461c      	mov	r4, r3
90016074:	e00c      	b.n	90016090 <__strtok_r+0x4c>
90016076:	b915      	cbnz	r5, 9001607e <__strtok_r+0x3a>
90016078:	f814 3b01 	ldrb.w	r3, [r4], #1
9001607c:	460e      	mov	r6, r1
9001607e:	f816 5b01 	ldrb.w	r5, [r6], #1
90016082:	42ab      	cmp	r3, r5
90016084:	d1f7      	bne.n	90016076 <__strtok_r+0x32>
90016086:	2b00      	cmp	r3, #0
90016088:	d0f3      	beq.n	90016072 <__strtok_r+0x2e>
9001608a:	2300      	movs	r3, #0
9001608c:	f804 3c01 	strb.w	r3, [r4, #-1]
90016090:	6014      	str	r4, [r2, #0]
90016092:	e7ed      	b.n	90016070 <__strtok_r+0x2c>

90016094 <strtok_r>:
90016094:	2301      	movs	r3, #1
90016096:	f7ff bfd5 	b.w	90016044 <__strtok_r>
	...

9001609c <_strtol_l.constprop.0>:
9001609c:	2b01      	cmp	r3, #1
9001609e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900160a2:	d001      	beq.n	900160a8 <_strtol_l.constprop.0+0xc>
900160a4:	2b24      	cmp	r3, #36	; 0x24
900160a6:	d906      	bls.n	900160b6 <_strtol_l.constprop.0+0x1a>
900160a8:	f000 f984 	bl	900163b4 <__errno>
900160ac:	2316      	movs	r3, #22
900160ae:	6003      	str	r3, [r0, #0]
900160b0:	2000      	movs	r0, #0
900160b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900160b6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 9001619c <_strtol_l.constprop.0+0x100>
900160ba:	460d      	mov	r5, r1
900160bc:	462e      	mov	r6, r5
900160be:	f815 4b01 	ldrb.w	r4, [r5], #1
900160c2:	f814 700c 	ldrb.w	r7, [r4, ip]
900160c6:	f017 0708 	ands.w	r7, r7, #8
900160ca:	d1f7      	bne.n	900160bc <_strtol_l.constprop.0+0x20>
900160cc:	2c2d      	cmp	r4, #45	; 0x2d
900160ce:	d132      	bne.n	90016136 <_strtol_l.constprop.0+0x9a>
900160d0:	782c      	ldrb	r4, [r5, #0]
900160d2:	2701      	movs	r7, #1
900160d4:	1cb5      	adds	r5, r6, #2
900160d6:	2b00      	cmp	r3, #0
900160d8:	d05b      	beq.n	90016192 <_strtol_l.constprop.0+0xf6>
900160da:	2b10      	cmp	r3, #16
900160dc:	d109      	bne.n	900160f2 <_strtol_l.constprop.0+0x56>
900160de:	2c30      	cmp	r4, #48	; 0x30
900160e0:	d107      	bne.n	900160f2 <_strtol_l.constprop.0+0x56>
900160e2:	782c      	ldrb	r4, [r5, #0]
900160e4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
900160e8:	2c58      	cmp	r4, #88	; 0x58
900160ea:	d14d      	bne.n	90016188 <_strtol_l.constprop.0+0xec>
900160ec:	786c      	ldrb	r4, [r5, #1]
900160ee:	2310      	movs	r3, #16
900160f0:	3502      	adds	r5, #2
900160f2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
900160f6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
900160fa:	f04f 0c00 	mov.w	ip, #0
900160fe:	fbb8 f9f3 	udiv	r9, r8, r3
90016102:	4666      	mov	r6, ip
90016104:	fb03 8a19 	mls	sl, r3, r9, r8
90016108:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
9001610c:	f1be 0f09 	cmp.w	lr, #9
90016110:	d816      	bhi.n	90016140 <_strtol_l.constprop.0+0xa4>
90016112:	4674      	mov	r4, lr
90016114:	42a3      	cmp	r3, r4
90016116:	dd24      	ble.n	90016162 <_strtol_l.constprop.0+0xc6>
90016118:	f1bc 0f00 	cmp.w	ip, #0
9001611c:	db1e      	blt.n	9001615c <_strtol_l.constprop.0+0xc0>
9001611e:	45b1      	cmp	r9, r6
90016120:	d31c      	bcc.n	9001615c <_strtol_l.constprop.0+0xc0>
90016122:	d101      	bne.n	90016128 <_strtol_l.constprop.0+0x8c>
90016124:	45a2      	cmp	sl, r4
90016126:	db19      	blt.n	9001615c <_strtol_l.constprop.0+0xc0>
90016128:	fb06 4603 	mla	r6, r6, r3, r4
9001612c:	f04f 0c01 	mov.w	ip, #1
90016130:	f815 4b01 	ldrb.w	r4, [r5], #1
90016134:	e7e8      	b.n	90016108 <_strtol_l.constprop.0+0x6c>
90016136:	2c2b      	cmp	r4, #43	; 0x2b
90016138:	bf04      	itt	eq
9001613a:	782c      	ldrbeq	r4, [r5, #0]
9001613c:	1cb5      	addeq	r5, r6, #2
9001613e:	e7ca      	b.n	900160d6 <_strtol_l.constprop.0+0x3a>
90016140:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
90016144:	f1be 0f19 	cmp.w	lr, #25
90016148:	d801      	bhi.n	9001614e <_strtol_l.constprop.0+0xb2>
9001614a:	3c37      	subs	r4, #55	; 0x37
9001614c:	e7e2      	b.n	90016114 <_strtol_l.constprop.0+0x78>
9001614e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
90016152:	f1be 0f19 	cmp.w	lr, #25
90016156:	d804      	bhi.n	90016162 <_strtol_l.constprop.0+0xc6>
90016158:	3c57      	subs	r4, #87	; 0x57
9001615a:	e7db      	b.n	90016114 <_strtol_l.constprop.0+0x78>
9001615c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
90016160:	e7e6      	b.n	90016130 <_strtol_l.constprop.0+0x94>
90016162:	f1bc 0f00 	cmp.w	ip, #0
90016166:	da05      	bge.n	90016174 <_strtol_l.constprop.0+0xd8>
90016168:	2322      	movs	r3, #34	; 0x22
9001616a:	6003      	str	r3, [r0, #0]
9001616c:	4646      	mov	r6, r8
9001616e:	b942      	cbnz	r2, 90016182 <_strtol_l.constprop.0+0xe6>
90016170:	4630      	mov	r0, r6
90016172:	e79e      	b.n	900160b2 <_strtol_l.constprop.0+0x16>
90016174:	b107      	cbz	r7, 90016178 <_strtol_l.constprop.0+0xdc>
90016176:	4276      	negs	r6, r6
90016178:	2a00      	cmp	r2, #0
9001617a:	d0f9      	beq.n	90016170 <_strtol_l.constprop.0+0xd4>
9001617c:	f1bc 0f00 	cmp.w	ip, #0
90016180:	d000      	beq.n	90016184 <_strtol_l.constprop.0+0xe8>
90016182:	1e69      	subs	r1, r5, #1
90016184:	6011      	str	r1, [r2, #0]
90016186:	e7f3      	b.n	90016170 <_strtol_l.constprop.0+0xd4>
90016188:	2430      	movs	r4, #48	; 0x30
9001618a:	2b00      	cmp	r3, #0
9001618c:	d1b1      	bne.n	900160f2 <_strtol_l.constprop.0+0x56>
9001618e:	2308      	movs	r3, #8
90016190:	e7af      	b.n	900160f2 <_strtol_l.constprop.0+0x56>
90016192:	2c30      	cmp	r4, #48	; 0x30
90016194:	d0a5      	beq.n	900160e2 <_strtol_l.constprop.0+0x46>
90016196:	230a      	movs	r3, #10
90016198:	e7ab      	b.n	900160f2 <_strtol_l.constprop.0+0x56>
9001619a:	bf00      	nop
9001619c:	90021151 	.word	0x90021151

900161a0 <strtol>:
900161a0:	4613      	mov	r3, r2
900161a2:	460a      	mov	r2, r1
900161a4:	4601      	mov	r1, r0
900161a6:	4802      	ldr	r0, [pc, #8]	; (900161b0 <strtol+0x10>)
900161a8:	6800      	ldr	r0, [r0, #0]
900161aa:	f7ff bf77 	b.w	9001609c <_strtol_l.constprop.0>
900161ae:	bf00      	nop
900161b0:	24000530 	.word	0x24000530

900161b4 <__swbuf_r>:
900161b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900161b6:	460e      	mov	r6, r1
900161b8:	4614      	mov	r4, r2
900161ba:	4605      	mov	r5, r0
900161bc:	b118      	cbz	r0, 900161c6 <__swbuf_r+0x12>
900161be:	6983      	ldr	r3, [r0, #24]
900161c0:	b90b      	cbnz	r3, 900161c6 <__swbuf_r+0x12>
900161c2:	f7ff fb7d 	bl	900158c0 <__sinit>
900161c6:	4b21      	ldr	r3, [pc, #132]	; (9001624c <__swbuf_r+0x98>)
900161c8:	429c      	cmp	r4, r3
900161ca:	d12b      	bne.n	90016224 <__swbuf_r+0x70>
900161cc:	686c      	ldr	r4, [r5, #4]
900161ce:	69a3      	ldr	r3, [r4, #24]
900161d0:	60a3      	str	r3, [r4, #8]
900161d2:	89a3      	ldrh	r3, [r4, #12]
900161d4:	071a      	lsls	r2, r3, #28
900161d6:	d52f      	bpl.n	90016238 <__swbuf_r+0x84>
900161d8:	6923      	ldr	r3, [r4, #16]
900161da:	b36b      	cbz	r3, 90016238 <__swbuf_r+0x84>
900161dc:	6923      	ldr	r3, [r4, #16]
900161de:	6820      	ldr	r0, [r4, #0]
900161e0:	1ac0      	subs	r0, r0, r3
900161e2:	6963      	ldr	r3, [r4, #20]
900161e4:	b2f6      	uxtb	r6, r6
900161e6:	4283      	cmp	r3, r0
900161e8:	4637      	mov	r7, r6
900161ea:	dc04      	bgt.n	900161f6 <__swbuf_r+0x42>
900161ec:	4621      	mov	r1, r4
900161ee:	4628      	mov	r0, r5
900161f0:	f000 f96c 	bl	900164cc <_fflush_r>
900161f4:	bb30      	cbnz	r0, 90016244 <__swbuf_r+0x90>
900161f6:	68a3      	ldr	r3, [r4, #8]
900161f8:	3b01      	subs	r3, #1
900161fa:	60a3      	str	r3, [r4, #8]
900161fc:	6823      	ldr	r3, [r4, #0]
900161fe:	1c5a      	adds	r2, r3, #1
90016200:	6022      	str	r2, [r4, #0]
90016202:	701e      	strb	r6, [r3, #0]
90016204:	6963      	ldr	r3, [r4, #20]
90016206:	3001      	adds	r0, #1
90016208:	4283      	cmp	r3, r0
9001620a:	d004      	beq.n	90016216 <__swbuf_r+0x62>
9001620c:	89a3      	ldrh	r3, [r4, #12]
9001620e:	07db      	lsls	r3, r3, #31
90016210:	d506      	bpl.n	90016220 <__swbuf_r+0x6c>
90016212:	2e0a      	cmp	r6, #10
90016214:	d104      	bne.n	90016220 <__swbuf_r+0x6c>
90016216:	4621      	mov	r1, r4
90016218:	4628      	mov	r0, r5
9001621a:	f000 f957 	bl	900164cc <_fflush_r>
9001621e:	b988      	cbnz	r0, 90016244 <__swbuf_r+0x90>
90016220:	4638      	mov	r0, r7
90016222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90016224:	4b0a      	ldr	r3, [pc, #40]	; (90016250 <__swbuf_r+0x9c>)
90016226:	429c      	cmp	r4, r3
90016228:	d101      	bne.n	9001622e <__swbuf_r+0x7a>
9001622a:	68ac      	ldr	r4, [r5, #8]
9001622c:	e7cf      	b.n	900161ce <__swbuf_r+0x1a>
9001622e:	4b09      	ldr	r3, [pc, #36]	; (90016254 <__swbuf_r+0xa0>)
90016230:	429c      	cmp	r4, r3
90016232:	bf08      	it	eq
90016234:	68ec      	ldreq	r4, [r5, #12]
90016236:	e7ca      	b.n	900161ce <__swbuf_r+0x1a>
90016238:	4621      	mov	r1, r4
9001623a:	4628      	mov	r0, r5
9001623c:	f000 f81e 	bl	9001627c <__swsetup_r>
90016240:	2800      	cmp	r0, #0
90016242:	d0cb      	beq.n	900161dc <__swbuf_r+0x28>
90016244:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
90016248:	e7ea      	b.n	90016220 <__swbuf_r+0x6c>
9001624a:	bf00      	nop
9001624c:	90021274 	.word	0x90021274
90016250:	90021294 	.word	0x90021294
90016254:	90021254 	.word	0x90021254

90016258 <_write_r>:
90016258:	b538      	push	{r3, r4, r5, lr}
9001625a:	4d07      	ldr	r5, [pc, #28]	; (90016278 <_write_r+0x20>)
9001625c:	4604      	mov	r4, r0
9001625e:	4608      	mov	r0, r1
90016260:	4611      	mov	r1, r2
90016262:	2200      	movs	r2, #0
90016264:	602a      	str	r2, [r5, #0]
90016266:	461a      	mov	r2, r3
90016268:	f7eb fe37 	bl	90001eda <_write>
9001626c:	1c43      	adds	r3, r0, #1
9001626e:	d102      	bne.n	90016276 <_write_r+0x1e>
90016270:	682b      	ldr	r3, [r5, #0]
90016272:	b103      	cbz	r3, 90016276 <_write_r+0x1e>
90016274:	6023      	str	r3, [r4, #0]
90016276:	bd38      	pop	{r3, r4, r5, pc}
90016278:	2401f510 	.word	0x2401f510

9001627c <__swsetup_r>:
9001627c:	4b32      	ldr	r3, [pc, #200]	; (90016348 <__swsetup_r+0xcc>)
9001627e:	b570      	push	{r4, r5, r6, lr}
90016280:	681d      	ldr	r5, [r3, #0]
90016282:	4606      	mov	r6, r0
90016284:	460c      	mov	r4, r1
90016286:	b125      	cbz	r5, 90016292 <__swsetup_r+0x16>
90016288:	69ab      	ldr	r3, [r5, #24]
9001628a:	b913      	cbnz	r3, 90016292 <__swsetup_r+0x16>
9001628c:	4628      	mov	r0, r5
9001628e:	f7ff fb17 	bl	900158c0 <__sinit>
90016292:	4b2e      	ldr	r3, [pc, #184]	; (9001634c <__swsetup_r+0xd0>)
90016294:	429c      	cmp	r4, r3
90016296:	d10f      	bne.n	900162b8 <__swsetup_r+0x3c>
90016298:	686c      	ldr	r4, [r5, #4]
9001629a:	89a3      	ldrh	r3, [r4, #12]
9001629c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
900162a0:	0719      	lsls	r1, r3, #28
900162a2:	d42c      	bmi.n	900162fe <__swsetup_r+0x82>
900162a4:	06dd      	lsls	r5, r3, #27
900162a6:	d411      	bmi.n	900162cc <__swsetup_r+0x50>
900162a8:	2309      	movs	r3, #9
900162aa:	6033      	str	r3, [r6, #0]
900162ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
900162b0:	81a3      	strh	r3, [r4, #12]
900162b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
900162b6:	e03e      	b.n	90016336 <__swsetup_r+0xba>
900162b8:	4b25      	ldr	r3, [pc, #148]	; (90016350 <__swsetup_r+0xd4>)
900162ba:	429c      	cmp	r4, r3
900162bc:	d101      	bne.n	900162c2 <__swsetup_r+0x46>
900162be:	68ac      	ldr	r4, [r5, #8]
900162c0:	e7eb      	b.n	9001629a <__swsetup_r+0x1e>
900162c2:	4b24      	ldr	r3, [pc, #144]	; (90016354 <__swsetup_r+0xd8>)
900162c4:	429c      	cmp	r4, r3
900162c6:	bf08      	it	eq
900162c8:	68ec      	ldreq	r4, [r5, #12]
900162ca:	e7e6      	b.n	9001629a <__swsetup_r+0x1e>
900162cc:	0758      	lsls	r0, r3, #29
900162ce:	d512      	bpl.n	900162f6 <__swsetup_r+0x7a>
900162d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
900162d2:	b141      	cbz	r1, 900162e6 <__swsetup_r+0x6a>
900162d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
900162d8:	4299      	cmp	r1, r3
900162da:	d002      	beq.n	900162e2 <__swsetup_r+0x66>
900162dc:	4630      	mov	r0, r6
900162de:	f000 f9cf 	bl	90016680 <_free_r>
900162e2:	2300      	movs	r3, #0
900162e4:	6363      	str	r3, [r4, #52]	; 0x34
900162e6:	89a3      	ldrh	r3, [r4, #12]
900162e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
900162ec:	81a3      	strh	r3, [r4, #12]
900162ee:	2300      	movs	r3, #0
900162f0:	6063      	str	r3, [r4, #4]
900162f2:	6923      	ldr	r3, [r4, #16]
900162f4:	6023      	str	r3, [r4, #0]
900162f6:	89a3      	ldrh	r3, [r4, #12]
900162f8:	f043 0308 	orr.w	r3, r3, #8
900162fc:	81a3      	strh	r3, [r4, #12]
900162fe:	6923      	ldr	r3, [r4, #16]
90016300:	b94b      	cbnz	r3, 90016316 <__swsetup_r+0x9a>
90016302:	89a3      	ldrh	r3, [r4, #12]
90016304:	f403 7320 	and.w	r3, r3, #640	; 0x280
90016308:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
9001630c:	d003      	beq.n	90016316 <__swsetup_r+0x9a>
9001630e:	4621      	mov	r1, r4
90016310:	4630      	mov	r0, r6
90016312:	f000 f961 	bl	900165d8 <__smakebuf_r>
90016316:	89a0      	ldrh	r0, [r4, #12]
90016318:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
9001631c:	f010 0301 	ands.w	r3, r0, #1
90016320:	d00a      	beq.n	90016338 <__swsetup_r+0xbc>
90016322:	2300      	movs	r3, #0
90016324:	60a3      	str	r3, [r4, #8]
90016326:	6963      	ldr	r3, [r4, #20]
90016328:	425b      	negs	r3, r3
9001632a:	61a3      	str	r3, [r4, #24]
9001632c:	6923      	ldr	r3, [r4, #16]
9001632e:	b943      	cbnz	r3, 90016342 <__swsetup_r+0xc6>
90016330:	f010 0080 	ands.w	r0, r0, #128	; 0x80
90016334:	d1ba      	bne.n	900162ac <__swsetup_r+0x30>
90016336:	bd70      	pop	{r4, r5, r6, pc}
90016338:	0781      	lsls	r1, r0, #30
9001633a:	bf58      	it	pl
9001633c:	6963      	ldrpl	r3, [r4, #20]
9001633e:	60a3      	str	r3, [r4, #8]
90016340:	e7f4      	b.n	9001632c <__swsetup_r+0xb0>
90016342:	2000      	movs	r0, #0
90016344:	e7f7      	b.n	90016336 <__swsetup_r+0xba>
90016346:	bf00      	nop
90016348:	24000530 	.word	0x24000530
9001634c:	90021274 	.word	0x90021274
90016350:	90021294 	.word	0x90021294
90016354:	90021254 	.word	0x90021254

90016358 <__assert_func>:
90016358:	b51f      	push	{r0, r1, r2, r3, r4, lr}
9001635a:	4614      	mov	r4, r2
9001635c:	461a      	mov	r2, r3
9001635e:	4b09      	ldr	r3, [pc, #36]	; (90016384 <__assert_func+0x2c>)
90016360:	681b      	ldr	r3, [r3, #0]
90016362:	4605      	mov	r5, r0
90016364:	68d8      	ldr	r0, [r3, #12]
90016366:	b14c      	cbz	r4, 9001637c <__assert_func+0x24>
90016368:	4b07      	ldr	r3, [pc, #28]	; (90016388 <__assert_func+0x30>)
9001636a:	9100      	str	r1, [sp, #0]
9001636c:	e9cd 3401 	strd	r3, r4, [sp, #4]
90016370:	4906      	ldr	r1, [pc, #24]	; (9001638c <__assert_func+0x34>)
90016372:	462b      	mov	r3, r5
90016374:	f000 f8e6 	bl	90016544 <fiprintf>
90016378:	f000 fe2a 	bl	90016fd0 <abort>
9001637c:	4b04      	ldr	r3, [pc, #16]	; (90016390 <__assert_func+0x38>)
9001637e:	461c      	mov	r4, r3
90016380:	e7f3      	b.n	9001636a <__assert_func+0x12>
90016382:	bf00      	nop
90016384:	24000530 	.word	0x24000530
90016388:	9002132a 	.word	0x9002132a
9001638c:	90021337 	.word	0x90021337
90016390:	90021365 	.word	0x90021365

90016394 <_close_r>:
90016394:	b538      	push	{r3, r4, r5, lr}
90016396:	4d06      	ldr	r5, [pc, #24]	; (900163b0 <_close_r+0x1c>)
90016398:	2300      	movs	r3, #0
9001639a:	4604      	mov	r4, r0
9001639c:	4608      	mov	r0, r1
9001639e:	602b      	str	r3, [r5, #0]
900163a0:	f7eb fdb7 	bl	90001f12 <_close>
900163a4:	1c43      	adds	r3, r0, #1
900163a6:	d102      	bne.n	900163ae <_close_r+0x1a>
900163a8:	682b      	ldr	r3, [r5, #0]
900163aa:	b103      	cbz	r3, 900163ae <_close_r+0x1a>
900163ac:	6023      	str	r3, [r4, #0]
900163ae:	bd38      	pop	{r3, r4, r5, pc}
900163b0:	2401f510 	.word	0x2401f510

900163b4 <__errno>:
900163b4:	4b01      	ldr	r3, [pc, #4]	; (900163bc <__errno+0x8>)
900163b6:	6818      	ldr	r0, [r3, #0]
900163b8:	4770      	bx	lr
900163ba:	bf00      	nop
900163bc:	24000530 	.word	0x24000530

900163c0 <__sflush_r>:
900163c0:	898a      	ldrh	r2, [r1, #12]
900163c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900163c6:	4605      	mov	r5, r0
900163c8:	0710      	lsls	r0, r2, #28
900163ca:	460c      	mov	r4, r1
900163cc:	d458      	bmi.n	90016480 <__sflush_r+0xc0>
900163ce:	684b      	ldr	r3, [r1, #4]
900163d0:	2b00      	cmp	r3, #0
900163d2:	dc05      	bgt.n	900163e0 <__sflush_r+0x20>
900163d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
900163d6:	2b00      	cmp	r3, #0
900163d8:	dc02      	bgt.n	900163e0 <__sflush_r+0x20>
900163da:	2000      	movs	r0, #0
900163dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
900163e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
900163e2:	2e00      	cmp	r6, #0
900163e4:	d0f9      	beq.n	900163da <__sflush_r+0x1a>
900163e6:	2300      	movs	r3, #0
900163e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
900163ec:	682f      	ldr	r7, [r5, #0]
900163ee:	602b      	str	r3, [r5, #0]
900163f0:	d032      	beq.n	90016458 <__sflush_r+0x98>
900163f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
900163f4:	89a3      	ldrh	r3, [r4, #12]
900163f6:	075a      	lsls	r2, r3, #29
900163f8:	d505      	bpl.n	90016406 <__sflush_r+0x46>
900163fa:	6863      	ldr	r3, [r4, #4]
900163fc:	1ac0      	subs	r0, r0, r3
900163fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
90016400:	b10b      	cbz	r3, 90016406 <__sflush_r+0x46>
90016402:	6c23      	ldr	r3, [r4, #64]	; 0x40
90016404:	1ac0      	subs	r0, r0, r3
90016406:	2300      	movs	r3, #0
90016408:	4602      	mov	r2, r0
9001640a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
9001640c:	6a21      	ldr	r1, [r4, #32]
9001640e:	4628      	mov	r0, r5
90016410:	47b0      	blx	r6
90016412:	1c43      	adds	r3, r0, #1
90016414:	89a3      	ldrh	r3, [r4, #12]
90016416:	d106      	bne.n	90016426 <__sflush_r+0x66>
90016418:	6829      	ldr	r1, [r5, #0]
9001641a:	291d      	cmp	r1, #29
9001641c:	d82c      	bhi.n	90016478 <__sflush_r+0xb8>
9001641e:	4a2a      	ldr	r2, [pc, #168]	; (900164c8 <__sflush_r+0x108>)
90016420:	40ca      	lsrs	r2, r1
90016422:	07d6      	lsls	r6, r2, #31
90016424:	d528      	bpl.n	90016478 <__sflush_r+0xb8>
90016426:	2200      	movs	r2, #0
90016428:	6062      	str	r2, [r4, #4]
9001642a:	04d9      	lsls	r1, r3, #19
9001642c:	6922      	ldr	r2, [r4, #16]
9001642e:	6022      	str	r2, [r4, #0]
90016430:	d504      	bpl.n	9001643c <__sflush_r+0x7c>
90016432:	1c42      	adds	r2, r0, #1
90016434:	d101      	bne.n	9001643a <__sflush_r+0x7a>
90016436:	682b      	ldr	r3, [r5, #0]
90016438:	b903      	cbnz	r3, 9001643c <__sflush_r+0x7c>
9001643a:	6560      	str	r0, [r4, #84]	; 0x54
9001643c:	6b61      	ldr	r1, [r4, #52]	; 0x34
9001643e:	602f      	str	r7, [r5, #0]
90016440:	2900      	cmp	r1, #0
90016442:	d0ca      	beq.n	900163da <__sflush_r+0x1a>
90016444:	f104 0344 	add.w	r3, r4, #68	; 0x44
90016448:	4299      	cmp	r1, r3
9001644a:	d002      	beq.n	90016452 <__sflush_r+0x92>
9001644c:	4628      	mov	r0, r5
9001644e:	f000 f917 	bl	90016680 <_free_r>
90016452:	2000      	movs	r0, #0
90016454:	6360      	str	r0, [r4, #52]	; 0x34
90016456:	e7c1      	b.n	900163dc <__sflush_r+0x1c>
90016458:	6a21      	ldr	r1, [r4, #32]
9001645a:	2301      	movs	r3, #1
9001645c:	4628      	mov	r0, r5
9001645e:	47b0      	blx	r6
90016460:	1c41      	adds	r1, r0, #1
90016462:	d1c7      	bne.n	900163f4 <__sflush_r+0x34>
90016464:	682b      	ldr	r3, [r5, #0]
90016466:	2b00      	cmp	r3, #0
90016468:	d0c4      	beq.n	900163f4 <__sflush_r+0x34>
9001646a:	2b1d      	cmp	r3, #29
9001646c:	d001      	beq.n	90016472 <__sflush_r+0xb2>
9001646e:	2b16      	cmp	r3, #22
90016470:	d101      	bne.n	90016476 <__sflush_r+0xb6>
90016472:	602f      	str	r7, [r5, #0]
90016474:	e7b1      	b.n	900163da <__sflush_r+0x1a>
90016476:	89a3      	ldrh	r3, [r4, #12]
90016478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
9001647c:	81a3      	strh	r3, [r4, #12]
9001647e:	e7ad      	b.n	900163dc <__sflush_r+0x1c>
90016480:	690f      	ldr	r7, [r1, #16]
90016482:	2f00      	cmp	r7, #0
90016484:	d0a9      	beq.n	900163da <__sflush_r+0x1a>
90016486:	0793      	lsls	r3, r2, #30
90016488:	680e      	ldr	r6, [r1, #0]
9001648a:	bf08      	it	eq
9001648c:	694b      	ldreq	r3, [r1, #20]
9001648e:	600f      	str	r7, [r1, #0]
90016490:	bf18      	it	ne
90016492:	2300      	movne	r3, #0
90016494:	eba6 0807 	sub.w	r8, r6, r7
90016498:	608b      	str	r3, [r1, #8]
9001649a:	f1b8 0f00 	cmp.w	r8, #0
9001649e:	dd9c      	ble.n	900163da <__sflush_r+0x1a>
900164a0:	6a21      	ldr	r1, [r4, #32]
900164a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
900164a4:	4643      	mov	r3, r8
900164a6:	463a      	mov	r2, r7
900164a8:	4628      	mov	r0, r5
900164aa:	47b0      	blx	r6
900164ac:	2800      	cmp	r0, #0
900164ae:	dc06      	bgt.n	900164be <__sflush_r+0xfe>
900164b0:	89a3      	ldrh	r3, [r4, #12]
900164b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
900164b6:	81a3      	strh	r3, [r4, #12]
900164b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
900164bc:	e78e      	b.n	900163dc <__sflush_r+0x1c>
900164be:	4407      	add	r7, r0
900164c0:	eba8 0800 	sub.w	r8, r8, r0
900164c4:	e7e9      	b.n	9001649a <__sflush_r+0xda>
900164c6:	bf00      	nop
900164c8:	20400001 	.word	0x20400001

900164cc <_fflush_r>:
900164cc:	b538      	push	{r3, r4, r5, lr}
900164ce:	690b      	ldr	r3, [r1, #16]
900164d0:	4605      	mov	r5, r0
900164d2:	460c      	mov	r4, r1
900164d4:	b913      	cbnz	r3, 900164dc <_fflush_r+0x10>
900164d6:	2500      	movs	r5, #0
900164d8:	4628      	mov	r0, r5
900164da:	bd38      	pop	{r3, r4, r5, pc}
900164dc:	b118      	cbz	r0, 900164e6 <_fflush_r+0x1a>
900164de:	6983      	ldr	r3, [r0, #24]
900164e0:	b90b      	cbnz	r3, 900164e6 <_fflush_r+0x1a>
900164e2:	f7ff f9ed 	bl	900158c0 <__sinit>
900164e6:	4b14      	ldr	r3, [pc, #80]	; (90016538 <_fflush_r+0x6c>)
900164e8:	429c      	cmp	r4, r3
900164ea:	d11b      	bne.n	90016524 <_fflush_r+0x58>
900164ec:	686c      	ldr	r4, [r5, #4]
900164ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
900164f2:	2b00      	cmp	r3, #0
900164f4:	d0ef      	beq.n	900164d6 <_fflush_r+0xa>
900164f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
900164f8:	07d0      	lsls	r0, r2, #31
900164fa:	d404      	bmi.n	90016506 <_fflush_r+0x3a>
900164fc:	0599      	lsls	r1, r3, #22
900164fe:	d402      	bmi.n	90016506 <_fflush_r+0x3a>
90016500:	6da0      	ldr	r0, [r4, #88]	; 0x58
90016502:	f7ff faa0 	bl	90015a46 <__retarget_lock_acquire_recursive>
90016506:	4628      	mov	r0, r5
90016508:	4621      	mov	r1, r4
9001650a:	f7ff ff59 	bl	900163c0 <__sflush_r>
9001650e:	6e63      	ldr	r3, [r4, #100]	; 0x64
90016510:	07da      	lsls	r2, r3, #31
90016512:	4605      	mov	r5, r0
90016514:	d4e0      	bmi.n	900164d8 <_fflush_r+0xc>
90016516:	89a3      	ldrh	r3, [r4, #12]
90016518:	059b      	lsls	r3, r3, #22
9001651a:	d4dd      	bmi.n	900164d8 <_fflush_r+0xc>
9001651c:	6da0      	ldr	r0, [r4, #88]	; 0x58
9001651e:	f7ff fa93 	bl	90015a48 <__retarget_lock_release_recursive>
90016522:	e7d9      	b.n	900164d8 <_fflush_r+0xc>
90016524:	4b05      	ldr	r3, [pc, #20]	; (9001653c <_fflush_r+0x70>)
90016526:	429c      	cmp	r4, r3
90016528:	d101      	bne.n	9001652e <_fflush_r+0x62>
9001652a:	68ac      	ldr	r4, [r5, #8]
9001652c:	e7df      	b.n	900164ee <_fflush_r+0x22>
9001652e:	4b04      	ldr	r3, [pc, #16]	; (90016540 <_fflush_r+0x74>)
90016530:	429c      	cmp	r4, r3
90016532:	bf08      	it	eq
90016534:	68ec      	ldreq	r4, [r5, #12]
90016536:	e7da      	b.n	900164ee <_fflush_r+0x22>
90016538:	90021274 	.word	0x90021274
9001653c:	90021294 	.word	0x90021294
90016540:	90021254 	.word	0x90021254

90016544 <fiprintf>:
90016544:	b40e      	push	{r1, r2, r3}
90016546:	b503      	push	{r0, r1, lr}
90016548:	4601      	mov	r1, r0
9001654a:	ab03      	add	r3, sp, #12
9001654c:	4805      	ldr	r0, [pc, #20]	; (90016564 <fiprintf+0x20>)
9001654e:	f853 2b04 	ldr.w	r2, [r3], #4
90016552:	6800      	ldr	r0, [r0, #0]
90016554:	9301      	str	r3, [sp, #4]
90016556:	f000 fa65 	bl	90016a24 <_vfiprintf_r>
9001655a:	b002      	add	sp, #8
9001655c:	f85d eb04 	ldr.w	lr, [sp], #4
90016560:	b003      	add	sp, #12
90016562:	4770      	bx	lr
90016564:	24000530 	.word	0x24000530

90016568 <_lseek_r>:
90016568:	b538      	push	{r3, r4, r5, lr}
9001656a:	4d07      	ldr	r5, [pc, #28]	; (90016588 <_lseek_r+0x20>)
9001656c:	4604      	mov	r4, r0
9001656e:	4608      	mov	r0, r1
90016570:	4611      	mov	r1, r2
90016572:	2200      	movs	r2, #0
90016574:	602a      	str	r2, [r5, #0]
90016576:	461a      	mov	r2, r3
90016578:	f7eb fcf2 	bl	90001f60 <_lseek>
9001657c:	1c43      	adds	r3, r0, #1
9001657e:	d102      	bne.n	90016586 <_lseek_r+0x1e>
90016580:	682b      	ldr	r3, [r5, #0]
90016582:	b103      	cbz	r3, 90016586 <_lseek_r+0x1e>
90016584:	6023      	str	r3, [r4, #0]
90016586:	bd38      	pop	{r3, r4, r5, pc}
90016588:	2401f510 	.word	0x2401f510

9001658c <__swhatbuf_r>:
9001658c:	b570      	push	{r4, r5, r6, lr}
9001658e:	460e      	mov	r6, r1
90016590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90016594:	2900      	cmp	r1, #0
90016596:	b096      	sub	sp, #88	; 0x58
90016598:	4614      	mov	r4, r2
9001659a:	461d      	mov	r5, r3
9001659c:	da08      	bge.n	900165b0 <__swhatbuf_r+0x24>
9001659e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
900165a2:	2200      	movs	r2, #0
900165a4:	602a      	str	r2, [r5, #0]
900165a6:	061a      	lsls	r2, r3, #24
900165a8:	d410      	bmi.n	900165cc <__swhatbuf_r+0x40>
900165aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
900165ae:	e00e      	b.n	900165ce <__swhatbuf_r+0x42>
900165b0:	466a      	mov	r2, sp
900165b2:	f000 fd15 	bl	90016fe0 <_fstat_r>
900165b6:	2800      	cmp	r0, #0
900165b8:	dbf1      	blt.n	9001659e <__swhatbuf_r+0x12>
900165ba:	9a01      	ldr	r2, [sp, #4]
900165bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
900165c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
900165c4:	425a      	negs	r2, r3
900165c6:	415a      	adcs	r2, r3
900165c8:	602a      	str	r2, [r5, #0]
900165ca:	e7ee      	b.n	900165aa <__swhatbuf_r+0x1e>
900165cc:	2340      	movs	r3, #64	; 0x40
900165ce:	2000      	movs	r0, #0
900165d0:	6023      	str	r3, [r4, #0]
900165d2:	b016      	add	sp, #88	; 0x58
900165d4:	bd70      	pop	{r4, r5, r6, pc}
	...

900165d8 <__smakebuf_r>:
900165d8:	898b      	ldrh	r3, [r1, #12]
900165da:	b573      	push	{r0, r1, r4, r5, r6, lr}
900165dc:	079d      	lsls	r5, r3, #30
900165de:	4606      	mov	r6, r0
900165e0:	460c      	mov	r4, r1
900165e2:	d507      	bpl.n	900165f4 <__smakebuf_r+0x1c>
900165e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
900165e8:	6023      	str	r3, [r4, #0]
900165ea:	6123      	str	r3, [r4, #16]
900165ec:	2301      	movs	r3, #1
900165ee:	6163      	str	r3, [r4, #20]
900165f0:	b002      	add	sp, #8
900165f2:	bd70      	pop	{r4, r5, r6, pc}
900165f4:	ab01      	add	r3, sp, #4
900165f6:	466a      	mov	r2, sp
900165f8:	f7ff ffc8 	bl	9001658c <__swhatbuf_r>
900165fc:	9900      	ldr	r1, [sp, #0]
900165fe:	4605      	mov	r5, r0
90016600:	4630      	mov	r0, r6
90016602:	f7ff fa83 	bl	90015b0c <_malloc_r>
90016606:	b948      	cbnz	r0, 9001661c <__smakebuf_r+0x44>
90016608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
9001660c:	059a      	lsls	r2, r3, #22
9001660e:	d4ef      	bmi.n	900165f0 <__smakebuf_r+0x18>
90016610:	f023 0303 	bic.w	r3, r3, #3
90016614:	f043 0302 	orr.w	r3, r3, #2
90016618:	81a3      	strh	r3, [r4, #12]
9001661a:	e7e3      	b.n	900165e4 <__smakebuf_r+0xc>
9001661c:	4b0d      	ldr	r3, [pc, #52]	; (90016654 <__smakebuf_r+0x7c>)
9001661e:	62b3      	str	r3, [r6, #40]	; 0x28
90016620:	89a3      	ldrh	r3, [r4, #12]
90016622:	6020      	str	r0, [r4, #0]
90016624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90016628:	81a3      	strh	r3, [r4, #12]
9001662a:	9b00      	ldr	r3, [sp, #0]
9001662c:	6163      	str	r3, [r4, #20]
9001662e:	9b01      	ldr	r3, [sp, #4]
90016630:	6120      	str	r0, [r4, #16]
90016632:	b15b      	cbz	r3, 9001664c <__smakebuf_r+0x74>
90016634:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
90016638:	4630      	mov	r0, r6
9001663a:	f000 fce3 	bl	90017004 <_isatty_r>
9001663e:	b128      	cbz	r0, 9001664c <__smakebuf_r+0x74>
90016640:	89a3      	ldrh	r3, [r4, #12]
90016642:	f023 0303 	bic.w	r3, r3, #3
90016646:	f043 0301 	orr.w	r3, r3, #1
9001664a:	81a3      	strh	r3, [r4, #12]
9001664c:	89a0      	ldrh	r0, [r4, #12]
9001664e:	4305      	orrs	r5, r0
90016650:	81a5      	strh	r5, [r4, #12]
90016652:	e7cd      	b.n	900165f0 <__smakebuf_r+0x18>
90016654:	90015859 	.word	0x90015859

90016658 <malloc>:
90016658:	4b02      	ldr	r3, [pc, #8]	; (90016664 <malloc+0xc>)
9001665a:	4601      	mov	r1, r0
9001665c:	6818      	ldr	r0, [r3, #0]
9001665e:	f7ff ba55 	b.w	90015b0c <_malloc_r>
90016662:	bf00      	nop
90016664:	24000530 	.word	0x24000530

90016668 <__malloc_lock>:
90016668:	4801      	ldr	r0, [pc, #4]	; (90016670 <__malloc_lock+0x8>)
9001666a:	f7ff b9ec 	b.w	90015a46 <__retarget_lock_acquire_recursive>
9001666e:	bf00      	nop
90016670:	2401f504 	.word	0x2401f504

90016674 <__malloc_unlock>:
90016674:	4801      	ldr	r0, [pc, #4]	; (9001667c <__malloc_unlock+0x8>)
90016676:	f7ff b9e7 	b.w	90015a48 <__retarget_lock_release_recursive>
9001667a:	bf00      	nop
9001667c:	2401f504 	.word	0x2401f504

90016680 <_free_r>:
90016680:	b537      	push	{r0, r1, r2, r4, r5, lr}
90016682:	2900      	cmp	r1, #0
90016684:	d044      	beq.n	90016710 <_free_r+0x90>
90016686:	f851 3c04 	ldr.w	r3, [r1, #-4]
9001668a:	9001      	str	r0, [sp, #4]
9001668c:	2b00      	cmp	r3, #0
9001668e:	f1a1 0404 	sub.w	r4, r1, #4
90016692:	bfb8      	it	lt
90016694:	18e4      	addlt	r4, r4, r3
90016696:	f7ff ffe7 	bl	90016668 <__malloc_lock>
9001669a:	4a1e      	ldr	r2, [pc, #120]	; (90016714 <_free_r+0x94>)
9001669c:	9801      	ldr	r0, [sp, #4]
9001669e:	6813      	ldr	r3, [r2, #0]
900166a0:	b933      	cbnz	r3, 900166b0 <_free_r+0x30>
900166a2:	6063      	str	r3, [r4, #4]
900166a4:	6014      	str	r4, [r2, #0]
900166a6:	b003      	add	sp, #12
900166a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
900166ac:	f7ff bfe2 	b.w	90016674 <__malloc_unlock>
900166b0:	42a3      	cmp	r3, r4
900166b2:	d908      	bls.n	900166c6 <_free_r+0x46>
900166b4:	6825      	ldr	r5, [r4, #0]
900166b6:	1961      	adds	r1, r4, r5
900166b8:	428b      	cmp	r3, r1
900166ba:	bf01      	itttt	eq
900166bc:	6819      	ldreq	r1, [r3, #0]
900166be:	685b      	ldreq	r3, [r3, #4]
900166c0:	1949      	addeq	r1, r1, r5
900166c2:	6021      	streq	r1, [r4, #0]
900166c4:	e7ed      	b.n	900166a2 <_free_r+0x22>
900166c6:	461a      	mov	r2, r3
900166c8:	685b      	ldr	r3, [r3, #4]
900166ca:	b10b      	cbz	r3, 900166d0 <_free_r+0x50>
900166cc:	42a3      	cmp	r3, r4
900166ce:	d9fa      	bls.n	900166c6 <_free_r+0x46>
900166d0:	6811      	ldr	r1, [r2, #0]
900166d2:	1855      	adds	r5, r2, r1
900166d4:	42a5      	cmp	r5, r4
900166d6:	d10b      	bne.n	900166f0 <_free_r+0x70>
900166d8:	6824      	ldr	r4, [r4, #0]
900166da:	4421      	add	r1, r4
900166dc:	1854      	adds	r4, r2, r1
900166de:	42a3      	cmp	r3, r4
900166e0:	6011      	str	r1, [r2, #0]
900166e2:	d1e0      	bne.n	900166a6 <_free_r+0x26>
900166e4:	681c      	ldr	r4, [r3, #0]
900166e6:	685b      	ldr	r3, [r3, #4]
900166e8:	6053      	str	r3, [r2, #4]
900166ea:	4421      	add	r1, r4
900166ec:	6011      	str	r1, [r2, #0]
900166ee:	e7da      	b.n	900166a6 <_free_r+0x26>
900166f0:	d902      	bls.n	900166f8 <_free_r+0x78>
900166f2:	230c      	movs	r3, #12
900166f4:	6003      	str	r3, [r0, #0]
900166f6:	e7d6      	b.n	900166a6 <_free_r+0x26>
900166f8:	6825      	ldr	r5, [r4, #0]
900166fa:	1961      	adds	r1, r4, r5
900166fc:	428b      	cmp	r3, r1
900166fe:	bf04      	itt	eq
90016700:	6819      	ldreq	r1, [r3, #0]
90016702:	685b      	ldreq	r3, [r3, #4]
90016704:	6063      	str	r3, [r4, #4]
90016706:	bf04      	itt	eq
90016708:	1949      	addeq	r1, r1, r5
9001670a:	6021      	streq	r1, [r4, #0]
9001670c:	6054      	str	r4, [r2, #4]
9001670e:	e7ca      	b.n	900166a6 <_free_r+0x26>
90016710:	b003      	add	sp, #12
90016712:	bd30      	pop	{r4, r5, pc}
90016714:	2401f508 	.word	0x2401f508

90016718 <__ssputs_r>:
90016718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001671c:	688e      	ldr	r6, [r1, #8]
9001671e:	429e      	cmp	r6, r3
90016720:	4682      	mov	sl, r0
90016722:	460c      	mov	r4, r1
90016724:	4690      	mov	r8, r2
90016726:	461f      	mov	r7, r3
90016728:	d838      	bhi.n	9001679c <__ssputs_r+0x84>
9001672a:	898a      	ldrh	r2, [r1, #12]
9001672c:	f412 6f90 	tst.w	r2, #1152	; 0x480
90016730:	d032      	beq.n	90016798 <__ssputs_r+0x80>
90016732:	6825      	ldr	r5, [r4, #0]
90016734:	6909      	ldr	r1, [r1, #16]
90016736:	eba5 0901 	sub.w	r9, r5, r1
9001673a:	6965      	ldr	r5, [r4, #20]
9001673c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
90016740:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
90016744:	3301      	adds	r3, #1
90016746:	444b      	add	r3, r9
90016748:	106d      	asrs	r5, r5, #1
9001674a:	429d      	cmp	r5, r3
9001674c:	bf38      	it	cc
9001674e:	461d      	movcc	r5, r3
90016750:	0553      	lsls	r3, r2, #21
90016752:	d531      	bpl.n	900167b8 <__ssputs_r+0xa0>
90016754:	4629      	mov	r1, r5
90016756:	f7ff f9d9 	bl	90015b0c <_malloc_r>
9001675a:	4606      	mov	r6, r0
9001675c:	b950      	cbnz	r0, 90016774 <__ssputs_r+0x5c>
9001675e:	230c      	movs	r3, #12
90016760:	f8ca 3000 	str.w	r3, [sl]
90016764:	89a3      	ldrh	r3, [r4, #12]
90016766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
9001676a:	81a3      	strh	r3, [r4, #12]
9001676c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
90016770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90016774:	6921      	ldr	r1, [r4, #16]
90016776:	464a      	mov	r2, r9
90016778:	f7ff f977 	bl	90015a6a <memcpy>
9001677c:	89a3      	ldrh	r3, [r4, #12]
9001677e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
90016782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90016786:	81a3      	strh	r3, [r4, #12]
90016788:	6126      	str	r6, [r4, #16]
9001678a:	6165      	str	r5, [r4, #20]
9001678c:	444e      	add	r6, r9
9001678e:	eba5 0509 	sub.w	r5, r5, r9
90016792:	6026      	str	r6, [r4, #0]
90016794:	60a5      	str	r5, [r4, #8]
90016796:	463e      	mov	r6, r7
90016798:	42be      	cmp	r6, r7
9001679a:	d900      	bls.n	9001679e <__ssputs_r+0x86>
9001679c:	463e      	mov	r6, r7
9001679e:	6820      	ldr	r0, [r4, #0]
900167a0:	4632      	mov	r2, r6
900167a2:	4641      	mov	r1, r8
900167a4:	f7ff f96f 	bl	90015a86 <memmove>
900167a8:	68a3      	ldr	r3, [r4, #8]
900167aa:	1b9b      	subs	r3, r3, r6
900167ac:	60a3      	str	r3, [r4, #8]
900167ae:	6823      	ldr	r3, [r4, #0]
900167b0:	4433      	add	r3, r6
900167b2:	6023      	str	r3, [r4, #0]
900167b4:	2000      	movs	r0, #0
900167b6:	e7db      	b.n	90016770 <__ssputs_r+0x58>
900167b8:	462a      	mov	r2, r5
900167ba:	f000 fc33 	bl	90017024 <_realloc_r>
900167be:	4606      	mov	r6, r0
900167c0:	2800      	cmp	r0, #0
900167c2:	d1e1      	bne.n	90016788 <__ssputs_r+0x70>
900167c4:	6921      	ldr	r1, [r4, #16]
900167c6:	4650      	mov	r0, sl
900167c8:	f7ff ff5a 	bl	90016680 <_free_r>
900167cc:	e7c7      	b.n	9001675e <__ssputs_r+0x46>
	...

900167d0 <_svfiprintf_r>:
900167d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900167d4:	4698      	mov	r8, r3
900167d6:	898b      	ldrh	r3, [r1, #12]
900167d8:	061b      	lsls	r3, r3, #24
900167da:	b09d      	sub	sp, #116	; 0x74
900167dc:	4607      	mov	r7, r0
900167de:	460d      	mov	r5, r1
900167e0:	4614      	mov	r4, r2
900167e2:	d50e      	bpl.n	90016802 <_svfiprintf_r+0x32>
900167e4:	690b      	ldr	r3, [r1, #16]
900167e6:	b963      	cbnz	r3, 90016802 <_svfiprintf_r+0x32>
900167e8:	2140      	movs	r1, #64	; 0x40
900167ea:	f7ff f98f 	bl	90015b0c <_malloc_r>
900167ee:	6028      	str	r0, [r5, #0]
900167f0:	6128      	str	r0, [r5, #16]
900167f2:	b920      	cbnz	r0, 900167fe <_svfiprintf_r+0x2e>
900167f4:	230c      	movs	r3, #12
900167f6:	603b      	str	r3, [r7, #0]
900167f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
900167fc:	e0d1      	b.n	900169a2 <_svfiprintf_r+0x1d2>
900167fe:	2340      	movs	r3, #64	; 0x40
90016800:	616b      	str	r3, [r5, #20]
90016802:	2300      	movs	r3, #0
90016804:	9309      	str	r3, [sp, #36]	; 0x24
90016806:	2320      	movs	r3, #32
90016808:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
9001680c:	f8cd 800c 	str.w	r8, [sp, #12]
90016810:	2330      	movs	r3, #48	; 0x30
90016812:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 900169bc <_svfiprintf_r+0x1ec>
90016816:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
9001681a:	f04f 0901 	mov.w	r9, #1
9001681e:	4623      	mov	r3, r4
90016820:	469a      	mov	sl, r3
90016822:	f813 2b01 	ldrb.w	r2, [r3], #1
90016826:	b10a      	cbz	r2, 9001682c <_svfiprintf_r+0x5c>
90016828:	2a25      	cmp	r2, #37	; 0x25
9001682a:	d1f9      	bne.n	90016820 <_svfiprintf_r+0x50>
9001682c:	ebba 0b04 	subs.w	fp, sl, r4
90016830:	d00b      	beq.n	9001684a <_svfiprintf_r+0x7a>
90016832:	465b      	mov	r3, fp
90016834:	4622      	mov	r2, r4
90016836:	4629      	mov	r1, r5
90016838:	4638      	mov	r0, r7
9001683a:	f7ff ff6d 	bl	90016718 <__ssputs_r>
9001683e:	3001      	adds	r0, #1
90016840:	f000 80aa 	beq.w	90016998 <_svfiprintf_r+0x1c8>
90016844:	9a09      	ldr	r2, [sp, #36]	; 0x24
90016846:	445a      	add	r2, fp
90016848:	9209      	str	r2, [sp, #36]	; 0x24
9001684a:	f89a 3000 	ldrb.w	r3, [sl]
9001684e:	2b00      	cmp	r3, #0
90016850:	f000 80a2 	beq.w	90016998 <_svfiprintf_r+0x1c8>
90016854:	2300      	movs	r3, #0
90016856:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
9001685a:	e9cd 2305 	strd	r2, r3, [sp, #20]
9001685e:	f10a 0a01 	add.w	sl, sl, #1
90016862:	9304      	str	r3, [sp, #16]
90016864:	9307      	str	r3, [sp, #28]
90016866:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
9001686a:	931a      	str	r3, [sp, #104]	; 0x68
9001686c:	4654      	mov	r4, sl
9001686e:	2205      	movs	r2, #5
90016870:	f814 1b01 	ldrb.w	r1, [r4], #1
90016874:	4851      	ldr	r0, [pc, #324]	; (900169bc <_svfiprintf_r+0x1ec>)
90016876:	f7e9 fd4b 	bl	90000310 <memchr>
9001687a:	9a04      	ldr	r2, [sp, #16]
9001687c:	b9d8      	cbnz	r0, 900168b6 <_svfiprintf_r+0xe6>
9001687e:	06d0      	lsls	r0, r2, #27
90016880:	bf44      	itt	mi
90016882:	2320      	movmi	r3, #32
90016884:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
90016888:	0711      	lsls	r1, r2, #28
9001688a:	bf44      	itt	mi
9001688c:	232b      	movmi	r3, #43	; 0x2b
9001688e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
90016892:	f89a 3000 	ldrb.w	r3, [sl]
90016896:	2b2a      	cmp	r3, #42	; 0x2a
90016898:	d015      	beq.n	900168c6 <_svfiprintf_r+0xf6>
9001689a:	9a07      	ldr	r2, [sp, #28]
9001689c:	4654      	mov	r4, sl
9001689e:	2000      	movs	r0, #0
900168a0:	f04f 0c0a 	mov.w	ip, #10
900168a4:	4621      	mov	r1, r4
900168a6:	f811 3b01 	ldrb.w	r3, [r1], #1
900168aa:	3b30      	subs	r3, #48	; 0x30
900168ac:	2b09      	cmp	r3, #9
900168ae:	d94e      	bls.n	9001694e <_svfiprintf_r+0x17e>
900168b0:	b1b0      	cbz	r0, 900168e0 <_svfiprintf_r+0x110>
900168b2:	9207      	str	r2, [sp, #28]
900168b4:	e014      	b.n	900168e0 <_svfiprintf_r+0x110>
900168b6:	eba0 0308 	sub.w	r3, r0, r8
900168ba:	fa09 f303 	lsl.w	r3, r9, r3
900168be:	4313      	orrs	r3, r2
900168c0:	9304      	str	r3, [sp, #16]
900168c2:	46a2      	mov	sl, r4
900168c4:	e7d2      	b.n	9001686c <_svfiprintf_r+0x9c>
900168c6:	9b03      	ldr	r3, [sp, #12]
900168c8:	1d19      	adds	r1, r3, #4
900168ca:	681b      	ldr	r3, [r3, #0]
900168cc:	9103      	str	r1, [sp, #12]
900168ce:	2b00      	cmp	r3, #0
900168d0:	bfbb      	ittet	lt
900168d2:	425b      	neglt	r3, r3
900168d4:	f042 0202 	orrlt.w	r2, r2, #2
900168d8:	9307      	strge	r3, [sp, #28]
900168da:	9307      	strlt	r3, [sp, #28]
900168dc:	bfb8      	it	lt
900168de:	9204      	strlt	r2, [sp, #16]
900168e0:	7823      	ldrb	r3, [r4, #0]
900168e2:	2b2e      	cmp	r3, #46	; 0x2e
900168e4:	d10c      	bne.n	90016900 <_svfiprintf_r+0x130>
900168e6:	7863      	ldrb	r3, [r4, #1]
900168e8:	2b2a      	cmp	r3, #42	; 0x2a
900168ea:	d135      	bne.n	90016958 <_svfiprintf_r+0x188>
900168ec:	9b03      	ldr	r3, [sp, #12]
900168ee:	1d1a      	adds	r2, r3, #4
900168f0:	681b      	ldr	r3, [r3, #0]
900168f2:	9203      	str	r2, [sp, #12]
900168f4:	2b00      	cmp	r3, #0
900168f6:	bfb8      	it	lt
900168f8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
900168fc:	3402      	adds	r4, #2
900168fe:	9305      	str	r3, [sp, #20]
90016900:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 900169cc <_svfiprintf_r+0x1fc>
90016904:	7821      	ldrb	r1, [r4, #0]
90016906:	2203      	movs	r2, #3
90016908:	4650      	mov	r0, sl
9001690a:	f7e9 fd01 	bl	90000310 <memchr>
9001690e:	b140      	cbz	r0, 90016922 <_svfiprintf_r+0x152>
90016910:	2340      	movs	r3, #64	; 0x40
90016912:	eba0 000a 	sub.w	r0, r0, sl
90016916:	fa03 f000 	lsl.w	r0, r3, r0
9001691a:	9b04      	ldr	r3, [sp, #16]
9001691c:	4303      	orrs	r3, r0
9001691e:	3401      	adds	r4, #1
90016920:	9304      	str	r3, [sp, #16]
90016922:	f814 1b01 	ldrb.w	r1, [r4], #1
90016926:	4826      	ldr	r0, [pc, #152]	; (900169c0 <_svfiprintf_r+0x1f0>)
90016928:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
9001692c:	2206      	movs	r2, #6
9001692e:	f7e9 fcef 	bl	90000310 <memchr>
90016932:	2800      	cmp	r0, #0
90016934:	d038      	beq.n	900169a8 <_svfiprintf_r+0x1d8>
90016936:	4b23      	ldr	r3, [pc, #140]	; (900169c4 <_svfiprintf_r+0x1f4>)
90016938:	bb1b      	cbnz	r3, 90016982 <_svfiprintf_r+0x1b2>
9001693a:	9b03      	ldr	r3, [sp, #12]
9001693c:	3307      	adds	r3, #7
9001693e:	f023 0307 	bic.w	r3, r3, #7
90016942:	3308      	adds	r3, #8
90016944:	9303      	str	r3, [sp, #12]
90016946:	9b09      	ldr	r3, [sp, #36]	; 0x24
90016948:	4433      	add	r3, r6
9001694a:	9309      	str	r3, [sp, #36]	; 0x24
9001694c:	e767      	b.n	9001681e <_svfiprintf_r+0x4e>
9001694e:	fb0c 3202 	mla	r2, ip, r2, r3
90016952:	460c      	mov	r4, r1
90016954:	2001      	movs	r0, #1
90016956:	e7a5      	b.n	900168a4 <_svfiprintf_r+0xd4>
90016958:	2300      	movs	r3, #0
9001695a:	3401      	adds	r4, #1
9001695c:	9305      	str	r3, [sp, #20]
9001695e:	4619      	mov	r1, r3
90016960:	f04f 0c0a 	mov.w	ip, #10
90016964:	4620      	mov	r0, r4
90016966:	f810 2b01 	ldrb.w	r2, [r0], #1
9001696a:	3a30      	subs	r2, #48	; 0x30
9001696c:	2a09      	cmp	r2, #9
9001696e:	d903      	bls.n	90016978 <_svfiprintf_r+0x1a8>
90016970:	2b00      	cmp	r3, #0
90016972:	d0c5      	beq.n	90016900 <_svfiprintf_r+0x130>
90016974:	9105      	str	r1, [sp, #20]
90016976:	e7c3      	b.n	90016900 <_svfiprintf_r+0x130>
90016978:	fb0c 2101 	mla	r1, ip, r1, r2
9001697c:	4604      	mov	r4, r0
9001697e:	2301      	movs	r3, #1
90016980:	e7f0      	b.n	90016964 <_svfiprintf_r+0x194>
90016982:	ab03      	add	r3, sp, #12
90016984:	9300      	str	r3, [sp, #0]
90016986:	462a      	mov	r2, r5
90016988:	4b0f      	ldr	r3, [pc, #60]	; (900169c8 <_svfiprintf_r+0x1f8>)
9001698a:	a904      	add	r1, sp, #16
9001698c:	4638      	mov	r0, r7
9001698e:	f3af 8000 	nop.w
90016992:	1c42      	adds	r2, r0, #1
90016994:	4606      	mov	r6, r0
90016996:	d1d6      	bne.n	90016946 <_svfiprintf_r+0x176>
90016998:	89ab      	ldrh	r3, [r5, #12]
9001699a:	065b      	lsls	r3, r3, #25
9001699c:	f53f af2c 	bmi.w	900167f8 <_svfiprintf_r+0x28>
900169a0:	9809      	ldr	r0, [sp, #36]	; 0x24
900169a2:	b01d      	add	sp, #116	; 0x74
900169a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900169a8:	ab03      	add	r3, sp, #12
900169aa:	9300      	str	r3, [sp, #0]
900169ac:	462a      	mov	r2, r5
900169ae:	4b06      	ldr	r3, [pc, #24]	; (900169c8 <_svfiprintf_r+0x1f8>)
900169b0:	a904      	add	r1, sp, #16
900169b2:	4638      	mov	r0, r7
900169b4:	f000 f9d4 	bl	90016d60 <_printf_i>
900169b8:	e7eb      	b.n	90016992 <_svfiprintf_r+0x1c2>
900169ba:	bf00      	nop
900169bc:	90021366 	.word	0x90021366
900169c0:	90021370 	.word	0x90021370
900169c4:	00000000 	.word	0x00000000
900169c8:	90016719 	.word	0x90016719
900169cc:	9002136c 	.word	0x9002136c

900169d0 <__sfputc_r>:
900169d0:	6893      	ldr	r3, [r2, #8]
900169d2:	3b01      	subs	r3, #1
900169d4:	2b00      	cmp	r3, #0
900169d6:	b410      	push	{r4}
900169d8:	6093      	str	r3, [r2, #8]
900169da:	da08      	bge.n	900169ee <__sfputc_r+0x1e>
900169dc:	6994      	ldr	r4, [r2, #24]
900169de:	42a3      	cmp	r3, r4
900169e0:	db01      	blt.n	900169e6 <__sfputc_r+0x16>
900169e2:	290a      	cmp	r1, #10
900169e4:	d103      	bne.n	900169ee <__sfputc_r+0x1e>
900169e6:	f85d 4b04 	ldr.w	r4, [sp], #4
900169ea:	f7ff bbe3 	b.w	900161b4 <__swbuf_r>
900169ee:	6813      	ldr	r3, [r2, #0]
900169f0:	1c58      	adds	r0, r3, #1
900169f2:	6010      	str	r0, [r2, #0]
900169f4:	7019      	strb	r1, [r3, #0]
900169f6:	4608      	mov	r0, r1
900169f8:	f85d 4b04 	ldr.w	r4, [sp], #4
900169fc:	4770      	bx	lr

900169fe <__sfputs_r>:
900169fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90016a00:	4606      	mov	r6, r0
90016a02:	460f      	mov	r7, r1
90016a04:	4614      	mov	r4, r2
90016a06:	18d5      	adds	r5, r2, r3
90016a08:	42ac      	cmp	r4, r5
90016a0a:	d101      	bne.n	90016a10 <__sfputs_r+0x12>
90016a0c:	2000      	movs	r0, #0
90016a0e:	e007      	b.n	90016a20 <__sfputs_r+0x22>
90016a10:	f814 1b01 	ldrb.w	r1, [r4], #1
90016a14:	463a      	mov	r2, r7
90016a16:	4630      	mov	r0, r6
90016a18:	f7ff ffda 	bl	900169d0 <__sfputc_r>
90016a1c:	1c43      	adds	r3, r0, #1
90016a1e:	d1f3      	bne.n	90016a08 <__sfputs_r+0xa>
90016a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

90016a24 <_vfiprintf_r>:
90016a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90016a28:	460d      	mov	r5, r1
90016a2a:	b09d      	sub	sp, #116	; 0x74
90016a2c:	4614      	mov	r4, r2
90016a2e:	4698      	mov	r8, r3
90016a30:	4606      	mov	r6, r0
90016a32:	b118      	cbz	r0, 90016a3c <_vfiprintf_r+0x18>
90016a34:	6983      	ldr	r3, [r0, #24]
90016a36:	b90b      	cbnz	r3, 90016a3c <_vfiprintf_r+0x18>
90016a38:	f7fe ff42 	bl	900158c0 <__sinit>
90016a3c:	4b89      	ldr	r3, [pc, #548]	; (90016c64 <_vfiprintf_r+0x240>)
90016a3e:	429d      	cmp	r5, r3
90016a40:	d11b      	bne.n	90016a7a <_vfiprintf_r+0x56>
90016a42:	6875      	ldr	r5, [r6, #4]
90016a44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
90016a46:	07d9      	lsls	r1, r3, #31
90016a48:	d405      	bmi.n	90016a56 <_vfiprintf_r+0x32>
90016a4a:	89ab      	ldrh	r3, [r5, #12]
90016a4c:	059a      	lsls	r2, r3, #22
90016a4e:	d402      	bmi.n	90016a56 <_vfiprintf_r+0x32>
90016a50:	6da8      	ldr	r0, [r5, #88]	; 0x58
90016a52:	f7fe fff8 	bl	90015a46 <__retarget_lock_acquire_recursive>
90016a56:	89ab      	ldrh	r3, [r5, #12]
90016a58:	071b      	lsls	r3, r3, #28
90016a5a:	d501      	bpl.n	90016a60 <_vfiprintf_r+0x3c>
90016a5c:	692b      	ldr	r3, [r5, #16]
90016a5e:	b9eb      	cbnz	r3, 90016a9c <_vfiprintf_r+0x78>
90016a60:	4629      	mov	r1, r5
90016a62:	4630      	mov	r0, r6
90016a64:	f7ff fc0a 	bl	9001627c <__swsetup_r>
90016a68:	b1c0      	cbz	r0, 90016a9c <_vfiprintf_r+0x78>
90016a6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
90016a6c:	07dc      	lsls	r4, r3, #31
90016a6e:	d50e      	bpl.n	90016a8e <_vfiprintf_r+0x6a>
90016a70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
90016a74:	b01d      	add	sp, #116	; 0x74
90016a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90016a7a:	4b7b      	ldr	r3, [pc, #492]	; (90016c68 <_vfiprintf_r+0x244>)
90016a7c:	429d      	cmp	r5, r3
90016a7e:	d101      	bne.n	90016a84 <_vfiprintf_r+0x60>
90016a80:	68b5      	ldr	r5, [r6, #8]
90016a82:	e7df      	b.n	90016a44 <_vfiprintf_r+0x20>
90016a84:	4b79      	ldr	r3, [pc, #484]	; (90016c6c <_vfiprintf_r+0x248>)
90016a86:	429d      	cmp	r5, r3
90016a88:	bf08      	it	eq
90016a8a:	68f5      	ldreq	r5, [r6, #12]
90016a8c:	e7da      	b.n	90016a44 <_vfiprintf_r+0x20>
90016a8e:	89ab      	ldrh	r3, [r5, #12]
90016a90:	0598      	lsls	r0, r3, #22
90016a92:	d4ed      	bmi.n	90016a70 <_vfiprintf_r+0x4c>
90016a94:	6da8      	ldr	r0, [r5, #88]	; 0x58
90016a96:	f7fe ffd7 	bl	90015a48 <__retarget_lock_release_recursive>
90016a9a:	e7e9      	b.n	90016a70 <_vfiprintf_r+0x4c>
90016a9c:	2300      	movs	r3, #0
90016a9e:	9309      	str	r3, [sp, #36]	; 0x24
90016aa0:	2320      	movs	r3, #32
90016aa2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
90016aa6:	f8cd 800c 	str.w	r8, [sp, #12]
90016aaa:	2330      	movs	r3, #48	; 0x30
90016aac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 90016c70 <_vfiprintf_r+0x24c>
90016ab0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
90016ab4:	f04f 0901 	mov.w	r9, #1
90016ab8:	4623      	mov	r3, r4
90016aba:	469a      	mov	sl, r3
90016abc:	f813 2b01 	ldrb.w	r2, [r3], #1
90016ac0:	b10a      	cbz	r2, 90016ac6 <_vfiprintf_r+0xa2>
90016ac2:	2a25      	cmp	r2, #37	; 0x25
90016ac4:	d1f9      	bne.n	90016aba <_vfiprintf_r+0x96>
90016ac6:	ebba 0b04 	subs.w	fp, sl, r4
90016aca:	d00b      	beq.n	90016ae4 <_vfiprintf_r+0xc0>
90016acc:	465b      	mov	r3, fp
90016ace:	4622      	mov	r2, r4
90016ad0:	4629      	mov	r1, r5
90016ad2:	4630      	mov	r0, r6
90016ad4:	f7ff ff93 	bl	900169fe <__sfputs_r>
90016ad8:	3001      	adds	r0, #1
90016ada:	f000 80aa 	beq.w	90016c32 <_vfiprintf_r+0x20e>
90016ade:	9a09      	ldr	r2, [sp, #36]	; 0x24
90016ae0:	445a      	add	r2, fp
90016ae2:	9209      	str	r2, [sp, #36]	; 0x24
90016ae4:	f89a 3000 	ldrb.w	r3, [sl]
90016ae8:	2b00      	cmp	r3, #0
90016aea:	f000 80a2 	beq.w	90016c32 <_vfiprintf_r+0x20e>
90016aee:	2300      	movs	r3, #0
90016af0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
90016af4:	e9cd 2305 	strd	r2, r3, [sp, #20]
90016af8:	f10a 0a01 	add.w	sl, sl, #1
90016afc:	9304      	str	r3, [sp, #16]
90016afe:	9307      	str	r3, [sp, #28]
90016b00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
90016b04:	931a      	str	r3, [sp, #104]	; 0x68
90016b06:	4654      	mov	r4, sl
90016b08:	2205      	movs	r2, #5
90016b0a:	f814 1b01 	ldrb.w	r1, [r4], #1
90016b0e:	4858      	ldr	r0, [pc, #352]	; (90016c70 <_vfiprintf_r+0x24c>)
90016b10:	f7e9 fbfe 	bl	90000310 <memchr>
90016b14:	9a04      	ldr	r2, [sp, #16]
90016b16:	b9d8      	cbnz	r0, 90016b50 <_vfiprintf_r+0x12c>
90016b18:	06d1      	lsls	r1, r2, #27
90016b1a:	bf44      	itt	mi
90016b1c:	2320      	movmi	r3, #32
90016b1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
90016b22:	0713      	lsls	r3, r2, #28
90016b24:	bf44      	itt	mi
90016b26:	232b      	movmi	r3, #43	; 0x2b
90016b28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
90016b2c:	f89a 3000 	ldrb.w	r3, [sl]
90016b30:	2b2a      	cmp	r3, #42	; 0x2a
90016b32:	d015      	beq.n	90016b60 <_vfiprintf_r+0x13c>
90016b34:	9a07      	ldr	r2, [sp, #28]
90016b36:	4654      	mov	r4, sl
90016b38:	2000      	movs	r0, #0
90016b3a:	f04f 0c0a 	mov.w	ip, #10
90016b3e:	4621      	mov	r1, r4
90016b40:	f811 3b01 	ldrb.w	r3, [r1], #1
90016b44:	3b30      	subs	r3, #48	; 0x30
90016b46:	2b09      	cmp	r3, #9
90016b48:	d94e      	bls.n	90016be8 <_vfiprintf_r+0x1c4>
90016b4a:	b1b0      	cbz	r0, 90016b7a <_vfiprintf_r+0x156>
90016b4c:	9207      	str	r2, [sp, #28]
90016b4e:	e014      	b.n	90016b7a <_vfiprintf_r+0x156>
90016b50:	eba0 0308 	sub.w	r3, r0, r8
90016b54:	fa09 f303 	lsl.w	r3, r9, r3
90016b58:	4313      	orrs	r3, r2
90016b5a:	9304      	str	r3, [sp, #16]
90016b5c:	46a2      	mov	sl, r4
90016b5e:	e7d2      	b.n	90016b06 <_vfiprintf_r+0xe2>
90016b60:	9b03      	ldr	r3, [sp, #12]
90016b62:	1d19      	adds	r1, r3, #4
90016b64:	681b      	ldr	r3, [r3, #0]
90016b66:	9103      	str	r1, [sp, #12]
90016b68:	2b00      	cmp	r3, #0
90016b6a:	bfbb      	ittet	lt
90016b6c:	425b      	neglt	r3, r3
90016b6e:	f042 0202 	orrlt.w	r2, r2, #2
90016b72:	9307      	strge	r3, [sp, #28]
90016b74:	9307      	strlt	r3, [sp, #28]
90016b76:	bfb8      	it	lt
90016b78:	9204      	strlt	r2, [sp, #16]
90016b7a:	7823      	ldrb	r3, [r4, #0]
90016b7c:	2b2e      	cmp	r3, #46	; 0x2e
90016b7e:	d10c      	bne.n	90016b9a <_vfiprintf_r+0x176>
90016b80:	7863      	ldrb	r3, [r4, #1]
90016b82:	2b2a      	cmp	r3, #42	; 0x2a
90016b84:	d135      	bne.n	90016bf2 <_vfiprintf_r+0x1ce>
90016b86:	9b03      	ldr	r3, [sp, #12]
90016b88:	1d1a      	adds	r2, r3, #4
90016b8a:	681b      	ldr	r3, [r3, #0]
90016b8c:	9203      	str	r2, [sp, #12]
90016b8e:	2b00      	cmp	r3, #0
90016b90:	bfb8      	it	lt
90016b92:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
90016b96:	3402      	adds	r4, #2
90016b98:	9305      	str	r3, [sp, #20]
90016b9a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 90016c80 <_vfiprintf_r+0x25c>
90016b9e:	7821      	ldrb	r1, [r4, #0]
90016ba0:	2203      	movs	r2, #3
90016ba2:	4650      	mov	r0, sl
90016ba4:	f7e9 fbb4 	bl	90000310 <memchr>
90016ba8:	b140      	cbz	r0, 90016bbc <_vfiprintf_r+0x198>
90016baa:	2340      	movs	r3, #64	; 0x40
90016bac:	eba0 000a 	sub.w	r0, r0, sl
90016bb0:	fa03 f000 	lsl.w	r0, r3, r0
90016bb4:	9b04      	ldr	r3, [sp, #16]
90016bb6:	4303      	orrs	r3, r0
90016bb8:	3401      	adds	r4, #1
90016bba:	9304      	str	r3, [sp, #16]
90016bbc:	f814 1b01 	ldrb.w	r1, [r4], #1
90016bc0:	482c      	ldr	r0, [pc, #176]	; (90016c74 <_vfiprintf_r+0x250>)
90016bc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
90016bc6:	2206      	movs	r2, #6
90016bc8:	f7e9 fba2 	bl	90000310 <memchr>
90016bcc:	2800      	cmp	r0, #0
90016bce:	d03f      	beq.n	90016c50 <_vfiprintf_r+0x22c>
90016bd0:	4b29      	ldr	r3, [pc, #164]	; (90016c78 <_vfiprintf_r+0x254>)
90016bd2:	bb1b      	cbnz	r3, 90016c1c <_vfiprintf_r+0x1f8>
90016bd4:	9b03      	ldr	r3, [sp, #12]
90016bd6:	3307      	adds	r3, #7
90016bd8:	f023 0307 	bic.w	r3, r3, #7
90016bdc:	3308      	adds	r3, #8
90016bde:	9303      	str	r3, [sp, #12]
90016be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
90016be2:	443b      	add	r3, r7
90016be4:	9309      	str	r3, [sp, #36]	; 0x24
90016be6:	e767      	b.n	90016ab8 <_vfiprintf_r+0x94>
90016be8:	fb0c 3202 	mla	r2, ip, r2, r3
90016bec:	460c      	mov	r4, r1
90016bee:	2001      	movs	r0, #1
90016bf0:	e7a5      	b.n	90016b3e <_vfiprintf_r+0x11a>
90016bf2:	2300      	movs	r3, #0
90016bf4:	3401      	adds	r4, #1
90016bf6:	9305      	str	r3, [sp, #20]
90016bf8:	4619      	mov	r1, r3
90016bfa:	f04f 0c0a 	mov.w	ip, #10
90016bfe:	4620      	mov	r0, r4
90016c00:	f810 2b01 	ldrb.w	r2, [r0], #1
90016c04:	3a30      	subs	r2, #48	; 0x30
90016c06:	2a09      	cmp	r2, #9
90016c08:	d903      	bls.n	90016c12 <_vfiprintf_r+0x1ee>
90016c0a:	2b00      	cmp	r3, #0
90016c0c:	d0c5      	beq.n	90016b9a <_vfiprintf_r+0x176>
90016c0e:	9105      	str	r1, [sp, #20]
90016c10:	e7c3      	b.n	90016b9a <_vfiprintf_r+0x176>
90016c12:	fb0c 2101 	mla	r1, ip, r1, r2
90016c16:	4604      	mov	r4, r0
90016c18:	2301      	movs	r3, #1
90016c1a:	e7f0      	b.n	90016bfe <_vfiprintf_r+0x1da>
90016c1c:	ab03      	add	r3, sp, #12
90016c1e:	9300      	str	r3, [sp, #0]
90016c20:	462a      	mov	r2, r5
90016c22:	4b16      	ldr	r3, [pc, #88]	; (90016c7c <_vfiprintf_r+0x258>)
90016c24:	a904      	add	r1, sp, #16
90016c26:	4630      	mov	r0, r6
90016c28:	f3af 8000 	nop.w
90016c2c:	4607      	mov	r7, r0
90016c2e:	1c78      	adds	r0, r7, #1
90016c30:	d1d6      	bne.n	90016be0 <_vfiprintf_r+0x1bc>
90016c32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
90016c34:	07d9      	lsls	r1, r3, #31
90016c36:	d405      	bmi.n	90016c44 <_vfiprintf_r+0x220>
90016c38:	89ab      	ldrh	r3, [r5, #12]
90016c3a:	059a      	lsls	r2, r3, #22
90016c3c:	d402      	bmi.n	90016c44 <_vfiprintf_r+0x220>
90016c3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
90016c40:	f7fe ff02 	bl	90015a48 <__retarget_lock_release_recursive>
90016c44:	89ab      	ldrh	r3, [r5, #12]
90016c46:	065b      	lsls	r3, r3, #25
90016c48:	f53f af12 	bmi.w	90016a70 <_vfiprintf_r+0x4c>
90016c4c:	9809      	ldr	r0, [sp, #36]	; 0x24
90016c4e:	e711      	b.n	90016a74 <_vfiprintf_r+0x50>
90016c50:	ab03      	add	r3, sp, #12
90016c52:	9300      	str	r3, [sp, #0]
90016c54:	462a      	mov	r2, r5
90016c56:	4b09      	ldr	r3, [pc, #36]	; (90016c7c <_vfiprintf_r+0x258>)
90016c58:	a904      	add	r1, sp, #16
90016c5a:	4630      	mov	r0, r6
90016c5c:	f000 f880 	bl	90016d60 <_printf_i>
90016c60:	e7e4      	b.n	90016c2c <_vfiprintf_r+0x208>
90016c62:	bf00      	nop
90016c64:	90021274 	.word	0x90021274
90016c68:	90021294 	.word	0x90021294
90016c6c:	90021254 	.word	0x90021254
90016c70:	90021366 	.word	0x90021366
90016c74:	90021370 	.word	0x90021370
90016c78:	00000000 	.word	0x00000000
90016c7c:	900169ff 	.word	0x900169ff
90016c80:	9002136c 	.word	0x9002136c

90016c84 <_printf_common>:
90016c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90016c88:	4616      	mov	r6, r2
90016c8a:	4699      	mov	r9, r3
90016c8c:	688a      	ldr	r2, [r1, #8]
90016c8e:	690b      	ldr	r3, [r1, #16]
90016c90:	f8dd 8020 	ldr.w	r8, [sp, #32]
90016c94:	4293      	cmp	r3, r2
90016c96:	bfb8      	it	lt
90016c98:	4613      	movlt	r3, r2
90016c9a:	6033      	str	r3, [r6, #0]
90016c9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
90016ca0:	4607      	mov	r7, r0
90016ca2:	460c      	mov	r4, r1
90016ca4:	b10a      	cbz	r2, 90016caa <_printf_common+0x26>
90016ca6:	3301      	adds	r3, #1
90016ca8:	6033      	str	r3, [r6, #0]
90016caa:	6823      	ldr	r3, [r4, #0]
90016cac:	0699      	lsls	r1, r3, #26
90016cae:	bf42      	ittt	mi
90016cb0:	6833      	ldrmi	r3, [r6, #0]
90016cb2:	3302      	addmi	r3, #2
90016cb4:	6033      	strmi	r3, [r6, #0]
90016cb6:	6825      	ldr	r5, [r4, #0]
90016cb8:	f015 0506 	ands.w	r5, r5, #6
90016cbc:	d106      	bne.n	90016ccc <_printf_common+0x48>
90016cbe:	f104 0a19 	add.w	sl, r4, #25
90016cc2:	68e3      	ldr	r3, [r4, #12]
90016cc4:	6832      	ldr	r2, [r6, #0]
90016cc6:	1a9b      	subs	r3, r3, r2
90016cc8:	42ab      	cmp	r3, r5
90016cca:	dc26      	bgt.n	90016d1a <_printf_common+0x96>
90016ccc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
90016cd0:	1e13      	subs	r3, r2, #0
90016cd2:	6822      	ldr	r2, [r4, #0]
90016cd4:	bf18      	it	ne
90016cd6:	2301      	movne	r3, #1
90016cd8:	0692      	lsls	r2, r2, #26
90016cda:	d42b      	bmi.n	90016d34 <_printf_common+0xb0>
90016cdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
90016ce0:	4649      	mov	r1, r9
90016ce2:	4638      	mov	r0, r7
90016ce4:	47c0      	blx	r8
90016ce6:	3001      	adds	r0, #1
90016ce8:	d01e      	beq.n	90016d28 <_printf_common+0xa4>
90016cea:	6823      	ldr	r3, [r4, #0]
90016cec:	68e5      	ldr	r5, [r4, #12]
90016cee:	6832      	ldr	r2, [r6, #0]
90016cf0:	f003 0306 	and.w	r3, r3, #6
90016cf4:	2b04      	cmp	r3, #4
90016cf6:	bf08      	it	eq
90016cf8:	1aad      	subeq	r5, r5, r2
90016cfa:	68a3      	ldr	r3, [r4, #8]
90016cfc:	6922      	ldr	r2, [r4, #16]
90016cfe:	bf0c      	ite	eq
90016d00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
90016d04:	2500      	movne	r5, #0
90016d06:	4293      	cmp	r3, r2
90016d08:	bfc4      	itt	gt
90016d0a:	1a9b      	subgt	r3, r3, r2
90016d0c:	18ed      	addgt	r5, r5, r3
90016d0e:	2600      	movs	r6, #0
90016d10:	341a      	adds	r4, #26
90016d12:	42b5      	cmp	r5, r6
90016d14:	d11a      	bne.n	90016d4c <_printf_common+0xc8>
90016d16:	2000      	movs	r0, #0
90016d18:	e008      	b.n	90016d2c <_printf_common+0xa8>
90016d1a:	2301      	movs	r3, #1
90016d1c:	4652      	mov	r2, sl
90016d1e:	4649      	mov	r1, r9
90016d20:	4638      	mov	r0, r7
90016d22:	47c0      	blx	r8
90016d24:	3001      	adds	r0, #1
90016d26:	d103      	bne.n	90016d30 <_printf_common+0xac>
90016d28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
90016d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90016d30:	3501      	adds	r5, #1
90016d32:	e7c6      	b.n	90016cc2 <_printf_common+0x3e>
90016d34:	18e1      	adds	r1, r4, r3
90016d36:	1c5a      	adds	r2, r3, #1
90016d38:	2030      	movs	r0, #48	; 0x30
90016d3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
90016d3e:	4422      	add	r2, r4
90016d40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
90016d44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
90016d48:	3302      	adds	r3, #2
90016d4a:	e7c7      	b.n	90016cdc <_printf_common+0x58>
90016d4c:	2301      	movs	r3, #1
90016d4e:	4622      	mov	r2, r4
90016d50:	4649      	mov	r1, r9
90016d52:	4638      	mov	r0, r7
90016d54:	47c0      	blx	r8
90016d56:	3001      	adds	r0, #1
90016d58:	d0e6      	beq.n	90016d28 <_printf_common+0xa4>
90016d5a:	3601      	adds	r6, #1
90016d5c:	e7d9      	b.n	90016d12 <_printf_common+0x8e>
	...

90016d60 <_printf_i>:
90016d60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
90016d64:	7e0f      	ldrb	r7, [r1, #24]
90016d66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90016d68:	2f78      	cmp	r7, #120	; 0x78
90016d6a:	4691      	mov	r9, r2
90016d6c:	4680      	mov	r8, r0
90016d6e:	460c      	mov	r4, r1
90016d70:	469a      	mov	sl, r3
90016d72:	f101 0243 	add.w	r2, r1, #67	; 0x43
90016d76:	d807      	bhi.n	90016d88 <_printf_i+0x28>
90016d78:	2f62      	cmp	r7, #98	; 0x62
90016d7a:	d80a      	bhi.n	90016d92 <_printf_i+0x32>
90016d7c:	2f00      	cmp	r7, #0
90016d7e:	f000 80d8 	beq.w	90016f32 <_printf_i+0x1d2>
90016d82:	2f58      	cmp	r7, #88	; 0x58
90016d84:	f000 80a3 	beq.w	90016ece <_printf_i+0x16e>
90016d88:	f104 0542 	add.w	r5, r4, #66	; 0x42
90016d8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
90016d90:	e03a      	b.n	90016e08 <_printf_i+0xa8>
90016d92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
90016d96:	2b15      	cmp	r3, #21
90016d98:	d8f6      	bhi.n	90016d88 <_printf_i+0x28>
90016d9a:	a101      	add	r1, pc, #4	; (adr r1, 90016da0 <_printf_i+0x40>)
90016d9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
90016da0:	90016df9 	.word	0x90016df9
90016da4:	90016e0d 	.word	0x90016e0d
90016da8:	90016d89 	.word	0x90016d89
90016dac:	90016d89 	.word	0x90016d89
90016db0:	90016d89 	.word	0x90016d89
90016db4:	90016d89 	.word	0x90016d89
90016db8:	90016e0d 	.word	0x90016e0d
90016dbc:	90016d89 	.word	0x90016d89
90016dc0:	90016d89 	.word	0x90016d89
90016dc4:	90016d89 	.word	0x90016d89
90016dc8:	90016d89 	.word	0x90016d89
90016dcc:	90016f19 	.word	0x90016f19
90016dd0:	90016e3d 	.word	0x90016e3d
90016dd4:	90016efb 	.word	0x90016efb
90016dd8:	90016d89 	.word	0x90016d89
90016ddc:	90016d89 	.word	0x90016d89
90016de0:	90016f3b 	.word	0x90016f3b
90016de4:	90016d89 	.word	0x90016d89
90016de8:	90016e3d 	.word	0x90016e3d
90016dec:	90016d89 	.word	0x90016d89
90016df0:	90016d89 	.word	0x90016d89
90016df4:	90016f03 	.word	0x90016f03
90016df8:	682b      	ldr	r3, [r5, #0]
90016dfa:	1d1a      	adds	r2, r3, #4
90016dfc:	681b      	ldr	r3, [r3, #0]
90016dfe:	602a      	str	r2, [r5, #0]
90016e00:	f104 0542 	add.w	r5, r4, #66	; 0x42
90016e04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
90016e08:	2301      	movs	r3, #1
90016e0a:	e0a3      	b.n	90016f54 <_printf_i+0x1f4>
90016e0c:	6820      	ldr	r0, [r4, #0]
90016e0e:	6829      	ldr	r1, [r5, #0]
90016e10:	0606      	lsls	r6, r0, #24
90016e12:	f101 0304 	add.w	r3, r1, #4
90016e16:	d50a      	bpl.n	90016e2e <_printf_i+0xce>
90016e18:	680e      	ldr	r6, [r1, #0]
90016e1a:	602b      	str	r3, [r5, #0]
90016e1c:	2e00      	cmp	r6, #0
90016e1e:	da03      	bge.n	90016e28 <_printf_i+0xc8>
90016e20:	232d      	movs	r3, #45	; 0x2d
90016e22:	4276      	negs	r6, r6
90016e24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
90016e28:	485e      	ldr	r0, [pc, #376]	; (90016fa4 <_printf_i+0x244>)
90016e2a:	230a      	movs	r3, #10
90016e2c:	e019      	b.n	90016e62 <_printf_i+0x102>
90016e2e:	680e      	ldr	r6, [r1, #0]
90016e30:	602b      	str	r3, [r5, #0]
90016e32:	f010 0f40 	tst.w	r0, #64	; 0x40
90016e36:	bf18      	it	ne
90016e38:	b236      	sxthne	r6, r6
90016e3a:	e7ef      	b.n	90016e1c <_printf_i+0xbc>
90016e3c:	682b      	ldr	r3, [r5, #0]
90016e3e:	6820      	ldr	r0, [r4, #0]
90016e40:	1d19      	adds	r1, r3, #4
90016e42:	6029      	str	r1, [r5, #0]
90016e44:	0601      	lsls	r1, r0, #24
90016e46:	d501      	bpl.n	90016e4c <_printf_i+0xec>
90016e48:	681e      	ldr	r6, [r3, #0]
90016e4a:	e002      	b.n	90016e52 <_printf_i+0xf2>
90016e4c:	0646      	lsls	r6, r0, #25
90016e4e:	d5fb      	bpl.n	90016e48 <_printf_i+0xe8>
90016e50:	881e      	ldrh	r6, [r3, #0]
90016e52:	4854      	ldr	r0, [pc, #336]	; (90016fa4 <_printf_i+0x244>)
90016e54:	2f6f      	cmp	r7, #111	; 0x6f
90016e56:	bf0c      	ite	eq
90016e58:	2308      	moveq	r3, #8
90016e5a:	230a      	movne	r3, #10
90016e5c:	2100      	movs	r1, #0
90016e5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
90016e62:	6865      	ldr	r5, [r4, #4]
90016e64:	60a5      	str	r5, [r4, #8]
90016e66:	2d00      	cmp	r5, #0
90016e68:	bfa2      	ittt	ge
90016e6a:	6821      	ldrge	r1, [r4, #0]
90016e6c:	f021 0104 	bicge.w	r1, r1, #4
90016e70:	6021      	strge	r1, [r4, #0]
90016e72:	b90e      	cbnz	r6, 90016e78 <_printf_i+0x118>
90016e74:	2d00      	cmp	r5, #0
90016e76:	d04d      	beq.n	90016f14 <_printf_i+0x1b4>
90016e78:	4615      	mov	r5, r2
90016e7a:	fbb6 f1f3 	udiv	r1, r6, r3
90016e7e:	fb03 6711 	mls	r7, r3, r1, r6
90016e82:	5dc7      	ldrb	r7, [r0, r7]
90016e84:	f805 7d01 	strb.w	r7, [r5, #-1]!
90016e88:	4637      	mov	r7, r6
90016e8a:	42bb      	cmp	r3, r7
90016e8c:	460e      	mov	r6, r1
90016e8e:	d9f4      	bls.n	90016e7a <_printf_i+0x11a>
90016e90:	2b08      	cmp	r3, #8
90016e92:	d10b      	bne.n	90016eac <_printf_i+0x14c>
90016e94:	6823      	ldr	r3, [r4, #0]
90016e96:	07de      	lsls	r6, r3, #31
90016e98:	d508      	bpl.n	90016eac <_printf_i+0x14c>
90016e9a:	6923      	ldr	r3, [r4, #16]
90016e9c:	6861      	ldr	r1, [r4, #4]
90016e9e:	4299      	cmp	r1, r3
90016ea0:	bfde      	ittt	le
90016ea2:	2330      	movle	r3, #48	; 0x30
90016ea4:	f805 3c01 	strble.w	r3, [r5, #-1]
90016ea8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
90016eac:	1b52      	subs	r2, r2, r5
90016eae:	6122      	str	r2, [r4, #16]
90016eb0:	f8cd a000 	str.w	sl, [sp]
90016eb4:	464b      	mov	r3, r9
90016eb6:	aa03      	add	r2, sp, #12
90016eb8:	4621      	mov	r1, r4
90016eba:	4640      	mov	r0, r8
90016ebc:	f7ff fee2 	bl	90016c84 <_printf_common>
90016ec0:	3001      	adds	r0, #1
90016ec2:	d14c      	bne.n	90016f5e <_printf_i+0x1fe>
90016ec4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
90016ec8:	b004      	add	sp, #16
90016eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90016ece:	4835      	ldr	r0, [pc, #212]	; (90016fa4 <_printf_i+0x244>)
90016ed0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
90016ed4:	6829      	ldr	r1, [r5, #0]
90016ed6:	6823      	ldr	r3, [r4, #0]
90016ed8:	f851 6b04 	ldr.w	r6, [r1], #4
90016edc:	6029      	str	r1, [r5, #0]
90016ede:	061d      	lsls	r5, r3, #24
90016ee0:	d514      	bpl.n	90016f0c <_printf_i+0x1ac>
90016ee2:	07df      	lsls	r7, r3, #31
90016ee4:	bf44      	itt	mi
90016ee6:	f043 0320 	orrmi.w	r3, r3, #32
90016eea:	6023      	strmi	r3, [r4, #0]
90016eec:	b91e      	cbnz	r6, 90016ef6 <_printf_i+0x196>
90016eee:	6823      	ldr	r3, [r4, #0]
90016ef0:	f023 0320 	bic.w	r3, r3, #32
90016ef4:	6023      	str	r3, [r4, #0]
90016ef6:	2310      	movs	r3, #16
90016ef8:	e7b0      	b.n	90016e5c <_printf_i+0xfc>
90016efa:	6823      	ldr	r3, [r4, #0]
90016efc:	f043 0320 	orr.w	r3, r3, #32
90016f00:	6023      	str	r3, [r4, #0]
90016f02:	2378      	movs	r3, #120	; 0x78
90016f04:	4828      	ldr	r0, [pc, #160]	; (90016fa8 <_printf_i+0x248>)
90016f06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
90016f0a:	e7e3      	b.n	90016ed4 <_printf_i+0x174>
90016f0c:	0659      	lsls	r1, r3, #25
90016f0e:	bf48      	it	mi
90016f10:	b2b6      	uxthmi	r6, r6
90016f12:	e7e6      	b.n	90016ee2 <_printf_i+0x182>
90016f14:	4615      	mov	r5, r2
90016f16:	e7bb      	b.n	90016e90 <_printf_i+0x130>
90016f18:	682b      	ldr	r3, [r5, #0]
90016f1a:	6826      	ldr	r6, [r4, #0]
90016f1c:	6961      	ldr	r1, [r4, #20]
90016f1e:	1d18      	adds	r0, r3, #4
90016f20:	6028      	str	r0, [r5, #0]
90016f22:	0635      	lsls	r5, r6, #24
90016f24:	681b      	ldr	r3, [r3, #0]
90016f26:	d501      	bpl.n	90016f2c <_printf_i+0x1cc>
90016f28:	6019      	str	r1, [r3, #0]
90016f2a:	e002      	b.n	90016f32 <_printf_i+0x1d2>
90016f2c:	0670      	lsls	r0, r6, #25
90016f2e:	d5fb      	bpl.n	90016f28 <_printf_i+0x1c8>
90016f30:	8019      	strh	r1, [r3, #0]
90016f32:	2300      	movs	r3, #0
90016f34:	6123      	str	r3, [r4, #16]
90016f36:	4615      	mov	r5, r2
90016f38:	e7ba      	b.n	90016eb0 <_printf_i+0x150>
90016f3a:	682b      	ldr	r3, [r5, #0]
90016f3c:	1d1a      	adds	r2, r3, #4
90016f3e:	602a      	str	r2, [r5, #0]
90016f40:	681d      	ldr	r5, [r3, #0]
90016f42:	6862      	ldr	r2, [r4, #4]
90016f44:	2100      	movs	r1, #0
90016f46:	4628      	mov	r0, r5
90016f48:	f7e9 f9e2 	bl	90000310 <memchr>
90016f4c:	b108      	cbz	r0, 90016f52 <_printf_i+0x1f2>
90016f4e:	1b40      	subs	r0, r0, r5
90016f50:	6060      	str	r0, [r4, #4]
90016f52:	6863      	ldr	r3, [r4, #4]
90016f54:	6123      	str	r3, [r4, #16]
90016f56:	2300      	movs	r3, #0
90016f58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
90016f5c:	e7a8      	b.n	90016eb0 <_printf_i+0x150>
90016f5e:	6923      	ldr	r3, [r4, #16]
90016f60:	462a      	mov	r2, r5
90016f62:	4649      	mov	r1, r9
90016f64:	4640      	mov	r0, r8
90016f66:	47d0      	blx	sl
90016f68:	3001      	adds	r0, #1
90016f6a:	d0ab      	beq.n	90016ec4 <_printf_i+0x164>
90016f6c:	6823      	ldr	r3, [r4, #0]
90016f6e:	079b      	lsls	r3, r3, #30
90016f70:	d413      	bmi.n	90016f9a <_printf_i+0x23a>
90016f72:	68e0      	ldr	r0, [r4, #12]
90016f74:	9b03      	ldr	r3, [sp, #12]
90016f76:	4298      	cmp	r0, r3
90016f78:	bfb8      	it	lt
90016f7a:	4618      	movlt	r0, r3
90016f7c:	e7a4      	b.n	90016ec8 <_printf_i+0x168>
90016f7e:	2301      	movs	r3, #1
90016f80:	4632      	mov	r2, r6
90016f82:	4649      	mov	r1, r9
90016f84:	4640      	mov	r0, r8
90016f86:	47d0      	blx	sl
90016f88:	3001      	adds	r0, #1
90016f8a:	d09b      	beq.n	90016ec4 <_printf_i+0x164>
90016f8c:	3501      	adds	r5, #1
90016f8e:	68e3      	ldr	r3, [r4, #12]
90016f90:	9903      	ldr	r1, [sp, #12]
90016f92:	1a5b      	subs	r3, r3, r1
90016f94:	42ab      	cmp	r3, r5
90016f96:	dcf2      	bgt.n	90016f7e <_printf_i+0x21e>
90016f98:	e7eb      	b.n	90016f72 <_printf_i+0x212>
90016f9a:	2500      	movs	r5, #0
90016f9c:	f104 0619 	add.w	r6, r4, #25
90016fa0:	e7f5      	b.n	90016f8e <_printf_i+0x22e>
90016fa2:	bf00      	nop
90016fa4:	90021377 	.word	0x90021377
90016fa8:	90021388 	.word	0x90021388

90016fac <_read_r>:
90016fac:	b538      	push	{r3, r4, r5, lr}
90016fae:	4d07      	ldr	r5, [pc, #28]	; (90016fcc <_read_r+0x20>)
90016fb0:	4604      	mov	r4, r0
90016fb2:	4608      	mov	r0, r1
90016fb4:	4611      	mov	r1, r2
90016fb6:	2200      	movs	r2, #0
90016fb8:	602a      	str	r2, [r5, #0]
90016fba:	461a      	mov	r2, r3
90016fbc:	f7ea ff70 	bl	90001ea0 <_read>
90016fc0:	1c43      	adds	r3, r0, #1
90016fc2:	d102      	bne.n	90016fca <_read_r+0x1e>
90016fc4:	682b      	ldr	r3, [r5, #0]
90016fc6:	b103      	cbz	r3, 90016fca <_read_r+0x1e>
90016fc8:	6023      	str	r3, [r4, #0]
90016fca:	bd38      	pop	{r3, r4, r5, pc}
90016fcc:	2401f510 	.word	0x2401f510

90016fd0 <abort>:
90016fd0:	b508      	push	{r3, lr}
90016fd2:	2006      	movs	r0, #6
90016fd4:	f000 f87e 	bl	900170d4 <raise>
90016fd8:	2001      	movs	r0, #1
90016fda:	f7ea ff57 	bl	90001e8c <_exit>
	...

90016fe0 <_fstat_r>:
90016fe0:	b538      	push	{r3, r4, r5, lr}
90016fe2:	4d07      	ldr	r5, [pc, #28]	; (90017000 <_fstat_r+0x20>)
90016fe4:	2300      	movs	r3, #0
90016fe6:	4604      	mov	r4, r0
90016fe8:	4608      	mov	r0, r1
90016fea:	4611      	mov	r1, r2
90016fec:	602b      	str	r3, [r5, #0]
90016fee:	f7ea ff9c 	bl	90001f2a <_fstat>
90016ff2:	1c43      	adds	r3, r0, #1
90016ff4:	d102      	bne.n	90016ffc <_fstat_r+0x1c>
90016ff6:	682b      	ldr	r3, [r5, #0]
90016ff8:	b103      	cbz	r3, 90016ffc <_fstat_r+0x1c>
90016ffa:	6023      	str	r3, [r4, #0]
90016ffc:	bd38      	pop	{r3, r4, r5, pc}
90016ffe:	bf00      	nop
90017000:	2401f510 	.word	0x2401f510

90017004 <_isatty_r>:
90017004:	b538      	push	{r3, r4, r5, lr}
90017006:	4d06      	ldr	r5, [pc, #24]	; (90017020 <_isatty_r+0x1c>)
90017008:	2300      	movs	r3, #0
9001700a:	4604      	mov	r4, r0
9001700c:	4608      	mov	r0, r1
9001700e:	602b      	str	r3, [r5, #0]
90017010:	f7ea ff9b 	bl	90001f4a <_isatty>
90017014:	1c43      	adds	r3, r0, #1
90017016:	d102      	bne.n	9001701e <_isatty_r+0x1a>
90017018:	682b      	ldr	r3, [r5, #0]
9001701a:	b103      	cbz	r3, 9001701e <_isatty_r+0x1a>
9001701c:	6023      	str	r3, [r4, #0]
9001701e:	bd38      	pop	{r3, r4, r5, pc}
90017020:	2401f510 	.word	0x2401f510

90017024 <_realloc_r>:
90017024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90017028:	4680      	mov	r8, r0
9001702a:	4614      	mov	r4, r2
9001702c:	460e      	mov	r6, r1
9001702e:	b921      	cbnz	r1, 9001703a <_realloc_r+0x16>
90017030:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
90017034:	4611      	mov	r1, r2
90017036:	f7fe bd69 	b.w	90015b0c <_malloc_r>
9001703a:	b92a      	cbnz	r2, 90017048 <_realloc_r+0x24>
9001703c:	f7ff fb20 	bl	90016680 <_free_r>
90017040:	4625      	mov	r5, r4
90017042:	4628      	mov	r0, r5
90017044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90017048:	f000 f860 	bl	9001710c <_malloc_usable_size_r>
9001704c:	4284      	cmp	r4, r0
9001704e:	4607      	mov	r7, r0
90017050:	d802      	bhi.n	90017058 <_realloc_r+0x34>
90017052:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
90017056:	d812      	bhi.n	9001707e <_realloc_r+0x5a>
90017058:	4621      	mov	r1, r4
9001705a:	4640      	mov	r0, r8
9001705c:	f7fe fd56 	bl	90015b0c <_malloc_r>
90017060:	4605      	mov	r5, r0
90017062:	2800      	cmp	r0, #0
90017064:	d0ed      	beq.n	90017042 <_realloc_r+0x1e>
90017066:	42bc      	cmp	r4, r7
90017068:	4622      	mov	r2, r4
9001706a:	4631      	mov	r1, r6
9001706c:	bf28      	it	cs
9001706e:	463a      	movcs	r2, r7
90017070:	f7fe fcfb 	bl	90015a6a <memcpy>
90017074:	4631      	mov	r1, r6
90017076:	4640      	mov	r0, r8
90017078:	f7ff fb02 	bl	90016680 <_free_r>
9001707c:	e7e1      	b.n	90017042 <_realloc_r+0x1e>
9001707e:	4635      	mov	r5, r6
90017080:	e7df      	b.n	90017042 <_realloc_r+0x1e>

90017082 <_raise_r>:
90017082:	291f      	cmp	r1, #31
90017084:	b538      	push	{r3, r4, r5, lr}
90017086:	4604      	mov	r4, r0
90017088:	460d      	mov	r5, r1
9001708a:	d904      	bls.n	90017096 <_raise_r+0x14>
9001708c:	2316      	movs	r3, #22
9001708e:	6003      	str	r3, [r0, #0]
90017090:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
90017094:	bd38      	pop	{r3, r4, r5, pc}
90017096:	6c42      	ldr	r2, [r0, #68]	; 0x44
90017098:	b112      	cbz	r2, 900170a0 <_raise_r+0x1e>
9001709a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
9001709e:	b94b      	cbnz	r3, 900170b4 <_raise_r+0x32>
900170a0:	4620      	mov	r0, r4
900170a2:	f000 f831 	bl	90017108 <_getpid_r>
900170a6:	462a      	mov	r2, r5
900170a8:	4601      	mov	r1, r0
900170aa:	4620      	mov	r0, r4
900170ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
900170b0:	f000 b818 	b.w	900170e4 <_kill_r>
900170b4:	2b01      	cmp	r3, #1
900170b6:	d00a      	beq.n	900170ce <_raise_r+0x4c>
900170b8:	1c59      	adds	r1, r3, #1
900170ba:	d103      	bne.n	900170c4 <_raise_r+0x42>
900170bc:	2316      	movs	r3, #22
900170be:	6003      	str	r3, [r0, #0]
900170c0:	2001      	movs	r0, #1
900170c2:	e7e7      	b.n	90017094 <_raise_r+0x12>
900170c4:	2400      	movs	r4, #0
900170c6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
900170ca:	4628      	mov	r0, r5
900170cc:	4798      	blx	r3
900170ce:	2000      	movs	r0, #0
900170d0:	e7e0      	b.n	90017094 <_raise_r+0x12>
	...

900170d4 <raise>:
900170d4:	4b02      	ldr	r3, [pc, #8]	; (900170e0 <raise+0xc>)
900170d6:	4601      	mov	r1, r0
900170d8:	6818      	ldr	r0, [r3, #0]
900170da:	f7ff bfd2 	b.w	90017082 <_raise_r>
900170de:	bf00      	nop
900170e0:	24000530 	.word	0x24000530

900170e4 <_kill_r>:
900170e4:	b538      	push	{r3, r4, r5, lr}
900170e6:	4d07      	ldr	r5, [pc, #28]	; (90017104 <_kill_r+0x20>)
900170e8:	2300      	movs	r3, #0
900170ea:	4604      	mov	r4, r0
900170ec:	4608      	mov	r0, r1
900170ee:	4611      	mov	r1, r2
900170f0:	602b      	str	r3, [r5, #0]
900170f2:	f7ea feb9 	bl	90001e68 <_kill>
900170f6:	1c43      	adds	r3, r0, #1
900170f8:	d102      	bne.n	90017100 <_kill_r+0x1c>
900170fa:	682b      	ldr	r3, [r5, #0]
900170fc:	b103      	cbz	r3, 90017100 <_kill_r+0x1c>
900170fe:	6023      	str	r3, [r4, #0]
90017100:	bd38      	pop	{r3, r4, r5, pc}
90017102:	bf00      	nop
90017104:	2401f510 	.word	0x2401f510

90017108 <_getpid_r>:
90017108:	f7ea bea6 	b.w	90001e58 <_getpid>

9001710c <_malloc_usable_size_r>:
9001710c:	f851 3c04 	ldr.w	r3, [r1, #-4]
90017110:	1f18      	subs	r0, r3, #4
90017112:	2b00      	cmp	r3, #0
90017114:	bfbc      	itt	lt
90017116:	580b      	ldrlt	r3, [r1, r0]
90017118:	18c0      	addlt	r0, r0, r3
9001711a:	4770      	bx	lr

9001711c <_init>:
9001711c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9001711e:	bf00      	nop
90017120:	bcf8      	pop	{r3, r4, r5, r6, r7}
90017122:	bc08      	pop	{r3}
90017124:	469e      	mov	lr, r3
90017126:	4770      	bx	lr

90017128 <_fini>:
90017128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9001712a:	bf00      	nop
9001712c:	bcf8      	pop	{r3, r4, r5, r6, r7}
9001712e:	bc08      	pop	{r3}
90017130:	469e      	mov	lr, r3
90017132:	4770      	bx	lr
