
FreeRTOS_Semaphore_103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004098  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080041a8  080041a8  000141a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004280  08004280  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004280  08004280  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004280  08004280  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004280  08004280  00014280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004284  08004284  00014284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004288  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000107c  20000074  080042fc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010f0  080042fc  000210f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001059f  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002926  00000000  00000000  0003063c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  00032f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd8  00000000  00000000  00033e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188e1  00000000  00000000  00034c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f947  00000000  00000000  0004d521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fba3  00000000  00000000  0005ce68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eca0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000408c  00000000  00000000  000eca5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08004190 	.word	0x08004190

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08004190 	.word	0x08004190

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000090 	.word	0x20000090
 800017c:	20000144 	.word	0x20000144

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b090      	sub	sp, #64	; 0x40
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fa55 	bl	8000634 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f841 	bl	8000210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f885 	bl	800029c <MX_GPIO_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of Binary_Sem */
  osSemaphoreDef(Binary_Sem);
 8000192:	2300      	movs	r3, #0
 8000194:	63bb      	str	r3, [r7, #56]	; 0x38
 8000196:	2300      	movs	r3, #0
 8000198:	63fb      	str	r3, [r7, #60]	; 0x3c
  Binary_SemHandle = osSemaphoreCreate(osSemaphore(Binary_Sem), 1);
 800019a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800019e:	2101      	movs	r1, #1
 80001a0:	4618      	mov	r0, r3
 80001a2:	f001 fc1c 	bl	80019de <osSemaphoreCreate>
 80001a6:	4603      	mov	r3, r0
 80001a8:	4a14      	ldr	r2, [pc, #80]	; (80001fc <main+0x7c>)
 80001aa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task_1 */
  osThreadDef(Task_1, StartTask_1, osPriorityNormal, 0, 128);
 80001ac:	4b14      	ldr	r3, [pc, #80]	; (8000200 <main+0x80>)
 80001ae:	f107 041c 	add.w	r4, r7, #28
 80001b2:	461d      	mov	r5, r3
 80001b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_1Handle = osThreadCreate(osThread(Task_1), NULL);
 80001c0:	f107 031c 	add.w	r3, r7, #28
 80001c4:	2100      	movs	r1, #0
 80001c6:	4618      	mov	r0, r3
 80001c8:	f001 fba9 	bl	800191e <osThreadCreate>
 80001cc:	4603      	mov	r3, r0
 80001ce:	4a0d      	ldr	r2, [pc, #52]	; (8000204 <main+0x84>)
 80001d0:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_2 */
  osThreadDef(Task_2, StartTask_2, osPriorityNormal, 0, 128);
 80001d2:	4b0d      	ldr	r3, [pc, #52]	; (8000208 <main+0x88>)
 80001d4:	463c      	mov	r4, r7
 80001d6:	461d      	mov	r5, r3
 80001d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_2Handle = osThreadCreate(osThread(Task_2), NULL);
 80001e4:	463b      	mov	r3, r7
 80001e6:	2100      	movs	r1, #0
 80001e8:	4618      	mov	r0, r3
 80001ea:	f001 fb98 	bl	800191e <osThreadCreate>
 80001ee:	4603      	mov	r3, r0
 80001f0:	4a06      	ldr	r2, [pc, #24]	; (800020c <main+0x8c>)
 80001f2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80001f4:	f001 fb8c 	bl	8001910 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001f8:	e7fe      	b.n	80001f8 <main+0x78>
 80001fa:	bf00      	nop
 80001fc:	2000034c 	.word	0x2000034c
 8000200:	080041b8 	.word	0x080041b8
 8000204:	20000344 	.word	0x20000344
 8000208:	080041d4 	.word	0x080041d4
 800020c:	20000348 	.word	0x20000348

08000210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b090      	sub	sp, #64	; 0x40
 8000214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000216:	f107 0318 	add.w	r3, r7, #24
 800021a:	2228      	movs	r2, #40	; 0x28
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f003 fef0 	bl	8004004 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
 800022a:	605a      	str	r2, [r3, #4]
 800022c:	609a      	str	r2, [r3, #8]
 800022e:	60da      	str	r2, [r3, #12]
 8000230:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000232:	2301      	movs	r3, #1
 8000234:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000236:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800023a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800023c:	2300      	movs	r3, #0
 800023e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000240:	2301      	movs	r3, #1
 8000242:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000244:	2302      	movs	r3, #2
 8000246:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000248:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800024c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800024e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000252:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000254:	f107 0318 	add.w	r3, r7, #24
 8000258:	4618      	mov	r0, r3
 800025a:	f000 fcb1 	bl	8000bc0 <HAL_RCC_OscConfig>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000264:	f000 f8d8 	bl	8000418 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000268:	230f      	movs	r3, #15
 800026a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800026c:	2302      	movs	r3, #2
 800026e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000270:	2300      	movs	r3, #0
 8000272:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000278:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	2102      	movs	r1, #2
 8000282:	4618      	mov	r0, r3
 8000284:	f000 ff1e 	bl	80010c4 <HAL_RCC_ClockConfig>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800028e:	f000 f8c3 	bl	8000418 <Error_Handler>
  }
}
 8000292:	bf00      	nop
 8000294:	3740      	adds	r7, #64	; 0x40
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
	...

0800029c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b088      	sub	sp, #32
 80002a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a2:	f107 0310 	add.w	r3, r7, #16
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002b0:	4b2e      	ldr	r3, [pc, #184]	; (800036c <MX_GPIO_Init+0xd0>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	4a2d      	ldr	r2, [pc, #180]	; (800036c <MX_GPIO_Init+0xd0>)
 80002b6:	f043 0310 	orr.w	r3, r3, #16
 80002ba:	6193      	str	r3, [r2, #24]
 80002bc:	4b2b      	ldr	r3, [pc, #172]	; (800036c <MX_GPIO_Init+0xd0>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	f003 0310 	and.w	r3, r3, #16
 80002c4:	60fb      	str	r3, [r7, #12]
 80002c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002c8:	4b28      	ldr	r3, [pc, #160]	; (800036c <MX_GPIO_Init+0xd0>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	4a27      	ldr	r2, [pc, #156]	; (800036c <MX_GPIO_Init+0xd0>)
 80002ce:	f043 0320 	orr.w	r3, r3, #32
 80002d2:	6193      	str	r3, [r2, #24]
 80002d4:	4b25      	ldr	r3, [pc, #148]	; (800036c <MX_GPIO_Init+0xd0>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	f003 0320 	and.w	r3, r3, #32
 80002dc:	60bb      	str	r3, [r7, #8]
 80002de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e0:	4b22      	ldr	r3, [pc, #136]	; (800036c <MX_GPIO_Init+0xd0>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	4a21      	ldr	r2, [pc, #132]	; (800036c <MX_GPIO_Init+0xd0>)
 80002e6:	f043 0304 	orr.w	r3, r3, #4
 80002ea:	6193      	str	r3, [r2, #24]
 80002ec:	4b1f      	ldr	r3, [pc, #124]	; (800036c <MX_GPIO_Init+0xd0>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	f003 0304 	and.w	r3, r3, #4
 80002f4:	607b      	str	r3, [r7, #4]
 80002f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002f8:	4b1c      	ldr	r3, [pc, #112]	; (800036c <MX_GPIO_Init+0xd0>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a1b      	ldr	r2, [pc, #108]	; (800036c <MX_GPIO_Init+0xd0>)
 80002fe:	f043 0308 	orr.w	r3, r3, #8
 8000302:	6193      	str	r3, [r2, #24]
 8000304:	4b19      	ldr	r3, [pc, #100]	; (800036c <MX_GPIO_Init+0xd0>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	f003 0308 	and.w	r3, r3, #8
 800030c:	603b      	str	r3, [r7, #0]
 800030e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000310:	2201      	movs	r2, #1
 8000312:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000316:	4816      	ldr	r0, [pc, #88]	; (8000370 <MX_GPIO_Init+0xd4>)
 8000318:	f000 fc22 	bl	8000b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800031c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000320:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000322:	2301      	movs	r3, #1
 8000324:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000326:	2300      	movs	r3, #0
 8000328:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800032a:	2302      	movs	r3, #2
 800032c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800032e:	f107 0310 	add.w	r3, r7, #16
 8000332:	4619      	mov	r1, r3
 8000334:	480e      	ldr	r0, [pc, #56]	; (8000370 <MX_GPIO_Init+0xd4>)
 8000336:	f000 fa8f 	bl	8000858 <HAL_GPIO_Init>

  /*Configure GPIO pin : Btn_Pin */
  GPIO_InitStruct.Pin = Btn_Pin;
 800033a:	2320      	movs	r3, #32
 800033c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800033e:	4b0d      	ldr	r3, [pc, #52]	; (8000374 <MX_GPIO_Init+0xd8>)
 8000340:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000342:	2301      	movs	r3, #1
 8000344:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Btn_GPIO_Port, &GPIO_InitStruct);
 8000346:	f107 0310 	add.w	r3, r7, #16
 800034a:	4619      	mov	r1, r3
 800034c:	480a      	ldr	r0, [pc, #40]	; (8000378 <MX_GPIO_Init+0xdc>)
 800034e:	f000 fa83 	bl	8000858 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8000352:	2200      	movs	r2, #0
 8000354:	2102      	movs	r1, #2
 8000356:	2017      	movs	r0, #23
 8000358:	f000 fa53 	bl	8000802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800035c:	2017      	movs	r0, #23
 800035e:	f000 fa6c 	bl	800083a <HAL_NVIC_EnableIRQ>

}
 8000362:	bf00      	nop
 8000364:	3720      	adds	r7, #32
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	40021000 	.word	0x40021000
 8000370:	40011000 	.word	0x40011000
 8000374:	10210000 	.word	0x10210000
 8000378:	40010c00 	.word	0x40010c00

0800037c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	4603      	mov	r3, r0
 8000384:	80fb      	strh	r3, [r7, #6]
	if(Btn_Pin == GPIO_Pin) // Если нажали на кнопку
 8000386:	88fb      	ldrh	r3, [r7, #6]
 8000388:	2b20      	cmp	r3, #32
 800038a:	d104      	bne.n	8000396 <HAL_GPIO_EXTI_Callback+0x1a>
	{
		osSemaphoreRelease(Binary_SemHandle); // дали отмашку на включение светодиода
 800038c:	4b04      	ldr	r3, [pc, #16]	; (80003a0 <HAL_GPIO_EXTI_Callback+0x24>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4618      	mov	r0, r3
 8000392:	f001 fba5 	bl	8001ae0 <osSemaphoreRelease>
	}
}
 8000396:	bf00      	nop
 8000398:	3708      	adds	r7, #8
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	2000034c 	.word	0x2000034c

080003a4 <StartTask_1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask_1 */
void StartTask_1(void const * argument)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET); // 'On' если Semaphor Release!
 80003ac:	2200      	movs	r2, #0
 80003ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003b2:	4805      	ldr	r0, [pc, #20]	; (80003c8 <StartTask_1+0x24>)
 80003b4:	f000 fbd4 	bl	8000b60 <HAL_GPIO_WritePin>
    osSemaphoreWait(Binary_SemHandle, osWaitForever);
 80003b8:	4b04      	ldr	r3, [pc, #16]	; (80003cc <StartTask_1+0x28>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80003c0:	4618      	mov	r0, r3
 80003c2:	f001 fb3f 	bl	8001a44 <osSemaphoreWait>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET); // 'On' если Semaphor Release!
 80003c6:	e7f1      	b.n	80003ac <StartTask_1+0x8>
 80003c8:	40011000 	.word	0x40011000
 80003cc:	2000034c 	.word	0x2000034c

080003d0 <StartTask_2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_2 */
void StartTask_2(void const * argument)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_2 */
  /* Infinite loop */
  for(;;)
  {
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); // 'Off'
 80003d8:	2201      	movs	r2, #1
 80003da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003de:	4804      	ldr	r0, [pc, #16]	; (80003f0 <StartTask_2+0x20>)
 80003e0:	f000 fbbe 	bl	8000b60 <HAL_GPIO_WritePin>
	    osDelay(2000);
 80003e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003e8:	f001 fae5 	bl	80019b6 <osDelay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); // 'Off'
 80003ec:	e7f4      	b.n	80003d8 <StartTask_2+0x8>
 80003ee:	bf00      	nop
 80003f0:	40011000 	.word	0x40011000

080003f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a04      	ldr	r2, [pc, #16]	; (8000414 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d101      	bne.n	800040a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000406:	f000 f92b 	bl	8000660 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800040a:	bf00      	nop
 800040c:	3708      	adds	r7, #8
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	40000800 	.word	0x40000800

08000418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800041c:	b672      	cpsid	i
}
 800041e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000420:	e7fe      	b.n	8000420 <Error_Handler+0x8>
	...

08000424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b084      	sub	sp, #16
 8000428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800042a:	4b18      	ldr	r3, [pc, #96]	; (800048c <HAL_MspInit+0x68>)
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	4a17      	ldr	r2, [pc, #92]	; (800048c <HAL_MspInit+0x68>)
 8000430:	f043 0301 	orr.w	r3, r3, #1
 8000434:	6193      	str	r3, [r2, #24]
 8000436:	4b15      	ldr	r3, [pc, #84]	; (800048c <HAL_MspInit+0x68>)
 8000438:	699b      	ldr	r3, [r3, #24]
 800043a:	f003 0301 	and.w	r3, r3, #1
 800043e:	60bb      	str	r3, [r7, #8]
 8000440:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000442:	4b12      	ldr	r3, [pc, #72]	; (800048c <HAL_MspInit+0x68>)
 8000444:	69db      	ldr	r3, [r3, #28]
 8000446:	4a11      	ldr	r2, [pc, #68]	; (800048c <HAL_MspInit+0x68>)
 8000448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800044c:	61d3      	str	r3, [r2, #28]
 800044e:	4b0f      	ldr	r3, [pc, #60]	; (800048c <HAL_MspInit+0x68>)
 8000450:	69db      	ldr	r3, [r3, #28]
 8000452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000456:	607b      	str	r3, [r7, #4]
 8000458:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800045a:	2200      	movs	r2, #0
 800045c:	210f      	movs	r1, #15
 800045e:	f06f 0001 	mvn.w	r0, #1
 8000462:	f000 f9ce 	bl	8000802 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000466:	4b0a      	ldr	r3, [pc, #40]	; (8000490 <HAL_MspInit+0x6c>)
 8000468:	685b      	ldr	r3, [r3, #4]
 800046a:	60fb      	str	r3, [r7, #12]
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000472:	60fb      	str	r3, [r7, #12]
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	4a04      	ldr	r2, [pc, #16]	; (8000490 <HAL_MspInit+0x6c>)
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000482:	bf00      	nop
 8000484:	3710      	adds	r7, #16
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	40021000 	.word	0x40021000
 8000490:	40010000 	.word	0x40010000

08000494 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b08e      	sub	sp, #56	; 0x38
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800049c:	2300      	movs	r3, #0
 800049e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80004a0:	2300      	movs	r3, #0
 80004a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80004a4:	2300      	movs	r3, #0
 80004a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80004aa:	4b34      	ldr	r3, [pc, #208]	; (800057c <HAL_InitTick+0xe8>)
 80004ac:	69db      	ldr	r3, [r3, #28]
 80004ae:	4a33      	ldr	r2, [pc, #204]	; (800057c <HAL_InitTick+0xe8>)
 80004b0:	f043 0304 	orr.w	r3, r3, #4
 80004b4:	61d3      	str	r3, [r2, #28]
 80004b6:	4b31      	ldr	r3, [pc, #196]	; (800057c <HAL_InitTick+0xe8>)
 80004b8:	69db      	ldr	r3, [r3, #28]
 80004ba:	f003 0304 	and.w	r3, r3, #4
 80004be:	60fb      	str	r3, [r7, #12]
 80004c0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004c2:	f107 0210 	add.w	r2, r7, #16
 80004c6:	f107 0314 	add.w	r3, r7, #20
 80004ca:	4611      	mov	r1, r2
 80004cc:	4618      	mov	r0, r3
 80004ce:	f000 ff5f 	bl	8001390 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80004d2:	6a3b      	ldr	r3, [r7, #32]
 80004d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80004d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d103      	bne.n	80004e4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80004dc:	f000 ff44 	bl	8001368 <HAL_RCC_GetPCLK1Freq>
 80004e0:	6378      	str	r0, [r7, #52]	; 0x34
 80004e2:	e004      	b.n	80004ee <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80004e4:	f000 ff40 	bl	8001368 <HAL_RCC_GetPCLK1Freq>
 80004e8:	4603      	mov	r3, r0
 80004ea:	005b      	lsls	r3, r3, #1
 80004ec:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80004ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004f0:	4a23      	ldr	r2, [pc, #140]	; (8000580 <HAL_InitTick+0xec>)
 80004f2:	fba2 2303 	umull	r2, r3, r2, r3
 80004f6:	0c9b      	lsrs	r3, r3, #18
 80004f8:	3b01      	subs	r3, #1
 80004fa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80004fc:	4b21      	ldr	r3, [pc, #132]	; (8000584 <HAL_InitTick+0xf0>)
 80004fe:	4a22      	ldr	r2, [pc, #136]	; (8000588 <HAL_InitTick+0xf4>)
 8000500:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000502:	4b20      	ldr	r3, [pc, #128]	; (8000584 <HAL_InitTick+0xf0>)
 8000504:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000508:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800050a:	4a1e      	ldr	r2, [pc, #120]	; (8000584 <HAL_InitTick+0xf0>)
 800050c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800050e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000510:	4b1c      	ldr	r3, [pc, #112]	; (8000584 <HAL_InitTick+0xf0>)
 8000512:	2200      	movs	r2, #0
 8000514:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000516:	4b1b      	ldr	r3, [pc, #108]	; (8000584 <HAL_InitTick+0xf0>)
 8000518:	2200      	movs	r2, #0
 800051a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800051c:	4b19      	ldr	r3, [pc, #100]	; (8000584 <HAL_InitTick+0xf0>)
 800051e:	2200      	movs	r2, #0
 8000520:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000522:	4818      	ldr	r0, [pc, #96]	; (8000584 <HAL_InitTick+0xf0>)
 8000524:	f000 ff82 	bl	800142c <HAL_TIM_Base_Init>
 8000528:	4603      	mov	r3, r0
 800052a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800052e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000532:	2b00      	cmp	r3, #0
 8000534:	d11b      	bne.n	800056e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000536:	4813      	ldr	r0, [pc, #76]	; (8000584 <HAL_InitTick+0xf0>)
 8000538:	f000 ffd0 	bl	80014dc <HAL_TIM_Base_Start_IT>
 800053c:	4603      	mov	r3, r0
 800053e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000542:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000546:	2b00      	cmp	r3, #0
 8000548:	d111      	bne.n	800056e <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800054a:	201e      	movs	r0, #30
 800054c:	f000 f975 	bl	800083a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	2b0f      	cmp	r3, #15
 8000554:	d808      	bhi.n	8000568 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000556:	2200      	movs	r2, #0
 8000558:	6879      	ldr	r1, [r7, #4]
 800055a:	201e      	movs	r0, #30
 800055c:	f000 f951 	bl	8000802 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000560:	4a0a      	ldr	r2, [pc, #40]	; (800058c <HAL_InitTick+0xf8>)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	6013      	str	r3, [r2, #0]
 8000566:	e002      	b.n	800056e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000568:	2301      	movs	r3, #1
 800056a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800056e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000572:	4618      	mov	r0, r3
 8000574:	3738      	adds	r7, #56	; 0x38
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40021000 	.word	0x40021000
 8000580:	431bde83 	.word	0x431bde83
 8000584:	20000350 	.word	0x20000350
 8000588:	40000800 	.word	0x40000800
 800058c:	20000004 	.word	0x20000004

08000590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000594:	e7fe      	b.n	8000594 <NMI_Handler+0x4>

08000596 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000596:	b480      	push	{r7}
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800059a:	e7fe      	b.n	800059a <HardFault_Handler+0x4>

0800059c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <MemManage_Handler+0x4>

080005a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005a2:	b480      	push	{r7}
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005a6:	e7fe      	b.n	80005a6 <BusFault_Handler+0x4>

080005a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005ac:	e7fe      	b.n	80005ac <UsageFault_Handler+0x4>

080005ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005ae:	b480      	push	{r7}
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr

080005ba <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Btn_Pin);
 80005be:	2020      	movs	r0, #32
 80005c0:	f000 fae6 	bl	8000b90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80005cc:	4802      	ldr	r0, [pc, #8]	; (80005d8 <TIM4_IRQHandler+0x10>)
 80005ce:	f000 ffd7 	bl	8001580 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000350 	.word	0x20000350

080005dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr

080005e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e8:	480c      	ldr	r0, [pc, #48]	; (800061c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80005ea:	490d      	ldr	r1, [pc, #52]	; (8000620 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80005ec:	4a0d      	ldr	r2, [pc, #52]	; (8000624 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80005ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f0:	e002      	b.n	80005f8 <LoopCopyDataInit>

080005f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005f6:	3304      	adds	r3, #4

080005f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005fc:	d3f9      	bcc.n	80005f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005fe:	4a0a      	ldr	r2, [pc, #40]	; (8000628 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000600:	4c0a      	ldr	r4, [pc, #40]	; (800062c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000604:	e001      	b.n	800060a <LoopFillZerobss>

08000606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000608:	3204      	adds	r2, #4

0800060a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800060c:	d3fb      	bcc.n	8000606 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800060e:	f7ff ffe5 	bl	80005dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000612:	f003 fcc3 	bl	8003f9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000616:	f7ff fdb3 	bl	8000180 <main>
  bx lr
 800061a:	4770      	bx	lr
  ldr r0, =_sdata
 800061c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000620:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000624:	08004288 	.word	0x08004288
  ldr r2, =_sbss
 8000628:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800062c:	200010f0 	.word	0x200010f0

08000630 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000630:	e7fe      	b.n	8000630 <ADC1_2_IRQHandler>
	...

08000634 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000638:	4b08      	ldr	r3, [pc, #32]	; (800065c <HAL_Init+0x28>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a07      	ldr	r2, [pc, #28]	; (800065c <HAL_Init+0x28>)
 800063e:	f043 0310 	orr.w	r3, r3, #16
 8000642:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000644:	2003      	movs	r0, #3
 8000646:	f000 f8d1 	bl	80007ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800064a:	2000      	movs	r0, #0
 800064c:	f7ff ff22 	bl	8000494 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000650:	f7ff fee8 	bl	8000424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000654:	2300      	movs	r3, #0
}
 8000656:	4618      	mov	r0, r3
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40022000 	.word	0x40022000

08000660 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000664:	4b05      	ldr	r3, [pc, #20]	; (800067c <HAL_IncTick+0x1c>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	461a      	mov	r2, r3
 800066a:	4b05      	ldr	r3, [pc, #20]	; (8000680 <HAL_IncTick+0x20>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4413      	add	r3, r2
 8000670:	4a03      	ldr	r2, [pc, #12]	; (8000680 <HAL_IncTick+0x20>)
 8000672:	6013      	str	r3, [r2, #0]
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr
 800067c:	20000008 	.word	0x20000008
 8000680:	20000398 	.word	0x20000398

08000684 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  return uwTick;
 8000688:	4b02      	ldr	r3, [pc, #8]	; (8000694 <HAL_GetTick+0x10>)
 800068a:	681b      	ldr	r3, [r3, #0]
}
 800068c:	4618      	mov	r0, r3
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr
 8000694:	20000398 	.word	0x20000398

08000698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	f003 0307 	and.w	r3, r3, #7
 80006a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <__NVIC_SetPriorityGrouping+0x44>)
 80006aa:	68db      	ldr	r3, [r3, #12]
 80006ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ae:	68ba      	ldr	r2, [r7, #8]
 80006b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006b4:	4013      	ands	r3, r2
 80006b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ca:	4a04      	ldr	r2, [pc, #16]	; (80006dc <__NVIC_SetPriorityGrouping+0x44>)
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	60d3      	str	r3, [r2, #12]
}
 80006d0:	bf00      	nop
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006e4:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <__NVIC_GetPriorityGrouping+0x18>)
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	0a1b      	lsrs	r3, r3, #8
 80006ea:	f003 0307 	and.w	r3, r3, #7
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070a:	2b00      	cmp	r3, #0
 800070c:	db0b      	blt.n	8000726 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	f003 021f 	and.w	r2, r3, #31
 8000714:	4906      	ldr	r1, [pc, #24]	; (8000730 <__NVIC_EnableIRQ+0x34>)
 8000716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071a:	095b      	lsrs	r3, r3, #5
 800071c:	2001      	movs	r0, #1
 800071e:	fa00 f202 	lsl.w	r2, r0, r2
 8000722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000726:	bf00      	nop
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr
 8000730:	e000e100 	.word	0xe000e100

08000734 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	6039      	str	r1, [r7, #0]
 800073e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000744:	2b00      	cmp	r3, #0
 8000746:	db0a      	blt.n	800075e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	b2da      	uxtb	r2, r3
 800074c:	490c      	ldr	r1, [pc, #48]	; (8000780 <__NVIC_SetPriority+0x4c>)
 800074e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000752:	0112      	lsls	r2, r2, #4
 8000754:	b2d2      	uxtb	r2, r2
 8000756:	440b      	add	r3, r1
 8000758:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800075c:	e00a      	b.n	8000774 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	b2da      	uxtb	r2, r3
 8000762:	4908      	ldr	r1, [pc, #32]	; (8000784 <__NVIC_SetPriority+0x50>)
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	f003 030f 	and.w	r3, r3, #15
 800076a:	3b04      	subs	r3, #4
 800076c:	0112      	lsls	r2, r2, #4
 800076e:	b2d2      	uxtb	r2, r2
 8000770:	440b      	add	r3, r1
 8000772:	761a      	strb	r2, [r3, #24]
}
 8000774:	bf00      	nop
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	e000e100 	.word	0xe000e100
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000788:	b480      	push	{r7}
 800078a:	b089      	sub	sp, #36	; 0x24
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	f003 0307 	and.w	r3, r3, #7
 800079a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800079c:	69fb      	ldr	r3, [r7, #28]
 800079e:	f1c3 0307 	rsb	r3, r3, #7
 80007a2:	2b04      	cmp	r3, #4
 80007a4:	bf28      	it	cs
 80007a6:	2304      	movcs	r3, #4
 80007a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	3304      	adds	r3, #4
 80007ae:	2b06      	cmp	r3, #6
 80007b0:	d902      	bls.n	80007b8 <NVIC_EncodePriority+0x30>
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	3b03      	subs	r3, #3
 80007b6:	e000      	b.n	80007ba <NVIC_EncodePriority+0x32>
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007c0:	69bb      	ldr	r3, [r7, #24]
 80007c2:	fa02 f303 	lsl.w	r3, r2, r3
 80007c6:	43da      	mvns	r2, r3
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	401a      	ands	r2, r3
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	fa01 f303 	lsl.w	r3, r1, r3
 80007da:	43d9      	mvns	r1, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e0:	4313      	orrs	r3, r2
         );
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3724      	adds	r7, #36	; 0x24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr

080007ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f7ff ff4f 	bl	8000698 <__NVIC_SetPriorityGrouping>
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000802:	b580      	push	{r7, lr}
 8000804:	b086      	sub	sp, #24
 8000806:	af00      	add	r7, sp, #0
 8000808:	4603      	mov	r3, r0
 800080a:	60b9      	str	r1, [r7, #8]
 800080c:	607a      	str	r2, [r7, #4]
 800080e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000814:	f7ff ff64 	bl	80006e0 <__NVIC_GetPriorityGrouping>
 8000818:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	68b9      	ldr	r1, [r7, #8]
 800081e:	6978      	ldr	r0, [r7, #20]
 8000820:	f7ff ffb2 	bl	8000788 <NVIC_EncodePriority>
 8000824:	4602      	mov	r2, r0
 8000826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800082a:	4611      	mov	r1, r2
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff ff81 	bl	8000734 <__NVIC_SetPriority>
}
 8000832:	bf00      	nop
 8000834:	3718      	adds	r7, #24
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b082      	sub	sp, #8
 800083e:	af00      	add	r7, sp, #0
 8000840:	4603      	mov	r3, r0
 8000842:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff ff57 	bl	80006fc <__NVIC_EnableIRQ>
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000858:	b480      	push	{r7}
 800085a:	b08b      	sub	sp, #44	; 0x2c
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000866:	2300      	movs	r3, #0
 8000868:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800086a:	e169      	b.n	8000b40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800086c:	2201      	movs	r2, #1
 800086e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000870:	fa02 f303 	lsl.w	r3, r2, r3
 8000874:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	69fa      	ldr	r2, [r7, #28]
 800087c:	4013      	ands	r3, r2
 800087e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000880:	69ba      	ldr	r2, [r7, #24]
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	429a      	cmp	r2, r3
 8000886:	f040 8158 	bne.w	8000b3a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	4a9a      	ldr	r2, [pc, #616]	; (8000af8 <HAL_GPIO_Init+0x2a0>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d05e      	beq.n	8000952 <HAL_GPIO_Init+0xfa>
 8000894:	4a98      	ldr	r2, [pc, #608]	; (8000af8 <HAL_GPIO_Init+0x2a0>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d875      	bhi.n	8000986 <HAL_GPIO_Init+0x12e>
 800089a:	4a98      	ldr	r2, [pc, #608]	; (8000afc <HAL_GPIO_Init+0x2a4>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d058      	beq.n	8000952 <HAL_GPIO_Init+0xfa>
 80008a0:	4a96      	ldr	r2, [pc, #600]	; (8000afc <HAL_GPIO_Init+0x2a4>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d86f      	bhi.n	8000986 <HAL_GPIO_Init+0x12e>
 80008a6:	4a96      	ldr	r2, [pc, #600]	; (8000b00 <HAL_GPIO_Init+0x2a8>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d052      	beq.n	8000952 <HAL_GPIO_Init+0xfa>
 80008ac:	4a94      	ldr	r2, [pc, #592]	; (8000b00 <HAL_GPIO_Init+0x2a8>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d869      	bhi.n	8000986 <HAL_GPIO_Init+0x12e>
 80008b2:	4a94      	ldr	r2, [pc, #592]	; (8000b04 <HAL_GPIO_Init+0x2ac>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d04c      	beq.n	8000952 <HAL_GPIO_Init+0xfa>
 80008b8:	4a92      	ldr	r2, [pc, #584]	; (8000b04 <HAL_GPIO_Init+0x2ac>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d863      	bhi.n	8000986 <HAL_GPIO_Init+0x12e>
 80008be:	4a92      	ldr	r2, [pc, #584]	; (8000b08 <HAL_GPIO_Init+0x2b0>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d046      	beq.n	8000952 <HAL_GPIO_Init+0xfa>
 80008c4:	4a90      	ldr	r2, [pc, #576]	; (8000b08 <HAL_GPIO_Init+0x2b0>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d85d      	bhi.n	8000986 <HAL_GPIO_Init+0x12e>
 80008ca:	2b12      	cmp	r3, #18
 80008cc:	d82a      	bhi.n	8000924 <HAL_GPIO_Init+0xcc>
 80008ce:	2b12      	cmp	r3, #18
 80008d0:	d859      	bhi.n	8000986 <HAL_GPIO_Init+0x12e>
 80008d2:	a201      	add	r2, pc, #4	; (adr r2, 80008d8 <HAL_GPIO_Init+0x80>)
 80008d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d8:	08000953 	.word	0x08000953
 80008dc:	0800092d 	.word	0x0800092d
 80008e0:	0800093f 	.word	0x0800093f
 80008e4:	08000981 	.word	0x08000981
 80008e8:	08000987 	.word	0x08000987
 80008ec:	08000987 	.word	0x08000987
 80008f0:	08000987 	.word	0x08000987
 80008f4:	08000987 	.word	0x08000987
 80008f8:	08000987 	.word	0x08000987
 80008fc:	08000987 	.word	0x08000987
 8000900:	08000987 	.word	0x08000987
 8000904:	08000987 	.word	0x08000987
 8000908:	08000987 	.word	0x08000987
 800090c:	08000987 	.word	0x08000987
 8000910:	08000987 	.word	0x08000987
 8000914:	08000987 	.word	0x08000987
 8000918:	08000987 	.word	0x08000987
 800091c:	08000935 	.word	0x08000935
 8000920:	08000949 	.word	0x08000949
 8000924:	4a79      	ldr	r2, [pc, #484]	; (8000b0c <HAL_GPIO_Init+0x2b4>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d013      	beq.n	8000952 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800092a:	e02c      	b.n	8000986 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	623b      	str	r3, [r7, #32]
          break;
 8000932:	e029      	b.n	8000988 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	3304      	adds	r3, #4
 800093a:	623b      	str	r3, [r7, #32]
          break;
 800093c:	e024      	b.n	8000988 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	68db      	ldr	r3, [r3, #12]
 8000942:	3308      	adds	r3, #8
 8000944:	623b      	str	r3, [r7, #32]
          break;
 8000946:	e01f      	b.n	8000988 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	330c      	adds	r3, #12
 800094e:	623b      	str	r3, [r7, #32]
          break;
 8000950:	e01a      	b.n	8000988 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	689b      	ldr	r3, [r3, #8]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d102      	bne.n	8000960 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800095a:	2304      	movs	r3, #4
 800095c:	623b      	str	r3, [r7, #32]
          break;
 800095e:	e013      	b.n	8000988 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	2b01      	cmp	r3, #1
 8000966:	d105      	bne.n	8000974 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000968:	2308      	movs	r3, #8
 800096a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	69fa      	ldr	r2, [r7, #28]
 8000970:	611a      	str	r2, [r3, #16]
          break;
 8000972:	e009      	b.n	8000988 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000974:	2308      	movs	r3, #8
 8000976:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	69fa      	ldr	r2, [r7, #28]
 800097c:	615a      	str	r2, [r3, #20]
          break;
 800097e:	e003      	b.n	8000988 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000980:	2300      	movs	r3, #0
 8000982:	623b      	str	r3, [r7, #32]
          break;
 8000984:	e000      	b.n	8000988 <HAL_GPIO_Init+0x130>
          break;
 8000986:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000988:	69bb      	ldr	r3, [r7, #24]
 800098a:	2bff      	cmp	r3, #255	; 0xff
 800098c:	d801      	bhi.n	8000992 <HAL_GPIO_Init+0x13a>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	e001      	b.n	8000996 <HAL_GPIO_Init+0x13e>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	3304      	adds	r3, #4
 8000996:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	2bff      	cmp	r3, #255	; 0xff
 800099c:	d802      	bhi.n	80009a4 <HAL_GPIO_Init+0x14c>
 800099e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	e002      	b.n	80009aa <HAL_GPIO_Init+0x152>
 80009a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a6:	3b08      	subs	r3, #8
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	210f      	movs	r1, #15
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	fa01 f303 	lsl.w	r3, r1, r3
 80009b8:	43db      	mvns	r3, r3
 80009ba:	401a      	ands	r2, r3
 80009bc:	6a39      	ldr	r1, [r7, #32]
 80009be:	693b      	ldr	r3, [r7, #16]
 80009c0:	fa01 f303 	lsl.w	r3, r1, r3
 80009c4:	431a      	orrs	r2, r3
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	f000 80b1 	beq.w	8000b3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009d8:	4b4d      	ldr	r3, [pc, #308]	; (8000b10 <HAL_GPIO_Init+0x2b8>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	4a4c      	ldr	r2, [pc, #304]	; (8000b10 <HAL_GPIO_Init+0x2b8>)
 80009de:	f043 0301 	orr.w	r3, r3, #1
 80009e2:	6193      	str	r3, [r2, #24]
 80009e4:	4b4a      	ldr	r3, [pc, #296]	; (8000b10 <HAL_GPIO_Init+0x2b8>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	60bb      	str	r3, [r7, #8]
 80009ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009f0:	4a48      	ldr	r2, [pc, #288]	; (8000b14 <HAL_GPIO_Init+0x2bc>)
 80009f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f4:	089b      	lsrs	r3, r3, #2
 80009f6:	3302      	adds	r3, #2
 80009f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a00:	f003 0303 	and.w	r3, r3, #3
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	220f      	movs	r2, #15
 8000a08:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0c:	43db      	mvns	r3, r3
 8000a0e:	68fa      	ldr	r2, [r7, #12]
 8000a10:	4013      	ands	r3, r2
 8000a12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4a40      	ldr	r2, [pc, #256]	; (8000b18 <HAL_GPIO_Init+0x2c0>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d013      	beq.n	8000a44 <HAL_GPIO_Init+0x1ec>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a3f      	ldr	r2, [pc, #252]	; (8000b1c <HAL_GPIO_Init+0x2c4>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d00d      	beq.n	8000a40 <HAL_GPIO_Init+0x1e8>
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a3e      	ldr	r2, [pc, #248]	; (8000b20 <HAL_GPIO_Init+0x2c8>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d007      	beq.n	8000a3c <HAL_GPIO_Init+0x1e4>
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	4a3d      	ldr	r2, [pc, #244]	; (8000b24 <HAL_GPIO_Init+0x2cc>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d101      	bne.n	8000a38 <HAL_GPIO_Init+0x1e0>
 8000a34:	2303      	movs	r3, #3
 8000a36:	e006      	b.n	8000a46 <HAL_GPIO_Init+0x1ee>
 8000a38:	2304      	movs	r3, #4
 8000a3a:	e004      	b.n	8000a46 <HAL_GPIO_Init+0x1ee>
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	e002      	b.n	8000a46 <HAL_GPIO_Init+0x1ee>
 8000a40:	2301      	movs	r3, #1
 8000a42:	e000      	b.n	8000a46 <HAL_GPIO_Init+0x1ee>
 8000a44:	2300      	movs	r3, #0
 8000a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a48:	f002 0203 	and.w	r2, r2, #3
 8000a4c:	0092      	lsls	r2, r2, #2
 8000a4e:	4093      	lsls	r3, r2
 8000a50:	68fa      	ldr	r2, [r7, #12]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a56:	492f      	ldr	r1, [pc, #188]	; (8000b14 <HAL_GPIO_Init+0x2bc>)
 8000a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a5a:	089b      	lsrs	r3, r3, #2
 8000a5c:	3302      	adds	r3, #2
 8000a5e:	68fa      	ldr	r2, [r7, #12]
 8000a60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d006      	beq.n	8000a7e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a70:	4b2d      	ldr	r3, [pc, #180]	; (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	492c      	ldr	r1, [pc, #176]	; (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000a76:	69bb      	ldr	r3, [r7, #24]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	600b      	str	r3, [r1, #0]
 8000a7c:	e006      	b.n	8000a8c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a7e:	4b2a      	ldr	r3, [pc, #168]	; (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	43db      	mvns	r3, r3
 8000a86:	4928      	ldr	r1, [pc, #160]	; (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000a88:	4013      	ands	r3, r2
 8000a8a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d006      	beq.n	8000aa6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a98:	4b23      	ldr	r3, [pc, #140]	; (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000a9a:	685a      	ldr	r2, [r3, #4]
 8000a9c:	4922      	ldr	r1, [pc, #136]	; (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	604b      	str	r3, [r1, #4]
 8000aa4:	e006      	b.n	8000ab4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000aa6:	4b20      	ldr	r3, [pc, #128]	; (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000aa8:	685a      	ldr	r2, [r3, #4]
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	43db      	mvns	r3, r3
 8000aae:	491e      	ldr	r1, [pc, #120]	; (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d006      	beq.n	8000ace <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ac0:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000ac2:	689a      	ldr	r2, [r3, #8]
 8000ac4:	4918      	ldr	r1, [pc, #96]	; (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	608b      	str	r3, [r1, #8]
 8000acc:	e006      	b.n	8000adc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ace:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000ad0:	689a      	ldr	r2, [r3, #8]
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	43db      	mvns	r3, r3
 8000ad6:	4914      	ldr	r1, [pc, #80]	; (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000ad8:	4013      	ands	r3, r2
 8000ada:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d021      	beq.n	8000b2c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000aea:	68da      	ldr	r2, [r3, #12]
 8000aec:	490e      	ldr	r1, [pc, #56]	; (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	60cb      	str	r3, [r1, #12]
 8000af4:	e021      	b.n	8000b3a <HAL_GPIO_Init+0x2e2>
 8000af6:	bf00      	nop
 8000af8:	10320000 	.word	0x10320000
 8000afc:	10310000 	.word	0x10310000
 8000b00:	10220000 	.word	0x10220000
 8000b04:	10210000 	.word	0x10210000
 8000b08:	10120000 	.word	0x10120000
 8000b0c:	10110000 	.word	0x10110000
 8000b10:	40021000 	.word	0x40021000
 8000b14:	40010000 	.word	0x40010000
 8000b18:	40010800 	.word	0x40010800
 8000b1c:	40010c00 	.word	0x40010c00
 8000b20:	40011000 	.word	0x40011000
 8000b24:	40011400 	.word	0x40011400
 8000b28:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b2c:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <HAL_GPIO_Init+0x304>)
 8000b2e:	68da      	ldr	r2, [r3, #12]
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	43db      	mvns	r3, r3
 8000b34:	4909      	ldr	r1, [pc, #36]	; (8000b5c <HAL_GPIO_Init+0x304>)
 8000b36:	4013      	ands	r3, r2
 8000b38:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b46:	fa22 f303 	lsr.w	r3, r2, r3
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	f47f ae8e 	bne.w	800086c <HAL_GPIO_Init+0x14>
  }
}
 8000b50:	bf00      	nop
 8000b52:	bf00      	nop
 8000b54:	372c      	adds	r7, #44	; 0x2c
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr
 8000b5c:	40010400 	.word	0x40010400

08000b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	460b      	mov	r3, r1
 8000b6a:	807b      	strh	r3, [r7, #2]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b70:	787b      	ldrb	r3, [r7, #1]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d003      	beq.n	8000b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b76:	887a      	ldrh	r2, [r7, #2]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b7c:	e003      	b.n	8000b86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b7e:	887b      	ldrh	r3, [r7, #2]
 8000b80:	041a      	lsls	r2, r3, #16
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	611a      	str	r2, [r3, #16]
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr

08000b90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000b9a:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b9c:	695a      	ldr	r2, [r3, #20]
 8000b9e:	88fb      	ldrh	r3, [r7, #6]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d006      	beq.n	8000bb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ba6:	4a05      	ldr	r2, [pc, #20]	; (8000bbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ba8:	88fb      	ldrh	r3, [r7, #6]
 8000baa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000bac:	88fb      	ldrh	r3, [r7, #6]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff fbe4 	bl	800037c <HAL_GPIO_EXTI_Callback>
  }
}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40010400 	.word	0x40010400

08000bc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d101      	bne.n	8000bd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e272      	b.n	80010b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	f000 8087 	beq.w	8000cee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000be0:	4b92      	ldr	r3, [pc, #584]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f003 030c 	and.w	r3, r3, #12
 8000be8:	2b04      	cmp	r3, #4
 8000bea:	d00c      	beq.n	8000c06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bec:	4b8f      	ldr	r3, [pc, #572]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f003 030c 	and.w	r3, r3, #12
 8000bf4:	2b08      	cmp	r3, #8
 8000bf6:	d112      	bne.n	8000c1e <HAL_RCC_OscConfig+0x5e>
 8000bf8:	4b8c      	ldr	r3, [pc, #560]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c04:	d10b      	bne.n	8000c1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c06:	4b89      	ldr	r3, [pc, #548]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d06c      	beq.n	8000cec <HAL_RCC_OscConfig+0x12c>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d168      	bne.n	8000cec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e24c      	b.n	80010b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c26:	d106      	bne.n	8000c36 <HAL_RCC_OscConfig+0x76>
 8000c28:	4b80      	ldr	r3, [pc, #512]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a7f      	ldr	r2, [pc, #508]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c32:	6013      	str	r3, [r2, #0]
 8000c34:	e02e      	b.n	8000c94 <HAL_RCC_OscConfig+0xd4>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d10c      	bne.n	8000c58 <HAL_RCC_OscConfig+0x98>
 8000c3e:	4b7b      	ldr	r3, [pc, #492]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a7a      	ldr	r2, [pc, #488]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c48:	6013      	str	r3, [r2, #0]
 8000c4a:	4b78      	ldr	r3, [pc, #480]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a77      	ldr	r2, [pc, #476]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c54:	6013      	str	r3, [r2, #0]
 8000c56:	e01d      	b.n	8000c94 <HAL_RCC_OscConfig+0xd4>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c60:	d10c      	bne.n	8000c7c <HAL_RCC_OscConfig+0xbc>
 8000c62:	4b72      	ldr	r3, [pc, #456]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a71      	ldr	r2, [pc, #452]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c6c:	6013      	str	r3, [r2, #0]
 8000c6e:	4b6f      	ldr	r3, [pc, #444]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a6e      	ldr	r2, [pc, #440]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c78:	6013      	str	r3, [r2, #0]
 8000c7a:	e00b      	b.n	8000c94 <HAL_RCC_OscConfig+0xd4>
 8000c7c:	4b6b      	ldr	r3, [pc, #428]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a6a      	ldr	r2, [pc, #424]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c86:	6013      	str	r3, [r2, #0]
 8000c88:	4b68      	ldr	r3, [pc, #416]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a67      	ldr	r2, [pc, #412]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d013      	beq.n	8000cc4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c9c:	f7ff fcf2 	bl	8000684 <HAL_GetTick>
 8000ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ca2:	e008      	b.n	8000cb6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ca4:	f7ff fcee 	bl	8000684 <HAL_GetTick>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	2b64      	cmp	r3, #100	; 0x64
 8000cb0:	d901      	bls.n	8000cb6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	e200      	b.n	80010b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cb6:	4b5d      	ldr	r3, [pc, #372]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d0f0      	beq.n	8000ca4 <HAL_RCC_OscConfig+0xe4>
 8000cc2:	e014      	b.n	8000cee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc4:	f7ff fcde 	bl	8000684 <HAL_GetTick>
 8000cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cca:	e008      	b.n	8000cde <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ccc:	f7ff fcda 	bl	8000684 <HAL_GetTick>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	2b64      	cmp	r3, #100	; 0x64
 8000cd8:	d901      	bls.n	8000cde <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	e1ec      	b.n	80010b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cde:	4b53      	ldr	r3, [pc, #332]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d1f0      	bne.n	8000ccc <HAL_RCC_OscConfig+0x10c>
 8000cea:	e000      	b.n	8000cee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d063      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cfa:	4b4c      	ldr	r3, [pc, #304]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f003 030c 	and.w	r3, r3, #12
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d00b      	beq.n	8000d1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d06:	4b49      	ldr	r3, [pc, #292]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f003 030c 	and.w	r3, r3, #12
 8000d0e:	2b08      	cmp	r3, #8
 8000d10:	d11c      	bne.n	8000d4c <HAL_RCC_OscConfig+0x18c>
 8000d12:	4b46      	ldr	r3, [pc, #280]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d116      	bne.n	8000d4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d1e:	4b43      	ldr	r3, [pc, #268]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d005      	beq.n	8000d36 <HAL_RCC_OscConfig+0x176>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	691b      	ldr	r3, [r3, #16]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d001      	beq.n	8000d36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e1c0      	b.n	80010b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d36:	4b3d      	ldr	r3, [pc, #244]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	695b      	ldr	r3, [r3, #20]
 8000d42:	00db      	lsls	r3, r3, #3
 8000d44:	4939      	ldr	r1, [pc, #228]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000d46:	4313      	orrs	r3, r2
 8000d48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d4a:	e03a      	b.n	8000dc2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	691b      	ldr	r3, [r3, #16]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d020      	beq.n	8000d96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d54:	4b36      	ldr	r3, [pc, #216]	; (8000e30 <HAL_RCC_OscConfig+0x270>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d5a:	f7ff fc93 	bl	8000684 <HAL_GetTick>
 8000d5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d60:	e008      	b.n	8000d74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d62:	f7ff fc8f 	bl	8000684 <HAL_GetTick>
 8000d66:	4602      	mov	r2, r0
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d901      	bls.n	8000d74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d70:	2303      	movs	r3, #3
 8000d72:	e1a1      	b.n	80010b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d74:	4b2d      	ldr	r3, [pc, #180]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f003 0302 	and.w	r3, r3, #2
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d0f0      	beq.n	8000d62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d80:	4b2a      	ldr	r3, [pc, #168]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	695b      	ldr	r3, [r3, #20]
 8000d8c:	00db      	lsls	r3, r3, #3
 8000d8e:	4927      	ldr	r1, [pc, #156]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000d90:	4313      	orrs	r3, r2
 8000d92:	600b      	str	r3, [r1, #0]
 8000d94:	e015      	b.n	8000dc2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d96:	4b26      	ldr	r3, [pc, #152]	; (8000e30 <HAL_RCC_OscConfig+0x270>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d9c:	f7ff fc72 	bl	8000684 <HAL_GetTick>
 8000da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000da2:	e008      	b.n	8000db6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000da4:	f7ff fc6e 	bl	8000684 <HAL_GetTick>
 8000da8:	4602      	mov	r2, r0
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d901      	bls.n	8000db6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000db2:	2303      	movs	r3, #3
 8000db4:	e180      	b.n	80010b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000db6:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d1f0      	bne.n	8000da4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0308 	and.w	r3, r3, #8
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d03a      	beq.n	8000e44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	699b      	ldr	r3, [r3, #24]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d019      	beq.n	8000e0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dd6:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <HAL_RCC_OscConfig+0x274>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ddc:	f7ff fc52 	bl	8000684 <HAL_GetTick>
 8000de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000de2:	e008      	b.n	8000df6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000de4:	f7ff fc4e 	bl	8000684 <HAL_GetTick>
 8000de8:	4602      	mov	r2, r0
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d901      	bls.n	8000df6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000df2:	2303      	movs	r3, #3
 8000df4:	e160      	b.n	80010b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000df6:	4b0d      	ldr	r3, [pc, #52]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dfa:	f003 0302 	and.w	r3, r3, #2
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d0f0      	beq.n	8000de4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e02:	2001      	movs	r0, #1
 8000e04:	f000 faf4 	bl	80013f0 <RCC_Delay>
 8000e08:	e01c      	b.n	8000e44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <HAL_RCC_OscConfig+0x274>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e10:	f7ff fc38 	bl	8000684 <HAL_GetTick>
 8000e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e16:	e00f      	b.n	8000e38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e18:	f7ff fc34 	bl	8000684 <HAL_GetTick>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d908      	bls.n	8000e38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e26:	2303      	movs	r3, #3
 8000e28:	e146      	b.n	80010b8 <HAL_RCC_OscConfig+0x4f8>
 8000e2a:	bf00      	nop
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	42420000 	.word	0x42420000
 8000e34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e38:	4b92      	ldr	r3, [pc, #584]	; (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3c:	f003 0302 	and.w	r3, r3, #2
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d1e9      	bne.n	8000e18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f003 0304 	and.w	r3, r3, #4
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	f000 80a6 	beq.w	8000f9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e52:	2300      	movs	r3, #0
 8000e54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e56:	4b8b      	ldr	r3, [pc, #556]	; (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d10d      	bne.n	8000e7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e62:	4b88      	ldr	r3, [pc, #544]	; (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000e64:	69db      	ldr	r3, [r3, #28]
 8000e66:	4a87      	ldr	r2, [pc, #540]	; (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e6c:	61d3      	str	r3, [r2, #28]
 8000e6e:	4b85      	ldr	r3, [pc, #532]	; (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000e70:	69db      	ldr	r3, [r3, #28]
 8000e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e7e:	4b82      	ldr	r3, [pc, #520]	; (8001088 <HAL_RCC_OscConfig+0x4c8>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d118      	bne.n	8000ebc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e8a:	4b7f      	ldr	r3, [pc, #508]	; (8001088 <HAL_RCC_OscConfig+0x4c8>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a7e      	ldr	r2, [pc, #504]	; (8001088 <HAL_RCC_OscConfig+0x4c8>)
 8000e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e96:	f7ff fbf5 	bl	8000684 <HAL_GetTick>
 8000e9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e9c:	e008      	b.n	8000eb0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e9e:	f7ff fbf1 	bl	8000684 <HAL_GetTick>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	1ad3      	subs	r3, r2, r3
 8000ea8:	2b64      	cmp	r3, #100	; 0x64
 8000eaa:	d901      	bls.n	8000eb0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000eac:	2303      	movs	r3, #3
 8000eae:	e103      	b.n	80010b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eb0:	4b75      	ldr	r3, [pc, #468]	; (8001088 <HAL_RCC_OscConfig+0x4c8>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d0f0      	beq.n	8000e9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d106      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x312>
 8000ec4:	4b6f      	ldr	r3, [pc, #444]	; (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000ec6:	6a1b      	ldr	r3, [r3, #32]
 8000ec8:	4a6e      	ldr	r2, [pc, #440]	; (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000eca:	f043 0301 	orr.w	r3, r3, #1
 8000ece:	6213      	str	r3, [r2, #32]
 8000ed0:	e02d      	b.n	8000f2e <HAL_RCC_OscConfig+0x36e>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d10c      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x334>
 8000eda:	4b6a      	ldr	r3, [pc, #424]	; (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000edc:	6a1b      	ldr	r3, [r3, #32]
 8000ede:	4a69      	ldr	r2, [pc, #420]	; (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000ee0:	f023 0301 	bic.w	r3, r3, #1
 8000ee4:	6213      	str	r3, [r2, #32]
 8000ee6:	4b67      	ldr	r3, [pc, #412]	; (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000ee8:	6a1b      	ldr	r3, [r3, #32]
 8000eea:	4a66      	ldr	r2, [pc, #408]	; (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000eec:	f023 0304 	bic.w	r3, r3, #4
 8000ef0:	6213      	str	r3, [r2, #32]
 8000ef2:	e01c      	b.n	8000f2e <HAL_RCC_OscConfig+0x36e>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	2b05      	cmp	r3, #5
 8000efa:	d10c      	bne.n	8000f16 <HAL_RCC_OscConfig+0x356>
 8000efc:	4b61      	ldr	r3, [pc, #388]	; (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000efe:	6a1b      	ldr	r3, [r3, #32]
 8000f00:	4a60      	ldr	r2, [pc, #384]	; (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000f02:	f043 0304 	orr.w	r3, r3, #4
 8000f06:	6213      	str	r3, [r2, #32]
 8000f08:	4b5e      	ldr	r3, [pc, #376]	; (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000f0a:	6a1b      	ldr	r3, [r3, #32]
 8000f0c:	4a5d      	ldr	r2, [pc, #372]	; (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000f0e:	f043 0301 	orr.w	r3, r3, #1
 8000f12:	6213      	str	r3, [r2, #32]
 8000f14:	e00b      	b.n	8000f2e <HAL_RCC_OscConfig+0x36e>
 8000f16:	4b5b      	ldr	r3, [pc, #364]	; (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000f18:	6a1b      	ldr	r3, [r3, #32]
 8000f1a:	4a5a      	ldr	r2, [pc, #360]	; (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000f1c:	f023 0301 	bic.w	r3, r3, #1
 8000f20:	6213      	str	r3, [r2, #32]
 8000f22:	4b58      	ldr	r3, [pc, #352]	; (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000f24:	6a1b      	ldr	r3, [r3, #32]
 8000f26:	4a57      	ldr	r2, [pc, #348]	; (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000f28:	f023 0304 	bic.w	r3, r3, #4
 8000f2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	68db      	ldr	r3, [r3, #12]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d015      	beq.n	8000f62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f36:	f7ff fba5 	bl	8000684 <HAL_GetTick>
 8000f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f3c:	e00a      	b.n	8000f54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f3e:	f7ff fba1 	bl	8000684 <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d901      	bls.n	8000f54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f50:	2303      	movs	r3, #3
 8000f52:	e0b1      	b.n	80010b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f54:	4b4b      	ldr	r3, [pc, #300]	; (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000f56:	6a1b      	ldr	r3, [r3, #32]
 8000f58:	f003 0302 	and.w	r3, r3, #2
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d0ee      	beq.n	8000f3e <HAL_RCC_OscConfig+0x37e>
 8000f60:	e014      	b.n	8000f8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f62:	f7ff fb8f 	bl	8000684 <HAL_GetTick>
 8000f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f68:	e00a      	b.n	8000f80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f6a:	f7ff fb8b 	bl	8000684 <HAL_GetTick>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d901      	bls.n	8000f80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	e09b      	b.n	80010b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f80:	4b40      	ldr	r3, [pc, #256]	; (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000f82:	6a1b      	ldr	r3, [r3, #32]
 8000f84:	f003 0302 	and.w	r3, r3, #2
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d1ee      	bne.n	8000f6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f8c:	7dfb      	ldrb	r3, [r7, #23]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d105      	bne.n	8000f9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f92:	4b3c      	ldr	r3, [pc, #240]	; (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	4a3b      	ldr	r2, [pc, #236]	; (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000f98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f000 8087 	beq.w	80010b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fa8:	4b36      	ldr	r3, [pc, #216]	; (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 030c 	and.w	r3, r3, #12
 8000fb0:	2b08      	cmp	r3, #8
 8000fb2:	d061      	beq.n	8001078 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	69db      	ldr	r3, [r3, #28]
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d146      	bne.n	800104a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fbc:	4b33      	ldr	r3, [pc, #204]	; (800108c <HAL_RCC_OscConfig+0x4cc>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc2:	f7ff fb5f 	bl	8000684 <HAL_GetTick>
 8000fc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fc8:	e008      	b.n	8000fdc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fca:	f7ff fb5b 	bl	8000684 <HAL_GetTick>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d901      	bls.n	8000fdc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	e06d      	b.n	80010b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fdc:	4b29      	ldr	r3, [pc, #164]	; (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d1f0      	bne.n	8000fca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6a1b      	ldr	r3, [r3, #32]
 8000fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ff0:	d108      	bne.n	8001004 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ff2:	4b24      	ldr	r3, [pc, #144]	; (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	4921      	ldr	r1, [pc, #132]	; (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8001000:	4313      	orrs	r3, r2
 8001002:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001004:	4b1f      	ldr	r3, [pc, #124]	; (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a19      	ldr	r1, [r3, #32]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001014:	430b      	orrs	r3, r1
 8001016:	491b      	ldr	r1, [pc, #108]	; (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8001018:	4313      	orrs	r3, r2
 800101a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800101c:	4b1b      	ldr	r3, [pc, #108]	; (800108c <HAL_RCC_OscConfig+0x4cc>)
 800101e:	2201      	movs	r2, #1
 8001020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001022:	f7ff fb2f 	bl	8000684 <HAL_GetTick>
 8001026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001028:	e008      	b.n	800103c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800102a:	f7ff fb2b 	bl	8000684 <HAL_GetTick>
 800102e:	4602      	mov	r2, r0
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d901      	bls.n	800103c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001038:	2303      	movs	r3, #3
 800103a:	e03d      	b.n	80010b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800103c:	4b11      	ldr	r3, [pc, #68]	; (8001084 <HAL_RCC_OscConfig+0x4c4>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d0f0      	beq.n	800102a <HAL_RCC_OscConfig+0x46a>
 8001048:	e035      	b.n	80010b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800104a:	4b10      	ldr	r3, [pc, #64]	; (800108c <HAL_RCC_OscConfig+0x4cc>)
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001050:	f7ff fb18 	bl	8000684 <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001058:	f7ff fb14 	bl	8000684 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b02      	cmp	r3, #2
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e026      	b.n	80010b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <HAL_RCC_OscConfig+0x4c4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1f0      	bne.n	8001058 <HAL_RCC_OscConfig+0x498>
 8001076:	e01e      	b.n	80010b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	69db      	ldr	r3, [r3, #28]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d107      	bne.n	8001090 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e019      	b.n	80010b8 <HAL_RCC_OscConfig+0x4f8>
 8001084:	40021000 	.word	0x40021000
 8001088:	40007000 	.word	0x40007000
 800108c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001090:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <HAL_RCC_OscConfig+0x500>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a1b      	ldr	r3, [r3, #32]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d106      	bne.n	80010b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d001      	beq.n	80010b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e000      	b.n	80010b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80010b6:	2300      	movs	r3, #0
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40021000 	.word	0x40021000

080010c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d101      	bne.n	80010d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e0d0      	b.n	800127a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010d8:	4b6a      	ldr	r3, [pc, #424]	; (8001284 <HAL_RCC_ClockConfig+0x1c0>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 0307 	and.w	r3, r3, #7
 80010e0:	683a      	ldr	r2, [r7, #0]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d910      	bls.n	8001108 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010e6:	4b67      	ldr	r3, [pc, #412]	; (8001284 <HAL_RCC_ClockConfig+0x1c0>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f023 0207 	bic.w	r2, r3, #7
 80010ee:	4965      	ldr	r1, [pc, #404]	; (8001284 <HAL_RCC_ClockConfig+0x1c0>)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010f6:	4b63      	ldr	r3, [pc, #396]	; (8001284 <HAL_RCC_ClockConfig+0x1c0>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	683a      	ldr	r2, [r7, #0]
 8001100:	429a      	cmp	r2, r3
 8001102:	d001      	beq.n	8001108 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e0b8      	b.n	800127a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	2b00      	cmp	r3, #0
 8001112:	d020      	beq.n	8001156 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0304 	and.w	r3, r3, #4
 800111c:	2b00      	cmp	r3, #0
 800111e:	d005      	beq.n	800112c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001120:	4b59      	ldr	r3, [pc, #356]	; (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	4a58      	ldr	r2, [pc, #352]	; (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 8001126:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800112a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0308 	and.w	r3, r3, #8
 8001134:	2b00      	cmp	r3, #0
 8001136:	d005      	beq.n	8001144 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001138:	4b53      	ldr	r3, [pc, #332]	; (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	4a52      	ldr	r2, [pc, #328]	; (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 800113e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001142:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001144:	4b50      	ldr	r3, [pc, #320]	; (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	494d      	ldr	r1, [pc, #308]	; (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 8001152:	4313      	orrs	r3, r2
 8001154:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	2b00      	cmp	r3, #0
 8001160:	d040      	beq.n	80011e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d107      	bne.n	800117a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116a:	4b47      	ldr	r3, [pc, #284]	; (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d115      	bne.n	80011a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e07f      	b.n	800127a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2b02      	cmp	r3, #2
 8001180:	d107      	bne.n	8001192 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001182:	4b41      	ldr	r3, [pc, #260]	; (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d109      	bne.n	80011a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e073      	b.n	800127a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001192:	4b3d      	ldr	r3, [pc, #244]	; (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e06b      	b.n	800127a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011a2:	4b39      	ldr	r3, [pc, #228]	; (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f023 0203 	bic.w	r2, r3, #3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	4936      	ldr	r1, [pc, #216]	; (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 80011b0:	4313      	orrs	r3, r2
 80011b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011b4:	f7ff fa66 	bl	8000684 <HAL_GetTick>
 80011b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ba:	e00a      	b.n	80011d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011bc:	f7ff fa62 	bl	8000684 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e053      	b.n	800127a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011d2:	4b2d      	ldr	r3, [pc, #180]	; (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 020c 	and.w	r2, r3, #12
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d1eb      	bne.n	80011bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011e4:	4b27      	ldr	r3, [pc, #156]	; (8001284 <HAL_RCC_ClockConfig+0x1c0>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0307 	and.w	r3, r3, #7
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d210      	bcs.n	8001214 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011f2:	4b24      	ldr	r3, [pc, #144]	; (8001284 <HAL_RCC_ClockConfig+0x1c0>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f023 0207 	bic.w	r2, r3, #7
 80011fa:	4922      	ldr	r1, [pc, #136]	; (8001284 <HAL_RCC_ClockConfig+0x1c0>)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	4313      	orrs	r3, r2
 8001200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001202:	4b20      	ldr	r3, [pc, #128]	; (8001284 <HAL_RCC_ClockConfig+0x1c0>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	683a      	ldr	r2, [r7, #0]
 800120c:	429a      	cmp	r2, r3
 800120e:	d001      	beq.n	8001214 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e032      	b.n	800127a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	2b00      	cmp	r3, #0
 800121e:	d008      	beq.n	8001232 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001220:	4b19      	ldr	r3, [pc, #100]	; (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	4916      	ldr	r1, [pc, #88]	; (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 800122e:	4313      	orrs	r3, r2
 8001230:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0308 	and.w	r3, r3, #8
 800123a:	2b00      	cmp	r3, #0
 800123c:	d009      	beq.n	8001252 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800123e:	4b12      	ldr	r3, [pc, #72]	; (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	490e      	ldr	r1, [pc, #56]	; (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 800124e:	4313      	orrs	r3, r2
 8001250:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001252:	f000 f821 	bl	8001298 <HAL_RCC_GetSysClockFreq>
 8001256:	4602      	mov	r2, r0
 8001258:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	091b      	lsrs	r3, r3, #4
 800125e:	f003 030f 	and.w	r3, r3, #15
 8001262:	490a      	ldr	r1, [pc, #40]	; (800128c <HAL_RCC_ClockConfig+0x1c8>)
 8001264:	5ccb      	ldrb	r3, [r1, r3]
 8001266:	fa22 f303 	lsr.w	r3, r2, r3
 800126a:	4a09      	ldr	r2, [pc, #36]	; (8001290 <HAL_RCC_ClockConfig+0x1cc>)
 800126c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <HAL_RCC_ClockConfig+0x1d0>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff f90e 	bl	8000494 <HAL_InitTick>

  return HAL_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40022000 	.word	0x40022000
 8001288:	40021000 	.word	0x40021000
 800128c:	08004208 	.word	0x08004208
 8001290:	20000000 	.word	0x20000000
 8001294:	20000004 	.word	0x20000004

08001298 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001298:	b490      	push	{r4, r7}
 800129a:	b08a      	sub	sp, #40	; 0x28
 800129c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800129e:	4b29      	ldr	r3, [pc, #164]	; (8001344 <HAL_RCC_GetSysClockFreq+0xac>)
 80012a0:	1d3c      	adds	r4, r7, #4
 80012a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80012a8:	f240 2301 	movw	r3, #513	; 0x201
 80012ac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
 80012b2:	2300      	movs	r3, #0
 80012b4:	61bb      	str	r3, [r7, #24]
 80012b6:	2300      	movs	r3, #0
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
 80012ba:	2300      	movs	r3, #0
 80012bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80012be:	2300      	movs	r3, #0
 80012c0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012c2:	4b21      	ldr	r3, [pc, #132]	; (8001348 <HAL_RCC_GetSysClockFreq+0xb0>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	f003 030c 	and.w	r3, r3, #12
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	d002      	beq.n	80012d8 <HAL_RCC_GetSysClockFreq+0x40>
 80012d2:	2b08      	cmp	r3, #8
 80012d4:	d003      	beq.n	80012de <HAL_RCC_GetSysClockFreq+0x46>
 80012d6:	e02b      	b.n	8001330 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012d8:	4b1c      	ldr	r3, [pc, #112]	; (800134c <HAL_RCC_GetSysClockFreq+0xb4>)
 80012da:	623b      	str	r3, [r7, #32]
      break;
 80012dc:	e02b      	b.n	8001336 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	0c9b      	lsrs	r3, r3, #18
 80012e2:	f003 030f 	and.w	r3, r3, #15
 80012e6:	3328      	adds	r3, #40	; 0x28
 80012e8:	443b      	add	r3, r7
 80012ea:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80012ee:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d012      	beq.n	8001320 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012fa:	4b13      	ldr	r3, [pc, #76]	; (8001348 <HAL_RCC_GetSysClockFreq+0xb0>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	0c5b      	lsrs	r3, r3, #17
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	3328      	adds	r3, #40	; 0x28
 8001306:	443b      	add	r3, r7
 8001308:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800130c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	4a0e      	ldr	r2, [pc, #56]	; (800134c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001312:	fb03 f202 	mul.w	r2, r3, r2
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	fbb2 f3f3 	udiv	r3, r2, r3
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
 800131e:	e004      	b.n	800132a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	4a0b      	ldr	r2, [pc, #44]	; (8001350 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001324:	fb02 f303 	mul.w	r3, r2, r3
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132c:	623b      	str	r3, [r7, #32]
      break;
 800132e:	e002      	b.n	8001336 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001332:	623b      	str	r3, [r7, #32]
      break;
 8001334:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001336:	6a3b      	ldr	r3, [r7, #32]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3728      	adds	r7, #40	; 0x28
 800133c:	46bd      	mov	sp, r7
 800133e:	bc90      	pop	{r4, r7}
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	080041f0 	.word	0x080041f0
 8001348:	40021000 	.word	0x40021000
 800134c:	007a1200 	.word	0x007a1200
 8001350:	003d0900 	.word	0x003d0900

08001354 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001358:	4b02      	ldr	r3, [pc, #8]	; (8001364 <HAL_RCC_GetHCLKFreq+0x10>)
 800135a:	681b      	ldr	r3, [r3, #0]
}
 800135c:	4618      	mov	r0, r3
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr
 8001364:	20000000 	.word	0x20000000

08001368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800136c:	f7ff fff2 	bl	8001354 <HAL_RCC_GetHCLKFreq>
 8001370:	4602      	mov	r2, r0
 8001372:	4b05      	ldr	r3, [pc, #20]	; (8001388 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	0a1b      	lsrs	r3, r3, #8
 8001378:	f003 0307 	and.w	r3, r3, #7
 800137c:	4903      	ldr	r1, [pc, #12]	; (800138c <HAL_RCC_GetPCLK1Freq+0x24>)
 800137e:	5ccb      	ldrb	r3, [r1, r3]
 8001380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001384:	4618      	mov	r0, r3
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40021000 	.word	0x40021000
 800138c:	08004218 	.word	0x08004218

08001390 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	220f      	movs	r2, #15
 800139e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <HAL_RCC_GetClockConfig+0x58>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f003 0203 	and.w	r2, r3, #3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013ac:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <HAL_RCC_GetClockConfig+0x58>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013b8:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <HAL_RCC_GetClockConfig+0x58>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <HAL_RCC_GetClockConfig+0x58>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	08db      	lsrs	r3, r3, #3
 80013ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_RCC_GetClockConfig+0x5c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0207 	and.w	r2, r3, #7
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40022000 	.word	0x40022000

080013f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013f8:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <RCC_Delay+0x34>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a0a      	ldr	r2, [pc, #40]	; (8001428 <RCC_Delay+0x38>)
 80013fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001402:	0a5b      	lsrs	r3, r3, #9
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	fb02 f303 	mul.w	r3, r2, r3
 800140a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800140c:	bf00      	nop
  }
  while (Delay --);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	1e5a      	subs	r2, r3, #1
 8001412:	60fa      	str	r2, [r7, #12]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1f9      	bne.n	800140c <RCC_Delay+0x1c>
}
 8001418:	bf00      	nop
 800141a:	bf00      	nop
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr
 8001424:	20000000 	.word	0x20000000
 8001428:	10624dd3 	.word	0x10624dd3

0800142c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d101      	bne.n	800143e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e041      	b.n	80014c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b00      	cmp	r3, #0
 8001448:	d106      	bne.n	8001458 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f000 f839 	bl	80014ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2202      	movs	r2, #2
 800145c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3304      	adds	r3, #4
 8001468:	4619      	mov	r1, r3
 800146a:	4610      	mov	r0, r2
 800146c:	f000 f9b4 	bl	80017d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2201      	movs	r2, #1
 8001474:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2201      	movs	r2, #1
 800147c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2201      	movs	r2, #1
 8001484:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2201      	movs	r2, #1
 800148c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2201      	movs	r2, #1
 8001494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2201      	movs	r2, #1
 800149c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2201      	movs	r2, #1
 80014a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2201      	movs	r2, #1
 80014ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2201      	movs	r2, #1
 80014b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2201      	movs	r2, #1
 80014bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80014ca:	b480      	push	{r7}
 80014cc:	b083      	sub	sp, #12
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr

080014dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d001      	beq.n	80014f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e03a      	b.n	800156a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2202      	movs	r2, #2
 80014f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	68da      	ldr	r2, [r3, #12]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f042 0201 	orr.w	r2, r2, #1
 800150a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a18      	ldr	r2, [pc, #96]	; (8001574 <HAL_TIM_Base_Start_IT+0x98>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d00e      	beq.n	8001534 <HAL_TIM_Base_Start_IT+0x58>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800151e:	d009      	beq.n	8001534 <HAL_TIM_Base_Start_IT+0x58>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a14      	ldr	r2, [pc, #80]	; (8001578 <HAL_TIM_Base_Start_IT+0x9c>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d004      	beq.n	8001534 <HAL_TIM_Base_Start_IT+0x58>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a13      	ldr	r2, [pc, #76]	; (800157c <HAL_TIM_Base_Start_IT+0xa0>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d111      	bne.n	8001558 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2b06      	cmp	r3, #6
 8001544:	d010      	beq.n	8001568 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f042 0201 	orr.w	r2, r2, #1
 8001554:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001556:	e007      	b.n	8001568 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f042 0201 	orr.w	r2, r2, #1
 8001566:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr
 8001574:	40012c00 	.word	0x40012c00
 8001578:	40000400 	.word	0x40000400
 800157c:	40000800 	.word	0x40000800

08001580 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b02      	cmp	r3, #2
 8001594:	d122      	bne.n	80015dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d11b      	bne.n	80015dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f06f 0202 	mvn.w	r2, #2
 80015ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2201      	movs	r2, #1
 80015b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	f003 0303 	and.w	r3, r3, #3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d003      	beq.n	80015ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f000 f8ed 	bl	80017a2 <HAL_TIM_IC_CaptureCallback>
 80015c8:	e005      	b.n	80015d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f000 f8e0 	bl	8001790 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f000 f8ef 	bl	80017b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	f003 0304 	and.w	r3, r3, #4
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	d122      	bne.n	8001630 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	2b04      	cmp	r3, #4
 80015f6:	d11b      	bne.n	8001630 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f06f 0204 	mvn.w	r2, #4
 8001600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2202      	movs	r2, #2
 8001606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001612:	2b00      	cmp	r3, #0
 8001614:	d003      	beq.n	800161e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f000 f8c3 	bl	80017a2 <HAL_TIM_IC_CaptureCallback>
 800161c:	e005      	b.n	800162a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f000 f8b6 	bl	8001790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f000 f8c5 	bl	80017b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	f003 0308 	and.w	r3, r3, #8
 800163a:	2b08      	cmp	r3, #8
 800163c:	d122      	bne.n	8001684 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	f003 0308 	and.w	r3, r3, #8
 8001648:	2b08      	cmp	r3, #8
 800164a:	d11b      	bne.n	8001684 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f06f 0208 	mvn.w	r2, #8
 8001654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2204      	movs	r2, #4
 800165a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	f003 0303 	and.w	r3, r3, #3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 f899 	bl	80017a2 <HAL_TIM_IC_CaptureCallback>
 8001670:	e005      	b.n	800167e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 f88c 	bl	8001790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f000 f89b 	bl	80017b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	f003 0310 	and.w	r3, r3, #16
 800168e:	2b10      	cmp	r3, #16
 8001690:	d122      	bne.n	80016d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	f003 0310 	and.w	r3, r3, #16
 800169c:	2b10      	cmp	r3, #16
 800169e:	d11b      	bne.n	80016d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f06f 0210 	mvn.w	r2, #16
 80016a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2208      	movs	r2, #8
 80016ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f000 f86f 	bl	80017a2 <HAL_TIM_IC_CaptureCallback>
 80016c4:	e005      	b.n	80016d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 f862 	bl	8001790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f000 f871 	bl	80017b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d10e      	bne.n	8001704 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d107      	bne.n	8001704 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f06f 0201 	mvn.w	r2, #1
 80016fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7fe fe78 	bl	80003f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800170e:	2b80      	cmp	r3, #128	; 0x80
 8001710:	d10e      	bne.n	8001730 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800171c:	2b80      	cmp	r3, #128	; 0x80
 800171e:	d107      	bne.n	8001730 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 f8bf 	bl	80018ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800173a:	2b40      	cmp	r3, #64	; 0x40
 800173c:	d10e      	bne.n	800175c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001748:	2b40      	cmp	r3, #64	; 0x40
 800174a:	d107      	bne.n	800175c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 f835 	bl	80017c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	f003 0320 	and.w	r3, r3, #32
 8001766:	2b20      	cmp	r3, #32
 8001768:	d10e      	bne.n	8001788 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	f003 0320 	and.w	r3, r3, #32
 8001774:	2b20      	cmp	r3, #32
 8001776:	d107      	bne.n	8001788 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f06f 0220 	mvn.w	r2, #32
 8001780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 f88a 	bl	800189c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr

080017a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr

080017b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr

080017c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr

080017d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a29      	ldr	r2, [pc, #164]	; (8001890 <TIM_Base_SetConfig+0xb8>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d00b      	beq.n	8001808 <TIM_Base_SetConfig+0x30>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017f6:	d007      	beq.n	8001808 <TIM_Base_SetConfig+0x30>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a26      	ldr	r2, [pc, #152]	; (8001894 <TIM_Base_SetConfig+0xbc>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d003      	beq.n	8001808 <TIM_Base_SetConfig+0x30>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a25      	ldr	r2, [pc, #148]	; (8001898 <TIM_Base_SetConfig+0xc0>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d108      	bne.n	800181a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800180e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	4313      	orrs	r3, r2
 8001818:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a1c      	ldr	r2, [pc, #112]	; (8001890 <TIM_Base_SetConfig+0xb8>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d00b      	beq.n	800183a <TIM_Base_SetConfig+0x62>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001828:	d007      	beq.n	800183a <TIM_Base_SetConfig+0x62>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a19      	ldr	r2, [pc, #100]	; (8001894 <TIM_Base_SetConfig+0xbc>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d003      	beq.n	800183a <TIM_Base_SetConfig+0x62>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a18      	ldr	r2, [pc, #96]	; (8001898 <TIM_Base_SetConfig+0xc0>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d108      	bne.n	800184c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001840:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	4313      	orrs	r3, r2
 800184a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	4313      	orrs	r3, r2
 8001858:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68fa      	ldr	r2, [r7, #12]
 800185e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a07      	ldr	r2, [pc, #28]	; (8001890 <TIM_Base_SetConfig+0xb8>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d103      	bne.n	8001880 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	691a      	ldr	r2, [r3, #16]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	615a      	str	r2, [r3, #20]
}
 8001886:	bf00      	nop
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr
 8001890:	40012c00 	.word	0x40012c00
 8001894:	40000400 	.word	0x40000400
 8001898:	40000800 	.word	0x40000800

0800189c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr

080018ae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr

080018c0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80018ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018d2:	2b84      	cmp	r3, #132	; 0x84
 80018d4:	d005      	beq.n	80018e2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80018d6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	4413      	add	r3, r2
 80018de:	3303      	adds	r3, #3
 80018e0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80018e2:	68fb      	ldr	r3, [r7, #12]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr

080018ee <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80018f4:	f3ef 8305 	mrs	r3, IPSR
 80018f8:	607b      	str	r3, [r7, #4]
  return(result);
 80018fa:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	bf14      	ite	ne
 8001900:	2301      	movne	r3, #1
 8001902:	2300      	moveq	r3, #0
 8001904:	b2db      	uxtb	r3, r3
}
 8001906:	4618      	mov	r0, r3
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr

08001910 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001914:	f001 f91a 	bl	8002b4c <vTaskStartScheduler>
  
  return osOK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	bd80      	pop	{r7, pc}

0800191e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800191e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001920:	b089      	sub	sp, #36	; 0x24
 8001922:	af04      	add	r7, sp, #16
 8001924:	6078      	str	r0, [r7, #4]
 8001926:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	695b      	ldr	r3, [r3, #20]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d020      	beq.n	8001972 <osThreadCreate+0x54>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d01c      	beq.n	8001972 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685c      	ldr	r4, [r3, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681d      	ldr	r5, [r3, #0]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	691e      	ldr	r6, [r3, #16]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff ffb8 	bl	80018c0 <makeFreeRtosPriority>
 8001950:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800195a:	9202      	str	r2, [sp, #8]
 800195c:	9301      	str	r3, [sp, #4]
 800195e:	9100      	str	r1, [sp, #0]
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	4632      	mov	r2, r6
 8001964:	4629      	mov	r1, r5
 8001966:	4620      	mov	r0, r4
 8001968:	f000 ff1b 	bl	80027a2 <xTaskCreateStatic>
 800196c:	4603      	mov	r3, r0
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	e01c      	b.n	80019ac <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685c      	ldr	r4, [r3, #4]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800197e:	b29e      	uxth	r6, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff ff9a 	bl	80018c0 <makeFreeRtosPriority>
 800198c:	4602      	mov	r2, r0
 800198e:	f107 030c 	add.w	r3, r7, #12
 8001992:	9301      	str	r3, [sp, #4]
 8001994:	9200      	str	r2, [sp, #0]
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	4632      	mov	r2, r6
 800199a:	4629      	mov	r1, r5
 800199c:	4620      	mov	r0, r4
 800199e:	f000 ff5c 	bl	800285a <xTaskCreate>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d001      	beq.n	80019ac <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	e000      	b.n	80019ae <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80019ac:	68fb      	ldr	r3, [r7, #12]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019b6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b084      	sub	sp, #16
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <osDelay+0x16>
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	e000      	b.n	80019ce <osDelay+0x18>
 80019cc:	2301      	movs	r3, #1
 80019ce:	4618      	mov	r0, r3
 80019d0:	f001 f888 	bl	8002ae4 <vTaskDelay>
  
  return osOK;
 80019d4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80019de:	b580      	push	{r7, lr}
 80019e0:	b086      	sub	sp, #24
 80019e2:	af02      	add	r7, sp, #8
 80019e4:	6078      	str	r0, [r7, #4]
 80019e6:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d00f      	beq.n	8001a10 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d10a      	bne.n	8001a0c <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2203      	movs	r2, #3
 80019fc:	9200      	str	r2, [sp, #0]
 80019fe:	2200      	movs	r2, #0
 8001a00:	2100      	movs	r1, #0
 8001a02:	2001      	movs	r0, #1
 8001a04:	f000 f9ba 	bl	8001d7c <xQueueGenericCreateStatic>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	e016      	b.n	8001a3a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	e014      	b.n	8001a3a <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d110      	bne.n	8001a38 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8001a16:	2203      	movs	r2, #3
 8001a18:	2100      	movs	r1, #0
 8001a1a:	2001      	movs	r0, #1
 8001a1c:	f000 fa25 	bl	8001e6a <xQueueGenericCreate>
 8001a20:	60f8      	str	r0, [r7, #12]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d005      	beq.n	8001a34 <osSemaphoreCreate+0x56>
 8001a28:	2300      	movs	r3, #0
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f000 fa78 	bl	8001f24 <xQueueGenericSend>
      return sema;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	e000      	b.n	8001a3a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8001a38:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8001a58:	2380      	movs	r3, #128	; 0x80
 8001a5a:	e03a      	b.n	8001ad2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a66:	d103      	bne.n	8001a70 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8001a68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	e009      	b.n	8001a84 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d006      	beq.n	8001a84 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <osSemaphoreWait+0x40>
      ticks = 1;
 8001a80:	2301      	movs	r3, #1
 8001a82:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8001a84:	f7ff ff33 	bl	80018ee <inHandlerMode>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d017      	beq.n	8001abe <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8001a8e:	f107 0308 	add.w	r3, r7, #8
 8001a92:	461a      	mov	r2, r3
 8001a94:	2100      	movs	r1, #0
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 fcdc 	bl	8002454 <xQueueReceiveFromISR>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d001      	beq.n	8001aa6 <osSemaphoreWait+0x62>
      return osErrorOS;
 8001aa2:	23ff      	movs	r3, #255	; 0xff
 8001aa4:	e015      	b.n	8001ad2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d011      	beq.n	8001ad0 <osSemaphoreWait+0x8c>
 8001aac:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <osSemaphoreWait+0x98>)
 8001aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	f3bf 8f4f 	dsb	sy
 8001ab8:	f3bf 8f6f 	isb	sy
 8001abc:	e008      	b.n	8001ad0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8001abe:	68f9      	ldr	r1, [r7, #12]
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f000 fbbb 	bl	800223c <xQueueSemaphoreTake>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d001      	beq.n	8001ad0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8001acc:	23ff      	movs	r3, #255	; 0xff
 8001ace:	e000      	b.n	8001ad2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	e000ed04 	.word	0xe000ed04

08001ae0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8001af0:	f7ff fefd 	bl	80018ee <inHandlerMode>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d016      	beq.n	8001b28 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8001afa:	f107 0308 	add.w	r3, r7, #8
 8001afe:	4619      	mov	r1, r3
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 fb0d 	bl	8002120 <xQueueGiveFromISR>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d001      	beq.n	8001b10 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8001b0c:	23ff      	movs	r3, #255	; 0xff
 8001b0e:	e017      	b.n	8001b40 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d013      	beq.n	8001b3e <osSemaphoreRelease+0x5e>
 8001b16:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <osSemaphoreRelease+0x68>)
 8001b18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	f3bf 8f4f 	dsb	sy
 8001b22:	f3bf 8f6f 	isb	sy
 8001b26:	e00a      	b.n	8001b3e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8001b28:	2300      	movs	r3, #0
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 f9f8 	bl	8001f24 <xQueueGenericSend>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d001      	beq.n	8001b3e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8001b3a:	23ff      	movs	r3, #255	; 0xff
 8001b3c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	e000ed04 	.word	0xe000ed04

08001b4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f103 0208 	add.w	r2, r3, #8
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f103 0208 	add.w	r2, r3, #8
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f103 0208 	add.w	r2, r3, #8
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr

08001b8a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr

08001ba2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b085      	sub	sp, #20
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
 8001baa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	1c5a      	adds	r2, r3, #1
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	601a      	str	r2, [r3, #0]
}
 8001bde:	bf00      	nop
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr

08001be8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bfe:	d103      	bne.n	8001c08 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	e00c      	b.n	8001c22 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3308      	adds	r3, #8
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	e002      	b.n	8001c16 <vListInsert+0x2e>
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68ba      	ldr	r2, [r7, #8]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d2f6      	bcs.n	8001c10 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	1c5a      	adds	r2, r3, #1
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	601a      	str	r2, [r3, #0]
}
 8001c4e:	bf00      	nop
 8001c50:	3714      	adds	r7, #20
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr

08001c58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	6892      	ldr	r2, [r2, #8]
 8001c6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	6852      	ldr	r2, [r2, #4]
 8001c78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d103      	bne.n	8001c8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	1e5a      	subs	r2, r3, #1
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr
	...

08001cac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d10a      	bne.n	8001cd6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001cc0:	f04f 0320 	mov.w	r3, #32
 8001cc4:	f383 8811 	msr	BASEPRI, r3
 8001cc8:	f3bf 8f6f 	isb	sy
 8001ccc:	f3bf 8f4f 	dsb	sy
 8001cd0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001cd2:	bf00      	nop
 8001cd4:	e7fe      	b.n	8001cd4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001cd6:	f001 fe89 	bl	80039ec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce2:	68f9      	ldr	r1, [r7, #12]
 8001ce4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001ce6:	fb01 f303 	mul.w	r3, r1, r3
 8001cea:	441a      	add	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d06:	3b01      	subs	r3, #1
 8001d08:	68f9      	ldr	r1, [r7, #12]
 8001d0a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001d0c:	fb01 f303 	mul.w	r3, r1, r3
 8001d10:	441a      	add	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	22ff      	movs	r2, #255	; 0xff
 8001d1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	22ff      	movs	r2, #255	; 0xff
 8001d22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d114      	bne.n	8001d56 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d01a      	beq.n	8001d6a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	3310      	adds	r3, #16
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f001 f95f 	bl	8002ffc <xTaskRemoveFromEventList>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d012      	beq.n	8001d6a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001d44:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <xQueueGenericReset+0xcc>)
 8001d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	f3bf 8f4f 	dsb	sy
 8001d50:	f3bf 8f6f 	isb	sy
 8001d54:	e009      	b.n	8001d6a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	3310      	adds	r3, #16
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff fef6 	bl	8001b4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	3324      	adds	r3, #36	; 0x24
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff fef1 	bl	8001b4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001d6a:	f001 fe6f 	bl	8003a4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001d6e:	2301      	movs	r3, #1
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	e000ed04 	.word	0xe000ed04

08001d7c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08e      	sub	sp, #56	; 0x38
 8001d80:	af02      	add	r7, sp, #8
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
 8001d88:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d10a      	bne.n	8001da6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8001d90:	f04f 0320 	mov.w	r3, #32
 8001d94:	f383 8811 	msr	BASEPRI, r3
 8001d98:	f3bf 8f6f 	isb	sy
 8001d9c:	f3bf 8f4f 	dsb	sy
 8001da0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001da2:	bf00      	nop
 8001da4:	e7fe      	b.n	8001da4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d10a      	bne.n	8001dc2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8001dac:	f04f 0320 	mov.w	r3, #32
 8001db0:	f383 8811 	msr	BASEPRI, r3
 8001db4:	f3bf 8f6f 	isb	sy
 8001db8:	f3bf 8f4f 	dsb	sy
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001dbe:	bf00      	nop
 8001dc0:	e7fe      	b.n	8001dc0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d002      	beq.n	8001dce <xQueueGenericCreateStatic+0x52>
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <xQueueGenericCreateStatic+0x56>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e000      	b.n	8001dd4 <xQueueGenericCreateStatic+0x58>
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10a      	bne.n	8001dee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8001dd8:	f04f 0320 	mov.w	r3, #32
 8001ddc:	f383 8811 	msr	BASEPRI, r3
 8001de0:	f3bf 8f6f 	isb	sy
 8001de4:	f3bf 8f4f 	dsb	sy
 8001de8:	623b      	str	r3, [r7, #32]
}
 8001dea:	bf00      	nop
 8001dec:	e7fe      	b.n	8001dec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d102      	bne.n	8001dfa <xQueueGenericCreateStatic+0x7e>
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <xQueueGenericCreateStatic+0x82>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <xQueueGenericCreateStatic+0x84>
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d10a      	bne.n	8001e1a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8001e04:	f04f 0320 	mov.w	r3, #32
 8001e08:	f383 8811 	msr	BASEPRI, r3
 8001e0c:	f3bf 8f6f 	isb	sy
 8001e10:	f3bf 8f4f 	dsb	sy
 8001e14:	61fb      	str	r3, [r7, #28]
}
 8001e16:	bf00      	nop
 8001e18:	e7fe      	b.n	8001e18 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001e1a:	2348      	movs	r3, #72	; 0x48
 8001e1c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	2b48      	cmp	r3, #72	; 0x48
 8001e22:	d00a      	beq.n	8001e3a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8001e24:	f04f 0320 	mov.w	r3, #32
 8001e28:	f383 8811 	msr	BASEPRI, r3
 8001e2c:	f3bf 8f6f 	isb	sy
 8001e30:	f3bf 8f4f 	dsb	sy
 8001e34:	61bb      	str	r3, [r7, #24]
}
 8001e36:	bf00      	nop
 8001e38:	e7fe      	b.n	8001e38 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00d      	beq.n	8001e60 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001e4c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e52:	9300      	str	r3, [sp, #0]
 8001e54:	4613      	mov	r3, r2
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	68b9      	ldr	r1, [r7, #8]
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	f000 f843 	bl	8001ee6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3730      	adds	r7, #48	; 0x30
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b08a      	sub	sp, #40	; 0x28
 8001e6e:	af02      	add	r7, sp, #8
 8001e70:	60f8      	str	r0, [r7, #12]
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	4613      	mov	r3, r2
 8001e76:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10a      	bne.n	8001e94 <xQueueGenericCreate+0x2a>
	__asm volatile
 8001e7e:	f04f 0320 	mov.w	r3, #32
 8001e82:	f383 8811 	msr	BASEPRI, r3
 8001e86:	f3bf 8f6f 	isb	sy
 8001e8a:	f3bf 8f4f 	dsb	sy
 8001e8e:	613b      	str	r3, [r7, #16]
}
 8001e90:	bf00      	nop
 8001e92:	e7fe      	b.n	8001e92 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d102      	bne.n	8001ea0 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
 8001e9e:	e004      	b.n	8001eaa <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	fb02 f303 	mul.w	r3, r2, r3
 8001ea8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	3348      	adds	r3, #72	; 0x48
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f001 fe9c 	bl	8003bec <pvPortMalloc>
 8001eb4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d00f      	beq.n	8001edc <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	3348      	adds	r3, #72	; 0x48
 8001ec0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001eca:	79fa      	ldrb	r2, [r7, #7]
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	68b9      	ldr	r1, [r7, #8]
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f000 f805 	bl	8001ee6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001edc:	69bb      	ldr	r3, [r7, #24]
	}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3720      	adds	r7, #32
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b084      	sub	sp, #16
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	60f8      	str	r0, [r7, #12]
 8001eee:	60b9      	str	r1, [r7, #8]
 8001ef0:	607a      	str	r2, [r7, #4]
 8001ef2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d103      	bne.n	8001f02 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	e002      	b.n	8001f08 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	68ba      	ldr	r2, [r7, #8]
 8001f12:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001f14:	2101      	movs	r1, #1
 8001f16:	69b8      	ldr	r0, [r7, #24]
 8001f18:	f7ff fec8 	bl	8001cac <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001f1c:	bf00      	nop
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08e      	sub	sp, #56	; 0x38
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
 8001f30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001f32:	2300      	movs	r3, #0
 8001f34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d10a      	bne.n	8001f56 <xQueueGenericSend+0x32>
	__asm volatile
 8001f40:	f04f 0320 	mov.w	r3, #32
 8001f44:	f383 8811 	msr	BASEPRI, r3
 8001f48:	f3bf 8f6f 	isb	sy
 8001f4c:	f3bf 8f4f 	dsb	sy
 8001f50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001f52:	bf00      	nop
 8001f54:	e7fe      	b.n	8001f54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d103      	bne.n	8001f64 <xQueueGenericSend+0x40>
 8001f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d101      	bne.n	8001f68 <xQueueGenericSend+0x44>
 8001f64:	2301      	movs	r3, #1
 8001f66:	e000      	b.n	8001f6a <xQueueGenericSend+0x46>
 8001f68:	2300      	movs	r3, #0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10a      	bne.n	8001f84 <xQueueGenericSend+0x60>
	__asm volatile
 8001f6e:	f04f 0320 	mov.w	r3, #32
 8001f72:	f383 8811 	msr	BASEPRI, r3
 8001f76:	f3bf 8f6f 	isb	sy
 8001f7a:	f3bf 8f4f 	dsb	sy
 8001f7e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001f80:	bf00      	nop
 8001f82:	e7fe      	b.n	8001f82 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d103      	bne.n	8001f92 <xQueueGenericSend+0x6e>
 8001f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d101      	bne.n	8001f96 <xQueueGenericSend+0x72>
 8001f92:	2301      	movs	r3, #1
 8001f94:	e000      	b.n	8001f98 <xQueueGenericSend+0x74>
 8001f96:	2300      	movs	r3, #0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d10a      	bne.n	8001fb2 <xQueueGenericSend+0x8e>
	__asm volatile
 8001f9c:	f04f 0320 	mov.w	r3, #32
 8001fa0:	f383 8811 	msr	BASEPRI, r3
 8001fa4:	f3bf 8f6f 	isb	sy
 8001fa8:	f3bf 8f4f 	dsb	sy
 8001fac:	623b      	str	r3, [r7, #32]
}
 8001fae:	bf00      	nop
 8001fb0:	e7fe      	b.n	8001fb0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001fb2:	f001 f9e7 	bl	8003384 <xTaskGetSchedulerState>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d102      	bne.n	8001fc2 <xQueueGenericSend+0x9e>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <xQueueGenericSend+0xa2>
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e000      	b.n	8001fc8 <xQueueGenericSend+0xa4>
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d10a      	bne.n	8001fe2 <xQueueGenericSend+0xbe>
	__asm volatile
 8001fcc:	f04f 0320 	mov.w	r3, #32
 8001fd0:	f383 8811 	msr	BASEPRI, r3
 8001fd4:	f3bf 8f6f 	isb	sy
 8001fd8:	f3bf 8f4f 	dsb	sy
 8001fdc:	61fb      	str	r3, [r7, #28]
}
 8001fde:	bf00      	nop
 8001fe0:	e7fe      	b.n	8001fe0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001fe2:	f001 fd03 	bl	80039ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d302      	bcc.n	8001ff8 <xQueueGenericSend+0xd4>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d129      	bne.n	800204c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	68b9      	ldr	r1, [r7, #8]
 8001ffc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ffe:	f000 fac0 	bl	8002582 <prvCopyDataToQueue>
 8002002:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002008:	2b00      	cmp	r3, #0
 800200a:	d010      	beq.n	800202e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800200c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800200e:	3324      	adds	r3, #36	; 0x24
 8002010:	4618      	mov	r0, r3
 8002012:	f000 fff3 	bl	8002ffc <xTaskRemoveFromEventList>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d013      	beq.n	8002044 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800201c:	4b3f      	ldr	r3, [pc, #252]	; (800211c <xQueueGenericSend+0x1f8>)
 800201e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	f3bf 8f4f 	dsb	sy
 8002028:	f3bf 8f6f 	isb	sy
 800202c:	e00a      	b.n	8002044 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800202e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002030:	2b00      	cmp	r3, #0
 8002032:	d007      	beq.n	8002044 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002034:	4b39      	ldr	r3, [pc, #228]	; (800211c <xQueueGenericSend+0x1f8>)
 8002036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	f3bf 8f4f 	dsb	sy
 8002040:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002044:	f001 fd02 	bl	8003a4c <vPortExitCritical>
				return pdPASS;
 8002048:	2301      	movs	r3, #1
 800204a:	e063      	b.n	8002114 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d103      	bne.n	800205a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002052:	f001 fcfb 	bl	8003a4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002056:	2300      	movs	r3, #0
 8002058:	e05c      	b.n	8002114 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800205a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800205c:	2b00      	cmp	r3, #0
 800205e:	d106      	bne.n	800206e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002060:	f107 0314 	add.w	r3, r7, #20
 8002064:	4618      	mov	r0, r3
 8002066:	f001 f82b 	bl	80030c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800206a:	2301      	movs	r3, #1
 800206c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800206e:	f001 fced 	bl	8003a4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002072:	f000 fdd5 	bl	8002c20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002076:	f001 fcb9 	bl	80039ec <vPortEnterCritical>
 800207a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800207c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002080:	b25b      	sxtb	r3, r3
 8002082:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002086:	d103      	bne.n	8002090 <xQueueGenericSend+0x16c>
 8002088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002092:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002096:	b25b      	sxtb	r3, r3
 8002098:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800209c:	d103      	bne.n	80020a6 <xQueueGenericSend+0x182>
 800209e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80020a6:	f001 fcd1 	bl	8003a4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80020aa:	1d3a      	adds	r2, r7, #4
 80020ac:	f107 0314 	add.w	r3, r7, #20
 80020b0:	4611      	mov	r1, r2
 80020b2:	4618      	mov	r0, r3
 80020b4:	f001 f81a 	bl	80030ec <xTaskCheckForTimeOut>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d124      	bne.n	8002108 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80020be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020c0:	f000 fb57 	bl	8002772 <prvIsQueueFull>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d018      	beq.n	80020fc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80020ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020cc:	3310      	adds	r3, #16
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	4611      	mov	r1, r2
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 ff6e 	bl	8002fb4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80020d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020da:	f000 fae2 	bl	80026a2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80020de:	f000 fdad 	bl	8002c3c <xTaskResumeAll>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f47f af7c 	bne.w	8001fe2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80020ea:	4b0c      	ldr	r3, [pc, #48]	; (800211c <xQueueGenericSend+0x1f8>)
 80020ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	f3bf 8f4f 	dsb	sy
 80020f6:	f3bf 8f6f 	isb	sy
 80020fa:	e772      	b.n	8001fe2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80020fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020fe:	f000 fad0 	bl	80026a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002102:	f000 fd9b 	bl	8002c3c <xTaskResumeAll>
 8002106:	e76c      	b.n	8001fe2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002108:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800210a:	f000 faca 	bl	80026a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800210e:	f000 fd95 	bl	8002c3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002112:	2300      	movs	r3, #0
		}
	}
}
 8002114:	4618      	mov	r0, r3
 8002116:	3738      	adds	r7, #56	; 0x38
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	e000ed04 	.word	0xe000ed04

08002120 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08e      	sub	sp, #56	; 0x38
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800212e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002130:	2b00      	cmp	r3, #0
 8002132:	d10a      	bne.n	800214a <xQueueGiveFromISR+0x2a>
	__asm volatile
 8002134:	f04f 0320 	mov.w	r3, #32
 8002138:	f383 8811 	msr	BASEPRI, r3
 800213c:	f3bf 8f6f 	isb	sy
 8002140:	f3bf 8f4f 	dsb	sy
 8002144:	623b      	str	r3, [r7, #32]
}
 8002146:	bf00      	nop
 8002148:	e7fe      	b.n	8002148 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800214a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00a      	beq.n	8002168 <xQueueGiveFromISR+0x48>
	__asm volatile
 8002152:	f04f 0320 	mov.w	r3, #32
 8002156:	f383 8811 	msr	BASEPRI, r3
 800215a:	f3bf 8f6f 	isb	sy
 800215e:	f3bf 8f4f 	dsb	sy
 8002162:	61fb      	str	r3, [r7, #28]
}
 8002164:	bf00      	nop
 8002166:	e7fe      	b.n	8002166 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8002168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d103      	bne.n	8002178 <xQueueGiveFromISR+0x58>
 8002170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <xQueueGiveFromISR+0x5c>
 8002178:	2301      	movs	r3, #1
 800217a:	e000      	b.n	800217e <xQueueGiveFromISR+0x5e>
 800217c:	2300      	movs	r3, #0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10a      	bne.n	8002198 <xQueueGiveFromISR+0x78>
	__asm volatile
 8002182:	f04f 0320 	mov.w	r3, #32
 8002186:	f383 8811 	msr	BASEPRI, r3
 800218a:	f3bf 8f6f 	isb	sy
 800218e:	f3bf 8f4f 	dsb	sy
 8002192:	61bb      	str	r3, [r7, #24]
}
 8002194:	bf00      	nop
 8002196:	e7fe      	b.n	8002196 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002198:	f001 fcea 	bl	8003b70 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800219c:	f3ef 8211 	mrs	r2, BASEPRI
 80021a0:	f04f 0320 	mov.w	r3, #32
 80021a4:	f383 8811 	msr	BASEPRI, r3
 80021a8:	f3bf 8f6f 	isb	sy
 80021ac:	f3bf 8f4f 	dsb	sy
 80021b0:	617a      	str	r2, [r7, #20]
 80021b2:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80021b4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80021b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80021b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021bc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80021be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d22b      	bcs.n	8002220 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80021c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80021d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d4:	1c5a      	adds	r2, r3, #1
 80021d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80021da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80021de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021e2:	d112      	bne.n	800220a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80021e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d016      	beq.n	800221a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80021ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ee:	3324      	adds	r3, #36	; 0x24
 80021f0:	4618      	mov	r0, r3
 80021f2:	f000 ff03 	bl	8002ffc <xTaskRemoveFromEventList>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00e      	beq.n	800221a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00b      	beq.n	800221a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	2201      	movs	r2, #1
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	e007      	b.n	800221a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800220a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800220e:	3301      	adds	r3, #1
 8002210:	b2db      	uxtb	r3, r3
 8002212:	b25a      	sxtb	r2, r3
 8002214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002216:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800221a:	2301      	movs	r3, #1
 800221c:	637b      	str	r3, [r7, #52]	; 0x34
 800221e:	e001      	b.n	8002224 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002220:	2300      	movs	r3, #0
 8002222:	637b      	str	r3, [r7, #52]	; 0x34
 8002224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002226:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800222e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002232:	4618      	mov	r0, r3
 8002234:	3738      	adds	r7, #56	; 0x38
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
	...

0800223c <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08e      	sub	sp, #56	; 0x38
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002246:	2300      	movs	r3, #0
 8002248:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800224e:	2300      	movs	r3, #0
 8002250:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002254:	2b00      	cmp	r3, #0
 8002256:	d10a      	bne.n	800226e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8002258:	f04f 0320 	mov.w	r3, #32
 800225c:	f383 8811 	msr	BASEPRI, r3
 8002260:	f3bf 8f6f 	isb	sy
 8002264:	f3bf 8f4f 	dsb	sy
 8002268:	623b      	str	r3, [r7, #32]
}
 800226a:	bf00      	nop
 800226c:	e7fe      	b.n	800226c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800226e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00a      	beq.n	800228c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8002276:	f04f 0320 	mov.w	r3, #32
 800227a:	f383 8811 	msr	BASEPRI, r3
 800227e:	f3bf 8f6f 	isb	sy
 8002282:	f3bf 8f4f 	dsb	sy
 8002286:	61fb      	str	r3, [r7, #28]
}
 8002288:	bf00      	nop
 800228a:	e7fe      	b.n	800228a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800228c:	f001 f87a 	bl	8003384 <xTaskGetSchedulerState>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d102      	bne.n	800229c <xQueueSemaphoreTake+0x60>
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <xQueueSemaphoreTake+0x64>
 800229c:	2301      	movs	r3, #1
 800229e:	e000      	b.n	80022a2 <xQueueSemaphoreTake+0x66>
 80022a0:	2300      	movs	r3, #0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d10a      	bne.n	80022bc <xQueueSemaphoreTake+0x80>
	__asm volatile
 80022a6:	f04f 0320 	mov.w	r3, #32
 80022aa:	f383 8811 	msr	BASEPRI, r3
 80022ae:	f3bf 8f6f 	isb	sy
 80022b2:	f3bf 8f4f 	dsb	sy
 80022b6:	61bb      	str	r3, [r7, #24]
}
 80022b8:	bf00      	nop
 80022ba:	e7fe      	b.n	80022ba <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80022bc:	f001 fb96 	bl	80039ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80022c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80022c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d024      	beq.n	8002316 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80022cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ce:	1e5a      	subs	r2, r3, #1
 80022d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80022d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d104      	bne.n	80022e6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80022dc:	f001 fa1c 	bl	8003718 <pvTaskIncrementMutexHeldCount>
 80022e0:	4602      	mov	r2, r0
 80022e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e4:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00f      	beq.n	800230e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f0:	3310      	adds	r3, #16
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 fe82 	bl	8002ffc <xTaskRemoveFromEventList>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d007      	beq.n	800230e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80022fe:	4b54      	ldr	r3, [pc, #336]	; (8002450 <xQueueSemaphoreTake+0x214>)
 8002300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	f3bf 8f4f 	dsb	sy
 800230a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800230e:	f001 fb9d 	bl	8003a4c <vPortExitCritical>
				return pdPASS;
 8002312:	2301      	movs	r3, #1
 8002314:	e097      	b.n	8002446 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d111      	bne.n	8002340 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800231c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00a      	beq.n	8002338 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8002322:	f04f 0320 	mov.w	r3, #32
 8002326:	f383 8811 	msr	BASEPRI, r3
 800232a:	f3bf 8f6f 	isb	sy
 800232e:	f3bf 8f4f 	dsb	sy
 8002332:	617b      	str	r3, [r7, #20]
}
 8002334:	bf00      	nop
 8002336:	e7fe      	b.n	8002336 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002338:	f001 fb88 	bl	8003a4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800233c:	2300      	movs	r3, #0
 800233e:	e082      	b.n	8002446 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002342:	2b00      	cmp	r3, #0
 8002344:	d106      	bne.n	8002354 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002346:	f107 030c 	add.w	r3, r7, #12
 800234a:	4618      	mov	r0, r3
 800234c:	f000 feb8 	bl	80030c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002350:	2301      	movs	r3, #1
 8002352:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002354:	f001 fb7a 	bl	8003a4c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002358:	f000 fc62 	bl	8002c20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800235c:	f001 fb46 	bl	80039ec <vPortEnterCritical>
 8002360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002362:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002366:	b25b      	sxtb	r3, r3
 8002368:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800236c:	d103      	bne.n	8002376 <xQueueSemaphoreTake+0x13a>
 800236e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002378:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800237c:	b25b      	sxtb	r3, r3
 800237e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002382:	d103      	bne.n	800238c <xQueueSemaphoreTake+0x150>
 8002384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002386:	2200      	movs	r2, #0
 8002388:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800238c:	f001 fb5e 	bl	8003a4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002390:	463a      	mov	r2, r7
 8002392:	f107 030c 	add.w	r3, r7, #12
 8002396:	4611      	mov	r1, r2
 8002398:	4618      	mov	r0, r3
 800239a:	f000 fea7 	bl	80030ec <xTaskCheckForTimeOut>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d132      	bne.n	800240a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80023a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80023a6:	f000 f9ce 	bl	8002746 <prvIsQueueEmpty>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d026      	beq.n	80023fe <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80023b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d109      	bne.n	80023cc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80023b8:	f001 fb18 	bl	80039ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80023bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f000 fffd 	bl	80033c0 <xTaskPriorityInherit>
 80023c6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80023c8:	f001 fb40 	bl	8003a4c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80023cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ce:	3324      	adds	r3, #36	; 0x24
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	4611      	mov	r1, r2
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 fded 	bl	8002fb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80023da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80023dc:	f000 f961 	bl	80026a2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80023e0:	f000 fc2c 	bl	8002c3c <xTaskResumeAll>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f47f af68 	bne.w	80022bc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80023ec:	4b18      	ldr	r3, [pc, #96]	; (8002450 <xQueueSemaphoreTake+0x214>)
 80023ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	f3bf 8f4f 	dsb	sy
 80023f8:	f3bf 8f6f 	isb	sy
 80023fc:	e75e      	b.n	80022bc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80023fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002400:	f000 f94f 	bl	80026a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002404:	f000 fc1a 	bl	8002c3c <xTaskResumeAll>
 8002408:	e758      	b.n	80022bc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800240a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800240c:	f000 f949 	bl	80026a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002410:	f000 fc14 	bl	8002c3c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002414:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002416:	f000 f996 	bl	8002746 <prvIsQueueEmpty>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	f43f af4d 	beq.w	80022bc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00d      	beq.n	8002444 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8002428:	f001 fae0 	bl	80039ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800242c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800242e:	f000 f891 	bl	8002554 <prvGetDisinheritPriorityAfterTimeout>
 8002432:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8002434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800243a:	4618      	mov	r0, r3
 800243c:	f001 f8cc 	bl	80035d8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002440:	f001 fb04 	bl	8003a4c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002444:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002446:	4618      	mov	r0, r3
 8002448:	3738      	adds	r7, #56	; 0x38
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	e000ed04 	.word	0xe000ed04

08002454 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08e      	sub	sp, #56	; 0x38
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10a      	bne.n	8002480 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800246a:	f04f 0320 	mov.w	r3, #32
 800246e:	f383 8811 	msr	BASEPRI, r3
 8002472:	f3bf 8f6f 	isb	sy
 8002476:	f3bf 8f4f 	dsb	sy
 800247a:	623b      	str	r3, [r7, #32]
}
 800247c:	bf00      	nop
 800247e:	e7fe      	b.n	800247e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d103      	bne.n	800248e <xQueueReceiveFromISR+0x3a>
 8002486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <xQueueReceiveFromISR+0x3e>
 800248e:	2301      	movs	r3, #1
 8002490:	e000      	b.n	8002494 <xQueueReceiveFromISR+0x40>
 8002492:	2300      	movs	r3, #0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d10a      	bne.n	80024ae <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8002498:	f04f 0320 	mov.w	r3, #32
 800249c:	f383 8811 	msr	BASEPRI, r3
 80024a0:	f3bf 8f6f 	isb	sy
 80024a4:	f3bf 8f4f 	dsb	sy
 80024a8:	61fb      	str	r3, [r7, #28]
}
 80024aa:	bf00      	nop
 80024ac:	e7fe      	b.n	80024ac <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80024ae:	f001 fb5f 	bl	8003b70 <vPortValidateInterruptPriority>
	__asm volatile
 80024b2:	f3ef 8211 	mrs	r2, BASEPRI
 80024b6:	f04f 0320 	mov.w	r3, #32
 80024ba:	f383 8811 	msr	BASEPRI, r3
 80024be:	f3bf 8f6f 	isb	sy
 80024c2:	f3bf 8f4f 	dsb	sy
 80024c6:	61ba      	str	r2, [r7, #24]
 80024c8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80024ca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80024cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80024ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80024d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d02f      	beq.n	800253a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80024da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80024e4:	68b9      	ldr	r1, [r7, #8]
 80024e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024e8:	f000 f8b5 	bl	8002656 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80024ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ee:	1e5a      	subs	r2, r3, #1
 80024f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80024f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80024f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024fc:	d112      	bne.n	8002524 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d016      	beq.n	8002534 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002508:	3310      	adds	r3, #16
 800250a:	4618      	mov	r0, r3
 800250c:	f000 fd76 	bl	8002ffc <xTaskRemoveFromEventList>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00e      	beq.n	8002534 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00b      	beq.n	8002534 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	e007      	b.n	8002534 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002528:	3301      	adds	r3, #1
 800252a:	b2db      	uxtb	r3, r3
 800252c:	b25a      	sxtb	r2, r3
 800252e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8002534:	2301      	movs	r3, #1
 8002536:	637b      	str	r3, [r7, #52]	; 0x34
 8002538:	e001      	b.n	800253e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800253a:	2300      	movs	r3, #0
 800253c:	637b      	str	r3, [r7, #52]	; 0x34
 800253e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002540:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	f383 8811 	msr	BASEPRI, r3
}
 8002548:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800254a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800254c:	4618      	mov	r0, r3
 800254e:	3738      	adds	r7, #56	; 0x38
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002560:	2b00      	cmp	r3, #0
 8002562:	d006      	beq.n	8002572 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f1c3 0307 	rsb	r3, r3, #7
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	e001      	b.n	8002576 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002572:	2300      	movs	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002576:	68fb      	ldr	r3, [r7, #12]
	}
 8002578:	4618      	mov	r0, r3
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr

08002582 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b086      	sub	sp, #24
 8002586:	af00      	add	r7, sp, #0
 8002588:	60f8      	str	r0, [r7, #12]
 800258a:	60b9      	str	r1, [r7, #8]
 800258c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800258e:	2300      	movs	r3, #0
 8002590:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002596:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10d      	bne.n	80025bc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d14d      	bne.n	8002644 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f000 ff8d 	bl	80034cc <xTaskPriorityDisinherit>
 80025b2:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	e043      	b.n	8002644 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d119      	bne.n	80025f6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6898      	ldr	r0, [r3, #8]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	461a      	mov	r2, r3
 80025cc:	68b9      	ldr	r1, [r7, #8]
 80025ce:	f001 fd0b 	bl	8003fe8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	689a      	ldr	r2, [r3, #8]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	441a      	add	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d32b      	bcc.n	8002644 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	609a      	str	r2, [r3, #8]
 80025f4:	e026      	b.n	8002644 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	68d8      	ldr	r0, [r3, #12]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	461a      	mov	r2, r3
 8002600:	68b9      	ldr	r1, [r7, #8]
 8002602:	f001 fcf1 	bl	8003fe8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	68da      	ldr	r2, [r3, #12]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	425b      	negs	r3, r3
 8002610:	441a      	add	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	68da      	ldr	r2, [r3, #12]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	429a      	cmp	r2, r3
 8002620:	d207      	bcs.n	8002632 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	425b      	negs	r3, r3
 800262c:	441a      	add	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b02      	cmp	r3, #2
 8002636:	d105      	bne.n	8002644 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d002      	beq.n	8002644 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	3b01      	subs	r3, #1
 8002642:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1c5a      	adds	r2, r3, #1
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800264c:	697b      	ldr	r3, [r7, #20]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3718      	adds	r7, #24
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b082      	sub	sp, #8
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
 800265e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	2b00      	cmp	r3, #0
 8002666:	d018      	beq.n	800269a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68da      	ldr	r2, [r3, #12]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	441a      	add	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68da      	ldr	r2, [r3, #12]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	429a      	cmp	r2, r3
 8002680:	d303      	bcc.n	800268a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68d9      	ldr	r1, [r3, #12]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	461a      	mov	r2, r3
 8002694:	6838      	ldr	r0, [r7, #0]
 8002696:	f001 fca7 	bl	8003fe8 <memcpy>
	}
}
 800269a:	bf00      	nop
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b084      	sub	sp, #16
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80026aa:	f001 f99f 	bl	80039ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026b4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80026b6:	e011      	b.n	80026dc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d012      	beq.n	80026e6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3324      	adds	r3, #36	; 0x24
 80026c4:	4618      	mov	r0, r3
 80026c6:	f000 fc99 	bl	8002ffc <xTaskRemoveFromEventList>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80026d0:	f000 fd6e 	bl	80031b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80026dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	dce9      	bgt.n	80026b8 <prvUnlockQueue+0x16>
 80026e4:	e000      	b.n	80026e8 <prvUnlockQueue+0x46>
					break;
 80026e6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	22ff      	movs	r2, #255	; 0xff
 80026ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80026f0:	f001 f9ac 	bl	8003a4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80026f4:	f001 f97a 	bl	80039ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026fe:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002700:	e011      	b.n	8002726 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d012      	beq.n	8002730 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	3310      	adds	r3, #16
 800270e:	4618      	mov	r0, r3
 8002710:	f000 fc74 	bl	8002ffc <xTaskRemoveFromEventList>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800271a:	f000 fd49 	bl	80031b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800271e:	7bbb      	ldrb	r3, [r7, #14]
 8002720:	3b01      	subs	r3, #1
 8002722:	b2db      	uxtb	r3, r3
 8002724:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002726:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800272a:	2b00      	cmp	r3, #0
 800272c:	dce9      	bgt.n	8002702 <prvUnlockQueue+0x60>
 800272e:	e000      	b.n	8002732 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002730:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	22ff      	movs	r2, #255	; 0xff
 8002736:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800273a:	f001 f987 	bl	8003a4c <vPortExitCritical>
}
 800273e:	bf00      	nop
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b084      	sub	sp, #16
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800274e:	f001 f94d 	bl	80039ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002756:	2b00      	cmp	r3, #0
 8002758:	d102      	bne.n	8002760 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800275a:	2301      	movs	r3, #1
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	e001      	b.n	8002764 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002760:	2300      	movs	r3, #0
 8002762:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002764:	f001 f972 	bl	8003a4c <vPortExitCritical>

	return xReturn;
 8002768:	68fb      	ldr	r3, [r7, #12]
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b084      	sub	sp, #16
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800277a:	f001 f937 	bl	80039ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002786:	429a      	cmp	r2, r3
 8002788:	d102      	bne.n	8002790 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800278a:	2301      	movs	r3, #1
 800278c:	60fb      	str	r3, [r7, #12]
 800278e:	e001      	b.n	8002794 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002790:	2300      	movs	r3, #0
 8002792:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002794:	f001 f95a 	bl	8003a4c <vPortExitCritical>

	return xReturn;
 8002798:	68fb      	ldr	r3, [r7, #12]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b08e      	sub	sp, #56	; 0x38
 80027a6:	af04      	add	r7, sp, #16
 80027a8:	60f8      	str	r0, [r7, #12]
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	607a      	str	r2, [r7, #4]
 80027ae:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80027b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10a      	bne.n	80027cc <xTaskCreateStatic+0x2a>
	__asm volatile
 80027b6:	f04f 0320 	mov.w	r3, #32
 80027ba:	f383 8811 	msr	BASEPRI, r3
 80027be:	f3bf 8f6f 	isb	sy
 80027c2:	f3bf 8f4f 	dsb	sy
 80027c6:	623b      	str	r3, [r7, #32]
}
 80027c8:	bf00      	nop
 80027ca:	e7fe      	b.n	80027ca <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80027cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10a      	bne.n	80027e8 <xTaskCreateStatic+0x46>
	__asm volatile
 80027d2:	f04f 0320 	mov.w	r3, #32
 80027d6:	f383 8811 	msr	BASEPRI, r3
 80027da:	f3bf 8f6f 	isb	sy
 80027de:	f3bf 8f4f 	dsb	sy
 80027e2:	61fb      	str	r3, [r7, #28]
}
 80027e4:	bf00      	nop
 80027e6:	e7fe      	b.n	80027e6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80027e8:	23b4      	movs	r3, #180	; 0xb4
 80027ea:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	2bb4      	cmp	r3, #180	; 0xb4
 80027f0:	d00a      	beq.n	8002808 <xTaskCreateStatic+0x66>
	__asm volatile
 80027f2:	f04f 0320 	mov.w	r3, #32
 80027f6:	f383 8811 	msr	BASEPRI, r3
 80027fa:	f3bf 8f6f 	isb	sy
 80027fe:	f3bf 8f4f 	dsb	sy
 8002802:	61bb      	str	r3, [r7, #24]
}
 8002804:	bf00      	nop
 8002806:	e7fe      	b.n	8002806 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800280a:	2b00      	cmp	r3, #0
 800280c:	d01e      	beq.n	800284c <xTaskCreateStatic+0xaa>
 800280e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002810:	2b00      	cmp	r3, #0
 8002812:	d01b      	beq.n	800284c <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800281c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	2202      	movs	r2, #2
 8002822:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002826:	2300      	movs	r3, #0
 8002828:	9303      	str	r3, [sp, #12]
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	9302      	str	r3, [sp, #8]
 800282e:	f107 0314 	add.w	r3, r7, #20
 8002832:	9301      	str	r3, [sp, #4]
 8002834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	68b9      	ldr	r1, [r7, #8]
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 f850 	bl	80028e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002844:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002846:	f000 f8e3 	bl	8002a10 <prvAddNewTaskToReadyList>
 800284a:	e001      	b.n	8002850 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800284c:	2300      	movs	r3, #0
 800284e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002850:	697b      	ldr	r3, [r7, #20]
	}
 8002852:	4618      	mov	r0, r3
 8002854:	3728      	adds	r7, #40	; 0x28
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800285a:	b580      	push	{r7, lr}
 800285c:	b08c      	sub	sp, #48	; 0x30
 800285e:	af04      	add	r7, sp, #16
 8002860:	60f8      	str	r0, [r7, #12]
 8002862:	60b9      	str	r1, [r7, #8]
 8002864:	603b      	str	r3, [r7, #0]
 8002866:	4613      	mov	r3, r2
 8002868:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800286a:	88fb      	ldrh	r3, [r7, #6]
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4618      	mov	r0, r3
 8002870:	f001 f9bc 	bl	8003bec <pvPortMalloc>
 8002874:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00e      	beq.n	800289a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800287c:	20b4      	movs	r0, #180	; 0xb4
 800287e:	f001 f9b5 	bl	8003bec <pvPortMalloc>
 8002882:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	631a      	str	r2, [r3, #48]	; 0x30
 8002890:	e005      	b.n	800289e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002892:	6978      	ldr	r0, [r7, #20]
 8002894:	f001 fa6e 	bl	8003d74 <vPortFree>
 8002898:	e001      	b.n	800289e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800289a:	2300      	movs	r3, #0
 800289c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d017      	beq.n	80028d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80028ac:	88fa      	ldrh	r2, [r7, #6]
 80028ae:	2300      	movs	r3, #0
 80028b0:	9303      	str	r3, [sp, #12]
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	9302      	str	r3, [sp, #8]
 80028b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b8:	9301      	str	r3, [sp, #4]
 80028ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	68b9      	ldr	r1, [r7, #8]
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 f80e 	bl	80028e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80028c8:	69f8      	ldr	r0, [r7, #28]
 80028ca:	f000 f8a1 	bl	8002a10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80028ce:	2301      	movs	r3, #1
 80028d0:	61bb      	str	r3, [r7, #24]
 80028d2:	e002      	b.n	80028da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80028d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80028da:	69bb      	ldr	r3, [r7, #24]
	}
 80028dc:	4618      	mov	r0, r3
 80028de:	3720      	adds	r7, #32
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b088      	sub	sp, #32
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
 80028f0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80028f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80028fc:	3b01      	subs	r3, #1
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	f023 0307 	bic.w	r3, r3, #7
 800290a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00a      	beq.n	800292c <prvInitialiseNewTask+0x48>
	__asm volatile
 8002916:	f04f 0320 	mov.w	r3, #32
 800291a:	f383 8811 	msr	BASEPRI, r3
 800291e:	f3bf 8f6f 	isb	sy
 8002922:	f3bf 8f4f 	dsb	sy
 8002926:	617b      	str	r3, [r7, #20]
}
 8002928:	bf00      	nop
 800292a:	e7fe      	b.n	800292a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800292c:	2300      	movs	r3, #0
 800292e:	61fb      	str	r3, [r7, #28]
 8002930:	e012      	b.n	8002958 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	4413      	add	r3, r2
 8002938:	7819      	ldrb	r1, [r3, #0]
 800293a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	4413      	add	r3, r2
 8002940:	3334      	adds	r3, #52	; 0x34
 8002942:	460a      	mov	r2, r1
 8002944:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	4413      	add	r3, r2
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d006      	beq.n	8002960 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	3301      	adds	r3, #1
 8002956:	61fb      	str	r3, [r7, #28]
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	2b0f      	cmp	r3, #15
 800295c:	d9e9      	bls.n	8002932 <prvInitialiseNewTask+0x4e>
 800295e:	e000      	b.n	8002962 <prvInitialiseNewTask+0x7e>
		{
			break;
 8002960:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800296a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296c:	2b06      	cmp	r3, #6
 800296e:	d901      	bls.n	8002974 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002970:	2306      	movs	r3, #6
 8002972:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002976:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002978:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800297a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800297e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002982:	2200      	movs	r2, #0
 8002984:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002988:	3304      	adds	r3, #4
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff f8fd 	bl	8001b8a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002992:	3318      	adds	r3, #24
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff f8f8 	bl	8001b8a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800299a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800299e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a2:	f1c3 0207 	rsb	r2, r3, #7
 80029a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80029aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80029b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b2:	2200      	movs	r2, #0
 80029b4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80029b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80029c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c2:	334c      	adds	r3, #76	; 0x4c
 80029c4:	2260      	movs	r2, #96	; 0x60
 80029c6:	2100      	movs	r1, #0
 80029c8:	4618      	mov	r0, r3
 80029ca:	f001 fb1b 	bl	8004004 <memset>
 80029ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d0:	4a0c      	ldr	r2, [pc, #48]	; (8002a04 <prvInitialiseNewTask+0x120>)
 80029d2:	651a      	str	r2, [r3, #80]	; 0x50
 80029d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d6:	4a0c      	ldr	r2, [pc, #48]	; (8002a08 <prvInitialiseNewTask+0x124>)
 80029d8:	655a      	str	r2, [r3, #84]	; 0x54
 80029da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029dc:	4a0b      	ldr	r2, [pc, #44]	; (8002a0c <prvInitialiseNewTask+0x128>)
 80029de:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	68f9      	ldr	r1, [r7, #12]
 80029e4:	69b8      	ldr	r0, [r7, #24]
 80029e6:	f000 ff11 	bl	800380c <pxPortInitialiseStack>
 80029ea:	4602      	mov	r2, r0
 80029ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ee:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80029f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d002      	beq.n	80029fc <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80029f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80029fc:	bf00      	nop
 80029fe:	3720      	adds	r7, #32
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	08004240 	.word	0x08004240
 8002a08:	08004260 	.word	0x08004260
 8002a0c:	08004220 	.word	0x08004220

08002a10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002a18:	f000 ffe8 	bl	80039ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002a1c:	4b2a      	ldr	r3, [pc, #168]	; (8002ac8 <prvAddNewTaskToReadyList+0xb8>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	3301      	adds	r3, #1
 8002a22:	4a29      	ldr	r2, [pc, #164]	; (8002ac8 <prvAddNewTaskToReadyList+0xb8>)
 8002a24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002a26:	4b29      	ldr	r3, [pc, #164]	; (8002acc <prvAddNewTaskToReadyList+0xbc>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d109      	bne.n	8002a42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002a2e:	4a27      	ldr	r2, [pc, #156]	; (8002acc <prvAddNewTaskToReadyList+0xbc>)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002a34:	4b24      	ldr	r3, [pc, #144]	; (8002ac8 <prvAddNewTaskToReadyList+0xb8>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d110      	bne.n	8002a5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002a3c:	f000 fbdc 	bl	80031f8 <prvInitialiseTaskLists>
 8002a40:	e00d      	b.n	8002a5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002a42:	4b23      	ldr	r3, [pc, #140]	; (8002ad0 <prvAddNewTaskToReadyList+0xc0>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d109      	bne.n	8002a5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002a4a:	4b20      	ldr	r3, [pc, #128]	; (8002acc <prvAddNewTaskToReadyList+0xbc>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d802      	bhi.n	8002a5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002a58:	4a1c      	ldr	r2, [pc, #112]	; (8002acc <prvAddNewTaskToReadyList+0xbc>)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002a5e:	4b1d      	ldr	r3, [pc, #116]	; (8002ad4 <prvAddNewTaskToReadyList+0xc4>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	3301      	adds	r3, #1
 8002a64:	4a1b      	ldr	r2, [pc, #108]	; (8002ad4 <prvAddNewTaskToReadyList+0xc4>)
 8002a66:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	409a      	lsls	r2, r3
 8002a70:	4b19      	ldr	r3, [pc, #100]	; (8002ad8 <prvAddNewTaskToReadyList+0xc8>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	4a18      	ldr	r2, [pc, #96]	; (8002ad8 <prvAddNewTaskToReadyList+0xc8>)
 8002a78:	6013      	str	r3, [r2, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a7e:	4613      	mov	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4a15      	ldr	r2, [pc, #84]	; (8002adc <prvAddNewTaskToReadyList+0xcc>)
 8002a88:	441a      	add	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4610      	mov	r0, r2
 8002a92:	f7ff f886 	bl	8001ba2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002a96:	f000 ffd9 	bl	8003a4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002a9a:	4b0d      	ldr	r3, [pc, #52]	; (8002ad0 <prvAddNewTaskToReadyList+0xc0>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00e      	beq.n	8002ac0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002aa2:	4b0a      	ldr	r3, [pc, #40]	; (8002acc <prvAddNewTaskToReadyList+0xbc>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d207      	bcs.n	8002ac0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <prvAddNewTaskToReadyList+0xd0>)
 8002ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	f3bf 8f4f 	dsb	sy
 8002abc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ac0:	bf00      	nop
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	2000049c 	.word	0x2000049c
 8002acc:	2000039c 	.word	0x2000039c
 8002ad0:	200004a8 	.word	0x200004a8
 8002ad4:	200004b8 	.word	0x200004b8
 8002ad8:	200004a4 	.word	0x200004a4
 8002adc:	200003a0 	.word	0x200003a0
 8002ae0:	e000ed04 	.word	0xe000ed04

08002ae4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002aec:	2300      	movs	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d017      	beq.n	8002b26 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002af6:	4b13      	ldr	r3, [pc, #76]	; (8002b44 <vTaskDelay+0x60>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00a      	beq.n	8002b14 <vTaskDelay+0x30>
	__asm volatile
 8002afe:	f04f 0320 	mov.w	r3, #32
 8002b02:	f383 8811 	msr	BASEPRI, r3
 8002b06:	f3bf 8f6f 	isb	sy
 8002b0a:	f3bf 8f4f 	dsb	sy
 8002b0e:	60bb      	str	r3, [r7, #8]
}
 8002b10:	bf00      	nop
 8002b12:	e7fe      	b.n	8002b12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002b14:	f000 f884 	bl	8002c20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002b18:	2100      	movs	r1, #0
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 fe10 	bl	8003740 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002b20:	f000 f88c 	bl	8002c3c <xTaskResumeAll>
 8002b24:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d107      	bne.n	8002b3c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002b2c:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <vTaskDelay+0x64>)
 8002b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	f3bf 8f4f 	dsb	sy
 8002b38:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002b3c:	bf00      	nop
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	200004c4 	.word	0x200004c4
 8002b48:	e000ed04 	.word	0xe000ed04

08002b4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b08a      	sub	sp, #40	; 0x28
 8002b50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002b56:	2300      	movs	r3, #0
 8002b58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002b5a:	463a      	mov	r2, r7
 8002b5c:	1d39      	adds	r1, r7, #4
 8002b5e:	f107 0308 	add.w	r3, r7, #8
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fd faf4 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002b68:	6839      	ldr	r1, [r7, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	9202      	str	r2, [sp, #8]
 8002b70:	9301      	str	r3, [sp, #4]
 8002b72:	2300      	movs	r3, #0
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	2300      	movs	r3, #0
 8002b78:	460a      	mov	r2, r1
 8002b7a:	4921      	ldr	r1, [pc, #132]	; (8002c00 <vTaskStartScheduler+0xb4>)
 8002b7c:	4821      	ldr	r0, [pc, #132]	; (8002c04 <vTaskStartScheduler+0xb8>)
 8002b7e:	f7ff fe10 	bl	80027a2 <xTaskCreateStatic>
 8002b82:	4603      	mov	r3, r0
 8002b84:	4a20      	ldr	r2, [pc, #128]	; (8002c08 <vTaskStartScheduler+0xbc>)
 8002b86:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002b88:	4b1f      	ldr	r3, [pc, #124]	; (8002c08 <vTaskStartScheduler+0xbc>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d002      	beq.n	8002b96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002b90:	2301      	movs	r3, #1
 8002b92:	617b      	str	r3, [r7, #20]
 8002b94:	e001      	b.n	8002b9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002b96:	2300      	movs	r3, #0
 8002b98:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d11b      	bne.n	8002bd8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8002ba0:	f04f 0320 	mov.w	r3, #32
 8002ba4:	f383 8811 	msr	BASEPRI, r3
 8002ba8:	f3bf 8f6f 	isb	sy
 8002bac:	f3bf 8f4f 	dsb	sy
 8002bb0:	613b      	str	r3, [r7, #16]
}
 8002bb2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002bb4:	4b15      	ldr	r3, [pc, #84]	; (8002c0c <vTaskStartScheduler+0xc0>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	334c      	adds	r3, #76	; 0x4c
 8002bba:	4a15      	ldr	r2, [pc, #84]	; (8002c10 <vTaskStartScheduler+0xc4>)
 8002bbc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002bbe:	4b15      	ldr	r3, [pc, #84]	; (8002c14 <vTaskStartScheduler+0xc8>)
 8002bc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002bc4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002bc6:	4b14      	ldr	r3, [pc, #80]	; (8002c18 <vTaskStartScheduler+0xcc>)
 8002bc8:	2201      	movs	r2, #1
 8002bca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002bcc:	4b13      	ldr	r3, [pc, #76]	; (8002c1c <vTaskStartScheduler+0xd0>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002bd2:	f000 fe99 	bl	8003908 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002bd6:	e00e      	b.n	8002bf6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bde:	d10a      	bne.n	8002bf6 <vTaskStartScheduler+0xaa>
	__asm volatile
 8002be0:	f04f 0320 	mov.w	r3, #32
 8002be4:	f383 8811 	msr	BASEPRI, r3
 8002be8:	f3bf 8f6f 	isb	sy
 8002bec:	f3bf 8f4f 	dsb	sy
 8002bf0:	60fb      	str	r3, [r7, #12]
}
 8002bf2:	bf00      	nop
 8002bf4:	e7fe      	b.n	8002bf4 <vTaskStartScheduler+0xa8>
}
 8002bf6:	bf00      	nop
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	08004200 	.word	0x08004200
 8002c04:	080031c9 	.word	0x080031c9
 8002c08:	200004c0 	.word	0x200004c0
 8002c0c:	2000039c 	.word	0x2000039c
 8002c10:	20000010 	.word	0x20000010
 8002c14:	200004bc 	.word	0x200004bc
 8002c18:	200004a8 	.word	0x200004a8
 8002c1c:	200004a0 	.word	0x200004a0

08002c20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002c24:	4b04      	ldr	r3, [pc, #16]	; (8002c38 <vTaskSuspendAll+0x18>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	4a03      	ldr	r2, [pc, #12]	; (8002c38 <vTaskSuspendAll+0x18>)
 8002c2c:	6013      	str	r3, [r2, #0]
}
 8002c2e:	bf00      	nop
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bc80      	pop	{r7}
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	200004c4 	.word	0x200004c4

08002c3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002c42:	2300      	movs	r3, #0
 8002c44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002c46:	2300      	movs	r3, #0
 8002c48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002c4a:	4b41      	ldr	r3, [pc, #260]	; (8002d50 <xTaskResumeAll+0x114>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10a      	bne.n	8002c68 <xTaskResumeAll+0x2c>
	__asm volatile
 8002c52:	f04f 0320 	mov.w	r3, #32
 8002c56:	f383 8811 	msr	BASEPRI, r3
 8002c5a:	f3bf 8f6f 	isb	sy
 8002c5e:	f3bf 8f4f 	dsb	sy
 8002c62:	603b      	str	r3, [r7, #0]
}
 8002c64:	bf00      	nop
 8002c66:	e7fe      	b.n	8002c66 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002c68:	f000 fec0 	bl	80039ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002c6c:	4b38      	ldr	r3, [pc, #224]	; (8002d50 <xTaskResumeAll+0x114>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	3b01      	subs	r3, #1
 8002c72:	4a37      	ldr	r2, [pc, #220]	; (8002d50 <xTaskResumeAll+0x114>)
 8002c74:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c76:	4b36      	ldr	r3, [pc, #216]	; (8002d50 <xTaskResumeAll+0x114>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d161      	bne.n	8002d42 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002c7e:	4b35      	ldr	r3, [pc, #212]	; (8002d54 <xTaskResumeAll+0x118>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d05d      	beq.n	8002d42 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c86:	e02e      	b.n	8002ce6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002c88:	4b33      	ldr	r3, [pc, #204]	; (8002d58 <xTaskResumeAll+0x11c>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	3318      	adds	r3, #24
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7fe ffdf 	bl	8001c58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	3304      	adds	r3, #4
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fe ffda 	bl	8001c58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca8:	2201      	movs	r2, #1
 8002caa:	409a      	lsls	r2, r3
 8002cac:	4b2b      	ldr	r3, [pc, #172]	; (8002d5c <xTaskResumeAll+0x120>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	4a2a      	ldr	r2, [pc, #168]	; (8002d5c <xTaskResumeAll+0x120>)
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cba:	4613      	mov	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4413      	add	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4a27      	ldr	r2, [pc, #156]	; (8002d60 <xTaskResumeAll+0x124>)
 8002cc4:	441a      	add	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	3304      	adds	r3, #4
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4610      	mov	r0, r2
 8002cce:	f7fe ff68 	bl	8001ba2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd6:	4b23      	ldr	r3, [pc, #140]	; (8002d64 <xTaskResumeAll+0x128>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d302      	bcc.n	8002ce6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002ce0:	4b21      	ldr	r3, [pc, #132]	; (8002d68 <xTaskResumeAll+0x12c>)
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ce6:	4b1c      	ldr	r3, [pc, #112]	; (8002d58 <xTaskResumeAll+0x11c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1cc      	bne.n	8002c88 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002cf4:	f000 fb22 	bl	800333c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002cf8:	4b1c      	ldr	r3, [pc, #112]	; (8002d6c <xTaskResumeAll+0x130>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d010      	beq.n	8002d26 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002d04:	f000 f836 	bl	8002d74 <xTaskIncrementTick>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d002      	beq.n	8002d14 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002d0e:	4b16      	ldr	r3, [pc, #88]	; (8002d68 <xTaskResumeAll+0x12c>)
 8002d10:	2201      	movs	r2, #1
 8002d12:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1f1      	bne.n	8002d04 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8002d20:	4b12      	ldr	r3, [pc, #72]	; (8002d6c <xTaskResumeAll+0x130>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002d26:	4b10      	ldr	r3, [pc, #64]	; (8002d68 <xTaskResumeAll+0x12c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d009      	beq.n	8002d42 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002d32:	4b0f      	ldr	r3, [pc, #60]	; (8002d70 <xTaskResumeAll+0x134>)
 8002d34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	f3bf 8f4f 	dsb	sy
 8002d3e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002d42:	f000 fe83 	bl	8003a4c <vPortExitCritical>

	return xAlreadyYielded;
 8002d46:	68bb      	ldr	r3, [r7, #8]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	200004c4 	.word	0x200004c4
 8002d54:	2000049c 	.word	0x2000049c
 8002d58:	2000045c 	.word	0x2000045c
 8002d5c:	200004a4 	.word	0x200004a4
 8002d60:	200003a0 	.word	0x200003a0
 8002d64:	2000039c 	.word	0x2000039c
 8002d68:	200004b0 	.word	0x200004b0
 8002d6c:	200004ac 	.word	0x200004ac
 8002d70:	e000ed04 	.word	0xe000ed04

08002d74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d7e:	4b51      	ldr	r3, [pc, #324]	; (8002ec4 <xTaskIncrementTick+0x150>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f040 808d 	bne.w	8002ea2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d88:	4b4f      	ldr	r3, [pc, #316]	; (8002ec8 <xTaskIncrementTick+0x154>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002d90:	4a4d      	ldr	r2, [pc, #308]	; (8002ec8 <xTaskIncrementTick+0x154>)
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d120      	bne.n	8002dde <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002d9c:	4b4b      	ldr	r3, [pc, #300]	; (8002ecc <xTaskIncrementTick+0x158>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00a      	beq.n	8002dbc <xTaskIncrementTick+0x48>
	__asm volatile
 8002da6:	f04f 0320 	mov.w	r3, #32
 8002daa:	f383 8811 	msr	BASEPRI, r3
 8002dae:	f3bf 8f6f 	isb	sy
 8002db2:	f3bf 8f4f 	dsb	sy
 8002db6:	603b      	str	r3, [r7, #0]
}
 8002db8:	bf00      	nop
 8002dba:	e7fe      	b.n	8002dba <xTaskIncrementTick+0x46>
 8002dbc:	4b43      	ldr	r3, [pc, #268]	; (8002ecc <xTaskIncrementTick+0x158>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	4b43      	ldr	r3, [pc, #268]	; (8002ed0 <xTaskIncrementTick+0x15c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a41      	ldr	r2, [pc, #260]	; (8002ecc <xTaskIncrementTick+0x158>)
 8002dc8:	6013      	str	r3, [r2, #0]
 8002dca:	4a41      	ldr	r2, [pc, #260]	; (8002ed0 <xTaskIncrementTick+0x15c>)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6013      	str	r3, [r2, #0]
 8002dd0:	4b40      	ldr	r3, [pc, #256]	; (8002ed4 <xTaskIncrementTick+0x160>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	4a3f      	ldr	r2, [pc, #252]	; (8002ed4 <xTaskIncrementTick+0x160>)
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	f000 faaf 	bl	800333c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002dde:	4b3e      	ldr	r3, [pc, #248]	; (8002ed8 <xTaskIncrementTick+0x164>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d34d      	bcc.n	8002e84 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002de8:	4b38      	ldr	r3, [pc, #224]	; (8002ecc <xTaskIncrementTick+0x158>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <xTaskIncrementTick+0x82>
 8002df2:	2301      	movs	r3, #1
 8002df4:	e000      	b.n	8002df8 <xTaskIncrementTick+0x84>
 8002df6:	2300      	movs	r3, #0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d004      	beq.n	8002e06 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dfc:	4b36      	ldr	r3, [pc, #216]	; (8002ed8 <xTaskIncrementTick+0x164>)
 8002dfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e02:	601a      	str	r2, [r3, #0]
					break;
 8002e04:	e03e      	b.n	8002e84 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002e06:	4b31      	ldr	r3, [pc, #196]	; (8002ecc <xTaskIncrementTick+0x158>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d203      	bcs.n	8002e26 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002e1e:	4a2e      	ldr	r2, [pc, #184]	; (8002ed8 <xTaskIncrementTick+0x164>)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6013      	str	r3, [r2, #0]
						break;
 8002e24:	e02e      	b.n	8002e84 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	3304      	adds	r3, #4
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7fe ff14 	bl	8001c58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d004      	beq.n	8002e42 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	3318      	adds	r3, #24
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7fe ff0b 	bl	8001c58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e46:	2201      	movs	r2, #1
 8002e48:	409a      	lsls	r2, r3
 8002e4a:	4b24      	ldr	r3, [pc, #144]	; (8002edc <xTaskIncrementTick+0x168>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	4a22      	ldr	r2, [pc, #136]	; (8002edc <xTaskIncrementTick+0x168>)
 8002e52:	6013      	str	r3, [r2, #0]
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e58:	4613      	mov	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4413      	add	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4a1f      	ldr	r2, [pc, #124]	; (8002ee0 <xTaskIncrementTick+0x16c>)
 8002e62:	441a      	add	r2, r3
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	3304      	adds	r3, #4
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4610      	mov	r0, r2
 8002e6c:	f7fe fe99 	bl	8001ba2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e74:	4b1b      	ldr	r3, [pc, #108]	; (8002ee4 <xTaskIncrementTick+0x170>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d3b4      	bcc.n	8002de8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e82:	e7b1      	b.n	8002de8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002e84:	4b17      	ldr	r3, [pc, #92]	; (8002ee4 <xTaskIncrementTick+0x170>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e8a:	4915      	ldr	r1, [pc, #84]	; (8002ee0 <xTaskIncrementTick+0x16c>)
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4413      	add	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d907      	bls.n	8002eac <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	617b      	str	r3, [r7, #20]
 8002ea0:	e004      	b.n	8002eac <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002ea2:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <xTaskIncrementTick+0x174>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	4a0f      	ldr	r2, [pc, #60]	; (8002ee8 <xTaskIncrementTick+0x174>)
 8002eaa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002eac:	4b0f      	ldr	r3, [pc, #60]	; (8002eec <xTaskIncrementTick+0x178>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002eb8:	697b      	ldr	r3, [r7, #20]
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3718      	adds	r7, #24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	200004c4 	.word	0x200004c4
 8002ec8:	200004a0 	.word	0x200004a0
 8002ecc:	20000454 	.word	0x20000454
 8002ed0:	20000458 	.word	0x20000458
 8002ed4:	200004b4 	.word	0x200004b4
 8002ed8:	200004bc 	.word	0x200004bc
 8002edc:	200004a4 	.word	0x200004a4
 8002ee0:	200003a0 	.word	0x200003a0
 8002ee4:	2000039c 	.word	0x2000039c
 8002ee8:	200004ac 	.word	0x200004ac
 8002eec:	200004b0 	.word	0x200004b0

08002ef0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002ef6:	4b29      	ldr	r3, [pc, #164]	; (8002f9c <vTaskSwitchContext+0xac>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002efe:	4b28      	ldr	r3, [pc, #160]	; (8002fa0 <vTaskSwitchContext+0xb0>)
 8002f00:	2201      	movs	r2, #1
 8002f02:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002f04:	e044      	b.n	8002f90 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8002f06:	4b26      	ldr	r3, [pc, #152]	; (8002fa0 <vTaskSwitchContext+0xb0>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002f0c:	4b25      	ldr	r3, [pc, #148]	; (8002fa4 <vTaskSwitchContext+0xb4>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	fab3 f383 	clz	r3, r3
 8002f18:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002f1a:	7afb      	ldrb	r3, [r7, #11]
 8002f1c:	f1c3 031f 	rsb	r3, r3, #31
 8002f20:	617b      	str	r3, [r7, #20]
 8002f22:	4921      	ldr	r1, [pc, #132]	; (8002fa8 <vTaskSwitchContext+0xb8>)
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	4613      	mov	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	440b      	add	r3, r1
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10a      	bne.n	8002f4c <vTaskSwitchContext+0x5c>
	__asm volatile
 8002f36:	f04f 0320 	mov.w	r3, #32
 8002f3a:	f383 8811 	msr	BASEPRI, r3
 8002f3e:	f3bf 8f6f 	isb	sy
 8002f42:	f3bf 8f4f 	dsb	sy
 8002f46:	607b      	str	r3, [r7, #4]
}
 8002f48:	bf00      	nop
 8002f4a:	e7fe      	b.n	8002f4a <vTaskSwitchContext+0x5a>
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4413      	add	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4a14      	ldr	r2, [pc, #80]	; (8002fa8 <vTaskSwitchContext+0xb8>)
 8002f58:	4413      	add	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	605a      	str	r2, [r3, #4]
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	3308      	adds	r3, #8
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d104      	bne.n	8002f7c <vTaskSwitchContext+0x8c>
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	605a      	str	r2, [r3, #4]
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	4a0a      	ldr	r2, [pc, #40]	; (8002fac <vTaskSwitchContext+0xbc>)
 8002f84:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002f86:	4b09      	ldr	r3, [pc, #36]	; (8002fac <vTaskSwitchContext+0xbc>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	334c      	adds	r3, #76	; 0x4c
 8002f8c:	4a08      	ldr	r2, [pc, #32]	; (8002fb0 <vTaskSwitchContext+0xc0>)
 8002f8e:	6013      	str	r3, [r2, #0]
}
 8002f90:	bf00      	nop
 8002f92:	371c      	adds	r7, #28
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bc80      	pop	{r7}
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	200004c4 	.word	0x200004c4
 8002fa0:	200004b0 	.word	0x200004b0
 8002fa4:	200004a4 	.word	0x200004a4
 8002fa8:	200003a0 	.word	0x200003a0
 8002fac:	2000039c 	.word	0x2000039c
 8002fb0:	20000010 	.word	0x20000010

08002fb4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10a      	bne.n	8002fda <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8002fc4:	f04f 0320 	mov.w	r3, #32
 8002fc8:	f383 8811 	msr	BASEPRI, r3
 8002fcc:	f3bf 8f6f 	isb	sy
 8002fd0:	f3bf 8f4f 	dsb	sy
 8002fd4:	60fb      	str	r3, [r7, #12]
}
 8002fd6:	bf00      	nop
 8002fd8:	e7fe      	b.n	8002fd8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002fda:	4b07      	ldr	r3, [pc, #28]	; (8002ff8 <vTaskPlaceOnEventList+0x44>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	3318      	adds	r3, #24
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7fe fe00 	bl	8001be8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002fe8:	2101      	movs	r1, #1
 8002fea:	6838      	ldr	r0, [r7, #0]
 8002fec:	f000 fba8 	bl	8003740 <prvAddCurrentTaskToDelayedList>
}
 8002ff0:	bf00      	nop
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	2000039c 	.word	0x2000039c

08002ffc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10a      	bne.n	8003028 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003012:	f04f 0320 	mov.w	r3, #32
 8003016:	f383 8811 	msr	BASEPRI, r3
 800301a:	f3bf 8f6f 	isb	sy
 800301e:	f3bf 8f4f 	dsb	sy
 8003022:	60fb      	str	r3, [r7, #12]
}
 8003024:	bf00      	nop
 8003026:	e7fe      	b.n	8003026 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	3318      	adds	r3, #24
 800302c:	4618      	mov	r0, r3
 800302e:	f7fe fe13 	bl	8001c58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003032:	4b1d      	ldr	r3, [pc, #116]	; (80030a8 <xTaskRemoveFromEventList+0xac>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d11c      	bne.n	8003074 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	3304      	adds	r3, #4
 800303e:	4618      	mov	r0, r3
 8003040:	f7fe fe0a 	bl	8001c58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003048:	2201      	movs	r2, #1
 800304a:	409a      	lsls	r2, r3
 800304c:	4b17      	ldr	r3, [pc, #92]	; (80030ac <xTaskRemoveFromEventList+0xb0>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4313      	orrs	r3, r2
 8003052:	4a16      	ldr	r2, [pc, #88]	; (80030ac <xTaskRemoveFromEventList+0xb0>)
 8003054:	6013      	str	r3, [r2, #0]
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800305a:	4613      	mov	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	4413      	add	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4a13      	ldr	r2, [pc, #76]	; (80030b0 <xTaskRemoveFromEventList+0xb4>)
 8003064:	441a      	add	r2, r3
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	3304      	adds	r3, #4
 800306a:	4619      	mov	r1, r3
 800306c:	4610      	mov	r0, r2
 800306e:	f7fe fd98 	bl	8001ba2 <vListInsertEnd>
 8003072:	e005      	b.n	8003080 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	3318      	adds	r3, #24
 8003078:	4619      	mov	r1, r3
 800307a:	480e      	ldr	r0, [pc, #56]	; (80030b4 <xTaskRemoveFromEventList+0xb8>)
 800307c:	f7fe fd91 	bl	8001ba2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003084:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <xTaskRemoveFromEventList+0xbc>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308a:	429a      	cmp	r2, r3
 800308c:	d905      	bls.n	800309a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800308e:	2301      	movs	r3, #1
 8003090:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003092:	4b0a      	ldr	r3, [pc, #40]	; (80030bc <xTaskRemoveFromEventList+0xc0>)
 8003094:	2201      	movs	r2, #1
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	e001      	b.n	800309e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800309a:	2300      	movs	r3, #0
 800309c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800309e:	697b      	ldr	r3, [r7, #20]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	200004c4 	.word	0x200004c4
 80030ac:	200004a4 	.word	0x200004a4
 80030b0:	200003a0 	.word	0x200003a0
 80030b4:	2000045c 	.word	0x2000045c
 80030b8:	2000039c 	.word	0x2000039c
 80030bc:	200004b0 	.word	0x200004b0

080030c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80030c8:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <vTaskInternalSetTimeOutState+0x24>)
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80030d0:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <vTaskInternalSetTimeOutState+0x28>)
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	605a      	str	r2, [r3, #4]
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	200004b4 	.word	0x200004b4
 80030e8:	200004a0 	.word	0x200004a0

080030ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b088      	sub	sp, #32
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10a      	bne.n	8003112 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80030fc:	f04f 0320 	mov.w	r3, #32
 8003100:	f383 8811 	msr	BASEPRI, r3
 8003104:	f3bf 8f6f 	isb	sy
 8003108:	f3bf 8f4f 	dsb	sy
 800310c:	613b      	str	r3, [r7, #16]
}
 800310e:	bf00      	nop
 8003110:	e7fe      	b.n	8003110 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10a      	bne.n	800312e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003118:	f04f 0320 	mov.w	r3, #32
 800311c:	f383 8811 	msr	BASEPRI, r3
 8003120:	f3bf 8f6f 	isb	sy
 8003124:	f3bf 8f4f 	dsb	sy
 8003128:	60fb      	str	r3, [r7, #12]
}
 800312a:	bf00      	nop
 800312c:	e7fe      	b.n	800312c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800312e:	f000 fc5d 	bl	80039ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003132:	4b1d      	ldr	r3, [pc, #116]	; (80031a8 <xTaskCheckForTimeOut+0xbc>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800314a:	d102      	bne.n	8003152 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800314c:	2300      	movs	r3, #0
 800314e:	61fb      	str	r3, [r7, #28]
 8003150:	e023      	b.n	800319a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	4b15      	ldr	r3, [pc, #84]	; (80031ac <xTaskCheckForTimeOut+0xc0>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	429a      	cmp	r2, r3
 800315c:	d007      	beq.n	800316e <xTaskCheckForTimeOut+0x82>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	429a      	cmp	r2, r3
 8003166:	d302      	bcc.n	800316e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003168:	2301      	movs	r3, #1
 800316a:	61fb      	str	r3, [r7, #28]
 800316c:	e015      	b.n	800319a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	429a      	cmp	r2, r3
 8003176:	d20b      	bcs.n	8003190 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	1ad2      	subs	r2, r2, r3
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f7ff ff9b 	bl	80030c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800318a:	2300      	movs	r3, #0
 800318c:	61fb      	str	r3, [r7, #28]
 800318e:	e004      	b.n	800319a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	2200      	movs	r2, #0
 8003194:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003196:	2301      	movs	r3, #1
 8003198:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800319a:	f000 fc57 	bl	8003a4c <vPortExitCritical>

	return xReturn;
 800319e:	69fb      	ldr	r3, [r7, #28]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3720      	adds	r7, #32
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	200004a0 	.word	0x200004a0
 80031ac:	200004b4 	.word	0x200004b4

080031b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80031b4:	4b03      	ldr	r3, [pc, #12]	; (80031c4 <vTaskMissedYield+0x14>)
 80031b6:	2201      	movs	r2, #1
 80031b8:	601a      	str	r2, [r3, #0]
}
 80031ba:	bf00      	nop
 80031bc:	46bd      	mov	sp, r7
 80031be:	bc80      	pop	{r7}
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	200004b0 	.word	0x200004b0

080031c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80031d0:	f000 f852 	bl	8003278 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80031d4:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <prvIdleTask+0x28>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d9f9      	bls.n	80031d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80031dc:	4b05      	ldr	r3, [pc, #20]	; (80031f4 <prvIdleTask+0x2c>)
 80031de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	f3bf 8f4f 	dsb	sy
 80031e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80031ec:	e7f0      	b.n	80031d0 <prvIdleTask+0x8>
 80031ee:	bf00      	nop
 80031f0:	200003a0 	.word	0x200003a0
 80031f4:	e000ed04 	.word	0xe000ed04

080031f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031fe:	2300      	movs	r3, #0
 8003200:	607b      	str	r3, [r7, #4]
 8003202:	e00c      	b.n	800321e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4413      	add	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4a12      	ldr	r2, [pc, #72]	; (8003258 <prvInitialiseTaskLists+0x60>)
 8003210:	4413      	add	r3, r2
 8003212:	4618      	mov	r0, r3
 8003214:	f7fe fc9a 	bl	8001b4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3301      	adds	r3, #1
 800321c:	607b      	str	r3, [r7, #4]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b06      	cmp	r3, #6
 8003222:	d9ef      	bls.n	8003204 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003224:	480d      	ldr	r0, [pc, #52]	; (800325c <prvInitialiseTaskLists+0x64>)
 8003226:	f7fe fc91 	bl	8001b4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800322a:	480d      	ldr	r0, [pc, #52]	; (8003260 <prvInitialiseTaskLists+0x68>)
 800322c:	f7fe fc8e 	bl	8001b4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003230:	480c      	ldr	r0, [pc, #48]	; (8003264 <prvInitialiseTaskLists+0x6c>)
 8003232:	f7fe fc8b 	bl	8001b4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003236:	480c      	ldr	r0, [pc, #48]	; (8003268 <prvInitialiseTaskLists+0x70>)
 8003238:	f7fe fc88 	bl	8001b4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800323c:	480b      	ldr	r0, [pc, #44]	; (800326c <prvInitialiseTaskLists+0x74>)
 800323e:	f7fe fc85 	bl	8001b4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003242:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <prvInitialiseTaskLists+0x78>)
 8003244:	4a05      	ldr	r2, [pc, #20]	; (800325c <prvInitialiseTaskLists+0x64>)
 8003246:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003248:	4b0a      	ldr	r3, [pc, #40]	; (8003274 <prvInitialiseTaskLists+0x7c>)
 800324a:	4a05      	ldr	r2, [pc, #20]	; (8003260 <prvInitialiseTaskLists+0x68>)
 800324c:	601a      	str	r2, [r3, #0]
}
 800324e:	bf00      	nop
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	200003a0 	.word	0x200003a0
 800325c:	2000042c 	.word	0x2000042c
 8003260:	20000440 	.word	0x20000440
 8003264:	2000045c 	.word	0x2000045c
 8003268:	20000470 	.word	0x20000470
 800326c:	20000488 	.word	0x20000488
 8003270:	20000454 	.word	0x20000454
 8003274:	20000458 	.word	0x20000458

08003278 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800327e:	e019      	b.n	80032b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003280:	f000 fbb4 	bl	80039ec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003284:	4b10      	ldr	r3, [pc, #64]	; (80032c8 <prvCheckTasksWaitingTermination+0x50>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3304      	adds	r3, #4
 8003290:	4618      	mov	r0, r3
 8003292:	f7fe fce1 	bl	8001c58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003296:	4b0d      	ldr	r3, [pc, #52]	; (80032cc <prvCheckTasksWaitingTermination+0x54>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	3b01      	subs	r3, #1
 800329c:	4a0b      	ldr	r2, [pc, #44]	; (80032cc <prvCheckTasksWaitingTermination+0x54>)
 800329e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80032a0:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <prvCheckTasksWaitingTermination+0x58>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	3b01      	subs	r3, #1
 80032a6:	4a0a      	ldr	r2, [pc, #40]	; (80032d0 <prvCheckTasksWaitingTermination+0x58>)
 80032a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80032aa:	f000 fbcf 	bl	8003a4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f810 	bl	80032d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80032b4:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <prvCheckTasksWaitingTermination+0x58>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1e1      	bne.n	8003280 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80032bc:	bf00      	nop
 80032be:	bf00      	nop
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	20000470 	.word	0x20000470
 80032cc:	2000049c 	.word	0x2000049c
 80032d0:	20000484 	.word	0x20000484

080032d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	334c      	adds	r3, #76	; 0x4c
 80032e0:	4618      	mov	r0, r3
 80032e2:	f000 fea5 	bl	8004030 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d108      	bne.n	8003302 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 fd3d 	bl	8003d74 <vPortFree>
				vPortFree( pxTCB );
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 fd3a 	bl	8003d74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003300:	e018      	b.n	8003334 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003308:	2b01      	cmp	r3, #1
 800330a:	d103      	bne.n	8003314 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 fd31 	bl	8003d74 <vPortFree>
	}
 8003312:	e00f      	b.n	8003334 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800331a:	2b02      	cmp	r3, #2
 800331c:	d00a      	beq.n	8003334 <prvDeleteTCB+0x60>
	__asm volatile
 800331e:	f04f 0320 	mov.w	r3, #32
 8003322:	f383 8811 	msr	BASEPRI, r3
 8003326:	f3bf 8f6f 	isb	sy
 800332a:	f3bf 8f4f 	dsb	sy
 800332e:	60fb      	str	r3, [r7, #12]
}
 8003330:	bf00      	nop
 8003332:	e7fe      	b.n	8003332 <prvDeleteTCB+0x5e>
	}
 8003334:	bf00      	nop
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003342:	4b0e      	ldr	r3, [pc, #56]	; (800337c <prvResetNextTaskUnblockTime+0x40>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <prvResetNextTaskUnblockTime+0x14>
 800334c:	2301      	movs	r3, #1
 800334e:	e000      	b.n	8003352 <prvResetNextTaskUnblockTime+0x16>
 8003350:	2300      	movs	r3, #0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d004      	beq.n	8003360 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003356:	4b0a      	ldr	r3, [pc, #40]	; (8003380 <prvResetNextTaskUnblockTime+0x44>)
 8003358:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800335c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800335e:	e008      	b.n	8003372 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003360:	4b06      	ldr	r3, [pc, #24]	; (800337c <prvResetNextTaskUnblockTime+0x40>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	4a04      	ldr	r2, [pc, #16]	; (8003380 <prvResetNextTaskUnblockTime+0x44>)
 8003370:	6013      	str	r3, [r2, #0]
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr
 800337c:	20000454 	.word	0x20000454
 8003380:	200004bc 	.word	0x200004bc

08003384 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800338a:	4b0b      	ldr	r3, [pc, #44]	; (80033b8 <xTaskGetSchedulerState+0x34>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d102      	bne.n	8003398 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003392:	2301      	movs	r3, #1
 8003394:	607b      	str	r3, [r7, #4]
 8003396:	e008      	b.n	80033aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003398:	4b08      	ldr	r3, [pc, #32]	; (80033bc <xTaskGetSchedulerState+0x38>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d102      	bne.n	80033a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80033a0:	2302      	movs	r3, #2
 80033a2:	607b      	str	r3, [r7, #4]
 80033a4:	e001      	b.n	80033aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80033a6:	2300      	movs	r3, #0
 80033a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80033aa:	687b      	ldr	r3, [r7, #4]
	}
 80033ac:	4618      	mov	r0, r3
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bc80      	pop	{r7}
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	200004a8 	.word	0x200004a8
 80033bc:	200004c4 	.word	0x200004c4

080033c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80033cc:	2300      	movs	r3, #0
 80033ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d06e      	beq.n	80034b4 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033da:	4b39      	ldr	r3, [pc, #228]	; (80034c0 <xTaskPriorityInherit+0x100>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d25e      	bcs.n	80034a2 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	db06      	blt.n	80033fa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033ec:	4b34      	ldr	r3, [pc, #208]	; (80034c0 <xTaskPriorityInherit+0x100>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f2:	f1c3 0207 	rsb	r2, r3, #7
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	6959      	ldr	r1, [r3, #20]
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003402:	4613      	mov	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4a2e      	ldr	r2, [pc, #184]	; (80034c4 <xTaskPriorityInherit+0x104>)
 800340c:	4413      	add	r3, r2
 800340e:	4299      	cmp	r1, r3
 8003410:	d101      	bne.n	8003416 <xTaskPriorityInherit+0x56>
 8003412:	2301      	movs	r3, #1
 8003414:	e000      	b.n	8003418 <xTaskPriorityInherit+0x58>
 8003416:	2300      	movs	r3, #0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d03a      	beq.n	8003492 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	3304      	adds	r3, #4
 8003420:	4618      	mov	r0, r3
 8003422:	f7fe fc19 	bl	8001c58 <uxListRemove>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d115      	bne.n	8003458 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003430:	4924      	ldr	r1, [pc, #144]	; (80034c4 <xTaskPriorityInherit+0x104>)
 8003432:	4613      	mov	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	440b      	add	r3, r1
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10a      	bne.n	8003458 <xTaskPriorityInherit+0x98>
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003446:	2201      	movs	r2, #1
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43da      	mvns	r2, r3
 800344e:	4b1e      	ldr	r3, [pc, #120]	; (80034c8 <xTaskPriorityInherit+0x108>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4013      	ands	r3, r2
 8003454:	4a1c      	ldr	r2, [pc, #112]	; (80034c8 <xTaskPriorityInherit+0x108>)
 8003456:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003458:	4b19      	ldr	r3, [pc, #100]	; (80034c0 <xTaskPriorityInherit+0x100>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003466:	2201      	movs	r2, #1
 8003468:	409a      	lsls	r2, r3
 800346a:	4b17      	ldr	r3, [pc, #92]	; (80034c8 <xTaskPriorityInherit+0x108>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4313      	orrs	r3, r2
 8003470:	4a15      	ldr	r2, [pc, #84]	; (80034c8 <xTaskPriorityInherit+0x108>)
 8003472:	6013      	str	r3, [r2, #0]
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003478:	4613      	mov	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4413      	add	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4a10      	ldr	r2, [pc, #64]	; (80034c4 <xTaskPriorityInherit+0x104>)
 8003482:	441a      	add	r2, r3
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	3304      	adds	r3, #4
 8003488:	4619      	mov	r1, r3
 800348a:	4610      	mov	r0, r2
 800348c:	f7fe fb89 	bl	8001ba2 <vListInsertEnd>
 8003490:	e004      	b.n	800349c <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003492:	4b0b      	ldr	r3, [pc, #44]	; (80034c0 <xTaskPriorityInherit+0x100>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800349c:	2301      	movs	r3, #1
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	e008      	b.n	80034b4 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034a6:	4b06      	ldr	r3, [pc, #24]	; (80034c0 <xTaskPriorityInherit+0x100>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d201      	bcs.n	80034b4 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80034b0:	2301      	movs	r3, #1
 80034b2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80034b4:	68fb      	ldr	r3, [r7, #12]
	}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	2000039c 	.word	0x2000039c
 80034c4:	200003a0 	.word	0x200003a0
 80034c8:	200004a4 	.word	0x200004a4

080034cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80034d8:	2300      	movs	r3, #0
 80034da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d06e      	beq.n	80035c0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80034e2:	4b3a      	ldr	r3, [pc, #232]	; (80035cc <xTaskPriorityDisinherit+0x100>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d00a      	beq.n	8003502 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80034ec:	f04f 0320 	mov.w	r3, #32
 80034f0:	f383 8811 	msr	BASEPRI, r3
 80034f4:	f3bf 8f6f 	isb	sy
 80034f8:	f3bf 8f4f 	dsb	sy
 80034fc:	60fb      	str	r3, [r7, #12]
}
 80034fe:	bf00      	nop
 8003500:	e7fe      	b.n	8003500 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10a      	bne.n	8003520 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800350a:	f04f 0320 	mov.w	r3, #32
 800350e:	f383 8811 	msr	BASEPRI, r3
 8003512:	f3bf 8f6f 	isb	sy
 8003516:	f3bf 8f4f 	dsb	sy
 800351a:	60bb      	str	r3, [r7, #8]
}
 800351c:	bf00      	nop
 800351e:	e7fe      	b.n	800351e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003524:	1e5a      	subs	r2, r3, #1
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003532:	429a      	cmp	r2, r3
 8003534:	d044      	beq.n	80035c0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800353a:	2b00      	cmp	r3, #0
 800353c:	d140      	bne.n	80035c0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	3304      	adds	r3, #4
 8003542:	4618      	mov	r0, r3
 8003544:	f7fe fb88 	bl	8001c58 <uxListRemove>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d115      	bne.n	800357a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003552:	491f      	ldr	r1, [pc, #124]	; (80035d0 <xTaskPriorityDisinherit+0x104>)
 8003554:	4613      	mov	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	440b      	add	r3, r1
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10a      	bne.n	800357a <xTaskPriorityDisinherit+0xae>
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003568:	2201      	movs	r2, #1
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	43da      	mvns	r2, r3
 8003570:	4b18      	ldr	r3, [pc, #96]	; (80035d4 <xTaskPriorityDisinherit+0x108>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4013      	ands	r3, r2
 8003576:	4a17      	ldr	r2, [pc, #92]	; (80035d4 <xTaskPriorityDisinherit+0x108>)
 8003578:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003586:	f1c3 0207 	rsb	r2, r3, #7
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003592:	2201      	movs	r2, #1
 8003594:	409a      	lsls	r2, r3
 8003596:	4b0f      	ldr	r3, [pc, #60]	; (80035d4 <xTaskPriorityDisinherit+0x108>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4313      	orrs	r3, r2
 800359c:	4a0d      	ldr	r2, [pc, #52]	; (80035d4 <xTaskPriorityDisinherit+0x108>)
 800359e:	6013      	str	r3, [r2, #0]
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a4:	4613      	mov	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4a08      	ldr	r2, [pc, #32]	; (80035d0 <xTaskPriorityDisinherit+0x104>)
 80035ae:	441a      	add	r2, r3
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	3304      	adds	r3, #4
 80035b4:	4619      	mov	r1, r3
 80035b6:	4610      	mov	r0, r2
 80035b8:	f7fe faf3 	bl	8001ba2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80035bc:	2301      	movs	r3, #1
 80035be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80035c0:	697b      	ldr	r3, [r7, #20]
	}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3718      	adds	r7, #24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	2000039c 	.word	0x2000039c
 80035d0:	200003a0 	.word	0x200003a0
 80035d4:	200004a4 	.word	0x200004a4

080035d8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b088      	sub	sp, #32
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80035e6:	2301      	movs	r3, #1
 80035e8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 8088 	beq.w	8003702 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10a      	bne.n	8003610 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80035fa:	f04f 0320 	mov.w	r3, #32
 80035fe:	f383 8811 	msr	BASEPRI, r3
 8003602:	f3bf 8f6f 	isb	sy
 8003606:	f3bf 8f4f 	dsb	sy
 800360a:	60fb      	str	r3, [r7, #12]
}
 800360c:	bf00      	nop
 800360e:	e7fe      	b.n	800360e <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	429a      	cmp	r2, r3
 8003618:	d902      	bls.n	8003620 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	61fb      	str	r3, [r7, #28]
 800361e:	e002      	b.n	8003626 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003624:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362a:	69fa      	ldr	r2, [r7, #28]
 800362c:	429a      	cmp	r2, r3
 800362e:	d068      	beq.n	8003702 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	429a      	cmp	r2, r3
 8003638:	d163      	bne.n	8003702 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800363a:	4b34      	ldr	r3, [pc, #208]	; (800370c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	429a      	cmp	r2, r3
 8003642:	d10a      	bne.n	800365a <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8003644:	f04f 0320 	mov.w	r3, #32
 8003648:	f383 8811 	msr	BASEPRI, r3
 800364c:	f3bf 8f6f 	isb	sy
 8003650:	f3bf 8f4f 	dsb	sy
 8003654:	60bb      	str	r3, [r7, #8]
}
 8003656:	bf00      	nop
 8003658:	e7fe      	b.n	8003658 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	69fa      	ldr	r2, [r7, #28]
 8003664:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	2b00      	cmp	r3, #0
 800366c:	db04      	blt.n	8003678 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	f1c3 0207 	rsb	r2, r3, #7
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	6959      	ldr	r1, [r3, #20]
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	4613      	mov	r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4413      	add	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4a22      	ldr	r2, [pc, #136]	; (8003710 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8003688:	4413      	add	r3, r2
 800368a:	4299      	cmp	r1, r3
 800368c:	d101      	bne.n	8003692 <vTaskPriorityDisinheritAfterTimeout+0xba>
 800368e:	2301      	movs	r3, #1
 8003690:	e000      	b.n	8003694 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8003692:	2300      	movs	r3, #0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d034      	beq.n	8003702 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	3304      	adds	r3, #4
 800369c:	4618      	mov	r0, r3
 800369e:	f7fe fadb 	bl	8001c58 <uxListRemove>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d115      	bne.n	80036d4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ac:	4918      	ldr	r1, [pc, #96]	; (8003710 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80036ae:	4613      	mov	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4413      	add	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	440b      	add	r3, r1
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10a      	bne.n	80036d4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c2:	2201      	movs	r2, #1
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	43da      	mvns	r2, r3
 80036ca:	4b12      	ldr	r3, [pc, #72]	; (8003714 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4013      	ands	r3, r2
 80036d0:	4a10      	ldr	r2, [pc, #64]	; (8003714 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80036d2:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d8:	2201      	movs	r2, #1
 80036da:	409a      	lsls	r2, r3
 80036dc:	4b0d      	ldr	r3, [pc, #52]	; (8003714 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	4a0c      	ldr	r2, [pc, #48]	; (8003714 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80036e4:	6013      	str	r3, [r2, #0]
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ea:	4613      	mov	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4413      	add	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4a07      	ldr	r2, [pc, #28]	; (8003710 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80036f4:	441a      	add	r2, r3
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	3304      	adds	r3, #4
 80036fa:	4619      	mov	r1, r3
 80036fc:	4610      	mov	r0, r2
 80036fe:	f7fe fa50 	bl	8001ba2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003702:	bf00      	nop
 8003704:	3720      	adds	r7, #32
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	2000039c 	.word	0x2000039c
 8003710:	200003a0 	.word	0x200003a0
 8003714:	200004a4 	.word	0x200004a4

08003718 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800371c:	4b07      	ldr	r3, [pc, #28]	; (800373c <pvTaskIncrementMutexHeldCount+0x24>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d004      	beq.n	800372e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003724:	4b05      	ldr	r3, [pc, #20]	; (800373c <pvTaskIncrementMutexHeldCount+0x24>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800372a:	3201      	adds	r2, #1
 800372c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800372e:	4b03      	ldr	r3, [pc, #12]	; (800373c <pvTaskIncrementMutexHeldCount+0x24>)
 8003730:	681b      	ldr	r3, [r3, #0]
	}
 8003732:	4618      	mov	r0, r3
 8003734:	46bd      	mov	sp, r7
 8003736:	bc80      	pop	{r7}
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	2000039c 	.word	0x2000039c

08003740 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800374a:	4b29      	ldr	r3, [pc, #164]	; (80037f0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003750:	4b28      	ldr	r3, [pc, #160]	; (80037f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	3304      	adds	r3, #4
 8003756:	4618      	mov	r0, r3
 8003758:	f7fe fa7e 	bl	8001c58 <uxListRemove>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10b      	bne.n	800377a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003762:	4b24      	ldr	r3, [pc, #144]	; (80037f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	2201      	movs	r2, #1
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	43da      	mvns	r2, r3
 8003770:	4b21      	ldr	r3, [pc, #132]	; (80037f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4013      	ands	r3, r2
 8003776:	4a20      	ldr	r2, [pc, #128]	; (80037f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003778:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003780:	d10a      	bne.n	8003798 <prvAddCurrentTaskToDelayedList+0x58>
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d007      	beq.n	8003798 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003788:	4b1a      	ldr	r3, [pc, #104]	; (80037f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	3304      	adds	r3, #4
 800378e:	4619      	mov	r1, r3
 8003790:	481a      	ldr	r0, [pc, #104]	; (80037fc <prvAddCurrentTaskToDelayedList+0xbc>)
 8003792:	f7fe fa06 	bl	8001ba2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003796:	e026      	b.n	80037e6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4413      	add	r3, r2
 800379e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80037a0:	4b14      	ldr	r3, [pc, #80]	; (80037f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68ba      	ldr	r2, [r7, #8]
 80037a6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d209      	bcs.n	80037c4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037b0:	4b13      	ldr	r3, [pc, #76]	; (8003800 <prvAddCurrentTaskToDelayedList+0xc0>)
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	4b0f      	ldr	r3, [pc, #60]	; (80037f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	3304      	adds	r3, #4
 80037ba:	4619      	mov	r1, r3
 80037bc:	4610      	mov	r0, r2
 80037be:	f7fe fa13 	bl	8001be8 <vListInsert>
}
 80037c2:	e010      	b.n	80037e6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037c4:	4b0f      	ldr	r3, [pc, #60]	; (8003804 <prvAddCurrentTaskToDelayedList+0xc4>)
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	4b0a      	ldr	r3, [pc, #40]	; (80037f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	3304      	adds	r3, #4
 80037ce:	4619      	mov	r1, r3
 80037d0:	4610      	mov	r0, r2
 80037d2:	f7fe fa09 	bl	8001be8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80037d6:	4b0c      	ldr	r3, [pc, #48]	; (8003808 <prvAddCurrentTaskToDelayedList+0xc8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d202      	bcs.n	80037e6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80037e0:	4a09      	ldr	r2, [pc, #36]	; (8003808 <prvAddCurrentTaskToDelayedList+0xc8>)
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	6013      	str	r3, [r2, #0]
}
 80037e6:	bf00      	nop
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	200004a0 	.word	0x200004a0
 80037f4:	2000039c 	.word	0x2000039c
 80037f8:	200004a4 	.word	0x200004a4
 80037fc:	20000488 	.word	0x20000488
 8003800:	20000458 	.word	0x20000458
 8003804:	20000454 	.word	0x20000454
 8003808:	200004bc 	.word	0x200004bc

0800380c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	3b04      	subs	r3, #4
 800381c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003824:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	3b04      	subs	r3, #4
 800382a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f023 0201 	bic.w	r2, r3, #1
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	3b04      	subs	r3, #4
 800383a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800383c:	4a08      	ldr	r2, [pc, #32]	; (8003860 <pxPortInitialiseStack+0x54>)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	3b14      	subs	r3, #20
 8003846:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	3b20      	subs	r3, #32
 8003852:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003854:	68fb      	ldr	r3, [r7, #12]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3714      	adds	r7, #20
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr
 8003860:	08003865 	.word	0x08003865

08003864 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800386a:	2300      	movs	r3, #0
 800386c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800386e:	4b12      	ldr	r3, [pc, #72]	; (80038b8 <prvTaskExitError+0x54>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003876:	d00a      	beq.n	800388e <prvTaskExitError+0x2a>
	__asm volatile
 8003878:	f04f 0320 	mov.w	r3, #32
 800387c:	f383 8811 	msr	BASEPRI, r3
 8003880:	f3bf 8f6f 	isb	sy
 8003884:	f3bf 8f4f 	dsb	sy
 8003888:	60fb      	str	r3, [r7, #12]
}
 800388a:	bf00      	nop
 800388c:	e7fe      	b.n	800388c <prvTaskExitError+0x28>
	__asm volatile
 800388e:	f04f 0320 	mov.w	r3, #32
 8003892:	f383 8811 	msr	BASEPRI, r3
 8003896:	f3bf 8f6f 	isb	sy
 800389a:	f3bf 8f4f 	dsb	sy
 800389e:	60bb      	str	r3, [r7, #8]
}
 80038a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80038a2:	bf00      	nop
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d0fc      	beq.n	80038a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80038aa:	bf00      	nop
 80038ac:	bf00      	nop
 80038ae:	3714      	adds	r7, #20
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bc80      	pop	{r7}
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	2000000c 	.word	0x2000000c
 80038bc:	00000000 	.word	0x00000000

080038c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80038c0:	4b07      	ldr	r3, [pc, #28]	; (80038e0 <pxCurrentTCBConst2>)
 80038c2:	6819      	ldr	r1, [r3, #0]
 80038c4:	6808      	ldr	r0, [r1, #0]
 80038c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80038ca:	f380 8809 	msr	PSP, r0
 80038ce:	f3bf 8f6f 	isb	sy
 80038d2:	f04f 0000 	mov.w	r0, #0
 80038d6:	f380 8811 	msr	BASEPRI, r0
 80038da:	f04e 0e0d 	orr.w	lr, lr, #13
 80038de:	4770      	bx	lr

080038e0 <pxCurrentTCBConst2>:
 80038e0:	2000039c 	.word	0x2000039c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80038e4:	bf00      	nop
 80038e6:	bf00      	nop

080038e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80038e8:	4806      	ldr	r0, [pc, #24]	; (8003904 <prvPortStartFirstTask+0x1c>)
 80038ea:	6800      	ldr	r0, [r0, #0]
 80038ec:	6800      	ldr	r0, [r0, #0]
 80038ee:	f380 8808 	msr	MSP, r0
 80038f2:	b662      	cpsie	i
 80038f4:	b661      	cpsie	f
 80038f6:	f3bf 8f4f 	dsb	sy
 80038fa:	f3bf 8f6f 	isb	sy
 80038fe:	df00      	svc	0
 8003900:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003902:	bf00      	nop
 8003904:	e000ed08 	.word	0xe000ed08

08003908 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800390e:	4b32      	ldr	r3, [pc, #200]	; (80039d8 <xPortStartScheduler+0xd0>)
 8003910:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	b2db      	uxtb	r3, r3
 8003918:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	22ff      	movs	r2, #255	; 0xff
 800391e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	b2db      	uxtb	r3, r3
 8003926:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003928:	78fb      	ldrb	r3, [r7, #3]
 800392a:	b2db      	uxtb	r3, r3
 800392c:	f003 0320 	and.w	r3, r3, #32
 8003930:	b2da      	uxtb	r2, r3
 8003932:	4b2a      	ldr	r3, [pc, #168]	; (80039dc <xPortStartScheduler+0xd4>)
 8003934:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003936:	4b2a      	ldr	r3, [pc, #168]	; (80039e0 <xPortStartScheduler+0xd8>)
 8003938:	2207      	movs	r2, #7
 800393a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800393c:	e009      	b.n	8003952 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800393e:	4b28      	ldr	r3, [pc, #160]	; (80039e0 <xPortStartScheduler+0xd8>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	3b01      	subs	r3, #1
 8003944:	4a26      	ldr	r2, [pc, #152]	; (80039e0 <xPortStartScheduler+0xd8>)
 8003946:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003948:	78fb      	ldrb	r3, [r7, #3]
 800394a:	b2db      	uxtb	r3, r3
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	b2db      	uxtb	r3, r3
 8003950:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003952:	78fb      	ldrb	r3, [r7, #3]
 8003954:	b2db      	uxtb	r3, r3
 8003956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395a:	2b80      	cmp	r3, #128	; 0x80
 800395c:	d0ef      	beq.n	800393e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800395e:	4b20      	ldr	r3, [pc, #128]	; (80039e0 <xPortStartScheduler+0xd8>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f1c3 0307 	rsb	r3, r3, #7
 8003966:	2b04      	cmp	r3, #4
 8003968:	d00a      	beq.n	8003980 <xPortStartScheduler+0x78>
	__asm volatile
 800396a:	f04f 0320 	mov.w	r3, #32
 800396e:	f383 8811 	msr	BASEPRI, r3
 8003972:	f3bf 8f6f 	isb	sy
 8003976:	f3bf 8f4f 	dsb	sy
 800397a:	60bb      	str	r3, [r7, #8]
}
 800397c:	bf00      	nop
 800397e:	e7fe      	b.n	800397e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003980:	4b17      	ldr	r3, [pc, #92]	; (80039e0 <xPortStartScheduler+0xd8>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	021b      	lsls	r3, r3, #8
 8003986:	4a16      	ldr	r2, [pc, #88]	; (80039e0 <xPortStartScheduler+0xd8>)
 8003988:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800398a:	4b15      	ldr	r3, [pc, #84]	; (80039e0 <xPortStartScheduler+0xd8>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003992:	4a13      	ldr	r2, [pc, #76]	; (80039e0 <xPortStartScheduler+0xd8>)
 8003994:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	b2da      	uxtb	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800399e:	4b11      	ldr	r3, [pc, #68]	; (80039e4 <xPortStartScheduler+0xdc>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a10      	ldr	r2, [pc, #64]	; (80039e4 <xPortStartScheduler+0xdc>)
 80039a4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80039a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80039aa:	4b0e      	ldr	r3, [pc, #56]	; (80039e4 <xPortStartScheduler+0xdc>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a0d      	ldr	r2, [pc, #52]	; (80039e4 <xPortStartScheduler+0xdc>)
 80039b0:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 80039b4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80039b6:	f000 f8b9 	bl	8003b2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80039ba:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <xPortStartScheduler+0xe0>)
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80039c0:	f7ff ff92 	bl	80038e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80039c4:	f7ff fa94 	bl	8002ef0 <vTaskSwitchContext>
	prvTaskExitError();
 80039c8:	f7ff ff4c 	bl	8003864 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	e000e400 	.word	0xe000e400
 80039dc:	200004c8 	.word	0x200004c8
 80039e0:	200004cc 	.word	0x200004cc
 80039e4:	e000ed20 	.word	0xe000ed20
 80039e8:	2000000c 	.word	0x2000000c

080039ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
	__asm volatile
 80039f2:	f04f 0320 	mov.w	r3, #32
 80039f6:	f383 8811 	msr	BASEPRI, r3
 80039fa:	f3bf 8f6f 	isb	sy
 80039fe:	f3bf 8f4f 	dsb	sy
 8003a02:	607b      	str	r3, [r7, #4]
}
 8003a04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003a06:	4b0f      	ldr	r3, [pc, #60]	; (8003a44 <vPortEnterCritical+0x58>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	4a0d      	ldr	r2, [pc, #52]	; (8003a44 <vPortEnterCritical+0x58>)
 8003a0e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003a10:	4b0c      	ldr	r3, [pc, #48]	; (8003a44 <vPortEnterCritical+0x58>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d10f      	bne.n	8003a38 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003a18:	4b0b      	ldr	r3, [pc, #44]	; (8003a48 <vPortEnterCritical+0x5c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00a      	beq.n	8003a38 <vPortEnterCritical+0x4c>
	__asm volatile
 8003a22:	f04f 0320 	mov.w	r3, #32
 8003a26:	f383 8811 	msr	BASEPRI, r3
 8003a2a:	f3bf 8f6f 	isb	sy
 8003a2e:	f3bf 8f4f 	dsb	sy
 8003a32:	603b      	str	r3, [r7, #0]
}
 8003a34:	bf00      	nop
 8003a36:	e7fe      	b.n	8003a36 <vPortEnterCritical+0x4a>
	}
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bc80      	pop	{r7}
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	2000000c 	.word	0x2000000c
 8003a48:	e000ed04 	.word	0xe000ed04

08003a4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003a52:	4b11      	ldr	r3, [pc, #68]	; (8003a98 <vPortExitCritical+0x4c>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10a      	bne.n	8003a70 <vPortExitCritical+0x24>
	__asm volatile
 8003a5a:	f04f 0320 	mov.w	r3, #32
 8003a5e:	f383 8811 	msr	BASEPRI, r3
 8003a62:	f3bf 8f6f 	isb	sy
 8003a66:	f3bf 8f4f 	dsb	sy
 8003a6a:	607b      	str	r3, [r7, #4]
}
 8003a6c:	bf00      	nop
 8003a6e:	e7fe      	b.n	8003a6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003a70:	4b09      	ldr	r3, [pc, #36]	; (8003a98 <vPortExitCritical+0x4c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	3b01      	subs	r3, #1
 8003a76:	4a08      	ldr	r2, [pc, #32]	; (8003a98 <vPortExitCritical+0x4c>)
 8003a78:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003a7a:	4b07      	ldr	r3, [pc, #28]	; (8003a98 <vPortExitCritical+0x4c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d105      	bne.n	8003a8e <vPortExitCritical+0x42>
 8003a82:	2300      	movs	r3, #0
 8003a84:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	f383 8811 	msr	BASEPRI, r3
}
 8003a8c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003a8e:	bf00      	nop
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bc80      	pop	{r7}
 8003a96:	4770      	bx	lr
 8003a98:	2000000c 	.word	0x2000000c
 8003a9c:	00000000 	.word	0x00000000

08003aa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003aa0:	f3ef 8009 	mrs	r0, PSP
 8003aa4:	f3bf 8f6f 	isb	sy
 8003aa8:	4b0d      	ldr	r3, [pc, #52]	; (8003ae0 <pxCurrentTCBConst>)
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003ab0:	6010      	str	r0, [r2, #0]
 8003ab2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003ab6:	f04f 0020 	mov.w	r0, #32
 8003aba:	f380 8811 	msr	BASEPRI, r0
 8003abe:	f7ff fa17 	bl	8002ef0 <vTaskSwitchContext>
 8003ac2:	f04f 0000 	mov.w	r0, #0
 8003ac6:	f380 8811 	msr	BASEPRI, r0
 8003aca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003ace:	6819      	ldr	r1, [r3, #0]
 8003ad0:	6808      	ldr	r0, [r1, #0]
 8003ad2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003ad6:	f380 8809 	msr	PSP, r0
 8003ada:	f3bf 8f6f 	isb	sy
 8003ade:	4770      	bx	lr

08003ae0 <pxCurrentTCBConst>:
 8003ae0:	2000039c 	.word	0x2000039c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003ae4:	bf00      	nop
 8003ae6:	bf00      	nop

08003ae8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
	__asm volatile
 8003aee:	f04f 0320 	mov.w	r3, #32
 8003af2:	f383 8811 	msr	BASEPRI, r3
 8003af6:	f3bf 8f6f 	isb	sy
 8003afa:	f3bf 8f4f 	dsb	sy
 8003afe:	607b      	str	r3, [r7, #4]
}
 8003b00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003b02:	f7ff f937 	bl	8002d74 <xTaskIncrementTick>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d003      	beq.n	8003b14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003b0c:	4b06      	ldr	r3, [pc, #24]	; (8003b28 <SysTick_Handler+0x40>)
 8003b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	2300      	movs	r3, #0
 8003b16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	f383 8811 	msr	BASEPRI, r3
}
 8003b1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003b20:	bf00      	nop
 8003b22:	3708      	adds	r7, #8
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	e000ed04 	.word	0xe000ed04

08003b2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003b30:	4b0a      	ldr	r3, [pc, #40]	; (8003b5c <vPortSetupTimerInterrupt+0x30>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003b36:	4b0a      	ldr	r3, [pc, #40]	; (8003b60 <vPortSetupTimerInterrupt+0x34>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003b3c:	4b09      	ldr	r3, [pc, #36]	; (8003b64 <vPortSetupTimerInterrupt+0x38>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a09      	ldr	r2, [pc, #36]	; (8003b68 <vPortSetupTimerInterrupt+0x3c>)
 8003b42:	fba2 2303 	umull	r2, r3, r2, r3
 8003b46:	099b      	lsrs	r3, r3, #6
 8003b48:	4a08      	ldr	r2, [pc, #32]	; (8003b6c <vPortSetupTimerInterrupt+0x40>)
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003b4e:	4b03      	ldr	r3, [pc, #12]	; (8003b5c <vPortSetupTimerInterrupt+0x30>)
 8003b50:	2207      	movs	r2, #7
 8003b52:	601a      	str	r2, [r3, #0]
}
 8003b54:	bf00      	nop
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bc80      	pop	{r7}
 8003b5a:	4770      	bx	lr
 8003b5c:	e000e010 	.word	0xe000e010
 8003b60:	e000e018 	.word	0xe000e018
 8003b64:	20000000 	.word	0x20000000
 8003b68:	10624dd3 	.word	0x10624dd3
 8003b6c:	e000e014 	.word	0xe000e014

08003b70 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003b76:	f3ef 8305 	mrs	r3, IPSR
 8003b7a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2b0f      	cmp	r3, #15
 8003b80:	d914      	bls.n	8003bac <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003b82:	4a16      	ldr	r2, [pc, #88]	; (8003bdc <vPortValidateInterruptPriority+0x6c>)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4413      	add	r3, r2
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003b8c:	4b14      	ldr	r3, [pc, #80]	; (8003be0 <vPortValidateInterruptPriority+0x70>)
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	7afa      	ldrb	r2, [r7, #11]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d20a      	bcs.n	8003bac <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8003b96:	f04f 0320 	mov.w	r3, #32
 8003b9a:	f383 8811 	msr	BASEPRI, r3
 8003b9e:	f3bf 8f6f 	isb	sy
 8003ba2:	f3bf 8f4f 	dsb	sy
 8003ba6:	607b      	str	r3, [r7, #4]
}
 8003ba8:	bf00      	nop
 8003baa:	e7fe      	b.n	8003baa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003bac:	4b0d      	ldr	r3, [pc, #52]	; (8003be4 <vPortValidateInterruptPriority+0x74>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003bb4:	4b0c      	ldr	r3, [pc, #48]	; (8003be8 <vPortValidateInterruptPriority+0x78>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d90a      	bls.n	8003bd2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8003bbc:	f04f 0320 	mov.w	r3, #32
 8003bc0:	f383 8811 	msr	BASEPRI, r3
 8003bc4:	f3bf 8f6f 	isb	sy
 8003bc8:	f3bf 8f4f 	dsb	sy
 8003bcc:	603b      	str	r3, [r7, #0]
}
 8003bce:	bf00      	nop
 8003bd0:	e7fe      	b.n	8003bd0 <vPortValidateInterruptPriority+0x60>
	}
 8003bd2:	bf00      	nop
 8003bd4:	3714      	adds	r7, #20
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bc80      	pop	{r7}
 8003bda:	4770      	bx	lr
 8003bdc:	e000e3f0 	.word	0xe000e3f0
 8003be0:	200004c8 	.word	0x200004c8
 8003be4:	e000ed0c 	.word	0xe000ed0c
 8003be8:	200004cc 	.word	0x200004cc

08003bec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b08a      	sub	sp, #40	; 0x28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003bf8:	f7ff f812 	bl	8002c20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003bfc:	4b58      	ldr	r3, [pc, #352]	; (8003d60 <pvPortMalloc+0x174>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003c04:	f000 f910 	bl	8003e28 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003c08:	4b56      	ldr	r3, [pc, #344]	; (8003d64 <pvPortMalloc+0x178>)
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f040 808e 	bne.w	8003d32 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d01d      	beq.n	8003c58 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003c1c:	2208      	movs	r2, #8
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4413      	add	r3, r2
 8003c22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d014      	beq.n	8003c58 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f023 0307 	bic.w	r3, r3, #7
 8003c34:	3308      	adds	r3, #8
 8003c36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f003 0307 	and.w	r3, r3, #7
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00a      	beq.n	8003c58 <pvPortMalloc+0x6c>
	__asm volatile
 8003c42:	f04f 0320 	mov.w	r3, #32
 8003c46:	f383 8811 	msr	BASEPRI, r3
 8003c4a:	f3bf 8f6f 	isb	sy
 8003c4e:	f3bf 8f4f 	dsb	sy
 8003c52:	617b      	str	r3, [r7, #20]
}
 8003c54:	bf00      	nop
 8003c56:	e7fe      	b.n	8003c56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d069      	beq.n	8003d32 <pvPortMalloc+0x146>
 8003c5e:	4b42      	ldr	r3, [pc, #264]	; (8003d68 <pvPortMalloc+0x17c>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d864      	bhi.n	8003d32 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003c68:	4b40      	ldr	r3, [pc, #256]	; (8003d6c <pvPortMalloc+0x180>)
 8003c6a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003c6c:	4b3f      	ldr	r3, [pc, #252]	; (8003d6c <pvPortMalloc+0x180>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c72:	e004      	b.n	8003c7e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c76:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d903      	bls.n	8003c90 <pvPortMalloc+0xa4>
 8003c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1f1      	bne.n	8003c74 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003c90:	4b33      	ldr	r3, [pc, #204]	; (8003d60 <pvPortMalloc+0x174>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d04b      	beq.n	8003d32 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003c9a:	6a3b      	ldr	r3, [r7, #32]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2208      	movs	r2, #8
 8003ca0:	4413      	add	r3, r2
 8003ca2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	1ad2      	subs	r2, r2, r3
 8003cb4:	2308      	movs	r3, #8
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d91f      	bls.n	8003cfc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <pvPortMalloc+0xf8>
	__asm volatile
 8003cce:	f04f 0320 	mov.w	r3, #32
 8003cd2:	f383 8811 	msr	BASEPRI, r3
 8003cd6:	f3bf 8f6f 	isb	sy
 8003cda:	f3bf 8f4f 	dsb	sy
 8003cde:	613b      	str	r3, [r7, #16]
}
 8003ce0:	bf00      	nop
 8003ce2:	e7fe      	b.n	8003ce2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	1ad2      	subs	r2, r2, r3
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003cf6:	69b8      	ldr	r0, [r7, #24]
 8003cf8:	f000 f8f8 	bl	8003eec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003cfc:	4b1a      	ldr	r3, [pc, #104]	; (8003d68 <pvPortMalloc+0x17c>)
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	4a18      	ldr	r2, [pc, #96]	; (8003d68 <pvPortMalloc+0x17c>)
 8003d08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003d0a:	4b17      	ldr	r3, [pc, #92]	; (8003d68 <pvPortMalloc+0x17c>)
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	4b18      	ldr	r3, [pc, #96]	; (8003d70 <pvPortMalloc+0x184>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d203      	bcs.n	8003d1e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003d16:	4b14      	ldr	r3, [pc, #80]	; (8003d68 <pvPortMalloc+0x17c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a15      	ldr	r2, [pc, #84]	; (8003d70 <pvPortMalloc+0x184>)
 8003d1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	4b10      	ldr	r3, [pc, #64]	; (8003d64 <pvPortMalloc+0x178>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	431a      	orrs	r2, r3
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2e:	2200      	movs	r2, #0
 8003d30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003d32:	f7fe ff83 	bl	8002c3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	f003 0307 	and.w	r3, r3, #7
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00a      	beq.n	8003d56 <pvPortMalloc+0x16a>
	__asm volatile
 8003d40:	f04f 0320 	mov.w	r3, #32
 8003d44:	f383 8811 	msr	BASEPRI, r3
 8003d48:	f3bf 8f6f 	isb	sy
 8003d4c:	f3bf 8f4f 	dsb	sy
 8003d50:	60fb      	str	r3, [r7, #12]
}
 8003d52:	bf00      	nop
 8003d54:	e7fe      	b.n	8003d54 <pvPortMalloc+0x168>
	return pvReturn;
 8003d56:	69fb      	ldr	r3, [r7, #28]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3728      	adds	r7, #40	; 0x28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	200010d8 	.word	0x200010d8
 8003d64:	200010e4 	.word	0x200010e4
 8003d68:	200010dc 	.word	0x200010dc
 8003d6c:	200010d0 	.word	0x200010d0
 8003d70:	200010e0 	.word	0x200010e0

08003d74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d048      	beq.n	8003e18 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003d86:	2308      	movs	r3, #8
 8003d88:	425b      	negs	r3, r3
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	4b21      	ldr	r3, [pc, #132]	; (8003e20 <vPortFree+0xac>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10a      	bne.n	8003db8 <vPortFree+0x44>
	__asm volatile
 8003da2:	f04f 0320 	mov.w	r3, #32
 8003da6:	f383 8811 	msr	BASEPRI, r3
 8003daa:	f3bf 8f6f 	isb	sy
 8003dae:	f3bf 8f4f 	dsb	sy
 8003db2:	60fb      	str	r3, [r7, #12]
}
 8003db4:	bf00      	nop
 8003db6:	e7fe      	b.n	8003db6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00a      	beq.n	8003dd6 <vPortFree+0x62>
	__asm volatile
 8003dc0:	f04f 0320 	mov.w	r3, #32
 8003dc4:	f383 8811 	msr	BASEPRI, r3
 8003dc8:	f3bf 8f6f 	isb	sy
 8003dcc:	f3bf 8f4f 	dsb	sy
 8003dd0:	60bb      	str	r3, [r7, #8]
}
 8003dd2:	bf00      	nop
 8003dd4:	e7fe      	b.n	8003dd4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	4b11      	ldr	r3, [pc, #68]	; (8003e20 <vPortFree+0xac>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4013      	ands	r3, r2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d019      	beq.n	8003e18 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d115      	bne.n	8003e18 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	4b0b      	ldr	r3, [pc, #44]	; (8003e20 <vPortFree+0xac>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	43db      	mvns	r3, r3
 8003df6:	401a      	ands	r2, r3
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003dfc:	f7fe ff10 	bl	8002c20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	4b07      	ldr	r3, [pc, #28]	; (8003e24 <vPortFree+0xb0>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4413      	add	r3, r2
 8003e0a:	4a06      	ldr	r2, [pc, #24]	; (8003e24 <vPortFree+0xb0>)
 8003e0c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003e0e:	6938      	ldr	r0, [r7, #16]
 8003e10:	f000 f86c 	bl	8003eec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003e14:	f7fe ff12 	bl	8002c3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003e18:	bf00      	nop
 8003e1a:	3718      	adds	r7, #24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	200010e4 	.word	0x200010e4
 8003e24:	200010dc 	.word	0x200010dc

08003e28 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003e2e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003e32:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003e34:	4b27      	ldr	r3, [pc, #156]	; (8003ed4 <prvHeapInit+0xac>)
 8003e36:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f003 0307 	and.w	r3, r3, #7
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00c      	beq.n	8003e5c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	3307      	adds	r3, #7
 8003e46:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f023 0307 	bic.w	r3, r3, #7
 8003e4e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	4a1f      	ldr	r2, [pc, #124]	; (8003ed4 <prvHeapInit+0xac>)
 8003e58:	4413      	add	r3, r2
 8003e5a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003e60:	4a1d      	ldr	r2, [pc, #116]	; (8003ed8 <prvHeapInit+0xb0>)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003e66:	4b1c      	ldr	r3, [pc, #112]	; (8003ed8 <prvHeapInit+0xb0>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	4413      	add	r3, r2
 8003e72:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003e74:	2208      	movs	r2, #8
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	1a9b      	subs	r3, r3, r2
 8003e7a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f023 0307 	bic.w	r3, r3, #7
 8003e82:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	4a15      	ldr	r2, [pc, #84]	; (8003edc <prvHeapInit+0xb4>)
 8003e88:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003e8a:	4b14      	ldr	r3, [pc, #80]	; (8003edc <prvHeapInit+0xb4>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003e92:	4b12      	ldr	r3, [pc, #72]	; (8003edc <prvHeapInit+0xb4>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2200      	movs	r2, #0
 8003e98:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	1ad2      	subs	r2, r2, r3
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003ea8:	4b0c      	ldr	r3, [pc, #48]	; (8003edc <prvHeapInit+0xb4>)
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	4a0a      	ldr	r2, [pc, #40]	; (8003ee0 <prvHeapInit+0xb8>)
 8003eb6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	4a09      	ldr	r2, [pc, #36]	; (8003ee4 <prvHeapInit+0xbc>)
 8003ebe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003ec0:	4b09      	ldr	r3, [pc, #36]	; (8003ee8 <prvHeapInit+0xc0>)
 8003ec2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003ec6:	601a      	str	r2, [r3, #0]
}
 8003ec8:	bf00      	nop
 8003eca:	3714      	adds	r7, #20
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bc80      	pop	{r7}
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	200004d0 	.word	0x200004d0
 8003ed8:	200010d0 	.word	0x200010d0
 8003edc:	200010d8 	.word	0x200010d8
 8003ee0:	200010e0 	.word	0x200010e0
 8003ee4:	200010dc 	.word	0x200010dc
 8003ee8:	200010e4 	.word	0x200010e4

08003eec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003ef4:	4b27      	ldr	r3, [pc, #156]	; (8003f94 <prvInsertBlockIntoFreeList+0xa8>)
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	e002      	b.n	8003f00 <prvInsertBlockIntoFreeList+0x14>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d8f7      	bhi.n	8003efa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	4413      	add	r3, r2
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d108      	bne.n	8003f2e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	441a      	add	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	441a      	add	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d118      	bne.n	8003f74 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	4b14      	ldr	r3, [pc, #80]	; (8003f98 <prvInsertBlockIntoFreeList+0xac>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d00d      	beq.n	8003f6a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	441a      	add	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	e008      	b.n	8003f7c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003f6a:	4b0b      	ldr	r3, [pc, #44]	; (8003f98 <prvInsertBlockIntoFreeList+0xac>)
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	601a      	str	r2, [r3, #0]
 8003f72:	e003      	b.n	8003f7c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d002      	beq.n	8003f8a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f8a:	bf00      	nop
 8003f8c:	3714      	adds	r7, #20
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bc80      	pop	{r7}
 8003f92:	4770      	bx	lr
 8003f94:	200010d0 	.word	0x200010d0
 8003f98:	200010d8 	.word	0x200010d8

08003f9c <__libc_init_array>:
 8003f9c:	b570      	push	{r4, r5, r6, lr}
 8003f9e:	2600      	movs	r6, #0
 8003fa0:	4d0c      	ldr	r5, [pc, #48]	; (8003fd4 <__libc_init_array+0x38>)
 8003fa2:	4c0d      	ldr	r4, [pc, #52]	; (8003fd8 <__libc_init_array+0x3c>)
 8003fa4:	1b64      	subs	r4, r4, r5
 8003fa6:	10a4      	asrs	r4, r4, #2
 8003fa8:	42a6      	cmp	r6, r4
 8003faa:	d109      	bne.n	8003fc0 <__libc_init_array+0x24>
 8003fac:	f000 f8f0 	bl	8004190 <_init>
 8003fb0:	2600      	movs	r6, #0
 8003fb2:	4d0a      	ldr	r5, [pc, #40]	; (8003fdc <__libc_init_array+0x40>)
 8003fb4:	4c0a      	ldr	r4, [pc, #40]	; (8003fe0 <__libc_init_array+0x44>)
 8003fb6:	1b64      	subs	r4, r4, r5
 8003fb8:	10a4      	asrs	r4, r4, #2
 8003fba:	42a6      	cmp	r6, r4
 8003fbc:	d105      	bne.n	8003fca <__libc_init_array+0x2e>
 8003fbe:	bd70      	pop	{r4, r5, r6, pc}
 8003fc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fc4:	4798      	blx	r3
 8003fc6:	3601      	adds	r6, #1
 8003fc8:	e7ee      	b.n	8003fa8 <__libc_init_array+0xc>
 8003fca:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fce:	4798      	blx	r3
 8003fd0:	3601      	adds	r6, #1
 8003fd2:	e7f2      	b.n	8003fba <__libc_init_array+0x1e>
 8003fd4:	08004280 	.word	0x08004280
 8003fd8:	08004280 	.word	0x08004280
 8003fdc:	08004280 	.word	0x08004280
 8003fe0:	08004284 	.word	0x08004284

08003fe4 <__retarget_lock_acquire_recursive>:
 8003fe4:	4770      	bx	lr

08003fe6 <__retarget_lock_release_recursive>:
 8003fe6:	4770      	bx	lr

08003fe8 <memcpy>:
 8003fe8:	440a      	add	r2, r1
 8003fea:	4291      	cmp	r1, r2
 8003fec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003ff0:	d100      	bne.n	8003ff4 <memcpy+0xc>
 8003ff2:	4770      	bx	lr
 8003ff4:	b510      	push	{r4, lr}
 8003ff6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ffa:	4291      	cmp	r1, r2
 8003ffc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004000:	d1f9      	bne.n	8003ff6 <memcpy+0xe>
 8004002:	bd10      	pop	{r4, pc}

08004004 <memset>:
 8004004:	4603      	mov	r3, r0
 8004006:	4402      	add	r2, r0
 8004008:	4293      	cmp	r3, r2
 800400a:	d100      	bne.n	800400e <memset+0xa>
 800400c:	4770      	bx	lr
 800400e:	f803 1b01 	strb.w	r1, [r3], #1
 8004012:	e7f9      	b.n	8004008 <memset+0x4>

08004014 <cleanup_glue>:
 8004014:	b538      	push	{r3, r4, r5, lr}
 8004016:	460c      	mov	r4, r1
 8004018:	6809      	ldr	r1, [r1, #0]
 800401a:	4605      	mov	r5, r0
 800401c:	b109      	cbz	r1, 8004022 <cleanup_glue+0xe>
 800401e:	f7ff fff9 	bl	8004014 <cleanup_glue>
 8004022:	4621      	mov	r1, r4
 8004024:	4628      	mov	r0, r5
 8004026:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800402a:	f000 b869 	b.w	8004100 <_free_r>
	...

08004030 <_reclaim_reent>:
 8004030:	4b2c      	ldr	r3, [pc, #176]	; (80040e4 <_reclaim_reent+0xb4>)
 8004032:	b570      	push	{r4, r5, r6, lr}
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4604      	mov	r4, r0
 8004038:	4283      	cmp	r3, r0
 800403a:	d051      	beq.n	80040e0 <_reclaim_reent+0xb0>
 800403c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800403e:	b143      	cbz	r3, 8004052 <_reclaim_reent+0x22>
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d14a      	bne.n	80040dc <_reclaim_reent+0xac>
 8004046:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004048:	6819      	ldr	r1, [r3, #0]
 800404a:	b111      	cbz	r1, 8004052 <_reclaim_reent+0x22>
 800404c:	4620      	mov	r0, r4
 800404e:	f000 f857 	bl	8004100 <_free_r>
 8004052:	6961      	ldr	r1, [r4, #20]
 8004054:	b111      	cbz	r1, 800405c <_reclaim_reent+0x2c>
 8004056:	4620      	mov	r0, r4
 8004058:	f000 f852 	bl	8004100 <_free_r>
 800405c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800405e:	b111      	cbz	r1, 8004066 <_reclaim_reent+0x36>
 8004060:	4620      	mov	r0, r4
 8004062:	f000 f84d 	bl	8004100 <_free_r>
 8004066:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004068:	b111      	cbz	r1, 8004070 <_reclaim_reent+0x40>
 800406a:	4620      	mov	r0, r4
 800406c:	f000 f848 	bl	8004100 <_free_r>
 8004070:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004072:	b111      	cbz	r1, 800407a <_reclaim_reent+0x4a>
 8004074:	4620      	mov	r0, r4
 8004076:	f000 f843 	bl	8004100 <_free_r>
 800407a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800407c:	b111      	cbz	r1, 8004084 <_reclaim_reent+0x54>
 800407e:	4620      	mov	r0, r4
 8004080:	f000 f83e 	bl	8004100 <_free_r>
 8004084:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004086:	b111      	cbz	r1, 800408e <_reclaim_reent+0x5e>
 8004088:	4620      	mov	r0, r4
 800408a:	f000 f839 	bl	8004100 <_free_r>
 800408e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004090:	b111      	cbz	r1, 8004098 <_reclaim_reent+0x68>
 8004092:	4620      	mov	r0, r4
 8004094:	f000 f834 	bl	8004100 <_free_r>
 8004098:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800409a:	b111      	cbz	r1, 80040a2 <_reclaim_reent+0x72>
 800409c:	4620      	mov	r0, r4
 800409e:	f000 f82f 	bl	8004100 <_free_r>
 80040a2:	69a3      	ldr	r3, [r4, #24]
 80040a4:	b1e3      	cbz	r3, 80040e0 <_reclaim_reent+0xb0>
 80040a6:	4620      	mov	r0, r4
 80040a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80040aa:	4798      	blx	r3
 80040ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80040ae:	b1b9      	cbz	r1, 80040e0 <_reclaim_reent+0xb0>
 80040b0:	4620      	mov	r0, r4
 80040b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80040b6:	f7ff bfad 	b.w	8004014 <cleanup_glue>
 80040ba:	5949      	ldr	r1, [r1, r5]
 80040bc:	b941      	cbnz	r1, 80040d0 <_reclaim_reent+0xa0>
 80040be:	3504      	adds	r5, #4
 80040c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040c2:	2d80      	cmp	r5, #128	; 0x80
 80040c4:	68d9      	ldr	r1, [r3, #12]
 80040c6:	d1f8      	bne.n	80040ba <_reclaim_reent+0x8a>
 80040c8:	4620      	mov	r0, r4
 80040ca:	f000 f819 	bl	8004100 <_free_r>
 80040ce:	e7ba      	b.n	8004046 <_reclaim_reent+0x16>
 80040d0:	680e      	ldr	r6, [r1, #0]
 80040d2:	4620      	mov	r0, r4
 80040d4:	f000 f814 	bl	8004100 <_free_r>
 80040d8:	4631      	mov	r1, r6
 80040da:	e7ef      	b.n	80040bc <_reclaim_reent+0x8c>
 80040dc:	2500      	movs	r5, #0
 80040de:	e7ef      	b.n	80040c0 <_reclaim_reent+0x90>
 80040e0:	bd70      	pop	{r4, r5, r6, pc}
 80040e2:	bf00      	nop
 80040e4:	20000010 	.word	0x20000010

080040e8 <__malloc_lock>:
 80040e8:	4801      	ldr	r0, [pc, #4]	; (80040f0 <__malloc_lock+0x8>)
 80040ea:	f7ff bf7b 	b.w	8003fe4 <__retarget_lock_acquire_recursive>
 80040ee:	bf00      	nop
 80040f0:	200010e8 	.word	0x200010e8

080040f4 <__malloc_unlock>:
 80040f4:	4801      	ldr	r0, [pc, #4]	; (80040fc <__malloc_unlock+0x8>)
 80040f6:	f7ff bf76 	b.w	8003fe6 <__retarget_lock_release_recursive>
 80040fa:	bf00      	nop
 80040fc:	200010e8 	.word	0x200010e8

08004100 <_free_r>:
 8004100:	b538      	push	{r3, r4, r5, lr}
 8004102:	4605      	mov	r5, r0
 8004104:	2900      	cmp	r1, #0
 8004106:	d040      	beq.n	800418a <_free_r+0x8a>
 8004108:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800410c:	1f0c      	subs	r4, r1, #4
 800410e:	2b00      	cmp	r3, #0
 8004110:	bfb8      	it	lt
 8004112:	18e4      	addlt	r4, r4, r3
 8004114:	f7ff ffe8 	bl	80040e8 <__malloc_lock>
 8004118:	4a1c      	ldr	r2, [pc, #112]	; (800418c <_free_r+0x8c>)
 800411a:	6813      	ldr	r3, [r2, #0]
 800411c:	b933      	cbnz	r3, 800412c <_free_r+0x2c>
 800411e:	6063      	str	r3, [r4, #4]
 8004120:	6014      	str	r4, [r2, #0]
 8004122:	4628      	mov	r0, r5
 8004124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004128:	f7ff bfe4 	b.w	80040f4 <__malloc_unlock>
 800412c:	42a3      	cmp	r3, r4
 800412e:	d908      	bls.n	8004142 <_free_r+0x42>
 8004130:	6820      	ldr	r0, [r4, #0]
 8004132:	1821      	adds	r1, r4, r0
 8004134:	428b      	cmp	r3, r1
 8004136:	bf01      	itttt	eq
 8004138:	6819      	ldreq	r1, [r3, #0]
 800413a:	685b      	ldreq	r3, [r3, #4]
 800413c:	1809      	addeq	r1, r1, r0
 800413e:	6021      	streq	r1, [r4, #0]
 8004140:	e7ed      	b.n	800411e <_free_r+0x1e>
 8004142:	461a      	mov	r2, r3
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	b10b      	cbz	r3, 800414c <_free_r+0x4c>
 8004148:	42a3      	cmp	r3, r4
 800414a:	d9fa      	bls.n	8004142 <_free_r+0x42>
 800414c:	6811      	ldr	r1, [r2, #0]
 800414e:	1850      	adds	r0, r2, r1
 8004150:	42a0      	cmp	r0, r4
 8004152:	d10b      	bne.n	800416c <_free_r+0x6c>
 8004154:	6820      	ldr	r0, [r4, #0]
 8004156:	4401      	add	r1, r0
 8004158:	1850      	adds	r0, r2, r1
 800415a:	4283      	cmp	r3, r0
 800415c:	6011      	str	r1, [r2, #0]
 800415e:	d1e0      	bne.n	8004122 <_free_r+0x22>
 8004160:	6818      	ldr	r0, [r3, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	4401      	add	r1, r0
 8004166:	6011      	str	r1, [r2, #0]
 8004168:	6053      	str	r3, [r2, #4]
 800416a:	e7da      	b.n	8004122 <_free_r+0x22>
 800416c:	d902      	bls.n	8004174 <_free_r+0x74>
 800416e:	230c      	movs	r3, #12
 8004170:	602b      	str	r3, [r5, #0]
 8004172:	e7d6      	b.n	8004122 <_free_r+0x22>
 8004174:	6820      	ldr	r0, [r4, #0]
 8004176:	1821      	adds	r1, r4, r0
 8004178:	428b      	cmp	r3, r1
 800417a:	bf01      	itttt	eq
 800417c:	6819      	ldreq	r1, [r3, #0]
 800417e:	685b      	ldreq	r3, [r3, #4]
 8004180:	1809      	addeq	r1, r1, r0
 8004182:	6021      	streq	r1, [r4, #0]
 8004184:	6063      	str	r3, [r4, #4]
 8004186:	6054      	str	r4, [r2, #4]
 8004188:	e7cb      	b.n	8004122 <_free_r+0x22>
 800418a:	bd38      	pop	{r3, r4, r5, pc}
 800418c:	200010ec 	.word	0x200010ec

08004190 <_init>:
 8004190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004192:	bf00      	nop
 8004194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004196:	bc08      	pop	{r3}
 8004198:	469e      	mov	lr, r3
 800419a:	4770      	bx	lr

0800419c <_fini>:
 800419c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800419e:	bf00      	nop
 80041a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041a2:	bc08      	pop	{r3}
 80041a4:	469e      	mov	lr, r3
 80041a6:	4770      	bx	lr
